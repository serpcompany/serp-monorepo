[
  {
    "owner": "pixaranimationstudios",
    "repo": "openusd",
    "content": "TITLE: Defining Solar System Scene in USD\nDESCRIPTION: This snippet demonstrates a USD scene description for a solar system, showcasing references, inheritance, and variants. It defines a class for planets and creates Earth, Mars, and Saturn with different properties.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/usdfaq.rst#2025-04-23_snippet_0\n\nLANGUAGE: USDA\nCODE:\n```\n#usda 1.0\n\nclass \"_class_Planet\"\n{\n    bool has_life = False\n}\n\ndef Xform \"SolarSystem\"\n{\n    def \"Earth\" (\n        references = @./planet.usda@</Planet>\n    )\n    {\n        bool has_life = True\n        string color = \"blue\"\n    }\n\n    def \"Mars\" (\n        references = @./planet.usda@</Planet>\n    )\n    {\n        string color = \"red\"\n    }\n\n    def \"Saturn\" (\n        references = @./planet.usda@</Planet>\n        variants = {\n            string rings = \"with_rings\"\n        }\n    )\n    {\n        string color = \"beige\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying and Using Single-Apply API Schema in Python\nDESCRIPTION: This Python code demonstrates how to apply a single-apply API schema (UsdShadeMaterialBindingAPI) to a prim and then use it to bind a material.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbindingAPI = UsdShade.MaterialBindingAPI.Apply(prim)\nbindingAPI.Bind(materialPrim)\n```\n\n----------------------------------------\n\nTITLE: Creating a USD Stage with Python\nDESCRIPTION: Python script that creates a USD stage with a transform and a sphere, then saves it to a file. It uses the pxr library to define a hierarchy with a transform (/hello) containing a sphere (/hello/world).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_helloworld.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pxr import Usd, UsdGeom\nstage = Usd.Stage.CreateNew('HelloWorld.usda')\nxformPrim = UsdGeom.Xform.Define(stage, '/hello')\nspherePrim = UsdGeom.Sphere.Define(stage, '/hello/world')\nstage.GetRootLayer().Save()\n```\n\n----------------------------------------\n\nTITLE: Configuring Spotlights with ShapingAPI in USD Scene - usda\nDESCRIPTION: Demonstrates the creation of three SphereLight primitives with varying cone softness using the ShapingAPI extension in Universal Scene Description ASCII (.usda). Dependencies include the ShapingAPI schema applied to each light, and USD core support for referencing and collection masking. Inputs include the cone angle, cone softness, radius, color, intensity, and transformation properties. Softness values of 0, 0.25, and 0.75 produce hard, softer, and very soft-edged spotlights, respectively. Lights are linked to specific geometric primitives (spheres and a plane) grouped under TestGeom. Output is a properly grouped USD scope containing configured lights and geometry for rendering spotlight variations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdLux/userDoc/overview.md#2025-04-23_snippet_8\n\nLANGUAGE: usda\nCODE:\n```\ndef Scope \"Lights\"\n{\n    def SphereLight \"Light1\"\n    (\n        prepend apiSchemas = [\"ShapingAPI\"]\n    )\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestGeom/Sphere1>,\n            </TestGeom/Plane>\n        ]        \n\n        float inputs:radius = 1\n        color3f inputs:color = (1, 1, 1)\n        float inputs:intensity = 10.0\n\n        # The following provide a spotlight with hard edges\n        float inputs:shaping:cone:angle = 25.0\n        float inputs:shaping:cone:softness = 0\n\n        double3 xformOp:translate = (-5, 2, -7)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n    def SphereLight \"Light2\"\n    (\n        references = </Lights/Light1>\n    )\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestGeom/Sphere2>,\n            </TestGeom/Plane>\n        ]        \n\n        # The following provide a spotlight with soft edges\n        float inputs:shaping:cone:softness = 0.25\n        double3 xformOp:translate = (0, 2, -7)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n    def SphereLight \"Light3\"\n    (\n        references = </Lights/Light1>\n    )\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestGeom/Sphere3>,\n            </TestGeom/Plane>\n        ]        \n\n        # The following provide a spotlight with softer edges\n        float inputs:shaping:cone:softness = 0.75\n        double3 xformOp:translate = (5, 2, -7)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n}\n\ndef Xform \"TestGeom\"\n{\n    def Sphere \"Sphere1\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (-5, 0, -12)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n    def Sphere \"Sphere2\"\n    (\n        references = </TestGeom/Sphere1>\n    )\n    {\n        double3 xformOp:translate = (0, 0, -12)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n    def Sphere \"Sphere3\"\n    (\n        references = </TestGeom/Sphere1>\n    )\n    {\n        double3 xformOp:translate = (5, 0, -12)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Plane \"Plane\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double length = 20\n        double width = 20\n        double3 xformOp:translate = (0, 0, -14)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mesh Lights in USD\nDESCRIPTION: Shows how to use MeshLightAPI to create a light from arbitrary geometry. The example creates a mesh light that illuminates four spheres, demonstrating the application of light behavior to mesh geometry.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/overview.md#2025-04-23_snippet_12\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    upAxis = \"Y\"\n)\n\ndef Xform \"MeshLight\" (\n)\n{\n    double xformOp:rotateX = -90\n    #double3 xformOp:translate = (0, 10, 0)\n    uniform token[] xformOpOrder = [\"xformOp:rotateX\", \"xformOp:translate\"]\n\n    def Mesh \"Mesh\" (\n        prepend apiSchemas = [\"MeshLightAPI\"]\n    )\n    {\n        color3f inputs:color = (1, 1, 1)\n        float inputs:intensity = 1.0\n\n        # ...faceVertexCounts/Indices/points omitted for brevity...\n    }\n}\n\ndef Xform \"TestSpheres\"\n{\n    def Sphere \"Sphere1\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (-2.5, 3, 0)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Sphere \"Sphere2\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (0, 3, -4)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Sphere \"Sphere3\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (2.5, 3, 0)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Sphere \"Sphere4\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (0, 3, 4)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Blocking Primvar Attribute in OpenUSD using Python\nDESCRIPTION: Demonstrates how to block a primvar attribute and export the stage to a string. This is useful for removing or nullifying primvar data.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/primvars.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nprimvar.GetAttr().Block()\n\nprint(stage.ExportToString())\n```\n\n----------------------------------------\n\nTITLE: Accessing USD Prims via Stage\nDESCRIPTION: Demonstrates how to access prims from a USD stage using path identifiers, showing both direct string path construction and incremental path building approaches\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/objectModel.md#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// SdfPath identifiers can be constructed most efficiently by using SdfPath\n// API to build up the path incrementally; however, they can always also \n// be constructed from a full string representation; we demonstrate both forms.\nSdfPath worldPath = SdfPath(\"/World\");\nUsdPrim world = stage->GetPrimAtPath(worldPath);\nUsdPrim sets  = stage->GetPrimAtPath(worldPath.AppendChild(TfToken(\"Sets\")));\nUsdPrim fx    = stage->GetPrimAtPath(worldPath.AppendChild(TfToken(\"Fx\")));\n```\n\n----------------------------------------\n\nTITLE: Listing Property Names of USD Prims in Python\nDESCRIPTION: Demonstrates how to list available property names for USD prims using the GetPropertyNames() method.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_inspect_and_author_props.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> xform.GetPropertyNames()\n['proxyPrim', 'purpose', 'visibility', 'xformOpOrder']\n>>> sphere.GetPropertyNames()\n['doubleSided', 'extent', 'orientation', 'primvars:displayColor',\n'primvars:displayOpacity', 'proxyPrim', 'purpose', 'radius',\n'visibility', 'xformOpOrder']\n```\n\n----------------------------------------\n\nTITLE: Creating a UsdPreviewSurface Shader in USD\nDESCRIPTION: This code shows how to create a physically-based surface shader using UsdPreviewSurface. It creates the shader prim, sets its ID to the UsdPreviewSurface shader type, configures roughness and metallic parameters, and connects it to the material's surface output.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_simple_shading.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npbrShader = UsdShade.Shader.Define(stage, '/TexModel/boardMat/PBRShader')\npbrShader.CreateIdAttr(\"UsdPreviewSurface\")\npbrShader.CreateInput(\"roughness\", Sdf.ValueTypeNames.Float).Set(0.4)\npbrShader.CreateInput(\"metallic\", Sdf.ValueTypeNames.Float).Set(0.0)\n\nmaterial.CreateSurfaceOutput().ConnectToSource(pbrShader.ConnectableAPI(), \"surface\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Light-linking and Shadow-linking in USD\nDESCRIPTION: This example demonstrates light-linking and shadow-linking in USD using collections. A SphereLight is configured to illuminate only Sphere1, Sphere3, and the Ground using the lightLink collection. Shadow-linking is implemented using a path expression that matches only Sphere2, controlling which objects cast shadows from the light. This demonstrates both explicit relationship-based and pattern-based collection membership.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdLux/userDoc/overview.md#2025-04-23_snippet_13\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n)\n\ndef Scope \"Lights\"\n{\n    def SphereLight \"Light\"\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestGeom/Sphere1>,\n            </TestGeom/Sphere3>,\n            </TestGeom/Ground>\n        ]        \n        uniform bool collection:shadowLink:includeRoot = 0\n        pathExpression collection:shadowLink:membershipExpression = \"/TestGeom/*2\" \n\n        color3f inputs:color = (1, 1, 1)\n        float inputs:radius = 1.0\n        float inputs:intensity = 10.0\n\n        double3 xformOp:translate = (0, 0, 2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n}\n\ndef Xform \"TestGeom\"\n{\n    def Sphere \"Sphere1\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (-2.5, 0, -2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Sphere \"Sphere2\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (0, 0, -2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Sphere \"Sphere3\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (2.5, 0, -2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Cube \"Ground\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double size = 8\n        double3 xformOp:translate = (0, 0, -8)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up USD Sequence and Shot with Python\nDESCRIPTION: Uses custom scripts to set up a sequence and shot structure in USD, demonstrating composition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_end_to_end.rst#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\npython scripts/create_shot.py s00 -o shots/s00 -b assets/shot.usd\npython scripts/create_shot.py s00_01 -o shots/s00_01 -b shots/s00/s00.usd\n```\n\n----------------------------------------\n\nTITLE: Implementing References in VariantSets\nDESCRIPTION: Example of a VariantSet containing variants that reference different USD assets. Changing the variant selection controls which asset is referenced in the scene.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_69\n\nLANGUAGE: usda\nCODE:\n```\nover \"Model\" (\n    prepend variantSets = \"referenceVariantSet\"\n    variants = {\n       string referenceVariantSet = \"asset1\"\n    }\n)\n{\n    variantSet \"referenceVariantSet\" = {\n        \"asset1\" (\n            prepend references = @Asset1.usda@\n        ) {          \n        }\n        \"asset2\" (\n            prepend references = @Asset2.usda@\n        ) {          \n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Concrete IsA Schema in USD\nDESCRIPTION: This USDA snippet demonstrates how to define a simple non-concrete IsA schema prim with one attribute and one relationship. The schema is Typed but cannot be instantiated on a UsdStage.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_generating_new_schema.rst#2025-04-23_snippet_2\n\nLANGUAGE: usda\nCODE:\n```\nclass \"SimplePrim\" (\n    doc = \"\"\"An example of an untyped schema prim. Note that it does not \n             specify a typeName\"\"\"\n    # IsA schemas should derive from </Typed>, which is defined in the \n    # sublayer usd/schema.usda.\n    inherits = </Typed>\n    customData = {\n        # Provide a different class name for the C++ and python schema \n        # classes. This will be prefixed with libraryPrefix.\n        # In this case, the class name becomes UsdSchemaExamplesSimple.\n        string className = \"Simple\"\n    }\n)  {\n    int intAttr = 0 (\n        doc = \"An integer attribute with fallback value of 0.\"\n    )\n    rel target (\n        doc = \"\"\"A relationship called target that could point to another \n                 prim or a property\"\"\"\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Primvars for Texture Coordinates in USD\nDESCRIPTION: This example shows how to define primvars for texture coordinates (UVs) on a mesh in USD. It specifies four texture coordinates for a quad mesh using the primvars:st attribute with faceVarying interpolation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_10\n\nLANGUAGE: usda\nCODE:\n```\ndef Mesh \"Mesh\"\n{\n    int[] faceVertexCounts = [4]\n    int[] faceVertexIndices = [0, 1, 3, 2]\n    point3f[] points = [(-5, 0, 5), (5, 0, 5), (-5, 0, -5), (5, 0, -5)]\n\n    texCoord2f[] primvars:st = [(0, 0), (0, 1), (1, 1), (1, 0)] ( \n        interpolation = \"faceVarying\"\n    )            \n}\n```\n\n----------------------------------------\n\nTITLE: Binding Material to Geometry in USD\nDESCRIPTION: This final snippet shows how to bind a material to geometry. It applies the MaterialBindingAPI to the billboard mesh, binds the created material to it, and saves the stage. This completes the material assignment process.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_simple_shading.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nbillboard.GetPrim().ApplyAPI(UsdShade.MaterialBindingAPI)\nUsdShade.MaterialBindingAPI(billboard).Bind(material)\n\nstage.Save()\n```\n\n----------------------------------------\n\nTITLE: USD ASCII File Content Example\nDESCRIPTION: Example of the text content of a USD file in ASCII format (.usda). This shows the human-readable representation of the scene hierarchy with a transform named 'hello' containing a sphere named 'world'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_helloworld.rst#2025-04-23_snippet_3\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\ndef Xform \"hello\"\n{\n    def Sphere \"world\"\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Computing and Caching Light List in Python\nDESCRIPTION: This example shows how to compute a light list and then cache it on a model hierarchy prim using ComputeLightList() and StoreLightList(). This allows for faster traversal in scenarios where upfront computation is preferred.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/LightListAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlistAPI = UsdLux.LightListAPI(stage.GetPrimAtPath(\"/World\"))\nignoreCache = UsdLux.LightListAPI.ComputeModeIgnoreCache\ncomputedLights = listAPI.ComputeLightList(ignoreCache)\n# Cache computed list\nlistAPI.StoreLightList(computedLights)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple VariantSet in USD\nDESCRIPTION: Complete example of a USD file defining a VariantSet named \"shapeVariant\" with multiple geometric primitive variants. Each variant creates a different type of shape prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_70\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\ndef Xform \"Implicits\" (\n    append variantSets = \"shapeVariant\"\n)\n{\n    variantSet \"shapeVariant\" = {\n        \"Capsule\" {\n            def Capsule \"Pill\"\n            {\n            }\n        }\n        \"Cone\" {\n            def Cone \"PartyHat\"\n            {\n            }\n        }\n        \"Cube\" {\n            def Cube \"Box\"\n            {\n            }\n        }\n        \"Cylinder\" {\n            def Cylinder \"Tube\"\n            {\n            }\n        }\n        \"Sphere\" {\n            def Sphere \"Ball\"\n            {\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Local Opinions in USD using Python\nDESCRIPTION: Opens a USD stage and clears the locally authored displayColor opinion on a Sphere to allow variant opinions to take effect. Demonstrates how to use the UsdGeom.Gprim API to access attributes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_authoring_variants.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pxr import Usd, UsdGeom\nstage = Usd.Stage.Open('HelloWorld.usda')\ncolorAttr = UsdGeom.Gprim.Get(stage, '/hello/world').GetDisplayColorAttr()\ncolorAttr.Clear()\nprint(stage.GetRootLayer().ExportToString())\n```\n\n----------------------------------------\n\nTITLE: Configuring a USD Stage for Value Clip Interpolation (usda)\nDESCRIPTION: Defines a USD stage (`stage.usd`) that utilizes value clips defined in separate files (`clip1.usd` to `clip4.usd`) and a manifest (`manifest.usd`). It sets `interpolateMissingClipValues` to `true` in the `clips` dictionary, enabling interpolation of attribute `a` over time based on the `active` time mapping and `assetPaths`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/valueClips.md#2025-04-23_snippet_10\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\ndef \"TestModel\" (\n    clips = {\n        dictionary default = {\n            double2[] active = [(1, 0), (2, 1), (3, 2), (4, 3)]\n            asset[] assetPaths = [@./clip1.usd@, @./clip2.usd@, @./clip3.usd@, @./clip4.usd@]\n            asset manifestAssetPath = @./manifest.usd@\n            string primPath = \"/Model\"\n            bool interpolateMissingClipValues = true\n        }\n    }\n)\n{\n    double a\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Initial USD Stage with Time Range\nDESCRIPTION: Sets up a new USD stage with Z as the up axis and establishes a time range from frame 1 to 192 (8 seconds at 24 fps) for animation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_xforms.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# This is an example script from the USD tutorial,\n# \"Transformations, Time-sampled Animation, and Layer Offsets\".\n#\n# When run, it will generate a series of usda files in the current\n# directory that illustrate each of the steps in the tutorial.\n#\nfrom pxr import Usd, UsdGeom, Gf, Sdf\n\ndef MakeInitialStage(path):\n    stage = Usd.Stage.CreateNew(path)\n    UsdGeom.SetStageUpAxis(stage, UsdGeom.Tokens.z)\n    stage.SetStartTimeCode(1)\n    stage.SetEndTimeCode(192)\n    return stage\n\ndef Step1():\n    stage = MakeInitialStage('Step1.usda')\n    stage.SetMetadata('comment', 'Step 1: Start and end time codes')\n    stage.Save()\n```\n\n----------------------------------------\n\nTITLE: Basic Stage Traversal using Python Generator\nDESCRIPTION: Demonstrates the use of Usd.Stage.Traverse() to iterate through all prims on a stage in depth-first order. This is a convenient method that visits all active, defined, loaded and concrete prims in the composed scene.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_traversing_stage.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> [x for x in usdviewApi.stage.Traverse()]\n[Usd.Prim(</refSphere>), Usd.Prim(</refSphere/world>),\n Usd.Prim(</refSphere2>), Usd.Prim(</refSphere2/world>)]\n```\n\n----------------------------------------\n\nTITLE: Declaring usdProcImaging Library with Dependencies and Resources - CMake\nDESCRIPTION: This snippet defines the 'usdProcImaging' library using the custom pxr_library macro. It specifies dependencies on 'usdImaging' and 'usdProc' libraries, registers the public class 'generativeProceduralAdapter', exports the header 'api.h', and includes the plugin metadata resource 'plugInfo.json'. All listed files and dependencies must exist and be accessible within the CMake build context. The macro encapsulates the build configuration required to produce a dynamic/static library for the OpenUSD imaging pipeline.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdProcImaging/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_library(usdProcImaging\n    LIBRARIES\n        usdImaging\n        usdProc\n\n    PUBLIC_CLASSES\n        generativeProceduralAdapter\n\n    PUBLIC_HEADERS\n        api.h\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Namespace Editing with Dependent Stages\nDESCRIPTION: Demonstrates how to use the UsdNamespaceEditor with dependent stages, updating references across multiple stages.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nstage1 = Usd.Stage.Open(\"layer1.usda\")\nstage2 = Usd.Stage.Open(\"layer2.usda\")\n\n# Create a namespace editor for stage1\neditor = Usd.NamespaceEditor(stage1)\n\n# Add stage2 as a dependent stage for our stage1 editor\neditor.AddDependentStage(stage2)\n\n# Move /Prim1/Child to /Prim1/RenamedChild. This will not only \n# update the prims and references in stage1, but also update the\n# OtherStageRef2 reference in stage2\neditor.MovePrimAtPath('/Prim1/Child', '/Prim1/RenamedChild')\neditor.ApplyEdits()\n```\n\n----------------------------------------\n\nTITLE: Defining Material Sync Modes for UsdLux Light API\nDESCRIPTION: Specifies the token values for the materialSyncMode input of the LightAPI, which determines how the light interacts with bound materials. It includes three modes: materialGlowTintsLight, independent, and noMaterialResponse.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_geometry_lights.rst#2025-04-23_snippet_4\n\nLANGUAGE: usda\nCODE:\n```\nmaterialSyncMode = \"materialGlowTintsLight\"\nmaterialSyncMode = \"independent\"\nmaterialSyncMode = \"noMaterialResponse\"\n```\n\n----------------------------------------\n\nTITLE: Overriding Prims in USDA\nDESCRIPTION: Example USDA file (main.usda) that sublayers model.usda and overrides prims.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_1\n\nLANGUAGE: USDA\nCODE:\n```\n#usda 1.0 \n(\n    subLayers = [\n        @model.usda@\n    ]\n)\n\nover \"modelScope\" ()\n{\n    over \"model1\" ()\n    {\n        custom string department = \"department N\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Python USD Script\nDESCRIPTION: Shell command to execute the Python script that creates the HelloWorld.usda file. This command should be run from the root directory of the project.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_helloworld.rst#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ python extras/usd/tutorials/helloWorld/helloWorld.py\n```\n\n----------------------------------------\n\nTITLE: Defining UsdPreviewSurface Shader in USD\nDESCRIPTION: Implementation of the UsdPreviewSurface shader with complete specification of inputs and outputs for physically-based rendering. Includes parameters for both metallic and specular workflows, along with documentation for each input parameter.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/spec_usdpreviewsurface.rst#2025-04-23_snippet_1\n\nLANGUAGE: usda\nCODE:\n```\ndef Shader \"UsdPreviewSurface\" (\n    doc = \"Preview surface specification\"\n    sdrMetadata = {\n       token role = \"surface\"\n    }\n)\n{\n    uniform token info:id = \"UsdPreviewSurface\"\n\n    # Outputs\n    token outputs:surface\n    token outputs:displacement\n \n    # Inputs\n    color3f inputs:diffuseColor = (0.18, 0.18, 0.18) (\n        doc = \"\"\"Parameter used as diffuseColor when using the specular\n                 workflow, when using metallic workflow this is interpreted\n                 as albedo.\"\"\"\n    )\n\n    color3f inputs:emissiveColor = (0.0, 0.0, 0.0) (\n        doc = \"\"\"Emissive component.\"\"\"\n    )\n\n    int inputs:useSpecularWorkflow = 0 (\n        connectability = \"interfaceOnly\"\n        doc = \"\"\"This node can fundamentally operate in two modes :\n            Specular workflow where you provide a texture/value to the\n            \"specularColor\" input. Or, Metallic workflow where you\n            provide a texture/value to the \"metallic\" input.\"\"\"\n    )\n \n    color3f inputs:specularColor = (0.0, 0.0, 0.0) (\n        doc = \"\"\"Used only in the specular workflow.\n             Specular color to be used.\n             This is the color at 0 incidence. Edge color is assumed white.\n             Transition between the two colors according to Schlick fresnel \n             approximation.\"\"\"\n    )\n \n    float inputs:metallic = 0.0 (\n        doc = \"\"\"Used only in the metalness workflow.\n            1 for metallic surfaces and 0 for non-metallic.\n\t\t\t- If metallic is 1, then both F0 (reflectivity at 0 degree incidence) \n\t\t\tand edge F90 reflectivity will simply be the Albedo.\n\t\t\t- If metallic is 0, then Albedo is ignored in the calculation of F0 \n\t\t\tand F90; F0 is derived from ior via ( (1-ior)/(1+ior) )^2 and F90 is white. \n\t\t\tIn between, we interpolate.\"\"\"\n    )\n \n    float inputs:roughness = 0.5 (\n        doc = \"\"\"Roughness for the specular lobe. The value ranges from 0 to 1, \n        which goes from a perfectly specular surface at 0.0 to maximum roughness \n        of the specular lobe. This value is usually squared before use with a \n        GGX or Beckmann lobe.\"\"\"\n    )\n \n    float inputs:clearcoat = 0.0 (\n        doc = \"\"\"Second specular lobe amount. The color is white. Clearcoat \n        results are calculated using the same normal map data used by the \n        primary specular lobe.\"\"\"\n    )\n \n    float inputs:clearcoatRoughness = 0.01 (\n        doc = \"\"\"Roughness for the second specular lobe. Clearcoat results \n        are calculated using the same normal map data used by the primary \n        specular lobe.\"\"\"\n    )\n \n    float inputs:opacity = 1.0 (\n        doc = \"\"\"Opacity of the material.\"\"\"\n    )\n\n\n    float inputs:opacityThreshold = 0.0 (\n        connectability = \"interfaceOnly\"\n        doc = \"\"\"Threshold used to determine opacity values that will be \n\t\tconsidered fully transparent. A value of 0.0 indicates that no masking \n\t\tis applied to the opacity input, while a value greater than 0.0 indicates \n\t\tthat rendering of the surface is limited to the areas where the opacity \n\t\tis greater or equal to that value. Note that when opacityThreshold is \n\t\tgreater than zero, the opacity values less than the opacityThreshold will \n\t\tnot be rendered, and the opacity values greater than or equal to the \n\t\topacityThreshold will be fully visible.\"\"\"\n    )\n\n    float inputs:ior = 1.5 (\n        doc = \"\"\"Index of Refraction to be used for translucent objects and \n\t\t\t\t objects with specular components, including the clearcoat\n                 if clearcoat > 0.\"\"\"\n    )\n\n    normal3f inputs:normal = (0.0, 0.0, 1.0) (\n        doc = \"\"\"Expects normal in tangent space [(-1,-1,-1), (1,1,1)]\n            This means your texture reader implementation should provide\n            data to this node that is properly scaled and ready\n            to be consumed as a tangent space normal.\n            If the texture has 8 bits per component, then scale and bias \n            must be adjusted to be (2.0, 2.0, 2.0, 1.0) and (-1, -1, -1, 0) \n            respectively in order to satisfy tangent space requirements. \n            Normal map data is commonly expected to be linearly encoded. \n            However, many image-writing tools automatically set the profile \n            of three-channel, 8-bit images to SRGB. To prevent an unwanted \n            transformation, the sourceColorSpace must also be set to \"raw\".\n            \"\"\"\n    )\n\n    float inputs:displacement = 0.0 (\n        doc = \"\"\"Displacement in the direction of the normal. \"\"\"\n    )\n\n    float inputs:occlusion = 1.0 (\n        doc = \"\"\"Occlusion signal. This provides extra information about the \n        occlusion of different parts of the mesh that this material is applied \n        to.  Occlusion only makes sense as a surface-varying signal, and \n        pathtracers will likely choose to ignore it.  An occlusion value of 0.0 \n        means the surface point is fully occluded by other parts of the surface, \n        and a value of 1.0 means the surface point is completely unoccluded by \n        other parts of the surface. \"\"\"\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Opening USD Stage and Getting Prims in Python\nDESCRIPTION: Opens a USD stage from a file and retrieves specific prims using their paths.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_inspect_and_author_props.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pxr import Usd, Vt\nstage = Usd.Stage.Open('HelloWorld.usda')\nxform = stage.GetPrimAtPath('/hello')\nsphere = stage.GetPrimAtPath('/hello/world')\n```\n\n----------------------------------------\n\nTITLE: Defining Basic USD Marble Asset\nDESCRIPTION: A simple USD asset definition for a green marble, demonstrating basic prim and geometry structure with display color\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_33\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    defaultPrim = \"Marble\"\n)\n\ndef Xform \"Marble\" (\n    kind = \"component\"\n)\n{\n    def Sphere \"marble_geom\"\n    {\n        color3f[] primvars:displayColor = [ (0, 1, 0) ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Light Scalar with Cone Softness\nDESCRIPTION: Mathematical formula for smoothly interpolating light emission based on cone angle and softness settings.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/ShapingAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: math\nCODE:\n```\n\\begin{aligned} \n&𝛳_{offAxis} = acos(lightAxis • emissionDir) \\\\\n&𝛳_{cutoff} = toRadians(coneAngle) \\\\\n&𝛳_{smoothStart} = lerp(coneSoftness, 𝛳_{cutoff}, 0) \\\\\n\\\\\n&L_{Scalar} = L_{Scalar} ⋅ (1 - smoothStep(𝛳_{offAxis},𝛳_{smoothStart},𝛳_{cutoff})\n\\end{aligned}\n```\n\n----------------------------------------\n\nTITLE: Accessing Instance and Prototype Prims in USD\nDESCRIPTION: Shows how to access instance prims, their prototypes, and child prims in USD. Demonstrates the difference between instance and non-instance prims.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/instancing.md#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n>>> stage = Usd.Stage.Open('ParkingLot.usd')\n\n# Car_1 doesn't make any child prims available since it's an instance prim;\n# its children in the scenegraph are parented beneath the prototype prim.\n>>> car_1 = stage.GetPrimAtPath('/ParkingLot/Car_1')\n>>> car_1.IsInstance()\nTrue\n>>> car_1.GetChildren()\n[]\n\n# Consumers can query the instance's prototype for its child prims.\n>>> car_1.GetPrototype().GetChildren()\n[Usd.Prim(</__Prototype_1/Body>), Usd.Prim(</__Prototype_1/Door>)]\n>>> list(Usd.PrimRange(car_1.GetPrototype()))\n[Usd.Prim(</__Prototype_1>), Usd.Prim(</__Prototype_1/Body>), Usd.Prim(</__Prototype_1/Door>)]\n\n# Car_3's child prims can be accessed directly since it's not an instance prim.\n>>> car_3 = stage.GetPrimAtPath('/ParkingLot/Car_3')\n>>> car_3.IsInstance()\nFalse\n>>> car_3.GetChildren()\n[Usd.Prim(</ParkingLot/Car_3/Body>), Usd.Prim(</ParkingLot/Car_3/Door>)]\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for USD Threading Model\nDESCRIPTION: Detailed documentation explaining USD's threading model including safety guarantees and performance considerations. Describes the multiple readers or single writer pattern and explains thread-safety in context of UsdStage and SdfLayer operations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/multiThreading.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Threading Model and Performance Considerations {#Usd_Page_MultiThreading}\n\nstl threading model : multiple readers *or* a single writer\n\nAlthough some clients may find it inconvenient that they must provide their\nown exclusive sections for writing to the same stage from multiple threads,\nwhat *all* clients get in exchange is a thread-efficient USD core, in which\nnearly all read access to USD data is lockless.\n\n## Thread-safety Guarantee {#Usd_ThreadSafetyModel}\n\nAny UsdStage-mutating or SdfLayer-mutating operation considered a write.  \nUsdStage::Load() and UsdPrim::Load() (and unload) are considered write \noperations because they mutate a stage's contents, even though no scene \ndescription is authored.\n\nAlthough it is not possible for multiple threads to simultaneously write\n\"to the same stage\", it is safe for different threads to write simultaneously\nto *different* stages.  Note the subtlety here of what \"different stages\"\nmeans, however.  If stages A and B consist each solely of layers A.usd and\nB.usd, respectively, then two different threads are entirely free to mutate\nthe two stages simultaneously.  However, if A.usd and B.usd both sublayer\nC.usd, the stages A and B, while distinct, share dependence on C.usd.  If one\nthread, therefore, is mutating C.usd, then **no other thread \ncan mutate A.usd or B.usd** because either would cause simultaneous changes\nto either stage A or stage B.\n```\n\n----------------------------------------\n\nTITLE: Defining and Binding Materials with Purpose in USDA\nDESCRIPTION: This USDA snippet demonstrates defining multiple `Material` prims (`PreviewMaterial`, `Skin`, `Leather`) and binding them hierarchically within an `Xform` structure (`Bob`). It showcases how material purpose is encoded in the binding relationship name: `material:binding:preview` for preview purposes, `material:binding:full` for full render quality, and the standard `material:binding` acting as a fallback or 'all-purpose' binding. The example illustrates how different prims (`Body`, `Belt`) within the hierarchy can inherit or override bindings based on their specificity and purpose.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdshade.rst#2025-04-23_snippet_3\n\nLANGUAGE: usda\nCODE:\n```\n.. code-block:: usda\n   :caption: Resolving Hierarchically-bound Materials\n\n   def Material \"PreviewMaterial\"\n   {\n   \toutputs:glslfx:surface.connect = </PreviewMaterial/PreviewSurface.outputs:surface>\n   \n   \tdef Shader \"PreviewSurface\"\n   \t{ ... }\n   }\n   \n   def Material \"Skin\"\n   {\n   \toutputs:ri:surface.connect = </Skin/pxrSurface1.outputs:bxdf>\n   \n   \tdef Shader \"pxrSurface1\"\n   \t{ ... }\n   }\n   \n   def Material \"Leather\"\n   {\n   \toutputs:surface.connect = </Leather/uberSurface.outputs:out>\n   \n   \tdef Shader \"uberSurface\"\n   \t{ ... }\n   }\n   \n   \n   def Xform \"Bob\"\n   {\n       rel material:binding:preview = </PreviewMaterial>\n   \n   \tdef Xform \"Geom\"\n   \t{\n   \t\tdef Mesh \"Body\"\n   \t\t{\n   \t\t\trel material:binding:full = </Skin>\n   \t\t}\n   \n           def Mesh \"Belt\"\n           {\n               rel material:binding = </Leather>\n           }\n   \t}\n   }\n```\n\n----------------------------------------\n\nTITLE: Implementing USD Material with Shaders, Textures and Primvar Readers\nDESCRIPTION: A comprehensive USD example that demonstrates material definition with PBR shader, texture connections, and primvar readers. The example shows how to define material outputs, public interfaces, texture nodes, and mesh with primvars for proper material binding.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/spec_usdpreviewsurface.rst#2025-04-23_snippet_5\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n   upAxis = \"Z\"\n)\n\ndef Material \"mat\"\n{\n    #\n    # Outputs available for the material, they are usually connected to the\n    # output of your surface node.\n    #\n    token outputs:surface.connect      = </mat/pbrMat1.outputs:surface>\n    token outputs:displacement.connect = </mat/pbrMat1.outputs:displacement>\n\n    #\n    # Public Interface Example: This is how you could define a material public interface\n    # This is an easy way for tools to quickly detect tweakable parameters\n    # inside the material network\n    #\n    float inputs:ior = 1.9 # See connection from </mat/pbrMat1.inputs:ior> to this attribute\n\n    #\n    # Parameters only useful for tangent space normal mapping\n    # Note : Currently, we only support one tangent frame\n    #\n    # Details : Name of the primvar in your geom to use for the tangents.\n    # Default : \"tangents\"\n    string inputs:frame:tangentsPrimvarName = \"tangents\"\n\n    # Details : Name of the primvar in your geom to use for the binormals\n    # Default : \"binormals\"\n    string inputs:frame:binormalsPrimvarName = \"binormals\"\n\n    # Details : Name of the texture coordinate to be use to calculate\n    #            the tangent frame. Mikktspace or similar is recommended for\n    #            consistency\n    # Default : \"st\"\n    string inputs:frame:stPrimvarName = \"st\"\n\n    #\n    # Preview surface shader.\n    #\n    def Shader \"pbrMat1\"\n    {\n        # Indicate the type of the node.\n        uniform token info:id = \"UsdPreviewSurface\"\n\n        # Outputs available in this shader.\n        token outputs:surface\n        token outputs:displacement\n\n        # Material Inputs\n        int inputs:useSpecularWorkflow       = 0\n        color3f  inputs:diffuseColor.connect = </mat/baseColorTex.outputs:rgb>\n        color3f  inputs:specularColor        = (0, 0, 0)\n        color3f  inputs:emissiveColor        = (0, 0, 0)\n        float    inputs:displacement         = 0.0\n        float    inputs:opacity              = 1.0\n        float    inputs:opacityThreshold     = 0.0\n        float    inputs:roughness            = 0.01\n        float    inputs:metallic.connect     = </mat/metallicTex.outputs:r>\n        float    inputs:clearcoat.connect    = </mat/clearcoatTex.outputs:r>\n        float    inputs:clearcoatRoughness.connect = </mat/clearcoatTex.outputs:g>\n        float    inputs:occlusion.connect    = </mat/PrimvarOcclusion.outputs:result>\n        normal3f inputs:normal.connect       = </mat/normalTex.outputs:rgb>\n        float    inputs:ior.connect          = </mat.inputs:ior>\n    }\n\n\n    #\n    # Texture nodes bound to the texture coordinate read by the \"Primvar\" node\n    #\n    def Shader \"baseColorTex\"\n    {\n        uniform token info:id = \"UsdUVTexture\"\n        float4 inputs:fallback = (0, 1, 0, 1)\n        asset inputs:file = @mat_baseColor.png@\n        float2 inputs:st.connect = </mat/PrimvarSt1.outputs:result>\n        token inputs:wrapS = \"black\"\n        token inputs:wrapT = \"clamp\"\n        float3 outputs:rgb\n        float outputs:a\n    }\n\n    def Shader \"PrimvarSt1\"\n    {\n        uniform token info:id = \"UsdPrimvarReader_float2\"\n        string inputs:varname = \"st1\"\n        float2 outputs:result\n    }\n\n    def Shader \"metallicTex\"\n    {\n        uniform token info:id = \"UsdUVTexture\"\n        float4 inputs:fallback = (0.3, 0, 0, 1)\n        asset inputs:file = @mat_metallic.png@\n        float2 inputs:st.connect = </mat/PrimvarSt1.outputs:result>\n        float outputs:r\n    }\n\n    def Shader \"clearcoatTex\"\n    {\n        uniform token info:id = \"UsdUVTexture\"\n        float4 inputs:fallback = (.5, .5, .5, .5)\n        asset inputs:file = @mat_clearcoat.png@\n        float2 inputs:st.connect = </mat/PrimvarSt1.outputs:result>\n        float outputs:r\n        float outputs:g\n    }\n\n\n    #\n    # Example : Texture using a secondary texture coordinate for UV\n    #\n    def Shader \"normalTex\"\n    {\n        uniform token info:id = \"UsdUVTexture\"\n        float2 inputs:st.connect = </mat/PrimvarSt.outputs:result>\n        float4 inputs:scale = (2.0, 2.0, 2.0, 2.0)\n        float4 inputs:bias  = (-1.0, -1.0, -1.0, -1.0)\n        float3f outputs:rgb\n    }\n\n    def Shader \"PrimvarSt\"\n    {\n        uniform token info:id = \"UsdPrimvarReader_float2\"\n        string inputs:varname.connect = </mat.inputs:frame:stPrimvarName>\n        float2 outputs:result\n    }\n\n\n    #\n    # Example : Primvar data in the mesh being used in the material.\n    #\n    def Shader\"PrimvarOcclusion\"\n    {\n        uniform token info:id = \"UsdPrimvarReader_float\"\n        float inputs:fallback = 1.0\n        string inputs:varname = \"ao\"\n        float outputs:result\n    }\n}\n\ndef Mesh \"plane1\"\n{\n    float3[] extent = [ (-0.5, -0.1, -0.5), (0.5, 0.1, 0.5)]\n    int[] faceVertexCounts = [4, 4]\n    int[] faceVertexIndices = [0, 1, 4, 3, 1, 2, 5, 4]\n    normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)]\n    point3f[]  points = [(-0.5, 0, 0.5), (0, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0, 0, -0.5), (0.5, 0, -0.5)]\n    float[] primvars:ao = [0, 0.5, 1, 1, 0.1, 1] (\n        interpolation = \"vertex\"\n    )\n    int[] primvars:ao:indices = [0, 1, 4, 3, 2, 5]\n\n    texCoord2f[] primvars:st = [(0, 0), (0.5, 0), (0.5, 1), (0, 1), (1, 0), (1, 1)] (\n        interpolation = \"vertex\"\n    )\n    int[] primvars:st:indices = [0, 1, 4, 3, 2, 5]\n    texCoord2f[] primvars:st1 = [(0, 0), (0.5, 0), (0.5, 1), (0, 1), (1, 0), (1, 1)] (\n        interpolation = \"vertex\"\n    )\n    int[] primvars:st1:indices = [0, 1, 4, 3, 2, 5]\n    uniform token subdivisionScheme = \"none\"\n\n    rel material:binding = </mat>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Gprims with Material Bindings and Primvars\nDESCRIPTION: Shows how to define geometry prims (Cube and Sphere) with material bindings and primvars for use in shaders.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_14\n\nLANGUAGE: USDA\nCODE:\n```\ndef Cube \"cube\" (\n    prepend apiSchemas = [\"MaterialBindingAPI\"]\n)\n{\n    double3 xformOp:translate = (0, 0, 0)\n    token[] xformOpOrder = [\"xformOp:translate\"]\n\n    rel material:binding = </MatteMaterial>\n    float primvars:roughness = 1\n}\n\ndef Sphere \"sphere\" (\n    prepend apiSchemas = [\"MaterialBindingAPI\"]\n)\n{\n    double3 xformOp:translate = (0, 2, 0)\n    token[] xformOpOrder = [\"xformOp:translate\"]\n\n    rel material:binding = </MatteMaterial>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Material Binding in USD\nDESCRIPTION: Shows how to bind a material to a prim using the material:binding relationship.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_12\n\nLANGUAGE: USDA\nCODE:\n```\n# Material binding, which will access various primvars on this prim\nrel material:binding = </materials/MyMaterial>\n```\n\n----------------------------------------\n\nTITLE: Using usdview to Interactively View USD Files\nDESCRIPTION: usdview is a feature-rich tool for viewing USD files with interactive GL preview, scenegraph navigation, diagnostics, and a Python interpreter. It takes a file path and various rendering and viewing options.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toolset.rst#2025-04-23_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nusdview [-h] [--renderer RENDERER] [--select PRIMPATH]\n        [--mask PRIMPATH [PRIMPATH ...]] [--clearsettings] [--norender]\n        [--unloaded] [--timing] [--traceToFile] [--memstats]\n        [--numThreads NUMTHREADS] [--ff]\n        [--colorCorrectionMode {Disabled,sRGB,OpenColorIO}]\n        [--ocioConfig OCIOCONFIG] [--stage3d] [--verbose] [--defaultsettings]\n        [--defaultDataModel] [--profiling] [--mallocTagStats]\n        [--frameAll] [--autoPlay] [--autofocus] [--camera CAMERA]\n        [--complexity {low,medium,high,very high}]\n        [--shading {simple,full}] [--drawMode {default,wireframe,wireonshaded,smooth-shaded,flat-shaded,points}]\n        [--enableHardwareShading] [--cullBackfaces] [--showGuides]\n        [--showRender] [--showProxy] [--showRenderGuides]\n        [--showModelingGuides] [--showAllMasterPrims]\n        [--showInactivePrims]\n        [--sessionLayer SESSIONLAYER]\n        [--noInvalidateCaches]\n        [--skipVariants] [--hostedMode] [--quitAfterStartup]\n        [--scripts [SCRIPTS [SCRIPTS ...]]]\n        [--minimized]\n        [FILE]\n```\n\n----------------------------------------\n\nTITLE: Adding Variants to a Variant Set in USD\nDESCRIPTION: Adds three variants ('red', 'blue', and 'green') to the previously created 'shadingVariant' set. Illustrates how to create multiple variants that will contain different opinions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_authoring_variants.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvset.AddVariant('red')\nvset.AddVariant('blue')\nvset.AddVariant('green')\nprint(stage.GetRootLayer().ExportToString())\n```\n\n----------------------------------------\n\nTITLE: Setting Up Texture Mapping in USD with UsdUVTexture\nDESCRIPTION: This snippet demonstrates how to create a texture-based diffuse color for a shader. It creates a primvar reader for texture coordinates, a UV texture shader that reads from an image file, and connects them together in the shading network to provide diffuse color to the PBR shader.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_simple_shading.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nstReader = UsdShade.Shader.Define(stage, '/TexModel/boardMat/stReader')\nstReader.CreateIdAttr('UsdPrimvarReader_float2')\n\ndiffuseTextureSampler = UsdShade.Shader.Define(stage,'/TexModel/boardMat/diffuseTexture')\ndiffuseTextureSampler.CreateIdAttr('UsdUVTexture')\ndiffuseTextureSampler.CreateInput('file', Sdf.ValueTypeNames.Asset).Set(\"USDLogoLrg.png\")\ndiffuseTextureSampler.CreateInput(\"st\", Sdf.ValueTypeNames.Float2).ConnectToSource(stReader.ConnectableAPI(), 'result')\ndiffuseTextureSampler.CreateOutput('rgb', Sdf.ValueTypeNames.Float3)\npbrShader.CreateInput(\"diffuseColor\", Sdf.ValueTypeNames.Color3f).ConnectToSource(diffuseTextureSampler.ConnectableAPI(), 'rgb')\n```\n\n----------------------------------------\n\nTITLE: Defining AssetInfo on a Published Assembly Asset in USDA\nDESCRIPTION: This snippet demonstrates how to define assetInfo on a published assembly asset in USD ASCII format. It includes fields like identifier and name, and shows how to handle assets with embedded '@' symbols.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_6\n\nLANGUAGE: USDA\nCODE:\n```\ndef Xform \"Forest_set\" (\n    assetInfo = {\n        asset identifier = @Forest_set/usd/Forest_set.usd@\n        string name = \"Forest_set\"\n    }\n    kind = \"assembly\"\n)\n{\n    # Example of an asset that embeds the '@', and so must be delimited\n    # with the \"@@@\" form\n    asset primvars:texture = @@@body_decal.exr@v3@@@\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DiskLight with IES Profile in OpenUSD\nDESCRIPTION: This snippet shows how to configure a DiskLight using an IES profile file to control light distribution. It demonstrates setting the IES file path, angle scaling (0.3), and normalization to maintain consistent energy output. The example also includes color temperature settings to create an antique lamp effect.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/overview.md#2025-04-23_snippet_9\n\nLANGUAGE: usda\nCODE:\n```\ndef Scope \"Lights\"\n{\n    def DiskLight \"Light1\"\n    (\n        prepend apiSchemas = [\"ShapingAPI\"]        \n    )\n    {\n        float inputs:radius = 1\n\n        float inputs:shaping:ies:angleScale = 0.3\n        asset inputs:shaping:ies:file = @antique_street_lamp.ies@\n        bool inputs:shaping:ies:normalize = 1\n\n        float inputs:colorTemperature = 2500\n        bool inputs:enableColorTemperature = 1\n\n        double3 xformOp:translate = (0, 0, -6)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple USD Clip Sets\nDESCRIPTION: Example showing how to define two clip sets ('clip_set_1' and 'clip_set_2') on a prim named 'Prim'. The first uses explicit timing with active/assetPaths/times metadata, while the second uses template-based clip generation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/valueClips.md#2025-04-23_snippet_0\n\nLANGUAGE: USD\nCODE:\n```\n#usda 1.0\n\ndef \"Prim\" (\n    clips = {\n        dictionary clip_set_1 = {\n            double2[] active = [(101, 0), (102, 1), (103, 2)] \n            asset[] assetPaths = [@./clip1.usda@, @./clip2.usda@, @./clip3.usda@]\n            asset manifestAssetPath = @./clipset1.manifest.usda@\n            string primPath = \"/ClipSet1\"\n            double2[] times = [(101, 101), (102, 102), (103, 103)]\n        }\n        dictionary clip_set_2 = {\n            string templateAssetPath = \"clipset2.#.usd\"\n            double templateStartTime = 101\n            double templateEndTime = 103\n            double templateStride = 1\n            asset manifestAssetPath = @./clipset2.manifest.usda@\n            string primPath = \"/ClipSet2\"\n        }\n    }\n    clipSets = [\"clip_set_2\", \"clip_set_1\"]\n)\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SubLayers in a USD Asset (USDA)\nDESCRIPTION: This USDA snippet demonstrates the use of the `subLayers` composition arc within a `shot.usd` file. It includes references to other USD files (`shotFX.usd`, `shotAnimationBake.usd`, `sequence.usd`), establishing a layer stack where layers listed earlier are stronger than those listed later.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_45\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    subLayers = [\n        @shotFX.usd@,\n        @shotAnimationBake.usd@,\n        @sequence.usd@\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Material Public Interface Attributes in USD\nDESCRIPTION: This snippet shows how to expose shader inputs as public interface attributes on a material. It creates a token-valued input on the material to specify the texture coordinate primvar name, and connects the primvar reader's varname input to this material input.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_simple_shading.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstInput = material.CreateInput('frame:stPrimvarName', Sdf.ValueTypeNames.Token)\nstInput.Set('st')\n\nstReader.CreateInput('varname',Sdf.ValueTypeNames.Token).ConnectToSource(stInput)\n```\n\n----------------------------------------\n\nTITLE: Creating a Stage with an Override Prim in Python\nDESCRIPTION: Creates a new USD stage file with an override prim that will be used to reference the HelloWorld stage. Override prims contain speculative opinions that can be applied over concrete prims.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_referencing_layers.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrefStage = Usd.Stage.CreateNew('RefExample.usda')\nrefSphere = refStage.OverridePrim('/refSphere')\nprint(refStage.GetRootLayer().ExportToString())\n```\n\n----------------------------------------\n\nTITLE: Defining Indexed Primvars in USD\nDESCRIPTION: This snippet demonstrates how to define indexed primvars in USD. It specifies normal vectors and uses indices to reference them, reducing memory usage by avoiding repetition of values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_11\n\nLANGUAGE: usda\nCODE:\n```\nnormal3f[] primvars:normals = [(0, 0, 1),(0,0.5,0.5)] (\n    interpolation = \"faceVarying\"\n)\nint[] primvars:normals:indices = [0,0,0,0,0,1,0,0]\n```\n\n----------------------------------------\n\nTITLE: Defining Expression Variables in USD Layer Metadata\nDESCRIPTION: This snippet shows how to define expression variables of different types in the expressionVariables dictionary metadata field of a USD layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/variable_expressions.rst#2025-04-23_snippet_1\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    expressionVariables = {\n        string VARIANT_CHOICE = \"variantA\"\n        bool UseProxyModel = false\n        int64 IDENTIFIER = 3254    \n        string[] renderPassList = [\"foreground\", \"background\", \"FX\"]        \n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Checking for Schema Version in C++\nDESCRIPTION: Example of using the HasAPI method to check for a specific version of a schema. This demonstrates how version checking would be implemented in C++ code using OpenUSD.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_schema_versioning.rst#2025-04-23_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nHasAPI<NewlyAppliedSchemaAPI>(All)\n```\n\n----------------------------------------\n\nTITLE: Defining a Material in USD\nDESCRIPTION: This snippet demonstrates how to create a Material prim in USD. Materials in USD are containers for shading networks, which can include surface and displacement shaders for different rendering systems.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_simple_shading.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmaterial = UsdShade.Material.Define(stage, '/TexModel/boardMat')\n```\n\n----------------------------------------\n\nTITLE: Resolving Hierarchical Material Bindings in USDA\nDESCRIPTION: Example demonstrating how material bindings are resolved hierarchically in USD, showing the interaction between preview and renderer-specific materials. Demonstrates material binding inheritance and override behavior.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdshade.rst#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\ndef Material \"PreviewMaterial\"\n{\n\toutputs:glslfx:surface.connect = </PreviewMaterial/PreviewSurface.outputs:surface>\n\n\tdef Shader \"PreviewSurface\"\n\t{ ... }\n}\n\ndef Material \"Skin\"\n{\n\toutputs:ri:surface.connect = </Skin/pxrSurface1.outputs:bxdf>\n\n\tdef Shader \"pxrSurface1\"\n\t{ ... }\n}\n\ndef Xform \"Bob\"\n{\n    rel material:binding = </PreviewMaterial>\n\n\tdef Xform \"Geom\"\n\t{\n\t\tdef Mesh \"Body\"\n\t\t{\n\t\t\trel material:binding = </Skin>\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CanFieldChangeAffectFileFormatArguments in C++\nDESCRIPTION: Example implementation of CanFieldChangeAffectFileFormatArguments method for a dynamic file format that optimizes change detection by determining if a change to a dynamicNumber field would actually affect the generated file format arguments.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/dynamicFileFormat.md#2025-04-23_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nbool MyDynamicFileFormat::CanFieldChangeAffectFileFormatArguments(\n    const TfToken& field,\n    const VtValue& oldValue,\n    const VtValue& newValue,\n    const VtValue &dependencyContextData) const\n{\n    static const TfToken dynamicNumberToken(\"dynamicNumber\");\n    if (field == dynamicNumberToken) {\n        if (oldValue.IsEmpty() != newValue.IsEmpty()) {\n            return true;\n        }\n        const bool oldIsPositive = (oldValue.IsHolding<int>() && \n                                    oldValue.UncheckedGet<int>() > 0);\n        const bool newIsPositive = (newValue.IsHolding<int>() && \n                                    newValue.UncheckedGet<int>() > 0);\n        return oldIsPositive != newIsPositive;\n    }\n\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a DiskLight in USDA with a Sphere and Cube Scene\nDESCRIPTION: This example demonstrates how to create a basic DiskLight with a radius of 0.8 and an intensity of 20, positioned to illuminate test geometry consisting of a sphere and cube. The light is positioned above and to the side of the objects to showcase a typical lighting setup.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/DiskLight.md#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    upAxis = \"Y\"\n)\n\ndef Scope \"Lights\"\n{\n    def DiskLight \"Light1\"\n    {\n\n        float inputs:radius = 0.8 \n\n        color3f inputs:color = (1, 1, 1)\n        float inputs:intensity = 20.0\n        double3 xformOp:translate = (4, 0, 1)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n}\n\ndef Xform \"TestGeom\"\n{\n    def Sphere \"Sphere1\"\n    {\n        token purpose = \"render\"\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (0, 0, -2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Cube \"Cube\"\n    {\n        token purpose = \"render\"\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double size = 8\n        double3 xformOp:translate = (0, 0, -8)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving USD Stage Changes in Python\nDESCRIPTION: Demonstrates how to save the changes made to the USD stage back to the file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_inspect_and_author_props.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> stage.GetRootLayer().Save()\n```\n\n----------------------------------------\n\nTITLE: Scaling TimeCodes to Real Time in USD (USDA)\nDESCRIPTION: This USDA example illustrates how TimeCode values are scaled to real-time seconds. The layer defines `timeCodesPerSecond = 24`. Consequently, the `translate.timeSamples` value at TimeCode 240 corresponds to 10 seconds (240 / 24). This metadata dictates the interpretation of time coordinates within the layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_47\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    timeCodesPerSecond = 24\n    endTimeCode = 240\n    startTimeCode = 1\n)\n\ndef Xform \"Asset\"\n{\n    def Sphere \"Sphere\"\n    {\n        double3 xformOp:translate.timeSamples = {\n            1: (0, 5.0, 0),\n            240: (0, -5.0, 0),\n        }\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SphereLight and Test Geometry in USDA\nDESCRIPTION: This USDA snippet demonstrates how to create a SphereLight with a radius of 0.8, positioned near a Sphere and Cube. It showcases the basic setup of a SphereLight and its interaction with simple geometry.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/SphereLight.md#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    upAxis = \"Y\"\n)\n\ndef Scope \"Lights\"\n{\n    def SphereLight \"Light1\"\n    {\n        float inputs:radius = 0.8\n\n        color3f inputs:color = (1, 1, 1)\n        float inputs:intensity = 20.0\n        double3 xformOp:translate = (4, 0, 1)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n}\n\ndef Xform \"TestGeom\"\n{\n    def Sphere \"Sphere1\"\n    {\n        token purpose = \"render\"\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (0, 0, -2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Cube \"Cube\"\n    {\n        token purpose = \"render\"\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double size = 8\n        double3 xformOp:translate = (0, 0, -8)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Value in USD\nDESCRIPTION: Shows how to override the default value of an existing prim's attribute. This example overrides the radius of a 'Ball' prim to 50 using the 'over' specifier.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_17\n\nLANGUAGE: USDA\nCODE:\n```\nover \"Ball\" {\n    double radius = 50\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pattern-Based Collections in USDA and Python\nDESCRIPTION: Combines a USDA collection definition for configuring several key CollectionAPI properties with a Python example to programmatically set the same parameters via USD API. Shows setting expansionRule (specifies matching mode) and membershipExpression. Python example uses Usd.CollectionAPI methods to apply, set expansion rule, and assign a path expression. Inputs: property values or expressions; outputs: updated collection attributes in the scene.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_21\n\nLANGUAGE: usda\nCODE:\n```\ndef \"CollectionPrim\" (\n    prepend apiSchemas = [\"CollectionAPI:myCollection\"]\n)\n{\n    # Set the collection expansion rule to specify how the paths for collection are expanded\n    token collection:myCollection:expansionRule = \"expandPrims\"\n\n    # Set myCollection:membershipExpression with the path expression we want\n    pathExpression collection:myCollection:membershipExpression = \"/World/Light*{hasAPI:LightAPI}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Material Resolution with Purpose in C++ (Pseudocode)\nDESCRIPTION: This C++ pseudocode outlines the `GetBoundMaterial` function, which resolves the appropriate `UsdShadeMaterial` for a given `UsdPrim` and `materialPurpose`. The algorithm first checks for bindings matching the specific `materialPurpose` and then checks for the fallback `UsdShadeMaterial::AllPurpose`. For each purpose, it iterates up the prim hierarchy (`p = p.GetParent()`). Within the loop, it checks for direct bindings (`GetDirectlyBoundMaterialForPurpose`) and collection-based bindings (`GetCollectionMaterialBindingsForPurpose`), considering strength inheritance rules (`DirectBindingStrongerThanDescendants`, `collBinding.IsStrongerThanDescendants()`) and collection membership (`collBinding.GetCollection().Contains(prim)`). The first suitable material found during this prioritized search is returned.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdshade.rst#2025-04-23_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n.. code-block:: cpp\n   :caption: GetBoundMaterial()\n\n   UsdShadeMaterial GetBoundMaterial(UsdPrim const& prim, TfToken const  &materialPurpose)\n   {\n       vector<TfToken> materialPurposes = { materialPurpose, UsdShadeMaterial::AllPurpose };\n       for (auto const& purpose : materialPurposes){ \n           UsdShadeMaterial> boundMaterial;\n           for (p = prim; not p.IsPseudoRoot(); p = p.GetParent())\n           {\n   \t        if ( DirectBindingStrongerThanDescendants(p, purpose) or not boundMaterial)\n   \t        {\n   \t\t        if (UsdShadeMaterial directBind = GetDirectlyBoundMaterialForPurpose(p, purpose))\n                       boundMaterial = directBind;\n   \t        }\n       \n               for (auto const& collBinding : GetCollectionMaterialBindingsForPurpose(p, purpose))\n               {\n   \t            if (collBinding.GetCollection().Contains(prim) and\n                       (collBinding.IsStrongerThanDescendants() or not boundMaterial)){\n                       boundMaterial = collBinding.GetMaterial();\n                       // The first one we match will always be the only one we care about\n                       break;\n                   }\n   \t        }\n           }\n   \n           if (boundMaterial)\n               return boundMaterial;\n       }\n   \n       return UsdShadeMaterial();\n   }\n```\n\n----------------------------------------\n\nTITLE: Defining a Material with Primvar Reader and Preview Surface Shader\nDESCRIPTION: Demonstrates how to create a material that uses a primvar reader for roughness and connects it to a preview surface shader.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_15\n\nLANGUAGE: USDA\nCODE:\n```\ndef Material \"MatteMaterial\"\n{\n    float primvars:roughness = 0\n\n    token outputs:surface.connect = </MatteMaterial/Surface.outputs:surface>\n\n    def Shader \"Surface\"\n    {\n        uniform token info:id = \"UsdPreviewSurface\"\n        float inputs:roughness.connect = </MatteMaterial/PrimvarRoughness.outputs:result>\n        token outputs:surface\n    }\n\n    def Shader \"PrimvarRoughness\"\n    {\n        uniform token info:id = \"UsdPrimvarReader_float\"\n        string inputs:varname = \"roughness\"\n        float outputs:result\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining USD Scene Structure\nDESCRIPTION: Example USD scene definition showing basic prim hierarchy with def and over statements\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/objectModel.md#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\ndef \"World\"\n{\n    def \"Sets\"\n    {\n    }\n\n    over \"Fx\"\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RenderProduct with Multiple RenderVars in USD\nDESCRIPTION: Example showing how to set up a RenderProduct with multiple RenderVars to output different data channels such as color, alpha, directDiffuse, and ID values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_28\n\nLANGUAGE: usda\nCODE:\n```\ndef RenderProduct \"PrimaryProduct\" {\n    rel camera = </World/main_cam>\n    token productName = \"/scratch/tmp/render000009.exr\"\n    rel orderedVars = [\n        </Render/Vars/color>,\n        </Render/Vars/alpha>,\n        </Render/Vars/directDiffuse>,\n        </Render/Vars/id>\n    ]\n}\ndef Scope \"Vars\"\n{\n    def RenderVar \"color\" {\n        string sourceName = \"Ci\"\n    }\n    def RenderVar \"alpha\" {\n```\n\n----------------------------------------\n\nTITLE: Declaring an API Schema Override Flag in USDA\nDESCRIPTION: This snippet shows the syntax used within a `.usda` schema definition file to mark a property definition as an API schema override. Setting `apiSchemaOverride = true` within the property's `customData` indicates that this property definition should modify, rather than replace, a property of the same name inherited from a built-in API schema.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/generatingSchemas.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nbool apiSchemaOverride = true\n```\n\n----------------------------------------\n\nTITLE: Setting USD Sphere Radius and Extent in Python\nDESCRIPTION: Demonstrates how to set the radius of a sphere prim and update its extent accordingly.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_inspect_and_author_props.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> radiusAttr = sphere.GetAttribute('radius')\n>>> radiusAttr.Set(2)\nTrue\n>>> extentAttr.Set(extentAttr.Get() * 2)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Configuring SphereLights with Cone Settings in OpenUSD\nDESCRIPTION: This snippet demonstrates how to set up three SphereLights with varying cone settings to create spotlights with different edge softness values. It includes settings for cone angle (25 degrees) and three different softness values (0, 0.25, and 0.75) to show the progression from hard to soft edges.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/overview.md#2025-04-23_snippet_8\n\nLANGUAGE: usda\nCODE:\n```\ndef Scope \"Lights\"\n{\n    def SphereLight \"Light1\"\n    (\n        prepend apiSchemas = [\"ShapingAPI\"]\n    )\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestGeom/Sphere1>,\n            </TestGeom/Plane>\n        ]        \n\n        float inputs:radius = 1\n        color3f inputs:color = (1, 1, 1)\n        float inputs:intensity = 10.0\n\n        # The following provide a spotlight with hard edges\n        float inputs:shaping:cone:angle = 25.0\n        float inputs:shaping:cone:softness = 0\n\n        double3 xformOp:translate = (-5, 2, -7)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n    def SphereLight \"Light2\"\n    (\n        references = </Lights/Light1>\n    )\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestGeom/Sphere2>,\n            </TestGeom/Plane>\n        ]        \n\n        # The following provide a spotlight with soft edges\n        float inputs:shaping:cone:softness = 0.25\n        double3 xformOp:translate = (0, 2, -7)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n    def SphereLight \"Light3\"\n    (\n        references = </Lights/Light1>\n    )\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestGeom/Sphere3>,\n            </TestGeom/Plane>\n        ]        \n\n        # The following provide a spotlight with softer edges\n        float inputs:shaping:cone:softness = 0.75\n        double3 xformOp:translate = (5, 2, -7)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n}\n\ndef Xform \"TestGeom\"\n{\n    def Sphere \"Sphere1\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (-5, 0, -12)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n    def Sphere \"Sphere2\"\n    (\n        references = </TestGeom/Sphere1>\n    )\n    {\n        double3 xformOp:translate = (0, 0, -12)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n    def Sphere \"Sphere3\"\n    (\n        references = </TestGeom/Sphere1>\n    )\n    {\n        double3 xformOp:translate = (5, 0, -12)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Plane \"Plane\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double length = 20\n        double width = 20\n        double3 xformOp:translate = (0, 0, -14)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Variant Set in USD using Python\nDESCRIPTION: Creates a shading variant set called 'shadingVariant' on the root prim of a USD stage. Shows how to access the prim and add a variant set to it.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_authoring_variants.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrootPrim = stage.GetPrimAtPath('/hello')\nvset = rootPrim.GetVariantSets().AddVariantSet('shadingVariant')\nprint(stage.GetRootLayer().ExportToString())\n```\n\n----------------------------------------\n\nTITLE: Creating USD Marble Collection with References\nDESCRIPTION: Example showing how to create a collection of marbles by referencing a base marble asset multiple times with overrides\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_34\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\ndef Xform \"MarbleCollection\" (\n    kind = \"assembly\"\n)\n{\n    def \"Marble_Green\" (\n        references = @Marble.usd@\n    )\n    {\n        double3 xformOp:translate = (-10, 0, 0)\n        uniform token[] xformOpOrder = [ \"xformOp:translate\" ]\n    }\n\n    def \"Marble_Red\" (\n        references = @Marble.usd@\n    )\n    {\n        double3 xformOp:translate = (5, 0, 0)\n        uniform token[] xformOpOrder = [ \"xformOp:translate\" ]\n\n        over \"marble_geom\" \n        {\n            color3f[] primvars:displayColor = [ (1, 0, 0) ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Layer Offset Animation in Python\nDESCRIPTION: Creates multiple instances of the spinning top with different layer offsets to demonstrate animation timing control and transformation hierarchies.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_xforms.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef Step6():\n    # Use animated layer from Step5\n    anim_layer_path = './Step5.usda'\n\n    stage = MakeInitialStage('Step6.usda')\n    stage.SetMetadata('comment', 'Step 6: Layer offsets and animation')\n\n    left = UsdGeom.Xform.Define(stage, '/Left')\n    left_top = UsdGeom.Xform.Define(stage, '/Left/Top')\n    left_top.GetPrim().GetReferences().AddReference(\n        assetPath = anim_layer_path,\n        primPath = '/Top')\n\n    middle = UsdGeom.Xform.Define(stage, '/Middle')\n    middle.AddTranslateOp().Set(value=(2, 0, 0))\n    middle_top = UsdGeom.Xform.Define(stage, '/Middle/Top')\n    middle_top.GetPrim().GetReferences().AddReference(\n        assetPath = anim_layer_path,\n        primPath = '/Top',\n        layerOffset = Sdf.LayerOffset(offset=96))\n\n    right = UsdGeom.Xform.Define(stage, '/Right')\n    right.AddTranslateOp().Set(value=(4, 0, 0))\n    right_top = UsdGeom.Xform.Define(stage, '/Right/Top')\n    right_top.GetPrim().GetReferences().AddReference(\n        assetPath = anim_layer_path,\n        primPath = '/Top',\n        layerOffset = Sdf.LayerOffset(scale=0.25))\n\n    stage.Save()\n```\n\n----------------------------------------\n\nTITLE: Inspecting USD File Content with usdcat\nDESCRIPTION: Uses the usdcat tool to display the contents of a USD file in text format. This command shows the structure of a simple Sphere.usda file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_converting_between_layer_formats.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ usdcat Sphere.usda\n```\n\nLANGUAGE: usd\nCODE:\n```\n#usda 1.0\ndef Sphere \"sphere\"\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Creating USD Scene with Generic Prims in Python\nDESCRIPTION: This code snippet demonstrates how to create a simple USD scene using generic prims. It defines an Xform prim named 'hello' and a Sphere prim named 'world' as a child of 'hello'. The scene is then saved to a file named 'HelloWorldRedux.usda'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_helloworld_redux.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pxr import Usd\nstage = Usd.Stage.CreateNew('HelloWorldRedux.usda')\nxform = stage.DefinePrim('/hello', 'Xform')\nsphere = stage.DefinePrim('/hello/world', 'Sphere')\nstage.GetRootLayer().Save()\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Variable Expressions in USD\nDESCRIPTION: This snippet demonstrates how to define expression variables in layer metadata and use them in reference paths and variant selections.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/variable_expressions.rst#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    expressionVariables = {\n        # Define path to reference that can be changed as needed\n        string ASSET_PATH = \"/finalAssets/SetA\"\n        # Define the expression variable that can be changed as needed\n        string VARIANT_CHOICE = \"variantA\"\n    }\n)\ndef \"asset0\" (\n    # Use a variable expression to complete the reference asset path\n    references = @`\"${ASSET_PATH}/extraAssets.usda\"`@</asset0>\n)\n{\n}\n\ndef Xform \"asset1\" (\n    variants = {\n        # Use a variable expression for specifying the variant\n        string displayVariantSet = \"`${VARIANT_CHOICE}`\"\n    }\n    prepend variantSets = \"displayVariantSet\"\n)\n{\n    ...displayVariantSet definition omitted...\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP URI Resolver Implementation Example\nDESCRIPTION: Shows how to implement a custom URI resolver for handling HTTP/HTTPS asset paths, including the resolver class definition and plugin registration.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_ar2.rst#2025-04-23_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nhttpResolver.h/.cpp:\n\n/// \\class HTTPResolver\n/// ArResolver implementation handling http and https asset paths.\nclass HTTPResolver : public ArResolver\n{\n    // ... implementation!\n};\n\nplugInfo.json:\n{\n    \"Plugins\": [\n        \"Info\": {\n            \"Types\": {\n                \"HTTPResolver\" : {\n                    \"bases\": [\"ArResolver\"],\n                    \"uriSchemes\": [\"http\", \"https\"]\n                }\n            }\n        },\n        ...\n     ],\n     ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Concrete IsA Schema in USD\nDESCRIPTION: This USDA snippet shows an example of a typed IsA schema class. It derives from the non-concrete </SimplePrim>, specifies a concrete typeName 'ComplexPrim', and adds a string attribute with a fallback value.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_generating_new_schema.rst#2025-04-23_snippet_3\n\nLANGUAGE: usda\nCODE:\n```\nclass ComplexPrim \"ComplexPrim\" (\n    doc = \"\"\"An example of a untyped IsA schema prim\"\"\"\n    # Inherits from </SimplePrim> defined in simple.usda.\n    inherits = </SimplePrim>\n    customData = {\n        string className = \"Complex\"\n    }\n)  {\n    string complexString = \"somethingComplex\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Hidden Property on UsdObject in C++\nDESCRIPTION: Shows how to set the hidden property on a UsdObject, which can be used to hide parameters in GUIs.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_renderers.rst#2025-04-23_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\nUsdObject::SetHidden\n```\n\n----------------------------------------\n\nTITLE: Authoring Multiple Variant Opinions in USD\nDESCRIPTION: Creates blue and green color opinions in their respective variants by switching the variant selection and using edit contexts. Shows how to author multiple variant opinions for the same attribute.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_authoring_variants.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvset.SetVariantSelection('blue')\nwith vset.GetVariantEditContext():\n    colorAttr.Set([(0,0,1)])\n\nvset.SetVariantSelection('green')\nwith vset.GetVariantEditContext():\n    colorAttr.Set([(0,1,0)])\n\nprint(stage.GetRootLayer().ExportToString())\n```\n\n----------------------------------------\n\nTITLE: Registering usdview Light Visibility Test (Varying)\nDESCRIPTION: Registers a CMake test named `testUsdviewLightVisibility_varying`. This test uses the `testusdview` command-line tool to execute the Python script `testUsdviewVaryLightVisibility.py` with the input file `testVarying.usda`. It performs perceptual image difference comparison against `visible.png` and `invisible.png` with failure thresholds of 0.05 absolute and 0.03 percent, expecting a return code of 0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdviewLightVisibility_varying\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewVaryLightVisibility.py testVarying.usda\"\n    IMAGE_DIFF_COMPARE\n        visible.png\n        invisible.png\n    FAIL 0.05\n    FAIL_PERCENT 0.03\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Prim with Default Value in USD\nDESCRIPTION: Demonstrates defining a Sphere prim named 'Ball' with a default radius value of 50. This shows the use of the 'def' specifier and setting a default attribute value.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_16\n\nLANGUAGE: USDA\nCODE:\n```\ndef Sphere \"Ball\" {\n    double radius = 50\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying and Inspecting Path Expressions with Sdf in USD Python API\nDESCRIPTION: Illustrates how to manually simplify a path expression string using the Sdf.PathExpression class in Python, accessing its text representation after USD's built-in simplification. Requires the USD Python bindings and Sdf module. Input: raw expression string; Output: simplified expression string. Useful for debugging or inspecting the effective rule USD uses for membership matching.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ntestExpressionString = \"// - /foo\"  # This should get simplified to \"~/foo\"\ntestExpression = Sdf.PathExpression(testExpressionString)\nprint(\"Simplified expression text: \" + testExpression.GetText()) # Should return \"~/foo\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Prims in USDA\nDESCRIPTION: Example USDA file (main.usda) that references prims from refModel.usda.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_5\n\nLANGUAGE: USDA\nCODE:\n```\ndef \"mainModelA\" (\n    prepend references = @refModel.usda@</modelA>\n)\n{\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Logic in USD Expression Variables\nDESCRIPTION: This snippet shows how to use the if() function to add conditional logic in USD expression variables.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/variable_expressions.rst#2025-04-23_snippet_7\n\nLANGUAGE: usda\nCODE:\n```\nreferences = @`if(${USE_LOW_POLY_ASSETS}, \"assetsLow/extraAsset.usda\", \"assetsNormal/extraAsset.usda\")`@\n```\n\n----------------------------------------\n\nTITLE: Defining DomeLight and Sphere with Material in USDA\nDESCRIPTION: This USDA snippet demonstrates how to define a DomeLight with an environment map texture, and a sphere with a basic material applied. It showcases the usage of DomeLight for illuminating a scene.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/DomeLight.md#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n)\n\ndef Scope \"Lights\"\n{\n    def DomeLight \"Dome\"\n    {\n        asset inputs:texture:file = @orientationLatLong.tex@\n    }\n}\n\ndef Xform \"TestGeom\"\n{\n    def Sphere \"Sphere1\"\n    (\n       prepend apiSchemas = [\"MaterialBindingAPI\"]\n    )\n    {\n        rel material:binding = </Material>\n    }\n\n}\n\ndef Material \"Material\"\n{\n    token outputs:ri:surface.connect = </Material/Surface.outputs:out>\n\n    def Shader \"Surface\"\n    {\n        uniform token info:id = \"PxrSurface\"\n        float inputs:diffuseGain = 0.3\n        color3f inputs:specularEdgeColor = (1, 1, 1)\n        color3f inputs:specularFaceColor = (0.4, 0.4, 0.4)\n        float inputs:specularRoughness = 0.02\n        token outputs:out\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Variant Selection in USD\nDESCRIPTION: Minimal scene description showing how to express a variant selection. This example selects the \"High\" variant from the \"lodVariant\" variant set on a Model prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_68\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\nover \"Model\" (\n    variants = {\n        string lodVariant = \"High\"\n    }\n)\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing 'def' and 'over' in USD\nDESCRIPTION: Illustrates the difference between using 'def' and 'over' for prims in USD, showing how 'def' provides more information to the system even without a specific type.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/usdfaq.rst#2025-04-23_snippet_8\n\nLANGUAGE: usda\nCODE:\n```\ndef \"MyModel\" (\n    payload = @./MyModel_payload.usd@\n)\n{\n}\n```\n\nLANGUAGE: usda\nCODE:\n```\nover \"MyModel\"\n```\n\n----------------------------------------\n\nTITLE: Defining Render Settings, Products and Variables in USD\nDESCRIPTION: Example USD code that demonstrates how to structure render settings, products, and variables in a hierarchy. It shows a primary render settings prim that refers to a render product, which in turn references a camera and several render variables. The render variables include color information, emission, light path expressions, and ID passes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_render_settings.rst#2025-04-23_snippet_4\n\nLANGUAGE: usda\nCODE:\n```\ndef Scope \"Render\"\n{\n    def RenderSettings \"PrimarySettings\" {\n        rel products = </Render/PrimaryProduct>\n        int2 resolution = (512, 512)\n    }\n    def RenderProduct \"PrimaryProduct\" {\n        rel camera = </World/main_cam>\n        token productName = \"/scratch/tmp/render000009.exr\"\n        rel orderedVars = [\n            </Render/Vars/Ci>,\n            </Render/Vars/a>,\n            </Render/Vars/id>,\n            </Render/Vars/id2>\n        ]\n    }\n    def Scope \"Vars\"\n    {\n       def RenderVar \"Ci\" {\n            string sourceName = \"Ci\"\n        }\n        def RenderVar \"a\" {\n            token dataType = \"float\"\n            string sourceName = \"a\"\n        }\n        def RenderVar \"emission\" {\n            string sourceType = \"lpe\"\n            string sourceName = \"C[<L.>O]\"\n        }\n        def RenderVar \"directDiffuse\" {\n            string sourceType = \"lpe\"\n            string sourceName = \"C<RD>[<L.>O]\"\n        }\n        def RenderVar \"indirectDiffuse\" {\n            string sourceType = \"lpe\"\n            string sourceName = \"C<RD>[DS]+[<L.>O]\"\n        }\n        def RenderVar \"subsurface\" {\n            string sourceType = \"lpe\"\n            string sourceName = \"C<TD>[DS]*[<L.>O]\"\n        }\n        def RenderVar \"directSpecular\" {\n            string sourceType = \"lpe\"\n            string sourceName = \"C<RS>[<L.>O]\"\n        }\n        def RenderVar \"indirectSpecular\" {\n            string sourceType = \"lpe\"\n            string sourceName = \"C<RS>[DS]+[<L.>O]\"\n        }\n        def RenderVar \"transmissive\" {\n            string sourceType = \"lpe\"\n            string sourceName = \"C<TS>[DS]*[<L.>O]\"\n        }\n       def RenderVar \"id\" {\n            token dataType = \"int\"\n            string sourceName = \"id\"\n            string parameters:ri:filter = \"zmin\"\n        }\n        def RenderVar \"id2\" {\n            token dataType = \"int\"\n            string sourceName = \"id2\"\n            string parameters:ri:filter = \"zmin\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ColorSpaceAPI to Specify Texture Color Space in USDA\nDESCRIPTION: This example demonstrates how to apply the ColorSpaceAPI schema to a Shader prim and set the source color space for a texture asset using the colorSpace:name attribute.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/color_user_guide.rst#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\ndef Shader \"usduvtexture1\"\n(\n    prepend apiSchemas = [\"ColorSpaceAPI\"]\n)\n{\n    uniform token info:id = \"UsdUVTexture\"\n    asset inputs:file = @./assetTexture.png@\n\n    # Specify the source color space for the texture\n    uniform token colorSpace:name = \"srgb_p3d65_scene\"\n\n    # ... other shader attributes omitted ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Material Render Contexts in USD\nDESCRIPTION: Shows how to define a material with different outputs for specific renderers using render contexts. This example demonstrates a material that provides different shader outputs for GLSLFX-based renderers like Storm and for RenderMan.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_21\n\nLANGUAGE: usda\nCODE:\n```\ndef Material \"rendererSpecificMaterial\"\n{\n    # Use material render context to have a single material use different \n    # outputs depending on which render context is being used\n\n    # Fallback output used for any renderers that we didn't specify\n    token outputs:surface.connect = </materials/rendererSpecificMaterial/DefaultProgramShader.outputs:surface>\n\n    # Output used for renderers that support GLSLFX (Storm)\n    token outputs:glslfx:surface.connect = </materials/rendererSpecificMaterial/GlslfxProgramShader.outputs:surface>\n\n    # Output used for RenderMan renderers\n    token outputs:ri:surface.connect = </materials/rendererSpecificMaterial/RendermanProgramShader.outputs:surface>\n\n    ...Shader implementations omitted...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Flexible Assembly with VariantSet in USD\nDESCRIPTION: Demonstrates how to create an assembly that uses a variantSet to dress in an instance of a model, allowing for flexible model swapping.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/usdfaq.rst#2025-04-23_snippet_6\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    defaultPrim = \"FlexibleSet\"\n)\n\ndef Xform \"FlexibleSet\"\n{\n    def \"Model_1\" (\n        prepend variantSets = \"dressingVariant\"\n        variants = {\n            string dressingVariant = \"default\"\n        }\n    )\n    {\n        variantSet \"dressingVariant\" = {\n            \"default\" (\n                references = @assets.usd@</CubeModel>\n            )\n            {\n            }\n        }\n\n        # Anything added at the set level has nesting level 1\n        custom int levelOfNesting = 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prims and Properties in USDA\nDESCRIPTION: Example USDA file (model.usda) defining scopes, prims and custom properties.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_0\n\nLANGUAGE: USDA\nCODE:\n```\n#usda 1.0 \n(\n)\n\ndef Scope \"modelScope\" (\n)\n{\n    def \"model1\" (\n    )\n    {\n        custom string department = \"department A\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Indexed Primvars in USD Mesh\nDESCRIPTION: This example demonstrates the use of indexed primvars to reduce memory usage. It defines a mesh with faceVarying interpolation for displayColor, using indices to avoid repeating duplicate color values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/primvars.rst#2025-04-23_snippet_8\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n)\n\ndef Mesh \"faceVarying\"\n{\n    float3[] extent = [(-1, 0, 0), (1, 1, 0)]\n    point3f[] points = [(-1, 0, 0), (-1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 1, 0), (1, 0, 0)]\n    int[] faceVertexCounts = [4, 4]\n    int[] faceVertexIndices = [3, 2, 1, 0, 5, 4, 2, 3]\n    \n    color3f[] primvars:displayColor = [(0,0,1), (0,0,0.75), (0.75,0,0), (1,0,0)] (\n        interpolation = \"faceVarying\"\n    )\n    # Use primvar indices to avoid duplicate elements in primvars array\n    int[] primvars:displayColor:indices = [0,1,2,3,0,1,2,3]\n    \n    double3 xformOp:translate = (0, 0, -10)\n    uniform token[] xformOpOrder = [\"xformOp:translate\"]  \n}\n```\n\n----------------------------------------\n\nTITLE: Creating Matrix4d Attribute in C++\nDESCRIPTION: Example showing how to create a custom Matrix4d-valued attribute on a prim named 'foo' using C++. Includes error handling and identity matrix assignment.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/datatypes.md#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nif (UsdAttribute mat = foo.CreateAttribute(TfToken(\"myMatrix\"), SdfValueTypeNames->Matrix4d)){\n   mat.Set(GfMatrix4d(1));  // Assign identity matrix\n} else {\n   // error creating the attribute\n}\n```\n\n----------------------------------------\n\nTITLE: Using usdstitch to Aggregate USD Files\nDESCRIPTION: usdstitch aggregates multiple USD files into a single file, merging composition arcs and time samples. It takes input files, output file, and has options for time range and verbosity.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toolset.rst#2025-04-23_snippet_10\n\nLANGUAGE: none\nCODE:\n```\nusdstitch [-h] [-o OUT] [-t START END] [-s STEP] [-v] [-f] [-n]\n           files [files ...]\n```\n\n----------------------------------------\n\nTITLE: Converting USD File from Text to Binary Format\nDESCRIPTION: Demonstrates how to use usdcat to convert a .usda (text) file to a .usdc (binary) file. The -o option specifies the output filename with the desired extension.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_converting_between_layer_formats.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ usdcat -o NewSphere.usdc Sphere.usda\n```\n\n----------------------------------------\n\nTITLE: Instanced USD Scene Description\nDESCRIPTION: Example of USD scene description with instancing enabled, demonstrating how to mark prims as instanceable.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/instancing.md#2025-04-23_snippet_1\n\nLANGUAGE: USD\nCODE:\n```\n#usda 1.0\n\ndef \"ParkingLot\"\n{\n    def \"Car_1\" (\n        instanceable = true\n        references = @./Car.usd@</Car>\n    )\n    {\n    }\n\n    def \"Car_2\" (\n        instanceable = true\n        references = @./Car.usd@</Car>\n    )\n    {\n    }\n\n    # ...\n\n    def \"Car_n\" (\n        instanceable = true\n        references = @./Car.usd@</Car>\n    )\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Collection Membership and Querying Objects in Python\nDESCRIPTION: Demonstrates how to compute the membership query for a collection and use it to find objects or paths that belong to the collection.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nquery = myCollection.ComputeMembershipQuery()\n```\n\n----------------------------------------\n\nTITLE: Accessing SdrShaderNode in C++\nDESCRIPTION: Demonstrates how to access SdrShaderNode, which will be used for registering fallback or universal definitions for UsdLux light types.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_renderers.rst#2025-04-23_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\nSdrShaderNode\n```\n\n----------------------------------------\n\nTITLE: Setting Python Environment Variables for USD Schema Generation\nDESCRIPTION: Configuration needed to set up the Python environment for USD schema generation. The PYTHONPATH environment variable must include the USD installation directory's Python library path.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_generating_new_schema.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPYTHONPATH=$PYTHONPATH:USD_INSTALL_ROOT/lib/python/\n```\n\n----------------------------------------\n\nTITLE: Optimizing Color Space Lookups with Caching in C++\nDESCRIPTION: Demonstrates the use of a caching mechanism provided by OpenUSD to accelerate large numbers of color space lookups for performance-critical applications.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/doxygen/architecture-guides/color_programmers_guide.md#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n// Create a cache\nUsdColorSpaceAPI::ColorSpaceHashCache cache;\n\n// Use the cache when computing color spaces\nTfToken colorSpaceName = UsdColorSpaceAPI::ComputeColorSpaceName(attr, &cache);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Light Normalization in UsdLux\nDESCRIPTION: This USDA snippet shows the effect of the normalize attribute on SphereLights. It sets up two lights with different radii and demonstrates how normalize affects light intensity based on light size.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdLux/userDoc/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    upAxis = \"Y\"\n)\n\ndef Scope \"Lights\"\n{\n    def SphereLight \"Light1\"\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestSpheres/Sphere1>\n        ]        \n\n        float inputs:radius = 1\n        bool inputs:normalize = false\n\n        color3f inputs:color = (1, 1, 1)\n        float inputs:intensity = 10.0\n        double3 xformOp:translate = (-2.5, 5, 3)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n    def SphereLight \"Light2\"\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestSpheres/Sphere2>\n        ]        \n\n        float inputs:radius = 2\n        bool inputs:normalize = false\n\n        color3f inputs:color = (1, 1, 1)\n        float inputs:intensity = 10.0\n        double3 xformOp:translate = (0, 5, 3)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n}\n\ndef Xform \"TestSpheres\"\n{\n    def Sphere \"Sphere1\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (-2.5, 5, -2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Sphere \"Sphere2\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (0, 5, -2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Color Space Information using UsdColorSpaceAPI in C++\nDESCRIPTION: Demonstrates how to apply color space information to a prim using the UsdColorSpaceAPI. It shows getting a prim, applying the color space API, and setting the color space name attribute.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/doxygen/architecture-guides/color_programmers_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// Get a prim\nUsdPrim prim = stage->GetPrimAtPath(SdfPath(\"/Root/Geom\"));\n\n// Apply the color space API\nUsdColorSpaceAPI colorSpaceAPI = UsdColorSpaceAPI::Apply(prim);\n\n// Set the color space\ncolorSpaceAPI.CreateColorSpaceNameAttr(\n                               VtValue(GfColorSpaceNames->LinearRec709));\n```\n\n----------------------------------------\n\nTITLE: Creating a Model Container in USD with Python\nDESCRIPTION: This snippet demonstrates how to create a Model container prim in USD that will hold both geometry and shading prims. It imports the necessary USD libraries, creates a new stage, sets the up axis, and defines an Xform prim that serves as a model root with the 'component' kind.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_simple_shading.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pxr import Gf, Kind, Sdf, Usd, UsdGeom, UsdShade\n\nstage = Usd.Stage.CreateNew(\"simpleShading.usda\")\nUsdGeom.SetStageUpAxis(stage, UsdGeom.Tokens.y)\n\nmodelRoot = UsdGeom.Xform.Define(stage, \"/TexModel\")\nUsd.ModelAPI(modelRoot).SetKind(Kind.Tokens.component)\n```\n\n----------------------------------------\n\nTITLE: Reading USD Prim Attribute in Python\nDESCRIPTION: Shows how to read the 'extent' attribute of a sphere prim using GetAttribute() and Get() methods.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_inspect_and_author_props.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> extentAttr = sphere.GetAttribute('extent')\n>>> extentAttr.Get()\nVt.Vec3fArray(2, (Gf.Vec3f(-1.0, -1.0, -1.0), Gf.Vec3f(1.0, 1.0, 1.0)))\n```\n\n----------------------------------------\n\nTITLE: Adding Spin Animation to the Top\nDESCRIPTION: Adds a rotation transformation on the Z axis with time-sampled values to create a spinning animation. The function sets keyframes at the start and end of the time range.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_xforms.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef AddSpin(top):\n    spin = top.AddRotateZOp(opSuffix='spin')\n    spin.Set(time=1, value=0)\n    spin.Set(time=192, value=1440)\n\ndef Step3():\n    stage = MakeInitialStage('Step3.usda')\n    stage.SetMetadata('comment', 'Step 3: Adding spin animation')\n    top = AddReferenceToGeometry(stage, '/Top')\n    AddSpin(top)\n    stage.Save()\n```\n\n----------------------------------------\n\nTITLE: Advanced Traversal with Pre and Post Visitation\nDESCRIPTION: Demonstrates using Usd.PrimRange.PreAndPostVisit() for more complex traversals where both pre-order and post-order prim visitations are needed. This pattern is useful for hierarchical tree operations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_traversing_stage.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> primIter = iter(Usd.PrimRange.PreAndPostVisit(usdviewApi.stage.GetPseudoRoot()))\n>>> for x in primIter: print(x, primIter.IsPostVisit())\nUsd.Prim(</>) False\nUsd.Prim(</refSphere>) False\nUsd.Prim(</refSphere/world>) False\nUsd.Prim(</refSphere/world>) True\nUsd.Prim(</refSphere>) True\nUsd.Prim(</refSphere2>) False\nUsd.Prim(</refSphere2/world>) False\nUsd.Prim(</refSphere2/world>) True\nUsd.Prim(</refSphere2>) True\nUsd.Prim(</>) True\n```\n\n----------------------------------------\n\nTITLE: Calculating Light Color Based on Scalar Intensity and RGB Color\nDESCRIPTION: Demonstrates how the final light color is calculated by multiplying the scalar intensity with the RGB color value.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/LightAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: math\nCODE:\n```\nL_{Color} = L_{Scalar} \\cdot color\n```\n\n----------------------------------------\n\nTITLE: Transforming RectLight Example in USDA\nDESCRIPTION: Example showing how to transform a RectLight using xformOp attributes for translation and rotation. Demonstrates the positioning capabilities of boundable lights that derive from Xformable.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\ndef RectLight \"Light\"\n{\n    ...\n\n    # Position light as needed\n    float3 xformOp:rotateXYZ = (90, 0, 0)\n    double3 xformOp:translate = (0, 0, 2)\n    uniform token[] xformOpOrder = [\"xformOp:translate\", \"xformOp:rotateXYZ\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Including Abstract Prims in Collection Queries\nDESCRIPTION: Shows how to modify collection queries to include abstract (class) prims by using a custom traversal predicate.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Get all prims including abstract prims\nmatchedObjects = Usd.CollectionAPI.ComputeIncludedObjects(query, stage, Usd.PrimAllPrimsPredicate)\n```\n\n----------------------------------------\n\nTITLE: Texture Configuration with Variable Expressions\nDESCRIPTION: Demonstrates using variable expressions for configuring texture file paths based on renderer selection.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/variable_expressions.rst#2025-04-23_snippet_15\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    expressionVariables = {\n        string TEXTURE_DIR = \"textures\"\n        bool USING_PRMAN_RENDERER = true\n        string DEFAULT_TEXTURE_FILE = \"pattern.png\"\n        string PRMAN_TEXTURE_FILE = \"pattern.tex\"\n    }\n)\n\ndef Material \"boardMat\"\n{\n    def Shader \"diffuseTexture\"\n    {\n        uniform token info:id = \"UsdUVTexture\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Converting USD File from Binary to Text Format\nDESCRIPTION: Illustrates the process of converting a .usdc (binary) file back to a .usda (text) file using usdcat, followed by a verification step using usddiff.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_converting_between_layer_formats.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ usdcat -o NewSphere.usda NewSphere.usdc\n$ usddiff NewSphere.usdc NewSphere.usda\n```\n\n----------------------------------------\n\nTITLE: Verifying USD File Conversion with usddiff\nDESCRIPTION: Shows how to use the usddiff tool to compare the original .usda file with the newly created .usdc file, ensuring the conversion was successful.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_converting_between_layer_formats.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ usddiff Sphere.usda NewSphere.usdc\n```\n\n----------------------------------------\n\nTITLE: Setting Up Axis in USD Stage Metadata\nDESCRIPTION: This snippet demonstrates how to set the up axis to Z in the stage metadata of a USD file. Setting the up axis determines the orientation of the coordinate system for all Xformable objects in the stage.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    upAxis = \"Z\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Variant Sets in USD using Python\nDESCRIPTION: Demonstrates creating nested variant sets for critters and jobs, where job variants are nested within critter variants. The code shows how selections affect attribute values and validates job-critter combinations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_72\n\nLANGUAGE: python\nCODE:\n```\ncritterVS.SetVariantSelection(critter)\nwith critterVS.GetVariantEditContext():\n    # All edits now go \"inside\" the selected critter variant\n    jobVS = variantSets.AppendVariantSet(\"jobVariant\")\n    for job in jobs:\n        if (job != \"Squasher\" or critter == \"Bug\") and \\\n           (job != \"Rider\" or critter != \"Bug\") :\n            jobVS.AppendVariant(job)\n            jobVS.SetVariantSelection(job)\n            with jobVS.GetVariantEditContext():\n                # Now edits *additionally* go inside the selected job variant\n                title.Set(critter + job)\n\nstage.GetRootLayer().Save()\n```\n\n----------------------------------------\n\nTITLE: Defining Vertex Interpolation Primvar in USD\nDESCRIPTION: This snippet demonstrates how to define a mesh with a vertex interpolation primvar for displayColor. It uses six color values, one for each vertex of the mesh, creating a gradient effect.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/primvars.rst#2025-04-23_snippet_2\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n)\n\ndef Mesh \"vertex\"\n{\n    float3[] extent = [(-1, 0, 0), (1, 1, 0)]\n    point3f[] points = [(-1, 0, 0), (-1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 1, 0), (1, 0, 0)]\n    int[] faceVertexCounts = [4, 4]\n    int[] faceVertexIndices = [3, 2, 1, 0, 5, 4, 2, 3]\n    \n    color3f[] primvars:displayColor = [(1, 0, 0), (0.75,0,0), (0.5,0,0.25), (0.25,0,0.5), (0,0,1), (0,0,0.75)] (\n        interpolation = \"vertex\"\n    )\n    \n    double3 xformOp:translate = (0, 0, -10)\n    uniform token[] xformOpOrder = [\"xformOp:translate\"]  \n}\n```\n\n----------------------------------------\n\nTITLE: Examples of List Expression Variables in USD\nDESCRIPTION: This snippet demonstrates how to define list expression variables of different types in USD.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/variable_expressions.rst#2025-04-23_snippet_4\n\nLANGUAGE: usda\nCODE:\n```\nstring[] exampleStringList = [\"red\", \"green\", \"blue\"]\nint64[] exampleIntList = [4, 5, 6]\nbool[] exampleBoolList = [True, False, False, True]\n```\n\n----------------------------------------\n\nTITLE: Defining UsdUVTexture Shader Node in USDA\nDESCRIPTION: Implementation of the UsdUVTexture shader node that handles UV texture reading and processing. Includes support for texture channels, wrapping modes, fallback values, and color space handling.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/spec_usdpreviewsurface.rst#2025-04-23_snippet_2\n\nLANGUAGE: usda\nCODE:\n```\ndef Shader \"UsdUVTexture\" (\n    doc = \"\"\"Texture Node Specification represents a node that can be used to \n    read UV textures, including tiled textures such as Mari UDIM's.\n    \n    Reads from a texture file and outputs one or more values. If the texture has \n    8 bits per component, [0, 255] values will first be converted to floating \n    point in the range [0, 1] and then any transformations (bias, scale) \n    indicated  are applied. Otherwise any indicated transformation (bias, \n    scale) is just applied. \n    If a single-channel texture is fed into a UsdUVTexture, the r, g, and b \n    components of the rgb output will repeat the channel's value, \n    while the single 'a' output will be set to 1.0.\n    If a two-channel texture is fed into a UsdUVTexture, the r, g, and b \n    components of the rgb output will repeat the first channel's value,\n    while the single 'a' output will be set to the second channel's value.\n    If a three-channel texture is fed into a UsdUVTexture, the r, g, and b \n    components of the rgb outputs will contain the assigned texture \n    channel's value, while the single 'a' output will be set to 1.0.\n\"\"\"\n    sdrMetadata = {\n        token role = \"texture\"\n    }\n)\n{\n    uniform token info:id = \"UsdUVTexture\"\n\n    asset inputs:file = @@ (\n        connectability = \"interfaceOnly\"\n        doc = \"\"\"Path to the texture this node uses.\"\"\"\n    )\n\n    float2 inputs:st (\n        doc = \"\"\"This input provides the texture coordinates. It is usually \n                connected to a (primvar) node that will provide the texture \n                coords.\"\"\"\n    )\n\n    token inputs:wrapS = \"useMetadata\" (\n        connectability = \"interfaceOnly\"\n        doc = \"\"\"<options> black, clamp, repeat, mirror, useMetadata.\"\"\"\n    )\n\n    token inputs:wrapT = \"useMetadata\" (\n        connectability = \"interfaceOnly\"\n        doc = \"\"\"<options> black, clamp, repeat, mirror, useMetadata.\"\"\"\n    )\n\n    float4 inputs:fallback = (0.0, 0.0, 0.0, 1.0) (\n        doc = \"\"\"Fallback value to be used when no texture is connected.\"\"\"\n        sdrMetadata = {\n            token defaultInput = \"1\"\n        }\n    )\n\n    float4 inputs:scale = (1.0, 1.0, 1.0, 1.0) (\n        connectability = \"interfaceOnly\"\n        doc = \"\"\"Scale to be applied to all components of the texture. \n                 value * scale + bias\"\"\"\n    )\n\n    float4 inputs:bias = (0.0, 0.0, 0.0, 0.0) (\n        connectability = \"interfaceOnly\"        \n        doc = \"\"\"Bias to be applied to all components of the texture. \n                 value * scale + bias\"\"\"\n    )\n\n    token inputs:sourceColorSpace = \"auto\" (\n        connectability = \"interfaceOnly\"\n        doc = \"\"\"<options> raw, sRGB, auto. Flag indicating the color \n\t\tspace in which the source texture is encoded.\"\"\"\n    )\n\n    float outputs:r ( \n        doc = \"Outputs the red channel.\"\n    )\n\n    float outputs:g (\n        doc = \"Outputs the green channel.\"\n    )\n\n    float outputs:b (\n        doc = \"Outputs the blue channel.\"\n    )\n\n    float outputs:a (\n        doc = \"Outputs the alpha channel.\"\n    )\n\n    float3 outputs:rgb (\n        doc = \"\"\"Outputs the red, green and blue channels, or x,y,z data \n                 for a normal-map read from a texture.\"\"\"\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Using GLSLFX Shaders in USD Material Networks\nDESCRIPTION: This snippet demonstrates how to use GLSLFX shaders in a USD material network. It includes a custom GLSLFX shader and uses a UsdPrimvarReader to access texture coordinates.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_9\n\nLANGUAGE: usda\nCODE:\n```\ndef Material \"MyMaterial\"\n{\n    token outputs:glslfx:surface.connect = </materials/MyMaterial/glslSurface.outputs:surface>\n\n    def Shader \"usdprimvarreader1\"\n    {\n        uniform token info:id = \"UsdPrimvarReader_float2\"\n        string inputs:varname = \"st\"\n        float2 outputs:result\n    }\n\n    def Shader \"glslSurface\"\n    {\n        # Specify the GLSLFX shader\n        uniform asset info:glslfx:sourceAsset = @MyShader.glslfx@\n        uniform token info:implementationSource = \"sourceAsset\"\n\n        # Connect to PrimvarReader shader for st coords\n        float2 inputs:st.connect = </materials/MyMaterial/usdprimvarreader1.outputs:result>\n        token outputs:surface\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Inherits Propagation Through References in USD\nDESCRIPTION: This example shows how inherits relationships remain 'live' through references. The Forest.usd file demonstrates that changes to the _class_Tree prim will propagate to TreeB_1 because the reference maintains the inherited relationship.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_20\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\n# A new prim, of the same name as the original inherits target, providing new overrides \nclass \"_class_Tree\"\n{\n    token size = \"small\"\n\n    # It's autumn in California\n    over \"Leaves\" \n    {\n        color3f[] primvars:displayColor = [(1.0, .1, .1)]\n    }\n}\n\n# TreeB_1 still inherits from _class_Tree because its referent does \ndef \"TreeB_1\" (\n    references = @./Trees.usd@</TreeB>\n)\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Distance and Falloff in USD\nDESCRIPTION: Demonstrates setting up two DistantLights with different shadow falloff settings. One light creates hard shadows (falloff=0) while the other creates soft shadows (falloff=1.5). Includes configuration of shadow distance, falloff, and shadow linking.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/overview.md#2025-04-23_snippet_11\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    upAxis = \"Y\"\n)\n\ndef Scope \"Lights\"\n{\n    def DistantLight \"Light1\"\n    (\n        prepend apiSchemas = [\"ShadowAPI\"]\n    )\n    {\n        uniform bool collection:shadowLink:includeRoot = 0\n        rel collection:shadowLink:includes = [\n            </TestSpheres/Sphere1>\n        ]        \n        float inputs:intensity = 10000\n\n        float inputs:shadow:distance = -1 \n        # No falloff zone, resulting in hard shadows\n        float inputs:shadow:falloff = 0.0\n\n        float3 xformOp:rotateXYZ = (25, 0, 0)\n        uniform token[] xformOpOrder = [\"xformOp:rotateXYZ\"]        \n    }\n\n    def DistantLight \"Light2\"\n    (\n        prepend apiSchemas = [\"ShadowAPI\"]\n    )\n    {\n        uniform bool collection:shadowLink:includeRoot = 0\n        rel collection:shadowLink:includes = [\n            </TestSpheres/Sphere2>\n        ]        \n        float inputs:intensity = 10000\n\n        float inputs:shadow:distance = 4.5 \n        float inputs:shadow:falloff = 1.5\n\n        float3 xformOp:rotateXYZ = (25, 0, 0)\n        uniform token[] xformOpOrder = [\"xformOp:rotateXYZ\"]                \n    }\n}\n\ndef Xform \"TestSpheres\"\n{\n    def Sphere \"Sphere1\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (-2, 0, -8)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Sphere \"Sphere2\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (2, 0, -8)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Plane \"Plane\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double length = 20\n        double width = 20\n        double3 xformOp:translate = (0, 0, -12)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }    \n}\n```\n\n----------------------------------------\n\nTITLE: Opening Katana Scene for USD Rendering\nDESCRIPTION: This console command opens a pre-configured Katana scene file that includes a USD file import. The scene is set up for rendering the animated USD content created in the previous step.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_end_to_end.rst#2025-04-23_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nkatana assets/simple.katana\n```\n\n----------------------------------------\n\nTITLE: Generated USD Layer with defaultPrim Metadata\nDESCRIPTION: Shows the resulting USD file after setting defaultPrim and translate transform. Contains a Xform prim with a Sphere child, including transformation data and displayColor.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_referencing_layers.rst#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\n#usda 1.0\n(\n    defaultPrim = \"hello\"\n)\n\ndef Xform \"hello\"\n{\n    double3 xformOp:translate = (4, 5, 6)\n    uniform token[] xformOpOrder = [\"xformOp:translate\"]\n\n    def Sphere \"world\"\n    {\n        float3[] extent = [(-2, -2, -2), (2, 2, 2)]\n        color3f[] primvars:displayColor = [(0, 0, 1)]\n        double radius = 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global Schema Properties in USD schema.usda\nDESCRIPTION: This snippet demonstrates how to define global properties for a USD schema module within a `schema.usda` file. It uses the `over \"GLOBAL\"` block and a `customData` dictionary to specify settings like `libraryName`, `libraryPath`, `libraryPrefix`, custom `libraryTokens`, and the `skipCodeGeneration` flag, which affect all schemas within the module during code generation by `usdGenSchema`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/generatingSchemas.md#2025-04-23_snippet_6\n\nLANGUAGE: usda\nCODE:\n```\nover \"GLOBAL\" (\n    customData = {\n        string libraryName       = \"pxUsdGeom\"\n        string libraryPath       = \"folder/pxUsdGeom\"\n        string libraryPrefix     = \"PxUsdGeom\"\n        string tokensPrefix      = \"PxUsdGeom\"\n        dictionary libraryTokens = {\n            dictionary libraryToken1 = {}\n            dictionary libraryToken2 = {\n                string value = \"/non-identifier-tokenValue!\"\n                string doc = \"\"\"doc for libraryToken2\"\"\"\n            }\n        }\n        bool skipCodeGeneration = true\n    }\n)\n{\n\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Metadata in plugInfo.json for USD\nDESCRIPTION: JSON configuration for registering custom metadata fields in a USD plugin. This snippet defines two custom metadata fields: 'dynamicName' and 'dynamicNumber'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/dynamicFileFormat.md#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Plugins\": [\n        {\n            \"Info\": {\n                \"SdfMetadata\": {\n                    \"dynamicName\": {\n                        \"type\": \"string\",\n                        \"default\": \"\",\n                        \"displayGroup\": \"Core\",\n                        \"appliesTo\": [\"prims\"],\n                        \"documentation:\": \"Example custom string metadata.\"\n                    },\n                    \"dynamicNumber\": {\n                        \"type\": \"int\",\n                        \"default\": 1,\n                        \"displayGroup\": \"Core\",\n                        \"appliesTo\": [\"prims\"],\n                        \"documentation:\": \"Example custom number metadata\"\n                    }\n                },\n\n                ...\n            },\n\n            ...\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Set to USD Sequence with Python\nDESCRIPTION: Executes a Python script to add the Room_set asset to the sequence level USD file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_end_to_end.rst#2025-04-23_snippet_5\n\nLANGUAGE: console\nCODE:\n```\npython tutorial_scripts/add_set_to_s00.py\n```\n\n----------------------------------------\n\nTITLE: Building USD on macOS\nDESCRIPTION: Command to build and install USD and its dependencies on macOS systems using the build_usd.py script.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n> python OpenUSD/build_scripts/build_usd.py /path/to/my_usd_install_dir\n```\n\n----------------------------------------\n\nTITLE: Defining Lights with Different Intensities in USD\nDESCRIPTION: This USD snippet defines three RectLights with different intensity values (1.0, 10.0, and 20.0) to demonstrate how intensity affects light brightness. It also includes three spheres as test objects.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    upAxis = \"Y\"\n)\n\ndef Scope \"Lights\"\n{\n    def RectLight \"LightIntensity1\"\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestSpheres/Sphere1>\n        ]        \n\n        color3f inputs:color = (1, 0, 0)\n        float inputs:intensity = 1.0\n        double3 xformOp:translate = (-2.5, 5, 3)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n    def RectLight \"LightIntensity2\"\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestSpheres/Sphere2>\n        ]        \n\n        color3f inputs:color = (1, 0, 0)\n        float inputs:intensity = 10.0\n        double3 xformOp:translate = (0, 5, 3)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n    def RectLight \"LightIntensity3\"\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestSpheres/Sphere3>\n        ]        \n\n        color3f inputs:color = (1, 0, 0)\n        float inputs:intensity = 20.0\n        double3 xformOp:translate = (2.5, 5, 3)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n}\n\ndef Xform \"TestSpheres\"\n{\n    def Sphere \"Sphere1\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (-2.5, 5, -2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Sphere \"Sphere2\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (0, 5, -2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Sphere \"Sphere3\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (2.5, 5, -2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Conditional Texture Input in USD\nDESCRIPTION: This snippet demonstrates how to conditionally specify a texture file input based on the renderer being used. It uses a variable expression to choose between a PRMan-specific texture and a default texture.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/variable_expressions.rst#2025-04-23_snippet_16\n\nLANGUAGE: usda\nCODE:\n```\nasset inputs:file = @`if( ${USING_PRMAN_RENDERER}, \"${TEXTURE_DIR}/${PRMAN_TEXTURE_FILE}\", \"${TEXTURE_DIR}/${DEFAULT_TEXTURE_FILE}\")`@\nfloat2 inputs:st.connect = </boardMat/stReader.outputs:result>\nfloat3 outputs:rgb\n```\n\n----------------------------------------\n\nTITLE: Finding Paths Included in a Collection\nDESCRIPTION: Shows how to retrieve all paths that are included in a collection using the USD Python API.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmatchedPaths = Usd.CollectionAPI.ComputeIncludedPaths(query, stage)\nfor path in matchedPaths:\n    # ... do something with each matching path ...\n```\n\n----------------------------------------\n\nTITLE: Filtered Stage Traversal with Type Checking\nDESCRIPTION: Shows how to filter prims during traversal by applying a condition to the generator. This example filters for prims that are UsdGeom.Sphere objects.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_traversing_stage.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> [x for x in usdviewApi.stage.Traverse() if UsdGeom.Sphere(x)]\n[Usd.Prim(</refSphere/world>), Usd.Prim(</refSphere2/world>)]\n```\n\n----------------------------------------\n\nTITLE: Creating a Mesh Billboard with Texture Coordinates in USD\nDESCRIPTION: This snippet shows how to create a simple quadrilateral mesh with texture coordinates in USD. It defines a mesh with four points, one face, and assigns texture coordinates ('st') as a primvar with varying interpolation. The mesh is created as a child of the model container.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_simple_shading.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbillboard = UsdGeom.Mesh.Define(stage, \"/TexModel/card\")\nbillboard.CreatePointsAttr([(-430, -145, 0), (430, -145, 0), (430, 145, 0), (-430, 145, 0)])\nbillboard.CreateFaceVertexCountsAttr([4])\nbillboard.CreateFaceVertexIndicesAttr([0,1,2,3])\nbillboard.CreateExtentAttr([(-430, -145, 0), (430, 145, 0)])\ntexCoords = UsdGeom.PrimvarsAPI(billboard).CreatePrimvar(\"st\", \n                                       Sdf.ValueTypeNames.TexCoord2fArray, \n                                       UsdGeom.Tokens.varying)\ntexCoords.Set([(0, 0), (1, 0), (1,1), (0, 1)])\n\n\nstage.Save()\n```\n\n----------------------------------------\n\nTITLE: Accessing UsdPrim Properties in C++\nDESCRIPTION: Demonstrates how to access properties of a UsdPrim using the GetProperties() method.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_renderers.rst#2025-04-23_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nUsdPrim::GetProperties()\n```\n\n----------------------------------------\n\nTITLE: Generating Template-Based Value Clips with usdstitchclips (Shell)\nDESCRIPTION: Demonstrates using `usdstitchclips` with template-based metadata generation. Flags like `--templateMetadata`, `--startTimeCode`, `--endTimeCode`, `--stride`, and `--templatePath` instruct the tool to create a `result.usda` file using template clip definitions instead of explicit arrays.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/valueClips.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ usdstitchclips --clipPath /World/model \\\n                 --templateMetadata \\\n                 --startTimeCode 101 \\\n                 --endTimeCode 103 \\\n                 --stride 1 \\\n                 --templatePath clip.#.usd \\\n                 --out result.usda clip* \n```\n\n----------------------------------------\n\nTITLE: Authoring Opinions in a USD Variant using Edit Context\nDESCRIPTION: Sets the current variant selection to 'red' and uses a variant edit context to author a red color value within that variant. Demonstrates how to direct edits into a specific variant.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_authoring_variants.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvset.SetVariantSelection('red')\nwith vset.GetVariantEditContext():\n    colorAttr.Set([(1,0,0)])\n\nprint(stage.GetRootLayer().ExportToString())\n```\n\n----------------------------------------\n\nTITLE: Generated USD File with Spin Animation\nDESCRIPTION: Shows the USDA file with time-sampled rotation values and the xformOpOrder that specifies how transformations should be applied. The rotation completes 4 full revolutions (1440 degrees) over the animation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_xforms.rst#2025-04-23_snippet_5\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    \"Step 3: Adding spin animation\"\n    endTimeCode = 192\n    startTimeCode = 1\n    upAxis = \"Z\"\n)\n\ndef Xform \"Top\" (\n    prepend references = @./top.geom.usd@\n)\n{\n    float xformOp:rotateZ:spin.timeSamples = {\n        1: 0,\n        192: 1440,\n    }\n    uniform token[] xformOpOrder = [\"xformOp:rotateZ:spin\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Moving a Prim Using Python\nDESCRIPTION: Demonstrates how to move a prim to a new location using the UsdNamespaceEditor.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\neditor.MovePrimAtPath(\"/asset/charA\",\"/oldAssets/reviewed/charA\")\n```\n\n----------------------------------------\n\nTITLE: Authoring Cached Light List in USD\nDESCRIPTION: This USD snippet demonstrates how to directly author a cached light list on a model hierarchy prim. It includes setting the 'lightList' relationship and specifying the 'cacheBehavior'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/LightListAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: usd\nCODE:\n```\ndef Xform \"LightModel\"\n(\n    kind = \"model\"\n    prepend apiSchemas = [\"LightListAPI\"]\n)\n{\n    # cached list of lights\n    rel lightList = [\n        </Lights/Light1>,\n        </Lights/Light2>,\n    ]\n    token lightList:cacheBehavior = \"consumeAndContinue\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Collections on a Prim in USD\nDESCRIPTION: Shows how to define both relationship-mode and pattern-based collections on a single USD prim. The relationship collection includes specific paths, while the expression collection uses pattern matching.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\ndef \"CollectionPrim\" (\n    prepend apiSchemas = [\"CollectionAPI:relCollection\", \"CollectionAPI:expCollection\"]\n)\n{\n    # Specify collection membership using \"includes\"\n    rel collection:relCollection:includes = [\n        </World/Clothing/Shirts>,\n        </World/Clothing/Pants>,\n    ]\n\n    # Specify collection membership using a path expression\n    pathExpression collection:expCollection:membershipExpression = \"/World/Clothing/Shirts/Red*//\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Assembly Asset in USD\nDESCRIPTION: This USDA code snippet shows how to declare an 'assembly' asset in scene description. The 'Forest_set' Xform is defined with the 'assembly' kind.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_5\n\nLANGUAGE: usda\nCODE:\n```\ndef Xform \"Forest_set\" (\n    kind = \"assembly\"\n)\n{\n    # Possibly deep namespace hierarchy of prims, with references to other assets\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Spinning Top Animation with Precession in Python\nDESCRIPTION: Defines functions to add precession and offset transformations to a spinning top. Creates a stage with animated rotation and translation operations in a specific order.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_xforms.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef AddOffset(top):\n    top.AddTranslateOp(opSuffix='offset').Set(value=(0, 0.1, 0))\n\ndef AddPrecession(top):\n    precess = top.AddRotateZOp(opSuffix='precess')\n    precess.Set(time=1, value=0)\n    precess.Set(time=192, value=360)\n\ndef Step5():\n    stage = MakeInitialStage('Step5.usda')\n    stage.SetMetadata('comment', 'Step 5: Adding precession and offset')\n    top = AddReferenceToGeometry(stage, '/Top')\n    AddPrecession(top)\n    AddOffset(top)\n    AddTilt(top)\n    AddSpin(top)\n    stage.Save()\n```\n\n----------------------------------------\n\nTITLE: Configuring Motion Blur with Camera Shutter Settings in USD\nDESCRIPTION: Example showing how to set up motion blur by configuring the camera's shutter open and close times. This setup uses frames 0-2 for motion sampling with a 30 FPS timeline.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_23\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    framesPerSecond = 30\n    timeCodesPerSecond = 30\n    startTimeCode = 0\n    ...\n)\n\ndef Camera \"Camera\"\n{\n    # configure sampling initial 2 frames for motion blur\n    double shutter:close = 2\n    double shutter:open = 0\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Materials to Collections in USD\nDESCRIPTION: Shows how to use collections to group prims and apply material bindings to those collections.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_18\n\nLANGUAGE: USDA\nCODE:\n```\ndef Scope \"Model\" (\n    prepend apiSchemas = [\"CollectionAPI:windows\", \"CollectionAPI:doors\", \"MaterialBindingAPI\"]\n)\n{\n    # Collections definitions\n\n    rel collection:windows:includes = [\n        ...\n    ]\n```\n\n----------------------------------------\n\nTITLE: Using Inherits for Non-Destructive Broadcast Edits in USD (usda)\nDESCRIPTION: This snippet provides a USDA example that demonstrates the use of the 'inherits' composition arc to create classes (with 'class Xform') and show how this mechanism allows multiple prims to reuse a common structure and selectively override properties. It defines a class prim '_class_Tree' with Mesh children, then creates two instances, both inheriting, with one providing an override for the 'Leaves' Mesh. The dependencies are limited to valid USD parsing/rendering tools and knowledge of USDA class/inherits syntax; the inputs are property definitions and inheritance relationships as USDA code, and the outputs are scene graph compositions where inheritance is layered by strength, with possible overrides. Limitations include the need for appropriate scene loader tools, and the demonstration presumes display in usdview or similar.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_19\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\nclass Xform \"_class_Tree\"\n{\n    def Mesh \"Trunk\"\n    {\n        color3f[] primvars:displayColor = [(.8, .8, .2)]\n    }\n\n    def Mesh \"Leaves\"\n    {\n        color3f[] primvars:displayColor = [(0, 1, 0)]\n    }\n}\n\ndef \"TreeA\" (\n    inherits = </_class_Tree>\n)\n{\n}\n\ndef \"TreeB\" (\n    inherits = </_class_Tree>\n)\n{\n    over \"Leaves\"\n    {\n        color3f[] primvars:displayColor = [(0.8, 1, 0)]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering USD Tests with Environment Variables\nDESCRIPTION: This snippet demonstrates registering a test with additional environment variables set. It's used for tests that require specific configurations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdInstancing\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdInstancing\"\n    ENV\n        USD_ASSIGN_PROTOTYPES_DETERMINISTICALLY=1\n)\n```\n\n----------------------------------------\n\nTITLE: Referencing SDF Path in Material Binding Context\nDESCRIPTION: Example of an SDF path that represents a recommended location for authoring collections and material bindings within component models in Pixar's pipeline.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdshade.rst#2025-04-23_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n/MODEL/Geom\n```\n\n----------------------------------------\n\nTITLE: Defining Volume with OpenVDB Asset in USD\nDESCRIPTION: Example showing how to define a Volume prim with a density field relationship to an OpenVDB asset, including material binding and transform operations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdVol/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\ndef Volume \"Volume\" (\n    prepend apiSchemas = [\"MaterialBindingAPI\"]\n)\n{\n    custom rel field:density = </Volume/densityVDB>\n    uniform token purpose = \"render\"\n    double3 xformOp:scale = (1, 1, 1)\n    double3 xformOp:translate = (0, -3, 0)\n    token[] xformOpOrder = [\"xformOp:translate\", \"xformOp:scale\"]\n    rel material:binding = </Materials/VolumeMaterial>    \n\n    def OpenVDBAsset \"densityVDB\"\n    {\n        token fieldName = \"density\"\n        asset filePath = @/vdbdata/smoke_plume.101.vdb@,\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: USD Layer with Empty XformOpOrder Override\nDESCRIPTION: Shows the resulting USD file after setting an empty xformOpOrder. This effectively resets the transformation to identity despite the transform values in the referenced layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_referencing_layers.rst#2025-04-23_snippet_7\n\nLANGUAGE: usd\nCODE:\n```\n#usda 1.0\n\nover \"refSphere\" (\n    prepend references = @./HelloWorld.usda@\n)\n{\n    uniform token[] xformOpOrder = []\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Light Filters for DiskLight in USDA\nDESCRIPTION: Example demonstrating how to add light filter relationships to a DiskLight, including color, exposure, intensity and radius settings along with filter references.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdLux/userDoc/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: usda\nCODE:\n```\ndef DiskLight \"Light1\"\n{\n    color3f inputs:color = (0.2, 0.4, 0.8)\n    float inputs:exposure = 3\n    float inputs:intensity = 100\n    float inputs:radius = 1    \n    append rel light:filters = [\n         </World/Filters/BarnDoorEffectFilter>,\n         </World/Filters/YellowGelFilter>,\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using usdzip to Create USDZ Packages\nDESCRIPTION: usdzip creates USDZ packages from USD compositions and referenced assets. It takes input files, output file, and has options for asset inclusion and verbosity.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toolset.rst#2025-04-23_snippet_7\n\nLANGUAGE: none\nCODE:\n```\nusdzip [-h] [-u] [-r] [-d DIRECTORY] [-v] OUTFILE [INFILES [INFILES ...]]\n```\n\n----------------------------------------\n\nTITLE: Working with Relationship Targets in USD Instancing\nDESCRIPTION: Demonstrates how relationship targets are handled when working with instance prims and prototype prims in USD.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/instancing.md#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n>>> stage = Usd.Stage.Open('ParkingLot.usd')\n\n>>> cart = stage.GetPrimAtPath('/ParkingLot/ShoppingCart')\n>>> cart_bodyRel = cart.GetRelationship('bodyRel')\n\n# 'bodyRel' is a relationship on a prim that is not being instanced. Its \n# targets point to prims beneath Car_1 and Car_2, which are both instances \n# in this scene.\n>>> cart_bodyRel.GetTargets()\n[Sdf.Path('/ParkingLot/Car_1/Body'), Sdf.Path('/ParkingLot/Car_2/Body')]\n\n# Calling Usd.Stage.GetPrimAtPath with these targets will return instance\n# proxies, so consumers can easily interact with these targets even though\n# they are prims beneath instances.\n>>> [stage.GetPrimAtPath(p) for p in cart_bodyRel.GetTargets()]\n[Usd.Prim(</ParkingLot/Car_1/Body>), Usd.Prim(</ParkingLot/Car_2/Body>)]\n\n# 'doorRel' is a relationship on a prim beneath an instance. If accessed\n# through the instance's prototype, the target paths returned will be returned\n# as paths in the instance's prototype.\n>>> prototype = stage.GetPrimAtPath('/ParkingLot/Car_1').GetPrototype()\n>>> prototype_doorRel = prototype.GetChild('Body').GetRelationship('doorRel')\n\n>>> prototype_doorRel.GetPath()\nSdf.Path('/__Prototype_1/Body.doorRel')\n\n>>> prototype_doorRel.GetTargets()\n[Sdf.Path('/__Prototype_1/Door')]\n```\n\n----------------------------------------\n\nTITLE: Model Class Inheritance with Relocates\nDESCRIPTION: Demonstrates class inheritance with relocates in model.usda, showing how relocated prims maintain their inheritance relationships.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_40\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    relocates = {\n        </Model/Rig/LRig>: </Model/Anim/LAnim>\n    }    \n)\n\nclass \"ClassA\"\n{\n    def \"Rig\"\n    {\n        def \"LRig\"\n        {\n            uniform token modelClassALRig = \"test\"          \n        }\n    }\n\n    def \"Anim\"\n    {\n        def \"LAnim\"\n        {\n            uniform token modelClassALAnim = \"test\"                     \n        }\n    }    \n}\n\ndef \"Model\" (\n    inherits = </ClassA>\n)\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Mesh Light Configuration with MeshLightAPI\nDESCRIPTION: Shows how to create a mesh light by applying the MeshLightAPI schema and configuring light properties.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_6\n\nLANGUAGE: usda\nCODE:\n```\ndef Mesh \"meshLight\" (\n    prepend apiSchemas = [\"MeshLightAPI\"]\n)\n{\n    # Geometry data\n    float3[] extent = [(-430, -145, 0), (430, 300, -30)]\n    int[] faceVertexCounts = [4]\n    int[] faceVertexIndices = [0, 1, 2, 3]\n    point3f[] points = [(-430, -145, 0), (430, -145, 0), (430, 145, 0), (-430, 145, 0)]\n    ....\n\n    # LightAPI \n    color3f inputs:color = (1, 0.5, 0.5)\n    float inputs:intensity = 300\n    ....\n}\n```\n\n----------------------------------------\n\nTITLE: USDA Material Property Reference\nDESCRIPTION: Reference to the UsdPreviewSurface material properties including opacity, metallic, and diffuseColor attributes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/spec_usdpreviewsurface.rst#2025-04-23_snippet_7\n\nLANGUAGE: usda\nCODE:\n```\nUsdPreviewSurface.metallic\n```\n\n----------------------------------------\n\nTITLE: Opening USD Stage in usdview\nDESCRIPTION: Shell command to visualize and inspect the created USD stage using usdview, which is a tool for viewing and interacting with USD files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_helloworld.rst#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ usdview HelloWorld.usda\n```\n\n----------------------------------------\n\nTITLE: Defining Color Space Inheritance in OpenUSD\nDESCRIPTION: This USDA code snippet demonstrates color space inheritance in OpenUSD. It shows how different materials inherit or override color spaces, and how color spaces can be applied to specific attributes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/color_user_guide.rst#2025-04-23_snippet_3\n\nLANGUAGE: usda\nCODE:\n```\ndef Xform \"Root\" (\n    prepend apiSchemas = [\"ColorSpaceAPI\"]\n)\n{\n    uniform token colorSpace:name = \"lin_rec709_scene\"\n\n    def Material \"Material1\"\n    (\n        prepend apiSchemas = [\"ColorSpaceAPI\"]\n    )\n    {\n        # Material1 overrides Root's color space with srgb_p3d65_scene\n        uniform token colorSpace:name = \"srgb_p3d65_scene\"\n\n        color3f inputs:diffuseColor = (0.2, 0.5, 0.8) \n    }\n\n    def Material \"Material2\"\n    {\n        # Material2 inherits Root's lin_rec709_scene color space\n        color3f inputs:diffuseColor = (0.2, 0.5, 0.8) \n    }\n    \n    def Material \"Material3\"\n    {\n        # Even though Material3 inherits lin_rec709_scene from Root,\n        # the diffuseColor attribute specifically uses srgb_rec709_scene\n        color3f inputs:diffuseColor = (0.2, 0.5, 0.8) (\n            colorSpace = \"srgb_rec709_scene\"\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Prims Using UsdNamespaceEditor\nDESCRIPTION: Example showing how to use UsdNamespaceEditor to remove prims across layers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\neditor = Usd.NamespaceEditor(stage)\nremoveResult = editor.DeletePrimAtPath(\"/modelScope/model1\")\neditor.ApplyEdits()\n```\n\n----------------------------------------\n\nTITLE: Configuring faceVarying Linear Interpolation in USD Mesh\nDESCRIPTION: This example shows how to configure faceVarying linear interpolation for a mesh using the faceVaryingLinearInterpolation attribute. It sets the rule to 'all' for both boundary and interior interpolation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/primvars.rst#2025-04-23_snippet_6\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n)\n\ndef Mesh \"faceVarying\"\n{\n    float3[] extent = [(-1, 0, 0), (1, 1, 0)]\n    point3f[] points = [(-1, 0, 0), (-1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 1, 0), (1, 0, 0)]\n    int[] faceVertexCounts = [4, 4]\n    int[] faceVertexIndices = [3, 2, 1, 0, 5, 4, 2, 3]\n    \n    color3f[] primvars:displayColor = [(0,0,1), (0,0,0.75), (0.75,0,0), (1,0,0), \n                                       (0,0,1), (0,0,0.75), (0.75,0,0), (1,0,0)] (\n        interpolation = \"faceVarying\"\n    )\n\n    # Configure the face-varying interpolation rule for this surface \n    token faceVaryingLinearInterpolation = \"all\"\n    \n    double3 xformOp:translate = (0, 0, -10)\n    uniform token[] xformOpOrder = [\"xformOp:translate\"]  \n}\n```\n\n----------------------------------------\n\nTITLE: Setting Collection Material Binding Strength in USD\nDESCRIPTION: Shows how to set the bindMaterialAs metadata to strongerThanDescendants for a doors collection binding. This overrides any direct material bindings that might exist on the prims in the collection.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_19\n\nLANGUAGE: usda\nCODE:\n```\nrel material:binding:collection:doors = [</materials/DoorMaterial>, </Model.collection:doors>] (\n    bindMaterialAs = \"strongerThanDescendants\"\n)\n```\n\n----------------------------------------\n\nTITLE: Checking if a Path is Included in a Collection\nDESCRIPTION: Demonstrates how to check if a specific path is included in a collection using the query object.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Check to see if /MyPath/PrimA is in myCollection\nif query.IsPathIncluded(\"/MyPath/PrimA\"):\n    # ...PrimA is in collection, process accordingly...\n```\n\n----------------------------------------\n\nTITLE: Defining Uniform Interpolation Primvar in USD\nDESCRIPTION: This snippet shows how to define a mesh with a uniform interpolation primvar for displayColor. It uses two color values, one for each face of the mesh.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/primvars.rst#2025-04-23_snippet_1\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n)\n\ndef Mesh \"uniform\"\n{\n    float3[] extent = [(-1, 0, 0), (1, 1, 0)]\n    point3f[] points = [(-1, 0, 0), (-1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 1, 0), (1, 0, 0)]\n    int[] faceVertexCounts = [4, 4]\n    int[] faceVertexIndices = [3, 2, 1, 0, 5, 4, 2, 3]\n    \n    color3f[] primvars:displayColor = [(1, 0, 0), (0,0,1)] (\n        interpolation = \"uniform\"\n    )\n    \n    double3 xformOp:translate = (0, 0, -10)\n    uniform token[] xformOpOrder = [\"xformOp:translate\"]  \n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mesh Lights with Material Sync Modes in USD\nDESCRIPTION: This USD snippet defines three mesh lights with different material synchronization modes. It includes a glow material definition and demonstrates how to set up mesh lights with various materialSyncMode values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/overview.md#2025-04-23_snippet_6\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    upAxis = \"Y\"    \n)\n\n# Emissive \"glow\" material \ndef Scope \"Looks\"\n{\n    def Material \"Glow\"\n    {\n        color3f inputs:color = (1,0,1) # magenta\n        float inputs:glow_amount = 1\n        token outputs:ri:surface.connect = </Looks/Glow/Surface.outputs:out>\n\n        def Shader \"Surface\"\n        {\n            uniform token info:id = \"PxrSurface\"\n            color3f inputs:diffuseColor.connect = </Looks/Glow.inputs:color>\n            color3f inputs:glowColor.connect = </Looks/Glow.inputs:color>\n            float inputs:glowGain.connect = </Looks/Glow.inputs:glow_amount>\n            token outputs:out\n        }\n    }\n}\n\n# Floor and MeshLights\ndef Xform \"World\"\n{\n    def Mesh \"Floor\"\n    {\n        int[] faceVertexCounts = [4]\n        int[] faceVertexIndices = [0,1,2,3]\n        point3f[] points = [(-1,0,1),(1,0,1),(1,0,-1),(-1,0,-1)]\n        uniform token subdivisionScheme = \"none\"\n        float3 xformOp:scale = (6,1,6)\n        uniform token[] xformOpOrder = [\"xformOp:scale\"]\n    }\n\n    def Mesh \"MeshLightA\"\n    (\n        prepend apiSchemas = [ \"MaterialBindingAPI\", \"MeshLightAPI\" ]\n    )\n    {\n        # ...\n        # points, faceVertexCounts, faceVertexIndices omitted for simplicity\n        # ...\n        token subdivisionScheme = \"catmullClark\"\n\n        # LightAPI attributes\n        float inputs:intensity = 1\n        color3f inputs:color = (0, 1, 1) # cyan        \n        uniform token light:materialSyncMode = \"independent\"\n\n        int inputs:ri:light:fixedSampleCount = 0\n\n        float3 xformOp:translate = (0, 2, -4)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n\n        rel material:binding = </Looks/Glow>\n\n        token info:implementationSource = \"id\"\n    }\n\n    def Mesh \"MeshLightB\"\n    (\n        references = </World/MeshLightA>\n    )\n    {\n        uniform token light:materialSyncMode = \"noMaterialResponse\"\n        float3 xformOp:translate = (-4,2,-4)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n    def Mesh \"MeshLightC\"\n    (\n        references = </World/MeshLightA>\n    )\n    {\n        uniform token light:materialSyncMode = \"materialGlowTintsLight\"\n        float3 xformOp:translate = (4,2,-4)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }    \n}\n```\n\n----------------------------------------\n\nTITLE: Renaming and Reparenting with UsdNamespaceEditor\nDESCRIPTION: Examples of renaming and reparenting prims and properties using UsdNamespaceEditor.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n# Renames \"/model/extraChar\" to \"/model/deprecatedChar\"\nrenamedPrim = stage.GetPrimAtPath(\"/model/extraChar\")\neditor.RenamePrim(renamedPrim, \"deprecatedChar\")\neditor.ApplyEdits()\n\n# Reparent \"/model/deprecatedChar\" to \"/deprecated\"\nreparentedPrim = stage.GetPrimAtPath(\"/model/deprecatedChar\")\nnewParentPrim = stage.GetPrimAtPath(\"/deprecated\")\neditor.ReparentPrim(reparentedPrim, newParentPrim)\neditor.ApplyEdits()\n\n# Reparent and rename \"/model/charA.oldProperty\" to\n# \"/deprecated/deprecatedChar.deprecatedProperty\"\nreparentedProp = stage.GetPropertyAtPath(\"/model/charA.oldProperty\")\nnewParentPrim = stage.GetPrimAtPath(\"/deprecated/deprecatedChar\")\neditor.ReparentProperty(reparentedProp, newParentPrim, \"deprecatedProperty\")\neditor.ApplyEdits()\n```\n\n----------------------------------------\n\nTITLE: Normalizing Light Intensity\nDESCRIPTION: Demonstrates how light intensity is normalized by dividing by a size factor when the 'normalize' attribute is enabled.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/LightAPI.md#2025-04-23_snippet_3\n\nLANGUAGE: math\nCODE:\n```\nL_{Scalar} = L_{Scalar} / sizeFactor\n```\n\n----------------------------------------\n\nTITLE: Querying and Setting Kind in USD Model Hierarchy\nDESCRIPTION: Demonstrates how to interrogate and author kinds on UsdPrim using UsdModelAPI to establish a Model Hierarchy. This hierarchy helps in organizing scenes into meaningful partitions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/propertiesOfSceneDescription.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nWe interrogate and author kinds on UsdPrim using UsdModelAPI::GetKind() and\nUsdModelAPI::SetKind(), in order to establish a *Model Hierarchy*, which is a\ncontiguous prefix of a scene's namespace.\n```\n\n----------------------------------------\n\nTITLE: Applying C++ Compiler Defaults for USD Build\nDESCRIPTION: Includes C++ defaults module and applies the defined compiler flags and definitions to the project build configuration.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CXXDefaults)\nadd_definitions(${_PXR_CXX_DEFINITIONS})\nset(CMAKE_CXX_FLAGS \"${_PXR_CXX_FLAGS} ${CMAKE_CXX_FLAGS}\")\n\ninclude(Public)\n```\n\n----------------------------------------\n\nTITLE: Building USD with CMake on Linux\nDESCRIPTION: Example of building USD on Linux using CMake, specifying dependencies like TBB and OpenSubdiv, and using parallel compilation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/BUILDING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncmake                                       \\\n-DTBB_ROOT_DIR=/path/to/tbb                 \\\n-DOPENSUBDIV_ROOT_DIR=/path/to/opensubdiv   \\\n/path/to/USD/source\n\ncmake --build . --target install -- -j <NUM_CORES>\n```\n\n----------------------------------------\n\nTITLE: Executing USD Animation Script in Python\nDESCRIPTION: This command runs a Python script that creates an animated USD scene. The script is part of a tutorial for demonstrating end-to-end USD workflows.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_end_to_end.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npython tutorial_scripts/anim_shot_s00_01.py\n```\n\n----------------------------------------\n\nTITLE: Querying and Resolving Collection Expressions in USD with Python\nDESCRIPTION: Demonstrates using the USD Python API to retrieve and resolve a pattern-based collection's complete membership expression. Requires the USD Python bindings (Usd, stage), and the collection must be defined previously in scene data. Key steps: obtain the prim, construct the named collection, then call ResolveCompleteMembershipExpression() to get the final resolved rule as a string. Input is a valid stage with collections defined; output is the fully resolved path expression.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ncollectionPrim = stage.GetPrimAtPath(\"/Food\")\nallFoodCollection = Usd.CollectionAPI(collectionPrim, \"allFood\")\nresolvedExp = allFoodCollection.ResolveCompleteMembershipExpression()\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Tint with ShadowAPI in OpenUSD\nDESCRIPTION: This snippet demonstrates how to use ShadowAPI to create colored shadows. It applies a blue shadow tint to a SphereLight by setting the shadow:color attribute to blue. The example includes complete scene setup with test geometry to show the shadow effect on a sphere and plane.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/overview.md#2025-04-23_snippet_10\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    upAxis = \"Y\"\n)\n\ndef Scope \"Lights\"\n{\n    def SphereLight \"Light1\"\n    (\n        prepend apiSchemas = [\"ShadowAPI\"]\n    )\n    {\n        color3f inputs:shadow:color = (0, 0, 1)\n\n        float inputs:exposure = 7\n        double3 xformOp:translate = (0, 4, -8)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n}\n\ndef Xform \"TestGeom\"\n{\n    def Sphere \"Sphere\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (0, 0, -13)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Plane \"Plane\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double length = 20\n        double width = 20\n        double3 xformOp:translate = (0, 0, -14)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing USD Relationship Targets via Instance Proxies in Python\nDESCRIPTION: This Python snippet demonstrates how accessing relationships and their targets through UsdPrim instance proxies behaves. It shows that the paths and targets returned are specific to the instance proxy's path, effectively resolving the instancing as if it wasn't present for the purpose of this API interaction. It retrieves two different instance proxies and inspects their respective 'doorRel' relationship.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/instancing.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> instanceProxy = stage.GetPrimAtPath('/ParkingLot/Car_1/Body')\n>>> instanceProxy_doorRel = instanceProxy.GetRelationship('doorRel')\n\n>>> instanceProxy_doorRel.GetPath()\nSdf.Path('/ParkingLot/Car_1/Body.doorRel')\n\n>>> instanceProxy_doorRel.GetTargets()\n[Sdf.Path('/ParkingLot/Car_1/Door')]\n\n>>> instanceProxy_2 = stage.GetPrimAtPath('/ParkingLot/Car_2/Body')\n>>> instanceProxy_2_doorRel = instanceProxy_2.GetRelationship('doorRel')\n\n>>> instanceProxy_2_doorRel.GetPath()\nSdf.Path('/ParkingLot/Car_2/Body.doorRel')\n\n>>> instanceProxy_2_doorRel.GetTargets()\n[Sdf.Path('/ParkingLot/Car_2/Door')]\n```\n\n----------------------------------------\n\nTITLE: Adding Tilt and Ordering Transformations\nDESCRIPTION: Demonstrates how to add multiple transformations with a specific order. This adds a tilt rotation on the X axis, then applies the spin rotation, illustrating the importance of transformation ordering.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_xforms.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef AddTilt(top):\n    tilt = top.AddRotateXOp(opSuffix='tilt')\n    tilt.Set(value=12)\n\ndef Step4():\n    stage = MakeInitialStage('Step4.usda')\n    stage.SetMetadata('comment', 'Step 4: Adding tilt')\n    top = AddReferenceToGeometry(stage, '/Top')\n    AddTilt(top)\n    AddSpin(top)\n    stage.Save()\n```\n\n----------------------------------------\n\nTITLE: Defining Constant Interpolation Primvar in USD\nDESCRIPTION: This snippet demonstrates how to define a mesh with a constant interpolation primvar for displayColor. It uses a single color value applied across the entire mesh surface.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/primvars.rst#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n)\n\ndef Mesh \"constant\"\n{\n   float3[] extent = [(-1, 0, 0), (1, 1, 0)]\n   point3f[] points = [(-1, 0, 0), (-1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 1, 0), (1, 0, 0)]\n   int[] faceVertexCounts = [4, 4]\n   int[] faceVertexIndices = [3, 2, 1, 0, 5, 4, 2, 3]\n  \n   color3f[] primvars:displayColor = [(1, 0, 0)] (\n       interpolation = \"constant\"\n   )\n  \n   double3 xformOp:translate = (0, 0, -10)\n   uniform token[] xformOpOrder = [\"xformOp:translate\"] \n}\n```\n\n----------------------------------------\n\nTITLE: Referencing and Overriding a Specialized Material Structure in USDA\nDESCRIPTION: This USDA snippet defines a 'World' scene that references the 'Robot' prim from the 'Robot.usd' file. Within the referenced 'Rosie' prim, it applies overrides ('over') to the base 'Metal' material, modifying its 'diffuseGain' and 'specularRoughness' inputs. This example is used to demonstrate the composition behavior of the 'specializes' arc, showing how overrides on the base prim in a referencing context affect the specialized prim ('CorrodedMetal') compared to the refinements already present.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_44\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\ndef Xform \"World\"\n{\n    def Xform \"Characters\"\n    {\n        def \"Rosie\" (\n            references = @./Robot.usd@</Robot>\n        )\n        {\n            over \"Materials\"\n            {\n                over \"Metal\"\n                {\n                     float inputs:diffuseGain = 0.3\n                     float inputs:specularRoughness = 0.1\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shaders in USD\nDESCRIPTION: Defines two shaders - a UsdPrimvarReader for UV coordinates and a UsdUVTexture for applying a texture. The shaders are connected via the 'st' input.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_15\n\nLANGUAGE: USDA\nCODE:\n```\ndef Shader \"stReader\"\n{\n    uniform token info:id = \"UsdPrimvarReader_float2\"\n    token inputs:varname.connect = </TexModel/boardMat.inputs:frame:stPrimvarName>\n    float2 outputs:result\n}\n\ndef Shader \"diffuseTexture\"\n{\n    uniform token info:id = \"UsdUVTexture\"\n    asset inputs:file = @USDLogoLrg.png@\n    float2 inputs:st.connect = </TexModel/boardMat/stReader.outputs:result>\n    float3 outputs:rgb\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting a Transform using XformOpOrder in Python\nDESCRIPTION: Demonstrates how to reset a transform to identity by setting an empty xformOpOrder. This causes the schema to ignore any previously authored transform operations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_referencing_layers.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrefXform = UsdGeom.Xformable(refSphere)\nrefXform.SetXformOpOrder([])\nprint(refStage.GetRootLayer().ExportToString())\n```\n\n----------------------------------------\n\nTITLE: Defining Built-in and Overridden Properties in USD Schemas - USD SDF Syntax\nDESCRIPTION: This group of schema definition snippets demonstrates how to declare built-in applied API schemas for IsA, single-apply, and multiple-apply API schemas in USD. Dependencies include the base schema types being referenced (e.g., </Typed>, </APISchemaBase>) and any API schemas listed in the 'apiSchemas' field. The schemas use 'prepend apiSchemas' to specify which API schemas become built-in, and optional property overrides show how derived schemas can override default property values from applied APIs by redeclaring them. Proper use of the 'prepend' keyword and adherence to inheritance rules are required. Inputs are class definitions with fields such as 'apiSchemas'; outputs are prim types with the specified built-in API schemas and property defaults.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/generatingSchemas.md#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\n# Example of a concrete, typed (IsA) schema with built-in applied API schemas\nclass MyCustomPrim \"MyCustomPrim\" (\n    inherits = </Typed>\n\n    # These listed applied API schemas will be built-in to this schema type.\n    prepend apiSchemas = [\"ExampleSingleApplyAPI\", \"ExampleMultiApplyAPI:foo\"]\n)  {\n    # Example of a fallback value override for a theoretical property defined in \n    # the API schema instance \"ExampleMultiApplyAPI:foo\"\n    bool exampleMulti:foo:boolAttr = true (\n        customData = {\n            bool apiSchemaOverride = true\n        }\n    )\n}\n\n# Example of a single-apply API schema with built-in applied API schemas\nclass \"MyCustomAPI\" (\n    inherits = </APISchemaBase>\n\n    # These listed applied API schemas will be built-in to this schema type and\n    # will always be applied when this schema is applied.\n    prepend apiSchemas = [\"ExampleSingleApplyAPI\", \"ExampleMultiApplyAPI:foo\"]\n)  {\n    # Example of a fallback value override for a theoretical property defined in \n    # the API schema instance \"ExampleMultiApplyAPI:foo\". This schema will be\n    # stronger when applied than its built-in API schemas and this default value\n    # will be used for the added property.\n    bool exampleMulti:foo:boolAttr = true (\n        customData = {\n            bool apiSchemaOverride = true\n        }\n    )\n}\n\n# Example of a multiple-apply API schema with built-in applied API schemas\nclass \"MyCustomMultiApplyAPI\" (\n    inherits = </APISchemaBase>\n    customData = {\n        token apiSchemaType = \"multipleApply\"\n        token propertyNamespacePrefix  = \"myCustomProp\"\n    }\n\n    # These listed applied API schemas will be built-in to this schema type and\n    # will always be applied when this schema is applied.\n    # Applying MyCustomMultiApplyAPI with instance name like \"bar\" will apply \n    # the following multiple-apply schema instances:\n    #   MyCustomMultiApplyAPI:bar\n    #   ExampleMultiApplyAPI:bar\n    #   OtherMultiApplyAPI:bar:foo\n    prepend apiSchemas = [\"ExampleMultiApplyAPI\", \"OtherMultiApplyAPI:foo\"]\n)  {\n    # Example attribute. It will have the full name \n    # myCustomProp:<instanceName>:boolAttr when applied.\n    bool boolAttr = true (\n        doc = \"Multiple apply schema attribute example\"\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UsdPreviewSurface Node in USDA\nDESCRIPTION: Specifies the UsdPreviewSurface node with its inputs for creating a preview material in USD. Includes parameters for diffuse color, emissive color, specular/metallic workflow, roughness, clearcoat, opacity, and more.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/spec_usdpreviewsurface.rst#2025-04-23_snippet_0\n\nLANGUAGE: USDA\nCODE:\n```\nUsdPreviewSurface(\n    diffuseColor = (0.18, 0.18, 0.18)\n    emissiveColor = (0.0, 0.0, 0.0)\n    useSpecularWorkflow = 0\n    specularColor = (0.0, 0.0, 0.0)\n    metallic = 0.0\n    roughness = 0.5\n    clearcoat = 0.0\n    clearcoatRoughness = 0.01\n    opacity = 1.0\n    opacityMode = \"transparent\"\n    opacityThreshold = 0.0\n    ior = 1.5\n    normal = (0.0, 0.0, 1.0)\n    displacement = 0.0\n    occlusion = 1.0\n)\n```\n\n----------------------------------------\n\nTITLE: USDA Node Graph Example with UI Properties\nDESCRIPTION: Example showing how to define a material with node graph UI properties including positioning, display colors, expansion states and backdrops. Demonstrates use of NodeGraphNodeAPI schema for visual layout.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdUI/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\ndef Material \"Material\"\n{\n    token outputs:mtlx:surface.connect = </World/Material/PreviewSurface.outputs:out>\n\n    def Shader \"PreviewSurface\" (\n        prepend apiSchemas = [\"NodeGraphNodeAPI\"]\n    )\n    {\n        uniform token info:id = \"ND_UsdPreviewSurface_surfaceshader\"\n        color3f inputs:diffuseColor.connect = </World/Material/Color.outputs:out>\n        token outputs:out\n        uniform color3f ui:nodegraph:node:displayColor = (0.780, 0.698, 0.6)\n        uniform token ui:nodegraph:node:expansionState = \"open\"\n        uniform float2 ui:nodegraph:node:pos = (-.85, 1.9)\n    }\n\n    def Shader \"Color\" (\n        prepend apiSchemas = [\"NodeGraphNodeAPI\"]\n    )\n    {\n        uniform token info:id = \"ND_constant_color3\"\n        color3f inputs:value = (1, 0.023, 0.701)\n        color3f outputs:out\n        uniform color3f ui:nodegraph:node:displayColor = (0.549, 0.133, 1.0)\n        uniform token ui:nodegraph:node:expansionState = \"closed\"\n        uniform float2 ui:nodegraph:node:pos = (-2, 2)\n    }\n\n    def Backdrop \"Backdrop\" (\n        prepend apiSchemas = [\"NodeGraphNodeAPI\"]\n    )\n    {\n        uniform token ui:description = \"Do not edit!\"\n        uniform color3f ui:nodegraph:node:displayColor = (0.764, 1.0, 0.698)\n        uniform float2 ui:nodegraph:node:pos = (-0.8, 0.5)\n        uniform float2 ui:nodegraph:node:size = (450, 330)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Color Space Programmatically in Python\nDESCRIPTION: This Python code demonstrates how to query the color space for a specific attribute on a prim using the ColorSpaceAPI.ComputeColorSpaceName method, which computes the effective color space based on the hierarchy.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/color_user_guide.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprim = stage.GetPrimAtPath(\"/path/to/NewMaterial\")\nattr = prim.GetAttribute(\"inputs:diffuseColor\")\n# Compute color space for attribute, no cache\ncolorSpaceName = Usd.ColorSpaceAPI.ComputeColorSpaceName(attr, None)\n# colorSpaceName will be srgb_rec709_scene\n```\n\n----------------------------------------\n\nTITLE: Defining Accessibility Properties in USDA\nDESCRIPTION: Example showing how to apply the AccessibilityAPI schema to a Mesh prim and set accessibility properties including label, description, and priority. Demonstrates the use of the default namespace.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdUI/AccessibilityAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\ndef Mesh \"Cube\" (\n    prepend apiSchemas = [\"AccessibilityAPI\"]\n) {\n    string accessibility:default:label = \"Luxo, Jr\"\n    string accessibility:default:description = \"The lamp has round base with two sections above it that may be adjusted. It has a conical head with a lightbulb inside. It likes to chase inflatable balls\"\n    token accessibility:default:priority = \"standard\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Referenced Prim Using Python\nDESCRIPTION: Shows how to delete a referenced prim using the UsdNamespaceEditor, which adds a new relocate.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Delete a referenced prim, which will add a new relocates\neditor.DeletePrimAtPath('/RootPrim/ChildInRef')\neditor.ApplyEdits()\n```\n\n----------------------------------------\n\nTITLE: Discovering Lights Using ComputeLightList in Python\nDESCRIPTION: This snippet demonstrates how to use ComputeLightList() to traverse and gather lights descendant from '/World'. It uses the ComputeModeIgnoreCache mode to ensure a fresh computation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/LightListAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlistAPI = UsdLux.LightListAPI(stage.GetPrimAtPath(\"/World\"))\nignoreCache = UsdLux.LightListAPI.ComputeModeIgnoreCache\ncomputedLights = listAPI.ComputeLightList(ignoreCache)\nfor lightPath in computedLights:\n    ...process light path...\n```\n\n----------------------------------------\n\nTITLE: Calculating Light Intensity with Exposure\nDESCRIPTION: Shows how exposure is applied to the light intensity using an exponential scale factor.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/LightAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: math\nCODE:\n```\nL_{Scalar} = L_{Scalar} \\cdot 2^{exposure}\n```\n\n----------------------------------------\n\nTITLE: Setting Base Light Intensity\nDESCRIPTION: Defines how the base intensity of the light is set, representing the unmultiplied luminance in nits.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/LightAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: math\nCODE:\n```\nL_{Scalar} = intensity\n```\n\n----------------------------------------\n\nTITLE: Creating a USD Set Model with Python\nDESCRIPTION: Runs a Python script to create a Room set model that combines the Table and Ball assets.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_end_to_end.rst#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\npython tutorial_scripts/create_Room_set.py\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for USD Tutorials\nDESCRIPTION: Environment variable configuration required to run USD tutorials. Sets PYTHONPATH to include USD's Python libraries and updates PATH to include USD binaries. Windows users need an additional PATH entry for the lib directory.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_usd_tutorials.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPYTHONPATH=USD_INSTALL_ROOT/lib/python\nPATH=USD_INSTALL_ROOT/bin\n# On Windows also add USD_INSTALL_ROOT/lib to PATH\n```\n\n----------------------------------------\n\nTITLE: Applying Layer Offset and Scale to SubLayers in USDA\nDESCRIPTION: This USDA code snippet demonstrates how to apply a time offset and scale to a sublayer (`someAnimation.usd`) when it's included using the `subLayers` list editor metadata. The `offset` parameter (10) shifts the time, and the `scale` parameter (0.5) scales the time. Time samples from the sublayer will first be scaled by 0.5 and then offset by 10 when resolved in the referencing layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_22\n\nLANGUAGE: usda\nCODE:\n```\n.. code-block:: usda\n   :caption: SubLayer offset/scale in usda\n\n   #usda 1.0\n   (\n       subLayers = [\n           @./someAnimation.usd@ (offset = 10; scale = 0.5)\n       ]\n   )\n```\n\n----------------------------------------\n\nTITLE: Looping Animation with USD Value Clips Times Metadata (USDA)\nDESCRIPTION: This USDA snippet configures the `/World/Model` prim to use value clips for animation. It demonstrates how to loop the first 25 frames of animation from `clip1.usd` twice, covering the stage time range from 0 to 50, by defining specific time mappings in the `times` metadata array, including a jump discontinuity at time 25. It relies on external manifest (`shot.manifest.usd`), topology (`shot.topology.usd`), and clip (`clip1.usd`) assets.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/valueClips.md#2025-04-23_snippet_16\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    endTimeCode = 50\n    startTimeCode = 1\n    subLayers = [\n        @./shot.topology.usd@\n    ]\n)\n\nover \"World\" \n{\n    over \"Model\" (\n        clips = {\n            dictionary default = {\n                asset manifestAssetPath = @./shot.manifest.usd@\n                string primPath = \"/World/Model\"\n                asset[] assetPaths = [@./clip1.usd@]\n                double2[] active = [(0, 0)]\n                double2[] times = [(0, 0), (25, 25), (25, 0), (50, 25)]\n            }\n        }\n    )\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Version Query Functions in C++\nDESCRIPTION: Core schema version query functions including IsA, IsInFamily, HasAPI and HasAPIInFamily for checking schema versions and families.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_schema_versioning.rst#2025-04-23_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nIsA(TfToken schemaIdentifer)\nIsA(TfToken schemaFamily, UsdSchemaVersion version)\nHasAPI(TfToken schemaIdentifer)\nHasAPI(TfToken schemaFamily, UsdSchemaVersion version)\nHasAPI(TfToken schemaIdentifer, TfToken instanceName)\nHasAPI(TfToken schemaFamily, UsdSchemaVersion version, TfToken instanceName)\n```\n\n----------------------------------------\n\nTITLE: Implementing Mesh Lights in USD\nDESCRIPTION: This example demonstrates how to use MeshLightAPI to transform a mesh into a light source. The MeshLightAPI schema is applied to a complex surface mesh which acts as a light source for four spheres positioned above it. This approach is useful for creating arbitrary-shaped light sources like neon signs or deforming light-emitting objects.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdLux/userDoc/overview.md#2025-04-23_snippet_12\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    upAxis = \"Y\"\n)\n\ndef Xform \"MeshLight\" (\n)\n{\n    double xformOp:rotateX = -90\n    #double3 xformOp:translate = (0, 10, 0)\n    uniform token[] xformOpOrder = [\"xformOp:rotateX\", \"xformOp:translate\"]\n\n    def Mesh \"Mesh\" (\n        prepend apiSchemas = [\"MeshLightAPI\"]\n    )\n    {\n        color3f inputs:color = (1, 1, 1)\n        float inputs:intensity = 1.0\n\n        # ...faceVertexCounts/Indices/points omitted for brevity...\n    }\n}\n\ndef Xform \"TestSpheres\"\n{\n    def Sphere \"Sphere1\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (-2.5, 3, 0)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Sphere \"Sphere2\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (0, 3, -4)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Sphere \"Sphere3\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (2.5, 3, 0)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Sphere \"Sphere4\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (0, 3, 4)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Size Factor for Area Lights\nDESCRIPTION: Shows how the size factor is calculated for area lights when normalization is enabled.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/LightAPI.md#2025-04-23_snippet_4\n\nLANGUAGE: math\nCODE:\n```\nsizeFactor_{area} = worldSpaceSurfaceArea(light)\n```\n\n----------------------------------------\n\nTITLE: Applying Collection-Based Material Binding with Purpose in USDA\nDESCRIPTION: This USDA snippet shows the syntax for a collection-based material binding that incorporates a specific purpose. The relationship `material:binding:collection:preview:Erasers` targets the `/Materials/PinkPearl` material, applying it for the 'preview' purpose specifically to the geometry included in the 'Erasers' collection. This demonstrates the five-token naming convention for purpose-restricted, collection-based bindings.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdshade.rst#2025-04-23_snippet_4\n\nLANGUAGE: usda\nCODE:\n```\n.. code-block:: usda\n\n   rel material:binding:collection:preview:Erasers = </Materials/PinkPearl>\n```\n\n----------------------------------------\n\nTITLE: Finding Objects Included in a Collection\nDESCRIPTION: Shows how to retrieve all objects that are included in a collection using the USD Python API.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmatchedObjects = Usd.CollectionAPI.ComputeIncludedObjects(query, stage)\nfor obj in matchedObjects:\n    # ... do something with each matching object ...\n```\n\n----------------------------------------\n\nTITLE: Defining Volume with Field Relationship in USD\nDESCRIPTION: Example showing how to define a Volume prim with a field relationship to an OpenVDBAsset that contains density/extinction data. The example demonstrates setting up the volume purpose and connecting it to VDB data.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdVol/Volume.md#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\ndef Volume \"Volume\" (\n)\n{\n    custom rel field:extinction = </Volume/densityVDB>\n    uniform token purpose = \"render\"\n\n    def OpenVDBAsset \"densityVDB\"\n    {\n        token fieldName = \"density\"\n        asset filePath = @/vdbdata/smoke_plume.101.vdb@,\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Moving a Referenced Prim Using Python\nDESCRIPTION: Shows how to move a prim that is referenced by multiple other prims.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\neditor.MovePrimAtPath(\"/asset/assetChild\", \"/asset/assetUpdatedForShot1\")\n```\n\n----------------------------------------\n\nTITLE: Deactivating Prims in USD\nDESCRIPTION: Explains the process of 'deleting' a prim in USD through deactivation, which is a non-destructive and reversible form of prim deletion using the 'active' metadata.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/propertiesOfSceneDescription.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nTherefore USD provides a \"non-destructive\" and reversible form of prim\ndeletion, which we call **deactivation**.  One deactivates a prim using\n`UsdPrim::SetActive(false)`, which sets the prim metadata *active* to false.\nFor any prim on a stage whose *active* metadata resolves to false, we\nconsider the prim to be *deactivated*, which has two important consequences:\n```\n\n----------------------------------------\n\nTITLE: Exporting USD Stage to String in Python\nDESCRIPTION: Shows how to export the current state of the USD stage to a string representation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_inspect_and_author_props.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> print(stage.GetRootLayer().ExportToString())\n#usda 1.0\n\ndef Xform \"hello\"\n{\n    def Sphere \"world\"\n    {\n        float3[] extent = [(-2, -2, -2), (2, 2, 2)]\n        double radius = 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Namespaced Properties in USD\nDESCRIPTION: Example showing how to define properties with namespaces in USD, including material binding and primvar display color\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_32\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\nover MyMesh\n{\n    rel material:binding = </ModelRoot/Materials/MetalMaterial>\n    color3f[] primvars:displayColor = [ (.4, .2, .6) ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for 64-bit Build Support in USD Project\nDESCRIPTION: Validates that the compiler supports 64-bit builds and provides platform-specific error messages if not. Special handling for Windows systems includes additional guidance for Visual Studio users.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT CMAKE_SIZEOF_VOID_P EQUAL 8)\n    if (WIN32)\n        message(FATAL_ERROR \"Compiler does not support 64-bit builds. \"\n                \"If you are using Visual Studio, make sure you are in the \"\n                \"x64 command prompt and have specified the Win64 cmake \"\n                \"generator (e.g., -G \\\"Visual Studio 15 2017 Win64\\\")\")\n    else()\n        message(FATAL_ERROR \"Compiler does not support 64-bit builds.\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using Material Binding Purpose in USD\nDESCRIPTION: Shows how to use material binding purpose to specify different materials for preview and final renders on a mesh.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_16\n\nLANGUAGE: USDA\nCODE:\n```\ndef Mesh \"MyMesh\" (\n    prepend apiSchemas = [\"MaterialBindingAPI\"]\n)\n{\n    ...vertex and face data...\n\n    # Material bindings\n\n    # Default binding\n    rel material:binding = </materials/MaterialFinal>\n\n    # Preview/Viewport render binding\n    rel material:binding:preview = </materials/MaterialPreview>\n\n    # Final render binding\n    rel material:binding:full = </materials/MaterialFinal>\n}\n\n...\n\n# Materials definitions\ndef Scope \"materials\"\n{\n    def Material \"MaterialPreview\"\n    {\n        ...\n    }   \n\n    def Material \"MaterialFinal\"\n    {\n        ...\n    }  \n}\n```\n\n----------------------------------------\n\nTITLE: Complete USD Example Scene Description\nDESCRIPTION: Complete example showing both ParkingLot.usd and Car.usd files with instancing and property settings.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/instancing.md#2025-04-23_snippet_2\n\nLANGUAGE: USD\nCODE:\n```\n### ParkingLot.usd\n\n#usda 1.0\n\ndef \"ParkingLot\"\n{\n    def \"Car_1\" (\n        instanceable = true\n        references = @./Car.usd@</Car>\n    )\n    {\n        color3f color = (1, 0, 0)\n    }\n\n    def \"Car_2\" (\n        instanceable = true\n        references = @./Car.usd@</Car>\n    )\n    {\n        color3f color = (0, 1, 0)\n    }\n\n    def \"Car_3\" (\n        references = @./Car.usd@</Car>\n    )\n    {\n        color3f color = (0, 0, 1)\n    }\n}\n```\n\nLANGUAGE: USD\nCODE:\n```\n### Car.usd\n\n#usda 1.0\n\ndef \"Car\"\n{\n    color3f color = (0, 0, 0)\n\n    def Mesh \"Body\"\n    {\n        color3f color = (0, 0, 0)\n    }\n\n    def Mesh \"Door\"\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated USD File with Geometry Reference\nDESCRIPTION: Shows the USDA file with a reference to external geometry. The 'prepend references' syntax ensures the referenced file's contents have higher priority during composition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_xforms.rst#2025-04-23_snippet_3\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    \"Step 2: Geometry reference\"\n    endTimeCode = 192\n    startTimeCode = 1\n    upAxis = \"Z\"\n)\n\ndef Xform \"Top\" (\n    prepend references = @./top.geom.usd@\n)\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Explicit Value Clips with usdstitchclips (Shell)\nDESCRIPTION: Demonstrates using the `usdstitchclips` command-line utility to combine multiple USD files (matching `clip*`) into a single logical sequence using value clips. This command generates a `result.usda` stage with explicit clip metadata, targeting the prim path `/World/model`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/valueClips.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ usdstitchclips --clipPath /World/model --out result.usda clip*\n```\n\n----------------------------------------\n\nTITLE: Creating Nested VariantSets with Python\nDESCRIPTION: Python script demonstrating how to create nested VariantSets. This example creates an outer \"critterVariant\" VariantSet containing different animals, each with its own job-related inner VariantSet.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_71\n\nLANGUAGE: python\nCODE:\n```\nfrom pxr import Sdf, Usd\nstage = Usd.Stage.CreateNew(\"nestedVariants.usd\")\nprim = stage.DefinePrim(\"/Employee\")\ntitle = prim.CreateAttribute(\"title\", Sdf.ValueTypeNames.String)\nvariantSets = prim.GetVariantSets()\n\ncritters = [ \"Bug\", \"Bear\", \"Dragon\" ]\njobs = [ \"Squasher\", \"Rider\", \"Trainer\" ]\n\ncritterVS = variantSets.AppendVariantSet(\"critterVariant\")\nfor critter in critters:\n    critterVS.AppendVariant(critter)\n```\n\n----------------------------------------\n\nTITLE: Binding Materials to Geometry in USD\nDESCRIPTION: This example shows how to bind a material to a mesh in USD. It applies the MaterialBindingAPI schema to the mesh and sets up a direct binding to a material using the material:binding relationship.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_8\n\nLANGUAGE: usda\nCODE:\n```\ndef Mesh \"Mesh\"\n(\n    prepend apiSchemas = [\"MaterialBindingAPI\"]\n)\n{\n    # ... geometric info omitted ...\n\n    # Material binding\n    rel material:binding = </materials/MyMaterial>\n}\n```\n\n----------------------------------------\n\nTITLE: Purpose Inheritance Example in USD\nDESCRIPTION: Demonstrates how purpose attributes are inherited through a scene hierarchy, showing interactions between imageable and non-imageable prims.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_2\n\nLANGUAGE: usda\nCODE:\n```\ndef \"Root\" {\n    token purpose = \"proxy\"\n    def Xform \"RenderXform\" {\n        token purpose = \"render\"\n        def \"Prim\" {\n            token purpose = \"default\"\n            def Xform \"InheritXform\" {\n            }\n            def Xform \"GuideXform\" {\n                token purpose = \"guide\"\n            }\n        }\n    }\n    def Xform \"Xform\" {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated USD File with Tilt and Spin\nDESCRIPTION: Shows the USDA file with both tilt and spin transformations. The xformOpOrder specifies that the tilt should be applied before the spin, which affects the visual result of the animation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_xforms.rst#2025-04-23_snippet_7\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    \"Step 4: Adding tilt\"\n    endTimeCode = 192\n    startTimeCode = 1\n    upAxis = \"Z\"\n)\n\ndef Xform \"Top\" (\n    prepend references = @./top.geom.usd@\n)\n{\n    float xformOp:rotateX:tilt = 12\n    float xformOp:rotateZ:spin.timeSamples = {\n        1: 0,\n        192: 1440,\n    }\n    uniform token[] xformOpOrder = [\"xformOp:rotateX:tilt\", \"xformOp:rotateZ:spin\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Collection with Rules in USD\nDESCRIPTION: Demonstrates setting up a collection with expansion rules and include/exclude paths for filtering lights.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_9\n\nLANGUAGE: usd\nCODE:\n```\nuniform token collection:myCollection:expansionRule = \"expandPrims\"\n\nrel collection:allProdLights:includes = [\n    </World/Lights>,\n    </ExtraLights.collection:allExtraLights>\n]\nrel collection:allProdLights:excludes = [\n    </World/Lights/TestLights>,\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Render Settings and Products in USD\nDESCRIPTION: Example showing how to organize render settings under a common root prim, with two RenderSettings configurations and a RenderProduct. Demonstrates proper organization and resolution settings.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_26\n\nLANGUAGE: usda\nCODE:\n```\ndef Scope \"Render\"\n{\n    def RenderSettings \"PrimarySettings\" {\n        rel products = </Render/PrimaryProduct>\n        int2 resolution = (512, 512)\n    }\n    def RenderSettings \"PrimarySettingsRaw\" {\n        rel products = </Render/PrimaryProduct>\n        int2 resolution = (1024, 1024)\n        uniform token renderingColorSpace = \"raw\"\n    }\n    def RenderProduct \"PrimaryProduct\" {\n        rel camera = </World/main_cam>\n        token productName = \"/scratch/tmp/render000009.exr\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Light Shaping with ShapingAPI in USD\nDESCRIPTION: This USD snippet demonstrates how to use the ShapingAPI to control light spread. It defines a DiskLight with shaping controls and includes test geometry to show the effect of the light shaping.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/overview.md#2025-04-23_snippet_7\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    upAxis = \"Y\"\n)\n\ndef Scope \"Lights\"\n{\n    def DiskLight \"Light1\"\n    (\n        prepend apiSchemas = [\"ShapingAPI\"]\n    )\n    {\n        float inputs:radius = 1\n\n        float inputs:shaping:focus = 0\n\n        double3 xformOp:translate = (0, 0, -11)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n}\n\ndef Xform \"TestGeom\"\n{\n    def Cube \"Cube1\"\n    {\n        double size = 2 \n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (0, 0, -13)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Plane \"Plane\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double length = 20\n        double width = 20\n        double3 xformOp:translate = (0, 0, -14)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ShadowAPI Properties in OpenUSD\nDESCRIPTION: This code block defines the properties of the ShadowAPI, including their USD types and fallback values. It covers shadow color, distance, enable flag, falloff, and falloff gamma.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/ShadowAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### inputs:shadow:color\n\n**USD type**: `color3f`\n\n**Fallback value**: `(0, 0, 0)`\n\nSets the color of the shadows cast by the light.\n\n\n### inputs:shadow:distance\n\n**USD type**: `float`\n\n**Fallback value**: `-1.0`\n\nSets the maximum distance between occluder and\nshadow-receiving surface within which shadows will be cast. The fallback value \nis -1, which indicates no limit.\n\n\n### inputs:shadow:enable\n\n**USD type**: `bool`\n\n**Fallback value**: `True`\n\nControls whether the prim with this schema\napplied will cast shadows during lighting calculations. For more fine-grained \ncontrol on which geometry will have shadows for this light, use \n{ref}`light-linking <usdLux_light_linking>`.\n\n### inputs:shadow:falloff\n\n**USD type**: `float`\n\n**Fallback value**: `-1.0`\n\nSets the size of the shadow falloff. This can\nbe used to hide or adjust the hard cut-off for shadows at the maximum shadow \ndistance. The falloff zone is the area that fades from full shadow at the \nbeginning of the falloff zone, to no shadow at the maximum shadow distance.\n\nThe falloff zone cannot exceed the maximum shadow distance. A falloff zone \nvalue equal to or less than 0.0 indicates no falloff zone.\n\n\n### inputs:shadow:falloffGamma\n\n**USD type**: `float`\n\n**Fallback value**: `1.0`\n\nUse `falloffGamma` to control the rate of \nshadow falloff within the shadow fallout zone. The value is treated as a \ngamma (exponential) control of shadow strength with linear distance within\nthe falloff zone. Proper use of falloffGamma requires appropriately setting\n`shadow:distance` and `shadow:falloff`.\n```\n\n----------------------------------------\n\nTITLE: Accessing USD Prim Type Info\nDESCRIPTION: Example of accessing a USD prim's type name, which currently returns the schema identifier but may need to be updated to return the schema family for versioned schemas.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_schema_versioning.rst#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nUsdPrim::GetTypeName()\n```\n\n----------------------------------------\n\nTITLE: Installing Python Examples in OpenUSD CMake Configuration\nDESCRIPTION: CMake installation command that copies Python example files 'helloWorld.py' and 'helloWorldRedux.py' to the specified USD installation subdirectory. Uses CMake's install() function to define file deployment.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/tutorials/helloWorld/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n    FILES\n        helloWorld.py\n        helloWorldRedux.py\n    DESTINATION\n        ${PXR_INSTALL_SUBDIR}/helloWorld\n)\n```\n\n----------------------------------------\n\nTITLE: Traversing All Prims Including Inactive Ones\nDESCRIPTION: Shows how to use TraverseAll() to iterate through all prims regardless of their active status. This reveals that while inactive prims exist, their children are no longer part of the composed scene.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_traversing_stage.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> [x for x in usdviewApi.stage.TraverseAll()]\n[Usd.Prim(</refSphere>), Usd.Prim(</refSphere/world>),\n Usd.Prim(</refSphere2>)]\n```\n\n----------------------------------------\n\nTITLE: Specifying Jump Discontinuities in USD Value Clips\nDESCRIPTION: This snippet demonstrates how to specify jump discontinuities in the timing curve for USD value clips using the 'active' and 'times' metadata. It shows how to use animation from two different clips in sequence.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/valueClips.md#2025-04-23_snippet_3\n\nLANGUAGE: usd\nCODE:\n```\ndouble2[] active = [(0, 0), (10, 1)]\ndouble2[] times = [(0, 0), (10, 10), (10, 25), (20, 35)]\n```\n\n----------------------------------------\n\nTITLE: Proxy Stand-in Configuration in USD\nDESCRIPTION: Shows how to configure render and proxy relationships between prims using purpose tokens and proxyPrim relationships.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_3\n\nLANGUAGE: usda\nCODE:\n```\ndef Mesh \"renderMesh\"\n{\n    token purpose = \"render\"\n    rel proxyPrim = </proxySphere>\n    ...\n}\n\ndef Sphere \"proxySphere\"\n{\n    token purpose = \"proxy\"\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Material Binding Purpose in Render Settings\nDESCRIPTION: Demonstrates how to set the material binding purpose in render settings for different render types.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_17\n\nLANGUAGE: USDA\nCODE:\n```\ndef RenderSettings \"FinalRenderSettings\"\n{\n    uniform token[] materialBindingPurposes = [\"full\", \"\"]\n    ...\n}\ndef RenderSettings \"DefaultRenderSettings\"\n{\n    uniform token[] materialBindingPurposes = [\"preview\"]\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring usdValidation Library in CMake\nDESCRIPTION: Sets up the usdValidation library with its dependencies, including TBB, and defines public classes, headers, source files, and Python bindings.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/usdValidation/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usdValidation)\nset(PXR_PACKAGE usdValidation)\n\npxr_library(usdValidation\n    LIBRARIES\n        sdf\n        plug\n        tf\n        gf\n        usd\n        work\n        ${TBB_tbb_LIBRARY}\n\n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n\n    PUBLIC_CLASSES\n        context \n        error\n        registry\n        timeRange\n        validator\n        validatorTokens\n\n    PUBLIC_HEADERS\n        api.h\n\n    CPPFILES\n        coreValidators.cpp\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapContext.cpp\n        wrapError.cpp\n        wrapRegistry.cpp\n        wrapTimeRange.cpp\n        wrapValidator.cpp\n\n    PYMODULE_FILES\n        __init__.py\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Running usdGenSchema (Bash)\nDESCRIPTION: Example usage of the usdGenSchema script, which generates code for new schema classes defined in schema.usda.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toolset.rst#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nusdGenSchema\n```\n\n----------------------------------------\n\nTITLE: Using SdrShaderProperty in C++\nDESCRIPTION: Shows how to use SdrShaderProperty for mapping implementation names between PxrRectLight and UsdLuxRectLight.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_renderers.rst#2025-04-23_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\nSdrShaderProperty\n```\n\n----------------------------------------\n\nTITLE: Accessing UsdLuxLight in C++\nDESCRIPTION: Shows how to access the UsdLuxLight class, which represents a light in USD.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_renderers.rst#2025-04-23_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nUsdLuxLight\n```\n\n----------------------------------------\n\nTITLE: Setting UsdNamespaceEditor Options\nDESCRIPTION: Example showing how to set options for UsdNamespaceEditor, specifically disabling relocates.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nnoRelocatesEditOptions = Usd.NamespaceEditor.EditOptions()\nnoRelocatesEditOptions.allowRelocatesAuthoring = False\n\n# Create/use namespace editor that will not use relocates\nnoRelocatesEditor = Usd.NamespaceEditor(stage, noRelocatesEditOptions)\n```\n\n----------------------------------------\n\nTITLE: Converting USD File Format with Specific Output Format\nDESCRIPTION: Demonstrates how to use usdcat with the --usdFormat option to convert a .usd file to a specific format (binary or text) while keeping the .usd extension.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_converting_between_layer_formats.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ usdcat -o NewSphere_binary.usd --usdFormat usdc Sphere.usd\n```\n\n----------------------------------------\n\nTITLE: Applying IES Profile to Light Color\nDESCRIPTION: Mathematical formula for sampling and applying an IES profile to modify light emission.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/ShapingAPI.md#2025-04-23_snippet_4\n\nLANGUAGE: math\nCODE:\n```\n\\begin{aligned}\n&𝛳_{light}, 𝜙 = toPolarCoordinates(emissionDirectionInLightSpace) \\\\\n&𝛳_{ies} = applyAngleScale(𝛳_{light}, angleScale) \\\\\n&iesSample = sampleIES(iesFile, 𝛳_{ies}, 𝜙) \\\\\n&iesNormalize ⟹ iesSample = iesSample ⋅ iesProfilePower(iesFile) \\\\\n\\\\\n&L_{Color} = iesSample ⋅ L_{Color}\n\\end{aligned}\n```\n\n----------------------------------------\n\nTITLE: Converting Alembic Files to USD Format Using usdcat\nDESCRIPTION: Command demonstrating how to convert an Alembic (.abc) file to a USD binary file (.usd) using the usdcat tool. This conversion is recommended for better performance when working with geometry caches in USD-based workflows.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/maxperf.rst#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n> usdcat -o snowman.usd snowman.abc\n```\n\n----------------------------------------\n\nTITLE: Left-Handed Orientation for Mesh Normals\nDESCRIPTION: Example of setting left-handed winding rule for normal calculations on a mesh.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_4\n\nLANGUAGE: usda\nCODE:\n```\ndef Mesh \"BasicMesh\"\n{\n    uniform token orientation = \"leftHanded\"\n    ...face and vertex data...\n}\n```\n\n----------------------------------------\n\nTITLE: Using usdcat to View and Convert USD Files\nDESCRIPTION: usdcat allows viewing and converting USD files. It can flatten stage contents, skip default values, and output to different formats. It takes input files and various options as arguments.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toolset.rst#2025-04-23_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nusdcat [-h] [-o OUTFILE] [-f] [-m {none,never,fallback,always}] [-s]\n        [-a] [-v] [-d] [-t TIME] [-l] [-p PACKAGEPATH] [--usdz]\n        [--verbose] [--quiet]\n        [files [files ...]]\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Plugins in usdview's PluginContainer\nDESCRIPTION: This snippet describes how to use the registerPlugins() method to register multiple commands and the configureView() method to create and configure multiple menus in a single plugin module for usdview.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_usdview_plugin.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef registerPlugins():\n    # Register multiple commands here\n\ndef configureView():\n    # Create and configure multiple menus here\n```\n\n----------------------------------------\n\nTITLE: Defining Transformed Sphere with Nested Primitive in USD\nDESCRIPTION: This USD code snippet creates a transformed sphere object 'refSphere2' with a translation and a nested sphere primitive 'world'. The world sphere has defined extent, display color, and radius properties.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_referencing_layers.rst#2025-04-23_snippet_14\n\nLANGUAGE: USD\nCODE:\n```\ndef Xform \"refSphere2\"\n{\n    double3 xformOp:translate = (4, 5, 6)\n    uniform token[] xformOpOrder = [\"xformOp:translate\"]\n\n    def Sphere \"world\"\n    {\n        float3[] extent = [(-2, -2, -2), (2, 2, 2)]\n        color3f[] primvars:displayColor = [(1, 0, 0)]\n        double radius = 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic USD Layer with Override Prim\nDESCRIPTION: Shows the resulting USD file containing an empty override prim. This prim will be used to contain references and property overrides.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_referencing_layers.rst#2025-04-23_snippet_3\n\nLANGUAGE: usd\nCODE:\n```\n#usda 1.0\n\nover \"refSphere\"\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Reference to Static Geometry\nDESCRIPTION: Creates a USD Xform prim and adds a reference to an external geometry file. This demonstrates how to reference existing content in a USD stage.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_xforms.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef AddReferenceToGeometry(stage, path):\n    geom = UsdGeom.Xform.Define(stage, path)\n    geom.GetPrim().GetReferences().AddReference('./top.geom.usd')\n    return geom\n\ndef Step2():\n    stage = MakeInitialStage('Step2.usda')\n    stage.SetMetadata('comment', 'Step 2: Geometry reference')\n    top = AddReferenceToGeometry(stage, '/Top')\n    stage.Save()\n```\n\n----------------------------------------\n\nTITLE: Conditional Sublayer Inclusion in USD\nDESCRIPTION: This snippet shows how to use variable expressions to conditionally include sublayers based on the current render pass. It defines an expression variable for the render pass and uses it to dynamically specify a sublayer file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/variable_expressions.rst#2025-04-23_snippet_17\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    expressionVariables = {\n        string RENDER_PASS = \"fx\"\n    }\n\n    subLayers = [\n        @`\"render_pass_${RENDER_PASS}.usd\"`@,\n        ...\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Camera with Perspective Projection in USD\nDESCRIPTION: Example of setting up a Camera prim with perspective projection, including focal length, aperture dimensions and clipping range values. Uses typical defaults with a perspective projection.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_22\n\nLANGUAGE: usda\nCODE:\n```\ndef Camera \"Camera\"\n{\n    token projection = \"perspective\"\n    float focalLength = 50\n    float horizontalAperture = 20.955\n    float verticalAperture = 15.29\n    float2 clippingRange = (1, 1000000)\n}\n```\n\n----------------------------------------\n\nTITLE: Using the defined() Function in USD Expression Variables\nDESCRIPTION: This snippet demonstrates how to use the defined() function to check if variables are defined in USD expression variables.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/variable_expressions.rst#2025-04-23_snippet_8\n\nLANGUAGE: usda\nCODE:\n```\ndefined(\"VARIABLE1\", \"VARIABLE2\") # returns true if VARIABLE1 and VARIABLE2 are both defined \n```\n\n----------------------------------------\n\nTITLE: Blocking Primvar using BlockPrimvar() in OpenUSD\nDESCRIPTION: Demonstrates the use of BlockPrimvar() method to block both primvar elements and indices. This ensures a clean removal of primvar data.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/primvars.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nprimvar_api.BlockPrimvar(\"primvars:displayColor\")\n```\n\n----------------------------------------\n\nTITLE: Updated USD Stage After Moving Prim\nDESCRIPTION: Shows the updated USD stage after moving a prim, with the relationship automatically updated.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_18\n\nLANGUAGE: usda\nCODE:\n```\ndef \"groupA\" ()\n{\n    custom rel charA = </oldAssets/reviewed/charA>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a USD Prim with Low-Level API\nDESCRIPTION: Example of defining a USD prim using lower-level APIs that are not schema-aware and would need manual version tagging.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_schema_versioning.rst#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nUsdStage::DefinePrim()\n```\n\nLANGUAGE: cpp\nCODE:\n```\nSdfPrimSpec::New()\n```\n\n----------------------------------------\n\nTITLE: Defining PrimvarReader Base Class and Float2 Implementation in USDA\nDESCRIPTION: Implementation of the PrimvarReader base class and its float2 variant for reading primvar data from geometry surfaces. Includes variable typing and inheritance structure.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/spec_usdpreviewsurface.rst#2025-04-23_snippet_3\n\nLANGUAGE: usda\nCODE:\n```\nclass \"UsdPrimvarReader\" (\n    sdrMetadata = {\n        token role = \"primvar\"\n    }\n)\n{\n    string inputs:varname  (\n        connectability = \"interfaceOnly\"\n        doc = \"\"\"Name of the primvar to be fetched from the geometry.\"\"\"\n        sdrMetadata = {\n            token primvarProperty = \"1\"\n        }\n    )    \n}\n\ndef Shader \"UsdPrimvarReader_float2\" (\n    inherits = </UsdPrimvarReader>\n)\n{\n    uniform token info:id = \"UsdPrimvarReader_float2\"\n\n    float2 inputs:fallback = (0.0, 0.0) (\n        doc = \"\"\"Fallback value to be returned when fetch failed.\"\"\"\n        sdrMetadata = {\n            token defaultInput = \"1\"\n        }\n    )\n\n    float2 outputs:result\n}\n```\n\n----------------------------------------\n\nTITLE: Building USD on Windows\nDESCRIPTION: Command to build and install USD and its dependencies on Windows systems using the build_usd.py script.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/README.md#2025-04-23_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nC:\\> python OpenUSD\\build_scripts\\build_usd.py \"C:\\path\\to\\my_usd_install_dir\"\n```\n\n----------------------------------------\n\nTITLE: Using usdchecker to Validate USD Files\nDESCRIPTION: usdchecker validates USD or USDZ files using a series of rules and metrics. It takes a file path and has options for checking specific rules, verbose output, and dumping all metadata.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toolset.rst#2025-04-23_snippet_8\n\nLANGUAGE: none\nCODE:\n```\nusdchecker [-h] [-v] [--verbose] [--nocheck CHECK] [--check CHECK]\n           [--dumpAllMetadata]\n           [--dumpAllPaths]\n           [--checkAssetIDs]\n           [--dumpAllLayers]\n           [--rootPackageOnly]\n           [--skipVariants]\n           [--noInvalidateCaches]\n           FILE\n```\n\n----------------------------------------\n\nTITLE: Crowd Asset Variant Selection Example\nDESCRIPTION: Demonstrates using variable expressions for flexible variant selections in a crowd scene.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/variable_expressions.rst#2025-04-23_snippet_13\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    expressionVariables = {\n        string COLOR_GROUP_1 = \"regular\"\n        string COLOR_GROUP_2 = \"regular\"\n    }\n)\n\ndef \"Crowd\"\n{\n    def \"Model_1\" (\n        variantSelection = {\n            string palette = \"`${COLOR_GROUP_1}`\"\n        }\n    )\n    {\n    }\n\n    def \"Model_2\" (\n        variantSelection = {\n            string palette = \"`${COLOR_GROUP_2}`\"\n        }\n    )\n    {\n    }\n\n    # etc., etc. ... \n}\n```\n\n----------------------------------------\n\nTITLE: Defining Planet Class and Sphere in USD\nDESCRIPTION: This snippet shows a USD file defining a Planet class and a Sphere prim representing a generic planet. It demonstrates inheritance, kind specification, and variant sets for rings.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/usdfaq.rst#2025-04-23_snippet_1\n\nLANGUAGE: USDA\nCODE:\n```\n#usda 1.0\n\nclass \"_class_Planet\"\n{\n}\n\ndef Sphere \"Planet\" (\n    inherits = </_class_Planet>\n    kind = \"model\"\n    variantSets = \"rings\"\n    variants = {\n        string rings = \"none\"\n    }\n)\n{\n    variantSet \"rings\" = {\n        \"none\" {\n            bool has_rings = False\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default RenderSettings in USD Layer Metadata\nDESCRIPTION: Example showing how to specify the default RenderSettings to be used via the renderSettingsPrimPath layer metadata field in a USD file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_27\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    renderSettingsPrimPath = \"/Render/PrimarySettings\"\n)\n```\n\n----------------------------------------\n\nTITLE: Applying CollectionAPI to a USD Prim\nDESCRIPTION: Demonstrates how to apply the CollectionAPI schema to a prim in USD to create a collection with a specific name.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_1\n\nLANGUAGE: usda\nCODE:\n```\ndef \"CollectionPrim\" (\n    prepend apiSchemas = [\"CollectionAPI:myCollection\"]\n)\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a UsdVol Volume with an OpenVDBAsset Field in USDA\nDESCRIPTION: This USDA snippet defines a `Volume` prim named \"Volume\". It includes a `MaterialBindingAPI` schema, specifies a `field:density` relationship pointing to a child `OpenVDBAsset` prim \"densityVDB\", sets transform operations (translate, scale), and binds a material (`</Materials/VolumeMaterial>`). The nested `OpenVDBAsset` prim specifies the `fieldName` (\"density\") within the external VDB file located at `@/vdbdata/smoke_plume.101.vdb@`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdVol/userDoc/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\ndef Volume \"Volume\" (\n    prepend apiSchemas = [\"MaterialBindingAPI\"]\n)\n{\n    custom rel field:density = </Volume/densityVDB>\n    uniform token purpose = \"render\"\n    double3 xformOp:scale = (1, 1, 1)\n    double3 xformOp:translate = (0, -3, 0)\n    token[] xformOpOrder = [\"xformOp:translate\", \"xformOp:scale\"]\n    rel material:binding = </Materials/VolumeMaterial>    \n\n    def OpenVDBAsset \"densityVDB\"\n    {\n        token fieldName = \"density\"\n        asset filePath = @/vdbdata/smoke_plume.101.vdb@,\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Custom USD Schemas in C++\nDESCRIPTION: This C++ code snippet demonstrates how to load a test scene, construct schema prims, and use the API provided by schema code generation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_generating_new_schema.rst#2025-04-23_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nUsdStageRefPtr stage = UsdStage::Open(\"/path/to/testenv/Test.usda\");\n\nUsdPrim cp = stage->GetPrimAtPath(\"/Complex\");\n\nUsdSchemaExamplesSimple simple(cp);\nUsdRelationship target = simple.GetTargetRel();\nUsdAttribute intAttr = simple.GetIntAttrAttr();\n\nUsdSchemaExamplesComplex complex(cp);\nstd::cout << complex.GetComplexStringAttr().Get<string>() << std::endl;\n\nUsdPrim obj = stage->GetPrimAtPath(\"/Object\");\nUsdSchemaExamplesParamsAPI paramsAPI = UsdSchemaExamplesParamsAPI::Apply(obj);\nassert(obj.HasAPI<UsdSchemaExamplesParamsAPI>());\nstd::cout << \"mass: \" << paramsAPI.GetMassAttr().Get<double>() << std::endl;\nstd::cout << \"velocity: \" << paramsAPI.GetVelocityAttr().Get<double>() << std::endl;\nstd::cout << \"volume: \" << paramsAPI.GetVolumeAttr().Get<double>() << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Overriding Nested Prim Properties in Python\nDESCRIPTION: Demonstrates how to override properties of a prim that exists via reference. Changes the display color of the sphere within the second reference.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_referencing_layers.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\noverSphere = UsdGeom.Sphere.Get(refStage, '/refSphere2/world')\noverSphere.GetDisplayColorAttr().Set( [(1, 0, 0)] )\nprint(refStage.GetRootLayer().ExportToString())\nrefStage.GetRootLayer().Save()\n```\n\n----------------------------------------\n\nTITLE: Defining Base Layer for USD Schema Generation\nDESCRIPTION: This USDA snippet defines the base layer for creating new schema classes, including necessary sublayers and global settings.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_generating_new_schema.rst#2025-04-23_snippet_1\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    \"\"\" This file describes an example schema for code generation using\n        usdGenSchema.\n    \"\"\"\n    subLayers = [\n        # To refer to schema types defined in schema.usda files from other \n        # libraries, simply add comma-separated lines of the form \n        # @<library name>/schema.usda@. In this example, we're referring \n        # to schema types from 'usd'. If you were adding sub-classes of \n        # UsdGeom schema types, you would use usdGeom/schema.usda instead.\n        @usd/schema.usda@\n    ]\n)\n\nover \"GLOBAL\" (\n    customData = {\n        string libraryName       = \"usdSchemaExamples\"\n        string libraryPath       = \"./\"\n        string libraryPrefix     = \"UsdSchemaExamples\"\n    }\n) { \n}\n```\n\n----------------------------------------\n\nTITLE: Flattened USD Result\nDESCRIPTION: Shows the flattened USD file that results from the composition of all referenced layers and overrides. The stage contains concrete prims with their final property values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_referencing_layers.rst#2025-04-23_snippet_13\n\nLANGUAGE: usd\nCODE:\n```\n#usda 1.0\n(\n    doc = \"\"\"Generated from Composed Stage of root layer RefExample.usda\n\"\"\"\n)\n\ndef Xform \"refSphere\"\n{\n    double3 xformOp:translate = (4, 5, 6)\n    uniform token[] xformOpOrder = []\n\n    def Sphere \"world\"\n    {\n        float3[] extent = [(-2, -2, -2), (2, 2, 2)]\n        color3f[] primvars:displayColor = [(0, 0, 1)]\n        double radius = 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Varying and Vertex Interpolation in USD\nDESCRIPTION: This snippet defines two meshes, one with varying interpolation and one with vertex interpolation, to demonstrate the subtle differences between these interpolation modes when used with high subdivision.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/primvars.rst#2025-04-23_snippet_4\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n)\n\ndef Mesh \"varying\"\n{\n    float3[] extent = [(-1, 0, 0), (1, 1, 0)]\n    point3f[] points = [(-1, 0, 0), (-1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 1, 0), (1, 0, 0)]\n    int[] faceVertexCounts = [4, 4]\n    int[] faceVertexIndices = [3, 2, 1, 0, 5, 4, 2, 3]\n    \n    color3f[] primvars:displayColor = [(0, 0, 0), (0,0,0), (1,1,1), (1,1,1), (0,0,0), (0,0,0)] (\n        interpolation = \"varying\"\n    )\n\n    double3 xformOp:translate = (0, 0, -10)\n    uniform token[] xformOpOrder = [\"xformOp:translate\"]  \n}\n\ndef Mesh \"vertex\"\n{\n    float3[] extent = [(-1, 0, 0), (1, 1, 0)]\n    point3f[] points = [(-1, 0, 0), (-1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 1, 0), (1, 0, 0)]\n    int[] faceVertexCounts = [4, 4]\n    int[] faceVertexIndices = [3, 2, 1, 0, 5, 4, 2, 3]\n    \n    color3f[] primvars:displayColor = [(0, 0, 0), (0,0,0), (1,1,1), (1,1,1), (0,0,0), (0,0,0)] (\n        interpolation = \"vertex\"\n    )\n\n    double3 xformOp:translate = (0, -1.5, -10)\n    uniform token[] xformOpOrder = [\"xformOp:translate\"]  \n}\n```\n\n----------------------------------------\n\nTITLE: Basic USD Scene Description Example\nDESCRIPTION: Simple example showing USD scene description with a boolean property.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/usdfaq.rst#2025-04-23_snippet_2\n\nLANGUAGE: usda\nCODE:\n```\n\"with_rings\" {\n    bool has_rings = True\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Path and Debug Output\nDESCRIPTION: Example of setting up plugin path and enabling debug output for plugin loading.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/usdfaq.rst#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nset PXR_PLUGINPATH_NAME=S:/dev/libs/OpenUSD/plugin/usd\nset TF_DEBUG=PLUG_INFO_SEARCH\nyourMain.exe\n```\n\n----------------------------------------\n\nTITLE: Schema API Management Functions in C++\nDESCRIPTION: Functions for applying, checking applicability, and removing API schemas with version awareness.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_schema_versioning.rst#2025-04-23_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nApplyAPI(TfToken schemaIdentifer)\nApplyAPI(TfToken schemaFamily, UsdVersion version)\nCanApplyAPI(TfToken schemaIdentifer, std::string *whyNot = nullptr)\nCanApplyAPI(TfToken schemaFamily, UsdVersion version, std::string *whyNot = nullptr)\nRemoveAPI(TfToken schemaIdentifer)\nRemoveAPI(TfToken schemaFamily, UsdVersion version)\n```\n\n----------------------------------------\n\nTITLE: Deleting Prims and Handling Edit Application - USD Namespace Editor Python\nDESCRIPTION: Demonstrates how to attempt deletion of a prim at a specified Sdf path using the USD Namespace Editor API in Python, and check if edits can be applied with CanApplyEdits(). If applying edits fails, the whyNot explanation can be used for error handling or messaging. Required dependencies: A valid USD stage and NamespaceEditor instance; editor must be properly initialized. Input: a prim path string; Output: edits applied to the USD stage or error handling flow.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\neditor.DeletePrimAtPath(\"/primDoesNotExist\")\n# Check first if we can delete /primDoesNotExist\ncanApplyResult = editor.CanApplyEdits()  \nif canApplyResult:\n    editor.ApplyEdits()\nelse:\n    # Handle error, using canApplyResult.whyNot as needed, etc.\n```\n\n----------------------------------------\n\nTITLE: Setting Light Shader ID in USD\nDESCRIPTION: Defines a token attribute for specifying the shader identifier when render context-specific IDs are unavailable. For intrinsic lights, defaults to the light type name and registers a corresponding Sdr shader node.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/LightAPI.md#2025-04-23_snippet_7\n\nLANGUAGE: usd\nCODE:\n```\nlight:shaderId = \"\"\n```\n\n----------------------------------------\n\nTITLE: Generated USD Stage with Explicit Value Clip Metadata (usda)\nDESCRIPTION: Shows the `result.usda` file generated by `usdstitchclips` using explicit metadata. It includes `subLayers` for topology, and an `over` defining the `clips` dictionary with explicit `active` times, `assetPaths`, `manifestAssetPath`, `primPath`, and `times` arrays.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/valueClips.md#2025-04-23_snippet_12\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    endTimeCode = 103\n    startTimeCode = 101\n    subLayers = [\n        @./result.topology.usda@\n    ]\n)\n\nover \"World\" \n{\n    over \"model\" (\n        clips = {\n            dictionary default = {\n                double2[] active = [(101, 0), (102, 1), (103, 2)]\n                asset[] assetPaths = [@./101.usd@, @./102.usd@, @./103.usd@]\n                asset manifestAssetPath = @./result.topology.usda@\n                string primPath = \"/World/model\"\n                double2[] times = [(101, 101), (102, 102), (103, 103)]\n            }\n        }\n    )\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ArResolverContext Class Interface in C++\nDESCRIPTION: This code snippet defines the new interface for the ArResolverContext class in Ar 2.0. It includes static factory methods for creating contexts and a variadic template constructor for initializing contexts.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_ar2.rst#2025-04-23_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\nclass ArResolverContext\n{\npublic:\n    // These factory methods call into protected methods on ArResolver\n    // to allow resolvers to customize behavior.\n    static ArResolverContext CreateDefault();\n    static ArResolverContext CreateForAsset(const std::string& assetPath);\n    static ArResolverContext CreateFromString(const std::string& configStr);\n    static ArResolverContext CreateFromString(\n        const std::vector<std::pair<std::string, std::string>>& configStr);\n\n\n    ArResolverContext();\n\n\n    template <class ... Context>\n    ArResolverContext(const Context&... contexts);\n\n\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Time-Varying Property Stacks with UsdProperty::GetPropertyStack in C++\nDESCRIPTION: A C++ method on UsdProperty used to get the stack of layer specifications that contribute to the property's value. It requires a timeCode argument specifically because Value Clips can alter the set of contributing layers over time.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_51\n\nLANGUAGE: cpp\nCODE:\n```\nUsdProperty::GetPropertyStack\n```\n\n----------------------------------------\n\nTITLE: Asset Path Conditional Example in USDA\nDESCRIPTION: Shows how to conditionally return different asset paths based on a boolean variable.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/variable_expressions.rst#2025-04-23_snippet_10\n\nLANGUAGE: usda\nCODE:\n```\nif(${USE_OLD_ASSETS_BOOLEAN_VAR}, \"/archived/Assets\", ${CURRENT_ASSETS_PATH})\n```\n\n----------------------------------------\n\nTITLE: Defining Lights with Different Color Temperatures in USD\nDESCRIPTION: This USD snippet defines three RectLights with different colorTemperature values (6500, 3500, and 9500) to show how color temperature affects light color. The enableColorTemperature attribute is set to true for all lights.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: usda\nCODE:\n```\ndef Scope \"Lights\"\n{\n    def RectLight \"LightIntensity1\"\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestSpheres/Sphere1>\n        ]        \n\n        float inputs:intensity = 20.0        \n        bool inputs:enableColorTemperature = true\n        float inputs:colorTemperature = 6500\n        double3 xformOp:translate = (-2.5, 5, 3)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n    def RectLight \"LightIntensity2\"\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestSpheres/Sphere2>\n        ]        \n\n        float inputs:intensity = 20.0\n        bool inputs:enableColorTemperature = true\n        float inputs:colorTemperature = 3500\n        double3 xformOp:translate = (0, 5, 3)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n    def RectLight \"LightIntensity3\"\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestSpheres/Sphere3>\n        ]        \n\n        float inputs:intensity = 20.0\n        bool inputs:enableColorTemperature = true\n        float inputs:colorTemperature = 9500\n        double3 xformOp:translate = (2.5, 5, 3)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running usdstitchclips (Bash)\nDESCRIPTION: Example usage of the usdstitchclips command-line tool, which provides a Value Clip representation of input files for sequential animation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toolset.rst#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nusdstitchclips --clipPath /World/fx/Particles_Splash --templateMetadata --templatePath 'assets/splash.###.usd' --stride 0.25 --activeOffset 0.125 in.*.usd\n```\n\n----------------------------------------\n\nTITLE: Defining a Cone Primitive in OpenUSD\nDESCRIPTION: A complete definition of a Cone primitive with radius 0.5 and height 2. The data includes full topology information with face vertex counts, indices, points (vertices), and normal vectors for a CatmullClark subdivision surface.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/geomUtil/testenv/testMeshGenerators/baseline/generatedMeshes_closed.txt#2025-04-23_snippet_1\n\nLANGUAGE: 3D geometry\nCODE:\n```\n2. Cone\n-------\nradius = 0.5, height = 2, sweep = 360\n\nTopology:\n  (rightHanded, catmullClark, ([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]), ([2, 1, 0, 3, 2, 0, 4, 3, 0, 5, 4, 0, 6, 5, 0, 7, 6, 0, 8, 7, 0, 9, 8, 0, 10, 9, 0, 1, 10, 0, 11, 12, 22, 21, 12, 13, 23, 22, 13, 14, 24, 23, 14, 15, 25, 24, 15, 16, 26, 25, 16, 17, 27, 26, 17, 18, 28, 27, 18, 19, 29, 28, 19, 20, 30, 29, 20, 11, 21, 30]), ([]))\n\nPoints:\n  [(0, 0, -1), (0.5, 0, -1), (0.4045085, 0.29389262, -1), (0.15450849, 0.47552827, -1), (-0.15450858, 0.47552824, -1), (-0.40450853, 0.2938926, -1), (-0.5, -4.371139e-8, -1), (-0.40450838, -0.29389277, -1), (-0.15450855, -0.47552824, -1), (0.15450856, -0.47552824, -1), (0.40450847, -0.29389265, -1), (0.5, 0, -1), (0.4045085, 0.29389262, -1), (0.15450849, 0.47552827, -1), (-0.15450858, 0.47552824, -1), (-0.40450853, 0.2938926, -1), (-0.5, -4.371139e-8, -1), (-0.40450838, -0.29389277, -1), (-0.15450855, -0.47552824, -1), (0.15450856, -0.47552824, -1), (0.40450847, -0.29389265, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]\n\nNormals:\n  [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0.9701425, 0, 0.24253562), (0.78486174, 0.57023543, 0.24253562), (0.2997905, 0.92266035, 0.24253562), (-0.29979068, 0.9226603, 0.24253562), (-0.7848618, 0.5702354, 0.24253562), (-0.9701425, -8.481255e-8, 0.24253562), (-0.7848615, -0.5702357, 0.24253562), (-0.29979062, -0.9226603, 0.24253562), (0.29979065, -0.9226603, 0.24253562), (0.7848617, -0.5702355, 0.24253562), (0.9701425, 0, 0.24253562), (0.78486174, 0.57023543, 0.24253562), (0.2997905, 0.92266035, 0.24253562), (-0.29979068, 0.9226603, 0.24253562), (-0.7848618, 0.5702354, 0.24253562), (-0.9701425, -8.481255e-8, 0.24253562), (-0.7848615, -0.5702357, 0.24253562), (-0.29979062, -0.9226603, 0.24253562), (0.29979065, -0.9226603, 0.24253562), (0.7848617, -0.5702355, 0.24253562)]\n```\n\n----------------------------------------\n\nTITLE: Using usdtree to Print USD Layer or Composition Summaries\nDESCRIPTION: usdtree prints a unixtree-like summary of a USD layer or composition to the terminal. It takes a file path and has options for maximum depth, showing only composition arcs, and other display preferences.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toolset.rst#2025-04-23_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nusdtree [-h] [-l] [-m MAXDEPTH] [-a] [-p] [-c] [-i] [-s] [-t] [-v]\n        [--verbose]\n        [FILE]\n```\n\n----------------------------------------\n\nTITLE: ArResolverContext String Creation Interface\nDESCRIPTION: New API for creating resolver contexts from strings, supporting both single and multiple resolver configurations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_ar2.rst#2025-04-23_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nstatic ArResolverContext\nArResolverContext::CreateFromString(\n    const std::string& str);\n\nstatic ArResolverContext\nArResolverContext::CreateFromString(\n    const std::vector<std::pair<std::string, std::string> >& strs);\n```\n\n----------------------------------------\n\nTITLE: Creating Field3DAsset in USDA\nDESCRIPTION: Example showing how to define a Field3DAsset that references a density field in a .f3d file, demonstrating the use of fieldDataType, fieldName, fieldPurpose and filePath attributes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdVol/Field3DAsset.md#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\ndef Field3DAsset \"densityField3D\"\n{\n    token fieldDataType = \"float\"\n    token fieldName = \"density\"\n    token fieldPurpose = \"cluster_0\"\n    asset filePath.timeSamples = {\n        1: @/f3ddata/Volumes_Cumulus01_Puff01M.1.f3d@,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RenderSettingsAPI Class in C++\nDESCRIPTION: Defines the RenderSettingsAPI class as a base for renderer-specific settings schemas. It inherits from an unspecified base class and includes metadata for class name and documentation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_render_settings.rst#2025-04-23_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nclass RenderSettingsAPI {\n   customData = {\n       string className = \"SettingsAPI\"\n   }\n   doc = \"\"\"UsdRenderSettingsAPI is a base class for API schemas\n   to encode renderer-specific settings.\"\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pattern-Based Collections with Expression References in USDA\nDESCRIPTION: Shows how to define multiple collections within a USD prim using the CollectionAPI, including named membership expressions and expression references where one collection references another via the path expression syntax. No external code dependencies; relies on USD scene schema and correct prim path usage. 'membershipExpression' attributes contain pattern rules, and collections are specified by name. Inputs are path expressions as strings, outputs are USD data structures representing collections.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_16\n\nLANGUAGE: usda\nCODE:\n```\ndef \"Food\" \n(\n    prepend apiSchemas = [\"CollectionAPI:allFruit\", \"CollectionAPI:allFood\"]\n)\n{\n    pathExpression collection:allFruit:membershipExpression = \"/Fruit/apple /Fruit/banana /Fruit/*berry\"\n\n    pathExpression collection:allFood:membershipExpression = \"%:allFruit + /Cheese* + /Meat*\"\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Non-Applied API Schema in Python\nDESCRIPTION: This Python code demonstrates how to use a non-applied API schema (UsdModelAPI) to set the 'kind' metadata on a prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nUsd.ModelAPI(prim).SetKind(Kind.Tokens.subcomponent)\n```\n\n----------------------------------------\n\nTITLE: Resulting USDA with Relocates\nDESCRIPTION: Example showing the resulting USDA file after applying relocates.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_7\n\nLANGUAGE: USDA\nCODE:\n```\n#usda 1.0\n(\n    relocates = {\n        </mainModelA/modelAChild>: </mainModelA/renamedChild>\n    }\n)\n\ndef \"mainModelA\" (\n    prepend references = @refModel.usda@</modelA>\n)\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Explicitly Setting Color Space for Attributes in C++\nDESCRIPTION: Illustrates the best practice of explicitly setting color spaces for attributes rather than relying on defaults.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/doxygen/architecture-guides/color_programmers_guide.md#2025-04-23_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n// Explicitly set the color space for attribute\nUsdAttribute attr = prim.GetAttribute(TfToken(\"inputs:file\"));\nattr.SetColorSpace(GfColorSpaceNames->SRGBRec709);\n```\n\n----------------------------------------\n\nTITLE: USD Value Clips with Gaps and Default Values\nDESCRIPTION: This example demonstrates how USD handles gaps in value clips and uses default values from the manifest. It includes three clips, a manifest, and a stage file to illustrate the behavior.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/valueClips.md#2025-04-23_snippet_5\n\nLANGUAGE: usd\nCODE:\n```\n#usda 1.0\n\ndef \"Model\"\n{\n    double a.timeSamples = {\n        1: 1\n    }\n    double b.timeSamples = {\n        1: 1\n    }\n}\n```\n\nLANGUAGE: usd\nCODE:\n```\n#usda 1.0\n\ndef \"Model\"\n{\n}\n```\n\nLANGUAGE: usd\nCODE:\n```\n#usda 1.0\n\ndef \"Model\"\n{\n    double a.timeSamples = {\n        3: 3\n    }\n    double b.timeSamples = {\n        3: 3\n    }\n}\n```\n\nLANGUAGE: usd\nCODE:\n```\n#usda 1.0\n\ndef \"Model\"\n{\n    double a = 10.0\n    double b\n}\n```\n\nLANGUAGE: usd\nCODE:\n```\n#usda 1.0\n\ndef \"TestModel\" (\n    clips = {\n        dictionary default = {\n            double2[] active = [(1, 0), (2, 1), (3, 2)]\n            asset[] assetPaths = [@./clip1.usd@, @./clip2.usd@, @./clip3.usd@]\n            asset manifestAssetPath = @./manifest.usd@\n            string primPath = \"/Model\"\n        }\n    }\n)\n{\n    double a\n    double b\n}\n```\n\n----------------------------------------\n\nTITLE: Using Relocates in UsdNamespaceEditor\nDESCRIPTION: Example showing how UsdNamespaceEditor uses relocates for edits across composition arcs.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n# Rename /mainModelA/modelAChild to /mainModelA/renamedChild\n# Namespace editing will use relocates for this edit\nremoveResult = editor.MovePrimAtPath(\"/mainModelA/modelAChild\", \"/mainModelA/renamedChild\")\neditor.ApplyEdits()\n```\n\n----------------------------------------\n\nTITLE: USDA Color Space Token Values\nDESCRIPTION: Definition of valid token values for the sourceColorSpace input on UsdUvTexture.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/spec_usdpreviewsurface.rst#2025-04-23_snippet_8\n\nLANGUAGE: usda\nCODE:\n```\nraw, sRGB, auto\n```\n\n----------------------------------------\n\nTITLE: Specifying Time for Property Stack Retrieval in C++\nDESCRIPTION: Represents the time coordinate required as an argument for `UsdProperty::GetPropertyStack` in C++. This is necessary because Value Clips can cause the layers contributing to an attribute's value to change depending on the time.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_52\n\nLANGUAGE: cpp\nCODE:\n```\ntimeCode\n```\n\n----------------------------------------\n\nTITLE: Configuring NDR Library Build Parameters with CMake - CMake\nDESCRIPTION: Defines the build setup for the USD NDR component using CMake syntax. This snippet establishes internal variables for prefixes and package names, sets up the main NDR library target with its dependencies (such as tf, plug, vt, etc.), public class declarations and headers, Python module support via .cpp and .py files, resource file inclusion, and Doxygen documentation attachments. Requires an existing USD build environment and available dependencies; all file paths are relative to the source directory structure. Outputs a CMake target ready for integration in the USD build process and available for C++ as well as Python bindings.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/ndr/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE ndr)\n\npxr_library(ndr\n    LIBRARIES\n        tf\n        plug\n        vt\n        work\n        ar\n        sdf\n\n    PUBLIC_CLASSES\n        debugCodes\n        declare\n        discoveryPlugin\n        filesystemDiscovery\n        filesystemDiscoveryHelpers\n        node\n        parserPlugin\n        property\n        registry\n        sdfTypeIndicator\n\n    PUBLIC_HEADERS\n        api.h\n        nodeDiscoveryResult.h\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapDeclare.cpp\n        wrapDiscoveryPlugin.cpp\n        wrapFilesystemDiscovery.cpp\n        wrapFilesystemDiscoveryHelpers.cpp\n        wrapNode.cpp\n        wrapNodeDiscoveryResult.cpp\n        wrapProperty.cpp\n        wrapRegistry.cpp\n        wrapSdfTypeIndicator.cpp\n\n    PYMODULE_FILES\n        __init__.py\n\n    RESOURCE_FILES\n        plugInfo.json\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Speculative Overrides using 'over' in USDA\nDESCRIPTION: This USDA snippet demonstrates the use of the `over` specifier. It defines a prim path `/World/Props/LuxoBall` where each prim is specified as an 'over'. This allows applying an override opinion (setting `radius` to 10) to the `LuxoBall` prim speculatively, meaning the opinions will only apply if `/World/Props/LuxoBall` is defined elsewhere in the composition. If not, these 'over' prims are not considered part of the stage's primary definition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_25\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\nover \"World\"\n{\n    over \"Props\"\n    {\n        over \"LuxoBall\"\n        {\n            double radius = 10\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ComposeFieldsForFileFormatArguments for USD Dynamic File Format\nDESCRIPTION: C++ implementation of the ComposeFieldsForFileFormatArguments function for a USD dynamic file format. This function composes file format arguments based on metadata fields.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/dynamicFileFormat.md#2025-04-23_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nvoid MyDynamicFileFormat::ComposeFieldsForFileFormatArguments(\n    const std::string& assetPath, \n    const PcpDynamicFileFormatContext& context,\n    FileFormatArguments* args,\n    VtValue *dependencyContextData) const\n{\n    static const TfToken dynamicNameToken(\"dynamicName\");\n    VtValue dynamicNameValue;\n    if (context.ComposeValue(dynamicNameToken, &dynamicNameValue)) {\n        (*args)[dynamicNameToken] = TfStringify(dynamicNameValue);\n    }\n\n    static const TfToken dynamicNumberToken(\"dynamicNumber\");\n    static const TfToken isPositiveToken(\"isPositive\");\n    VtValue dynamicNumberValue;\n    if (context.ComposeValue(dynamicNumberToken, &dynamicNumberValue)) {\n        if (dynamicNumberValue.IsHolding<int>() &&\n            dynamicNumberValue.UncheckedGet<int>() > 0) {\n            (*args)[isPositiveToken] = \"true\";\n        } else {\n            (*args)[isPositiveToken] = \"false\";\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Pixar's OpenUSD repository as upstream remote\nDESCRIPTION: Git commands to navigate to the USD directory and add Pixar's OpenUSD repository as an upstream remote. This allows you to easily fetch the latest changes from the main repository.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/contributing_to_usd.rst#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd USD\ngit remote add upstream https://github.com/PixarAnimationStudios/OpenUSD.git\n```\n\n----------------------------------------\n\nTITLE: Traversing USD Stage with Instances\nDESCRIPTION: Demonstrates how to traverse a USD stage containing instance prims and access their children.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/instancing.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n>>> list(stage.Traverse())\n[Usd.Prim(</ParkingLot>), Usd.Prim(</ParkingLot/Car_1>), Usd.Prim(</ParkingLot/Car_2>), Usd.Prim(</ParkingLot/Car_3>), Usd.Prim(</ParkingLot/Car_3/Body>), Usd.Prim(</ParkingLot/Car_3/Door>)]\n\n>>> stage.GetPseudoRoot().GetChildren()\n[Usd.Prim(</ParkingLot>)]\n```\n\n----------------------------------------\n\nTITLE: Configuring Light Material Sync Mode in USD\nDESCRIPTION: Defines a token attribute that controls how light interacts with emissive materials. Supports three modes: materialGlowTintsLight for combined material-light emission, independent for separate material and light behaviors, and noMaterialResponse for light-only behavior.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/LightAPI.md#2025-04-23_snippet_6\n\nLANGUAGE: usd\nCODE:\n```\nlight:materialSyncMode = \"noMaterialResponse\"\n```\n\n----------------------------------------\n\nTITLE: Using Custom USD Schemas in Python\nDESCRIPTION: This Python code snippet shows how to load a test scene, construct schema prims, and use the API provided by schema code generation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_generating_new_schema.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pxr import Usd, UsdSchemaExamples\nstage = Usd.Stage.Open(\"Test.usda\")\ncp = stage.GetPrimAtPath(\"/Complex\")\nsimple = UsdSchemaExamples.Simple(cp)\ntarget = simple.GetTargetRel()\nintAttr = simple.GetIntAttrAttr()\ncomplex = UsdSchemaExamples.Complex(cp)\nprint('complexString: %s' % complex.GetComplexStringAttr().Get())\nobj = stage.GetPrimAtPath(\"/Object\")\nparamsAPI = UsdSchemaExamples.ParamsAPI.Apply(obj)\nassert obj.HasAPI(UsdSchemaExamples.ParamsAPI)\nprint('mass: %s' % paramsAPI.GetMassAttr().Get())\nprint('velocity: %s' % paramsAPI.GetVelocityAttr().Get())\nprint('volume: %s' % paramsAPI.GetVolumeAttr().Get())\n```\n\n----------------------------------------\n\nTITLE: Querying Light Parameters in Hydra\nDESCRIPTION: Shows how to query light parameters by name using the GetLightParamValue() method in Hydra.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_renderers.rst#2025-04-23_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nGetLightParamValue()\n```\n\n----------------------------------------\n\nTITLE: Defining RenderVar Class in C++\nDESCRIPTION: Defines the RenderVar class for describing custom render variables. It includes properties for data type, source name, and source type, with detailed documentation for each.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_render_settings.rst#2025-04-23_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nclass RenderVar \"RenderVar\" (\n    inherits = </Typed>\n    doc = \"\"\"A UsdRenderVar describes a custom data variable for\n    a render to produce.  The prim describes the source of the data, which\n    can be a shader output or an LPE (Light Path Expression), and also\n    allows encoding of (generally renderer-specific) parameters that\n    configure the renderer for computing the variable.\n \n    \\note In the future, UsdRender may standardize RenderVar representation\n    for well-known variables under the sourceType `intrinsic`,\n    such as _r_, _g_, _b_, _a_, _z_, or _id_.\n    \"\"\"\n    customData = {\n         string className = \"Var\"\n    }\n) {\n    uniform token dataType = \"color3f\" (\n        doc = \"\"\"The type of this channel, as a USD attribute type.\"\"\"\n    )\n    uniform string sourceName = \"\" (\n        doc = \"\"\"The renderer should look for an output of this name\n        as the computed value for the RenderVar.\"\"\"\n    )\n    uniform token sourceType = \"raw\" (\n        doc = \"\"\"Indicates the type of the source.\n\n        - \"raw\": The name should be passed directly to the\n          renderer.  This is the default behavior.\n        - \"primvar\":  This source represents the name of a primvar.\n          Some renderers may use this to ensure that the primvar\n          is provided; other renderers may require that a suitable\n          material network be provided, in which case this is simply\n          an advisory setting.\n        - \"lpe\":  Specifies a Light Path Expression in the\n          [OSL Light Path Expressions language](https://github.com/imageworks/OpenShadingLanguage/wiki/OSL-Light-Path-Expressions) as the source for\n          this RenderVar.  Some renderers may use extensions to\n          that syntax, which will necessarily be non-portable.\n        - \"intrinsic\":  This setting is currently unimplemented,\n          but represents a future namespace for UsdRender to provide\n          portable baseline RenderVars, such as camera depth, that\n          may have varying implementations for each renderer.\n        \"\"\"\n        allowedTokens = [\"raw\", \"primvar\", \"lpe\", \"intrinsic\"]\n    )\n\n    # XXX We propose that filtering and remapping parameters be added as \n    #     custom/dynamic properties in a \"parameters:\" namespace.  \n    #     Renderer-specific parameters for RenderMan would go in the \n    #     namespace \"parameters:ri:\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Attribute with Default and TimeSamples in USDA\nDESCRIPTION: This example shows how to define an attribute (radius) with both a default value and time samples in USD ASCII format. It demonstrates the syntax for specifying time-varying values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_7\n\nLANGUAGE: USDA\nCODE:\n```\ndef Sphere \"BigBall\" \n{\n    double radius = 100\n    double radius.timeSamples = {\n        1: 100,\n        24: 500,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Public Classes for OpenUSD Shader Schema\nDESCRIPTION: This snippet enumerates the public classes that are part of the OpenUSD shader schema. These classes likely define the core functionality for shading and material systems in OpenUSD.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdShade/generatedSchema.classes.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Public Classes\nconnectableAPI\ncoordSysAPI\nmaterial\nmaterialBindingAPI\nnodeDefAPI\nnodeGraph\nshader\ntokens\n```\n\n----------------------------------------\n\nTITLE: Schema Version Management Functions in C++\nDESCRIPTION: Functions for getting and managing schema versions including GetVersionIfIsInFamily and API application methods.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_schema_versioning.rst#2025-04-23_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nbool GetVersionIfIsInFamily(TfToken schemaFamily, UsdSchemaVersion *version)\nbool GetVersionIfHasAPIInFamily(TfToken schemaFamily, UsdSchemaVersion *version)\nbool GetVersionIfHasAPIInFamily(TfToken schemaFamily, TfToken instanceName, UsdSchemaVersion *version)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Attribute Blocking in USDA\nDESCRIPTION: This snippet illustrates attribute blocking in USD. It shows how a referenced attribute (radius) can be blocked using 'None', causing it to resolve back to its fallback value.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_8\n\nLANGUAGE: USDA\nCODE:\n```\ndef Sphere \"BigBall\" \n{\n    double radius = 100\n    double radius.timeSamples = {\n        1: 100,\n        24: 500,\n    }\n}\n\ndef \"DefaultBall\" (\n    references = </BigBall>\n)\n{\n    double radius = None\n}\n```\n\n----------------------------------------\n\nTITLE: Installing USD Authoring Examples with CMake\nDESCRIPTION: CMake installation command that copies authorVariants.py and HelloWorld.usda files to the specified PXR installation subdirectory for authoring variants examples.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/tutorials/authoringVariants/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n    FILES\n        authorVariants.py\n        HelloWorld.usda\n    DESTINATION\n        ${PXR_INSTALL_SUBDIR}/authoringVariants\n)\n```\n\n----------------------------------------\n\nTITLE: Resulting USD Scene Description in USDA Format\nDESCRIPTION: This USDA code snippet shows the resulting scene description produced by the Python code above. It defines an Xform prim named 'hello' with a child Sphere prim named 'world'. This structure is identical to the one created in the previous Hello World tutorial.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_helloworld_redux.rst#2025-04-23_snippet_1\n\nLANGUAGE: USDA\nCODE:\n```\n#usda 1.0\n\ndef Xform \"hello\"\n{\n    def Sphere \"world\"\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring plugInfo.json for MyDynamicFileFormat\nDESCRIPTION: JSON configuration for the plugin, specifying the MyDynamicFileFormat type, its base class, file extensions, and other metadata.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/dynamicFileFormat.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Plugins\": [\n        {\n            \"Info\": {\n                \"Types\": {\n                    \"MyDynamicFileFormat\": {\n                        \"bases\": [\n                            \"SdfFileFormat\"\n                        ],\n                        \"displayName\": \"Dynamic File Format\",\n                        \"extensions\": [\n                            \"mydynamicfile\"\n                        ],\n                        \"formatId\": \"MyDynamicFileFormat\",\n                        \"primary\": true,\n                        \"target\": \"usd\"\n                    }\n                }\n            },\n            \"LibraryPath\": \"@PLUG_INFO_LIBRARY_PATH@\",\n            \"Name\": \"myDynamicFileFormat\",\n            \"ResourcePath\": \"@PLUG_INFO_RESOURCE_PATH@\",\n            \"Root\": \"@PLUG_INFO_ROOT@\",\n            \"Type\": \"library\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Examining Composed USD Stage with Variants\nDESCRIPTION: Exports the stage to a string to examine the composed (flattened) result, which shows only the currently selected variant's opinion has been applied. Demonstrates how flattening evaluates composition operators.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_authoring_variants.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprint(stage.ExportToString(addSourceFileComment=False))\n```\n\n----------------------------------------\n\nTITLE: Defining an Instanceable Mesh Source in USD (usda)\nDESCRIPTION: This USD snippet (usda format) illustrates the recommended way to handle instancing for single prims, like a mesh. It defines a source prim ('InstancedMeshSource') containing the actual mesh definition and then defines multiple instanceable prims ('Mesh_1', 'Mesh_2') within a 'Model' scope that reference the source mesh prim. This structure ensures that the scenegraph hierarchy beneath the instanceable prim ('Mesh_1', 'Mesh_2') includes the referenced mesh, allowing instancing benefits.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/instancing.md#2025-04-23_snippet_10\n\nLANGUAGE: usd\nCODE:\n```\n### Model.usd\n\n#usda 1.0\n\nover \"InstancedMeshSource\"\n{\n    def Mesh \"Mesh\"\n    {\n        # ...\n    }\n}\n\ndef \"Model\"\n{\n    def \"Mesh_1\" (\n        instanceable = true\n        references = </InstancedMesh>\n    )\n    {\n    }\n\n    def \"Mesh_2\" (\n        instanceable = true\n        references = </InstancedMesh>\n    )\n    {\n    }\n\n    # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Root Layer References Example\nDESCRIPTION: Shows how references work in root.usda with class inheritance and demonstrates the interaction between different layers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_41\n\nLANGUAGE: usda\nCODE:\n```\ndef \"Model_1\" (\n    references = @./model.usda@</Model>\n)\n{\n}\n\nclass \"ClassA\"\n{\n    def \"Rig\"\n    {\n        def \"LRig\"\n        {\n            uniform token rootClassALRig = \"test\"\n        }\n    }\n\n    def \"Anim\"\n    {\n        def \"LAnim\"\n        {\n            uniform token rootClassALAnim = \"test\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Traversing Stage with UsdPrimRange in C++/Python\nDESCRIPTION: Demonstrates using UsdPrimRange for customized iterations, including pre-and-post-order traversals and subtree pruning. UsdStage::Traverse() is a convenience method for full stage traversal.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/commonIdioms.md#2025-04-23_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nUsdPrimRange\nUsdStage::Traverse()\n```\n\n----------------------------------------\n\nTITLE: Defining Color Space from RGB to XYZ Matrix in C++\nDESCRIPTION: Shows an alternative method to define a color space using an RGB to XYZ transformation matrix with the UsdColorSpaceDefinitionAPI.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/doxygen/architecture-guides/color_programmers_guide.md#2025-04-23_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nGfMatrix3f rgbToXYZ = /* RGB to XYZ transformation matrix */;\nfloat gamma = 1.0;\nfloat linearBias = 0.0;\n\ndefinition.CreateColorSpaceAttrsWithMatrix(rgbToXYZ, gamma, linearBias);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Light Normalization in USD\nDESCRIPTION: This USD snippet defines two SphereLights with different radii and normalize set to false. It demonstrates how the area of the light affects its power when normalize is disabled. The scene includes two test spheres to show the lighting effect.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    upAxis = \"Y\"\n)\n\ndef Scope \"Lights\"\n{\n    def SphereLight \"Light1\"\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestSpheres/Sphere1>\n        ]        \n\n        float inputs:radius = 1\n        bool inputs:normalize = false\n\n        color3f inputs:color = (1, 1, 1)\n        float inputs:intensity = 10.0\n        double3 xformOp:translate = (-2.5, 5, 3)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n    def SphereLight \"Light2\"\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestSpheres/Sphere2>\n        ]        \n\n        float inputs:radius = 2\n        bool inputs:normalize = false\n\n        color3f inputs:color = (1, 1, 1)\n        float inputs:intensity = 10.0\n        double3 xformOp:translate = (0, 5, 3)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n}\n\ndef Xform \"TestSpheres\"\n{\n    def Sphere \"Sphere1\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (-2.5, 5, -2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Sphere \"Sphere2\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (0, 5, -2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Blocking Indexed Primvars in Python USD API\nDESCRIPTION: This Python snippet shows the correct way to block an indexed primvar using the USD API. It demonstrates that directly blocking the primvar attribute is insufficient and recommends using the BlockPrimvar() API instead.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/primvars.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nstage = Usd.Stage.Open(\"faceVarying-example.usda\")\n\nprim = stage.GetPrimAtPath(\"/faceVarying\")\n\nprimvar_api = UsdGeom.PrimvarsAPI(prim)\n\n# If you call Block() on the primvar attribute, this will only block the\n# elements, not the indices\n\nprimvar = primvar_api.GetPrimvar(\"primvars:displayColor\")\n```\n\n----------------------------------------\n\nTITLE: Defining Disk in OpenUSD\nDESCRIPTION: This snippet defines the topology, points, and normals for a disk with a specified radius and sweep angle. It uses catmullClark subdivision and defines the mesh structure for a flat circular shape.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/geomUtil/testenv/testMeshGenerators/baseline/generatedMeshes_open.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nradius = 0.5\nsweep = 120\n\nTopology = (\n  rightHanded,\n  catmullClark,\n  ([3, 3, 3, 3, 3, 3, 3, 3, 3, 3]),\n  ([0, 1, 11, 1, 2, 11, 2, 3, 11, 3, 4, 11, 4, 5, 11, 5, 6, 11, 6, 7, 11, 7, 8, 11, 8, 9, 11, 9, 10, 11]),\n  ([])\n)\n\nPoints = [\n  (0.5, 0, 0),\n  (0.4890738, 0.10395585, 0),\n  (0.4567727, 0.20336832, 0),\n  (0.4045085, 0.29389262, 0),\n  (0.33456528, 0.37157243, 0),\n  (0.24999999, 0.43301272, 0),\n  (0.15450849, 0.47552827, 0),\n  (0.05226421, 0.49726096, 0),\n  (-0.052264255, 0.49726096, 0),\n  (-0.15450852, 0.47552824, 0),\n  (-0.25000003, 0.4330127, 0),\n  (0, 0, 0)\n]\n\nNormals = [\n  (0, 0, 1)\n]\n```\n\n----------------------------------------\n\nTITLE: Iterating Over All Nodes in USD\nDESCRIPTION: This snippet demonstrates forward and reverse iteration over all nodes and all prim specs for the prim path </Model>. It provides a comprehensive view of all elements in the USD scene, including root, inherit, reference, variant, payload, and specialize nodes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpIterator.testenv/baseline/iteration_results.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nIterating over all nodes for </Model>:\n @root.sdf@</Model>\troot\n @root.sdf@</Class>\tinherit\n @mcat.sdf@</Model>\treference\n @mcat.sdf@</Class>\tinherit\n @mcat.sdf@</Model{pin=latest}>\tvariant\n @model_latest.sdf@</Model>\treference\n @model_latest_payload.sdf@</Model>\tpayload\n @mcat.sdf@</Specializes>\tspecialize\n @root.sdf@</Specializes>\tspecialize\n @mcat.sdf@</Specializes>\tspecialize\n\nReverse iterating over all nodes for </Model>:\n @mcat.sdf@</Specializes>\tspecialize\n @root.sdf@</Specializes>\tspecialize\n @mcat.sdf@</Specializes>\tspecialize\n @model_latest_payload.sdf@</Model>\tpayload\n @model_latest.sdf@</Model>\treference\n @mcat.sdf@</Model{pin=latest}>\tvariant\n @mcat.sdf@</Class>\tinherit\n @mcat.sdf@</Model>\treference\n @root.sdf@</Class>\tinherit\n @root.sdf@</Model>\troot\n\nIterating over all prim specs for </Model>:\n @root.sdf@</Model>\troot\n @root.sdf@</Class>\tinherit\n @mcat.sdf@</Model>\treference\n @mcat.sdf@</Class>\tinherit\n @mcat.sdf@</Model{pin=latest}>\tvariant\n @model_latest.sdf@</Model>\treference\n @model_latest_payload.sdf@</Model>\tpayload\n @mcat.sdf@</Specializes>\tspecialize\n\nReverse iterating over all prim specs for </Model>:\n @mcat.sdf@</Specializes>\tspecialize\n @model_latest_payload.sdf@</Model>\tpayload\n @model_latest.sdf@</Model>\treference\n @mcat.sdf@</Model{pin=latest}>\tvariant\n @mcat.sdf@</Class>\tinherit\n @mcat.sdf@</Model>\treference\n @root.sdf@</Class>\tinherit\n @root.sdf@</Model>\troot\n```\n\n----------------------------------------\n\nTITLE: Displaying Composed Prim Stack and Properties - Plaintext\nDESCRIPTION: This snippet shows a formatted report of composing primitives within an OpenUSD root, displaying the stacking of SDF layers for specified paths as well as variant selections, child names, property names, property stacking, and relationship targets. It has no dependencies and is output-only. Input is scene layering metadata; output is a readable stack breakdown for debugging or analysis. Intended for human inspection or automated diffing; not for direct execution.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorConnectionPermissionDenied.testenv/baseline/compositionResults_ErrorConnectionPermissionDenied_usd.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/CulledPermissions_2/Foo.x:\n    culled.sdf           /CulledPermissions_2_1/Foo.x\n\n------------------------------------------------------------------------\nResults for composing </CulledPermissions_3>\n\nPrim Stack:\n    root.sdf             /CulledPermissions_3\n    root.sdf             /CulledPermissions_3{pin=stable}\n    culled_stable.sdf    /CulledModel\n    culled_payload.sdf   /CulledModelPayload\n\nVariant Selections:\n    {pin = stable}\n\nChild names:\n     ['sim']\n\nProperty names:\n     ['colliders']\n\nProperty stacks:\n/CulledPermissions_3.colliders:\n    culled_stable.sdf    /CulledModel.colliders\n\nRelationship targets:\n/CulledPermissions_3.colliders:\n    /CulledPermissions_3/sim/CollisionRig/FiztCollBody\n\n------------------------------------------------------------------------\nResults for composing </CulledPermissions_3/sim>\n\nPrim Stack:\n    culled_payload.sdf   /CulledModelPayload/sim\n\nChild names:\n     ['CollisionRig']\n\n------------------------------------------------------------------------\nResults for composing </CulledPermissions_3/sim/CollisionRig>\n\nPrim Stack:\n    culled_payload.sdf   /CulledModelPayload/sim/CollisionRig\n\nChild names:\n     ['FiztCollBody']\n\n------------------------------------------------------------------------\nResults for composing </CulledPermissions_3/sim/CollisionRig/FiztCollBody>\n\nPrim Stack:\n    culled_payload.sdf   /CulledModelPayload/sim/CollisionRig/FiztCollBody\n\n```\n\n----------------------------------------\n\nTITLE: Defining Per-Class Schema Properties in USD schema.usda\nDESCRIPTION: This snippet illustrates how to define custom properties specific to a single schema class (e.g., `PxHairman`) within a `schema.usda` file. It uses the `customData` dictionary inside the class definition to specify settings like `className` (for C++/Python), `fileName` for generated code files, `extraIncludes` for header files, `extraPlugInfo` for additional metadata in `plugInfo.json`, custom `schemaTokens`, and `fallbackTypes` for schema resolution. These settings influence the output of the `usdGenSchema` tool.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/generatingSchemas.md#2025-04-23_snippet_7\n\nLANGUAGE: usda\nCODE:\n```\nclass PxHairman \"PxHairman\" (\n    customData = {\n        string className = \"Hairman\"\n        string fileName = \"_hairman\"\n        string extraIncludes = \"\"\"\n#include \"pxr/usd/usdGeom/primvar.h\"\n\"\"\"\n        dictionary extraPlugInfo = {\n            string customString = \"metadata\"\n            bool customBool = true\n            int customInt = 0\n            dictionary customDict = {\n                string customNestedString = \"nested\"\n            }\n        }\n        dictionary schemaTokens = {\n            dictionary schemaToken1 = {}\n            dictionary schemaToken2 = {\n                string value = \"/non-identifier-tokenValue!\"\n                string doc = \"\"\"doc for schemaToken2\"\"\"\n            }\n        }\n        token[] fallbackTypes = [\"PrimTypeName1\", \"PrimTypeName2\"]\n    }\n)\n{\n}\n\n```\n\n----------------------------------------\n\nTITLE: Exporting USD Layer with Variants\nDESCRIPTION: Exports the root layer to a new file while preserving variant structure. Unlike exporting the entire stage, this maintains the variant set structure without flattening.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_authoring_variants.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstage.GetRootLayer().Export('HelloWorldWithVariants.usda')\n```\n\n----------------------------------------\n\nTITLE: Configuring DiskLight Using IES Light Profile With ShapingAPI in USD - usda\nDESCRIPTION: Defines a DiskLight that leverages an IES light profile file for realistic light distribution using the ShapingAPI in USD ASCII format. Dependencies include the ShapingAPI and access to a valid IES file (here, 'antique_street_lamp.ies') in the asset path; also assumes disk light rendering support. Main parameters configured are IES angleScale (set to 0.3 for beam narrowing), the .ies file asset, normalization toggle for consistent energy, color temperature, and transformation properties. Inputs adjust angular profile and energy normalization; outputs a scene with photometrically accurate light behavior as specified by the IES standard. Limitations include the need for correct IES file format and proper path referencing in USD.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdLux/userDoc/overview.md#2025-04-23_snippet_9\n\nLANGUAGE: usda\nCODE:\n```\ndef Scope \"Lights\"\n{\n    def DiskLight \"Light1\"\n    (\n        prepend apiSchemas = [\"ShapingAPI\"]        \n    )\n    {\n        float inputs:radius = 1\n\n        float inputs:shaping:ies:angleScale = 0.3\n        asset inputs:shaping:ies:file = @antique_street_lamp.ies@\n        bool inputs:shaping:ies:normalize = 1\n\n        float inputs:colorTemperature = 2500\n        bool inputs:enableColorTemperature = 1\n\n        double3 xformOp:translate = (0, 0, -6)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenUSD Schema Components List\nDESCRIPTION: Lists the public classes, Python module files, and resource files used in the OpenUSD schema generation system. Includes core APIs for clips, collections, color spaces, and models.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/generatedSchema.classes.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT.\n\n# Public Classes\napiSchemaBase\nclipsAPI\ncollectionAPI\ncolorSpaceAPI\ncolorSpaceDefinitionAPI\nmodelAPI\ntokens\ntyped\n\n# Python Module Files\nmodule.cpp\nwrapAPISchemaBase.cpp\nwrapClipsAPI.cpp\nwrapCollectionAPI.cpp\nwrapColorSpaceAPI.cpp\nwrapColorSpaceDefinitionAPI.cpp\nwrapModelAPI.cpp\nwrapTokens.cpp\nwrapTyped.cpp\n\n# Resource Files\ngeneratedSchema.usda\nplugInfo.json\nschema.usda:usd/schema.usda\n```\n\n----------------------------------------\n\nTITLE: Defining Light Intensities in UsdLux\nDESCRIPTION: This USDA snippet demonstrates the use of three RectLights with different intensity values (1.0, 10.0, and 20.0) to illuminate three spheres. It showcases how intensity linearly scales light brightness.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdLux/userDoc/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    upAxis = \"Y\"\n)\n\ndef Scope \"Lights\"\n{\n    def RectLight \"LightIntensity1\"\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestSpheres/Sphere1>\n        ]        \n\n        color3f inputs:color = (1, 0, 0)\n        float inputs:intensity = 1.0\n        double3 xformOp:translate = (-2.5, 5, 3)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n    def RectLight \"LightIntensity2\"\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestSpheres/Sphere2>\n        ]        \n\n        color3f inputs:color = (1, 0, 0)\n        float inputs:intensity = 10.0\n        double3 xformOp:translate = (0, 5, 3)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n    def RectLight \"LightIntensity3\"\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestSpheres/Sphere3>\n        ]        \n\n        color3f inputs:color = (1, 0, 0)\n        float inputs:intensity = 20.0\n        double3 xformOp:translate = (2.5, 5, 3)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n}\n\ndef Xform \"TestSpheres\"\n{\n    def Sphere \"Sphere1\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (-2.5, 5, -2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Sphere \"Sphere2\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (0, 5, -2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Sphere \"Sphere3\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (2.5, 5, -2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Transform2d Shader Node in USDA\nDESCRIPTION: Implementation of the Transform2d shader node for applying 2D affine transformations to texture coordinates. Supports scale, rotation, and translation operations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/spec_usdpreviewsurface.rst#2025-04-23_snippet_4\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\ndef Shader \"UsdTransform2d\" (\n    doc = \"\"\"Transform 2d represents a node that can be used to \n    transform 2d data (for instance, texture coordinates).\n    The node applies the following transformation : \n    in * scale * rotate + translation\"\"\"\n    sdrMetadata = {\n        token role = \"math\"\n    }\n)\n{\n    uniform token info:id = \"UsdTransform2d\"\n\n    float2 inputs:in = (0.0, 0.0)\n```\n\n----------------------------------------\n\nTITLE: Testing Namespace Edits for Relocates Impact - USD Namespace Editor Python\nDESCRIPTION: Shows how to configure the Namespace Editor to disallow authoring relocates and test if a move operation would require them, by checking CanApplyEdits. If edits cannot be applied due to relocate requirements, we get a specific error explaining the constraint. Requires USD Python API, a valid stage, and knowledge of the stage's composition arcs; inputs include source and destination prim paths. Outputs are either successful edit operations or an error message regarding needed relocates.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n# Create/use namespace editor that will not use relocates\nnoRelocatesEditOptions = Usd.NamespaceEditor.EditOptions()\nnoRelocatesEditOptions.allowRelocatesAuthoring = False\nnoRelocatesEditor = Usd.NamespaceEditor(stage, noRelocatesEditOptions)\n\n# Rename /mainModelA/modelAChild to /mainModelA/renamedChild\n# This editor is configured to not use relocates, so an error will be shown\nremoveResult = noRelocatesEditor.MovePrimAtPath(\"/mainModelA/modelAChild\", \"/mainModelA/renamedChild\")\napplyResult = noRelocatesEditor.CanApplyEdits()\nif applyResult is not True:\n    # We should get a \"The prim to edit requires authoring relocates since \n    # it composes opinions introduced by ancestral composition arcs; \n    # relocates authoring must be enabled to perform this edit\" error\n    print (\"noRelocatesEditor: Cannot apply edits, reason: \" + applyResult.whyNot)\n```\n\n----------------------------------------\n\nTITLE: List-Edited References Example in USDA\nDESCRIPTION: Demonstrates list editing of references across layers using base and super layer files with add/delete operations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_13\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\ndef \"MyPrim\" (\n    references = [\n        @file1.usd@,\n        @file2.usd@ \n    ]\n)\n{\n}\n```\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    subLayers = [\n        @./base.usd@\n    ]\n)\n\n# Removes reference to file2.usd, while adding a reference to file3.usd at the end of the list \nover \"MyPrim\" (\n    delete references = [ @file2.usd@ ]\n    append references = [ @file3.usd@ ]\n)\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EncapsulationRulesValidator for UsdShade\nDESCRIPTION: Documentation for a validator that ensures connectable prims (Shader, Material, etc.) are only nested inside Container-like Connectable prims (Material, NodeGraph, Light, LightFilter) but not inside Shader prims.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n[usdShadeValidators:EncapsulationRulesValidator]:\n\tDoc: Connectable prims (e.g. Shader, Material, etc) can only be nested inside other Container-like Connectable prims. Container-like prims include Material, NodeGraph, Light, LightFilter. Shader is not a Container-like prim.\n\tKeywords: UsdShadeValidators\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Inherited Properties from Imageable in USD\nDESCRIPTION: This snippet details the inherited properties from the Imageable schema for the GeometryLight. It includes properties for proxy prim, purpose, and visibility.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/GeometryLight.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Inherited Properties ({ref}`Imageable`)\n\n### proxyPrim\n\n**USD type**: `rel` (relationship)\n\n\n\n### purpose\n\n**USD type**: `token`\n\n**Fallback value**: `default`\n\n\n\n### visibility\n\n**USD type**: `token`\n\n**Fallback value**: `inherited`\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Reference Nodes in USD\nDESCRIPTION: This snippet demonstrates forward and reverse iteration over reference nodes and reference prim specs for the prim path </Model>. It shows how references, variants, payloads, and specializes are organized in a USD scene.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpIterator.testenv/baseline/iteration_results.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nIterating over reference nodes for </Model>:\n @mcat.sdf@</Model>\treference\n @mcat.sdf@</Class>\tinherit\n @mcat.sdf@</Model{pin=latest}>\tvariant\n @model_latest.sdf@</Model>\treference\n @model_latest_payload.sdf@</Model>\tpayload\n @mcat.sdf@</Specializes>\tspecialize\n\nReverse iterating over reference nodes for </Model>:\n @mcat.sdf@</Specializes>\tspecialize\n @model_latest_payload.sdf@</Model>\tpayload\n @model_latest.sdf@</Model>\treference\n @mcat.sdf@</Model{pin=latest}>\tvariant\n @mcat.sdf@</Class>\tinherit\n @mcat.sdf@</Model>\treference\n\nIterating over reference prim specs for </Model>:\n @mcat.sdf@</Model>\treference\n @mcat.sdf@</Class>\tinherit\n @mcat.sdf@</Model{pin=latest}>\tvariant\n @model_latest.sdf@</Model>\treference\n @model_latest_payload.sdf@</Model>\tpayload\n\nReverse iterating over reference prim specs for </Model>:\n @model_latest_payload.sdf@</Model>\tpayload\n @model_latest.sdf@</Model>\treference\n @mcat.sdf@</Model{pin=latest}>\tvariant\n @mcat.sdf@</Class>\tinherit\n @mcat.sdf@</Model>\treference\n```\n\n----------------------------------------\n\nTITLE: Defining RectLight and Scene Objects in USDA\nDESCRIPTION: This USDA snippet demonstrates how to create a RectLight and position it near a Sphere and Cube. It shows setting light properties like width, height, color, intensity, and texture, as well as basic scene setup.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/RectLight.md#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    upAxis = \"Y\"\n)\n\ndef Scope \"Lights\"\n{\n    def RectLight \"Light1\"\n    {\n        float inputs:width = 5\n        float inputs:height = 5\n        asset inputs:texture:file = @checkerboard.png@\n\n        color3f inputs:color = (1, 1, 1)\n        float inputs:intensity = 5.0\n        float3 xformOp:rotateXYZ = (0, 90, 0)\n        double3 xformOp:translate = (3.5, 0, -1)\n        uniform token[] xformOpOrder = [\"xformOp:translate\", \"xformOp:rotateXYZ\"]        \n    }\n}\n\ndef Xform \"TestGeom\"\n{\n    def Sphere \"Sphere1\"\n    {\n        token purpose = \"render\"\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (0, 0, -2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Cube \"Cube\"\n    {\n        token purpose = \"render\"\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double size = 8\n        double3 xformOp:translate = (0, 0, -8)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Build for Internal Monolithic Library\nDESCRIPTION: CMake command to build USD core libraries into a single archive and shared library, simplifying installation and linking against USD.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/BUILDING.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncmake -DPXR_BUILD_MONOLITHIC=ON ...\n```\n\n----------------------------------------\n\nTITLE: Primvar Inheritance in USD Scene Namespace\nDESCRIPTION: This snippet illustrates how primvars with constant interpolation are inherited down the scene namespace. The child mesh inherits the displayColor primvar from its parent Xform.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/primvars.rst#2025-04-23_snippet_7\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n)\n\ndef Xform \"ParentXform\"\n{        \n    color3f[] primvars:displayColor = [(1, 0, 0)] (\n        interpolation = \"constant\"\n    )\n    \n    double3 xformOp:translate = (0, 0, -10)\n    uniform token[] xformOpOrder = [\"xformOp:translate\"]  \n\n    def Mesh \"ChildMesh\"\n    {\n        float3[] extent = [(0, 0, 0), (1, 1, 0)]\n        point3f[] points = [(0, 0, 0), (0, 1, 0), (1, 1, 0), (1, 0, 0)]\n        int[] faceVertexCounts = [4]\n        int[] faceVertexIndices = [3, 2, 1, 0]\n        \n        # Primvar inherits down namespace, so this child prim automatically gets primvar \n        \n        double3 xformOp:translate = (0.5, -1, 0)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]  \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SpatialAudio Schema Properties in USDA\nDESCRIPTION: Specifies the properties of the SpatialAudio schema, including file path, aural mode, playback mode, timing, and gain. These properties control how audio is positioned and played within a USD scene.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdaudio.rst#2025-04-23_snippet_0\n\nLANGUAGE: USDA\nCODE:\n```\nuniform asset filePath = @@\nuniform token auralMode = \"spatial\"\nuniform token playbackMode = \"onceFromStart\"\nuniform timeCode startTime = 0\nuniform timeCode endTime = 0\nuniform double mediaOffset = 0\ndouble gain = 1.0\n```\n\n----------------------------------------\n\nTITLE: Controlling Light Spread with `ShapingAPI` Focus in USDA\nDESCRIPTION: This USDA snippet sets up a simple scene containing a `DiskLight` and some geometry (`Cube`, `Plane`). It demonstrates the application of the `ShapingAPI` schema to the light prim and the use of the `inputs:shaping:focus` attribute (initially set to 0) to control the light's spread. The surrounding text explains the effect of varying this focus value (e.g., to 20) and adding a `shaping:focusTint`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdLux/userDoc/overview.md#2025-04-23_snippet_7\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    upAxis = \"Y\"\n)\n\ndef Scope \"Lights\"\n{\n    def DiskLight \"Light1\"\n    (\n        prepend apiSchemas = [\"ShapingAPI\"]\n    )\n    {\n        float inputs:radius = 1\n\n        float inputs:shaping:focus = 0\n\n        double3 xformOp:translate = (0, 0, -11)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n}\n\ndef Xform \"TestGeom\"\n{\n    def Cube \"Cube1\"\n    {\n        double size = 2 \n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (0, 0, -13)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Plane \"Plane\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double length = 20\n        double width = 20\n        double3 xformOp:translate = (0, 0, -14)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Color Spaces using UsdColorSpaceDefinitionAPI in C++\nDESCRIPTION: Illustrates how to define custom color spaces in OpenUSD using the UsdColorSpaceDefinitionAPI. It shows applying a color space definition to a prim and setting its parameters.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/doxygen/architecture-guides/color_programmers_guide.md#2025-04-23_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n// Get a prim to which we'll attach the color space definition\nUsdPrim prim = stage->GetPrimAtPath(SdfPath(\"/Root\"));\n\n// Apply a color space definition named \"customSpace\"\nTfToken definitionName(\"customSpace\");\nUsdColorSpaceDefinitionAPI definition = \n    UsdColorSpaceDefinitionAPI::Apply(prim, definitionName);\n\n// Set the name attribute\ndefinition.CreateNameAttr(VtValue(definitionName));\n\n// Define the color space parameters\nGfVec2f redChroma(0.64, 0.33);\nGfVec2f greenChroma(0.30, 0.60);\nGfVec2f blueChroma(0.15, 0.06);\nGfVec2f whitePoint(0.3127, 0.3290);  // D65\nfloat gamma = 1.0;  // Linear\nfloat linearBias = 0.0;\n\ndefinition.CreateColorSpaceAttrsWithChroma(\n    redChroma, greenChroma, blueChroma, whitePoint, gamma, linearBias);\n```\n\n----------------------------------------\n\nTITLE: Defining MaterialBindingCollectionValidator\nDESCRIPTION: Documentation for a validator that verifies that collections defining material bindings are well-formed to ensure proper material assignment.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n[usdShadeValidators:MaterialBindingCollectionValidator]:\n\tDoc: Verify that a collection defining a material binding is well-formed\n\tKeywords: UsdShadeValidators\n\tSchemaTypes: UsdShadeMaterialBindingAPI\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Using NdrDiscoveryPlugin in C++\nDESCRIPTION: Shows the usage of NdrDiscoveryPlugin, which may be added to UsdLux for registering fallback light definitions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_renderers.rst#2025-04-23_snippet_15\n\nLANGUAGE: C++\nCODE:\n```\nNdrDiscoveryPlugin\n```\n\n----------------------------------------\n\nTITLE: Prepending a Reference in USDA using List Editing\nDESCRIPTION: This USDA snippet (`sequenceFX.usd`) demonstrates adding a reference to `sequenceFX/turbulence.usd` to the beginning of the `references` list for the prim `/World/Props/Prop_145`. This is achieved using the `prepend references` list editing operation within a sequence-level layer, illustrating how opinions are added in weaker layers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_23\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\nover \"World\"\n{\n    over \"Props\"\n    {\n        over \"Prop_145\" (\n            prepend references = @sequenceFX/turbulence.usd@\n        )\n        { \n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global Schema Documentation Metadata in USD\nDESCRIPTION: This snippet shows how to define global metadata for a schema domain, including the library name and user documentation title, using a GLOBAL prim in a USD file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/README.md#2025-04-23_snippet_10\n\nLANGUAGE: usd\nCODE:\n```\nover \"GLOBAL\" (\n    customData = {\n        string libraryName = \"usdVol\"\n        string userDocTitle = \"Volumes\"\n    }\n)\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Material with Backdrop in USDA\nDESCRIPTION: This snippet demonstrates how to define a Material with Shaders and a Backdrop in USDA. It showcases the usage of NodeGraphNodeAPI, positioning of nodes, and Backdrop properties for visual grouping in a node graph.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdUI/Backdrop.md#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\ndef Material \"MyMaterial\"\n{\n    token outputs:mtlx:surface.connect = </World/Material/PreviewSurface.outputs:out>\n\n    def Shader \"PreviewSurface\" (\n        prepend apiSchemas = [\"NodeGraphNodeAPI\"]\n    )\n    {\n        uniform token info:id = \"ND_UsdPreviewSurface_surfaceshader\"\n        color3f inputs:diffuseColor.connect = </World/Material/Color.outputs:out>\n        token outputs:out\n\n        uniform float2 ui:nodegraph:node:pos = (-0.85, 1.9)\n    }\n\n    def Shader \"Color\" (\n        prepend apiSchemas = [\"NodeGraphNodeAPI\"]\n    )\n    {\n        uniform token info:id = \"ND_constant_color3\"\n        color3f inputs:value = (1, 0.023, 0.701)\n        color3f outputs:out\n\n        uniform float2 ui:nodegraph:node:pos = (-2, 2)\n    }\n\n    def Backdrop \"Backdrop\" (\n        prepend apiSchemas = [\"NodeGraphNodeAPI\"]\n    )\n    {\n        uniform token ui:description = \"MyMaterial Nodes\"\n        uniform color3f ui:nodegraph:node:displayColor = (1, 0, 0)\n        uniform float2 ui:nodegraph:node:pos = (-0.8, 0.5)\n        uniform float2 ui:nodegraph:node:size = (450, 330)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Collections Implementation in USDA\nDESCRIPTION: Demonstrates how to define collections using include/exclude relationships to organize scene hierarchies. Shows usage of CollectionAPI schema with expansion rules.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_11\n\nLANGUAGE: usda\nCODE:\n```\nover \"World\"\n{\n    over \"Buildings\" (\n        prepend apiSchemas = \"CollectionAPI:luckyBuildings\"\n    )\n    {\n        uniform token collection:luckyBuildings:expansionRule = \"expandPrims\"\n        rel collection:luckyBuildings:includes = [\n            </World/Buildings/Skyscraper>,\n            </World/Buildings/Pyramid>,\n        ]\n        rel collection:luckyBuildings:excludes = [\n            </World/Buildings/Skyscraper/Floor13>,\n            </World/Buildings/Pyramid/Floor13>,\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenUSD End-to-End Assets and Scripts with CMake\nDESCRIPTION: This CMake command installs the 'assets', 'scripts', and 'tutorial_scripts' directories into the OpenUSD end-to-end installation subdirectory. It uses the PXR_INSTALL_SUBDIR variable to determine the destination path.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/tutorials/endToEnd/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(\n    DIRECTORY\n        assets\n        scripts\n        tutorial_scripts\n    DESTINATION\n        ${PXR_INSTALL_SUBDIR}/endToEnd\n)\n```\n\n----------------------------------------\n\nTITLE: USD Prim Structure with Variants Example\nDESCRIPTION: Shows the structure of a USD prim with a variant set defined. This example demonstrates a grandchild prim containing a modeling variant with a 'withCargoRack' option that contains a great-grandchild prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_27\n\nLANGUAGE: usda\nCODE:\n```\n{\n    def \"GrandChild\" (    # Corresponds to path #1 above\n        add variantSets = [ \"modelingVariant\" ]\n    {\n        variantSet \"modelingVariant\" = {\n            \"withCargoRack\" {\n                def \"GreatGrandchild\"   # Corresponds to path #3 above\n                {\n                }\n            }\n        }\n\n        token visibility   # Corresponds to path #2 above\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Caching Value Resolution Information with UsdResolveInfo in C++\nDESCRIPTION: A C++ object (`UsdResolveInfo`) similar to `UsdAttributeQuery` that clients can use optionally. It caches intermediate results and data structures involved in value resolution to accelerate subsequent queries.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_55\n\nLANGUAGE: cpp\nCODE:\n```\nUsdResolveInfo\n```\n\n----------------------------------------\n\nTITLE: Python USD Instance Query Example\nDESCRIPTION: Example showing how to query prototype information using the USD Python API.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/instancing.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n>>> stage = Usd.Stage.Open('ParkingLot.usd')\n>>> stage.GetPrototypes()\n[Usd.Prim(</__Prototype_1>)]\n```\n\n----------------------------------------\n\nTITLE: Generated USD Topology Layer for Stitched Clips (usda)\nDESCRIPTION: Displays the `result.topology.usd` file generated by `usdstitchclips`. This layer defines the primitive hierarchy (`/World/model`) and attributes (`int x`) that are animated across the stitched clips. It serves as the manifest referenced in the clip definition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/valueClips.md#2025-04-23_snippet_13\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    endTimeCode = 103\n    startTimeCode = 101\n    upAxis = \"Z\"\n)\n\ndef \"World\"\n{\n    def \"model\"\n    {\n        int x\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Building usdgenschemafromsdr Python Tool in CMake\nDESCRIPTION: This CMake block controls the build process for the `usdgenschemafromsdr` tool. It first checks if Python support is enabled via the `PXR_ENABLE_PYTHON_SUPPORT` variable. If not, it skips the build and issues a status message. If Python is enabled, it then checks for the presence of the Jinja2 library (`JINJA2_FOUND`). If Jinja2 is missing, it skips the build with a warning. Only if both Python support is enabled and Jinja2 is found does it proceed to define the `usdgenschemafromsdr` Python binary target using the custom `pxr_python_bin` function, listing its dependencies on other OpenUSD components like `tf`, `sdf`, `usd`, and `usdUtils`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdgenschemafromsdr/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT PXR_ENABLE_PYTHON_SUPPORT)\n    message(STATUS \"Skipping building usdgenschemafromsdr, Python modules required.\")\nelseif (NOT JINJA2_FOUND)\n    message(WARNING \"Skipping building usdgenschemafromsdr due to missing dependency: Jinja2\")\nelse()\n    pxr_python_bin(usdgenschemafromsdr\n        DEPENDENCIES\n            tf\n            sdf\n            usd\n            usdUtils\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Deferred Import Plugin Container - Python\nDESCRIPTION: Optimized PluginContainer implementation using deferred import for better load times\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_usdview_plugin.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pxr import Tf\nfrom pxr.Usdviewq.plugin import PluginContainer\n\n\nclass TutorialPluginContainer(PluginContainer):\n\n    def registerPlugins(self, plugRegistry, usdviewApi):\n\n        printer = self.deferredImport(\".printer\")\n        self._printMessage = plugRegistry.registerCommandPlugin(\n            \"TutorialPluginContainer.printMessage\",\n            \"Print Message\",\n            printer.printMessage)\n\n    def configureView(self, plugRegistry, plugUIBuilder):\n\n        tutMenu = plugUIBuilder.findOrCreateMenu(\"Tutorial\")\n        tutMenu.addItem(self._printMessage)\n\nTf.Type.Define(TutorialPluginContainer)\n```\n\n----------------------------------------\n\nTITLE: Defining UsdRender Schemas in USDA\nDESCRIPTION: This snippet defines the core schemas for the UsdRender domain, including RenderSettingsBase, RenderSettings, and RenderSettingsAPI. It specifies attributes and relationships for configuring render settings, camera selection, resolution, and other rendering parameters.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_render_settings.rst#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\nclass \"RenderSettingsBase\" (\n    inherits = </Typed>\n    doc = \"\"\"Abstract base class that defines render settings that\n    can be specified on either a RenderSettings prim or a RenderProduct \n    prim.\"\"\"\n    customData = {\n         string className = \"SettingsBase\"\n    }\n)\n{\n    rel camera (\n        doc = \"\"\"The _camera_ relationship specifies the primary\n        camera to use in a render.  It must target a UsdGeomCamera.\"\"\"\n    )\n    uniform int2 resolution = (2048, 1080) (\n        doc = \"\"\"The image pixel resolution, corresponding to the\n        camera's screen window.\"\"\"\n    )\n    uniform float pixelAspectRatio = 1.0 (\n        doc = \"\"\"The aspect ratio (width/height) of image pixels..\n        The default ratio 1.0 indicates square pixels.\"\"\"\n    )\n    uniform token aspectRatioConformPolicy = \"expandAperture\" (\n        doc = \"\"\"Indicates the policy to use to resolve an aspect\n        ratio mismatch between the camera aperture and image settings.\n\n        This policy allows a standard render setting to do something\n        reasonable given varying camera inputs.\n\n        The camera aperture aspect ratio is determined by the\n        aperture atributes on the UsdGeomCamera.\n\n        The image aspect ratio is determined by the resolution and\n        pixelAspectRatio attributes in the render settings.\n\n        - \"expandAperture\": if necessary, expand the aperture to\n          fit the image, exposing additional scene content\n        - \"cropAperture\": if necessary, crop the aperture to fit\n          the image, cropping scene content\n        - \"adjustApertureWidth\": if necessary, adjust aperture width\n          to make its aspect ratio match the image\n        - \"adjustApertureHeight\": if necessary, adjust aperture height\n          to make its aspect ratio match the image\n        - \"adjustPixelAspectRatio\": compute pixelAspectRatio to\n          make the image exactly cover the aperture; disregards\n          existing attribute value of pixelAspectRatio\n        \"\"\"\n        allowedTokens = [\"expandAperture\", \"cropAperture\", \"adjustApertureWidth\", \"adjustApertureHeight\", \"adjustPixelAspectRatio\"]\n    )\n    uniform float4 dataWindowNDC = (0.0, 0.0, 1.0, 1.0) (\n        doc = \"\"\"dataWindowNDC specifies the axis-aligned rectangular\n        region in the adjusted aperture window within which the renderer\n        should produce data.\n\n        It is specified as (xmin, ymin, xmax, ymax) in normalized\n        device coordinates, where the range 0 to 1 corresponds to the\n        aperture.  (0,0) corresponds to the bottom-left\n        corner and (1,1) corresponds to the upper-right corner.\n\n        Specifying a window outside the unit square will produce\n        overscan data. Specifying a window that does not cover the unit\n        square will produce a cropped render.\n\n        A pixel is included in the rendered result if the pixel\n        center is contained by the data window.  This is consistent\n        with standard rules used by polygon rasterization engines.\n        \\ref UsdRenderRasterization\n\n        The data window is expressed in NDC so that cropping and\n        overscan may be resolution independent.  In interactive\n        workflows, incremental cropping and resolution adjustment\n        may be intermixed to isolate and examine parts of the scene.\n        In compositing workflows, overscan may be used to support\n        image post-processing kernels, and reduced-resolution proxy\n        renders may be used for faster iteration.\n\n        The dataWindow:ndc coordinate system references the\n        aperture after any adjustments required by\n        aspectRatioConformPolicy.\n        \"\"\"\n    )\n    uniform bool instantaneousShutter = false (\n        doc = \"\"\"Override the targeted _camera_'s _shutterClose_ to be\n        equal to the value of its _shutterOpen_, to produce a zero-width\n        shutter interval.  This gives us a convenient way to disable\n        motion blur.\"\"\"\n    )\n}\n \nclass RenderSettings \"RenderSettings\" (\n    inherits = </RenderSettingsBase>\n    doc = \"\"\"A UsdRenderSettings prim specifies global settings for\n    a render process, including an enumeration of the RenderProducts\n    that should result, and the UsdGeomImageable purposes that should\n    be rendered.  \\ref UsdRenderHowSettingsAffectRendering\"\"\"\n    customData = {\n         string className = \"Settings\"\n         string extraIncludes = \"\"\"\n#include \"pxr/base/gf/frustum.h\"\n\"\"\"\n    }\n)\n{\n    rel products (\n        doc = \"\"\"The set of RenderProducts the render should produce.\n        This relationship should target UsdRenderProduct prims.\n        If no _products_ are specified, an application should produce\n        an rgb image according to the RenderSettings configuration,\n        to a default display or image name.\"\"\"\n    )\n    uniform token[] includedPurposes = [\"default\", \"render\"] (\n        doc = \"\"\"The list of UsdGeomImageable _purpose_ values that\n        should be included in the render.  Note this cannot be\n        specified per-RenderProduct because it is a statement of\n        which geometry is present.\"\"\"\n    )\n    uniform token[] materialBindingPurposes = [\"full\", \"\"] (\n        allowedTokens = [\"full\", \"preview\", \"\"]\n        doc = \"\"\"Ordered list of material purposes to consider when\n        resolving material bindings in the scene.  The empty string\n        indicates the \"allPurpose\" binding.\"\"\"\n    )\n}\n\nclass \"RenderSettingsAPI\" (\n    inherits = </APISchemaBase>\n    customData = {\n        token apiSchemaType = \"singleApply\"\n\n```\n\n----------------------------------------\n\nTITLE: Using Convenience Expressions in USD Python API\nDESCRIPTION: Shows the creation of 'nothing' and 'everything' expressions using Sdf.PathExpression static constructors in the USD Python API. Requires Sdf module from USD. These statically-created expressions can be used as always-false or always-true match rules in code logic. Inputs: none; Outputs: PathExpression objects with either narrowest (match nothing) or broadest (match everything) membership.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\npathExp = Sdf.PathExpression()            # Empty expression, matches nothing\npathExp = Sdf.PathExpression.Nothing()    # Same as empty expression, matches nothing\npathExp = Sdf.PathExpression.Everything() # Matches everything, equivalent to \"//\"\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Info Structure in C++\nDESCRIPTION: C++ structure that holds schema type information including type, identifier, family, version and kind. Used by the schema registry to handle versioned schema definitions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_schema_versioning.rst#2025-04-23_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nstruct SchemaInfo {\n       TfType type;\n       TfToken identifier;\n       TfToken family;\n       UsdSchemaVersion version;\n       UsdSchemaKind kind;\n   };\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for Prim /Model\nDESCRIPTION: Displays the composition analysis results for the USD prim `/Model`. It shows the initial layer loaded (`root.sdf`), the active layer stack, the resolved prim stack indicating inheritance and references from `root.sdf` and `model.sdf`, identified property names (`x`), and the source layer for the property `/Model.x` (`model.sdf` via `/Class.x`). This output helps diagnose how the final prim definition is assembled.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReferenceAndClass.testenv/baseline/compositionResults_BasicReferenceAndClass.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLoading @BasicReferenceAndClass/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </Model>\n\nPrim Stack:\n    root.sdf             /Model\n    root.sdf             /Class\n    model.sdf            /Model\n    model.sdf            /Class\n\nProperty names:\n     ['x']\n\nProperty stacks:\n/Model.x:\n    model.sdf            /Class.x\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for OpenUSD Specifications in reStructuredText\nDESCRIPTION: This snippet creates a table of contents for OpenUSD specifications using reStructuredText directives. It sets up a toctree with a caption and includes links to UsdPreviewSurface and USDZ specification documents.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/spec.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n##############\nSpecifications\n##############\n\n.. toctree::\n   :caption: Specifications\n   :titlesonly:\n\n   spec_usdpreviewsurface\n   spec_usdz\n```\n\n----------------------------------------\n\nTITLE: Reporting Attribute Connection Errors - USD Log Output - Plaintext\nDESCRIPTION: This log-like snippet reports USD (Universal Scene Description) composition errors when attribute connections reference invalid paths or use instance targets incorrectly. The dependencies are internal USD scene composition mechanisms; no code execution is required. Lines specify which attribute path is in error, the affected layer, and why the connection is ignored. Input is automatic from the USD composition process, and output consists of readable error reports to aid users in USD authoring.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInvalidInstanceTargetPath.testenv/baseline/compositionErrors_ErrorInvalidInstanceTargetPath_usd.txt#2025-04-23_snippet_0\n\nLANGUAGE: Plaintext\nCODE:\n```\n------------------------------------------------------------------------\nErrors while composing </ConnectionToLocalClass/Instance_1>\n\nThe attribute connection </ConnectionToLocalClass/Instance_1.y> from </ConnectionToLocalClass/LocalClass.x> in layer @ErrorInvalidInstanceTargetPath/root.sdf@ refers to a path outside the scope of the inherit from </ConnectionToLocalClass/Instance_1>.  Ignoring.\nThe attribute connection </ConnectionToLocalClass/Instance_2.y> from </ConnectionToLocalClass/LocalClass.x> in layer @ErrorInvalidInstanceTargetPath/root.sdf@ is authored in a class but refers to an instance of that class.  Ignoring.\n\n------------------------------------------------------------------------\nErrors while composing </ConnectionToLocalClass/Instance_2>\n\nThe attribute connection </ConnectionToLocalClass/Instance_1.y> from </ConnectionToLocalClass/LocalClass.x> in layer @ErrorInvalidInstanceTargetPath/root.sdf@ is authored in a class but refers to an instance of that class.  Ignoring.\nThe attribute connection </ConnectionToLocalClass/Instance_2.y> from </ConnectionToLocalClass/LocalClass.x> in layer @ErrorInvalidInstanceTargetPath/root.sdf@ refers to a path outside the scope of the inherit from </ConnectionToLocalClass/Instance_2>.  Ignoring.\n\n------------------------------------------------------------------------\nErrors while composing </FaceRig/BrowRig/LBrow/BrowInnUDPosBrowInnUDNeg_sculpt>\n\nThe attribute connection </BrowRig/Anim/RBrow.InnUD> from </BrowRig/SymBrow/BrowInnUDPosBrowInnUDNeg_sculpt.amount> in layer @ErrorInvalidInstanceTargetPath/ref.sdf@ is authored in a class but refers to an instance of that class.  Ignoring.\n\n------------------------------------------------------------------------\nErrors while composing </FaceRig/BrowRig/RBrow/BrowInnUDPosBrowInnUDNeg_sculpt>\n\nThe attribute connection </BrowRig/Anim/LBrow.InnUD> from </BrowRig/SymBrow/BrowInnUDPosBrowInnUDNeg_sculpt.amount> in layer @ErrorInvalidInstanceTargetPath/ref.sdf@ is authored in a class but refers to an instance of that class.  Ignoring.\n\n```\n\n----------------------------------------\n\nTITLE: Updated USD Stage After Moving Referenced Prim\nDESCRIPTION: Displays the flattened results of moving a referenced prim, showing how the change is reflected in all referencing prims.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_21\n\nLANGUAGE: usda\nCODE:\n```\ndef \"asset\" ()\n{\n    def \"assetUpdatedForShot1\" ()\n    {\n    }\n}\n\ndef \"Shot1\" ()\n{\n    def \"shotAsset\" (\n    )\n    {\n        def \"assetUpdatedForShot1\" () \n        {\n        }\n    }\n}\n\ndef \"Shot2\" ()\n{\n    def \"shotAsset\" (\n    )\n    {\n        def \"assetUpdatedForShot1\" () \n        {\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ArResolvedPath Class Interface in C++\nDESCRIPTION: This code snippet defines the new interface for the ArResolvedPath class in Ar 2.0. It includes constructors, assignment operators, comparison operators, and methods to check validity and retrieve the resolved path value.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_ar2.rst#2025-04-23_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nclass ArResolvedPath\n{\npublic:\n    explicit ArResolvedPath(const std::string&);\n    ArResolvedPath(const ArResolvedPath&);\n    ArResolvedPath(ArResolvedPath&&);\n    ~ArResolvedPath();\n\n    ArResolvedPath& operator=(const ArResolvedPath&);\n    ArResolvedPath& operator=(ArResolvedPath&&); \n    bool operator<(const ArResolvedPath&) const;\n    bool operator==(const ArResolvedPath&) const;\n\n\n    // Return true if this object has a non-empty resolved path, false otherwise.\n    explicit operator bool() const;\n\n    // Return resolved path.\n    const std::string& GetValue() const;\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Motion Blur Scale with MotionAPI in USD\nDESCRIPTION: Example demonstrating how to use the MotionAPI schema to adjust motion blur intensity for a specific Xform and its child prims. Sets a blur scale value of 2 to double the amount of motion blur.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_24\n\nLANGUAGE: usda\nCODE:\n```\ndef Xform \"Xform\"\n(\n    prepend apiSchemas = [\"MotionAPI\"]\n)\n{\n    # Double the amount of motion blur (x2) for this Xform and all imageable child prims\n    float motion:blurScale = 2\n    ... \n}\n```\n\n----------------------------------------\n\nTITLE: Defining Coordinate System Attribute in USDA\nDESCRIPTION: Example of defining a coordinate system attribute named 'modelSpace' using USDA syntax. This shows how a coordinate system could be defined on a prim using the proposed API schema.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_coordsys.rst#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\ndef Xform \"SomePrim\" (\n    prepend apiSchemas = [\"UsdShadeCoordSysAPI\"]\n)\n{\n    uniform token coordSys:modelSpace\n}\n```\n\n----------------------------------------\n\nTITLE: Traversing Stage with Deactivated Prims\nDESCRIPTION: Demonstrates how the standard Traverse() function skips inactive prims. After deactivating refSphere2, it no longer appears in the traversal results.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_traversing_stage.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> [x for x in usdviewApi.stage.Traverse()]\n[Usd.Prim(</refSphere>), Usd.Prim(</refSphere/world>)]\n```\n\n----------------------------------------\n\nTITLE: Batch Editing Example\nDESCRIPTION: Demonstrates how to perform batch edits using the UsdNamespaceEditor, including removing deprecated assets and marking others as deprecated.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n# Start a batch of edits to remove deprecated assets and mark other\n# assets as now deprecated\neditor.DeletePrimAtPath(\"/oldAssets/deprecated/protoModel\")\neditor.MovePrimAtPath(\"/currentAssets/model1\", \"/oldAssets/model1\")\n...other additional related edits...\nbatchApplyResult = editor.ApplyEdits()  # Apply this batch of edits\n```\n\n----------------------------------------\n\nTITLE: Overriding Assembly References in a Shot USD File\nDESCRIPTION: Shows how to replace an assembly's reference by adding a new variant for the dressingVariant and introducing a new reference inside the variant.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/usdfaq.rst#2025-04-23_snippet_7\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    defaultPrim = \"World\"\n)\n\ndef Xform \"World\"\n{\n    def \"ShapeFactory\" (\n        references = @assembly.usd@\n    )\n    {\n        over \"Model_1\" (\n            prepend variantSets = \"dressingVariant\"\n            variants = {\n                string dressingVariant = \"shotOverride_1\"\n            }\n        )\n        {\n            variantSet \"dressingVariant\" = {\n                \"shotOverride_1\" (\n                    references = @assets.usd@</SphereModel>\n                )\n                {\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Base Material and a Specializing Material in USDA\nDESCRIPTION: This USDA snippet defines a 'Robot' Xform containing two Material prims within a 'Materials' Scope: a base 'Metal' material and a 'CorrodedMetal' material. The 'CorrodedMetal' material uses the 'specializes' composition arc to inherit properties from the 'Metal' material, while overriding the 'specularRoughness' input and adding a new 'Corrosion' Shader prim. This example illustrates how 'specializes' allows refinement of a base definition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_43\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\ndef Xform \"Robot\"\n{\n    def Scope \"Materials\"\n    {\n        def Material \"Metal\"\n        {\n            # Interface inputs drive shader parameters of the encapsulated\n            # network. We are not showing the connections, nor how we encode\n            # that the child Shader \"Surface\" is the primary output for the\n            # material.\n            float inputs:diffuseGain = 0\n            float inputs:specularRoughness = 0\n\n            def Shader \"Surface\"\n            {\n                asset info:id = @PxrSurface@\n            }\n        }\n\n        def Material \"CorrodedMetal\" (\n            specializes = </Robot/Materials/Metal>\n        )\n        {\n            # specialize roughness...\n            float inputs:specularRoughness = 0.2\n\n            # Adding a pattern to drive Surface bump\n            def Shader \"Corrosion\"\n            {\n                asset info:id = @PxrOSL@\n                vector3f outputs:disp\n            }\n\n            over \"Surface\"\n            {\n                # Override that would connect specularBump to Corrosion\n                # pattern's \"outputs:disp\" attribute\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Instance Proxies for Traversal in USD\nDESCRIPTION: Demonstrates how to use instance proxies to traverse instance prims and access their child prims as if instancing were not being used.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/instancing.md#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n>>> stage = Usd.Stage.Open('ParkingLot.usd')\n\n# Car_1 doesn't make any child prims available by default since it's an\n# instance prim.\n>>> car_1 = stage.GetPrimAtPath('/ParkingLot/Car_1')\n>>> car_1.IsInstance()\nTrue\n>>> car_1.GetChildren()\n[]\n\n# Use Usd.TraverseInstanceProxies to enable instance proxies with the same \n# filtering that UsdPrim.GetChildren would do.\n>>> car_1.GetFilteredChildren(Usd.TraverseInstanceProxies())\n[Usd.Prim(</ParkingLot/Car_1/Body>), Usd.Prim(</ParkingLot/Car_1/Door>)]\n\n# Calling Usd.Stage.GetPrimAtPath with the path of a prim beneath an\n# instance will also return an instance proxy.\n>>> car_1_body = stage.GetPrimAtPath('/ParkingLot/Car_1/Body')\n>>> car_1_body\nUsd.Prim(</ParkingLot/Car_1/Body>)\n>>> car_1_body.IsInstanceProxy()\nTrue\n\n# Unlike prims in prototypes, you can walk up an instance proxy's parent prims\n# to find its owning instance.\n>>> car_1_body.GetParent()\nUsd.Prim(</ParkingLot/Car_1>)\n\n# From an instance proxy, you can retrieve the corresponding prim in the\n# instance's prototype.\n>>> car_1_body.GetPrimInPrototype()\nUsd.Prim(</__Prototype_1/Body>)\n\n# Instance proxies can be used for read-only operations anywhere a Usd.Prim\n# is used.\n>>> img = UsdGeom.Imageable(car_1_body)\n>>> img.ComputeLocalToWorldTransform(Usd.TimeCode.Default())\nGf.Matrix4d(...)\n\n>>> xfCache = UsdGeom.XformCache()\n>>> xfCache.GetLocalToWorldTransform(car_1_body)\nGf.Matrix4d(...)\n```\n\n----------------------------------------\n\nTITLE: Defining CompositionErrorTest Validator\nDESCRIPTION: Documentation for a validator that provides all composition errors generated while composing the stage to help identify and diagnose issues in stage composition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n[usdValidation:CompositionErrorTest]:\n\tDoc: Validator aims at providing all composition errors, which were generated while composing the stage.\n\tKeywords: UsdCoreValidators\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Configuring DistantLight with Custom Angle and Intensity in USDA\nDESCRIPTION: Example demonstrating how to create a DistantLight with modified angle and intensity parameters, along with test geometry including a sphere and cube to show lighting effects. The light is configured with an angle of 1.0 and reduced intensity of 10000.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/DistantLight.md#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    upAxis = \"Y\"\n)\n\ndef Scope \"Lights\"\n{\n    def DistantLight \"Light1\"\n    {\n        float inputs:angle = 1.0 \n        float inputs:intensity = 10000\n    }\n}\n\ndef Xform \"TestGeom\"\n{\n    def Sphere \"Sphere1\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (0, 0, -2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Cube \"Cube\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double size = 8\n        double3 xformOp:translate = (0, 0, -8)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding DLL Directory for Python 3.8+ on Windows\nDESCRIPTION: This code snippet demonstrates how to add a directory to the DLL search path in Python 3.8 and later on Windows. It's used to ensure proper loading of DLL dependencies that are no longer automatically searched in PATH.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/BUILDING.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nos.add_dll_directory(p)\n```\n\n----------------------------------------\n\nTITLE: Implementing Spatial and Ambient Audio in USD\nDESCRIPTION: Example showing how to define two types of audio in USD: an ambient background sound and a spatially-positioned voice sound. Includes settings for timing, positioning, and playback modes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdaudio.rst#2025-04-23_snippet_1\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n   upAxis = \"Z\"\n   endTimeCode = 200\n   startTimeCode = 1\n   timeCodesPerSecond = 24\n)\n\ndef Xform \"Sounds\"\n{\n    def SpatialAudio \"AmbientSound\"\n    {\n        # We need not encode startTime, mediaOffset, or level as the fallback \n        # values suffice for ambient sound.  Playback will begin at timeCode 1\n        uniform asset filePath       = @AmbientSound.mp3@\n        uniform token auralMode      = \"nonSpatial\"\n        uniform token playbackMode   = \"loopFromStage\"\n    }\n\n    def SpatialAudio \"WoodysVoice\"\n    {\n        # SpatialAudio xform.  This prim might typically be located\n        # as a child of the \"Woody\" model so that it's location need\n        # only be specified relative to Woody, rather than replicating\n        # Woody's animation\n        double3 xformOp:translate     = (3.0, -3.0, 2)\n        uniform token[] xformOpOrder  = [\"xformOp:translate\"]\n\n\n        # SpatialAudio Properties.  We have left the playbackMode at its\n        # fallback of \"onceFromStart\", so we do not require an endTime:\n        # the sound will play to completion\n        uniform asset  filePath       = @WoodysVoice.mp3@\n        uniform token  auralMode      = \"spatial\"\n        uniform timeCode startTime =  65.0\n        # Skip the first third of a second in WoodysVoice.mp3 \n        uniform double mediaOffset    =  0.33333333333\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Equivalent Path Expression for a USD Relationship Collection in Python\nDESCRIPTION: This Python snippet demonstrates retrieving a relationship-mode `Usd.CollectionAPI`, computing its membership query using `ComputeMembershipQuery()`, extracting the underlying rule map via `GetAsPathExpansionRuleMap()`, and finally computing the equivalent path expression string using `Usd.ComputePathExpressionFromCollectionMembershipQueryRuleMap()`. This expression represents the same set of prims defined by the collection's `includes`, `excludes`, and `includeRoot` relationships. Assumes a valid `Usd.Stage` object named `stage` is available and contains a prim at `/World/MyCollection` with a collection named `relationshipCollection`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# Get an existing relationship-mode collection\ncollectionPrim = stage.GetPrimAtPath(\"/World/MyCollection\")\nrelationshipModeCollection = Usd.CollectionAPI(collectionPrim, \"relationshipCollection\")    \n\n# First compute the membership query for the relationship-mode collection\ncollectionQuery = relationshipModeCollection.ComputeMembershipQuery()\n\n# Get the equivalent expression\nequivalentExpression = Usd.ComputePathExpressionFromCollectionMembershipQueryRuleMap(\n            collectionQuery.GetAsPathExpansionRuleMap())\n\n# ...use equivalentExpression as needed...\n```\n\n----------------------------------------\n\nTITLE: Adding a Reference to an Override Prim in Python\nDESCRIPTION: Adds a reference to the HelloWorld.usda file on the override prim. This links the content from HelloWorld.usda into the current stage.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_referencing_layers.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrefSphere.GetReferences().AddReference('./HelloWorld.usda')\nprint(refStage.GetRootLayer().ExportToString())\nrefStage.GetRootLayer().Save()\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit Clip Metadata in USD\nDESCRIPTION: Example of defining explicit clip metadata using asset paths, active clips, and time mapping. This snippet shows how to specify which clips are active at different stage times and how stage times map to clip times.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/valueClips.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nasset[] assetPaths = [ @foo.usd@, @bar.usd@, @baz.usd@ ]\ndouble2[] active = [ (101, 0), (105, 1), (110, 2) ]\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Prim Hierarchy in USDA\nDESCRIPTION: This USDA snippet begins the definition of a prim hierarchy within a layer using the USD ASCII format. It defines a root-level prim named \"Root\" using the `def` specifier, indicating it's a concrete definition, and starts defining a child prim named \"Child\", also with the `def` specifier. This illustrates the basic syntax for establishing parent-child relationships and defining prims in the namespace.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_26\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\ndef \"Root\" \n{\n    def \"Child\"\n```\n\n----------------------------------------\n\nTITLE: USD Shot Layer with Sublayer and Overrides\nDESCRIPTION: Example showing how to use sublayers and overrides to modify properties in a shot context.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/usdfaq.rst#2025-04-23_snippet_3\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    subLayers = [\n         @sequence.usda@            \n    ]\n)\n\nover \"World\"\n{\n    over \"Sets\"\n    {\n        over \"Bookshelf\"\n        {\n            over \"Book_1\"\n            {\n                string name = \"Wall-E\"\n            }\n        }\n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Coordinate Systems in USD\nDESCRIPTION: Example USD file demonstrating three coordinate systems defined on a model, including modelSpace, instanceSpace, and paintSpace bindings. Shows coordinate system inheritance and material binding patterns.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_coordsys.rst#2025-04-23_snippet_1\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n   upAxis = \"Y\"\n)\n\ndef Xform \"World\"\n{\n    double3 xformOp:translate = (5, 0, 0)\n    token[] xformOpOrder = [\"xformOp:translate\"]\n\n    def Material \"SetLevelMaterial\"\n    {\n        # This is NOT a complete Material definition!\n        def Shader \"PrimvarReader_1\"\n        {\n            uniform token info:id = \"PxrPrimvar\"\n            string inputs:varname = \"pref\"\n            string inputs:coordsys = \"instanceSpace\"\n            string inputs:type = \"point\"\n        }\n    }\n    def Xform \"Model\"\n    {\n        rel coordSys:modelSpace = </World/Model/Geom>\n        rel coordSys:instanceSpace = </World/Model>\n        rel coordSys:paintSpace = </World/Model/Place3dTexture>\n        \n        double3 xformOp:translate = (2, 0, 0)\n        token[] xformOpOrder = [\"xformOp:translate\"]\n\n        def Camera \"Place3dTexture\"\n        {\n            token projection = \"orthographic\"\n            # clippingRange can be specified to ensure projection \n            # only affects front surfaces\n            float2 clippingRange = (1, 35)\n            double3 xformOp:translate = (0, -10, 0)\n            token[] xformOpOrder = [\"xformOp:translate\"]\n        }\n\n        def Xform \"Geom\"\n        {\n            def Cube \"Box\"\n            {\n                double3 xformOp:translate = (0, 0, 3)\n                token[] xformOpOrder = [\"xformOp:translate\"]\n                rel material:binding = </World/SetLevelMaterial>\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modified USD Assembly with Relationship Deletion\nDESCRIPTION: Shows how an assembly file would be modified when editing a relationship target through an edit target. This demonstrates how path translation works in reverse when authoring across composition arcs.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_31\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    defaultPrim = \"MySet\"\n)\n\n\ndef Xform \"MySet\"\n{\n    def Xform \"Building_1\" (\n        references = @asset.usd@\n    )\n    {\n        delete rel gprims = </MySet/Building_1/Sphere>\n    }\n\n    def Xform \"Building_2\" (\n        references = @asset.usd@\n    )\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Prim Descendants in C++/Python\nDESCRIPTION: Shows methods for accessing all descendants of a UsdPrim. GetDescendants() returns all canonical descendants, while GetFilteredDescendants() allows custom predicates.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/commonIdioms.md#2025-04-23_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nUsdPrim::GetDescendants()\nUsdPrim::GetFilteredDescendants()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating `materialSyncMode` on MeshLights in USDA\nDESCRIPTION: This USDA snippet defines a scene with three spherical MeshLights, each bound to the same magenta emissive Material but configured with different `light:materialSyncMode` values (`independent`, `noMaterialResponse`, `materialGlowTintsLight`). The example illustrates how this attribute controls the interaction between the light's color property (cyan) and the material's emission/glow color (magenta) to produce different rendering results, as explained in the surrounding text. It requires a basic USD scene structure and a PxrSurface shader definition within the material scope.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdLux/userDoc/overview.md#2025-04-23_snippet_6\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    upAxis = \"Y\"    \n)\n\n# Emissive \"glow\" material \ndef Scope \"Looks\"\n{\n    def Material \"Glow\"\n    {\n        color3f inputs:color = (1,0,1) # magenta\n        float inputs:glow_amount = 1\n        token outputs:ri:surface.connect = </Looks/Glow/Surface.outputs:out>\n\n        def Shader \"Surface\"\n        {\n            uniform token info:id = \"PxrSurface\"\n            color3f inputs:diffuseColor.connect = </Looks/Glow.inputs:color>\n            color3f inputs:glowColor.connect = </Looks/Glow.inputs:color>\n            float inputs:glowGain.connect = </Looks/Glow.inputs:glow_amount>\n            token outputs:out\n        }\n    }\n}\n\n# Floor and MeshLights\ndef Xform \"World\"\n{\n    def Mesh \"Floor\"\n    {\n        int[] faceVertexCounts = [4]\n        int[] faceVertexIndices = [0,1,2,3]\n        point3f[] points = [(-1,0,1),(1,0,1),(1,0,-1),(-1,0,-1)]\n        uniform token subdivisionScheme = \"none\"\n        float3 xformOp:scale = (6,1,6)\n        uniform token[] xformOpOrder = [\"xformOp:scale\"]\n    }\n\n    def Mesh \"MeshLightA\"\n    (\n        prepend apiSchemas = [ \"MaterialBindingAPI\", \"MeshLightAPI\" ]\n    )\n    {\n        # ...\n        # points, faceVertexCounts, faceVertexIndices omitted for simplicity\n        # ...\n        token subdivisionScheme = \"catmullClark\"\n\n        # LightAPI attributes\n        float inputs:intensity = 1\n        color3f inputs:color = (0, 1, 1) # cyan        \n        uniform token light:materialSyncMode = \"independent\"\n\n        int inputs:ri:light:fixedSampleCount = 0\n\n        float3 xformOp:translate = (0, 2, -4)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n\n        rel material:binding = </Looks/Glow>\n\n        token info:implementationSource = \"id\"\n    }\n\n    def Mesh \"MeshLightB\"\n    (\n        references = </World/MeshLightA>\n    )\n    {\n        uniform token light:materialSyncMode = \"noMaterialResponse\"\n        float3 xformOp:translate = (-4,2,-4)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n    def Mesh \"MeshLightC\"\n    (\n        references = </World/MeshLightA>\n    )\n    {\n        uniform token light:materialSyncMode = \"materialGlowTintsLight\"\n        float3 xformOp:translate = (4,2,-4)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }    \n}\n```\n\n----------------------------------------\n\nTITLE: USD Session Layer Output Example\nDESCRIPTION: Example output showing a USD session layer with a variant selection override for a prim named 'hello', setting its shadingVariant to 'red'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_authoring_variants.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n#usda 1.0\n\nover \"hello\" (\n    variants = {\n        string shadingVariant = \"red\"\n    }\n)\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Using UsdImagingAdapter in C++\nDESCRIPTION: Demonstrates the usage of UsdImagingAdapter, which will be updated to handle the new light and filter representations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_renderers.rst#2025-04-23_snippet_18\n\nLANGUAGE: C++\nCODE:\n```\nUsdImagingAdapter\n```\n\n----------------------------------------\n\nTITLE: Performing Color Space Transformations using GfColorSpace in C++\nDESCRIPTION: Demonstrates how to convert colors between different color spaces using the GfColorSpace class. It includes converting a single color and an array of colors.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/doxygen/architecture-guides/color_programmers_guide.md#2025-04-23_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// Get color spaces\nGfColorSpace srcSpace = UsdColorSpaceAPI::ComputeColorSpace(srcAttr);\nGfColorSpace targetSpace = GfColorSpace(GfColorSpaceNames->LinearAP1);\n\n// Convert a single color\nGfVec3f srcColor(1.0f, 0.5f, 0.0f);\nGfVec3f targetColor = srcSpace.Convert(targetSpace, srcColor);\n\n// Convert an array of colors\nstd::vector<GfVec3f> colorArray = /* Array of colors */;\nsrcSpace.ConvertRGBSpan(targetSpace, colorArray.data(), colorArray.size());\n```\n\n----------------------------------------\n\nTITLE: Light Filter Relationships Example in USDA\nDESCRIPTION: Example demonstrating how to add relationships to multiple light filters for a DiskLight, showing filter sharing capabilities across lights.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: usda\nCODE:\n```\ndef DiskLight \"Light1\"\n{\n    color3f inputs:color = (0.2, 0.4, 0.8)\n    float inputs:exposure = 3\n    float inputs:intensity = 100\n    float inputs:radius = 1    \n    append rel light:filters = [\n         </Filters/BarnDoorEffectFilter>,\n         </Filters/YellowGelFilter>,\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running OpenUSD tests to verify changes\nDESCRIPTION: Command to run the OpenUSD test suite using ctest in the Release configuration. This verifies that your changes haven't caused any test failures before submitting a pull request.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/contributing_to_usd.rst#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nctest -C Release\n```\n\n----------------------------------------\n\nTITLE: USD Relocates Example\nDESCRIPTION: Shows how to use USD relocates to remap prim paths in a non-destructive way.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_38\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    relocates = {\n        </CharANewVersion/Clothing> : </CharACurrent/TestClothing>, \n        </EnvA/Trees> : </AlternateEnv/ParkA/Trees>\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Referencing Stage Variable Expressions Proposal in reStructuredText\nDESCRIPTION: This snippet uses reStructuredText syntax to create a note block that informs readers about the migration of the Stage Variable Expressions proposal to the OpenUSD-proposals repository. It includes a hyperlink to the new location of the proposal.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_stage_variables.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. note:: \n\n    This proposal has been migrated to `OpenUSD-proposals: Stage Variable Expressions \n    <https://github.com/PixarAnimationStudios/OpenUSD-proposals/tree/main/proposals/stage_variable_expressions>`_.\n```\n\n----------------------------------------\n\nTITLE: Defining an Instanced Asset that Instances Other Assets in USD (usda) - Nested Instancing Part 2\nDESCRIPTION: This USD snippet (usda format) defines the 'ParkingLot.usd' file, which is itself instanced by 'BuyNLarge.usd' (in the previous snippet) and also instances another asset ('Car.usd'). It defines multiple instanceable 'Car' prims ('Car_1', 'Car_2', etc.) that reference the 'Car' prim from an external 'Car.usd' file. This completes the nested instancing example, showing an intermediate asset layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/instancing.md#2025-04-23_snippet_12\n\nLANGUAGE: usd\nCODE:\n```\n### ParkingLot.usd\n\n#usda 1.0\n\ndef \"ParkingLot\"\n{\n    def \"Car_1\" (\n        instanceable = true\n        references = @./Car.usd@</Car>\n    )\n    {\n    }\n\n    def \"Car_2\" (\n        instanceable = true\n        references = @./Car.usd@</Car>\n    )\n    {\n    }\n\n    # ...\n\n    def \"Car_n\" (\n        instanceable = true\n        references = @./Car.usd@</Car>\n    )\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Visibility for USD Prims\nDESCRIPTION: This example shows how to set visibility for different prims in a USD scene. It demonstrates inheritance of visibility values and how to explicitly set a prim to be invisible, overriding parent visibility.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_1\n\nLANGUAGE: usda\nCODE:\n```\ndef Xform \"xform\" \n{\n    def Cube \"cube21\"\n    {\n        # Inherits visibility from parent\n        token visibility = \"inherited\"\n    }\n}\n\ndef Xform \"xform2\"\n{\n    token visibility = \"inherited\"\n\n    def Cube \"cube22\"\n    {\n        # No visibility set, so inherits visibility from parent by default\n    }\n}\n\ndef Xform \"xform3\"\n{\n    def Cube \"cube23\"\n    {\n        # Overrides parent visibility\n        token visibility = \"invisible\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UsdShadeValidators Library in CMake for OpenUSD\nDESCRIPTION: Sets up the UsdShadeValidators library configuration with its dependencies, public classes, headers, and source files. The library is part of the OpenUSD framework and includes validators for UsdShade components.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/usdShadeValidators/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usdValidation)\nset(PXR_PACKAGE usdShadeValidators)\n\npxr_library(usdShadeValidators\n    LIBRARIES\n        tf\n        plug\n        sdf\n        usd\n        sdr\n        usdShade\n        usdValidation\n\n    PUBLIC_CLASSES\n        validatorTokens\n        \n    PUBLIC_HEADERS\n        api.h\n\n    CPPFILES\n        validators.cpp\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: USD Value Clip Example with Manifest\nDESCRIPTION: This example shows two value clips and their corresponding manifest. The clips contain time samples for attributes, while the manifest declares these attributes without time samples.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/valueClips.md#2025-04-23_snippet_4\n\nLANGUAGE: usd\nCODE:\n```\n#usda 1.0\n\ndef \"Model\"\n{\n    double attr.timeSamples = {\n        0: 100\n    }\n\n    def \"Child\"\n    {\n        double childAttr.timeSamples = {\n            0: 200\n        }\n    }\n}\n```\n\nLANGUAGE: usd\nCODE:\n```\n#usda 1.0\n\ndef \"Model\"\n{\n    double attr.timeSamples = {\n        1: 200\n    }\n\n    def \"Child\"\n    {\n        double childAttr.timeSamples = {\n            1: 300\n        }\n    }\n}\n```\n\nLANGUAGE: usd\nCODE:\n```\n#usda 1.0\n\ndef \"Model\"\n{\n    double attr\n\n    def \"Child\"\n    {\n        double childAttr\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Light Color with Focus and Focus Tint\nDESCRIPTION: Mathematical formula for applying focus and focus tint to shape light emission.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/ShapingAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: math\nCODE:\n```\n\\begin{aligned} \n&focusFactor = ｜emissionDirection • lightNormal｜^{focus} \\\\\n&focusColor = lerp(focusFactor, focusTint, [1, 1, 1]) \\\\\n&L_{Color} = componentwiseMultiply(focusColor, L_{Color}) \n\\end{aligned}\n```\n\n----------------------------------------\n\nTITLE: Creating Document Links in RST Documentation\nDESCRIPTION: Examples of how to create links to other documents using the :doc: directive in reStructuredText for USD documentation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n:doc:`tut_helloworld` OR\n:doc:`Custom Link Text <tut_helloworld>`\n```\n\n----------------------------------------\n\nTITLE: Querying Color Space Information for Attributes in C++\nDESCRIPTION: Shows how to determine the color space for an attribute using UsdColorSpaceAPI. It includes getting an attribute, computing its color space name, and converting it to a GfColorSpace for transformation operations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/doxygen/architecture-guides/color_programmers_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// Get an attribute\nUsdAttribute attr = prim.GetAttribute(TfToken(\"diffuseColor\"));\n\n// Compute its color space\nTfToken colorSpaceName = UsdColorSpaceAPI::ComputeColorSpaceName(attr);\n\n// Convert to a GfColorSpace for transformation operations\nGfColorSpace colorSpace = UsdColorSpaceAPI::ComputeColorSpace(attr);\n```\n\n----------------------------------------\n\nTITLE: Creating Instanceable Trees in USD\nDESCRIPTION: This example demonstrates how to mark prims as instanceable to enable memory-efficient instancing. The example creates a class _class_Tree that defines Trunk and Leaves, then creates two instances (TreeA and TreeB) that share the same representation, ignoring overrides on instanceable prims.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_21\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\nclass Xform \"_class_Tree\"\n{\n    def Mesh \"Trunk\"\n    {\n        color3f[] primvars:displayColor = [(.8, .8, .2)]\n    }\n\n    def Mesh \"Leaves\"\n    {\n        color3f[] primvars:displayColor = [(0, 1, 0)]\n    }\n}\n\ndef \"TreeA\" (\n    inherits = </_class_Tree>\n    instanceable = true\n)\n{\n}\n\ndef \"TreeB\" (\n    inherits = </_class_Tree>\n    instanceable = true\n)\n{\n    over \"Leaves\" \n    {\n        color3f[] primvars:displayColor = [(0.8, 1, 0)]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for Prim /Class\nDESCRIPTION: Shows the composition analysis results for the USD prim `/Class`. It details the prim stack, indicating that the primary definition for `/Class` in this specific composition context comes directly from the `root.sdf` layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReferenceAndClass.testenv/baseline/compositionResults_BasicReferenceAndClass.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Class>\n\nPrim Stack:\n    root.sdf             /Class\n```\n\n----------------------------------------\n\nTITLE: Composing Prim /Root/Anim in USD\nDESCRIPTION: Details the composition results for the child prim path `/Root/Anim`. It shows the prim stack originating from `B.sdf` and lists the accumulated time offsets considering the root layer (`root.sdf`), the reference (`A.sdf`), and the sublayer (`B.sdf`).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicTimeOffset.testenv/baseline/compositionResults_BasicTimeOffset.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </Root/Anim>\n\nPrim Stack:\n    B.sdf                /Model/Anim\n\nTime Offsets:\n    root.sdf             /Root/Anim      root       (offset=0.00, scale=1.00)\n    A.sdf                /Model/Anim     reference  (offset=10.00, scale=1.00)\n        B.sdf                            sublayer   (offset=20.00, scale=1.00)\n```\n\n----------------------------------------\n\nTITLE: Displaying Composition Results for /ModelGroup in USD\nDESCRIPTION: Shows the composition analysis for the prim `/ModelGroup`. It details the prim stack (`root.sdf`, `group.sdf`), child prims (`Model_2`), prohibited children (`Model`), properties (`groupRel`), and the resolved relationship targets for `groupRel` pointing to `/ModelGroup/Model_2/Anim/Collider`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyMultipleRelocations2.testenv/baseline/compositionResults_TrickyMultipleRelocations2.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </ModelGroup>\n\nPrim Stack:\n    root.sdf             /ModelGroup\n    group.sdf            /Group\n\nChild names:\n     ['Model_2']\n\nProhibited child names:\n     ['Model']\n\nProperty names:\n     ['groupRel']\n\nProperty stacks:\n/ModelGroup.groupRel:\n    root.sdf             /ModelGroup.groupRel\n\nRelationship targets:\n/ModelGroup.groupRel:\n    /ModelGroup/Model_2/Anim/Collider\n```\n\n----------------------------------------\n\nTITLE: Defining Material Nodes with NodeGraphNodeAPI in USDA\nDESCRIPTION: Example showing configuration of two shader nodes (Preview Surface and Color) using NodeGraphNodeAPI. Demonstrates setting node position, color, documentation links, expansion state, icons, size, and stacking order attributes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdUI/NodeGraphNodeAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\ndef Material \"MyMaterial\"\n{\n    token outputs:mtlx:surface.connect = </World/MyMaterial/PreviewSurface.outputs:out>\n\n    def Shader \"PreviewSurface\"\n    {\n        uniform token info:id = \"ND_UsdPreviewSurface_surfaceshader\"\n        color3f inputs:diffuseColor.connect = </World/MyMaterial/Color.outputs:out>\n        token outputs:out\n\n        uniform color3f ui:nodegraph:node:displayColor = (1.0, 0.0, 0.0)\n        uniform string ui:nodegraph:node:docURI = \"https://openusd.org/release/spec_usdpreviewsurface.html\"\n        uniform token ui:nodegraph:node:expansionState = \"open\"\n        uniform asset ui:nodegraph:node:icon = @preview_surface_icon.png@\n        uniform float2 ui:nodegraph:node:pos = (-0.85, 1.9)\n        uniform float2 ui:nodegraph:node:size = (300.0, 400.0)\n        uniform int ui:nodegraph:node:stackingOrder = 1\n    }\n\n    def Shader \"Color\"\n    {\n        uniform token info:id = \"ND_constant_color3\"\n        color3f inputs:value = (1.0, 0.023, 0.701)\n        color3f outputs:out\n\n        uniform color3f ui:nodegraph:node:displayColor = (0.0, 0.0, 1.0)\n        uniform string ui:nodegraph:node:docURI = \"https://github.com/AcademySoftwareFoundation/MaterialX/blob/main/documents/Specification/MaterialX.Specification.md#procedural-nodes\"\n        uniform token ui:nodegraph:node:expansionState = \"closed\"\n        uniform asset ui:nodegraph:node:icon = @color_icon.png@\n        uniform float2 ui:nodegraph:node:pos = (-2, 2)\n        uniform float2 ui:nodegraph:node:size = (100.0, 200.0)\n        uniform int ui:nodegraph:node:stackingOrder = 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a CylinderLight in USD\nDESCRIPTION: This snippet demonstrates how to define a CylinderLight in a USD scene, along with some test geometry to show its effect. The CylinderLight is positioned near a Sphere and Cube, with specific length, radius, and shaping properties.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/CylinderLight.md#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    upAxis = \"Y\"\n)\n\ndef Scope \"Lights\"\n{\n    def CylinderLight \"Light1\"\n    {\n        float inputs:length = 3\n        float inputs:radius = 0.25\n\n        float inputs:shaping:cone:angle = 45\n\n        color3f inputs:color = (1, 1, 1)\n        float inputs:intensity = 20.0\n        float3 xformOp:rotateXYZ = (0, 0, 45)\n        double3 xformOp:translate = (0, 0, 1)\n        uniform token[] xformOpOrder = [\"xformOp:translate\", \"xformOp:rotateXYZ\"]\n    }\n}\n\ndef Xform \"TestGeom\"\n{\n    def Sphere \"Sphere1\"\n    {\n        token purpose = \"render\"\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (0, 0, -2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Cube \"Cube\"\n    {\n        token purpose = \"render\"\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double size = 8\n        double3 xformOp:translate = (0, 0, -8)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flattening a USD Stage in Python\nDESCRIPTION: Demonstrates how to flatten a composed USD stage into a single layer. This removes composition arcs and produces the final composed result.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_referencing_layers.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nprint(refStage.ExportToString())\n```\n\n----------------------------------------\n\nTITLE: Configuring HdSt Shader Tests\nDESCRIPTION: Sets up build and test configuration for HdSt shader functionality testing. Includes library dependencies and test parameters for validating shader rendering outputs across multiple test cases.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_45\n\nLANGUAGE: cmake\nCODE:\n```\npxr_build_test(testHdStShaders\n    LIBRARIES\n        hdSt\n        hd\n        sdr\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStShaders.cpp\n)\npxr_install_test_dir(\n    SRC testenv/testHdStShaders\n    DEST testHdStShaders\n)\n```\n\n----------------------------------------\n\nTITLE: Auto-applying API Schemas via Schema Definitions - USD SDF Syntax\nDESCRIPTION: This example shows how to configure an applied API schema to be automatically applied to specific IsA or single-apply API schemas using the 'apiSchemaAutoApplyTo' customData field. The class definition lists schema names to which this API schema will be auto-applied, requiring that the listed schemas are valid and present in the USD environment. Dependencies include the base <APISchemaBase> and referenced schema types. The output is a schema definition that, when loaded, extends the specified prim types or other API schemas without modifying their original definitions. Only single-apply API schemas support this field, and multiple-apply APIs cannot use it.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/generatingSchemas.md#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\n# Example of an applied API schema specified to auto apply to both a concrete\n# and an abstract IsA schema as well as another single-apply API schema.\nclass \"MyCustomAPI\" (\n    inherits = </APISchemaBase>\n    customData = {\n        # These listed IsA and API schemas add this API schema to their built-in \n        # API schemas.\n        token[] apiSchemaAutoApplyTo = [\n           \"MyCustomConcretePrim\", \"MyCustomAbstractPrim\", \"MyCustomAPI\"]\n    }\n)  {\n    int autoApplyApiAttr = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting and Prepending References in USDA using List Editing\nDESCRIPTION: This USDA snippet (`shotFX.usd`), intended for a stronger shot-level layer, modifies the `references` list for the prim `/World/Props/Prop_145`. It uses `delete references` to remove the `@sequenceFX/turbulence.usd@` reference (introduced by a weaker layer) and `prepend references` to add `@./fx/shotEffect1.usd@`, effectively replacing the sequence-level effect with a shot-specific one non-destructively.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_24\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\nover \"World\"\n{\n    over \"Props\"\n    {\n        over \"Prop_145\" (\n            prepend references = @./fx/shotEffect1.usd@\n            delete references = @sequenceFX/turbulence.usd@\n        )\n        {\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Plugin Container Implementation - Python\nDESCRIPTION: Basic implementation of a PluginContainer class that registers a simple print message command and adds it to the Tutorial menu\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_usdview_plugin.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pxr import Tf\nfrom pxr.Usdviewq.plugin import PluginContainer\n\n\ndef printMessage(usdviewApi):\n    print(\"Hello, World!\")\n\n\nclass TutorialPluginContainer(PluginContainer):\n\n    def registerPlugins(self, plugRegistry, usdviewApi):\n\n        self._printMessage = plugRegistry.registerCommandPlugin(\n            \"TutorialPluginContainer.printMessage\",\n            \"Print Message\",\n            printMessage)\n\n    def configureView(self, plugRegistry, plugUIBuilder):\n\n        tutMenu = plugUIBuilder.findOrCreateMenu(\"Tutorial\")\n        tutMenu.addItem(self._printMessage)\n\nTf.Type.Define(TutorialPluginContainer)\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in USD Expression Variables\nDESCRIPTION: This snippet demonstrates how to escape special characters when using expression variables in USD.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/variable_expressions.rst#2025-04-23_snippet_6\n\nLANGUAGE: usda\nCODE:\n```\n# The following expression evaluates to \"C:\\USD\\test.usd\" or \"D:\\USD\\test.usd\" \n# (depending on if COND evaluates to true or false) due to escaped backslashes\n`if(${COND}, \"C:\\\\USD\\\\test.usd\", \"D:\\\\USD\\\\test.usd\")`  \n\n# The following evaluates to \"escaped_var_${X}\". No substitutions occur due \n# to the escaped \"$\".\n`\"escaped_var_\\${X}\"` \n```\n\n----------------------------------------\n\nTITLE: Defining Light Shader ID in USDA\nDESCRIPTION: Shows the addition of a 'light:shaderId' attribute to the LightAPI definition for explicit statement of the shader ID.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_geometry_lights.rst#2025-04-23_snippet_3\n\nLANGUAGE: usda\nCODE:\n```\ntoken light:shaderId = \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra Library Build with CMake\nDESCRIPTION: Sets up the Hydra library build with its dependencies, public classes, headers, and resource files. The library is a core component of OpenUSD's imaging system with extensive functionality for rendering, scene management, and data handling.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE hd)\n\nset(optionalPublicClasses \"\")\n\npxr_library(hd\n    LIBRARIES\n        plug\n        tf\n        trace\n        vt\n        work\n        sdf\n        cameraUtil\n        hf\n        pxOsd\n        sdr\n        ${TBB_tbb_LIBRARY}\n\n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n\n    PUBLIC_CLASSES\n        aov\n        basisCurves\n        basisCurvesSchema\n        basisCurvesTopology\n        basisCurvesTopologySchema\n        bprim\n        bufferArray\n        bufferArrayRange\n        bufferSource\n        bufferSpec\n        camera\n        cameraSchema\n        capsuleSchema\n        categoriesSchema\n        changeTracker\n        collectionExpressionEvaluator\n        collectionPredicateLibrary\n        collectionSchema\n        collectionsSchema\n        command\n        coneSchema\n        containerDataSourceEditor\n        containerSchema\n        coordSys\n        coordSysSchema\n        coordSysBindingSchema\n        cubeSchema\n        cylinderSchema\n        dataSource\n        dataSourceHash\n        dataSourceLegacyPrim\n        dataSourceLegacyTaskPrim\n        dataSourceLocator\n        dataSourceMaterialNetworkInterface\n        debugCodes\n        dependenciesSchema\n        dependencyForwardingSceneIndex\n        dependencySchema\n        dirtyBitsTranslator\n        dirtyList\n        displayFilterSchema\n        drawingCoord\n        drawItem\n        engine\n        enums\n        extComputation\n        extComputationContext\n        extComputationContextInternal\n        extComputationCpuCallback\n        extComputationInputComputationSchema\n        extComputationOutputSchema\n        extComputationPrimvarSchema\n        extComputationPrimvarsSchema\n        extComputationSchema\n        extComputationUtils\n        extentSchema\n        field\n        filteringSceneIndex\n        flattenedDataSourceProvider\n        flattenedDataSourceProviders\n        flattenedOverlayDataSourceProvider\n        flattenedPrimvarsDataSourceProvider\n        flattenedPurposeDataSourceProvider\n        flattenedVisibilityDataSourceProvider\n        flattenedXformDataSourceProvider\n        flatteningSceneIndex\n        flatNormals\n        geomSubset\n        geomSubsetSchema\n        imageShader\n        imageShaderSchema\n        instanceCategoriesSchema\n        instancedBySchema\n        instanceIndicesSchema\n        instancer\n        instanceRegistry\n        instancerTopologySchema\n        instanceSchema\n        integratorSchema\n        lazyContainerDataSource\n        legacyDisplayStyleSchema\n        legacyGeomSubsetSceneIndex\n        legacyPrimSceneIndex\n        legacyTaskFactory\n        legacyTaskSchema\n        lensDistortionSchema\n        light\n        lightSchema\n        mapContainerDataSource\n        material\n        materialBindingSchema\n        materialBindingsSchema\n        materialConnectionSchema\n        materialFilteringSceneIndexBase\n        materialInterfaceMappingSchema\n        materialNetworkSchema\n        materialNetwork2Interface\n        materialNodeSchema\n        materialNodeParameterSchema\n        materialOverrideSchema\n        materialSchema\n        mergingSceneIndex\n        mesh\n        meshSchema\n        meshTopology\n        meshTopologySchema\n        meshUtil\n        noticeBatchingSceneIndex\n        nurbsCurvesSchema\n        nurbsPatchSchema\n        nurbsPatchTrimCurveSchema\n        overlayContainerDataSource\n        perfLog\n        planeSchema\n        pluginRenderDelegateUniqueHandle\n        points\n        prefixingSceneIndex\n        primDataSourceOverlayCache\n        primGather\n        primOriginSchema\n        primTypeIndex\n        primvarSchema\n        primvarsSchema\n        purposeSchema\n        renderBuffer\n        renderBufferSchema\n        renderCapabilitiesSchema\n        renderDelegate\n        rendererPlugin\n        rendererPluginHandle\n        rendererPluginRegistry\n        renderIndex\n        renderPass\n        renderPassSchema\n        renderPassState\n        renderProductSchema\n        renderSettings\n        renderSettingsSchema\n        renderVarSchema\n        renderThread\n        repr\n        resourceRegistry\n        retainedDataSource\n        retainedSceneIndex\n        rprim\n        rprimCollection\n        rprimSharedData\n        sampleFilterSchema\n        sceneDelegate\n        sceneGlobalsSchema\n        sceneIndex\n        sceneIndexAdapterSceneDelegate\n        sceneIndexObserver\n        sceneIndexPlugin\n        sceneIndexPluginRegistry\n        sceneIndexPrimView\n        sceneIndexUtil\n        schema\n        selection\n        selectionSchema\n        selectionsSchema\n        smoothNormals\n        sortedIds\n        sphereSchema\n        splitDiopterSchema\n        sprim\n        subdivisionTagsSchema\n        systemMessages\n        systemSchema\n        task\n        tetMeshSchema\n        tetMeshTopologySchema\n        timeSampleArray\n        tokens\n        topology\n        types\n        unitTestDelegate\n        unitTestHelper\n        unitTestNullRenderDelegate\n        unitTestNullRenderPass\n        utils\n        vectorSchema\n        vertexAdjacency\n        visibilitySchema\n        volume\n        volumeFieldBindingSchema\n        volumeFieldSchema\n        vtBufferSource\n        xformSchema\n\n    PUBLIC_HEADERS\n        api.h\n        dataSourceTypeDefs.h\n        driver.h\n        invalidatableContainerDataSource.h\n        materialNetworkInterface.h\n        schemaTypeDefs.h\n        vectorSchemaTypeDefs.h\n        version.h\n\n    PRIVATE_CLASSES\n        ${optionalPrivateClasses}\n\n    RESOURCE_FILES\n        plugInfo.json\n        codegenTemplates/schemaClass.h\n        codegenTemplates/schemaClass.cpp\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring a Subdivision Mesh with Material & CoordinateSpace Bindings - Custom Scene Configuration\nDESCRIPTION: This block encodes a subdivision surface mesh that binds both modelSpace and worldSpace coordinate systems and links to a material. Topology is specified with face-vertex indices and subdivision attributes. Primvars define geometry attributes such as displayColor, texture UVs, and point positions. Dependencies: referenced coordinate systems and materials must exist. Inputs include mesh attributes; outputs are a fully defined renderable mesh. Constraints include matching counts for vertex attributes and indices.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdImaging/testenv/testUsdImagingStageSceneIndexContents/baseline/basic.txt#2025-04-23_snippet_3\n\nLANGUAGE: custom-config\nCODE:\n```\n</Geom/Subdiv> type = mesh\n\t[__usdPrimInfo]\n\t\t[apiSchemas]\n\t\t\t[MaterialBindingAPI, CoordSysAPI:worldSpace, CoordSysAPI:modelSpace]\n\t\t[isLoaded]\n\t\t\t1\n\t\t[specifier]\n\t\t\tdef\n\t\t[typeName]\n\t\t\tMesh\n\t[coordSysBinding]\n\t\t[modelSpace]\n\t\t\t/CoordSys/modelSpace\n\t\t[worldSpace]\n\t\t\t/CoordSys/worldSpace\n\t[extent]\n\t\t[max]\n\t\t\t(2, 2, 2)\n\t\t[min]\n\t\t\t(-2, -2, -2)\n\t[mesh]\n\t\t[doubleSided]\n\t\t\t0\n\t\t[subdivisionScheme]\n\t\t\tcatmullClark\n\t\t[subdivisionTags]\n\t\t\t[cornerIndices]\n\t\t\t\t[]\n\t\t\t[cornerSharpnesses]\n\t\t\t\t[]\n\t\t\t[creaseIndices]\n\t\t\t\t[]\n\t\t\t[creaseLengths]\n\t\t\t\t[]\n\t\t\t[creaseSharpnesses]\n\t\t\t\t[]\n\t\t\t[faceVaryingLinearInterpolation]\n\t\t\t\tcornersPlus1\n\t\t\t[interpolateBoundary]\n\t\t\t\tedgeAndCorner\n\t\t\t[triangleSubdivisionRule]\n\t\t\t\tcatmullClark\n\t\t[topology]\n\t\t\t[faceVertexCounts]\n\t\t\t\t[4]\n\t\t\t[faceVertexIndices]\n\t\t\t\t[0, 1, 3, 2]\n\t\t\t[holeIndices]\n\t\t\t\t[]\n\t\t\t[orientation]\n\t\t\t\trightHanded\n\t[primOrigin]\n\t\t[scenePath]\n\t\t\tHdPrimOriginSchema::OriginPath(/Geom/Subdiv)\n\t[primvars]\n\t\t[displayColor]\n\t\t\t[interpolation]\n\t\t\t\tconstant\n\t\t\t[primvarValue]\n\t\t\t\t[(0.1, 0.5, 0.8)]\n\t\t\t[role]\n\t\t\t\tcolor\n\t\t[map1_uv]\n\t\t\t[interpolation]\n\t\t\t\tvertex\n\t\t\t[primvarValue]\n\t\t\t\t[(0, 1), (0.4, 1), (0, 0), (0.4, 0)]\n\t\t\t[role]\n\t\t\t\t\n\t\t[points]\n\t\t\t[interpolation]\n\t\t\t\tvertex\n\t\t\t[primvarValue]\n\t\t\t\t[(-2, -2, -2), (2, -2, -2), (-2, -2, 2), (2, -2, 2)]\n\t\t\t[role]\n\t\t\t\tpoint\n\t[usdMaterialBindings]\n\t\t[preview]\n\t\t\t[0]\n\t\t\t\t[directMaterialBinding]\n\t\t\t\t\t[bindingStrength]\n\t\t\t\t\t\tweakerThanDescendants\n\t\t\t\t\t[materialPath]\n\t\t\t\t\t\t/Materials/MyMaterial\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Generation for USD\nDESCRIPTION: Sets up documentation generation if enabled, with additional configuration for Python documentation that depends on the built USD Python modules.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif (PXR_BUILD_DOCUMENTATION)\n    pxr_build_documentation()\n\n    # If building python doc strings, run script\n    # that uses doxygen build results and installed\n    # USD python modules\n    if (PXR_BUILD_PYTHON_DOCUMENTATION)\n        pxr_build_python_documentation()\n    endif()\nendif()   \n```\n\n----------------------------------------\n\nTITLE: Accessing UsdLuxLight and UsdLuxLightFilter in C++\nDESCRIPTION: Shows how to access UsdLuxLight and UsdLuxLightFilter classes in C++. These classes will be enhanced to support connectability.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_renderers.rst#2025-04-23_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\nUsdLuxLight\n```\n\nLANGUAGE: C++\nCODE:\n```\nUsdLuxLightFilter\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple-Apply API Schema Versions in USDA\nDESCRIPTION: Example showing how multiple-apply API schemas can be applied with different versions using instance names. Different versions of the same schema family can be applied with different instance names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_schema_versioning.rst#2025-04-23_snippet_3\n\nLANGUAGE: usda\nCODE:\n```\napiSchemas = [\"CollectionAPI_1:foo\", \"CollectionAPI:bar\"]\n```\n\n----------------------------------------\n\nTITLE: Defining RenderProduct Class in C++\nDESCRIPTION: Defines the RenderProduct class for describing render outputs. It includes properties for product type, name, and ordered variables, with documentation for each. The class inherits from RenderSettingsBase.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_render_settings.rst#2025-04-23_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nclass RenderProduct \"RenderProduct\" (\n    inherits = </RenderSettingsBase>\n    doc = \"\"\"A UsdRenderProduct describes an image or other\n    file-like artifact produced by a render. A RenderProduct\n    combines one or more RenderVars into a file or interactive\n    buffer.  It also provides all the controls established in\n    UsdRenderSettingsBase as optional overrides to whatever the\n    owning UsdRenderSettings prim dictates.\n\n    Specific renderers may support additional settings, such\n    as a way to configure compression settings, filetype metadata,\n    and so forth.  Such settings can be encoded using\n    renderer-specific API schemas applied to the product prim.\n    \"\"\"\n    customData = {\n         string className = \"Product\"\n         dictionary schemaTokens = {\n            dictionary raster = {\n                string doc = \"\"\"RenderProduct productType value that\n                indicates a 2D raster image of pixels.\"\"\"\n            }\n         }\n    }\n) {\n    uniform token productType = \"raster\" (\n        doc = \"\"\"The type of output to produce.\n        The default, \"raster\", indicates a 2D image.\n\n        \\note In the future, UsdRender may define additional product\n        types.\"\"\"\n    )\n    uniform token productName = \"\" (\n        doc = \"\"\"Specifies the name that the output/display driver\n        should give the product.  This is provided as-authored to the\n        driver, whose responsibility it is to situate the product on a\n        filesystem or other storage, in the desired location.\"\"\"\n    )\n    rel orderedVars (\n        doc = \"\"\"Specifies the RenderVars that should be consumed and\n        combined into the final product.  If ordering is relevant to the\n        output driver, then the ordering of targets in this relationship\n        provides the order to use.\"\"\"\n    )\n\n\n    # XXX configuration parameters for the output driver should be created\n    #     in the \"driver:parameters:\" namespace.\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Prims Using UsdStage APIs\nDESCRIPTION: Example showing limitations of using UsdStage APIs to remove prims across layers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nstage = Usd.Stage.Open(\"main.usda\")\n\n# This only removes model1 in main.usda, not\n# model1 in the model.usda layer\nremoveResult = stage.RemovePrim(\"/modelScope/model1\")  \n\n# After the RemovePrim() call, we still have /modelScope/model1\n# from model.usda in our composed stage, and would have to \n# set the edit target to the model.usda layer and call RemovePrim() again\n```\n\n----------------------------------------\n\nTITLE: USD Layer with Nested Property Override\nDESCRIPTION: Shows the resulting USD file with property overrides on a nested prim. An override is automatically created for the nested prim when setting its attributes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_referencing_layers.rst#2025-04-23_snippet_11\n\nLANGUAGE: usd\nCODE:\n```\n#usda 1.0\n\nover \"refSphere\" (\n    prepend references = @./HelloWorld.usda@\n)\n{\n    uniform token[] xformOpOrder = []\n}\n\nover \"refSphere2\" (\n    prepend references = @./HelloWorld.usda@\n)\n{\n    over \"world\"\n    {\n        color3f[] primvars:displayColor = [(1, 0, 0)]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Traversing Models in USD Scene\nDESCRIPTION: Shows how to use Prim Predicate Flags to construct predicates for traversing all models on a stage without visiting sub-model prims.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/propertiesOfSceneDescription.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nAssuming that the prims on a UsdStage are organized into *assembly*, *group*,\nand *component* models, we can use the \\ref Usd_PrimFlags \"Prim Predicate Flags\"\n`UsdPrimIsModel` and `UsdPrimIsGroup` in constructing predicates for\nUsdPrimRange and UsdStage::Traverse() that will visit all models on a stage,\nand no \"sub-model\" prims.  UsdPrim::IsModel() and UsdPrim::IsGroup() answer\nthe corresponding questions.\n```\n\n----------------------------------------\n\nTITLE: USD Path Pattern with Predicate Function\nDESCRIPTION: Shows how to use a predicate function to match prims with a specific API schema.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_10\n\nLANGUAGE: usd\nCODE:\n```\n/foo*{hasAPI:MaterialBindingAPI}\n```\n\n----------------------------------------\n\nTITLE: Setting defaultPrim and Transform in a USD Layer with Python\nDESCRIPTION: Creates and sets a defaultPrim on a USD stage, making it the primary prim referenced by other stages. Also sets a transformation on the default prim using UsdGeomXformCommonAPI.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_referencing_layers.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pxr import Usd, UsdGeom\nstage = Usd.Stage.Open('HelloWorld.usda')\nhello = stage.GetPrimAtPath('/hello')\nstage.SetDefaultPrim(hello)\nUsdGeom.XformCommonAPI(hello).SetTranslate((4, 5, 6))\nprint(stage.GetRootLayer().ExportToString())\nstage.GetRootLayer().Save()\n```\n\n----------------------------------------\n\nTITLE: Validating Edits Before Applying\nDESCRIPTION: Shows how to use CanApplyEdits() to validate a batch of edits before applying them to the stage.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ncanApply = editor.CanApplyEdits()\nif canApply:\n    editor.ApplyEdits()\n```\n\n----------------------------------------\n\nTITLE: Defining Pattern-Based Collections with Weaker References in USDA\nDESCRIPTION: Defines two layers of prims using USDA syntax to demonstrate the use of weaker expression references (\"%_\") in the CollectionAPI. The first block establishes the base collection and literal membership; the second overrides membership in a referencing layer, optionally combining both via the '%_' syntax. No dependencies aside from referencing valid layers and prims. Inputs are path expressions; output is a merged expression when references are resolved. Shows real-world usage of opinion stacking in USD composition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_18\n\nLANGUAGE: usda\nCODE:\n```\ndef \"World\" ()\n{\n    def \"Animals\" (\n        prepend apiSchemas = [\"CollectionAPI:expTest\"]\n    )\n    {\n        pathExpression collection:expTest:membershipExpression = \"/World/Animals/Fish/Halibut\"\n\n        def \"Fish\"\n        {\n            def \"Tuna\"\n            {\n            }\n            def \"Salmon\"\n            {\n            }\n            def \"Halibut\"\n            {                \n            }\n        }\n    }\n}\n```\n\nLANGUAGE: usda\nCODE:\n```\ndef \"World\" ()\n{\n    def \"Animals\" (\n        prepend apiSchemas = [\"CollectionAPI:expTest\"]\n        references = @weakerSubRef.usda@</World/Animals>\n    )\n    {\n        pathExpression collection:expTest:membershipExpression = \"/World/Animals/Fish/Goldfish\"\n\n        def \"Fish\"\n        {\n            def \"Goldfish\"\n            {\n            }\n        }\n    }\n}\n```\n\nLANGUAGE: usda\nCODE:\n```\ndef \"World\" ()\n{\n    def \"Animals\" (\n        prepend apiSchemas = [\"CollectionAPI:expTest\"]\n        references = @weakerSubRef.usda@</World/Animals>\n    )\n    {\n        pathExpression collection:expTest:membershipExpression = \"/World/Animals/Fish/Goldfish + %_\"\n\n        def \"Fish\"\n        {\n            def \"Goldfish\"\n            {\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Relocates with Variant Sets\nDESCRIPTION: Demonstrates how relocates interact with variant sets, showing composition behavior with variants instead of inherits.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_42\n\nLANGUAGE: usda\nCODE:\n```\ndef \"PrimWithInherits\"\n(\n    variants = {\n        string varSet = \"Set1\"\n    }\n    prepend variantSets = \"varSet\"    \n)\n{\n    variantSet \"varSet\" = {\n        \"Set1\" ()\n        {\n            def \"Child\"\n            {\n                uniform token testString = \"from varSet Child\"\n                uniform token varChildString = \"test\"\n            }\n        }\n        \"Set2\" ()\n        {\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining USD Title Text Role in Sphinx RST\nDESCRIPTION: Creates a custom role 'usdtitletext' for USD title text formatting in Sphinx documentation with specific styling. Used with the syntax :usdtitletext:`text`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/rolesAndUtils.rst#2025-04-23_snippet_11\n\nLANGUAGE: rst\nCODE:\n```\n.. role:: usdtitletext\n   :class: usd-title-text sidebar-title\n```\n\n----------------------------------------\n\nTITLE: Schema Family Query Functions in C++\nDESCRIPTION: Extended schema family query functions for checking version policies and schema families.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_schema_versioning.rst#2025-04-23_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nIsInFamily(TfToken schemaIdentifer, VersionPolicy versionPolicy)\nIsInFamily(TfToken schemaFamily)\nIsInFamily(TfToken schemaFamily, UsdSchemaVersion version, VersionPolicy versionPolicy)\nHasAPIInFamily(TfToken schemaIdentifer, VersionPolicy versionPolicy)\nHasAPIInFamily(TfToken schemaFamily)\nHasAPIInFamily(TfToken schemaFamily, UsdSchemaVersion version, VersionPolicy versionPolicy)\n```\n\n----------------------------------------\n\nTITLE: USD Path Pattern with Specifier Predicate\nDESCRIPTION: Two equivalent ways to match root-level prims starting with 'char' that are classes or overs.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_12\n\nLANGUAGE: usd\nCODE:\n```\n/char*{specifier:class,over}\n/char*{specifier(class,over)}\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Graph Material with UsdUI Properties\nDESCRIPTION: Demonstrates how to represent a node graph in USD with UI-related properties including node positions, colors, and expansion states. Shows configuration of Material with PreviewSurface and Color shaders along with a Backdrop element.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUI/userDoc/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\ndef Material \"Material\"\n{\n    token outputs:mtlx:surface.connect = </World/Material/PreviewSurface.outputs:out>\n\n    def Shader \"PreviewSurface\" (\n        prepend apiSchemas = [\"NodeGraphNodeAPI\"]\n    )\n    {\n        uniform token info:id = \"ND_UsdPreviewSurface_surfaceshader\"\n        color3f inputs:diffuseColor.connect = </World/Material/Color.outputs:out>\n        token outputs:out\n        uniform color3f ui:nodegraph:node:displayColor = (0.780, 0.698, 0.6)\n        uniform token ui:nodegraph:node:expansionState = \"open\"\n        uniform float2 ui:nodegraph:node:pos = (-.85, 1.9)\n    }\n\n    def Shader \"Color\" (\n        prepend apiSchemas = [\"NodeGraphNodeAPI\"]\n    )\n    {\n        uniform token info:id = \"ND_constant_color3\"\n        color3f inputs:value = (1, 0.023, 0.701)\n        color3f outputs:out\n        uniform color3f ui:nodegraph:node:displayColor = (0.549, 0.133, 1.0)\n        uniform token ui:nodegraph:node:expansionState = \"closed\"\n        uniform float2 ui:nodegraph:node:pos = (-2, 2)\n    }\n\n    def Backdrop \"Backdrop\" (\n        prepend apiSchemas = [\"NodeGraphNodeAPI\"]\n    )\n    {\n        uniform token ui:description = \"Do not edit!\"\n        uniform color3f ui:nodegraph:node:displayColor = (0.764, 1.0, 0.698)\n        uniform float2 ui:nodegraph:node:pos = (-0.8, 0.5)\n        uniform float2 ui:nodegraph:node:size = (450, 330)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NormalMapTextureValidator for UsdShade\nDESCRIPTION: Documentation for a validator that ensures UsdUVTexture nodes feeding the normals of a UsdPreviewSurface have proper data encoding and scaling to transform 8-bit textures from [0..1] range to [-1..1] range.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n[usdShadeValidators:NormalMapTextureValidator]:\n\tDoc: UsdUVTexture nodes that feed the _inputs:normals_ of a UsdPreviewSurface must ensure that the data is encoded and scaled properly. Specifically, since normals are expected to be in the range [(-1,-1,-1), (1,1,1)], the Texture node must transform 8-bit textures from their [0..1] range by setting its _inputs:scale_ to (2, 2, 2, 1) and _inputs:bias_ to (-1, -1, -1, 0). Normal map data is commonly expected to be linearly encoded.  However, many image-writing tools automatically set the profile of three-channel, 8-bit images to SRGB.  To prevent an unwanted transformation, the UsdUVTexture's _inputs:sourceColorSpace_ must be set to raw.\n\tKeywords: UsdShadeValidators\n\tSchemaTypes: UsdShadeShader\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Viewing USD Stage in usdview\nDESCRIPTION: This shell command shows how to open the USD stage in usdview to visualize the created geometry. It allows interactive viewing of the USD scene contents.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_simple_shading.rst#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n> usdview simpleShading.usda\n```\n\n----------------------------------------\n\nTITLE: Building USD with CMake on macOS using Xcode\nDESCRIPTION: Example of building USD on macOS by generating an Xcode project with CMake, specifying dependencies, and using parallel compilation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/BUILDING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncmake                                       \\\n-G \"Xcode\"                                  \\\n-DTBB_ROOT_DIR=/path/to/tbb                 \\\n-DOPENSUBDIV_ROOT_DIR=/path/to/opensubdiv   \\\n/path/to/USD/source\n\ncmake --build . --target install -- -j <NUM_CORES>\n```\n\n----------------------------------------\n\nTITLE: Deferred Import Implementation - Printer Module\nDESCRIPTION: Separate module containing the print message functionality for deferred loading\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_usdview_plugin.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Imported printer!\")\n\n\ndef printMessage(usdviewApi):\n    print(\"Hello, World!\")\n```\n\n----------------------------------------\n\nTITLE: Defining Coordinate Systems (modelSpace/worldSpace) - Custom Scene Configuration\nDESCRIPTION: Defines coordinate system hierarchy in the USD scene graph, including modelSpace and worldSpace nodes. Each node specifies schema information and origin, with worldSpace providing a transformation matrix. Key parameters include typeName ('Xform'), origin path, and, for worldSpace, a transformation (4x4) matrix. These nodes are typically referenced by geometric primitives for transform evaluation and are essential for spatial queries.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdImaging/testenv/testUsdImagingStageSceneIndexContents/baseline/basic.txt#2025-04-23_snippet_1\n\nLANGUAGE: custom-config\nCODE:\n```\n</CoordSys> type = \n\t[__usdPrimInfo]\n\t\t[isLoaded]\n\t\t\t1\n\t\t[specifier]\n\t\t\tdef\n\t\t[typeName]\n\t\t\tXform\n\t[primOrigin]\n\t\t[scenePath]\n\t\t\tHdPrimOriginSchema::OriginPath(/CoordSys)\n\t[primvars]\n```\n\nLANGUAGE: custom-config\nCODE:\n```\n</CoordSys/modelSpace> type = \n\t[__usdPrimInfo]\n\t\t[isLoaded]\n\t\t\t1\n\t\t[specifier]\n\t\t\tdef\n\t\t[typeName]\n\t\t\tXform\n\t[primOrigin]\n\t\t[scenePath]\n\t\t\tHdPrimOriginSchema::OriginPath(/CoordSys/modelSpace)\n\t[primvars]\n```\n\nLANGUAGE: custom-config\nCODE:\n```\n</CoordSys/worldSpace> type = \n\t[__usdPrimInfo]\n\t\t[isLoaded]\n\t\t\t1\n\t\t[specifier]\n\t\t\tdef\n\t\t[typeName]\n\t\t\tXform\n\t[primOrigin]\n\t\t[scenePath]\n\t\t\tHdPrimOriginSchema::OriginPath(/CoordSys/worldSpace)\n\t[primvars]\n\t[xform]\n\t\t[matrix]\n\t\t\t( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (4, 5, 6, 1) )\n\t\t[resetXformStack]\n\t\t\t0\n```\n\n----------------------------------------\n\nTITLE: Composing Relocated Prim </Char/Relocated> in USD Scene\nDESCRIPTION: Displays the composition results for the prim </Char/Relocated>, which is the target of a relocation operation. It shows the prim stack combining opinions from the relocation target in 'root.sdf' and the original source prim ('/Model/ToBeRelocated') in 'model.sdf'. It also lists its children and prohibited children after relocation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_RelocateToNone.testenv/baseline/compositionResults_RelocateToNone_usd.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd-composition-output\nCODE:\n```\nResults for composing </Char/Relocated>\n\nPrim Stack:\n    root.sdf             /Char/Relocated\n    model.sdf            /Model/ToBeRelocated\n\nChild names:\n     ['Child']\n\nProhibited child names:\n     ['ToBeDeletedChild']\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimWithReferences\nDESCRIPTION: Shows the composition results for </PrimWithReferences>. The prim stack indicates its definition in root.sdf and contributions from referenced prims </PrimA> (from ref.sdf), </PrimC>, and </PrimB> (both from ref2.sdf). Child names from all referenced prims are listed.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimWithReferences>\n\nPrim Stack:\n    root.sdf             /PrimWithReferences\n    ref.sdf              /PrimA\n    ref2.sdf             /PrimC\n    ref2.sdf             /PrimB\n\nChild names:\n     ['PrimB_Child', 'PrimC_Child', 'PrimA_Child']\n```\n\n----------------------------------------\n\nTITLE: USD Layer Stack Output Analysis\nDESCRIPTION: Detailed composition analysis showing layer stacks, prim stacks, variant selections, property stacks and relationship targets for a USD scene with relocated prims and variant selections.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantOverrideOfRelocatedPrim.testenv/baseline/compositionResults_TrickyVariantOverrideOfRelocatedPrim.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nLoading @TrickyVariantOverrideOfRelocatedPrim/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </Model>\n\nPrim Stack:\n    root.sdf             /Model\n    root.sdf             /Model{vset=vsel}\n    model.sdf            /Model\n\nVariant Selections:\n    {vset = vsel}\n\nChild names:\n     ['RelocatedSphere']\n\nProhibited child names:\n     ['UnrelocatedSphere']\n\n------------------------------------------------------------------------\nResults for composing </Model/RelocatedSphere>\n\nPrim Stack:\n    root.sdf             /Model{vset=vsel}RelocatedSphere\n    model.sdf            /Model/UnrelocatedSphere\n\nChild names:\n     ['Geom']\n\n------------------------------------------------------------------------\nResults for composing </Model/RelocatedSphere/Geom>\n\nPrim Stack:\n    root.sdf             /Model{vset=vsel}RelocatedSphere/Geom\n    model.sdf            /Model/UnrelocatedSphere/Geom\n\nProperty names:\n     ['x', 'r']\n\nProperty stacks:\n/Model/RelocatedSphere/Geom.r:\n    root.sdf             /Model{vset=vsel}RelocatedSphere/Geom.r\n/Model/RelocatedSphere/Geom.x:\n    root.sdf             /Model{vset=vsel}RelocatedSphere/Geom.x\n    model.sdf            /Model/UnrelocatedSphere/Geom.x\n\nRelationship targets:\n/Model/RelocatedSphere/Geom.r:\n    /Model\n```\n\n----------------------------------------\n\nTITLE: Converting USD File from Binary to Text Format with Specific Output\nDESCRIPTION: Illustrates the process of converting a binary .usd file to a text .usd file using usdcat with the --usdFormat option, followed by a verification step.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_converting_between_layer_formats.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ usdcat -o NewSphere_text.usd --usdFormat usda NewSphere_binary.usd\n$ usddiff NewSphere_binary.usd NewSphere_text.usd\n```\n\n----------------------------------------\n\nTITLE: Accessing UsdLuxRectLight in C++\nDESCRIPTION: Demonstrates how to access the UsdLuxRectLight class, which will be associated with Sdr definitions for renderer-specific implementations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_renderers.rst#2025-04-23_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nUsdLuxRectLight\n```\n\n----------------------------------------\n\nTITLE: Implementing Deferred Import in Python for usdview Plugins\nDESCRIPTION: This snippet demonstrates how to use deferred imports in usdview plugins to optimize loading time. It uses the deferredImport method to create a fake module object that only imports the actual module when a function is called.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_usdview_plugin.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nprinter = deferredImport('printer')\n```\n\n----------------------------------------\n\nTITLE: Component Model Definition in USDA\nDESCRIPTION: Shows how to define a component model with subcomponents and references to other assets, demonstrating proper kind assignments.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_12\n\nLANGUAGE: usda\nCODE:\n```\ndef Xform \"TreeSpruce\" (\n    kind = \"component\"\n)\n{\n    # Geometry and shading prims that define a Spruce tree...\n\n    def \"Cone_1\" (\n        kind = \"subcomponent\"\n        references = @Cones/PineConeA.usd@\n    )\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering HdSt Buffer Tests in CMake\nDESCRIPTION: Registration of tests for HdSt buffer functionality, including buffer aggregation and buffer array tests. These tests validate the core buffer handling capabilities of the Hydra Storm renderer without visual output comparison.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStBufferAggregation\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBufferAggregation\"\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBufferAggregation\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStBufferArray\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBufferArray\"\n    EXPECTED_RETURN_CODE 0\n    STDOUT_REDIRECT testHdStBufferArray-Run1-stdout.txt\n```\n\n----------------------------------------\n\nTITLE: Basic Conditional Expression in USDA\nDESCRIPTION: Demonstrates basic if-then-else conditional expression that returns a value based on variable definition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/variable_expressions.rst#2025-04-23_snippet_9\n\nLANGUAGE: usda\nCODE:\n```\nif( defined(\"VARIABLE1\"), ${VARIABLE1}, None)\n```\n\n----------------------------------------\n\nTITLE: Resulting USD Layer with Deleted Prim Relocate\nDESCRIPTION: Displays the resulting USD layer after deleting a referenced prim, showing the added relocate.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_14\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    relocates = {\n        </RootPrim/ChildInRef>: <>\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing SceneGraphPrimAPI with Material and Shader Nodes in USDA\nDESCRIPTION: This example demonstrates how to use SceneGraphPrimAPI to add descriptive information to Material and Shader nodes in USD. It shows the usage of ui:displayName and ui:displayGroup properties for organizing and naming nodes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdUI/SceneGraphPrimAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\ndef Material \"MyMaterial\"\n{\n    token outputs:mtlx:surface.connect = </World/MyMaterial/PreviewSurface.outputs:out>\n\n    def Shader \"PreviewSurface\" (\n        prepend apiSchemas = [\"SceneGraphPrimAPI\"]\n    )\n    {\n        uniform token info:id = \"ND_UsdPreviewSurface_surfaceshader\"\n        color3f inputs:diffuseColor.connect = </World/MyMaterial/Color.outputs:out>\n        token outputs:out\n\n        uniform token ui:displayGroup = \"MyMaterial Nodes\"\n        uniform token ui:displayName = \"Preview Surface Node\"\n    }\n\n    def Shader \"Color\" (\n        prepend apiSchemas = [\"SceneGraphPrimAPI\"]\n    )\n    {\n        uniform token info:id = \"ND_constant_color3\"\n        color3f inputs:value = (1, 0.023, 0.701)\n        color3f outputs:out\n\n        uniform token ui:displayGroup = \"MyMaterial Nodes\"\n        uniform token ui:displayName = \"Color Node\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of String Expression Variables in USD\nDESCRIPTION: This snippet demonstrates various ways to define string expression variables, including escaped strings and nested expressions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/variable_expressions.rst#2025-04-23_snippet_2\n\nLANGUAGE: usda\nCODE:\n```\nstring exampleStr = \"I am a string\"\nstring exampleStrEscaped = \"A \\\"quote escaped\\\" string\"\nstring exampleStrEscaped2 = \"\"\"Another \"escaped\" string\"\"\"\nstring exampleStrBoolExpression = \"`True`\"\nstring exampleStrIfExpression = '`if(${USE_RED}, \"red\", \"blue\")`'\nstring exampleStrExpanded = \"`charA_${MODEL_CATEGORY}_${MODEL_VERSION}`\"\n```\n\n----------------------------------------\n\nTITLE: Sampling ComplexParams Spline in Python\nDESCRIPTION: This snippet defines a ComplexParams spline with three knots, demonstrating more complex interpolation behavior. It includes different extrapolation modes and tangent configurations for each knot.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_109\n\nLANGUAGE: python\nCODE:\n```\nSpline: ComplexParams\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Linear\n  post extrap Sloped 0.57\nKnot:\n  value type double\n  curve type Bezier\n  time 7\n  value 7.21\n  next interp Held\n  preValue 5.5\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 15\n  value 8.18\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 2.49\n  post-tan slope 1.17\nKnot:\n  value type double\n  curve type Bezier\n  time 20\n  value 14.72\n  next interp Curve\n  pre-tan width 3.77\n  pre-tan slope -1.4\n  post-tan width 1.1\n  post-tan slope -1.4\n```\n\n----------------------------------------\n\nTITLE: Modifying Sphere Properties in USD\nDESCRIPTION: Changes the radius and translation of a sphere in the USD scene. The radius is increased from 1 to 2, and the x-coordinate of the translation is changed from -5 to -6.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddiff/testenv/testDiffToolIterateUsdz/baseline/iterate_usd.txt#2025-04-23_snippet_4\n\nLANGUAGE: USD\nCODE:\n```\n-    double radius = 1\n-    double3 xformOp:translate = (-5, 0, 0)\n+    double radius = 2\n+    double3 xformOp:translate = (-6, 0, 0)\n```\n\n----------------------------------------\n\nTITLE: Cloning OpenUSD Repository\nDESCRIPTION: Command to clone the OpenUSD repository from GitHub using git.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n> git clone https://github.com/PixarAnimationStudios/OpenUSD\nCloning into 'OpenUSD'...\n```\n\n----------------------------------------\n\nTITLE: Defining GeomSphere with Custom and Schema Properties - Universal Scene Description USDA\nDESCRIPTION: Shows a USDA definition of a Sphere prim with both a custom property and a built-in schema property (radius) included. Provides context for which properties can be edited later with the Namespace Editor; customProp is modifiable, while radius is locked by schema rules. Requires USDA syntax and an environment capable of parsing USD ASCII files. Input: none (declarative definition); Output: a sphere prim with specified attributes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_29\n\nLANGUAGE: usda\nCODE:\n```\ndef Sphere \"testSphere\" (\n)\n{\n    custom string customProp = \"custom property\"\n\n    # UsdGeomSphere schema radius attribute\n    double radius = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Whole Archives for USD in CMake\nDESCRIPTION: CMake code snippet demonstrating how to link whole archives of USD libraries, ensuring all necessary object files are included across different platforms.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/BUILDING.md#2025-04-23_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n    target_link_libraries(mylib -WHOLEARCHIVE:$<TARGET_FILE:usd_m> usd_m)\nelseif(CMAKE_COMPILER_IS_GNUCXX)\n    target_link_libraries(mylib -Wl,--whole-archive usd_m -Wl,--no-whole-archive)\nelseif(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n    target_link_libraries(mylib -Wl,-force_load usd_m)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Comparing Model Hierarchy and Semantic Labels in USD\nDESCRIPTION: This snippet compares the use of model hierarchy (kind) with semantic labels in USD. It shows how multiple taxonomies and labels can be applied to a single prim, in contrast to the single kind value allowed in model hierarchy.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdSemantics/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: USD\nCODE:\n```\ndef Xform \"OfficeBookshelf\" (\n    # Only one kind may be specified\n    kind = \"component\"\n    # Multiple taxonomies may be specified\n    apiSchemas = [\"SemanticsLabelsAPI:category\",\n                  \"SemanticsLabelsAPI:style\"]\n)\n{\n    # Multiple labels may be specified per instance\n    token[] semantics:labels:category = [\"furniture\", \"bookcase\"]\n    token[] semantics:labels:style = [\"chic\", \"modern\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Size Factor for Distant Lights\nDESCRIPTION: Defines the calculation of size factor for distant lights based on the light angle.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/LightAPI.md#2025-04-23_snippet_5\n\nLANGUAGE: math\nCODE:\n```\nsizeFactor_{distant} =\n\\begin{cases}\n    1,                                & \\text{if} \\quad \\theta_{max} = 0              \\\\\n    sin(\\theta_{max})^2 * \\pi,        & \\text{if} \\quad 0<\\theta_{max} \\leq \\pi / 2   \\\\\n    ( 2 - sin(\\theta_{max})^2) * \\pi, & \\text{if} \\quad \\pi/2 < \\theta_{max} \\leq \\pi\n\\end{cases}\n```\n\n----------------------------------------\n\nTITLE: Setting Color Space for Specific Attributes in USDA\nDESCRIPTION: This example shows how to provide finer-grain control by setting a default color space on a Material prim with ColorSpaceAPI, while specifying a different color space for a specific color attribute using colorSpace metadata.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/color_user_guide.rst#2025-04-23_snippet_1\n\nLANGUAGE: usda\nCODE:\n```\ndef Material \"NewMaterial\"\n(\n    prepend apiSchemas = [\"ColorSpaceAPI\"]\n)\n{\n    uniform token colorSpace:name = \"srgb_p3d65_scene\"\n\n    # diffuseColor needs to specify a different color space\n    color3f inputs:diffuseColor = (0.2, 0.5, 0.8) (\n        colorSpace = \"srgb_rec709_scene\"\n    )\n    # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Session Layer Contents after Deactivation\nDESCRIPTION: Shows how to inspect the contents of the session layer after deactivating a prim. The session layer holds transient opinions that affect the current working session but are not committed to the asset.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_traversing_stage.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> print(usdviewApi.stage.GetSessionLayer().ExportToString())\n#usda 1.0\n\nover \"refSphere2\" (\n    active = false\n)\n{\n}\n```\n\n----------------------------------------\n\nTITLE: USD Layer with Reference Composition Arc\nDESCRIPTION: Shows the resulting USD file after adding a reference to HelloWorld.usda. The reference is added as a prepend operation in the composition arcs.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_referencing_layers.rst#2025-04-23_snippet_5\n\nLANGUAGE: usd\nCODE:\n```\n#usda 1.0\n\nover \"refSphere\" (\n    prepend references = @./HelloWorld.usda@\n)\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Running usdview\nDESCRIPTION: Command to launch usdview with a sample asset file after installation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/README.md#2025-04-23_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n> usdview OpenUSD/extras/usd/tutorials/convertingLayerFormats/Sphere.usda\n```\n\n----------------------------------------\n\nTITLE: Creating a USD Preview Material with Texture and Primvar Reader\nDESCRIPTION: Demonstrates how to create a USD preview material that uses a primvar reader for UV coordinates and applies a texture.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_13\n\nLANGUAGE: USDA\nCODE:\n```\ndef Scope \"materials\"\n{\n    def Material \"MyMaterial\"\n    {\n        token outputs:displacement.connect = </materials/MyMaterial/usdpreviewsurface1.outputs:displacement>\n        token outputs:surface.connect = </materials/MyMaterial/usdpreviewsurface1.outputs:surface>\n\n        def Shader \"usdprimvarreader1\"\n        {\n            uniform token info:id = \"UsdPrimvarReader_float2\"\n            string inputs:varname = \"st\"\n            float2 outputs:result\n        }\n\n        def Shader \"usduvtexture1\"\n        {\n            uniform token info:id = \"UsdUVTexture\"\n            asset inputs:file = @./usdLogo.png@\n            float2 inputs:st = (0, 1) # default provided here in case connection to usdprimvarreader1 ever broken\n            float2 inputs:st.connect = </materials/MyMaterial/usdprimvarreader1.outputs:result>\n            vector3f outputs:rgb\n        }\n\n        def Shader \"usdpreviewsurface1\"\n        {\n            uniform token info:id = \"UsdPreviewSurface\"\n            color3f inputs:diffuseColor.connect = </materials/MyMaterial/usduvtexture1.outputs:rgb>\n            token outputs:displacement\n            token outputs:surface\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Version Conflict in USDA\nDESCRIPTION: Example demonstrating a version conflict scenario where multiple versions of the same API schema with the same instance name are defined. Only the strongest version will be applied.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_schema_versioning.rst#2025-04-23_snippet_5\n\nLANGUAGE: usda\nCODE:\n```\napiSchemas = [\"CollectionAPI_1:foo\", \"CollectionAPI:foo\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Colored Marbles using USD Xforms\nDESCRIPTION: Creates two marble objects (green and red) using USD Xforms and Spheres with different translations and colors.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_35\n\nLANGUAGE: usda\nCODE:\n```\ndef Xform \"Marble_Green\" (\n    kind = \"component\"\n)\n{\n    double3 xformOp:translate = (-10, 0, 0)\n    uniform token[] xformOpOrder = [ \"xformOp:translate\" ]\n\n    def Sphere \"marble_geom\"\n    {\n        color3f[] primvars:displayColor = [ (0, 1, 0) ]\n    }\n}\n\ndef Xform \"Marble_Red\" (\n    kind = \"component\"\n)\n{\n    double3 xformOp:translate = (5, 0, 0)\n    uniform token[] xformOpOrder = [ \"xformOp:translate\" ]\n\n    def Sphere \"marble_geom\" \n    {\n        color3f[] primvars:displayColor = [ (1, 0, 0) ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Property with API Name Override in USD\nDESCRIPTION: Example showing how to define a property with customData to override the generated API accessor name. The snippet demonstrates setting an apiName to change the generated accessor from GetPrimVarsDisplayColorAttr to GetDisplayColorAttr.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/generatingSchemas.md#2025-04-23_snippet_8\n\nLANGUAGE: usda\nCODE:\n```\nColorFloat[] primvars:displayColor (\n    customData = {\n        string apiName = \"displayColor\"\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Varying Interpolation Primvar in USD\nDESCRIPTION: This snippet shows how to define a mesh with a varying interpolation primvar for displayColor. It uses six color values, one for each point of the mesh, creating a gradient effect similar to vertex interpolation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/primvars.rst#2025-04-23_snippet_3\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n)\n\ndef Mesh \"varying\"\n{\n    float3[] extent = [(-1, 0, 0), (1, 1, 0)]\n    point3f[] points = [(-1, 0, 0), (-1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 1, 0), (1, 0, 0)]\n    int[] faceVertexCounts = [4, 4]\n    int[] faceVertexIndices = [3, 2, 1, 0, 5, 4, 2, 3]\n    \n    color3f[] primvars:displayColor = [(1, 0, 0), (0.75,0,0), (0.5,0,0.25), (0.25,0,0.5), (0,0,1), (0,0,0.75)] (\n        interpolation = \"varying\"\n    )\n    \n    double3 xformOp:translate = (0, 0, -10)\n    uniform token[] xformOpOrder = [\"xformOp:translate\"]  \n}\n```\n\n----------------------------------------\n\nTITLE: Composing USD Bob Character Prim\nDESCRIPTION: Shows the complete prim stack for the 'bob' character including variant selections and child prims. Demonstrates variant selection for geotype and geotype_selector.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantWeakerSelection2.testenv/baseline/compositionResults_TrickyVariantWeakerSelection2.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nPrim Stack:\n    root.sdf             /bob\n    root.sdf             /_class_geotype\n    root.sdf             /_class_geotype{geotype_selector=select_cube}\n    root.sdf             /bob{geotype=cube}\n    geo.sdf              /bob_root_cube\n\nVariant Selections:\n    {geotype = cube}\n    {geotype_selector = select_cube}\n\nChild names:\n     ['bob_body']\n```\n\n----------------------------------------\n\nTITLE: Building Comprehensive C++ Test Suite for Tf Module in CMake\nDESCRIPTION: Creates a large C++ test target that includes multiple source files covering various aspects of the Tf module. This comprehensive test suite checks functionality like memory management, debugging, type systems, and utility functions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testTf\n    LIBRARIES\n        tf\n    CPPFILES\n        testenv/main.cpp\n        testenv/anyUniquePtr.cpp\n        testenv/atomicOfstreamWrapper.cpp\n        testenv/bits.cpp\n        testenv/bitUtils.cpp\n        testenv/compressedBits.cpp\n        testenv/debug.cpp\n        testenv/denseHashMap.cpp\n        testenv/delegate.cpp\n        testenv/dl.cpp\n        testenv/enum.cpp\n        testenv/error.cpp\n        testenv/envSetting.cpp\n        testenv/exception.cpp\n        testenv/fastCompression.cpp\n        testenv/fileUtils.cpp\n        testenv/functionRef.cpp\n        testenv/getenv.cpp\n        testenv/hash.cpp\n        testenv/iterator.cpp\n        testenv/mallocTag.cpp\n        testenv/meta.cpp\n        testenv/notice.cpp\n        testenv/pathUtils.cpp\n        testenv/patternMatcher.cpp\n        testenv/pointerAndBits.cpp\n        testenv/preprocessorUtilsLite.cpp\n        testenv/probe.cpp\n        testenv/refPtr.cpp\n        testenv/registryManager.cpp\n        testenv/registryManagerUnload.cpp\n        testenv/rwMutexes.cpp\n        testenv/safeOutputFile.cpp\n        testenv/scoped.cpp\n        testenv/scopeDescription.cpp\n        testenv/setenv.cpp\n        testenv/smallVector.cpp\n        testenv/stacked.cpp\n        testenv/staticData.cpp\n        testenv/stl.cpp\n        testenv/stopwatch.cpp\n        testenv/stringUtils.cpp\n        testenv/staticTokens.cpp\n        testenv/templateString.cpp\n        testenv/token.cpp\n        testenv/delegatedCountPtr.cpp\n        testenv/type.cpp\n        testenv/typeMultipleInheritance.cpp\n        testenv/typeInfoMap.cpp\n        testenv/unicodeUtils.cpp\n        testenv/weakPtr.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Assembly Asset and Group Models in USD (usda)\nDESCRIPTION: This snippet demonstrates the definition of an \"assembly\" asset containing group models for organizing its sub-parts using the USDA format. It uses 'def Xform' statements with metadata (such as kind = \"assembly\" or kind = \"group\") to represent collections of models nested within a hierarchy under one asset. No external dependencies are required; the snippet assumes basic familiarity with USD's USDA syntax. Inputs include named node definitions and metadata, while output is a structured, hierarchical asset to be referenced or composed in a USD scene. Comments show where real subgroups or component references should be inserted, and the snippet is suitable as a template for asset aggregation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_18\n\nLANGUAGE: usda\nCODE:\n```\ndef Xform \"Forest_set\" (\n    kind = \"assembly\"\n)\n{\n    def Xform \"Outskirts\" (\n        kind = \"group\"\n    )\n    {\n        # More deeply nested groups, bottoming out at references to other assemblies and components\n    }\n\t\n    def Xform \"Glade\" (\n        kind = \"group\"\n    )\n    {\n        # More deeply nested groups, bottoming out at references to other assemblies and components\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TwoKnotBezier Spline with Controlled Tangents\nDESCRIPTION: Definition of a two-knot Bézier spline with custom tangent control. The spline uses Held extrapolation at both ends and has knots at time points 1 and 5 with specific tangent widths and slopes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_41\n\nLANGUAGE: plain text\nCODE:\n```\nSpline: TwoKnotBezier\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0.5\n  post-tan slope 1\nKnot:\n  value type double\n  curve type Bezier\n  time 5\n  value 2\n  next interp Curve\n  pre-tan width 0.5\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Blocking Individual Time Samples in USDA\nDESCRIPTION: These examples demonstrate how to block individual time samples for an attribute in USD. They show different scenarios of blocking and their effects on attribute value resolution over time.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_9\n\nLANGUAGE: USDA\nCODE:\n```\ndef Sphere \"BigBall\"\n{ \n    double radius.timeSamples = { \n        101: 12, \n        102: None, \n    } \n}\n```\n\nLANGUAGE: USDA\nCODE:\n```\ndef Sphere \"BigBall\"\n{ \n    double radius.timeSamples = { \n        101: None, \n        102: 12, \n    } \n}\n```\n\nLANGUAGE: USDA\nCODE:\n```\ndef Sphere \"BigBall\"\n{ \n    double radius.timeSamples = { \n        101: 1, \n        102: 2, \n    } \n} \n\ndef \"DefaultBall\" ( \n    references = </BigBall> \n) \n{ \n    double radius.timeSamples = { \n        101: None, \n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Properties from Xformable in USD\nDESCRIPTION: This snippet shows the inherited properties from the Xformable schema for the GeometryLight. It includes the xformOpOrder property.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/GeometryLight.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Inherited Properties ({ref}`Xformable`)\n\n### xformOpOrder\n\n**USD type**: `token[]`\n```\n\n----------------------------------------\n\nTITLE: Multi-Pass Render Configuration in USDA\nDESCRIPTION: Demonstrates setup of multiple render passes including foreground, background, and composite passes with specific visibility collections and render settings.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_30\n\nLANGUAGE: usda\nCODE:\n```\ndef Scope \"Render\"\n{\n    ...settings and products...\n\n    def Scope \"Passes\"\n    {\n        def RenderPass \"foreground\" \n        {\n            token passType = \"prman\"\n            rel renderSource = <Render/PrimarySettings>\n            string[] command = [\"prman\"]\n            uniform bool collection:renderVisibility:includeRoot = false\n            prepend rel collection:renderVisibility:includes = [\n                </World/characters>,\n                </World/sets/Kitchen/Table_grp>,\n            ]\n        }\n        def RenderPass \"background\" \n        {\n            token passType = \"prman\"\n            rel renderSource = <Render/PrimarySettings>\n            string[] command = [\"prman\"]\n            uniform bool collection:renderVisibility:includeRoot = true\n            prepend rel collection:renderVisibility:excludes = [\n                </World/characters>,\n                </World/sets/Kitchen/Table_grp>,\n            ]\n        }\n        def RenderPass \"composite\"\n        {\n            token passType = \"nuke\"\n            asset fileName = @composite.nk@\n            # this nuke-namespaced property might come from a hypothetical Nuke-supplied API schema\n            string nuke:writeNode = \"WriteFinalComposite\"\n            rel renderSource = </Render/Passes/composite.nuke:writeNode>\n            string[] command = [\"nuke\", \"-x\", \"-c\", \"32G\"]\n            rel inputPasses = [\n                </Render/Passes/foreground>,\n                </Render/Passes/background>\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Representing USD Stage Hierarchy with Prims and Kinds\nDESCRIPTION: This text snippet uses an ASCII tree format to visualize a Universal Scene Description (USD) stage hierarchy. It shows various prims (`root`, `child1`, `child2`, etc.), their definition types (`def`), prim types (`Scope`, `Xform`, `Cube`), and `kind` classifications (`assembly`, `group`, `component`, `subcomponent`). It also illustrates composition arcs (`payload`) and metadata (`customData`, `active = false`), demonstrating parent-child relationships and organizational structure within the scene. Knowledge of USD terminology is helpful for interpretation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdtree/testenv/testUsdTreePayload/baseline/output_notflattened.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/\n `--root [def Scope] (kind = assembly)\n     |--child1 [def] (kind = group)\n     |     `--(payload)\n     `--child2 [def Xform] (kind = group)\n         | `--(customData)\n         |--subchild2a [def Xform] (kind = component)\n         |   `--subgrandchild2a1 [def Cube] (kind = subcomponent)\n         `--subchild2b [def Xform] (active = false, kind = component)\n```\n\n----------------------------------------\n\nTITLE: Normal Import Plugin Container - Python\nDESCRIPTION: PluginContainer implementation using standard import methodology\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_usdview_plugin.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pxr import Tf\nfrom pxr.Usdviewq.plugin import PluginContainer\n\nfrom . import printer\n\n\nclass TutorialPluginContainer(PluginContainer):\n\n    def registerPlugins(self, plugRegistry, usdviewApi):\n\n        self._printMessage = plugRegistry.registerCommandPlugin(\n            \"TutorialPluginContainer.printMessage\",\n            \"Print Message\",\n            printer.printMessage)\n\n    def configureView(self, plugRegistry, plugUIBuilder):\n\n        tutMenu = plugUIBuilder.findOrCreateMenu(\"Tutorial\")\n        tutMenu.addItem(self._printMessage)\n\nTf.Type.Define(TutorialPluginContainer)\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Build for Static Libraries\nDESCRIPTION: CMake command to build USD with static libraries, allowing embedding of necessary libraries but not supporting plugins or Python modules due to symbol definition conflicts.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/BUILDING.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncmake -DBUILD_SHARED_LIBS=OFF ...\n```\n\n----------------------------------------\n\nTITLE: Transforming RectLight Using XformOps in USDA\nDESCRIPTION: Example showing how to transform a RectLight using xformOp attributes for translation and rotation. Demonstrates position and rotation modifications for boundable lights.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdLux/userDoc/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\ndef RectLight \"Light\"\n{\n    ...\n\n    # Position light as needed\n    float3 xformOp:rotateXYZ = (90, 0, 0)\n    double3 xformOp:translate = (0, 0, 2)\n    uniform token[] xformOpOrder = [\"xformOp:translate\", \"xformOp:rotateXYZ\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a USD Clip with a Later Time Sample (usda)\nDESCRIPTION: Defines a USD layer (`clip4.usd`) containing a `Model` prim with a `double` attribute `a` having a single time sample value of `4` at time `4`. This file provides the subsequent data point in a value clip set example for interpolation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/valueClips.md#2025-04-23_snippet_8\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\ndef \"Model\"\n{\n    double a.timeSamples = {\n        4: 4\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </Bad_SubrootRefToDeletedRelocatedChild> Referencing Deleted Child under Relocated Prim\nDESCRIPTION: Displays the composition results for </Bad_SubrootRefToDeletedRelocatedChild>. The prim stack only contains the definition from 'root.sdf'. This likely fails because it attempts to reference a child (/Char/Relocated/ToBeDeletedChild) that is prohibited (deleted) under the relocated prim </Char/Relocated>, resulting in a broken reference.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_RelocateToNone.testenv/baseline/compositionResults_RelocateToNone_usd.txt#2025-04-23_snippet_8\n\nLANGUAGE: usd-composition-output\nCODE:\n```\nResults for composing </Bad_SubrootRefToDeletedRelocatedChild>\n\nPrim Stack:\n    root.sdf             /Bad_SubrootRefToDeletedRelocatedChild\n```\n\n----------------------------------------\n\nTITLE: Composition Result for /ChainedRefOverride\nDESCRIPTION: Displays the composition results for the prim '/ChainedRefOverride'. The prim stack shows a chain involving an override: '/ChainedRefOverride' in 'root.sdf' references '/Ref3' in 'ref3.sdf', which references '/Ref2' in 'ref2.sdf', finally referencing '/A' in 'A.sdf'. This demonstrates how references can be layered and potentially overridden.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ExpressionsInReferences.testenv/baseline/compositionResults_ExpressionsInReferences.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </ChainedRefOverride>\n\nPrim Stack:\n    root.sdf             /ChainedRefOverride\n    ref3.sdf             /Ref3\n    ref2.sdf             /Ref2\n    A.sdf                /A\n\n------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Examining USD Layer and Prim Stack with Variants\nDESCRIPTION: Shows the composition results for a USD Model prim, including layer stack information and variant selections. The scene uses two variant sets: 'modelComplexity' and 'K_hierarchy', both set to 'full'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantWeakerSelection3.testenv/baseline/compositionResults_TrickyVariantWeakerSelection3.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nLayer Stack:\n     root.sdf\n\nPrim Stack:\n    root.sdf             /Model\n    root.sdf             /Model{modelComplexity=full}\n    geo.sdf              /Model\n    geo.sdf              /Model{K_hierarchy=full}\n\nVariant Selections:\n    {K_hierarchy = full}\n    {modelComplexity = full}\n```\n\n----------------------------------------\n\nTITLE: Defining Relocates in USD Layer Metadata\nDESCRIPTION: Demonstrates how to define relocates in USD layer metadata to rename a prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_12\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    relocates = {\n        </mainModelA/modelAChild>: </mainModelA/renamedChild>\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: USD Layer with Multiple References\nDESCRIPTION: Shows the resulting USD file with two override prims, each referencing HelloWorld.usda. The first has its transform reset while the second uses the original transform.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_referencing_layers.rst#2025-04-23_snippet_9\n\nLANGUAGE: usd\nCODE:\n```\n#usda 1.0\n\nover \"refSphere\" (\n    prepend references = @./HelloWorld.usda@\n)\n{\n    uniform token[] xformOpOrder = []\n}\n\nover \"refSphere2\" (\n    prepend references = @./HelloWorld.usda@\n)\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ArResolver Class Interface in C++\nDESCRIPTION: This code snippet defines the new interface for the ArResolver class in Ar 2.0. It includes methods for creating and resolving identifiers, opening assets, managing contexts, and handling cache scopes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_ar2.rst#2025-04-23_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\n/// \\class ArResolver\n///\nclass ArResolver\n{\n    /// Identifiers\n    /// @{\npublic:\n    ArIdentifier CreateIdentifier(\n        const std::string& assetPath) const;\n\n    ArIdentifier CreateIdentifier(\n        const ArIdentifier& anchorIdentifier,\n        const std::string& assetPath) const;\n\n    ArIdentifier CreateIdentifierForNewAsset(\n        const std::string& assetPath) const;\n\n    ArIdentifier CreateIdentifierForNewAsset(\n        const ArIdentifier& anchorIdentifier,\n        const std::string& assetPath) const;\n\nprotected:\n    virtual ArIdentifier _CreateIdentifier(\n        const std::string& assetPath) const = 0;\n\n    virtual ArIdentifier _CreateIdentifier(\n        const ArIdentifier& anchorIdentifier,\n        const std::string& assetPath) const = 0;\n\n    virtual ArIdentifier _CreateIdentifierForNewAsset(\n        const std::string& assetPath) const = 0;\n\n    virtual ArIdentifier _CreateIdentifierForNewAsset(\n        const ArIdentifier& anchorIdentifier,\n        const std::string& assetPath) const = 0;\n    /// @}\n\n    /// Resolve\n    /// @{\npublic:\n    ArResolvedPath Resolve(\n        const ArIdentifier& identifier,\n        ArAssetInfo* assetInfo = nullptr) const;\n\n    /// By default this function is just a convenience wrapper that\n    /// is equivalent to Resolve(CreateIdentifier(assetPath), assetInfo);\n    ArResolvedPath Resolve(\n        const std::string& assetPath,\n        ArAssetInfo* assetInfo = nullptr) const;\n\n    ArResolvedPath ResolveForNewAsset(\n        const ArIdentifier& identifier,\n        ArAssetInfo* assetInfo = nullptr) const;\n\n    /// By default this function is just a convenience wrapper that\n    /// is equivalent to Resolve(CreateIdentifierForNewAsset(assetPath), assetInfo);\n    ArResolvedPath ResolveForNewAsset(\n        const std::string& assetPath,\n        ArAssetInfo* assetInfo = nullptr) const;\n\nprotected:\n    virtual ArResolvedPath _Resolve(\n        const std::string& assetPath\n        ArAssetInfo* assetInfo) const\n    { return _Resolve(CreateIdentifier(assetPath), assetInfo); }\n\n    virtual ArResolvedPath _Resolve(\n        const ArIdentifier& identifier,\n        ArAssetInfo* assetInfo) const = 0;\n\n    virtual ArResolvedPath _ResolveForNewAsset(\n        const std::string& assetPath\n        ArAssetInfo* assetInfo) const\n    { return _ResolveForNewAsset(CreateIdentifierForNewAsset(assetPath), assetInfo); }\n\n    virtual ArResolvedPath _ResolveForNewAsset(\n        const ArIdentifier& identifier,\n        ArAssetInfo* assetInfo) const = 0;\n\n    /// @}\n\n    /// Asset Access and Metadata\n    /// @{\npublic:\n    std::shared_ptr<ArAsset> OpenAsset(\n        const ArResolvedPath& resolvedPath) const;\n\n    // By default returns NULL pointer to indicate that the\n    // resolver has no write capabilities.\n    std::shared_ptr<ArWritableAsset> OpenAssetForReplace(\n        const ArResolvedPath& resolvedPath) const;\n\n    // By default returns NULL pointer to indicate that the\n    // resolver has no write capabilities.\n    std::shared_ptr<ArWritableAsset> OpenAssetForUpdate(\n        const ArResolvedPath& resolvedPath) const;\n\n    std::string GetExtension(\n        const ArResolvedPath& resolvedPath) const;\n\n    VtValue GetModificationTimestamp(\n        const ArResolvedPath& resolvedPath) const;\n\nprotected:\n    virtual std::shared_ptr<ArAsset> _OpenAsset(\n        const ArResolvedPath& resolvedPath) const = 0;\n\n    virtual std::shared_ptr<ArWritableAsset> _OpenAssetForReplace(\n        const ArResolvedPath& resolvedPath) const\n    { return nullptr; }\n\n    virtual std::shared_ptr<ArWritableAsset> _OpenAssetForUpdate(\n        const ArResolvedPath& resolvedPath) const\n    { return nullptr; }\n\n    virtual std::string _GetExtension(\n        const ArResolvedPath& resolvedPath) const = 0;\n\n    virtual VtValue _GetModificationTimestamp(\n        const ArResolvedPath& resolvedPath) const = 0;\n\n    /// @}\n\n    /// Context Management\n    /// @{\npublic:\n    void BindContext(\n        const ArResolverContext& context,\n        VtValue* bindingData);\n\n    void UnbindContext(\n        const ArResolverContext& context,\n        VtValue* bindingData);\n\n    void RefreshContext(\n        const ArResolverContext& context);\n\n    ArResolverContext GetCurrentContext() const;\n\nprotected:\n    virtual void _BindContext(\n        const ArResolverContext& context,\n        VtValue* bindingData) = 0;\n\n    virtual void _UnbindContext(\n        const ArResolverContext& context,\n        VtValue* bindingData) = 0;\n\n    virtual void _RefreshContext(\n        const ArResolverContext& context) = 0;\n\n    virtual ArResolverContext _GetCurrentContext() const = 0;\n\n    // These functions are called by public API on ArResolverContext\n    virtual ArResolverContext _CreateDefaultContext() const = 0;\n    virtual ArResolverContext _CreateContextForAsset(\n        const std::string& assetPath) const = 0;\n    virtual ArResolverContext _CreateContextFromString(\n        const std::string& configStr) const = 0;\n\n    /// @}\n\n    /// Scoped Caches\n    /// @{\npublic:\n    void BeginCacheScope(\n        VtValue* cacheScopeData);\n\n    void EndCacheScope(\n        VtValue* cacheScopeData);\n\nprotected:\n    virtual void BeginCacheScope(\n        VtValue* cacheScopeData) = 0;\n\n    virtual void EndCacheScope(\n        VtValue* cacheScopeData) = 0;\n\n    /// @}\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing a File within a USDZ Package\nDESCRIPTION: Shows the syntax for referencing a file contained within a USDZ package. This format uses square brackets to specify the internal path within the package.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/spec_usdz.rst#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\n@foo.usdz[path/to/file/within/package.usd]@\n```\n\n----------------------------------------\n\nTITLE: Configuring HgiVulkan Test Build\nDESCRIPTION: Sets up the test configuration for HgiVulkan, including test libraries, source files, and test environment settings. Includes image comparison tests and environment variable configurations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hgiVulkan/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_build_test(testHgiVulkan\n    LIBRARIES\n        hgiVulkan\n        hgi\n        hio\n        tf\n    CPPFILES\n        testenv/testHgiVulkan.cpp\n)\npxr_install_test_dir(\n    SRC testenv/testHgiVulkan\n    DEST testHgiVulkan\n)\npxr_register_test(testHgiVulkan\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHgiVulkan\"\n    IMAGE_DIFF_COMPARE\n        graphicsCmdsClear.png\n        srgba.png\n        copyTextureToBuffer.png\n        copyBufferToTexture.png\n    FAIL 1\n    FAIL_PERCENT 0.001\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    ENV\n        HGI_ENABLE_VULKAN=1\n        HGIVULKAN_DEBUG=1\n)\n```\n\n----------------------------------------\n\nTITLE: Extending MyDynamicFileFormat with PcpDynamicFileFormatInterface\nDESCRIPTION: Adds PcpDynamicFileFormatInterface to MyDynamicFileFormat, implementing required and optional methods for dynamic file format functionality.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/dynamicFileFormat.md#2025-04-23_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nclass MyDynamicFileFormat : \n    public SdfFileFormat, public PcpDynamicFileFormatInterface\n{\n    ...\n\npublic:\n    // Required PcpDynamicFileFormatInterface overrides\n    void ComposeFieldsForFileFormatArguments(\n        const std::string& assetPath, \n        const PcpDynamicFileFormatContext& context,\n        FileFormatArguments* args,\n        VtValue *dependencyContextData) const override;\n\n    // Optional overrides\n    bool CanFieldChangeAffectFileFormatArguments(\n        const TfToken& field,\n        const VtValue& oldValue,\n        const VtValue& newValue,\n        const VtValue &dependencyContextData) const override;\n    bool CanAttributeDefaultValueChangeAffectFileFormatArguments(\n        const TfToken &attributeName,\n        const VtValue &oldValue,\n        const VtValue &newValue,\n        const VtValue &dependencyContextData) const override;        \n\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example USD File Using Dynamic File Format\nDESCRIPTION: USD file demonstrating the usage of a dynamic file format. It includes a prim with references and a payload using the custom dynamic file format.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/dynamicFileFormat.md#2025-04-23_snippet_5\n\nLANGUAGE: USD\nCODE:\n```\n#usda 1.0\n\ndef \"Root\" (\n    references = </Params>\n    payload = @./dynamic.mydynamicfile@\n)\n{\n}\n\ndef \"Params\" (\n    dynamicName = \"Foo\"\n    dynamicNumber = 8\n)\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Complete USD Schema Definition Example\nDESCRIPTION: Comprehensive example showing multiple schema definitions including a non-concrete IsA schema (MyBaseCustomPrim), concrete typed schema (MyCustomPrim), and API schemas (MyParamsAPI and GridCrittersAPI). Demonstrates property definitions, inheritance, and API schema configurations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/generatingSchemas.md#2025-04-23_snippet_9\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    \"\"\" This file describes an example schemata used for code generation using \n        usdGenSchema. \n    \"\"\"\n    subLayers = [\n        # This is mainly needed for definition of UsdTyped.\n        @usd/schema.usda@\n    ]\n)\n\nover \"GLOBAL\" (\n    customData = {\n        string libraryName = \"myLib\"\n        string libraryPath = \"componentName/myLib\"\n        dictionary libraryTokens = {\n            dictionary sampleToken = {\n                string doc = \"Documentation for sample token.\"\n            }\n        }\n    }\n) {\n\n}\n\n# Example of a non-concrete IsA schema\n# Note that non-concrete IsA schemas cannot specify a typeName in the class\n# declaration, but they are allowed to provide fallback values for attributes.\nclass \"MyBaseCustomPrim\" (\n    doc = \"\"\"Defines a non-instantiable (non-concrete) typed schema that derives\n             from MyCustomPrim. Derived schema classes can inherit from this \n             schema to add (for e.g.) geometric properties.\"\"\"\n    \n    # IsA schemas should derive from </Typed> or a Schema that derives from\n    # Typed.\n    #\n    # API schemas need not specify inherits. usdGenSchema sets the parent\n    # class for such schemas to UsdSchemaBase.\n    inherits = </Typed>\n    customData = {\n        string className = \"MyBasePrim\"\n    }\n) {\n    # Some base attributes common to all derived schemas\n    uniform double uniformScale = 1.0 (\n        doc = \"A double valued uniform attribute representing scale.\"\n    )\n\n    float3 rotation = (0, 0, 0) (\n        doc = \"A varying 3D vector in floating-pt precision representing rotation.\"\n    )\n\n    double3 translation = (0, 0, 0) (\n        doc = \"A varying double valued 3D vector representing translation.\"\n    )\n}\n\n# Example of a concrete, typed (IsA) schema\nclass MyCustomPrim \"MyCustomPrim\" (\n    doc = \"\"\"Defines a custom typed (IsA) schema prim\"\"\"\n\n    inherits = </MyBaseCustomPrim>\n\n    customData = {\n        string className = \"MyPrim\"\n        customData = {\n            string extraIncludes = \"\"\"\n                #include \"pxr/base/gf/bbox3d.h\"\n                #include \"pxr/usd/usdGeom/primvar.h\" \"\"\"\n        }\n    }\n)  {\n    # Attributes with fallback values.\n    asset filePath = @/path/to/default/file@ (\n        doc = \"\"\"An asset path valued attribute that points to a file on disk.\"\"\"\n    )\n\n    uniform token axis = \"X\" (\n        allowedTokens = [\"X\", \"Y\", \"Z\"]\n        doc = \"\"\"A token valued attribute representing an axis.\"\"\"\n    )\n\n    matrix4d transform = ((1,0,0,0), (0,1,0,0), (0,0,1,0), (0,0,0,1)) (\n        doc = \"\"\"Double-precision transformation matrix, which should encode\n                 the entire local transformation for a prim.\"\"\")\n    )\n\n    # Attributes with no fallback values.\n    point3f[] points (\n        doc = \"\"\"An attribute representing a list of points in 3D space.\"\"\"\n    )\n\n    string[] strArray (\n        doc = \"\"\"A string array valued attribute.\"\"\"\n    )\n\n    string str (\n        doc = \"\"\"An int valued attribute.\"\"\"\n    )\n\n    # Relationships\n    rel target (\n        doc = \"\"\"A relationship called target that could point to another prim\n                or a property\"\"\"\n    )\n}\n\n# Example API schema that provides an interface for manipulating a specific \n# set of attributes on a prim.\n# \n# API schemas can \"declare\" and provide access to properties defined by\n# collections of other IsA and API schemas, gathered into one API for \n# convenience.  They can also (more commonly, in our use, thus far), define\n# their own properties with their own fallbacks.  In this capacity,\n# the convention is to namespace each property with the API's name (camelCased),\n# for easy identification, as well as to help prevent built-in properties from \n# API schemas from unintentionally overriding built-in properties of the IsA \n# schema when applied.  \n# For example...\nclass \"MyParamsAPI\" (\n    inherits = </APISchemaBase>\n    customData = {\n        token apiSchemaType = \"singleApply\"\n\n        # This is an example of specifying typed schemas that this single apply\n        # schema will be automatically applied to.\n        token[] apiSchemaAutoApplyTo = [\"MyCustomPrim\", \n                                        \"OutsidePluginCustomPrim\"]\n\n        # This is an example of specifying typed schemas that this single apply\n        # API can only be applied to. Specifying this means that the generated \n        # MyParamsAPI::CanApply(prim) and prim.CanApplyAPI<MyParamsAPI>()\n        # will only return true if the prim is one of these listed types.\n        token[] apiSchemaCanOnlyApplyTo = [\"MyCustomPrim\", \n                                           \"OutsidePluginCustomPrim\", \n                                           \"AnotherCustomPrim\"]\n    }\n)\n{\n    double myParams:size (\n        customData = {\n            string apiName = \"size\"\n        }\n        doc = \"double specifying the size.\"\n    )\n\n    uniform int myParams:numSamples (\n        customData = {\n            string apiName = \"numSamples\"\n        }\n        doc = \"Uniform int specifying the number of samples.\"\n    )\n\n    double3 myParams:offset = (0, 0, 0) (\n        customData = {\n            string apiName = \"offset\"\n        }\n        doc = \"3D offset.\"\n    )\n    \n    # By default, all properties of IsA and API schemas are considered\n    # \"builtin\", i.e. not \\ref UsdProperty::IsCustom() \"custom\".  However,\n    # one can force a schema property to be considered custom by explicitly\n    # declaring it to be so.\n    custom string info\n}\n\n# Example multiple-apply API that gives an interface to create instances of \n# \"critters\" on a prim.\nclass \"GridCrittersAPI\" (\n    inherits = </APISchemaBase>\n    customData = {\n        token apiSchemaType = \"multipleApply\"\n        token propertyNamespacePrefix  = \"critter\"\n\n        # This is an example of all the ways we can specify how the schema's \n        # generated CanApply and UsdPrim::CanApplyAPI behave for this multiple\n        # apply schema. The following customData specifies that:\n        # 1. GridCrittersAPI::CanApply(prim, instanceName) will return false\n        #    if instanceName is anything but \"insect\" or \"rodent\" because of\n        #    apiSchemaAllowedInstanceNames.\n        # 2. GridCrittersAPI::CanApply(prim, \"insect\") will only return true\n        #    if prim.IsA<MyCustomPrim>() because this is specified in \n        #    apiSchemaInstances\n        # 3. GridCrittersAPI::CanApply(prim, \"rodent\") will only return true\n        #    if prim.IsA<MyCustomPrim>() or prim.IsA<AnotherCustomPrim>() \n        #    because this is specified in apiSchemaCanOnlyApplyTo and there is\n        #    no override in apiSchemaInstances\n        token[] apiSchemaAllowedInstanceNames = [\"insect\", \"rodent\"]\n        token[] apiSchemaCanOnlyApplyTo = [\"MyCustomPrim\", \n                                           \"AnotherCustomPrim\"]\n        dictionary apiSchemaInstances = {\n            dictionary insect = {\n                token[] apiSchemaCanOnlyApplyTo = [\"MyCustomPrim\"]\n            }\n        }\n    }\n)\n{\n    # this will be instantiated as \"critter:<instance name>:xform\"\n    matrix4d xform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )\n    # this will be instantiated as \"critter:<instance name>:color\"\n    color4f color\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Attribute Values Over Time with UsdAttribute::Get in C++\nDESCRIPTION: The primary C++ method for resolving the value of a UsdAttribute. Its behavior is unique as it's a function of time (affected by layer offsets), supports interpolation between samples, and considers three value sources per site (clips, timeSamples, default value).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_61\n\nLANGUAGE: cpp\nCODE:\n```\nUsdAttribute::Get\n```\n\n----------------------------------------\n\nTITLE: Defining Spline Configuration in Python\nDESCRIPTION: This snippet defines the spline configuration, including the type (non-hermite), extrapolation methods, and knot points with their respective properties such as time, value, slopes, and lengths.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/InitiallyRegressiveContain_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  156.000000: 0.000000, Curve, preSlope 0.000000, postSlope -1.300000, preLen 0.000000, postLen 11.000000, auto false / false\n  167.000000: 28.800000, Curve, preSlope 0.400000, postSlope 0.000000, preLen 11.000000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Fetching latest changes from Pixar's OpenUSD repository\nDESCRIPTION: Git command to fetch the latest changes from Pixar's OpenUSD repository. This ensures your local repository is up-to-date with the upstream repository before making changes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/contributing_to_usd.rst#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Typed Schema in Python\nDESCRIPTION: This Python code shows how to define a new mesh using a typed schema (UsdGeomMesh) and then set an attribute on it.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmesh = UsdGeom.Mesh.Define(stage, path)\nmesh.CreateSubdivisionSchemeAttr().Set(UsdGeom.Tokens.bilinear)\n```\n\n----------------------------------------\n\nTITLE: Building User Documentation with Sphinx\nDESCRIPTION: Command for building USD user documentation to a specified output directory using Sphinx.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsphinx-build . /tmp/usddocs\n```\n\n----------------------------------------\n\nTITLE: Calculating Light Scalar based on Cone Angle\nDESCRIPTION: Mathematical formula for determining if light emission is cut off based on the cone angle setting.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/ShapingAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: math\nCODE:\n```\n\\begin{aligned} \n&𝛳_{offAxis} = acos(lightAxis • emissionDir) \\\\\n&𝛳_{cutoff} = toRadians({coneAngle}) \\\\\n&𝛳_{offAxis} > 𝛳_{cutoff} ⟹ L_{Scalar} = 0\n\\end{aligned}\n```\n\n----------------------------------------\n\nTITLE: Applying Semantic Labels to a USD Xform\nDESCRIPTION: This snippet demonstrates how to apply semantic labels to an Xform prim in USD. It uses the SemanticsLabelsAPI schema to add category labels to an OfficeBookshelf prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdSemantics/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: USD\nCODE:\n```\ndef Xform \"OfficeBookshelf\" (apiSchemas = [\"SemanticsLabelsAPI:category\"])\n{\n    token[] semantics:labels:category = [\"furniture\", \"bookcase\", \"bookshelf\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Normal Specification for Mesh\nDESCRIPTION: Demonstrates how to explicitly specify vertex normals for a polygonal mesh using primvars.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_5\n\nLANGUAGE: usda\nCODE:\n```\ndef Mesh \"Mesh\" \n{\n    float3[] extent = [(-430, -145, 0), (430, 300, -30)]\n    int[] faceVertexCounts = [4]\n    int[] faceVertexIndices = [0, 1, 2, 3]\n    point3f[] points = [(-430, -145, 0), (430, -145, 0), (430, 145, 0), (-430, 145, 0)]\n\n    # Make polygonal and not subdiv mesh\n    uniform token subdivisionScheme = \"none\"\n\n    normal3f[] primvars:normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (\n        interpolation = \"vertex\"\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: USD Path Patterns with Implied Wildcards\nDESCRIPTION: Examples showing implicit wildcard patterns with predicate functions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_14\n\nLANGUAGE: usd\nCODE:\n```\n/primA/{abstract} # equivalent to \"/primA/*{abstract}\", all objects under primA that are abstract\n{abstract}        # equivalent to \"//*{abstract}\", all objects in the scene that are abstract\n```\n\n----------------------------------------\n\nTITLE: Shot Reference Example with Variable Overrides\nDESCRIPTION: Shows how to override expression variables when referencing assets.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/variable_expressions.rst#2025-04-23_snippet_14\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    expressionVariables = {\n        string COLOR_GROUP_1 = \"rainbow\"\n        string COLOR_GROUP_2 = \"monochrome\"\n    }\n)\n\ndef \"Crowd\" (references = @Crowd.usd@</Crowd>)\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Building USD for iOS\nDESCRIPTION: Command to cross-compile USD for iOS with monolithic build configuration.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n> python OpenUSD/build_scripts/build_usd.py --build-target iOS --build-monolithic /path/to/my_usd_install_dir\n```\n\n----------------------------------------\n\nTITLE: Referencing UsdStage C++ Class in Instancing Context\nDESCRIPTION: Brief reference to the UsdStage C++ class in the context of discussing how material binding information is handled in USD instancing. The code shows how properties on prototype root prims are not composed.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdshade.rst#2025-04-23_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nUsdStage\n```\n\n----------------------------------------\n\nTITLE: Defining Mesh with faceVarying Interpolation in USD\nDESCRIPTION: This snippet demonstrates how to define a mesh with faceVarying interpolation for a displayColor primvar. It specifies different colors for each face-vertex, allowing unique interpolation across faces.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/primvars.rst#2025-04-23_snippet_5\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n)\n\ndef Mesh \"faceVarying\"\n{\n    float3[] extent = [(-1, 0, 0), (1, 1, 0)]\n    point3f[] points = [(-1, 0, 0), (-1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 1, 0), (1, 0, 0)]\n    int[] faceVertexCounts = [4, 4]\n    int[] faceVertexIndices = [3, 2, 1, 0, 5, 4, 2, 3]\n    \n    color3f[] primvars:displayColor = [(0,0,1), (0,0,0.75), (0.75,0,0), (1,0,0), \n                                       (0,0,1), (0,0,0.75), (0.75,0,0), (1,0,0)] (\n        interpolation = \"faceVarying\"\n    )\n    \n    double3 xformOp:translate = (0, 0, -10)\n    uniform token[] xformOpOrder = [\"xformOp:translate\"]  \n}\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </Root/_Y> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </Root/_Y>. The prim stack involves /_X/_Y from 'root.sdf' and /Ref from 'ref.sdf' (likely via a reference). The resolved child prim name is 'C'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Root/_Y>\n\nPrim Stack:\n    root.sdf             /_X/_Y\n    ref.sdf              /Ref\n\nChild names:\n     ['C']\n```\n\n----------------------------------------\n\nTITLE: Installing OpenUSD Example Files with CMake\nDESCRIPTION: CMake installation command that copies example files (HelloWorld.usda, RefExample.usda, and traversingStage.py) to the specified PXR installation subdirectory. These files demonstrate basic USD functionality and stage traversal.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/tutorials/traversingStage/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n    FILES\n        HelloWorld.usda \n        RefExample.usda \n        traversingStage.py \n    DESTINATION\n        ${PXR_INSTALL_SUBDIR}/traversingStage\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Distance and Falloff in UsdLux\nDESCRIPTION: This example demonstrates shadow distance and falloff configuration for DistantLights. It shows two lights with different falloff settings: the first with falloff=0 for hard shadows, and the second with falloff=1.5 for softer shadows. The scene includes two spheres and a plane to demonstrate the shadow effects.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdLux/userDoc/overview.md#2025-04-23_snippet_11\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    upAxis = \"Y\"\n)\n\ndef Scope \"Lights\"\n{\n    def DistantLight \"Light1\"\n    (\n        prepend apiSchemas = [\"ShadowAPI\"]\n    )\n    {\n        uniform bool collection:shadowLink:includeRoot = 0\n        rel collection:shadowLink:includes = [\n            </TestSpheres/Sphere1>\n        ]        \n        float inputs:intensity = 10000\n\n        float inputs:shadow:distance = -1 \n        # No falloff zone, resulting in hard shadows\n        float inputs:shadow:falloff = 0.0\n\n        float3 xformOp:rotateXYZ = (25, 0, 0)\n        uniform token[] xformOpOrder = [\"xformOp:rotateXYZ\"]        \n    }\n\n    def DistantLight \"Light2\"\n    (\n        prepend apiSchemas = [\"ShadowAPI\"]\n    )\n    {\n        uniform bool collection:shadowLink:includeRoot = 0\n        rel collection:shadowLink:includes = [\n            </TestSpheres/Sphere2>\n        ]        \n        float inputs:intensity = 10000\n\n        float inputs:shadow:distance = 4.5 \n        float inputs:shadow:falloff = 1.5\n\n        float3 xformOp:rotateXYZ = (25, 0, 0)\n        uniform token[] xformOpOrder = [\"xformOp:rotateXYZ\"]                \n    }\n}\n\ndef Xform \"TestSpheres\"\n{\n    def Sphere \"Sphere1\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (-2, 0, -8)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Sphere \"Sphere2\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (2, 0, -8)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Plane \"Plane\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double length = 20\n        double width = 20\n        double3 xformOp:translate = (0, 0, -12)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }    \n}\n```\n\n----------------------------------------\n\nTITLE: Sampling Spline Data Points (Text)\nDESCRIPTION: This snippet presents a list of time-value pairs, representing sampled data points evaluated from the spline defined in the accompanying snippets. The data covers the range from slightly before the first knot to slightly after the last knot, demonstrating the Held extrapolation behavior. This sampled data is likely used for plotting, validation, or comparison purposes in testing.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PostRegressiveLimitActive_TsTestBaseline.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n-0.200000 0.000000\n0.000000 0.000000\n0.004975 0.000013\n0.009950 0.000052\n0.014925 0.000119\n0.019900 0.000213\n0.024876 0.000335\n0.029851 0.000487\n0.034826 0.000668\n0.039801 0.000880\n0.044776 0.001124\n0.049751 0.001400\n0.054726 0.001708\n0.059701 0.002051\n0.064677 0.002429\n0.069652 0.002843\n0.074627 0.003294\n0.079602 0.003783\n0.084577 0.004311\n0.089552 0.004880\n0.094527 0.005491\n0.099502 0.006144\n0.104478 0.006842\n0.109453 0.007586\n0.114428 0.008377\n0.119403 0.009218\n0.124378 0.010109\n0.129353 0.011053\n0.134328 0.012051\n0.139303 0.013106\n0.144279 0.014219\n0.149254 0.015394\n0.154229 0.016632\n0.159204 0.017936\n0.164179 0.019308\n0.169154 0.020753\n0.174129 0.022272\n0.179104 0.023869\n0.184080 0.025548\n0.189055 0.027313\n0.194030 0.029168\n0.199005 0.031117\n0.203980 0.033166\n0.208955 0.035319\n0.213930 0.037583\n0.218905 0.039964\n0.223881 0.042469\n0.228856 0.045104\n0.233831 0.047880\n0.238806 0.050805\n0.243781 0.053888\n0.248756 0.057143\n0.253731 0.060581\n0.258706 0.064217\n0.263682 0.068067\n0.268657 0.072150\n0.273632 0.076487\n0.278607 0.081102\n0.283582 0.086024\n0.288557 0.091286\n0.293532 0.096928\n0.298507 0.102997\n0.303483 0.109551\n0.308458 0.116660\n0.313433 0.124415\n0.318408 0.132931\n0.323383 0.142358\n0.328358 0.152905\n0.333333 0.164866\n0.338308 0.178689\n0.343284 0.195102\n0.348259 0.215422\n0.353234 0.241359\n0.358209 0.281856\n0.363184 0.514847\n0.368159 0.599200\n0.373134 0.637827\n0.378109 0.630313\n0.383085 0.670340\n0.388060 0.696844\n0.393035 0.716471\n0.398010 0.732272\n0.402985 0.745711\n0.407960 0.757542\n0.412935 0.768193\n0.417910 0.777925\n0.422886 0.786911\n0.427861 0.795271\n0.432836 0.803093\n0.437811 0.810447\n0.442786 0.817387\n0.447761 0.823955\n0.452736 0.830189\n0.457711 0.836119\n0.462687 0.841772\n0.467662 0.847170\n0.472637 0.852334\n0.477612 0.857279\n0.482587 0.862023\n0.487562 0.866578\n0.492537 0.870956\n0.497512 0.875170\n0.502488 0.879228\n0.507463 0.883140\n0.512438 0.886914\n0.517413 0.890557\n0.522388 0.894076\n0.527363 0.897478\n0.532338 0.900768\n0.537313 0.903951\n0.542289 0.907033\n0.547264 0.910018\n0.552239 0.912911\n0.557214 0.915715\n0.562189 0.918434\n0.567164 0.921071\n0.572139 0.923630\n0.577114 0.926113\n0.582090 0.928525\n0.587065 0.930866\n0.592040 0.933141\n0.597015 0.935350\n0.601990 0.937497\n0.606965 0.939584\n0.611940 0.941611\n0.616915 0.943583\n0.621891 0.945500\n0.626866 0.947363\n0.631841 0.949176\n0.636816 0.950938\n0.641791 0.952652\n0.646766 0.954319\n0.651741 0.955940\n0.656716 0.957517\n0.661692 0.959051\n0.666667 0.960543\n0.671642 0.961995\n0.676617 0.963406\n0.681592 0.964779\n0.686567 0.966113\n0.691542 0.967412\n0.696517 0.968674\n0.701493 0.969901\n0.706468 0.971094\n0.711443 0.972254\n0.716418 0.973381\n0.721393 0.974476\n0.726368 0.975540\n0.731343 0.976574\n0.736318 0.977578\n0.741294 0.978553\n0.746269 0.979499\n0.751244 0.980418\n0.756219 0.981309\n0.761194 0.982173\n0.766169 0.983012\n0.771144 0.983824\n0.776119 0.984612\n0.781095 0.985374\n0.786070 0.986113\n0.791045 0.986828\n0.796020 0.987519\n0.800995 0.988188\n0.805970 0.988835\n0.810945 0.989459\n0.815920 0.990062\n0.820896 0.990643\n0.825871 0.991204\n0.830846 0.991744\n0.835821 0.992264\n0.840796 0.992765\n0.845771 0.993246\n0.850746 0.993707\n0.855721 0.994150\n0.860697 0.994575\n0.865672 0.994981\n0.870647 0.995370\n0.875622 0.995741\n0.880597 0.996094\n0.885572 0.996431\n0.890547 0.996750\n0.895522 0.997054\n0.900498 0.997340\n0.905473 0.997611\n0.910448 0.997866\n0.915423 0.998106\n0.920398 0.998330\n0.925373 0.998539\n0.930348 0.998733\n0.935323 0.998913\n0.940299 0.999078\n0.945274 0.999229\n0.950249 0.999366\n0.955224 0.999488\n0.960199 0.999598\n0.965174 0.999693\n0.970149 0.999776\n0.975124 0.999845\n0.980100 0.999901\n0.985075 0.999945\n1.000000 1.000000\n1.200000 1.000000\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic USD Scene Hierarchy\nDESCRIPTION: This snippet outlines a simple scene hierarchy, likely representing USD structure. It establishes a root 'Scope' of kind 'assembly', containing a 'child1' Xform (transform) of kind 'group'. This group includes two Cube primitives, 'subchild1a' and 'subchild1b'. This structure demonstrates basic composition, parent-child relationships, and the use of 'kind' metadata for asset classification in USD.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdtree/testenv/testUsdTreePayload/baseline/output_masked.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\n/\n `--root [def Scope] (kind = assembly)\n     `--child1 [def Xform] (kind = group)\n         |--subchild1a [def Cube]\n         `--subchild1b [def Cube]\n```\n\n----------------------------------------\n\nTITLE: Adding Shading Variants to USD Asset with Python\nDESCRIPTION: Executes a Python script to add shading variants to the Ball asset.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_end_to_end.rst#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\npython tutorial_scripts/add_shadingVariants.py\n```\n\n----------------------------------------\n\nTITLE: Defining ArWritableAsset Class Interface in C++\nDESCRIPTION: This code snippet defines the new interface for the ArWritableAsset class in Ar 2.0. It includes a virtual destructor and a pure virtual Write method for writing data to the asset.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_ar2.rst#2025-04-23_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nclass ArWritableAsset\n{\npublic:\n    virtual ~ArWritableAsset();\n    virtual size_t Write(const void* buffer, size_t count, size_t offset) = 0;\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting Custom vs. Built-in Properties - USD Namespace Editor Python\nDESCRIPTION: Illustrates using the Namespace Editor's DeletePropertyAtPath method to attempt deletion of a custom attribute (allowed) versus a built-in schema property (prohibited). Demonstrates enforcement of schema editability constraints. Requires the USD API and a NamespaceEditor instance connected to a stage containing the target prim. Input: property paths as strings; Output: deletion of allowed property or an error when schema attributes are targeted.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\neditor.DeletePropertyAtPath(\"/testSphere/customProp\")  # This is allowed\neditor.DeletePropertyAtPath(\"/testSphere/radius\")  # This is not allowed and will cause an error\n```\n\n----------------------------------------\n\nTITLE: Building Hydra Storm Renderer and Plugins in CMake\nDESCRIPTION: This CMake script adds the Storm renderer (hdSt), extended Hydra components (hdx), and plugin system to the build process. These are core components of the Hydra rendering framework.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(hdSt)\nadd_subdirectory(hdx)\nadd_subdirectory(plugin)\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for /Permissions/PublicChild\nDESCRIPTION: Displays the composition results for the child prim path `/Permissions/PublicChild`. It shows the prim stack indicating that its final definition comes solely from the `root.sdf` layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyListEditedTargetPaths.testenv/baseline/compositionResults_TrickyListEditedTargetPaths.txt#2025-04-23_snippet_4\n\nLANGUAGE: usd\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Permissions/PublicChild>\n\nPrim Stack:\n    root.sdf             /Permissions/PublicChild\n```\n\n----------------------------------------\n\nTITLE: Accessing Light Attributes with LightAPI in C++ and Python\nDESCRIPTION: Demonstrates how to access light attributes using the new LightAPI approach, showing both direct attribute access for specific light types and the use of LightAPI for common attributes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_geometry_lights.rst#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nrectLight.GetWidthAttr()\n```\n\nLANGUAGE: python\nCODE:\n```\nUsdLux.LightAPI(rectLight).GetIntensityAttr()\n```\n\n----------------------------------------\n\nTITLE: Defining OpenUSD Scene Graph Hierarchy\nDESCRIPTION: This snippet outlines the structure of an OpenUSD scene graph, showing the hierarchy of prims (primitives), their types, and some attributes. It demonstrates the use of 'def' and 'over' specifiers, as well as attribute definitions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdtree/testenv/testUsdTree/baseline/output_attributes.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\n/\n `--root [def]\n     |--child1 [def Xform]\n     |   | `--(upAxis)\n     |   |--subchild1a [def]\n     |   |     :--.foo\n     |   |     `--.hello\n     |   `--subchild1b [def]\n     |--child2 [def]\n     |   | `--.foo\n     |   |--subchild2a [def]\n     |   |   `--subgrandchild2a1 [def]\n     |   `--subchild2b [def]\n     `--child3 [over] (active = true)\n           `--.whatisthis\n```\n\n----------------------------------------\n\nTITLE: Composing Prim /PayloadRoot in USD\nDESCRIPTION: Shows the composition results for the prim path `/PayloadRoot`. It details the prim stack involving a payload arc (`A.sdf`) with a sublayer (`B.sdf`). The time offsets show contributions from the root and the payload arc, including a scale factor.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicTimeOffset.testenv/baseline/compositionResults_BasicTimeOffset.txt#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </PayloadRoot>\n\nPrim Stack:\n    root.sdf             /PayloadRoot\n    A.sdf                /Model\n    B.sdf                /Model\n\nTime Offsets:\n    root.sdf             /PayloadRoot    root       (offset=0.00, scale=1.00)\n    A.sdf                /Model          payload    (offset=10.00, scale=2.00)\n        B.sdf                            sublayer   (offset=20.00, scale=1.00)\n\nChild names:\n     ['Anim', 'Frame']\n```\n\n----------------------------------------\n\nTITLE: Composition Result for /OverriddenVariantSelectionInReference in USD\nDESCRIPTION: Shows the composition for '/OverriddenVariantSelectionInReference'. The prim stack involves 'root.sdf', 'override_ref.sdf' (which likely overrides or references '/Ref'), and 'ref.sdf' (defining '/Ref'). The final resolved variant selection '{v = x_sel}' is applied to '/Ref', potentially overriding a selection specified elsewhere in the composition arc.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ExpressionsInVariantSelections.testenv/baseline/compositionResults_ExpressionsInVariantSelections.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </OverriddenVariantSelectionInReference>\n\nPrim Stack:\n    root.sdf             /OverriddenVariantSelectionInReference\n    override_ref.sdf     /OverrideRef\n    ref.sdf              /Ref\n    ref.sdf              /Ref{v=x_sel}\n\nVariant Selections:\n    {v = x_sel}\n```\n\n----------------------------------------\n\nTITLE: Composing Prim /MultiRef in USD\nDESCRIPTION: Shows the composition results for the prim path `/MultiRef`, which involves multiple references (`ref.sdf`/`ref_sub.sdf` and `B.sdf`). The output details the final prim stack and the accumulated time offsets from the root and both reference arcs.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicTimeOffset.testenv/baseline/compositionResults_BasicTimeOffset.txt#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </MultiRef>\n\nPrim Stack:\n    root.sdf             /MultiRef\n    ref_sub.sdf          /Ref2\n    B.sdf                /Model\n\nTime Offsets:\n    root.sdf             /MultiRef       root       (offset=0.00, scale=1.00)\n    ref.sdf              /Ref2           reference  (offset=10.00, scale=1.00)\n        ref_sub.sdf                      sublayer   (offset=20.00, scale=1.00)\n    B.sdf                /Model          reference  (offset=30.00, scale=1.00)\n\nChild names:\n     ['Anim', 'Frame']\n```\n\n----------------------------------------\n\nTITLE: Referencing a Nested File in Multiple USDZ Packages\nDESCRIPTION: Demonstrates the syntax for accessing a file within a nested USDZ package structure, where one USDZ file is embedded within another.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/spec_usdz.rst#2025-04-23_snippet_1\n\nLANGUAGE: usda\nCODE:\n```\n@set.usdz[areas/shire.usdz[architecture/BilboHouse/Table.usd]]@\n```\n\n----------------------------------------\n\nTITLE: Defining Applied API Schema in USD\nDESCRIPTION: This USDA snippet demonstrates a simple API schema that provides an interface for manipulating three custom double-valued attributes. API schemas must derive from *APISchemaBase*.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_generating_new_schema.rst#2025-04-23_snippet_4\n\nLANGUAGE: usda\nCODE:\n```\n# API schemas only provide an interface to the prim's qualities.\n# They are not allowed to specify a typeName.\nclass \"ParamsAPI\" (\n    # IsA schemas should derive from </APISchemaBase>, which is defined in \n    # the sublayer usd/schema.usda.\n    inherits = </APISchemaBase>\n    customData = {\n        token apiSchemaType = \"singleApply\"\n    }\n)\n{\n    double params:mass (\n        # Informs schema generator to create GetMassAttr() instead of \n        # GetParamsMassAttr() method\n        customData = {\n            string apiName = \"mass\"\n        }\n        doc = \"Double value denoting mass\"\n    )\n    double params:velocity (\n        customData = {\n            string apiName = \"velocity\"\n        }\n        doc = \"Double value denoting velocity\"\n    )\n    double params:volume (\n        customData = {\n            string apiName = \"volume\"\n        }\n        doc = \"Double value denoting volume\"\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting USD Sphere Display Color in Python\nDESCRIPTION: Demonstrates how to set the display color of a sphere using the UsdGeom schema API.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_inspect_and_author_props.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from pxr import UsdGeom\n>>> sphereSchema = UsdGeom.Sphere(sphere)\n>>> color = sphereSchema.GetDisplayColorAttr()\n>>> color.Set([(0,0,1)])\nTrue\n```\n\n----------------------------------------\n\nTITLE: Effective Usage of UsdAttribute::Get() in C++ for Animation\nDESCRIPTION: Discusses the C++ method `UsdAttribute::Get()`. It highlights that using the default time code (`UsdTimeCode::Default()`) is often incorrect for animated attributes, as it only consults the default value, ignoring time samples.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_64\n\nLANGUAGE: cpp\nCODE:\n```\nUsdAttribute::Get()\n```\n\n----------------------------------------\n\nTITLE: Defining Regressive Pre-Gradient Bezier Spline\nDESCRIPTION: Specifies a regressive pre-gradient Bezier spline with two knots. The spline uses held extrapolation and has different pre and post tangent characteristics at the second knot.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\nSpline: RegressivePreG\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 2\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 3.5\n  pre-tan slope 0.57\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Defining 3D Sphere Points and Topology\nDESCRIPTION: Coordinate data defining points on a sphere surface with topology information. Points are defined in 3D space with x,y,z coordinates.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/geomUtil/testenv/testMeshGenerators/baseline/generatedMeshes_closed.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n[(0, 0, -1), (0.30901697, 0, -0.95105654), (0.24999999, 0.18163562, -0.95105654), ..., (0, 0, 1)]\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty USD Asset with Python\nDESCRIPTION: Uses a custom script to create an empty USD asset named 'Ball' with a shading variant layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_end_to_end.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npython scripts/create_asset.py Ball --shadingVariantLayer -o models/Ball\n```\n\n----------------------------------------\n\nTITLE: Configuring Colored Shadows with ShadowAPI in USD Scene - usda\nDESCRIPTION: Shows how to enable and colorize shadows for a SphereLight by applying the ShadowAPI schema in a USD ASCII setup. Dependencies include the ShadowAPI (applied via apiSchemas field), and standard USD conventions for grouping geometric primitives. Key inputs are the shadow color (set to blue as (0, 0, 1)), exposure, and transformation. Geometry is provided as distinct sphere and plane objects for shadow casting/receiving. Expected output is a scene in which the light casts blue-tinted shadows. Requires rendering support for ShadowAPI and color ramping; non-physical shadow tints enable artistic effects beyond real-world physics.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdLux/userDoc/overview.md#2025-04-23_snippet_10\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    upAxis = \"Y\"\n)\n\ndef Scope \"Lights\"\n{\n    def SphereLight \"Light1\"\n    (\n        prepend apiSchemas = [\"ShadowAPI\"]\n    )\n    {\n        color3f inputs:shadow:color = (0, 0, 1)\n\n        float inputs:exposure = 7\n        double3 xformOp:translate = (0, 4, -8)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n}\n\ndef Xform \"TestGeom\"\n{\n    def Sphere \"Sphere\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (0, 0, -13)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Plane \"Plane\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double length = 20\n        double width = 20\n        double3 xformOp:translate = (0, 0, -14)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Resolved Metadata with UsdObject::GetMetadata in C++\nDESCRIPTION: The C++ method used to retrieve resolved metadata values for a UsdObject (prim or property). The fundamental resolution rule is that the strongest opinion across all contributing layers wins, though some metadata types have special rules.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_56\n\nLANGUAGE: cpp\nCODE:\n```\nUsdObject::GetMetadata\n```\n\n----------------------------------------\n\nTITLE: Extracted Sampled (x, y) Points - Text\nDESCRIPTION: This snippet lists ordered (x, y) coordinate pairs generated from sampling a parametric curve or function, used as output for test cases in animation or numerical analysis. Inputs are test case configurations (not shown), and outputs are flat lists of double-precision floats, commonly for plotting, further processing, or validation. There are no explicit dependencies, as the snippet is simple text, but it assumes upstream code to generate these numbers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n(110.52583312988281, 15.587150573730469)\n(110.6865234375, 15.56494140625)\n(110.9898681640625, 15.24114990234375)\n(111.2734375, 14.59765625)\n(111.8017578125, 12.60498046875)\n(112.3125, 10.09375)\n(112.8466796875, 7.57080078125)\n(113.4453125, 5.54296875)\n(113.7816162109375, 4.87310791015625)\n(114.1494140625, 4.51708984375)\n(114.34672546386719, 4.476570129394531)\n(114.5538330078125, 4.53826904296875)\n(115, 5)\n(115.8505859375, 6.12744140625)\n(116.5546875, 6.80078125)\n(117.1533203125, 7.17529296875)\n(117.6875, 7.40625)\n(118.1982421875, 7.64892578125)\n(118.7265625, 8.05859375)\n(119.3134765625, 8.79052734375)\n(120, 10)\n(120.3582763671875, 10.50567626953125)\n(120.52583312988281, 10.587150573730469)\n(120.6865234375, 10.56494140625)\n(120.9898681640625, 10.24114990234375)\n(121.2734375, 9.59765625)\n(121.8017578125, 7.60498046875)\n(122.3125, 5.09375)\n(122.8466796875, 2.57080078125)\n(123.4453125, 0.54296875)\n(123.7816162109375, -0.12689208984375)\n(124.1494140625, -0.48291015625)\n(124.34672546386719, -0.5234298706054688)\n(124.5538330078125, -0.46173095703125)\n(125, 0)\n(125.8505859375, 1.12744140625)\n(126.5546875, 1.80078125)\n(127.1533203125, 2.17529296875)\n(127.6875, 2.40625)\n(128.1982421875, 2.64892578125)\n(128.7265625, 3.05859375)\n(129.3134765625, 3.79052734375)\n(130, 5)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Defining the hdStorm Plugin in CMake\nDESCRIPTION: This CMake script defines the build configuration for the 'hdStorm' plugin. It first sets the project prefix and package name. It then checks the `PXR_BUILD_GPU_SUPPORT` variable; if it's OFF, the script skips the build for this package. Based on OpenSubdiv capabilities (`OPENSUBDIV_HAS_GLSL_TRANSFORM_FEEDBACK`, `OPENSUBDIV_HAS_GLSL_COMPUTE`), it adds corresponding preprocessor definitions. Finally, it uses the custom `pxr_plugin` function to define the 'hdStorm' target, linking required libraries (USD core libs, OpenSubdiv, TBB), specifying include directories, declaring public classes, resource files (`plugInfo.json`), and Doxygen documentation files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/plugin/hdStorm/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE hdStorm)\n\nif (NOT ${PXR_BUILD_GPU_SUPPORT})\n    message(STATUS\n        \"Skipping ${PXR_PACKAGE} because PXR_BUILD_GPU_SUPPORT is OFF\")\n    return()\nendif()\n\nset(optionalPublicClasses \"\")\n\nif (OPENSUBDIV_HAS_GLSL_TRANSFORM_FEEDBACK)\n    add_definitions(-DOPENSUBDIV_HAS_GLSL_TRANSFORM_FEEDBACK)\nendif()\nif (OPENSUBDIV_HAS_GLSL_COMPUTE)\n    add_definitions(-DOPENSUBDIV_HAS_GLSL_COMPUTE)\nendif()\n\npxr_plugin(hdStorm\n    LIBRARIES\n        plug\n        tf\n        trace\n        vt\n        work\n        hd\n        hdSt\n        ${OPENSUBDIV_LIBRARIES}\n        ${TBB_tbb_LIBRARY}\n\n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n        ${OPENSUBDIV_INCLUDE_DIR}\n\n    PUBLIC_CLASSES\n        rendererPlugin\n\n    RESOURCE_FILES\n        plugInfo.json\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </RearLegRig/Legs/RightRig> in USD\nDESCRIPTION: Displays the composition results for the prim path </RearLegRig/Legs/RightRig> from 'root.sdf'. It details the prim stack, indicating contributions from multiple source prims (/RearLegRig/Legs/RightRig and /SymRig). It also lists prohibited child names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyMultipleRelocations4.testenv/baseline/compositionResults_TrickyMultipleRelocations4.txt#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </RearLegRig/Legs/RightRig>\n\nPrim Stack:\n    root.sdf             /RearLegRig/Legs/RightRig\n    root.sdf             /SymRig\n\nProhibited child names:\n     ['Leg_bone']\n```\n\n----------------------------------------\n\nTITLE: Advanced Material Binding with Strength Modifiers in USD\nDESCRIPTION: Shows how to use bindMaterialAs metadata to control binding strength, allowing set-level material assignments to override component-level bindings when needed.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdshade.rst#2025-04-23_snippet_2\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\nover \"Office_set\"\n{\n    def Scope \"Materials\"\n    {\n        def Material \"Default\" { ... }\n        def Material \"PinkPearl\" { ... }\n        def Material \"YellowPaint\" { ... }\n\n\t\t...\n    }\n\n    ...\n\n    over \"Desk_Assembly\"\n    {\n\t\trel material:binding = </Office_set/Materials/Default>\n\t\trel material:binding:collection:Erasers = [</Office_set/Materials/PinkPearl>,\n                                                  </Office_set/Desk_Assembly/Cup_grp.collection:Erasers>] (\n\t\t\tbindMaterialAs = \"strongerThanDescendants\" \n\t\t)\n\t\trel material:binding:collection:Shafts =  [</Office_set/Materials/YellowPaint>,\n                                                  </Office_set/Desk_Assembly/Cup_grp.collection:Shafts> ] (\n\t\t\tbindMaterialAs = \"strongerThanDescendants\" \n\t\t)\n\n      # No other changes required to collections or references...\n    }\n...}\n```\n\n----------------------------------------\n\nTITLE: ArResolverContext Usage Example\nDESCRIPTION: Demonstrates how to use ArResolverContext with multiple resolvers, combining HTTP credentials and search paths.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_ar2.rst#2025-04-23_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nArResolverContext ctx({\n    HTTPResolverContext(\"user\", \"12345\"),\n    ArDefaultResolverContext({\"/search/dir/1\", \"/search/dir/2\"})\n});\n\nUsdStage newStage = UsdStage::Open(..., ctx);\n```\n\n----------------------------------------\n\nTITLE: Optimizing Attribute Queries with UsdAttributeQuery in C++\nDESCRIPTION: An optional C++ utility class (`UsdAttributeQuery`) that clients can construct and retain. It caches information related to attribute value resolution, making repeated value queries for the same attribute potentially faster.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_54\n\nLANGUAGE: cpp\nCODE:\n```\nUsdAttributeQuery\n```\n\n----------------------------------------\n\nTITLE: Element-wise Resolution of Dictionary Metadata Example (C++)\nDESCRIPTION: Illustrates element-wise dictionary resolution in C++. An opinion for `customData[\"keyOne\"]` on a stronger layer will compose with an opinion for `customData[\"keyTwo\"]` on a weaker layer into a single dictionary.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_58\n\nLANGUAGE: cpp\nCODE:\n```\ncustomData[\"keyOne\"]\n```\n\n----------------------------------------\n\nTITLE: Running sdffilter (Bash)\nDESCRIPTION: Example usage of the sdffilter command-line tool, which provides information about Sdf Layers or specified parts of a layer in various formats.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toolset.rst#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsdffilter myLayer.usd --brief\n```\n\n----------------------------------------\n\nTITLE: USD Asset Definition Example\nDESCRIPTION: Definition of a basic USD asset file that contains a model with relationship targets. This example shows a simple model containing a cube and referring to both a cube and sphere via a relationship.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_28\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    defaultPrim = \"MyModel\"\n)\n\ndef Xform \"MyModel\"\n{\n    rel gprims = [ </MyModel/Cube>, </MyModel/Sphere> ]\n\n\n    def Cube \"Cube\"\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building USD for visionOS\nDESCRIPTION: Command to cross-compile USD for visionOS with monolithic build configuration.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/README.md#2025-04-23_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n> python OpenUSD/build_scripts/build_usd.py --build-target visionOS --build-monolithic /path/to/my_usd_install_dir\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenUSD VT Library Build with CMake\nDESCRIPTION: Defines the VT library component of OpenUSD with its dependencies (arch, tf, gf, trace, TBB), public classes, headers, and Python bindings. The configuration includes the library structure and all necessary components for building the VT module.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/vt/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/base)\nset(PXR_PACKAGE vt)\n\npxr_library(vt\n    LIBRARIES\n        arch\n        tf\n        gf\n        trace\n        ${TBB_tbb_LIBRARY}\n\n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n\n    PUBLIC_CLASSES\n        array\n        dictionary\n        hash\n        streamOut\n        types\n        value\n\n    PYTHON_PUBLIC_CLASSES\n        arrayPyBuffer\n        valueFromPython\n        wrapArray\n\n    PUBLIC_HEADERS\n        api.h\n        traits.h\n        typeHeaders.h\n        visitValue.h\n    \n    PYTHON_PUBLIC_HEADERS\n        pyOperators.h\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapArrayBase.cpp\n        wrapArrayDualQuaternion.cpp\n        wrapArrayFloat.cpp\n        wrapArrayIntegral.cpp\n        wrapArrayMatrix.cpp\n        wrapArrayQuaternion.cpp\n        wrapArrayRange.cpp\n        wrapArrayString.cpp\n        wrapArrayToken.cpp\n        wrapArrayVec.cpp\n        wrapDictionary.cpp\n        wrapValue.cpp\n\n    PYMODULE_FILES\n        __init__.py\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: USD Material Binding Example\nDESCRIPTION: Demonstrates how to create a marble with an attached glass material and material binding relationship.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_36\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    defaultPrim = \"Marble\"\n)\n\ndef Xform \"Marble\" (\n    kind = \"component\"\n)\n{\n    def Sphere \"marble_geom\"\n    {\n        rel material:binding = </Marble/GlassMaterial>\n        color3f[] primvars:displayColor = [ (0, 1, 0) ]\n    }\n\n    def Material \"GlassMaterial\"\n    {\n        # Interface inputs, shading networks, etc.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Performance Metrics with Custom Metric in Python\nDESCRIPTION: Command to run the usdmeasureperformance.py script with a custom metric. It includes the asset file and the custom metric script with its metric name.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/ref_performance_metrics.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npython usdmeasureperformance.py MyTestAsset.usda --custom-metrics processPrimsMetric.py:'process prims'\n```\n\n----------------------------------------\n\nTITLE: Accessing SdrRegistry in C++\nDESCRIPTION: Demonstrates how to access the SdrRegistry, which is used for discovering shader definitions in USD.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_renderers.rst#2025-04-23_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nSdrRegistry\n```\n\n----------------------------------------\n\nTITLE: Composition Result for /VariantSelectionInReference in USD\nDESCRIPTION: Illustrates the composition of '/VariantSelectionInReference'. The prim stack shows the prim is defined in 'root.sdf' and references '/Ref' from 'ref.sdf'. The variant selection '{v = y_sel}' is applied to the referenced prim '/Ref' within 'ref.sdf'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ExpressionsInVariantSelections.testenv/baseline/compositionResults_ExpressionsInVariantSelections.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </VariantSelectionInReference>\n\nPrim Stack:\n    root.sdf             /VariantSelectionInReference\n    ref.sdf              /Ref\n    ref.sdf              /Ref{v=y_sel}\n\nVariant Selections:\n    {v = y_sel}\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Cat Binary Build\nDESCRIPTION: CMake configuration for building the usdcat binary with required library dependencies including tf, sdf, usd, and usdUtils.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdcat/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usd)\n\npxr_cpp_bin(usdcat\n        LIBRARIES\n        tf\n        sdf\n        usd\n        usdUtils\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining PluginLight Properties in Markdown\nDESCRIPTION: This code block uses Markdown syntax to define the properties of the PluginLight schema, including inherited properties from Xformable and Imageable.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/PluginLight.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n:depth: 2\n:local:\n:backlinks: none\n```\n```\n\n----------------------------------------\n\nTITLE: Periodic Spline Sample Point Data\nDESCRIPTION: Coordinate points representing a periodic spline curve sample output, showing x,y coordinate pairs for animation curve interpolation\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_45\n\nLANGUAGE: text\nCODE:\n```\n(1.0764923095703125, 1.0087890625)\n(1.1044921875, 1.0224609375)\n(1.1636962890625, 1.063720703125)\n(1.2265625, 1.12109375)\n```\n\n----------------------------------------\n\nTITLE: Inspecting USD Composition Stack and Time Offsets for /Root\nDESCRIPTION: This output displays the composition results for the USD prim '/Root'. It shows that 'root.sdf' defines '/Root' in the 'Prim Stack'. The 'Time Offsets' section details the complex hierarchy of sublayers contributing to the final time mapping for this prim, including their individual offset and scale parameters.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecond1.txt#2025-04-23_snippet_2\n\nLANGUAGE: usd\nCODE:\n```\nResults for composing </Root>\n\nPrim Stack:\n    root.sdf             /Root\n\nTime Offsets:\n    root.sdf             /Root           root       (offset=0.00, scale=1.00)\n        s.sdf                            sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=8.00)\n        s_48tcps.sdf                     sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=8.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=8.00)\n        s_12fps.sdf                      sublayer   (offset=10.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=50.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=50.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=50.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=50.00, scale=8.00)\n```\n\n----------------------------------------\n\nTITLE: Accessing Resolved Animation on a USD Stage in C++\nDESCRIPTION: Represents the primary container for composed USD scenery. When Value Clips are used, the resulting resolved animation on a UsdStage appears seamless to consuming clients, as if the data originated from a single layer, requiring no special API interaction.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_49\n\nLANGUAGE: cpp\nCODE:\n```\nUsdStage\n```\n\n----------------------------------------\n\nTITLE: Configuring usdRi Library Build\nDESCRIPTION: Defines the main library configuration for usdRi, including dependencies, class files, headers, and Python module components. Sets up core library components and their relationships.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdRi/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usdRi)\n\npxr_library(usdRi\n    INCLUDE_SCHEMA_FILES\n\n    LIBRARIES\n        tf\n        vt\n        sdf\n        usd\n        usdShade\n        usdGeom\n\n    PUBLIC_CLASSES\n        rmanUtilities\n\n    PUBLIC_HEADERS\n        api.h\n\n    PRIVATE_CLASSES\n        typeUtils\n\n    PYMODULE_CPPFILES\n        wrapRmanUtilities.cpp\n\n    PYMODULE_FILES\n        __init__.py\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenUSD Project Structure and Build Options in CMake\nDESCRIPTION: This CMake script defines the project structure for OpenUSD, including core components and optional modules. It uses conditional statements to control the build of specific components based on user-defined options.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\npxr_core_prologue()\n\nadd_subdirectory(external)\nadd_subdirectory(base)\nadd_subdirectory(usd)\n\nif (${PXR_BUILD_EXEC})\n    add_subdirectory(exec)\nendif()\n\nif (${PXR_BUILD_USD_VALIDATION})\n    add_subdirectory(usdValidation)\nendif()\n\nif (${PXR_BUILD_IMAGING})\n    add_subdirectory(imaging)\n    if (${PXR_BUILD_USD_IMAGING})\n        add_subdirectory(usdImaging)\n    endif()\nendif()\n\npxr_core_epilogue()\n\nexport(PACKAGE pxr)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Composition Results for /RootUnloaded Prim\nDESCRIPTION: Shows the composition results for the prim path `/RootUnloaded`. The prim stack indicates that only the definition from the `root.sdf` layer contributes to this prim, suggesting payloads or other composition arcs might be unloaded or not present for this specific prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicPayloadDiamond.testenv/baseline/compositionResults_BasicPayloadDiamond.txt#2025-04-23_snippet_3\n\nLANGUAGE: usd\nCODE:\n```\nResults for composing </RootUnloaded>\n\nPrim Stack:\n    root.sdf             /RootUnloaded\n```\n\n----------------------------------------\n\nTITLE: Defining a Uniform Attribute in USD\nDESCRIPTION: Example of using a uniform attribute ('subdivisionScheme') in a Mesh prim. Uniform attributes are not expected to change over time and appear with the 'uniform' modifier in authored opinions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_67\n\nLANGUAGE: usda\nCODE:\n```\ndef Mesh \"SimulatableGarment\"\n{\n    uniform token subdivisionScheme = \"loop\"\n}\n```\n\n----------------------------------------\n\nTITLE: Semantic Labeling of Nested Materials in USD\nDESCRIPTION: This snippet shows how semantic labels can be applied to nested materials within a USD scene. It demonstrates the inheritance of labels from parent prims to child materials.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdSemantics/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: USD\nCODE:\n```\ndef Xform \"Car\" (\n    apiSchemas = [\"SemanticsLabelsAPI:category\"]\n) {\n    token[] semantics:labels:category = [\"car\", \"vehicle\"]\n    def Scope \"Materials\" {\n        def Material \"Metal\" (\n            apiSchemas = [\"SemanticsLabelsAPI:material\"]\n        )\n        {\n            token[] semantics:labels:material = [\"metal\", \"shiny\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Prim /Root/Frame in USD\nDESCRIPTION: Details the composition results for the child prim path `/Root/Frame`. It shows the prim stack originating from `B.sdf` and lists the accumulated time offsets considering the root layer (`root.sdf`), the reference (`A.sdf`), and the sublayer (`B.sdf`).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicTimeOffset.testenv/baseline/compositionResults_BasicTimeOffset.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </Root/Frame>\n\nPrim Stack:\n    B.sdf                /Model/Frame\n\nTime Offsets:\n    root.sdf             /Root/Frame     root       (offset=0.00, scale=1.00)\n    A.sdf                /Model/Frame    reference  (offset=10.00, scale=1.00)\n        B.sdf                            sublayer   (offset=20.00, scale=1.00)\n```\n\n----------------------------------------\n\nTITLE: Layer Composition Results for /SS1\nDESCRIPTION: Shows the prim stack and time offsets for /SS1 primitive including sublayer and reference configurations with their respective offset and scale values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer2.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </SS1>\n\nPrim Stack:\n    ss.sdf               /SS1\n    ss.sdf               /SS1\n    ss.sdf               /SS1\n    ss.sdf               /SS1\n    ref.sdf              /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n```\n\n----------------------------------------\n\nTITLE: Examples of Boolean and Integer Expression Variables in USD\nDESCRIPTION: This snippet shows how to define boolean and integer expression variables in USD.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/variable_expressions.rst#2025-04-23_snippet_3\n\nLANGUAGE: usda\nCODE:\n```\nbool exampleBool = False \nbool exampleBool2 = true\n\nint64 exampleInt = 43 \nint64 exampleIntNeg = -500\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Class and Property Documentation in USD\nDESCRIPTION: This snippet demonstrates how to add user documentation to a schema class and property using customData metadata in a USD file. It shows the structure for providing brief and detailed documentation strings.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/README.md#2025-04-23_snippet_9\n\nLANGUAGE: usd\nCODE:\n```\nover SchemaClass \"SchemaClass\" (\n    customData = {\n        string userDocBrief = \"\"\"A short sentence or two describing the schema.\"\"\"\n        string userDoc = \"\"\"A longer set of paragraphs describing the schema\nin detail. Use Markdown format to include images, links, etc. Use Myst Markdown\nto add Sphinx directives like references and labels.\n\"\"\"\n)\n{\n    asset schemaAssetProperty (\n      customData = {\n          string userDocBrief = \"\"\"A short sentence or two describing the \nproperty.\"\"\"\n          string userDoc = \"\"\"A longer set of paragraphs describing the property\nin detail, again using Markdown and Sphinx directives as needed.\"\"\"\n      }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Relationship-Mode Collection in USD\nDESCRIPTION: Example of a relationship-mode collection that includes all production lights by including specific paths and another collection, while excluding test lights.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_8\n\nLANGUAGE: usda\nCODE:\n```\ndef \"CollectionPrim\" (\n    prepend apiSchemas = [\"CollectionAPI:allProdLights\"]\n)\n{\n\n```\n\n----------------------------------------\n\nTITLE: Defining a USD Prim with C++ API\nDESCRIPTION: Example of defining a USD prim using the high-level C++ API, which would be a good place to add version tagging.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_schema_versioning.rst#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nSchemaClass::Define()\n```\n\n----------------------------------------\n\nTITLE: Querying Earliest Time Sample with UsdTimeCode::EarliestTime() in C++\nDESCRIPTION: Represents a specific time code value in C++, `UsdTimeCode::EarliestTime()`. It is recommended for use with `UsdAttribute::Get()` when querying animated attributes without a specific time, ensuring that authored time samples are considered rather than just the default value.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_66\n\nLANGUAGE: cpp\nCODE:\n```\nUsdTimeCode::EarliestTime()\n```\n\n----------------------------------------\n\nTITLE: Animation Curve Sampling with Wide Time Range and Sparse Sampling\nDESCRIPTION: Test case showing animation curve sampling over a broader time range with larger steps. Demonstrates how extrapolation regions (pre/post) handle values outside the defined knots.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_58\n\nLANGUAGE: plaintext\nCODE:\n```\nTest Case 134: SampleWithSources([15, 215], 10, 25, 10)\n0: (TsSourcePreExtrap)\n    (15, 8.8)\n    (90, 8.8)\n1: (TsSourceKnotInterp)\n    (90, 8.8)\n    (90.97929687499999, 8.485546875)\n    (92.209375, 9.059375000000001)\n    (95.07499999999999, 12.075)\n    (100, 20)\n2: (TsSourceInnerLoopProto)\n    (100, 20)\n    (100.6865234375, 20.56494140625)\n    (101.2734375, 19.59765625)\n    (102.3125, 15.09375)\n    (103.4453125, 10.54296875)\n    (104.1494140625, 9.51708984375)\n    (105, 10)\n    (107.6875, 12.40625)\n    (110, 15)\n3: (TsSourceInnerLoopPostEcho)\n    (110, 15)\n    (110.6865234375, 15.56494140625)\n    (111.2734375, 14.59765625)\n    (112.3125, 10.09375)\n    (113.4453125, 5.54296875)\n    (114.1494140625, 4.51708984375)\n    (115, 5)\n    (117.6875, 7.40625)\n    (120, 10)\n    (120.6865234375, 10.56494140625)\n    (121.2734375, 9.59765625)\n    (122.3125, 5.09375)\n    (123.4453125, 0.54296875)\n    (124.1494140625, -0.48291015625)\n    (125, 0)\n    (127.6875, 2.40625)\n    (130, 5)\n4: (TsSourceKnotInterp)\n    (130, 5)\n    (134.625, 16)\n    (137.453125, 19.0625)\n    (138.791015625, 18.1796875)\n    (140, 15)\n5: (TsSourcePostExtrap)\n    (140, 15)\n    (215, 15)\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Render Library Build with CMake\nDESCRIPTION: Defines the build configuration for the usdRender library including its dependencies, public classes, headers, Python modules, and documentation files. The library depends on core USD components like gf, tf, usd, usdGeom, and usdShade.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdRender/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usdRender)\n\npxr_library(usdRender\n    INCLUDE_SCHEMA_FILES\n\n    LIBRARIES\n        gf\n        tf\n        usd\n        usdGeom\n        usdShade\n\n    PUBLIC_CLASSES\n        spec\n\n    PUBLIC_HEADERS\n        api.h\n\n    PYMODULE_FILES\n        __init__.py\n\n    DOXYGEN_FILES\n        overview.dox\n        images/aperture.svg\n        images/dataWindow.svg\n        images/nonSquarePixels.svg\n        images/pixelAspectRatio.svg\n        doxygen/renderSettings.usda\n)\n```\n\n----------------------------------------\n\nTITLE: Editing Instances and Prototypes in USD\nDESCRIPTION: Illustrates the restrictions on editing instance prims, prototype prims, and their descendants in USD.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/instancing.md#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n>>> stage = Usd.Stage.Open('ParkingLot.usd')\n\n# Properties on an instance can be overridden as expected.\n>>> car1Color = stage.GetPrimAtPath('/ParkingLot/Car_1').GetAttribute('color')\n>>> car1Color.Get()\nGf.Vec3f(1.0, 0.0, 0.0)\n>>> car1Color.Set((1.0, 1.0, 1.0))\nTrue\n>>> car1Color.Get()\nGf.Vec3f(1.0, 1.0, 1.0)\n\n# Properties on prims in prototypes cannot be overridden. This is also the case\n# when accessing the property via an instance proxy.\n>>> prototype = stage.GetPrimAtPath('/ParkingLot/Car_1').GetPrototype()\n>>> prototypeBodyColor = prototype.GetChild('Body').GetAttribute('color')\n>>> prototypeBodyColor.Get()\nGf.Vec3f(0.0, 0.0, 0.0)\n>>> prototypeBodyColor.Set((1.0, 1.0, 1.0))\npixar.Tf.ErrorException\n\n>>> instanceProxyBody = stage.GetPrimAtPath('/ParkingLot/Car_1/Body')\n>>> instanceProxyBodyColor = instanceProxyBody.GetAttribute('color')\n>>> instanceProxyBodyColor.Get()\nGf.Vec3f(0.0, 0.0, 0.0)\n>>> instanceProxyBodyColor.Set((1.0, 1.0, 1.0))\npixar.Tf.ErrorException\n```\n\n----------------------------------------\n\nTITLE: Defining a UsdVol Volume with Animated Field Data in USDA\nDESCRIPTION: This USDA snippet demonstrates animating volumetric data for a `Volume` prim named \"wisp\". The associated `OpenVDBAsset` prim \"density\" uses the `filePath.timeSamples` attribute to link different VDB files (`wisp_01.101.vdb`, `wisp_01.102.vdb`, etc.) to specific time samples (101, 102, 103, 104). This allows the volume's density, sourced from the `density` field in the VDB files, to change over time.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdVol/userDoc/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: usda\nCODE:\n```\ndef Volume \"wisp\"\n{\n    float3[] extent = [(-57, -91, -44), (57, 31, -23)]\n\n    rel field:density = </wisp/density>\n\n    def OpenVDBAsset \"density\"\n    {\n        asset filePath.timeSamples = {\n            101: @./wisp_01.101.vdb@,\n            102: @./wisp_01.102.vdb@,\n            103: @./wisp_01.103.vdb@,\n            104: @./wisp_01.104.vdb@,\n        }\n        token fieldName = \"density\"\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Performing Layout Work on USD Shot with Python\nDESCRIPTION: Runs a Python script to perform layout work on the shot, such as adding props and positioning the camera.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_end_to_end.rst#2025-04-23_snippet_6\n\nLANGUAGE: console\nCODE:\n```\npython tutorial_scripts/layout_shot_s00_01.py\n```\n\n----------------------------------------\n\nTITLE: Forcing Application to Use Jemalloc Allocator via LD_PRELOAD on Linux\nDESCRIPTION: Example command showing how to use the LD_PRELOAD environment variable to force a third-party application to use the jemalloc memory allocator instead of the default system allocator. This technique can provide significant performance improvements for USD operations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/maxperf.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n> env LD_PRELOAD=/path/to/jemalloc.so thirdPartyApplication\n```\n\n----------------------------------------\n\nTITLE: Sampling Bezier Animation Curve Using Knot Interpolation\nDESCRIPTION: Test case showing sampling of a Bezier animation curve over the range [156, 167] with specific interpolation parameters, using knot interpolation as the source type.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_73\n\nLANGUAGE: text\nCODE:\n```\nTest Case 148: SampleWithSources([156, 167], 45.4545, 17.3611, 1)\n0: (TsSourceKnotInterp)\n    (156, 0)\n    (158.5854711544726, -3.4173550801546186)\n    (159.33730468589425, -4.347771882426931)\n    (159.8128873576108, -4.764763836917713)\n    (159.96685427049485, -4.781994787828266)\n    (160.07548204775082, -4.672392676693319)\n    (160.1466785491448, -4.4364652201461645)\n    (160.18835163444288, -4.0747201348201)\n    (160.21475899581543, -2.975807944364408)\n    (160.21796700999704, -1.3797178383925954)\n    (160.26123855511622, 0.7094884500289858)\n    (160.40783650930155, 3.2877491878339833)\n    (160.53965253920916, 4.759005683672028)\n    (160.72102375068152, 6.351002641956045)\n    (160.9598580034847, 8.06323234605274)\n    (161.26406315738473, 9.895187079328819)\n    (161.64154707214766, 11.846359125150988)\n    (162.1002176075396, 13.916240766885954)\n    (162.64798262332664, 16.104324287900422)\n    (163.2927499792748, 18.410101971561097)\n    (164.04242753515013, 20.833066101234685)\n    (164.90492315071873, 23.372708960287895)\n    (165.88814468574665, 26.02852283208743)\n    (167, 28.8)\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Dependencies for HdSt\nDESCRIPTION: Sets up optional dependencies for HdSt based on build configurations. Manages MaterialX and Ptex integration by appending the required libraries, include directories, and class files when these features are enabled.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(optionalLibs \"\")\nset(optionalIncludeDirs \"\")\nset(optionalPublicClasses \"\")\nset(optionalPrivateClasses \"\")\nif (${PXR_ENABLE_MATERIALX_SUPPORT})\n    list(APPEND optionalLibs\n        MaterialXGenShader\n        MaterialXRender\n        MaterialXCore\n        MaterialXFormat\n        MaterialXGenGlsl\n        MaterialXGenMsl\n        hdMtlx\n    )\n    list(APPEND optionalPrivateClasses\n         materialXFilter\n         materialXShaderGen\n    )\nendif()\nif (PXR_ENABLE_PTEX_SUPPORT)\n    list(APPEND optionalLibs ${PTEX_LIBRARY})\n    list(APPEND optionalIncludeDirs ${PTEX_INCLUDE_DIR})\n    list(APPEND optionalPublicClasses ptexMipmapTextureLoader)\nendif()\n```\n\n----------------------------------------\n\nTITLE: USD Shot with Relationship Editing Example\nDESCRIPTION: A USD shot file that references the assembly and demonstrates relationship editing. This shows how to delete a specific target from a relationship at the shot level using path translation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_30\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    defaultPrim = \"World\"\n)\n\ndef Xform \"World\"\n{\n    def \"WestVillage\" (\n        references = @assembly.usd@\n    )\n    {\n        over \"Building_1\" \n        {\n            delete rel gprims = </World/WestVillage/Building_1/Sphere>\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Payload Reference in USD StoolDorm Element\nDESCRIPTION: This code snippet demonstrates a change in the payload reference within a StoolDorm element in a USD file. The payload is updated from 'a_payload.usd' to 'b_payload.usd', indicating a switch to a different asset or scene composition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddiff/testenv/testDiffToolComposedResults/baseline/layer_diff.txt#2025-04-23_snippet_0\n\nLANGUAGE: USD\nCODE:\n```\n-    payload = @a_payload.usd@</StoolDorm>\n+    payload = @b_payload.usd@</StoolDorm>\n```\n\n----------------------------------------\n\nTITLE: Disabling Motion Blur with RenderSettings in USD\nDESCRIPTION: Example showing how to disable all motion blur for a render pass by setting the disableMotionBlur attribute to true in a RenderSettings prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_25\n\nLANGUAGE: usda\nCODE:\n```\ndef RenderSettings \"NoBlurRenderSettings\"\n{\n    uniform bool disableMotionBlur = 1\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Resolving Custom Data Dictionaries in C++\nDESCRIPTION: Refers to the dictionary-valued `customData` metadata authorable on prims and properties, accessed via the C++ method `UsdObject::GetCustomData`. Dictionaries are resolved element-wise, merging keys from different layers rather than replacing the entire dictionary.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_57\n\nLANGUAGE: cpp\nCODE:\n```\ncustomData dictionary <UsdObject::GetCustomData>\n```\n\n----------------------------------------\n\nTITLE: USDA Token Declaration\nDESCRIPTION: Example showing USDA token usage for material inputs, specifically referencing frame:st interface inputs.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/spec_usdpreviewsurface.rst#2025-04-23_snippet_6\n\nLANGUAGE: usda\nCODE:\n```\ninputs:frame:st\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimWithInternalReference\nDESCRIPTION: Shows the composition results for </PrimWithInternalReference>. The prim stack indicates its definition in root.sdf and contributions from internal references to </InternalReference> (root.sdf) and </InternalReference2> (session.sdf). Child names from </InternalReference> are listed.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimWithInternalReference>\n\nPrim Stack:\n    root.sdf             /PrimWithInternalReference\n    root.sdf             /InternalReference\n    session.sdf          /InternalReference2\n\nChild names:\n     ['InternalReference_Child']\n```\n\n----------------------------------------\n\nTITLE: Configuring HGI Library and Conditionally Building Tests - CMake\nDESCRIPTION: Defines the HGI library and its dependencies using PXR CMake macros. Specifies public classes and headers, manages platform-specific logic for test builds, and utilizes the pxr_build_test macro for test integration. Assumes availability of custom macros (pxr_library, pxr_build_test) and variables such as PXR_HEADLESS_TEST_MODE and PXR_PACKAGE. Key parameters control dependencies, visibility of classes/headers, and test file inclusion. Requires CMake and proper setup of referenced submodules. Output is build targets for the HGI library and, conditionally, the associated test executable; constraints are enforced on macOS, Windows, and headless environments.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hgi/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE hgi)\n\npxr_library(hgi\n    LIBRARIES\n        gf\n        plug\n        tf\n        hio\n\n    PUBLIC_CLASSES\n        attachmentDesc\n        blitCmds\n        buffer\n        capabilities\n        cmds\n        computeCmds\n        computeCmdsDesc\n        computePipeline\n        debugCodes\n        graphicsCmds\n        graphicsCmdsDesc\n        graphicsPipeline\n        hgi\n        indirectCommandEncoder\n        resourceBindings\n        sampler\n        shaderFunction\n        shaderFunctionDesc\n        shaderGenerator\n        shaderProgram\n        shaderSection\n        texture\n        tokens\n        types\n        unitTestHelper\n\n    PUBLIC_HEADERS\n        api.h\n        blitCmdsOps.h\n        enums.h\n        handle.h\n)\n\nif (${PXR_HEADLESS_TEST_MODE})\n    message(STATUS \"Skipping ${PXR_PACKAGE} tests because PXR_HEADLESS_TEST_MODE is ON\")\n    return()\nendif()\n\nif (APPLE)\n    message(STATUS \"Skipping ${PXR_PACKAGE} tests because they are currently unsupported on macOS\")\n    return()\nendif()\n\nif (WIN32)\n    message(STATUS \"Skipping ${PXR_PACKAGE} tests because they are currently unsupported on Windows\")\n    return()\nendif()\n\npxr_build_test(testHgiCommand\n    LIBRARIES\n        hgi\n        garch\n        tf\n    CPPFILES\n        testenv/testHgiCommand.cpp\n)\n\n```\n\n----------------------------------------\n\nTITLE: USD Scene Layer Stack Analysis\nDESCRIPTION: Shows the core layer stack and composition structure of the USD scene, indicating root.sdf as the primary layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_VariantSpecializesAndReference.testenv/baseline/compositionResults_VariantSpecializesAndReference.txt#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\nLayer Stack:\n     root.sdf\n```\n\n----------------------------------------\n\nTITLE: Encoding Value Clips using UsdClipsAPI in C++\nDESCRIPTION: Provides the C++ API for encoding Value Clips onto a USD stage. This process is noted as being more complex than directly recording time samples or adding references.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_50\n\nLANGUAGE: cpp\nCODE:\n```\nUsdClipsAPI\n```\n\n----------------------------------------\n\nTITLE: Defining Scene Globals and Asset Resolver - Custom Scene Configuration\nDESCRIPTION: This snippet initializes global scene state and system loaders for a USD scene, specifying time codes and an asset resolver context. Dependencies may include a custom USD pipeline capable of parsing these schema blocks. Inputs include startTimeCode, endTimeCode, and asset resolver information; outputs are structural scene-wide defaults. It is typically a required top-level setup for scenes and should only appear once.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdImaging/testenv/testUsdImagingStageSceneIndexContents/baseline/basic.txt#2025-04-23_snippet_0\n\nLANGUAGE: custom-config\nCODE:\n```\ntype = \n\t[sceneGlobals]\n\t\t[endTimeCode]\n\t\t\t0\n\t\t[startTimeCode]\n\t\t\t0\n\t[system]\n\t\t[assetResolution]\n\t\t\t[resolverContext]\n\t\t\t\t<'ArResolverContext' @ XXXXXXXXXXXXXXXX>\n```\n\n----------------------------------------\n\nTITLE: Registering usdzip Flat Archive Test in CMake\nDESCRIPTION: Registers a Python test named `testUsdZipInputFiles` using `pxr_register_test`. The test executes the installed `usdzip` command to create a flat `.usdz` archive named `flat.usdz` from the `src` directory, listing contents to `flat.txt`. It expects the command to succeed (return code 0) and compares the generated `flat.txt` against a reference file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdzip/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdZipInputFiles\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdzip flat.usdz src -l flat.txt\"\n    DIFF_COMPARE flat.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Defining GeometryLight Properties in USD\nDESCRIPTION: This snippet defines the core properties of the GeometryLight schema in USD. It includes a relationship to the geometry used as the light source and a token for the shader ID.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/GeometryLight.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### geometry\n\n**USD type**: `rel` (relationship)\n\nRelationship to the geometry to use as the \nlight source.\n\n\n### light:shaderId\n\n**USD type**: `token`\n\n**Fallback value**: `GeometryLight`\n\nThe shader ID for a GeometryLight. \nUSD will also register a Sdr shader node with a \"GeometryLight\" identifier and \nthe source type \"USD\" to correspond to the light's inputs\n```\n\n----------------------------------------\n\nTITLE: Configuring Regression Prevention Settings in Python\nDESCRIPTION: This snippet shows the configuration of regression prevention settings, including adjustments for pre and post segments, and their respective widths.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/InitiallyRegressiveContain_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: true\n  havePreSegment: false\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.000000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.000000\n  havePostSegment: true\n  postActiveAdjusted: true\n  postActiveAdjustedWidth: 11.000000\n  postOppositeAdjusted: true\n  postOppositeAdjustedWidth: 11.000000\n```\n\n----------------------------------------\n\nTITLE: Displaying Time Offsets for /SS4 in OpenUSD\nDESCRIPTION: Shows the time offset and scale configurations for the /SS4 prim composition, displaying how time transformations are applied across the layer stack including root, sublayers, and references.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecond4.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nTime Offsets:\n    root_12fps.sdf       /SS4            root       (offset=0.00, scale=1.00)\n        s.sdf                            sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=4.00)\n        s_48tcps.sdf                     sublayer   (offset=10.00, scale=0.50)\n        ss.sdf                           sublayer   (offset=15.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=15.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=15.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=15.00, scale=4.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=4.00)\n        s_12fps.sdf                      sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=4.00)\n    ref.sdf              /Ref            reference  (offset=60.00, scale=4.00)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.50)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=2.00)\n    ref_48tcps.sdf       /Ref            reference  (offset=60.00, scale=2.00)\n        ref_s.sdf                        sublayer   (offset=0.00, scale=2.00)\n        ref_s_24tcps_12fps.sdf           sublayer   (offset=0.00, scale=2.00)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=4.00)\n    ref_24tcps_12fps.sdf /Ref            reference  (offset=60.00, scale=4.00)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.50)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=2.00)\n    ref_12fps.sdf        /Ref            reference  (offset=60.00, scale=8.00)\n        ref_s.sdf                        sublayer   (offset=0.00, scale=0.50)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.25)\n        ref_s_24tcps_12fps.sdf           sublayer   (offset=0.00, scale=0.50)\n```\n\n----------------------------------------\n\nTITLE: Defining USD Scene Hierarchy Structure\nDESCRIPTION: This snippet illustrates the structure of a USD scene hierarchy. It shows a root Scope with nested Xforms and Cubes, demonstrating parent-child relationships, prim types, and basic attributes like 'kind' and 'active'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdtree/testenv/testUsdTreePayload/baseline/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\n/\n `--root [def Scope] (kind = assembly)\n     |--child1 [def Xform] (kind = group)\n     |   |--subchild1a [def Cube]\n     |   `--subchild1b [def Cube]\n     `--child2 [def Xform] (kind = group)\n         |--subchild2a [def Xform] (kind = component)\n         |   `--subgrandchild2a1 [def Cube] (kind = subcomponent)\n         `--subchild2b [def Xform] (active = false, kind = component)\n```\n\n----------------------------------------\n\nTITLE: Using framesPerSecond Metadata in USD (USDA)\nDESCRIPTION: This USDA snippet demonstrates the role of `framesPerSecond` alongside `timeCodesPerSecond`. While `timeCodesPerSecond` (24) still governs the scaling of TimeSamples to real time, `framesPerSecond` (12) suggests a playback rate, indicating that playback devices should advance two TimeCodes per frame displayed at 12fps. It also highlights the fallback precedence where `framesPerSecond` can substitute for `timeCodesPerSecond` if the latter is unset.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_48\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    timeCodesPerSecond = 24\n    framesPerSecond = 12\n    endTimeCode = 240\n    startTimeCode = 1\n)\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for Prim /S1 (Plaintext)\nDESCRIPTION: This section details the composition results for the USD prim specified by the path `/S1`. It shows the Prim Stack, indicating that the primary definition for `/S1` comes from `s.sdf`. The Time Offsets section displays the hierarchical structure of layers contributing to the final time mapping for this prim, starting from the root layer `session_48tcps.sdf` and descending through its sublayers, each applying specific time offsets and scales.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer1.txt#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </S1>\n\nPrim Stack:\n    s.sdf                /S1\n\nTime Offsets:\n    session_48tcps.sdf   /S1             root       (offset=0.00, scale=1.00)\n        sess_s.sdf                       sublayer   (offset=10.00, scale=4.00)\n        sess_s_48tcps.sdf                sublayer   (offset=10.00, scale=2.00)\n        sess_s_24tcps_12fps.sdf          sublayer   (offset=10.00, scale=4.00)\n        sess_s_12fps.sdf                 sublayer   (offset=10.00, scale=8.00)\n        root_24tcps_12fps.sdf            sublayer   (offset=0.00, scale=2.00)\n        s.sdf                            sublayer   (offset=20.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=60.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=60.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=60.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=60.00, scale=16.00)\n        s_48tcps.sdf                     sublayer   (offset=20.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=40.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=40.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=40.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=40.00, scale=16.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=20.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=60.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=60.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=60.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=60.00, scale=16.00)\n        s_12fps.sdf                      sublayer   (offset=20.00, scale=8.00)\n        ss.sdf                           sublayer   (offset=100.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=100.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=100.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=100.00, scale=16.00)\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Libraries in CMake for OpenUSD Arch\nDESCRIPTION: Sets up platform-specific libraries for the 'arch' component. On Windows, it adds additional libraries (Ws2_32.lib and Dbghelp.lib) to the PLATFORM_LIBS variable.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/arch/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PLATFORM_LIBS ${M_LIB})\nif(WIN32)\n    set(PLATFORM_LIBS Ws2_32.lib Dbghelp.lib ${PLATFORM_LIBS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </Good_SubrootRefToRelocated> Referencing a Relocated Prim\nDESCRIPTION: Displays the composition results for </Good_SubrootRefToRelocated>, which references the relocated prim </Char/Relocated> via a sub-root reference. The prim stack includes the opinions from the referencing prim in 'root.sdf' followed by the composed opinions of the referenced target </Char/Relocated>. Children and prohibited children are inherited from the referenced prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_RelocateToNone.testenv/baseline/compositionResults_RelocateToNone_usd.txt#2025-04-23_snippet_3\n\nLANGUAGE: usd-composition-output\nCODE:\n```\nResults for composing </Good_SubrootRefToRelocated>\n\nPrim Stack:\n    root.sdf             /Good_SubrootRefToRelocated\n    root.sdf             /Char/Relocated\n    model.sdf            /Model/ToBeRelocated\n\nChild names:\n     ['Child']\n\nProhibited child names:\n     ['ToBeDeletedChild']\n```\n\n----------------------------------------\n\nTITLE: USD Layer Stack Definition\nDESCRIPTION: Shows the layer stack configuration for a USD scene, with root.sdf as the primary layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyRelocationOfPrimFromPayload.testenv/baseline/compositionResults_TrickyRelocationOfPrimFromPayload.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nLayer Stack:\n     root.sdf\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PS Prim\nDESCRIPTION: Shows the prim stack and child names for the composed prim at path </PS>. It specializes /PSI.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PS>\n\nPrim Stack:\n    root.sdf             /PS\n    root.sdf             /PSI\n\nChild names:\n     ['Child', 'Sibling']\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </Root/B/C/_Z> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </Root/B/C/_Z>. The prim stack combines /Root/B/C/_Z from 'root.sdf' and /Ref/C/_Z from 'ref.sdf'. It lists 'prop' as a property, with contributions from both layers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Root/B/C/_Z>\n\nPrim Stack:\n    root.sdf             /Root/B/C/_Z\n    ref.sdf              /Ref/C/_Z\n\nProperty names:\n     ['prop']\n\nProperty stacks:\n/Root/B/C/_Z.prop:\n    root.sdf             /Root/B/C/_Z.prop\n    ref.sdf              /Ref/C/_Z.prop\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for Inherited /Model/Scope/RefFromHighClassStuff\nDESCRIPTION: Shows the composition for '/Model/Scope/RefFromHighClassStuff'. This prim is inherited from '/Model/Class'. The prim stack confirms its origin is '/RefFromHighClass/RefFromHighClassStuff' in 'ref.sdf', brought in via the inheritance chain originating from the '/Model/Class' prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsInVariants.testenv/baseline/compositionResults_TrickyInheritsInVariants.txt#2025-04-23_snippet_7\n\nLANGUAGE: usd-composition-log\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Model/Scope/RefFromHighClassStuff>\n\nPrim Stack:\n    ref.sdf              /RefFromHighClass/RefFromHighClassStuff\n```\n\n----------------------------------------\n\nTITLE: Defining a Top-Level Asset Instancing Other Assets in USD (usda) - Nested Instancing Part 1\nDESCRIPTION: This USD snippet (usda format) shows the structure of a top-level asset file ('BuyNLarge.usd') that utilizes nested instancing. It defines multiple instanceable prims ('ParkingLot_1', 'ParkingLot_2', etc.) which reference the 'ParkingLot' prim defined in an external 'ParkingLot.usd' file. This demonstrates how larger aggregates can be built by instancing other assets.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/instancing.md#2025-04-23_snippet_11\n\nLANGUAGE: usd\nCODE:\n```\n### BuyNLarge.usd\n\n#usda 1.0\n\ndef \"BuyNLarge\"\n{\n    def \"ParkingLot_1\" (\n        instanceable = true\n        references = @./ParkingLot.usd@</ParkingLot>\n    )\n    {\n    }\n\n    def \"ParkingLot_2\" (\n        instanceable = true\n        references = @./ParkingLot.usd@</ParkingLot>\n    )\n    {\n    }\n\n    # ...\n\n    def \"ParkingLot_n\" (\n        instanceable = true\n        references = @./ParkingLot.usd@</ParkingLot>\n    )\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection Programmatically with Python\nDESCRIPTION: Shows how to create and configure a collection programmatically using the USD Python API.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncollectionPrim = stage.DefinePrim(\"/CollectionPrim\")\nmyCollection = Usd.CollectionAPI.Apply(collectionPrim, \"myCollection\")\n```\n\n----------------------------------------\n\nTITLE: USDA Accessibility Information Example\nDESCRIPTION: Example showing how to add accessibility information to a mesh using the AccessibilityAPI schema. Demonstrates using multiple namespaced triplets of accessibility label, description and priority properties.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdUI/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: usda\nCODE:\n```\ndef Mesh \"Cube\" (\n    prepend apiSchemas = [\"AccessibilityAPI\"]\n) {\n    string accessibility:default:label = \"Regular cube\"\n    string accessibility:default:description = \"A plain featureless cube\"\n    token accessibility:default:priority = \"standard\"\n\n    string accessibility:size:label = \"Regular sized cube\"\n    string accessibility:size:description = \"A 4-meter featureless cube\"\n    token accessibility:size:priority = \"low\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenUSD Arch Library in CMake\nDESCRIPTION: Defines the 'arch' library using the pxr_library macro. It specifies the library's dependencies, public classes, headers, and private components.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/arch/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_library(arch\n    LIBRARIES\n        ${CMAKE_DL_LIBS}\n        ${PLATFORM_LIBS}\n\n    PUBLIC_CLASSES\n        align\n        attributes\n        daemon\n        debugger\n        demangle\n        env\n        error\n        errno\n        fileSystem\n        function\n        hash\n        library\n        mallocHook\n        regex\n        stackTrace\n        symbols\n        systemInfo\n        threads\n        timing\n        virtualMemory\n        vsnprintf\n\n    PUBLIC_HEADERS\n        api.h\n        buildMode.h\n        defines.h\n        export.h\n        functionLite.h\n        hints.h\n        inttypes.h\n        math.h\n        pragmas.h\n\n    PRIVATE_HEADERS\n        testArchAbi.h\n        testArchUtil.h\n\n    CPPFILES\n        assumptions.cpp\n        initConfig.cpp\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Sampling ZeroTans Spline in Python\nDESCRIPTION: This snippet defines a ZeroTans spline with two knots and zero tangent slopes. It demonstrates the linear interpolation behavior between knots and held extrapolation outside the knot range.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_108\n\nLANGUAGE: python\nCODE:\n```\nSpline: ZeroTans\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Light and Shadow Linking in USD\nDESCRIPTION: Demonstrates light linking and shadow linking using collections. Shows how to configure a SphereLight to selectively illuminate specific geometry and cast shadows for specific objects using both explicit includes and path expressions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/overview.md#2025-04-23_snippet_13\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n)\n\ndef Scope \"Lights\"\n{\n    def SphereLight \"Light\"\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestGeom/Sphere1>,\n            </TestGeom/Sphere3>,\n            </TestGeom/Ground>\n        ]        \n        uniform bool collection:shadowLink:includeRoot = 0\n        pathExpression collection:shadowLink:membershipExpression = \"/TestGeom/*2\" \n\n        color3f inputs:color = (1, 1, 1)\n        float inputs:radius = 1.0\n        float inputs:intensity = 10.0\n\n        double3 xformOp:translate = (0, 0, 2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n}\n\ndef Xform \"TestGeom\"\n{\n    def Sphere \"Sphere1\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (-2.5, 0, -2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Sphere \"Sphere2\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (0, 0, -2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Sphere \"Sphere3\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double3 xformOp:translate = (2.5, 0, -2)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n\n    def Cube \"Ground\"\n    {\n        color3f[] primvars:displayColor = [(1, 1, 1)] (\n            interpolation = \"constant\"\n        )    \n        double size = 8\n        double3 xformOp:translate = (0, 0, -8)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]          \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Light Linking in USD\nDESCRIPTION: This snippet demonstrates how to configure light linking in USD using a collection. It sets includeRoot to false and explicitly includes specific objects to be illuminated by the light.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_7\n\nLANGUAGE: usda\nCODE:\n```\ndef CylinderLight \"CylinderLight\" \n{\n    uniform bool collection:lightLink:includeRoot = 0\n    prepend rel collection:lightLink:includes = [\n        </World/characters>,\n        </World/trees>,\n    ]\n    ....\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a Prim is a Light in C++\nDESCRIPTION: This code snippet shows how to check if a prim is a light using the UsdLux API. It compares the current method of checking if a prim inherits from UsdLuxLight with the proposed method of checking if it has the UsdLuxLightAPI applied.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_geometry_lights.rst#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nprim.IsA<UsdLuxLight>()\n```\n\nLANGUAGE: cpp\nCODE:\n```\nprim.HasA<UsdLuxLightAPI>()\n```\n\n----------------------------------------\n\nTITLE: TsRegressionPreventer Settings in YAML\nDESCRIPTION: Configuration settings for regression prevention in an animation system, including segment adjustments and width parameters\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/MoveStartKeepStart_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: true\n  havePreSegment: false\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.000000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.000000\n  havePostSegment: true\n  postActiveAdjusted: true\n  postActiveAdjustedWidth: 0.799994\n  postOppositeAdjusted: true\n  postOppositeAdjustedWidth: 0.199994\n```\n\n----------------------------------------\n\nTITLE: Analyzing Composition for /implementation Prim in USD\nDESCRIPTION: Displays the prim stack, active variant selections ('testVariantSet=testVariant'), available properties ('classVariantAttr', 'variantAttr'), and the source layer stack for each property after composing the '/implementation' prim from 'root.sdf'. Shows how variant selection influences attribute sources.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndVariants3.testenv/baseline/compositionResults_SpecializesAndVariants3.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </implementation>\n\nPrim Stack:\n    root.sdf             /implementation\n    root.sdf             /implementation{testVariantSet=testVariant}\n    root.sdf             /_class_defaultVariantSelections\n    root.sdf             /_class_defaultVariantSelections{testVariantSet=testVariant}\n\nVariant Selections:\n    {testVariantSet = testVariant}\n\nProperty names:\n     ['classVariantAttr', 'variantAttr']\n\nProperty stacks:\n/implementation.classVariantAttr:\n    root.sdf             /_class_defaultVariantSelections{testVariantSet=testVariant}.classVariantAttr\n/implementation.variantAttr:\n    root.sdf             /implementation{testVariantSet=testVariant}.variantAttr\n```\n\n----------------------------------------\n\nTITLE: Executing Tiny RenderDelegate Lifecycle in Rendering Pipeline\nDESCRIPTION: This snippet outlines the process of creating, using, and destroying a Tiny RenderDelegate. It includes steps for creating render primitives, synchronizing mesh data, executing render passes, and cleaning up resources. The process is likely part of a larger rendering system, possibly in the context of USD (Universal Scene Description).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/imaging/examples/hdTiny/testenv/testHdTiny/baseline/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCreating Tiny RenderDelegate\nCreate Tiny Rprim type=mesh id=/MyCube1\nCreate RenderPass with Collection=geometry\n* (multithreaded) Sync Tiny Mesh id=/MyCube1\n=> CommitResources RenderDelegate\n=> Execute RenderPass\nDestroy Tiny Rprim id=/MyCube1\nDestroying Tiny RenderDelegate\nDestroying renderPass\nOK\n```\n\n----------------------------------------\n\nTITLE: Using Expression Variables in USD References\nDESCRIPTION: This snippet shows how to use expression variables to dynamically construct reference paths in USD.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/variable_expressions.rst#2025-04-23_snippet_5\n\nLANGUAGE: usda\nCODE:\n```\nreferences = @`${ASSET_DIRECTORY}/${CHARACTERS_DIRECTORY}/CharSetA.usda`@\n```\n\n----------------------------------------\n\nTITLE: Defining ArIdentifier Class Interface in C++\nDESCRIPTION: This code snippet defines the new interface for the ArIdentifier class in Ar 2.0. It includes constructors, assignment operators, comparison operators, and methods to check validity and retrieve the identifier's value.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_ar2.rst#2025-04-23_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nclass ArIdentifier\n{\npublic:\n    ArIdentifier();\n    explicit ArIdentifier(const std::string&);\n    ArIdentifier(const ArIdentifier&);\n    ArIdentifier(ArIdentifier&&);\n    ~ArIdentifier();\n\n    ArIdentifier& operator=(const ArIdentifier&);\n    ArIdentifier& operator=(ArIdentifier&&); \n    bool operator<(const ArIdentifier&) const;\n    bool operator==(const ArIdentifier&) const;\n \n    // Return true if this identifier has a value, false if empty.\n    explicit operator bool() const;\n \n    // Return the identifier's value.\n    const std::string& GetValue() const;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining OpenVDBAsset in USD\nDESCRIPTION: Example showing how to define an OpenVDBAsset that references a density field in a .vdb file with time samples. Demonstrates setting required properties like fieldDataType, fieldIndex, fieldName, and filePath.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdVol/OpenVDBAsset.md#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\ndef OpenVDBAsset \"densityVDB\"\n{\n    token fieldDataType = \"float\"\n    int fieldIndex.timeSamples = {\n        10: 0,\n    }\n    token fieldName = \"density\"\n    asset filePath.timeSamples = {\n        10: @/vdb_test_data/grids.vdb@,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Public Classes List in OpenUSD Schema\nDESCRIPTION: This snippet iterates through a list of public classes and generates a formatted output for each class. It's likely used to create a comprehensive list of available public classes in the OpenUSD schema documentation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/codegenTemplates/generatedSchema.classes.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Public Classes\n{% for publicClass in publicClasses %}\n{{ publicClass }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Creating Matrix4d Attribute in Python\nDESCRIPTION: Python equivalent showing how to create a custom Matrix4d-valued attribute on a prim named 'foo'. Demonstrates attribute creation and identity matrix assignment.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/datatypes.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmat = foo.CreateAttribute(\"myMatrix\", Sdf.ValueTypeNames.Matrix4d)\nif mat:\n   mat.Set(Gf.Matrix4d(1))  # Assign identity matrix\nelse:\n   # error creating the attribute\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimWithDefaultReferenceTarget\nDESCRIPTION: Details the composition results for </PrimWithDefaultReferenceTarget>. The prim stack shows its definition in root.sdf and contribution from a reference to the default prim </Default> in defaultRef.sdf. Child names from the referenced prim are listed.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimWithDefaultReferenceTarget>\n\nPrim Stack:\n    root.sdf             /PrimWithDefaultReferenceTarget\n    defaultRef.sdf       /Default\n\nChild names:\n     ['Default_Child']\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenUSD ts Library Core Components\nDESCRIPTION: Defines the core components of the ts library including dependencies, class files, headers, and Python bindings. Sets up basic library structure and requirements.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/base)\nset(PXR_PACKAGE ts)\n\nset(libs\n    vt\n    gf\n    tf\n)\n\nset(include\n    \"\"\n)\n\nset(privateClasses\n    sample\n)\n\nset(classes\n    binary\n    debugCodes\n    eval\n    knot\n    knotData\n    knotMap\n    raii\n    regressionPreventer\n    spline\n    splineData\n    tangentConversions\n    typeHelpers\n    types\n)\n```\n\n----------------------------------------\n\nTITLE: Resolving Referenced Relationships in Python\nDESCRIPTION: Python code showing how to resolve material binding relationships on a referenced prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nstage = Usd.Stage.Open(\"MarbleCollection.usd\")\ngreenMarbleGeom = stage.GetPrimAtPath(\"/Marble_Collection/Marble_Green/marble_geom\")\nprint(UsdShade.MaterialBindingAPI(greenMarbleGeom).GetDirectBindingRel().GetTargets())\n```\n\n----------------------------------------\n\nTITLE: Defining a USD Manifest with Value Blocks for Interpolation (usda)\nDESCRIPTION: Defines a USD manifest layer (`manifest.usd`) for a value clip set. It specifies value blocks (`None`) for the attribute `a` at times `2` and `3`, indicating these times should derive their values from surrounding clips when interpolation is enabled, rather than having explicitly authored values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/valueClips.md#2025-04-23_snippet_9\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\ndef \"Model\"\n{\n    double a.timeSamples = {\n        2: None,\n        3: None\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Composition Results for /Inherit\nDESCRIPTION: Shows the prim stack and child names for the /Inherit prim which has a single child called CHARACTER.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SubrootReferenceAndVariants2.testenv/baseline/compositionResults_SubrootReferenceAndVariants2.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </Inherit>\n\nPrim Stack:\n    root.sdf             /Inherit\n\nChild names:\n     ['CHARACTER']\n```\n\n----------------------------------------\n\nTITLE: Registering testInvocationErrorInvalidFile Test in CMake\nDESCRIPTION: Registers a Python test named `testInvocationErrorInvalidFile` using `pxr_register_test`. The test executes the `usdfixbrokenpixarschemas` command with an intentionally invalid input file (`invalid.usda`). It specifically checks for failure by setting `EXPECTED_RETURN_CODE` to 1, verifying that the tool correctly handles and reports errors for invalid files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdfixbrokenpixarschemas/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testInvocationErrorInvalidFile\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdfixbrokenpixarschemas invalid.usda\"\n    EXPECTED_RETURN_CODE 1\n)\n```\n\n----------------------------------------\n\nTITLE: USD Prim Stack Example\nDESCRIPTION: Example of how a prim is composed from multiple layers, showing the layer path and prim path contribution.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyRelocationOfPrimFromPayload.testenv/baseline/compositionResults_TrickyRelocationOfPrimFromPayload.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /PayloadedModel\n    model_payload.sdf    /Model\n```\n\n----------------------------------------\n\nTITLE: Defining Spline Test Data for USD Animation Curve (Python)\nDESCRIPTION: This Python snippet creates an instance of TsTest_SplineData, representing a spline animation curve for testing purposes. It configures Hermite interpolation, sets pre/post extrapolation to 'Held', and provides two knots with specific interpolation methods, positions, slopes, and segment lengths using float.fromhex values for precision. The object is suitable for direct use in regression tests of spline handling with no external dependencies beyond the appropriate Ts module types and interfaces.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PostRegressiveNone_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.999999999999ap-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.4cccccccccccdp+0'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for /Permissions/PrivateChild\nDESCRIPTION: Displays the composition results for the child prim path `/Permissions/PrivateChild`. It shows the prim stack indicating that its final definition comes solely from the `ref2.sdf` layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyListEditedTargetPaths.testenv/baseline/compositionResults_TrickyListEditedTargetPaths.txt#2025-04-23_snippet_3\n\nLANGUAGE: usd\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Permissions/PrivateChild>\n\nPrim Stack:\n    ref2.sdf             /PermissionsRef_2/PrivateChild\n```\n\n----------------------------------------\n\nTITLE: USDA Scene with Layer Offset References\nDESCRIPTION: USDA representation of multiple spinning tops with different layer offsets and transformations in a hierarchical scene structure.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_xforms.rst#2025-04-23_snippet_11\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    \"Step 6: Layer offsets and animation\"\n    endTimeCode = 192\n    startTimeCode = 1\n    upAxis = \"Z\"\n)\n\ndef Xform \"Left\"\n{\n    def Xform \"Top\" (\n        prepend references = @./Step5.usda@</Top>\n    )\n    {\n    }\n}\n\ndef Xform \"Middle\"\n{\n    double3 xformOp:translate = (2, 0, 0)\n    uniform token[] xformOpOrder = [\"xformOp:translate\"]\n\n    def Xform \"Top\" (\n        prepend references = @./Step5.usda@</Top> (offset = 96)\n    )\n    {\n    }\n}\n\ndef Xform \"Right\"\n{\n    double3 xformOp:translate = (4, 0, 0)\n    uniform token[] xformOpOrder = [\"xformOp:translate\"]\n\n    def Xform \"Top\" (\n        prepend references = @./Step5.usda@</Top> (scale = 0.25)\n    )\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </RearLegRig/Legs/LeftRig/Leg_bone> in USD\nDESCRIPTION: Displays the composition results for the prim path </RearLegRig/Legs/LeftRig/Leg_bone> from 'root.sdf'. It shows the prim stack (originating from /SymRig/Leg_bone), child names, property names ('bones'), the property stack for 'bones', and its relationship targets, reflecting potential relocations or overrides.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyMultipleRelocations4.testenv/baseline/compositionResults_TrickyMultipleRelocations4.txt#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </RearLegRig/Legs/LeftRig/Leg_bone>\n\nPrim Stack:\n    root.sdf             /SymRig/Leg_bone\n\nChild names:\n     ['Knee_bone', 'Leg_bone']\n\nProperty names:\n     ['bones']\n\nProperty stacks:\n/RearLegRig/Legs/LeftRig/Leg_bone.bones:\n    root.sdf             /SymRig/Leg_bone.bones\n\nRelationship targets:\n/RearLegRig/Legs/LeftRig/Leg_bone.bones:\n    /RearLegRig/Legs/LeftRig\n    /RearLegRig/Legs/LeftRig/Leg_bone\n    /RearLegRig/Legs/LeftRig/Leg_bone/Knee_bone\n    /RearLegRig/Legs/LeftRig/Leg_bone/Knee_bone/Ankle_bone\n```\n\n----------------------------------------\n\nTITLE: Checking GPU and GL Support Requirements for HdSt\nDESCRIPTION: Initial check to determine if the HdSt library should be built based on GPU and GL support flags. If either flag is disabled, the build is skipped.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# GL via GarchGLApi. Once Storm uses only Hgi, remove GL_SUPPORT check.\nif (NOT ${PXR_BUILD_GPU_SUPPORT} OR NOT ${PXR_ENABLE_GL_SUPPORT})\n    message(STATUS\n        \"Skipping ${PXR_PACKAGE} because PXR_BUILD_GPU_SUPPORT is OFF\")\n    return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Loading USD Root Layer\nDESCRIPTION: Indicates the start of the composition process, loading the root layer file named 'root.sdf' located potentially within an 'ExpressionsInReferences' asset path.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ExpressionsInReferences.testenv/baseline/compositionResults_ExpressionsInReferences.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLoading @ExpressionsInReferences/root.sdf@\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for /Model/Class/HighClassStuff\nDESCRIPTION: Displays the composition results for the prim path '/Model/Class/HighClassStuff'. The prim stack indicates that this prim originates from the '/Model{complexity=high}Class/HighClassStuff' path within the 'model.sdf' layer, specifically defined within the 'high' complexity variant.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsInVariants.testenv/baseline/compositionResults_TrickyInheritsInVariants.txt#2025-04-23_snippet_3\n\nLANGUAGE: usd-composition-log\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Model/Class/HighClassStuff>\n\nPrim Stack:\n    model.sdf            /Model{complexity=high}Class/HighClassStuff\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Python Library in PXR Build System\nDESCRIPTION: Defines the main Boost Python library with its dependencies, include directories, public headers, and source files. This comprehensive configuration specifies all components needed to build the library within the OpenUSD project.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/external/boost/python/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_library(python\n    LIBRARIES\n        boost\n        # Use PYTHON_LIBRARIES instead of the Python3::Python target\n        # directly when specifying library dependencies to ensure\n        # PXR_PY_UNDEFINED_DYNAMIC_LOOKUP is respected.\n        ${PYTHON_LIBRARIES}\n\n    INCLUDE_DIRS\n        # Specify PYTHON_INCLUDE_DIRS explicitly to ensure this library\n        # picks up Python headers when PXR_PY_UNDEFINED_DYNAMIC_LOOKUP\n        # is set.\n        ${PYTHON_INCLUDE_DIRS}\n\n    PUBLIC_HEADERS\n        arg_from_python.hpp\n        args.hpp\n        args_fwd.hpp\n        back_reference.hpp\n        base_type_traits.hpp\n        bases.hpp\n        borrowed.hpp\n        call.hpp\n        call_method.hpp\n        cast.hpp\n        class.hpp\n        class_fwd.hpp\n        common.hpp\n        converter/arg_from_python.hpp\n        converter/arg_to_python.hpp\n        converter/arg_to_python_base.hpp\n        converter/as_to_python_function.hpp\n        converter/builtin_converters.hpp\n        converter/constructor_function.hpp\n        converter/context_result_converter.hpp\n        converter/convertible_function.hpp\n        converter/from_python.hpp\n        converter/implicit.hpp\n        converter/obj_mgr_arg_from_python.hpp\n        converter/object_manager.hpp\n        converter/pointer_type_id.hpp\n        converter/pyobject_traits.hpp\n        converter/pyobject_type.hpp\n        converter/pytype_function.hpp\n        converter/pytype_object_mgr_traits.hpp\n        converter/registered.hpp\n        converter/registered_pointee.hpp\n        converter/registrations.hpp\n        converter/registry.hpp\n        converter/return_from_python.hpp\n        converter/rvalue_from_python_data.hpp\n        converter/shared_ptr_deleter.hpp\n        converter/shared_ptr_from_python.hpp\n        converter/shared_ptr_to_python.hpp\n        converter/to_python_function_type.hpp\n        copy_const_reference.hpp\n        copy_non_const_reference.hpp\n        data_members.hpp\n        def.hpp\n        def_visitor.hpp\n        default_call_policies.hpp\n        detail/aix_init_module.hpp\n        detail/api_placeholder.hpp\n        detail/borrowed_ptr.hpp\n        detail/caller.hpp\n        detail/config.hpp\n        detail/construct.hpp\n        detail/convertible.hpp\n        detail/copy_ctor_mutates_rhs.hpp\n        detail/cv_category.hpp\n        detail/dealloc.hpp\n        detail/decorated_type_id.hpp\n        detail/decref_guard.hpp\n        detail/def_helper.hpp\n        detail/def_helper_fwd.hpp\n        detail/defaults_def.hpp\n        detail/defaults_gen.hpp\n        detail/dependent.hpp\n        detail/destroy.hpp\n        detail/enable_if.hpp\n        detail/exception_handler.hpp\n        detail/force_instantiate.hpp\n        detail/get_pointer.hpp\n        detail/if_else.hpp\n        detail/indirect_traits.hpp\n        detail/integer_cast.hpp\n        detail/invoke.hpp\n        detail/is_auto_ptr.hpp\n        detail/is_shared_ptr.hpp\n        detail/is_wrapper.hpp\n        detail/is_xxx.hpp\n        detail/make_keyword_range_fn.hpp\n        detail/map_entry.hpp\n        detail/mpl_lambda.hpp\n        detail/mpl2/and.hpp\n        detail/mpl2/at.hpp\n        detail/mpl2/bool.hpp\n        detail/mpl2/eval_if.hpp\n        detail/mpl2/front.hpp\n        detail/mpl2/identity.hpp\n        detail/mpl2/if.hpp\n        detail/mpl2/int.hpp\n        detail/mpl2/not.hpp\n        detail/mpl2/pop_front.hpp\n        detail/mpl2/push_front.hpp\n        detail/mpl2/or.hpp\n        detail/mpl2/size.hpp\n        detail/msvc_typeinfo.hpp\n        detail/none.hpp\n        detail/not_specified.hpp\n        detail/nullary_function_adaptor.hpp\n        detail/operator_id.hpp\n        detail/overloads_fwd.hpp\n        detail/pointee.hpp\n        detail/prefix.hpp\n        detail/preprocessor.hpp\n        detail/python_type.hpp\n        detail/raw_pyobject.hpp\n        detail/referent_storage.hpp\n        detail/result.hpp\n        detail/scope.hpp\n        detail/sfinae.hpp\n        detail/signature.hpp\n        detail/string_literal.hpp\n        detail/target.hpp\n        detail/translate_exception.hpp\n        detail/type_list.hpp\n        detail/type_list_impl.hpp\n        detail/type_traits.hpp\n        detail/unwind_type.hpp\n        detail/unwrap_type_id.hpp\n        detail/unwrap_wrapper.hpp\n        detail/value_arg.hpp\n        detail/value_is_shared_ptr.hpp\n        detail/value_is_xxx.hpp\n        detail/void_ptr.hpp\n        detail/void_return.hpp\n        detail/wrap_python.hpp\n        detail/wrapper_base.hpp\n        dict.hpp\n        docstring_options.hpp\n        enum.hpp\n        errors.hpp\n        exception_translator.hpp\n        exec.hpp\n        extract.hpp\n        handle.hpp\n        handle_fwd.hpp\n        has_back_reference.hpp\n        implicit.hpp\n        import.hpp\n        init.hpp\n        instance_holder.hpp\n        iterator.hpp\n        list.hpp\n        long.hpp\n        lvalue_from_pytype.hpp\n        make_constructor.hpp\n        make_function.hpp\n        manage_new_object.hpp\n        module.hpp\n        module_init.hpp\n        noncopyable.hpp\n        object/add_to_namespace.hpp\n        object/class.hpp\n        object/class_detail.hpp\n        object/class_metadata.hpp\n        object/class_wrapper.hpp\n        object/enum_base.hpp\n        object/find_instance.hpp\n        object/forward.hpp\n        object/function.hpp\n        object/function_doc_signature.hpp\n        object/function_handle.hpp\n        object/function_object.hpp\n        object/inheritance.hpp\n        object/inheritance_query.hpp\n        object/instance.hpp\n        object/iterator.hpp\n        object/iterator_core.hpp\n        object/life_support.hpp\n        object/make_holder.hpp\n        object/make_instance.hpp\n        object/make_ptr_instance.hpp\n        object/pickle_support.hpp\n        object/pointer_holder.hpp\n        object/py_function.hpp\n        object/stl_iterator_core.hpp\n        object/value_holder.hpp\n        object/value_holder_fwd.hpp\n        object.hpp\n        object_attributes.hpp\n        object_core.hpp\n        object_fwd.hpp\n        object_items.hpp\n        object_operators.hpp\n        object_protocol.hpp\n        object_protocol_core.hpp\n        object_slices.hpp\n        opaque_pointer_converter.hpp\n        operators.hpp\n        other.hpp\n        overloads.hpp\n        override.hpp\n        pointee.hpp\n        proxy.hpp\n        ptr.hpp\n        pure_virtual.hpp\n        raw_function.hpp\n        ref.hpp\n        refcount.hpp\n        reference_existing_object.hpp\n        register_ptr_to_python.hpp\n        return_arg.hpp\n        return_by_value.hpp\n        return_internal_reference.hpp\n        return_opaque_pointer.hpp\n        return_value_policy.hpp\n        scope.hpp\n        self.hpp\n        signature.hpp\n        slice.hpp\n        slice_nil.hpp\n        ssize_t.hpp\n        stl_iterator.hpp\n        str.hpp\n        suite/indexing/container_utils.hpp\n        suite/indexing/detail/indexing_suite_detail.hpp\n        suite/indexing/indexing_suite.hpp\n        suite/indexing/map_indexing_suite.hpp\n        suite/indexing/vector_indexing_suite.hpp\n        tag.hpp\n        to_python_converter.hpp\n        to_python_indirect.hpp\n        to_python_value.hpp\n        tuple.hpp\n        type.hpp\n        type_id.hpp\n        type_list.hpp\n        with_custodian_and_ward.hpp\n        wrapper.hpp\n\n        # These source files are for boost::python's numpy extension.\n        # We do not build these because we don't use this extension\n        # and don't want to add a numpy dependency to the build.\n        #\n        # numpy/config.hpp\n        # numpy/dtype.hpp\n        # numpy/internal.hpp\n        # numpy/invoke_matching.hpp\n        # numpy/matrix.hpp\n        # numpy/ndarray.hpp\n        # numpy/numpy_object_mgr_traits.hpp\n        # numpy/scalars.hpp\n        # numpy/ufunc.hpp\n        # numpy.hpp\n\n    CPPFILES\n        src/converter/arg_to_python_base.cpp\n        src/converter/builtin_converters.cpp\n        src/converter/from_python.cpp\n        src/converter/registry.cpp\n        src/converter/type_id.cpp\n        src/dict.cpp\n        src/errors.cpp\n        src/exec.cpp\n        src/import.cpp\n        src/list.cpp\n        src/long.cpp\n        src/module.cpp\n        src/object/class.cpp\n        src/object/enum.cpp\n        src/object/function.cpp\n        src/object/function_doc_signature.cpp\n        src/object/inheritance.cpp\n        src/object/iterator.cpp\n        src/object/life_support.cpp\n        src/object/pickle_support.cpp\n        src/object/stl_iterator.cpp\n        src/object_operators.cpp\n        src/object_protocol.cpp\n        src/slice.cpp\n        src/str.cpp\n        src/tuple.cpp\n        src/wrapper.cpp\n\n        # These source files are for boost::python's numpy extension.\n        # We do not build these because we don't use this extension\n        # and don't want to add a numpy dependency to the build.\n        #\n        # src/numpy/dtype.cpp\n        # src/numpy/matrix.cpp\n        # src/numpy/ndarray.cpp\n        # src/numpy/numpy.cpp\n        # src/numpy/scalars.cpp\n        # src/numpy/ufunc.cpp\n\n    DISABLE_PRECOMPILED_HEADERS\n)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PI/Sibling Prim\nDESCRIPTION: Shows the prim stack for the composed prim at path </PI/Sibling>, inheriting from /PIS/Sibling and /PISI/Sibling.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PI/Sibling>\n\nPrim Stack:\n    root.sdf             /PI/Sibling\n    root.sdf             /PIS/Sibling\n    root.sdf             /PISI/Sibling\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </_X/_Y> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </_X/_Y>. The prim stack includes /_X/_Y from 'root.sdf' and /Ref from 'ref.sdf'. The resolved child prim name is 'C'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </_X/_Y>\n\nPrim Stack:\n    root.sdf             /_X/_Y\n    ref.sdf              /Ref\n\nChild names:\n     ['C']\n```\n\n----------------------------------------\n\nTITLE: USD Shape Composition Results\nDESCRIPTION: Final composition results showing how shape prims are resolved in the hierarchy.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantWeakerSelection4.testenv/baseline/compositionResults_TrickyVariantWeakerSelection4.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </shape>\n\nPrim Stack:\n    root.sdf             /shape\n    root.sdf             /bob{geotype=cube}geom\n    geo.sdf              /bob_root_cube\n\nChild names:\n     ['bob_body']\n\n------------------------------------------------------------------------\nResults for composing </shape/bob_body>\n\nPrim Stack:\n    geo.sdf              /bob_root_cube/bob_body\n```\n\n----------------------------------------\n\nTITLE: Attempting to Define a Prim at a Deleted Path\nDESCRIPTION: Demonstrates that you cannot define a new prim at a deleted or moved target location due to relocates.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# Continuing from the earlier Python code, now try and define a prim at the\n# deleted /RootPrim/ChildInRef path. This will result in a \n# \"Failed to define UsdPrim\" error.\nstage.DefinePrim('/RootPrim/ChildInRef')\n```\n\n----------------------------------------\n\nTITLE: Defining Class Prim in USDA\nDESCRIPTION: Example showing how to define a class prim with a radius property that can be inherited by other prims.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_10\n\nLANGUAGE: usda\nCODE:\n```\nclass \"_class_Ball\" {\n    double radius = 50\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SubsetParentIsImageable Validator\nDESCRIPTION: Documentation for a validator that ensures GeomSubset prims are direct descendants of an Imageable prim, maintaining proper hierarchical relationships.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[usdGeomValidators:SubsetParentIsImageable]:\n\tDoc: Validates that GeomSubset prims are direct descendants of an Imageable prim.\n\tKeywords: UsdGeomValidators, UsdGeomSubset\n\tSchemaTypes: UsdGeomSubset\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Configuring AR Library Build in OpenUSD\nDESCRIPTION: Defines the main AR library configuration including dependencies, public classes, headers, and Python bindings. Sets up core functionality for asset resolution in OpenUSD.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/ar/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\npxr_library(ar\n    LIBRARIES\n        arch\n        js\n        tf\n        plug\n        vt\n        ${TBB_tbb_LIBRARY}\n\n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n\n    PUBLIC_CLASSES\n        asset\n        assetInfo\n        defaultResolver\n        defaultResolverContext\n        definePackageResolver\n        defineResolver\n        filesystemAsset\n        filesystemWritableAsset\n        inMemoryAsset\n        notice\n        packageResolver\n        packageUtils\n        resolvedPath\n        resolver\n        resolverContext\n        resolverContextBinder\n        resolverScopedCache\n        timestamp\n        writableAsset\n\n    PUBLIC_HEADERS\n        api.h\n        ar.h\n        defineResolverContext.h\n        threadLocalScopedCache.h\n\n    PRIVATE_HEADERS\n        debugCodes.h\n        testenv/TestArURIResolver_plugin.h\n\n    CPPFILES\n        debugCodes.cpp\n\n    PYTHON_PUBLIC_CLASSES\n        pyResolverContext\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapAsset.cpp\n        wrapAssetInfo.cpp\n        wrapDefaultResolverContext.cpp\n        wrapDefaultResolver.cpp\n        wrapNotice.cpp\n        wrapPackageUtils.cpp\n        wrapResolvedPath.cpp\n        wrapResolverContextBinder.cpp\n        wrapResolverContext.cpp\n        wrapResolverScopedCache.cpp\n        wrapResolver.cpp\n        wrapTimestamp.cpp\n\n    PYMODULE_FILES\n        __init__.py\n\n    RESOURCE_FILES\n        plugInfo.json\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Spline and Knot Configuration in YAML\nDESCRIPTION: Spline configuration specifying hermite settings, extrapolation methods, and knot points with their respective parameters including slopes and lengths\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/MoveStartLimitOpposite_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  0.400000: 0.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.000000, postLen 0.799994, auto false / false\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.199994, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Configuring Sdr Library Build in CMake\nDESCRIPTION: This snippet defines the Sdr library build configuration, including its dependencies, public headers, classes, and Python module components. It uses the pxr_library CMake function to set up the library.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/sdr/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE sdr)\n\npxr_library(sdr\n    LIBRARIES\n        arch\n        plug\n        trace\n        tf\n        vt\n        ar\n        ndr\n        sdf\n\n    PUBLIC_HEADERS\n        api.h\n        sdfTypeIndicator.h\n        shaderNodeDiscoveryResult.h\n\n    PUBLIC_CLASSES\n        debugCodes\n        declare\n        discoveryPlugin\n        filesystemDiscovery\n        filesystemDiscoveryHelpers\n        parserPlugin\n        registry\n        shaderMetadataHelpers\n        shaderNode\n        shaderProperty\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapDeclare.cpp\n        wrapDiscoveryPlugin.cpp\n        wrapFilesystemDiscovery.cpp\n        wrapFilesystemDiscoveryHelpers.cpp\n        wrapRegistry.cpp\n        wrapSdfTypeIndicator.cpp\n        wrapShaderNode.cpp\n        wrapShaderNodeDiscoveryResult.cpp\n        wrapShaderProperty.cpp\n\n    PYMODULE_FILES\n        __init__.py\n        shaderParserTestUtils.py\n\n    RESOURCE_FILES\n        plugInfo.json\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Running usdgenschemafromsdr (Bash)\nDESCRIPTION: Example usage of the usdgenschemafromsdr script, which generates schema files for sdrNodes provided in a JSON config file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toolset.rst#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nusdgenschemafromsdr\n```\n\n----------------------------------------\n\nTITLE: Using usdrecord to Generate Images from USD Stages\nDESCRIPTION: usdrecord generates images or sequences of images from a USD stage using Hydra. It takes a file path and various options for image generation, camera selection, and output formatting.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toolset.rst#2025-04-23_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nusdrecord [-h] [-o FILENAME] [-f FORMAT] [--camera CAMERA]\n          [--complexity {low,medium,high,very high}]\n          [--renderer {GL,Embree,Prman}] [--imageWidth IMAGEWIDTH]\n          [--imageHeight IMAGEHEIGHT] [-m METADATA [METADATA ...]]\n          [--purposes {render,proxy,guide} [{render,proxy,guide} ...]]\n          [--colorCorrectionMode {disabled,sRGB,openColorIO}]\n          [--ocioConfig OCIOCONFIG] [--frameRange START END STEP]\n          [--singleFrame SINGLEFRAME]\n          FILE\n```\n\n----------------------------------------\n\nTITLE: Loading USD Stage and Initial Layer Stack (USD Output)\nDESCRIPTION: Indicates the start of the USD composition process, loading the root layer file 'root.sdf' and showing the initial layer stack containing only this root layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInconsistentProperties.testenv/baseline/compositionResults_ErrorInconsistentProperties.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLoading @ErrorInconsistentProperties/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Composing `/implementation` Prim in USD\nDESCRIPTION: Shows the composition results for the base prim `/implementation`. Its stack includes the variant `implementation{testVariantSet=testVariant}`. It defines the `variantAttr` property, sourced from the selected variant.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndVariants2.testenv/baseline/compositionResults_SpecializesAndVariants2.txt#2025-04-23_snippet_5\n\nLANGUAGE: usd\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </implementation>\n\nPrim Stack:\n    root.sdf             /implementation\n    root.sdf             /implementation{testVariantSet=testVariant}\n\nVariant Selections:\n    {testVariantSet = testVariant}\n\nProperty names:\n     ['variantAttr']\n\nProperty stacks:\n/implementation.variantAttr:\n    root.sdf             /implementation{testVariantSet=testVariant}.variantAttr\n```\n\n----------------------------------------\n\nTITLE: Creating API Documentation Links in RST Documentation\nDESCRIPTION: Examples of how to link to Doxygen API documentation using the custom :usdcpp: role in reStructuredText for USD documentation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/README.md#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n:usdcpp:`UsdStage` OR\n:usdcpp:`Custom Link Text <UsdStage>`\n```\n\n----------------------------------------\n\nTITLE: Caching Color Space Lookups for Performance in C++\nDESCRIPTION: Shows how to use color space lookup caching for performance optimization in render loops or other performance-critical sections.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/doxygen/architecture-guides/color_programmers_guide.md#2025-04-23_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nUsdColorSpaceAPI::ColorSpaceHashCache cache;\n\n// Later in your render loop:\nfor (const auto& attr : attributes) {\n    GfColorSpace colorSpace = UsdColorSpaceAPI::ComputeColorSpace(attr, &cache);\n    // Use colorSpace...\n}\n```\n\n----------------------------------------\n\nTITLE: Generated USD Stage with Template Value Clip Metadata (usda)\nDESCRIPTION: Shows the `result.usda` file generated by `usdstitchclips` using template metadata. The `clips` dictionary contains template-specific keys like `templateAssetPath`, `templateStartTime`, `templateEndTime`, and `templateStride` to define the sequence of clips dynamically.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/valueClips.md#2025-04-23_snippet_15\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    endTimeCode = 103\n    startTimeCode = 101\n    subLayers = [\n        @./result.topology.usda@\n    ]\n)\n\ndef \"World\" \n{\n    over \"model\" (\n        clips = {\n            dictionary default = {\n                string templateAssetPath = \"clip.#.usd\"\n                double templateStartTime = 101\n                double templateEndTime = 103\n                double templateStride = 1\n                asset manifestAssetPath = @./result.topology.usda@\n                string primPath = \"/World/model\"\n            }\n        }\n    )\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Geometry Definition in USD\nDESCRIPTION: Removes the definition of a cone geometry within an Xform in the USD scene.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddiff/testenv/testDiffToolIterateUsdz/baseline/iterate_usd.txt#2025-04-23_snippet_2\n\nLANGUAGE: USD\nCODE:\n```\n-    def Xform \"geom\"\n-    {\n-        def Cone \"cone1\"\n-        {\n-            double height = 4\n-            float[] primvars:displayOpacity = [0.4]\n-            double3 xformOp:rotateXYZ = (45, 0, 0)\n-            double3 xformOp:translate = (0, 0, 3)\n-            uniform token[] xformOpOrder = [\"xformOp:rotateXYZ\", \"xformOp:translate\"]\n-        }\n-    }\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenUSD Library in CMake\nDESCRIPTION: Sets up the main OpenUSD library with its dependencies, public and private classes, Python bindings, and resource files. It also configures optional components like usdGenSchema and usdInitSchema based on Python and Jinja2 availability.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usd)\n\npxr_library(usd\n    INCLUDE_SCHEMA_FILES\n\n    LIBRARIES\n        arch\n        kind\n        pcp\n        sdf\n        ar\n        plug\n        tf\n        trace\n        ts\n        vt\n        work\n        ${TBB_tbb_LIBRARY}\n\n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n\n    PUBLIC_CLASSES\n        attribute\n        attributeQuery\n        collectionMembershipQuery\n        collectionPredicateLibrary\n        common\n        crateInfo\n        debugCodes\n        editContext\n        editTarget\n        errors\n        flattenUtils\n        inherits\n        interpolation\n        namespaceEditor\n        notice\n        object\n        payloads\n        prim\n        primCompositionQuery\n        primData\n        primDataHandle\n        primDefinition\n        primFlags\n        primRange\n        primTypeInfo\n        property\n        references\n        relationship\n        resolveInfo\n        resolveTarget\n        resolver\n        schemaBase\n        schemaRegistry\n        specializes\n        stage\n        stageCache\n        stageCacheContext\n        stageLoadRules\n        stagePopulationMask\n        timeCode\n        usdFileFormat\n        usdaFileFormat\n        usdcFileFormat\n        usdzFileFormat\n        variantSets\n        zipFile\n\n    PYTHON_PUBLIC_CLASSES\n        pyEditContext\n        pyConversions\n\n    PRIVATE_CLASSES\n        clip\n        clipCache\n        clipSet\n        clipSetDefinition\n        crateData\n        crateFile\n        instanceCache\n        instanceKey\n        integerCoding\n        interpolators\n        primTypeInfoCache\n        usdzResolver\n        valueUtils\n\n    PUBLIC_HEADERS\n        api.h\n\n    PRIVATE_HEADERS\n        crateDataTypes.h\n        crateValueInliners.h\n        listEditImpl.h\n        wrapUtils.h\n        testenv/TestUsdResolverChangedResolver.h\n\n    PYMODULE_CPPFILES\n        wrapAttribute.cpp\n        wrapAttributeQuery.cpp\n        wrapCollectionMembershipQuery.cpp\n        wrapCommon.cpp\n        wrapCrateInfo.cpp\n        wrapEditContext.cpp\n        wrapEditTarget.cpp\n        wrapFlattenUtils.cpp\n        wrapInherits.cpp\n        wrapInterpolation.cpp\n        wrapNamespaceEditor.cpp\n        wrapNotice.cpp\n        wrapObject.cpp\n        wrapPayloads.cpp\n        wrapPrim.cpp\n        wrapPrimCompositionQuery.cpp\n        wrapPrimDefinition.cpp\n        wrapPrimFlags.cpp\n        wrapPrimRange.cpp\n        wrapPrimTypeInfo.cpp\n        wrapProperty.cpp\n        wrapReferences.cpp\n        wrapRelationship.cpp\n        wrapResolveInfo.cpp\n        wrapResolveTarget.cpp\n        wrapSchemaBase.cpp\n        wrapSchemaRegistry.cpp\n        wrapSpecializes.cpp\n        wrapStage.cpp\n        wrapStageCache.cpp\n        wrapStageCacheContext.cpp\n        wrapStageLoadRules.cpp\n        wrapStagePopulationMask.cpp\n        wrapTimeCode.cpp\n        wrapUsdFileFormat.cpp\n        wrapUtils.cpp\n        wrapVariantSets.cpp\n        wrapVersion.cpp \n        wrapZipFile.cpp\n\n    PYMODULE_FILES\n        __init__.py\n        usdGenSchema.py\n\n    RESOURCE_FILES\n        codegenTemplates/__init__.py\n        codegenTemplates/api.h\n        codegenTemplates/CMakeLists.txt\n        codegenTemplates/generatedSchema.classes.txt\n        codegenTemplates/generatedSchema.module.h\n        codegenTemplates/module.cpp\n        codegenTemplates/moduleDeps.cpp\n        codegenTemplates/plugInfo.json:no_subst\n        codegenTemplates/schema.usda\n        codegenTemplates/schemaUserDoc.usda\n        codegenTemplates/schemaClass.cpp\n        codegenTemplates/schemaClass.h\n        codegenTemplates/tokens.cpp\n        codegenTemplates/tokens.h\n        codegenTemplates/wrapSchemaClass.cpp\n        codegenTemplates/wrapTokens.cpp\n\n    DOXYGEN_FILES\n        docs/advancedFeatures.md\n        docs/authoringEditing.md\n        docs/bestPractices.md\n        docs/commonIdioms.md\n        docs/datatypes.md\n        docs/dynamicFileFormat.md\n        docs/front.md\n        docs/generatingSchemas.md\n        docs/instancing.md\n        docs/multiThreading.md\n        docs/objectModel.md\n        docs/propertiesOfSceneDescription.md \n        docs/utf8Overview.md\n        docs/valueClips.md\n        docs/images/instancing/Instancing_Example.png\n        docs/images/instancing/Nested_Instancing_Example.png\n        docs/images/instancing/Relationship_Example.png\n        docs/images/instancing/Uninstanced_vs_Instanced.png\n        examples_usd.cpp\n)\n\nif (NOT PXR_ENABLE_PYTHON_SUPPORT)\n    message(STATUS \"Skipping building usdGenSchema, Python modules required.\")\nelseif (NOT JINJA2_FOUND)\n    message(WARNING \"Skipping building usdGenSchema due to missing dependency: Jinja2\")\nelse()\n    pxr_python_bin(usdGenSchema\n        DEPENDENCIES\n            tf\n            sdf\n            usd\n    )\nendif()\n\nif (NOT PXR_ENABLE_PYTHON_SUPPORT)\n    message(STATUS \"Skipping building usdInitSchema, Python modules required.\")\nelseif (NOT JINJA2_FOUND)\n    message(WARNING \"Skipping building usdInitSchema due to missing dependency: Jinja2\")\nelse()\n    pxr_python_bin(usdInitSchema\n        DEPENDENCIES\n            usd\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Bezier Animation Knot\nDESCRIPTION: Configuration for a Bezier animation knot with time and value parameters, along with tangent controls for interpolation. This defines the curve characteristics at a specific keyframe.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_77\n\nLANGUAGE: plaintext\nCODE:\n```\n  curve type Bezier\n  time 167\n  value 28.8\n  next interp Curve\n  pre-tan width 16.8\n  pre-tan slope 0.4\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Listing Public Classes for OpenUSD Animation Schema\nDESCRIPTION: Enumerates the public classes that are part of the OpenUSD animation schema, including core concepts like animation, binding API, blend shapes, root, skeleton, and tokens.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdSkel/generatedSchema.classes.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Public Classes\nanimation\nbindingAPI\nblendShape\nroot\nskeleton\ntokens\n```\n\n----------------------------------------\n\nTITLE: Overriding a Built-in API Schema Property in USDA\nDESCRIPTION: This example demonstrates defining a custom API schema (`MyCustomAPI`) in `.usda` format. It includes the built-in `CollectionAPI` (instanced as `myColl`) and overrides the `collection:myColl:includeRoot` attribute. By setting `apiSchemaOverride = true` in `customData`, it changes the fallback value of `includeRoot` to `true` (1) specifically for this schema, differing from `CollectionAPI`'s default fallback of `false`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/generatingSchemas.md#2025-04-23_snippet_4\n\nLANGUAGE: usda\nCODE:\n```\nclass \"MyCustomAPI\" (\n    prepend apiSchemas = [\"CollectionAPI:myColl\"]\n) {\n    # Override CollectionAPI:myColl to set the fallback for includeRoot to true\n    # instead of using CollectionAPI's normal fallback of false.\n    uniform bool collection:myColl:includeRoot = 1 (\n        customData = {\n            bool apiSchemaOverride = true\n        }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Removed Cone Geometry Definition\nDESCRIPTION: Removal of a cone geometry definition including transform operations and opacity settings\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddiff/testenv/testDiffToolIterateUsdz/baseline/iterate_usd_crate.txt#2025-04-23_snippet_2\n\nLANGUAGE: usda\nCODE:\n```\ndef Xform \"geom\"\n{\n    def Cone \"cone1\"\n    {\n        double height = 4\n        float[] primvars:displayOpacity = [0.4]\n        double3 xformOp:rotateXYZ = (45, 0, 0)\n        double3 xformOp:translate = (0, 0, 3)\n        uniform token[] xformOpOrder = [\"xformOp:rotateXYZ\", \"xformOp:translate\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining USDA Syntax Role in Sphinx RST\nDESCRIPTION: Creates a custom role 'usda' for inline USDA syntax formatting in Sphinx documentation. Uses monospace font. Used with the syntax :usda:`syntax`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/rolesAndUtils.rst#2025-04-23_snippet_8\n\nLANGUAGE: rst\nCODE:\n```\n.. role:: usda\n   :class: mono\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Composition Result for /Instance_2\nDESCRIPTION: Shows the resulting prim stack after composing the prim at path '/Instance_2'. Composition involves instancing, referencing ('ref.sdf'), specialization, and inheritance, drawing opinions from both 'root.sdf' and 'ref.sdf'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicSpecializesAndInherits.testenv/baseline/compositionResults_BasicSpecializesAndInherits.txt#2025-04-23_snippet_6\n\nLANGUAGE: log\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Instance_2>\n\nPrim Stack:\n    root.sdf             /Instance_2\n    ref.sdf              /Ref\n    root.sdf             /Specializes_2\n    root.sdf             /Inherits_2\n    ref.sdf              /Specializes_2\n    ref.sdf              /Inherits_2\n```\n\n----------------------------------------\n\nTITLE: Character Animation and Rig Composition Details\nDESCRIPTION: Details the composition of animation controls and rig structure including leg variant selections and property inheritance.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpookyVariantSelectionInClass.testenv/baseline/compositionResults_TrickySpookyVariantSelectionInClass.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </Char/Anim>\n\nPrim Stack:\n    CharRig.sdf          /CharRig/Anim\n\nChild names:\n     ['LeftLeg', 'RightLeg']\n\n------------------------------------------------------------------------\nResults for composing </Char/Anim/LeftLeg>\n\nPrim Stack:\n    LegRig.sdf           /LegRig{LegRigStyle=1Leg}Anim\n\nProperty names:\n     ['avarFor1LegStyle']\n\nProperty stacks:\n/Char/Anim/LeftLeg.avarFor1LegStyle:\n    LegRig.sdf           /LegRig{LegRigStyle=1Leg}Anim.avarFor1LegStyle\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition Result for /DeleteRefs1\nDESCRIPTION: Details the composition results for the prim `/DeleteRefs1`. It shows a simplified Prim Stack compared to `/AddRefs1`, indicating that reference deletion operations have occurred. It lists the contributing layers (`sub.sdf`, `base.sdf`, `ref.sdf`) and the single remaining reference to `/Ref` with its effective time offset and scale.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ReferenceListOpsWithOffsets.testenv/baseline/compositionResults_ReferenceListOpsWithOffsets.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </DeleteRefs1>\n\nPrim Stack:\n    sub.sdf              /DeleteRefs1\n    base.sdf             /DeleteRefs1\n    ref.sdf              /Ref\n\nTime Offsets:\n    root.sdf             /DeleteRefs1    root       (offset=0.00, scale=1.00)\n        sub.sdf                          sublayer   (offset=10.00, scale=2.00)\n        sub_48tcps.sdf                   sublayer   (offset=0.00, scale=0.50)\n    ref.sdf              /Ref            reference  (offset=100.00, scale=1.00)\n```\n\n----------------------------------------\n\nTITLE: USD Prim Composition for /A\nDESCRIPTION: Details the prim stack, variant selections, child names, and property stacks for prim /A including variant set 'vset1'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantOverrideOfFallback.testenv/baseline/compositionResults_TrickyVariantOverrideOfFallback.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /A\n    root.sdf             /A{vset1=selection}\n    root.sdf             /B\n    root.sdf             /B{vset2=selection}\n\nVariant Selections:\n    {vset1 = selection}\n    {vset2 = selection}\n\nChild names:\n     ['Child']\n\nProperty names:\n     ['result']\n\nProperty stacks:\n/A.result:\n    root.sdf             /A{vset1=selection}.result\n```\n\n----------------------------------------\n\nTITLE: Defining Animated Volume with Time-Sampled VDB Assets\nDESCRIPTION: Example demonstrating how to create a Volume with animated field data by setting time samples on the filePath attribute of an OpenVDBAsset field.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdVol/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: code\nCODE:\n```\ndef Volume \"wisp\"\n{\n    float3[] extent = [(-57, -91, -44), (57, 31, -23)]\n\n    rel field:density = </wisp/density>\n\n    def OpenVDBAsset \"density\"\n    {\n        asset filePath.timeSamples = {\n            101: @./wisp_01.101.vdb@,\n            102: @./wisp_01.102.vdb@,\n            103: @./wisp_01.103.vdb@,\n            104: @./wisp_01.104.vdb@,\n        }\n        token fieldName = \"density\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Prim /Root in USD\nDESCRIPTION: Shows the composition results for the prim path `/Root`. It details the prim stack, originating from `root.sdf`, `A.sdf`, and `B.sdf` through references and sublayers. The time offsets for each contributing layer specification are listed, along with the names of direct child prims.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicTimeOffset.testenv/baseline/compositionResults_BasicTimeOffset.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </Root>\n\nPrim Stack:\n    root.sdf             /Root\n    A.sdf                /Model\n    B.sdf                /Model\n\nTime Offsets:\n    root.sdf             /Root           root       (offset=0.00, scale=1.00)\n    A.sdf                /Model          reference  (offset=10.00, scale=1.00)\n        B.sdf                            sublayer   (offset=20.00, scale=1.00)\n\nChild names:\n     ['Anim', 'Frame']\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic HdSt Test Programs\nDESCRIPTION: Defines basic test programs for the HdSt library that don't require specific system dependencies. These tests validate basic functionality like qualifiers and drawing capabilities.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testHdStQualifiers\n    LIBRARIES\n        hdSt\n        hgi\n        hio\n        hd\n    CPPFILES\n        testenv/testHdStQualifiers.cpp\n)\n\nif (X11_FOUND OR APPLE)\npxr_build_test(testHdStBasicDrawing\n    LIBRARIES\n        hdSt\n        hd\n        garch\n        glf\n    CPPFILES\n        testenv/testHdStBasicDrawing.cpp\n)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Loading USD Layer and Initial Stack\nDESCRIPTION: Indicates the USD layer file being loaded (`@SpecializesAndVariants2/root.sdf@`) and shows the initial layer stack, which consists solely of `root.sdf` in this case.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndVariants2.testenv/baseline/compositionResults_SpecializesAndVariants2.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLoading @SpecializesAndVariants2/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n```\n\n----------------------------------------\n\nTITLE: Configuring HgiGL Library Build\nDESCRIPTION: Defines the core HgiGL library build configuration including dependencies, class files, and resource files. Sets up the main library structure with public and private components.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hgiGL/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\npxr_library(hgiGL\n    LIBRARIES\n        arch\n        garch\n        hgi\n        tf\n        trace\n\n    PRIVATE_CLASSES\n        conversions\n        diagnostic\n        scopedStateHolder\n        shaderGenerator\n        shaderSection\n\n    PUBLIC_CLASSES\n        blitCmds\n        buffer\n        capabilities\n        computeCmds\n        computePipeline\n        contextArena\n        debugCodes\n        device\n        garbageCollector\n        graphicsCmds\n        graphicsPipeline\n        hgi\n        ops\n        resourceBindings\n        sampler\n        shaderFunction\n        shaderProgram\n        texture\n\n    PUBLIC_HEADERS\n        api.h\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for /Model/Scope\nDESCRIPTION: Shows the complex composition results for the prim path '/Model/Scope'. The extensive prim stack reveals contributions from base definitions, class inherits ('/Model/Class'), variant selections ('complexity=high'), and references ('ref.sdf'). It lists the combined child prims resulting from these various sources.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsInVariants.testenv/baseline/compositionResults_TrickyInheritsInVariants.txt#2025-04-23_snippet_4\n\nLANGUAGE: usd-composition-log\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Model/Scope>\n\nPrim Stack:\n    model.sdf            /Model/Scope\n    model.sdf            /Model/Class\n    model.sdf            /Model{complexity=high}Class\n    ref.sdf              /RefFromHighClass\n    model.sdf            /Model{complexity=high}Scope\n    ref.sdf              /RefFromHighScope\n\nChild names:\n     ['RefFromHighScopeStuff', 'HighScopeStuff', 'RefFromHighClassStuff', 'HighClassStuff']\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimWithSelfReference/InternalSublayerReference_Child\nDESCRIPTION: Displays the composition results for the child prim path </PrimWithSelfReference/InternalSublayerReference_Child>. The prim stack shows its origin from the internally referenced prim </InternalSublayerReference> defined in sublayer.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimWithSelfReference/InternalSublayerReference_Child>\n\nPrim Stack:\n    sublayer.sdf         /InternalSublayerReference/InternalSublayerReference_Child\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </RefToRoot/_Y/C> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </RefToRoot/_Y/C>. The prim stack contributions come from /Ref/C and /_G within 'ref.sdf', mirroring the composition of </Root/_Y/C>. The resolved child prim names are '_Z' and 'D'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </RefToRoot/_Y/C>\n\nPrim Stack:\n    ref.sdf              /Ref/C\n    ref.sdf              /_G\n\nChild names:\n     ['_Z', 'D']\n```\n\n----------------------------------------\n\nTITLE: Shader Property Stack Composition\nDESCRIPTION: Shows the property stack composition for the BGVariant_Surface shader's active binding.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantSelectionInVariant.testenv/baseline/compositionResults_TrickyVariantSelectionInVariant.txt#2025-04-23_snippet_3\n\nLANGUAGE: usd\nCODE:\n```\nProperty stacks:\n/SlugJ/Shaders/BGVariant_Surface.activeBinding:\n    SlugJ_shaderDisplayDefs.sdf /ShaderBindingVariants{shaderBindingVariant=Wet}Shaders/BGVariant_Surface.activeBinding\n```\n\n----------------------------------------\n\nTITLE: Converting USD to Alembic Format using usdcat\nDESCRIPTION: This command uses the usdcat tool to convert a USD file (hello.usda) to an Alembic file (hello.abc).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/plugins_alembic.rst#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ usdcat hello.usda --out hello.abc\n```\n\n----------------------------------------\n\nTITLE: Updated Resolve Functions - C++\nDESCRIPTION: Modified resolve functions that use the new ArIdentifier and ArResolvedPath types with optional asset info.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_ar2.rst#2025-04-23_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nArResolvedPath Resolve(\n    const ArIdentifier& identifier,\n    ArAssetInfo* assetInfo = nullptr) const;\n\nArResolvedPath ResolveForNewAsset(\n    const ArIdentifier& identifier,\n    ArAssetInfo* assetInfo = nullptr) const;\n```\n\n----------------------------------------\n\nTITLE: Defining Simple USD Geometry in usda Format\nDESCRIPTION: This code snippet demonstrates creating a simple USD file containing a sphere. This is saved as 'hello.usda' and will be used to demonstrate conversion to Alembic format.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/plugins_alembic.rst#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\ndef Xform \"hello\" \n{\n    def Sphere \"world\"\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: USD Stage after BlockPrimvar()\nDESCRIPTION: Shows the resulting USD representation after using BlockPrimvar(). Both displayColor and its indices are set to None.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/primvars.rst#2025-04-23_snippet_13\n\nLANGUAGE: usda\nCODE:\n```\ndef Mesh \"faceVarying\"\n{\n    float3[] extent = [(-1, 0, 0), (1, 1, 0)]\n    int[] faceVertexCounts = [4, 4]\n    int[] faceVertexIndices = [3, 2, 1, 0, 5, 4, 2, 3]\n    point3f[] points = [(-1, 0, 0), (-1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 1, 0), (1, 0, 0)]\n    color3f[] primvars:displayColor = None (\n        interpolation = \"faceVarying\"\n    )\n    int[] primvars:displayColor:indices = None\n    double3 xformOp:translate = (0, 0, -10)\n    uniform token[] xformOpOrder = [\"xformOp:translate\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spline and Knot Data in Python\nDESCRIPTION: This snippet defines the configuration for a spline, including its type, extrapolation methods, and knot data with timing, slope, and length information.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/NoopKeepStart_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSpline:\n  hermite False\n  preExtrap Held\n  postExtrap Held\nKnots:\n  0.000000: 0.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.000000, postLen 0.800000, auto False / False\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.800000, postLen 0.000000, auto False / False\n```\n\n----------------------------------------\n\nTITLE: Configuring Graphics Backend Support\nDESCRIPTION: Conditionally adds source files, headers, and libraries based on which graphics backends (OpenGL, Vulkan, Metal) are enabled. Includes special handling for Metal on Apple platforms.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hgiInterop/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (PXR_ENABLE_GL_SUPPORT)\n    list(APPEND optionalCppFiles opengl.cpp)\n    list(APPEND optionalPrivateHeaders opengl.h)\nendif()\n\nif (PXR_ENABLE_VULKAN_SUPPORT)\n    list(APPEND optionalLibraries hgiVulkan)\n    list(APPEND optionalCppFiles vulkan.cpp)\n    list(APPEND optionalPrivateHeaders vulkan.h)\nendif()\n\nif (PXR_ENABLE_METAL_SUPPORT)\n    add_compile_options(-x objective-c++)\n    list(APPEND optionalLibraries hgiMetal)\nendif()\n\nif (PXR_ENABLE_METAL_SUPPORT AND NOT PXR_APPLE_EMBEDDED)\n    list(APPEND optionalLibraries \"-framework Foundation\")\n    list(APPEND optionalLibraries \"-framework CoreVideo\")\n    list(APPEND optionalCppFiles metal.mm)\n    list(APPEND optionalPrivateHeaders metal.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Tapered Cylinder in OpenUSD\nDESCRIPTION: This snippet defines the topology, points, and normals for a tapered cylinder with specified dimensions. It uses catmullClark subdivision and defines the mesh structure.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/geomUtil/testenv/testMeshGenerators/baseline/generatedMeshes_open.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nbottomRadius = 0.5\ntopRadius = 0.3\nheight = 2\nsweep = 120\n\nTopology = (\n  rightHanded,\n  catmullClark,\n  ([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]),\n  ([2, 1, 0, 3, 2, 0, 4, 3, 0, 5, 4, 0, 6, 5, 0, 7, 6, 0, 8, 7, 0, 9, 8, 0, 10, 9, 0, 11, 10, 0, 12, 13, 24, 23, 13, 14, 25, 24, 14, 15, 26, 25, 15, 16, 27, 26, 16, 17, 28, 27, 17, 18, 29, 28, 18, 19, 30, 29, 19, 20, 31, 30, 20, 21, 32, 31, 21, 22, 33, 32, 34, 35, 45, 35, 36, 45, 36, 37, 45, 37, 38, 45, 38, 39, 45, 39, 40, 45, 40, 41, 45, 41, 42, 45, 42, 43, 45, 43, 44, 45]),\n  ([])\n)\n\nPoints = [\n  # ... (list of point coordinates)\n]\n\nNormals = [\n  # ... (list of normal vectors)\n]\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice (Plaintext)\nDESCRIPTION: This is the standard boilerplate text recommended by the Apache License Version 2.0 appendix. It should be included in the comments of source files, typically at the top, with placeholders `[yyyy]` and `[name of copyright owner]` replaced. It declares the copyright and licensing terms under the Apache License 2.0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdviewq/fonts/Roboto/LICENSE.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Running sdfdump (Bash)\nDESCRIPTION: Example usage of the sdfdump command-line tool, which provides information on Sdf Layers, the containers for USD data.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toolset.rst#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsdfdump myLayer.usd\n```\n\n----------------------------------------\n\nTITLE: Basic Material Collection Binding in USD\nDESCRIPTION: Demonstrates basic material binding in USD using collections for a set of office materials, including default material fallback and collection-based bindings for pencil erasers and shafts.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdshade.rst#2025-04-23_snippet_1\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\nover \"Office_set\"\n{\n    def Scope \"Materials\"\n    {\n        def Material \"Default\" { ... }\n        def Material \"PinkPearl\" { ... }\n        def Material \"YellowPaint\" { ... }\n\t\t...\n    }\n\n    ...\n\n    over \"Desk_Assembly\"\n    {\n\t\trel material:binding = </Office_set/Materials/Default>\n\t\trel material:binding:collection:Erasers = [</Office_set/Materials/PinkPearl>,\n                                                  </Office_set/Desk_Assembly/Cup_grp.collection:Erasers>]\n\t\trel material:binding:collection:Shafts =  [</Office_set/Materials/YellowPaint>,\n                                                  </Office_set/Desk_Assembly/Cup_grp.collection:Shafts> ]\n\t\t \n        over \"Cup_grp\" \n        {\n            rel collection:Erasers:expansionRule = \"expandPrims\"\n            rel collection:Erasers:includes = \n                [</Office_set/Desk_Assembly/Cup_grp/Pencil_1/Geom/EraserHead>,\n                 </Office_set/Desk_Assembly/Cup_grp/Pencil_2/Geom/EraserHead>,\n                 </Office_set/Desk_Assembly/Cup_grp/Pencil_3/Geom/EraserHead>,\n                 </Office_set/Desk_Assembly/Cup_grp/Pencil_4/Geom/EraserHead>]\n            rel collection:Shafts:expansionRule = \"expandPrims\"\n            rel collection:Shafts:includes = \n                [</Office_set/Desk_Assembly/Cup_grp/Pencil_1/Geom/Shaft>,\n                 </Office_set/Desk_Assembly/Cup_grp/Pencil_2/Geom/Shaft>,\n                 </Office_set/Desk_Assembly/Cup_grp/Pencil_3/Geom/Shaft>,\n                 </Office_set/Desk_Assembly/Cup_grp/Pencil_4/Geom/Shaft>]\n\n            ...\n        }\n    ...\n    }\n...}\n```\n\n----------------------------------------\n\nTITLE: Reporting Prohibited USD Reference to Deleted Child of Relocated Prim\nDESCRIPTION: This log details a composition error for `/Bad_SubrootRefToDeletedRelocatedChild` in `root.sdf`. The error occurs because it references `/Char/Relocated/ToBeDeletedChild` (in `root.sdf`). This reference is prohibited, likely because the target prim is a deleted child within a relocated hierarchy, and referencing such prims from their original (pre-relocation) context is disallowed.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_RelocateToNone.testenv/baseline/compositionErrors_RelocateToNone.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nErrors while composing </Bad_SubrootRefToDeletedRelocatedChild>\n\n@RelocateToNone/root.sdf@</Bad_SubrootRefToDeletedRelocatedChild>\nCANNOT reference:\n@RelocateToNone/root.sdf@</Char/Relocated/ToBeDeletedChild>\nwhich is a prohibited child of its parent because it would require allowing opinions from the source of a relocation at @RelocateToNone/root.sdf@</Char/Relocated/ToBeDeletedChild>.\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional RenderMan Plugin for USD\nDESCRIPTION: Conditionally adds the RenderMan plugin subdirectory if the build option is enabled and the plugin for the specified RenderMan version exists.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif (PXR_BUILD_PRMAN_PLUGIN)\n    set(prmanPluginPath \"third_party/renderman-${RENDERMAN_VERSION_MAJOR}\")\n\n    get_filename_component(prmanPluginAbsPath \"${prmanPluginPath}\" ABSOLUTE)\n    if (EXISTS \"${prmanPluginAbsPath}\")\n        add_subdirectory(\"${prmanPluginPath}\")\n    else()\n        message(FATAL_ERROR \"No RenderMan plugin available for \"\n                \"RenderMan ${RENDERMAN_VERSION_MAJOR}\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimWithReferencesInVariants\nDESCRIPTION: Details the composition results for </PrimWithReferencesInVariants>. The prim stack shows its base definition in root.sdf and the application of a variant set '{v=ref}' also from root.sdf. The active variant introduces references, resulting in the listed child names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimWithReferencesInVariants>\n\nPrim Stack:\n    root.sdf             /PrimWithReferencesInVariants\n    root.sdf             /PrimWithReferencesInVariants{v=ref}\n\nVariant Selections:\n    {v = ref}\n\nChild names:\n     ['Ref', 'A', 'B']\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx and Required Extensions with pip\nDESCRIPTION: Command for installing Sphinx and required extensions using pip for USD documentation building.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip3 install --user sphinx sphinx-rtd-theme sphinx_panels sphinxcontrib-doxylink myst-parser\n```\n\n----------------------------------------\n\nTITLE: Adding a Second Reference in Python\nDESCRIPTION: Creates a second override prim and adds another reference to HelloWorld.usda. This demonstrates how to create multiple references to the same source.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_referencing_layers.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nrefSphere2 = refStage.OverridePrim('/refSphere2')\nrefSphere2.GetReferences().AddReference('./HelloWorld.usda')\nprint(refStage.GetRootLayer().ExportToString())\nrefStage.GetRootLayer().Save()\n```\n\n----------------------------------------\n\nTITLE: Adding Asset Writing Interface in C++\nDESCRIPTION: Defines new ArResolver methods and ArWritableAsset interface for writing data to assets, providing a filesystem-independent way to write data.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_ar2.rst#2025-04-23_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nstd::shared_ptr<ArWritableAsset>\nArResolver::OpenAssetForUpdate(\n    const ArResolvedPath& resolvedPath) const;\n\nstd::shared_ptr<ArWritableAsset>\nArResolver::OpenAssetForReplace(\n    const ArResolvedPath& resolvedPath) const;\n\n/// \\class ArWritableAsset\n/// Interface for writing to an asset.\nclass ArWritableAsset\n{\npublic:\n    virtual size_t Write(const void* buffer, size_t count, size_t offset) = 0;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DomeLight_1 Properties in USD\nDESCRIPTION: This snippet shows the property definitions for the DomeLight_1 schema, including guideRadius, texture file and format, shaderId, poleAxis, and portals. It also includes inherited properties from Xformable and Imageable schemas.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/DomeLight_1.md#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nuniform float guideRadius = 100000.0\nasset inputs:texture:file\ntoken inputs:texture:format = \"automatic\"\nuniform token light:shaderId = \"DomeLight\"\ntoken poleAxis = \"scene\"\nrel portals\n\n# Inherited from Xformable\ntoken[] xformOpOrder\n\n# Inherited from Imageable\nrel proxyPrim\ntoken purpose = \"default\"\ntoken visibility = \"inherited\"\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for /Model\nDESCRIPTION: Displays the composition results for the prim path '/Model'. It shows the contributing layers in the prim stack (root.sdf, model.sdf), the active variant selection '{complexity = high}', and the direct child prims ('Class', 'Scope') after composition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsInVariants.testenv/baseline/compositionResults_TrickyInheritsInVariants.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd-composition-log\nCODE:\n```\nLoading @TrickyInheritsInVariants/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </Model>\n\nPrim Stack:\n    root.sdf             /Model\n    model.sdf            /Model\n    model.sdf            /Model{complexity=high}\n\nVariant Selections:\n    {complexity = high}\n\nChild names:\n     ['Class', 'Scope']\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Links for USD Features\nDESCRIPTION: A markdown list of subpage links to documentation for USD's advanced features including dynamic file formats, scenegraph instancing, and value clips.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/advancedFeatures.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<ul>\n<li>\\subpage Usd_Page_DynamicFileFormat</li>\n<li>\\subpage Usd_Page_ScenegraphInstancing</li>\n<li>\\subpage Usd_Page_ValueClips</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining RegressiveSPostOut Spline in OpenUSD\nDESCRIPTION: Specifies a Bezier spline with Held pre and post extrapolation. It has two knots at times 0 and 1, with specific tangent properties for curve shaping.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_80\n\nLANGUAGE: text\nCODE:\n```\nSpline: RegressiveSPostOut\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 3\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 1\n  pre-tan slope 0.5\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional HdSt Test Programs\nDESCRIPTION: Defines additional test programs for the HdSt library focused on mesh topology functionality. These tests are part of the comprehensive test suite for the Storm renderer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testHdStMeshTopology\n    LIBRARIES\n        hdSt\n        hd\n        sdf\n```\n\n----------------------------------------\n\nTITLE: Accessing UsdShadeConnectableAPI in C++\nDESCRIPTION: Shows how to access the UsdShadeConnectableAPI, which provides connectivity functionality for shading-related schemas.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_renderers.rst#2025-04-23_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nUsdShadeConnectableAPI\n```\n\n----------------------------------------\n\nTITLE: Building USD on Linux\nDESCRIPTION: Command to build and install USD and its dependencies on Linux systems using the build_usd.py script.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n> python OpenUSD/build_scripts/build_usd.py /path/to/my_usd_install_dir\n```\n\n----------------------------------------\n\nTITLE: Creating Test Spline Data Structure in Python\nDESCRIPTION: Defines a spline data test object in Python using class-level and instance-level attributes to configure Hermite/cubic Hermite properties, extrapolation methods, and explicit knot placement. Dependencies include the 'Ts' module (containing TsTest_SplineData and supporting classes), with constructor arguments for knot times, values, tangent slopes, and segment lengths. Expects inputs via float.fromhex for high-precision floating point, providing flexible configuration for test coverage. Output is a spline data object suitable for further spline interpolation regression testing.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveMayaTansKeepRatio_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.3416f3213ad1cp+0'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.7b2f6f1ab02ep-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Running usdmeasureperformance (Bash)\nDESCRIPTION: Example usage of the usdmeasureperformance script, which measures usdview asset performance.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toolset.rst#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nusdmeasureperformance <asset.usd> -i 10 --agg min -o <metrics.yaml>\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Composition Result for /Specializes_2\nDESCRIPTION: Shows the resulting prim stack after composing the prim at path '/Specializes_2'. The prim originates solely from the 'root.sdf' layer in this specific composition result, though it might inherit/specialize later.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicSpecializesAndInherits.testenv/baseline/compositionResults_BasicSpecializesAndInherits.txt#2025-04-23_snippet_5\n\nLANGUAGE: log\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Specializes_2>\n\nPrim Stack:\n    root.sdf             /Specializes_2\n```\n\n----------------------------------------\n\nTITLE: Composing `/element` Prim in USD\nDESCRIPTION: Shows the composition results for the prim `/element`. It inherits from `/_element_class` and includes `middleman` and `implementation` (with variant `testVariantSet=testVariant`) in its stack. The `variantAttr` property resolves to the value defined in the selected variant of `/implementation`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndVariants2.testenv/baseline/compositionResults_SpecializesAndVariants2.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </element>\n\nPrim Stack:\n    root.sdf             /element\n    root.sdf             /_element_class\n    root.sdf             /middleman\n    root.sdf             /implementation\n    root.sdf             /implementation{testVariantSet=testVariant}\n\nVariant Selections:\n    {testVariantSet = testVariant}\n\nProperty names:\n     ['variantAttr']\n\nProperty stacks:\n/element.variantAttr:\n    root.sdf             /implementation{testVariantSet=testVariant}.variantAttr\n```\n\n----------------------------------------\n\nTITLE: Loading USD Root Layer\nDESCRIPTION: Indicates the start of the process, loading the root layer file `root.sdf` from the `BasicPayloadDiamond` asset structure. This is the entry point for the subsequent composition analysis.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicPayloadDiamond.testenv/baseline/compositionResults_BasicPayloadDiamond.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nLoading @BasicPayloadDiamond/root.sdf@\n```\n\n----------------------------------------\n\nTITLE: Composing Prim /PayloadRefPayload/Anim in USD\nDESCRIPTION: Details composition for `/PayloadRefPayload/Anim`. The prim stack comes from `B.sdf`. Time offsets accumulate from the root (`root.sdf`) and the nested payload structure involving `ref.sdf`, `ref_sub.sdf`, and `B.sdf`, incorporating scaling.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicTimeOffset.testenv/baseline/compositionResults_BasicTimeOffset.txt#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </PayloadRefPayload/Anim>\n\nPrim Stack:\n    B.sdf                /Model/Anim\n\nTime Offsets:\n    root.sdf             /PayloadRefPayload/Anim root       (offset=0.00, scale=1.00)\n    ref.sdf              /Ref/Anim       payload    (offset=10.00, scale=2.00)\n        ref_sub.sdf                      sublayer   (offset=20.00, scale=1.00)\n    B.sdf                /Model/Anim     payload    (offset=50.00, scale=2.00)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenUSD Project Subdirectories in CMake\nDESCRIPTION: This CMake script defines a list of subdirectories to be included in the OpenUSD project build. It uses a foreach loop to iterate through the list and add each directory to the build process using add_subdirectory().\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(DIRS\n    arch\n    tf\n    gf\n    pegtl\n    js\n    trace\n    work\n    plug\n    vt\n    ts\n#    bin\n)\n\nforeach(d ${DIRS})\n    add_subdirectory(${d})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring SDF Library Build in CMake\nDESCRIPTION: Defines the main SDF library build configuration including dependencies, public/private classes, headers and Python bindings. Sets up core library components with necessary includes and linking.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/sdf/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE sdf)\n\npxr_library(sdf\n    LIBRARIES\n        arch\n        tf\n        gf\n        pegtl\n        trace\n        ts\n        vt\n        work\n        ar\n        ${TBB_tbb_LIBRARY}\n\n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n\n    PUBLIC_CLASSES\n        abstractData\n        allowed\n        assetPath\n        # ... additional classes ...\n\n    PRIVATE_CLASSES\n        assetPathResolver\n        changeManager\n        # ... additional private classes ...\n\n    PUBLIC_HEADERS\n        api.h\n        accessorHelpers.h\n        # ... additional headers ...\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapArrayAssetPath.cpp\n        # ... additional files ...\n\n    PYMODULE_FILES \n        __init__.py\n\n    RESOURCE_FILES\n        plugInfo.json\n\n    DOXYGEN_FILES\n        overview.dox\n        doxygen/fileFormatPlugin.dox\n        doxygen/variableExpressions.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring usdLux Test Suite\nDESCRIPTION: Sets up test configurations for the usdLux library components, including test directory installation and test registration with expected return codes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdLux/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdLuxLight\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdLuxLight\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_install_test_dir(\n    DEST testUsdLuxLinkingAPI\n    SRC testenv/testUsdLuxLinkingAPI\n)\n\npxr_register_test(testUsdLuxLinkingAPI\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdLuxLinkingAPI\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_install_test_dir(\n    DEST testUsdLuxLightListAPI\n    SRC testenv/testUsdLuxLightListAPI\n)\n\npxr_register_test(testUsdLuxLightListAPI\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdLuxLightListAPI\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for /Model/Class/RefFromHighClassStuff\nDESCRIPTION: Details the composition for the prim path '/Model/Class/RefFromHighClassStuff'. The prim stack shows that this prim's definition originates solely from the '/RefFromHighClass/RefFromHighClassStuff' path within the 'ref.sdf' layer, likely brought in via a reference or inherit arc.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsInVariants.testenv/baseline/compositionResults_TrickyInheritsInVariants.txt#2025-04-23_snippet_2\n\nLANGUAGE: usd-composition-log\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Model/Class/RefFromHighClassStuff>\n\nPrim Stack:\n    ref.sdf              /RefFromHighClass/RefFromHighClassStuff\n```\n\n----------------------------------------\n\nTITLE: Configuring HgiGL Test Build\nDESCRIPTION: Sets up the test configuration for HgiGL including library dependencies and test files. Specifies image comparison tests and expected results.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hgiGL/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_build_test(testHgiGL\n    LIBRARIES\n        hgiGL\n        hgi\n        hio\n        tf\n        gf\n        garch\n    CPPFILES\n        testenv/testHgiGL.cpp\n)\npxr_install_test_dir(\n    SRC testenv/testHgiGL\n    DEST testHgiGL\n)\npxr_register_test(testHgiGL\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHgiGL\"\n    DIFF_COMPARE\n        graphicsCmdsDescCache.txt\n    IMAGE_DIFF_COMPARE\n        graphicsCmdsClear.png\n        srgba.png\n        copyTextureToBuffer.png\n        copyBufferToTexture.png\n    FAIL 1\n    FAIL_PERCENT 0.001\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Composition for /element Prim in USD\nDESCRIPTION: Presents the composition results for the '/element' prim, detailing its prim stack (including inheritance from '/middleman'), the active variant selection ('testVariantSet=testVariant'), the resolved 'classVariantAttr' property, and its source location within the 'root.sdf' layer after variant selection.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndVariants3.testenv/baseline/compositionResults_SpecializesAndVariants3.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </element>\n\nPrim Stack:\n    root.sdf             /element\n    root.sdf             /middleman\n    root.sdf             /implementation\n    root.sdf             /_class_defaultVariantSelections\n    root.sdf             /_class_defaultVariantSelections{testVariantSet=testVariant}\n\nVariant Selections:\n    {testVariantSet = testVariant}\n\nProperty names:\n     ['classVariantAttr']\n\nProperty stacks:\n/element.classVariantAttr:\n    root.sdf             /_class_defaultVariantSelections{testVariantSet=testVariant}.classVariantAttr\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </RefToRoot/_Y> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </RefToRoot/_Y>. Due to the reference on /RefToRoot, this prim's stack mirrors that of </Root/_Y>, involving /_X/_Y from 'root.sdf' and /Ref from 'ref.sdf'. The resolved child prim name is 'C'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </RefToRoot/_Y>\n\nPrim Stack:\n    root.sdf             /_X/_Y\n    ref.sdf              /Ref\n\nChild names:\n     ['C']\n```\n\n----------------------------------------\n\nTITLE: Analyzing OpenUSD Prim Stack for SS3\nDESCRIPTION: Output showing the primitive stack for /SS3, displaying all layers that contribute to this prim's composition and the resolution order.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer3.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nPrim Stack:\n    ss_24tcps_12fps.sdf  /SS3\n    ss_24tcps_12fps.sdf  /SS3\n    ss_24tcps_12fps.sdf  /SS3\n    ss_24tcps_12fps.sdf  /SS3\n    ref.sdf              /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_48tcps.sdf       /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_24tcps_12fps.sdf /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_12fps.sdf        /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n```\n\n----------------------------------------\n\nTITLE: Arm Rig Property Connections\nDESCRIPTION: Shows property connections for the arm rig's internal structure, including bendAmount attribute connections between rig and animation components.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpookyInheritsInSymmetricArmRig.testenv/baseline/compositionResults_TrickySpookyInheritsInSymmetricArmRig.txt#2025-04-23_snippet_2\n\nLANGUAGE: usd\nCODE:\n```\nProperty names:\n     ['bendAmount']\n\nProperty stacks:\n/CharRig/Rig/LArm/Rig/Some_Internal_Rig_Prim.bendAmount:\n    armRig.sdf           /ArmRig/Rig/Some_Internal_Rig_Prim.bendAmount\n\nAttribute connections:\n/CharRig/Rig/LArm/Rig/Some_Internal_Rig_Prim.bendAmount:\n    /CharRig/Anim/LArm.bendAmount\n```\n\n----------------------------------------\n\nTITLE: Declaring Materials and Shading Networks - Custom Scene Configuration\nDESCRIPTION: Defines a USD material scope and a node-based shading network including parameters, intermediate nodes, and bindings (e.g., referencing texture, primvar, and surface nodes). Material blocks specify relationships between data supply nodes and outputs. Inputs are node graphs and references to texture assets. Outputs are surface shading definitions usable by geometry. Dependencies: referenced nodes/assets must exist, and material should be properly referenced by geometry.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdImaging/testenv/testUsdImagingStageSceneIndexContents/baseline/basic.txt#2025-04-23_snippet_4\n\nLANGUAGE: custom-config\nCODE:\n```\n</Materials> type = \n\t[__usdPrimInfo]\n\t\t[isLoaded]\n\t\t\t1\n\t\t[specifier]\n\t\t\tdef\n\t\t[typeName]\n\t\t\tScope\n\t[primOrigin]\n\t\t[scenePath]\n\t\t\tHdPrimOriginSchema::OriginPath(/Materials)\n\t[primvars]\n```\n\nLANGUAGE: custom-config\nCODE:\n```\n</Materials/MyMaterial> type = material\n\t[__usdPrimInfo]\n\t\t[isLoaded]\n\t\t\t1\n\t\t[specifier]\n\t\t\tdef\n\t\t[typeName]\n\t\t\tMaterial\n\t[material]\n\t\t[]\n\t\t\t[config]\n\t\t\t[interfaceMappings]\n\t\t\t[nodes]\n\t\t\t\t[MyPrimvar]\n\t\t\t\t\t[inputConnections]\n\t\t\t\t\t[nodeIdentifier]\n\t\t\t\t\t\tHwPrimvar_1\n\t\t\t\t\t[parameters]\n\t\t\t\t\t\t[varname]\n\t\t\t\t\t\t\t[colorSpace]\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t[typeName]\n\t\t\t\t\t\t\t\ttoken\n\t\t\t\t\t\t\t[value]\n\t\t\t\t\t\t\t\tmap1_uv\n\t\t\t\t[MySurface]\n\t\t\t\t\t[inputConnections]\n\t\t\t\t\t\t[diffuseColor]\n\t\t\t\t\t\t\t[0]\n\t\t\t\t\t\t\t\t[upstreamNodeOutputName]\n\t\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t\t[upstreamNodePath]\n\t\t\t\t\t\t\t\t\tMyTexture\n\t\t\t\t\t[nodeIdentifier]\n\t\t\t\t\t\t\n\t\t\t\t\t[nodeTypeInfo]\n\t\t\t\t\t\t[glslfx:sourceAsset]\n\t\t\t\t\t\t\t@shader1.glslfx@\n\t\t\t\t\t\t[implementationSource]\n\t\t\t\t\t\t\tsourceAsset\n\t\t\t\t\t\t[sdrMetadata]\n\t\t\t\t\t\t\t{}\n\t\t\t\t\t[parameters]\n\t\t\t\t[MyTexture]\n\t\t\t\t\t[inputConnections]\n\t\t\t\t\t\t[uv]\n\t\t\t\t\t\t\t[0]\n\t\t\t\t\t\t\t\t[upstreamNodeOutputName]\n\t\t\t\t\t\t\t\t\tresult\n\t\t\t\t\t\t\t\t[upstreamNodePath]\n\t\t\t\t\t\t\t\t\tMyPrimvar\n\t\t\t\t\t[nodeIdentifier]\n\t\t\t\t\t\tHwUvTexture_1\n\t\t\t\t\t[parameters]\n\t\t\t\t\t\t[file]\n\t\t\t\t\t\t\t[colorSpace]\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t[typeName]\n\t\t\t\t\t\t\t\tasset\n\t\t\t\t\t\t\t[value]\n\t\t\t\t\t\t\t\t@texture1.jpg@\n\t\t\t[terminals]\n\t\t\t\t[surface]\n\t\t\t\t\t[upstreamNodeOutputName]\n\t\t\t\t\t\tsurface\n\t\t\t\t\t[upstreamNodePath]\n\t\t\t\t\t\tMySurface\n\t\t[__all]\n\t\t\t[config]\n\t\t\t[interfaceMappings]\n\t\t\t[nodes]\n\t\t\t\t[DisconnectedNode]\n\t\t\t\t\t[inputConnections]\n\t\t\t\t\t[nodeIdentifier]\n\t\t\t\t\t\tAbsFloat_1\n\t\t\t\t\t[parameters]\n\t\t\t\t\t\t[input]\n\t\t\t\t\t\t\t[colorSpace]\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t[typeName]\n\t\t\t\t\t\t\t\tfloat\n\t\t\t\t\t\t\t[value]\n\t\t\t\t\t\t\t\t1.2\n\t\t\t\t[MyPrimvar]\n\t\t\t\t\t[inputConnections]\n\t\t\t\t\t[nodeIdentifier]\n\t\t\t\t\t\tHwPrimvar_1\n\t\t\t\t\t[parameters]\n\t\t\t\t\t\t[varname]\n\t\t\t\t\t\t\t[colorSpace]\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t[typeName]\n\t\t\t\t\t\t\t\ttoken\n\t\t\t\t\t\t\t[value]\n\t\t\t\t\t\t\t\tmap1_uv\n\t\t\t\t[MySurface]\n\t\t\t\t\t[inputConnections]\n\t\t\t\t\t\t[diffuseColor]\n\t\t\t\t\t\t\t[0]\n\t\t\t\t\t\t\t\t[upstreamNodeOutputName]\n\t\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t\t[upstreamNodePath]\n\t\t\t\t\t\t\t\t\tMyTexture\n\t\t\t\t\t[nodeIdentifier]\n\t\t\t\t\t\t\n\t\t\t\t\t[nodeTypeInfo]\n\t\t\t\t\t\t[glslfx:sourceAsset]\n\t\t\t\t\t\t\t@shader1.glslfx@\n\t\t\t\t\t\t[implementationSource]\n\t\t\t\t\t\t\tsourceAsset\n\t\t\t\t\t\t[sdrMetadata]\n\t\t\t\t\t\t\t{}\n\t\t\t\t\t[parameters]\n\t\t\t\t[MyTexture]\n\t\t\t\t\t[inputConnections]\n\t\t\t\t\t\t[uv]\n\t\t\t\t\t\t\t[0]\n\t\t\t\t\t\t\t\t[upstreamNodeOutputName]\n\t\t\t\t\t\t\t\t\tresult\n\t\t\t\t\t\t\t\t[upstreamNodePath]\n\t\t\t\t\t\t\t\t\tMyPrimvar\n\t\t\t\t\t[nodeIdentifier]\n\t\t\t\t\t\tHwUvTexture_1\n\t\t\t\t\t[parameters]\n\t\t\t\t\t\t[file]\n\t\t\t\t\t\t\t[colorSpace]\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t[typeName]\n\t\t\t\t\t\t\t\tasset\n\t\t\t\t\t\t\t[value]\n\t\t\t\t\t\t\t\t@texture1.jpg@\n\t\t\t[terminals]\n\t\t\t\t[surface]\n\t\t\t\t\t[upstreamNodeOutputName]\n\t\t\t\t\t\tsurface\n\t\t\t\t\t[upstreamNodePath]\n\t\t\t\t\t\tMySurface\n\t[primOrigin]\n\t\t[scenePath]\n\t\t\tHdPrimOriginSchema::OriginPath(/Materials/MyMaterial)\n\t[primvars]\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Performance Metric in Python\nDESCRIPTION: Example of how to define a custom performance metric script. This script defines a 'process prims' metric that traverses the stage and processes each prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/ref_performance_metrics.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pxr import Usd, UsdUtils, Usdviewq\n\ndef testUsdviewInputFunction(appController):\n    with Usdviewq.Timer(\"process prims\", True):\n        stage = appController._dataModel.stage\n        for prim in stage.Traverse():\n            # process prim as needed, etc\n```\n\n----------------------------------------\n\nTITLE: Defining SkelBindingApiAppliedValidator\nDESCRIPTION: Documentation for a validator that verifies a prim has the SkelBindingAPI applied if it has a UsdSkelBinding property, ensuring proper skeleton binding.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n[usdSkelValidators:SkelBindingApiAppliedValidator]:\n\tDoc: Verify a prim has the SkelBindingAPI applied if it has a UsdSkelBinding property.\n\tKeywords: UsdSkelValidators\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for OpenUSD Proposals in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for OpenUSD proposals using reStructuredText syntax. It includes a note about the new location for proposal submissions and lists various proposal topics.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n#########\nProposals\n#########\n\n.. note:: \n\n   New proposals will no longer be added here. Proposals should now be posted \n   and reviewed at `OpenUSD-proposals <https://github.com/PixarAnimationStudios/OpenUSD-proposals>`_\n\n.. toctree::\n   :titlesonly:\n\n   wp_usdlux_for_geometry_lights\n   wp_usdlux_for_renderers\n   wp_asset_previews\n   wp_ar2\n   wp_coordsys\n   wp_connectable_nodes\n   wp_render_settings\n   wp_rigid_body_physics\n   wp_schema_versioning\n   wp_stage_variables\n   wp_usdaudio\n   wp_usdshade\n```\n\n----------------------------------------\n\nTITLE: Instantiating TsTest_SplineData in Python\nDESCRIPTION: Creates a `Ts.TsTest_SplineData` object in Python, representing a non-hermite spline within the OpenUSD Ts testing framework. It defines extrapolation methods as 'Held' (`Ts.TsTest_SplineData.ExtrapHeld`) for both pre and post segments. The `knots` parameter is a list of `Ts.TsTest_SplineData.Knot` objects, precisely defining the time, value, interpolation method (`InterpCurve`), slopes, tangent lengths, and auto-tangent flags for each knot, using hexadecimal float representation (`float.fromhex`) for accuracy. This structure mirrors the textual spline definition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReplaceKeepRatio_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('-0x1p-2'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.8p+1'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x1p-2'), postSlope = float.fromhex('0x1p-2'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x1p-2'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Initializing Optional Dependencies Lists\nDESCRIPTION: Creates empty lists for optional libraries, source files, and headers that will be populated based on enabled graphics backends.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hgiInterop/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(optionalLibraries \"\")\nset(optionalCppFiles \"\")\nset(optionalPrivateHeaders \"\")\n\n# Destination of hgiInterop is always OpenGL, so always include garch\nlist(APPEND optionalLibraries garch)\n```\n\n----------------------------------------\n\nTITLE: Registering USD Geometry Validators Test in CMake\nDESCRIPTION: Registers the USD Geometry Validators test for execution with the test runner, specifying the command to run and expected return code.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/usdGeomValidators/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdGeomValidators\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdGeomValidators\"\n        EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Defining PxrRenderTerminalsAPIRelationships Validator\nDESCRIPTION: Documentation for a validator that ensures RenderSettings prims with PxrRenderTerminalsAPI use relationships instead of connection attributes for terminal displayFilters, sampleFilters, and integrators.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[rmanUsdValidators:PxrRenderTerminalsAPIRelationships]:\n\tDoc: Ensures that RenderSettings prims with PxrRenderTerminalsAPI do not define connection attributes for terminal displayFilters, sampleFilters, and integrators. Relationships should be used instead.\n\tKeywords: RmanUsdValidators\n\tSchemaTypes: UsdRiPxrRenderTerminalsAPI\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: USD Prim Index Node 11 Details (Inherit)\nDESCRIPTION: Describes Node 11, an 'inherit' type node representing </PIS/Sibling> derived from </PISI/Sibling>. Details include parent node (10), dependency type (non-virtual, partly-direct), source/target information within the 'SpecializesAndAncestralArcs4/root.sdf' layer stack, namespace mappings (Map to parent, Map to root), and the contributing prim stack.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4_graph.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nNode 11:\n    Parent node:              10\n    Type:                     inherit\n    DependencyType:           non-virtual, partly-direct\n    Source path:              </PISI/Sibling>\n    Source layer stack:       @SpecializesAndAncestralArcs4/root.sdf@\n    Target path:              </PIS/Sibling>\n    Target layer stack:       @SpecializesAndAncestralArcs4/root.sdf@\n    Map to parent:\n        / -> /\n        /PISI -> /PIS\n    Map to root:\n        / -> /\n        /PISI -> /Parent\n        /PISI/Sibling -> /Parent/Child\n    Namespace depth:          1\n    Depth below introduction: 1\n    Is due to ancestor:       TRUE\n    Permission:               Public\n    Is restricted:            FALSE\n    Is inert:                 FALSE\n    Contribute specs:         TRUE\n        Restricted at depth:  0\n    Has specs:                TRUE\n    Has symmetry:             FALSE\n    Prim stack:\n      </PISI/Sibling> root.sdf - @SpecializesAndAncestralArcs4/root.sdf@\n```\n\n----------------------------------------\n\nTITLE: USD Composition Error: Unresolved Payload Prim Path\nDESCRIPTION: This error message signifies a USD composition failure because the target prim path (`</NonExistentPrim>`) specified within the referenced payload asset file (`@ErrorInvalidPayload/payload.sdf@`) could not be resolved or found within that asset. The payload was introduced by the layer `@ErrorInvalidPayload/root.sdf@` onto the prim `/BadPayload_NonExistentPrim`. This suggests that while the payload file exists, the specific prim targeted by the payload arc does not exist within that file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInvalidPayload.testenv/baseline/compositionErrors_ErrorInvalidPayload.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nErrors while composing </BadPayload_NonExistentPrim>\n\nUnresolved payload prim path @ErrorInvalidPayload/payload.sdf@</NonExistentPrim> introduced by @ErrorInvalidPayload/root.sdf@</BadPayload_NonExistentPrim>\n```\n\n----------------------------------------\n\nTITLE: Defining a Cylinder Primitive in OpenUSD\nDESCRIPTION: A partial definition of a Cylinder primitive with radius 0.5 and height 2. This snippet includes only the parameter specifications without the full topology, points, and normal data.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/geomUtil/testenv/testMeshGenerators/baseline/generatedMeshes_closed.txt#2025-04-23_snippet_3\n\nLANGUAGE: 3D geometry\nCODE:\n```\n4. Cylinder\n-----------\nradius = 0.5, height = 2, sweep = 360\n\nTopology:\n```\n\n----------------------------------------\n\nTITLE: Adding New Identifier Functions - C++\nDESCRIPTION: New functions being added to ArResolver for creating asset identifiers that support both direct paths and anchored paths.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_ar2.rst#2025-04-23_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nArIdentifier\nArResolver::CreateIdentifier(\n    const std::string& assetPath) const;\n\nArIdentifier\nArResolver::CreateIdentifier(\n    const ArIdentifier& anchorIdentifier,\n    const std::string& assetPath) const;\n\nArIdentifier\nArResolver::CreateIdentifierForNewAsset(\n    const std::string& assetPath) const;\n\nArIdentifier\nArResolver::CreateIdentifierForNewAsset(\n    const ArIdentifier& anchorIdentifier,\n    const std::string& assetPath) const;\n```\n\n----------------------------------------\n\nTITLE: USD Example with Primvar Element Size\nDESCRIPTION: Illustrates a USD prim with a primvar that has an element size of 2. This shows how multiple values in the primvar array are treated as a single element.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/primvars.rst#2025-04-23_snippet_14\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n)\n\ndef Cube \"TestPrim\"\n{\n    string[] primvars:testPrimvar = [\"element1-partA\", \"element1-partB\", \"element2-partA\", \"element2-partB\"] (\n        elementSize = 2\n    )\n    int[] primvars:testPrimvar:indices = [0, 1, 0]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TwoKnotLinear Spline\nDESCRIPTION: Definition of a two-knot linear interpolation spline. The spline uses Held extrapolation at both ends and has knots at time points 1 and 5, with linear interpolation between the knots.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_42\n\nLANGUAGE: plain text\nCODE:\n```\nSpline: TwoKnotLinear\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Linear\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 5\n  value 2\n  next interp Linear\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Registering usdview Background Color Test\nDESCRIPTION: Registers a CMake test named `testUsdviewBackgroundColor`. This test runs `testusdview` with the Python script `testUsdviewBackgroundColor.py` and `test.usda`. It performs perceptual image difference comparison against `black.png`, `grey_dark.png`, `grey_light.png`, and `white.png` to verify background color changes, using failure thresholds of 0.05 absolute and 0.03 percent, and expecting a return code of 0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdviewBackgroundColor\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewBackgroundColor.py test.usda\"\n    IMAGE_DIFF_COMPARE\n        black.png\n        grey_dark.png\n        grey_light.png\n        white.png\n    FAIL 0.05\n    FAIL_PERCENT 0.03\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Defining RegressivePreFringe Bezier Spline in OpenUSD\nDESCRIPTION: Specification for a RegressivePreFringe Bezier spline with held extrapolation. The curve has two knots at (0,0) and (1,1), with specific tangent settings that create a steep rise near the beginning of the curve.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_90\n\nLANGUAGE: text\nCODE:\n```\nSpline: RegressivePreFringe\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0.05\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 1.3\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Test Scripts for USD Validation\nDESCRIPTION: Registers Python test scripts for various USD validation components including context, error, registry, and validator metadata tests.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/usdValidation/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_test_scripts(\n    testenv/testUsdValidationContextPy.py\n    testenv/testUsdValidationError.py\n    testenv/testUsdValidationRegistryPy.py\n    testenv/testUsdValidatorMetadata.py\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Anti-Regression Mode with build_usd.py\nDESCRIPTION: Command-line option to set the default anti-regression authoring mode when building USD using build_usd.py script.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/doxygen/regression.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--default-anti-regression=TsAntiRegression...\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Skeleton Library Build\nDESCRIPTION: Defines the main usdSkel library build configuration including dependencies, source files, public/private classes, Python module files, and documentation. Sets up core library components for skeleton animation and deformation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdSkel/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usdSkel)\n\npxr_library(usdSkel\n    INCLUDE_SCHEMA_FILES\n\n    LIBRARIES\n        arch\n        gf\n        tf\n        trace\n        vt\n        work\n        sdf\n        usd\n        usdGeom\n        ${TBB_tbb_LIBRARY}\n\n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n\n    PUBLIC_CLASSES\n        animMapper\n        animQuery\n        bakeSkinning\n        blendShapeQuery\n        cache\n        debugCodes\n        inbetweenShape\n        skeletonQuery\n        skinningQuery\n        topology\n        utils\n\n    PUBLIC_HEADERS\n        api.h\n        binding.h\n\n    PRIVATE_CLASSES\n        animQueryImpl\n        cacheImpl\n        skelDefinition\n\n    PYMODULE_FILES\n        __init__.py\n\n    PYMODULE_CPPFILES\n        wrapAnimMapper.cpp\n        wrapAnimQuery.cpp\n        wrapBakeSkinning.cpp\n        wrapBlendShapeQuery.cpp\n        wrapBinding.cpp\n        wrapCache.cpp\n        wrapInbetweenShape.cpp\n        wrapSkeletonQuery.cpp\n        wrapSkinningQuery.cpp\n        wrapTopology.cpp\n        wrapUtils.cpp\n\n    DOXYGEN_FILES\n        overview.dox\n        doxygen/apiIntro.dox\n        doxygen/bestPractices.dox\n        doxygen/instancing.dox\n        doxygen/intro.dox\n        doxygen/objectModel.dox\n        doxygen/schemaOverview.dox\n        doxygen/schemas.dox\n        doxygen/skinnedArm.usda\n        images/blendshapes.svg\n        images/blendshapesWithInbetweens.svg\n        images/influencesPrimvarLayout.svg\n        images/unboundedInterpolationExample.svg\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the hdPrmanLoader Plugin in CMake\nDESCRIPTION: This CMake code uses the custom `pxr_plugin` function to define the `hdPrmanLoader` plugin. It links against required libraries (`arch`, `plug`, `tf`, `hd`), declares `rendererPlugin` as a public class, includes `plugInfo.json` as a resource file, and explicitly disables the use of precompiled headers for this plugin.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/plugin/hdPrmanLoader/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_plugin(hdPrmanLoader\n   LIBRARIES\n        arch\n        plug\n        tf\n        hd\n\n    PUBLIC_CLASSES\n        rendererPlugin\n\n    RESOURCE_FILES\n        plugInfo.json\n\n    DISABLE_PRECOMPILED_HEADERS\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing TsTest_SplineData in Python\nDESCRIPTION: This code snippet initializes a TsTest_SplineData object with specific parameters for spline interpolation. It sets up the spline type, extrapolation methods, and knot points with their respective properties.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/MoveStartNone_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.999999999999ap-2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.999999999999ap-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.999999999999ap-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Registering OpenUSD Arch Tests in CMake\nDESCRIPTION: Registers multiple tests for the 'arch' library components using the pxr_register_test macro, specifying the command to run each test.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/arch/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testArchAbi\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testArchAbi\"\n)\npxr_register_test(testArchAttributes\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testArchAttributes\"\n)\n# ... (more test registrations)\n```\n\n----------------------------------------\n\nTITLE: USD Prim Inheritance Structure\nDESCRIPTION: Demonstrates the prim inheritance hierarchy for Metal and CorrodedMetal materials across multiple USD layers\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpecializesAndInherits3.testenv/baseline/compositionResults_TrickySpecializesAndInherits3.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /Set/CorrodedMetal\n    root.sdf             /SetClass/CorrodedMetal\n    package.sdf          /SetPackage/CorrodedMetal\n    package.sdf          /SetClass/CorrodedMetal\n    model.sdf            /SetModel/CorrodedMetal\n    root.sdf             /Set/Metal\n    root.sdf             /SetClass/Metal\n    package.sdf          /SetPackage/Metal\n    package.sdf          /SetClass/Metal\n    model.sdf            /SetModel/Metal\n```\n\n----------------------------------------\n\nTITLE: USD Layer Stack Display\nDESCRIPTION: Shows the layer composition for a USD file named root.sdf\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpRegressionBugs_bug92827.testenv/baseline/compositionResults_bug92827.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLayer Stack:\n     root.sdf\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </RearLegRig> in USD\nDESCRIPTION: Displays the composition results for the prim path </RearLegRig> within the 'root.sdf' layer. It lists the prim stack and its immediate child prim names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyMultipleRelocations4.testenv/baseline/compositionResults_TrickyMultipleRelocations4.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </RearLegRig>\n\nPrim Stack:\n    root.sdf             /RearLegRig\n\nChild names:\n     ['Knee_bone', 'Legs']\n```\n\n----------------------------------------\n\nTITLE: USD Layer and Prim Stack Analysis Output\nDESCRIPTION: Detailed composition analysis output showing layer stacks, prim stacks, child relationships and variant selections across multiple USD files (root.sdf, ref.sdf, ref2.sdf). Shows inheritance and composition structure for nested prims.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantAncestralSelection.testenv/baseline/compositionResults_TrickyVariantAncestralSelection.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLoading @TrickyVariantAncestralSelection/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </_class_A1>\n\nPrim Stack:\n    root.sdf             /_class_A1\n\nChild names:\n     ['B']\n\n------------------------------------------------------------------------\nResults for composing </_class_A1/B>\n\nPrim Stack:\n    root.sdf             /_class_A1/B\n\nChild names:\n     ['C']\n\n------------------------------------------------------------------------\nResults for composing </_class_A1/B/C>\n\nPrim Stack:\n    root.sdf             /_class_A1/B/C\n\n------------------------------------------------------------------------\nResults for composing </Root>\n\nPrim Stack:\n    root.sdf             /Root\n    root.sdf             /_class_A1\n    ref.sdf              /A1\n    ref.sdf              /_class_A1\n    ref2.sdf             /A\n\nChild names:\n     ['B']\n\n------------------------------------------------------------------------\nResults for composing </Root/B>\n\nPrim Stack:\n    root.sdf             /_class_A1/B\n    ref.sdf              /A1/B\n    ref2.sdf             /B\n    ref2.sdf             /A/B\n\nChild names:\n     ['C']\n\n------------------------------------------------------------------------\nResults for composing </Root/B/C>\n\nPrim Stack:\n    root.sdf             /_class_A1/B/C\n    ref.sdf              /A1/B/C\n    ref2.sdf             /C\n    ref2.sdf             /C{v1=C}\n    ref2.sdf             /C{v2=Z}\n    ref2.sdf             /B/C\n    ref2.sdf             /B/C{v1=C}\n    ref2.sdf             /B/C{v2=Z}\n    ref2.sdf             /A/B/C\n    ref2.sdf             /A/B/C{v1=C}\n    ref2.sdf             /A/B/C{v2=Z}\n\nVariant Selections:\n    {v1 = C}\n    {v2 = Z}\n\nChild names:\n     ['v2_Z', 'v1_C']\n\n------------------------------------------------------------------------\nResults for composing </Root/B/C/v2_Z>\n\nPrim Stack:\n    ref2.sdf             /C{v2=Z}v2_Z\n\n------------------------------------------------------------------------\nResults for composing </Root/B/C/v1_C>\n\nPrim Stack:\n    ref2.sdf             /C{v1=C}v1_C\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Shebang Path for USD Scripts\nDESCRIPTION: Sets the path to the Python interpreter for script shebangs, using the Python executable discovered by the Packages module.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PYTHON_SHEBANG \"${PYTHON_EXECUTABLE}\" \n    CACHE \n    STRING\n    \"Replacement path for Python #! line.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Physics Library Build\nDESCRIPTION: Defines the main USD Physics library build configuration including dependencies, source files, Python module files, and documentation. Sets up core library components with TBB integration and required USD dependencies.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdPhysics/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usdPhysics)\n\npxr_library(usdPhysics\n    INCLUDE_SCHEMA_FILES\n\n    LIBRARIES\n        tf\n        plug\n        vt\n        sdf\n        trace\n        usd\n        usdGeom\n        usdShade\n        work\n        ${TBB_tbb_LIBRARY}\n\n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n\n    PUBLIC_CLASSES\n        metrics\n        parseUtils        \n        \n    PUBLIC_HEADERS\n        api.h\n        massProperties.h\n        parseUtils.h\n        parseDesc.h   \n        \n    PYMODULE_CPPFILES\n        wrapMetrics.cpp\n        wrapParseUtils.cpp\n\n    PYMODULE_FILES\n        __init__.py\n\n    DOXYGEN_FILES\n        overview.dox\n        parsingUtils.dox        \n        examples/usdPhysicsBoxOnBox.usda\n        examples/usdPhysicsBoxOnQuad.usda\n        examples/usdPhysicsDistanceJoint.usda\n        examples/usdPhysicsGroupFiltering.usda\n        examples/usdPhysicsJoints.usda\n        examples/usdPhysicsPairFiltering.usda\n        examples/usdPhysicsSpheresWithMaterial.usda\n)\n```\n\n----------------------------------------\n\nTITLE: Registering USD Skeleton Tests\nDESCRIPTION: Registers individual Python-based tests for the USD Skeleton components, specifying test commands, expected return codes, and diff comparisons where applicable.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdSkel/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdSkelAnimMapper\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdSkelAnimMapper\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdSkelAnimQuery\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdSkelAnimQuery\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdSkelBakeSkinning\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdSkelBakeSkinning\"\n    EXPECTED_RETURN_CODE 0\n    DIFF_COMPARE blendshapes.baked.usda blendshapesWithNormals.baked.usda lbs.baked.usda lbs.bakedInterval.usda\n)\n\npxr_register_test(testUsdSkelBindingAPI\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdSkelBindingAPI\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdSkelCache\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdSkelCache\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdSkelRoot\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdSkelRoot\"\n    EXPECTED_RETURN_CODE 0\n    DIFF_COMPARE root.computedExtents.usda\n)\n\npxr_register_test(testUsdSkelSkeletonQuery\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdSkelSkeletonQuery\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdSkelSkinningQuery\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdSkelSkinningQuery\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdSkelTopology\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdSkelTopology\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdSkelUtils\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdSkelUtils\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Sublayer Time Offsets and Scales in USD\nDESCRIPTION: This snippet lists several .sdf files designated as sublayers within a USD composition context. Each line specifies the filename, its role ('sublayer'), and the associated time 'offset' and 'scale' values, which modify the timing of data from that sublayer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecond1.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=8.00)\n        s_12fps.sdf                      sublayer   (offset=10.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=50.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=50.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=50.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=50.00, scale=8.00)\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex VDF Test with Post-Processing in CMake\nDESCRIPTION: This snippet shows a more complex test configuration for testVdfEdit. It includes a post-command that runs a Python script to sort dot files, followed by multiple diff comparisons. This setup is used for testing VDF editing functionality with various stages and edge cases.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/vdf/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testVdfEdit\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testVdfEdit\"\n    EXPECTED_RETURN_CODE 0\n    POST_COMMAND\n        \"${PYTHON_EXECUTABLE} sortDotFiles.py \\\n        original.dot\\\n        edit_step_0.dot\\\n        edit_step_1.dot\\\n        edit_step_2.dot\\\n        edit_step_3.dot\\\n        edit_step_4.dot\\\n        removed_edge_0.dot\\\n        removed_edge_1.dot\\\n        removed_edge_2.dot\\\n        removed_edge_3.dot\\\n        removed_edge_4.dot\\\n        removed_edge_5.dot\"\n    DIFF_COMPARE original.dot.out\n    DIFF_COMPARE edit_step_0.dot.out\n    DIFF_COMPARE edit_step_1.dot.out\n    DIFF_COMPARE edit_step_2.dot.out\n    DIFF_COMPARE edit_step_3.dot.out\n    DIFF_COMPARE edit_step_4.dot.out\n    DIFF_COMPARE removed_edge_0.dot.out\n    DIFF_COMPARE removed_edge_1.dot.out\n    DIFF_COMPARE removed_edge_2.dot.out\n    DIFF_COMPARE removed_edge_3.dot.out\n    DIFF_COMPARE removed_edge_4.dot.out\n    DIFF_COMPARE removed_edge_5.dot.out\n    TESTENV testVdfEdit\n)\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </RearLegRig/Legs/LeftRig/Leg_bone/Knee_bone> in USD\nDESCRIPTION: Shows the composition results for the prim path </RearLegRig/Legs/LeftRig/Leg_bone/Knee_bone> from 'root.sdf'. It lists the prim stack (originating from /SymRig/Leg_bone/Knee_bone) and its child prim names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyMultipleRelocations4.testenv/baseline/compositionResults_TrickyMultipleRelocations4.txt#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </RearLegRig/Legs/LeftRig/Leg_bone/Knee_bone>\n\nPrim Stack:\n    root.sdf             /SymRig/Leg_bone/Knee_bone\n\nChild names:\n     ['Ankle_bone']\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </RefToRoot/B/C/D> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </RefToRoot/B/C/D>. The prim stack mirrors </Root/B/C/D>, with contributions from /Root/B/C/D and /Root/B/C/_Z in 'root.sdf', plus /Ref/C/D and /Ref/C/_Z in 'ref.sdf'. The 'prop' property stack shows opinions from all four corresponding locations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </RefToRoot/B/C/D>\n\nPrim Stack:\n    root.sdf             /Root/B/C/D\n    root.sdf             /Root/B/C/_Z\n    ref.sdf              /Ref/C/D\n    ref.sdf              /Ref/C/_Z\n\nProperty names:\n     ['prop']\n\nProperty stacks:\n/RefToRoot/B/C/D.prop:\n    root.sdf             /Root/B/C/D.prop\n    root.sdf             /Root/B/C/_Z.prop\n    ref.sdf              /Ref/C/D.prop\n    ref.sdf              /Ref/C/_Z.prop\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Layer Composition for /S1 Prim\nDESCRIPTION: This snippet shows the layer stack and time offsets for the /S1 prim. It includes multiple sublayers with varying offsets and scales, demonstrating how different .sdf files are composed to form the final representation of the prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecond3.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </S1>\n\nPrim Stack:\n    s.sdf                /S1\n\nTime Offsets:\n    root_24tcps_12fps.sdf /S1             root       (offset=0.00, scale=1.00)\n        s.sdf                            sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=8.00)\n        s_48tcps.sdf                     sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=8.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=8.00)\n        s_12fps.sdf                      sublayer   (offset=10.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=50.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=50.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=50.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=50.00, scale=8.00)\n```\n\n----------------------------------------\n\nTITLE: Model/A Prim Composition\nDESCRIPTION: Shows the prim stack for /Model/A including inherited and referenced layers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpecializesAndInherits.testenv/baseline/compositionResults_TrickySpecializesAndInherits.txt#2025-04-23_snippet_2\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /Model/A\n    ref.sdf              /Ref/A\n    root.sdf             /Model/B\n    root.sdf             /Model/C\n    ref.sdf              /Ref/B\n    ref.sdf              /Ref/C\n    root.sdf             /Model/D\n    ref.sdf              /Ref/D\n```\n\n----------------------------------------\n\nTITLE: Defining a Cube Primitive in OpenUSD\nDESCRIPTION: A complete definition of a Cube primitive with side length 1. The data includes full topology information with face vertex counts, indices, points (vertices), and normal vectors for a bilinear mesh representation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/geomUtil/testenv/testMeshGenerators/baseline/generatedMeshes_closed.txt#2025-04-23_snippet_2\n\nLANGUAGE: 3D geometry\nCODE:\n```\n3. Cube\n-------\nside = 1\n\nTopology:\n  (rightHanded, bilinear, ([4, 4, 4, 4, 4, 4]), ([0, 1, 2, 3, 4, 5, 6, 7, 0, 6, 5, 1, 4, 7, 3, 2, 0, 3, 7, 6, 4, 2, 1, 5]), ([]))\n\nPoints:\n  [(0.5, 0.5, 0.5), (-0.5, 0.5, 0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (0.5, -0.5, -0.5)]\n\nNormals:\n  [(0, 0, 1), (0, 0, -1), (0, 1, 0), (0, -1, 0), (1, 0, 0), (-1, 0, 0)]\n```\n\n----------------------------------------\n\nTITLE: Accessing HdSceneDelegate in C++\nDESCRIPTION: Demonstrates how to access the HdSceneDelegate class, which provides methods for querying scene data in Hydra.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_renderers.rst#2025-04-23_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nHdSceneDelegate\n```\n\n----------------------------------------\n\nTITLE: Shader Connections in USDA\nDESCRIPTION: Shows how to define material and shader connections for expressing render-time dataflow between shaders using USD's shading model.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_14\n\nLANGUAGE: usda\nCODE:\n```\ndef Material \"boardMat\"\n{\n    token inputs:frame:stPrimvarName = \"st\"\n    token outputs:surface.connect = </TexModel/boardMat/PBRShader.outputs:surface>\n\n    def Shader \"PBRShader\"\n    {\n        uniform token info:id = \"UsdPreviewSurface\"\n        color3f inputs:diffuseColor.connect = </TexModel/boardMat/diffuseTexture.outputs:rgb>\n        float inputs:metallic = 0\n        float inputs:roughness = 0.4\n        token outputs:surface\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Plane Geometry Parameters\nDESCRIPTION: Specifies dimensions and topology for a rectangular plane with width 4 and length 3. Includes point coordinates and normal vectors.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/geomUtil/testenv/testMeshGenerators/baseline/generatedMeshes_closed.txt#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nwidth = 4\n\nlength = 3\n\nTopology:\n  (rightHanded, bilinear, ([4]), ([0, 1, 2, 3]), ([]))\n\nPoints:\n  [(2, 1.5, 0), (-2, 1.5, 0), (-2, -1.5, 0), (2, -1.5, 0)]\n\nNormals:\n  [(0, 0, 1)]\n```\n\n----------------------------------------\n\nTITLE: Creating TsTest_SplineData Object in Python\nDESCRIPTION: This snippet demonstrates the creation of a TsTest_SplineData object with detailed configuration including extrapolation methods, knot points, and their properties using hexadecimal float representations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/InitiallyRegressiveContain_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.38p+7'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('-0x1.4cccccccccccdp+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.6p+3'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.4ep+7'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1.ccccccccccccdp+4'), preSlope = float.fromhex('0x1.999999999999ap-2'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.6p+3'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Animation Spline Configuration\nDESCRIPTION: Configuration for Bezier spline with loop parameters and knot definitions, specifying value types, extrapolation, and tangent controls\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_55\n\nLANGUAGE: text\nCODE:\n```\nSpline: InnerLoopPre\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nLoop:\n  start 100, end 110, numPreLoops 2, numPostLoops 0, valueOffset -5\n```\n\n----------------------------------------\n\nTITLE: Composition Result for /MultiRef\nDESCRIPTION: Displays the composition results for the prim '/MultiRef'. The prim stack shows multiple references being composed together: '/MultiRef' in 'root.sdf' references '/Ref3' (leading to '/Ref2' and '/A') and also directly references '/Ref2' (leading to '/B'). This illustrates how multiple reference arcs contribute to the final prim definition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ExpressionsInReferences.testenv/baseline/compositionResults_ExpressionsInReferences.txt#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </MultiRef>\n\nPrim Stack:\n    root.sdf             /MultiRef\n    ref3.sdf             /Ref3\n    ref2.sdf             /Ref2\n    A.sdf                /A\n    ref2.sdf             /Ref2\n    B.sdf                /B\n```\n\n----------------------------------------\n\nTITLE: Configuring TsRegressionPreventer State - YAML\nDESCRIPTION: This section declares configuration entries that describe the adjustment state before and after spline segments for a test regression preventer. It defines flags for segment presence and adjustment status, as well as widths for each segment-related property. These values may be consumed by a test harness or regression checker, and no external dependencies are required. All parameters are static values intended for direct consumption by validation or test code.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReplaceNone_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: false\n  havePreSegment: true\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.250000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.250000\n  havePostSegment: true\n  postActiveAdjusted: false\n  postActiveAdjustedWidth: 0.250000\n  postOppositeAdjusted: false\n  postOppositeAdjustedWidth: 0.250000\n```\n\n----------------------------------------\n\nTITLE: Installing and Registering USD Tree Payload Test in CMake\nDESCRIPTION: Sets up tests for USD Tree with payload, including loaded and unloaded scenarios.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdtree/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdTreePayload\n    DEST testUsdTreeLoaded\n)\n\npxr_register_test(testUsdTreeLoaded\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdtree --flatten input.usda\"\n    STDOUT_REDIRECT output.txt\n    DIFF_COMPARE output.txt\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdTreePayload\n    DEST testUsdTreeUnloaded\n)\n\npxr_register_test(testUsdTreeUnloaded\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdtree --flatten --unloaded input.usda\"\n    STDOUT_REDIRECT output_unloaded.txt\n    DIFF_COMPARE output_unloaded.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pattern-Based Collections Programmatically in USD Python API\nDESCRIPTION: Demonstrates using Python bindings to apply a collection API to a scene prim, set an expansion rule attribute, and assign a constructed membership path expression using Sdf.PathExpression. Requires Usd, Sdf modules from the USD Python API and a stage object. Inputs: collection name, expression string, token; outputs: updated prim attributes for the collection.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ncollectionPrim = stage.DefinePrim(\"/CollectionPrim\")\nmyCollection = Usd.CollectionAPI.Apply(collectionPrim, \"myCollection\")\nmyCollection.CreateExpansionRuleAttr(Usd.Tokens.expandPrims)  \npathExp = Sdf.PathExpression(\"/World/Light*{hasAPI:LightAPI}\") \nexpressionAttr = myCollection.CreateMembershipExpressionAttr(pathExp)\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Support Check for Boost Libraries\nDESCRIPTION: Checks if Python support is enabled in the project. Exits early if Python support is disabled and the python_modules target doesn't exist, as this subdirectory only contains Python-related libraries.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/external/boost/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# This subdirectory currently only contains Python-related\n# libraries, so skip it entirely if Python support is disabled.\nif (NOT PXR_ENABLE_PYTHON_SUPPORT AND NOT TARGET python_modules)\n    return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining an Inactive Prim in USD\nDESCRIPTION: This USDA code snippet demonstrates how to define an inactive prim. The 'Parent' Xform is set to inactive, which prevents its child 'Child1' from being composed on the stage.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_1\n\nLANGUAGE: usda\nCODE:\n```\ndef Xform \"Parent\" (\n    active = false\n)\n{\n    def Mesh \"Child1\"\n    {\n    }\n    # other siblings of \"Child1\" ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing UsdLuxPluginLight and UsdLuxPluginLightFilter in C++\nDESCRIPTION: Demonstrates how to access the proposed UsdLuxPluginLight and UsdLuxPluginLightFilter classes for renderer-specific light types.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_renderers.rst#2025-04-23_snippet_16\n\nLANGUAGE: C++\nCODE:\n```\nUsdLuxPluginLight\n```\n\nLANGUAGE: C++\nCODE:\n```\nUsdLuxPluginLightFilter\n```\n\n----------------------------------------\n\nTITLE: Prim Stack Composition for SlugJ\nDESCRIPTION: Demonstrates the full prim stack composition for the SlugJ character, including variant selections and payload inclusions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantSelectionInVariant.testenv/baseline/compositionResults_TrickyVariantSelectionInVariant.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /SlugJ\n    SlugJ_payload.sdf    /SlugJ\n    SlugJ_modelInterface.gen.sdf /SlugJ\n    SlugJ_modelInterface.gen.sdf /SlugJ{shaderBindingVariant=Wet}\n    SlugJ_modelInterface.gen.sdf /SlugJ{shadingVariant=Axel}\n    SlugJ_shaderDisplayDefs.sdf /SlugJ\n    SlugJ_shaderDisplayDefs.sdf /ShaderBindingVariants\n    SlugJ_shaderDisplayDefs.sdf /ShaderBindingVariants{shaderBindingVariant=Wet}\n```\n\n----------------------------------------\n\nTITLE: Modifying Display Opacity in USD\nDESCRIPTION: Changes the display opacity of a primitive from 0.4 to 0.8 in a USD file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddiff/testenv/testDiffToolIterateUsdz/baseline/iterate_usd.txt#2025-04-23_snippet_0\n\nLANGUAGE: USD\nCODE:\n```\nfloat[] primvars:displayOpacity = [0.4]\n+    float[] primvars:displayOpacity = [0.8]\n```\n\n----------------------------------------\n\nTITLE: Sampling Animation Curve with Pre/Post Extrapolation and Knot Interpolation\nDESCRIPTION: Test case demonstrating interpolation of animation curve values over a range [139.5, 183.5] that spans pre-extrapolation, knot interpolation, and post-extrapolation regions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_74\n\nLANGUAGE: text\nCODE:\n```\nTest Case 149: SampleWithSources([139.5, 183.5], 45.4545, 17.3611, 10)\n0: (TsSourcePreExtrap)\n    (139.5, 0)\n    (156, 0)\n1: (TsSourceKnotInterp)\n    (156, 0)\n    (159.8128873576108, -4.764763836917713)\n    (160.18835163444288, -4.0747201348201)\n    (160.21796700999704, -1.3797178383925954)\n    (160.40783650930155, 3.2877491878339833)\n    (161.26406315738473, 9.895187079328819)\n    (163.2927499792748, 18.410101971561097)\n    (167, 28.8)\n2: (TsSourcePostExtrap)\n    (167, 28.8)\n    (183.5, 28.8)\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Unloadable Plugin Configuration\nDESCRIPTION: Configures special link flags for unloadable plugin testing on different platforms. Handles Clang and Windows-specific linking requirements for undefined symbols.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/plug/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (TARGET TestPlugDsoUnloadable)\n    if (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n        set_target_properties(TestPlugDsoUnloadable\n            PROPERTIES\n            LINK_FLAGS \"-undefined dynamic_lookup\"\n        )\n    elseif (CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n        set_target_properties(TestPlugDsoUnloadable\n            PROPERTIES\n            LINK_FLAGS \"/FORCE:UNRESOLVED\"\n        )\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering usdview Material Edits Test\nDESCRIPTION: Registers a CMake test named `testUsdviewMaterialEdits`. This test runs `testusdview` with the Python script `testUsdviewMaterialEdits.py` and `test.usda`. It verifies the application of material edits by performing image difference comparison (implicitly perceptual) against `1.png`, `2.png`, and `3.png`, using failure thresholds of 0.05 absolute and 0.03 percent, and expecting a return code of 0. Note: PERCEPTUAL is not explicitly listed but implied by the thresholds.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdviewMaterialEdits\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewMaterialEdits.py test.usda\"\n    IMAGE_DIFF_COMPARE\n        1.png\n        2.png\n        3.png\n    FAIL 0.05\n    FAIL_PERCENT 0.03\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up USD Alembic Test Scripts in CMake\nDESCRIPTION: Defines the test scripts for the USD Alembic plugin, including various test scenarios such as Alembic data, bugs, camera, conversion, facesets, and more.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/plugin/usdAbc/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_test_scripts(\n    testenv/testUsdAbcAlembicData.py\n    testenv/testUsdAbcBugs.py\n    testenv/testUsdAbcCamera.py\n    testenv/testUsdAbcConversionBasisCurves.py\n    testenv/testUsdAbcConversionSubdiv.py\n    testenv/testUsdAbcFaceset.py\n    testenv/testUsdAbcIndexedProperties.py\n    testenv/testUsdAbcInstancing.py\n    testenv/testUsdAbcIsConstant.py\n    testenv/testUsdAbcP_OldEncoding.py\n    testenv/testUsdAbcUvReadWrite.py\n    testenv/testUsdAbcUvReadWrite_OldEncoding.py\n    testenv/testUsdAbcSDFArguments.py\n    testenv/testUsdAbcXformPrimCollapsing.py\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring GeomUtil Library in OpenUSD with CMake\nDESCRIPTION: Defines the GeomUtil library configuration including dependencies, public classes for mesh generation, Python bindings, and test setups. The library provides various geometric mesh generators for primitives like capsules, cones, cuboids, cylinders, disks, planes, and spheres.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/geomUtil/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE geomUtil)\n\npxr_library(geomUtil\n    LIBRARIES\n        arch\n        gf\n        tf\n        vt\n        pxOsd\n\n    PUBLIC_CLASSES\n        capsuleMeshGenerator\n        coneMeshGenerator\n        cuboidMeshGenerator\n        cylinderMeshGenerator\n        diskMeshGenerator\n        meshGeneratorBase\n        planeMeshGenerator\n        sphereMeshGenerator\n        tokens\n        \n    PUBLIC_HEADERS\n        api.h\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapCapsuleMeshGenerator.cpp\n        wrapConeMeshGenerator.cpp\n        wrapCuboidMeshGenerator.cpp\n        wrapCylinderMeshGenerator.cpp\n        wrapDiskMeshGenerator.cpp\n        wrapPlaneMeshGenerator.cpp\n        wrapSphereMeshGenerator.cpp\n        wrapTokens.cpp\n\n    PYMODULE_FILES\n        __init__.py\n)\n\npxr_build_test(testMeshGenerators\n   LIBRARIES\n        gf\n        tf\n        vt\n        geomUtil\n        pxOsd\n   CPPFILES\n        testenv/testMeshGenerators.cpp\n)\n\npxr_install_test_dir(\n    SRC testenv/testMeshGenerators\n    DEST testMeshGenerators\n)\n\npxr_register_test(testMeshGenerators\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testMeshGenerators\"\n    DIFF_COMPARE generatedMeshes_closed.txt generatedMeshes_open.txt\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenUSD Tool Directories in CMake\nDESCRIPTION: Defines a list of OpenUSD tool directories to be built and iterates through them using CMake's add_subdirectory command. Includes conditional compilation of the usdcompress tool if Draco plugin support is enabled.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(DIRS\n    usdcat\n    usddiff\n    usddumpcrate\n    usdgenschemafromsdr\n    usdedit\n    usdfixbrokenpixarschemas\n    usdresolve\n    usdstitch\n    usdstitchclips\n    usdzip\n    sdfdump\n    sdffilter\n    usdtree\n)\n\nforeach(d ${DIRS})\n    add_subdirectory(${d})\nendforeach()\n\nif (PXR_BUILD_DRACO_PLUGIN)\n    add_subdirectory(usdcompress)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining the rmanOslParser USD Plugin using pxr_plugin in CMake\nDESCRIPTION: Defines the `rmanOslParser` plugin using the custom `pxr_plugin` CMake function. It specifies the libraries the plugin depends on (including USD core libraries like `gf`, `tf`, `vt`, `ar`, `sdr`, the core USD library `${PXRCORE_LIBRARY}`, and the RenderMan library `${PRMAN_LIBRARY}`), the required include directories (`${RENDERMAN_INCLUDE_DIR}`), the private C++ classes encapsulated within the plugin, and necessary resource files (`plugInfo.json`).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/rmanOslParser/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_plugin(rmanOslParser\n    LIBRARIES\n        gf\n        tf\n        vt\n        ar\n        sdr\n        ${PXRCORE_LIBRARY}\n        ${PRMAN_LIBRARY}        \n\n    INCLUDE_DIRS\n        ${RENDERMAN_INCLUDE_DIR}\n\n    PRIVATE_CLASSES\n        rmanOslParser\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Composed Layer and Prim Stacks - USD - Plain Text\nDESCRIPTION: This snippet provides the textual output of composing layered and prim stacks for different primitives (</A>, </A/B>, </A/B/C>) in a USD scene, including variant selections and child relationships. It depends on having a valid USD scene structure and referencing conventions (SDF, ref.sdf). Expected inputs are USD file content and queries for specific paths. Outputs are detailed listings of the stack and variant states at each location. The snippet is meant for diagnostic or visualization purposes, with no code execution or direct interaction.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyNestedVariants.testenv/baseline/compositionResults_TrickyNestedVariants.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLoading @TrickyNestedVariants/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </A>\n\nPrim Stack:\n    root.sdf             /A\n    root.sdf             /A{v1=x}\n    ref.sdf              /RAx\n\nVariant Selections:\n    {v1 = x}\n\nChild names:\n     ['B']\n\n------------------------------------------------------------------------\nResults for composing </A/B>\n\nPrim Stack:\n    root.sdf             /A/B\n    root.sdf             /A{v1=x}B\n    root.sdf             /A{v1=x}B{v2=y}\n    ref.sdf              /RBxy\n    ref.sdf              /RAx/B\n    ref.sdf              /RB\n\nVariant Selections:\n    {v2 = y}\n\nChild names:\n     ['C']\n\n------------------------------------------------------------------------\nResults for composing </A/B/C>\n\nPrim Stack:\n    root.sdf             /A/B/C\n    root.sdf             /A{v1=x}B/C\n    root.sdf             /A{v1=x}B{v2=y}C\n    root.sdf             /A{v1=x}B{v2=y}C{v3=z}\n    ref.sdf              /RCxyz\n    ref.sdf              /RBxy/C\n    ref.sdf              /RCx\n    ref.sdf              /RAx/B/C\n    ref.sdf              /RC\n    ref.sdf              /RB/C\n\nVariant Selections:\n    {v3 = z}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Test for Compressing USD with Holes (Discarding Subdivision)\nDESCRIPTION: Installs the test environment for 'testHoles' and registers a CMake test named 'testUsdCompressDiscardHoles'. This test executes the `usdcompress` command on 'CubeWithHoles.usda', outputting 'CubeWithHolesCompressedDiscarded.usda' while discarding subdivision information (`--discard_subdivision 1`). It expects a return code of 0 and compares both the compressed USDA file and the resulting Draco file against predefined expected outputs.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdcompress/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Checks that cube holes are discarded (with --discard_subdivision 1).\npxr_install_test_dir(\n    SRC testenv/testHoles\n    DEST testUsdCompressDiscardHoles\n)\n\npxr_register_test(testUsdCompressDiscardHoles\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdcompress CubeWithHoles.usda -o CubeWithHolesCompressedDiscarded.usda --discard_subdivision 1\"\n    EXPECTED_RETURN_CODE 0\n    DIFF_COMPARE CubeWithHolesCompressedDiscarded.usda\n    DIFF_COMPARE CubeWithHolesCompressedDiscarded.usda.draco/Cube_Geom_Cube.drc\n    PRE_PATH\n        ${CMAKE_INSTALL_PREFIX}/bin\n)\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </Root/_Y/C/D> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </Root/_Y/C/D>. The prim stack combines contributions from /Ref/C/D and /Ref/C/_Z in 'ref.sdf', likely due to inheritance. It lists 'prop' as a property, with contributions from both paths in 'ref.sdf'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Root/_Y/C/D>\n\nPrim Stack:\n    ref.sdf              /Ref/C/D\n    ref.sdf              /Ref/C/_Z\n\nProperty names:\n     ['prop']\n\nProperty stacks:\n/Root/_Y/C/D.prop:\n    ref.sdf              /Ref/C/D.prop\n    ref.sdf              /Ref/C/_Z.prop\n```\n\n----------------------------------------\n\nTITLE: Registering Vulkan Codegen Tests\nDESCRIPTION: Registers codegen tests for Vulkan when Vulkan support is enabled, setting the appropriate Vulkan configuration option.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\nif(PXR_ENABLE_VULKAN_SUPPORT)\n    register_codegen_tests(_Vulkan \"HGI_ENABLE_VULKAN=1;\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Weaker Than Root Nodes in USD\nDESCRIPTION: This snippet shows forward and reverse iteration over nodes and prim specs weaker than root for the prim path </Model>. It illustrates the concept of node strength in USD scene composition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpIterator.testenv/baseline/iteration_results.txt#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nIterating over weaker than root nodes for </Model>:\n @root.sdf@</Class>\tinherit\n @mcat.sdf@</Model>\treference\n @mcat.sdf@</Class>\tinherit\n @mcat.sdf@</Model{pin=latest}>\tvariant\n @model_latest.sdf@</Model>\treference\n @model_latest_payload.sdf@</Model>\tpayload\n @mcat.sdf@</Specializes>\tspecialize\n @root.sdf@</Specializes>\tspecialize\n @mcat.sdf@</Specializes>\tspecialize\n\nReverse iterating over weaker than root nodes for </Model>:\n @mcat.sdf@</Specializes>\tspecialize\n @root.sdf@</Specializes>\tspecialize\n @mcat.sdf@</Specializes>\tspecialize\n @model_latest_payload.sdf@</Model>\tpayload\n @model_latest.sdf@</Model>\treference\n @mcat.sdf@</Model{pin=latest}>\tvariant\n @mcat.sdf@</Class>\tinherit\n @mcat.sdf@</Model>\treference\n @root.sdf@</Class>\tinherit\n\nIterating over weaker than root prim specs for </Model>:\n @root.sdf@</Class>\tinherit\n @mcat.sdf@</Model>\treference\n @mcat.sdf@</Class>\tinherit\n @mcat.sdf@</Model{pin=latest}>\tvariant\n @model_latest.sdf@</Model>\treference\n @model_latest_payload.sdf@</Model>\tpayload\n @mcat.sdf@</Specializes>\tspecialize\n\nReverse iterating over weaker than root prim specs for </Model>:\n @mcat.sdf@</Specializes>\tspecialize\n @model_latest_payload.sdf@</Model>\tpayload\n @model_latest.sdf@</Model>\treference\n @mcat.sdf@</Model{pin=latest}>\tvariant\n @mcat.sdf@</Class>\tinherit\n @mcat.sdf@</Model>\treference\n @root.sdf@</Class>\tinherit\n```\n\n----------------------------------------\n\nTITLE: Analyzing Composition Results for USD Prim /Root\nDESCRIPTION: This section displays the composition results for the USD prim `/Root`. It lists `root_12fps.sdf` in the Prim Stack and details the computed Time Offsets and scales for all involved sublayers, showing the final time mapping resulting from the scene's composition structure for this specific prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecond4.txt#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </Root>\n\nPrim Stack:\n    root_12fps.sdf       /Root\n\nTime Offsets:\n    root_12fps.sdf       /Root           root       (offset=0.00, scale=1.00)\n        s.sdf                            sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=4.00)\n        s_48tcps.sdf                     sublayer   (offset=10.00, scale=0.50)\n        ss.sdf                           sublayer   (offset=15.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=15.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=15.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=15.00, scale=4.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=4.00)\n        s_12fps.sdf                      sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=4.00)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimWithDefaultReferenceTarget2/InternalReference_Child\nDESCRIPTION: Displays the composition results for the child prim path </PrimWithDefaultReferenceTarget2/InternalReference_Child>. The prim stack shows its origin from the internally referenced prim </InternalReference> defined in root.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimWithDefaultReferenceTarget2/InternalReference_Child>\n\nPrim Stack:\n    root.sdf             /InternalReference/InternalReference_Child\n```\n\n----------------------------------------\n\nTITLE: Configuring HDSI Library with Dependencies in OpenUSD\nDESCRIPTION: Defines the HDSI library configuration with its dependencies, public classes, headers, and resource files. The library provides various scene index implementations for the Hydra rendering framework in OpenUSD.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdsi/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE hdsi)\n\npxr_library(hdsi\n    LIBRARIES\n        plug\n        tf\n        trace\n        vt\n        work\n        sdf\n        cameraUtil\n        geomUtil\n        hf\n        hd\n        pxOsd\n\n    PUBLIC_CLASSES\n        computeSceneIndexDiff\n        coordSysPrimSceneIndex\n        debuggingSceneIndex\n        debuggingSceneIndexPlugin\n        extComputationDependencySceneIndex\n        extComputationPrimvarPruningSceneIndex\n        implicitSurfaceSceneIndex\n        legacyDisplayStyleOverrideSceneIndex\n        lightLinkingSceneIndex\n        materialBindingResolvingSceneIndex\n        materialOverrideResolvingSceneIndex\n        materialPrimvarTransferSceneIndex\n        nodeIdentifierResolvingSceneIndex\n        nurbsApproximatingSceneIndex\n        prefixPathPruningSceneIndex\n        pinnedCurveExpandingSceneIndex\n        primManagingSceneIndexObserver\n        primTypeAndPathPruningSceneIndex\n        primTypeNoticeBatchingSceneIndex\n        primTypePruningSceneIndex\n        renderSettingsFilteringSceneIndex\n        sceneGlobalsSceneIndex\n        switchingSceneIndex\n        tetMeshConversionSceneIndex\n        utils\n        velocityMotionResolvingSceneIndex\n\n    PUBLIC_HEADERS\n        api.h\n        version.h\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Registering HdSt Qualifier Test with Command-Line Options - CMake\nDESCRIPTION: This snippet registers the HdStQualifiers test with a specific command line and environment. It uses the pxr_register_test macro, specifying arguments for offscreen rendering, flat and centroid qualifiers, and handling of test debug output. The configuration enables running this test on any platform without requiring a GL context, with expected return code checks for CI integration.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStQualifiers\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStQualifiers --offscreen --flatQF FlatMember --nopersQF NoPerspectiveMember --centroidQF CentroidMember --sampleQF SampleMember\"\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStQualifiers\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Layer Composition Results for /S4\nDESCRIPTION: Shows the layer stack composition for the /S4 prim, which utilizes s_12fps.sdf file. The time offsets section displays the full sublayer structure with their respective offset and scale values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecond3.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nPrim Stack:\n    s_12fps.sdf          /S4\n\nTime Offsets:\n    root_24tcps_12fps.sdf /S4             root       (offset=0.00, scale=1.00)\n        s.sdf                            sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=8.00)\n        s_48tcps.sdf                     sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=8.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=8.00)\n        s_12fps.sdf                      sublayer   (offset=10.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=50.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=50.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=50.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=50.00, scale=8.00)\n```\n\n----------------------------------------\n\nTITLE: Layer Stack Flattening Test Configuration\nDESCRIPTION: Test configuration for verifying usdcat's ability to flatten layer stacks.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdcat/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdCatFlattenLayerStack\n    DEST testUsdCatFlattenLayerStack\n)\n\npxr_register_test(testUsdCatFlattenLayerStack\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdcat --flattenLayerStack input.usda --out output.usda\"\n    DIFF_COMPARE output.usda\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Layer Composition Stack for OpenUSD Files\nDESCRIPTION: Shows the layer stack of a root USD file at 12fps and its sublayers, displaying the hierarchical structure of included scene description files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecond4.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLayer Stack:\n     root_12fps.sdf\n     s.sdf\n     ss.sdf\n     ss_48tcps.sdf\n     ss_24tcps_12fps.sdf\n     ss_12fps.sdf\n     s_48tcps.sdf\n     ss.sdf\n     ss_48tcps.sdf\n     ss_24tcps_12fps.sdf\n     ss_12fps.sdf\n     s_24tcps_12fps.sdf\n     ss.sdf\n     ss_48tcps.sdf\n     ss_24tcps_12fps.sdf\n     ss_12fps.sdf\n     s_12fps.sdf\n     ss.sdf\n     ss_48tcps.sdf\n     ss_24tcps_12fps.sdf\n     ss_12fps.sdf\n```\n\n----------------------------------------\n\nTITLE: Registering Sdr Version Test in CMake\nDESCRIPTION: This snippet registers the Sdr Version test using the pxr_register_test CMake function. It specifies the test command and expected return code.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/sdr/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testSdrVersion\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdrVersion\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </Root/_Y/C/_Z> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </Root/_Y/C/_Z>. The prim stack originates solely from /Ref/C/_Z in 'ref.sdf'. It lists 'prop' as a property name, with its value sourced from the same location in 'ref.sdf'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Root/_Y/C/_Z>\n\nPrim Stack:\n    ref.sdf              /Ref/C/_Z\n\nProperty names:\n     ['prop']\n\nProperty stacks:\n/Root/_Y/C/_Z.prop:\n    ref.sdf              /Ref/C/_Z.prop\n```\n\n----------------------------------------\n\nTITLE: Displaying Layer Composition Results for /S3\nDESCRIPTION: Shows the layer stack composition for the /S3 prim, which utilizes s_24tcps_12fps.sdf file. The time offsets section displays the complete sublayer hierarchy with their respective time offset and scale values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecond3.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nPrim Stack:\n    s_24tcps_12fps.sdf   /S3\n\nTime Offsets:\n    root_24tcps_12fps.sdf /S3             root       (offset=0.00, scale=1.00)\n        s.sdf                            sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=8.00)\n        s_48tcps.sdf                     sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=8.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=8.00)\n        s_12fps.sdf                      sublayer   (offset=10.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=50.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=50.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=50.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=50.00, scale=8.00)\n```\n\n----------------------------------------\n\nTITLE: USD Property Stack Analysis\nDESCRIPTION: Shows property inheritance and composition for various prims in the scene, including property names and their sources in the layer stack\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpRegressionBugs_bug92827.testenv/baseline/compositionResults_bug92827.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nProperty names:\n     ['foo']\n\nProperty stacks:\n/Rig/Class/A.foo:\n    root.sdf             /Rig/Class/A.foo\n\n------------------------------------------------------------------------\nResults for composing </Rig/Class/B>\n\nPrim Stack:\n    root.sdf             /Rig/Class/B\n\nProperty names:\n     ['bar']\n\nProperty stacks:\n/Rig/Class/B.bar:\n    root.sdf             /Rig/Class/B.bar\n```\n\n----------------------------------------\n\nTITLE: Updating USD Reference and Payload Path\nDESCRIPTION: Demonstrates a change in USD where a scoped reference 'Foo' is being replaced with 'refSphere', and the payload path is being updated from 'p1.usda' to 'helloworld.usda'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddiff/testenv/testDiffToolSelectionDefault/baseline/out.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\n-def Scope \"Foo\" (\n-    payload = @p1.usda@</Foo>\n+def \"refSphere\" (\n+    payload = @helloworld.usda@</hello>\n```\n\n----------------------------------------\n\nTITLE: Pushing local branch to remote repository for pull request\nDESCRIPTION: Git command to push your local feature branch to your remote fork. This makes the branch available on GitHub so you can create a pull request to the OpenUSD dev branch.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/contributing_to_usd.rst#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit push origin dev_mybugfix\n```\n\n----------------------------------------\n\nTITLE: Logical OR Operation in USDA\nDESCRIPTION: Shows logical OR operation with multiple boolean values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/variable_expressions.rst#2025-04-23_snippet_12\n\nLANGUAGE: usda\nCODE:\n```\nor( false, true, false )\n```\n\n----------------------------------------\n\nTITLE: USD Path Pattern with Variant Predicate\nDESCRIPTION: Example of matching prims with specific variant selections for multiple variant sets.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_13\n\nLANGUAGE: usd\nCODE:\n```\n/char*{variant(myVariantSet=blue, myVariantSet2=red)}\n```\n\n----------------------------------------\n\nTITLE: Admonition for Creating Prims Using FieldAsset-derived Schemas in Markdown\nDESCRIPTION: A markdown admonition note explaining that FieldAsset is an abstract schema and users should create prims using schemas that inherit from it, such as OpenVDBAsset or Field3DAsset.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdVol/FieldAsset.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{admonition} Create Prims Using FieldAsset-derived Schemas\n:class: note\n\nLike FieldBase, FieldAsset is an abstract schema. In practice you will most\nlikely create prims using one of the field schemas that inherit from FieldAsset,\nsuch as OpenVDBAsset or Field3DAsset.\n```\n```\n\n----------------------------------------\n\nTITLE: Spline Data Object Construction\nDESCRIPTION: Python code constructing a TsTest_SplineData object with detailed parameters including knot points and interpolation methods\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/InitiallyRegressiveLimitOpposite_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.38p+7'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('-0x1.4cccccccccccdp+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.d5546ea4f1444p+3'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.4ep+7'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1.ccccccccccccdp+4'), preSlope = float.fromhex('0x1.999999999999ap-2'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.d551ba9621ce3p+1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Animation Curve Sampling with Very Fine Detail\nDESCRIPTION: Test case with extremely detailed sampling of a small curve segment at 0.5 time intervals. Shows precise evaluation of curve behavior in a specific region between keyframes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_63\n\nLANGUAGE: plaintext\nCODE:\n```\nTest Case 138: SampleWithSources([102.5, 107.5], 50, 50, 0.5)\n0: (TsSourceKnotInterp)\n    (102.5, 15)\n    (102.5, 15)\n    (102.689453125, 15.9326171875)\n    (102.890625, 16.8359375)\n    (103.115234375, 17.6806640625)\n    (103.239990234375, 18.0718994140625)\n    (103.375, 18.4375)\n    (103.521728515625, 18.7738037109375)\n    (103.681640625, 19.0771484375)\n    (103.856201171875, 19.3438720703125)\n    (104.046875, 19.5703125)\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Layer Stack Composition Results\nDESCRIPTION: Output from a USD composition operation showing how prims are composed from different layers, including class inheritance. The content demonstrates how named prims inherit from classes and how the prim hierarchy is structured after composition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsAndRelocates2.testenv/baseline/compositionResults_TrickyInheritsAndRelocates2.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLoading @TrickyInheritsAndRelocates2/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </Group>\n\nPrim Stack:\n    root.sdf             /Group\n    b.sdf                /Group\n\nChild names:\n     ['Char_Named']\n\nProhibited child names:\n     ['Char']\n\n------------------------------------------------------------------------\nResults for composing </Group/Char_Named>\n\nPrim Stack:\n    root.sdf             /_class_A\n    root.sdf             /_class_B\n    b.sdf                /Group/Char\n    b.sdf                /_class_A\n    b.sdf                /_class_B\n\nChild names:\n     ['PrimFromClassB', 'PrimFromClassA']\n\n------------------------------------------------------------------------\nResults for composing </Group/Char_Named/PrimFromClassB>\n\nPrim Stack:\n    root.sdf             /_class_B/PrimFromClassB\n\n------------------------------------------------------------------------\nResults for composing </Group/Char_Named/PrimFromClassA>\n\nPrim Stack:\n    root.sdf             /_class_A/PrimFromClassA\n\n------------------------------------------------------------------------\nResults for composing </_class_A>\n\nPrim Stack:\n    root.sdf             /_class_A\n\nChild names:\n     ['PrimFromClassA']\n\n------------------------------------------------------------------------\nResults for composing </_class_A/PrimFromClassA>\n\nPrim Stack:\n    root.sdf             /_class_A/PrimFromClassA\n\n------------------------------------------------------------------------\nResults for composing </_class_B>\n\nPrim Stack:\n    root.sdf             /_class_B\n\nChild names:\n     ['PrimFromClassB']\n\n------------------------------------------------------------------------\nResults for composing </_class_B/PrimFromClassB>\n\nPrim Stack:\n    root.sdf             /_class_B/PrimFromClassB\n```\n\n----------------------------------------\n\nTITLE: Composition Results for Prim /SS3\nDESCRIPTION: Details the composition resolution for the prim path `/SS3`. It shows the Prim Stack, listing layers contributing opinions to this prim, and the Time Offsets, illustrating how time scales and offsets accumulate through the hierarchy of sublayers and references affecting this prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer4.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </SS3>\n\nPrim Stack:\n    ss_24tcps_12fps.sdf  /SS3\n    ss_24tcps_12fps.sdf  /SS3\n    ss_24tcps_12fps.sdf  /SS3\n    ss_24tcps_12fps.sdf  /SS3\n    ref.sdf              /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_48tcps.sdf       /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_24tcps_12fps.sdf /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_12fps.sdf        /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n\nTime Offsets:\n    session.sdf          /SS3            root       (offset=0.00, scale=1.00)\n        session.sdf                      sublayer   (offset=0.00, scale=0.50)\n        sess_s.sdf                       sublayer   (offset=5.00, scale=1.00)\n        sess_s_48tcps.sdf                sublayer   (offset=5.00, scale=0.50)\n        sess_s_24tcps_12fps.sdf          sublayer   (offset=5.00, scale=1.00)\n        sess_s_12fps.sdf                 sublayer   (offset=5.00, scale=2.00)\n        s.sdf                            sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=4.00)\n        s_48tcps.sdf                     sublayer   (offset=10.00, scale=0.50)\n        ss.sdf                           sublayer   (offset=15.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=15.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=15.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=15.00, scale=4.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=4.00)\n        s_12fps.sdf                      sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=4.00)\n    ref.sdf              /Ref            reference  (offset=40.00, scale=4.00)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.50)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=2.00)\n    ref_48tcps.sdf       /Ref            reference  (offset=40.00, scale=2.00)\n        ref_s.sdf                        sublayer   (offset=0.00, scale=2.00)\n        ref_s_24tcps_12fps.sdf           sublayer   (offset=0.00, scale=2.00)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=4.00)\n    ref_24tcps_12fps.sdf /Ref            reference  (offset=40.00, scale=4.00)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.50)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=2.00)\n    ref_12fps.sdf        /Ref            reference  (offset=40.00, scale=8.00)\n        ref_s.sdf                        sublayer   (offset=0.00, scale=0.50)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.25)\n        ref_s_24tcps_12fps.sdf           sublayer   (offset=0.00, scale=0.50)\n\n------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Composition Result for /Model/Looks/Brass\nDESCRIPTION: Shows the resulting prim stack for '/Model/Looks/Brass'. Composition includes contributions from '/Looks/Brass' in 'looks.sdf' and inherits/specializes from the '/Model/Looks/Metal' hierarchy (including BaseMaterial and Material) across both 'root.sdf' and 'looks.sdf'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicSpecializesAndInherits.testenv/baseline/compositionResults_BasicSpecializesAndInherits.txt#2025-04-23_snippet_12\n\nLANGUAGE: log\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Model/Looks/Brass>\n\nPrim Stack:\n    root.sdf             /Model/Looks/Brass\n    looks.sdf            /Looks/Brass\n    root.sdf             /Model/Looks/Metal\n    root.sdf             /Model/Looks/Material\n    root.sdf             /Model/Looks/BaseMaterial\n    looks.sdf            /Looks/Metal\n    looks.sdf            /Looks/Material\n    looks.sdf            /Looks/BaseMaterial\n```\n\n----------------------------------------\n\nTITLE: Configuring SDF Test Scripts in CMake\nDESCRIPTION: Registers Python test scripts for the SDF library components. These tests cover various functionality like asset paths, attributes, layers, and path expressions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/sdf/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_test_scripts(\n    testenv/testSdfAssetPath.py\n    testenv/testSdfAttribute.py\n    testenv/testSdfAttributeBlocking.py\n    # ... additional test files ...\n)\n```\n\n----------------------------------------\n\nTITLE: Registering USD Alembic Tests in CMake\nDESCRIPTION: Registers various tests for the USD Alembic plugin, including test commands, expected return codes, environment variables, and diff comparisons where applicable.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/plugin/usdAbc/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdAbcAlembicData\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdAbcAlembicData\"\n    EXPECTED_RETURN_CODE 0\n    ENV \n        USD_ABC_NUM_OGAWA_STREAMS=2\n)\n\npxr_register_test(testUsdAbcBugs\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdAbcBugs\"\n    EXPECTED_RETURN_CODE 0\n)\n\n# ... (additional test registrations)\n\npxr_register_test(testUsdAbcXformPrimCollapsing\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdAbcXformPrimCollapsing\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Building and Registering testExecUsdSceneObjects Test\nDESCRIPTION: Defines and registers a test for scene objects functionality in execUsd. This test depends on esf, execUsd, and usdGeom libraries and verifies proper handling of scene objects within the system.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/execUsd/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\npxr_build_test(testExecUsdSceneObjects\n    LIBRARIES\n        esf\n        execUsd\n        usdGeom\n    CPPFILES\n        testenv/testExecUsdSceneObjects.cpp\n)\n\npxr_register_test(testExecUsdSceneObjects\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testExecUsdSceneObjects\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Performing Edit Operations with UsdNamespaceEditor\nDESCRIPTION: Examples of various edit operations using UsdNamespaceEditor.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n# Delete a prim at a specific path\neditor.DeletePrimAtPath(\"/asset/child1\")\neditor.ApplyEdits()\n\n# Delete a UsdProperty\nproperty = stage.GetPropertyAtPath(\"/model/charA.customProperty\")\neditor.DeleteProperty(property)\neditor.ApplyEdits()\n\n# Move a prim, potentially to a different layer\neditor.MovePrimAtPath(\"/asset/Material1\",\"/Materials/Material1\")\neditor.ApplyEdits()\n\n# Use MovePropertyAtPath to rename a property\neditor.MovePropertyAtPath(\"/model/charA.extraProperty\", \"/model/charA.deprecatedProperty\")\neditor.ApplyEdits()\n```\n\n----------------------------------------\n\nTITLE: Structuring USD Core API Manual Content in Markdown\nDESCRIPTION: This markdown snippet outlines the structure of the USD Core API Manual, including main sections and subsections. It uses markdown formatting to create a hierarchical list of topics covered in the manual.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/front.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<ol>\n<li> \\subpage Usd_Page_ObjectModel </li>\n     <ol type=\"i\">\n     <li> \\ref Usd_OM_SdfLayer </li>\n     <li> \\ref Usd_OM_UsdStage </li>\n     <li> \\ref Usd_OM_UsdPrim </li>\n     <li> \\ref Usd_OM_UsdProperty </li>\n     <li> \\ref Usd_OM_UsdAttribute </li>\n     <li> \\ref Usd_OM_UsdRelationship </li>\n     <li> \\ref Usd_OM_Metadata </li>\n     <li> \\ref Usd_OM_OtherObjects </li>\n     </ol>\n<li> \\subpage Usd_Page_Datatypes </li>\n     <ol type=\"i\">\n     <li> \\ref Usd_Datatypes </li>\n     <li> \\ref Usd_Basic_Datatypes </li>\n     <li> \\ref Usd_Roles </li>\n     <li> \\ref Usd_Array_Datatypes </li>\n     <li> \\ref Usd_Dictionary_Type </li>\n     </ol>\n<li> \\subpage Usd_Page_UTF_8 </li>\n     <ol type=\"i\">\n     <li> \\ref Usd_UTF_8_Overview </li>\n     <li> \\ref Usd_UTF_8_Encoding </li>\n     <li> \\ref Usd_UTF_8_Language_Support </li>\n     <li> \\ref Usd_UTF_8_Identifiers </li>\n     <li> \\ref Usd_UTF_8_Operation_Reference </li>\n     <li> \\ref Usd_UTF_8_Encoding_Reference </li>\n     </ol>\n<li> \\subpage Usd_Page_PropertiesOfSceneDescription </li>\n     <ol type=\"i\">\n     <li> \\ref Usd_Ordering </li>\n     <li> \\ref Usd_ValueResolution </li>\n     <li> \\ref Usd_PrimSpecifiers </li>\n     <li> \\ref Usd_ModelHierarchy </li>\n     <li> \\ref Usd_ActiveInactive </li>\n     <li> \\ref Usd_Filetypes </li>\n     <li> \\ref Usd_AssetResolution </li>\n     </ol>\n<li> \\subpage Usd_Page_AdvancedFeatures </li>\n     <ol type=\"i\">\n     <li> \\ref Usd_Page_DynamicFileFormat </li>\n     <li> \\ref Usd_Page_ScenegraphInstancing </li>\n     <li> \\ref Usd_Page_ValueClips </li>\n     </ol>\n<li> \\subpage Usd_Page_AuthoringEditing </li>\n     <ol type=\"i\">\n     <li> \\ref Usd_SelectiveEditing </li>\n     <li> \\ref Usd_Notification </li>\n     </ol>\n<li> \\subpage Usd_Page_CommonIdioms </li>\n     <ol type=\"i\">\n     <li> \\ref Usd_StageTraversal </li>\n     <li> \\ref Usd_WorkingWithSchemas </li>\n     <li> \\ref Usd_BoolReturns </li>\n     <li> \\ref Usd_ErrorReporting </li>\n     </ol>\n<li> \\subpage Usd_Page_BestPractices </li>\n     <ol type=\"i\">\n     <li> \\ref Usd_SharedConstRef </li>\n     <li> \\ref Usd_DataStreaming </li>\n     <li> \\ref Usd_Payloads </li>\n     </ol>\n<li> \\subpage Usd_Page_MultiThreading </li>\n     <ol type=\"i\">\n     <li> \\ref Usd_ThreadSafetyModel </li>\n     <li> \\ref Usd_InternalMultiThreading </li>\n     </ol>\n<li> \\subpage Usd_Page_GeneratingSchemas </li>\n     <ol type=\"i\">\n     <li> \\ref Usd_IsAVsAPISchemas </li>\n     <li> \\ref Usd_SchemaExtensionPhilosophy </li>\n     </ol>\n</ol>\n```\n\n----------------------------------------\n\nTITLE: Combining Collection Binding with Material Purpose in USD\nDESCRIPTION: Demonstrates how to specify different materials for preview and full render purposes within the same collection. This allows for having separate materials optimized for different rendering contexts.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_20\n\nLANGUAGE: usda\nCODE:\n```\n# Material collection binding definitions\n\n# default/fallback bindings for preview and full\nrel material:binding:preview = </materials/PreviewMaterial>\nrel material:binding:full = </materials/FullRenderMaterial>\n\n# More specific bindings for windows collection\nrel material:binding:collection:preview:windows = [</materials/WindowPreviewMaterial>, </Model.collection:windows>]\nrel material:binding:collection:full:windows = [</materials/WindowFullRenderMaterial>, </Model.collection:windows>]\n```\n\n----------------------------------------\n\nTITLE: Illustrating Namespaced Property Conflicts in USDA for Code Generation\nDESCRIPTION: This `.usda` code snippet defines a class `MyClass` to illustrate how `usdGenSchema` handles namespaced properties and potential naming collisions. It shows a standard property (`fooBar`), a namespaced property (`foo:bar`), and a token property (`myToken`). Comments indicate that defining both `fooBar` and `foo:bar` leads to naming collisions in the generated C++ API (both would try to generate `GetFooBarAttr()`) and token registry. Similarly, the `myToken` with value \"foo-bar\" conflicts with `foo:bar` in the token registry if `foo:bar` were allowed.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/generatingSchemas.md#2025-04-23_snippet_5\n\nLANGUAGE: usda\nCODE:\n```\nclass MyClass \"MyClass\" {\n    # Generates UsdMyClass::GetFooBarAttr() and UsdTokens->fooBar with value \n    # \"fooBar\"\n    float fooBar\n\n    # ERROR: Naming collision in both API and tokens. Generates \n    # UsdMyClass::GetFooBarAttr() and UsdTokens->fooBar with value \"foo:bar\"\n    float foo:bar\n\n    # ERROR: Naming collision in tokens. Generates UsdMyClass::GetMyTokenAttr() \n    # and UsdTokens->fooBar with value \"foo-bar\"\n    token myToken = \"foo-bar\" (allowedTokens = [\"foo-bar\"])    \n}\n```\n\n----------------------------------------\n\nTITLE: Tabulating Spline Sample Outputs for Regression Testing in Python\nDESCRIPTION: This data snippet lists the evaluated outputs of a spline function at uniformly spaced input points, showing pairs of input and spline-evaluated results. Such dense sampling supports regression testing for interpolation correctness and serves as a reference for test result comparison. The inputs are interpolated time steps and the outputs are the corresponding spline-evaluated values. This dense tabular format is crucial for detecting errors or drift in spline calculations during automated test runs.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PostRegressiveKeepRatio_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n-0.200000 0.000000\n0.000000 0.000000\n0.004975 0.000015\n0.009950 0.000061\n0.014925 0.000139\n0.019900 0.000249\n0.024876 0.000393\n0.029851 0.000572\n0.034826 0.000785\n0.039801 0.001036\n0.044776 0.001324\n0.049751 0.001650\n0.054726 0.002017\n0.059701 0.002425\n0.064677 0.002875\n0.069652 0.003369\n0.074627 0.003908\n0.079602 0.004495\n0.084577 0.005130\n0.089552 0.005815\n0.094527 0.006552\n0.099502 0.007343\n0.104478 0.008191\n0.109453 0.009096\n0.114428 0.010062\n0.119403 0.011091\n0.124378 0.012185\n0.129353 0.013348\n0.134328 0.014582\n0.139303 0.015891\n0.144279 0.017277\n0.149254 0.018745\n0.154229 0.020298\n0.159204 0.021942\n0.164179 0.023679\n0.169154 0.025516\n0.174129 0.027458\n0.179104 0.029510\n0.184080 0.031680\n0.189055 0.033974\n0.194030 0.036400\n0.199005 0.038966\n0.203980 0.041683\n0.208955 0.044560\n0.213930 0.047610\n0.218905 0.050846\n0.223881 0.054282\n0.228856 0.057935\n0.233831 0.061826\n0.238806 0.065975\n0.243781 0.070410\n0.248756 0.075159\n0.253731 0.080258\n0.258706 0.085748\n0.263682 0.091681\n0.268657 0.098120\n0.273632 0.105139\n0.278607 0.112837\n0.283582 0.121340\n0.288557 0.130819\n0.293532 0.141506\n0.298507 0.153741\n0.303483 0.168044\n0.308458 0.185192\n0.313433 0.206914\n0.318408 0.236990\n0.323383 0.283549\n0.328358 0.544163\n0.333333 0.598571\n0.338308 0.631827\n0.343284 0.656848\n0.348259 0.658861\n0.353234 0.685155\n0.358209 0.704744\n0.363184 0.720526\n0.368159 0.733944\n0.373134 0.745759\n0.378109 0.756404\n0.383085 0.766144\n0.388060 0.775151\n0.393035 0.783545\n0.398010 0.791415\n0.402985 0.798827\n0.407960 0.805833\n0.412935 0.812477\n0.417910 0.818793\n0.422886 0.824812\n0.427861 0.830558\n0.432836 0.836053\n0.437811 0.841317\n0.442786 0.846367\n0.447761 0.851217\n0.452736 0.855880\n0.457711 0.860369\n0.462687 0.864694\n0.467662 0.868865\n0.472637 0.872891\n0.477612 0.876779\n0.482587 0.880537\n0.487562 0.884172\n0.492537 0.887690\n0.497512 0.891096\n0.502488 0.894396\n0.507463 0.897594\n0.512438 0.900696\n0.517413 0.903705\n0.522388 0.906625\n0.527363 0.909460\n0.532338 0.912213\n0.537313 0.914888\n0.542289 0.917486\n0.547264 0.920013\n0.552239 0.922469\n0.557214 0.924858\n0.562189 0.927182\n0.567164 0.929442\n0.572139 0.931642\n0.577114 0.933783\n0.582090 0.935867\n0.587065 0.937895\n0.592040 0.939870\n0.597015 0.941794\n0.601990 0.943667\n0.606965 0.945491\n0.611940 0.947268\n0.616915 0.948999\n0.621891 0.950685\n0.626866 0.952327\n0.631841 0.953927\n0.636816 0.955486\n0.641791 0.957005\n0.646766 0.958484\n0.651741 0.959925\n0.656716 0.961329\n0.661692 0.962697\n0.666667 0.964029\n0.671642 0.965326\n0.676617 0.966590\n0.681592 0.967821\n0.686567 0.969019\n0.691542 0.970186\n0.696517 0.971322\n0.701493 0.972428\n0.706468 0.973504\n0.711443 0.974551\n0.716418 0.975570\n0.721393 0.976562\n0.726368 0.977526\n0.731343 0.978463\n0.736318 0.979375\n0.741294 0.980261\n0.746269 0.981122\n0.751244 0.981958\n0.756219 0.982770\n0.761194 0.983559\n0.766169 0.984324\n0.771144 0.985066\n0.776119 0.985787\n0.781095 0.986485\n0.786070 0.987161\n0.791045 0.987817\n0.796020 0.988451\n0.800995 0.989065\n0.805970 0.989659\n0.810945 0.990233\n0.815920 0.990788\n0.820896 0.991323\n0.825871 0.991840\n0.830846 0.992338\n0.835821 0.992818\n0.840796 0.993280\n0.845771 0.993724\n0.850746 0.994151\n0.855721 0.994561\n0.860697 0.994954\n0.865672 0.995330\n0.870647 0.995690\n0.875622 0.996034\n0.880597 0.996362\n0.885572 0.996674\n0.890547 0.996971\n0.895522 0.997253\n0.900498 0.997519\n0.905473 0.997771\n0.910448 0.998009\n0.915423 0.998232\n0.920398 0.998440\n0.925373 0.998635\n0.930348 0.998816\n0.935323 0.998984\n0.940299 0.999138\n0.945274 0.999279\n0.950249 0.999406\n0.955224 0.999521\n0.960199 0.999623\n0.965174 0.999713\n0.970149 0.999790\n0.975124 0.999855\n0.980100 0.999907\n0.985075 0.999948\n1.000000 1.000000\n1.200000 1.000000\n```\n\n----------------------------------------\n\nTITLE: Defining a USD Reference Arc\nDESCRIPTION: This line defines a reference composition arc within a USD ASCII file. It signifies that the scene description defined in `./reference.usda` is referenced into the current layer (`anon.usda`), typically scoped under a specific prim path (though not explicitly shown here). The `[001]` may denote ordering or an identifier.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUtils/testenv/testUsdUtilsDependencyExtractor/baseline/anon.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\nanon.usda references[001]: ./reference.usda\n```\n\n----------------------------------------\n\nTITLE: Configuring a CMake Test Execution for `usddiff`\nDESCRIPTION: This CMake snippet specifies properties for a test, likely used within an `add_test` command. It defines the command to run: `usddiff` comparing `a_crate.usdz` and `b_crate.usdz`. It expects `usddiff` to exit with code 1 (indicating differences), redirects standard output to `iterate_usd_crate.txt`, compares that file's content against a reference using `DIFF_COMPARE`, and prepends the USD binary directory to the execution path using `PRE_PATH`. This setup is typical for testing command-line tools within a CMake build process.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddiff/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usddiff a_crate.usdz b_crate.usdz\"\n    EXPECTED_RETURN_CODE 1\n    STDOUT_REDIRECT iterate_usd_crate.txt\n    DIFF_COMPARE iterate_usd_crate.txt\n    PRE_PATH\n        ${CMAKE_INSTALL_PREFIX}/bin\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Test Scripts for OpenUSD Kind Library (CMake)\nDESCRIPTION: Utilizes the custom `pxr_test_scripts` CMake function to declare the Python script located at 'testenv/testKindRegistry.py' as a test associated with the 'kind' package. This typically registers the script with the build system's testing infrastructure (CTest).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/kind/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_test_scripts(\n    testenv/testKindRegistry.py\n)\n```\n\n----------------------------------------\n\nTITLE: Including USD Example Subdirectories\nDESCRIPTION: Adds multiple subdirectories containing different USD examples to the build system, including object handling, dancing cubes animation, recursive payload processing, resolver implementation, schema examples, and file variant model assets.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/examples/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(usdObj)\nadd_subdirectory(usdDancingCubesExample)\nadd_subdirectory(usdRecursivePayloadsExample)\nadd_subdirectory(usdResolverExample)\nadd_subdirectory(usdSchemaExamples)\nadd_subdirectory(usdMakeFileVariantModelAsset)\n```\n\n----------------------------------------\n\nTITLE: Examining USD Layer Stack and Composition Results\nDESCRIPTION: Shows the layer stack analysis and composition results for a USD file, including variant selections and prim stack information. The output demonstrates how variants 'v1=a' and 'v2=b' are resolved in the composition process.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantSelectionInVariant2.testenv/baseline/compositionResults_TrickyVariantSelectionInVariant2.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLoading @TrickyVariantSelectionInVariant2/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </Ref>\n\nPrim Stack:\n    root.sdf             /Ref\n    root.sdf             /Ref{v1=a}\n    root.sdf             /Ref{v2=b}\n\nVariant Selections:\n    {v1 = a}\n    {v2 = b}\n\nChild names:\n     ['Model']\n\n------------------------------------------------------------------------\nResults for composing </Ref/Model>\n\nPrim Stack:\n    root.sdf             /Ref{v2=b}Model\n\n------------------------------------------------------------------------\nResults for composing </Root>\n\nPrim Stack:\n    root.sdf             /Root\n    root.sdf             /Ref{v2=b}Model\n```\n\n----------------------------------------\n\nTITLE: Configuring HIO Library Build in CMake\nDESCRIPTION: Configures the main HIO library build including dependencies, public/private classes, headers, source files and resources. Sets up core imaging functionality for handling textures, images, and GLSL shaders.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hio/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE hio)\n\npxr_library(hio\n    LIBRARIES\n        arch\n        js\n        plug\n        tf\n        vt\n        trace\n        ar\n        hf\n\n    PUBLIC_CLASSES\n        fieldTextureData\n        glslfx\n        glslfxConfig\n        glslfxResourceLayout\n        image\n        imageRegistry\n        types\n\n    PRIVATE_CLASSES\n        debugCodes\n        dictionary\n\n    PUBLIC_HEADERS\n        api.h\n\n    PRIVATE_HEADERS\n        OpenEXR/openexr-c.h\n        rankedTypeMap.h\n        stb/stb_image.h\n        stb/stb_image_resize2.h\n        stb/stb_image_write.h\n\n    CPPFILES\n        OpenEXRImage.cpp\n        OpenEXR/openexr-c.c\n        stbImage.cpp\n\n    RESOURCE_FILES\n        plugInfo.json\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Composition Results for USD Prim /S1\nDESCRIPTION: This section shows the composition results for the USD prim `/S1`. It includes the Prim Stack, identifying `s.sdf` as the source layer, and the calculated Time Offsets for all contributing sublayers, demonstrating how time offsets and scales accumulate through the composition arc originating from `root_12fps.sdf`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecond4.txt#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </S1>\n\nPrim Stack:\n    s.sdf                /S1\n\nTime Offsets:\n    root_12fps.sdf       /S1             root       (offset=0.00, scale=1.00)\n        s.sdf                            sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=4.00)\n        s_48tcps.sdf                     sublayer   (offset=10.00, scale=0.50)\n        ss.sdf                           sublayer   (offset=15.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=15.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=15.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=15.00, scale=4.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=4.00)\n        s_12fps.sdf                      sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=4.00)\n```\n\n----------------------------------------\n\nTITLE: Configuring MaterialX-Dependent Test Program\nDESCRIPTION: Conditionally defines a test program for the MaterialX shader generation functionality. This test is only included when MaterialX support is enabled in the build.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (${PXR_ENABLE_MATERIALX_SUPPORT})\npxr_build_test(testHdStMaterialXShaderGen\n    LIBRARIES\n        hdSt\n        hdMtlx\n        tf\n    CPPFILES\n        testenv/testHdStMaterialXShaderGen.cpp\n)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimB/PrimB_Child\nDESCRIPTION: Shows the composition results for the child prim </PrimB/PrimB_Child>. The prim stack indicates its definition originates from root.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimB/PrimB_Child>\n\nPrim Stack:\n    root.sdf             /PrimB/PrimB_Child\n```\n\n----------------------------------------\n\nTITLE: Setting Up USD MaterialX Test Scripts\nDESCRIPTION: Registers test scripts for the USD MaterialX integration, including discovery, file format, and parser tests.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdMtlx/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_test_scripts(\n    testenv/testUsdMtlxDiscovery.py\n    testenv/testUsdMtlxFileFormat.py\n    testenv/testUsdMtlxParser.py\n)\n```\n\n----------------------------------------\n\nTITLE: Animation Coordinate Points Data\nDESCRIPTION: Series of 2D coordinate points representing sampled positions along an animation curve trajectory\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_54\n\nLANGUAGE: text\nCODE:\n```\n(110.6865234375, 15.56494140625)\n(110.84098815917969, 15.446968078613281)\n(110.9898681640625, 15.24114990234375)\n(111.2734375, 14.59765625)\n(111.8017578125, 12.60498046875)\n(112.3125, 10.09375)\n(112.8466796875, 7.57080078125)\n(113.1353759765625, 6.46331787109375)\n(113.4453125, 5.54296875)\n(113.7816162109375, 4.87310791015625)\n(113.96125793457031, 4.651908874511719)\n(114.1494140625, 4.51708984375)\n(114.24688529968262, 4.4845476150512695)\n(114.34672546386719, 4.476570129394531)\n(114.5538330078125, 4.53826904296875)\n(114.77137756347656, 4.710105895996094)\n(115, 5)\n(115.8505859375, 6.12744140625)\n(116.5546875, 6.80078125)\n(117.1533203125, 7.17529296875)\n(117.5, 7.32518281535649)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /Parent/Sibling Prim\nDESCRIPTION: Shows the prim stack for the composed prim at path </Parent/Sibling>. The stack reflects contributions from the parent's hierarchy and referenced/inherited sources.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Parent/Sibling>\n\nPrim Stack:\n    root.sdf             /Parent/Sibling\n    root.sdf             /PI/Sibling\n    ref.sdf              /PR/Sibling\n    root.sdf             /PIS/Sibling\n    root.sdf             /PISI/Sibling\n```\n\n----------------------------------------\n\nTITLE: Defining a Two-Knot Linear Spline (USD Spline Format)\nDESCRIPTION: Defines a spline named 'TwoKnotLinear' with double precision values. It features two knots at time 1 (value 1) and time 5 (value 2). Unlike the Bezier example, the interpolation ('next interp') between these knots is explicitly set to Linear, resulting in a straight line segment. Extrapolation remains Held, and tangent properties are zeroed as they are less relevant for linear interpolation. This definition is used for tests like 'Test Case 4: Sample([1, 5], 125, 500, 1)'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSpline: TwoKnotLinear\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Linear\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 5\n  value 2\n  next interp Linear\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Spline Definition Block - RegressiveLoop Bezier Spline - Text\nDESCRIPTION: This block defines a spline named 'RegressiveLoop' with Bezier curve type, specifying knot structure, extrapolation modes, tangent width/slope, and time/value for each knot. Used as input or reference for curve interpolation algorithms. Dependencies are spline evaluation libraries (context assumed outside this snippet), and interpretation expects knowledge of spline/animation data formats. Input is descriptive spline metadata, output is curve behavior for a sampler or visualizer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nSpline: RegressiveLoop\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 156\n  value 0\n  next interp Curve\n  pre-tan width 6.2\n  pre-tan slope -1.3\n  post-tan width 15.8\n  post-tan slope -1.3\nKnot:\n  value type double\n  curve type Bezier\n  time 167\n  value 28.8\n  next interp Curve\n  pre-tan width 21.7\n  pre-tan slope 2.4\n  post-tan width 5.5\n  post-tan slope 2.4\n```\n\n----------------------------------------\n\nTITLE: Registering HdSt Bar Allocation Limit Test in CMake\nDESCRIPTION: Configures a test for HdSt bar allocation limit using offscreen rendering and image comparison. It sets environment variables for debugging and expects a specific return code.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStBarAllocationLimit\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBarAllocationLimit --offscreen --write testHdStBarAllocationLimit.png\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        testHdStBarAllocationLimit.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    TESTENV testHdStBarAllocationLimit\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </_X/B> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </_X/B>. The prim stack includes contributions from /_X/B and /_X/_Y in 'root.sdf', plus /Ref from 'ref.sdf'. The resolved child prim name is 'C'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </_X/B>\n\nPrim Stack:\n    root.sdf             /_X/B\n    root.sdf             /_X/_Y\n    ref.sdf              /Ref\n\nChild names:\n     ['C']\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra DataSource Test Build in CMake\nDESCRIPTION: Defines the build configuration for testing Hydra's data source system. This test validates the core functionality for accessing and managing data within the Hydra framework.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testHdDataSource\n   LIBRARIES\n       hd\n       sdf\n       tf\n\n   CPPFILES\n       testenv/testHdDataSource.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PI/Child Prim\nDESCRIPTION: Shows the prim stack for the composed prim at path </PI/Child>, inheriting from /PIS/Child and /PISI/Child.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PI/Child>\n\nPrim Stack:\n    root.sdf             /PI/Child\n    root.sdf             /PIS/Child\n    root.sdf             /PISI/Child\n```\n\n----------------------------------------\n\nTITLE: Composing /VariantAtRelocateSource/Inherit Prim via Inheritance in USD\nDESCRIPTION: Displays the composition results for </VariantAtRelocateSource/Inherit>, demonstrating inheritance. Its prim stack includes contributions from its sibling's 'Class' prim path across `root.sdf` and `ref.sdf`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorOpinionAtRelocationSource.testenv/baseline/compositionResults_ErrorOpinionAtRelocationSource.txt#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </VariantAtRelocateSource/Inherit>\n\nPrim Stack:\n    root.sdf             /VariantAtRelocateSource/Inherit\n    root.sdf             /VariantAtRelocateSource/Sibling/Class\n    root.sdf             /VariantAtRelocateSource/Child{child=a}Child2/Class\n    ref.sdf              /Ref/Child/Child2/Class\n```\n\n----------------------------------------\n\nTITLE: USD Composition Error: Invalid Reference to Child of Pre-Relocated Prim\nDESCRIPTION: Details a USD composition error occurring for the prim '</Bad_RefToChildOfPreRelo>'. The error indicates that this prim, defined in 'root.sdf', cannot reference '</Char/PreRelo/ModelChild>' in 'char.sdf'. The target child prim is considered prohibited because its parent ('</Char/PreRelo>') is the source of a relocation, which restricts referencing its descendants in this manner.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInvalidReferenceToRelocationSource.testenv/baseline/compositionErrors_ErrorInvalidReferenceToRelocationSource.txt#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n@ErrorInvalidReferenceToRelocationSource/root.sdf@</Bad_RefToChildOfPreRelo>\nCANNOT reference:\n@ErrorInvalidReferenceToRelocationSource/char.sdf@</Char/PreRelo/ModelChild>\nwhich is a prohibited child of its parent because it would require allowing opinions from the source of a relocation at @ErrorInvalidReferenceToRelocationSource/char.sdf@</Char/PreRelo>.\n```\n\n----------------------------------------\n\nTITLE: Defining BoldS Bezier Spline in OpenUSD\nDESCRIPTION: Specification for a BoldS Bezier spline with held extrapolation. The curve has two knots at (0,0) and (1,1), with tangent settings that create an S-shaped curve biased toward higher values in the middle range.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_94\n\nLANGUAGE: text\nCODE:\n```\nSpline: BoldS\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 1.25\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 0.5\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: USD Property Names List for /A\nDESCRIPTION: Lists the names of properties found on the composed prim `/A`. In this case, only the property 'test' exists.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndVariants.testenv/baseline/compositionResults_SpecializesAndVariants.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nProperty names:\n     ['test']\n```\n\n----------------------------------------\n\nTITLE: Setting PYTHONPATH for USD Modules\nDESCRIPTION: Command to configure PYTHONPATH environment variable to include USD Python modules.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/usdfaq.rst#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n$ export PYTHONPATH=$PYTHONPATH:<inst>/lib/python\n```\n\n----------------------------------------\n\nTITLE: Using usdfixbrokenpixarschemas to Fix Schema Issues\nDESCRIPTION: usdfixbrokenpixarschemas attempts to fix USD layers for updates introduced by newer Pixar schema revisions. It takes input and output file paths and has options for verbosity.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toolset.rst#2025-04-23_snippet_9\n\nLANGUAGE: none\nCODE:\n```\nusdfixbrokenpixarschemas [-h] [-v] [-o OUT] [--usdz [USDZ]] FILE\n```\n\n----------------------------------------\n\nTITLE: USD Path Pattern with Abstract Predicate\nDESCRIPTION: Example of matching root-level prims starting with 'char' that are abstract (classes).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_11\n\nLANGUAGE: usd\nCODE:\n```\n/char*{abstract}\n```\n\n----------------------------------------\n\nTITLE: Configuring TsRegressionPreventer Result Parameters - Structured Text\nDESCRIPTION: This snippet specifies the configuration of result flags and segment parameters for a time series regression preventer component. Each field controls whether certain adjustments and segments are present and provides widths for pre- and post-segments. Inputs are key-value pairs with boolean or floating-point values, and outputs are the established conditions for regression protection in downstream spline or animation processing.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReorderLimitActive_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: structured text\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: true\n  havePreSegment: true\n  preActiveAdjusted: true\n  preActiveAdjustedWidth: 0.130900\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.250000\n  havePostSegment: true\n  postActiveAdjusted: false\n  postActiveAdjustedWidth: 0.250000\n  postOppositeAdjusted: false\n  postOppositeAdjustedWidth: 0.250000\n```\n\n----------------------------------------\n\nTITLE: StartVert Bezier Spline Configuration\nDESCRIPTION: Defines a Bezier spline with vertical start characteristics. Includes knot definitions with specific tan widths and slopes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_36\n\nLANGUAGE: text\nCODE:\n```\nSpline:\\n  value type double\\n  time valued 0\\n  curve type Bezier\\n  pre extrap Held\\n  post extrap Held\\nKnot:\\n  value type double\\n  curve type Bezier\\n  time 0\\n  value 0\\n  next interp Curve\\n  pre-tan width 0\\n  pre-tan slope 0\\n  post-tan width 0\\n  post-tan slope 0\\nKnot:\\n  value type double\\n  curve type Bezier\\n  time 1\\n  value 1\\n  next interp Curve\\n  pre-tan width 1\\n  pre-tan slope 0\\n  post-tan width 0\\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Analyzing Composition for /Root Prim (USD)\nDESCRIPTION: Displays the composition results for the prim located at the path '/Root'. It lists the layers contributing to this prim ('root.sdf', 'A.sdf'), enumerates all composed property names, shows the layer source for each property stack ('/Root.A_attr', '/Root.attr', etc.), and details the targets for its relationships ('/Root.privateRel', '/Root.publicRel').\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorPermissionDenied.testenv/baseline/compositionResults_ErrorPermissionDenied.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nResults for composing </Root>\n\nPrim Stack:\n    root.sdf             /Root\n    A.sdf                /A\n\nProperty names:\n     ['A_attr', 'attr', 'privateRel', 'publicRel', 'localAttr']\n\nProperty stacks:\n/Root.A_attr:\n    A.sdf                /A.A_attr\n/Root.attr:\n    A.sdf                /A.attr\n/Root.localAttr:\n    root.sdf             /Root.localAttr\n/Root.privateRel:\n    A.sdf                /A.privateRel\n/Root.publicRel:\n    root.sdf             /Root.publicRel\n    A.sdf                /A.publicRel\n\nRelationship targets:\n/Root.privateRel:\n    /Root.A_attr\n/Root.publicRel:\n    /Root.A_attr\n```\n\n----------------------------------------\n\nTITLE: Configuring Test for Compressing USD with Time Samples\nDESCRIPTION: Installs the test environment for 'testTimeSample' and registers a CMake test named 'testUsdCompressTimeSample'. This test executes the `usdcompress` command on 'CubeWithTimeSample.usda', which contains time-sampled color data, outputting 'CubeWithTimeSampleCompressed.usda'. It expects a return code of 0 and compares both the compressed USDA file and the resulting Draco file against predefined expected outputs to ensure successful compression of assets with time samples.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdcompress/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Checks that cube with one time sample for color is successfully compressed.\npxr_install_test_dir(\n\tSRC testenv/testTimeSample\n\tDEST testUsdCompressTimeSample\n)\n\npxr_register_test(testUsdCompressTimeSample\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdcompress CubeWithTimeSample.usda -o CubeWithTimeSampleCompressed.usda\"\n    EXPECTED_RETURN_CODE 0\n    DIFF_COMPARE CubeWithTimeSampleCompressed.usda\n    DIFF_COMPARE CubeWithTimeSampleCompressed.usda.draco/Cube_Geom_Cube.drc\n    PRE_PATH\n        ${CMAKE_INSTALL_PREFIX}/bin\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Composition Result for /Model/Looks\nDESCRIPTION: Shows the resulting prim stack for '/Model/Looks'. Composition includes opinions from '/Looks' defined in 'looks.sdf', likely via a reference or payload from '/Model' in 'root.sdf'. Child material prim names are listed.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicSpecializesAndInherits.testenv/baseline/compositionResults_BasicSpecializesAndInherits.txt#2025-04-23_snippet_8\n\nLANGUAGE: log\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Model/Looks>\n\nPrim Stack:\n    root.sdf             /Model/Looks\n    looks.sdf            /Looks\n\nChild names:\n     ['BaseMaterial', 'Material', 'Metal', 'Brass']\n```\n\n----------------------------------------\n\nTITLE: Installing PCP Museum Test Directories with CMake\nDESCRIPTION: Series of pxr_install_test_dir commands that copy test environment directories from source to destination. Each command installs a specific test case for PCP composition behavior testing, including basic operations, complex inheritance scenarios, and time code handling.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testPcpMuseum_BasicOwner.testenv\n    DEST testPcpMuseum_BasicOwner\n)\n```\n\n----------------------------------------\n\nTITLE: USD Composition Analysis for Prim </S2>: Stack and Time Offsets\nDESCRIPTION: This snippet shows the composition results for the prim path </S2> within a USD stage. The 'Prim Stack' identifies 's_48tcps.sdf' as the strongest layer defining this prim. The 'Time Offsets' section details the hierarchy of contributing layers, starting from the root layer ('session_24fps.sdf') and including all sublayers, showing the accumulated time offset and scale applied at each level. This output helps visualize how layer stacking and time warping affect the final representation of the prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer3.txt#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </S2>\n\nPrim Stack:\n    s_48tcps.sdf         /S2\n\nTime Offsets:\n    session_24fps.sdf    /S2             root       (offset=0.00, scale=1.00)\n        sess_s.sdf                       sublayer   (offset=10.00, scale=2.00)\n        sess_s_48tcps.sdf                sublayer   (offset=10.00, scale=1.00)\n        sess_s_24tcps_12fps.sdf          sublayer   (offset=10.00, scale=2.00)\n        sess_s_12fps.sdf                 sublayer   (offset=10.00, scale=4.00)\n        root_12fps.sdf                   sublayer   (offset=0.00, scale=2.00)\n        s.sdf                            sublayer   (offset=20.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=40.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=40.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=40.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=40.00, scale=8.00)\n        s_48tcps.sdf                     sublayer   (offset=20.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=8.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=20.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=40.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=40.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=40.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=40.00, scale=8.00)\n        s_12fps.sdf                      sublayer   (offset=20.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=60.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=60.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=60.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=60.00, scale=8.00)\n```\n\n----------------------------------------\n\nTITLE: Using usdedit to Edit USD Files\nDESCRIPTION: usdedit converts a USD file to text format for editing and back to the original format after editing. It takes the file path as an argument and uses the EDITOR environment variable.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toolset.rst#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nusdedit [-h] [--out OUTFILE] [-s] [FILE]\n```\n\n----------------------------------------\n\nTITLE: Creating TsTest_SplineData Object in Python\nDESCRIPTION: This snippet initializes a TsTest_SplineData object with detailed spline configuration, including interpolation method, extrapolation settings, and knot data using precise floating-point values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PostRegressiveContain_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.999999999999ap-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1p+0'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Configuring RenderVar Properties in USDA\nDESCRIPTION: Defines render variables including data types and source names for rendering configuration.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/render_user_guide.rst#2025-04-23_snippet_29\n\nLANGUAGE: usda\nCODE:\n```\ntoken dataType = \"float\"\nstring sourceName = \"a\"\n}\ndef RenderVar \"directDiffuse\" {\n    string sourceName = \"C<RD>[<L.>O]\"\n    token sourceType = \"lpe\"\n}\ndef RenderVar \"id\" {\n    token dataType = \"int\"\n    string sourceName = \"id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering usdzip Asset Packaging Test in CMake\nDESCRIPTION: Registers a Python test named `testUsdZipAsset` using `pxr_register_test`. The test executes `usdzip` with the `-a` (asset) flag, specifying `root.usd` as the asset and creating `package.usdz`. It lists the contents to `contents.txt`, expects success (return code 0), and compares the generated `contents.txt` against a reference file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdzip/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdZipAsset\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdzip -a root.usd package.usdz -l contents.txt\"\n    DIFF_COMPARE contents.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Converting UsdShadeConnectableAPI Method Calls\nDESCRIPTION: Example showing how to replace deprecated IsShader() and IsNodeGraph() convenience methods with direct type checking using IsA<>()\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_connectable_nodes.rst#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Old way:\nconnectableAPI.IsShader()\nconnectableAPI.IsNodeGraph()\n\n// New way:\nconnectableAPI.GetPrim().IsA<UsdShadeShader>()\nconnectableAPI.GetPrim().IsA<UsdShadeNodeGraph>()\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Setup for OpenUSD in reStructuredText\nDESCRIPTION: A reStructuredText directive that creates a tutorial admonition with a link to environment setup instructions and version compatibility information for USD 25.05.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_setup_version_badge.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. div:: usd-tutorial-admonition\n\n   :fa:`cogs` :ref:`Configure your Environment <tut_usd_tutorials:Environment Setup>`\n\n   :fa:`check` Tested with `USD 25.05 <https://github.com/PixarAnimationStudios/OpenUSD/tree/v25.05>`_\n```\n\n----------------------------------------\n\nTITLE: Flattened USD Stage with Blocked Primvar\nDESCRIPTION: Shows the resulting USD representation after blocking a primvar. The displayColor is set to None, but indices remain.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/primvars.rst#2025-04-23_snippet_11\n\nLANGUAGE: usda\nCODE:\n```\ndef Mesh \"faceVarying\"\n{\n    float3[] extent = [(-1, 0, 0), (1, 1, 0)]\n    int[] faceVertexCounts = [4, 4]\n    int[] faceVertexIndices = [3, 2, 1, 0, 5, 4, 2, 3]\n    point3f[] points = [(-1, 0, 0), (-1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 1, 0), (1, 0, 0)]\n    color3f[] primvars:displayColor = None (\n        interpolation = \"faceVarying\"\n    )\n    int[] primvars:displayColor:indices = [0, 1, 2, 3, 0, 1, 2, 3]\n    double3 xformOp:translate = (0, 0, -10)\n    uniform token[] xformOpOrder = [\"xformOp:translate\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TsTest_SplineData Object with Detailed Configuration in Python\nDESCRIPTION: This snippet initializes a TsTest_SplineData object with specific settings for interpolation, extrapolation, and knot points. It uses custom data structures and precise floating-point representations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveKeepStart_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.4cccccccccccdp+0'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.0f7f3ae9122b3p-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimWithSelfReference\nDESCRIPTION: Details the composition results for </PrimWithSelfReference>. The prim stack shows its definition in root.sdf and contributions from internal references to </InternalReference> (root.sdf) and </InternalSublayerReference> (sublayer.sdf). Child names from both references are listed.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimWithSelfReference>\n\nPrim Stack:\n    root.sdf             /PrimWithSelfReference\n    root.sdf             /InternalReference\n    sublayer.sdf         /InternalSublayerReference\n\nChild names:\n     ['InternalSublayerReference_Child', 'InternalReference_Child']\n```\n\n----------------------------------------\n\nTITLE: Configuring the hdEmbree Plugin Build using pxr_plugin (CMake)\nDESCRIPTION: This snippet utilizes the `pxr_plugin` CMake macro to define the build configuration for the `hdEmbree` plugin. It specifies dependencies like core USD libraries (`plug`, `tf`, `vt`, etc.), TBB (`${TBB_tbb_LIBRARY}`), and Embree (`${EMBREE_LIBRARY}`). It also defines include directories, public/private C++ classes that correspond to source files, public header files, resource files (like `plugInfo.json`), and Doxygen documentation files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/plugin/hdEmbree/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_plugin(hdEmbree\n   LIBRARIES\n        plug\n        tf\n        vt\n        gf\n        work\n        hf\n        hd\n        hdx\n        ${TBB_tbb_LIBRARY}\n        ${EMBREE_LIBRARY}\n\n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n        ${EMBREE_INCLUDE_DIR}\n\n    PUBLIC_CLASSES\n        config\n        instancer\n        mesh\n        meshSamplers\n        renderBuffer\n        renderer\n        rendererPlugin\n        renderDelegate\n        renderPass\n        sampler\n\n    PUBLIC_HEADERS\n        context.h\n        renderParam.h\n\n    PRIVATE_CLASSES\n        implicitSurfaceSceneIndexPlugin\n\n    RESOURCE_FILES\n        plugInfo.json\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Registering usdLux Test Scripts\nDESCRIPTION: Registers Python test scripts for testing various aspects of the usdLux library including light functionality, linking API, and light list API.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdLux/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_test_scripts(\n    testenv/testUsdLuxLight.py\n    testenv/testUsdLuxLinkingAPI.py\n    testenv/testUsdLuxLightListAPI.py\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Running hdPrman\nDESCRIPTION: List of environment variables required for running hdPrman, including paths for Python modules, shaders, plugins, and textures.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/plugins_renderman.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPYTHONPATH=$PYTHONPATH:<inst>/lib/python\nRMANTREE=<RenderMan installation directory>\nRMAN_SHADERPATH=$RMANTREE/lib/shaders:<inst>/plugin/usd/resources/shaders\nRMAN_RIXPLUGINPATH=$RMANTREE/lib/plugins\nRMAN_TEXTUREPATH=$RMANTREE/lib/textures:$RMANTREE/lib/plugins:<inst>/plugin/usd\nRMAN_DISPLAYPATH=$RMANTREE/lib/plugins\nRMAN_PROCEDURALPATH=$RMANTREE/lib/plugins\n```\n\n----------------------------------------\n\nTITLE: Configuring Regressive Pre-Gradient Bezier Spline in OpenUSD\nDESCRIPTION: This snippet defines a regressive pre-gradient Bezier spline configuration in OpenUSD. It specifies the value type, time valuation, curve type, and extrapolation methods.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_87\n\nLANGUAGE: plaintext\nCODE:\n```\nSpline: RegressivePreG\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\n```\n\n----------------------------------------\n\nTITLE: Analyzing Composition for /middleman Prim in USD\nDESCRIPTION: Displays the composition results for the '/middleman' prim, showing its prim stack (inheriting from '/implementation'), the active variant selection ('testVariantSet=testVariant'), resolved property names, and the corresponding property stacks indicating the source of each attribute value within 'root.sdf'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndVariants3.testenv/baseline/compositionResults_SpecializesAndVariants3.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </middleman>\n\nPrim Stack:\n    root.sdf             /middleman\n    root.sdf             /implementation\n    root.sdf             /implementation{testVariantSet=testVariant}\n    root.sdf             /_class_defaultVariantSelections\n    root.sdf             /_class_defaultVariantSelections{testVariantSet=testVariant}\n\nVariant Selections:\n    {testVariantSet = testVariant}\n\nProperty names:\n     ['classVariantAttr', 'variantAttr']\n\nProperty stacks:\n/middleman.classVariantAttr:\n    root.sdf             /_class_defaultVariantSelections{testVariantSet=testVariant}.classVariantAttr\n/middleman.variantAttr:\n    root.sdf             /implementation{testVariantSet=testVariant}.variantAttr\n```\n\n----------------------------------------\n\nTITLE: Registering Render Test Cases with Image Comparison - USD Test Framework - CMake\nDESCRIPTION: This CMake script snippet uses the pxr_register_test macro to register a test for the 'testHdStBasicDrawing' utility, specifying test command-line arguments, expected output images for comparison, failure tolerances, and environment variables. Dependencies include the test binary at CMAKE_INSTALL_PREFIX, the test utility itself, and configured environment variables (such as TF_DEBUG and multi draw flags). Key parameters set the drawing mode (--repr), refinement level (--refineLevel), and image output path. Each test expects an output PNG image which is compared to a known good reference, and a return code of 0. This structure ensures consistent validation of rendering output and quick regression testing.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_Immediate_lighting_lv2_wire\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --lighting --repr wire --refineLevel 2 --write testHdStBasicDrawing_lighting_lv2_wire.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lighting_lv2_wire.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_Immediate_lighting_lv2_wireOnSurf\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --lighting --repr wireOnSurf --refineLevel 2 --write testHdStBasicDrawing_lighting_lv2_wireOnSurf.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lighting_lv2_wireOnSurf.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_Immediate_lighting_lv2_refined\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --lighting --repr refined --refineLevel 2 --write testHdStBasicDrawing_lighting_lv2_refined.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lighting_lv2_refined.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_Immediate_lighting_lv2_refinedWire\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --lighting --repr refinedWire --refineLevel 2 --write testHdStBasicDrawing_lighting_lv2_refinedWire.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lighting_lv2_refinedWire.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_Immediate_lighting_lv2_refinedWireOnSurf\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --lighting --repr refinedWireOnSurf --refineLevel 2 --write testHdStBasicDrawing_lighting_lv2_refinedWireOnSurf.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lighting_lv2_refinedWireOnSurf.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_MDI_lv0_points\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr points --write testHdStBasicDrawing_lv0_points.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv0_points.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_MDI_lv0_hull\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr hull --write testHdStBasicDrawing_lv0_hull.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv0_hull.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_MDI_lv0_smoothHull\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr smoothHull --write testHdStBasicDrawing_lv0_smoothHull.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv0_smoothHull.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_MDI_lv0_wire\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr wire --write testHdStBasicDrawing_lv0_wire.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv0_wire.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_MDI_lv0_wireOnSurf\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr wireOnSurf --write testHdStBasicDrawing_lv0_wireOnSurf.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv0_wireOnSurf.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_MDI_lv0_hull_cullback\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr hull --cullStyle BackUnlessDoubleSided --write testHdStBasicDrawing_lv0_hull_cullback.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv0_hull_cullback.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_MDI_lv0_smoothHull_cullback\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr smoothHull --cullStyle BackUnlessDoubleSided --write testHdStBasicDrawing_lv0_smoothHull_cullback.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv0_smoothHull_cullback.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_MDI_lv0_wire_cullback\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr wire --cullStyle BackUnlessDoubleSided --write testHdStBasicDrawing_lv0_wire_cullback.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv0_wire_cullback.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_MDI_lv0_wireOnSurf_cullback\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr wireOnSurf --cullStyle BackUnlessDoubleSided --write testHdStBasicDrawing_lv0_wireOnSurf_cullback.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv0_wireOnSurf_cullback.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_MDI_lv0_hull_cullfront\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr hull --cullStyle FrontUnlessDoubleSided --write testHdStBasicDrawing_lv0_hull_cullfront.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv0_hull_cullfront.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_MDI_lv0_smoothHull_cullfront\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr smoothHull --cullStyle FrontUnlessDoubleSided --write testHdStBasicDrawing_lv0_smoothHull_cullfront.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv0_smoothHull_cullfront.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_MDI_lv0_wire_cullfront\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr wire --cullStyle FrontUnlessDoubleSided --write testHdStBasicDrawing_lv0_wire_cullfront.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv0_wire_cullfront.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_MDI_lv0_wireOnSurf_cullfront\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr wireOnSurf --cullStyle FrontUnlessDoubleSided --write testHdStBasicDrawing_lv0_wireOnSurf_cullfront.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv0_wireOnSurf_cullfront.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_MDI_lv1_points\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr points --refineLevel 1 --write testHdStBasicDrawing_lv1_points.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv1_points.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_MDI_lv1_hull\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr hull --refineLevel 1 --write testHdStBasicDrawing_lv1_hull.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv1_hull.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\n----------------------------------------\n\nTITLE: USD Property Stack for /A.test\nDESCRIPTION: Details the source of the 'test' property for prim `/A`. It originates from the prim spec within the selected variant (`nestedVariantSet=nestedVariant`) in the `root.sdf` layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndVariants.testenv/baseline/compositionResults_SpecializesAndVariants.txt#2025-04-23_snippet_5\n\nLANGUAGE: usd\nCODE:\n```\nProperty stacks:\n/A.test:\n    root.sdf             /A{nestedVariantSet=nestedVariant}.test\n```\n\n----------------------------------------\n\nTITLE: Registering Curve Primvar Interpolation Tests\nDESCRIPTION: Registers tests for HdSt curve primvar interpolation with multiple refinement levels (0, 1, and 3). These tests verify primvar interpolation by rendering curves and comparing against reference images.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStCurvePrimvarInterpolation_lv0_refined\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStCurvePrimvarInterpolation --offscreen --repr refined --refineLevel 0 --write testHdStCurvePrimvarInterpolation_lv0_refined.png\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        testHdStCurvePrimvarInterpolation_lv0_refined.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    TESTENV testHdStCurvePrimvarInterpolation\n    ENV\n        TF_DEBUG=HD_DISABLE_MULTITHREADED_RPRIM_SYNC\n)\npxr_register_test(testHdStCurvePrimvarInterpolation_lv1_refined\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStCurvePrimvarInterpolation --offscreen --repr refined --refineLevel 1 --write testHdStCurvePrimvarInterpolation_lv1_refined.png\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        testHdStCurvePrimvarInterpolation_lv1_refined.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    TESTENV testHdStCurvePrimvarInterpolation\n    ENV\n        TF_DEBUG=HD_DISABLE_MULTITHREADED_RPRIM_SYNC\n)\npxr_register_test(testHdStCurvePrimvarInterpolation_lv3_refined\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStCurvePrimvarInterpolation --offscreen --repr refined --refineLevel 3 --write testHdStCurvePrimvarInterpolation_lv3_refined.png\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        testHdStCurvePrimvarInterpolation_lv3_refined.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    TESTENV testHdStCurvePrimvarInterpolation\n    ENV\n        TF_DEBUG=HD_DISABLE_MULTITHREADED_RPRIM_SYNC\n)\n```\n\n----------------------------------------\n\nTITLE: IndexRig Composition Results\nDESCRIPTION: Composition results for the IndexRig showing property inheritance from _Class_FingerRig\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantOverrideOfLocalClass.testenv/baseline/compositionResults_TrickyVariantOverrideOfLocalClass.txt#2025-04-23_snippet_4\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /HandRig/IndexRig\n    root.sdf             /HandRig/_Class_FingerRig\n    root.sdf             /HandRig{FingerRigArmature=off}_Class_FingerRig\n\nProperty names:\n     ['armature_enabled']\n\nProperty stacks:\n/HandRig/IndexRig.armature_enabled:\n    root.sdf             /HandRig{FingerRigArmature=off}_Class_FingerRig.armature_enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring sdrOsl Plugin for OpenUSD with CMake\nDESCRIPTION: Sets up the sdrOsl plugin with necessary libraries, include directories, and classes. It handles OSL and OpenImageIO dependencies, configures Python bindings, and sets up test scripts. The plugin is only built if OSL support is enabled.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/plugin/sdrOsl/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE sdrOsl)\n\nif(NOT PXR_ENABLE_OSL_SUPPORT)\n    return()\nendif()\n\n# Use the import targets set by Imath's package config\nif (Imath_FOUND)\n    set(__OSL_IMATH_LIBS \"Imath::Imath\")\nelse()\n    set(__OSL_IMATH_INCLUDE ${OPENEXR_INCLUDE_DIRS})\n    set(__OSL_IMATH_LIBS ${OPENEXR_LIBRARIES})\nendif()\n\npxr_plugin(sdrOsl\n    LIBRARIES\n        gf\n        tf\n        vt\n        ar\n        sdr\n        ${OSL_QUERY_LIBRARY}\n        ${OIIO_LIBRARIES}\n        ${__OSL_IMATH_LIBS}\n\n    INCLUDE_DIRS\n        ${OSL_INCLUDE_DIR}\n        ${OIIO_INCLUDE_DIRS}\n        ${__OSL_IMATH_INCLUDE}\n\n    PUBLIC_CLASSES\n        oslParser\n\n    PRIVATE_HEADERS\n        api.h\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapOslParser.cpp\n\n    PYMODULE_FILES\n        __init__.py\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n\npxr_test_scripts(\n    testenv/testOslParser.py\n)\n\npxr_install_test_dir(\n    SRC testenv/testOslParser.testenv\n    DEST testOslParser\n)\n\npxr_register_test(testOslParser\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testOslParser\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Regressive S Spline Definition for Animation\nDESCRIPTION: Definition of a 'RegressiveS' Bezier spline with held extrapolation and a single knot that specifies control parameters for time 156 with asymmetric tangent width and slope values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_76\n\nLANGUAGE: text\nCODE:\n```\nSpline: RegressiveS\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 156\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 15.8\n  post-tan slope -1.3\nKnot:\n  value type double\n```\n\n----------------------------------------\n\nTITLE: Loading USD Layer Stack Analysis\nDESCRIPTION: Shows the composition and layering of multiple USD files, including prim stacks, property stacks, variant selections and connections for a character rig focused on lip animation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpookyVariantSelection.testenv/baseline/compositionResults_TrickySpookyVariantSelection.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nLoading @TrickySpookyVariantSelection/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </CharRig>\n\nPrim Stack:\n    root.sdf             /CharRig\n    FaceRig.sdf          /FaceRig\n\nChild names:\n     ['Anim', 'Rig']\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Anim>\n\nPrim Stack:\n    root.sdf             /CharRig/Anim\n    FaceRig.sdf          /FaceRig/Anim\n\nChild names:\n     ['Lip']\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Anim/Lip>\n\nPrim Stack:\n    root.sdf             /CharRig/Anim/Lip\n    FaceRig.sdf          /FaceRig/Anim/Lip\n    LipRig.sdf           /LipRig/Anim\n    TwoLips.sdf          /LipsRig/Anim\n    SingleLip.sdf        /LipsRig/Anim\n\nProperty names:\n     ['Lip1', 'Lip2']\n\nProperty stacks:\n/CharRig/Anim/Lip.Lip1:\n    SingleLip.sdf        /LipsRig/Anim.Lip1\n/CharRig/Anim/Lip.Lip2:\n    TwoLips.sdf          /LipsRig/Anim.Lip2\n```\n\n----------------------------------------\n\nTITLE: Sampling Bezier Curve with Inner Loop Pre-Echo\nDESCRIPTION: Test case showing point data for a Bezier curve with inner loop pre-echo sampling. The data represents point coordinates sampled from time 80 to 100 with fine increments.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_49\n\nLANGUAGE: data\nCODE:\n```\nTest Case 127: SampleWithSources([80, 130], 10, 50, 1)\n0: (TsSourceInnerLoopPreEcho)\n    (80, 30)\n    (80.3582763671875, 30.50567626953125)\n    (80.52583312988281, 30.58715057373047)\n    (80.6865234375, 30.56494140625)\n    (80.9898681640625, 30.24114990234375)\n    (81.2734375, 29.59765625)\n    (81.8017578125, 27.60498046875)\n    (82.3125, 25.09375)\n    (82.8466796875, 22.57080078125)\n    (83.4453125, 20.54296875)\n    (83.7816162109375, 19.87310791015625)\n    (84.1494140625, 19.51708984375)\n    (84.34672546386719, 19.47657012939453)\n    (84.5538330078125, 19.53826904296875)\n    (85, 20)\n    (85.8505859375, 21.12744140625)\n    (86.5546875, 21.80078125)\n    (87.1533203125, 22.17529296875)\n    (87.6875, 22.40625)\n    (88.1982421875, 22.64892578125)\n    (88.7265625, 23.05859375)\n    (89.3134765625, 23.79052734375)\n    (90, 25)\n    (90.3582763671875, 25.50567626953125)\n    (90.52583312988281, 25.58715057373047)\n    (90.6865234375, 25.56494140625)\n    (90.9898681640625, 25.24114990234375)\n    (91.2734375, 24.59765625)\n    (91.8017578125, 22.60498046875)\n    (92.3125, 20.09375)\n    (92.8466796875, 17.57080078125)\n    (93.4453125, 15.54296875)\n    (93.7816162109375, 14.87310791015625)\n    (94.1494140625, 14.51708984375)\n    (94.34672546386719, 14.476570129394531)\n    (94.5538330078125, 14.53826904296875)\n    (95, 15)\n    (95.8505859375, 16.12744140625)\n    (96.5546875, 16.80078125)\n    (97.1533203125, 17.17529296875)\n    (97.6875, 17.40625)\n    (98.1982421875, 17.64892578125)\n    (98.7265625, 18.05859375)\n    (99.3134765625, 18.79052734375)\n    (100, 20)\n```\n\n----------------------------------------\n\nTITLE: Sampling Animation Spline with LoopReset Extrapolation\nDESCRIPTION: Demonstrates sampling the LoopReset spline at various time ranges and intervals, showing the resulting interpolated and extrapolated values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_65\n\nLANGUAGE: plaintext\nCODE:\n```\nTest Case 139: SampleWithSources([100, 110], 50, 50, 1)\n0: (TsSourceKnotInterp)\n    (100, 10)\n    (100.269775390625, 10.0286865234375)\n    (100.517578125, 10.1123046875)\n    (100.744873046875, 10.2471923828125)\n    (100.953125, 10.4296875)\n    (101.143798828125, 10.6561279296875)\n    (101.318359375, 10.9228515625)\n    (101.625, 11.5625)\n    (101.884765625, 12.3193359375)\n    (102.109375, 13.1640625)\n    (102.5, 15)\n    (102.890625, 16.8359375)\n    (103.115234375, 17.6806640625)\n    (103.375, 18.4375)\n    (103.681640625, 19.0771484375)\n    (103.856201171875, 19.3438720703125)\n    (104.046875, 19.5703125)\n    (104.255126953125, 19.7528076171875)\n    (104.482421875, 19.8876953125)\n    (104.730224609375, 19.9713134765625)\n    (105, 20)\n    (110, 15)\n\nTest Case 140: SampleWithSources([85, 125], 50, 50, 10)\n0: (TsSourcePreExtrapLoop)\n    (85, 20)\n    (90, 15)\n1: (TsSourcePreExtrapLoop)\n    (90, 10)\n    (90.953125, 10.4296875)\n    (91.625, 11.5625)\n    (92.5, 15)\n    (93.375, 18.4375)\n    (94.046875, 19.5703125)\n    (95, 20)\n    (100, 15)\n2: (TsSourceKnotInterp)\n    (100, 10)\n    (100.953125, 10.4296875)\n    (101.625, 11.5625)\n    (102.5, 15)\n    (103.375, 18.4375)\n    (104.046875, 19.5703125)\n    (105, 20)\n    (110, 15)\n3: (TsSourcePostExtrapLoop)\n    (110, 10)\n    (110.953125, 10.4296875)\n    (111.625, 11.5625)\n    (112.5, 15)\n    (113.375, 18.4375)\n    (114.046875, 19.5703125)\n    (115, 20)\n    (120, 15)\n4: (TsSourcePostExtrapLoop)\n    (120, 10)\n    (120.953125, 10.4296875)\n    (121.625, 11.5625)\n    (122.5, 15)\n    (123.375, 18.4375)\n    (124.046875, 19.5703125)\n    (125, 20)\n\nTest Case 141: SampleWithSources([102.5, 107.5], 50, 50, 0.5)\n0: (TsSourceKnotInterp)\n    (102.5, 15)\n    (102.5, 15)\n    (102.689453125, 15.9326171875)\n    (102.890625, 16.8359375)\n    (103.115234375, 17.6806640625)\n    (103.239990234375, 18.0718994140625)\n    (103.375, 18.4375)\n    (103.521728515625, 18.7738037109375)\n    (103.681640625, 19.0771484375)\n    (103.856201171875, 19.3438720703125)\n    (104.046875, 19.5703125)\n    (104.255126953125, 19.7528076171875)\n    (104.482421875, 19.8876953125)\n    (104.730224609375, 19.9713134765625)\n    (105, 20)\n    (107.5, 17.5)\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Resolver Example Plugin in CMake\nDESCRIPTION: This snippet sets up the main configuration for the USD resolver example plugin. It defines the plugin name, library dependencies, public classes and headers, Python module files, and resource files. The configuration also disables precompiled headers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/examples/usdResolverExample/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usdResolverExample)\n\npxr_plugin(${PXR_PACKAGE}\n    LIBRARIES\n        ar\n        arch\n        js\n        tf\n        vt\n\n    PUBLIC_CLASSES\n        resolver\n        resolverContext\n\n    PUBLIC_HEADERS\n        api.h\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapResolverContext.cpp\n\n    PYMODULE_FILES\n        __init__.py\n\n    RESOURCE_FILES\n        plugInfo.json\n\n    DISABLE_PRECOMPILED_HEADERS\n)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PS/Sibling Prim\nDESCRIPTION: Shows the prim stack for the composed prim at path </PS/Sibling>, inheriting from /PSI/Sibling.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PS/Sibling>\n\nPrim Stack:\n    root.sdf             /PS/Sibling\n    root.sdf             /PSI/Sibling\n```\n\n----------------------------------------\n\nTITLE: Registering usdview Infinite Geometry Test\nDESCRIPTION: Registers a CMake test named `testUsdviewInfGeom`. This test runs `testusdview` with the Python script `testUsdviewInfGeom.py` and the input file `infGeom.usda`. It verifies the handling of infinite geometry by performing perceptual image difference comparison against `infGeom.png` and `fixedGeom.png`, using failure thresholds of 0.05 absolute and 0.06 percent, and expecting a return code of 0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdviewInfGeom\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewInfGeom.py infGeom.usda\"\n    IMAGE_DIFF_COMPARE\n        infGeom.png\n        fixedGeom.png\n    FAIL 0.05\n    FAIL_PERCENT 0.06\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /Parent2/Child Prim\nDESCRIPTION: Details the extensive prim stack for the composed prim at path </Parent2/Child>, showing contributions from multiple ancestral and referenced prim specs across different layers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Parent2/Child>\n\nPrim Stack:\n    root.sdf             /Parent2/Child\n    root.sdf             /Parent2/Sibling\n    root.sdf             /PI/Sibling\n    root.sdf             /PI/Child\n    ref.sdf              /PR/Child\n    ref.sdf              /PR/Sibling\n    root.sdf             /PIS/Sibling\n    root.sdf             /PISI/Sibling\n    root.sdf             /PS/Sibling\n    root.sdf             /PSI/Sibling\n    root.sdf             /PIS/Child\n    root.sdf             /PISI/Child\n    root.sdf             /PS/Child\n    root.sdf             /PSI/Child\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image for USD Build Environment\nDESCRIPTION: Commands to build and push a Docker image that serves as the build environment for USD packages on Linux. The image needs to be accessible by Azure Pipelines for the build process.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/build_scripts/pypi/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd build_scripts/pypi/docker\ndocker build . -t usd-build-env-name:v2.0\ndocker push usd-build-env-name:v2.0\n```\n\n----------------------------------------\n\nTITLE: Composition Result for /BadExpressionInSelection in USD\nDESCRIPTION: Shows the composition outcome for the prim '/BadExpressionInSelection'. It details the prim stack, indicating contributions from 'root.sdf' and 'sub.sdf'. The resolved variant selection '{v = sel_x}' applied within 'sub.sdf' is listed. The prim name suggests a potentially problematic expression, although the output shows a resolved selection.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ExpressionsInVariantSelections.testenv/baseline/compositionResults_ExpressionsInVariantSelections.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </BadExpressionInSelection>\n\nPrim Stack:\n    root.sdf             /BadExpressionInSelection\n    sub.sdf              /BadExpressionInSelection\n    sub.sdf              /BadExpressionInSelection{v=sel_x}\n\nVariant Selections:\n    {v = sel_x}\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </Bad_SubrootRefToDeleted> Referencing a Deleted Prim\nDESCRIPTION: Displays the composition results for </Bad_SubrootRefToDeleted>. The prim stack only contains the definition from 'root.sdf' because it attempts to reference a prim (/Char/ToBeDeleted) that was effectively deleted due to being the source of a relocation. The reference target does not exist in the composed scene, resulting in an incomplete prim stack.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_RelocateToNone.testenv/baseline/compositionResults_RelocateToNone_usd.txt#2025-04-23_snippet_6\n\nLANGUAGE: usd-composition-output\nCODE:\n```\nResults for composing </Bad_SubrootRefToDeleted>\n\nPrim Stack:\n    root.sdf             /Bad_SubrootRefToDeleted\n```\n\n----------------------------------------\n\nTITLE: Spline Definition - ExtrapLoopOscillate Mode\nDESCRIPTION: Definition of a Bezier spline with LoopOscillate extrapolation mode. Contains identical knot structure but with oscillating behavior outside the spline range.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nSpline: ExtrapLoopOscillate\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap LoopOscillate\n  post extrap LoopOscillate\nKnot:\n  value type double\n  curve type Bezier\n  time 100\n  value 10\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 3\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 105\n  value 20\n  next interp Linear\n  pre-tan width 3\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 110\n  value 15\n  next interp Held\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Layer and Prim Stack Composition - Console Output - Plaintext\nDESCRIPTION: This snippet logs the composition of USD layer stacks and the resulting prim hierarchies for different arcs (such as Specializes and AncestralReference). It demonstrates how prim stacks and child names are derived for specific prim paths, including the traversal of references and specializations across multiple SDF files. The output aids in debugging or documenting the composition process, with dependencies on a functional USD (OpenUSD) stack and its underlying CLI tools. Expected input is a set of loaded USD files; output is the console-formatted analysis as shown. The format is fixed-width and intended for human readability in a console.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs.testenv/baseline/compositionResults_SpecializesAndAncestralArcs.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLoading @SpecializesAndAncestralArcs/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </Specializes>\n\nPrim Stack:\n    root.sdf             /Specializes\n\nChild names:\n     ['Child']\n\n------------------------------------------------------------------------\nResults for composing </Specializes/Child>\n\nPrim Stack:\n    root.sdf             /Specializes/Child\n\n------------------------------------------------------------------------\nResults for composing </Class>\n\nPrim Stack:\n    root.sdf             /Class\n\n------------------------------------------------------------------------\nResults for composing </AncestralReference>\n\nPrim Stack:\n    root.sdf             /AncestralReference\n    ref.sdf              /Ref\n    root.sdf             /Specializes\n    ref.sdf              /Specializes\n\nChild names:\n     ['Child']\n\n------------------------------------------------------------------------\nResults for composing </AncestralReference/Child>\n\nPrim Stack:\n    root.sdf             /AncestralReference/Child\n    ref.sdf              /Ref/Child\n    root.sdf             /Specializes/Child\n    root.sdf             /Class\n    ref.sdf              /Specializes/Child\n    ref.sdf              /ChildRef\n    ref.sdf              /Class\n    ref2.sdf             /Ref2\n    ref2.sdf             /Class\n\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Build for Shared Libraries\nDESCRIPTION: CMake command to build USD with shared libraries, which is the default configuration allowing loading of only necessary libraries for specific tasks.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/BUILDING.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncmake -DBUILD_SHARED_LIBS=ON ...\n```\n\n----------------------------------------\n\nTITLE: Building USD with CMake on Windows using Visual Studio\nDESCRIPTION: Example of building USD on Windows by generating a Visual Studio 2017 solution with CMake, specifying dependencies, and using parallel compilation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/BUILDING.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n\"C:\\Program Files\\CMake\\bin\\cmake.exe\"      ^\n-G \"Visual Studio 15 2017 Win64\"            ^\n-DTBB_ROOT_DIR=C:\\path\\to\\tbb               ^\n-DOPENSUBDIV_ROOT_DIR=C:\\path\\to\\opensubdiv ^\n\\path\\to\\USD\\source\n\ncmake --build . --target install -- /m:%NUMBER_OF_PROCESSORS%\n```\n\n----------------------------------------\n\nTITLE: Building C++ Test for TfSIGFPE in CMake\nDESCRIPTION: Creates a C++ test target for TfSIGFPE (floating-point exception handling) using the pxr_build_test macro. The test links against the 'tf' library and uses a single source file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testTfSIGFPE\n    LIBRARIES\n        tf\n    CPPFILES\n        testenv/SIGFPE.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Composing Prim /MultiRef/Frame in USD\nDESCRIPTION: Details the composition results for the child prim path `/MultiRef/Frame`. It shows the prim stack originating from `B.sdf` and lists the accumulated time offsets considering the root layer (`root.sdf`) and the multiple reference arcs (`ref.sdf`/`ref_sub.sdf` and `B.sdf`).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicTimeOffset.testenv/baseline/compositionResults_BasicTimeOffset.txt#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </MultiRef/Frame>\n\nPrim Stack:\n    B.sdf                /Model/Frame\n\nTime Offsets:\n    root.sdf             /MultiRef/Frame root       (offset=0.00, scale=1.00)\n    ref.sdf              /Ref2/Frame     reference  (offset=10.00, scale=1.00)\n        ref_sub.sdf                      sublayer   (offset=20.00, scale=1.00)\n    B.sdf                /Model/Frame    reference  (offset=30.00, scale=1.00)\n```\n\n----------------------------------------\n\nTITLE: Dense Sampled Spline Outputs - Text\nDESCRIPTION: This snippet provides (x, y) sampled outputs from a spline defined in the document, corresponding to specific test cases and intervals. Useful for curve reconstruction, error checking, or visualization, the outputs are used alongside the spline definition to test or plot the curve. All values are double floats; outputs are interpreted as successive sample points from the defined spline.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n(156, 0)\n(158.5854711544726, -3.4173550801546186)\n(159.33730468589425, -4.347771882426931)\n(159.8128873576108, -4.764763836917713)\n(159.96685427049485, -4.781994787828266)\n(160.07548204775082, -4.672392676693319)\n(160.1466785491448, -4.4364652201461645)\n(160.18835163444288, -4.0747201348201)\n(160.21475899581543, -2.975807944364408)\n(160.21796700999704, -1.3797178383925954)\n(160.26123855511622, 0.7094884500289858)\n(160.40783650930155, 3.2877491878339833)\n(160.53965253920916, 4.759005683672028)\n(160.72102375068152, 6.351002641956045)\n(160.9598580034847, 8.06323234605274)\n(161.26406315738473, 9.895187079328819)\n(161.64154707214766, 11.846359125150988)\n(162.1002176075396, 13.916240766885954)\n(162.64798262332664, 16.104324287900422)\n(163.2927499792748, 18.410101971561097)\n(164.04242753515013, 20.833066101234685)\n(164.90492315071873, 23.372708960287895)\n(165.88814468574665, 26.02852283208743)\n(167, 28.8)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimWithDefaultReferenceTarget2\nDESCRIPTION: Shows the composition results for </PrimWithDefaultReferenceTarget2>. The prim stack indicates its definition in root.sdf and contribution from an internal reference to </InternalReference> also in root.sdf. Child names from the referenced prim are listed.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimWithDefaultReferenceTarget2>\n\nPrim Stack:\n    root.sdf             /PrimWithDefaultReferenceTarget2\n    root.sdf             /InternalReference\n\nChild names:\n     ['InternalReference_Child']\n```\n\n----------------------------------------\n\nTITLE: Defining Node-Based Material Graph in OpenUSD\nDESCRIPTION: This configuration defines a simple material network with three nodes: a texture source, a material layer that receives the texture as albedo input, and a stand-in node that exposes the material to the surface terminal. The texture uses a checkerboard pattern from a specific file path.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/testenv/testHdUtils/baseline/testHdUtils_material.txt#2025-04-23_snippet_0\n\nLANGUAGE: usdnc\nCODE:\n```\n[]\\n\\t[config]\\n\\t[nodes]\\n\\t\\t[/Asset/Looks/Material/MaterialLayer]\\n\\t\\t\\t[inputConnections]\\n\\t\\t\\t\\t[albedo]\\n\\t\\t\\t\\t\\t[0]\\n\\t\\t\\t\\t\\t\\t[upstreamNodeOutputName]\\n\\t\\t\\t\\t\\t\\t\\tresultRGB\\n\\t\\t\\t\\t\\t\\t[upstreamNodePath]\\n\\t\\t\\t\\t\\t\\t\\t/Asset/Looks/Material/Texture\\n\\t\\t\\t[nodeIdentifier]\\n\\t\\t\\t\\tMaterialLayer_3\\n\\t\\t\\t[parameters]\\n\\t\\t[/Asset/Looks/Material/StandIn]\\n\\t\\t\\t[inputConnections]\\n\\t\\t\\t\\t[multiMaterialIn]\\n\\t\\t\\t\\t\\t[0]\\n\\t\\t\\t\\t\\t\\t[upstreamNodeOutputName]\\n\\t\\t\\t\\t\\t\\t\\tpbsMaterialOut\\n\\t\\t\\t\\t\\t\\t[upstreamNodePath]\\n\\t\\t\\t\\t\\t\\t\\t/Asset/Looks/Material/MaterialLayer\\n\\t\\t\\t[nodeIdentifier]\\n\\t\\t\\t\\tPbsNetworkMaterialStandIn_3\\n\\t\\t\\t[parameters]\\n\\t\\t[/Asset/Looks/Material/Texture]\\n\\t\\t\\t[inputConnections]\\n\\t\\t\\t[nodeIdentifier]\\n\\t\\t\\t\\tTexture_5\\n\\t\\t\\t[parameters]\\n\\t\\t\\t\\t[inputs:filename]\\n\\t\\t\\t\\t\\t[value]\\n\\t\\t\\t\\t\\t\\tstudio/patterns/checkerboard/checkerboard.tex\\n\\t[terminals]\\n\\t\\t[surface]\\n\\t\\t\\t[upstreamNodeOutputName]\\n\\t\\t\\t\\tsurface\\n\\t\\t\\t[upstreamNodePath]\\n\\t\\t\\t\\t/Asset/Looks/Material/StandIn\n```\n\n----------------------------------------\n\nTITLE: Defining UsdzPackageValidator for UsdUtils\nDESCRIPTION: Documentation for a validator that ensures files within all USDZ packages in a stage are not compressed or encrypted, and are aligned to 64 bytes for proper functionality.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n[usdUtilsValidators:UsdzPackageValidator]:\n\tDoc: Files within all usdz packages within a stage should not be compressed or encrypted, and should be aligned to 64 bytes.\n\tKeywords: UsdUtilsValidators, UsdzValidators\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Specialize Nodes in USD\nDESCRIPTION: This snippet shows forward and reverse iteration over specialize nodes and specialize prim specs for the prim path </Model>. It illustrates how specializations are represented in USD scene description.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpIterator.testenv/baseline/iteration_results.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nIterating over specialize nodes for </Model>:\n @root.sdf@</Specializes>\tspecialize\n @mcat.sdf@</Specializes>\tspecialize\n\nReverse iterating over specialize nodes for </Model>:\n @mcat.sdf@</Specializes>\tspecialize\n @root.sdf@</Specializes>\tspecialize\n\nIterating over specialize prim specs for </Model>:\n @mcat.sdf@</Specializes>\tspecialize\n\nReverse iterating over specialize prim specs for </Model>:\n @mcat.sdf@</Specializes>\tspecialize\n```\n\n----------------------------------------\n\nTITLE: Installing Test Directories for USD Validation Testing with CMake\nDESCRIPTION: These pxr_install_test_dir calls install test environment directories necessary for the execution of various usdchecker validation tests. The commands copy test files from the source directory to designated destinations, allowing tests to operate on consistent and isolated datasets. Prerequisites are the existence of the source directory and adequate file system permissions; each installation yields a directory with test files for use in subsequent test commands.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdChecker\n    DEST testUsdChecker35\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdChecker\n    DEST testUsdChecker36\n)\n\n```\n\n----------------------------------------\n\nTITLE: Setting OpenUSD Prefix and Package Variables in CMake\nDESCRIPTION: Sets the `PXR_PREFIX` variable to `pxr/usd` and the `PXR_PACKAGE` variable to `usd`. These variables are likely used by subsequent OpenUSD CMake functions (like `pxr_python_bin`, `pxr_install_test_dir`) to configure paths and package names within the build system.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdfixbrokenpixarschemas/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usd)\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Models in USD\nDESCRIPTION: Defines two geometric models (cube and sphere) with a custom 'levelOfNesting' attribute in a USD file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/usdfaq.rst#2025-04-23_snippet_5\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n      \ndef Xform \"CubeModel\"\n{\n    custom int levelOfNesting = 0\n   \n    def Cube \"Gprim\"\n    {\n    }\n}\n\ndef Xform \"SphereModel\"\n{\n    custom int levelOfNesting = 0\n\n    def Sphere \"Gprim\"\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering usdzip Recursive Archive Test in CMake\nDESCRIPTION: Registers a Python test named `testUsdZipInputFiles2` using `pxr_register_test`. The test executes the installed `usdzip` command with the `-r` flag to create a recursive `.usdz` archive named `recursive.usdz` from the `src` directory, listing contents to `recursive.txt`. It expects success (return code 0) and compares the generated `recursive.txt` against a reference file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdzip/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdZipInputFiles2\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdzip -r recursive.usdz src -l recursive.txt\"\n    DIFF_COMPARE recursive.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: USD Composition Error: Non-Existent Payload File\nDESCRIPTION: This error message indicates a failure during USD composition because a specified payload asset file (`ErrorInvalidPayload/payload_non_existent_file.sdf`) could not be found or opened. The payload reference was introduced by the layer `@ErrorInvalidPayload/root.sdf@` onto the prim `/BadPayload_NonExistentFile`. This typically points to a missing file dependency or an incorrect path in the payload definition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInvalidPayload.testenv/baseline/compositionErrors_ErrorInvalidPayload.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nErrors while composing </BadPayload_NonExistentFile>\n\nCould not open asset @ErrorInvalidPayload/payload_non_existent_file.sdf@ for payload introduced by @ErrorInvalidPayload/root.sdf@</BadPayload_NonExistentFile>.\n```\n\n----------------------------------------\n\nTITLE: USD Stage with References\nDESCRIPTION: Illustrates a USD stage with multiple prims referencing a common asset.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_19\n\nLANGUAGE: usda\nCODE:\n```\ndef \"asset\" ()\n{\n    def \"assetChild\" ()\n    {\n    }\n}\n\ndef \"Shot1\" ()\n{\n    def \"shotAsset\" (\n        prepend references = </asset>\n    )\n    {\n    }\n}\n\ndef \"Shot2\" ()\n{\n    def \"shotAsset\" (\n        prepend references = </asset>\n    )\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Composition Result for /Model/Looks/Metal\nDESCRIPTION: Shows the resulting prim stack for '/Model/Looks/Metal'. Composition involves multiple levels of inheritance/specialization, drawing from '/Model/Looks/Material' and '/Model/Looks/BaseMaterial' in 'root.sdf', and '/Looks/Metal', '/Looks/Material', and '/Looks/BaseMaterial' in 'looks.sdf'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicSpecializesAndInherits.testenv/baseline/compositionResults_BasicSpecializesAndInherits.txt#2025-04-23_snippet_11\n\nLANGUAGE: log\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Model/Looks/Metal>\n\nPrim Stack:\n    root.sdf             /Model/Looks/Metal\n    root.sdf             /Model/Looks/Material\n    root.sdf             /Model/Looks/BaseMaterial\n    looks.sdf            /Looks/Metal\n    looks.sdf            /Looks/Material\n    looks.sdf            /Looks/BaseMaterial\n```\n\n----------------------------------------\n\nTITLE: Configuring Spline Properties in Python for USD\nDESCRIPTION: This snippet defines the properties of a spline, including its type (non-hermite), pre and post extrapolation methods (both held), and knot data with associated parameters.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PostRegressiveKeepStart_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.999999999999ap-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.2a69b463e86acp+0'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimWithReferences/PrimC_Child\nDESCRIPTION: Displays the composition results for the child prim path </PrimWithReferences/PrimC_Child>. The prim stack shows its origin from the referenced prim </PrimC> defined in ref2.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimWithReferences/PrimC_Child>\n\nPrim Stack:\n    ref2.sdf             /PrimC/PrimC_Child\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Linker Settings for hdPrman in CMake\nDESCRIPTION: Sets up platform-specific linker flags and libraries. For Windows, it excludes specific default libraries and adds PXRCORE and PRMAN libraries. For macOS, it sets dynamic lookup flags.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/hdPrman/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(optionalLibs \"\")\nif(WIN32)\n    set( CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} /NODEFAULTLIB:libmmd.lib /NODEFAULTLIB:libirc.lib /NODEFAULTLIB:svml_dispmd.lib /NODEFAULTLIB:libdecimal.lib\" )\n    list(APPEND optionalLibs ${PXRCORE_LIBRARY})\n    list(APPEND optionalLibs ${PRMAN_LIBRARY})\n    list(APPEND optionalLibs ${PRMAN_STATS_LIBRARY})\nelseif(APPLE)\n    set( CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -undefined dynamic_lookup -headerpad_max_install_names\" )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Spline with LoopOscillate Extrapolation\nDESCRIPTION: Specifies an animation spline with Bezier curve type, LoopOscillate extrapolation, and three knots with their respective tangent information.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_66\n\nLANGUAGE: plaintext\nCODE:\n```\nSpline: ExtrapLoopOscillate\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap LoopOscillate\n  post extrap LoopOscillate\nKnot:\n  value type double\n  curve type Bezier\n  time 100\n  value 10\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 3\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 105\n  value 20\n  next interp Linear\n  pre-tan width 3\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 110\n  value 15\n  next interp Held\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Creating TsTest_SplineData Object in Python for OpenUSD Animation\nDESCRIPTION: This Python code creates a TsTest_SplineData object representing the spline curve. It includes the spline type, extrapolation methods, and knot data with precise floating-point values for time, value, slopes, and segment lengths.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveLimitOpposite_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.4cccccccccccdp+0'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.0f7f3ae9122b3p-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for Inherited /Model/Scope/HighClassStuff\nDESCRIPTION: Displays the composition results for '/Model/Scope/HighClassStuff'. This prim is also inherited from '/Model/Class'. The prim stack shows its origin is '/Model{complexity=high}Class/HighClassStuff' in 'model.sdf', defined within the variant of the inherited class.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsInVariants.testenv/baseline/compositionResults_TrickyInheritsInVariants.txt#2025-04-23_snippet_8\n\nLANGUAGE: usd-composition-log\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Model/Scope/HighClassStuff>\n\nPrim Stack:\n    model.sdf            /Model{complexity=high}Class/HighClassStuff\n```\n\n----------------------------------------\n\nTITLE: Building and Registering testExecUsdExternalRegistration Test\nDESCRIPTION: Defines and registers a test for external registration functionality in execUsd. This test requires exec, tf, and vdf libraries and verifies that external components can be properly registered with the system.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/execUsd/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npxr_build_test(testExecUsdExternalRegistration\n    LIBRARIES\n        exec\n        tf\n        vdf\n    CPPFILES\n        testenv/testExecUsdExternalRegistration.cpp\n)\n\npxr_register_test(testExecUsdExternalRegistration\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testExecUsdExternalRegistration\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for /Pigeon/Rig/LegsRig/LLegRig Prim\nDESCRIPTION: This snippet shows the composition results for the /Pigeon/Rig/LegsRig/LLegRig prim, including its prim stack and prohibited child names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpRegressionBugs_bug69932.testenv/baseline/compositionResults_bug69932.txt#2025-04-23_snippet_3\n\nLANGUAGE: USD\nCODE:\n```\nPrim Stack:\n    Pigeon_bodyrig.sdf   /CharRig/Rig/LegsRig/LLegRig\n    LegsRig.sdf          /LegsRig/LLegRig\n    LegsRig.sdf          /LegsRig/_Class_LegRig\n\nProhibited child names:\n     ['Toes']\n```\n\n----------------------------------------\n\nTITLE: Removing Repository Path Functions - C++\nDESCRIPTION: Functions being removed related to repository path functionality which is being deprecated.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_ar2.rst#2025-04-23_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nArAssetInfo::repoPath\nSdfLayer::GetRepositoryPath\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PISI/Child Prim\nDESCRIPTION: Shows the prim stack for the prim at path </PISI/Child>, defined directly in root.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PISI/Child>\n\nPrim Stack:\n    root.sdf             /PISI/Child\n```\n\n----------------------------------------\n\nTITLE: Defining the usdchecker C++ Binary in CMake\nDESCRIPTION: Defines a C++ executable target named `usdchecker` using the custom `pxr_cpp_bin` CMake function. It links the executable against several required Pixar USD libraries: `arch`, `tf`, `sdf`, `usd`, `usdValidation`, `usdUtils`, and `usdUtilsValidators`. These libraries provide the core functionality for USD scene description, utilities, and validation logic.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_cpp_bin(usdchecker\n    LIBRARIES\n        arch\n        tf\n        sdf\n        usd\n        usdValidation\n        usdUtils\n        usdUtilsValidators\n)\n```\n\n----------------------------------------\n\nTITLE: Bezier Spline Configuration Block\nDESCRIPTION: Configuration block defining spline properties including value type, curve type, extrapolation behavior and knot parameters\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_46\n\nLANGUAGE: text\nCODE:\n```\nSpline: SimpleInnerLoop\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\n```\n\n----------------------------------------\n\nTITLE: USD Relocate Error: Source Same as Target\nDESCRIPTION: Error message indicating an invalid USD relocate operation where the source path (`/Model_1/Instance/Test`) is identical to the target path. This operation is disallowed and ignored during layer stack computation as a prim cannot be relocated to itself.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInvalidAuthoredRelocates.testenv/baseline/compositionErrors_ErrorInvalidAuthoredRelocates.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nRelocation from </Model_1/Instance/Test> to </Model_1/Instance/Test> authored at @ErrorInvalidAuthoredRelocates/root.sdf@</> is invalid and will be ignored: The target of a relocate cannot be the same as its source.\n```\n\n----------------------------------------\n\nTITLE: Test Case for Animation Curve Sampling With Sources\nDESCRIPTION: Sample output showing the result of evaluating animation curves at specific time intervals from 90 to 140 with detailed source information for each sample point. Shows how the curve is constructed from different segments.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_57\n\nLANGUAGE: plaintext\nCODE:\n```\nTest Case 133: SampleWithSources([90, 140], 10, 25, 1)\n0: (TsSourceKnotInterp)\n    (90, 8.8)\n    (90.452880859375, 8.519287109375)\n    (90.70757446289062, 8.473101806640624)\n    (90.97929687499999, 8.485546875)\n    (91.56840820312499, 8.673876953125001)\n    (92.209375, 9.059375000000001)\n    (93.603515625, 10.322265625)\n    (95.07499999999999, 12.075)\n    (96.537109375, 14.118359375)\n    (97.903125, 16.253125)\n    (100, 20)\n1: (TsSourceInnerLoopProto)\n    (100, 20)\n    (100.3582763671875, 20.50567626953125)\n    (100.52583312988281, 20.58715057373047)\n    (100.6865234375, 20.56494140625)\n    (100.9898681640625, 20.24114990234375)\n    (101.2734375, 19.59765625)\n    (101.8017578125, 17.60498046875)\n    (102.3125, 15.09375)\n    (102.8466796875, 12.57080078125)\n    (103.4453125, 10.54296875)\n    (103.7816162109375, 9.87310791015625)\n    (104.1494140625, 9.51708984375)\n    (104.34672546386719, 9.476570129394531)\n    (104.5538330078125, 9.53826904296875)\n    (105, 10)\n    (105.8505859375, 11.12744140625)\n    (106.5546875, 11.80078125)\n    (107.1533203125, 12.17529296875)\n    (107.6875, 12.40625)\n    (108.1982421875, 12.64892578125)\n    (108.7265625, 13.05859375)\n    (109.3134765625, 13.79052734375)\n    (110, 15)\n2: (TsSourceInnerLoopPostEcho)\n    (110, 15)\n    (110.3582763671875, 15.50567626953125)\n    (110.52583312988281, 15.587150573730469)\n    (110.6865234375, 15.56494140625)\n    (110.9898681640625, 15.24114990234375)\n    (111.2734375, 14.59765625)\n    (111.8017578125, 12.60498046875)\n    (112.3125, 10.09375)\n    (112.8466796875, 7.57080078125)\n    (113.4453125, 5.54296875)\n    (113.7816162109375, 4.87310791015625)\n    (114.1494140625, 4.51708984375)\n    (114.34672546386719, 4.476570129394531)\n    (114.5538330078125, 4.53826904296875)\n    (115, 5)\n    (115.8505859375, 6.12744140625)\n    (116.5546875, 6.80078125)\n    (117.1533203125, 7.17529296875)\n    (117.6875, 7.40625)\n    (118.1982421875, 7.64892578125)\n    (118.7265625, 8.05859375)\n    (119.3134765625, 8.79052734375)\n    (120, 10)\n    (120.3582763671875, 10.50567626953125)\n    (120.52583312988281, 10.587150573730469)\n    (120.6865234375, 10.56494140625)\n    (120.9898681640625, 10.24114990234375)\n    (121.2734375, 9.59765625)\n    (121.8017578125, 7.60498046875)\n    (122.3125, 5.09375)\n    (122.8466796875, 2.57080078125)\n    (123.4453125, 0.54296875)\n    (123.7816162109375, -0.12689208984375)\n    (124.1494140625, -0.48291015625)\n    (124.34672546386719, -0.5234298706054688)\n    (124.5538330078125, -0.46173095703125)\n    (125, 0)\n    (125.8505859375, 1.12744140625)\n    (126.5546875, 1.80078125)\n    (127.1533203125, 2.17529296875)\n    (127.6875, 2.40625)\n    (128.1982421875, 2.64892578125)\n    (128.7265625, 3.05859375)\n    (129.3134765625, 3.79052734375)\n    (130, 5)\n3: (TsSourceKnotInterp)\n    (130, 5)\n    (131.984375, 9.9375)\n    (133.251953125, 13.0859375)\n    (134.625, 16)\n    (135.332763671875, 17.2080078125)\n    (136.044921875, 18.1640625)\n    (136.754150390625, 18.8037109375)\n    (137.10537719726562, 18.9847412109375)\n    (137.453125, 19.0625)\n    (137.79647827148438, 19.0289306640625)\n    (138.134521484375, 18.8759765625)\n    (138.791015625, 18.1796875)\n    (139.415283203125, 16.9091796875)\n    (140, 15)\n```\n\n----------------------------------------\n\nTITLE: Defining CenterVertical Spline in OpenUSD\nDESCRIPTION: Defines a Bezier spline named CenterVertical with two knots at time 0 and 1, and specific tangent configurations for smooth animation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_97\n\nLANGUAGE: plaintext\nCODE:\n```\nSpline: CenterVertical\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 1\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 1\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Configuring rmanDiscovery Plugin with CMake in CMake\nDESCRIPTION: This CMake snippet configures the rmanDiscovery plugin within the Pixar USD (Universal Scene Description) framework using the pxr_plugin macro. It sets custom build variables, declares required shared libraries (like gf, plug, tf, vt, ar, sdr), designates a private plugin class (rmanDiscovery), and lists resource files needed at runtime (plugInfo.json). Dependencies must exist in the project tree, and proper CMake setup is assumed. The snippet outputs plugin build targets and installs the specified resources alongside the binary.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/rmanDiscovery/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX \"\")\nset(PXR_PACKAGE rmanDiscovery)\n\npxr_plugin(rmanDiscovery\n    LIBRARIES\n        gf\n        plug\n        tf\n        vt\n        ar\n        sdr\n\n    PRIVATE_CLASSES\n        rmanDiscovery\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PIS Prim\nDESCRIPTION: Shows the prim stack and child names for the composed prim at path </PIS>. It inherits from /PISI.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PIS>\n\nPrim Stack:\n    root.sdf             /PIS\n    root.sdf             /PISI\n\nChild names:\n     ['Child', 'Sibling']\n```\n\n----------------------------------------\n\nTITLE: Registering usdzip Test with Explicit Flat Inputs in CMake\nDESCRIPTION: Registers a Python test named `testUsdZipInputFiles3` using `pxr_register_test`. The test executes the installed `usdzip` command to create an archive named `flat_inputs.usdz` using explicitly listed files (`src/a.txt`, `src/b.png`) as input. It expects the command to succeed (return code 0). No output comparison is specified.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdzip/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdZipInputFiles3\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdzip flat_inputs.usdz src/a.txt src/b.png\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: USD Layer Stack Output\nDESCRIPTION: Shows the layer stack composition results for a USD scene with variant specializations and property inheritance. Displays prim stacks, variant selections, child names, and property stacks for different prims in the scene hierarchy.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_VariantSpecializesAndReferenceSurprisingBehavior.testenv/baseline/compositionResults_VariantSpecializesAndReferenceSurprisingBehavior.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nLoading @VariantSpecializesAndReferenceSurprisingBehavior/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </Model_defaultShadingVariant>\n\nPrim Stack:\n    root.sdf             /Model_defaultShadingVariant\n\nChild names:\n     ['Material']\n\n------------------------------------------------------------------------\nResults for composing </Model_defaultShadingVariant/Material>\n\nPrim Stack:\n    root.sdf             /Model_defaultShadingVariant/Material\n\nProperty names:\n     ['myInt']\n\nProperty stacks:\n/Model_defaultShadingVariant/Material.myInt:\n    root.sdf             /Model_defaultShadingVariant/Material.myInt\n\n------------------------------------------------------------------------\nResults for composing </Model>\n\nPrim Stack:\n    root.sdf             /Model\n    root.sdf             /Model{shadingVariant=New_Shading_Variant}\n    root.sdf             /New_Shading_Variant\n    root.sdf             /Model_defaultShadingVariant\n\nVariant Selections:\n    {shadingVariant = New_Shading_Variant}\n\nChild names:\n     ['Material', 'Material_Child']\n```\n\n----------------------------------------\n\nTITLE: Composition Result for /ChainedRef\nDESCRIPTION: Displays the composition results for the prim '/ChainedRef'. The prim stack indicates a chain of references: '/ChainedRef' in 'root.sdf' references '/Ref2' in 'ref2.sdf', which in turn references '/B' in 'B.sdf'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ExpressionsInReferences.testenv/baseline/compositionResults_ExpressionsInReferences.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </ChainedRef>\n\nPrim Stack:\n    root.sdf             /ChainedRef\n    ref2.sdf             /Ref2\n    B.sdf                /B\n\n------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Composing /VariantAtRelocateSource/Sibling Affected by Variants in USD\nDESCRIPTION: Shows the composition of </VariantAtRelocateSource/Sibling>, influenced by the variant selection on its sibling ('Child'). It pulls data from `root.sdf` and `ref.sdf` and identifies 'Class' as its child.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorOpinionAtRelocationSource.testenv/baseline/compositionResults_ErrorOpinionAtRelocationSource.txt#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </VariantAtRelocateSource/Sibling>\n\nPrim Stack:\n    root.sdf             /VariantAtRelocateSource/Sibling\n    root.sdf             /VariantAtRelocateSource/Child{child=a}Child2\n    ref.sdf              /Ref/Child/Child2\n\nChild names:\n     ['Class']\n```\n\n----------------------------------------\n\nTITLE: Defining Bezier Curve Knot Parameters in OpenUSD\nDESCRIPTION: This snippet defines the parameters for a Bezier curve knot in OpenUSD. It specifies the curve type, time, value, interpolation method, and tangent properties.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_84\n\nLANGUAGE: plaintext\nCODE:\n```\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </Root/B/C/D> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </Root/B/C/D>. The prim stack has contributions from /Root/B/C/D and /Root/B/C/_Z in 'root.sdf', plus /Ref/C/D and /Ref/C/_Z in 'ref.sdf'. The 'prop' property stack shows opinions from all four corresponding locations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Root/B/C/D>\n\nPrim Stack:\n    root.sdf             /Root/B/C/D\n    root.sdf             /Root/B/C/_Z\n    ref.sdf              /Ref/C/D\n    ref.sdf              /Ref/C/_Z\n\nProperty names:\n     ['prop']\n\nProperty stacks:\n/Root/B/C/D.prop:\n    root.sdf             /Root/B/C/D.prop\n    root.sdf             /Root/B/C/_Z.prop\n    ref.sdf              /Ref/C/D.prop\n    ref.sdf              /Ref/C/_Z.prop\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Malloc Library for USD Build\nDESCRIPTION: Sets the PXR_MALLOC_LIBRARY CMake variable to use a custom memory allocator like Jemalloc for improved USD performance.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/BUILDING.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n-DPXR_MALLOC_LIBRARY:path=/usr/local/lib/libjemalloc.so\n```\n\n----------------------------------------\n\nTITLE: Defining Time Mapping for USD Value Clips\nDESCRIPTION: Example of defining the 'times' metadata for USD value clips. This metadata maps stage times to clip times, allowing for offsetting and scaling of animation from clips.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/valueClips.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ndouble2[] times = [(0, 5), (10, 15)]\n```\n\n----------------------------------------\n\nTITLE: Setting Up USD Tree Flatten Layer Stack Test in CMake\nDESCRIPTION: Configures a test for USD Tree with the flatten layer stack option.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdtree/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdTreePayload\n    DEST testUsdTreeFlattenLayerStack\n)\n\npxr_register_test(testUsdTreeFlattenLayerStack\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdtree --flattenLayerStack input.usda\"\n    STDOUT_REDIRECT output_fls.txt\n    DIFF_COMPARE output_fls.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /InternalReference2\nDESCRIPTION: Shows the composition results for the prim </InternalReference2>. The prim stack indicates that this prim is solely defined within the session.sdf file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_31\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </InternalReference2>\n\nPrim Stack:\n    session.sdf          /InternalReference2\n```\n\n----------------------------------------\n\nTITLE: Initializing TsRegressionPreventer Result in Python\nDESCRIPTION: This snippet shows the result of a TsRegressionPreventer operation, including various adjustment flags and width values for pre and post segments.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/NoopLimitActive_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: False\n  havePreSegment: False\n  preActiveAdjusted: False\n  preActiveAdjustedWidth: 0.000000\n  preOppositeAdjusted: False\n  preOppositeAdjustedWidth: 0.000000\n  havePostSegment: True\n  postActiveAdjusted: False\n  postActiveAdjustedWidth: 0.800000\n  postOppositeAdjusted: False\n  postOppositeAdjustedWidth: 0.800000\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for /ExternalReferences\nDESCRIPTION: Displays the composition results for the prim path `/ExternalReferences` within the USD scene loaded from `@TrickyListEditedTargetPaths/root.sdf@`. It shows the prim stack derived from `root.sdf` and `ref.sdf`, lists child prim names, property names, property stacks (showing contributions from each layer), and final relationship targets.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyListEditedTargetPaths.testenv/baseline/compositionResults_TrickyListEditedTargetPaths.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nLoading @TrickyListEditedTargetPaths/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </ExternalReferences>\n\nPrim Stack:\n    root.sdf             /ExternalReferences\n    ref.sdf              /Ref\n\nChild names:\n     ['Child']\n\nProperty names:\n     ['relToExternalPrim', 'relToExternalPrim2', 'relToExternalPrim3', 'relToExternalPrim4']\n\nProperty stacks:\n/ExternalReferences.relToExternalPrim:\n    root.sdf             /ExternalReferences.relToExternalPrim\n    ref.sdf              /Ref.relToExternalPrim\n/ExternalReferences.relToExternalPrim2:\n    root.sdf             /ExternalReferences.relToExternalPrim2\n    ref.sdf              /Ref.relToExternalPrim2\n/ExternalReferences.relToExternalPrim3:\n    root.sdf             /ExternalReferences.relToExternalPrim3\n    ref.sdf              /Ref.relToExternalPrim3\n/ExternalReferences.relToExternalPrim4:\n    root.sdf             /ExternalReferences.relToExternalPrim4\n    ref.sdf              /Ref.relToExternalPrim4\n\nRelationship targets:\n/ExternalReferences.relToExternalPrim:\n    /Root/Child\n/ExternalReferences.relToExternalPrim3:\n    /Root/Child\n```\n\n----------------------------------------\n\nTITLE: Displaying Layer Composition Results for /S2\nDESCRIPTION: Shows the layer stack composition for the /S2 prim, which utilizes s_48tcps.sdf file. The time offsets section displays the sublayer structure for this higher frame rate variant with corresponding offset and scale values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecond3.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nPrim Stack:\n    s_48tcps.sdf         /S2\n\nTime Offsets:\n    root_24tcps_12fps.sdf /S2             root       (offset=0.00, scale=1.00)\n        s.sdf                            sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=8.00)\n        s_48tcps.sdf                     sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=8.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=2.00)\n```\n\n----------------------------------------\n\nTITLE: Identifying Reference Cycles in USD Stage Composition\nDESCRIPTION: These error messages show two different cycle detection cases in USD. The first error shows a cycle where </ImplCycle/A/D> references </PrimCycle> which cannot reference </ImplCycle>. The second error shows another cycle where </PrimCycle/A/D> references </ImplCycle/A/D> which cannot reference </PrimCycle/A>.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SubrootReferenceNonCycle.testenv/baseline/compositionErrors_SubrootReferenceNonCycle.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nErrors while composing </ImplCycle/A/D>\n\nCycle detected:\n@SubrootReferenceNonCycle/root.sdf@</ImplCycle/A/D>\nreferences:\n@SubrootReferenceNonCycle/root.sdf@</PrimCycle>\nwhich CANNOT reference:\n@SubrootReferenceNonCycle/root.sdf@</ImplCycle>\n\nUnresolved reference prim path @SubrootReferenceNonCycle/root.sdf@</PrimCycle/A> introduced by @SubrootReferenceNonCycle/root.sdf@</ImplCycle/A/D>\n\n------------------------------------------------------------------------\nErrors while composing </PrimCycle/A/D>\n\nCycle detected:\n@SubrootReferenceNonCycle/root.sdf@</PrimCycle/A/D>\nreferences:\n@SubrootReferenceNonCycle/root.sdf@</ImplCycle/A/D>\nwhich CANNOT reference:\n@SubrootReferenceNonCycle/root.sdf@</PrimCycle/A>\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Root Nodes in USD\nDESCRIPTION: This snippet demonstrates forward and reverse iteration over root nodes and root prim specs for the prim path </Model>. It shows the structure and organization of root elements in a USD scene.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpIterator.testenv/baseline/iteration_results.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nIterating over root nodes for </Model>:\n @root.sdf@</Model>\troot\n\nReverse iterating over root nodes for </Model>:\n @root.sdf@</Model>\troot\n\nIterating over root prim specs for </Model>:\n @root.sdf@</Model>\troot\n\nReverse iterating over root prim specs for </Model>:\n @root.sdf@</Model>\troot\n```\n\n----------------------------------------\n\nTITLE: Configuring USD OBJ Plugin Build in CMake\nDESCRIPTION: Configures the build system for the USD OBJ plugin, specifying dependencies like tf, gf, sdf, usd, and usdGeom libraries. Includes necessary header directories for Boost and Python, and defines the source files and resources to be compiled.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/examples/usdObj/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usdObj)\n\npxr_plugin(${PXR_PACKAGE}\n    LIBRARIES\n        tf\n        gf\n        sdf\n        usd\n        usdGeom\n\n    INCLUDE_DIRS\n        ${Boost_INCLUDE_DIRS}\n        ${PYTHON_INCLUDE_DIRS}\n\n    CPPFILES\n        fileFormat.cpp\n        stream.cpp\n        streamIO.cpp\n        translator.cpp\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for External Monolithic USD Library\nDESCRIPTION: Example CMake code for configuring an external monolithic USD library, defining the imported shared library and its properties.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/BUILDING.md#2025-04-23_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(usd_ms SHARED IMPORTED)\nset_property(TARGET usd_ms PROPERTY IMPORTED_LOCATION ...)\n# The following is necessary on Windows.\n#set_property(TARGET usd_ms PROPERTY IMPORTED_IMPLIB ...)\nset_property(TARGET usd_ms PROPERTY INTERFACE_COMPILE_DEFINITIONS ...)\nset_property(TARGET usd_ms PROPERTY INTERFACE_INCLUDE_DIRECTORIES ...)\nset_property(TARGET usd_ms PROPERTY INTERFACE_LINK_LIBRARIES ...)\n```\n\n----------------------------------------\n\nTITLE: Defining RegressivePostFringe Bezier Spline in OpenUSD\nDESCRIPTION: Specification for a RegressivePostFringe Bezier spline with held extrapolation. The curve has two knots at (0,0) and (1,1), with settings that create a gradual rise and then a steep incline near the end of the curve.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_92\n\nLANGUAGE: text\nCODE:\n```\nSpline: RegressivePostFringe\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 1.3\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 0.05\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for hdPrman in Python\nDESCRIPTION: Command-line options for the build_usd.py script to enable and configure the RenderMan imaging plugin build.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/plugins_renderman.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--prman               Build Pixar's RenderMan imaging plugin\n--no-prman            Do not build Pixar's RenderMan imaging plugin\n                        (default)\n--prman-location PRMAN_LOCATION\n                        Directory where Pixar's RenderMan is installed.\n```\n\n----------------------------------------\n\nTITLE: Registering testVariantMaterialBindingAPI Test in CMake\nDESCRIPTION: Registers a Python test named `testVariantMaterialBindingAPI` using `pxr_register_test`. This test executes `usdfixbrokenpixarschemas` on `test.usda` with the backup option enabled. It then uses `DIFF_COMPARE` to verify the contents of both the modified `test.usda` and the generated `backup.usda` against expected baseline files. The test anticipates a successful run (`EXPECTED_RETURN_CODE 0`) and specifies `CLEAN_OUTPUT` to remove generated files after the test.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdfixbrokenpixarschemas/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testVariantMaterialBindingAPI\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdfixbrokenpixarschemas test.usda --backup backup.usda\"\n    DIFF_COMPARE test.usda\n    DIFF_COMPARE backup.usda\n    EXPECTED_RETURN_CODE 0\n    CLEAN_OUTPUT\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Stage Interpolation Type in C++\nDESCRIPTION: Refers to the configuration of value interpolation on a `UsdStage`, typically set using `UsdStage::SetInterpolationType` in C++. By default, linear interpolation is enabled, affecting how `UsdAttribute::Get` computes values between time samples.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_63\n\nLANGUAGE: cpp\nCODE:\n```\nstage is configured for linear interpolation <UsdStage::SetInterpolationType>\n```\n\n----------------------------------------\n\nTITLE: Subtree Iteration Over USD Nodes\nDESCRIPTION: This snippet shows subtree iteration over nodes starting from different node types (root, class, model, variant, reference, payload, specialize) in the USD scene. It demonstrates how to traverse the scene hierarchy from specific starting points.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpIterator.testenv/baseline/iteration_results.txt#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nSubtree iterating over subtree nodes starting at node @root.sdf@</Model>:\n @root.sdf@</Model>\troot\n @root.sdf@</Class>\tinherit\n @mcat.sdf@</Model>\treference\n @mcat.sdf@</Class>\tinherit\n @mcat.sdf@</Model{pin=latest}>\tvariant\n @model_latest.sdf@</Model>\treference\n @model_latest_payload.sdf@</Model>\tpayload\n @mcat.sdf@</Specializes>\tspecialize\n @root.sdf@</Specializes>\tspecialize\n @mcat.sdf@</Specializes>\tspecialize\n\nSubtree iterating over subtree nodes starting at node @root.sdf@</Class>:\n @root.sdf@</Class>\tinherit\n\nSubtree iterating over subtree nodes starting at node @mcat.sdf@</Model>:\n @mcat.sdf@</Model>\treference\n @mcat.sdf@</Class>\tinherit\n @mcat.sdf@</Model{pin=latest}>\tvariant\n @model_latest.sdf@</Model>\treference\n @model_latest_payload.sdf@</Model>\tpayload\n @mcat.sdf@</Specializes>\tspecialize\n\nSubtree iterating over subtree nodes starting at node @mcat.sdf@</Class>:\n @mcat.sdf@</Class>\tinherit\n\nSubtree iterating over subtree nodes starting at node @mcat.sdf@</Model{pin=latest}>:\n @mcat.sdf@</Model{pin=latest}>\tvariant\n @model_latest.sdf@</Model>\treference\n @model_latest_payload.sdf@</Model>\tpayload\n\nSubtree iterating over subtree nodes starting at node @model_latest.sdf@</Model>:\n @model_latest.sdf@</Model>\treference\n @model_latest_payload.sdf@</Model>\tpayload\n\nSubtree iterating over subtree nodes starting at node @model_latest_payload.sdf@</Model>:\n @model_latest_payload.sdf@</Model>\tpayload\n\nSubtree iterating over subtree nodes starting at node @mcat.sdf@</Specializes>:\n @mcat.sdf@</Specializes>\tspecialize\n\nSubtree iterating over subtree nodes starting at node @root.sdf@</Specializes>:\n @root.sdf@</Specializes>\tspecialize\n\nSubtree iterating over subtree nodes starting at node @mcat.sdf@</Specializes>:\n @mcat.sdf@</Specializes>\tspecialize\n```\n\n----------------------------------------\n\nTITLE: Creating a UsdNamespaceEditor\nDESCRIPTION: Example showing how to create a UsdNamespaceEditor instance.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nstage = Usd.Stage.Open(\"main.usda\")\neditor = Usd.NamespaceEditor(stage)\n```\n\n----------------------------------------\n\nTITLE: Defining StageMetadataChecker for UsdGeom\nDESCRIPTION: Documentation for a validator that ensures all USD stages declare their 'upAxis' and 'metersPerUnit' metadata, which are essential for proper geometric interpretation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[usdGeomValidators:StageMetadataChecker]:\n\tDoc: All stages must declare their 'upAxis' and 'metersPerUnit'.\n\tKeywords: UsdGeomValidators\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </RearLegRig/Legs/LeftRig> in USD\nDESCRIPTION: Shows the composition results for the prim path </RearLegRig/Legs/LeftRig> from 'root.sdf'. It details the prim stack, indicating contributions from multiple source prims (/RearLegRig/Legs/LeftRig and /SymRig), and lists its immediate child prim names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyMultipleRelocations4.testenv/baseline/compositionResults_TrickyMultipleRelocations4.txt#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </RearLegRig/Legs/LeftRig>\n\nPrim Stack:\n    root.sdf             /RearLegRig/Legs/LeftRig\n    root.sdf             /SymRig\n\nChild names:\n     ['Leg_bone']\n```\n\n----------------------------------------\n\nTITLE: Building and Registering testExecUsdBasicCompilation Test\nDESCRIPTION: Defines and registers a test for basic compilation of the execUsd library. The test depends on multiple libraries including gf, tf, esf, exec, execUsd, vdf, and usdGeom.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/execUsd/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_build_test(testExecUsdBasicCompilation\n    LIBRARIES\n        gf\n        tf\n        esf\n        exec\n        execUsd\n        vdf\n        usdGeom\n    CPPFILES\n        testenv/testExecUsdBasicCompilation.cpp\n)\n\npxr_register_test(testExecUsdBasicCompilation\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testExecUsdBasicCompilation\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Files for OpenUSD Schema\nDESCRIPTION: This snippet lists the resource files associated with the OpenUSD schema generation process. It includes static file names and a dynamically generated path for the schema.usda file based on the library name.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/codegenTemplates/generatedSchema.classes.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# Resource Files\ngeneratedSchema.usda\nplugInfo.json\nschema.usda:{{ libName }}/schema.usda\n```\n\n----------------------------------------\n\nTITLE: Running Performance Metrics Script in Python\nDESCRIPTION: Command to run the usdmeasureperformance.py script for gathering performance metrics. It specifies the asset file, number of iterations, output type, and output file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/ref_performance_metrics.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython usdmeasureperformance.py <asset.usda> -i 100 -a min -o <metrics output filename.yaml>\n```\n\n----------------------------------------\n\nTITLE: Defining Spline Configuration\nDESCRIPTION: Spline configuration data specifying interpolation type, extrapolation methods, and knot points with their properties\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/MoveStartContain_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  0.400000: 0.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.000000, postLen 0.600000, auto false / false\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.600000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Defining ArticulationChecker for UsdPhysics\nDESCRIPTION: Documentation for a validator that validates all UsdPhysicsArticulationRootAPIs applied to a prim to ensure proper physics articulation setup.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n[usdPhysicsValidators:ArticulationChecker]:\n\tDoc: Validates all of the UsdPhysicsArticulationRootAPIs applied to a prim.\n\tKeywords: UsdPhysicsValidators, UsdPhysicsArticulationRootAPI\n\tSchemaTypes: UsdPhysicsArticulationRootAPI\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Defining RegressiveSPostOut Spline in OpenUSD\nDESCRIPTION: Specifies the RegressiveSPostOut spline with Bezier curve type, held extrapolation, and two knot points. The spline has specific tangent properties for curve shaping.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nSpline: RegressiveSPostOut\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 3\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 1\n  pre-tan slope 0.5\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Composition Result for /BasicVariantSelection in USD\nDESCRIPTION: Displays the composition result for the prim '/BasicVariantSelection'. The prim stack indicates the prim definition and its variant set application originate solely from 'root.sdf'. The variant selection '{v = x_sel}' is applied directly within the root layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ExpressionsInVariantSelections.testenv/baseline/compositionResults_ExpressionsInVariantSelections.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </BasicVariantSelection>\n\nPrim Stack:\n    root.sdf             /BasicVariantSelection\n    root.sdf             /BasicVariantSelection{v=x_sel}\n\nVariant Selections:\n    {v = x_sel}\n```\n\n----------------------------------------\n\nTITLE: Calculating RMANTREE Path for Test Environment in CMake\nDESCRIPTION: Calculates the absolute path to the RenderMan installation root directory (`RMANTREE`) based on the location of the RenderMan include directory (`RENDERMAN_INCLUDE_DIR`). The result is stored in the `RMANTREE_PATH` CMake variable, which is subsequently used to set the `RMANTREE` environment variable when running tests.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/rmanUsdValidators/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nget_filename_component(RMANTREE_PATH \"${RENDERMAN_INCLUDE_DIR}/..\" ABSOLUTE)\n```\n\n----------------------------------------\n\nTITLE: Composing /CharRig/Rig Prim in USD\nDESCRIPTION: Shows the composition of </CharRig/Rig> from `root.sdf`, listing its prim stack and identifying its child 'PathRig'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorOpinionAtRelocationSource.testenv/baseline/compositionResults_ErrorOpinionAtRelocationSource.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </CharRig/Rig>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig\n\nChild names:\n     ['PathRig']\n```\n\n----------------------------------------\n\nTITLE: Registering File Permission Handling Tests for USD Edit - CMake\nDESCRIPTION: Within the 'else' block, this snippet creates three test directories for file permissions and registers them using pxr_register_test. Each test configures a test environment by preparing a directory, setting file write permissions, executing usdedit (with or without extra flags), and specifying expected behavior (like return codes). Dependencies on the located system programs and the proper setting of the USD_EDITOR variable are managed to validate file protection handling in various usdedit invocation scenarios.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdedit/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n    pxr_install_test_dir(\n        SRC testenv/testUsdEditFilePermissions\n        DEST testUsdEditFilePermissions1\n    )\n\n    pxr_register_test(testUsdEditFilePermissions1\n        PYTHON\n        PRE_COMMAND \"${CHMODBIN} -w write_protected.usda\"\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdedit write_protected.usda\"\n        EXPECTED_RETURN_CODE 1 \n        ENV\n          USD_EDITOR=\"${HEADBIN}\"\n        PRE_PATH\n            ${CMAKE_INSTALL_PREFIX}/bin\n    )\n\n    pxr_install_test_dir(\n        SRC testenv/testUsdEditFilePermissions\n        DEST testUsdEditFilePermissions2\n    )\n\n    pxr_register_test(testUsdEditFilePermissions2\n        PYTHON\n        PRE_COMMAND \"${CHMODBIN} -w write_protected.usda\"\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdedit -n write_protected.usda\"\n        EXPECTED_RETURN_CODE 0\n        ENV\n          USD_EDITOR=\"${HEADBIN}\"\n        PRE_PATH\n            ${CMAKE_INSTALL_PREFIX}/bin\n    )\n\n    pxr_install_test_dir(\n        SRC testenv/testUsdEditFilePermissions\n        DEST testUsdEditFilePermissions3\n    )\n\n    pxr_register_test(testUsdEditFilePermissions3\n        PYTHON\n        PRE_COMMAND \"${CHMODBIN} -w write_protected.usda\"\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdedit -f write_protected.usda\"\n        EXPECTED_RETURN_CODE 0\n        ENV\n          USD_EDITOR=\"${HEADBIN}\"\n        PRE_PATH\n            ${CMAKE_INSTALL_PREFIX}/bin\n    )\n\n```\n\n----------------------------------------\n\nTITLE: USD Prim Stack for /B\nDESCRIPTION: Shows the contributing prim specs for prim `/B`. It includes the base spec for `/B`, a spec from its selected variant (`introducingVariantSet=introducingVariant`), and also inherits composition arcs from `/A` (likely via specializes or inherits).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndVariants.testenv/baseline/compositionResults_SpecializesAndVariants.txt#2025-04-23_snippet_7\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /B\n    root.sdf             /B{introducingVariantSet=introducingVariant}\n    root.sdf             /A\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Test Registration\nDESCRIPTION: Registers tests with different configurations based on platform and compiler due to floating-point precision requirements\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/examples/usdDancingCubesExample/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (\"${CMAKE_HOST_SYSTEM_NAME}\" STREQUAL \"Linux\" AND\n    \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\" AND\n    \"${CMAKE_HOST_SYSTEM_PROCESSOR}\" STREQUAL \"x86_64\")\n    pxr_register_test(testUsdDancingCubesExample\n        PYTHON\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdDancingCubesExample\"\n        DIFF_COMPARE dynamicContents.usda newDynamicContents.usda dynamicContentsFromAttrs.usda\n        EXPECTED_RETURN_CODE 0\n        ENV\n            ${PXR_PLUGINPATH_NAME}=${CMAKE_INSTALL_PREFIX}/share/usd/examples/plugin/usdDancingCubesExample/resources\n    )\nelse()\n    pxr_register_test(testUsdDancingCubesExample\n        PYTHON\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdDancingCubesExample\"\n        EXPECTED_RETURN_CODE 0\n        ENV\n            ${PXR_PLUGINPATH_NAME}=${CMAKE_INSTALL_PREFIX}/share/usd/examples/plugin/usdDancingCubesExample/resources\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Spline and Knot Data in OpenUSD\nDESCRIPTION: This snippet defines the configuration for a spline, including its type, extrapolation methods, and knot data with time, value, and tangent information.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/NoopKeepRatio_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  0.000000: 0.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.000000, postLen 0.800000, auto false / false\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.800000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Invalid Subroot Reference Error Message in OpenUSD\nDESCRIPTION: An error message generated by OpenUSD when attempting to compose a prim with an invalid subroot reference. The error occurs because the reference path '/Group{v=x}Model' contains a variant selection '{v=x}', which is not allowed in subroot references.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SubrootReferenceAndVariants.testenv/baseline/compositionErrors_SubrootReferenceAndVariants.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nErrors while composing </InvalidSubrootRefWithVariantSelection>\n\nInvalid reference path </Group{v=x}Model> introduced by @SubrootReferenceAndVariants/root.sdf@</InvalidSubrootRefWithVariantSelection>-- must be an absolute prim path with no variant selections.\n```\n\n----------------------------------------\n\nTITLE: SymArm Prim Composition\nDESCRIPTION: Composition results for the SymArm prim showing inheritance across layer files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TypicalReferenceToChargroupWithRename.testenv/baseline/compositionResults_TypicalReferenceToChargroupWithRename.txt#2025-04-23_snippet_5\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /Group_1/Model_1/SymArm\n    group.sdf            /Group/Model/SymArm\n    model.sdf            /Model/SymArm\n```\n\n----------------------------------------\n\nTITLE: Defining NearCenterVertical Spline in OpenUSD\nDESCRIPTION: Defines a Bezier spline named NearCenterVertical with two knots at time 0 and 1, and adjusted tangent widths for a different animation curve.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_98\n\nLANGUAGE: plaintext\nCODE:\n```\nSpline: NearCenterVertical\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0.8\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 0.8\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Tests for usdSkelValidators in CMake\nDESCRIPTION: Defines and registers a test for the usdSkelValidators library. The test is built with dependencies on tf, usd, usdValidation, usdSkel, and usdSkelValidators libraries, and is expected to return a success code of 0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/usdSkelValidators/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testUsdSkelValidators\n    LIBRARIES\n        tf\n        usd\n        usdValidation\n        usdSkel\n        usdSkelValidators\n    CPPFILES\n        testenv/testUsdSkelValidators.cpp\n)\n\npxr_register_test(testUsdSkelValidators\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdSkelValidators\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /S4 in USD Scene\nDESCRIPTION: The composition results for the /S4 primitive, showing both the prim stack and time offsets. This primitive has a simpler inheritance structure with only one prim in the stack (s_12fps.sdf).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer1.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </S4>\n\nPrim Stack:\n    s_12fps.sdf          /S4\n\nTime Offsets:\n    session_48tcps.sdf   /S4             root       (offset=0.00, scale=1.00)\n        sess_s.sdf                       sublayer   (offset=10.00, scale=4.00)\n        sess_s_48tcps.sdf                sublayer   (offset=10.00, scale=2.00)\n        sess_s_24tcps_12fps.sdf          sublayer   (offset=10.00, scale=4.00)\n        sess_s_12fps.sdf                 sublayer   (offset=10.00, scale=8.00)\n        root_24tcps_12fps.sdf            sublayer   (offset=0.00, scale=2.00)\n        s.sdf                            sublayer   (offset=20.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=60.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=60.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=60.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=60.00, scale=16.00)\n        s_48tcps.sdf                     sublayer   (offset=20.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=40.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=40.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=40.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=40.00, scale=16.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=20.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=60.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=60.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=60.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=60.00, scale=16.00)\n        s_12fps.sdf                      sublayer   (offset=20.00, scale=8.00)\n        ss.sdf                           sublayer   (offset=100.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=100.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=100.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=100.00, scale=16.00)\n```\n\n----------------------------------------\n\nTITLE: Installing HdSt Test Environment Directories with CMake Macros - CMake\nDESCRIPTION: This group of calls installs test environment directories into the build/test output space using the pxr_install_test_dir macro. Each SRC/DEST pair copies test files to a structured destination, ensuring tests that require additional data are able to access it during execution. Conditional installation of MaterialX tests is supported and toggled with the PXR_ENABLE_MATERIALX_SUPPORT flag. All operations depend on correct source paths and must be invoked after configuration of test data.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testHdStBarAllocationLimit\n    DEST testHdStBarAllocationLimit\n)\npxr_install_test_dir(\n    SRC testenv/testHdStBasicDrawing_Adaptive\n    DEST testHdStBasicDrawing_Adaptive\n)\npxr_install_test_dir(\n    SRC testenv/testHdStBasicDrawing\n    DEST testHdStBasicDrawing\n)\npxr_install_test_dir(\n    SRC testenv/testHdStBasicDrawing_Quadrangulate\n    DEST testHdStBasicDrawing_Quadrangulate\n)\npxr_install_test_dir(\n    SRC testenv/testHdStBufferArray\n    DEST testHdStBufferArray\n)\npxr_install_test_dir(\n    SRC testenv/testHdStBufferArrayInstancingDisabled\n    DEST testHdStBufferArrayInstancingDisabled\n)\npxr_install_test_dir(\n    SRC testenv/testHdStClipPlanes\n    DEST testHdStClipPlanes\n)\npxr_install_test_dir(\n    SRC testenv/testHdStCodeGen_GL\n    DEST testHdStCodeGen_GL\n)\npxr_install_test_dir(\n    SRC testenv/testHdStCodeGen_Vulkan\n    DEST testHdStCodeGen_Vulkan\n)\npxr_install_test_dir(\n    SRC testenv/testHdStCurveDrawing\n    DEST testHdStCurveDrawing\n)\npxr_install_test_dir(\n    SRC testenv/testHdStCurvePrimvarInterpolation\n    DEST testHdStCurvePrimvarInterpolation\n)\npxr_install_test_dir(\n    SRC testenv/testHdStDisplayStyle\n    DEST testHdStDisplayStyle\n)\npxr_install_test_dir(\n    SRC testenv/testHdStDrawBatching\n    DEST testHdStDrawBatching\n)\npxr_install_test_dir(\n    SRC testenv/testHdStDynamicUvTexture\n    DEST testHdStDynamicUvTexture\n)\npxr_install_test_dir(\n    SRC testenv/testHdStFaceCulling\n    DEST testHdStFaceCulling\n)\npxr_install_test_dir(\n    SRC testenv/testHdStGLSL\n    DEST testHdStGLSL\n)\npxr_install_test_dir(\n    SRC testenv/testHdStHWFaceCulling\n    DEST testHdStHWFaceCulling\n)\npxr_install_test_dir(\n    SRC testenv/testHdStInitRepr\n    DEST testHdStInitRepr\n)\npxr_install_test_dir(\n    SRC testenv/testHdStInstancing\n    DEST testHdStInstancing\n)\npxr_install_test_dir(\n    SRC testenv/testHdStInstancingUnbalanced\n    DEST testHdStInstancingUnbalanced\n)\npxr_install_test_dir(\n    SRC testenv/testHdStInstancingUnbalancedNoBindless\n    DEST testHdStInstancingUnbalancedNoBindless\n)\nif (${PXR_ENABLE_MATERIALX_SUPPORT})\npxr_install_test_dir(\n    SRC testenv/testHdStMaterialXShaderGen\n    DEST testHdStMaterialXShaderGen\n)\nendif()\npxr_install_test_dir(\n    SRC testenv/testHdStMultipleFvarTopologies\n    DEST testHdStMultipleFvarTopologies\n)\npxr_install_test_dir(\n    SRC testenv/testHdStPrimGather\n    DEST testHdStPrimGather\n)\npxr_install_test_dir(\n    SRC testenv/testHdStPrimvars\n    DEST testHdStPrimvars\n)\npxr_install_test_dir(\n    SRC testenv/testHdStSamplerObjectRegistry\n    DEST testHdStSamplerObjectRegistry\n)\npxr_install_test_dir(\n    SRC testenv/testHdStSubdivisionOsd3\n    DEST testHdStSubdivisionOsd3\n)\npxr_install_test_dir(\n    SRC testenv/testHdStTextureHandleRegistry\n    DEST testHdStTextureHandleRegistry\n)\npxr_install_test_dir(\n    SRC testenv/testHdStTextureObjectRegistry\n    DEST testHdStTextureObjectRegistry\n)\npxr_install_test_dir(\n    SRC testenv/testHdStTransition\n    DEST testHdStTransition\n)\npxr_install_test_dir(\n    SRC testenv/testHdStTransitionRefinedCurves\n    DEST testHdStTransitionRefinedCurves\n)\n\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /InconsistentVariability (USD Output)\nDESCRIPTION: Presents the composition outcome for the prim '/InconsistentVariability'. The prim stack involves '/InconsistentVariability' from 'root.sdf' and '/InconsistentVar' from 'ref.sdf'. Notably, the property stack for 'x' shows contributions from both layers ('/InconsistentVariability.x' from 'root.sdf' and '/InconsistentVar.x' from 'ref.sdf'). This likely illustrates how USD resolves inconsistencies in property variability (e.g., uniform vs. varying) across layers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInconsistentProperties.testenv/baseline/compositionResults_ErrorInconsistentProperties.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </InconsistentVariability>\n\nPrim Stack:\n    root.sdf             /InconsistentVariability\n    ref.sdf              /InconsistentVar\n\nProperty names:\n     ['x']\n\nProperty stacks:\n/InconsistentVariability.x:\n    root.sdf             /InconsistentVariability.x\n    ref.sdf              /InconsistentVar.x\n```\n\n----------------------------------------\n\nTITLE: USD Variant Selection for /A\nDESCRIPTION: Indicates the specific variant selection applied during the composition of prim `/A`. The variant set `nestedVariantSet` has the variant `nestedVariant` selected.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndVariants.testenv/baseline/compositionResults_SpecializesAndVariants.txt#2025-04-23_snippet_3\n\nLANGUAGE: usd\nCODE:\n```\nVariant Selections:\n    {nestedVariantSet = nestedVariant}\n```\n\n----------------------------------------\n\nTITLE: USD Rig Composition Analysis\nDESCRIPTION: Displays the composition results for the rig portion of the character, including variant selections, prohibited child names, and attribute connections between different components.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpookyVariantSelection.testenv/baseline/compositionResults_TrickySpookyVariantSelection.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\nResults for composing </CharRig/Rig>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig\n    FaceRig.sdf          /FaceRig/Rig\n\nChild names:\n     ['LipRig']\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Rig/LipRig>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig/LipRig\n    FaceRig.sdf          /FaceRig/Rig/LipRig\n    LipRig.sdf           /LipRig\n    LipRig.sdf           /LipRig{LipRigStyle=TwoLips}\n    TwoLips.sdf          /LipsRig\n    SingleLip.sdf        /LipsRig\n\nVariant Selections:\n    {LipRigStyle = TwoLips}\n\nChild names:\n     ['Rig']\n\nProhibited child names:\n     ['Anim']\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Rig/LipRig/Rig>\n\nPrim Stack:\n    TwoLips.sdf          /LipsRig/Rig\n    SingleLip.sdf        /LipsRig/Rig\n\nChild names:\n     ['Lip1Sculpt', 'Lip2Sculpt']\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Rig/LipRig/Rig/Lip1Sculpt>\n\nPrim Stack:\n    SingleLip.sdf        /LipsRig/Rig/Lip1Sculpt\n\nProperty names:\n     ['amount']\n\nProperty stacks:\n/CharRig/Rig/LipRig/Rig/Lip1Sculpt.amount:\n    SingleLip.sdf        /LipsRig/Rig/Lip1Sculpt.amount\n\nAttribute connections:\n/CharRig/Rig/LipRig/Rig/Lip1Sculpt.amount:\n    /CharRig/Anim/Lip.Lip1\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Rig/LipRig/Rig/Lip2Sculpt>\n\nPrim Stack:\n    TwoLips.sdf          /LipsRig/Rig/Lip2Sculpt\n\nProperty names:\n     ['amount']\n\nProperty stacks:\n/CharRig/Rig/LipRig/Rig/Lip2Sculpt.amount:\n    TwoLips.sdf          /LipsRig/Rig/Lip2Sculpt.amount\n\nAttribute connections:\n/CharRig/Rig/LipRig/Rig/Lip2Sculpt.amount:\n    /CharRig/Anim/Lip.Lip2\n```\n\n----------------------------------------\n\nTITLE: Sampling Bezier Curve with Wide Time Range and Coarse Interval\nDESCRIPTION: Test case showing Bezier curve sampling with a large time range and coarse sampling interval of 10. It includes pre/post extrapolation and inner loop behavior.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_52\n\nLANGUAGE: data\nCODE:\n```\nTest Case 128: SampleWithSources([5, 205], 10, 50, 10)\n0: (TsSourcePreExtrap)\n    (5, 30)\n    (80, 30)\n1: (TsSourceInnerLoopPreEcho)\n    (80, 30)\n    (80.6865234375, 30.56494140625)\n    (81.2734375, 29.59765625)\n    (82.3125, 25.09375)\n    (83.4453125, 20.54296875)\n    (84.1494140625, 19.51708984375)\n    (85, 20)\n    (87.6875, 22.40625)\n    (90, 25)\n    (90.6865234375, 25.56494140625)\n    (91.2734375, 24.59765625)\n    (92.3125, 20.09375)\n    (93.4453125, 15.54296875)\n    (94.1494140625, 14.51708984375)\n    (95, 15)\n    (97.6875, 17.40625)\n    (100, 20)\n2: (TsSourceInnerLoopProto)\n    (100, 20)\n    (100.6865234375, 20.56494140625)\n    (101.2734375, 19.59765625)\n    (102.3125, 15.09375)\n    (103.4453125, 10.54296875)\n    (104.1494140625, 9.51708984375)\n    (105, 10)\n    (107.6875, 12.40625)\n    (110, 15)\n3: (TsSourceInnerLoopPostEcho)\n    (110, 15)\n    (110.6865234375, 15.56494140625)\n    (111.2734375, 14.59765625)\n    (112.3125, 10.09375)\n    (113.4453125, 5.54296875)\n    (114.1494140625, 4.51708984375)\n    (115, 5)\n    (117.6875, 7.40625)\n    (120, 10)\n    (120.6865234375, 10.56494140625)\n    (121.2734375, 9.59765625)\n    (122.3125, 5.09375)\n    (123.4453125, 0.54296875)\n    (124.1494140625, -0.48291015625)\n    (125, 0)\n    (127.6875, 2.40625)\n    (130, 5)\n4: (TsSourcePostExtrap)\n    (130, 5)\n    (205, 5)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimWithSelfReference/InternalReference_Child\nDESCRIPTION: Displays the composition results for the child prim path </PrimWithSelfReference/InternalReference_Child>. The prim stack shows its origin from the internally referenced prim </InternalReference> defined in root.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimWithSelfReference/InternalReference_Child>\n\nPrim Stack:\n    root.sdf             /InternalReference/InternalReference_Child\n```\n\n----------------------------------------\n\nTITLE: Creating a new branch for feature development in OpenUSD\nDESCRIPTION: Git command to create and checkout a new branch based on the upstream dev branch. This creates an isolated environment for your bugfix or feature development.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/contributing_to_usd.rst#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b dev_mybugfix upstream/dev\n```\n\n----------------------------------------\n\nTITLE: Running usdInitSchema (Bash)\nDESCRIPTION: Example usage of the usdInitSchema script, which sets up schema modules for the first time, generating template files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toolset.rst#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nusdInitSchema testModule pxr/usd/testModule pxr/usd\n```\n\n----------------------------------------\n\nTITLE: Building Shared Library Test for TestTfDl in CMake\nDESCRIPTION: Defines a shared library test target for TestTfDl using the pxr_build_test_shared_lib macro. This test likely checks dynamic loading functionality.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test_shared_lib(TestTfDl\n    CPPFILES\n        testenv/TestTfDl.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimInSublayerWithInternalReference2\nDESCRIPTION: Details the composition results for the prim </PrimInSublayerWithInternalReference2>. The prim stack shows its definition in sublayer.sdf and its reference to </SublayerPrim>, also defined in sublayer.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimInSublayerWithInternalReference2>\n\nPrim Stack:\n    sublayer.sdf         /PrimInSublayerWithInternalReference2\n    sublayer.sdf         /SublayerPrim\n```\n\n----------------------------------------\n\nTITLE: Handling Windows Debug PDB Files for OpenUSD Arch Tests in CMake\nDESCRIPTION: Configures the installation of PDB files for Windows debug builds to ensure proper stack trace functionality in tests.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/arch/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (PXR_BUILD_TESTS AND WIN32)\n    install(\n        FILES $<TARGET_PDB_FILE:testArchStackTrace>\n        DESTINATION tests/ctest/testArchStackTrace\n        CONFIGURATIONS Debug RelWithDebInfo\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Displaying Time Offsets for /SS2 in OpenUSD\nDESCRIPTION: Shows the time offset and scale configurations for the /SS2 prim composition, displaying how time transformations are applied across the layer stack including root, sublayers, and references.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecond4.txt#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nTime Offsets:\n    root_12fps.sdf       /SS2            root       (offset=0.00, scale=1.00)\n        s.sdf                            sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=4.00)\n        s_48tcps.sdf                     sublayer   (offset=10.00, scale=0.50)\n        ss.sdf                           sublayer   (offset=15.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=15.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=15.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=15.00, scale=4.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=4.00)\n        s_12fps.sdf                      sublayer   (offset=10.00, scale=2.00)\n```\n\n----------------------------------------\n\nTITLE: Registering usdview Field of View Test\nDESCRIPTION: Registers a CMake test named `testUsdviewFieldOfView`. This test runs `testusdview` with the Python script `testUsdviewFieldOfView.py` and `test.usda`. It verifies camera field of view settings by performing perceptual image difference comparison against `fov45.png`, `fov60.png`, and `fov90.png`, using failure thresholds of 0.05 absolute and 0.03 percent, and expecting a return code of 0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdviewFieldOfView\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewFieldOfView.py test.usda\"\n    IMAGE_DIFF_COMPARE\n        fov45.png\n        fov60.png\n        fov90.png\n    FAIL 0.05\n    FAIL_PERCENT 0.03\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Loading USD Layer with Variant\nDESCRIPTION: Initial layer loading showing the root.sdf file with a tricky variant override\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantOverrideOfLocalClass.testenv/baseline/compositionResults_TrickyVariantOverrideOfLocalClass.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nLoading @TrickyVariantOverrideOfLocalClass/root.sdf@\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition Result for /AddRefs1\nDESCRIPTION: Details the composition results for the prim `/AddRefs1`. It lists the contributing layers in the Prim Stack (`sub.sdf`, `base.sdf`, `ref.sdf`) and the effective time offsets and scales applied through the layer stack and references. This prim composition includes four references to `/Ref` with varying time offsets and scales.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ReferenceListOpsWithOffsets.testenv/baseline/compositionResults_ReferenceListOpsWithOffsets.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </AddRefs1>\n\nPrim Stack:\n    sub.sdf              /AddRefs1\n    base.sdf             /AddRefs1\n    ref.sdf              /Ref\n    ref.sdf              /Ref\n    ref.sdf              /Ref\n    ref.sdf              /Ref\n\nTime Offsets:\n    root.sdf             /AddRefs1       root       (offset=0.00, scale=1.00)\n        sub.sdf                          sublayer   (offset=10.00, scale=2.00)\n        sub_48tcps.sdf                   sublayer   (offset=0.00, scale=0.50)\n    ref.sdf              /Ref            reference  (offset=100.00, scale=1.00)\n    ref.sdf              /Ref            reference  (offset=30.00, scale=4.00)\n    ref.sdf              /Ref            reference  (offset=100.00, scale=1.00)\n    ref.sdf              /Ref            reference  (offset=10.00, scale=2.00)\n```\n\n----------------------------------------\n\nTITLE: Defining the 'hf' Library using pxr_library in CMake\nDESCRIPTION: This CMake code defines the `hf` library using the custom `pxr_library` function. It first sets context variables `PXR_PREFIX` to 'pxr/imaging' and `PXR_PACKAGE` to 'hf', and initializes `optionalPublicClasses` as empty. The `pxr_library` command then configures the 'hf' library, specifying its dependencies (`plug`, `tf`, `trace`), public headers (`api.h`, `diagnostic.h`, `pluginDesc.h`, `perfLog.h`), public classes (`pluginBase`, `pluginRegistry`), and private classes (`pluginEntry`). This configuration is part of the build process for the Pixar OpenUSD framework.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hf/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE hf)\n\nset(optionalPublicClasses \"\")\n\npxr_library(hf\n    LIBRARIES\n        plug\n        tf\n        trace\n\n    PUBLIC_HEADERS\n        api.h\n        diagnostic.h\n        pluginDesc.h\n        perfLog.h\n\n    PUBLIC_CLASSES\n        pluginBase\n        pluginRegistry\n        \n    PRIVATE_CLASSES\n        pluginEntry\n)\n```\n\n----------------------------------------\n\nTITLE: Logging Event Begin/End Times in OpenUSD\nDESCRIPTION: Sequential log output tracking events with their beginning and ending timestamps. Each event is numbered sequentially and includes two timestamps indicating when it started and ended.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/trace/testenv/testTraceEventContainer.testenv/baseline/testTraceEventContainer-Run1-stdout.txt#2025-04-23_snippet_7\n\nLANGUAGE: log\nCODE:\n```\nFound event\n            Begin: 29\n            End: 30\nFound event\n            Begin: 28\n            End: 29\nFound event\n            Begin: 27\n            End: 28\n```\n\n----------------------------------------\n\nTITLE: Setting Up Sdr Test Scripts in CMake\nDESCRIPTION: This snippet configures test scripts for the Sdr library using the pxr_test_scripts CMake function. It includes tests for filesystem discovery, registry, and version functionality.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/sdr/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_test_scripts(\n    testenv/testSdrFilesystemDiscovery.py\n    testenv/testSdrRegistry.py\n    testenv/testSdrVersion.py\n)\n```\n\n----------------------------------------\n\nTITLE: Setting TF_DEBUG Environment Variable\nDESCRIPTION: Examples of configuring debug categories through environment variables, including using wildcards and category suppression.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/usdfaq.rst#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n$ export TF_DEBUG=\"HD_VARYING_STATE\"\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ export TF_DEBUG=\"HD*\"\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ export TF_DEBUG=\"FOO_* BAR_* -BAR_VERY_NOISY HD_VARYING_STATE\"\n```\n\n----------------------------------------\n\nTITLE: Defining Sublayers, References, and Payloads for ascii.usd\nDESCRIPTION: This text block lists the external USD files that `ascii.usd` depends on through composition arcs. It specifies two sublayers (`sub_a.usd`, `sub_b.usd`), eighteen references (including attribute files like `attr_a.usd`, base geometry `base_a.usd`, animation clips `clip.*.usd`, metadata `meta_*.usd`, variants `v_*.usd*`, and other references `ref_*.usd`), and one payload (`payload_a.usd`). This structure defines how these separate files are combined to form the final scene represented by `ascii.usd`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUtils/testenv/testUsdUtilsDependencyExtractor/baseline/ascii-usd.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nascii.usd sublayers[001]: ./sub_a.usd\nascii.usd sublayers[002]: ./sub_b.usd\nascii.usd references[001]: ./attr_a.usd\nascii.usd references[002]: ./attr_b.usd\nascii.usd references[003]: ./attr_c.usd\nascii.usd references[004]: ./base_a.usd\nascii.usd references[005]: ./clip.010.usd\nascii.usd references[006]: ./clip.1.usd\nascii.usd references[007]: ./clip.11.usd\nascii.usd references[008]: ./meta_a.usd\nascii.usd references[009]: ./meta_b.usd\nascii.usd references[010]: ./meta_c.usd\nascii.usd references[011]: ./ref_a.usd\nascii.usd references[012]: ./ref_b.usd\nascii.usd references[013]: ./v_attr_a.usd\nascii.usd references[014]: ./v_attr_b.usd\nascii.usd references[015]: ./v_attr_c.usd\nascii.usd references[016]: ./v_meta_a.usda\nascii.usd references[017]: ./v_meta_b.usda\nascii.usd references[018]: ./v_ref_a.usd\nascii.usd payloads[001]: ./payload_a.usd\n```\n\n----------------------------------------\n\nTITLE: USD Geometry Composition Results\nDESCRIPTION: Composition results for geometry-related prims showing how geo.sdf layer contributes to the final composed result.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantWeakerSelection4.testenv/baseline/compositionResults_TrickyVariantWeakerSelection4.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </bob/geom>\n\nPrim Stack:\n    root.sdf             /bob{geotype=cube}geom\n    geo.sdf              /bob_root_cube\n\nChild names:\n     ['bob_body']\n\n------------------------------------------------------------------------\nResults for composing </bob/geom/bob_body>\n\nPrim Stack:\n    geo.sdf              /bob_root_cube/bob_body\n```\n\n----------------------------------------\n\nTITLE: Registering Frustum Culling Tests for CPU and GPU\nDESCRIPTION: Registers tests for HdSt frustum culling with different configurations (CPU-based, GPU-based, tiny primitive culling, and instance culling). These tests verify that geometry outside the view frustum is properly culled.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_37\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStFrustumCullingCPU\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStFrustumCulling --offscreen\"\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStFrustumCulling\n    ENV\n        HD_ENABLE_GPU_FRUSTUM_CULLING=0\n)\npxr_register_test(testHdStFrustumCullingGPU\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStFrustumCulling --offscreen\"\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStFrustumCulling\n    ENV\n        HD_ENABLE_GPU_FRUSTUM_CULLING=1\n        HD_ENABLE_GPU_COUNT_VISIBLE_INSTANCES=1\n)\npxr_register_test(testHdStFrustumCullingGPUTinyPrims\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStFrustumCulling --offscreen --tinyprim\"\n    EXPECTED_RETURN_CODE 0\n    ENV\n        HD_ENABLE_GPU_COUNT_VISIBLE_INSTANCES=1\n        HD_ENABLE_GPU_TINY_PRIM_CULLING=1\n        HD_ENABLE_GPU_FRUSTUM_CULLING=1\n)\npxr_register_test(testHdStFrustumCullingInstanceGPU\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStFrustumCulling --offscreen --instance\"\n    EXPECTED_RETURN_CODE 0\n    ENV\n        HD_ENABLE_GPU_COUNT_VISIBLE_INSTANCES=1\n        HD_ENABLE_GPU_FRUSTUM_CULLING=1\n)\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </RearLegRig/Knee_bone> in USD\nDESCRIPTION: Shows the composition results for the prim path </RearLegRig/Knee_bone> from 'root.sdf'. It details the prim stack, indicating contributions from multiple source prims (/RearLegRig/Knee_bone and /SymRig/Leg_bone/Knee_bone). It also lists child names and prohibited child names resulting from composition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyMultipleRelocations4.testenv/baseline/compositionResults_TrickyMultipleRelocations4.txt#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </RearLegRig/Knee_bone>\n\nPrim Stack:\n    root.sdf             /RearLegRig/Knee_bone\n    root.sdf             /SymRig/Leg_bone/Knee_bone\n\nChild names:\n     ['Ankle_bone_phrbv']\n\nProhibited child names:\n     ['Ankle_bone']\n```\n\n----------------------------------------\n\nTITLE: Registering Tests for usdSemantics in CMake\nDESCRIPTION: This snippet registers two Python tests for the usdSemantics library using CMake. It specifies the test commands and expected return codes for testing UsdSemanticsLabelsAPI and UsdSemanticsQuery.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdSemantics/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdSemanticsLabelsAPI\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdSemanticsLabelsAPI\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdSemanticsQuery\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdSemanticsLabelsQuery\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Composing Prim /PayloadRoot/Frame in USD\nDESCRIPTION: Details the composition results for the child prim path `/PayloadRoot/Frame`. It shows the prim stack originating from `B.sdf` and lists the accumulated time offsets considering the root layer (`root.sdf`) and the payload arc (`A.sdf`, `B.sdf`) with its associated scale.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicTimeOffset.testenv/baseline/compositionResults_BasicTimeOffset.txt#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </PayloadRoot/Frame>\n\nPrim Stack:\n    B.sdf                /Model/Frame\n\nTime Offsets:\n    root.sdf             /PayloadRoot/Frame root       (offset=0.00, scale=1.00)\n    A.sdf                /Model/Frame    payload    (offset=10.00, scale=2.00)\n        B.sdf                            sublayer   (offset=20.00, scale=1.00)\n```\n\n----------------------------------------\n\nTITLE: Defining Spline Knots (Custom Text Format)\nDESCRIPTION: This snippet defines a spline using a custom text format specific to the Ts library tests. It specifies that the spline is non-Hermite (`hermite false`), uses Held extrapolation for pre and post segments, and lists three knots with their time, value, interpolation type (Curve), pre/post slopes, pre/post tangent lengths, and auto-tangent flags.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReplaceContain_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope -0.250000, preLen 0.000000, postLen 0.250000, auto false / false\n  3.000000: 2.000000, Curve, preSlope 0.250000, postSlope 0.250000, preLen 0.250000, postLen 0.250000, auto false / false\n  4.000000: 2.000000, Curve, preSlope 0.250000, postSlope 0.000000, preLen 0.250000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Defining FourKnotBezier Spline with Controlled Tangents\nDESCRIPTION: Definition of a four-knot Bézier spline with precisely controlled tangents at each knot. The spline creates a wave-like pattern with alternating values and carefully specified tangent widths and slopes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_43\n\nLANGUAGE: plain text\nCODE:\n```\nSpline: FourKnotBezier\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0.25\n  post-tan slope -0.25\nKnot:\n  value type double\n  curve type Bezier\n  time 2\n  value 2\n  next interp Curve\n  pre-tan width 0.25\n  pre-tan slope 0.25\n  post-tan width 0.25\n  post-tan slope 0.25\nKnot:\n  value type double\n  curve type Bezier\n  time 3\n  value 1\n  next interp Curve\n  pre-tan width 0.25\n  pre-tan slope -0.25\n  post-tan width 0.25\n  post-tan slope -0.25\nKnot:\n  value type double\n  curve type Bezier\n  time 4\n  value 2\n  next interp Curve\n  pre-tan width 0.25\n  pre-tan slope 0.25\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Prim Composition Output for /Model\nDESCRIPTION: Displays the results of USD composition for the prim `/Model`. It shows the contributing layers (`root.sdf`, `model.sdf`), the effective prim stack considering the `costume=basicCostume` variant selection, the composed property names (`b`), and the source of the `b` property value.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyNonLocalVariantSelection.testenv/baseline/compositionResults_TrickyNonLocalVariantSelection.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLoading @TrickyNonLocalVariantSelection/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </Model>\n\nPrim Stack:\n    root.sdf             /Model\n    model.sdf            /Model\n    model.sdf            /Model{costume=basicCostume}\n\nVariant Selections:\n    {costume = basicCostume}\n\nProperty names:\n     ['b']\n\nProperty stacks:\n/Model.b:\n    model.sdf            /Model{costume=basicCostume}.b\n```\n\n----------------------------------------\n\nTITLE: Defining Geometric Mesh Data for 3D Primitives - Plain Text\nDESCRIPTION: This snippet provides static definitions of geometric entities (Tapered Cylinder and Disk) using tuples and arrays for points (vertex positions), normals, and topological connectivity (faces and their vertex indices). Intended for reference or direct use in mesh construction, testing, or visualization, the data presumes a 3D context but has no direct runtime dependencies. Prerequisite: the consuming system must interpret topology and tuple formats. The inputs are hardcoded arrays; the outputs are the fully-defined primitive meshes. Limitations include fixed resolution and lack of procedural parametrization.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/geomUtil/testenv/testMeshGenerators/baseline/generatedMeshes_closed.txt#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n8. Tapered Cylinder\n-------------------\nbottomRadius = 0.5, topRadius = 0.3, height = 2, sweep = 360\n\nTopology:\n  (rightHanded, catmullClark, ([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]), ([2, 1, 0, 3, 2, 0, 4, 3, 0, 5, 4, 0, 6, 5, 0, 7, 6, 0, 8, 7, 0, 9, 8, 0, 10, 9, 0, 1, 10, 0, 11, 12, 22, 21, 12, 13, 23, 22, 13, 14, 24, 23, 14, 15, 25, 24, 15, 16, 26, 25, 16, 17, 27, 26, 17, 18, 28, 27, 18, 19, 29, 28, 19, 20, 30, 29, 20, 11, 21, 30, 31, 32, 41, 32, 33, 41, 33, 34, 41, 34, 35, 41, 35, 36, 41, 36, 37, 41, 37, 38, 41, 38, 39, 41, 39, 40, 41, 40, 31, 41]), ([]))\n\nPoints:\n  [(0, 0, -1), (0.5, 0, -1), (0.4045085, 0.29389262, -1), (0.15450849, 0.47552827, -1), (-0.15450858, 0.47552824, -1), (-0.40450853, 0.2938926, -1), (-0.5, -4.371139e-8, -1), (-0.40450838, -0.29389277, -1), (-0.15450855, -0.47552824, -1), (0.15450856, -0.47552824, -1), (0.40450847, -0.29389265, -1), (0.5, 0, -1), (0.4045085, 0.29389262, -1), (0.15450849, 0.47552827, -1), (-0.15450858, 0.47552824, -1), (-0.40450853, 0.2938926, -1), (-0.5, -4.371139e-8, -1), (-0.40450838, -0.29389277, -1), (-0.15450855, -0.47552824, -1), (0.15450856, -0.47552824, -1), (0.40450847, -0.29389265, -1), (0.3, 0, 1), (0.2427051, 0.17633557, 1), (0.09270509, 0.28531697, 1), (-0.092705145, 0.28531694, 1), (-0.24270512, 0.17633556, 1), (-0.3, -2.6226834e-8, 1), (-0.24270503, -0.17633566, 1), (-0.09270513, -0.28531694, 1), (0.09270514, -0.28531694, 1), (0.24270509, -0.1763356, 1), (0.3, 0, 1), (0.2427051, 0.17633557, 1), (0.09270509, 0.28531697, 1), (-0.092705145, 0.28531694, 1), (-0.24270512, 0.17633556, 1), (-0.3, -2.6226834e-8, 1), (-0.24270503, -0.17633566, 1), (-0.09270513, -0.28531694, 1), (0.09270514, -0.28531694, 1), (0.24270509, -0.1763356, 1), (0, 0, 1)]\n\nNormals:\n  [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0.9950372, 0, 0.09950371), (0.80500203, 0.5848682, 0.09950371), (0.30748338, 0.9463366, 0.09950371), (-0.30748355, 0.94633657, 0.09950371), (-0.8050021, 0.58486813, 0.09950371), (-0.9950372, -8.698891e-8, 0.09950371), (-0.8050018, -0.5848685, 0.09950371), (-0.3074835, -0.94633657, 0.09950371), (0.30748352, -0.94633657, 0.09950371), (0.805002, -0.58486825, 0.09950371), (0.9950372, 0, 0.09950371), (0.80500203, 0.5848682, 0.09950371), (0.30748338, 0.9463366, 0.09950371), (-0.30748355, 0.94633657, 0.09950371), (-0.8050021, 0.58486813, 0.09950371), (-0.9950372, -8.698891e-8, 0.09950371), (-0.8050018, -0.5848685, 0.09950371), (-0.3074835, -0.94633657, 0.09950371), (0.30748352, -0.94633657, 0.09950371), (0.805002, -0.58486825, 0.09950371), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]\n```\n\nLANGUAGE: text\nCODE:\n```\n9. Disk\n-------\nradius = 0.5, sweep = 360\n\nTopology:\n  (rightHanded, catmullClark, ([3, 3, 3, 3, 3, 3, 3, 3, 3, 3]), ([0, 1, 10, 1, 2, 10, 2, 3, 10, 3, 4, 10, 4, 5, 10, 5, 6, 10, 6, 7, 10, 7, 8, 10, 8, 9, 10, 9, 0, 10]), ([]))\n\nPoints:\n  [(0.5, 0, 0), (0.4045085, 0.29389262, 0), (0.15450849, 0.47552827, 0), (-0.15450858, 0.47552824, 0), (-0.40450853, 0.2938926, 0), (-0.5, -4.371139e-8, 0), (-0.40450838, -0.29389277, 0), (-0.15450855, -0.47552824, 0), (0.15450856, -0.47552824, 0), (0.40450847, -0.29389265, 0), (0, 0, 0)]\n\nNormals:\n  [(0, 0, 1)]\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </_X/_Y/C/D> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </_X/_Y/C/D>. The prim stack combines contributions from /Ref/C/D and /Ref/C/_Z in 'ref.sdf'. The 'prop' property stack lists contributions from both corresponding locations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </_X/_Y/C/D>\n\nPrim Stack:\n    ref.sdf              /Ref/C/D\n    ref.sdf              /Ref/C/_Z\n\nProperty names:\n     ['prop']\n\nProperty stacks:\n/_X/_Y/C/D.prop:\n    ref.sdf              /Ref/C/D.prop\n    ref.sdf              /Ref/C/_Z.prop\n```\n\n----------------------------------------\n\nTITLE: GPU Support Check\nDESCRIPTION: Conditionally skips building the package if GPU support is disabled in the build configuration.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/plugin/hioOiio/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT ${PXR_BUILD_GPU_SUPPORT})\n    message(STATUS\n            \"Skipping ${PXR_PACKAGE} because PXR_BUILD_GPU_SUPPORT is OFF\")\n    return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /InternalSublayerReference\nDESCRIPTION: Shows the composition results for the prim at path </InternalSublayerReference>. It details the prim stack, indicating contributions from root.sdf and sublayer.sdf, and lists its child prim names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </InternalSublayerReference>\n\nPrim Stack:\n    root.sdf             /InternalSublayerReference\n    sublayer.sdf         /InternalSublayerReference\n\nChild names:\n     ['InternalSublayerReference_Child']\n```\n\n----------------------------------------\n\nTITLE: Configuring HgiVulkan Library Build\nDESCRIPTION: Defines the core HgiVulkan library components including dependencies, public classes, headers, and resource files. Sets up the main library structure with Vulkan-specific components.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hgiVulkan/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\npxr_library(hgiVulkan\n    LIBRARIES\n        arch\n        hgi\n        tf\n        trace\n        ${VULKAN_LIBS}\n\n    PUBLIC_CLASSES\n        blitCmds\n        buffer\n        capabilities\n        commandBuffer\n        commandQueue\n        computeCmds\n        computePipeline\n        conversions\n        device\n        diagnostic\n        garbageCollector\n        graphicsCmds\n        graphicsPipeline\n        hgi\n        instance\n        pipelineCache\n        resourceBindings\n        sampler\n        shaderCompiler\n        shaderFunction\n        shaderGenerator\n        shaderProgram\n        shaderSection\n        texture\n        vk_mem_alloc\n\n    PUBLIC_HEADERS\n        api.h\n        vulkan.h\n\n    PRIVATE_CLASSES\n        spirv_reflect\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing TsTest_SplineData Object in Python\nDESCRIPTION: This snippet creates a TsTest_SplineData object with specific parameters for interpolation method, extrapolation, and knot configurations. It uses hexadecimal float representations for precise numerical values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/NoopLimitActive_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.999999999999ap-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.999999999999ap-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Stitch Clips Python Binary in CMake\nDESCRIPTION: Sets up the usdstitchclips Python binary with its dependencies using the pxr_python_bin CMake function.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdstitchclips/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\npxr_python_bin(usdstitchclips\n    DEPENDENCIES\n        tf\n        sdf\n        usdUtils\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Test Directory Contents for OpenUSD Kind Library (CMake)\nDESCRIPTION: Employs the custom `pxr_install_test_dir` CMake function to copy the contents of the source directory 'testenv/testKindRegistry' to the destination directory 'testKindRegistry' within the test installation path (typically `${CMAKE_INSTALL_PREFIX}/tests`). This makes test resources available after installation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/kind/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testKindRegistry\n    DEST testKindRegistry\n)\n```\n\n----------------------------------------\n\nTITLE: Defining ZeroTans Spline with Held Extrapolation\nDESCRIPTION: Definition of a Bézier spline with zero tangent slopes and widths, using Held extrapolation at both ends. The spline has two knots at time points 0 and 1, with values 0 and 1 respectively.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_39\n\nLANGUAGE: plain text\nCODE:\n```\nSpline: ZeroTans\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Validating Generated Gf Code in CMake\nDESCRIPTION: Configures a custom command to validate the generated Gf code using the gfGenCode.py script. This step is optional and depends on the PXR_VALIDATE_GENERATED_CODE flag and the availability of the Jinja2 library.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/gf/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT ${PXR_VALIDATE_GENERATED_CODE})\n    message(STATUS \"Skipping validation of gf generated code because PXR_VALIDATE_GENERATED_CODE=OFF\")\nelseif(NOT JINJA2_FOUND)\n    message(STATUS \"Skipping validation of gf generated code because of missing dependency: jinja2\")\nelse()\n    add_custom_command(\n        TARGET gf \n        PRE_BUILD \n        COMMENT \"Validating gf generated code...\"\n        COMMAND\n            ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/gfGenCode.py \n                --srcDir ${CMAKE_CURRENT_SOURCE_DIR}\n                --validate \n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: USD Composition Warning: Ignored Opinion (Good Reference to Child of Relocated Scenario)\nDESCRIPTION: Reports a warning encountered during the composition of '</Good_RefToChildOfRelocated>'. An opinion specified in the layer '@ErrorInvalidReferenceToRelocationSource/char.sdf@' at the relocation source path '</Char/PreRelo>' is deemed invalid by the composition engine and will be ignored. This occurs in a context where a reference is made to a child of a relocated prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInvalidReferenceToRelocationSource.testenv/baseline/compositionErrors_ErrorInvalidReferenceToRelocationSource.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nThe layer @ErrorInvalidReferenceToRelocationSource/char.sdf@ has an invalid opinion at the relocation source path </Char/PreRelo>, which will be ignored.\n```\n\n----------------------------------------\n\nTITLE: Registering Python Tests\nDESCRIPTION: Registers Python-based tests for USD UI node graph and scene graph functionality.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUI/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdUINodeGraphNode\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUINodeGraphNode\"\n)\npxr_register_test(testUsdUISceneGraphPrim\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUISceneGraphPrim\"\n)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimWithSubrootReference\nDESCRIPTION: Details the composition results for </PrimWithSubrootReference>. The prim stack shows its definition in root.sdf and contributions from sub-root references to </PrimA/PrimA_Child> (from ref.sdf) and </PrimC/PrimC_Child> (from ref2.sdf).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimWithSubrootReference>\n\nPrim Stack:\n    root.sdf             /PrimWithSubrootReference\n    ref.sdf              /PrimA/PrimA_Child\n    ref2.sdf             /PrimC/PrimC_Child\n```\n\n----------------------------------------\n\nTITLE: Composing Prim B in OpenUSD\nDESCRIPTION: Displays the composition results for prim B, including its prim stack and property names. The duplicate layer results in a duplicate entry in the prim stack.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicDuplicateSublayer.testenv/baseline/compositionResults_BasicDuplicateSublayer.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </B>\n\nPrim Stack:\n    B.sdf                /B\n    B.sdf                /B\n\nProperty names:\n     ['B_attr']\n\nProperty stacks:\n/B.B_attr:\n    B.sdf                /B.B_attr\n    B.sdf                /B.B_attr\n```\n\n----------------------------------------\n\nTITLE: USD Layer Stack Analysis\nDESCRIPTION: Shows the layer composition starting with root.sdf and demonstrates prim stack composition for a Model with references and material assignments.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpecializesAndRelocates.testenv/baseline/compositionResults_TrickySpecializesAndRelocates.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLoading @TrickySpecializesAndRelocates/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </Model>\n\nPrim Stack:\n    root.sdf             /Model\n    ref.sdf              /Ref\n\nChild names:\n     ['Brass_2', 'Metal']\n\nProhibited child names:\n     ['Brass']\n\n------------------------------------------------------------------------\nResults for composing </Model/Brass_2>\n\nPrim Stack:\n    root.sdf             /Model/Brass_2\n    ref.sdf              /Ref/Brass\n    root.sdf             /Model/Metal\n    ref.sdf              /Ref/Metal\n\n------------------------------------------------------------------------\nResults for composing </Model/Metal>\n\nPrim Stack:\n    root.sdf             /Model/Metal\n    ref.sdf              /Ref/Metal\n```\n\n----------------------------------------\n\nTITLE: RegressivePreFringe Spline Test Cases\nDESCRIPTION: Test results showing sampled points on the RegressivePreFringe spline with three different sampling ranges: [0,1], [-1.5,2.5] with extrapolation, and [0.25,0.75] with higher density sampling.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_91\n\nLANGUAGE: text\nCODE:\n```\nTest Case 184: SampleWithSources([0, 1], 500, 500, 1)\n0: (TsSourceKnotInterp)\n    (0, 0)\n    (0.0035157478679291526, 0.00286865234375)\n    (0.005710930707393665, 0.01123046875)\n    (0.0073835499479809686, 0.04296875)\n    (0.008565443205154094, 0.15625)\n    (0.013050511809948718, 0.23193359375)\n    (0.023448858124354585, 0.31640625)\n    (0.0422483794424761, 0.40673828125)\n    (0.07193697305841766, 0.5)\n    (0.09164213988247859, 0.54681396484375)\n    (0.11500253626628368, 0.59326171875)\n    (0.14232914937159596, 0.63897705078125)\n    (0.17393296636017852, 0.68359375)\n    (0.2101249743937944, 0.72674560546875)\n    (0.25121616063420665, 0.76806640625)\n    (0.2975175122431783, 0.80718994140625)\n    (0.3493400163824724, 0.84375)\n    (0.40699466021385206, 0.87738037109375)\n    (0.47079243089908024, 0.90771484375)\n    (0.5410443155999201, 0.93438720703125)\n    (0.6180613014781344, 0.95703125)\n    (0.7021543756954866, 0.97528076171875)\n    (0.7936345254137396, 0.98876953125)\n    (0.8928127377946564, 0.99713134765625)\n    (1, 1)\n\nTest Case 185: SampleWithSources([-1.5, 2.5], 500, 500, 10)\n0: (TsSourcePreExtrap)\n    (-1.5, 0)\n    (0, 0)\n1: (TsSourceKnotInterp)\n    (0, 0)\n    (0.008565443205154094, 0.15625)\n    (0.023448858124354585, 0.31640625)\n    (0.07193697305841766, 0.5)\n    (0.17393296636017852, 0.68359375)\n    (0.3493400163824724, 0.84375)\n    (0.6180613014781344, 0.95703125)\n    (1, 1)\n2: (TsSourcePostExtrap)\n    (1, 1)\n    (2.5, 1)\n\nTest Case 186: SampleWithSources([0.25, 0.75], 500, 500, 0.5)\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </RearLegRig/Legs/LeftRig/Leg_bone/Leg_bone> in USD\nDESCRIPTION: Shows the composition results for the potentially recursive or specially named prim path </RearLegRig/Legs/LeftRig/Leg_bone/Leg_bone> from 'root.sdf'. It details the prim stack (originating from /SymRig/Leg_bone), prohibited child names, property names ('bones'), the property stack for 'bones', and its adjusted relationship targets.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyMultipleRelocations4.testenv/baseline/compositionResults_TrickyMultipleRelocations4.txt#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </RearLegRig/Legs/LeftRig/Leg_bone/Leg_bone>\n\nPrim Stack:\n    root.sdf             /SymRig/Leg_bone\n\nProhibited child names:\n     ['Knee_bone']\n\nProperty names:\n     ['bones']\n\nProperty stacks:\n/RearLegRig/Legs/LeftRig/Leg_bone/Leg_bone.bones:\n    root.sdf             /SymRig/Leg_bone.bones\n\nRelationship targets:\n/RearLegRig/Legs/LeftRig/Leg_bone/Leg_bone.bones:\n    /RearLegRig/Legs/RightRig\n    /RearLegRig/Legs/LeftRig/Leg_bone/Leg_bone\n    /RearLegRig/Knee_bone\n    /RearLegRig/Knee_bone/Ankle_bone_phrbv\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure - Console Commands\nDESCRIPTION: Command to create the initial plugin directory structure\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_usdview_plugin.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmkdir -p <some path>/usdviewPlugins/tutorialPlugin/\n```\n\n----------------------------------------\n\nTITLE: Registering Automated HdSt Drawing Tests with pxr_register_test - Shell/CMake\nDESCRIPTION: This snippet defines individual test cases for the HdStBasicDrawing renderer using the pxr_register_test macro in a CMake-like scripting format. It provides the full test binary command (including renderer options such as representation type and lighting), the associated output image for diff comparison, error thresholds, and relevant environmental variables. Tests are grouped and parameterized to check various drawing modes such as 'wire', 'refined', and lighting options by adjusting command line arguments. The system expects specific return codes, supports perceptual image diffs, and sets debug environment variables crucial for isolating test failures.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_Immediate_lv2_wire\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr wire --refineLevel 2 --write testHdStBasicDrawing_lv2_wire.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv2_wire.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStBasicDrawing_Immediate_lv2_wireOnSurf\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr wireOnSurf --refineLevel 2 --write testHdStBasicDrawing_lv2_wireOnSurf.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv2_wireOnSurf.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStBasicDrawing_Immediate_lv2_refined\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr refined --refineLevel 2 --write testHdStBasicDrawing_lv2_refined.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv2_refined.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStBasicDrawing_Immediate_lv2_refinedWire\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr refinedWire --refineLevel 2 --write testHdStBasicDrawing_lv2_refinedWire.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv2_refinedWire.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStBasicDrawing_Immediate_lv2_refinedWireOnSurf\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr refinedWireOnSurf --refineLevel 2 --write testHdStBasicDrawing_lv2_refinedWireOnSurf.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv2_refinedWireOnSurf.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStBasicDrawing_Immediate_lighting_lv0_hull\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --lighting --repr hull --write testHdStBasicDrawing_lighting_lv0_hull.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lighting_lv0_hull.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStBasicDrawing_Immediate_lighting_lv0_smoothHull\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --lighting --repr smoothHull --write testHdStBasicDrawing_lighting_lv0_smoothHull.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lighting_lv0_smoothHull.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStBasicDrawing_Immediate_lighting_lv0_wire\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --lighting --repr wire --write testHdStBasicDrawing_lighting_lv0_wire.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lighting_lv0_wire.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStBasicDrawing_Immediate_lighting_lv0_wireOnSurf\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --lighting --repr wireOnSurf --write testHdStBasicDrawing_lighting_lv0_wireOnSurf.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lighting_lv0_wireOnSurf.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStBasicDrawing_Immediate_lighting_lv1_hull\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --lighting --repr hull --refineLevel 1 --write testHdStBasicDrawing_lighting_lv1_hull.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lighting_lv1_hull.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStBasicDrawing_Immediate_lighting_lv1_smoothHull\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --lighting --repr smoothHull --refineLevel 1 --write testHdStBasicDrawing_lighting_lv1_smoothHull.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lighting_lv1_smoothHull.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStBasicDrawing_Immediate_lighting_lv1_wire\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --lighting --repr wire --refineLevel 1 --write testHdStBasicDrawing_lighting_lv1_wire.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lighting_lv1_wire.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStBasicDrawing_Immediate_lighting_lv1_wireOnSurf\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --lighting --repr wireOnSurf --refineLevel 1 --write testHdStBasicDrawing_lighting_lv1_wireOnSurf.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lighting_lv1_wireOnSurf.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStBasicDrawing_Immediate_lighting_lv1_refined\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --lighting --repr refined --refineLevel 1 --write testHdStBasicDrawing_lighting_lv1_refined.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lighting_lv1_refined.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStBasicDrawing_Immediate_lighting_lv1_refinedWire\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --lighting --repr refinedWire --refineLevel 1 --write testHdStBasicDrawing_lighting_lv1_refinedWire.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lighting_lv1_refinedWire.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStBasicDrawing_Immediate_lighting_lv1_refinedWireOnSurf\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --lighting --repr refinedWireOnSurf --refineLevel 1 --write testHdStBasicDrawing_lighting_lv1_refinedWireOnSurf.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lighting_lv1_refinedWireOnSurf.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStBasicDrawing_Immediate_lighting_lv2_hull\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --lighting --repr hull --refineLevel 2 --write testHdStBasicDrawing_lighting_lv2_hull.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lighting_lv2_hull.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStBasicDrawing_Immediate_lighting_lv2_smoothHull\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --lighting --repr smoothHull --refineLevel 2 --write testHdStBasicDrawing_lighting_lv2_smoothHull.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lighting_lv2_smoothHull.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Module Paths for USD Build System\nDESCRIPTION: Appends project-specific module directories to the CMake module path, allowing CMake to locate custom modules for the build process.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CMAKE_MODULE_PATH\n    ${PROJECT_SOURCE_DIR}/cmake/defaults\n    ${PROJECT_SOURCE_DIR}/cmake/modules\n    ${PROJECT_SOURCE_DIR}/cmake/macros)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Composition Errors for </ConnectionToLocalClass/Instance_2>\nDESCRIPTION: This section displays error messages encountered during the composition of the USD prim </ConnectionToLocalClass/Instance_2>. Similar to Instance_1, errors arise from attribute connections in '@ErrorInvalidInstanceTargetPath/root.sdf@'. One connection defined in a class targets an instance attribute (</ConnectionToLocalClass/Instance_1.y>), and another targets a path outside the scope of the prim's inheritance. Both connections are ignored.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInvalidInstanceTargetPath.testenv/baseline/compositionErrors_ErrorInvalidInstanceTargetPath.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nErrors while composing </ConnectionToLocalClass/Instance_2>\n\nThe attribute connection </ConnectionToLocalClass/Instance_1.y> from </ConnectionToLocalClass/LocalClass.x> in layer @ErrorInvalidInstanceTargetPath/root.sdf@ is authored in a class but refers to an instance of that class.  Ignoring.\nThe attribute connection </ConnectionToLocalClass/Instance_2.y> from </ConnectionToLocalClass/LocalClass.x> in layer @ErrorInvalidInstanceTargetPath/root.sdf@ refers to a path outside the scope of the inherit from </ConnectionToLocalClass/Instance_2>.  Ignoring.\n```\n\n----------------------------------------\n\nTITLE: Building OpenUSD Arch Test Executables in CMake\nDESCRIPTION: Builds multiple test executables for various components of the 'arch' library using the pxr_build_test macro.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/arch/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testArchAbi\n    LIBRARIES\n        arch\n        ${CMAKE_DL_LIBS}\n    CPPFILES\n        testenv/testArchAbi.cpp\n)\npxr_build_test(testArchAttributes\n    LIBRARIES\n        arch\n    CPPFILES\n        testenv/testAttributes.cpp\n    )\n# ... (more test builds)\n```\n\n----------------------------------------\n\nTITLE: Logging USD Prim Composition and Layer Stack - Plaintext\nDESCRIPTION: This snippet represents structured log output from the process of composing prims in a USD layer stack with relocations. It records the layer and prim stack for each relevant path (e.g., \"/Group/Subgroup/Char_Renamed\"), as well as child prim names and any prohibited names after composition. There are no explicit code dependencies, but the output would typically be generated by a USD-compliant tool or script (such as those in the Pixar OpenUSD Python API). Input consists of the USD layer stack (root.sdf, group.sdf), and output is text lines for analysis and debugging. The constraints are that the content is purely for observation with no direct execution.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyMultipleRelocations3.testenv/baseline/compositionResults_TrickyMultipleRelocations3.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLoading @TrickyMultipleRelocations3/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </Group>\n\nPrim Stack:\n    root.sdf             /Group\n    group.sdf            /Group\n\nChild names:\n     ['Subgroup']\n\n------------------------------------------------------------------------\nResults for composing </Group/Subgroup>\n\nPrim Stack:\n    root.sdf             /Group/Subgroup\n    group.sdf            /Group/Subgroup\n\nChild names:\n     ['Char_Renamed']\n\nProhibited child names:\n     ['Char']\n\n------------------------------------------------------------------------\nResults for composing </Group/Subgroup/Char_Renamed>\n\nPrim Stack:\n    root.sdf             /Group/Subgroup/Char_Renamed\n    group.sdf            /Group/Subgroup/Char\n\nChild names:\n     ['Rig_Renamed']\n\nProhibited child names:\n     ['Rig']\n\n------------------------------------------------------------------------\nResults for composing </Group/Subgroup/Char_Renamed/Rig_Renamed>\n\nPrim Stack:\n    group.sdf            /Group/Subgroup/Char/Rig\n    group.sdf            /ClassA\n    group.sdf            /ClassB\n\n```\n\n----------------------------------------\n\nTITLE: Evaluated Spline Point Values\nDESCRIPTION: A table of time-value pairs representing the evaluated spline at regular intervals. These points show how the value changes from 1.0 to 2.0 over time, with Held extrapolation keeping values constant before the first and after the last knot.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/tsTest_MayapyFramework.testenv/baseline/test_Baseline_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n0.200000 1.000000\n1.000000 1.000000\n1.019900 1.018739\n1.039801 1.035628\n1.059701 1.051152\n1.079602 1.065611\n1.099502 1.079213\n1.119403 1.092102\n1.139303 1.104387\n1.159204 1.116153\n1.179104 1.127465\n1.199005 1.138376\n1.218905 1.148929\n1.238806 1.159161\n1.258706 1.169101\n1.278607 1.178775\n1.298507 1.188206\n1.318408 1.197412\n1.338308 1.206411\n1.358209 1.215216\n1.378109 1.223843\n1.398010 1.232301\n1.417910 1.240601\n1.437811 1.248753\n1.457711 1.256764\n1.477612 1.264644\n1.497512 1.272398\n1.517413 1.280034\n1.537313 1.287556\n1.557214 1.294970\n1.577114 1.302282\n1.597015 1.309495\n1.616915 1.316614\n1.636816 1.323644\n1.656716 1.330586\n1.676617 1.337446\n1.696517 1.344225\n1.716418 1.350928\n1.736318 1.357556\n1.756219 1.364113\n1.776119 1.370600\n1.796020 1.377021\n1.815920 1.383377\n1.835821 1.389670\n1.855721 1.395903\n1.875622 1.402076\n1.895522 1.408193\n1.915423 1.414254\n1.935323 1.420261\n1.955224 1.426216\n1.975124 1.432120\n1.995025 1.437973\n2.014925 1.443779\n2.034826 1.449537\n2.054726 1.455249\n2.074627 1.460917\n2.094527 1.466540\n2.114428 1.472121\n2.134328 1.477659\n2.154229 1.483157\n2.174129 1.488615\n2.194030 1.494033\n2.213930 1.499413\n2.233831 1.504755\n2.253731 1.510061\n2.273632 1.515330\n2.293532 1.520564\n2.313433 1.525764\n2.333333 1.530929\n2.353234 1.536060\n2.373134 1.541159\n2.393035 1.546226\n2.412935 1.551260\n2.432836 1.556264\n2.452736 1.561236\n2.472637 1.566179\n2.492537 1.571092\n2.512438 1.575975\n2.532338 1.580830\n2.552239 1.585656\n2.572139 1.590454\n2.592040 1.595225\n2.611940 1.599969\n2.631841 1.604686\n2.651741 1.609376\n2.671642 1.614040\n2.691542 1.618679\n2.711443 1.623292\n2.731343 1.627880\n2.751244 1.632443\n2.771144 1.636982\n2.791045 1.641496\n2.810945 1.645987\n2.830846 1.650453\n2.850746 1.654897\n2.870647 1.659317\n2.890547 1.663714\n2.910448 1.668089\n2.930348 1.672441\n2.950249 1.676771\n2.970149 1.681079\n2.990050 1.685365\n3.009950 1.689629\n3.029851 1.693872\n3.049751 1.698094\n3.069652 1.702295\n3.089552 1.706474\n3.109453 1.710633\n3.129353 1.714771\n3.149254 1.718889\n3.169154 1.722986\n3.189055 1.727064\n3.208955 1.731121\n3.228856 1.735158\n3.248756 1.739175\n3.268657 1.743173\n3.288557 1.747150\n3.308458 1.751109\n3.328358 1.755048\n3.348259 1.758967\n3.368159 1.762868\n3.388060 1.766749\n3.407960 1.770611\n3.427861 1.774454\n3.447761 1.778278\n3.467662 1.782083\n3.487562 1.785869\n3.507463 1.789636\n3.527363 1.793385\n3.547264 1.797114\n3.567164 1.800825\n3.587065 1.804517\n3.606965 1.808191\n3.626866 1.811845\n3.646766 1.815481\n3.666667 1.819098\n3.686567 1.822696\n3.706468 1.826276\n3.726368 1.829837\n3.746269 1.833378\n3.766169 1.836901\n3.786070 1.840405\n3.805970 1.843890\n3.825871 1.847356\n3.845771 1.850803\n3.865672 1.854230\n3.885572 1.857638\n3.905473 1.861026\n3.925373 1.864395\n3.945274 1.867745\n3.965174 1.871074\n3.985075 1.874383\n4.004975 1.877673\n4.024876 1.880942\n4.044776 1.884190\n4.064677 1.887418\n4.084577 1.890624\n4.104478 1.893810\n4.124378 1.896974\n4.144279 1.900116\n4.164179 1.903236\n4.184080 1.906335\n4.203980 1.909410\n4.223881 1.912462\n4.243781 1.915491\n4.263682 1.918496\n4.283582 1.921477\n4.303483 1.924433\n4.323383 1.927364\n4.343284 1.930269\n4.363184 1.933148\n4.383085 1.936000\n4.402985 1.938824\n4.422886 1.941619\n4.442786 1.944385\n4.462687 1.947121\n4.482587 1.949826\n4.502488 1.952499\n4.522388 1.955138\n4.542289 1.957743\n4.562189 1.960312\n4.582090 1.962843\n4.601990 1.965336\n4.621891 1.967787\n4.641791 1.970195\n4.661692 1.972558\n4.681592 1.974873\n4.701493 1.977137\n4.721393 1.979347\n4.741294 1.981498\n4.761194 1.983588\n4.781095 1.985609\n4.800995 1.987557\n4.820896 1.989425\n4.840796 1.991203\n4.860697 1.992881\n4.880597 1.994447\n4.900498 1.995883\n4.920398 1.997168\n4.940299 1.998274\n5.000000 2.000000\n5.800000 2.000000\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </Root/_Y/C> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </Root/_Y/C>. The prim stack contributions come from /Ref/C and /_G within 'ref.sdf'. The resolved child prim names are '_Z' and 'D'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Root/_Y/C>\n\nPrim Stack:\n    ref.sdf              /Ref/C\n    ref.sdf              /_G\n\nChild names:\n     ['_Z', 'D']\n```\n\n----------------------------------------\n\nTITLE: Building AR Test Libraries\nDESCRIPTION: Configures test shared libraries for advanced API testing, package resolver testing, and optional implementation testing.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/ar/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_build_test_shared_lib(TestArAdvancedAPI\n    INSTALL_PREFIX ArPlugins\n    LIBRARIES\n        tf\n        ar\n    CPPFILES\n        testenv/TestArAdvancedAPI_plugin.cpp\n)\n\npxr_build_test_shared_lib(TestArPackageResolver\n    INSTALL_PREFIX ArPlugins\n    LIBRARIES\n        tf\n        ar\n    CPPFILES\n        testenv/TestArPackageResolver_plugin.cpp\n)\n\npxr_build_test_shared_lib(TestArOptionalImplementation\n    INSTALL_PREFIX ArPlugins\n    LIBRARIES\n        tf\n        ar\n    CPPFILES\n        testenv/TestArOptionalImplementation_plugin.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </Root/B> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </Root/B>. The prim stack includes contributions from /Root/B, /_X/B, and /_X/_Y in 'root.sdf', plus /Ref from 'ref.sdf'. This demonstrates complex inheritance and referencing. The resolved child prim name is 'C'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Root/B>\n\nPrim Stack:\n    root.sdf             /Root/B\n    root.sdf             /_X/B\n    root.sdf             /_X/_Y\n    ref.sdf              /Ref\n\nChild names:\n     ['C']\n```\n\n----------------------------------------\n\nTITLE: Establishing File Format Respect Tests for USD Edit - CMake\nDESCRIPTION: This snippet sets up and registers file format tests to verify that usdedit operations respect differences between ASCII USD and Crate USD files. It configures test directories and registers tests that run usdedit, invoke the specified USD_EDITOR (with a sed-based substitution), and checks outputs by redirecting and diffing against expected files. The configuration relies on prior detection of required tools and the setup of the test environment and paths.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdedit/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n    pxr_install_test_dir(\n        SRC testenv/testUsdEditRespectFileFormat    \n        DEST testUsdEditRespectFileFormat1\n    )\n\n    pxr_register_test(testUsdEditRespectFileFormat1\n        PYTHON\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdedit hello_ascii.usd\"\n        POST_COMMAND \"${HEADBIN} -c9 hello_ascii.usd\"\n        POST_COMMAND_STDOUT_REDIRECT ascii_output.txt\n        EXPECTED_RETURN_CODE 0\n        DIFF_COMPARE ascii_output.txt\n        ENV\n          USD_EDITOR=\"sed -i 's/hello/goodbye/g'\"\n        PRE_PATH\n            ${CMAKE_INSTALL_PREFIX}/bin\n    )\n\n    pxr_install_test_dir(\n        SRC testenv/testUsdEditRespectFileFormat    \n        DEST testUsdEditRespectFileFormat2\n    )\n\n    pxr_register_test(testUsdEditRespectFileFormat2\n        PYTHON\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdedit hello_crate.usd\"\n        POST_COMMAND \"${HEADBIN} -c8 hello_crate.usd\"\n        POST_COMMAND_STDOUT_REDIRECT crate_output.txt   \n        EXPECTED_RETURN_CODE 0\n        DIFF_COMPARE crate_output.txt\n        ENV\n          USD_EDITOR=\"sed -i 's/hello/goodbye/g'\"\n        PRE_PATH\n            ${CMAKE_INSTALL_PREFIX}/bin\n    )\n\n```\n\n----------------------------------------\n\nTITLE: Using TF_DEBUG Macro in C++\nDESCRIPTION: Example of using the TF_DEBUG macro to print varying state of Hydra prims. Shows debug message output format.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/usdfaq.rst#2025-04-23_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nTF_DEBUG(HD_VARYING_STATE).Msg(\"New Varying State %s: %s\\n\", ...\n```\n\n----------------------------------------\n\nTITLE: Setting Up Stitch Clips Test for USD in CMake\nDESCRIPTION: Configures a test case for the main functionality of usdstitchclips, stitching multiple USD files and comparing the output with expected results.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdstitchclips/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testStitchClips\n    DEST testUsdStitchClips\n)\n\npxr_register_test(testUsdStitchClips\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdstitchclips --noComment --clipPath\n    /World/fx/Particles_Splash --out result.usda Particles_Splash.101.usd Particles_Splash.102.usd Particles_Splash.103.usd Particles_Splash.104.usd Particles_Splash.105.usd Particles_Splash.106.usd Particles_Splash.107.usd Particles_Splash.108.usd Particles_Splash.109.usd \"\n    EXPECTED_RETURN_CODE 0\n    DIFF_COMPARE result.usda result.topology.usda\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the OpenUSD Kind Library and Python Module (CMake)\nDESCRIPTION: Uses the custom `pxr_library` CMake function to define the 'kind' library. It specifies dependencies on the 'tf' and 'plug' libraries, declares 'registry' as a public class and 'api.h' as a public header. It also lists the C++ source files for the Python module bindings ('module.cpp', 'wrapRegistry.cpp', 'wrapTokens.cpp'), the Python module initialization file ('__init__.py'), and a Doxygen documentation file ('overview.dox').\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/kind/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_library(kind\n    LIBRARIES\n        tf\n        plug\n\n    PUBLIC_CLASSES\n        registry\n        \n    PUBLIC_HEADERS\n        api.h\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapRegistry.cpp\n        wrapTokens.cpp\n\n    PYMODULE_FILES \n        __init__.py\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimInSublayerWithInternalReference\nDESCRIPTION: Details the composition results for the prim </PrimInSublayerWithInternalReference>. The prim stack shows contributions from sublayer.sdf and also incorporates the internally referenced prim </InternalSublayerReference> from both root.sdf and sublayer.sdf. Child names derived from the reference are listed.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimInSublayerWithInternalReference>\n\nPrim Stack:\n    sublayer.sdf         /PrimInSublayerWithInternalReference\n    root.sdf             /InternalSublayerReference\n    sublayer.sdf         /InternalSublayerReference\n\nChild names:\n     ['InternalSublayerReference_Child']\n```\n\n----------------------------------------\n\nTITLE: Defining USD Alembic Plugin Components in CMake\nDESCRIPTION: Configures the USD Alembic plugin components including libraries, include directories, private classes, headers, Python module files, and resource files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/plugin/usdAbc/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_plugin(usdAbc\n    LIBRARIES\n        tf\n        work\n        sdf\n        usd\n        usdGeom\n        ${ALEMBIC_LIBRARIES}\n        ${__ALEMBIC_IMATH_LIBS}\n        ${optionalLibs}\n\n    INCLUDE_DIRS\n        ${ALEMBIC_INCLUDE_DIR}\n        ${__ALEMBIC_IMATH_INCLUDES}\n        ${optionalIncludeDirs}\n\n    PRIVATE_CLASSES\n        alembicData\n        alembicFileFormat\n        alembicReader\n        alembicTest\n        alembicUtil\n        alembicWriter\n\n    PRIVATE_HEADERS\n        api.h\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapAlembicTest.cpp\n\n    PYMODULE_FILES\n        __init__.py\n\n    RESOURCE_FILES\n        plugInfo.json\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Composition for /VariantsOpinionsOnRestrictedPrim (USD)\nDESCRIPTION: Details the composition for the '/VariantsOpinionsOnRestrictedPrim' prim. It shows contributions from 'root.sdf' and 'ref.sdf' (via a reference to '/Ref') in its prim stack and identifies 'Child' as its direct child prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorPermissionDenied.testenv/baseline/compositionResults_ErrorPermissionDenied.txt#2025-04-23_snippet_5\n\nLANGUAGE: usd\nCODE:\n```\nResults for composing </VariantsOpinionsOnRestrictedPrim>\n\nPrim Stack:\n    root.sdf             /VariantsOpinionsOnRestrictedPrim\n    ref.sdf              /Ref\n\nChild names:\n     ['Child']\n```\n\n----------------------------------------\n\nTITLE: Registering USD Python Tests with CMake\nDESCRIPTION: This snippet demonstrates the pattern used to register Python-based tests for USD components. It specifies the test name, command to run, and expected return code.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdChangeProcessing\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdChangeProcessing\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Composition Results for Prim </S1>\nDESCRIPTION: This section shows the composition results for the prim </S1>. The 'Prim Stack' indicates that the primary definition comes from 's.sdf'. The 'Time Offsets' section enumerates the layers involved in the composition path, showing how time scales and offsets from each sublayer contribute to the final timing for animation data on </S1>.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer4.txt#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </S1>\n\nPrim Stack:\n    s.sdf                /S1\n\nTime Offsets:\n    session.sdf          /S1             root       (offset=0.00, scale=1.00)\n        session.sdf                      sublayer   (offset=0.00, scale=0.50)\n        sess_s.sdf                       sublayer   (offset=5.00, scale=1.00)\n        sess_s_48tcps.sdf                sublayer   (offset=5.00, scale=0.50)\n        sess_s_24tcps_12fps.sdf          sublayer   (offset=5.00, scale=1.00)\n        sess_s_12fps.sdf                 sublayer   (offset=5.00, scale=2.00)\n        s.sdf                            sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=4.00)\n        s_48tcps.sdf                     sublayer   (offset=10.00, scale=0.50)\n        ss.sdf                           sublayer   (offset=15.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=15.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=15.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=15.00, scale=4.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=4.00)\n        s_12fps.sdf                      sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=4.00)\n```\n\n----------------------------------------\n\nTITLE: Defining OneThirdFourThird Bezier Spline Configuration\nDESCRIPTION: Defines a Bezier spline with one-third and four-thirds width ratios. Includes knot definitions with specific tan widths and slopes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_35\n\nLANGUAGE: text\nCODE:\n```\nSpline:\\n  value type double\\n  time valued 0\\n  curve type Bezier\\n  pre extrap Held\\n  post extrap Held\\nKnot:\\n  value type double\\n  curve type Bezier\\n  time 0\\n  value 0\\n  next interp Curve\\n  pre-tan width 0\\n  pre-tan slope 0\\n  post-tan width 0.3333333333333333\\n  post-tan slope 0\\nKnot:\\n  value type double\\n  curve type Bezier\\n  time 1\\n  value 1\\n  next interp Curve\\n  pre-tan width 1.3333333333333333\\n  pre-tan slope 0\\n  post-tan width 0\\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: OneThirdFourThird Bezier Spline Definition\nDESCRIPTION: Configuration for a OneThirdFourThird Bezier spline with Held extrapolation. The knots are defined at time=0 and time=1 with specific tangent widths (0.333 and 1.333) creating an asymmetric curve shape.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_103\n\nLANGUAGE: raw\nCODE:\n```\nSpline: OneThirdFourThird\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0.3333333333333333\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 1.3333333333333333\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Composing /VariantAtRelocateSource Prim in USD\nDESCRIPTION: Shows the composition results for </VariantAtRelocateSource>, incorporating layers from `root.sdf` and `ref.sdf`. It lists its children: 'Child', 'Sibling', 'Inherit'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorOpinionAtRelocationSource.testenv/baseline/compositionResults_ErrorOpinionAtRelocationSource.txt#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </VariantAtRelocateSource>\n\nPrim Stack:\n    root.sdf             /VariantAtRelocateSource\n    ref.sdf              /Ref\n\nChild names:\n     ['Child', 'Sibling', 'Inherit']\n```\n\n----------------------------------------\n\nTITLE: Enumerating Spline Test Output Table - Data\nDESCRIPTION: This section represents a tabular output of evaluated spline values for given input parameters, likely time and value pairs. Each line contains a floating-point input and its corresponding calculated value, serving as expected results for regression or unit testing, or for visualizing spline interpolation behavior. There are no dependencies, and values are designed to be compared against computed outputs for pipeline validation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReplaceNone_TsTestBaseline.txt#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n0.400000 1.000000\n1.000000 1.000000\n1.014925 0.997627\n1.029851 0.997234\n1.044776 0.998163\n1.059701 1.000056\n1.074627 1.002691\n1.089552 1.005921\n1.104478 1.009641\n1.119403 1.013773\n1.134328 1.018259\n1.149254 1.023052\n1.164179 1.028115\n1.179104 1.033417\n1.194030 1.038935\n1.208955 1.044646\n1.223881 1.050533\n1.238806 1.056580\n1.253731 1.062775\n1.268657 1.069105\n1.283582 1.075560\n1.298507 1.082132\n1.313433 1.088812\n1.328358 1.095593\n1.343284 1.102469\n1.358209 1.109433\n1.373134 1.116481\n1.388060 1.123608\n1.402985 1.130809\n1.417910 1.138080\n1.432836 1.145418\n1.447761 1.152819\n1.462687 1.160280\n1.477612 1.167798\n1.492537 1.175371\n1.507463 1.182995\n1.522388 1.190668\n1.537313 1.198389\n1.552239 1.206154\n1.567164 1.213963\n1.582090 1.221813\n1.597015 1.229703\n1.611940 1.237631\n1.626866 1.245594\n1.641791 1.253593\n1.656716 1.261625\n1.671642 1.269690\n1.686567 1.277785\n1.701493 1.285909\n1.716418 1.294063\n1.731343 1.302243\n1.746269 1.310450\n1.761194 1.318682\n1.776119 1.326939\n1.791045 1.335218\n1.805970 1.343521\n1.820896 1.351844\n1.835821 1.360189\n1.850746 1.368553\n1.865672 1.376937\n1.880597 1.385338\n1.895522 1.393758\n1.910448 1.402194\n1.925373 1.410646\n1.940299 1.419114\n1.955224 1.427596\n1.970149 1.436093\n1.985075 1.444602\n2.000000 1.453125\n2.014925 1.461660\n2.029851 1.470206\n2.044776 1.478763\n2.059701 1.487330\n2.074627 1.495908\n2.089552 1.504494\n2.104478 1.513088\n2.119403 1.521691\n2.134328 1.530300\n2.149254 1.538917\n2.164179 1.547539\n2.179104 1.556167\n2.194030 1.564800\n2.208955 1.573437\n2.223881 1.582078\n2.238806 1.590722\n2.253731 1.599368\n2.268657 1.608016\n2.283582 1.616665\n2.298507 1.625315\n2.313433 1.633964\n2.328358 1.642613\n2.343284 1.651260\n2.358209 1.659904\n2.373134 1.668546\n2.388060 1.677183\n2.402985 1.685816\n2.417910 1.694443\n2.432836 1.703064\n2.447761 1.711678\n2.462687 1.720283\n2.477612 1.728879\n2.492537 1.737465\n2.507463 1.746039\n2.522388 1.754600\n2.537313 1.763148\n2.552239 1.771680\n2.567164 1.780196\n2.582090 1.788693\n2.597015 1.797171\n2.611940 1.805626\n2.626866 1.814059\n2.641791 1.822466\n2.656716 1.830845\n2.671642 1.839193\n2.686567 1.847509\n2.701493 1.855788\n2.716418 1.864029\n2.731343 1.872226\n2.746269 1.880376\n2.761194 1.888474\n2.776119 1.896515\n2.791045 1.904493\n2.805970 1.912401\n2.820896 1.920230\n2.835821 1.927971\n2.850746 1.935613\n2.865672 1.943141\n2.880597 1.950540\n2.895522 1.957787\n2.910448 1.964857\n2.925373 1.971713\n2.940299 1.978307\n2.955224 1.984573\n2.970149 1.990410\n2.985075 1.995652\n3.000000 2.000000\n3.014925 2.003449\n3.029851 2.006387\n3.044776 2.008881\n3.059701 2.010985\n3.074627 2.012745\n3.089552 2.014200\n3.104478 2.015380\n3.119403 2.016314\n3.134328 2.017025\n3.149254 2.017534\n3.164179 2.017861\n3.179104 2.018020\n3.194030 2.018028\n3.208955 2.017896\n3.223881 2.017637\n3.238806 2.017262\n3.253731 2.016781\n3.268657 2.016203\n3.283582 2.015536\n3.298507 2.014789\n3.313433 2.013968\n3.328358 2.013081\n3.343284 2.012134\n3.358209 2.011134\n3.373134 2.010086\n3.388060 2.008996\n3.402985 2.007869\n3.417910 2.006710\n3.432836 2.005526\n3.447761 2.004320\n3.462687 2.003097\n3.477612 2.001863\n3.492537 2.000622\n3.507463 1.999378\n3.522388 1.998137\n3.537313 1.996903\n3.552239 1.995680\n3.567164 1.994474\n3.582090 1.993290\n3.597015 1.992131\n3.611940 1.991004\n3.626866 1.989914\n3.641791 1.988866\n3.656716 1.987866\n3.671642 1.986919\n3.686567 1.986032\n3.701493 1.985211\n3.716418 1.984464\n3.731343 1.983797\n3.746269 1.983219\n3.761194 1.982738\n3.776119 1.982363\n3.791045 1.982104\n3.805970 1.981972\n3.820896 1.981980\n3.835821 1.982139\n3.850746 1.982466\n3.865672 1.982975\n3.880597 1.983686\n3.895522 1.984620\n3.910448 1.985800\n3.925373 1.987255\n3.940299 1.989015\n3.955224 1.991119\n4.000000 2.000000\n4.600000 2.000000\n```\n\n----------------------------------------\n\nTITLE: Creating Code Blocks with Syntax Highlighting in RST Documentation\nDESCRIPTION: Example of using the code-block directive with syntax highlighting for Python code in reStructuredText for USD documentation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/README.md#2025-04-23_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. code-block:: python\n\n   from pxr import Usd, UsdGeom\n   stage = Usd.Stage.CreateNew('HelloWorld.usda')\n   xformPrim = UsdGeom.Xform.Define(stage, '/hello')\n   spherePrim = UsdGeom.Sphere.Define(stage, '/hello/world')\n   stage.GetRootLayer().Save()\n```\n\n----------------------------------------\n\nTITLE: Registering and Configuring a HdSt Test Command for X11 Systems - CMake\nDESCRIPTION: This snippet conditionally registers the testHdStBufferSource test only if the X11 system is present, using the pxr_register_test macro. It specifies the command to execute the test binary and sets up the required environment, including configuration of the TF_DEBUG variable. The expected return code ensures proper test pass detection; this is relevant for CI and developer testing workflows.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif (X11_FOUND)\n# Most HdSt tests require setup of a GL context and window. This is the \n# exception.\npxr_register_test(testHdStBufferSource\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBufferSource\"\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBufferSource\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Spline Configuration Settings\nDESCRIPTION: Basic spline configuration defining interpolation type and extrapolation methods, along with knot points and their properties\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/MoveStartKeepStart_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  0.400000: 0.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.000000, postLen 0.799994, auto false / false\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.199994, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Registering Tests for Work Library with Various Thread Configurations\nDESCRIPTION: Registers the tests built for the 'work' library with different configurations. Some tests run with specific thread limits set through environment variables, while others test raw TBB performance. The configuration demonstrates testing under various threading constraints.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/work/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testWorkDispatcher\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testWorkDispatcher\"\n)\npxr_register_test(testWorkLoops\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testWorkLoops\"\n)\npxr_register_test(testWorkReduce\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testWorkReduce\"\n)\npxr_register_test(testWorkSort\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testWorkSort\"\n)\npxr_register_test(testWorkThreadLimitsDefault\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testWorkThreadLimits\"\n)\npxr_register_test(testWorkThreadLimits1\n    ENV PXR_WORK_THREAD_LIMIT=1\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testWorkThreadLimits\"\n)\npxr_register_test(testWorkThreadLimits3\n    ENV PXR_WORK_THREAD_LIMIT=3\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testWorkThreadLimits\"\n)\npxr_register_test(testWorkThreadLimitsRawTBBMax\n    RUN_SERIAL\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testWorkThreadLimits --rawtbb\"\n)\npxr_register_test(testWorkThreadLimitsRawTBB2\n    RUN_SERIAL\n    ENV PXR_WORK_THREAD_LIMIT=2\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testWorkThreadLimits --rawtbb\"\n)\n```\n\n----------------------------------------\n\nTITLE: Default Arena Framebuffer Cache Configuration\nDESCRIPTION: Defines a framebuffer cache with descriptors ranging from 2x2 to 42x42 dimensions in increments of 2. Each descriptor includes two color textures and a depth texture with matching dimensions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hgiGL/testenv/testHgiGL/baseline/graphicsCmdsDescCache.txt#2025-04-23_snippet_4\n\nLANGUAGE: config\nCODE:\n```\n_FramebufferCache: {\n    _FramebufferDesc: {colorTexture0 dimensions:(2, 2, 1), colorTexture1 dimensions:(2, 2, 1), depthFormat 10depthTexture dimensions:(2, 2, 1)}\n    _FramebufferDesc: {colorTexture0 dimensions:(4, 4, 1), colorTexture1 dimensions:(4, 4, 1), depthFormat 10depthTexture dimensions:(4, 4, 1)}\n    _FramebufferDesc: {colorTexture0 dimensions:(6, 6, 1), colorTexture1 dimensions:(6, 6, 1), depthFormat 10depthTexture dimensions:(6, 6, 1)}\n    _FramebufferDesc: {colorTexture0 dimensions:(8, 8, 1), colorTexture1 dimensions:(8, 8, 1), depthFormat 10depthTexture dimensions:(8, 8, 1)}\n    _FramebufferDesc: {colorTexture0 dimensions:(10, 10, 1), colorTexture1 dimensions:(10, 10, 1), depthFormat 10depthTexture dimensions:(10, 10, 1)}\n    _FramebufferDesc: {colorTexture0 dimensions:(12, 12, 1), colorTexture1 dimensions:(12, 12, 1), depthFormat 10depthTexture dimensions:(12, 12, 1)}\n    _FramebufferDesc: {colorTexture0 dimensions:(14, 14, 1), colorTexture1 dimensions:(14, 14, 1), depthFormat 10depthTexture dimensions:(14, 14, 1)}\n    _FramebufferDesc: {colorTexture0 dimensions:(16, 16, 1), colorTexture1 dimensions:(16, 16, 1), depthFormat 10depthTexture dimensions:(16, 16, 1)}\n    _FramebufferDesc: {colorTexture0 dimensions:(18, 18, 1), colorTexture1 dimensions:(18, 18, 1), depthFormat 10depthTexture dimensions:(18, 18, 1)}\n    _FramebufferDesc: {colorTexture0 dimensions:(20, 20, 1), colorTexture1 dimensions:(20, 20, 1), depthFormat 10depthTexture dimensions:(20, 20, 1)}\n    _FramebufferDesc: {colorTexture0 dimensions:(22, 22, 1), colorTexture1 dimensions:(22, 22, 1), depthFormat 10depthTexture dimensions:(22, 22, 1)}\n    _FramebufferDesc: {colorTexture0 dimensions:(24, 24, 1), colorTexture1 dimensions:(24, 24, 1), depthFormat 10depthTexture dimensions:(24, 24, 1)}\n    _FramebufferDesc: {colorTexture0 dimensions:(26, 26, 1), colorTexture1 dimensions:(26, 26, 1), depthFormat 10depthTexture dimensions:(26, 26, 1)}\n    _FramebufferDesc: {colorTexture0 dimensions:(28, 28, 1), colorTexture1 dimensions:(28, 28, 1), depthFormat 10depthTexture dimensions:(28, 28, 1)}\n    _FramebufferDesc: {colorTexture0 dimensions:(30, 30, 1), colorTexture1 dimensions:(30, 30, 1), depthFormat 10depthTexture dimensions:(30, 30, 1)}\n    _FramebufferDesc: {colorTexture0 dimensions:(32, 32, 1), colorTexture1 dimensions:(32, 32, 1), depthFormat 10depthTexture dimensions:(32, 32, 1)}\n    _FramebufferDesc: {colorTexture0 dimensions:(34, 34, 1), colorTexture1 dimensions:(34, 34, 1), depthFormat 10depthTexture dimensions:(34, 34, 1)}\n    _FramebufferDesc: {colorTexture0 dimensions:(36, 36, 1), colorTexture1 dimensions:(36, 36, 1), depthFormat 10depthTexture dimensions:(36, 36, 1)}\n    _FramebufferDesc: {colorTexture0 dimensions:(38, 38, 1), colorTexture1 dimensions:(38, 38, 1), depthFormat 10depthTexture dimensions:(38, 38, 1)}\n    _FramebufferDesc: {colorTexture0 dimensions:(40, 40, 1), colorTexture1 dimensions:(40, 40, 1), depthFormat 10depthTexture dimensions:(40, 40, 1)}\n    _FramebufferDesc: {colorTexture0 dimensions:(42, 42, 1), colorTexture1 dimensions:(42, 42, 1), depthFormat 10depthTexture dimensions:(42, 42, 1)}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the sdfdump C++ Binary with Dependencies Using CMake - CMake\nDESCRIPTION: This CMake snippet registers the 'sdfdump' binary target using the 'pxr_cpp_bin' macro, specifying that it depends on the 'arch', 'plug', 'tf', and 'sdf' libraries. This setup is intended for the USD build environment, enabling modular linking of common code components. The macro assumes those libraries are already defined in the build environment and expects CMake to be configured for C++ compilation. Key limitation: the macro ('pxr_cpp_bin') should be available in the CMake module path.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/sdfdump/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_cpp_bin(sdfdump\n    LIBRARIES\n        arch\n        plug\n        tf\n        sdf\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a USD Clip with a Single Time Sample (usda)\nDESCRIPTION: Defines a simple USD layer (`clip1.usd`) containing a `Model` prim with a `double` attribute `a` having a single time sample value of `1` at time `1`. This file serves as one of the source clips in a value clip set example demonstrating interpolation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/valueClips.md#2025-04-23_snippet_6\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\ndef \"Model\"\n{\n    double a.timeSamples = {\n        1: 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Embree and GPU Support Dependencies for hdEmbree (CMake)\nDESCRIPTION: This CMake code checks for the presence of the Embree library (`EMBREE_FOUND`) and whether GPU support (`PXR_BUILD_GPU_SUPPORT`) is enabled. If Embree is not found or GPU support is off, it issues a warning or status message and stops further processing for the `hdEmbree` package, preventing its build.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/plugin/hdEmbree/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT EMBREE_FOUND)\n    message(WARNING \"Not building ${PXR_PACKAGE} because of missing dependency: Embree\")\n    return()\nendif()\nif (NOT ${PXR_BUILD_GPU_SUPPORT})\n    message(STATUS\n        \"Skipping ${PXR_PACKAGE} because PXR_BUILD_GPU_SUPPORT is OFF\")\n    return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Homepage Layout\nDESCRIPTION: ReStructuredText markup for the USD documentation homepage, including panels, sections, and navigation links. The code defines the page structure, styling, and content organization.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/index_body.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: rolesAndUtils.rst\n\n========\nUSD Home\n========\n\n.. panels::\n   :container: container-fluid p-0 mb-4\n   :column: col-xs-12 p-0\n   :card: + m-1\n   :body: + p-0 + usd-title-image-outer\n\n   ---\n   .. div:: +card-img-overlay +m-0 +p-2 +usd-title-image-inner\n\n      |usdlogo| :usdtitletext:`Universal Scene Description`\n\n   .. image:: https://openusd.org/images/piper-banner.jpg\n      :class: +card-img\n```\n\n----------------------------------------\n\nTITLE: Limited Top-Down Directory Walk Output\nDESCRIPTION: Output showing a top-down directory walk that stops at a specific directory (a/b/c/d).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/testenv/baseline/TfFileUtils/non-specific/TestTfWalkDirs-log.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n('a', ['b'], ['aardvark', 'one', 'two'])\n('a/b', ['c'], ['banana', 'four', 'three'])\n('a/b/c', ['d'], ['cat', 'five', 'six'])\n('a/b/c/d', ['e'], ['cycle_to_b', 'dog', 'eight', 'seven'])\n```\n\n----------------------------------------\n\nTITLE: Registering Pcp Museum Tests in CMake\nDESCRIPTION: This snippet shows the pattern used to register Pcp museum tests. It uses the pxr_register_test command to set up Python-based tests that run the testPcpCompositionResults script on specific USD files and compare the output to expected results.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testPcpMuseum_TypicalReferenceToRiggedModel\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TypicalReferenceToRiggedModel/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TypicalReferenceToRiggedModel.txt\n    DIFF_COMPARE compositionResults_TypicalReferenceToRiggedModel.txt \n)\n```\n\n----------------------------------------\n\nTITLE: Defining a USD Payload Arc\nDESCRIPTION: This line establishes a payload composition arc in a USD ASCII file. It links `./payload.usda` as a payload to the current layer (`anon.usda`). Payloads are similar to references but are designed for lazy loading, allowing scene data to be deferred until explicitly requested ('loaded'). The `[001]` could specify ordering or an identifier.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUtils/testenv/testUsdUtilsDependencyExtractor/baseline/anon.txt#2025-04-23_snippet_2\n\nLANGUAGE: usd\nCODE:\n```\nanon.usda payloads[001]: ./payload.usda\n```\n\n----------------------------------------\n\nTITLE: Defining Spline and Knots - YAML\nDESCRIPTION: This YAML-formatted snippet outlines the spline configuration (hermite flag, extrapolation modes), and defines two knots with associated properties like slopes and segment lengths. It serves as a plain-text serialization of spline test parameters, suitable for pipeline configuration or test input. Inputs must be valid YAML values; no explicit output is produced, but this is intended for direct reading or parsing by test harnesses.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveMayaTansLimitActive_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  0.000000: 0.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.000000, postLen 1.165675, auto false / false\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.800000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Listing USD Sublayer Time Offsets and Scales (Plaintext)\nDESCRIPTION: This snippet lists various Scene Description Files (.sdf) designated as sublayers within a USD composition. Each entry specifies the time offset and scale applied to that sublayer, defining how its internal timeline maps to the timeline of its parent layer. This is crucial for synchronizing animation or simulation data across different layers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer1.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n        ss_12fps.sdf                     sublayer   (offset=60.00, scale=16.00)\n        s_48tcps.sdf                     sublayer   (offset=20.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=40.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=40.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=40.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=40.00, scale=16.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=20.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=60.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=60.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=60.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=60.00, scale=16.00)\n        s_12fps.sdf                      sublayer   (offset=20.00, scale=8.00)\n        ss.sdf                           sublayer   (offset=100.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=100.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=100.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=100.00, scale=16.00)\n```\n\n----------------------------------------\n\nTITLE: Displaying Composition Results for /ModelGroup/Model_2/Rig in USD\nDESCRIPTION: Shows the composition analysis for the prim `/ModelGroup/Model_2/Rig`. It details the prim stack (`root.sdf`, `rig.sdf`), prohibited children (`Collider`), properties (`rigRel`), and the resolved relationship targets for `rigRel` pointing to `/ModelGroup/Model_2/Anim/Collider`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyMultipleRelocations2.testenv/baseline/compositionResults_TrickyMultipleRelocations2.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </ModelGroup/Model_2/Rig>\n\nPrim Stack:\n    root.sdf             /ModelGroup/Model_2/Rig\n    rig.sdf              /Rig\n\nProhibited child names:\n     ['Collider']\n\nProperty names:\n     ['rigRel']\n\nProperty stacks:\n/ModelGroup/Model_2/Rig.rigRel:\n    rig.sdf              /Rig.rigRel\n\nRelationship targets:\n/ModelGroup/Model_2/Rig.rigRel:\n    /ModelGroup/Model_2/Anim/Collider\n```\n\n----------------------------------------\n\nTITLE: Defining a Looping Bezier Spline Configuration (OpenUSD)\nDESCRIPTION: Defines the configuration for a double-precision Bezier spline named 'InnerLoop2and2' within the OpenUSD framework. It specifies held extrapolation, looping behavior (start time 100, end time 110, 2 pre/post loops with a value offset of -5), and details for two knots including their time, value, interpolation type, and tangent properties (width and slope). This configuration dictates how the spline curve is constructed and evaluated.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nSpline: InnerLoop2and2\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nLoop:\n  start 100, end 110, numPreLoops 2, numPostLoops 2, valueOffset -5\nKnot:\n  value type double\n  curve type Bezier\n  time 100\n  value 20\n  next interp Curve\n  pre-tan width 2\n  pre-tan slope 2\n  post-tan width 2\n  post-tan slope 2\nKnot:\n  value type double\n  curve type Bezier\n  time 105\n  value 10\n  next interp Curve\n  pre-tan width 2.5\n  pre-tan slope 1.5\n  post-tan width 2.5\n  post-tan slope 1.5\n```\n\n----------------------------------------\n\nTITLE: Symmetric Brow Rig Inheritance\nDESCRIPTION: Prim composition showing symmetric brow control inheritance between left and right brows\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpookyInheritsInSymmetricBrowRig.testenv/baseline/compositionResults_TrickySpookyInheritsInSymmetricBrowRig.txt#2025-04-23_snippet_2\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /FaceRig/BrowRig/LBrow\n    root.sdf             /FaceRig/BrowRig/SymBrow\n    BrowRig.sdf          /BrowRig/LBrow\n    BrowRig.sdf          /BrowRig/SymBrow\n\nChild names:\n     ['Anim']\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Code Role in Sphinx RST\nDESCRIPTION: Creates a custom role 'cpp' for inline C++ code formatting in Sphinx documentation. Uses monospace font. Used with the syntax :cpp:`code`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/rolesAndUtils.rst#2025-04-23_snippet_7\n\nLANGUAGE: rst\nCODE:\n```\n.. role:: cpp\n   :class: mono\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Geometry Validators Library in CMake\nDESCRIPTION: Defines the configuration for building the usdGeomValidators library, including its dependencies on other USD components, public classes, headers, and implementation files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/usdGeomValidators/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usdValidation)\nset(PXR_PACKAGE usdGeomValidators)\n\npxr_library(usdGeomValidators\n    LIBRARIES\n        tf\n        plug\n        sdf\n        usd\n        usdGeom\n        usdValidation\n\n    PUBLIC_CLASSES\n        validatorTokens\n        \n    PUBLIC_HEADERS\n        api.h\n\n    CPPFILES\n        validators.cpp\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Accessibility API Test\nDESCRIPTION: Registers the USD UI Accessibility API test with expected return code configuration.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUI/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdUIAccessibilityAPI\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUIAccessibilityAPI\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Composing /CharRig/Rig/PathRig Prim with Prohibited Children in USD\nDESCRIPTION: Details the composition of </CharRig/Rig/PathRig>, combining information from `root.sdf` and `pathRig.sdf`. It notes that 'Path' is a prohibited child name, likely due to relocation rules.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorOpinionAtRelocationSource.testenv/baseline/compositionResults_ErrorOpinionAtRelocationSource.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </CharRig/Rig/PathRig>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig/PathRig\n    pathRig.sdf          /PathRig\n\nProhibited child names:\n     ['Path']\n```\n\n----------------------------------------\n\nTITLE: Building Test Shared Library for OpenUSD Arch ABI Plugin in CMake\nDESCRIPTION: Builds a test shared library for the Arch ABI plugin using the pxr_build_test_shared_lib macro.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/arch/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test_shared_lib(testArchAbiPlugin\n    CPPFILES\n        testenv/testArchAbiPlugin.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Inspecting USD Composition Stack and Time Offsets for /S1\nDESCRIPTION: This output shows the results of composing the USD prim '/S1'. It identifies the source layer ('s.sdf') in the 'Prim Stack' and lists the 'Time Offsets' accumulated through the sublayer hierarchy, starting from 'root.sdf'. Each sublayer entry shows its contribution to the final time mapping with specific offset and scale values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecond1.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\nResults for composing </S1>\n\nPrim Stack:\n    s.sdf                /S1\n\nTime Offsets:\n    root.sdf             /S1             root       (offset=0.00, scale=1.00)\n        s.sdf                            sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=8.00)\n        s_48tcps.sdf                     sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=8.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=8.00)\n        s_12fps.sdf                      sublayer   (offset=10.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=50.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=50.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=50.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=50.00, scale=8.00)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimWithReferences/PrimB_Child\nDESCRIPTION: Displays the composition results for the child prim path </PrimWithReferences/PrimB_Child>. The prim stack shows its origin from the referenced prim </PrimB> defined in ref2.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimWithReferences/PrimB_Child>\n\nPrim Stack:\n    ref2.sdf             /PrimB/PrimB_Child\n```\n\n----------------------------------------\n\nTITLE: Nesting SubLayers in a USD Asset (USDA)\nDESCRIPTION: This USDA snippet shows how SubLayers can be nested. The `sequence.usd` file itself defines its own `subLayers` (`sequenceFX.usd`, `sequenceLayout.usd`, `sequenceDressing.usd`), which are then included within the `shot.usd` layer stack (referenced in the previous example), demonstrating hierarchical layer composition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_46\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    subLayers = [\n        @sequenceFX.usd@,\n        @sequenceLayout.usd@,\n        @sequenceDressing.usd@\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: USD Prim Stack Summary\nDESCRIPTION: Lists the final prim stacks for various paths within the USD scene, showing the contributing layer (root.sdf or ref.sdf) for each prim path. This summarizes the composition sources for different parts of the scene graph.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4_graph.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nPrim Stack:\n    root.sdf             /Parent/Child\n    root.sdf             /Parent/Sibling\n    root.sdf             /PI/Sibling\n    root.sdf             /PI/Child\n    ref.sdf              /PR/Child\n    ref.sdf              /PR/Sibling\n    root.sdf             /PIS/Sibling\n    root.sdf             /PISI/Sibling\n    root.sdf             /PIS/Child\n    root.sdf             /PISI/Child\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Shaders Plugin Build in CMake\nDESCRIPTION: Sets up the build configuration for the usdShaders plugin. Defines dependencies on ar, sdr, and usdShade libraries, includes private class discoveryPlugin, and specifies resource files including shader definitions and GLSL effects files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/plugin/usdShaders/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usdShaders)\n\npxr_plugin(usdShaders\n    LIBRARIES\n        ar\n        sdr\n        usdShade\n\n    PRIVATE_CLASSES\n        discoveryPlugin\n\n    PYMODULE_FILES\n        __init__.py\n\n    RESOURCE_FILES\n        plugInfo.json\n        shaders/shaderDefs.usda\n        shaders/previewSurface.glslfx\n        shaders/uvTexture.glslfx\n        shaders/primvarReader.glslfx\n        shaders/transform2d.glslfx\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Composing USD Layer Stack for /S1\nDESCRIPTION: Details the prim stack and time offset configurations for /S1 prim. Shows composition of root layer session_24fps.sdf with multiple sublayers using various offset and scale parameters.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer2.txt#2025-04-23_snippet_4\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    s.sdf                /S1\n\nTime Offsets:\n    session_24fps.sdf    /S1             root       (offset=0.00, scale=1.00)\n        session_24fps.sdf                sublayer   (offset=0.00, scale=2.00)\n        sess_s.sdf                       sublayer   (offset=20.00, scale=4.00)\n        [... additional sublayers ...]\n```\n\n----------------------------------------\n\nTITLE: Defining OpenUSD ts Library Test Components\nDESCRIPTION: Conditionally adds test-related components to the library when testing is enabled. Includes additional test classes, headers, and Python files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (${PXR_BUILD_TESTS})\n    list(APPEND classes\n        tsTest_Museum\n        tsTest_SampleBezier\n        tsTest_SampleTimes\n        tsTest_SplineData\n        tsTest_TsEvaluator\n    )\n    list(APPEND headers\n        tsTest_Types.h\n    )\n    list(APPEND pycpp\n        wrapTsTest_Museum.cpp\n        wrapTsTest_SampleBezier.cpp\n        wrapTsTest_SampleTimes.cpp\n        wrapTsTest_SplineData.cpp\n        wrapTsTest_TsEvaluator.cpp\n        wrapTsTest_Types.cpp\n    )\n    list(APPEND pyfiles\n        TsTest_Comparator.py\n        TsTest_Baseliner.py\n        TsTest_Grapher.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Viewing Alembic Files in usdview\nDESCRIPTION: This command demonstrates how to use usdview to open and visualize an Alembic file (hello.abc) after it has been converted from USD.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/plugins_alembic.rst#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ usdview hello.abc\n```\n\n----------------------------------------\n\nTITLE: Validating System Program Availability for Test Execution - CMake\nDESCRIPTION: This block employs find_program to search for essential system utilities (sed, chmod, head), storing their paths for later use in configuring test commands. It uses conditional logic to check their existence, emitting status messages and skipping all related tests if a dependency is missing. These checks enforce that tests relying on external processes only run where the local environment can support them.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdedit/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_program(SEDBIN\n    NAMES sed \n)\n\nfind_program(CHMODBIN\n    NAMES chmod\n)\n\nfind_program(HEADBIN\n    NAMES head\n)\n\nif (NOT EXISTS ${SEDBIN})\n    message(STATUS \"Skipping usdedit tests, could not find sed command.\")\nelseif(NOT EXISTS ${CHMODBIN})\n    message(STATUS \"Skipping usdedit tests, could not find chmod command.\")\nelseif(NOT EXISTS ${HEADBIN})\n    message(STATUS \"Skipping usdedit tests, could not find head command.\")\nelse()\n    ...\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /InternalSublayerReference/InternalSublayerReference_Child\nDESCRIPTION: Shows the composition results for the child prim at path </InternalSublayerReference/InternalSublayerReference_Child>. It details the prim stack, showing contributions from root.sdf and sublayer.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </InternalSublayerReference/InternalSublayerReference_Child>\n\nPrim Stack:\n    root.sdf             /InternalSublayerReference/InternalSublayerReference_Child\n    sublayer.sdf         /InternalSublayerReference/InternalSublayerReference_Child\n```\n\n----------------------------------------\n\nTITLE: USD Assembly with References Example\nDESCRIPTION: A USD file that references the asset example multiple times. This demonstrates how assets can be reused through references to create a more complex assembled model.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_29\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    defaultPrim = \"MySet\"\n)\n\ndef Xform \"MySet\"\n{\n    def Xform \"Building_1\" (\n        references = @asset.usd@\n    )\n    {\n    }\n\n    def Xform \"Building_2\" (\n        references = @asset.usd@\n    )\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Composition Errors for </FaceRig/BrowRig/RBrow/BrowInnUDPosBrowInnUDNeg_sculpt>\nDESCRIPTION: This section outlines composition errors for another prim within the face rig, symmetric to the previous one. Errors again stem from connections in '@ErrorInvalidInstanceTargetPath/ref.sdf@'. One connection (to </BrowRig/Anim/RBrow.InnUD>) is invalid, possibly due to prim relocation. The other connection from a class attribute (</BrowRig/SymBrow/BrowInnUDPosBrowInnUDNeg_sculpt.amount>) improperly targets an instance attribute (</BrowRig/Anim/LBrow.InnUD>). Both connections are ignored during composition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInvalidInstanceTargetPath.testenv/baseline/compositionErrors_ErrorInvalidInstanceTargetPath.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nErrors while composing </FaceRig/BrowRig/RBrow/BrowInnUDPosBrowInnUDNeg_sculpt>\n\nThe attribute connection </BrowRig/Anim/RBrow.InnUD> from </BrowRig/SymBrow/BrowInnUDPosBrowInnUDNeg_sculpt.amount> in layer @ErrorInvalidInstanceTargetPath/ref.sdf@ is invalid.  This may be because the path is the pre-relocated source path of a relocated prim.  Ignoring.\nThe attribute connection </BrowRig/Anim/LBrow.InnUD> from </BrowRig/SymBrow/BrowInnUDPosBrowInnUDNeg_sculpt.amount> in layer @ErrorInvalidInstanceTargetPath/ref.sdf@ is authored in a class but refers to an instance of that class.  Ignoring.\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Layer Composition for /Root Prim\nDESCRIPTION: This snippet shows the layer stack and time offsets for the /Root prim. It includes multiple sublayers with varying offsets and scales, demonstrating how different .sdf files are composed to form the final representation of the root prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecond3.txt#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </Root>\n\nPrim Stack:\n    root_24tcps_12fps.sdf /Root\n\nTime Offsets:\n    root_24tcps_12fps.sdf /Root           root       (offset=0.00, scale=1.00)\n        s.sdf                            sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=8.00)\n        s_48tcps.sdf                     sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=8.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=8.00)\n        s_12fps.sdf                      sublayer   (offset=10.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=50.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=50.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=50.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=50.00, scale=8.00)\n```\n\n----------------------------------------\n\nTITLE: Registering USD C++ and Python Test Executions - CMake\nDESCRIPTION: Declares how individual USD test executables or scripts are to be run and verified during the testing phase using pxr_register_test. This mechanism allows both Python and compiled C++ tests to be registered with expected return codes, required environment variables, and execution commands. Dependencies include CMake’s ability to call external commands, a proper install prefix, and valid test scripts or binaries. Common parameters are the test name, command, expected return code, optional environment settings, and an indicator of Python usage.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdAppliedAPISchemas\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdAppliedAPISchemas\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdAppliedAPISchemas_AutoApplyDisabled\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdAppliedAPISchemas\"\n    EXPECTED_RETURN_CODE 0\n    ENV\n        USD_DISABLE_AUTO_APPLY_API_SCHEMAS=1\n)\n\npxr_register_test(testUsdAttributeBlocking\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdAttributeBlocking\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdAttributeBlockingCpp\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdAttributeBlockingCpp\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdAttributeConnections\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdAttributeConnections\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdAttributeAssetPathVariableExpressions\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdAttributeAssetPathVariableExpressions\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdAttributeQuery\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdAttributeQuery\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdErrors\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdErrors\"\n    ENV TF_FATAL_THROW=0\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdValueClips\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdValueClips\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdVariantEditing\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdVariantEditing\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdVariantFallbacks\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdVariantFallbacks\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdVariants\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdVariants\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdAttributeInterpolationCpp\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdAttributeInterpolationCpp\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdBugs\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdBugs\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdBug119633\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdBug119633\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdBug141491\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdBug141491\"\n    EXPECTED_RETURN_CODE 0\n)\n\n```\n\n----------------------------------------\n\nTITLE: Follow Links Directory Walk Output\nDESCRIPTION: Output showing directory traversal with followLinks=true option, which follows symbolic links and shows cyclic references.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/testenv/baseline/TfFileUtils/non-specific/TestTfWalkDirs-log.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n('a', ['b'], ['aardvark', 'one', 'two'])\n('a/b', ['c'], ['banana', 'four', 'three'])\n('a/b/c', ['d'], ['cat', 'five', 'six'])\n('a/b/c/d', ['cycle_to_b', 'e'], ['dog', 'eight', 'seven'])\n('a/b/c/d/cycle_to_b', ['c'], ['banana', 'four', 'three'])\n('a/b/c/d/cycle_to_b/c', ['d'], ['cat', 'five', 'six'])\n('a/b/c/d/cycle_to_b/c/d', ['e'], ['dog', 'eight', 'seven'])\n('a/b/c/d/cycle_to_b/c/d/e', ['f'], ['Eskimo', 'Fortune', 'Garbage', 'elephant', 'nine', 'ten'])\n('a/b/c/d/cycle_to_b/c/d/e/f', ['g', 'h', 'i'], ['eleven', 'fish', 'twelve'])\n('a/b/c/d/cycle_to_b/c/d/e/f/g', [], ['fourteen', 'gator', 'thirteen'])\n('a/b/c/d/cycle_to_b/c/d/e/f/h', [], ['fifteen', 'hippo', 'sixteen'])\n('a/b/c/d/cycle_to_b/c/d/e/f/i', [], ['eighteen', 'igloo', 'seventeen'])\n```\n\n----------------------------------------\n\nTITLE: Initializing Spline Data with Knots and Extrapolation in Python\nDESCRIPTION: This Python snippet constructs a spline data object using the Ts.TsTest_SplineData class, fully specifying knot times, interpolation methods, values, slopes, segment lengths, and pre/post-extrapolation methods. It demonstrates the use of float.fromhex for precise floating-point initialization and involves setting both Hermite properties and explicit auto flags. Dependencies include the Ts module with appropriately defined inner classes for SplineData, Knot, and Extrapolation. Inputs are the hermite flag, extrapolation methods and two knots as structured arguments. The output is a structured SplineData object ready for evaluation or further testing. The snippet expects a USD-like library or testing context, and the specific classes must exist as described.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/tsTest_AnimXFramework.testenv/baseline/test_Baseline_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x1p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1p-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.4p+2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1p-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Plane Definition\nDESCRIPTION: Defines a rectangular plane with width 4 and length 3, including topology and point coordinates with normal vectors.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/geomUtil/testenv/testMeshGenerators/baseline/generatedMeshes_open.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nwidth = 4\n\nlength = 3\n\nTopology:\n  (rightHanded, bilinear, ([4]), ([0, 1, 2, 3]), ([]))\n\nPoints:\n  [(2, 1.5, 0), (-2, 1.5, 0), (-2, -1.5, 0), (2, -1.5, 0)]\n\nNormals:\n  [(0, 0, 1)]\n```\n\n----------------------------------------\n\nTITLE: Composing Prim /PayloadRoot/Anim in USD\nDESCRIPTION: Details the composition results for the child prim path `/PayloadRoot/Anim`. It shows the prim stack originating from `B.sdf` and lists the accumulated time offsets considering the root layer (`root.sdf`) and the payload arc (`A.sdf`, `B.sdf`) with its associated scale.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicTimeOffset.testenv/baseline/compositionResults_BasicTimeOffset.txt#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </PayloadRoot/Anim>\n\nPrim Stack:\n    B.sdf                /Model/Anim\n\nTime Offsets:\n    root.sdf             /PayloadRoot/Anim root       (offset=0.00, scale=1.00)\n    A.sdf                /Model/Anim     payload    (offset=10.00, scale=2.00)\n        B.sdf                            sublayer   (offset=20.00, scale=1.00)\n```\n\n----------------------------------------\n\nTITLE: Sampling Spline Data Points (Time-Value Pairs)\nDESCRIPTION: Provides a list of time and value pairs, likely representing sampled points evaluated along the OpenUSD Ts spline defined earlier in the file. This data covers the time range from 0.4 to 4.6, including points exactly at the knot times (1.0, 3.0, 4.0) and numerous points in between, demonstrating the spline's interpolated values. This data is useful for plotting the curve or for regression testing.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReplaceKeepRatio_TsTestBaseline.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n0.400000 1.000000\n1.000000 1.000000\n1.014925 0.997627\n1.029851 0.997234\n1.044776 0.998163\n1.059701 1.000056\n1.074627 1.002691\n1.089552 1.005921\n1.104478 1.009641\n1.119403 1.013773\n1.134328 1.018259\n1.149254 1.023052\n1.164179 1.028115\n1.179104 1.033417\n1.194030 1.038935\n1.208955 1.044646\n1.223881 1.050533\n1.238806 1.056580\n1.253731 1.062775\n1.268657 1.069105\n1.283582 1.075560\n1.298507 1.082132\n1.313433 1.088812\n1.328358 1.095593\n1.343284 1.102469\n1.358209 1.109433\n1.373134 1.116481\n1.388060 1.123608\n1.402985 1.130809\n1.417910 1.138080\n1.432836 1.145418\n1.447761 1.152819\n1.462687 1.160280\n1.477612 1.167798\n1.492537 1.175371\n1.507463 1.182995\n1.522388 1.190668\n1.537313 1.198389\n1.552239 1.206154\n1.567164 1.213963\n1.582090 1.221813\n1.597015 1.229703\n1.611940 1.237631\n1.626866 1.245594\n1.641791 1.253593\n1.656716 1.261625\n1.671642 1.269690\n1.686567 1.277785\n1.701493 1.285909\n1.716418 1.294063\n1.731343 1.302243\n1.746269 1.310450\n1.761194 1.318682\n1.776119 1.326939\n1.791045 1.335218\n1.805970 1.343521\n1.820896 1.351844\n1.835821 1.360189\n1.850746 1.368553\n1.865672 1.376937\n1.880597 1.385338\n1.895522 1.393758\n1.910448 1.402194\n1.925373 1.410646\n1.940299 1.419114\n1.955224 1.427596\n1.970149 1.436093\n1.985075 1.444602\n2.000000 1.453125\n2.014925 1.461660\n2.029851 1.470206\n2.044776 1.478763\n2.059701 1.487330\n2.074627 1.495908\n2.089552 1.504494\n2.104478 1.513088\n2.119403 1.521691\n2.134328 1.530300\n2.149254 1.538917\n2.164179 1.547539\n2.179104 1.556167\n2.194030 1.564800\n2.208955 1.573437\n2.223881 1.582078\n2.238806 1.590722\n2.253731 1.599368\n2.268657 1.608016\n2.283582 1.616665\n2.298507 1.625315\n2.313433 1.633964\n2.328358 1.642613\n2.343284 1.651260\n2.358209 1.659904\n2.373134 1.668546\n2.388060 1.677183\n2.402985 1.685816\n2.417910 1.694443\n2.432836 1.703064\n2.447761 1.711678\n2.462687 1.720283\n2.477612 1.728879\n2.492537 1.737465\n2.507463 1.746039\n2.522388 1.754600\n2.537313 1.763148\n2.552239 1.771680\n2.567164 1.780196\n2.582090 1.788693\n2.597015 1.797171\n2.611940 1.805626\n2.626866 1.814059\n2.641791 1.822466\n2.656716 1.830845\n2.671642 1.839193\n2.686567 1.847509\n2.701493 1.855788\n2.716418 1.864029\n2.731343 1.872226\n2.746269 1.880376\n2.761194 1.888474\n2.776119 1.896515\n2.791045 1.904493\n2.805970 1.912401\n2.820896 1.920230\n2.835821 1.927971\n2.850746 1.935613\n2.865672 1.943141\n2.880597 1.950540\n2.895522 1.957787\n2.910448 1.964857\n2.925373 1.971713\n2.940299 1.978307\n2.955224 1.984573\n2.970149 1.990410\n2.985075 1.995652\n3.000000 2.000000\n3.014925 2.003449\n3.029851 2.006387\n3.044776 2.008881\n3.059701 2.010985\n3.074627 2.012745\n3.089552 2.014200\n3.104478 2.015380\n3.119403 2.016314\n3.134328 2.017025\n3.149254 2.017534\n3.164179 2.017861\n3.179104 2.018020\n3.194030 2.018028\n3.208955 2.017896\n3.223881 2.017637\n3.238806 2.017262\n3.253731 2.016781\n3.268657 2.016203\n3.283582 2.015536\n3.298507 2.014789\n3.313433 2.013968\n3.328358 2.013081\n3.343284 2.012134\n3.358209 2.011134\n3.373134 2.010086\n3.388060 2.008996\n3.402985 2.007869\n3.417910 2.006710\n3.432836 2.005526\n3.447761 2.004320\n3.462687 2.003097\n3.477612 2.001863\n3.492537 2.000622\n3.507463 1.999378\n3.522388 1.998137\n3.537313 1.996903\n3.552239 1.995680\n3.567164 1.994474\n3.582090 1.993290\n3.597015 1.992131\n3.611940 1.991004\n3.626866 1.989914\n3.641791 1.988866\n3.656716 1.987866\n3.671642 1.986919\n3.686567 1.986032\n3.701493 1.985211\n3.716418 1.984464\n3.731343 1.983797\n3.746269 1.983219\n3.761194 1.982738\n3.776119 1.982363\n3.791045 1.982104\n3.805970 1.981972\n3.820896 1.981980\n3.835821 1.982139\n3.850746 1.982466\n3.865672 1.982975\n3.880597 1.983686\n3.895522 1.984620\n3.910448 1.985800\n3.925373 1.987255\n3.940299 1.989015\n3.955224 1.991119\n4.000000 2.000000\n4.600000 2.000000\n```\n\n----------------------------------------\n\nTITLE: Registering Tests with Expected Return Codes in CMake\nDESCRIPTION: Registers tests that are expected to fail with specific return codes. These tests verify that error handling works correctly by checking that they exit with the expected non-zero return codes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/CMakeLists.txt#2025-04-23_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(TfRegTest\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTf\"\n    EXPECTED_RETURN_CODE 2\n)\npxr_register_test(TfRegTest_TfScoped\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTf TfScoped no args expected\"\n    EXPECTED_RETURN_CODE 2\n)\npxr_register_test(TfRegTest_TfUndefinedTest\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTf TfUndefinedTest\"\n    EXPECTED_RETURN_CODE 3\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Registration for MaterialX Support in OpenUSD\nDESCRIPTION: This snippet demonstrates conditional test registration based on the PXR_ENABLE_MATERIALX_SUPPORT CMake variable. It includes multiple MaterialX shader generation tests with different parameters and output comparisons.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_42\n\nLANGUAGE: CMake\nCODE:\n```\nif (${PXR_ENABLE_MATERIALX_SUPPORT})\npxr_register_test(testHdStMaterialXShaderGen_SSdefault\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStMaterialXShaderGen --filename standard_surface_default.mtlx\"\n    EXPECTED_RETURN_CODE 0\n    STDOUT_REDIRECT shadergen_SSdefault.out\n    DIFF_COMPARE shadergen_SSdefault.out\n    TESTENV testHdStMaterialXShaderGen\n)\n# ... [additional MaterialX tests] ...\nendif()\n```\n\n----------------------------------------\n\nTITLE: Python Spline Data Configuration\nDESCRIPTION: Detailed Python configuration for spline test data including extrapolation methods, knot points with precise hexadecimal values\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/MoveStartKeepStart_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.999999999999ap-2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.9998d045fe11p-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.9996744b2b777p-3'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Configuring the usdRiPxrImaging Library Build in CMake\nDESCRIPTION: This CMake script sets up the build process for the `usdRiPxrImaging` library. It defines the library's prefix (`pxr/usdImaging`) and package name (`usdRiPxrImaging`) using `set`. The `pxr_library` function is then called to specify dependencies (LIBRARIES like `gf`, `tf`, `usd`, `hd`, `TBB`, etc.), include directories (INCLUDE_DIRS like TBB), public/private classes and headers, and resource files (RESOURCE_FILES like `plugInfo.json`) required for compiling and linking the library.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdRiPxrImaging/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usdImaging)\nset(PXR_PACKAGE usdRiPxrImaging)\n\npxr_library(usdRiPxrImaging\n    LIBRARIES\n        gf\n        tf\n        plug\n        trace\n        vt\n        work\n        hd\n        pxOsd\n        sdf\n        usd\n        usdGeom\n        usdLux\n        usdShade\n        usdImaging\n        usdVol\n        ar\n        ${TBB_tbb_LIBRARY}\n\n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n\n    PUBLIC_CLASSES\n        pxrAovLightAdapter\n        pxrCameraAPIAdapter\n        pxrDisplayFilterAdapter\n        pxrIntegratorAdapter\n        pxrSampleFilterAdapter\n        tokens\n\n    PRIVATE_CLASSES\n        pxrRenderTerminalHelper\n\n    PRIVATE_HEADERS\n        dataSourcePxrRenderTerminalPrims.h\n\n    PUBLIC_HEADERS\n        api.h\n        version.h\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: IndirectDrawBatchMigrationTest Output Log\nDESCRIPTION: Output from IndirectDrawBatchMigrationTest showing metrics through multiple rendering stages including flat and smooth drawing modes. Tracks batch rebuilding, buffer migrations, and draw item fetching.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStDrawBatching/baseline/testHdStDrawBatching-Run1-stdout.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n==== IndirectDrawBatchMigrationTest:\n----- begin -----\nnonUniformSize, 0\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 0\nsingleBufferSize, 0\ntextureMemory, 0\ngarbageCollected = 0\ndrawCalls = 0\nrebuildBatches = 0\nbufferArrayRangeMigrated = 0\n----- draw flat -----\ndrawIndirect, 240\ndrawIndirectCull, 240\ndrawIndirectResult, 4\nnonUniformSize, 960\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 1760\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 480\ngarbageCollected = 0\ndrawCalls = 1\ndrawBatches = 1\nitemsDrawn = 4\ndrawItemsFetched = 1\nrebuildBatches = 1\nbufferArrayRangeMigrated = 0\n----- draw smooth -----\ndrawIndirect, 480\ndrawIndirectCull, 480\ndrawIndirectResult, 12\nnonUniformSize, 1312\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 1856\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 736\ngarbageCollected = 1\ndrawCalls = 2\ndrawBatches = 2\nitemsDrawn = 4\ndrawItemsFetched = 2\nrebuildBatches = 2\nbufferArrayRangeMigrated = 1\n----- draw flat -----\ndrawIndirect, 720\ndrawIndirectCull, 720\ndrawIndirectResult, 20\nnonUniformSize, 1312\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 1856\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 736\ngarbageCollected = 1\ndrawCalls = 2\ndrawBatches = 2\nitemsDrawn = 4\ndrawItemsFetched = 3\nrebuildBatches = 3\nbufferArrayRangeMigrated = 1\n----- draw smooth -----\ndrawIndirect, 480\ndrawIndirectCull, 480\ndrawIndirectResult, 20\nnonUniformSize, 1312\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 1856\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 736\ngarbageCollected = 1\ndrawCalls = 2\ndrawBatches = 2\nitemsDrawn = 4\ndrawItemsFetched = 3\nrebuildBatches = 3\nbufferArrayRangeMigrated = 1\n```\n\n----------------------------------------\n\nTITLE: Configuring usdLux Library Build\nDESCRIPTION: Defines the core usdLux library build configuration including dependencies, public/private classes, and required files. Sets up the library with necessary OpenUSD components like tf, vt, sdf, and other dependencies.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdLux/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usdLux)\n\npxr_library(usdLux\n    INCLUDE_SCHEMA_FILES\n\n    LIBRARIES\n        tf\n        vt\n        sdf\n        sdr\n        usd\n        usdGeom\n        usdShade\n\n    PUBLIC_CLASSES\n        blackbody\n\n    PUBLIC_HEADERS\n        api.h\n\n    PRIVATE_CLASSES\n        discoveryPlugin\n        lightDefParser\n\n    PYMODULE_FILES \n        __init__.py\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Load Only Test Configuration\nDESCRIPTION: Test configuration for verifying usdcat's load-only functionality without writing output.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdcat/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testLoadOnly\n    DEST testUsdCatLoadOnly\n)\n\npxr_register_test(testUsdCatLoadOnly\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdcat --loadOnly input.usda\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Registering usdview Camera Mask Mode Test (Embree)\nDESCRIPTION: Conditionally registers a CMake test named `testUsdviewCameraMaskMode_Embree` only if Embree is found (`EMBREE_FOUND`) and the Embree plugin is being built (`PXR_BUILD_EMBREE_PLUGIN`). This test runs `testusdview` with the Embree renderer (`--renderer Embree`), executing the same Python script `testUsdviewCameraMaskMode.py` as the Storm variant but comparing against Embree-specific images (`none_embree.png`, etc.). It uses the same failure thresholds and expected return code, and inherits the test environment from `testUsdviewCameraMaskMode`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif (EMBREE_FOUND AND ${PXR_BUILD_EMBREE_PLUGIN})\n    pxr_register_test(testUsdviewCameraMaskMode_Embree\n        PYTHON\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --camera /camera --renderer Embree --testScript testUsdviewCameraMaskMode.py test.usda\"\n        IMAGE_DIFF_COMPARE\n            none_embree.png\n            outline_embree.png\n            partial_embree.png\n            full_embree.png\n        FAIL 0.05\n        FAIL_PERCENT 0.03\n        PERCEPTUAL\n        EXPECTED_RETURN_CODE 0\n        TESTENV testUsdviewCameraMaskMode\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimWithReferencesInVariants/A\nDESCRIPTION: Displays the composition results for the child prim path </PrimWithReferencesInVariants/A>. The prim stack shows its definition within the '{v=ref}' variant in root.sdf, potentially referencing the 'Ref' prim within the same variant.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_29\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimWithReferencesInVariants/A>\n\nPrim Stack:\n    root.sdf             /PrimWithReferencesInVariants{v=ref}A\n    root.sdf             /PrimWithReferencesInVariants{v=ref}Ref\n```\n\n----------------------------------------\n\nTITLE: Defining a Looping Bezier Spline (USD Spline Format)\nDESCRIPTION: Defines a Bezier spline named 'SimpleInnerLoop' with double precision values and looping behavior. It has five knots defined between times 112 and 181. A 'Loop' section specifies that the segment between time 137 and 155 should loop once before the main segment (pre) and once after (post), applying a value offset of 20.2 for each loop iteration. Extrapolation outside the defined and looped range is Held. This definition is used for tests involving looping behavior, such as 'Test Case 10: Sample([112, 181], 7.24638, 13.089, 1)'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nSpline: SimpleInnerLoop\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nLoop:\n  start 137, end 155, numPreLoops 1, numPostLoops 1, valueOffset 20.2\nKnot:\n  value type double\n  curve type Bezier\n  time 112\n  value 8.8\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0.9\n  post-tan slope 15\nKnot:\n  value type double\n  curve type Bezier\n  time 137\n  value 0\n  next interp Curve\n  pre-tan width 1.3\n  pre-tan slope -5.3\n  post-tan width 1.8\n  post-tan slope -5.3\nKnot:\n  value type double\n  curve type Bezier\n  time 145\n  value 8.5\n  next interp Curve\n  pre-tan width 1\n  pre-tan slope 12.5\n  post-tan width 1.2\n  post-tan slope 12.5\nKnot:\n  value type double\n  curve type Bezier\n  time 155\n  value 20.2\n  next interp Curve\n  pre-tan width 0.7\n  pre-tan slope -15.7\n  post-tan width 0.8\n  post-tan slope -15.7\nKnot:\n  value type double\n  curve type Bezier\n  time 181\n  value 38.2\n  next interp Curve\n  pre-tan width 2\n  pre-tan slope -9\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Building C++ Tests for USD Validation Components\nDESCRIPTION: Configures C++ test executables for core validators, validator, validation context, and validation registry. Each test depends on the relevant USD libraries.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/usdValidation/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npxr_build_test(testUsdCoreValidators\n    LIBRARIES\n        usd\n        usdValidation\n\n    CPPFILES\n        testenv/testUsdCoreValidators.cpp\n)\n\npxr_build_test(testUsdValidator\n    LIBRARIES\n        tf\n        usd\n        usdValidation\n\n    CPPFILES\n        testenv/testUsdValidator.cpp\n)\n\npxr_build_test(testUsdValidationContext\n    LIBRARIES\n        tf\n        usd\n        usdValidation\n\n    CPPFILES\n        testenv/testUsdValidationContext.cpp\n)\n\npxr_build_test(testUsdValidationRegistry\n    LIBRARIES\n        tf\n        usd\n        usdValidation\n\n    CPPFILES\n        testenv/testUsdValidationRegistry.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a USD Sublayer Arc\nDESCRIPTION: This line specifies a sublayer relationship in a USD ASCII file. It indicates that the contents of `./sublayer.usda` should be layered beneath the defining layer (`anon.usda`), contributing its opinions according to composition rules. The `[001]` likely indicates an ordering or identifier for the sublayer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUtils/testenv/testUsdUtilsDependencyExtractor/baseline/anon.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nanon.usda sublayers[001]: ./sublayer.usda\n```\n\n----------------------------------------\n\nTITLE: Displaying Time Offset Configuration for SS3\nDESCRIPTION: Output showing the time offset and scale configurations for /SS3 prim, detailing how each layer and reference contributes to the overall timing behavior.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer3.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nTime Offsets:\n    session_24fps.sdf    /SS3            root       (offset=0.00, scale=1.00)\n        sess_s.sdf                       sublayer   (offset=10.00, scale=2.00)\n        sess_s_48tcps.sdf                sublayer   (offset=10.00, scale=1.00)\n        sess_s_24tcps_12fps.sdf          sublayer   (offset=10.00, scale=2.00)\n        sess_s_12fps.sdf                 sublayer   (offset=10.00, scale=4.00)\n        root_12fps.sdf                   sublayer   (offset=0.00, scale=2.00)\n        s.sdf                            sublayer   (offset=20.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=40.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=40.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=40.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=40.00, scale=8.00)\n        s_48tcps.sdf                     sublayer   (offset=20.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=8.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=20.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=40.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=40.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=40.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=40.00, scale=8.00)\n        s_12fps.sdf                      sublayer   (offset=20.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=60.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=60.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=60.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=60.00, scale=8.00)\n    ref.sdf              /Ref            reference  (offset=80.00, scale=8.00)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.50)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=2.00)\n    ref_48tcps.sdf       /Ref            reference  (offset=80.00, scale=4.00)\n        ref_s.sdf                        sublayer   (offset=0.00, scale=2.00)\n        ref_s_24tcps_12fps.sdf           sublayer   (offset=0.00, scale=2.00)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=4.00)\n    ref_24tcps_12fps.sdf /Ref            reference  (offset=80.00, scale=8.00)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.50)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=2.00)\n    ref_12fps.sdf        /Ref            reference  (offset=80.00, scale=16.00)\n        ref_s.sdf                        sublayer   (offset=0.00, scale=0.50)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.25)\n        ref_s_24tcps_12fps.sdf           sublayer   (offset=0.00, scale=0.50)\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for /Model/Scope/RefFromHighScopeStuff\nDESCRIPTION: Details the composition for the prim path '/Model/Scope/RefFromHighScopeStuff'. The prim stack shows its origin is '/RefFromHighScope/RefFromHighScopeStuff' within the 'ref.sdf' layer, introduced likely via a reference within the '/Model/Scope' definition or its variant.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsInVariants.testenv/baseline/compositionResults_TrickyInheritsInVariants.txt#2025-04-23_snippet_5\n\nLANGUAGE: usd-composition-log\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Model/Scope/RefFromHighScopeStuff>\n\nPrim Stack:\n    ref.sdf              /RefFromHighScope/RefFromHighScopeStuff\n```\n\n----------------------------------------\n\nTITLE: Defining Spline Settings and Knots in Plain Text Format\nDESCRIPTION: A text-based representation of a spline curve definition that specifies the spline type (non-Hermite), extrapolation methods (Held for both pre and post), and knot points with their respective values, slopes, and other properties.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/tsTest_TsFramework.testenv/baseline/test_BaselineParamsFail_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 1.000000, preLen 0.000000, postLen 0.500000, auto false / false\n  5.000000: 2.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.500000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Configuring sdrGlslfx Plugin Build - CMake\nDESCRIPTION: This CMake snippet defines and configures the sdrGlslfx plugin by specifying its dependencies, internal components, Python module inclusion, and relevant resource and documentation files. It utilizes the custom pxr_plugin macro, requiring the AR, SDR, and HIO libraries, and declares a private class for internal use. The snippet ensures the plugin includes __init__.py for Python integration and plugInfo.json for resource metadata, along with additional documentation (overview.dox). Prerequisites include CMake and access to the referenced libraries and files; the snippet expects all referenced files and paths to exist within the project structure.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/plugin/sdrGlslfx/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usdImaging)\nset(PXR_PACKAGE sdrGlslfx)\n\npxr_plugin(sdrGlslfx\n    LIBRARIES\n        ar\n        sdr\n        hio\n\n    PRIVATE_CLASSES\n        parserPlugin\n\n    PYMODULE_FILES\n        __init__.py\n\n    RESOURCE_FILES\n        plugInfo.json\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Doxygen Integration\nDESCRIPTION: Example of setting environment variables for integrating Doxygen API documentation with Sphinx for USD documentation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsetenv USD_DOXYGEN_TAG_FILE USD_INSTALL_ROOT/docs/USD.tag\nsetenv USD_DOXYGEN_PREFIX file://USD_INSTALL_ROOT/docs/doxy_html\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Curve with LoopRepeat Extrapolation Mode\nDESCRIPTION: Configuration of a Bezier curve with LoopRepeat extrapolation mode and multiple knot points. Sets up a curve that will repeat when sampled beyond the defined time range.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_60\n\nLANGUAGE: plaintext\nCODE:\n```\nSpline: ExtrapLoopRepeat\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap LoopRepeat\n  post extrap LoopRepeat\nKnot:\n  value type double\n  curve type Bezier\n  time 100\n  value 10\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 3\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 105\n  value 20\n  next interp Linear\n  pre-tan width 3\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 110\n  value 15\n  next interp Held\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Registering CMake Test for Pcp ErrorInvalidAuthoredRelocates\nDESCRIPTION: Defines a CMake test named `testPcpMuseum_ErrorInvalidAuthoredRelocates` using `pxr_register_test`. It executes `testPcpCompositionResults` with the `--usd` flag and an `--errorFile` argument on the `ErrorInvalidAuthoredRelocates/root.sdf` file. This test case specifically checks for errors related to invalid authored relocations during composition. Standard output and the error file are compared against baseline files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/CMakeLists.txt#2025-04-23_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testPcpMuseum_ErrorInvalidAuthoredRelocates\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd --errorFile compositionErrors_ErrorInvalidAuthoredRelocates.txt ErrorInvalidAuthoredRelocates/root.sdf\" \n    STDOUT_REDIRECT compositionResults_ErrorInvalidAuthoredRelocates.txt\n    DIFF_COMPARE compositionResults_ErrorInvalidAuthoredRelocates.txt compositionErrors_ErrorInvalidAuthoredRelocates.txt\n)\n```\n\n----------------------------------------\n\nTITLE: Composing /VariantAtRelocateSource/Child with Variants in USD\nDESCRIPTION: Details the composition of </VariantAtRelocateSource/Child>, involving layers from `root.sdf` and `ref.sdf`. It highlights the active variant selection `{child = a}` and notes 'Child2' as a prohibited child name.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorOpinionAtRelocationSource.testenv/baseline/compositionResults_ErrorOpinionAtRelocationSource.txt#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </VariantAtRelocateSource/Child>\n\nPrim Stack:\n    root.sdf             /VariantAtRelocateSource/Child\n    root.sdf             /VariantAtRelocateSource/Child{child=a}\n    ref.sdf              /Ref/Child\n\nVariant Selections:\n    {child = a}\n\nProhibited child names:\n     ['Child2']\n```\n\n----------------------------------------\n\nTITLE: Displaying Complex USD Composition for /Character\nDESCRIPTION: Shows a complex prim stack for the /Character prim that incorporates multiple composition arcs including inheritance, references, and variant selections across multiple layers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SubrootReferenceAndVariants2.testenv/baseline/compositionResults_SubrootReferenceAndVariants2.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </Character>\n\nPrim Stack:\n    root.sdf             /Character\n    root.sdf             /Inherit/CHARACTER\n    CharGroup.sdf        /CHARGROUP/CHARACTER\n    CharGroup.sdf        /CHARGROUP{v=x}CHARACTER\n    CharGroup.sdf        /Ref/CHARACTER\n    CharGroup.sdf        /Inherit/CHARACTER\n```\n\n----------------------------------------\n\nTITLE: Class_FingerRig Composition Results\nDESCRIPTION: Composition results for the _Class_FingerRig showing property stacks and inheritance\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantOverrideOfLocalClass.testenv/baseline/compositionResults_TrickyVariantOverrideOfLocalClass.txt#2025-04-23_snippet_3\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /HandRig/_Class_FingerRig\n    root.sdf             /HandRig{FingerRigArmature=off}_Class_FingerRig\n\nProperty names:\n     ['armature_enabled']\n\nProperty stacks:\n/HandRig/_Class_FingerRig.armature_enabled:\n    root.sdf             /HandRig{FingerRigArmature=off}_Class_FingerRig.armature_enabled\n```\n\n----------------------------------------\n\nTITLE: Conditionally Building the testHdEmbree Test (CMake)\nDESCRIPTION: This CMake code conditionally defines a test target named `testHdEmbree` using the `pxr_build_test` macro. The test is only configured if either the X11 library is found (`X11_FOUND`) or the build environment is Apple (`APPLE`). It links the test executable against the `hdEmbree` plugin library itself, as well as `garch`, `arch`, and `hio` libraries, and compiles the specified C++ source file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/plugin/hdEmbree/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (X11_FOUND OR APPLE)\npxr_build_test(testHdEmbree\n    LIBRARIES\n        hdEmbree\n        garch\n        arch\n        hio\n    CPPFILES\n        testenv/testHdEmbree.cpp\n)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Composing USD Layer Stack for /S2\nDESCRIPTION: Shows the prim stack and time offset configurations for /S2 prim. Includes root layer session_24fps.sdf and multiple sublayers with different offset and scale values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer2.txt#2025-04-23_snippet_3\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    s_48tcps.sdf         /S2\n\nTime Offsets:\n    session_24fps.sdf    /S2             root       (offset=0.00, scale=1.00)\n        session_24fps.sdf                sublayer   (offset=0.00, scale=2.00)\n        sess_s.sdf                       sublayer   (offset=20.00, scale=4.00)\n        [... additional sublayers ...]\n```\n\n----------------------------------------\n\nTITLE: Initializing TsTest_SplineData Object in Python\nDESCRIPTION: This snippet creates a TsTest_SplineData object with specific parameters for interpolation, extrapolation, and knot points. It uses hexadecimal representations for floating-point values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/NoopLimitOpposite_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.999999999999ap-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.999999999999ap-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </SymRig/Leg_bone/Knee_bone/Ankle_bone> in USD\nDESCRIPTION: Shows the composition results for the leaf prim path </SymRig/Leg_bone/Knee_bone/Ankle_bone> from 'root.sdf'. It lists the contributing prim stack.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyMultipleRelocations4.testenv/baseline/compositionResults_TrickyMultipleRelocations4.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </SymRig/Leg_bone/Knee_bone/Ankle_bone>\n\nPrim Stack:\n    root.sdf             /SymRig/Leg_bone/Knee_bone/Ankle_bone\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for Prim /Root (Plaintext)\nDESCRIPTION: This section presents the composition results for the root prim (`/Root`) of the USD stage. The Prim Stack lists multiple layers contributing directly to the root, starting with `session_48tcps.sdf`. The Time Offsets section outlines the complete time mapping hierarchy for the stage, originating from the root layer (`session_48tcps.sdf`) and detailing the offsets and scales applied by each subsequent sublayer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer1.txt#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </Root>\n\nPrim Stack:\n    session_48tcps.sdf   /Root\n    sess_s.sdf           /Root\n    sess_s_48tcps.sdf    /Root\n    sess_s_24tcps_12fps.sdf /Root\n    sess_s_12fps.sdf     /Root\n    root_24tcps_12fps.sdf /Root\n\nTime Offsets:\n    session_48tcps.sdf   /Root           root       (offset=0.00, scale=1.00)\n        sess_s.sdf                       sublayer   (offset=10.00, scale=4.00)\n        sess_s_48tcps.sdf                sublayer   (offset=10.00, scale=2.00)\n        sess_s_24tcps_12fps.sdf          sublayer   (offset=10.00, scale=4.00)\n        sess_s_12fps.sdf                 sublayer   (offset=10.00, scale=8.00)\n        root_24tcps_12fps.sdf            sublayer   (offset=0.00, scale=2.00)\n        s.sdf                            sublayer   (offset=20.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=60.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=60.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=60.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=60.00, scale=16.00)\n        s_48tcps.sdf                     sublayer   (offset=20.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=40.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=40.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=40.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=40.00, scale=16.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=20.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=60.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=60.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=60.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=60.00, scale=16.00)\n        s_12fps.sdf                      sublayer   (offset=20.00, scale=8.00)\n        ss.sdf                           sublayer   (offset=100.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=100.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=100.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=100.00, scale=16.00)\n```\n\n----------------------------------------\n\nTITLE: Registering usdview GPU Skinning Test\nDESCRIPTION: Registers a CMake test named `testUsdviewGPUSkinning`. This test executes `testusdview` with the Python script `testUsdviewSkinning.py` and `arm.usda`. It specifically tests skeletal skinning computed on the GPU by setting the environment variable `USDSKELIMAGING_FORCE_CPU_COMPUTE=0`. Perceptual image difference comparison is performed against the same set of images as the CPU test, using an absolute failure threshold of 0.05 and expecting a return code of 0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdviewGPUSkinning\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewSkinning.py arm.usda\"\n    IMAGE_DIFF_COMPARE\n        change_complexity.png\n        vis_frame_4.png\n        invis_frame_4.png\n        vis_frame_8.png\n        pre_skinned_prim_resync_frame_2.png\n        post_skinned_prim_resync_frame_2.png\n        pre_skel_resync_frame_6.png\n        post_skel_resync_frame_6.png\n    FAIL 0.05\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    ENV\n        USDSKELIMAGING_FORCE_CPU_COMPUTE=0\n)\n```\n\n----------------------------------------\n\nTITLE: USDA Scene Definition with Precession Animation\nDESCRIPTION: USDA representation of the spinning top scene with precession, including time samples for rotation and translation transforms.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_xforms.rst#2025-04-23_snippet_9\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    \"Step 5: Adding precession and offset\"\n    endTimeCode = 192\n    startTimeCode = 1\n    upAxis = \"Z\"\n)\n\ndef Xform \"Top\" (\n    prepend references = @./top.geom.usd@\n)\n{\n    float xformOp:rotateX:tilt = 12\n    float xformOp:rotateZ:precess.timeSamples = {\n        1: 0,\n        192: 360,\n    }\n    float xformOp:rotateZ:spin.timeSamples = {\n        1: 0,\n        192: 1440,\n    }\n    double3 xformOp:translate:offset = (0, 0.1, 0)\n    uniform token[] xformOpOrder = [\"xformOp:rotateZ:precess\", \"xformOp:translate:offset\", \"xformOp:rotateX:tilt\", \"xformOp:rotateZ:spin\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Registering USD Tree Test in CMake\nDESCRIPTION: Installs test directory and registers a test for the basic USD Tree functionality.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdtree/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdTree\n    DEST testUsdTree\n)\n\npxr_register_test(testUsdTree\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdtree --flatten input.usda\"\n    STDOUT_REDIRECT output.txt\n    DIFF_COMPARE output.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring HgiMetal Library Build with CMake\nDESCRIPTION: Configures the build settings for the HgiMetal library component of OpenUSD. Sets up Metal framework dependencies, defines source files, headers, and resource files. Includes conditional compilation based on platform-specific requirements and GPU support flags.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hgiMetal/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE hgiMetal)\n\nif (NOT ${PXR_BUILD_GPU_SUPPORT} OR NOT ${PXR_ENABLE_METAL_SUPPORT})\n    message(STATUS\n        \"Skipping ${PXR_PACKAGE} because PXR_BUILD_GPU_SUPPORT or PXR_ENABLE_METAL_SUPPORT is OFF\")\n    return()\nendif()\n\nif (PXR_APPLE_EMBEDDED)\n    set(APPLE_UI_FRAMEWORK \"UIKit\")\nelse()\n    set(APPLE_UI_FRAMEWORK \"AppKit\")\nendif()\n\npxr_library(hgiMetal\n    LIBRARIES\n        arch\n        hgi\n        tf\n        trace\n        \"-framework Foundation\"\n        \"-framework Metal\"\n        \"-framework ${APPLE_UI_FRAMEWORK}\"\n\n    PUBLIC_HEADERS\n        api.h\n        blitCmds.h\n        buffer.h\n        capabilities.h\n        computeCmds.h\n        computePipeline.h\n        diagnostic.h\n        graphicsCmds.h\n        graphicsPipeline.h\n        hgi.h\n        indirectCommandEncoder.h\n        resourceBindings.h\n        sampler.h\n        shaderFunction.h\n        shaderProgram.h\n        stepFunctions.h\n        texture.h\n\n    PRIVATE_HEADERS\n        conversions.h\n        shaderGenerator.h\n        shaderSection.h\n\n    CPPFILES\n        blitCmds.mm\n        buffer.mm\n        capabilities.mm\n        computePipeline.mm\n        computeCmds.mm\n        conversions.mm\n        diagnostic.mm\n        graphicsCmds.mm\n        graphicsPipeline.mm\n        hgi.mm\n        indirectCommandEncoder.mm\n        resourceBindings.mm\n        sampler.mm\n        shaderFunction.mm\n        shaderGenerator.mm\n        shaderProgram.mm\n        shaderSection.mm\n        stepFunctions.mm\n        texture.mm\n\n    RESOURCE_FILES\n        plugInfo.json\n\n    DISABLE_PRECOMPILED_HEADERS\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring usdAppUtils Build and Checking GPU Support in CMake\nDESCRIPTION: Sets CMake variables `PXR_PREFIX` and `PXR_PACKAGE` for the `usdAppUtils` library. It checks the `PXR_BUILD_GPU_SUPPORT` variable; if this is false (OFF), the script prints a status message and exits early using `return()`, skipping the build of this package as it requires GPU support.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdAppUtils/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usdImaging)\nset(PXR_PACKAGE usdAppUtils)\n\nif (NOT ${PXR_BUILD_GPU_SUPPORT})\n    message(STATUS\n        \"Skipping ${PXR_PACKAGE} because PXR_BUILD_GPU_SUPPORT is OFF\")\n    return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Composing Prim /PayloadMultiRef/Frame in USD\nDESCRIPTION: Details composition for `/PayloadMultiRef/Frame`. The prim stack originates from `B.sdf`. Time offsets are accumulated from the root (`root.sdf`), the payload arc (`ref.sdf`/`ref_sub.sdf` with scale), and the reference arc (`B.sdf`).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicTimeOffset.testenv/baseline/compositionResults_BasicTimeOffset.txt#2025-04-23_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </PayloadMultiRef/Frame>\n\nPrim Stack:\n    B.sdf                /Model/Frame\n\nTime Offsets:\n    root.sdf             /PayloadMultiRef/Frame root       (offset=0.00, scale=1.00)\n    ref.sdf              /Ref2/Frame     payload    (offset=10.00, scale=2.00)\n        ref_sub.sdf                      sublayer   (offset=20.00, scale=1.00)\n    B.sdf                /Model/Frame    reference  (offset=50.00, scale=2.00)\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for /Permissions\nDESCRIPTION: Displays the composition results for the prim path `/Permissions`. It shows the prim stack derived from `root.sdf`, `ref.sdf`, and `ref2.sdf`, lists child prim names, property names, property stacks, resolved relationship targets, resolved attribute connections, and explicitly deleted target paths for relationships and attributes based on permission rules.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyListEditedTargetPaths.testenv/baseline/compositionResults_TrickyListEditedTargetPaths.txt#2025-04-23_snippet_2\n\nLANGUAGE: usd\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Permissions>\n\nPrim Stack:\n    root.sdf             /Permissions\n    ref.sdf              /PermissionsRef_1\n    ref2.sdf             /PermissionsRef_2\n\nChild names:\n     ['PrivateChild', 'PublicChild']\n\nProperty names:\n     ['PrivateProp', 'relToPrivateProp', 'relToPrivateProp2', 'relToPrivatePrim', 'relToPrivatePrim2', 'attrToPrivateProp', 'attrToPrivateProp2', 'PublicProp']\n\nProperty stacks:\n/Permissions.PrivateProp:\n    ref2.sdf             /PermissionsRef_2.PrivateProp\n/Permissions.PublicProp:\n    root.sdf             /Permissions.PublicProp\n/Permissions.attrToPrivateProp:\n    root.sdf             /Permissions.attrToPrivateProp\n    ref.sdf              /PermissionsRef_1.attrToPrivateProp\n/Permissions.attrToPrivateProp2:\n    root.sdf             /Permissions.attrToPrivateProp2\n    ref.sdf              /PermissionsRef_1.attrToPrivateProp2\n/Permissions.relToPrivatePrim:\n    root.sdf             /Permissions.relToPrivatePrim\n    ref.sdf              /PermissionsRef_1.relToPrivatePrim\n/Permissions.relToPrivatePrim2:\n    root.sdf             /Permissions.relToPrivatePrim2\n    ref.sdf              /PermissionsRef_1.relToPrivatePrim2\n/Permissions.relToPrivateProp:\n    root.sdf             /Permissions.relToPrivateProp\n    ref.sdf              /PermissionsRef_1.relToPrivateProp\n/Permissions.relToPrivateProp2:\n    root.sdf             /Permissions.relToPrivateProp2\n    ref.sdf              /PermissionsRef_1.relToPrivateProp2\n\nRelationship targets:\n/Permissions.relToPrivatePrim2:\n    /Permissions/PublicChild\n/Permissions.relToPrivateProp2:\n    /Permissions.PublicProp\n\nAttribute connections:\n/Permissions.attrToPrivateProp2:\n    /Permissions.PublicProp\n\nDeleted target paths:\n/Permissions.attrToPrivateProp:\n    /Permissions.PrivateProp\n/Permissions.relToPrivatePrim:\n    /Permissions/PrivateChild\n/Permissions.relToPrivateProp:\n    /Permissions.PrivateProp\n```\n\n----------------------------------------\n\nTITLE: Registering OpenUSD Sdf Tests with CMake\nDESCRIPTION: This snippet demonstrates the pattern used to register multiple test cases for the OpenUSD Sdf module. Each test is registered using the pxr_register_test command, specifying the test name, optional PYTHON flag for Python tests, and the command to execute the test using the installed test executable.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/sdf/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testSdfLayerMuting\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfLayerMuting\"\n)\n\npxr_register_test(testSdfListOp\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfListOp\"\n)\n\npxr_register_test(testSdfMetaDataPlugInfo\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfMetaDataPlugInfo\"\n)\n\npxr_register_test(testSdfPathExpression\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfPathExpression\"\n)\n\npxr_register_test(testSdfPathExpression_Cpp\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfPathExpression_Cpp\"\n)\n\npxr_register_test(testSdfPathExpressionArray\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfPathExpressionArray\"\n)\n\npxr_register_test(testSdfParsing\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfParsing\"\n)\n\npxr_register_test(testSdfPath\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfPath\"\n)\n\npxr_register_test(testSdfPath2\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfPath2\"\n)\npxr_register_test(testSdfPath2Construct\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfPath2Construct\"\n)\n\npxr_register_test(testSdfPathParser\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfPathParser\"\n)\n\npxr_register_test(testSdfPathTable\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfPathTable\"\n)\n\npxr_register_test(testSdfPathThreading\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfPathThreading\"\n)\n\npxr_register_test(testSdfPredicateExpression_Cpp\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfPredicateExpression_Cpp\"\n)\n\npxr_register_test(testSdfTextFileFormatParsing\n   COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfTextFileFormatParsing\"\n)\n\npxr_register_test(testSdfPayload\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfPayload\"\n)\npxr_register_test(testSdfPrim\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfPrim\"\n)\npxr_register_test(testSdfReference\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfReference\"\n)\npxr_register_test(testSdfRelocates\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfRelocates\"\n)\npxr_register_test(testSdfSpecHash\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfSpecHash\"\n)\npxr_register_test(testSdfTimeCode\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfTimeCode\"\n)\npxr_register_test(testSdfTypes\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfTypes\"\n)\npxr_register_test(testSdfVariableExpression\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfVariableExpression\"\n)\npxr_register_test(testSdfVariants\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdfVariants\"\n)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Catmull-Clark Subdivision on Polygons with Right-Handed Orientation\nDESCRIPTION: Results from applying Catmull-Clark subdivision on a polygon mesh with right-handed orientation at subdivision levels 0 and 1. The output shows the polygons' index results and the resulting vertex position coordinates in 3D space.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStSubdivisionOsd3/baseline/testHdStSubdivisionOsd3-Run1-stdout.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nTest polygons\nScheme catmullClark\nOrientation rightHanded\nGPU subdivision = 0\nIndex Results\n[8, 19, 16, 21, 9, 20, 16, 19, 10, 21, 16, 20, 8, 21, 17, 24, 21, 10, 22, 17, 17, 22, 11, 23, 24, 17, 23, 12, 12, 23, 18, 28, 11, 25, 18, 23, 13, 26, 18, 25, 14, 27, 18, 26, 15, 28, 18, 27]\nResults\n[(1, 1, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (3, 0, 0), (3, 0.5, 0), (3, 1, 0), (1, 0.875, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (3, 0, 0), (3, 0.5, 0), (3, 1, 0), (0.6666667, 0.33333334, 0), (1.5, 0.5, 0), (2.6, 0.5, 0), (0.5, 0.5, 0), (0.5, 0, 0), (1.0416667, 0.45833334, 0), (1.5, 0, 0), (2.025, 0.5, 0), (1.5, 1, 0), (2.5, 0, 0), (3, 0.25, 0), (3, 0.75, 0), (2.5, 1, 0)]\n```\n\n----------------------------------------\n\nTITLE: Initializing TsRegressionPreventer Settings in Python\nDESCRIPTION: This snippet defines the settings for a TsRegressionPreventer, including adjustment flags and width values for pre and post segments.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PostRegressiveContain_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: true\n  havePreSegment: true\n  preActiveAdjusted: true\n  preActiveAdjustedWidth: 1.000000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.800000\n  havePostSegment: false\n  postActiveAdjusted: false\n  postActiveAdjustedWidth: 0.000000\n  postOppositeAdjusted: false\n  postOppositeAdjustedWidth: 0.000000\n```\n\n----------------------------------------\n\nTITLE: Ignoring Composition Arcs in Clip Files with UsdStage in C++\nDESCRIPTION: Highlights a performance and scalability characteristic of `UsdStage` in C++. The stage ignores composition arcs (like references, inherits) found within USD files designated as clips, meaning clips primarily contain direct opinions on attributes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_53\n\nLANGUAGE: cpp\nCODE:\n```\nUsdStage\n```\n\n----------------------------------------\n\nTITLE: Visualizing USD Layer Stack with Time Offsets and Scales\nDESCRIPTION: This shows the layer composition structure in OpenUSD with time offsets and scales. It details how multiple SDF (Scene Description Format) files are layered together with specific offset and scale parameters to control timing.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer1.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nroot_24tcps_12fps.sdf            sublayer   (offset=0.00, scale=2.00)\n        s.sdf                            sublayer   (offset=20.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=60.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=60.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=60.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=60.00, scale=16.00)\n        s_48tcps.sdf                     sublayer   (offset=20.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=40.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=40.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=40.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=40.00, scale=16.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=20.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=60.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=60.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=60.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=60.00, scale=16.00)\n        s_12fps.sdf                      sublayer   (offset=20.00, scale=8.00)\n        ss.sdf                           sublayer   (offset=100.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=100.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=100.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=100.00, scale=16.00)\n    ref.sdf              /Ref            reference  (offset=100.00, scale=16.00)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.50)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=2.00)\n    ref_48tcps.sdf       /Ref            reference  (offset=100.00, scale=8.00)\n        ref_s.sdf                        sublayer   (offset=0.00, scale=2.00)\n        ref_s_24tcps_12fps.sdf           sublayer   (offset=0.00, scale=2.00)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=4.00)\n    ref_24tcps_12fps.sdf /Ref            reference  (offset=100.00, scale=16.00)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.50)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=2.00)\n    ref_12fps.sdf        /Ref            reference  (offset=100.00, scale=32.00)\n        ref_s.sdf                        sublayer   (offset=0.00, scale=0.50)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.25)\n        ref_s_24tcps_12fps.sdf           sublayer   (offset=0.00, scale=0.50)\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </SymRig/Leg_bone> in USD\nDESCRIPTION: Shows the composition results for the prim path </SymRig/Leg_bone> from 'root.sdf'. Details include the prim stack, child names, property names ('bones'), the property stack for 'bones', and its relationship targets.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyMultipleRelocations4.testenv/baseline/compositionResults_TrickyMultipleRelocations4.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </SymRig/Leg_bone>\n\nPrim Stack:\n    root.sdf             /SymRig/Leg_bone\n\nChild names:\n     ['Knee_bone']\n\nProperty names:\n     ['bones']\n\nProperty stacks:\n/SymRig/Leg_bone.bones:\n    root.sdf             /SymRig/Leg_bone.bones\n\nRelationship targets:\n/SymRig/Leg_bone.bones:\n    /SymRig\n    /SymRig/Leg_bone\n    /SymRig/Leg_bone/Knee_bone\n    /SymRig/Leg_bone/Knee_bone/Ankle_bone\n```\n\n----------------------------------------\n\nTITLE: Listing Sampled Time-Value Pairs from Spline (Text Data)\nDESCRIPTION: This snippet presents a series of time-value pairs sampled from the previously defined spline. Each line contains a time coordinate followed by the corresponding spline value at that time. This data can be used for plotting the spline curve, validating evaluation results, or as input for further analysis.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReorderLimitOpposite_TsTestBaseline.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n0.400000 1.000000\n1.000000 1.000000\n1.014925 0.996762\n1.029851 0.994243\n1.044776 0.992203\n1.059701 0.990512\n1.074627 0.989088\n1.089552 0.987878\n1.104478 0.986844\n1.119403 0.985957\n1.134328 0.985197\n1.149254 0.984546\n1.164179 0.983991\n1.179104 0.983521\n1.194030 0.983126\n1.208955 0.982799\n1.223881 0.982534\n1.238806 0.982325\n1.253731 0.982167\n1.268657 0.982056\n1.283582 0.981987\n1.298507 0.981959\n1.313433 0.981968\n1.328358 0.982010\n1.343284 0.982085\n1.358209 0.982190\n1.373134 0.982322\n1.388060 0.982480\n1.402985 0.982663\n1.417910 0.982869\n1.432836 0.983097\n1.447761 0.983344\n1.462687 0.983611\n1.477612 0.983896\n1.492537 0.984199\n1.507463 0.984517\n1.522388 0.984850\n1.537313 0.985198\n1.552239 0.985559\n1.567164 0.985934\n1.582090 0.986320\n1.597015 0.986718\n1.611940 0.987127\n1.626866 0.987546\n1.641791 0.987974\n1.656716 0.988412\n1.671642 0.988859\n1.686567 0.989313\n1.701493 0.989776\n1.716418 0.990245\n1.731343 0.990721\n1.746269 0.991203\n1.761194 0.991692\n1.776119 0.992185\n1.791045 0.992684\n1.805970 0.993188\n1.820896 0.993695\n1.835821 0.994207\n1.850746 0.994723\n1.865672 0.995241\n1.880597 0.995763\n1.895522 0.996287\n1.910448 0.996813\n1.925373 0.997341\n1.940299 0.997871\n1.955224 0.998402\n1.970149 0.998934\n1.985075 0.999467\n2.000000 1.000000\n2.014925 1.000533\n2.029851 1.001066\n2.044776 1.001598\n2.059701 1.002129\n2.074627 1.002659\n2.089552 1.003187\n2.104478 1.003713\n2.119403 1.004237\n2.134328 1.004759\n2.149254 1.005277\n2.164179 1.005793\n2.179104 1.006305\n2.194030 1.006812\n2.208955 1.007316\n2.223881 1.007815\n2.238806 1.008308\n2.253731 1.008797\n2.268657 1.009279\n2.283582 1.009755\n2.298507 1.010224\n2.313433 1.010687\n2.328358 1.011141\n2.343284 1.011588\n2.358209 1.012026\n2.373134 1.012454\n2.388060 1.012873\n2.402985 1.013282\n2.417910 1.013680\n2.432836 1.014066\n2.447761 1.014441\n2.462687 1.014802\n2.477612 1.015150\n2.492537 1.015483\n2.507463 1.015801\n2.522388 1.016104\n2.537313 1.016389\n2.552239 1.016656\n2.567164 1.016903\n2.582090 1.017131\n2.597015 1.017337\n2.611940 1.017520\n2.626866 1.017678\n2.641791 1.017810\n2.656716 1.017915\n2.671642 1.017990\n2.686567 1.018032\n2.701493 1.018041\n2.716418 1.018013\n2.731343 1.017944\n2.746269 1.017833\n2.761194 1.017675\n2.776119 1.017466\n2.791045 1.017201\n2.805970 1.016874\n2.820896 1.016479\n2.835821 1.016009\n2.850746 1.015454\n2.865672 1.014803\n2.880597 1.014043\n2.895522 1.013156\n2.910448 1.012122\n2.925373 1.010912\n2.940299 1.009488\n2.955224 1.007797\n2.970149 1.005757\n2.985075 1.003238\n3.000000 1.000000\n3.014925 1.001055\n3.029851 1.016827\n3.044776 1.069087\n3.059701 1.619385\n3.074627 1.773281\n3.089552 1.846883\n3.104478 1.894343\n3.119403 1.927734\n3.134328 1.952065\n3.149254 1.969960\n3.164179 1.982999\n3.179104 1.992210\n3.194030 1.998310\n3.200000 2.000000\n3.208955 2.002154\n3.223881 2.005382\n3.238806 2.008180\n3.253731 2.010576\n3.268657 2.012594\n3.283582 2.014258\n3.298507 2.015591\n3.313433 2.016614\n3.328358 2.017347\n3.343284 2.017811\n3.358209 2.018023\n3.373134 2.018003\n3.388060 2.017766\n3.402985 2.017330\n3.417910 2.016711\n3.432836 2.015925\n3.447761 2.014986\n3.462687 2.013910\n3.477612 2.012711\n3.492537 2.011403\n3.507463 2.010000\n3.522388 2.008516\n3.537313 2.006964\n3.552239 2.005357\n3.567164 2.003708\n3.582090 2.002032\n3.597015 2.000339\n3.611940 1.998644\n3.626866 1.996960\n3.641791 1.995298\n3.656716 1.993673\n3.671642 1.992098\n3.686567 1.990585\n3.701493 1.989148\n3.716418 1.987800\n3.731343 1.986556\n3.746269 1.985429\n3.761194 1.984433\n3.776119 1.983584\n3.791045 1.982896\n3.805970 1.982385\n3.820896 1.982067\n3.835821 1.981958\n3.850746 1.982075\n3.865672 1.982436\n3.880597 1.983059\n3.895522 1.983964\n3.910448 1.985170\n3.925373 1.986699\n3.940299 1.988573\n3.955224 1.990815\n4.000000 2.000000\n4.600000 2.000000\n```\n\n----------------------------------------\n\nTITLE: Installing testVariantMaterialBindingAPI Test Directory with CMake\nDESCRIPTION: Uses the `pxr_install_test_dir` CMake function to install the test environment for the 'variant material binding API' scenario. It copies the contents of the `testenv/testVariantMaterialBindingAPI` source directory into the build's test installation location under the name `testVariantMaterialBindingAPI`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdfixbrokenpixarschemas/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testVariantMaterialBindingAPI\n    DEST testVariantMaterialBindingAPI\n)\n```\n\n----------------------------------------\n\nTITLE: Building VDF Test Executables\nDESCRIPTION: Defines multiple test executables for VDF library components. Each test is configured with necessary library dependencies and source files to verify the functionality of different VDF features.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/vdf/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npxr_build_test(testVdfBasic\n    LIBRARIES\n        vdf\n        gf \n        tf\n        trace\n    \n    CPPFILES\n        testenv/testVdfBasic.cpp\n)\n\npxr_build_test(testVdfCountingIterator\n    LIBRARIES\n        vdf\n        tf\n    \n    CPPFILES\n        testenv/testVdfCountingIterator.cpp\n)\n\npxr_build_test(testVdfDefaultInitAllocator\n    LIBRARIES\n        vdf\n        tf\n    \n    CPPFILES\n        testenv/testVdfDefaultInitAllocator.cpp\n)\n\npxr_build_test(testVdfDynamicTopologicalSorter\n    LIBRARIES\n        vdf\n    \n    CPPFILES\n        testenv/testVdfDynamicTopologicalSorter.cpp\n)\n\npxr_build_test(testVdfEdit\n    LIBRARIES\n        vdf\n        gf \n        tf\n        trace\n    \n    CPPFILES\n        testenv/testVdfEdit.cpp\n)\n\npxr_build_test(testVdfExecutionStats\n    LIBRARIES\n        vdf\n    \n    CPPFILES\n        testenv/testVdfExecutionStats.cpp\n)\n\npxr_build_test(testVdfExecutionTypeRegistry\n    LIBRARIES\n        vdf\n    \n    CPPFILES\n        testenv/testVdfExecutionTypeRegistry.cpp\n)\n\npxr_build_test(testVdfGrapher\n    LIBRARIES\n        vdf\n        tf\n\n    CPPFILES\n        testenv/testVdfGrapher.cpp\n)\n\npxr_build_test(testVdfHardToReach\n    LIBRARIES\n        vdf\n        tf\n              \n    CPPFILES\n        testenv/testVdfHardToReach.cpp\n)\n\npxr_build_test(testVdfIndexedWeights\n    LIBRARIES\n        vdf\n        tf\n        trace\n    \n    CPPFILES\n      testenv/testVdfIndexedWeights.cpp\n)\n\npxr_build_test(testVdfInputValuesPointer\n    LIBRARIES\n        vdf\n        tf\n        trace\n              \n    CPPFILES\n        testenv/testVdfInputValuesPointer.cpp\n)\n\npxr_build_test(testVdfIsolatedSubnetwork\n    LIBRARIES\n        vdf\n        gf \n        tf\n\n    CPPFILES\n        testenv/testVdfIsolatedSubnetwork.cpp\n)\n\npxr_build_test(testVdfIteratorRange\n    LIBRARIES\n        vdf\n        tf\n\n    CPPFILES\n        testenv/testVdfIteratorRange.cpp\n)\n\npxr_build_test(testVdfIterators\n    LIBRARIES\n        vdf\n        tf\n        trace\n    \n    CPPFILES\n        testenv/testVdfIterators.cpp\n)\n\npxr_build_test(testVdfLinearMap\n    LIBRARIES\n        vdf\n\n    CPPFILES\n        testenv/testVdfLinearMap.cpp\n)\n\npxr_build_test(testVdfMask\n    LIBRARIES\n        vdf\n\n    CPPFILES\n        testenv/testVdfMask.cpp\n)\n\npxr_build_test(testVdfMaskThreading\n    LIBRARIES\n        vdf\n        tf \n        trace \n        work\n\n    CPPFILES\n        testenv/testVdfMaskThreading.cpp\n)\n\npxr_build_test(testVdfNetworkThreading\n    LIBRARIES\n        vdf\n        tf \n        trace \n        work\n\n    CPPFILES\n        testenv/testVdfNetworkThreading.cpp\n)\n\npxr_build_test(testVdfParallelExecutorDataVector\n    LIBRARIES\n        vdf \n        work\n\n    CPPFILES\n        testenv/testVdfParallelExecutorDataVector.cpp\n)\n\npxr_build_test(testVdfPoolChainIndexer\n    LIBRARIES\n        vdf\n        tf\n\n    CPPFILES\n        testenv/testVdfPoolChainIndexer.cpp\n)\n\npxr_build_test(testVdfReadWriteAccessor\n    LIBRARIES\n        vdf\n        tf\n        work\n\n    CPPFILES\n        testenv/testVdfReadWriteAccessor.cpp\n)\n\npxr_build_test(testVdfReadWriteIterator\n    LIBRARIES\n        vdf\n        tf\n    \n    CPPFILES\n        testenv/testVdfReadWriteIterator.cpp\n)\n\npxr_build_test(testVdfReorderConnections\n    LIBRARIES\n        vdf\n        tf\n\n    CPPFILES\n        testenv/testVdfReorderConnections.cpp\n)\n\npxr_build_test(testVdfRequest\n    LIBRARIES\n        vdf\n\n    CPPFILES\n        testenv/testVdfRequest.cpp\n)\n\npxr_build_test(testVdfSparseInputPathFinder\n    LIBRARIES\n        vdf\n        tf\n\n    CPPFILES\n        testenv/testVdfSparseInputPathFinder.cpp\n)\n\npxr_build_test(testVdfSpeculation\n    LIBRARIES\n        vdf\n        gf\n        tf\n\n    CPPFILES\n        testenv/testVdfSpeculation.cpp\n)\n\npxr_build_test(testVdfSubrangeView\n    LIBRARIES\n        vdf\n        tf\n\n    CPPFILES\n        testenv/testVdfSubrangeView.cpp\n)\n\npxr_build_test(testVdfTraversal\n    LIBRARIES\n        vdf\n        tf\n\n    CPPFILES\n        testenv/testVdfTraversal.cpp\n)\n\npxr_build_test(testVdfVector\n    LIBRARIES\n        vdf\n        tf\n        trace \n        vt\n\n    CPPFILES\n        testenv/testVdfVector.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Spline Properties and Knots - USD Animation Test Data - YAML\nDESCRIPTION: Describes a spline curve's configuration including interpolation type, extrapolation behaviors, and a set of knot definitions with detailed per-segment attributes. Fields encompass Hermite status, pre/post extrapolation methods, and each knot's position, slope, lengths, and tangent automation flags. Serves as declarative definition for spline initialization, evaluation, and testing in a regression test environment; input is fully specified knot and tangent data, output is used by curve evaluation routines.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReorderKeepRatio_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope -0.250000, preLen 0.000000, postLen 0.250000, auto false / false\n  3.000000: 1.000000, Curve, preSlope -0.250000, postSlope -0.250000, preLen 0.250000, postLen 0.199998, auto false / false\n  3.200000: 2.000000, Curve, preSlope 0.250000, postSlope 0.250000, preLen 0.199998, postLen 0.250000, auto false / false\n  4.000000: 2.000000, Curve, preSlope 0.250000, postSlope 0.000000, preLen 0.250000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Defining SubsetFamilies Validator\nDESCRIPTION: Documentation for a validator that validates all geometry subset families authored beneath an Imageable prim to ensure proper organization and structure.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[usdGeomValidators:SubsetFamilies]:\n\tDoc: Validates all of the geom subset families authored beneath an Imageable prim.\n\tKeywords: UsdGeomValidators, UsdGeomSubset\n\tSchemaTypes: UsdGeomImageable\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Defining Python Test Scripts for usdAppUtils in CMake\nDESCRIPTION: Uses the `pxr_test_scripts` CMake function to declare a set of Python scripts located in the `testenv` directory. These scripts (`testUsdAppUtilsCamera.py`, `testUsdAppUtilsCmdlineArgs.py`, `testUsdAppUtilsComplexity.py`, `testUsdAppUtilsFrameRecorder.py`) are intended for testing the functionality of the `usdAppUtils` library.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdAppUtils/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_test_scripts(\n    testenv/testUsdAppUtilsCamera.py\n    testenv/testUsdAppUtilsCmdlineArgs.py\n    testenv/testUsdAppUtilsComplexity.py\n    testenv/testUsdAppUtilsFrameRecorder.py\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Tests for JS Library in CMake\nDESCRIPTION: This snippet registers multiple tests for the 'js' library, including IO tests, error handling tests, converter tests, utils tests, and writer tests. It specifies the test commands, environments, and expected outcomes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/js/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testJsIO_PlugInfo\n    COMMAND \n        \"${CMAKE_INSTALL_PREFIX}/tests/testJsIO plugInfo.json.in plugInfo.json\"\n    TESTENV\n        testJsIO\n    DIFF_COMPARE \n        plugInfo.json\n)\npxr_register_test(testJsIO_Values\n    COMMAND \n        \"${CMAKE_INSTALL_PREFIX}/tests/testJsIO values.json.in values.json\"\n    TESTENV\n        testJsIO\n    DIFF_COMPARE \n        values.json\n)\npxr_register_test(testJsIO_Errors_BadCommaPlacement\n    COMMAND \n        \"${CMAKE_INSTALL_PREFIX}/tests/testJsIO bad-commaPlacement.json -\"\n    TESTENV\n        testJsIO_Errors\n    EXPECTED_RETURN_CODE \n        2\n    STDERR_REDIRECT\n        testJsIO_Errors-Run1-stderr.txt\n    DIFF_COMPARE \n        testJsIO_Errors-Run1-stderr.txt\n)\npxr_register_test(testJsIO_Errors_MismatchedBraces\n    COMMAND \n        \"${CMAKE_INSTALL_PREFIX}/tests/testJsIO bad-mismatchedBraces.json -\"\n    TESTENV\n        testJsIO_Errors\n    EXPECTED_RETURN_CODE \n        2\n    STDERR_REDIRECT\n        testJsIO_Errors-Run2-stderr.txt\n    DIFF_COMPARE \n        testJsIO_Errors-Run2-stderr.txt\n)\npxr_register_test(testJsConverter\n    COMMAND \n        \"${CMAKE_INSTALL_PREFIX}/tests/testJsConverter\"\n)\npxr_register_test(testJsUtils\n    COMMAND \n        \"${CMAKE_INSTALL_PREFIX}/tests/testJsUtils\"\n)\npxr_register_test(testJsWriter\n    COMMAND \n        \"${CMAKE_INSTALL_PREFIX}/tests/testJsWriter test.json compact\"\n    TESTENV\n        testJsWriter\n    DIFF_COMPARE \n        test.json\n)\npxr_register_test(testJsWriter_Pretty\n    COMMAND \n        \"${CMAKE_INSTALL_PREFIX}/tests/testJsWriter test-pretty.json pretty\"\n    TESTENV\n        testJsWriter\n    DIFF_COMPARE \n        test-pretty.json\n)\npxr_register_test(testJsDouble\n    COMMAND \n        \"${CMAKE_INSTALL_PREFIX}/tests/testJsDouble\"\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Configuring and Registering usdresolve Test in CMake\nDESCRIPTION: This CMake block conditionally configures and registers a test named `testResolveRelPath` for the `usdresolve` binary, but only for non-Windows platforms (if `WIN32` is false). It installs the test resources using `pxr_install_test_dir` and then registers the test using `pxr_register_test`. The test runs `usdresolve` with `input.usda`, compares the standard output (after cleaning platform-specific path prefixes) against `output.txt`, and expects a successful exit code (0). A comment explains the temporary exclusion of Windows due to path regex issues.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdresolve/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# XXX:\n# Temporarily disable this test on Windows; the output contains\n# a file path but the specified regex isn't stripping off the\n# directory as expected.\nif (NOT WIN32)\n    pxr_install_test_dir(\n        SRC testenv/testResolveRelPath\n        DEST testResolveRelPath\n    )\n\n    pxr_register_test(testResolveRelPath\n        PYTHON\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdresolve input.usda\"\n        STDOUT_REDIRECT output.txt\n        DIFF_COMPARE output.txt\n        CLEAN_OUTPUT \"(?:[A-Za-z]:)?\\\\/.*\\\\/\"\n        EXPECTED_RETURN_CODE 0\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimWithReferencesInVariants/B\nDESCRIPTION: Displays the composition results for the child prim path </PrimWithReferencesInVariants/B>. The prim stack shows its base definition in root.sdf, potentially overridden or augmented by a reference to 'Ref' introduced by the '{v=ref}' variant.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_30\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimWithReferencesInVariants/B>\n\nPrim Stack:\n    root.sdf             /PrimWithReferencesInVariants/B\n    root.sdf             /PrimWithReferencesInVariants{v=ref}Ref\n```\n\n----------------------------------------\n\nTITLE: Sampling Bezier Curve with Inner Loop Prototype\nDESCRIPTION: Test case showing point data for the main loop portion of a Bezier curve. The data represents point coordinates sampled from time 100 to 110 with consistent increments.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_50\n\nLANGUAGE: data\nCODE:\n```\n1: (TsSourceInnerLoopProto)\n    (100, 20)\n    (100.3582763671875, 20.50567626953125)\n    (100.52583312988281, 20.58715057373047)\n    (100.6865234375, 20.56494140625)\n    (100.9898681640625, 20.24114990234375)\n    (101.2734375, 19.59765625)\n    (101.8017578125, 17.60498046875)\n    (102.3125, 15.09375)\n    (102.8466796875, 12.57080078125)\n    (103.4453125, 10.54296875)\n    (103.7816162109375, 9.87310791015625)\n    (104.1494140625, 9.51708984375)\n    (104.34672546386719, 9.476570129394531)\n    (104.5538330078125, 9.53826904296875)\n    (105, 10)\n    (105.8505859375, 11.12744140625)\n    (106.5546875, 11.80078125)\n    (107.1533203125, 12.17529296875)\n    (107.6875, 12.40625)\n    (108.1982421875, 12.64892578125)\n    (108.7265625, 13.05859375)\n    (109.3134765625, 13.79052734375)\n    (110, 15)\n```\n\n----------------------------------------\n\nTITLE: Registering UsdView Primvar Edits Test in CMake\nDESCRIPTION: This snippet registers a test for UsdView primvar edits. It specifies a Python command to run the test script, sets up image comparisons, and defines failure thresholds.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdviewPrimvarEdits\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewPrimvarEdits.py primvars.usda\"\n    IMAGE_DIFF_COMPARE\n        start.png\n        add_fallback_primvar_smooth.png\n        add_fallback_primvar_flat.png\n        remove_fallback_primvar_flat.png\n        remove_fallback_primvar_wireOnSurf.png\n        add_unused_primvars.png\n        remove_unused_primvars.png\n        add_primvars_for_varname_edit.png\n        primvar_reader_varname_edit.png\n    FAIL 0.05\n    FAIL_PERCENT 0.03\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Inherit Nodes in USD\nDESCRIPTION: This snippet shows forward and reverse iteration over inherit nodes and inherit prim specs for the prim path </Model>. It illustrates how class inheritance is represented in USD scene description.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpIterator.testenv/baseline/iteration_results.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nIterating over inherit nodes for </Model>:\n @root.sdf@</Class>\tinherit\n\nReverse iterating over inherit nodes for </Model>:\n @root.sdf@</Class>\tinherit\n\nIterating over inherit prim specs for </Model>:\n @root.sdf@</Class>\tinherit\n\nReverse iterating over inherit prim specs for </Model>:\n @root.sdf@</Class>\tinherit\n```\n\n----------------------------------------\n\nTITLE: USD Prim Composition for /C\nDESCRIPTION: Details the prim stack for /C which inherits compositions from both /A/Child and /B/Child hierarchies.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantOverrideOfFallback.testenv/baseline/compositionResults_TrickyVariantOverrideOfFallback.txt#2025-04-23_snippet_5\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /C\n    root.sdf             /A/Child\n    root.sdf             /A{vset1=selection}Child\n    root.sdf             /B/Child\n    root.sdf             /B{vset2=selection}Child\n```\n\n----------------------------------------\n\nTITLE: Initializing TsRegressionPreventer Settings in Python\nDESCRIPTION: This snippet defines the settings for a TsRegressionPreventer object, including adjustment flags and width values for pre and post segments.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/InitiallyRegressiveKeepRatio_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: true\n  havePreSegment: false\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.000000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.000000\n  havePostSegment: true\n  postActiveAdjusted: true\n  postActiveAdjustedWidth: 14.660030\n  postOppositeAdjusted: true\n  postOppositeAdjustedWidth: 3.401930\n```\n\n----------------------------------------\n\nTITLE: Configuring usdMedia Library in CMake\nDESCRIPTION: Sets up the usdMedia library with its dependencies, includes, and public headers. It also specifies Python module files and Doxygen documentation files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdMedia/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usdMedia)\n\npxr_library(usdMedia\n    INCLUDE_SCHEMA_FILES\n\n    LIBRARIES\n        tf\n        vt\n        sdf\n        usd\n        usdGeom\n\n    PUBLIC_HEADERS\n        api.h\n\n    PYMODULE_FILES \n        __init__.py\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Including External RST Files in UsdLux Documentation\nDESCRIPTION: Includes two external RST files for roles, utilities, and ISO numeric entities in the documentation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_renderers.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: rolesAndUtils.rst\n.. include:: <isonum.txt>\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Tree Attributes Test in CMake\nDESCRIPTION: Installs and registers a test for USD Tree with attributes and metadata options.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdtree/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdTree\n    DEST testUsdTreeAttributes\n)\n\npxr_register_test(testUsdTreeAttributes\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdtree --flatten --attributes --metadata input.usda\"\n    STDOUT_REDIRECT output_attributes.txt\n    DIFF_COMPARE output_attributes.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Registering CMake Test for Pcp ErrorInvalidPreRelocateTargetPath\nDESCRIPTION: Defines a CMake test named `testPcpMuseum_ErrorInvalidPreRelocateTargetPath` using `pxr_register_test`. This test runs `testPcpCompositionResults` with the `--usd` flag on the `ErrorInvalidPreRelocateTargetPath/root.sdf` file to check for errors related to invalid pre-relocation target paths. The standard output is redirected and compared against a baseline file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testPcpMuseum_ErrorInvalidPreRelocateTargetPath\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd  ErrorInvalidPreRelocateTargetPath/root.sdf\" \n    STDOUT_REDIRECT compositionResults_ErrorInvalidPreRelocateTargetPath_usd.txt\n    DIFF_COMPARE compositionResults_ErrorInvalidPreRelocateTargetPath_usd.txt\n)\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </RefToRoot/B> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </RefToRoot/B>. The prim stack mirrors that of </Root/B>, including contributions from /Root/B, /_X/B, /_X/_Y in 'root.sdf', and /Ref from 'ref.sdf'. The resolved child prim name is 'C'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </RefToRoot/B>\n\nPrim Stack:\n    root.sdf             /Root/B\n    root.sdf             /_X/B\n    root.sdf             /_X/_Y\n    ref.sdf              /Ref\n\nChild names:\n     ['C']\n```\n\n----------------------------------------\n\nTITLE: Composing USD Class Geotype Prim\nDESCRIPTION: Displays the prim stack for the _class_geotype prim showing inheritance hierarchy.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantWeakerSelection2.testenv/baseline/compositionResults_TrickyVariantWeakerSelection2.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nPrim Stack:\n    root.sdf             /_class_geotype\n```\n\n----------------------------------------\n\nTITLE: Displaying Prim Stack Composition for /SS2 in OpenUSD\nDESCRIPTION: Shows the composition result for the /SS2 prim, displaying the stack of scene description files that contribute to this prim and their hierarchy.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecond4.txt#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nPrim Stack:\n    ss_48tcps.sdf        /SS2\n    ss_48tcps.sdf        /SS2\n    ss_48tcps.sdf        /SS2\n    ss_48tcps.sdf        /SS2\n    ref.sdf              /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_48tcps.sdf       /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_24tcps_12fps.sdf /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_12fps.sdf        /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </RefToRoot/_Y/C/_Z> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </RefToRoot/_Y/C/_Z>. The prim stack originates solely from /Ref/C/_Z in 'ref.sdf'. It lists 'prop' as a property name, with its value sourced from the same location, mirroring </Root/_Y/C/_Z>.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </RefToRoot/_Y/C/_Z>\n\nPrim Stack:\n    ref.sdf              /Ref/C/_Z\n\nProperty names:\n     ['prop']\n\nProperty stacks:\n/RefToRoot/_Y/C/_Z.prop:\n    ref.sdf              /Ref/C/_Z.prop\n```\n\n----------------------------------------\n\nTITLE: Relocates with Inherits Example in USD\nDESCRIPTION: Shows how relocates interact with inherits composition using a main.usda file. Demonstrates relocating a prim while applying class inheritance.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_39\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    relocates = {\n        </MainPrim/PrimAChild> : </MainPrim/RenamedPrimAChild>\n    }\n)\n\nclass \"WorkClass\"\n{\n    float childValue = 20.5\n    uniform string testString = \"from WorkClass\"\n}\n\ndef \"MainPrim\" (\n    prepend references = @refLayer.usda@</PrimA>\n)\n{\n    def \"RenamedPrimAChild\"\n    (\n        inherits = </WorkClass>\n    )\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating USD Root Layer Documentation\nDESCRIPTION: Changes the root layer reference in the documentation from 'a.usd' to 'b.usd'\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddiff/testenv/testDiffToolComposedResults/baseline/composed_diff.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\n-    doc = \"\"\"Generated from Composed Stage of root layer a.usd\n+    doc = \"\"\"Generated from Composed Stage of root layer b.usd\n```\n\n----------------------------------------\n\nTITLE: Regression Preventer Configuration in YAML\nDESCRIPTION: Configuration settings for the TsRegressionPreventer including segment adjustments and width parameters for pre and post segments.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/MoveStartKeepRatio_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: true\n  havePreSegment: false\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.000000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.000000\n  havePostSegment: true\n  postActiveAdjusted: true\n  postActiveAdjustedWidth: 0.599994\n  postOppositeAdjusted: true\n  postOppositeAdjustedWidth: 0.599994\n```\n\n----------------------------------------\n\nTITLE: Removing Legacy ArResolver Functions - C++\nDESCRIPTION: List of functions being removed from ArResolver interface to simplify and modernize the API.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_ar2.rst#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nArResolver::AnchorRelativePath\nArResolver::IsRelativePath\nArResolver::IsRepositoryPath\nArResolver::IsSearchPath\nArResolver::ComputeNormalizedPath\nArResolver::ComputeRepositoryPath\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Tree Simple Test in CMake\nDESCRIPTION: Sets up a test for USD Tree with the simple output option.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdtree/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdTreePayload\n    DEST testUsdTreeSimple\n)\n\npxr_register_test(testUsdTreeSimple\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdtree --simple input.usda\"\n    STDOUT_REDIRECT output_simple.txt\n    DIFF_COMPARE output_simple.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Package Settings in CMake for OpenUSD TF\nDESCRIPTION: This CMake snippet configures the include directories and package settings for the TF (Tiny Foundation) package in OpenUSD. It ensures the correct semaphore.h is used, sets the package name and prefix, and adds Windows-specific libraries when building on Windows platforms.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Make sure not to get the wrong semaphore.h\nset(CMAKE_INCLUDE_CURRENT_DIR OFF)\n\nset(PXR_PACKAGE tf)\nset(PXR_PREFIX pxr/base)\n\nif(WIN32)\n    set(WINLIBS Shlwapi.lib)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting USD Prefix and Package in CMake\nDESCRIPTION: Defines CMake variables for the USD prefix and package name.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdtree/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usd)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /Parent2 Prim\nDESCRIPTION: Shows the prim stack and child names for the composed prim at path </Parent2>. This prim also inherits from multiple sources (/PI, /PR, /PIS, /PISI, /PS, /PSI).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Parent2>\n\nPrim Stack:\n    root.sdf             /Parent2\n    root.sdf             /PI\n    ref.sdf              /PR\n    root.sdf             /PIS\n    root.sdf             /PISI\n    root.sdf             /PS\n    root.sdf             /PSI\n\nChild names:\n     ['Child', 'Sibling']\n```\n\n----------------------------------------\n\nTITLE: Exporting USD Session Layer to String\nDESCRIPTION: Shows how to export the current session layer to a string representation using usdviewApi. This allows inspection of sparse overrides like variant selections.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_authoring_variants.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nprint(usdviewApi.stage.GetSessionLayer().ExportToString())\n```\n\n----------------------------------------\n\nTITLE: Registering Python Tests for USD Validation\nDESCRIPTION: Registers Python-based tests for validator metadata, validation error, validation context, and validation registry, specifying the python command to run and expected return code.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/usdValidation/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdValidatorMetadata\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdValidatorMetadata\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdValidationError\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdValidationError\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdValidationContextPy\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdValidationContextPy\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdValidationRegistryPy\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdValidationRegistryPy\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Composition for /_class_defaultVariantSelections Prim in USD\nDESCRIPTION: Shows the composition details for the '/_class_defaultVariantSelections' prim, including its prim stack, the active variant selection ('testVariantSet=testVariant'), the single property ('classVariantAttr'), and the source layer providing the attribute value within 'root.sdf'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndVariants3.testenv/baseline/compositionResults_SpecializesAndVariants3.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </_class_defaultVariantSelections>\n\nPrim Stack:\n    root.sdf             /_class_defaultVariantSelections\n    root.sdf             /_class_defaultVariantSelections{testVariantSet=testVariant}\n\nVariant Selections:\n    {testVariantSet = testVariant}\n\nProperty names:\n     ['classVariantAttr']\n\nProperty stacks:\n/_class_defaultVariantSelections.classVariantAttr:\n    root.sdf             /_class_defaultVariantSelections{testVariantSet=testVariant}.classVariantAttr\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Examples Build Path\nDESCRIPTION: Sets up the prefix and installation subdirectory paths for USD examples. The examples will be installed under the share/usd/examples directory.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/examples/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX examples)\nset(PXR_INSTALL_SUBDIR share/usd/examples)\n```\n\n----------------------------------------\n\nTITLE: Vertex Results for Empty Topology (GPU Subdivision Disabled)\nDESCRIPTION: This snippet shows the vertex coordinate results for a subdivision test on an empty topology using the Catmull-Clark scheme with GPU subdivision disabled (GPU subdivision = 0). Corresponding to the empty index results, the vertex list is also empty.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStSubdivisionOsd3/baseline/testHdStSubdivisionOsd3-Run1-stdout.txt#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Initializing TsTest_SplineData Object in Python\nDESCRIPTION: This snippet creates a TsTest_SplineData object with detailed configuration including extrapolation methods, knot data, and floating-point precision values for various parameters.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/NoopKeepStart_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.999999999999ap-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.999999999999ap-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: USD Layer Stack Analysis for /Group/Model\nDESCRIPTION: Shows the composition results for the /Group/Model prim, including prim stack inheritance, variant selections and property stacks. Details how the Model prim inherits and overrides attributes from its parent Group.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TypicalReferenceToChargroup.testenv/baseline/compositionResults_TypicalReferenceToChargroup.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /Group/Model\n    group.sdf            /Group/Model\n    group.sdf            /Group{standin=sim}Model\n    model.sdf            /Model\n    model.sdf            /Model{standin=sim}\n\nVariant Selections:\n    {standin = sim}\n\nProperty names:\n     ['standin_name']\n\nProperty stacks:\n/Group/Model.standin_name:\n    model.sdf            /Model{standin=sim}.standin_name\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </SymRig/Leg_bone/Knee_bone> in USD\nDESCRIPTION: Displays the composition results for the prim path </SymRig/Leg_bone/Knee_bone> within the 'root.sdf' layer. It lists the prim stack and the child names for this specific prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyMultipleRelocations4.testenv/baseline/compositionResults_TrickyMultipleRelocations4.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </SymRig/Leg_bone/Knee_bone>\n\nPrim Stack:\n    root.sdf             /SymRig/Leg_bone/Knee_bone\n\nChild names:\n     ['Ankle_bone']\n```\n\n----------------------------------------\n\nTITLE: Initializing a Spline Using Python Constructor\nDESCRIPTION: A Python constructor call for Ts.TsTest_SplineData that creates the same spline definition as the human-readable format. It uses hex representations for floating-point values and defines knots with specific interpolation properties.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/tsTest_TsFramework.testenv/baseline/test_BaselineParams_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x1p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1p-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.4p+2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1p-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenUSD Extras Imaging Documentation Package\nDESCRIPTION: Sets up the prefix and package name for the extras imaging documentation, then uses a custom CMake function to specify the documentation files to be included in the build. This includes various Doxygen files, example code, and images.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/imaging/docs/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/extras/imaging)\nset(PXR_PACKAGE extras_imaging_docs)\n\npxr_docs_only_dir(${PXR_PACKAGE}\n    DOXYGEN_FILES\n        hydra_getting_started_guide.dox\n        hydra_scene_browser.dox\n        hydra_prim_schemas.dox\n        examples_hydra_getting_started.cpp\n        app_renderer_filters.png\n        HdSceneIndexPrimMaterialDiagram.drawio.svg\n        hdschema.png\n        legacy_scene_delegate_emulation.png\n        nested_datasources.png\n        scene_index_1.png\n        scene_index_2.png\n        scene_index_adapters.png\n        scene_index_filter.png\n        usdimagingstagesceneindex_filters.png\n        hydra_scene_browser_usdview.png\n        hydra_scene_browser_columns.png\n        hydra_scene_browser_filters.png        \n)\n```\n\n----------------------------------------\n\nTITLE: Registering Tests with Shared Library Requirements in CMake\nDESCRIPTION: Registers tests that specifically require shared libraries to function properly. These tests are marked with the REQUIRES_SHARED_LIBS flag to ensure they are only run in compatible build configurations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/CMakeLists.txt#2025-04-23_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(TfRegistryManagerUnload\n    REQUIRES_SHARED_LIBS\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTf TfRegistryManagerUnload\"\n)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Catmull-Clark Subdivision on Quads with Right-Handed Orientation\nDESCRIPTION: Results from applying Catmull-Clark subdivision on a quad mesh with right-handed orientation at subdivision levels 0 and 1. The output shows the quad's index results and the resulting vertex position coordinates in 3D space.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStSubdivisionOsd3/baseline/testHdStSubdivisionOsd3-Run1-stdout.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nTest quad\nScheme catmullClark\nOrientation rightHanded\nGPU subdivision = 0\nIndex Results\n[4, 9, 8, 12, 9, 5, 10, 8, 8, 10, 6, 11, 12, 8, 11, 7]\nResults\n[(1, 1, 0), (-1, 1, 0), (-1, -1, 0), (1, -1, 0), (1, 1, 0), (-1, 1, 0), (-1, -1, 0), (1, -1, 0), (0, 0, 0), (0, 1, 0), (-1, 0, 0), (0, -1, 0), (1, 0, 0)]\n```\n\n----------------------------------------\n\nTITLE: Defining SubsetsMaterialBindFamily Validator\nDESCRIPTION: Documentation for a validator that ensures geometry subsets of the 'materialBind' family have a restricted family type for proper material binding functionality.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n[usdShadeValidators:SubsetsMaterialBindFamily]:\n\tDoc: Geom subsets of the 'materialBind' family should have a restricted family type.\n\tKeywords: UsdShadeValidators, UsdGeomSubset\n\tSchemaTypes: UsdGeomImageable\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Installing and Registering the usdAppUtils Command Line Arguments Test in CMake\nDESCRIPTION: Installs test data for the command line arguments test from `testenv/CmdlineArgsTest` to the build/install test directory `testUsdAppUtilsCmdlineArgs` using `pxr_install_test_dir`. Subsequently, it registers a Python test named `testUsdAppUtilsCmdlineArgs` via `pxr_register_test`. The command points to the installed test script (`${CMAKE_INSTALL_PREFIX}/tests/testUsdAppUtilsCmdlineArgs`), and an expected return code of 0 signifies a successful test run.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdAppUtils/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/CmdlineArgsTest\n    DEST testUsdAppUtilsCmdlineArgs\n)\npxr_register_test(testUsdAppUtilsCmdlineArgs\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdAppUtilsCmdlineArgs\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: USD Composition Warning: Ignored Opinion (Good Reference to Relocated Scenario)\nDESCRIPTION: Reports a warning encountered during the composition of '</Good_RefToRelocated>'. An opinion specified in the layer '@ErrorInvalidReferenceToRelocationSource/char.sdf@' at the relocation source path '</Char/PreRelo>' is deemed invalid by the composition engine and will be ignored. This occurs in a context where a reference is made to a relocated prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInvalidReferenceToRelocationSource.testenv/baseline/compositionErrors_ErrorInvalidReferenceToRelocationSource.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nThe layer @ErrorInvalidReferenceToRelocationSource/char.sdf@ has an invalid opinion at the relocation source path </Char/PreRelo>, which will be ignored.\n```\n\n----------------------------------------\n\nTITLE: Registering Standard C++ Tests for USD Validation\nDESCRIPTION: Registers C++ tests for core validators, validator, and validation registry, specifying the command to run and expected return code.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/usdValidation/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdCoreValidators\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdCoreValidators\"\n        EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdValidator\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdValidator\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdValidationRegistry\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdValidationRegistry\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: USD Prim Composition for /B\nDESCRIPTION: Details the prim stack, variant selections, and child names for prim /B including variant set 'vset2'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantOverrideOfFallback.testenv/baseline/compositionResults_TrickyVariantOverrideOfFallback.txt#2025-04-23_snippet_3\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /B\n    root.sdf             /B{vset2=selection}\n\nVariant Selections:\n    {vset2 = selection}\n\nChild names:\n     ['Child']\n```\n\n----------------------------------------\n\nTITLE: Sampling Animation Curve with Pre/Post Extrapolation and Inner Loop Sources\nDESCRIPTION: Test case demonstrating animation curve sampling with different source types (pre-extrapolation loop, inner loop with pre-echo, prototype, post-echo, and post-extrapolation loop) over a time range of [5, 205] with specific sampling parameters.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_70\n\nLANGUAGE: text\nCODE:\n```\nTest Case 146: SampleWithSources([5, 205], 10, 50, 10)\n0: (TsSourcePreExtrapLoop)\n    (5, 60)\n    (7.6875, 62.40625)\n    (10, 65)\n    (10.6865234375, 65.56494140625)\n    (11.2734375, 64.59765625)\n    (12.3125, 60.09375)\n    (13.4453125, 55.54296875)\n    (14.1494140625, 54.51708984375)\n    (15, 55)\n    (17.6875, 57.40625)\n    (20, 60)\n    (20.6865234375, 60.56494140625)\n    (21.2734375, 59.59765625)\n    (22.3125, 55.09375)\n    (23.4453125, 50.54296875)\n    (24.1494140625, 49.51708984375)\n    (25, 50)\n    (27.6875, 52.40625)\n    (30, 55)\n    (30.6865234375, 55.56494140625)\n    (31.2734375, 54.59765625)\n    (32.3125, 50.09375)\n    (33.4453125, 45.54296875)\n    (34.1494140625, 44.51708984375)\n    (35, 45)\n    (37.6875, 47.40625)\n    (40, 50)\n    (40.6865234375, 50.56494140625)\n    (41.2734375, 49.59765625)\n    (42.3125, 45.09375)\n    (43.4453125, 40.54296875)\n    (44.1494140625, 39.51708984375)\n    (45, 40)\n    (47.6875, 42.40625)\n    (50, 45)\n    (50.6865234375, 45.56494140625)\n    (51.2734375, 44.59765625)\n    (52.3125, 40.09375)\n    (53.4453125, 35.54296875)\n    (54.1494140625, 34.51708984375)\n    (55, 35)\n    (57.6875, 37.40625)\n    (60, 40)\n    (60.6865234375, 40.56494140625)\n    (61.2734375, 39.59765625)\n    (62.3125, 35.09375)\n    (63.4453125, 30.54296875)\n    (64.1494140625, 29.51708984375)\n    (65, 30)\n    (67.6875, 32.40625)\n    (70, 35)\n    (70.6865234375, 35.56494140625)\n    (71.2734375, 34.59765625)\n    (72.3125, 30.09375)\n    (73.4453125, 25.54296875)\n    (74.1494140625, 24.51708984375)\n    (75, 25)\n    (77.6875, 27.40625)\n    (80, 30)\n1: (TsSourceInnerLoopPreEcho)\n    (80, 30)\n    (80.6865234375, 30.56494140625)\n    (81.2734375, 29.59765625)\n    (82.3125, 25.09375)\n    (83.4453125, 20.54296875)\n    (84.1494140625, 19.51708984375)\n    (85, 20)\n    (87.6875, 22.40625)\n    (90, 25)\n    (90.6865234375, 25.56494140625)\n    (91.2734375, 24.59765625)\n    (92.3125, 20.09375)\n    (93.4453125, 15.54296875)\n    (94.1494140625, 14.51708984375)\n    (95, 15)\n    (97.6875, 17.40625)\n    (100, 20)\n2: (TsSourceInnerLoopProto)\n    (100, 20)\n    (100.6865234375, 20.56494140625)\n    (101.2734375, 19.59765625)\n    (102.3125, 15.09375)\n    (103.4453125, 10.54296875)\n    (104.1494140625, 9.51708984375)\n    (105, 10)\n    (107.6875, 12.40625)\n    (110, 15)\n3: (TsSourceInnerLoopPostEcho)\n    (110, 15)\n    (110.6865234375, 15.56494140625)\n    (111.2734375, 14.59765625)\n    (112.3125, 10.09375)\n    (113.4453125, 5.54296875)\n    (114.1494140625, 4.51708984375)\n    (115, 5)\n    (117.6875, 7.40625)\n    (120, 10)\n    (120.6865234375, 10.56494140625)\n    (121.2734375, 9.59765625)\n    (122.3125, 5.09375)\n    (123.4453125, 0.54296875)\n    (124.1494140625, -0.48291015625)\n    (125, 0)\n    (127.6875, 2.40625)\n    (130, 5)\n4: (TsSourcePostExtrapLoop)\n    (180, 30)\n    (180.6865234375, 30.56494140625)\n    (181.2734375, 29.59765625)\n    (182.3125, 25.09375)\n    (183.4453125, 20.54296875)\n    (184.1494140625, 19.51708984375)\n    (185, 20)\n    (187.6875, 22.40625)\n    (190, 25)\n    (190.6865234375, 25.56494140625)\n    (191.2734375, 24.59765625)\n    (192.3125, 20.09375)\n    (193.4453125, 15.54296875)\n    (194.1494140625, 14.51708984375)\n    (195, 15)\n    (197.6875, 17.40625)\n    (200, 20)\n    (200.6865234375, 20.56494140625)\n    (201.2734375, 19.59765625)\n    (202.3125, 15.09375)\n    (203.4453125, 10.54296875)\n    (204.1494140625, 9.51708984375)\n    (205, 10)\n```\n\n----------------------------------------\n\nTITLE: Registering Collection Expression Evaluator Test with CMake - CMake\nDESCRIPTION: This snippet registers the testHdCollectionExpressionEvaluator test binary with CMake using the pxr_register_test macro. It configures the build to recognize and run this test as part of the validation suite. This requires the pxr_register_test macro to be available and the test binary to be present in the installation's tests directory. The key parameter is the name of the test, and the output is a test registration the CMake runner can use.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/CMakeLists.txt#2025-04-23_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdCollectionExpressionEvaluator\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdCollectionExpressionEvaluator\"\n)\n\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Property Specs in USD\nDESCRIPTION: This snippet demonstrates iteration over local and all property specs for the property path </Model.a>. It shows how property specifications are organized and inherited in a USD scene.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpIterator.testenv/baseline/iteration_results.txt#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nIterating over local property specs for </Model.a>:\n @root.sdf@</Model.a> from node @root.sdf@</Model>\troot\n\nReverse iterating over local property specs for </Model.a>:\n @root.sdf@</Model.a> from node @root.sdf@</Model>\troot\n\n====================\n\nIterating over all property specs for </Model.a>:\n @root.sdf@</Model.a> from node @root.sdf@</Model>\troot\n @root.sdf@</Class.a> from node @root.sdf@</Class>\tinherit\n @model_latest.sdf@</Model.a> from node @model_latest.sdf@</Model>\treference\n\nReverse iterating over all property specs for </Model.a>:\n @model_latest.sdf@</Model.a> from node @model_latest.sdf@</Model>\treference\n @root.sdf@</Class.a> from node @root.sdf@</Class>\tinherit\n @root.sdf@</Model.a> from node @root.sdf@</Model>\troot\n```\n\n----------------------------------------\n\nTITLE: Loading USD Layer with Reference\nDESCRIPTION: Initial layer loading command showing a reference to a chargroup with renaming.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TypicalReferenceToChargroupWithRename.testenv/baseline/compositionResults_TypicalReferenceToChargroupWithRename.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nLoading @TypicalReferenceToChargroupWithRename/root.sdf@\n```\n\n----------------------------------------\n\nTITLE: Defining Spline Configuration in Python\nDESCRIPTION: This snippet defines a spline configuration using the Ts.TsTest_SplineData class. It specifies the spline type, extrapolation methods, and knot points with their properties.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveLimitActive_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.2a69b463e86acp+0'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.999999999999ap-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Configuring RenderMan Arguments Parser Plugin in CMake\nDESCRIPTION: Sets up and configures the rmanArgsParser plugin build using the pxr_plugin CMake function. It includes dependencies on various USD libraries, defines private classes, includes the pugixml library, and specifies necessary header and resource files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/rmanArgsParser/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX \"\")\nset(PXR_PACKAGE rmanArgsParser)\n\npxr_plugin(rmanArgsParser\n    LIBRARIES\n        arch\n        gf\n        tf\n        vt\n        ar\n        sdr\n\n    PRIVATE_CLASSES\n        rmanArgsParser\n\n    CPPFILES\n        pugixml/pugixml.cpp\n    \n    PRIVATE_HEADERS\n        api.h\n        pugixml/pugiconfig.hpp\n        pugixml/pugixml.hpp\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra SortedIds Test Build in CMake\nDESCRIPTION: Defines the build configuration for testing Hydra's sorted IDs functionality. This test validates the system for efficiently managing and accessing sorted identifiers in the rendering pipeline.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testHdSortedIds\n   LIBRARIES\n       hd\n       sdf\n       tf\n\n   CPPFILES\n       testenv/testHdSortedIds.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying Transform Matrix Scale\nDESCRIPTION: Updates a 4x4 transform matrix, changing the scale values from 1 to 2 while maintaining the matrix structure\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddiff/testenv/testDiffToolComposedResults/baseline/composed_diff.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\n-    matrix4d transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )\n+    matrix4d transform = ( (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2) )\n```\n\n----------------------------------------\n\nTITLE: Running usddumpcrate (Bash)\nDESCRIPTION: Example usage of the usddumpcrate command-line tool, which provides information on USD files encoded using the Crate File Format.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toolset.rst#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nusddumpcrate myFile.usd\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PIS/Child Prim\nDESCRIPTION: Shows the prim stack for the composed prim at path </PIS/Child>, inheriting from /PISI/Child.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PIS/Child>\n\nPrim Stack:\n    root.sdf             /PIS/Child\n    root.sdf             /PISI/Child\n```\n\n----------------------------------------\n\nTITLE: Loading USD Layer Stack\nDESCRIPTION: Initial layer stack loading for the root.sdf file containing the face rig hierarchy\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpookyInheritsInSymmetricBrowRig.testenv/baseline/compositionResults_TrickySpookyInheritsInSymmetricBrowRig.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nLayer Stack:\n     root.sdf\n```\n\n----------------------------------------\n\nTITLE: Composing Child </Char/Relocated/Child> under Relocated Prim\nDESCRIPTION: Displays the composition results for the prim </Char/Relocated/Child>, a child prim under a relocated parent. The prim stack shows contributions from the corresponding paths in 'root.sdf' and 'model.sdf', reflecting the structure after the parent's relocation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_RelocateToNone.testenv/baseline/compositionResults_RelocateToNone_usd.txt#2025-04-23_snippet_2\n\nLANGUAGE: usd-composition-output\nCODE:\n```\nResults for composing </Char/Relocated/Child>\n\nPrim Stack:\n    root.sdf             /Char/Relocated/Child\n    model.sdf            /Model/ToBeRelocated/Child\n```\n\n----------------------------------------\n\nTITLE: Adding hdPrman Include Directories for Self-References in CMake\nDESCRIPTION: Adds include directories for the hdPrman library to find its own headers when using include paths like #include \"hdPrman/...\".\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/hdPrman/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET hdPrman)\n    target_include_directories(${PXR_PACKAGE}\n        PRIVATE\n            \"${PROJECT_BINARY_DIR}/include/pxr/imaging\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering USD Physics Test Scripts\nDESCRIPTION: Registers Python test scripts for the USD Physics library components including metrics, rigid body API, collision group API, and parsing tests.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdPhysics/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_test_scripts(\n    testenv/testUsdPhysicsMetrics.py\n    testenv/testUsdPhysicsRigidBodyAPI.py\n    testenv/testUsdPhysicsCollisionGroupAPI.py\n    testenv/testUsdPhysicsParsing.py\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Python Test Scripts for Tf Module in CMake\nDESCRIPTION: Registers multiple Python test scripts for the Tf module using the pxr_test_scripts macro. These scripts test various Tf functionalities in Python, including file utilities, crash handling, and type systems.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\npxr_test_scripts(\n    testenv/testTfCrashHandler.py\n    testenv/testTfFileUtils.py\n    testenv/testTfMallocTagReport.py\n    testenv/testTfNamedTemporaryFile.py\n    testenv/testTfPathUtils.py\n    testenv/testTfPython.py\n    testenv/testTfPyDllLink.py\n    testenv/testTfPyNotice.py\n    testenv/testTfPyOptional.py\n    testenv/testTfPyScopeDescription.py\n    testenv/testTfPyStaticTokens.py\n    testenv/testTfScriptModuleLoader.py\n    testenv/testTfStringUtils.py\n    testenv/testTfTemplateString.py\n    testenv/testTfType.py\n    testenv/testTf_PyContainerConversions.py\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Test Data Directory 'testUsdZipInputFiles3' in CMake\nDESCRIPTION: Uses the `pxr_install_test_dir` custom CMake function to install the contents of the source directory `testenv/testUsdZipInputFiles` into the destination directory `testUsdZipInputFiles3` within the build/install test environment, likely for a third test variant focusing on specific input files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdzip/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdZipInputFiles\n    DEST testUsdZipInputFiles3\n)\n```\n\n----------------------------------------\n\nTITLE: Defining USD Validators Configuration in PlainText\nDESCRIPTION: A comprehensive list of validators for OpenUSD components including RenderMan, Geometry, Physics, Shading, Skeleton, and Core validators. Each validator entry includes documentation, relevant keywords, applicable schema types, and suite status.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/baseRules_validationFramework.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[rmanUsdValidators:PxrRenderTerminalsAPIRelationships]:\n\tDoc: Ensures that RenderSettings prims with PxrRenderTerminalsAPI do not define connection attributes for terminal displayFilters, sampleFilters, and integrators. Relationships should be used instead.\n\tKeywords: RmanUsdValidators\n\tSchemaTypes: UsdRiPxrRenderTerminalsAPI\n\tisSuite: False\n[usdGeomValidators:StageMetadataChecker]:\n\tDoc: All stages must declare their 'upAxis' and 'metersPerUnit'.\n\tKeywords: UsdGeomValidators\n\tisSuite: False\n[usdGeomValidators:SubsetFamilies]:\n\tDoc: Validates all of the geom subset families authored beneath an Imageable prim.\n\tKeywords: UsdGeomValidators, UsdGeomSubset\n\tSchemaTypes: UsdGeomImageable\n\tisSuite: False\n[usdGeomValidators:SubsetParentIsImageable]:\n\tDoc: Validates that GeomSubset prims are direct descendants of an Imageable prim.\n\tKeywords: UsdGeomValidators, UsdGeomSubset\n\tSchemaTypes: UsdGeomSubset\n\tisSuite: False\n[usdPhysicsValidators:ArticulationChecker]:\n\tDoc: Validates all of the UsdPhysicsArticulationRootAPIs applied to a prim.\n\tKeywords: UsdPhysicsValidators, UsdPhysicsArticulationRootAPI\n\tSchemaTypes: UsdPhysicsArticulationRootAPI\n\tisSuite: False\n[usdPhysicsValidators:ColliderChecker]:\n\tDoc: Validates all of the UsdPhysicsCollisionAPIs applied to a prim.\n\tKeywords: UsdPhysicsValidators, UsdPhysicsCollisionAPI\n\tSchemaTypes: UsdPhysicsCollisionAPI\n\tisSuite: False\n[usdPhysicsValidators:PhysicsJointChecker]:\n\tDoc: Validates all of the UsdPhysicsJoint prims.\n\tKeywords: UsdPhysicsValidators, UsdPhysicsJoint\n\tSchemaTypes: UsdPhysicsJoint\n\tisSuite: False\n[usdPhysicsValidators:RigidBodyChecker]:\n\tDoc: Validates all of the UsdPhysicsRigidBodyAPIs applied to a prim.\n\tKeywords: UsdPhysicsValidators, UsdPhysicsRigidBodyAPI\n\tSchemaTypes: UsdPhysicsRigidBodyAPI\n\tisSuite: False\n[usdShadeValidators:EncapsulationRulesValidator]:\n\tDoc: Connectable prims (e.g. Shader, Material, etc) can only be nested inside other Container-like Connectable prims. Container-like prims include Material, NodeGraph, Light, LightFilter. Shader is not a Container-like prim.\n\tKeywords: UsdShadeValidators\n\tisSuite: False\n[usdShadeValidators:MaterialBindingApiAppliedValidator]:\n\tDoc: Verify a prim has the MaterialBindingAPI applied if it has a material binding relationship.\n\tKeywords: UsdShadeValidators\n\tisSuite: False\n[usdShadeValidators:MaterialBindingCollectionValidator]:\n\tDoc: Verify that a collection defining a material binding is well-formed\n\tKeywords: UsdShadeValidators\n\tSchemaTypes: UsdShadeMaterialBindingAPI\n\tisSuite: False\n[usdShadeValidators:MaterialBindingRelationships]:\n\tDoc: All properties named 'material:binding' or in that namespace should be relationships.\n\tKeywords: UsdShadeValidators\n\tisSuite: False\n[usdShadeValidators:NormalMapTextureValidator]:\n\tDoc: UsdUVTexture nodes that feed the _inputs:normals_ of a UsdPreviewSurface must ensure that the data is encoded and scaled properly. Specifically, since normals are expected to be in the range [(-1,-1,-1), (1,1,1)], the Texture node must transform 8-bit textures from their [0..1] range by setting its _inputs:scale_ to (2, 2, 2, 1) and _inputs:bias_ to (-1, -1, -1, 0). Normal map data is commonly expected to be linearly encoded.  However, many image-writing tools automatically set the profile of three-channel, 8-bit images to SRGB.  To prevent an unwanted transformation, the UsdUVTexture's _inputs:sourceColorSpace_ must be set to raw.\n\tKeywords: UsdShadeValidators\n\tSchemaTypes: UsdShadeShader\n\tisSuite: False\n[usdShadeValidators:ShaderSdrCompliance]:\n\tDoc: Shader prim's input types must be conforming to their appropriate sdf types in the respective sdr shader.\n\tKeywords: UsdShadeValidators\n\tSchemaTypes: UsdShadeShader\n\tisSuite: False\n[usdShadeValidators:SubsetMaterialBindFamilyName]:\n\tDoc: Geom subsets with authored material bindings should have the 'materialBind' family name.\n\tKeywords: UsdShadeValidators, UsdGeomSubset\n\tSchemaTypes: UsdGeomSubset\n\tisSuite: False\n[usdShadeValidators:SubsetsMaterialBindFamily]:\n\tDoc: Geom subsets of the 'materialBind' family should have a restricted family type.\n\tKeywords: UsdShadeValidators, UsdGeomSubset\n\tSchemaTypes: UsdGeomImageable\n\tisSuite: False\n[usdSkelValidators:SkelBindingApiAppliedValidator]:\n\tDoc: Verify a prim has the SkelBindingAPI applied if it has a UsdSkelBinding property.\n\tKeywords: UsdSkelValidators\n\tisSuite: False\n[usdSkelValidators:SkelBindingApiValidator]:\n\tDoc: Verify that a prim with SkelBindingAPI applied, is either of SkelRoot type or parented by a SkelRoot prim.\n\tKeywords: UsdSkelValidators\n\tSchemaTypes: UsdSkelBindingAPI\n\tisSuite: False\n[usdUtilsValidators:MissingReferenceValidator]:\n\tDoc: The composed USD stage should not contain any unresolvable asset dependencies (in every possible variation of the asset), when using the default asset resolver.\n\tKeywords: UsdUtilsValidators\n\tisSuite: False\n[usdValidation:CompositionErrorTest]:\n\tDoc: Validator aims at providing all composition errors, which were generated while composing the stage.\n\tKeywords: UsdCoreValidators\n\tisSuite: False\n[usdValidation:StageMetadataChecker]:\n\tDoc: Stages that can be consumed as referenceable assets must have a valid 'defaultPrim' specified.\n\tKeywords: UsdCoreValidators\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Plugin Library\nDESCRIPTION: Configures the plugin library with required dependencies, classes, and resource files\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/examples/usdDancingCubesExample/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_plugin(${PXR_PACKAGE}\n    LIBRARIES\n        tf\n        gf\n        vt\n        pcp\n        sdf\n        usd\n\n    PUBLIC_CLASSES\n        fileFormat\n\n    PRIVATE_CLASSES\n        data\n        dataImpl\n\n    RESOURCE_FILES\n        plugInfo.json\n        dancingCubes.usda:usdDancingCubesExample/dancingCubes.usda\n\n    DISABLE_PRECOMPILED_HEADERS\n)\n```\n\n----------------------------------------\n\nTITLE: RST Document Structure with USD Product Documentation\nDESCRIPTION: ReStructuredText document outlining various software products that support USD technology, including their features and documentation links\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/usd_products.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n==================\nProducts Using USD\n==================\n\nUSD has support in many 3D Content Creation Applications and Ecosystems.\n\n.. include:: rolesAndUtils.rst\n.. include:: <isonum.txt>\n\n.. contents::\n   :local:\n   :class: threecolumn\n```\n\n----------------------------------------\n\nTITLE: USD Prim Index Node 12 Details (Specialize)\nDESCRIPTION: Describes Node 12, a 'specialize' type node representing </Parent/Child> derived from </PIS/Child>. Details include parent node (0), dependency type (ancestral, non-virtual), source/target information within the 'SpecializesAndAncestralArcs4/root.sdf' layer stack, origin node (6), namespace mappings (Map to parent, Map to root), and the contributing prim stack.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4_graph.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nNode 12:\n    Parent node:              0\n    Type:                     specialize\n    DependencyType:           ancestral, non-virtual\n    Source path:              </PIS/Child>\n    Source layer stack:       @SpecializesAndAncestralArcs4/root.sdf@\n    Target path:              </Parent/Child>\n    Target layer stack:       @SpecializesAndAncestralArcs4/root.sdf@\n    Origin node:              6\n    Sibling # at origin:      0\n    Map to parent:\n        / -> /\n        /PIS -> /Parent\n    Map to root:\n        / -> /\n        /PIS -> /Parent\n    Namespace depth:          1\n    Depth below introduction: 1\n    Is due to ancestor:       TRUE\n    Permission:               Public\n    Is restricted:            FALSE\n    Is inert:                 FALSE\n    Contribute specs:         TRUE\n        Restricted at depth:  0\n    Has specs:                TRUE\n    Has symmetry:             FALSE\n    Prim stack:\n      </PIS/Child> root.sdf - @SpecializesAndAncestralArcs4/root.sdf@\n```\n\n----------------------------------------\n\nTITLE: Registering Curves Primvars Test\nDESCRIPTION: Registers a test for HdSt curves primvar functionality. This test verifies correct handling of primvars (primitive variables) for curve geometry without visual output comparison.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_31\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStCurvesPrimvars\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStCurvesPrimvars\"\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStCurvesPrimvars\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Alembic-based USD Diff Tests in CMake\nDESCRIPTION: Sets up conditional tests for Alembic file comparisons using the usddiff tool, which are only included if the Alembic plugin is enabled.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddiff/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (PXR_BUILD_ALEMBIC_PLUGIN)\n\tpxr_register_test(testUsdDiffToolVariousFormats3\n\t    PYTHON\n\t    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usddiff a.abc a.abc --noeffect\"\n\t    EXPECTED_RETURN_CODE 0\n\t    PRE_PATH\n\t\t${CMAKE_INSTALL_PREFIX}/bin\n\t)\n\n\t# ... more Alembic-related tests ...\n\nelse()\n    message(STATUS \"Skipping alembic-based usddiff tests because PXR_BUILD_ALEMBIC_PLUGIN=OFF\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Interactive Anti-Regression Demo in Python\nDESCRIPTION: Instructions for running the interactive demo script regressDemo.py that demonstrates various anti-regression strategies. Requires Python with Ts module and either PySide6 or PySide2.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/doxygen/regression.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nregressDemo.py  # Run from ts/script directory\n```\n\n----------------------------------------\n\nTITLE: Composing Prim /RefPayload in USD\nDESCRIPTION: Shows the composition results for the prim path `/RefPayload`. It involves references (`ref.sdf`, `ref_sub.sdf`) and a payload (`B.sdf`). The output details the final prim stack and the accumulated time offsets from the root, reference, sublayer, and payload.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicTimeOffset.testenv/baseline/compositionResults_BasicTimeOffset.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </RefPayload>\n\nPrim Stack:\n    root.sdf             /RefPayload\n    ref_sub.sdf          /Ref\n    B.sdf                /Model\n\nTime Offsets:\n    root.sdf             /RefPayload     root       (offset=0.00, scale=1.00)\n    ref.sdf              /Ref            reference  (offset=10.00, scale=1.00)\n        ref_sub.sdf                      sublayer   (offset=20.00, scale=1.00)\n    B.sdf                /Model          payload    (offset=30.00, scale=1.00)\n\nChild names:\n     ['Anim', 'Frame']\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Layer Stack and Composition Results\nDESCRIPTION: A comprehensive view of USD composition results showing layer stacks, prim stacks, child names, prohibited child names, and property stacks across multiple paths in the scene hierarchy. This demonstrates inheritance and relocation patterns between prims.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsAndRelocates.testenv/baseline/compositionResults_TrickyInheritsAndRelocates.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLoading @TrickyInheritsAndRelocates/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </Group>\n\nPrim Stack:\n    root.sdf             /Group\n    group.sdf            /Group\n\nChild names:\n     ['Model_Renamed']\n\nProhibited child names:\n     ['Model']\n\n------------------------------------------------------------------------\nResults for composing </Group/Model_Renamed>\n\nPrim Stack:\n    root.sdf             /Group/Model_Renamed\n    group.sdf            /Group/Model\n    model.sdf            /Model\n\nChild names:\n     ['A', 'B', 'Scope']\n\n------------------------------------------------------------------------\nResults for composing </Group/Model_Renamed/A>\n\nPrim Stack:\n    root.sdf             /Group/Model_Renamed/A\n    model.sdf            /Model/A\n\nProperty names:\n     ['a_target']\n\nProperty stacks:\n/Group/Model_Renamed/A.a_target:\n    root.sdf             /Group/Model_Renamed/A.a_target\n\n------------------------------------------------------------------------\nResults for composing </Group/Model_Renamed/B>\n\nPrim Stack:\n    root.sdf             /Group/Model_Renamed/B\n    root.sdf             /Group/Model_Renamed/A\n    model.sdf            /Model/B\n    model.sdf            /Model/A\n\nProperty names:\n     ['a_target', 'b_target']\n\nProperty stacks:\n/Group/Model_Renamed/B.a_target:\n    root.sdf             /Group/Model_Renamed/A.a_target\n/Group/Model_Renamed/B.b_target:\n    root.sdf             /Group/Model_Renamed/B.b_target\n\n------------------------------------------------------------------------\nResults for composing </Group/Model_Renamed/Scope>\n\nPrim Stack:\n    root.sdf             /Group/Model_Renamed/B\n    root.sdf             /Group/Model_Renamed/A\n    model.sdf            /Model/Scope\n    model.sdf            /Model/B\n    model.sdf            /Model/A\n\nProperty names:\n     ['a_target', 'b_target']\n\nProperty stacks:\n/Group/Model_Renamed/Scope.a_target:\n    root.sdf             /Group/Model_Renamed/A.a_target\n/Group/Model_Renamed/Scope.b_target:\n    root.sdf             /Group/Model_Renamed/B.b_target\n\n------------------------------------------------------------------------\nResults for composing </Rig>\n\nPrim Stack:\n    root.sdf             /Rig\n    rig.sdf              /Rig\n\nChild names:\n     ['Anim']\n\nProhibited child names:\n     ['RigClass']\n\n------------------------------------------------------------------------\nResults for composing </Rig/Anim>\n\nPrim Stack:\n    root.sdf             /Rig/Anim\n\nChild names:\n     ['RigClass', 'RigInstance', 'BadRigInstance']\n\n------------------------------------------------------------------------\nResults for composing </Rig/Anim/RigClass>\n\nPrim Stack:\n    root.sdf             /Rig/Anim/RigClass\n    rig.sdf              /Rig/RigClass\n\nProperty names:\n     ['r_target']\n\nProperty stacks:\n/Rig/Anim/RigClass.r_target:\n    root.sdf             /Rig/Anim/RigClass.r_target\n\n------------------------------------------------------------------------\nResults for composing </Rig/Anim/RigInstance>\n\nPrim Stack:\n    root.sdf             /Rig/Anim/RigInstance\n    root.sdf             /Rig/Anim/RigClass\n    rig.sdf              /Rig/RigClass\n\nProperty names:\n     ['r_target']\n\nProperty stacks:\n/Rig/Anim/RigInstance.r_target:\n    root.sdf             /Rig/Anim/RigClass.r_target\n\n------------------------------------------------------------------------\nResults for composing </Rig/Anim/BadRigInstance>\n\nPrim Stack:\n    root.sdf             /Rig/Anim/BadRigInstance\n```\n\n----------------------------------------\n\nTITLE: Configuring TsRegressionPreventer Settings in YAML\nDESCRIPTION: Defines settings for the TsRegressionPreventer, likely used for testing spline behavior. It specifies adjustment flags (e.g., 'adjusted', 'preActiveAdjusted') and widths for pre and post segments, indicating whether and how adjustments were applied during regression testing.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReplaceLimitActive_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: false\n  havePreSegment: true\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.250000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.250000\n  havePostSegment: true\n  postActiveAdjusted: false\n  postActiveAdjustedWidth: 0.250000\n  postOppositeAdjusted: false\n  postOppositeAdjustedWidth: 0.250000\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hydra SceneIndex Test Build in CMake\nDESCRIPTION: Configures the build for testing Hydra's scene index system. This test verifies the functionality for indexing and accessing scene elements within the Hydra rendering framework.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testHdSceneIndex\n   LIBRARIES\n       hd\n       sdf\n       tf\n\n   CPPFILES\n       testenv/testHdSceneIndex.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tests for USD Project\nDESCRIPTION: Conditionally sets up the testing framework if tests are enabled in the build configuration.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif (PXR_BUILD_TESTS)\n    pxr_tests_prologue()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Logging Error in Scene Index Prim Hierarchy Management\nDESCRIPTION: Debug log output from HdsiDebuggingSceneIndex showing two errors: a prim being added without proper notification, and a child prim path being incorrectly included in the results of GetChildPrimPaths without following proper parent-child update sequence.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdsi/testenv/testHdsiDebuggingSceneIndex/baseline/debuggingSceneIndex.txt#2025-04-23_snippet_0\n\nLANGUAGE: log\nCODE:\n```\n[HdsiDebuggingSceneIndex] Instantiated for Scene index adding prim without notice.\n[HdsiDebuggingSceneIndex] ERROR: GetChildPrimPaths(/) includes /A even though the prim was not included in a previous call to GetChildPrimPaths or its parent was deleted without it being re-added.\n```\n\n----------------------------------------\n\nTITLE: Logical AND Operation in USDA\nDESCRIPTION: Demonstrates logical AND operation between boolean values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/variable_expressions.rst#2025-04-23_snippet_11\n\nLANGUAGE: usda\nCODE:\n```\nand( ${BOOL_VAR}, True )\n```\n\n----------------------------------------\n\nTITLE: Installing USD MaterialX Test Directories\nDESCRIPTION: Configures installation of test environment directories for USD MaterialX tests including discovery, file format, and parser test environments.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdMtlx/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdMtlxDiscovery.testenv\n    DEST testUsdMtlxDiscovery\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdMtlxFileFormat.testenv\n    DEST testUsdMtlxFileFormat\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdMtlxParser.testenv\n    DEST testUsdMtlxParser\n)\n```\n\n----------------------------------------\n\nTITLE: Face Rig Prim Composition\nDESCRIPTION: Composition results showing the prim stack and child names for the main face rig\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpookyInheritsInSymmetricBrowRig.testenv/baseline/compositionResults_TrickySpookyInheritsInSymmetricBrowRig.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /FaceRig\n\nChild names:\n     ['BrowRig', 'Anim']\n```\n\n----------------------------------------\n\nTITLE: Defining the testRmanUsdValidators Test Executable in CMake\nDESCRIPTION: Uses the `pxr_build_test` CMake function to define the `testRmanUsdValidators` test executable. It links the test against required USD libraries (`tf`, `usd`, `usdRender`, `usdRi`, `usdShade`, `usdValidation`) and specifies `testenv/testRmanUsdValidators.cpp` as the source file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/rmanUsdValidators/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_build_test(testRmanUsdValidators\n    LIBRARIES\n        tf\n        usd\n        usdRender\n        usdRi\n        usdShade\n        usdValidation\n    CPPFILES\n        testenv/testRmanUsdValidators.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: USD Composition Layer Stack\nDESCRIPTION: Displays the ordered list of layers contributing to the final scene composition, from strongest (top) to weakest (bottom). This stack determines how opinions (data values, metadata) from different layers are resolved during composition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer4.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nLayer Stack:\n     session.sdf\n     sess_s.sdf\n     sess_s_48tcps.sdf\n     sess_s_24tcps_12fps.sdf\n     sess_s_12fps.sdf\n     root_12fps.sdf\n     s.sdf\n     ss.sdf\n     ss_48tcps.sdf\n     ss_24tcps_12fps.sdf\n     ss_12fps.sdf\n     s_48tcps.sdf\n     ss.sdf\n     ss_48tcps.sdf\n     ss_24tcps_12fps.sdf\n     ss_12fps.sdf\n     s_24tcps_12fps.sdf\n     ss.sdf\n     ss_48tcps.sdf\n     ss_24tcps_12fps.sdf\n     ss_12fps.sdf\n     s_12fps.sdf\n     ss.sdf\n     ss_48tcps.sdf\n     ss_24tcps_12fps.sdf\n     ss_12fps.sdf\n\n------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: StartVert Bezier Spline Definition\nDESCRIPTION: Configuration for a StartVert Bezier spline with Held extrapolation. This creates a curve that starts vertically with tangent width of 0 at the first knot and has a tangent width of 1 at the second knot.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_104\n\nLANGUAGE: raw\nCODE:\n```\nSpline: StartVert\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 1\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Specifying Test Scripts for usdVol in CMake\nDESCRIPTION: This CMake snippet utilizes the `pxr_test_scripts` function (specific to the OpenUSD build system) to declare the Python test script `testenv/testUsdVolVolume.py` as associated with the `usdVol` module. This typically copies the script to a location accessible during testing.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdVol/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_test_scripts(\n    testenv/testUsdVolVolume.py\n)\n```\n\n----------------------------------------\n\nTITLE: Defining RegressivePreJ Spline in OpenUSD\nDESCRIPTION: Specifies a Bezier spline with Held pre and post extrapolation. It has two knots at times 0 and 1, with asymmetric tangent properties for curve shaping.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_82\n\nLANGUAGE: text\nCODE:\n```\nSpline: RegressivePreJ\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 2.5\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 2.5\n  pre-tan slope 0.6\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Example Console Output from Tiny Render Delegate\nDESCRIPTION: Sample terminal output showing the sequence of events generated when running Hydra with the Tiny render delegate, including creation, sync, execution, and destruction events.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/imaging/examples/hdTiny/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nCreating Tiny RenderDelegate\nCreate Tiny Rprim type=mesh id=/MyCube1\nCreate RenderPass with Collection=geometry\n* (multithreaded) Sync Tiny Mesh id=/MyCube1\n=> CommitResources RenderDelegate\n=> Execute RenderPass\nDestroy Tiny Rprim id=/MyCube1\nDestroying Tiny RenderDelegate\nDestroying renderPass\n```\n\n----------------------------------------\n\nTITLE: Applying CLI11 Patch for OpenUSD Integration\nDESCRIPTION: Instructions for updating the CLI11 header file with modifications specific to USD. This involves renaming the file and applying a custom patch.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/pxrCLI11/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n1. Generate the CLI11.hpp from the project, or grab it from the release.\n2. Move `CLI11.hpp` to `CLI11.h` in keeping with the rest of this repos standards.\n3. Apply `pxr-CLI11.patch` to update the header with modifications for USD.\n```\n\n----------------------------------------\n\nTITLE: Defining OpenUSD Schema Generation Components\nDESCRIPTION: This snippet outlines the structure of the OpenUSD schema generation, including public classes, Python module files, and resource files. It serves as a configuration for the usdGenSchema tool.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdHydra/generatedSchema.classes.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT.\n\n# Public Classes\ngenerativeProceduralAPI\ntokens\n\n# Python Module Files\nmodule.cpp\nwrapGenerativeProceduralAPI.cpp\nwrapTokens.cpp\n\n# Resource Files\ngeneratedSchema.usda\nplugInfo.json\nschema.usda:usdHydra/schema.usda\n```\n\n----------------------------------------\n\nTITLE: Registering the rmanOslParser Test using pxr_register_test in CMake\nDESCRIPTION: Registers a test named `testRmanOslParser` using the custom `pxr_register_test` CMake function. It specifies that the test is executed using Python, provides the command to run (the installed test script located via `${CMAKE_INSTALL_PREFIX}`), sets the expected successful return code to 0, and defines the `RMANTREE` and `RMAN_SHADERPATH` environment variables (using the paths calculated previously) that are required for the test execution environment.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/rmanOslParser/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testRmanOslParser\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testRmanOslParser\"\n    EXPECTED_RETURN_CODE 0\n    ENV\n      RMANTREE=${RMANTREE_PATH}\n      RMAN_SHADERPATH=${RMANSHADER_PATH}\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Directory Tree Structure in ASCII\nDESCRIPTION: This ASCII art displays a directory structure with a root directory, two child directories, and further subdirectories. It uses characters like '|', '`', and '--' to represent the hierarchy and connections between directories.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdtree/testenv/testUsdTreePayload/baseline/output_simple.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/\n `--root\n     |--child1\n     `--child2\n         |--subchild2a\n         |   `--subgrandchild2a1\n         `--subchild2b\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hydra Command Test Build in CMake\nDESCRIPTION: Configures the build for testing the Hydra command system. This test verifies the functionality of commands used to execute operations within the Hydra rendering framework.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testHdCommand\n   LIBRARIES\n       hd\n\n   CPPFILES\n       testenv/testHdCommand.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Shade Library Build\nDESCRIPTION: Defines the core USD Shade library build configuration including dependencies, public classes, and module files. Sets up the library with required components like TBB and various USD modules.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdShade/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usdShade)\n\npxr_library(usdShade\n    INCLUDE_SCHEMA_FILES\n\n    LIBRARIES\n        tf\n        vt\n        js\n        sdf\n        sdr\n        usd\n        usdGeom\n        ${TBB_tbb_LIBRARY}\n    \n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n\n    PUBLIC_CLASSES\n        connectableAPIBehavior\n        input\n        output\n        shaderDefParser\n        shaderDefUtils\n        udimUtils\n        utils\n\n    PUBLIC_HEADERS\n        api.h\n        types.h\n\n    PYMODULE_CPPFILES\n        wrapInput.cpp\n        wrapOutput.cpp\n        wrapShaderDefParser.cpp\n        wrapShaderDefUtils.cpp\n        wrapTypes.cpp\n        wrapUdimUtils.cpp\n        wrapUtils.cpp\n\n    PYMODULE_FILES\n        __init__.py\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: USD Prim Composition Results for /A1\nDESCRIPTION: Displays the prim stack composition results for prim path /A1, showing layer contributions and child prims.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantInPayload.testenv/baseline/compositionResults_TrickyVariantInPayload.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nPrim Stack:\n    root.sdf             /A1\n    model.sdf            /A\n\nChild names:\n     ['B']\n```\n\n----------------------------------------\n\nTITLE: USD Property Stack Definition\nDESCRIPTION: Shows how properties are composed across layers, including the property path and contributing layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyRelocationOfPrimFromPayload.testenv/baseline/compositionResults_TrickyRelocationOfPrimFromPayload.txt#2025-04-23_snippet_2\n\nLANGUAGE: usd\nCODE:\n```\nProperty stacks:\n/PayloadedModel.doc:\n    model_payload.sdf    /Model.doc\n```\n\n----------------------------------------\n\nTITLE: Layer Composition Results for /S3\nDESCRIPTION: Shows the composition structure for /S3 primitive with associated sublayers and their timing configurations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer2.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </S3>\n\nPrim Stack:\n    s_24tcps_12fps.sdf   /S3\n\nTime Offsets:\n    session_24fps.sdf    /S3             root       (offset=0.00, scale=1.00)\n        session_24fps.sdf                sublayer   (offset=0.00, scale=2.00)\n        sess_s.sdf                       sublayer   (offset=20.00, scale=4.00)\n```\n\n----------------------------------------\n\nTITLE: USD Relocate Error: Source is Root Prim\nDESCRIPTION: Error message showing an invalid USD relocate operation originating from a root prim (`/Model_4`). Root-level prims in the scene hierarchy cannot be the source of a relocate operation; relocates are intended for restructuring within or between branches below the root.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInvalidAuthoredRelocates.testenv/baseline/compositionErrors_ErrorInvalidAuthoredRelocates.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nRelocation from </Model_4> to </Model_5> authored at @ErrorInvalidAuthoredRelocates/root.sdf@</> is invalid and will be ignored: Root prims cannot be the source of a relocate.\n```\n\n----------------------------------------\n\nTITLE: Defining Tapered Capsule Geometry\nDESCRIPTION: Complete definition of a tapered capsule shape with varying radii, height and topology information including points and mesh connectivity.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/geomUtil/testenv/testMeshGenerators/baseline/generatedMeshes_closed.txt#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nbottomRadius = 0.5, topRadius = 0.3, height = 2, sweep = 360\n\nTopology:\n  (rightHanded, catmullClark, [...], [...], [])\n\nPoints:\n  [(0, 0, -1.5524938), (0.20380278, 0, -1.5093086), ..., (0, 0, 1.2714963)]\n\nNormals:\n```\n\n----------------------------------------\n\nTITLE: Regression Preventer Configuration\nDESCRIPTION: Configuration settings for the TsRegressionPreventer showing adjustment parameters for pre and post segments\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/InitiallyRegressiveLimitOpposite_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: true\n  havePreSegment: false\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.000000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.000000\n  havePostSegment: true\n  postActiveAdjusted: true\n  postActiveAdjustedWidth: 14.666557\n  postOppositeAdjusted: true\n  postOppositeAdjustedWidth: 3.666557\n```\n\n----------------------------------------\n\nTITLE: Converting Colors to Linear Space for Computations in C++\nDESCRIPTION: Demonstrates the best practice of performing color computations in linear color space, including converting to and from linear space as needed.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/doxygen/architecture-guides/color_programmers_guide.md#2025-04-23_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n// Convert to linear if needed before computation\nGfColorSpace srcSpace = UsdColorSpaceAPI::ComputeColorSpace(attr);\nGfColorSpace linearSpace = GfColorSpace(GfColorSpaceNames->LinearRec2020);\nGfVec3f linearColor = srcSpace.Convert(linearSpace, originalColor);\n\n// Perform computation...\nGfVec3f result = /* computation */;\n\n// Convert back if needed\nGfVec3f displayColor = linearSpace.Convert(displaySpace, result);\n```\n\n----------------------------------------\n\nTITLE: Setting Package Prefix and Name for USD in CMake\nDESCRIPTION: This snippet defines two CMake variables: `PXR_PREFIX` is set to \"pxr/usd\" and `PXR_PACKAGE` is set to \"usd\". These variables are likely used throughout the build process to define paths, namespaces, or identifiers related to the USD library within the Pixar OpenUSD project structure.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdgenschemafromsdr/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usd)\n```\n\n----------------------------------------\n\nTITLE: Registering Platform-Specific Tests in CMake\nDESCRIPTION: Registers tests that are only applicable on specific platforms. In this example, the TfMallocTag test is only registered on Linux systems, with additional environment configuration.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif (CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n    pxr_register_test(TfMallocTag\n        ENV GLIBCXX_FORCE_NEW=1\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTf TfMallocTag\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring usdviewq Test Execution and Conditions - CMake\nDESCRIPTION: This snippet initializes key variables, checks for required build flags, and sets up a 'testusdview' Python binary with dependencies on 'usdviewq'. It uses conditional blocks to prevent test execution in unsupported scenarios (e.g. USDVIEW not built, or headless mode enabled), and includes commentary about unsupported configurations for static builds with plugin-related tests. There are no third-party dependencies beyond standard CMake and the internal PXr USD build environment. The primary expected input is the CMake build context, with conditionals controlling output in test registration. Outputs are determined by whether the tests are enabled or skipped.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usdImaging)\nset(PXR_PACKAGE usdviewq)\n\nif (NOT PXR_BUILD_USDVIEW)\n    return()\nendif()\n\npxr_python_bin(testusdview\n    DEPENDENCIES\n        usdviewq\n)\n\nif (${PXR_HEADLESS_TEST_MODE})\n    message(STATUS \"Skipping ${PXR_PACKAGE} tests because PXR_HEADLESS_TEST_MODE is ON\")\n    return()\nendif()\n\n# testusdview imaging tests require python and plugin mechanism which we do not\n# support for static build configurations due to potential conflict in client\n\n```\n\n----------------------------------------\n\nTITLE: Search Context-Dependent Path in USDZ\nDESCRIPTION: Demonstrates a search context-dependent path that would be resolved according to the search path rules in a USDZ package.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/spec_usdz.rst#2025-04-23_snippet_3\n\nLANGUAGE: usda\nCODE:\n```\n@materials/metals.usd@\n```\n\n----------------------------------------\n\nTITLE: CenterVertical Bezier Spline Specification\nDESCRIPTION: Technical specification for a CenterVertical Bezier spline with two knots. The spline uses Bezier curve type with Held extrapolation and symmetric tangent slopes and widths between knots.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_29\n\nLANGUAGE: text\nCODE:\n```\nSpline: CenterVertical\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 1\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 1\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </RefToRoot/B/C/_Z> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </RefToRoot/B/C/_Z>. The prim stack combines /Root/B/C/_Z from 'root.sdf' and /Ref/C/_Z from 'ref.sdf', mirroring </Root/B/C/_Z>. It lists 'prop' as a property, with contributions from both layers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </RefToRoot/B/C/_Z>\n\nPrim Stack:\n    root.sdf             /Root/B/C/_Z\n    ref.sdf              /Ref/C/_Z\n\nProperty names:\n     ['prop']\n\nProperty stacks:\n/RefToRoot/B/C/_Z.prop:\n    root.sdf             /Root/B/C/_Z.prop\n    ref.sdf              /Ref/C/_Z.prop\n```\n\n----------------------------------------\n\nTITLE: Running OpenUSD Tests with CTest (Bash)\nDESCRIPTION: Commands for running OpenUSD tests using CTest, demonstrating how to run all tests in a release build with verbose output and how to run tests matching a specific pattern.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/BUILDING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nctest -C Release -V\n```\n\nLANGUAGE: bash\nCODE:\n```\nctest -C Release -R testUsdShade -V\n```\n\n----------------------------------------\n\nTITLE: Setting Default Anti-Regression Authoring Mode for USD Splines\nDESCRIPTION: Build arguments for specifying the default anti-regression authoring mode for USD splines, which affects how keyframe animation handles backwards-in-time shapes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/BUILDING.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n--build-args USD,\"-DPXR_TS_DEFAULT_ANTI_REGRESSION_AUTHORING_MODE=TsAntiRegression...\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n-DPXR_TS_DEFAULT_ANTI_REGRESSION_AUTHORING_MODE=TsAntiRegression...\n```\n\n----------------------------------------\n\nTITLE: Composing Prim /PayloadRefPayload in USD\nDESCRIPTION: Shows composition results for `/PayloadRefPayload`, involving nested payloads. The first payload comes from `ref.sdf` (with sublayer `ref_sub.sdf`), and the second from `B.sdf`. Time offsets reflect contributions from root and both payload arcs, including scale factors.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicTimeOffset.testenv/baseline/compositionResults_BasicTimeOffset.txt#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </PayloadRefPayload>\n\nPrim Stack:\n    root.sdf             /PayloadRefPayload\n    ref_sub.sdf          /Ref\n    B.sdf                /Model\n\nTime Offsets:\n    root.sdf             /PayloadRefPayload root       (offset=0.00, scale=1.00)\n    ref.sdf              /Ref            payload    (offset=10.00, scale=2.00)\n        ref_sub.sdf                      sublayer   (offset=20.00, scale=1.00)\n    B.sdf                /Model          payload    (offset=50.00, scale=2.00)\n\nChild names:\n     ['Anim', 'Frame']\n```\n\n----------------------------------------\n\nTITLE: Variant Selections Configuration\nDESCRIPTION: Lists the active variant selections for the asset including shader binding and shading variants.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantSelectionInVariant.testenv/baseline/compositionResults_TrickyVariantSelectionInVariant.txt#2025-04-23_snippet_2\n\nLANGUAGE: usd\nCODE:\n```\nVariant Selections:\n    {shaderBindingVariant = Wet}\n    {shadingVariant = Axel}\n```\n\n----------------------------------------\n\nTITLE: Displaying Time Offsets for /SS3 in OpenUSD\nDESCRIPTION: Shows the time offset and scale configurations for the /SS3 prim composition, displaying how time transformations are applied across the layer stack including root, sublayers, and references.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecond4.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nTime Offsets:\n    root_12fps.sdf       /SS3            root       (offset=0.00, scale=1.00)\n        s.sdf                            sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=4.00)\n        s_48tcps.sdf                     sublayer   (offset=10.00, scale=0.50)\n        ss.sdf                           sublayer   (offset=15.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=15.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=15.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=15.00, scale=4.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=4.00)\n        s_12fps.sdf                      sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=4.00)\n    ref.sdf              /Ref            reference  (offset=40.00, scale=4.00)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.50)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=2.00)\n    ref_48tcps.sdf       /Ref            reference  (offset=40.00, scale=2.00)\n        ref_s.sdf                        sublayer   (offset=0.00, scale=2.00)\n        ref_s_24tcps_12fps.sdf           sublayer   (offset=0.00, scale=2.00)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=4.00)\n    ref_24tcps_12fps.sdf /Ref            reference  (offset=40.00, scale=4.00)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.50)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=2.00)\n    ref_12fps.sdf        /Ref            reference  (offset=40.00, scale=8.00)\n        ref_s.sdf                        sublayer   (offset=0.00, scale=0.50)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.25)\n        ref_s_24tcps_12fps.sdf           sublayer   (offset=0.00, scale=0.50)\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Spline with LoopReset Extrapolation\nDESCRIPTION: Specifies an animation spline with Bezier curve type, LoopReset extrapolation, and three knots with their respective tangent information.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_64\n\nLANGUAGE: plaintext\nCODE:\n```\nSpline: ExtrapLoopReset\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap LoopReset\n  post extrap LoopReset\nKnot:\n  value type double\n  curve type Bezier\n  time 100\n  value 10\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 3\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 105\n  value 20\n  next interp Linear\n  pre-tan width 3\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 110\n  value 15\n  next interp Held\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Conditional Platform Skip Logic for Tests in CMake\nDESCRIPTION: This CMake code snippet uses conditional statements to check if the build is occurring on an Apple or Windows platform. If so, it emits a status message indicating that tests in the current package are not supported and exits from the script. The main dependency is CMake itself, and the variables ${PXR_PACKAGE} need to be defined elsewhere. No input/output files are involved; the output is a message and early script exit.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif (APPLE)\n    message(STATUS \"Skipping ${PXR_PACKAGE} tests because they are currently unsupported on macOS\")\n    return()\nendif()\n\nif (WIN32)\n    message(STATUS \"Skipping ${PXR_PACKAGE} tests because they are currently unsupported on Windows\")\n    return()\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /SS1 in USD Scene\nDESCRIPTION: The composition results for the /SS1 primitive, showing both the prim stack (inheritance chain) and time offsets. This demonstrates how multiple SDF layers combine to form the final prim with their respective timing adjustments.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer1.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </SS1>\n\nPrim Stack:\n    ss.sdf               /SS1\n    ss.sdf               /SS1\n    ss.sdf               /SS1\n    ss.sdf               /SS1\n    ref.sdf              /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_48tcps.sdf       /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_24tcps_12fps.sdf /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_12fps.sdf        /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n\nTime Offsets:\n    session_48tcps.sdf   /SS1            root       (offset=0.00, scale=1.00)\n        sess_s.sdf                       sublayer   (offset=10.00, scale=4.00)\n        sess_s_48tcps.sdf                sublayer   (offset=10.00, scale=2.00)\n        sess_s_24tcps_12fps.sdf          sublayer   (offset=10.00, scale=4.00)\n        sess_s_12fps.sdf                 sublayer   (offset=10.00, scale=8.00)\n        root_24tcps_12fps.sdf            sublayer   (offset=0.00, scale=2.00)\n        s.sdf                            sublayer   (offset=20.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=60.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=60.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=60.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=60.00, scale=16.00)\n        s_48tcps.sdf                     sublayer   (offset=20.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=40.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=40.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=40.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=40.00, scale=16.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=20.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=60.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=60.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=60.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=60.00, scale=16.00)\n        s_12fps.sdf                      sublayer   (offset=20.00, scale=8.00)\n        ss.sdf                           sublayer   (offset=100.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=100.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=100.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=100.00, scale=16.00)\n    ref.sdf              /Ref            reference  (offset=140.00, scale=16.00)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.50)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=2.00)\n    ref_48tcps.sdf       /Ref            reference  (offset=140.00, scale=8.00)\n        ref_s.sdf                        sublayer   (offset=0.00, scale=2.00)\n        ref_s_24tcps_12fps.sdf           sublayer   (offset=0.00, scale=2.00)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=4.00)\n    ref_24tcps_12fps.sdf /Ref            reference  (offset=140.00, scale=16.00)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.50)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=2.00)\n    ref_12fps.sdf        /Ref            reference  (offset=140.00, scale=32.00)\n        ref_s.sdf                        sublayer   (offset=0.00, scale=0.50)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.25)\n        ref_s_24tcps_12fps.sdf           sublayer   (offset=0.00, scale=0.50)\n```\n\n----------------------------------------\n\nTITLE: OpenUSD Schema File Structure\nDESCRIPTION: Directory structure and file listing for OpenUSD schema generation showing public classes, Python module files, and resource files. The file is auto-generated and should not be edited manually.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdRi/generatedSchema.classes.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT.\n\n# Public Classes\nmaterialAPI\nsplineAPI\nstatementsAPI\ntokens\n\n# Python Module Files\nmodule.cpp\nwrapMaterialAPI.cpp\nwrapSplineAPI.cpp\nwrapStatementsAPI.cpp\nwrapTokens.cpp\n\n# Resource Files\ngeneratedSchema.usda\nplugInfo.json\nschema.usda:usdRi/schema.usda\n```\n\n----------------------------------------\n\nTITLE: Cloning a fork of OpenUSD repository using Git\nDESCRIPTION: Command to clone your personal fork of the OpenUSD repository to your local machine. This is the first step in the recommended Git workflow for contributing to OpenUSD.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/contributing_to_usd.rst#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/you/USD.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Tests for USD Physics Validation\nDESCRIPTION: Sets up tests for the usdPhysicsValidators library. It registers Python test scripts and configures test execution parameters, expecting a successful return code of 0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/usdPhysicsValidators/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_test_scripts(\n    testenv/testUsdPhysicsValidation.py\n)\n\npxr_register_test(testUsdPhysicsValidation\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdPhysicsValidation\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Composition Result for /Inherits_1\nDESCRIPTION: Shows the resulting prim stack after composing the prim at path '/Inherits_1'. The prim originates solely from the 'root.sdf' layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicSpecializesAndInherits.testenv/baseline/compositionResults_BasicSpecializesAndInherits.txt#2025-04-23_snippet_1\n\nLANGUAGE: log\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Inherits_1>\n\nPrim Stack:\n    root.sdf             /Inherits_1\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Diff Tests for Directories in CMake\nDESCRIPTION: Sets up tests to verify the usddiff tool's functionality when comparing directories and mixed file/directory inputs.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddiff/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdDiffWithDirectories1\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usddiff --noeffect a/ a/\"\n    EXPECTED_RETURN_CODE 0\n    PRE_PATH\n        ${CMAKE_INSTALL_PREFIX}/bin\n)\n\n# ... more directory comparison tests ...\n```\n\n----------------------------------------\n\nTITLE: Secondary Character Composition with No Tail Variant\nDESCRIPTION: Shows composition results for a second character instance using a different tail variant selection (None). Demonstrates how variant selection affects the resulting prim hierarchy.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyRelocationOfPrimFromVariant.testenv/baseline/compositionResults_TrickyRelocationOfPrimFromVariant.txt#2025-04-23_snippet_2\n\nLANGUAGE: usd\nCODE:\n```\nResults for composing </Char2>\n\nPrim Stack:\n    root.sdf             /Char2\n    CharRig.sdf          /CharRig2\n    CharRig.sdf          /CharRig2{TailRigVersion=None}\n\nVariant Selections:\n    {TailRigVersion = None}\n\nChild names:\n     ['Anim']\n```\n\n----------------------------------------\n\nTITLE: Registering OpenGL and GLSL Shader Tests\nDESCRIPTION: Registers tests for HdSt's OpenGL functionality and GLSL shader operations including instance transformations and matrix determinants. These tests verify shader correctness for various operations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_38\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStGL\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStGL\"\n    EXPECTED_RETURN_CODE 0\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStGLSL_instanceTransform0\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStGLSL testHarness.glslfx instanceTransform0\"\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStGLSL\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStGLSL_instanceTransform1\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStGLSL testHarness.glslfx instanceTransform1\"\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStGLSL\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStGLSL_instanceTransform2\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStGLSL testHarness.glslfx instanceTransform2\"\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStGLSL\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStGLSL_instanceTransform3\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStGLSL testHarness.glslfx instanceTransform3\"\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStGLSL\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStGLSL_determinant\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStGLSL testHarness.glslfx determinant\"\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStGLSL\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Test Directories for USD Validation\nDESCRIPTION: Installs test directories for validation context and registry tests, copying source files to their destination directories.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/usdValidation/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdValidationContext\n    DEST testUsdValidationContext\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdValidationContext\n    DEST testUsdValidationContextPy\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdValidationRegistry\n    DEST testUsdValidationRegistry\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Bold S-Curve Bezier Spline in Text Format\nDESCRIPTION: Specifies a bold S-curve Bezier spline with two knot points. The curve has asymmetric tangent widths, creating a pronounced S-shape with a faster transition in the middle.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_26\n\nLANGUAGE: text\nCODE:\n```\nSpline: BoldS\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 1.25\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 0.5\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Spline Data Structure with Specific Knot Parameters - Python\nDESCRIPTION: This Python snippet constructs a spline data object, instantiating extrapolation behaviors and defining a list of knot positions, slopes, segment lengths, and automation flags using floating-point values in hexadecimal form. Dependencies include the Ts.TsTest_SplineData class and its nested types, and accurate float decoding using fromhex. Inputs are the Hermite/extrapolation modes and a list of Knot objects with precise values; output is a fully-defined spline object ready for further evaluation or serialization in regression tests.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReorderLimitActive_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('-0x1p-2'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.8p+1'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('-0x1p-2'), postSlope = float.fromhex('-0x1p-2'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.999999999999ap+1'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x1p-2'), postSlope = float.fromhex('0x1p-2'), preLen = float.fromhex('0x1.0c1524411f46fp-3'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x1p-2'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Configuring cameraUtil Package in OpenUSD CMake Build System\nDESCRIPTION: This CMake script defines the build configuration for the cameraUtil package in the OpenUSD imaging library. It specifies dependencies on tf and gf libraries, defines public classes and headers, sets up Python bindings, and configures tests.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/cameraUtil/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE cameraUtil)\n\npxr_library(cameraUtil\n    LIBRARIES\n        tf\n        gf\n\n    PUBLIC_CLASSES\n        conformWindow\n        framing\n        screenWindowParameters\n        \n    PUBLIC_HEADERS\n        api.h\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapConformWindow.cpp\n        wrapFraming.cpp\n        wrapScreenWindowParameters.cpp\n\n    PYMODULE_FILES\n        __init__.py\n)\n\npxr_test_scripts(\n    testenv/testCameraUtil.py\n)\n\npxr_register_test(testCameraUtil\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testCameraUtil\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring USD UI Library Build\nDESCRIPTION: Sets up the main USD UI library build configuration including dependencies, headers, and Python module files. Defines core library dependencies like tf, vt, sdf, and usd.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUI/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usdUI)\n\npxr_library(usdUI\n    INCLUDE_SCHEMA_FILES\n\n    LIBRARIES\n        tf\n        vt\n        sdf\n        usd\n\n    PUBLIC_HEADERS\n        api.h\n    \n    PYMODULE_FILES\n        __init__.py\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hydra Types Test Build in CMake\nDESCRIPTION: Configures the build for testing Hydra's type system. This test verifies the data types and type management functionality within the Hydra rendering framework.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/CMakeLists.txt#2025-04-23_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testHdTypes\n   LIBRARIES\n       hd\n\n   CPPFILES\n       testenv/testHdTypes.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Sphinx Documentation Files using genSchemaDocs.py\nDESCRIPTION: This command demonstrates how to use the genSchemaDocs.py tool to generate Sphinx documentation files from USD schema user documentation. It specifies the input directory, output path, and includes the -t flag for generating a table of contents.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npython python/genSchemaDocs.py ../pxr/usd/usdVol/userDocs user_guides/schemas -t\n```\n\n----------------------------------------\n\nTITLE: Composing USD Bob Body Prim\nDESCRIPTION: Shows the prim stack for the bob_body component, referenced from the geo.sdf layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantWeakerSelection2.testenv/baseline/compositionResults_TrickyVariantWeakerSelection2.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nPrim Stack:\n    geo.sdf              /bob_root_cube/bob_body\n```\n\n----------------------------------------\n\nTITLE: Adding References in USD\nDESCRIPTION: Adds a reference to an external USD file (cone2.usda) in the scene.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddiff/testenv/testDiffToolIterateUsdz/baseline/iterate_usd.txt#2025-04-23_snippet_1\n\nLANGUAGE: USD\nCODE:\n```\n+    add references = @./cone2.usda@\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for /ExternalReferences/Child\nDESCRIPTION: Displays the composition results for the child prim path `/ExternalReferences/Child`. It shows the prim stack indicating contributions from `root.sdf` and `ref.sdf`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyListEditedTargetPaths.testenv/baseline/compositionResults_TrickyListEditedTargetPaths.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </ExternalReferences/Child>\n\nPrim Stack:\n    root.sdf             /ExternalReferences/Child\n    ref.sdf              /Ref/Child\n```\n\n----------------------------------------\n\nTITLE: Defining SubsetMaterialBindFamilyName Validator\nDESCRIPTION: Documentation for a validator that ensures geometry subsets with authored material bindings have the 'materialBind' family name for consistent material binding.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n[usdShadeValidators:SubsetMaterialBindFamilyName]:\n\tDoc: Geom subsets with authored material bindings should have the 'materialBind' family name.\n\tKeywords: UsdShadeValidators, UsdGeomSubset\n\tSchemaTypes: UsdGeomSubset\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Defining USD Scene Hierarchy Structure\nDESCRIPTION: This snippet outlines a USD scene structure using a tree-like representation. It shows a root scope with nested child elements, demonstrating various prim types, kinds, and metadata.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdtree/testenv/testUsdTreePayload/baseline/output_fls.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\n/\n `--root [def Scope] (kind = assembly)\n     |--child1 [def] (kind = group)\n     `--child2 [def Xform] (kind = group)\n         |--subchild2a [def Xform] (kind = component)\n         |   `--subgrandchild2a1 [def Cube] (kind = subcomponent)\n         `--subchild2b [def Xform] (active = false, kind = component)\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Recursive Payloads Example Plugin in CMake\nDESCRIPTION: Sets up the plugin configuration including libraries, source files, and resource files. It also configures test scripts and installation directories for the plugin.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/examples/usdRecursivePayloadsExample/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usdRecursivePayloadsExample)\n\npxr_plugin(${PXR_PACKAGE}\n    LIBRARIES\n        tf\n        gf\n        sdf\n        usd\n\n    CPPFILES\n        fileFormat.cpp\n\n    RESOURCE_FILES\n        plugInfo.json\n        root.usda:usdRecursivePayloadsExample/root.usda\n        params.usda:usdRecursivePayloadsExample/params.usda\n        payload.usda:usdRecursivePayloadsExample/payload.usda\n        cone.usdrecursivepayloadsexample:usdRecursivePayloadsExample/cone.usdrecursivepayloadsexample\n        sphere.usdrecursivepayloadsexample:usdRecursivePayloadsExample/sphere.usdrecursivepayloadsexample\n\n    DISABLE_PRECOMPILED_HEADERS\n)\n\npxr_test_scripts(\n     testenv/testUsdRecursivePayloadsExample.py\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdRecursivePayloadsExample\n    DEST testUsdRecursivePayloadsExample\n)\n```\n\n----------------------------------------\n\nTITLE: Creating TsTest_SplineData Object in OpenUSD Python API\nDESCRIPTION: This snippet demonstrates the creation of a TsTest_SplineData object with detailed configuration including spline type, extrapolation methods, and knot data using hexadecimal float representations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/NoopKeepRatio_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.999999999999ap-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.999999999999ap-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Index Results for Torus Topology (GPU Subdivision Disabled)\nDESCRIPTION: This snippet displays the computed face vertex indices resulting from applying the Catmull-Clark subdivision scheme to a torus topology without GPU acceleration (GPU subdivision = 0). The list contains integer indices referencing vertices.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStSubdivisionOsd3/baseline/testHdStSubdivisionOsd3-Run1-stdout.txt#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n[17, 48, 32, 51, 48, 16, 49, 32, 32, 49, 20, 50, 51, 32, 50, 21, 18, 52, 33, 54, 52, 17, 51, 33, 33, 51, 21, 53, 54, 33, 53, 22, 19, 55, 34, 57, 55, 18, 54, 34, 34, 54, 22, 56, 57, 34, 56, 23, 16, 58, 35, 49, 58, 19, 57, 35, 35, 57, 23, 59, 49, 35, 59, 20, 21, 50, 36, 62, 50, 20, 60, 36, 36, 60, 24, 61, 62, 36, 61, 25, 22, 53, 37, 64, 53, 21, 62, 37, 37, 62, 25, 63, 64, 37, 63, 26, 23, 56, 38, 66, 56, 22, 64, 38, 38, 64, 26, 65, 66, 38, 65, 27, 20, 59, 39, 60, 59, 23, 66, 39, 39, 66, 27, 67, 60, 39, 67, 24, 25, 61, 40, 70, 61, 24, 68, 40, 40, 68, 28, 69, 70, 40, 69, 29, 26, 63, 41, 72, 63, 25, 70, 41, 41, 70, 29, 71, 72, 41, 71, 30, 27, 65, 42, 74, 65, 26, 72, 42, 42, 72, 30, 73, 74, 42, 73, 31, 24, 67, 43, 68, 67, 27, 74, 43, 43, 74, 31, 75, 68, 43, 75, 28, 29, 69, 44, 77, 69, 28, 76, 44, 44, 76, 16, 48, 77, 44, 48, 17, 30, 71, 45, 78, 71, 29, 77, 45, 45, 77, 17, 52, 78, 45, 52, 18, 31, 73, 46, 79, 73, 30, 78, 46, 46, 78, 18, 55, 79, 46, 55, 19, 28, 75, 47, 76, 75, 31, 79, 47, 47, 79, 19, 58, 76, 47, 58, 16]\n```\n\n----------------------------------------\n\nTITLE: Registering Python Module Tests with Conditional Compilation\nDESCRIPTION: Registers Python-based tests conditionally based on whether Python support is enabled in the build. This ensures Python tests are only included when the necessary dependencies are available.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/CMakeLists.txt#2025-04-23_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(PXR_ENABLE_PYTHON_SUPPORT)\n    pxr_register_test(testTfPython\n        PYTHON\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTfPython\"\n    )\n    pxr_register_test(testTfPyFunction\n        REQUIRES_PYTHON_MODULES\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTfPyFunction\"\n    )\n    pxr_register_test(testTfPyNotice\n        PYTHON\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTfPyNotice\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering UsdView Alive Test\nDESCRIPTION: Registers a test for UsdView that checks if the application launches correctly. Includes a pre-command to set up the test environment, then runs the test script and verifies a successful return code.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdviewAlive\n    PRE_COMMAND \"${PYTHON_EXECUTABLE} testUsdviewAliveSetup.py\"\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testAlive.py test.usda\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Defining MaterialBindingApiAppliedValidator\nDESCRIPTION: Documentation for a validator that verifies a prim has the MaterialBindingAPI applied if it has a material binding relationship, ensuring proper API usage.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n[usdShadeValidators:MaterialBindingApiAppliedValidator]:\n\tDoc: Verify a prim has the MaterialBindingAPI applied if it has a material binding relationship.\n\tKeywords: UsdShadeValidators\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: NearCenterVertical Bezier Spline Specification\nDESCRIPTION: Technical specification for a NearCenterVertical Bezier spline with two knots. The spline uses tangent widths of 0.8 (less than the CenterVertical's 1.0) for both knots, creating a slightly different curvature.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_31\n\nLANGUAGE: text\nCODE:\n```\nSpline: NearCenterVertical\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0.8\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 0.8\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Illustrating Invalid USD Expression Syntax (Missing Brace)\nDESCRIPTION: This snippet shows an example of an invalid expression string encountered within a USD variant selection in the file `@ExpressionsInVariantSelections/root.sdf@` at path `/BadExpressionInSelection`. The error occurs because the expression lacks the required closing curly brace (`}`), leading to a composition failure. This specific example caused the error message: \"Error evaluating expression '\\'${BAD_SYNTAX'\\' for variant at /BadExpressionInSelection in @ExpressionsInVariantSelections/root.sdf@: Missing ending '}' at character 14\".\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ExpressionsInVariantSelections.testenv/baseline/compositionErrors_ExpressionsInVariantSelections.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n'${BAD_SYNTAX'\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /InconsistentValueType (USD Output)\nDESCRIPTION: Displays the composition details for the prim '/InconsistentValueType'. The prim stack includes '/InconsistentValueType' from 'root.sdf' and '/InconsistentValType' from 'ref.sdf'. The property 'x' is sourced entirely from '/InconsistentValType.x' in 'ref.sdf'. This section likely demonstrates composition behavior when the value types associated with property 'x' are inconsistent between layers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInconsistentProperties.testenv/baseline/compositionResults_ErrorInconsistentProperties.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </InconsistentValueType>\n\nPrim Stack:\n    root.sdf             /InconsistentValueType\n    ref.sdf              /InconsistentValType\n\nProperty names:\n     ['x']\n\nProperty stacks:\n/InconsistentValueType.x:\n    ref.sdf              /InconsistentValType.x\n```\n\n----------------------------------------\n\nTITLE: Composing Knot03Rig Prim in USD\nDESCRIPTION: This snippet shows the composition results for the Knot03Rig prim within the TentacleInterface. It includes the prim stack and prohibited child names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsAndRelocates5.testenv/baseline/compositionResults_TrickyInheritsAndRelocates5.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </CharRig/Rig/TentaclesRig/TentacleRigs/R1TentacleRig/TentacleInterface/Knot03Rig>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface/_Class_KnotRig\n    TentacleRig.sdf      /TentacleRig/TentacleInterface/Knot03Rig\n    TentacleRig.sdf      /TentacleRig/TentacleInterface/_Class_KnotRig\n\nProhibited child names:\n     ['Anim']\n```\n\n----------------------------------------\n\nTITLE: Configuring HDAR Library Build in OpenUSD CMake\nDESCRIPTION: Configures the HDAR library build settings for the OpenUSD imaging module. This CMake snippet sets up prefixes, dependencies, public classes, headers, and other build parameters required for the HDAR library.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdar/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE hdar)\n\nset(optionalPublicClasses \"\")\n\npxr_library(hdar\n    LIBRARIES\n        hd\n        ar\n\n    INCLUDE_DIRS\n\n    PUBLIC_CLASSES\n        systemSchema\n\n    PUBLIC_HEADERS\n        api.h\n\n    PRIVATE_CLASSES\n        ${optionalPrivateClasses}\n\n    RESOURCE_FILES\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </RearLegRig/Legs/LeftRig/Leg_bone/Knee_bone/Ankle_bone> in USD\nDESCRIPTION: Displays the composition results for the prim path </RearLegRig/Legs/LeftRig/Leg_bone/Knee_bone/Ankle_bone> from 'root.sdf'. It lists the prim stack, showing its origin from /SymRig/Leg_bone/Knee_bone/Ankle_bone.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyMultipleRelocations4.testenv/baseline/compositionResults_TrickyMultipleRelocations4.txt#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </RearLegRig/Legs/LeftRig/Leg_bone/Knee_bone/Ankle_bone>\n\nPrim Stack:\n    root.sdf             /SymRig/Leg_bone/Knee_bone/Ankle_bone\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration - JSON\nDESCRIPTION: Plugin configuration file defining the plugin type, name, and base classes\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_usdview_plugin.rst#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Plugins\": [\n        {\n            \"Type\": \"python\",\n            \"Name\": \"tutorialPlugin\",\n            \"Info\": {\n                \"Types\": {\n                    \"tutorialPlugin.TutorialPluginContainer\": {\n                        \"bases\": [\"pxr.Usdviewq.plugin.PluginContainer\"],\n                        \"displayName\": \"Usdview Tutorial Plugin\"\n                    }\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for /Model/Class\nDESCRIPTION: Shows the composition results for the prim path '/Model/Class'. The prim stack indicates contributions from 'model.sdf' (both base and variant) and 'ref.sdf' via inheritance/reference. It lists the child prims ('RefFromHighClassStuff', 'HighClassStuff') resulting from the composition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsInVariants.testenv/baseline/compositionResults_TrickyInheritsInVariants.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd-composition-log\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Model/Class>\n\nPrim Stack:\n    model.sdf            /Model/Class\n    model.sdf            /Model{complexity=high}Class\n    ref.sdf              /RefFromHighClass\n\nChild names:\n     ['RefFromHighClassStuff', 'HighClassStuff']\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /Parent Prim\nDESCRIPTION: Shows the prim stack and child names for the composed prim at path </Parent>. The prim stack indicates the source layers and paths contributing to this prim's definition, including inherited sources (/PI, /PR, /PIS, /PISI).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Parent>\n\nPrim Stack:\n    root.sdf             /Parent\n    root.sdf             /PI\n    ref.sdf              /PR\n    root.sdf             /PIS\n    root.sdf             /PISI\n\nChild names:\n     ['Child', 'Sibling']\n```\n\n----------------------------------------\n\nTITLE: Initializing TsRegressionPreventer Result in Python\nDESCRIPTION: This snippet shows the result of a TsRegressionPreventer operation, including various adjustment flags and width values for pre and post segments.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/NoopLimitOpposite_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: false\n  havePreSegment: false\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.000000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.000000\n  havePostSegment: true\n  postActiveAdjusted: false\n  postActiveAdjustedWidth: 0.800000\n  postOppositeAdjusted: false\n  postOppositeAdjustedWidth: 0.800000\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenUSD Examples Installation in CMake\nDESCRIPTION: Sets up the prefix and installation subdirectory for OpenUSD examples. It also adds the hdTiny subdirectory to the build.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/imaging/examples/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX examples)\nset(PXR_INSTALL_SUBDIR share/usd/examples)\n\nadd_subdirectory(hdTiny)\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for Prim /S2 (Plaintext)\nDESCRIPTION: This section details the composition results for the USD prim specified by the path `/S2`. It shows the Prim Stack, indicating that the primary definition for `/S2` comes from `s_48tcps.sdf`. The Time Offsets section displays the hierarchical structure of layers contributing to the final time mapping for this prim, starting from the root layer `session_48tcps.sdf` and descending through its sublayers, each applying specific time offsets and scales.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer1.txt#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </S2>\n\nPrim Stack:\n    s_48tcps.sdf         /S2\n\nTime Offsets:\n    session_48tcps.sdf   /S2             root       (offset=0.00, scale=1.00)\n        sess_s.sdf                       sublayer   (offset=10.00, scale=4.00)\n        sess_s_48tcps.sdf                sublayer   (offset=10.00, scale=2.00)\n        sess_s_24tcps_12fps.sdf          sublayer   (offset=10.00, scale=4.00)\n        sess_s_12fps.sdf                 sublayer   (offset=10.00, scale=8.00)\n        root_24tcps_12fps.sdf            sublayer   (offset=0.00, scale=2.00)\n        s.sdf                            sublayer   (offset=20.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=60.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=60.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=60.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=60.00, scale=16.00)\n        s_48tcps.sdf                     sublayer   (offset=20.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=40.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=40.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=40.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=40.00, scale=16.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=20.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=60.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=60.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=60.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=60.00, scale=16.00)\n        s_12fps.sdf                      sublayer   (offset=20.00, scale=8.00)\n        ss.sdf                           sublayer   (offset=100.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=100.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=100.00, scale=8.00)\n        ss_12fps.sdf                     sublayer   (offset=100.00, scale=16.00)\n```\n\n----------------------------------------\n\nTITLE: Defining Bold-Italic Text Role in Sphinx RST\nDESCRIPTION: Creates a custom role 'bi' for bold-italic text formatting in Sphinx documentation. Used with the syntax :bi:`text`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/rolesAndUtils.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. role:: bi\n   :class: bi\n```\n\n----------------------------------------\n\nTITLE: Defining Monospace Text Role in Sphinx RST\nDESCRIPTION: Creates a custom role 'mono' for monospace text formatting in Sphinx documentation. Used with the syntax :mono:`text`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/rolesAndUtils.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. role:: mono\n   :class: mono\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenUSD Validation Directories in CMake\nDESCRIPTION: Defines and processes a list of validation-related directories to be included in the build. Each directory contains validators for different aspects of USD (geometry, physics, shading, skeletal animation, etc.).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(DIRS\n    usdValidation\n    usdGeomValidators\n    usdPhysicsValidators\n    usdShadeValidators\n    usdSkelValidators\n    usdUtilsValidators\n)\n\nforeach(d ${DIRS})\n    add_subdirectory(${d})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Composition Result for /Model/Looks/Material\nDESCRIPTION: Shows the resulting prim stack for '/Model/Looks/Material'. Composition includes inheritance/specialization from '/Model/Looks/BaseMaterial' within 'root.sdf' and '/Looks/Material' and '/Looks/BaseMaterial' within 'looks.sdf'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicSpecializesAndInherits.testenv/baseline/compositionResults_BasicSpecializesAndInherits.txt#2025-04-23_snippet_10\n\nLANGUAGE: log\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Model/Looks/Material>\n\nPrim Stack:\n    root.sdf             /Model/Looks/Material\n    root.sdf             /Model/Looks/BaseMaterial\n    looks.sdf            /Looks/Material\n    looks.sdf            /Looks/BaseMaterial\n```\n\n----------------------------------------\n\nTITLE: Registering Test Scripts for usdMedia in CMake\nDESCRIPTION: Registers test scripts for the usdMedia library, specifically for AssetPreviewsAPI and SpatialAudio functionalities. It sets up Python-based tests with expected return codes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdMedia/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_test_scripts(\n    testenv/testUsdMediaAssetPreviewsAPI.py\n    testenv/testUsdMediaSpatialAudio.py\n)\n\npxr_register_test(testUsdMediaAssetPreviewsAPI\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdMediaAssetPreviewsAPI\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdMediaSpatialAudio\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdMediaSpatialAudio\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: USD Composition Error: Invalid Reference to Pre-Relocated Prim\nDESCRIPTION: Details a USD composition error occurring for the prim '</Bad_RefToPreRelo>'. The error indicates that this prim, defined in 'root.sdf', cannot establish a reference to '</Char/PreRelo>' in 'char.sdf'. The target prim is prohibited because it serves as the source of a relocation, and accessing opinions from it directly via reference is restricted in this composition scenario.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInvalidReferenceToRelocationSource.testenv/baseline/compositionErrors_ErrorInvalidReferenceToRelocationSource.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n@ErrorInvalidReferenceToRelocationSource/root.sdf@</Bad_RefToPreRelo>\nCANNOT reference:\n@ErrorInvalidReferenceToRelocationSource/char.sdf@</Char/PreRelo>\nwhich is a prohibited child of its parent because it would require allowing opinions from the source of a relocation at @ErrorInvalidReferenceToRelocationSource/char.sdf@</Char/PreRelo>.\n```\n\n----------------------------------------\n\nTITLE: Registering Curve Drawing Tests with Different Refinement Levels\nDESCRIPTION: Registers tests for the HdSt curve drawing functionality with different refinement levels. These tests render curves and compare the output images against reference images.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStCurveDrawing_lv0_refined\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStCurveDrawing --offscreen --repr refined --refineLevel 0 --write testHdStCurveDrawing_lv0_refined.png\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        testHdStCurveDrawing_lv0_refined.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    TESTENV testHdStCurveDrawing\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStCurveDrawing_lv1_refined\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStCurveDrawing --offscreen --repr refined --refineLevel 1 --write testHdStCurveDrawing_lv1_refined.png\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        testHdStCurveDrawing_lv1_refined.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    TESTENV testHdStCurveDrawing\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring HdTiny Plugin in CMake for OpenUSD\nDESCRIPTION: Sets up the HdTiny plugin with its libraries, public classes, and resource files. It also disables precompiled headers for this plugin.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/imaging/examples/hdTiny/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE hdTiny)\n\npxr_plugin(${PXR_PACKAGE}\n    LIBRARIES\n        hd\n        tf\n\n    PUBLIC_CLASSES\n        mesh\n        renderDelegate\n        rendererPlugin\n        renderPass\n\n    RESOURCE_FILES\n       plugInfo.json\n\n    DISABLE_PRECOMPILED_HEADERS\n)\n```\n\n----------------------------------------\n\nTITLE: Spline Configuration Settings\nDESCRIPTION: Basic spline configuration including hermite flag and extrapolation settings along with knot point definitions\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/InitiallyRegressiveLimitOpposite_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  156.000000: 0.000000, Curve, preSlope 0.000000, postSlope -1.300000, preLen 0.000000, postLen 14.666557, auto false / false\n  167.000000: 28.800000, Curve, preSlope 0.400000, postSlope 0.000000, preLen 3.666557, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Defining and Sampling Bezier Spline Curves - Text/Tabular Data\nDESCRIPTION: This snippet lists input and output data points for Bezier curve sampling/animation interpolation tests. It includes structured coordinate pairs generated via spline curve evaluation, as well as the explicit knot and loop configuration metadata used for curve construction. No dependencies are needed beyond the context of the evaluating software. Parameters such as sample domain, step size, knots, tangents, start/end locations, and extrapolation strategies are noted, with (x, y) values conveying positions at specific parameter values. This data serves both as ground truth for test validation and as a definition of the target curves to model, while all values are presented in structured, readable text or tabular format.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\n(100.6865234375, 20.56494140625)\n(101.2734375, 19.59765625)\n(102.3125, 15.09375)\n(103.4453125, 10.54296875)\n(104.1494140625, 9.51708984375)\n(105, 10)\n(107.6875, 12.40625)\n(110, 15)\n(110.6865234375, 15.56494140625)\n(111.2734375, 14.59765625)\n(112.3125, 10.09375)\n(113.4453125, 5.54296875)\n(114.1494140625, 4.51708984375)\n(115, 5)\n(117.6875, 7.40625)\n(120, 10)\n(120.6865234375, 10.56494140625)\n(121.2734375, 9.59765625)\n(122.3125, 5.09375)\n(123.4453125, 0.54296875)\n(124.1494140625, -0.48291015625)\n(125, 0)\n(127.6875, 2.40625)\n(130, 5)\n(205, 5)\n```\n\nLANGUAGE: Text\nCODE:\n```\nTest Case 15: Sample([92.5, 117.5], 10, 50, 0.5)\n0: (source n/a)\n    (92.5, 19.208180987202926)\n    (92.8466796875, 17.57080078125)\n    (93.1353759765625, 16.46331787109375)\n    (93.4453125, 15.54296875)\n    (93.7816162109375, 14.87310791015625)\n    (93.96125793457031, 14.651908874511719)\n    (94.1494140625, 14.51708984375)\n    (94.24688529968262, 14.48454761505127)\n    (94.34672546386719, 14.476570129394531)\n    (94.5538330078125, 14.53826904296875)\n    (94.77137756347656, 14.710105895996094)\n    (95, 15)\n    (95.8505859375, 16.12744140625)\n    (96.5546875, 16.80078125)\n    (97.1533203125, 17.17529296875)\n    (97.6875, 17.40625)\n    (98.1982421875, 17.64892578125)\n    (98.7265625, 18.05859375)\n    (99.3134765625, 18.79052734375)\n    (100, 20)\n    (100.18321228027344, 20.312599182128906)\n    (100.3582763671875, 20.50567626953125)\n    (100.52583312988281, 20.58715057373047)\n    (100.60699653625488, 20.58851146697998)\n    (100.6865234375, 20.56494140625)\n    (100.84098815917969, 20.44696807861328)\n    (100.9898681640625, 20.24114990234375)\n    (101.2734375, 19.59765625)\n    (101.8017578125, 17.60498046875)\n    (102.3125, 15.09375)\n    (102.8466796875, 12.57080078125)\n    (103.1353759765625, 11.46331787109375)\n    (103.4453125, 10.54296875)\n    (103.7816162109375, 9.87310791015625)\n    (103.96125793457031, 9.651908874511719)\n    (104.1494140625, 9.51708984375)\n    (104.24688529968262, 9.48454761505127)\n    (104.34672546386719, 9.476570129394531)\n    (104.5538330078125, 9.53826904296875)\n    (104.77137756347656, 9.710105895996094)\n    (105, 10)\n    (105.8505859375, 11.12744140625)\n    (106.5546875, 11.80078125)\n    (107.1533203125, 12.17529296875)\n    (107.6875, 12.40625)\n    (108.1982421875, 12.64892578125)\n    (108.7265625, 13.05859375)\n    (109.3134765625, 13.79052734375)\n    (110, 15)\n    (110.18321228027344, 15.312599182128906)\n    (110.3582763671875, 15.50567626953125)\n    (110.52583312988281, 15.587150573730469)\n    (110.60699653625488, 15.58851146697998)\n    (110.6865234375, 15.56494140625)\n    (110.84098815917969, 15.446968078613281)\n    (110.9898681640625, 15.24114990234375)\n    (111.2734375, 14.59765625)\n    (111.8017578125, 12.60498046875)\n    (112.3125, 10.09375)\n    (112.8466796875, 7.57080078125)\n    (113.1353759765625, 6.46331787109375)\n    (113.4453125, 5.54296875)\n    (113.7816162109375, 4.87310791015625)\n    (113.96125793457031, 4.651908874511719)\n    (114.1494140625, 4.51708984375)\n    (114.24688529968262, 4.4845476150512695)\n    (114.34672546386719, 4.476570129394531)\n    (114.5538330078125, 4.53826904296875)\n    (114.77137756347656, 4.710105895996094)\n    (115, 5)\n    (115.8505859375, 6.12744140625)\n    (116.5546875, 6.80078125)\n    (117.1533203125, 7.17529296875)\n    (117.5, 7.32518281535649)\n```\n\nLANGUAGE: Text\nCODE:\n```\nSpline: InnerLoopPre\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nLoop:\n  start 100, end 110, numPreLoops 2, numPostLoops 0, valueOffset -5\nKnot:\n  value type double\n  curve type Bezier\n  time 70\n  value 8.8\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 2.2\n  post-tan slope -1\nKnot:\n  value type double\n  curve type Bezier\n  time 85\n  value 35\n  next interp Curve\n  pre-tan width 1.3\n  pre-tan slope -5.3\n  post-tan width 1.8\n  post-tan slope -5.3\nKnot:\n  value type double\n  curve type Bezier\n  time 100\n  value 20\n  next interp Curve\n  pre-tan width 2\n  pre-tan slope 2\n  post-tan width 2\n  post-tan slope 2\nKnot:\n  value type double\n  curve type Bezier\n  time 105\n  value 10\n  next interp Curve\n  pre-tan width 2.5\n  pre-tan slope 1.5\n  post-tan width 2.5\n  post-tan slope 1.5\nKnot:\n  value type double\n  curve type Bezier\n  time 120\n  value 15\n  next interp Curve\n  pre-tan width 3\n  pre-tan slope -4\n  post-tan width 0\n  post-tan slope 0\n```\n\nLANGUAGE: Text\nCODE:\n```\n------------------------------------------------------------------------\nTest Case 16: Sample([70, 120], 10, 44.6429, 1)\n0: (source n/a)\n    (70, 8.8)\n    (70.21657104492186, 8.655902099609374)\n    (70.452880859375, 8.631591796875)\n    (70.70757446289062, 8.720294189453124)\n    (70.97929687499999, 8.915234375)\n    (71.56840820312499, 9.596728515625001)\n    (72.209375, 10.621875000000001)\n    (73.603515625, 13.486328125)\n    (75.07499999999999, 17.075)\n    (77.903125, 24.690625)\n    (79.086328125, 27.850390625)\n    (80, 30)\n    (80.3582763671875, 30.50567626953125)\n    (80.52583312988281, 30.58715057373047)\n    (80.6865234375, 30.56494140625)\n    (80.9898681640625, 30.24114990234375)\n    (81.2734375, 29.59765625)\n    (81.8017578125, 27.60498046875)\n    (82.3125, 25.09375)\n    (82.8466796875, 22.57080078125)\n    (83.4453125, 20.54296875)\n    (83.7816162109375, 19.87310791015625)\n    (84.1494140625, 19.51708984375)\n    (84.34672546386719, 19.47657012939453)\n    (84.5538330078125, 19.53826904296875)\n    (85, 20)\n    (85.8505859375, 21.12744140625)\n    (86.5546875, 21.80078125)\n    (87.1533203125, 22.17529296875)\n    (87.6875, 22.40625)\n    (88.1982421875, 22.64892578125)\n    (88.7265625, 23.05859375)\n    (89.3134765625, 23.79052734375)\n    (90, 25)\n    (90.3582763671875, 25.50567626953125)\n    (90.52583312988281, 25.58715057373047)\n    (90.6865234375, 25.56494140625)\n    (90.9898681640625, 25.24114990234375)\n    (91.2734375, 24.59765625)\n    (91.8017578125, 22.60498046875)\n    (92.3125, 20.09375)\n    (92.8466796875, 17.57080078125)\n    (93.4453125, 15.54296875)\n    (93.7816162109375, 14.87310791015625)\n    (94.1494140625, 14.51708984375)\n    (94.34672546386719, 14.476570129394531)\n    (94.5538330078125, 14.53826904296875)\n    (95, 15)\n    (95.8505859375, 16.12744140625)\n    (96.5546875, 16.80078125)\n    (97.1533203125, 17.17529296875)\n    (97.6875, 17.40625)\n    (98.1982421875, 17.64892578125)\n    (98.7265625, 18.05859375)\n    (99.3134765625, 18.79052734375)\n    (100, 20)\n    (100.3582763671875, 20.50567626953125)\n    (100.52583312988281, 20.58715057373047)\n    (100.6865234375, 20.56494140625)\n    (100.9898681640625, 20.24114990234375)\n    (101.2734375, 19.59765625)\n    (101.8017578125, 17.60498046875)\n    (102.3125, 15.09375)\n    (102.8466796875, 12.57080078125)\n    (103.4453125, 10.54296875)\n    (103.7816162109375, 9.87310791015625)\n    (104.1494140625, 9.51708984375)\n    (104.34672546386719, 9.476570129394531)\n    (104.5538330078125, 9.53826904296875)\n    (105, 10)\n    (105.8505859375, 11.12744140625)\n    (106.5546875, 11.80078125)\n    (107.1533203125, 12.17529296875)\n    (107.6875, 12.40625)\n    (108.1982421875, 12.64892578125)\n    (108.7265625, 13.05859375)\n    (109.3134765625, 13.79052734375)\n    (110, 15)\n    (110.880859375, 16.640625)\n    (111.984375, 18.375)\n    (113.251953125, 19.921875)\n    (113.928955078125, 20.537109375)\n    (114.625, 21)\n    (115.332763671875, 21.275390625)\n    (115.68875122070312, 21.331787109375)\n    (116.044921875, 21.328125)\n    (116.40036010742188, 21.260009765625)\n    (116.754150390625, 21.123046875)\n    (117.453125, 20.625)\n    (118.134521484375, 19.798828125)\n    (118.791015625, 18.609375)\n    (119.415283203125, 17.021484375)\n    (120, 15)\n```\n\nLANGUAGE: Text\nCODE:\n```\nTest Case 17: Sample([-5, 195], 10, 44.6429, 10)\n0: (source n/a)\n    (-5, 8.8)\n    (70, 8.8)\n    (70.452880859375, 8.631591796875)\n    (70.97929687499999, 8.915234375)\n    (72.209375, 10.621875000000001)\n    (75.07499999999999, 17.075)\n    (80, 30)\n    (80.6865234375, 30.56494140625)\n    (81.2734375, 29.59765625)\n    (82.3125, 25.09375)\n    (83.4453125, 20.54296875)\n    (84.1494140625, 19.51708984375)\n    (85, 20)\n    (87.6875, 22.40625)\n    (90, 25)\n    (90.6865234375, 25.56494140625)\n    (91.2734375, 24.59765625)\n    (92.3125, 20.09375)\n    (93.4453125, 15.54296875)\n    (94.1494140625, 14.51708984375)\n    (95, 15)\n    (97.6875, 17.40625)\n    (100, 20)\n    (100.6865234375, 20.56494140625)\n    (101.2734375, 19.59765625)\n    (102.3125, 15.09375)\n    (103.4453125, 10.54296875)\n    (104.1494140625, 9.51708984375)\n    (105, 10)\n    (107.6875, 12.40625)\n    (110, 15)\n    (111.984375, 18.375)\n    (114.625, 21)\n    (116.044921875, 21.328125)\n    (117.453125, 20.625)\n    (120, 15)\n    (195, 15)\n```\n\nLANGUAGE: Text\nCODE:\n```\nTest Case 18: Sample([82.5, 107.5], 10, 44.6429, 0.5)\n0: (source n/a)\n    (82.5, 24.208180987202926)\n    (82.8466796875, 22.57080078125)\n    (83.1353759765625, 21.46331787109375)\n    (83.4453125, 20.54296875)\n    (83.7816162109375, 19.87310791015625)\n    (83.96125793457031, 19.65190887451172)\n    (84.1494140625, 19.51708984375)\n    (84.24688529968262, 19.48454761505127)\n    (84.34672546386719, 19.47657012939453)\n    (84.5538330078125, 19.53826904296875)\n    (84.77137756347656, 19.710105895996094)\n    (85, 20)\n    (85.8505859375, 21.12744140625)\n    (86.5546875, 21.80078125)\n    (87.1533203125, 22.17529296875)\n    (87.6875, 22.40625)\n    (88.1982421875, 22.64892578125)\n    (88.7265625, 23.05859375)\n    (89.3134765625, 23.79052734375)\n    (90, 25)\n    (90.18321228027344, 25.312599182128906)\n    (90.3582763671875, 25.50567626953125)\n    (90.52583312988281, 25.58715057373047)\n    (90.60699653625488, 25.58851146697998)\n    (90.6865234375, 25.56494140625)\n    (90.84098815917969, 25.44696807861328)\n    (90.9898681640625, 25.24114990234375)\n    (91.2734375, 24.59765625)\n    (91.8017578125, 22.60498046875)\n    (92.3125, 20.09375)\n    (92.8466796875, 17.57080078125)\n    (93.1353759765625, 16.46331787109375)\n    (93.4453125, 15.54296875)\n    (93.7816162109375, 14.87310791015625)\n```\n\n----------------------------------------\n\nTITLE: Registering USD Test Cases with CMake\nDESCRIPTION: Registers multiple test cases for USD functionality using pxr_register_test macro. Each test specifies the command path, language (PYTHON where applicable), and expected return code. Some tests include environment variable configurations for specific behaviors.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdNamespaceEditorDependentEditsBasicRelocates\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdNamespaceEditorDependentEditsBasicRelocates\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdUsdzFileFormat_asset\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUsdzFileFormat\"\n    ENV\n        USDC_USE_ASSET=1\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Installing and Registering Additional USD Asset Validation Tests with CMake\nDESCRIPTION: The pxr_install_test_dir command installs a new test environment required by the following pxr_register_test command, which validates a 'clean' USD asset using usdchecker with its new validation framework. The registration expects a clean validation (no errors), signaled via an expected return code of zero. The flow requires the test environment to be present before registration; outputs are an installed test directory and a usdchecker test execution result.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdChecker\n    DEST testUsdChecker37\n)\n\npxr_register_test(testUsdChecker37\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdchecker --useNewValidationFramework clean/cleanNormalMapReader.usda\"\n    EXPECTED_RETURN_CODE 0\n)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Plug Library Build\nDESCRIPTION: Defines the main plug library build configuration including dependencies, source files, and module components. Requires TBB library and includes various class implementations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/plug/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/base)\nset(PXR_PACKAGE plug)\n\npxr_library(plug\n    LIBRARIES\n        arch\n        tf\n        js\n        trace\n        work\n        ${TBB_tbb_LIBRARY}\n\n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n\n    PUBLIC_CLASSES\n        interfaceFactory\n        notice\n        plugin\n        registry\n        staticInterface\n\n    PRIVATE_CLASSES\n        debugCodes\n        info\n        testPlugBase\n\n    PUBLIC_HEADERS\n        api.h\n        thisPlugin.h\n\n    CPPFILES\n        initConfig.cpp\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapNotice.cpp\n        wrapPlugin.cpp\n        wrapRegistry.cpp\n        wrapTestPlugBase.cpp\n\n    PYMODULE_FILES\n        __init__.py\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Registering usdview Complexity Test\nDESCRIPTION: Registers a CMake test named `testUsdviewComplexity`. This test executes `testusdview` with the Python script `testUsdviewComplexity.py` and `test.usda`. It validates different complexity settings by performing perceptual image difference comparison against `low.png`, `medium.png`, `high.png`, and `very_high.png`, using failure thresholds of 0.05 absolute and 0.03 percent, and expecting a return code of 0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdviewComplexity\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewComplexity.py test.usda\"\n    IMAGE_DIFF_COMPARE\n        low.png\n        medium.png\n        high.png\n        very_high.png\n    FAIL 0.05\n    FAIL_PERCENT 0.03\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: USD Prim Composition Results\nDESCRIPTION: Complete composition results showing prim stacks, variant selections and child hierarchies for multiple prim paths.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantWeakerSelection4.testenv/baseline/compositionResults_TrickyVariantWeakerSelection4.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </_class_geotype>\n\nPrim Stack:\n    root.sdf             /_class_geotype\n\n------------------------------------------------------------------------\nResults for composing </bob>\n\nPrim Stack:\n    root.sdf             /bob\n    root.sdf             /_class_geotype\n    root.sdf             /_class_geotype{geotype_selector=select_cube}\n    root.sdf             /bob{geotype=cube}\n\nVariant Selections:\n    {geotype = cube}\n    {geotype_selector = select_cube}\n\nChild names:\n     ['geom']\n```\n\n----------------------------------------\n\nTITLE: Registering usdview Frame Selection Test\nDESCRIPTION: Registers a CMake test named `testUsdviewFrameSelection`. This test runs `testusdview` with the Python script `testUsdviewFrameSelection.py` and `test.usda`. It verifies the functionality of framing selections in the viewport by performing perceptual image difference comparison against `framed.png`, `toggleToStart.png`, `rotatedStart.png`, and `toggleToFramed.png`, using failure thresholds of 0.05 absolute and 0.03 percent, and expecting a return code of 0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdviewFrameSelection\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewFrameSelection.py test.usda\"\n    IMAGE_DIFF_COMPARE\n        framed.png\n        toggleToStart.png\n        rotatedStart.png\n        toggleToFramed.png\n    FAIL 0.05\n    FAIL_PERCENT 0.03\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </_X/_Y/C/_Z> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </_X/_Y/C/_Z>. The prim stack originates solely from /Ref/C/_Z in 'ref.sdf'. It lists 'prop' as a property name, with its value sourced from the same location.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </_X/_Y/C/_Z>\n\nPrim Stack:\n    ref.sdf              /Ref/C/_Z\n\nProperty names:\n     ['prop']\n\nProperty stacks:\n/_X/_Y/C/_Z.prop:\n    ref.sdf              /Ref/C/_Z.prop\n```\n\n----------------------------------------\n\nTITLE: Loading USD Layer Stack\nDESCRIPTION: Shows the initial layer stack loading with root.sdf as the primary layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantWeakerSelection4.testenv/baseline/compositionResults_TrickyVariantWeakerSelection4.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLayer Stack:\n     root.sdf\n```\n\n----------------------------------------\n\nTITLE: Configuring TsRegressionPreventer Settings in YAML\nDESCRIPTION: Configuration settings for the TsRegressionPreventer class defining segment adjustments and width parameters for both pre and post segments\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/MoveStartLimitOpposite_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: true\n  havePreSegment: false\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.000000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.000000\n  havePostSegment: true\n  postActiveAdjusted: true\n  postActiveAdjustedWidth: 0.799994\n  postOppositeAdjusted: true\n  postOppositeAdjustedWidth: 0.199994\n```\n\n----------------------------------------\n\nTITLE: USD Layer Stack Trace\nDESCRIPTION: Shows the layer stack configuration with root.sdf as the primary layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantInPayload.testenv/baseline/compositionResults_TrickyVariantInPayload.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLayer Stack:\n     root.sdf\n```\n\n----------------------------------------\n\nTITLE: Initializing SplineData Test Object - Python\nDESCRIPTION: This snippet initializes a Ts.TsTest_SplineData object in Python with specified parameters for spline type, extrapolation, and two curve knots. It leverages class methods and floating-point hexadecimal conversion for precise values. Inputs are required as specific float representations and class constants; outputs are an in-memory instance containing all spline definition parameters, primarily for test or validation purposes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveMayaTansLimitActive_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.2a69b463e86acp+0'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.999999999999bp-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Sampling Bezier Curve with Fine-Grained Interval\nDESCRIPTION: Test case showing Bezier curve sampling with a narrow time range and fine-grained interval of 0.5. It shows detailed point sampling across inner loop segments.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_53\n\nLANGUAGE: data\nCODE:\n```\nTest Case 129: SampleWithSources([92.5, 117.5], 10, 50, 0.5)\n0: (TsSourceInnerLoopPreEcho)\n    (92.5, 19.208180987202926)\n    (92.8466796875, 17.57080078125)\n    (93.1353759765625, 16.46331787109375)\n    (93.4453125, 15.54296875)\n    (93.7816162109375, 14.87310791015625)\n    (93.96125793457031, 14.651908874511719)\n    (94.1494140625, 14.51708984375)\n    (94.24688529968262, 14.48454761505127)\n    (94.34672546386719, 14.476570129394531)\n    (94.5538330078125, 14.53826904296875)\n    (94.77137756347656, 14.710105895996094)\n    (95, 15)\n    (95.8505859375, 16.12744140625)\n    (96.5546875, 16.80078125)\n    (97.1533203125, 17.17529296875)\n    (97.6875, 17.40625)\n    (98.1982421875, 17.64892578125)\n    (98.7265625, 18.05859375)\n    (99.3134765625, 18.79052734375)\n    (100, 20)\n1: (TsSourceInnerLoopProto)\n    (100, 20)\n    (100.18321228027344, 20.312599182128906)\n    (100.3582763671875, 20.50567626953125)\n    (100.52583312988281, 20.58715057373047)\n    (100.60699653625488, 20.58851146697998)\n    (100.6865234375, 20.56494140625)\n    (100.84098815917969, 20.44696807861328)\n    (100.9898681640625, 20.24114990234375)\n    (101.2734375, 19.59765625)\n    (101.8017578125, 17.60498046875)\n    (102.3125, 15.09375)\n    (102.8466796875, 12.57080078125)\n    (103.1353759765625, 11.46331787109375)\n    (103.4453125, 10.54296875)\n    (103.7816162109375, 9.87310791015625)\n    (103.96125793457031, 9.651908874511719)\n    (104.1494140625, 9.51708984375)\n    (104.24688529968262, 9.48454761505127)\n    (104.34672546386719, 9.476570129394531)\n    (104.5538330078125, 9.53826904296875)\n    (104.77137756347656, 9.710105895996094)\n    (105, 10)\n    (105.8505859375, 11.12744140625)\n    (106.5546875, 11.80078125)\n    (107.1533203125, 12.17529296875)\n    (107.6875, 12.40625)\n    (108.1982421875, 12.64892578125)\n    (108.7265625, 13.05859375)\n    (109.3134765625, 13.79052734375)\n    (110, 15)\n2: (TsSourceInnerLoopPostEcho)\n    (110, 15)\n    (110.18321228027344, 15.312599182128906)\n    (110.3582763671875, 15.50567626953125)\n    (110.52583312988281, 15.587150573730469)\n    (110.60699653625488, 15.58851146697998)\n```\n\n----------------------------------------\n\nTITLE: Loading Maya USD Plugin with MEL\nDESCRIPTION: Loads the pxrUsdMaya plugin in Maya using a MEL command.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_end_to_end.rst#2025-04-23_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nloadPlugin pxrUsd\n```\n\n----------------------------------------\n\nTITLE: Creating Download Button in HTML for OpenUSD City Set\nDESCRIPTION: This HTML snippet creates a centered form with a download button. When clicked, it initiates the download of 'PointInstancedMedCity.zip' from the openusd.org domain.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/dl_city_set.rst#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<center>\n  <form method=\"get\" action=\"https://openusd.org/files/PointInstancedMedCity.zip\">\n    <button type=\"submit\">OK</button>\n  </form>\n</center>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including MaterialX Support in CMake\nDESCRIPTION: This CMake conditional block adds the MaterialX Hydra integration only if MaterialX support is enabled via the PXR_ENABLE_MATERIALX_SUPPORT CMake variable.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (${PXR_ENABLE_MATERIALX_SUPPORT})\n    add_subdirectory(hdMtlx)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering UsdView File Arguments Tests\nDESCRIPTION: Registers tests that verify UsdView's handling of file arguments, including valid files (with various extensions) and invalid files, with appropriate error handling and return codes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdviewFileArguments1\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testValidFileArg.py test.usda\"\n    EXPECTED_RETURN_CODE 0\n    ENV\n        PXR_USDVIEW_SUPPRESS_STATE_SAVING=1\n)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Version-Specific ('V1 and Later') Accessor Naming in C++\nDESCRIPTION: This C++ code snippet shows a proposed naming convention (`GetV1AndLaterAttr`) for generated methods under the \"Compatible Cluster\" strategy. This naming signifies that the method is designed to access an attribute that is present or compatible starting from version 1 and in all subsequent versions of the schema.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_schema_versioning.rst#2025-04-23_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\n:cpp:`GetV1AndLaterAttr`\n```\n\n----------------------------------------\n\nTITLE: USD Layer Stack Composition\nDESCRIPTION: Shows the base layer stack configuration for the USD stage, indicating root.sdf as the primary layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantOverrideOfFallback.testenv/baseline/compositionResults_TrickyVariantOverrideOfFallback.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nLayer Stack:\n     root.sdf\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Composition Result for /Instance_1\nDESCRIPTION: Shows the resulting prim stack after composing the prim at path '/Instance_1'. Composition includes contributions from '/Specializes_1' and '/Inherits_1' due to instancing and specialization, all defined in 'root.sdf'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicSpecializesAndInherits.testenv/baseline/compositionResults_BasicSpecializesAndInherits.txt#2025-04-23_snippet_3\n\nLANGUAGE: log\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Instance_1>\n\nPrim Stack:\n    root.sdf             /Instance_1\n    root.sdf             /Specializes_1\n    root.sdf             /Inherits_1\n```\n\n----------------------------------------\n\nTITLE: HandRig Prim Composition Results\nDESCRIPTION: Composition results for the HandRig prim showing variant selections and child prims\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantOverrideOfLocalClass.testenv/baseline/compositionResults_TrickyVariantOverrideOfLocalClass.txt#2025-04-23_snippet_2\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /HandRig\n    root.sdf             /HandRig{FingerRigArmature=off}\n\nVariant Selections:\n    {FingerRigArmature = off}\n\nChild names:\n     ['_Class_FingerRig', 'IndexRig']\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimWithReferences/PrimA_Child\nDESCRIPTION: Displays the composition results for the child prim path </PrimWithReferences/PrimA_Child>. The prim stack shows its origin from the referenced prim </PrimA> defined in ref.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimWithReferences/PrimA_Child>\n\nPrim Stack:\n    ref.sdf              /PrimA/PrimA_Child\n```\n\n----------------------------------------\n\nTITLE: USD Prim Composition Results for /A1/B with Variants\nDESCRIPTION: Shows detailed prim stack composition for /A1/B including variant selections and multiple contributing layers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantInPayload.testenv/baseline/compositionResults_TrickyVariantInPayload.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nPrim Stack:\n    root.sdf             /A1/B\n    model.sdf            /B\n    model.sdf            /B{v=v2}\n    model.sdf            /A/B\n    model.sdf            /A/B{v=v2}\n\nVariant Selections:\n    {v = v2}\n```\n\n----------------------------------------\n\nTITLE: Composing USD Layer Stack for /Root\nDESCRIPTION: Demonstrates the prim stack and time offset configurations for /Root prim. Shows multiple root layer compositions and their corresponding sublayers with timing parameters.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer2.txt#2025-04-23_snippet_5\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    session_24fps.sdf    /Root\n    sess_s.sdf           /Root\n    sess_s_48tcps.sdf    /Root\n    sess_s_24tcps_12fps.sdf /Root\n    sess_s_12fps.sdf     /Root\n    root_48tcps.sdf      /Root\n\nTime Offsets:\n    session_24fps.sdf    /Root           root       (offset=0.00, scale=1.00)\n        [... additional sublayers ...]\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for /Pigeon/Rig/LegsRig Prim\nDESCRIPTION: This snippet shows the composition results for the /Pigeon/Rig/LegsRig prim, including its prim stack and child names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpRegressionBugs_bug69932.testenv/baseline/compositionResults_bug69932.txt#2025-04-23_snippet_2\n\nLANGUAGE: USD\nCODE:\n```\nPrim Stack:\n    Pigeon_bodyrig.sdf   /CharRig/Rig/LegsRig\n    LegsRig.sdf          /LegsRig\n\nChild names:\n     ['LLegRig', '_Class_LegRig']\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Composition Results for Prim </S2>\nDESCRIPTION: This section shows the composition results for the prim </S2>. The 'Prim Stack' lists the source layers contributing opinions to this prim. The 'Time Offsets' section details the cumulative time scaling and offsets applied to animation data originating from each layer, as calculated through the sublayer hierarchy leading back to the root layer (session.sdf).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer4.txt#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </S2>\n\nPrim Stack:\n    s_48tcps.sdf         /S2\n\nTime Offsets:\n    session.sdf          /S2             root       (offset=0.00, scale=1.00)\n        session.sdf                      sublayer   (offset=0.00, scale=0.50)\n        sess_s.sdf                       sublayer   (offset=5.00, scale=1.00)\n        sess_s_48tcps.sdf                sublayer   (offset=5.00, scale=0.50)\n        sess_s_24tcps_12fps.sdf          sublayer   (offset=5.00, scale=1.00)\n        sess_s_12fps.sdf                 sublayer   (offset=5.00, scale=2.00)\n        s.sdf                            sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=4.00)\n        s_48tcps.sdf                     sublayer   (offset=10.00, scale=0.50)\n        ss.sdf                           sublayer   (offset=15.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=15.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=15.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=15.00, scale=4.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=4.00)\n        s_12fps.sdf                      sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=4.00)\n```\n\n----------------------------------------\n\nTITLE: Configuring usdSemantics Library in CMake\nDESCRIPTION: This snippet sets up the usdSemantics library using CMake. It defines the library's dependencies, public classes, headers, and Python module files. The library is part of the OpenUSD project and relies on tf, vt, and usd libraries.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdSemantics/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usdSemantics)\n\npxr_library(usdSemantics\n    INCLUDE_SCHEMA_FILES\n\n    LIBRARIES\n        tf\n        vt\n        usd\n\n    PUBLIC_CLASSES\n        labelsQuery\n\n    PUBLIC_HEADERS\n        api.h\n\n    PYMODULE_CPPFILES\n        wrapLabelsQuery.cpp\n\n    PYMODULE_FILES\n        __init__.py\n\n    DOXYGEN_FILES\n        overview.md\n)\n```\n\n----------------------------------------\n\nTITLE: Composing Prim /RefPayload/Anim in USD\nDESCRIPTION: Details the composition results for the child prim path `/RefPayload/Anim`. It shows the prim stack originating from `B.sdf` and lists the accumulated time offsets considering the root layer (`root.sdf`), the reference arc (`ref.sdf`, `ref_sub.sdf`), and the payload arc (`B.sdf`).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicTimeOffset.testenv/baseline/compositionResults_BasicTimeOffset.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </RefPayload/Anim>\n\nPrim Stack:\n    B.sdf                /Model/Anim\n\nTime Offsets:\n    root.sdf             /RefPayload/Anim root       (offset=0.00, scale=1.00)\n    ref.sdf              /Ref/Anim       reference  (offset=10.00, scale=1.00)\n        ref_sub.sdf                      sublayer   (offset=20.00, scale=1.00)\n    B.sdf                /Model/Anim     payload    (offset=30.00, scale=1.00)\n```\n\n----------------------------------------\n\nTITLE: Configuring pxr_plugin for RtxHioImage - CMake\nDESCRIPTION: This snippet uses CMake syntax to configure the build rules for the RtxHioImage plugin by invoking the pxr_plugin macro. It specifies required libraries (tf, glf, and external libraries via variables), includes important header directories, and adds main.cpp as the source file. The configuration disables precompiled headers and leaves placeholders for private headers and resource files, indicating extensibility for more complex plugins. The expected input consists of the necessary variables being defined in the parent scope, and the output is a configured target within the CMake build system.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/rtx_hioImage/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX \"\")\nset(PXR_PACKAGE RtxHioImage)\n\npxr_plugin(${PXR_PACKAGE}\n\n    LIBRARIES\n        tf\n        glf\n        ${PXRCORE_LIBRARY}\n        ${PRMAN_LIBRARY}\n\n    INCLUDE_DIRS\n        ${GLEW_INCLUDE_DIR}    \n        ${RENDERMAN_INCLUDE_DIR}\n\n    CPPFILES\n        main.cpp \n\n    PRIVATE_HEADERS\n\n    RESOURCE_FILES\n\n    DISABLE_PRECOMPILED_HEADERS\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra TimeSampleArray Test Build in CMake\nDESCRIPTION: Defines the build configuration for testing Hydra's time sample array functionality. This test validates the system for managing time-sampled data in the Hydra rendering framework.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/CMakeLists.txt#2025-04-23_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testHdTimeSampleArray\n   LIBRARIES\n       hd\n\n   CPPFILES\n       testenv/testHdTimeSampleArray.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including OpenVDB Support in CMake\nDESCRIPTION: This CMake conditional block adds OpenVDB I/O support only if OpenVDB integration is enabled via the PXR_ENABLE_OPENVDB_SUPPORT CMake variable.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (${PXR_ENABLE_OPENVDB_SUPPORT})\n    add_subdirectory(hioOpenVDB)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PIS/Sibling Prim\nDESCRIPTION: Shows the prim stack for the composed prim at path </PIS/Sibling>, inheriting from /PISI/Sibling.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PIS/Sibling>\n\nPrim Stack:\n    root.sdf             /PIS/Sibling\n    root.sdf             /PISI/Sibling\n```\n\n----------------------------------------\n\nTITLE: Iterating and Adding Subdirectories in CMake\nDESCRIPTION: This snippet uses a `foreach` loop to iterate over the list of directories stored in the `DIRS` variable (defined previously). For each directory `d` in the list, it invokes the `add_subdirectory` command. This command instructs CMake to process the `CMakeLists.txt` file located within the specified subdirectory, thereby incorporating its targets and build rules into the main project build.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(d ${DIRS})\n    add_subdirectory(${d})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Reporting Invalid Relationship Targets during USD Composition\nDESCRIPTION: This log output details composition errors for the prim `/Char`. It flags invalid relationship targets (`/Model/ToBeDeleted/Child`, `/Model/ToBeRelocated/ToBeDeletedChild`) from relationships defined in `model.sdf`. The errors likely occur because the targets point to the original, pre-relocated paths of prims, which are now invalid. These invalid targets are ignored by the composition engine.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_RelocateToNone.testenv/baseline/compositionErrors_RelocateToNone.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nErrors while composing </Char>\n\nThe relationship target </Model/ToBeDeleted/Child> from </Model.relationship1> in layer @RelocateToNone/model.sdf@ is invalid.  This may be because the path is the pre-relocated source path of a relocated prim.  Ignoring.\nThe relationship target </Model/ToBeRelocated/ToBeDeletedChild> from </Model.relationship3> in layer @RelocateToNone/model.sdf@ is invalid.  This may be because the path is the pre-relocated source path of a relocated prim.  Ignoring.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hydra DirtyBitsTranslator Test Build in CMake\nDESCRIPTION: Configures the build for testing Hydra's dirty bits translator. This test verifies the system that tracks and translates invalidation flags in the Hydra rendering framework.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testHdDirtyBitsTranslator\n   LIBRARIES\n       hd\n       tf\n\n   CPPFILES\n       testenv/testHdDirtyBitsTranslator.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining OSL Shader Compilation and Installation Function - CMake\nDESCRIPTION: This function, 'prman_osl', automates the compilation of OSL shader files to OSO binaries using the RenderMan compiler in CMake. It takes shader name and directory as arguments, creates custom commands for building, adds dependencies to the hdPrman target, and handles installation of outputs into the proper resource directory. Key parameters are SHADER_NAME and SHADER_DIR, and the function assumes relevant variables such as 'RENDERMAN_BINARY_DIR' and 'CMAKE_CURRENT_SOURCE_DIR' are appropriately set in the build environment.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/shaders/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(prman_osl SHADER_NAME SHADER_DIR)\n    set(infile ${SHADER_DIR}/${SHADER_NAME}.osl)\n    set(outfile ${CMAKE_CURRENT_BINARY_DIR}/${SHADER_NAME}.oso)\n    add_custom_command(\n        OUTPUT ${outfile}\n        COMMAND ${RENDERMAN_BINARY_DIR}/oslc -o ${outfile} ${infile}\n        MAIN_DEPENDENCY ${infile}\n        VERBATIM\n    )\n    add_custom_target(${SHADER_NAME}_target DEPENDS ${outfile})\n    add_dependencies(hdPrman ${SHADER_NAME}_target)\n    install(\n        PROGRAMS ${outfile}\n        DESTINATION ${PXR_INSTALL_SUBDIR}/shaders\n    )\nendfunction()\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Spline and Knot Properties - YAML\nDESCRIPTION: This configuration snippet describes a spline's extrapolation method (pre and post as 'Held'), specifies it is not Hermite, and includes a list of knots with timing, value, slopes, lengths, and auto-interpolation flags. It organizes essential details for defining a test spline for regression or curve evaluation. There are no external dependencies, and these configurations serve as input for downstream spline testing functions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReplaceNone_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope -0.250000, preLen 0.000000, postLen 0.250000, auto false / false\n  3.000000: 2.000000, Curve, preSlope 0.250000, postSlope 0.250000, preLen 0.250000, postLen 0.250000, auto false / false\n  4.000000: 2.000000, Curve, preSlope 0.250000, postSlope 0.000000, preLen 0.250000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Spline Data Object Construction\nDESCRIPTION: Python object construction for TsTest_SplineData with detailed parameters including knot points, interpolation methods, and slope values\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/InitiallyRegressiveNone_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.38p+7'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('-0x1.4cccccccccccdp+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.f99999999999ap+3'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.4ep+7'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1.ccccccccccccdp+4'), preSlope = float.fromhex('0x1.999999999999ap-2'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.0cccccccccccdp+4'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Registering USD C++ Tests with CMake\nDESCRIPTION: This snippet shows how C++ tests are registered for USD components. It specifies the test name, command to run, and expected return code, without the PYTHON flag.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdCreateAttributeCpp\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdCreateAttributeCpp\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Draw Batching Test\nDESCRIPTION: Registers a test for HdSt draw batching functionality. This test checks the drawing batch system and compares stdout output against a reference file, with specific GPU configurations enabled.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_33\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStDrawBatching\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStDrawBatching\"\n    EXPECTED_RETURN_CODE 0\n    STDOUT_REDIRECT testHdStDrawBatching-Run1-stdout.txt\n    DIFF_COMPARE testHdStDrawBatching-Run1-stdout.txt\n    TESTENV testHdStDrawBatching\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n        HD_ENABLE_DOUBLE_MATRIX=1\n        HD_ENABLE_GPU_COUNT_VISIBLE_INSTANCES=1\n        HD_ENABLE_PACKED_NORMALS=0\n        HGI_ENABLE_VULKAN=0\n)\n```\n\n----------------------------------------\n\nTITLE: Registering HdTiny Test for Different Operating Systems in CMake\nDESCRIPTION: Sets up test registration for MacOS, Linux, and Windows with specific environment variables and commands. Each OS has its own configuration for library preloading and plugin path setup.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/imaging/examples/hdTiny/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# This test only runs on MacOS and Linux for now.\nif (APPLE)\n    pxr_register_test(testHdTiny\n        ENV\n            DYLD_INSERT_LIBRARIES=${CMAKE_INSTALL_PREFIX}/share/usd/examples/plugin/hdTiny.dylib\n            ${PXR_PLUGINPATH_NAME}=${CMAKE_INSTALL_PREFIX}/share/usd/examples/plugin/hdTiny/resources\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdTiny\" \n        STDOUT_REDIRECT output.txt\n        DIFF_COMPARE output.txt\n    )\nelseif (UNIX)\n    pxr_register_test(testHdTiny\n        ENV\n            LD_PRELOAD=${CMAKE_INSTALL_PREFIX}/share/usd/examples/plugin/hdTiny.so\n            ${PXR_PLUGINPATH_NAME}=${CMAKE_INSTALL_PREFIX}/share/usd/examples/plugin/hdTiny/resources\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdTiny\" \n        STDOUT_REDIRECT output.txt\n        DIFF_COMPARE output.txt\n    )\nelseif (WIN32)\n    pxr_register_test(testHdTiny\n        ENV\n            ${PXR_PLUGINPATH_NAME}=${CMAKE_INSTALL_PREFIX}/share/usd/examples/plugin/hdTiny/resources\n        PRE_PATH\n            ${CMAKE_INSTALL_PREFIX}/share/usd/examples/plugin/hdTiny\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdTiny\" \n        STDOUT_REDIRECT output.txt\n        DIFF_COMPARE output.txt\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering Individual USD Asset Validation Tests with CMake\nDESCRIPTION: These pxr_register_test commands each register individual test cases using the usdchecker tool to validate the integrity of specific USD asset files. Each entry specifies a test name, fully-formed command with optional arguments (such as --arkit), the target USD file, and the expected exit code signaling pass or failure. Dependencies include access to the relevant USD files and a properly configured PATH for usdchecker; outcomes are determined solely by the validation result code produced.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdChecker35\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdchecker --useNewValidationFramework bad/brokenRef.usd\"\n    EXPECTED_RETURN_CODE 1\n)\n\npxr_register_test(testUsdChecker36\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdchecker --useNewValidationFramework --arkit bad/badShaderUnsupportedTexture.usdc\"\n    EXPECTED_RETURN_CODE 1\n)\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Spline with Knots in OpenUSD Text Format\nDESCRIPTION: A custom textual representation of a spline used within OpenUSD's Ts module. It specifies the spline type (non-Hermite: `hermite false`), pre/post extrapolation methods (`preExtrap Held`, `postExtrap Held`), and lists knot points under the `Knots:` section. Each knot line details its time, value, interpolation type (`Curve`), pre-slope, post-slope, pre-length, post-length, and pre/post auto tangent flags (`auto false / false`).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReorderContain_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope -0.250000, preLen 0.000000, postLen 0.250000, auto false / false\n  3.000000: 1.000000, Curve, preSlope -0.250000, postSlope -0.250000, preLen 0.250000, postLen 0.200000, auto false / false\n  3.200000: 2.000000, Curve, preSlope 0.250000, postSlope 0.250000, preLen 0.200000, postLen 0.250000, auto false / false\n  4.000000: 2.000000, Curve, preSlope 0.250000, postSlope 0.000000, preLen 0.250000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Registering usdview Z-Up Axis Test\nDESCRIPTION: Registers a CMake test named `testUsdviewUpAxis_zUp`. This test executes `testusdview` with the Python script `testUsdviewUpAxis_zUp.py` and the specific input file `testZUp.usda`. It verifies correct handling of scenes with Z as the up-axis by performing perceptual image difference comparison against `zUp.png`, using failure thresholds of 0.05 absolute and 0.03 percent, and expecting a return code of 0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdviewUpAxis_zUp\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewUpAxis_zUp.py testZUp.usda\"\n    IMAGE_DIFF_COMPARE\n        zUp.png\n    FAIL 0.05\n    FAIL_PERCENT 0.03\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Composition Result for /Inherits_2\nDESCRIPTION: Shows the resulting prim stack after composing the prim at path '/Inherits_2'. The prim originates solely from the 'root.sdf' layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicSpecializesAndInherits.testenv/baseline/compositionResults_BasicSpecializesAndInherits.txt#2025-04-23_snippet_4\n\nLANGUAGE: log\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Inherits_2>\n\nPrim Stack:\n    root.sdf             /Inherits_2\n```\n\n----------------------------------------\n\nTITLE: USD Layer Stack and Prim Composition Output\nDESCRIPTION: Log output showing layer stack composition and prim traversal results for a USD stage. Displays the relationships between root.sdf and rig.sdf layers, along with prim stacks and child name mappings.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyRelocationSquatter.testenv/baseline/compositionResults_TrickyRelocationSquatter.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLoading @TrickyRelocationSquatter/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </X>\n\nPrim Stack:\n    root.sdf             /X\n    root.sdf             /_Class_X\n    rig.sdf              /Y\n\nChild names:\n     ['A2', 'B2']\n\nProhibited child names:\n     ['A', 'B']\n\n------------------------------------------------------------------------\nResults for composing </X/A2>\n\nPrim Stack:\n    root.sdf             /X/A2\n    rig.sdf              /Y/A\n\n------------------------------------------------------------------------\nResults for composing </X/B2>\n\nPrim Stack:\n    root.sdf             /X/B2\n    root.sdf             /_Class_X/B\n\n------------------------------------------------------------------------\nResults for composing </_Class_X>\n\nPrim Stack:\n    root.sdf             /_Class_X\n\nChild names:\n     ['B', 'B2']\n\n------------------------------------------------------------------------\nResults for composing </_Class_X/B>\n\nPrim Stack:\n    root.sdf             /_Class_X/B\n\n------------------------------------------------------------------------\nResults for composing </_Class_X/B2>\n\nPrim Stack:\n    root.sdf             /_Class_X/B2\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for /Pigeon Prim\nDESCRIPTION: This snippet shows the composition results for the root /Pigeon prim, including its prim stack and child names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpRegressionBugs_bug69932.testenv/baseline/compositionResults_bug69932.txt#2025-04-23_snippet_0\n\nLANGUAGE: USD\nCODE:\n```\nPrim Stack:\n    root.sdf             /Pigeon\n    Pigeon_rig.sdf       /Pigeon\n    Pigeon_rig.sdf       /_class_CharRig\n    Pigeon_bodyrig.sdf   /CharRig\n\nChild names:\n     ['Rig', 'Anim']\n```\n\n----------------------------------------\n\nTITLE: Defining Copyright and Table of Contents in RST Documentation\nDESCRIPTION: This snippet shows how to define copyright information using ISO entities and create a local table of contents in RST documentation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_ar2.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nCopyright |copy| 2020, Pixar Animation Studios,  *version 1.0*\n\n.. contents:: :local:\n```\n\n----------------------------------------\n\nTITLE: LArm Prim Composition\nDESCRIPTION: Composition results for the LArm prim showing symmetric arm references and inheritance.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TypicalReferenceToChargroupWithRename.testenv/baseline/compositionResults_TypicalReferenceToChargroupWithRename.txt#2025-04-23_snippet_4\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /Group_1/Model_1/LArm\n    root.sdf             /Group_1/Model_1/SymArm\n    group.sdf            /Group/Model/LArm\n    group.sdf            /Group/Model/SymArm\n    model.sdf            /Model/LArm\n    model.sdf            /Model/SymArm\n```\n\n----------------------------------------\n\nTITLE: Installing Test Data Directories in CMake\nDESCRIPTION: Uses the custom `pxr_install_test_dir` CMake function to copy test environment directories. The `SRC` argument specifies the source directory containing test assets (`testenv/testUsdChecker`), and the `DEST` argument defines the unique destination directory name within the build/install test area (e.g., `testUsdChecker1`, `testUsdChecker2`, etc.). This pattern is repeated numerous times to provide isolated environments for different tests.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdChecker\n    DEST testUsdChecker1\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdChecker\n    DEST testUsdCheckerN # Representative example\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building hdGp Library with CMake\nDESCRIPTION: Sets up the build configuration for the hdGp library, which appears to be related to generative procedurals in the Hydra rendering framework. The configuration defines dependencies on other libraries like hd and hf, includes TBB (Threading Building Blocks) for parallelism, and specifies several public classes related to generative procedural functionality.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdGp/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE hdGp)\n\nset(optionalPublicClasses \"\")\n\npxr_library(hdGp\n    LIBRARIES\n        hd\n        hf\n        ${TBB_tbb_LIBRARY}\n\n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n\n    PUBLIC_CLASSES\n        generativeProcedural\n        generativeProceduralPlugin\n        generativeProceduralPluginRegistry\n        generativeProceduralFilteringSceneIndex\n        generativeProceduralResolvingSceneIndex\n        sceneIndexPlugin\n        \n    PUBLIC_HEADERS\n        api.h\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Registering UsdView Additive Test in CMake\nDESCRIPTION: This snippet registers a test for UsdView additive rendering. It specifies a Python command to run the test script, sets up an image comparison, and defines failure thresholds.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdviewAdditive\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewAdditive.py test.usda\"\n    IMAGE_DIFF_COMPARE\n        additive.png\n    FAIL 0.05\n    FAIL_PERCENT 0.03\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring PEGTL Namespace in C++\nDESCRIPTION: C++ code snippet for defining the PEGTL namespace based on USD's internal namespace configuration. This ensures isolation from other versions of USD/PEGTL in client code.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/pegtl/README.md#2025-04-23_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// Define PXR_PEGTL_NAMESPACE based on the internal namespace to isolate\n// it from other versions of USD/PEGTL in client code.\n#include \"pxr/pxr.h\"\n\n#if PXR_USE_NAMESPACES\n#define PXR_PEGTL_NAMESPACE PXR_INTERNAL_NS ## _pegtl\n#else\n#define PXR_PEGTL_NAMESPACE pxr_pegtl\n#endif\n```\n\n----------------------------------------\n\nTITLE: Analyzing Composition for /Parent Prim (USD)\nDESCRIPTION: Shows the composition analysis for the '/Parent' prim. It indicates the contributing layers ('root.sdf', 'A.sdf') forming the prim stack and lists its immediate child prim name ('Child').\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorPermissionDenied.testenv/baseline/compositionResults_ErrorPermissionDenied.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\nResults for composing </Parent>\n\nPrim Stack:\n    root.sdf             /Parent\n    A.sdf                /Parent\n\nChild names:\n     ['Child']\n```\n\n----------------------------------------\n\nTITLE: RST Document Title\nDESCRIPTION: ReStructuredText document title and orphan directive for USD Preview Surface documentation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdpreviewsurface.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n:orphan:\n\n==========================\nUsdPreviewSurface Proposal\n==========================\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Composition Result for /Specializes_1\nDESCRIPTION: Shows the resulting prim stack after composing the prim at path '/Specializes_1'. Composition includes contributions from '/Inherits_1' due to specialization, both defined in 'root.sdf'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicSpecializesAndInherits.testenv/baseline/compositionResults_BasicSpecializesAndInherits.txt#2025-04-23_snippet_2\n\nLANGUAGE: log\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Specializes_1>\n\nPrim Stack:\n    root.sdf             /Specializes_1\n    root.sdf             /Inherits_1\n```\n\n----------------------------------------\n\nTITLE: Composing /VariantAtRelocateSource/Sibling/Class Prim in USD\nDESCRIPTION: Details the composition of </VariantAtRelocateSource/Sibling/Class>, showing its prim stack influenced by parent variant selections and referencing `ref.sdf`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorOpinionAtRelocationSource.testenv/baseline/compositionResults_ErrorOpinionAtRelocationSource.txt#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </VariantAtRelocateSource/Sibling/Class>\n\nPrim Stack:\n    root.sdf             /VariantAtRelocateSource/Sibling/Class\n    root.sdf             /VariantAtRelocateSource/Child{child=a}Child2/Class\n    ref.sdf              /Ref/Child/Child2/Class\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimB\nDESCRIPTION: Shows the composition results for the prim </PrimB>. The prim stack indicates its definition in root.sdf and lists its child prim names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimB>\n\nPrim Stack:\n    root.sdf             /PrimB\n\nChild names:\n     ['PrimB_Child']\n```\n\n----------------------------------------\n\nTITLE: Prim B Composition Result\nDESCRIPTION: Shows composition results for prim /B including variant selections and child prims.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantFallbackDrivingAuthoredVariant.testenv/baseline/compositionResults_TrickyVariantFallbackDrivingAuthoredVariant.txt#2025-04-23_snippet_2\n\nLANGUAGE: usda\nCODE:\n```\nPrim Stack:\n    root.sdf             /B\n    root.sdf             /B{vset2=authored}\n    root.sdf             /B{vset1=fallback}\n\nVariant Selections:\n    {vset1 = fallback}\n    {vset2 = authored}\n\nChild names:\n     ['vset2_authored_child']\n```\n\n----------------------------------------\n\nTITLE: Configuring and Registering HDX Imaging Library and Tests - CMake\nDESCRIPTION: This CMake script configures the build settings for the 'pxr/imaging/hdx' package in the OpenUSD project. It conditionally includes dependencies, resource files, and test binaries based on feature flags and platform support. The script uses custom macros (such as pxr_library, pxr_build_test, pxr_install_test_dir, and pxr_register_test) to organize compilation units, link libraries, manage test environments, and register test cases for execution. Inputs are controlled by CMake cache variables (e.g., PXR_BUILD_GPU_SUPPORT), platforms, and custom options. Outputs include built libraries and test binaries, all installed and registered for test automation. Requires the presence of USD/PXR macros and standard CMake modules. Limitations: tightly integrated with USD/PXR build ecosystem; assumes the presence of all required macros and environment variables.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdx/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE hdx)\n\n# XXX We check for PXR_ENABLE_GL_SUPPORT since Hdx currently still uses\n# GL via GarchGLApi. Once Hdx uses only Hgi, remove GL_SUPPORT check.\nif (NOT ${PXR_BUILD_GPU_SUPPORT} OR NOT ${PXR_ENABLE_GL_SUPPORT})\n    message(STATUS\n        \"Skipping ${PXR_PACKAGE} because PXR_BUILD_GPU_SUPPORT is OFF\")\n    return()\nendif()\n\nset (optionalCppFiles \"\")\nif (PXR_BUILD_OPENCOLORIO_PLUGIN)\n    list(APPEND optionalLibs ${OCIO_LIBRARIES})\n    list(APPEND optionalIncludeDirs ${OCIO_INCLUDE_DIRS})\nendif()\n\npxr_library(hdx\n    LIBRARIES\n        plug\n        tf\n        vt\n        gf\n        work\n        garch\n        glf\n        pxOsd\n        hd\n        hdSt\n        hgi\n        hgiInterop\n        cameraUtil\n        sdf\n        ${optionalLibs}\n\n    INCLUDE_DIRS\n        ${optionalIncludeDirs}\n\n    PUBLIC_CLASSES\n        aovInputTask\n        boundingBoxTask\n        colorizeSelectionTask\n        colorChannelTask\n        colorCorrectionTask\n        drawTargetTask\n        effectsShader\n        freeCameraSceneDelegate\n        freeCameraPrimDataSource\n        fullscreenShader\n        hgiConversions\n        oitBufferAccessor\n        oitRenderTask\n        oitResolveTask\n        oitVolumeRenderTask\n        package\n        pickTask\n        pickFromRenderBufferTask\n        presentTask\n        renderTask\n        renderSetupTask\n        selectionSceneIndexObserver\n        selectionTask\n        selectionTracker\n        shadowTask\n        simpleLightTask\n        skydomeTask\n        task\n        taskController\n        taskControllerSceneIndex\n        tokens\n        types\n        visualizeAovTask\n\n    PUBLIC_HEADERS\n        shadowMatrixComputation.h\n        version.h\n        api.h\n\n    PRIVATE_CLASSES\n        debugCodes\n        unitTestDelegate\n\n    PRIVATE_HEADERS\n        unitTestUtils.h\n\n    RESOURCE_FILES\n        plugInfo.json\n        shaders/boundingBox.glslfx\n        shaders/colorChannel.glslfx\n        shaders/colorCorrection.glslfx\n        shaders/fullscreen.glslfx\n        shaders/oitResolveImageShader.glslfx\n        shaders/outline.glslfx\n        shaders/renderPass.glslfx\n        shaders/renderPassColorShader.glslfx\n        shaders/renderPassColorAndSelectionShader.glslfx\n        shaders/renderPassColorWithOccludedSelectionShader.glslfx\n        shaders/renderPassPickingShader.glslfx\n        shaders/renderPassOitShader.glslfx\n        shaders/renderPassOitOpaqueShader.glslfx\n        shaders/renderPassOitVolumeShader.glslfx\n        shaders/renderPassShadowShader.glslfx\n        shaders/selection.glslfx\n        shaders/skydome.glslfx\n        shaders/visualize.glslfx\n        textures/StinsonBeach.hdr\n        textures/StinsonBeach.tex\n\n    DOXYGEN_FILES\n        overview.dox\n)\n\nif (X11_FOUND OR APPLE)\npxr_build_test(testHdxRenderTask\n    LIBRARIES\n        hdx\n        hd\n        sdf\n        glf\n        garch\n        arch\n        tf\n    CPPFILES\n        testenv/testHdxRenderTask.cpp\n)\npxr_build_test(testHdxLightAndShadow\n    LIBRARIES\n        hdx\n        hd\n        sdf\n        glf\n        garch\n        arch\n        tf\n    CPPFILES\n        testenv/testHdxLightAndShadow.cpp\n)\nendif()\n\nif (X11_FOUND)\npxr_build_test(testHdxIdRender\n    LIBRARIES\n        hdx\n        hd\n        hdSt\n        sdf\n        glf\n        garch\n        arch\n        tf\n    CPPFILES\n        testenv/testHdxIdRender.cpp\n)\npxr_build_test(testHdxPickAndHighlight\n    LIBRARIES\n        hdx\n        hd\n        hdSt\n        sdf\n        glf\n        garch\n        arch\n        tf\n    CPPFILES\n        unitTestUtils.cpp\n        testenv/testHdxPickAndHighlight.cpp\n)\npxr_build_test(testHdxCameraAndLight\n    LIBRARIES\n        hdx\n        hd\n        sdf\n        glf\n        arch\n        tf\n    CPPFILES\n        testenv/testHdxCameraAndLight.cpp\n)\npxr_build_test(testHdxPickingWithReprAndRefineChanges\n    LIBRARIES\n        hdx\n        hd\n        hdSt\n        sdf\n        glf\n        garch\n        arch\n        tf\n    CPPFILES\n        unitTestUtils.cpp\n        testenv/testHdxPickingWithReprAndRefineChanges.cpp\n)\npxr_build_test(testHdxUnpickablesAsOccluders\n    LIBRARIES\n        hdx\n        hd\n        hdSt\n        sdf\n        glf\n        garch\n        arch\n        tf\n    CPPFILES\n        unitTestUtils.cpp\n        testenv/testHdxUnpickablesAsOccluders.cpp\n)\npxr_build_test(testHdxPickTarget\n    LIBRARIES\n        hdx\n        hd\n        hdSt\n        sdf\n        glf\n        garch\n        arch\n        tf\n    CPPFILES\n        unitTestUtils.cpp\n        testenv/testHdxPickTarget.cpp\n)\npxr_build_test(testHdxPickResolveMode\n    LIBRARIES\n        hdx\n        hd\n        hdSt\n        sdf\n        glf\n        garch\n        arch\n        tf\n    CPPFILES\n        unitTestUtils.cpp\n        testenv/testHdxPickResolveMode.cpp\n)\nendif()\n\nif (${PXR_HEADLESS_TEST_MODE})\n    message(STATUS \"Skipping ${PXR_PACKAGE} tests because PXR_HEADLESS_TEST_MODE is ON\")\n    return()\nendif()\n\nif (APPLE)\n    message(STATUS \"Skipping ${PXR_PACKAGE} tests because they are currently unsupported on macOS\")\n    return()\nendif()\n\nif (WIN32)\n    message(STATUS \"Skipping ${PXR_PACKAGE} tests because they are currently unsupported on Windows\")\n    return()\nendif()\n\n#\n# Install tests\n#\npxr_install_test_dir(\n    SRC testenv/testHdxLightAndShadow\n    DEST testHdxLightAndShadow\n)\npxr_install_test_dir(\n    SRC testenv/testHdxPickAndHighlight\n    DEST testHdxPickAndHighlight\n)\npxr_install_test_dir(\n    SRC testenv/testHdxPickTarget\n    DEST testHdxPickTarget\n)\npxr_install_test_dir(\n    SRC testenv/testHdxPickingWithReprAndRefineChanges\n    DEST testHdxPickingWithReprAndRefineChanges\n)\npxr_install_test_dir(\n    SRC testenv/testHdxRenderTask\n    DEST testHdxRenderTask\n)\npxr_install_test_dir(\n    SRC testenv/testHdxUnpickablesAsOccluders\n    DEST testHdxUnpickablesAsOccluders\n)\n\n#\n# Register tests\n#\npxr_register_test(testHdxCameraAndLight\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdxCameraAndLight\"\n    EXPECTED_RETURN_CODE 0\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdxIdRender\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdxIdRender --offscreen\"\n    EXPECTED_RETURN_CODE 0\n)\npxr_register_test(testHdxIdRender_Refined\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdxIdRender --offscreen --repr refined --refineLevel 2\"\n    EXPECTED_RETURN_CODE 0\n)\npxr_register_test(testHdxLightAndShadow\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdxLightAndShadow\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        color1.png\n        color2.png\n        color3.png\n        color4.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdxPickAndHighlight\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdxPickAndHighlight --offscreen\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        color1_unselected.png\n        color2_select.png\n        color3_select.png\n        color4_locate.png\n        color5_locate.png\n        color6_select_all_instances.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n)\npxr_register_test(testHdxPickResolveMode\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdxPickResolveMode --offscreen\"\n    EXPECTED_RETURN_CODE 0\n    ENV\n        TF_DEBUG=\"HDX_SELECTION_SETUP HD_SELECTION_UPDATE\"\n)\npxr_register_test(testHdxPickTarget\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdxPickTarget --offscreen\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        color1_unselected.png\n        color2_cube0_pick_face.png\n        color3_tet1_pick_faces.png\n        color4_tet0_pick_edge.png\n        color5_cube1_pick_edges.png\n        color6_cube1_pick_points.png\n        color7_cube1_pick_points_pick_through.png\n        color8_points_with_color.png\n        color9_cube0_wire_pick_face.png\n        color10_tet1_pick_prims.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    ENV\n        TF_DEBUG=\"HDX_SELECTION_SETUP HD_SELECTION_UPDATE\"\n)\npxr_register_test(testHdxPickingWithReprAndRefineChanges\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdxPickingWithReprAndRefineChanges --offscreen\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        color1_unselected.png\n        color2_refine_wont_change_cube1.png\n        color3_repr_change_cube2.png\n        color4_repr_and_refine_change_cube1.png\n        color5_refine_change_cube2.png\n        color6_unselected.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n)\npxr_register_test(testHdxRenderTask\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdxRenderTask\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        color1.png\n        color2.png\n        color3.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdxUnpickablesAsOccluders\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdxUnpickablesAsOccluders --offscreen\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        color1_unselected.png\n        color2_cube0_pickable.png\n        color3_cube0_unpickable.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n)\n\n# Certain tests use plugins that require shared libraries.\nif (TARGET shared_libs)\n\npxr_build_test(testHdxDrawTarget\n    LIBRARIES\n        hdx\n        hd\n        sdf\n        glf\n        arch\n        tf\n    CPPFILES\n        testenv/testHdxDrawTarget.cpp\n)\npxr_install_test_dir(\n    SRC testenv/testHdxDrawTarget\n    DEST testHdxDrawTarget\n)\npxr_register_test(testHdxDrawTarget\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdxDrawTarget\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        color1.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n\nendif() # TARGET shared_libs\n\n```\n\n----------------------------------------\n\nTITLE: Loading USD Layer Stack and Composition Results\nDESCRIPTION: Shows the layer stack composition for a character rig with variant handling for tail configurations. Demonstrates how prims are composed across different layers with variant selections affecting the hierarchy.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyRelocationOfPrimFromVariant.testenv/baseline/compositionResults_TrickyRelocationOfPrimFromVariant.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nLayer Stack:\n     root.sdf\n\nResults for composing </Char>\n\nPrim Stack:\n    root.sdf             /Char\n    CharRig.sdf          /CharRig\n    CharRig.sdf          /CharRig{TailRigVersion=Standard}\n\nVariant Selections:\n    {TailRigVersion = Standard}\n\nChild names:\n     ['TailRig', 'Anim']\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Stronger Than Payload Nodes in USD\nDESCRIPTION: This snippet demonstrates forward and reverse iteration over nodes and prim specs stronger than payload for the prim path </Model>. It shows the relative strength of different node types in USD scene composition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpIterator.testenv/baseline/iteration_results.txt#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nIterating over stronger than payload nodes for </Model>:\n @root.sdf@</Model>\troot\n @root.sdf@</Class>\tinherit\n @mcat.sdf@</Model>\treference\n @mcat.sdf@</Class>\tinherit\n @mcat.sdf@</Model{pin=latest}>\tvariant\n @model_latest.sdf@</Model>\treference\n @model_latest_payload.sdf@</Model>\tpayload\n @mcat.sdf@</Specializes>\tspecialize\n @root.sdf@</Specializes>\tspecialize\n @mcat.sdf@</Specializes>\tspecialize\n\nReverse iterating over stronger than payload nodes for </Model>:\n @mcat.sdf@</Specializes>\tspecialize\n @root.sdf@</Specializes>\tspecialize\n @mcat.sdf@</Specializes>\tspecialize\n @model_latest_payload.sdf@</Model>\tpayload\n @model_latest.sdf@</Model>\treference\n @mcat.sdf@</Model{pin=latest}>\tvariant\n @mcat.sdf@</Class>\tinherit\n @mcat.sdf@</Model>\treference\n @root.sdf@</Class>\tinherit\n @root.sdf@</Model>\troot\n\nIterating over stronger than payload prim specs for </Model>:\n @root.sdf@</Model>\troot\n @root.sdf@</Class>\tinherit\n @mcat.sdf@</Model>\treference\n @mcat.sdf@</Class>\tinherit\n @mcat.sdf@</Model{pin=latest}>\tvariant\n @model_latest.sdf@</Model>\treference\n @model_latest_payload.sdf@</Model>\tpayload\n @mcat.sdf@</Specializes>\tspecialize\n\nReverse iterating over stronger than payload prim specs for </Model>:\n @mcat.sdf@</Specializes>\tspecialize\n @model_latest_payload.sdf@</Model>\tpayload\n @model_latest.sdf@</Model>\treference\n @mcat.sdf@</Model{pin=latest}>\tvariant\n @mcat.sdf@</Class>\tinherit\n @mcat.sdf@</Model>\treference\n @root.sdf@</Class>\tinherit\n @root.sdf@</Model>\troot\n```\n\n----------------------------------------\n\nTITLE: Displaying Prim Stack Composition for /SS4 in OpenUSD\nDESCRIPTION: Shows the composition result for the /SS4 prim, displaying the stack of scene description files that contribute to this prim and their hierarchy.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecond4.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nPrim Stack:\n    ss_12fps.sdf         /SS4\n    ss_12fps.sdf         /SS4\n    ss_12fps.sdf         /SS4\n    ss_12fps.sdf         /SS4\n    ref.sdf              /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_48tcps.sdf       /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_24tcps_12fps.sdf /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_12fps.sdf        /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n```\n\n----------------------------------------\n\nTITLE: Configuring HioAvif Plugin Build\nDESCRIPTION: Defines the main plugin build configuration including library dependencies, private headers, and source files for the HioAvif plugin. Sets up core dependencies and includes extensive AOM and AVIF related files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/plugin/hioAvif/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE hioAvif)\n\npxr_plugin(hioAvif\n    LIBRARIES\n        ar\n        arch\n        gf\n        hio\n        tf\n\n    PRIVATE_HEADERS\n        aom/aom.h\n        [... header files ...]\n        \n    CPPFILES\n        aom/aom_codec.c\n        [... source files ...]\n        AVIFImage.cpp\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Composing Prim /PayloadMultiRef in USD\nDESCRIPTION: Shows composition results for `/PayloadMultiRef`, combining a payload (`ref.sdf`/`ref_sub.sdf`) and a reference (`B.sdf`). The prim stack and time offsets reflect contributions from the root, the payload arc (with scale), and the reference arc.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicTimeOffset.testenv/baseline/compositionResults_BasicTimeOffset.txt#2025-04-23_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </PayloadMultiRef>\n\nPrim Stack:\n    root.sdf             /PayloadMultiRef\n    ref_sub.sdf          /Ref2\n    B.sdf                /Model\n\nTime Offsets:\n    root.sdf             /PayloadMultiRef root       (offset=0.00, scale=1.00)\n    ref.sdf              /Ref2           payload    (offset=10.00, scale=2.00)\n        ref_sub.sdf                      sublayer   (offset=20.00, scale=1.00)\n    B.sdf                /Model          reference  (offset=50.00, scale=2.00)\n\nChild names:\n     ['Anim', 'Frame']\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Cases\nDESCRIPTION: Sets up individual test cases for the usdRi module, specifying execution parameters and expected return codes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdRi/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdRiSchemata\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdRiSchemata\"  \n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdRiSplineAPI\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdRiSplineAPI\"  \n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdRiUtilities\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdRiUtilities\"  \n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and registering the LeafNodeCache test for ef library\nDESCRIPTION: Sets up a test for the LeafNodeCache component, specifying the required libraries and source files, and registers it with the testing framework with an expected return code of 0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/ef/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testEfLeafNodeCache\n    LIBRARIES\n        ef\n        tf\n        work\n    \n    CPPFILES\n        testenv/testEfLeafNodeCache.cpp\n)\n\npxr_register_test(testEfLeafNodeCache\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testEfLeafNodeCache\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring GLF Library in OpenUSD CMake Build System\nDESCRIPTION: This CMake script configures the GLF library, which is part of the OpenUSD imaging framework. It defines package prefixes, checks if GL support is enabled, and specifies all required dependencies, classes, Python bindings, and resource files to include in the build.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/glf/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE glf)\n\nif (NOT ${PXR_ENABLE_GL_SUPPORT})\n    message(STATUS\n        \"Skipping ${PXR_PACKAGE} because PXR_ENABLE_GL_SUPPORT is OFF\")\n    return()\nendif()\n\nset(optionalPublicClasses \"\")\n\npxr_library(glf\n    LIBRARIES\n        ar\n        arch\n        garch\n        gf\n        hf\n        hio\n        plug\n        tf\n        trace\n        sdf\n\n    PUBLIC_CLASSES\n        bindingMap\n        contextCaps\n        diagnostic\n        drawTarget\n        glContext\n        glRawContext\n        info\n        simpleLight\n        simpleLightingContext\n        simpleMaterial\n        simpleShadowArray\n        testGLContext\n        texture\n        uniformBlock\n        utils\n        ${optionalPublicClasses}\n\n    PRIVATE_CLASSES\n        debugCodes\n        glContextRegistry\n\n    PUBLIC_HEADERS\n        api.h\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapDiagnostic.cpp\n        wrapDrawTarget.cpp\n        wrapSimpleLight.cpp\n        wrapSimpleMaterial.cpp\n        wrapTexture.cpp\n\n    PYMODULE_FILES\n        __init__.py\n\n    RESOURCE_FILES\n        plugInfo.json\n        shaders/pcfShader.glslfx\n        shaders/simpleLighting.glslfx\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Attribute Value at Default Time with UsdTimeCode::Default in C++\nDESCRIPTION: Represents the default time code value in C++. When used with `UsdAttribute::Get`, it resolves the attribute's default value, ignoring any authored time samples. This is generally discouraged for animated stages.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_62\n\nLANGUAGE: cpp\nCODE:\n```\nUsdTimeCode::Default\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Scripts\nDESCRIPTION: Configures test scripts for the USD Dancing Cubes example\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/examples/usdDancingCubesExample/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_test_scripts(\n     testenv/testUsdDancingCubesExample.py\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdDancingCubesExample\n    DEST testUsdDancingCubesExample\n)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Layer Stack in OpenUSD\nDESCRIPTION: This snippet shows the layer stack of the OpenUSD scene, listing the SDF files in order of composition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicListEditing.testenv/baseline/compositionResults_BasicListEditing_usd.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLayer Stack:\n     root.sdf\n     sub1.sdf\n     sub2.sdf\n```\n\n----------------------------------------\n\nTITLE: Registering HIO Image Test in CMake\nDESCRIPTION: Registers the HIO image test for execution using the installed test binary.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hio/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHioImage\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHioImage\"\n)\n```\n\n----------------------------------------\n\nTITLE: Building Sdr Registry Test Shared Library in CMake\nDESCRIPTION: This snippet builds a test shared library for Sdr Registry using the pxr_build_test_shared_lib CMake function. It specifies the library name, installation prefix, dependencies, and source files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/sdr/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test_shared_lib(TestSdrRegistry\n    INSTALL_PREFIX SdrPlugins\n    LIBRARIES\n        tf\n        ndr\n        sdr\n    CPPFILES\n        testenv/TestSdrRegistry_argsParserPlugin.cpp\n        testenv/TestSdrRegistry_discoveryPlugin.cpp\n        testenv/TestSdrRegistry_oslParserPlugin.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining RegressivePreJ Spline in OpenUSD\nDESCRIPTION: Specifies the RegressivePreJ spline with Bezier curve type, held extrapolation, and two knot points. This spline has asymmetrical tangent properties favoring the pre-tangent.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\nSpline: RegressivePreJ\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 2.5\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 2.5\n  pre-tan slope 0.6\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Spline Test Data Object Construction\nDESCRIPTION: Python code constructing a TsTest_SplineData object with detailed spline parameters including knot points, interpolation methods and slopes\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/InitiallyRegressiveKeepStart_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.38p+7'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('-0x1.4cccccccccccdp+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.d5546ea588738p+3'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.4ep+7'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1.ccccccccccccdp+4'), preSlope = float.fromhex('0x1.999999999999ap-2'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.d551ba9621ce3p+1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Defining a Spline in Human-Readable Format\nDESCRIPTION: A human-readable representation of a spline definition with Hermite flag, extrapolation methods, and knot points. The spline has 'Held' pre and post extrapolation with two knots at times 1.0 and 5.0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/tsTest_TsFramework.testenv/baseline/test_BaselineParams_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 1.000000, preLen 0.000000, postLen 0.500000, auto false / false\n  5.000000: 2.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.500000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Registering Tests with Output Verification in CMake\nDESCRIPTION: Registers tests that produce output which needs to be verified against reference files. These tests redirect their output to files and use DIFF_COMPARE to verify results.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(TfEnum\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTf TfEnum\"\n    STDOUT_REDIRECT enum.out\n    DIFF_COMPARE enum.out\n)\n```\n\n----------------------------------------\n\nTITLE: Registering HdSt Basic Drawing Test with Hull Representation and Back Face Culling\nDESCRIPTION: This CMake snippet registers a test for HdSt basic drawing using hull representation with back face culling. It runs the testHdStBasicDrawing executable with specific parameters and compares the output image against an expected result.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_Immediate_lv0_hull_cullback\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr hull --cullStyle BackUnlessDoubleSided --write testHdStBasicDrawing_lv0_hull_cullback.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv0_hull_cullback.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Performance Module Settings in CMake\nDESCRIPTION: Sets up prefix and package names for the performance testing module and configures Python binary and library components for performance measurement tools.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/performance/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX performance)\nset(PXR_PACKAGE extras_performance)\n\npxr_python_bin(usdmeasureperformance)\n\npxr_library(Performance\n    PYMODULE_FILES\n        __init__.py\n        parseTimingOutput.py\n        ExplicitMetrics/stageTraversalMetric.py\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Hydra Unit Tests for Execution in CMake\nDESCRIPTION: Registers all the compiled Hydra unit tests with the test system. This ensures that the tests can be executed as part of the test suite, with appropriate commands and comparison configurations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/CMakeLists.txt#2025-04-23_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdBufferSourceEmptyVal\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdBufferSourceEmptyVal\"\n)\n\npxr_register_test(testHdBufferSpec\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdBufferSpec\"\n)\n\npxr_register_test(testHdCommand\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdCommand\"\n)\n\npxr_register_test(testHdDataSourceLocator\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdDataSourceLocator\"\n)\n\npxr_register_test(testHdDirtyBitsTranslator\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdDirtyBitsTranslator\"\n)\n\npxr_register_test(testHdDirtyList\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdDirtyList\"\n)\n\npxr_register_test(testHdExtCompDependencySort\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdExtCompDependencySort\"\n)\n\npxr_register_test(testHdExtComputationUtils\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdExtComputationUtils\"\n)\n\npxr_register_test(testHdPerfLog\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdPerfLog\"\n)\n\npxr_register_test(testHdDataSource\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdDataSource\"\n)\n\npxr_register_test(testHdSceneIndex\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdSceneIndex\"\n)\n\npxr_register_test(testHdSortedIds\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdSortedIds\"\n    # XXX Disabling compare for now. testHdSortedId_removeTest.txt differs on Mac and Windows.\n    # DIFF_COMPARE testHdSortedId_populateTest.txt testHdSortedId_singleInsertTest.txt testHdSortedId_multiInsertTest.txt testHdSortedId_removeOnlyElementTest.txt testHdSortedId_removeRangeTest.txt testHdSortedId_removeBatchTest.txt testHdSortedId_removeSortedTest.txt testHdSortedId_removeUnsortedTest.txt testHdSortedId_removeAfterInsertNoSyncTest.txt\n)\n\npxr_register_test(testHdTimeSampleArray\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdTimeSampleArray\"\n)\n\npxr_register_test(testHdTypes\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Providing Dense Sample Data Points for Spline Evaluation - Structured Text\nDESCRIPTION: This sequence of floating-point pairs specifies sample (x, y) points for validation or regression analysis of interpolated splines. The values represent either time-value pairs or parameter-result samples, intended for automated comparison with computed spline results in tests. There are no dependencies; each line is a straightforward pair and no constraints on the number or sequence of samples is imposed.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReorderLimitActive_TsTestBaseline.txt#2025-04-23_snippet_3\n\nLANGUAGE: structured text\nCODE:\n```\n0.400000 1.000000\n1.000000 1.000000\n1.014925 0.996762\n1.029851 0.994243\n1.044776 0.992203\n1.059701 0.990512\n1.074627 0.989088\n1.089552 0.987878\n1.104478 0.986844\n1.119403 0.985957\n1.134328 0.985197\n1.149254 0.984546\n1.164179 0.983991\n1.179104 0.983521\n1.194030 0.983126\n1.208955 0.982799\n1.223881 0.982534\n1.238806 0.982325\n1.253731 0.982167\n1.268657 0.982056\n1.283582 0.981987\n1.298507 0.981959\n1.313433 0.981968\n1.328358 0.982010\n1.343284 0.982085\n1.358209 0.982190\n1.373134 0.982322\n1.388060 0.982480\n1.402985 0.982663\n1.417910 0.982869\n1.432836 0.983097\n1.447761 0.983344\n1.462687 0.983611\n1.477612 0.983896\n1.492537 0.984199\n1.507463 0.984517\n1.522388 0.984850\n1.537313 0.985198\n1.552239 0.985559\n1.567164 0.985934\n1.582090 0.986320\n1.597015 0.986718\n1.611940 0.987127\n1.626866 0.987546\n1.641791 0.987974\n1.656716 0.988412\n1.671642 0.988859\n1.686567 0.989313\n1.701493 0.989776\n1.716418 0.990245\n1.731343 0.990721\n1.746269 0.991203\n1.761194 0.991692\n1.776119 0.992185\n1.791045 0.992684\n1.805970 0.993188\n1.820896 0.993695\n1.835821 0.994207\n1.850746 0.994723\n1.865672 0.995241\n1.880597 0.995763\n1.895522 0.996287\n1.910448 0.996813\n1.925373 0.997341\n1.940299 0.997871\n1.955224 0.998402\n1.970149 0.998934\n1.985075 0.999467\n2.000000 1.000000\n2.014925 1.000533\n2.029851 1.001066\n2.044776 1.001598\n2.059701 1.002129\n2.074627 1.002659\n2.089552 1.003187\n2.104478 1.003713\n2.119403 1.004237\n2.134328 1.004759\n2.149254 1.005277\n2.164179 1.005793\n2.179104 1.006305\n2.194030 1.006812\n2.208955 1.007316\n2.223881 1.007815\n2.238806 1.008308\n2.253731 1.008797\n2.268657 1.009279\n2.283582 1.009755\n2.298507 1.010224\n2.313433 1.010687\n2.328358 1.011141\n2.343284 1.011588\n2.358209 1.012026\n2.373134 1.012454\n2.388060 1.012873\n2.402985 1.013282\n2.417910 1.013680\n2.432836 1.014066\n2.447761 1.014441\n2.462687 1.014802\n2.477612 1.015150\n2.492537 1.015483\n2.507463 1.015801\n2.522388 1.016104\n2.537313 1.016389\n2.552239 1.016656\n2.567164 1.016903\n2.582090 1.017131\n2.597015 1.017337\n2.611940 1.017520\n2.626866 1.017678\n2.641791 1.017810\n2.656716 1.017915\n2.671642 1.017990\n2.686567 1.018032\n2.701493 1.018041\n2.716418 1.018013\n2.731343 1.017944\n2.746269 1.017833\n2.761194 1.017675\n2.776119 1.017466\n2.791045 1.017201\n2.805970 1.016874\n2.820896 1.016479\n2.835821 1.016009\n2.850746 1.015454\n2.865672 1.014803\n2.880597 1.014043\n2.895522 1.013156\n2.910448 1.012122\n2.925373 1.010912\n2.940299 1.009488\n2.955224 1.007797\n2.970149 1.005757\n2.985075 1.003238\n3.000000 1.000000\n3.014925 0.997508\n3.029851 0.997822\n3.044776 1.001559\n3.059701 1.009599\n3.074627 1.023251\n3.089552 1.044627\n3.104478 1.077524\n3.119403 1.130147\n3.134328 1.229514\n3.149254 1.831215\n3.164179 1.945461\n3.179104 1.982965\n3.194030 1.997712\n3.200000 2.000000\n3.208955 2.002154\n3.223881 2.005382\n3.238806 2.008180\n3.253731 2.010576\n3.268657 2.012594\n3.283582 2.014258\n3.298507 2.015591\n3.313433 2.016614\n3.328358 2.017347\n3.343284 2.017811\n3.358209 2.018023\n3.373134 2.018003\n3.388060 2.017766\n3.402985 2.017330\n3.417910 2.016711\n3.432836 2.015925\n3.447761 2.014986\n3.462687 2.013910\n3.477612 2.012711\n3.492537 2.011403\n3.507463 2.010000\n3.522388 2.008516\n3.537313 2.006964\n3.552239 2.005357\n3.567164 2.003708\n3.582090 2.002032\n3.597015 2.000339\n3.611940 1.998644\n3.626866 1.996960\n3.641791 1.995298\n3.656716 1.993673\n3.671642 1.992098\n3.686567 1.990585\n3.701493 1.989148\n3.716418 1.987800\n3.731343 1.986556\n3.746269 1.985429\n3.761194 1.984433\n3.776119 1.983584\n3.791045 1.982896\n3.805970 1.982385\n3.820896 1.982067\n3.835821 1.981958\n3.850746 1.982075\n3.865672 1.982436\n3.880597 1.983059\n3.895522 1.983964\n3.910448 1.985170\n3.925373 1.986699\n3.940299 1.988573\n3.955224 1.990815\n4.000000 2.000000\n4.600000 2.000000\n```\n\n----------------------------------------\n\nTITLE: Accessing UsdGeomXformable in C++\nDESCRIPTION: Shows how to access UsdGeomXformable, which is the current base class for UsdLuxPortalLight.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_renderers.rst#2025-04-23_snippet_17\n\nLANGUAGE: C++\nCODE:\n```\nUsdGeomXformable\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </Bad_SubrootRefToPreRelocated> Referencing Original Location of Relocated Prim\nDESCRIPTION: Displays the composition results for </Bad_SubrootRefToPreRelocated>. The prim stack only contains the definition from 'root.sdf' because it attempts to reference the original path (/Char/ToBeRelocated) of a prim that has been relocated. References typically resolve to the final composed location, not the original location before relocation, leading to a broken reference.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_RelocateToNone.testenv/baseline/compositionResults_RelocateToNone_usd.txt#2025-04-23_snippet_7\n\nLANGUAGE: usd-composition-output\nCODE:\n```\nResults for composing </Bad_SubrootRefToPreRelocated>\n\nPrim Stack:\n    root.sdf             /Bad_SubrootRefToPreRelocated\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenUSD Layer Stack Composition Results for Character Rig\nDESCRIPTION: This text output shows the results of composing the layer stack for a character rig with tentacles in OpenUSD. It demonstrates how prims are composed across multiple layers with inheritance and relocation relationships.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsAndRelocates5.testenv/baseline/compositionResults_TrickyInheritsAndRelocates5.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLoading @TrickyInheritsAndRelocates5/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </CharRig>\n\nPrim Stack:\n    root.sdf             /CharRig\n\nChild names:\n     ['Anim', 'Rig']\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Anim>\n\nPrim Stack:\n    root.sdf             /CharRig/Anim\n\nChild names:\n     ['Arms']\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Anim/Arms>\n\nPrim Stack:\n    TentaclesRig.sdf     /TentaclesRig/Arms\n\nChild names:\n     ['R1Arm']\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Anim/Arms/R1Arm>\n\nPrim Stack:\n    TentacleRig.sdf      /TentacleRig/Tentacle\n\nChild names:\n     ['Knot03']\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Anim/Arms/R1Arm/Knot03>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface/_Class_KnotRig/Anim\n    TentacleRig.sdf      /TentacleRig/TentacleInterface/_Class_KnotRig/Anim\n\nProperty names:\n     ['foo']\n\nProperty stacks:\n/CharRig/Anim/Arms/R1Arm/Knot03.foo:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface/_Class_KnotRig/Anim.foo\n    TentacleRig.sdf      /TentacleRig/TentacleInterface/_Class_KnotRig/Anim.foo\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Rig>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig\n\nChild names:\n     ['TentaclesRig']\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Rig/TentaclesRig>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig/TentaclesRig\n    TentaclesRig.sdf     /TentaclesRig\n\nChild names:\n     ['TentacleRigs']\n\nProhibited child names:\n     ['Arms']\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Rig/TentaclesRig/TentacleRigs>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs\n    TentaclesRig.sdf     /TentaclesRig/TentacleRigs\n\nChild names:\n     ['_Class_TentacleRig', 'Sym1TentacleRig', 'R1TentacleRig']\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig\n    TentaclesRig.sdf     /TentaclesRig/TentacleRigs/_Class_TentacleRig\n    TentacleRig.sdf      /TentacleRig\n\nChild names:\n     ['TentacleInterface', 'Tentacle']\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface\n    TentacleRig.sdf      /TentacleRig/TentacleInterface\n\nChild names:\n     ['_Class_KnotRig', 'Knot03Rig']\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface/_Class_KnotRig>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface/_Class_KnotRig\n    TentacleRig.sdf      /TentacleRig/TentacleInterface/_Class_KnotRig\n\nChild names:\n     ['Anim']\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface/_Class_KnotRig/Anim>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface/_Class_KnotRig/Anim\n    TentacleRig.sdf      /TentacleRig/TentacleInterface/_Class_KnotRig/Anim\n\nProperty names:\n     ['foo']\n\nProperty stacks:\n/CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface/_Class_KnotRig/Anim.foo:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface/_Class_KnotRig/Anim.foo\n    TentacleRig.sdf      /TentacleRig/TentacleInterface/_Class_KnotRig/Anim.foo\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface/Knot03Rig>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface/_Class_KnotRig\n    TentacleRig.sdf      /TentacleRig/TentacleInterface/Knot03Rig\n    TentacleRig.sdf      /TentacleRig/TentacleInterface/_Class_KnotRig\n\nProhibited child names:\n     ['Anim']\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/Tentacle>\n\nPrim Stack:\n    TentacleRig.sdf      /TentacleRig/Tentacle\n\nChild names:\n     ['Knot03']\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/Tentacle/Knot03>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface/_Class_KnotRig/Anim\n    TentacleRig.sdf      /TentacleRig/TentacleInterface/_Class_KnotRig/Anim\n\nProperty names:\n     ['foo']\n\nProperty stacks:\n/CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/Tentacle/Knot03.foo:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface/_Class_KnotRig/Anim.foo\n    TentacleRig.sdf      /TentacleRig/TentacleInterface/_Class_KnotRig/Anim.foo\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Rig/TentaclesRig/TentacleRigs/Sym1TentacleRig>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig\n    TentaclesRig.sdf     /TentaclesRig/TentacleRigs/Sym1TentacleRig\n    TentaclesRig.sdf     /TentaclesRig/TentacleRigs/_Class_TentacleRig\n    TentacleRig.sdf      /TentacleRig\n\nChild names:\n     ['TentacleInterface', 'Tentacle']\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Rig/TentaclesRig/TentacleRigs/Sym1TentacleRig/TentacleInterface>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface\n    TentacleRig.sdf      /TentacleRig/TentacleInterface\n\nChild names:\n     ['_Class_KnotRig', 'Knot03Rig']\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Rig/TentaclesRig/TentacleRigs/Sym1TentacleRig/TentacleInterface/_Class_KnotRig>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface/_Class_KnotRig\n    TentacleRig.sdf      /TentacleRig/TentacleInterface/_Class_KnotRig\n\nChild names:\n     ['Anim']\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Rig/TentaclesRig/TentacleRigs/Sym1TentacleRig/TentacleInterface/_Class_KnotRig/Anim>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface/_Class_KnotRig/Anim\n    TentacleRig.sdf      /TentacleRig/TentacleInterface/_Class_KnotRig/Anim\n\nProperty names:\n     ['foo']\n\nProperty stacks:\n/CharRig/Rig/TentaclesRig/TentacleRigs/Sym1TentacleRig/TentacleInterface/_Class_KnotRig/Anim.foo:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface/_Class_KnotRig/Anim.foo\n    TentacleRig.sdf      /TentacleRig/TentacleInterface/_Class_KnotRig/Anim.foo\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Rig/TentaclesRig/TentacleRigs/Sym1TentacleRig/TentacleInterface/Knot03Rig>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface/_Class_KnotRig\n    TentacleRig.sdf      /TentacleRig/TentacleInterface/Knot03Rig\n    TentacleRig.sdf      /TentacleRig/TentacleInterface/_Class_KnotRig\n\nProhibited child names:\n     ['Anim']\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Rig/TentaclesRig/TentacleRigs/Sym1TentacleRig/Tentacle>\n\nPrim Stack:\n    TentacleRig.sdf      /TentacleRig/Tentacle\n\nChild names:\n     ['Knot03']\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Rig/TentaclesRig/TentacleRigs/Sym1TentacleRig/Tentacle/Knot03>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface/_Class_KnotRig/Anim\n    TentacleRig.sdf      /TentacleRig/TentacleInterface/_Class_KnotRig/Anim\n\nProperty names:\n     ['foo']\n\nProperty stacks:\n/CharRig/Rig/TentaclesRig/TentacleRigs/Sym1TentacleRig/Tentacle/Knot03.foo:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface/_Class_KnotRig/Anim.foo\n    TentacleRig.sdf      /TentacleRig/TentacleInterface/_Class_KnotRig/Anim.foo\n\n------------------------------------------------------------------------\nResults for composing </CharRig/Rig/TentaclesRig/TentacleRigs/R1TentacleRig>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig\n    TentaclesRig.sdf     /TentaclesRig/TentacleRigs/R1TentacleRig\n    TentaclesRig.sdf     /TentaclesRig/TentacleRigs/Sym1TentacleRig\n    TentaclesRig.sdf     /TentaclesRig/TentacleRigs/_Class_TentacleRig\n    TentacleRig.sdf      /TentacleRig\n\nChild names:\n     ['TentacleInterface']\n\nProhibited child names:\n     ['Tentacle']\n\n------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: EndVert Bezier Spline Configuration\nDESCRIPTION: Defines a Bezier spline with vertical end characteristics. Includes knot definitions with specific tan widths and slopes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_37\n\nLANGUAGE: text\nCODE:\n```\nSpline:\\n  value type double\\n  time valued 0\\n  curve type Bezier\\n  pre extrap Held\\n  post extrap Held\\nKnot:\\n  value type double\\n  curve type Bezier\\n  time 0\\n  value 0\\n  next interp Curve\\n  pre-tan width 0\\n  pre-tan slope 0\\n  post-tan width 1\\n  post-tan slope 0\\nKnot:\\n  value type double\\n  curve type Bezier\\n  time 1\\n  value 1\\n  next interp Curve\\n  pre-tan width 0\\n  pre-tan slope 0\\n  post-tan width 0\\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Specifying Spline and Knots Attributes - Data\nDESCRIPTION: Declares general spline properties such as Hermite mode, extrapolation behaviors, and a knot vector with precise per-knot slope, length, and auto-interpolant flags. This readable block is suitable for integration with test harnesses or configuration logic. There are no explicit code dependencies, but true utility presumes a parser or UI that interprets the field structure. Limitations: Declarative, not directly executable.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReorderKeepStart_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: data\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope -0.250000, preLen 0.000000, postLen 0.250000, auto false / false\n  3.000000: 1.000000, Curve, preSlope -0.250000, postSlope -0.250000, preLen 0.250000, postLen 0.250000, auto false / false\n  3.200000: 2.000000, Curve, preSlope 0.250000, postSlope 0.250000, preLen 0.130900, postLen 0.250000, auto false / false\n  4.000000: 2.000000, Curve, preSlope 0.250000, postSlope 0.000000, preLen 0.250000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Model/C Prim Composition\nDESCRIPTION: Shows the prim stack for /Model/C including inherited and referenced layers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpecializesAndInherits.testenv/baseline/compositionResults_TrickySpecializesAndInherits.txt#2025-04-23_snippet_4\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /Model/C\n    ref.sdf              /Ref/C\n    root.sdf             /Model/D\n    ref.sdf              /Ref/D\n```\n\n----------------------------------------\n\nTITLE: 3D Coordinate Points Array\nDESCRIPTION: Array of 3D coordinate points defining vertices of a geometric shape with x,y,z coordinates in tuple format.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/geomUtil/testenv/testMeshGenerators/baseline/generatedMeshes_open.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[(0, 0, -1), (0.30901697, 0, -0.95105654), (0.3022642, 0.06424824, -0.95105654), ...]\n```\n\n----------------------------------------\n\nTITLE: Illustrating All-Version Compatible Accessor Naming in C++\nDESCRIPTION: This C++ code snippet demonstrates a proposed naming convention (`GetXXXAttr`) for methods generated by `usdGenSchema` within the \"Compatible Cluster\" approach. This naming indicates the method can access the 'XXX' attribute across all compatible versions of the schema family.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_schema_versioning.rst#2025-04-23_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\n:cpp:`GetXXXAttr`\n```\n\n----------------------------------------\n\nTITLE: Registering UsdView Point Widths Test in CMake\nDESCRIPTION: This snippet registers a test for UsdView point widths. It specifies a Python command to run the test script, sets up multiple image comparisons for different point width settings, and defines failure thresholds.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdviewPointWidths\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewPointWidths.py points.usda\"\n    IMAGE_DIFF_COMPARE\n        start.png\n        set_point_widths_025.png\n        set_point_widths_050.png\n        set_point_widths_primvar_075.png\n        end.png\n    FAIL 0.05\n    FAIL_PERCENT 0.03\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Version-Specific ('V1 and Earlier') Accessor Naming in C++\nDESCRIPTION: This C++ snippet provides an example naming convention (`GetV1AndEarlierAttr`) for generated methods within the \"Compatible Cluster\" framework. This name indicates the method accesses an attribute compatible with schema versions up to and including version 1.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_schema_versioning.rst#2025-04-23_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\n:cpp:`GetV1AndEarlierAttr`\n```\n\n----------------------------------------\n\nTITLE: Initial Layer Stack View\nDESCRIPTION: Shows the initial layer stack before composition, containing only the root layer 'root.sdf'. This represents the base upon which references will be composed.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ExpressionsInReferences.testenv/baseline/compositionResults_ExpressionsInReferences.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimWithDefaultReferenceTarget/Default_Child\nDESCRIPTION: Displays the composition results for the child prim path </PrimWithDefaultReferenceTarget/Default_Child>. The prim stack shows its origin from the referenced default prim </Default> defined in defaultRef.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimWithDefaultReferenceTarget/Default_Child>\n\nPrim Stack:\n    defaultRef.sdf       /Default/Default_Child\n```\n\n----------------------------------------\n\nTITLE: USD Prim Composition for /B/Child\nDESCRIPTION: Shows the prim stack composition for the Child prim under /B, including variant selections.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantOverrideOfFallback.testenv/baseline/compositionResults_TrickyVariantOverrideOfFallback.txt#2025-04-23_snippet_4\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /B/Child\n    root.sdf             /B{vset2=selection}Child\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests for Static Build Configuration in USD\nDESCRIPTION: Conditional check to skip testing if using a static build configuration. Tests are only executed when building USD as shared libraries.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# applications linking against static build USD\nif (NOT BUILD_SHARED_LIBS)\n    message(STATUS \"Skipping ${PXR_PACKAGE} tests on static build configuration\")\n    return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: USD Sequence Layer with Scenegraph Definition\nDESCRIPTION: Example showing base scene definition with transforms and properties that can be overridden.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/usdfaq.rst#2025-04-23_snippet_4\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\ndef Xform \"World\"\n{\n    def Xform \"Sets\"\n    {\n        def Xform \"Bookshelf\"\n        {\n            def Xform \"Book_1\"\n            {\n                string name = \"Toy Story\"\n            }\n        }\n\n        def Xform \"Desk\"\n        {\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: USD Prim Stack for /A\nDESCRIPTION: Shows the contributing prim specs from different layers that compose the final prim `/A`. This includes the base prim spec and a spec from a selected variant (`nestedVariantSet=nestedVariant`).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndVariants.testenv/baseline/compositionResults_SpecializesAndVariants.txt#2025-04-23_snippet_2\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /A\n    root.sdf             /A{nestedVariantSet=nestedVariant}\n```\n\n----------------------------------------\n\nTITLE: Sampling Animation Spline with Inner and Outer Loops\nDESCRIPTION: Demonstrates sampling the spline with inner and outer loops at various time ranges, showing the resulting interpolated and extrapolated values including pre-echo and post-echo effects.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_69\n\nLANGUAGE: plaintext\nCODE:\n```\nTest Case 145: SampleWithSources([80, 130], 10, 50, 1)\n0: (TsSourceInnerLoopPreEcho)\n    (80, 30)\n    (80.3582763671875, 30.50567626953125)\n    (80.52583312988281, 30.58715057373047)\n    (80.6865234375, 30.56494140625)\n    (80.9898681640625, 30.24114990234375)\n    (81.2734375, 29.59765625)\n    (81.8017578125, 27.60498046875)\n    (82.3125, 25.09375)\n    (82.8466796875, 22.57080078125)\n    (83.4453125, 20.54296875)\n    (83.7816162109375, 19.87310791015625)\n    (84.1494140625, 19.51708984375)\n    (84.34672546386719, 19.47657012939453)\n    (84.5538330078125, 19.53826904296875)\n    (85, 20)\n    (85.8505859375, 21.12744140625)\n    (86.5546875, 21.80078125)\n    (87.1533203125, 22.17529296875)\n    (87.6875, 22.40625)\n    (88.1982421875, 22.64892578125)\n    (88.7265625, 23.05859375)\n    (89.3134765625, 23.79052734375)\n    (90, 25)\n    (90.3582763671875, 25.50567626953125)\n    (90.52583312988281, 25.58715057373047)\n    (90.6865234375, 25.56494140625)\n    (90.9898681640625, 25.24114990234375)\n    (91.2734375, 24.59765625)\n    (91.8017578125, 22.60498046875)\n    (92.3125, 20.09375)\n    (92.8466796875, 17.57080078125)\n    (93.4453125, 15.54296875)\n    (93.7816162109375, 14.87310791015625)\n    (94.1494140625, 14.51708984375)\n    (94.34672546386719, 14.476570129394531)\n    (94.5538330078125, 14.53826904296875)\n    (95, 15)\n    (95.8505859375, 16.12744140625)\n    (96.5546875, 16.80078125)\n    (97.1533203125, 17.17529296875)\n    (97.6875, 17.40625)\n    (98.1982421875, 17.64892578125)\n    (98.7265625, 18.05859375)\n    (99.3134765625, 18.79052734375)\n    (100, 20)\n1: (TsSourceInnerLoopProto)\n    (100, 20)\n    (100.3582763671875, 20.50567626953125)\n    (100.52583312988281, 20.58715057373047)\n    (100.6865234375, 20.56494140625)\n    (100.9898681640625, 20.24114990234375)\n    (101.2734375, 19.59765625)\n    (101.8017578125, 17.60498046875)\n    (102.3125, 15.09375)\n    (102.8466796875, 12.57080078125)\n    (103.4453125, 10.54296875)\n    (103.7816162109375, 9.87310791015625)\n    (104.1494140625, 9.51708984375)\n    (104.34672546386719, 9.476570129394531)\n    (104.5538330078125, 9.53826904296875)\n    (105, 10)\n    (105.8505859375, 11.12744140625)\n    (106.5546875, 11.80078125)\n    (107.1533203125, 12.17529296875)\n    (107.6875, 12.40625)\n    (108.1982421875, 12.64892578125)\n    (108.7265625, 13.05859375)\n    (109.3134765625, 13.79052734375)\n    (110, 15)\n2: (TsSourceInnerLoopPostEcho)\n    (110, 15)\n    (110.3582763671875, 15.50567626953125)\n    (110.52583312988281, 15.587150573730469)\n    (110.6865234375, 15.56494140625)\n    (110.9898681640625, 15.24114990234375)\n    (111.2734375, 14.59765625)\n    (111.8017578125, 12.60498046875)\n    (112.3125, 10.09375)\n    (112.8466796875, 7.57080078125)\n    (113.4453125, 5.54296875)\n    (113.7816162109375, 4.87310791015625)\n    (114.1494140625, 4.51708984375)\n    (114.34672546386719, 4.476570129394531)\n    (114.5538330078125, 4.53826904296875)\n    (115, 5)\n    (115.8505859375, 6.12744140625)\n    (116.5546875, 6.80078125)\n    (117.1533203125, 7.17529296875)\n    (117.6875, 7.40625)\n    (118.1982421875, 7.64892578125)\n    (118.7265625, 8.05859375)\n    (119.3134765625, 8.79052734375)\n    (120, 10)\n    (120.3582763671875, 10.50567626953125)\n    (120.52583312988281, 10.587150573730469)\n    (120.6865234375, 10.56494140625)\n    (120.9898681640625, 10.24114990234375)\n    (121.2734375, 9.59765625)\n    (121.8017578125, 7.60498046875)\n    (122.3125, 5.09375)\n    (122.8466796875, 2.57080078125)\n    (123.4453125, 0.54296875)\n    (123.7816162109375, -0.12689208984375)\n    (124.1494140625, -0.48291015625)\n    (124.34672546386719, -0.5234298706054688)\n    (124.5538330078125, -0.46173095703125)\n    (125, 0)\n    (125.8505859375, 1.12744140625)\n    (126.5546875, 1.80078125)\n    (127.1533203125, 2.17529296875)\n    (127.6875, 2.40625)\n    (128.1982421875, 2.64892578125)\n```\n\n----------------------------------------\n\nTITLE: Loading USD Stage and Layer Stack Overview\nDESCRIPTION: Indicates the root layer being loaded ('root.sdf') for the USD composition analysis and shows the layer stack used, which consists solely of 'root.sdf' at the top level.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLoading @ImpliedAndAncestralInherits_ComplexEvaluation/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n```\n\n----------------------------------------\n\nTITLE: Displaying Composition Results for /ModelGroup/Model_2/Anim/Collider in USD\nDESCRIPTION: Shows the composition analysis for the prim `/ModelGroup/Model_2/Anim/Collider`. It details the prim stack (`rig.sdf`), properties (`colliderRel`), and the resolved relationship targets for `colliderRel` pointing back to itself (`/ModelGroup/Model_2/Anim/Collider`).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyMultipleRelocations2.testenv/baseline/compositionResults_TrickyMultipleRelocations2.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </ModelGroup/Model_2/Anim/Collider>\n\nPrim Stack:\n    rig.sdf              /Rig/Collider\n\nProperty names:\n     ['colliderRel']\n\nProperty stacks:\n/ModelGroup/Model_2/Anim/Collider.colliderRel:\n    rig.sdf              /Rig/Collider.colliderRel\n\nRelationship targets:\n/ModelGroup/Model_2/Anim/Collider.colliderRel:\n    /ModelGroup/Model_2/Anim/Collider\n```\n\n----------------------------------------\n\nTITLE: Registering UsdView Detached Layers Tests\nDESCRIPTION: Registers tests for UsdView that verify functionality with detached layers. These tests check different detach layer options including inclusion and exclusion filters.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdviewDetachedLayers1\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testDetachedLayers_1.py --norender --detachLayers root.usd\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Composing Prim /PayloadMultiRef/Anim in USD\nDESCRIPTION: Details composition for `/PayloadMultiRef/Anim`. The prim stack originates from `B.sdf`. Time offsets are accumulated from the root (`root.sdf`), the payload arc (`ref.sdf`/`ref_sub.sdf` with scale), and the reference arc (`B.sdf`).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicTimeOffset.testenv/baseline/compositionResults_BasicTimeOffset.txt#2025-04-23_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </PayloadMultiRef/Anim>\n\nPrim Stack:\n    B.sdf                /Model/Anim\n\nTime Offsets:\n    root.sdf             /PayloadMultiRef/Anim root       (offset=0.00, scale=1.00)\n    ref.sdf              /Ref2/Anim      payload    (offset=10.00, scale=2.00)\n        ref_sub.sdf                      sublayer   (offset=20.00, scale=1.00)\n    B.sdf                /Model/Anim     reference  (offset=50.00, scale=2.00)\n```\n\n----------------------------------------\n\nTITLE: Registering Buffer Array and Dependency Tests in OpenUSD\nDESCRIPTION: Registers multiple test cases for HdSt buffer arrays with different environment configurations. Sets debug flags and matrix/normal handling options for each test.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStBufferArrayInstancingDisabled\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBufferArray\"\n    EXPECTED_RETURN_CODE 0\n    STDOUT_REDIRECT testHdStBufferArrayInstancingDisabled-Run1-stdout.txt\n    DIFF_COMPARE testHdStBufferArrayInstancingDisabled-Run1-stdout.txt\n    TESTENV testHdStBufferArrayInstancingDisabled\n    ENV\n        HDST_ENABLE_RESOURCE_INSTANCING=0\n        HD_ENABLE_DOUBLE_MATRIX=1\n        HD_ENABLE_PACKED_NORMALS=0\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStBufferSourceDependency\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBufferSourceDependency\"\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBufferSourceDependency\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Headless and Platform-Based Test Skipping in HdSt - CMake\nDESCRIPTION: These sections use CMake scripting to skip certain tests if headless mode is on or if the build is occurring on Apple or Windows platforms, logging status messages and halting further test registration for those environments. This protects against unsupported configurations. The ${PXR_PACKAGE} and associated variables must be defined in the build context; otherwise, messages and early returns provide informative feedback.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif (${PXR_HEADLESS_TEST_MODE})\n    message(STATUS \"Skipping ${PXR_PACKAGE} tests because PXR_HEADLESS_TEST_MODE is ON\")\n    return()\nendif()\n\nif (APPLE)\n    message(STATUS \"Skipping rest of ${PXR_PACKAGE} tests because they are currently unsupported on macOS\")\n    return()\nendif()\n\nif (WIN32)\n    message(STATUS \"Skipping rest of ${PXR_PACKAGE} tests because they are currently unsupported on Windows\")\n    return()\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Registering Dynamic UV Texture Test\nDESCRIPTION: Registers a test for HdSt dynamic UV texture functionality. This test verifies dynamic updating of textures by rendering two different colored textures and comparing against reference images.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_35\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStDynamicUvTexture\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStDynamicUvTexture --offscreen\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        outTextureDarkBlue.png\n        outTextureLightBlue.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    TESTENV testHdStDynamicUvTexture\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\n----------------------------------------\n\nTITLE: USD Layer Stack Definition\nDESCRIPTION: Shows the currently active layer stack containing root.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TypicalReferenceToChargroupWithRename.testenv/baseline/compositionResults_TypicalReferenceToChargroupWithRename.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\nLayer Stack:\n     root.sdf\n```\n\n----------------------------------------\n\nTITLE: Installing Sdr Test Directory in CMake\nDESCRIPTION: This snippet installs the test directory for Sdr filesystem discovery using the pxr_install_test_dir CMake function.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/sdr/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testSdrFilesystemDiscovery.testenv\n    DEST testSdrFilesystemDiscovery\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Time Offset Configuration for SS2\nDESCRIPTION: Partial time offset configuration for /SS2 prim, showing the beginning of the time offset and scale configurations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer3.txt#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nTime Offsets:\n    session_24fps.sdf    /SS2            root       (offset=0.00, scale=1.00)\n        sess_s.sdf                       sublayer   (offset=10.00, scale=2.00)\n        sess_s_48tcps.sdf                sublayer   (offset=10.00, scale=1.00)\n        sess_s_24tcps_12fps.sdf          sublayer   (offset=10.00, scale=2.00)\n        sess_s_12fps.sdf                 sublayer   (offset=10.00, scale=4.00)\n```\n\n----------------------------------------\n\nTITLE: Defining HGI Interop Library Target\nDESCRIPTION: Declares the hgiInterop library target with all collected dependencies, headers, and source files. Includes core libraries and conditionally included backend-specific components.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hgiInterop/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npxr_library(hgiInterop\n    LIBRARIES\n        gf\n        tf\n        hgi\n        vt\n        ${optionalLibraries}\n\n    PUBLIC_HEADERS\n        api.h\n        hgiInterop.h\n\n    PRIVATE_HEADERS\n        ${optionalPrivateHeaders}\n\n    CPPFILES\n        hgiInterop.cpp\n        ${optionalCppFiles}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting USD Plugin Package Variables\nDESCRIPTION: Defines prefix and package name variables for the USD Dancing Cubes example plugin\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/examples/usdDancingCubesExample/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usdDancingCubesExample)\n```\n\n----------------------------------------\n\nTITLE: Defining Spline Properties and Knots in Descriptive Format\nDESCRIPTION: Describes a non-Hermite spline using a specific text format. It specifies 'Held' extrapolation for pre and post segments and lists its knots. Each knot definition includes time, value, interpolation type ('Curve'), pre/post slopes, pre/post tangent lengths, and auto tangent flags (both false).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReplaceLimitActive_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope -0.250000, preLen 0.000000, postLen 0.250000, auto false / false\n  3.000000: 2.000000, Curve, preSlope 0.250000, postSlope 0.250000, preLen 0.250000, postLen 0.250000, auto false / false\n  4.000000: 2.000000, Curve, preSlope 0.250000, postSlope 0.000000, preLen 0.250000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Sampling Bezier Curve Points with Different Source Types\nDESCRIPTION: Collection of sample points generated when testing different Bezier curve implementations. The data shows coordinate pairs representing time and value positions along the curve, grouped by source type (PreExtrap, KnotInterp, PostExtrap).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_100\n\nLANGUAGE: raw\nCODE:\n```\n    (0.3970032082655478, 0.9021052539154235)\n    (0.4543035249872276, 0.92660667258354)\n    (0.5202135161016141, 0.9480111220554375)\n    (0.5953357933925889, 0.9660734928604977)\n    (0.6802729686440335, 0.9805486755281025)\n    (0.7756276536398292, 0.9911915605876334)\n    (0.8820024601638576, 0.997757038568472)\n    (1, 1)\n```\n\n----------------------------------------\n\nTITLE: Registering Indirect Draw Batch Tests\nDESCRIPTION: Registers tests for HdSt indirect draw batch code generation and culling functionality. These tests verify the generation of shader code for batched draw commands with disabled GPU frustum culling and Vulkan support.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_40\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStIndirectDrawBatchCodeGen\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStIndirectDrawBatchCodeGen\"\n    EXPECTED_RETURN_CODE 0\n    ENV\n        HD_ENABLE_GPU_FRUSTUM_CULLING=false\n        HGI_ENABLE_VULKAN=0\n)\npxr_register_test(testHdStIndirectDrawBatchCulling\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hydra PerfLog Test Build in CMake\nDESCRIPTION: Configures the build for testing Hydra's performance logging system. This test verifies the functionality used to track and log performance metrics in the Hydra rendering framework.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testHdPerfLog\n   LIBRARIES\n       hd\n       sdf\n       tf\n       arch\n\n   CPPFILES\n       testenv/testHdPerfLog.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Python Test Module in CMake\nDESCRIPTION: Defines a function to create a Boost Python test module target with proper configuration for different platforms.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/external/boost/python/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(boost_python_test_module TEST_NAME)\n    set(oneValueArgs MODULE_NAME)\n    set(multiValueArgs MODULE_CPPFILES)\n    cmake_parse_arguments(module \"\" \"${oneValueArgs}\" \"${multiValueArgs}\" ${ARGN})\n\n    if (NOT module_MODULE_NAME)\n        set(module_MODULE_NAME \"${TEST_NAME}_ext\")\n    endif()\n\n    if (NOT module_MODULE_CPPFILES)\n        set(module_MODULE_CPPFILES \"test/${TEST_NAME}.cpp\")\n    endif()\n\n    boost_python_cpp_target(${module_MODULE_NAME} IS_LIBRARY)\n    target_sources(${module_MODULE_NAME} PRIVATE ${module_MODULE_CPPFILES})\n\n    # Python modules must be suffixed with .pyd on Windows and .so on Linux/Mac\n    if(WIN32)\n        set(suffix \".pyd\")\n    else()\n        set(suffix \".so\")\n    endif()\n\n    set_target_properties(${module_MODULE_NAME}\n        PROPERTIES\n        # Python modules must not have any prefixes like \"lib\"\n        PREFIX \"\"\n        SUFFIX ${suffix}\n    )\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Sampling Spline with Sources Information\nDESCRIPTION: Test case showing sampling a spline with source attribution, where each sampled point is labeled with its source type (knot interpolation, pre-extrapolation, or post-extrapolation).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_44\n\nLANGUAGE: plain text\nCODE:\n```\nTest Case 115: SampleWithSources([1, 5], 125, 500, 1)\n0: (TsSourceKnotInterp)\n    (1, 1)\n    (1.054046630859375, 1.0468597412109375)\n    (1.121826171875, 1.0936279296875)\n    (1.294921875, 1.1865234375)\n    (1.511962890625, 1.2779541015625)\n    (1.765625, 1.3671875)\n    (2.048583984375, 1.4534912109375)\n    (2.353515625, 1.5361328125)\n    (2.673095703125, 1.6143798828125)\n    (3, 1.6875)\n    (3.326904296875, 1.7547607421875)\n    (3.646484375, 1.8154296875)\n    (3.951416015625, 1.8687744140625)\n    (4.234375, 1.9140625)\n    (4.488037109375, 1.9505615234375)\n    (4.705078125, 1.9775390625)\n    (4.878173828125, 1.9942626953125)\n    (5, 2)\n```\n\n----------------------------------------\n\nTITLE: Instantiating SplineData Test Case - Python\nDESCRIPTION: This Python code snippet demonstrates the instantiation of a TsTest_SplineData object from the Ts module with specified Hermite status, extrapolation modes, and a list of detailed Knot objects. Dependencies include the definitions of the Ts module, TsTest_SplineData, and the constituent classes such as Extrapolation, InterpCurve, and Knot, as well as Python standard float.hex and float.fromhex for hexadecimal float specification. Key parameters set the Hermite property, extrapolation methods, and the sequence, interpolation methods, and detailed characteristics (time, value, pre/post slopes and lengths, automation flags) of the knot points. The expected input is parameterized data in Python object format, and this structure outputs a fully specified spline configuration for downstream testing or computation. Correct functionality depends on all referenced classes existing in scope.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReorderNone_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('-0x1p-2'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.8p+1'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('-0x1p-2'), postSlope = float.fromhex('-0x1p-2'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.999999999999ap+1'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x1p-2'), postSlope = float.fromhex('0x1p-2'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x1p-2'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Conditionally Skipping Tests for Static Builds in CMake\nDESCRIPTION: This CMake `if` block checks if the project is NOT being built with shared libraries (`BUILD_SHARED_LIBS` is false, meaning a static build). If it's a static build, the `return()` command exits the current CMake script processing, effectively skipping all subsequent test definitions. This is done because some tests rely on plugin mechanisms (like NdrRegistry) which may behave differently or be unavailable in static builds.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Some of the tests trigger various plugin mechanism, including ndr, so\n# disabling tests for static builds.\nif (NOT BUILD_SHARED_LIBS) \n    return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for /Pigeon/Anim Prim\nDESCRIPTION: This snippet shows the composition results for the /Pigeon/Anim prim, including its prim stack and child names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpRegressionBugs_bug69932.testenv/baseline/compositionResults_bug69932.txt#2025-04-23_snippet_5\n\nLANGUAGE: USD\nCODE:\n```\nPrim Stack:\n    Pigeon_rig.sdf       /Pigeon/Anim\n    Pigeon_rig.sdf       /_class_CharRig/Anim\n    Pigeon_bodyrig.sdf   /CharRig/Anim\n\nChild names:\n     ['Legs']\n```\n\n----------------------------------------\n\nTITLE: Defining RegressivePostG Bezier Spline in OpenUSD\nDESCRIPTION: Specification for a RegressivePostG Bezier spline curve with held extrapolation on both ends. The curve has two knots at (0,0) and (1,1) with specific tangent values that create a smooth S-curve progression.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_88\n\nLANGUAGE: text\nCODE:\n```\nSpline: RegressivePostG\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 3.5\n  post-tan slope 0.57\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 2\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Representing Spline Data in Python using TsTest_SplineData\nDESCRIPTION: This Python code snippet constructs a `Ts.TsTest_SplineData` object, representing the same spline defined in the custom format snippet. It sets the spline type (`isHermite=False`), extrapolation methods (`ExtrapHeld`), and defines a list of `Knot` objects. Each knot includes time, value, interpolation method, slopes, tangent lengths, and auto flags, specified using precise hexadecimal float representations. This requires the `Ts` module from OpenUSD.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReorderLimitOpposite_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('-0x1p-2'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.8p+1'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('-0x1p-2'), postSlope = float.fromhex('-0x1p-2'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x1.0c1524411f46fp-3'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.999999999999ap+1'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x1p-2'), postSlope = float.fromhex('0x1p-2'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x1p-2'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Testing Exit Code Scenarios\nDESCRIPTION: Configures tests for various exit code scenarios including successful compression, invalid input file, and invalid command-line arguments.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdcompress/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testExitCodes\n    DEST testUsdCompressExitCodeSuccess\n)\n\npxr_register_test(testUsdCompressExitCodeSuccess\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdcompress a.usda -o out.usda\"\n    EXPECTED_RETURN_CODE 0\n    PRE_PATH\n        ${CMAKE_INSTALL_PREFIX}/bin\n)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PI Prim\nDESCRIPTION: Shows the prim stack and child names for the composed prim at path </PI>. It inherits from /PIS and /PISI.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PI>\n\nPrim Stack:\n    root.sdf             /PI\n    root.sdf             /PIS\n    root.sdf             /PISI\n\nChild names:\n     ['Child', 'Sibling']\n```\n\n----------------------------------------\n\nTITLE: Using HdMaterialNode in C++\nDESCRIPTION: Demonstrates the usage of HdMaterialNode, which will be used to represent light and filter nodes in the new data structure.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_renderers.rst#2025-04-23_snippet_20\n\nLANGUAGE: C++\nCODE:\n```\nHdMaterialNode\n```\n\n----------------------------------------\n\nTITLE: Registering the usdAppUtils Complexity Test in CMake\nDESCRIPTION: Registers a Python test named `testUsdAppUtilsComplexity` using the `pxr_register_test` function. It specifies the command to run the test script (`${CMAKE_INSTALL_PREFIX}/tests/testUsdAppUtilsComplexity`) located within the installation test directory. An expected return code of 0 indicates test success. This snippet only registers the test; any necessary data installation might be handled elsewhere or not be required for this specific test.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdAppUtils/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdAppUtilsComplexity\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdAppUtilsComplexity\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Inherited Properties for PortalLight in OpenUSD\nDESCRIPTION: This code block lists the inherited properties for PortalLight from Boundable, Xformable, and Imageable schemas. It includes properties such as extent, xformOpOrder, proxyPrim, purpose, and visibility.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/PortalLight.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Inherited Properties ({ref}`Boundable`)\n\n### extent\n\n**USD type**: `float3[]`\n\n\n\n## Inherited Properties ({ref}`Xformable`)\n\n### xformOpOrder\n\n**USD type**: `token[]`\n\n\n\n## Inherited Properties ({ref}`Imageable`)\n\n### proxyPrim\n\n**USD type**: `rel` (relationship)\n\n\n\n### purpose\n\n**USD type**: `token`\n\n**Fallback value**: `default`\n\n\n\n### visibility\n\n**USD type**: `token`\n\n**Fallback value**: `inherited`\n```\n\n----------------------------------------\n\nTITLE: Evaluating Spline Points (Plain Text Data)\nDESCRIPTION: A plain text listing of time-value pairs. This data represents the results of evaluating the previously defined spline at various time points between 0.4 and 4.6. It's likely used as reference data for regression testing or visualization purposes within the Ts library context.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReplaceContain_TsTestBaseline.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n0.400000 1.000000\n1.000000 1.000000\n1.014925 0.997627\n1.029851 0.997234\n1.044776 0.998163\n1.059701 1.000056\n1.074627 1.002691\n1.089552 1.005921\n1.104478 1.009641\n1.119403 1.013773\n1.134328 1.018259\n1.149254 1.023052\n1.164179 1.028115\n1.179104 1.033417\n1.194030 1.038935\n1.208955 1.044646\n1.223881 1.050533\n1.238806 1.056580\n1.253731 1.062775\n1.268657 1.069105\n1.283582 1.075560\n1.298507 1.082132\n1.313433 1.088812\n1.328358 1.095593\n1.343284 1.102469\n1.358209 1.109433\n1.373134 1.116481\n1.388060 1.123608\n1.402985 1.130809\n1.417910 1.138080\n1.432836 1.145418\n1.447761 1.152819\n1.462687 1.160280\n1.477612 1.167798\n1.492537 1.175371\n1.507463 1.182995\n1.522388 1.190668\n1.537313 1.198389\n1.552239 1.206154\n1.567164 1.213963\n1.582090 1.221813\n1.597015 1.229703\n1.611940 1.237631\n1.626866 1.245594\n1.641791 1.253593\n1.656716 1.261625\n1.671642 1.269690\n1.686567 1.277785\n1.701493 1.285909\n1.716418 1.294063\n1.731343 1.302243\n1.746269 1.310450\n1.761194 1.318682\n1.776119 1.326939\n1.791045 1.335218\n1.805970 1.343521\n1.820896 1.351844\n1.835821 1.360189\n1.850746 1.368553\n1.865672 1.376937\n1.880597 1.385338\n1.895522 1.393758\n1.910448 1.402194\n1.925373 1.410646\n1.940299 1.419114\n1.955224 1.427596\n1.970149 1.436093\n1.985075 1.444602\n2.000000 1.453125\n2.014925 1.461660\n2.029851 1.470206\n2.044776 1.478763\n2.059701 1.487330\n2.074627 1.495908\n2.089552 1.504494\n2.104478 1.513088\n2.119403 1.521691\n2.134328 1.530300\n2.149254 1.538917\n2.164179 1.547539\n2.179104 1.556167\n2.194030 1.564800\n2.208955 1.573437\n2.223881 1.582078\n2.238806 1.590722\n2.253731 1.599368\n2.268657 1.608016\n2.283582 1.616665\n2.298507 1.625315\n2.313433 1.633964\n2.328358 1.642613\n2.343284 1.651260\n2.358209 1.659904\n2.373134 1.668546\n2.388060 1.677183\n2.402985 1.685816\n2.417910 1.694443\n2.432836 1.703064\n2.447761 1.711678\n2.462687 1.720283\n2.477612 1.728879\n2.492537 1.737465\n2.507463 1.746039\n2.522388 1.754600\n2.537313 1.763148\n2.552239 1.771680\n2.567164 1.780196\n2.582090 1.788693\n2.597015 1.797171\n2.611940 1.805626\n2.626866 1.814059\n2.641791 1.822466\n2.656716 1.830845\n2.671642 1.839193\n2.686567 1.847509\n2.701493 1.855788\n2.716418 1.864029\n2.731343 1.872226\n2.746269 1.880376\n2.761194 1.888474\n2.776119 1.896515\n2.791045 1.904493\n2.805970 1.912401\n2.820896 1.920230\n2.835821 1.927971\n2.850746 1.935613\n2.865672 1.943141\n2.880597 1.950540\n2.895522 1.957787\n2.910448 1.964857\n2.925373 1.971713\n2.940299 1.978307\n2.955224 1.984573\n2.970149 1.990410\n2.985075 1.995652\n3.000000 2.000000\n3.014925 2.003449\n3.029851 2.006387\n3.044776 2.008881\n3.059701 2.010985\n3.074627 2.012745\n3.089552 2.014200\n3.104478 2.015380\n3.119403 2.016314\n3.134328 2.017025\n3.149254 2.017534\n3.164179 2.017861\n3.179104 2.018020\n3.194030 2.018028\n3.208955 2.017896\n3.223881 2.017637\n3.238806 2.017262\n3.253731 2.016781\n3.268657 2.016203\n3.283582 2.015536\n3.298507 2.014789\n3.313433 2.013968\n3.328358 2.013081\n3.343284 2.012134\n3.358209 2.011134\n3.373134 2.010086\n3.388060 2.008996\n3.402985 2.007869\n3.417910 2.006710\n3.432836 2.005526\n3.447761 2.004320\n3.462687 2.003097\n3.477612 2.001863\n3.492537 2.000622\n3.507463 1.999378\n3.522388 1.998137\n3.537313 1.996903\n3.552239 1.995680\n3.567164 1.994474\n3.582090 1.993290\n3.597015 1.992131\n3.611940 1.991004\n3.626866 1.989914\n3.641791 1.988866\n3.656716 1.987866\n3.671642 1.986919\n3.686567 1.986032\n3.701493 1.985211\n3.716418 1.984464\n3.731343 1.983797\n3.746269 1.983219\n3.761194 1.982738\n3.776119 1.982363\n3.791045 1.982104\n3.805970 1.981972\n3.820896 1.981980\n3.835821 1.982139\n3.850746 1.982466\n3.865672 1.982975\n3.880597 1.983686\n3.895522 1.984620\n3.910448 1.985800\n3.925373 1.987255\n3.940299 1.989015\n3.955224 1.991119\n4.000000 2.000000\n4.600000 2.000000\n```\n\n----------------------------------------\n\nTITLE: Building Test Cases for JS Library in CMake\nDESCRIPTION: This snippet defines multiple test cases for the 'js' library, including tests for IO, converter, utils, writer, and double precision handling. Each test is built with the necessary libraries and source files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/js/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testJsIO\n    LIBRARIES\n        tf\n        js\n    CPPFILES\n        testenv/testJsIO.cpp\n) \npxr_build_test(testJsConverter\n    LIBRARIES\n        tf\n        js\n    CPPFILES\n        testenv/testJsConverter.cpp\n) \npxr_build_test(testJsUtils\n    LIBRARIES\n        tf\n        js\n    CPPFILES\n        testenv/testJsUtils.cpp\n) \npxr_build_test(testJsWriter\n    LIBRARIES\n        tf\n        js\n    CPPFILES\n        testenv/testJsWriter.cpp\n)\npxr_build_test(testJsDouble\n    LIBRARIES\n        tf\n        js\n    CPPFILES\n        testenv/testJsDouble.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing USDViewQ with CMake - CMake\nDESCRIPTION: This CMake script sets up the build rules for the usdviewq module, part of the OpenUSD Imaging package. It defines key variables, sets dependencies on internal libraries (tf, usd, usdGeom, hd), specifies all relevant Python and C++ source files, headers, resources (icons, fonts), and Qt designer UI files, and registers both documentation and a suite of test scripts. It also includes logic to conditionally skip building the module based on the PXR_BUILD_USDVIEW flag. Required dependencies include the listed Python and C++ files, Qt designer, and CMake helper macros such as pxr_library and pxr_register_test. Inputs are build-time configuration variables and the project's source tree; outputs are compiled libraries and installed resources. The script assumes a specific directory layout and relies on consistent macro/command usage throughout.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdviewq/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usdImaging)\nset(PXR_PACKAGE usdviewq)\n\nif (NOT PXR_BUILD_USDVIEW)\n    return()\nendif()\n\npxr_library(usdviewq\n    LIBRARIES\n        tf\n        usd\n        usdGeom\n        hd\n\n    PUBLIC_CLASSES\n        hydraObserver\n        utils\n        \n    PUBLIC_HEADERS\n        api.h\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapHydraObserver.cpp\n        wrapUtils.cpp\n\n    PYMODULE_FILES\n        __init__.py\n        appEventFilter.py\n        arrayAttributeView.py\n        customAttributes.py\n        frameSlider.py\n        appController.py\n        usdviewApi.py\n        plugin.py\n        scalarTypes.py\n        stageView.py\n        usdviewContextMenuItem.py\n        primContextMenu.py\n        primContextMenuItems.py\n        headerContextMenu.py\n        attributeViewContextMenu.py\n        layerStackContextMenu.py\n        prettyPrint.py\n        pythonInterpreter.py\n        settings.py\n        adjustDefaultMaterial.py\n        adjustFreeCamera.py\n        preferences.py\n        primViewItem.py\n        common.py\n        hydraSceneBrowser.py\n        legendUtil.py\n        primLegend.py\n        primTreeWidget.py\n        propertyLegend.py\n        attributeValueEditor.py\n        overridableLineEdit.py\n        variantComboBox.py\n        qt.py\n        rootDataModel.py\n        selectionDataModel.py\n        viewSettingsDataModel.py\n        freeCamera.py\n        debugFlagsWidget.py\n        configController.py\n        usdviewstyle.qss\n\n    PYSIDE_UI_FILES\n        mainWindowUI.ui\n        adjustDefaultMaterialUI.ui\n        adjustFreeCameraUI.ui\n        attributeValueEditorUI.ui\n        preferencesUI.ui\n        primLegendUI.ui\n        propertyLegendUI.ui\n\n    DOXYGEN_FILES\n        README.md\n        blackBoxTesting.md\n)\n\ninstall(DIRECTORY\n    icons\n    DESTINATION lib/python/pxr/Usdviewq\n)\n\ninstall(DIRECTORY\n    fonts\n    DESTINATION lib/python/pxr/Usdviewq\n)\n\npxr_test_scripts(\n    testenv/testUsdviewqSettings.py\n    testenv/testUsdviewqRootDataModel.py\n    testenv/testUsdviewqSelectionDataModel.py\n    testenv/testUsdviewqLauncher.py\n    testenv/testUsdviewqViewSettingsDataModel.py\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdviewqRootDataModel\n    DEST testUsdviewqRootDataModel\n)\n\npxr_register_test(testUsdviewqSettings\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdviewqSettings\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdviewqRootDataModel\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdviewqRootDataModel\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdviewqSelectionDataModel\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdviewqSelectionDataModel\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdviewqLauncher\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdviewqLauncher\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdviewqViewSettingsDataModel\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdviewqViewSettingsDataModel\"\n    EXPECTED_RETURN_CODE 0\n)\n\n```\n\n----------------------------------------\n\nTITLE: Querying USD Layer Stack Structure\nDESCRIPTION: Shows the base layer stack structure with a single root.sdf layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantWeakerSelection2.testenv/baseline/compositionResults_TrickyVariantWeakerSelection2.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLayer Stack:\n     root.sdf\n```\n\n----------------------------------------\n\nTITLE: Setting Prefix and Package Variables for usdVol in CMake\nDESCRIPTION: This CMake snippet sets the `PXR_PREFIX` variable to `pxr/usd` and `PXR_PACKAGE` to `usdVol`. These variables are likely used by subsequent OpenUSD CMake functions to structure the build and installation paths for the `usdVol` library.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdVol/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usdVol)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimWithInternalSubrootReference\nDESCRIPTION: Shows the composition results for </PrimWithInternalSubrootReference>. The prim stack indicates its definition in root.sdf and contribution from an internal sub-root reference to </InternalReference/InternalReference_Child> also defined within root.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimWithInternalSubrootReference>\n\nPrim Stack:\n    root.sdf             /PrimWithInternalSubrootReference\n    root.sdf             /InternalReference/InternalReference_Child\n```\n\n----------------------------------------\n\nTITLE: Installing USD Test Directories and Artifacts - CMake\nDESCRIPTION: Copies or symlinks directories and supporting test files from the build environment to their intended install locations using the pxr_install_test_dir macro. This setup enables tests to run in a post-install environment by ensuring required assets and test cases are available at predictable destinations. Each invocation maps a source test asset directory to a destination within the install tree, facilitating isolation and repeatable test execution. The macro expects SRC and DEST arguments; both must exist or be created in the proper install context.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdAppliedAPISchemas\n    DEST testUsdAppliedAPISchemas\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdAppliedAPISchemas\n    DEST testUsdAppliedAPISchemas_AutoApplyDisabled\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdStageThreading\n    DEST testUsdStageThreading\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdCratePayloadConversionFromVersion07.testenv\n    DEST testUsdCratePayloadConversionFromVersion07\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdCrateRelocates.testenv\n    DEST testUsdCrateRelocates\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdExternalAssetDependencies.testenv\n    DEST testUsdExternalAssetDependencies\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdFallbackPrimTypes\n    DEST testUsdFallbackPrimTypes\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdFlatten\n    DEST testUsdFlatten\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdFlatten2\n    DEST testUsdFlatten2\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdFlatten2\n    DEST testUsdFlatten3\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdFlatten2\n    DEST testUsdFlatten4\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdFlattenLayerStack\n    DEST testUsdFlattenLayerStack\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdFlattenProperties\n    DEST testUsdFlattenProperties\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdFileFormats\n    DEST testUsdFileFormats\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdFileFormats\n    DEST testUsdFileFormats_asset\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdFileFormats\n    DEST testUsdFileFormats_pread\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdVariantEditing.testenv\n    DEST testUsdEditVariantEditing\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdInstancing\n    DEST testUsdInstancing\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdInstanceProxy\n    DEST testUsdInstanceProxy\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdMetadata\n    DEST testUsdMetadata\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdReadOutOfBounds\n    DEST testUsdReadOutOfBounds\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdResolverChanged\n    DEST testUsdResolverChanged\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdResolveTarget.testenv\n    DEST testUsdResolveTarget\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdResolveTarget.testenv\n    DEST testUsdResolveTargetPy\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdNotices.testenv\n    DEST testUsdNotices\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdNamespaceEditor\n    DEST testUsdNamespaceEditor\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdNamespaceEditorProperties\n    DEST testUsdNamespaceEditorProperties\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdNamespaceEditorTargetPathFixup\n    DEST testUsdNamespaceEditorTargetPathFixup\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdObjectsChangedNoticesSublayerOps\n    DEST testUsdObjectsChangedNoticesSublayerOps\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdPrims.testenv\n    DEST testUsdPrims\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdPrimCompositionQuery.testenv\n    DEST testUsdPrimCompositionQuery\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdPrimGetDescendants.testenv\n    DEST testUsdPrimGetDescendants\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdInstancingCpp.testenv\n    DEST testUsdInstancingCpp\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdVariantEditing.testenv\n    DEST testUsdVariantEditing\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdVariantFallbacks.testenv\n    DEST testUsdVariantFallbacks\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdGenSchema\n    DEST testUsdGenSchema\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdSchemaRegistry\n    DEST testUsdSchemaRegistry\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdSchemaRegistry\n    DEST testUsdSchemaRegistryCpp\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdSchemaVersioning\n    DEST testUsdSchemaVersioning\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdTimeValueAuthoring\n    DEST testUsdTimeValueAuthoring\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdTimeValueAuthoring\n    DEST testUsdTimeValueAuthoringCpp\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdBug119633.testenv\n    DEST testUsdBug119633\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdBug141491.testenv\n    DEST testUsdBug141491\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdLoadUnloadDeepNestedInstancing.testenv\n    DEST testUsdLoadUnloadDeepNestedInstancing\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdStageNoPython.testenv\n    DEST testUsdStageNoPython\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdPrimRange\n    DEST testUsdPrimRange\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdValueClips\n    DEST testUsdValueClips\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdVariants\n    DEST testUsdVariants\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdCollectionAPI\n    DEST testUsdCollectionAPI\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdUsdzFileFormat\n    DEST testUsdUsdzFileFormat\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdUsdzFileFormat\n    DEST testUsdUsdzFileFormat_asset\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdUsdzFileFormat\n    DEST testUsdUsdzFileFormat_pread\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdUsdzResolver\n    DEST testUsdUsdzResolver\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdZipFile.testenv\n    DEST testUsdZipFile\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdZipFile.testenv\n    DEST testUsdZipFile_CPP\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdUsdzBugGHSA01.testenv\n    DEST testUsdUsdzBugGHSA01\n)\n\n```\n\n----------------------------------------\n\nTITLE: Sample Points for Bezier Spline NearCenterVertical Test Cases\nDESCRIPTION: Sample point coordinates generated from NearCenterVertical spline configuration with various sampling ranges. These test cases demonstrate sampling with shorter tangent widths (0.8) compared to the CenterVertical spline.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_30\n\nLANGUAGE: text\nCODE:\n```\nTest Case 85: Sample([0, 1], 500, 500, 1)\n0: (source n/a)\n    (0, 0)\n    (0.07098388671875, 0.00286865234375)\n    (0.13427734375, 0.01123046875)\n    (0.19039306640624998, 0.02471923828125)\n    (0.23984374999999997, 0.04296875)\n    (0.28314208984375, 0.06561279296875)\n    (0.32080078125, 0.09228515625)\n    (0.35333251953125, 0.12261962890625)\n    (0.38125, 0.15625)\n    (0.40506591796874997, 0.19281005859375)\n    (0.42529296875, 0.23193359375)\n    (0.44244384765625, 0.27325439453125)\n    (0.45703125, 0.31640625)\n    (0.48056640625, 0.40673828125)\n    (0.5, 0.5)\n    (0.51943359375, 0.59326171875)\n    (0.54296875, 0.68359375)\n    (0.55755615234375, 0.72674560546875)\n    (0.57470703125, 0.76806640625)\n    (0.5949340820312501, 0.80718994140625)\n    (0.61875, 0.84375)\n    (0.64666748046875, 0.87738037109375)\n    (0.67919921875, 0.90771484375)\n    (0.7168579101562501, 0.93438720703125)\n    (0.7601562500000001, 0.95703125)\n    (0.8096069335937499, 0.97528076171875)\n    (0.86572265625, 0.98876953125)\n    (0.92901611328125, 0.99713134765625)\n    (1, 1)\n```\n\n----------------------------------------\n\nTITLE: Loading USD Layer Stack\nDESCRIPTION: Displays the initial layer stack loading from root.sdf and demonstrates the basic layer structure.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpookyInherits.testenv/baseline/compositionResults_TrickySpookyInherits.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nLoading @TrickySpookyInherits/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </_X/B/C/_Z> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </_X/B/C/_Z>. The prim stack originates solely from /Ref/C/_Z in 'ref.sdf'. It lists 'prop' as a property name, sourced from the same location.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </_X/B/C/_Z>\n\nPrim Stack:\n    ref.sdf              /Ref/C/_Z\n\nProperty names:\n     ['prop']\n\nProperty stacks:\n/_X/B/C/_Z.prop:\n    ref.sdf              /Ref/C/_Z.prop\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML Meta Refresh Redirect in reStructuredText\nDESCRIPTION: This snippet demonstrates how to include a raw HTML meta refresh tag in a reStructuredText document to redirect users to another page. It's used to automatically redirect visitors to the 'spec_usdz.html' page after 0 seconds.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdz.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. raw:: html\n \n  <meta http-equiv=\"refresh\" content=\"0;url=spec_usdz.html\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Initial USD Sublayer Time Offsets\nDESCRIPTION: This snippet lists several `.sdf` files acting as sublayers, each with a specified time `offset` and `scale`. This likely represents a section of a USD layer file or composition output defining how time is mapped for these sublayers relative to their parent layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecond4.txt#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=4.00)\n        s_12fps.sdf                      sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=4.00)\n```\n\n----------------------------------------\n\nTITLE: Testing USD Edit with Package Files and Subfiles - CMake\nDESCRIPTION: This configuration prepares and registers tests to examine usdedit’s behavior with USDZ package files and subfiles. The registered tests set up required directories, invoke usdedit with USDZ file arguments, and configure the USD_EDITOR to substitute values using sed. The snippet checks for correct execution (return code 0) and ensures environment isolation required for such package-file editing.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdedit/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n    pxr_install_test_dir(\n        SRC testenv/testUsdEditPackageFile    \n        DEST testUsdEditPackageFile1\n    )\n\n    pxr_register_test(testUsdEditPackageFile1\n        PYTHON\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdedit test.usdz\"\n        EXPECTED_RETURN_CODE 0\n        ENV\n          USD_EDITOR=\"sed -i 's/Sphere/Sphere2/g'\"\n        PRE_PATH\n            ${CMAKE_INSTALL_PREFIX}/bin\n    )\n\n    pxr_install_test_dir(\n        SRC testenv/testUsdEditPackageFile    \n        DEST testUsdEditPackageFile2\n    )\n\n    pxr_register_test(testUsdEditPackageFile2\n        PYTHON\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdedit test.usdz[test.usda]\"\n        EXPECTED_RETURN_CODE 0\n        ENV\n          USD_EDITOR=\"sed -i 's/Sphere/Sphere2/g'\"\n        PRE_PATH\n            ${CMAKE_INSTALL_PREFIX}/bin\n    )\n\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Ptex Support in HdSt\nDESCRIPTION: Configures build and test settings for HdSt Ptex functionality. Includes library dependencies, source files, and test environment setup with various rendering configurations for Ptex textures.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_44\n\nLANGUAGE: cmake\nCODE:\n```\nif (PXR_ENABLE_PTEX_SUPPORT)\npxr_build_test(testHdStPtex\n    LIBRARIES\n        hdSt\n        hd\n        sdf\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStPtex.cpp\n)\npxr_install_test_dir(\n    SRC testenv/testHdStPtex\n    DEST testHdStPtex\n)\n```\n\n----------------------------------------\n\nTITLE: Registering usdview Deactivation Test\nDESCRIPTION: Registers a CMake test named `testUsdviewDeactivate`. This test runs `testusdview` with the Python script `testUsdviewDeactivate.py` and `test.usda`. It verifies the visual effect of deactivating prims by performing perceptual image difference comparison against `singleDeactivate.png`, `parentDeactivate.png`, `parentChildDeactivate1.png`, and `parentChildDeactivate2.png`, using failure thresholds of 0.05 absolute and 0.03 percent, and expecting a return code of 0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdviewDeactivate\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewDeactivate.py test.usda\"\n    IMAGE_DIFF_COMPARE\n        singleDeactivate.png\n        parentDeactivate.png\n        parentChildDeactivate1.png\n        parentChildDeactivate2.png\n    FAIL 0.05\n    FAIL_PERCENT 0.03\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Spline Parameters in Python\nDESCRIPTION: Defines the properties of a spline curve, including its type (non-hermite), extrapolation methods, and knot points with their respective slopes and lengths. This configuration is used to determine the behavior of the spline curve.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/NoopContain_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  0.000000: 0.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.000000, postLen 0.800000, auto false / false\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.800000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: USD Composition Analysis for Prim </Root>: Stack and Time Offsets\nDESCRIPTION: This output details the composition results for the root prim </Root>. The 'Prim Stack' lists multiple layers ('session_24fps.sdf', 'sess_s.sdf', etc.) indicating that opinions about the root prim are contributed by several layers directly within the session or root layer stack. The 'Time Offsets' section enumerates the full layer stack relevant to the root, showing how time offsets and scales are applied hierarchically, starting from the strongest layer 'session_24fps.sdf'. This demonstrates the base time mapping context for the entire stage.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer3.txt#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </Root>\n\nPrim Stack:\n    session_24fps.sdf    /Root\n    sess_s.sdf           /Root\n    sess_s_48tcps.sdf    /Root\n    sess_s_24tcps_12fps.sdf /Root\n    sess_s_12fps.sdf     /Root\n    root_12fps.sdf       /Root\n\nTime Offsets:\n    session_24fps.sdf    /Root           root       (offset=0.00, scale=1.00)\n        sess_s.sdf                       sublayer   (offset=10.00, scale=2.00)\n        sess_s_48tcps.sdf                sublayer   (offset=10.00, scale=1.00)\n        sess_s_24tcps_12fps.sdf          sublayer   (offset=10.00, scale=2.00)\n        sess_s_12fps.sdf                 sublayer   (offset=10.00, scale=4.00)\n        root_12fps.sdf                   sublayer   (offset=0.00, scale=2.00)\n        s.sdf                            sublayer   (offset=20.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=40.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=40.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=40.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=40.00, scale=8.00)\n        s_48tcps.sdf                     sublayer   (offset=20.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=8.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=20.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=40.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=40.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=40.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=40.00, scale=8.00)\n        s_12fps.sdf                      sublayer   (offset=20.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=60.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=60.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=60.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=60.00, scale=8.00)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building usdHydra Library with CMake\nDESCRIPTION: This CMake script configures and builds the usdHydra library. It sets up prefixes, defines library dependencies, specifies public classes and headers, includes Python module files, and adds resource files like shader definitions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdHydra/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usdHydra)\n\npxr_library(usdHydra\n\n    INCLUDE_SCHEMA_FILES\n\n    LIBRARIES\n        tf\n        usd\n        usdShade\n\n    PUBLIC_CLASSES\n        discoveryPlugin\n\n    PUBLIC_HEADERS\n        api.h\n\n    PYMODULE_FILES\n        __init__.py\n\n    RESOURCE_FILES\n        shaders/shaderDefs.usda\n        shaders/empty.glslfx\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Registering USD Pcp Test Suite in CMake\nDESCRIPTION: Collection of pxr_register_test commands that set up various test cases for the USD Pcp system. Tests cover areas like composition results, relocations, variants, caching, dependencies and regression fixes. Each test specifies command parameters, environment variables, and expected outputs.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/CMakeLists.txt#2025-04-23_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT WIN32)\n    pxr_register_test(testPcpMuseum_ErrorInvalidConflictingRelocates\n        PYTHON\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd --errorFile compositionErrors_ErrorInvalidConflictingRelocates.txt ErrorInvalidConflictingRelocates/root.sdf\" \n        STDOUT_REDIRECT compositionResults_ErrorInvalidConflictingRelocates.txt\n        DIFF_COMPARE compositionResults_ErrorInvalidConflictingRelocates.txt compositionErrors_ErrorInvalidConflictingRelocates.txt\n        ENV \n            PCP_ENABLE_LEGACY_RELOCATES_BEHAVIOR=0\n    )\nendif()\n\npxr_register_test(testPcpMuseum_ErrorInvalidReferenceToRelocationSource\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd --errorFile compositionErrors_ErrorInvalidReferenceToRelocationSource.txt ErrorInvalidReferenceToRelocationSource/root.sdf\" \n    STDOUT_REDIRECT compositionResults_ErrorInvalidReferenceToRelocationSource.txt\n    DIFF_COMPARE compositionResults_ErrorInvalidReferenceToRelocationSource.txt compositionErrors_ErrorInvalidReferenceToRelocationSource.txt\n)\n\n[...additional test registrations...]\n```\n\n----------------------------------------\n\nTITLE: Element-wise Resolution of Dictionary Metadata Example (C++)\nDESCRIPTION: Illustrates element-wise dictionary resolution in C++. An opinion for `customData[\"keyTwo\"]` on a weaker layer will compose with an opinion for `customData[\"keyOne\"]` on a stronger layer into a single dictionary.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_59\n\nLANGUAGE: cpp\nCODE:\n```\ncustomData[\"keyTwo\"]\n```\n\n----------------------------------------\n\nTITLE: EmptyDrawBatchTest Output Log\nDESCRIPTION: Output from EmptyDrawBatchTest showing metrics for an empty or minimal draw batch scenario. Demonstrates baseline behavior of the drawing system when processing empty or minimal content.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStDrawBatching/baseline/testHdStDrawBatching-Run1-stdout.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n==== EmptyDrawBatchTest:\n----- begin -----\nnonUniformSize, 0\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 0\nsingleBufferSize, 0\ntextureMemory, 0\ngarbageCollected = 0\ndrawCalls = 0\n----- batched -----\nnonUniformSize, 0\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 0\nprimvar, 0\nsingleBufferSize, 0\ntextureMemory, 0\ntopology, 0\ngarbageCollected = 0\ndrawCalls = 0\n----- executed -----\ndrawIndirect, 72\ndrawIndirectCull, 72\ndrawIndirectResult, 4\nnonUniformSize, 16\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 0\nprimvar, 336\nsingleBufferSize, 0\ntextureMemory, 0\ntopology, 0\ngarbageCollected = 0\ndrawCalls = 1\n----- clear all -----\ndrawIndirect, 72\ndrawIndirectCull, 72\ndrawIndirectResult, 4\nnonUniformSize, 16\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 0\nprimvar, 336\nsingleBufferSize, 0\ntextureMemory, 0\ntopology, 0\ngarbageCollected = 1\ndrawCalls = 1\n```\n\n----------------------------------------\n\nTITLE: Registering UsdView Color Management Test in CMake\nDESCRIPTION: This snippet registers a conditional test for UsdView color management if OpenColorIO is found and the plugin is built. It specifies a Python command to run the test script, sets up image comparisons for different color correction settings, defines failure thresholds, and sets an environment variable for the OCIO configuration.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_34\n\nLANGUAGE: CMake\nCODE:\n```\nif(OPENCOLORIO_FOUND AND ${PXR_BUILD_OPENCOLORIO_PLUGIN})\n    pxr_register_test(testUsdviewColorManagement\n        PYTHON\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewColorManagement.py test.usda\"\n        IMAGE_DIFF_COMPARE\n            colorCorrectionOCIO_g22.png\n            colorCorrectionOCIO_linear.png\n            colorCorrectionSRGB.png\n            colorCorrectionDisabled.png\n        FAIL 0.02\n        FAIL_PERCENT 0.01\n        WARN 0.01\n        WARN_PERCENT 0.005\n        EXPECTED_RETURN_CODE 0\n        ENV\n            OCIO=test.ocio\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Installing and Registering testUsdzMaterialBindingAPI Test (Non-Windows) in CMake\nDESCRIPTION: This block executes only if the target platform is not Windows (`NOT WIN32`). It first installs the `testenv/testUsdzMaterialBindingAPI` test directory using `pxr_install_test_dir`. Then, it registers a Python test named `testUsdzMaterialBindingAPI` using `pxr_register_test`. This test runs `usdfixbrokenpixarschemas` on a `.usdz` file with backup, then uses `usddiff` in post-commands to compare the modified file and backup against baseline versions. It expects success (return code 0) and cleans output files. The comment indicates a temporary exclusion for Windows due to diffing issues.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdfixbrokenpixarschemas/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# XXX:\n# Temporarily disable this test on Windows; Need to investigate more on\n# appropriate POST_COMMAND for result usdz diffing on windows.\nif (NOT WIN32)\npxr_install_test_dir(\n    SRC testenv/testUsdzMaterialBindingAPI\n    DEST testUsdzMaterialBindingAPI\n)\n\npxr_register_test(testUsdzMaterialBindingAPI\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdfixbrokenpixarschemas nested_anchored_refs_sub.usdz --backup backup.usdz\"\n    POST_COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usddiff --noeffect --brief nested_anchored_refs_sub.usdz baseline/nested_anchored_refs_sub.usdz\"\n    POST_COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usddiff --noeffect --brief backup.usdz baseline/backup.usdz\"\n    EXPECTED_RETURN_CODE 0\n    CLEAN_OUTPUT\n)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Authoring Properties Files in CMake for OpenUSD\nDESCRIPTION: This CMake snippet installs two files, 'authorProperties.py' and 'HelloWorld.usda', into a specified subdirectory of the OpenUSD installation. The destination is determined by the PXR_INSTALL_SUBDIR variable, which is likely defined elsewhere in the project's CMake configuration.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/tutorials/authoringProperties/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(\n    FILES\n        authorProperties.py\n        HelloWorld.usda\n    DESTINATION\n        ${PXR_INSTALL_SUBDIR}/authoringProperties\n)\n```\n\n----------------------------------------\n\nTITLE: FourThirdOneThird Bezier Spline Specification\nDESCRIPTION: Technical specification for a FourThirdOneThird Bezier spline with asymmetric tangent widths. The first knot has a width of 1.33 and the second knot has a width of 0.33, creating an asymmetric acceleration/deceleration curve.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_34\n\nLANGUAGE: text\nCODE:\n```\nSpline: FourThirdOneThird\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 1.3333333333333333\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 0.3333333333333333\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Initializing TsTest_SplineData Object in Python\nDESCRIPTION: Constructs a `Ts.TsTest_SplineData` object in Python, representing the same spline defined in the descriptive format. It sets `isHermite` to False, specifies extrapolation methods using `Ts.TsTest_SplineData.ExtrapHeld`, and defines a list of `Knot` objects. Knot parameters (time, value, slopes, lengths) are provided using hexadecimal float representations (`float.fromhex`).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReplaceLimitActive_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('-0x1p-2'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.8p+1'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x1p-2'), postSlope = float.fromhex('0x1p-2'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x1p-2'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Path Configuration\nDESCRIPTION: Shell configuration example to add Sphinx to the PATH environment variable for USD documentation building.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Add to .cshrc or your shell's equivalent configuration file\n# Make sure to run rehash or open a new shell to pick up this change.\nsetenv PATH $HOME/.local/bin:$PATH\n    \n# On Linux, Python also needs to find your local install\nsetenv PYTHONPATH $HOME/.local:$PYTHONPATH\n```\n\n----------------------------------------\n\nTITLE: Model_1 Prim Composition\nDESCRIPTION: Composition results for the Model_1 prim showing inheritance across multiple layer files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TypicalReferenceToChargroupWithRename.testenv/baseline/compositionResults_TypicalReferenceToChargroupWithRename.txt#2025-04-23_snippet_3\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /Group_1/Model_1\n    group.sdf            /Group/Model\n    model.sdf            /Model\n\nChild names:\n     ['LArm', 'SymArm']\n```\n\n----------------------------------------\n\nTITLE: Top-Down Directory Walk Output\nDESCRIPTION: Output showing a standard top-down directory walk pattern, displaying directory contents at each level with subdirectories and files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/testenv/baseline/TfFileUtils/non-specific/TestTfWalkDirs-log.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n('a', ['b'], ['aardvark', 'one', 'two'])\n('a/b', ['c'], ['banana', 'four', 'three'])\n('a/b/c', ['d'], ['cat', 'five', 'six'])\n('a/b/c/d', ['e'], ['cycle_to_b', 'dog', 'eight', 'seven'])\n('a/b/c/d/e', ['f'], ['Eskimo', 'Fortune', 'Garbage', 'elephant', 'nine', 'ten'])\n('a/b/c/d/e/f', ['g', 'h', 'i'], ['eleven', 'fish', 'twelve'])\n('a/b/c/d/e/f/g', [], ['fourteen', 'gator', 'thirteen'])\n('a/b/c/d/e/f/h', [], ['fifteen', 'hippo', 'sixteen'])\n('a/b/c/d/e/f/i', [], ['eighteen', 'igloo', 'seventeen'])\n```\n\n----------------------------------------\n\nTITLE: Creating TsTest_SplineData Object in Python\nDESCRIPTION: Python code demonstrating the instantiation of a `Ts.TsTest_SplineData` object, likely for testing purposes within OpenUSD's Ts module. It defines a non-Hermite spline (`isHermite = False`) with 'Held' extrapolation methods and specifies four knots. Each knot is defined using `Ts.TsTest_SplineData.Knot` with parameters for time, value, interpolation method (`InterpCurve`), slopes, lengths, and auto flags, using hexadecimal float representation (`float.fromhex`) for precision. This object mirrors the textual spline definition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReorderContain_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('-0x1p-2'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.8p+1'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('-0x1p-2'), postSlope = float.fromhex('-0x1p-2'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x1.99999999999ap-3'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.999999999999ap+1'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x1p-2'), postSlope = float.fromhex('0x1p-2'), preLen = float.fromhex('0x1.99999999999ap-3'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x1p-2'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Registering Plugin-Dependent Tests with Shared Library Condition\nDESCRIPTION: Registers validation context test that depends on plugins, but only when building with shared libraries, as static builds don't support test-specific plugins.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/usdValidation/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n#The following tests rely on plugins built specifically for them.\n#The build system currently doesn't support test-specific plugins\n#for static library builds, so we only enable these tests for\n#shared library builds.\nif (BUILD_SHARED_LIBS)\n    pxr_register_test(testUsdValidationContext\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdValidationContext\"\n        EXPECTED_RETURN_CODE 0\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Accessing UsdSchemaRegistry in C++\nDESCRIPTION: Shows how to access the UsdSchemaRegistry, which provides runtime information about USD schemas.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_renderers.rst#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nUsdSchemaRegistry\n```\n\n----------------------------------------\n\nTITLE: Conditionally Executing Tests Based on Python and Shared Libraries in CMake\nDESCRIPTION: This CMake `if` block conditionally executes the enclosed test setup commands only if Python support is enabled (`PXR_ENABLE_PYTHON_SUPPORT` is true) AND the project is being built with shared libraries (`BUILD_SHARED_LIBS` is true). This is because the tests within this block rely on the older `UsdUtilsComplianceChecker` Python module, which might not be available or functional in Python-disabled or static builds.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Run usdchecker tests which use the old UsdUtilsComplianceChecker python\n# module, which is not available on non-python builds or in static builds.\n# Hence these tests only run when python support is enabled or when building\n# shared library.\nif (PXR_ENABLE_PYTHON_SUPPORT AND BUILD_SHARED_LIBS)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing Spline Test Data - Python\nDESCRIPTION: Instantiates a TsTest_SplineData object with Hermite interpolation disabled, held extrapolation at boundaries, and a custom list of knot definitions. Dependencies: The 'Ts' module with the 'TsTest_SplineData', 'Extrapolation', 'Knot', and 'InterpCurve' classes must be available. Key parameters include Hermite flag, extrapolation methods, and precise floating-point representations for knot times, slopes, and lengths (in hexadecimal float format). This setup is used for orchestrating detailed spline interpolation/regression tests, and its output is the initialized data structure used in downstream computations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReorderKeepStart_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('-0x1p-2'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.8p+1'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('-0x1p-2'), postSlope = float.fromhex('-0x1p-2'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.999999999999ap+1'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x1p-2'), postSlope = float.fromhex('0x1p-2'), preLen = float.fromhex('0x1.0c1524411f46fp-3'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x1p-2'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Setting Project Prefix with CMake - CMake\nDESCRIPTION: This snippet sets the project prefix variable 'PXR_PREFIX' to 'pxr/usdImaging' within the CMake file. It is used to scope module or library paths and ensures consistent reference throughout the build process. The variable can be referenced later for configuring include paths or organizing output directories in a USD Imaging build context.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdProcImaging/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usdImaging)\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenUSD Layer Stack Structure\nDESCRIPTION: Output showing the layer stack for an OpenUSD scene, listing all loaded SDF files in order of composition priority.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer3.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLayer Stack:\n     session_24fps.sdf\n     sess_s.sdf\n     sess_s_48tcps.sdf\n     sess_s_24tcps_12fps.sdf\n     sess_s_12fps.sdf\n     root_12fps.sdf\n     s.sdf\n     ss.sdf\n     ss_48tcps.sdf\n     ss_24tcps_12fps.sdf\n     ss_12fps.sdf\n     s_48tcps.sdf\n     ss.sdf\n     ss_48tcps.sdf\n     ss_24tcps_12fps.sdf\n     ss_12fps.sdf\n     s_24tcps_12fps.sdf\n     ss.sdf\n     ss_48tcps.sdf\n     ss_24tcps_12fps.sdf\n     ss_12fps.sdf\n     s_12fps.sdf\n     ss.sdf\n     ss_48tcps.sdf\n     ss_24tcps_12fps.sdf\n     ss_12fps.sdf\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </RearLegRig/Knee_bone/Ankle_bone_phrbv> in USD\nDESCRIPTION: Displays the composition results for the prim path </RearLegRig/Knee_bone/Ankle_bone_phrbv> within 'root.sdf'. It shows the prim stack, indicating its origin from /SymRig/Leg_bone/Knee_bone/Ankle_bone, likely due to renaming or relocation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyMultipleRelocations4.testenv/baseline/compositionResults_TrickyMultipleRelocations4.txt#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </RearLegRig/Knee_bone/Ankle_bone_phrbv>\n\nPrim Stack:\n    root.sdf             /SymRig/Leg_bone/Knee_bone/Ankle_bone\n```\n\n----------------------------------------\n\nTITLE: Displaying Layer Composition Results for /SS1\nDESCRIPTION: Shows the layer stack composition for the /SS1 prim, including all sublayers and references with their respective time offsets and scale values. The composition includes sublayer and reference relationships with various fps-specific files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecond3.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nPrim Stack:\n    ss.sdf               /SS1\n    ss.sdf               /SS1\n    ss.sdf               /SS1\n    ss.sdf               /SS1\n    ref.sdf              /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_48tcps.sdf       /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_24tcps_12fps.sdf /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_12fps.sdf        /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n\nTime Offsets:\n    root_24tcps_12fps.sdf /SS1            root       (offset=0.00, scale=1.00)\n        s.sdf                            sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=8.00)\n        s_48tcps.sdf                     sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=8.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=8.00)\n        s_12fps.sdf                      sublayer   (offset=10.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=50.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=50.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=50.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=50.00, scale=8.00)\n    ref.sdf              /Ref            reference  (offset=70.00, scale=8.00)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.50)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=2.00)\n    ref_48tcps.sdf       /Ref            reference  (offset=70.00, scale=4.00)\n        ref_s.sdf                        sublayer   (offset=0.00, scale=2.00)\n        ref_s_24tcps_12fps.sdf           sublayer   (offset=0.00, scale=2.00)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=4.00)\n    ref_24tcps_12fps.sdf /Ref            reference  (offset=70.00, scale=8.00)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.50)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=2.00)\n    ref_12fps.sdf        /Ref            reference  (offset=70.00, scale=16.00)\n        ref_s.sdf                        sublayer   (offset=0.00, scale=0.50)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.25)\n        ref_s_24tcps_12fps.sdf           sublayer   (offset=0.00, scale=0.50)\n```\n\n----------------------------------------\n\nTITLE: Sample Points for Bezier Spline VerticalTorture Test Cases\nDESCRIPTION: Sample point coordinates generated from VerticalTorture spline configuration, which uses asymmetric tangent parameters. This creates a more extreme curved shape with different acceleration on entry versus exit.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_32\n\nLANGUAGE: text\nCODE:\n```\nTest Case 88: Sample([0, 1], 500, 500, 1)\n0: (source n/a)\n    (0, 0)\n    (0.037907286665483576, 0.022265070622630275)\n    (0.06935895312663751, 0.047560908814499994)\n    (0.09495761116734322, 0.07564240510499082)\n    (0.11530587257148221, 0.10626445002348442)\n    (0.13100634912293593, 0.13918193409936247)\n    (0.14266165260558583, 0.17414974786200663)\n    (0.15087439480331336, 0.21092278184079857)\n    (0.1562471875, 0.24925592656511997)\n    (0.16088337152577636, 0.32962211036787775)\n    (0.16139109895396667, 0.41328742350533326)\n    (0.1625912640556225, 0.49829099021253986)\n    (0.16930476110179554, 0.582671934724551)\n    (0.17623553856377971, 0.6240161499808125)\n    (0.18635248436353752, 0.66446938127642)\n    (0.20025821028495047, 0.7037865191407553)\n    (0.2185553281119, 0.7417224541031999)\n    (0.2418464496282676, 0.7780320766931357)\n    (0.2707341866179347, 0.8124702774399444)\n    (0.3058211508647828, 0.8447919468730076)\n    (0.34770995415269335, 0.8747519755217067)\n    (0.3970032082655478, 0.9021052539154235)\n    (0.4543035249872276, 0.92660667258354)\n    (0.5202135161016141, 0.9480111220554375)\n    (0.5953357933925889, 0.9660734928604977)\n    (0.6802729686440335, 0.9805486755281025)\n    (0.7756276536398292, 0.9911915605876334)\n    (0.8820024601638576, 0.997757038568472)\n    (1, 1)\n```\n\n----------------------------------------\n\nTITLE: Model_1 Rig Composition\nDESCRIPTION: Details the composition for the Rig prim including prohibited child names and inheritance structure.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpookyInherits.testenv/baseline/compositionResults_TrickySpookyInherits.txt#2025-04-23_snippet_2\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /_class_Model/Rig\n    model.sdf            /Model/Rig\n    model.sdf            /_class_Model/Rig\n    rig.sdf              /Rig\n\nChild names:\n     ['SymRig']\n\nProhibited child names:\n     ['LRig']\n```\n\n----------------------------------------\n\nTITLE: Analyzing Composition for /VariantsOpinionsOnRestrictedPrim/Child/Child2 (USD)\nDESCRIPTION: Presents the composition results for the nested prim '/VariantsOpinionsOnRestrictedPrim/Child/Child2'. Its prim stack originates from 'ref.sdf' (specifically '/Ref/Child/Child2') and it involves an active variant selection '{child2 = a}'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorPermissionDenied.testenv/baseline/compositionResults_ErrorPermissionDenied.txt#2025-04-23_snippet_7\n\nLANGUAGE: usd\nCODE:\n```\nResults for composing </VariantsOpinionsOnRestrictedPrim/Child/Child2>\n\nPrim Stack:\n    ref.sdf              /Ref/Child/Child2\n\nVariant Selections:\n    {child2 = a}\n```\n\n----------------------------------------\n\nTITLE: Event Range Log Output\nDESCRIPTION: Log entries showing sequential event ranges, each with a begin and end value differing by 1. The events appear to be processed in a non-sequential order but cover ranges from 0-200.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/trace/testenv/testTraceEventContainer.testenv/baseline/testTraceEventContainer-Run1-stdout.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n            Begin: 113\n            End: 114\n        Found event\n            Begin: 114\n            End: 115\n        Found event\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Composition Result for /Model/Looks/BaseMaterial\nDESCRIPTION: Shows the resulting prim stack for '/Model/Looks/BaseMaterial'. Composition includes contributions from '/Looks/BaseMaterial' defined in 'looks.sdf'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicSpecializesAndInherits.testenv/baseline/compositionResults_BasicSpecializesAndInherits.txt#2025-04-23_snippet_9\n\nLANGUAGE: log\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Model/Looks/BaseMaterial>\n\nPrim Stack:\n    root.sdf             /Model/Looks/BaseMaterial\n    looks.sdf            /Looks/BaseMaterial\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Schema Examples Plugin with CMake\nDESCRIPTION: Sets up a USD plugin named 'usdSchemaExamples' with required libraries (tf, sdf, usd, vt), include directories for Boost and Python, and necessary header and Python module files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/examples/usdSchemaExamples/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PACKAGE usdSchemaExamples)\n\npxr_plugin(${PXR_PACKAGE}\n    INCLUDE_SCHEMA_FILES\n\n    LIBRARIES\n        tf\n        sdf\n        usd\n        vt\n\n    INCLUDE_DIRS\n        ${Boost_INCLUDE_DIRS}\n        ${PYTHON_INCLUDE_DIRS}\n\n    PUBLIC_HEADERS\n        api.h\n\n    PYMODULE_FILES\n        __init__.py\n)\n```\n\n----------------------------------------\n\nTITLE: Registering and Building HdSt Test Executables with CMake - CMake\nDESCRIPTION: This set of CMake macro invocations adds test executables for different HdSt components using the pxr_build_test macro. Each test is associated with the necessary libraries as dependencies and specifies its source file. Entries with different test names ensure modular test coverage of specific features such as mesh topology, primvars, and rendering. No explicit inputs or outputs beyond standard CMake test binaries are defined, and all dependencies must be available in the build environment.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testHdStMultipleFvarTopologies\n    LIBRARIES\n        hdSt\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStMultipleFvarTopologies.cpp\n)\npxr_build_test(testHdStPrimGather\n    LIBRARIES\n        hdSt\n        hd\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStPrimGather.cpp\n)\npxr_build_test(testHdStPrimitiveParam\n    LIBRARIES\n        hdSt\n        hd\n        hgi\n        glf\n        sdf\n        tf\n    CPPFILES\n        testenv/testHdStPrimitiveParam.cpp\n)\npxr_build_test(testHdStPrimvars\n    LIBRARIES\n        hdSt\n        hd\n        glf\n        sdf\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStPrimvars.cpp\n)\npxr_build_test(testHdStQuadrangulation\n    LIBRARIES\n        hdSt\n        hd\n        glf\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStQuadrangulation.cpp\n)\npxr_build_test(testHdStRenderPass\n    LIBRARIES\n        hdSt\n        hd\n        glf\n        tf\n    CPPFILES\n        testenv/testHdStRenderPass.cpp\n)\npxr_build_test(testHdStSamplerObjectRegistry\n    LIBRARIES\n        hdSt\n        tf\n    CPPFILES\n        testenv/testHdStSamplerObjectRegistry.cpp\n)\npxr_build_test(testHdStSubdivision\n    LIBRARIES\n        hdSt\n        hd\n        pxOsd\n        hgi\n        glf\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStSubdivision.cpp\n)\npxr_build_test(testHdStTextureHandleRegistry\n    LIBRARIES\n        hdSt\n        tf\n    CPPFILES\n        testenv/testHdStTextureHandleRegistry.cpp\n)\npxr_build_test(testHdStTextureObjectRegistry\n    LIBRARIES\n        hdSt\n        tf\n    CPPFILES\n        testenv/testHdStTextureObjectRegistry.cpp\n)\npxr_build_test(testHdStTransition\n    LIBRARIES\n        hdSt\n        hd\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStTransition.cpp\n)\npxr_build_test(testHdStSubResourceRegistry\n    LIBRARIES\n        garch\n        gf\n        hd\n        hdSt\n        hgi\n        tf\n        vt\n    CPPFILES\n        testenv/testHdStSubResourceRegistry.cpp\n)\n\n```\n\n----------------------------------------\n\nTITLE: Disabled: Registering usdview Shader Edits Test\nDESCRIPTION: This commented-out block defines a CMake test named `testUsdviewShaderEdits`. The test was intended to run `testusdview` with the Python script `testUsdviewShaderEdits.py` and `test.usda` to verify shader edits. It was disabled because it apparently requires Renderman, according to the preceding comment. If enabled, it would perform perceptual image comparison against `0.png` with strict failure thresholds.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\n# The following test is disabled since it seems to require Renderman from\n# the original testSpecs.xml\n#pxr_register_test(testUsdviewShaderEdits\n#    PYTHON\n#    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewShaderEdits.py test.usda\"\n#    IMAGE_DIFF_COMPARE\n#        0.png\n#    FAIL 1\n#    FAIL_PERCENT 0.0002\n#    PERCEPTUAL\n```\n\n----------------------------------------\n\nTITLE: Spline Configuration Settings\nDESCRIPTION: Basic spline configuration defining hermite status and extrapolation methods, along with knot point definitions including slopes and lengths.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/MoveStartKeepRatio_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  0.400000: 0.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.000000, postLen 0.599994, auto false / false\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.599994, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: USD Layer Stack Definition\nDESCRIPTION: Displays the resolved layer stack for the USD stage composition, indicating the order of layers from strongest (session.sdf) to weakest (sublayer.sdf). This stack determines how opinions from different layers are combined.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nLayer Stack:\n     session.sdf\n     root.sdf\n     sublayer.sdf\n```\n\n----------------------------------------\n\nTITLE: Composing Prim /RefPayload/Frame in USD\nDESCRIPTION: Details the composition results for the child prim path `/RefPayload/Frame`. It shows the prim stack originating from `B.sdf` and lists the accumulated time offsets considering the root layer (`root.sdf`), the reference arc (`ref.sdf`, `ref_sub.sdf`), and the payload arc (`B.sdf`).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicTimeOffset.testenv/baseline/compositionResults_BasicTimeOffset.txt#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </RefPayload/Frame>\n\nPrim Stack:\n    B.sdf                /Model/Frame\n\nTime Offsets:\n    root.sdf             /RefPayload/Frame root       (offset=0.00, scale=1.00)\n    ref.sdf              /Ref/Frame      reference  (offset=10.00, scale=1.00)\n        ref_sub.sdf                      sublayer   (offset=20.00, scale=1.00)\n    B.sdf                /Model/Frame    payload    (offset=30.00, scale=1.00)\n```\n\n----------------------------------------\n\nTITLE: Test Configuration for USD Utils\nDESCRIPTION: Configures test scripts, shared libraries, and C++ test builds for various USD Utils functionality. Includes registration of Python and C++ tests with expected return codes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUtils/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_test_scripts(\n    testenv/testUsdUtilsAuthoring.py\n    testenv/testUsdUtilsCoalescingDiagnosticDelegate.py\n    testenv/testUsdUtilsConditionalAbortDiagnosticDelegate.py\n    testenv/testUsdUtilsConstantsGroup.py\n    testenv/testUsdUtilsCreateNewUsdzPackage.py\n    testenv/testUsdUtilsDependencies.py\n    testenv/testUsdUtilsDependenciesCustomResolver.py\n    testenv/testUsdUtilsDependencyExtractor.py\n    testenv/testUsdUtilsFlattenLayerStack.py\n    testenv/testUsdUtilsIntrospection.py\n    testenv/testUsdUtilsLocalizeAsset.py\n    testenv/testUsdUtilsModifyAssetPaths.py\n    testenv/testUsdUtilsPipeline.py\n    testenv/testUsdUtilsSparseValueWriter.py\n    testenv/testUsdUtilsStageCache.py\n    testenv/testUsdUtilsStitch.py\n    testenv/testUsdUtilsStitchClips.py\n    testenv/testUsdUtilsTimeCodeRange.py\n    testenv/testUsdUtilsUpdateSchemaWithSdrNode.py\n    testenv/testUsdUtilsUsdzUtils.py\n    testenv/testUsdUtilsUserProcessingFunc.py\n    testenv/testUsdUtilsVarSelsSessionLayer.py\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Bezier Curve Spline with Equal Tangents\nDESCRIPTION: Defines a Bezier curve spline with equal pre and post tangent widths. The curve has knots at time 0 and 1, with values 0 and 1 respectively. The post-tangent slope is set to 0.6.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\ncurve type Bezier\ntime 0\nvalue 0\nnext interp Curve\npre-tan width 0\npre-tan slope 0\npost-tan width 2.5\npost-tan slope 0.6\nKnot:\nvalue type double\ncurve type Bezier\ntime 1\nvalue 1\nnext interp Curve\npre-tan width 2.5\npre-tan slope 0\npost-tan width 0\npost-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Registering USD Tests with Output Redirection and Comparison\nDESCRIPTION: This snippet demonstrates registering a test that redirects stdout to a file and compares it with a reference file, useful for tests that generate output to be verified.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdFlatten2\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdFlatten2 BasicInstancingAndVariants/root.usda\"\n    STDOUT_REDIRECT flat_BasicInstancingAndVariants.usda\n    DIFF_COMPARE flat_BasicInstancingAndVariants.usda\n    EXPECTED_RETURN_CODE 0\n    ENV\n        USD_ASSIGN_PROTOTYPES_DETERMINISTICALLY=1\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Project Structure and Core Subdirectories for USD\nDESCRIPTION: Initializes the build with the project prologue function and adds the core subdirectories for the USD codebase.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\npxr_toplevel_prologue()\n\nadd_subdirectory(pxr)\nadd_subdirectory(extras)\n```\n\n----------------------------------------\n\nTITLE: MeshLightAPI Content Structure\nDESCRIPTION: Markdown table of contents specification for the MeshLightAPI documentation using reST syntax.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/MeshLightAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n:depth: 2\n:local:\n:backlinks: none\n```\n\n----------------------------------------\n\nTITLE: Registering UsdView Variant Selection Test in CMake\nDESCRIPTION: This snippet registers a test for UsdView variant selection. It specifies a Python command to run the test script, sets up multiple image comparisons for different shapes, and defines failure thresholds.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdviewVariantSelection\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewVariantSelection.py test.usda\"\n    IMAGE_DIFF_COMPARE\n        capsule1.png\n        cone1.png\n        cube1.png\n        cylinder1.png\n        capsule2.png\n        cone2.png\n        cube2.png\n        cylinder2.png\n    FAIL 0.05\n    FAIL_PERCENT 0.03\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Python Binary Build for File Variant Model Asset\nDESCRIPTION: CMake configuration for building a Python executable called usdMakeFileVariantModelAsset with dependencies on tf, kind, sdf, and usd libraries. This build configuration is part of the Pixar USD framework.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/examples/usdMakeFileVariantModelAsset/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\npxr_python_bin(usdMakeFileVariantModelAsset\n    DEPENDENCIES\n        tf\n        kind\n        sdf\n        usd\n)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenUSD Python and USDA Files with CMake\nDESCRIPTION: This CMake command installs two files (authorReferences.py and HelloWorld.usda) into a subdirectory of the OpenUSD installation. The destination is determined by the PXR_INSTALL_SUBDIR variable, appended with '/referencingLayers'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/tutorials/referencingLayers/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(\n    FILES\n        authorReferences.py \n        HelloWorld.usda \n    DESTINATION\n        ${PXR_INSTALL_SUBDIR}/referencingLayers\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting Updated USD Stage to String in Python\nDESCRIPTION: Shows the updated USD stage after setting the display color, exported as a string.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_inspect_and_author_props.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> print(stage.GetRootLayer().ExportToString())\n#usda 1.0\n\ndef Xform \"hello\"\n{\n    def Sphere \"world\"\n    {\n        float3[] extent = [(-2, -2, -2), (2, 2, 2)]\n        color3f[] primvars:displayColor = [(0, 0, 1)]\n        double radius = 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Animation Curve Sampling with Loop Extrapolation\nDESCRIPTION: Test case demonstrating how the LoopRepeat extrapolation mode affects sampling beyond the defined knot range. Shows both pre-extrapolation and post-extrapolation behavior with looping.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_62\n\nLANGUAGE: plaintext\nCODE:\n```\nTest Case 137: SampleWithSources([85, 125], 50, 50, 10)\n0: (TsSourcePreExtrapLoop)\n    (85, 10)\n    (90, 5)\n    (90.953125, 5.4296875)\n    (91.625, 6.5625)\n    (92.5, 10)\n    (93.375, 13.4375)\n    (94.046875, 14.5703125)\n    (95, 15)\n    (100, 10)\n1: (TsSourceKnotInterp)\n    (100, 10)\n    (100.953125, 10.4296875)\n    (101.625, 11.5625)\n    (102.5, 15)\n    (103.375, 18.4375)\n    (104.046875, 19.5703125)\n    (105, 20)\n    (110, 15)\n2: (TsSourcePostExtrapLoop)\n    (110, 15)\n    (110.953125, 15.4296875)\n    (111.625, 16.5625)\n    (112.5, 20)\n    (113.375, 23.4375)\n    (114.046875, 24.5703125)\n    (115, 25)\n    (120, 20)\n    (120.953125, 20.4296875)\n    (121.625, 21.5625)\n    (122.5, 25)\n    (123.375, 28.4375)\n    (124.046875, 29.5703125)\n    (125, 30)\n```\n\n----------------------------------------\n\nTITLE: Defining Underline Text Role in Sphinx RST\nDESCRIPTION: Creates a custom role 'underline' for underlined text formatting in Sphinx documentation. Used with the syntax :underline:`text`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/rolesAndUtils.rst#2025-04-23_snippet_10\n\nLANGUAGE: rst\nCODE:\n```\n.. role:: underline\n   :class: underline\n```\n\n----------------------------------------\n\nTITLE: USD Composition Error Log for /Rig/Anim/RigInstance (Text)\nDESCRIPTION: Reports an error during USD composition for the prim path '/Rig/Anim/RigInstance'. The error specifies that the layer 'TrickyInheritsAndRelocatesToNewRootPrim/root.sdf' has an invalid opinion at the relocation source path '/Rig/RigClass', which will be disregarded during composition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsAndRelocatesToNewRootPrim.testenv/baseline/compositionErrors_TrickyInheritsAndRelocatesToNewRootPrim.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nErrors while composing </Rig/Anim/RigInstance>\n\nThe layer @TrickyInheritsAndRelocatesToNewRootPrim/root.sdf@ has an invalid opinion at the relocation source path </Rig/RigClass>, which will be ignored.\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </RefToRoot/B/C> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </RefToRoot/B/C>. The prim stack mirrors </Root/B/C>, including /Root/B/C from 'root.sdf', and /Ref/C and /_G from 'ref.sdf'. The resolved child prim names are '_Z' and 'D'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </RefToRoot/B/C>\n\nPrim Stack:\n    root.sdf             /Root/B/C\n    ref.sdf              /Ref/C\n    ref.sdf              /_G\n\nChild names:\n     ['_Z', 'D']\n```\n\n----------------------------------------\n\nTITLE: Initial USD Stage with Relationship\nDESCRIPTION: Shows an initial USD stage with a prim that has a relationship to another prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_16\n\nLANGUAGE: usda\nCODE:\n```\ndef \"groupA\" ()\n{\n    custom rel charA = </asset/charA>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TsRegressionPreventer Results (YAML-like)\nDESCRIPTION: This snippet defines configuration parameters for `TsRegressionPreventer::SetResult`. It specifies boolean flags and float values related to pre-segment and post-segment adjustments and their widths, likely used in a regression testing context for spline manipulation within the OpenUSD Ts library. The format resembles YAML.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PostRegressiveLimitActive_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: true\n  havePreSegment: true\n  preActiveAdjusted: true\n  preActiveAdjustedWidth: 1.165675\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.800000\n  havePostSegment: false\n  postActiveAdjusted: false\n  postActiveAdjustedWidth: 0.000000\n  postOppositeAdjusted: false\n  postOppositeAdjustedWidth: 0.000000\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Contents for FieldAsset Documentation\nDESCRIPTION: A markdown code block defining a table of contents for the FieldAsset documentation, specifying depth, local scope, and no backlinks.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdVol/FieldAsset.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n:depth: 2\n:local:\n:backlinks: none\n```\n```\n\n----------------------------------------\n\nTITLE: Layer1 USD Content\nDESCRIPTION: Defines the content of layer1.usda, which will be the primary stage for namespace editing.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_22\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n)                \n\ndef \"Prim1\" {\n    def \"Child\" {\n    }\n}\n\ndef \"InternalRef1\" (\n    references = </Prim1>\n) {\n    over \"Child\" {\n        int overChildAttr\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory Using CMake - CMake\nDESCRIPTION: This code snippet invokes the CMake command 'add_subdirectory' to include the 'sdrGlslfx' directory as a subproject. It requires CMake to be installed and expects that the 'sdrGlslfx' folder contains its own CMakeLists.txt file defining relevant targets and sources. The command makes 'sdrGlslfx' part of the overall project build tree, enabling hierarchical and modular builds.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/plugin/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(sdrGlslfx)\n```\n\n----------------------------------------\n\nTITLE: Composing /CharRig/Anim/Path Prim in USD\nDESCRIPTION: Displays the composition result for </CharRig/Anim/Path>, indicating its source prim stack originates from </PathRig/Path> in `pathRig.sdf`. This likely involves relocation or referencing.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorOpinionAtRelocationSource.testenv/baseline/compositionResults_ErrorOpinionAtRelocationSource.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </CharRig/Anim/Path>\n\nPrim Stack:\n    pathRig.sdf          /PathRig/Path\n```\n\n----------------------------------------\n\nTITLE: Converting Alembic back to USD Format using usdcat\nDESCRIPTION: This command shows how to convert an Alembic file (hello.abc) back to USD format (hello_converted.usda) using usdcat.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/plugins_alembic.rst#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ usdcat hello.abc --out hello_converted.usda\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PSI/Child Prim\nDESCRIPTION: Shows the prim stack for the prim at path </PSI/Child>, defined directly in root.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PSI/Child>\n\nPrim Stack:\n    root.sdf             /PSI/Child\n```\n\n----------------------------------------\n\nTITLE: Sampling Spline Data Points (Time vs. Value)\nDESCRIPTION: Provides a list of sampled points representing the evaluated shape of the defined spline. Each line contains a time value followed by the corresponding evaluated spline value. This data covers the range defined by the knots (1.0 to 4.0) and includes extrapolated values before the first knot (0.4) and after the last knot (4.6) using the 'Held' extrapolation method.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReplaceLimitActive_TsTestBaseline.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n0.400000 1.000000\n1.000000 1.000000\n1.014925 0.997627\n1.029851 0.997234\n1.044776 0.998163\n1.059701 1.000056\n1.074627 1.002691\n1.089552 1.005921\n1.104478 1.009641\n1.119403 1.013773\n1.134328 1.018259\n1.149254 1.023052\n1.164179 1.028115\n1.179104 1.033417\n1.194030 1.038935\n1.208955 1.044646\n1.223881 1.050533\n1.238806 1.056580\n1.253731 1.062775\n1.268657 1.069105\n1.283582 1.075560\n1.298507 1.082132\n1.313433 1.088812\n1.328358 1.095593\n1.343284 1.102469\n1.358209 1.109433\n1.373134 1.116481\n1.388060 1.123608\n1.402985 1.130809\n1.417910 1.138080\n1.432836 1.145418\n1.447761 1.152819\n1.462687 1.160280\n1.477612 1.167798\n1.492537 1.175371\n1.507463 1.182995\n1.522388 1.190668\n1.537313 1.198389\n1.552239 1.206154\n1.567164 1.213963\n1.582090 1.221813\n1.597015 1.229703\n1.611940 1.237631\n1.626866 1.245594\n1.641791 1.253593\n1.656716 1.261625\n1.671642 1.269690\n1.686567 1.277785\n1.701493 1.285909\n1.716418 1.294063\n1.731343 1.302243\n1.746269 1.310450\n1.761194 1.318682\n1.776119 1.326939\n1.791045 1.335218\n1.805970 1.343521\n1.820896 1.351844\n1.835821 1.360189\n1.850746 1.368553\n1.865672 1.376937\n1.880597 1.385338\n1.895522 1.393758\n1.910448 1.402194\n1.925373 1.410646\n1.940299 1.419114\n1.955224 1.427596\n1.970149 1.436093\n1.985075 1.444602\n2.000000 1.453125\n2.014925 1.461660\n2.029851 1.470206\n2.044776 1.478763\n2.059701 1.487330\n2.074627 1.495908\n2.089552 1.504494\n2.104478 1.513088\n2.119403 1.521691\n2.134328 1.530300\n2.149254 1.538917\n2.164179 1.547539\n2.179104 1.556167\n2.194030 1.564800\n2.208955 1.573437\n2.223881 1.582078\n2.238806 1.590722\n2.253731 1.599368\n2.268657 1.608016\n2.283582 1.616665\n2.298507 1.625315\n2.313433 1.633964\n2.328358 1.642613\n2.343284 1.651260\n2.358209 1.659904\n2.373134 1.668546\n2.388060 1.677183\n2.402985 1.685816\n2.417910 1.694443\n2.432836 1.703064\n2.447761 1.711678\n2.462687 1.720283\n2.477612 1.728879\n2.492537 1.737465\n2.507463 1.746039\n2.522388 1.754600\n2.537313 1.763148\n2.552239 1.771680\n2.567164 1.780196\n2.582090 1.788693\n2.597015 1.797171\n2.611940 1.805626\n2.626866 1.814059\n2.641791 1.822466\n2.656716 1.830845\n2.671642 1.839193\n2.686567 1.847509\n2.701493 1.855788\n2.716418 1.864029\n2.731343 1.872226\n2.746269 1.880376\n2.761194 1.888474\n2.776119 1.896515\n2.791045 1.904493\n2.805970 1.912401\n2.820896 1.920230\n2.835821 1.927971\n2.850746 1.935613\n2.865672 1.943141\n2.880597 1.950540\n2.895522 1.957787\n2.910448 1.964857\n2.925373 1.971713\n2.940299 1.978307\n2.955224 1.984573\n2.970149 1.990410\n2.985075 1.995652\n3.000000 2.000000\n3.014925 2.003449\n3.029851 2.006387\n3.044776 2.008881\n3.059701 2.010985\n3.074627 2.012745\n3.089552 2.014200\n3.104478 2.015380\n3.119403 2.016314\n3.134328 2.017025\n3.149254 2.017534\n3.164179 2.017861\n3.179104 2.018020\n3.194030 2.018028\n3.208955 2.017896\n3.223881 2.017637\n3.238806 2.017262\n3.253731 2.016781\n3.268657 2.016203\n3.283582 2.015536\n3.298507 2.014789\n3.313433 2.013968\n3.328358 2.013081\n3.343284 2.012134\n3.358209 2.011134\n3.373134 2.010086\n3.388060 2.008996\n3.402985 2.007869\n3.417910 2.006710\n3.432836 2.005526\n3.447761 2.004320\n3.462687 2.003097\n3.477612 2.001863\n3.492537 2.000622\n3.507463 1.999378\n3.522388 1.998137\n3.537313 1.996903\n3.552239 1.995680\n3.567164 1.994474\n3.582090 1.993290\n3.597015 1.992131\n3.611940 1.991004\n3.626866 1.989914\n3.641791 1.988866\n3.656716 1.987866\n3.671642 1.986919\n3.686567 1.986032\n3.701493 1.985211\n3.716418 1.984464\n3.731343 1.983797\n3.746269 1.983219\n3.761194 1.982738\n3.776119 1.982363\n3.791045 1.982104\n3.805970 1.981972\n3.820896 1.981980\n3.835821 1.982139\n3.850746 1.982466\n3.865672 1.982975\n3.880597 1.983686\n3.895522 1.984620\n3.910448 1.985800\n3.925373 1.987255\n3.940299 1.989015\n3.955224 1.991119\n4.000000 2.000000\n4.600000 2.000000\n```\n\n----------------------------------------\n\nTITLE: Registering usdview Camera Mask Mode Test (Storm)\nDESCRIPTION: Registers a CMake test named `testUsdviewCameraMaskMode`. This test runs `testusdview` specifically with the Storm renderer (`--renderer Storm`) and a specified camera (`--camera /camera`), executing the Python script `testUsdviewCameraMaskMode.py` with `test.usda`. It validates camera mask modes by performing perceptual image difference comparison against Storm-specific output images (`none_storm.png`, `outline_storm.png`, etc.), using failure thresholds of 0.05 absolute and 0.03 percent, and expecting a return code of 0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdviewCameraMaskMode\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --camera /camera --renderer Storm --testScript testUsdviewCameraMaskMode.py test.usda\"\n    IMAGE_DIFF_COMPARE\n        none_storm.png\n        outline_storm.png\n        partial_storm.png\n        full_storm.png\n    FAIL 0.05\n    FAIL_PERCENT 0.03\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Composition Results for TrickyInheritsAndRelocates4 Scene\nDESCRIPTION: Output from a USD composition operation showing the layer stack and composition arcs for various prims in a scene with complex inheritance and relocation patterns. The output traces how prims inherit from class hierarchies and shows relationships between technical animation rigs and their animation interfaces.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsAndRelocates4.testenv/baseline/compositionResults_TrickyInheritsAndRelocates4.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLoading @TrickyInheritsAndRelocates4/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </FergusCloak>\n\nPrim Stack:\n    root.sdf             /FergusCloak\n\nChild names:\n     ['rig', 'Anim']\n\n------------------------------------------------------------------------\nResults for composing </FergusCloak/rig>\n\nPrim Stack:\n    root.sdf             /FergusCloak/rig\n\nChild names:\n     ['LArmRig']\n\n------------------------------------------------------------------------\nResults for composing </FergusCloak/rig/LArmRig>\n\nPrim Stack:\n    root.sdf             /FergusCloak/rig/LArmRig\n    root.sdf             /_class_MultiLevelCurveRig\n    CurveTrackRig.sdf    /CurveTrackRig\n    CurveTrackRig.sdf    /_class_MultiLevelCurveRig\n\nChild names:\n     ['rig', 'Anim']\n\n------------------------------------------------------------------------\nResults for composing </FergusCloak/rig/LArmRig/rig>\n\nPrim Stack:\n    root.sdf             /_class_MultiLevelCurveRig/rig\n    CurveTrackRig.sdf    /CurveTrackRig/rig\n    CurveTrackRig.sdf    /_class_MultiLevelCurveRig/rig\n\nChild names:\n     ['ConstRig']\n\n------------------------------------------------------------------------\nResults for composing </FergusCloak/rig/LArmRig/rig/ConstRig>\n\nPrim Stack:\n    root.sdf             /_class_MultiLevelCurveRig/rig/ConstRig\n    CurveTrackRig.sdf    /CurveTrackRig/rig/ConstRig\n    CurveTrackRig.sdf    /_class_MultiLevelCurveRig/rig/ConstRig\n    ConstraintRig.sdf    /ConstraintRig\n\nChild names:\n     ['Anim']\n\n------------------------------------------------------------------------\nResults for composing </FergusCloak/rig/LArmRig/rig/ConstRig/Anim>\n\nPrim Stack:\n    root.sdf             /_class_MultiLevelCurveRig/rig/ConstRig/Anim\n    CurveTrackRig.sdf    /_class_MultiLevelCurveRig/rig/ConstRig/Anim\n    ConstraintRig.sdf    /ConstraintRig/Anim\n\nProhibited child names:\n     ['Const']\n\n------------------------------------------------------------------------\nResults for composing </FergusCloak/rig/LArmRig/Anim>\n\nPrim Stack:\n    CurveTrackRig.sdf    /CurveTrackRig/Anim\n\nProhibited child names:\n     ['Curve']\n\n------------------------------------------------------------------------\nResults for composing </FergusCloak/Anim>\n\nPrim Stack:\n    root.sdf             /FergusCloak/Anim\n\nChild names:\n     ['LArm']\n\n------------------------------------------------------------------------\nResults for composing </FergusCloak/Anim/LArm>\n\nPrim Stack:\n    CurveTrackRig.sdf    /CurveTrackRig/Anim/Curve\n\nChild names:\n     ['Const']\n\n------------------------------------------------------------------------\nResults for composing </FergusCloak/Anim/LArm/Const>\n\nPrim Stack:\n    root.sdf             /_class_MultiLevelCurveRig/rig/ConstRig/Anim/Const\n    CurveTrackRig.sdf    /_class_MultiLevelCurveRig/rig/ConstRig/Anim/Const\n    ConstraintRig.sdf    /ConstraintRig/Anim/Const\n\n------------------------------------------------------------------------\nResults for composing </_class_MultiLevelCurveRig>\n\nPrim Stack:\n    root.sdf             /_class_MultiLevelCurveRig\n\nChild names:\n     ['rig']\n\n------------------------------------------------------------------------\nResults for composing </_class_MultiLevelCurveRig/rig>\n\nPrim Stack:\n    root.sdf             /_class_MultiLevelCurveRig/rig\n\nChild names:\n     ['ConstRig']\n\n------------------------------------------------------------------------\nResults for composing </_class_MultiLevelCurveRig/rig/ConstRig>\n\nPrim Stack:\n    root.sdf             /_class_MultiLevelCurveRig/rig/ConstRig\n\nChild names:\n     ['Anim']\n\n------------------------------------------------------------------------\nResults for composing </_class_MultiLevelCurveRig/rig/ConstRig/Anim>\n\nPrim Stack:\n    root.sdf             /_class_MultiLevelCurveRig/rig/ConstRig/Anim\n\nChild names:\n     ['Const']\n\n------------------------------------------------------------------------\nResults for composing </_class_MultiLevelCurveRig/rig/ConstRig/Anim/Const>\n\nPrim Stack:\n    root.sdf             /_class_MultiLevelCurveRig/rig/ConstRig/Anim/Const\n```\n\n----------------------------------------\n\nTITLE: Initializing Regression Prevention Result in Python\nDESCRIPTION: Sets up a TsRegressionPreventer result object with various parameters related to segment adjustments and widths. This likely represents the outcome of an algorithm to prevent regression in curve manipulation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/NoopContain_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: false\n  havePreSegment: false\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.000000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.000000\n  havePostSegment: true\n  postActiveAdjusted: false\n  postActiveAdjustedWidth: 0.800000\n  postOppositeAdjusted: false\n  postOppositeAdjustedWidth: 0.800000\n```\n\n----------------------------------------\n\nTITLE: USD Layer Stack Output\nDESCRIPTION: Shows the USD layer composition starting with root.sdf and displaying prim stacks, variant selections and child names across multiple model references\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantIndependentSelection.testenv/baseline/compositionResults_TrickyVariantIndependentSelection.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLoading @TrickyVariantIndependentSelection/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </_class_Model>\n\nPrim Stack:\n    root.sdf             /_class_Model\n\n------------------------------------------------------------------------\nResults for composing </Model>\n\nPrim Stack:\n    root.sdf             /Model\n    root.sdf             /_class_Model\n    model.sdf            /Model\n    ref.sdf              /Model_1\n    ref.sdf              /Model_1{transformVariant=a}\n    ref.sdf              /Model_1{pin=test}\n    ref.sdf              /Model_2\n    ref.sdf              /Model_2{transformVariant=a}\n    ref.sdf              /Model_2{pin=test}\n    ref.sdf              /Model_3\n    ref.sdf              /Model_3{transformVariant=a}\n    ref.sdf              /Model_3{pin=test}\n\nVariant Selections:\n    {pin = test}\n    {transformVariant = a}\n\nChild names:\n     ['Model_3_Pin_Test', 'Model_3_Transform_A', 'Model_2_Pin_Test', 'Model_2_Transform_A', 'Model_1_Pin_Test', 'Model_1_Transform_A']\n\n------------------------------------------------------------------------\nResults for composing </Model/Model_3_Pin_Test>\n\nPrim Stack:\n    ref.sdf              /Model_3{pin=test}Model_3_Pin_Test\n\n------------------------------------------------------------------------\nResults for composing </Model/Model_3_Transform_A>\n\nPrim Stack:\n    ref.sdf              /Model_3{transformVariant=a}Model_3_Transform_A\n\n------------------------------------------------------------------------\nResults for composing </Model/Model_2_Pin_Test>\n\nPrim Stack:\n    ref.sdf              /Model_2{pin=test}Model_2_Pin_Test\n\n------------------------------------------------------------------------\nResults for composing </Model/Model_2_Transform_A>\n\nPrim Stack:\n    ref.sdf              /Model_2{transformVariant=a}Model_2_Transform_A\n\n------------------------------------------------------------------------\nResults for composing </Model/Model_1_Pin_Test>\n\nPrim Stack:\n    ref.sdf              /Model_1{pin=test}Model_1_Pin_Test\n\n------------------------------------------------------------------------\nResults for composing </Model/Model_1_Transform_A>\n\nPrim Stack:\n    ref.sdf              /Model_1{transformVariant=a}Model_1_Transform_A\n```\n\n----------------------------------------\n\nTITLE: Registering PCP Museum Python Tests\nDESCRIPTION: CMake commands using pxr_register_test to configure Python-based tests that verify PCP composition results. Tests include environment variables and output comparison specifications.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testPcpMuseum_BasicInstancing\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd BasicInstancing/root.sdf\"\n    STDOUT_REDIRECT compositionResults_BasicInstancing.txt\n    DIFF_COMPARE compositionResults_BasicInstancing.txt \n    ENV \n        PCP_OVERRIDE_INSTANCEABLE=1\n)\n```\n\n----------------------------------------\n\nTITLE: Evaluating Spline Data Points\nDESCRIPTION: A table of time-value pairs representing evaluations of the spline at different time points. The data shows how the spline interpolates between the knot points and maintains constant values in the extrapolation regions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/tsTest_TsFramework.testenv/baseline/test_BaselineParams_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n0.200000 1.000000\n1.000000 1.000000\n1.019900 1.018739\n1.039801 1.035628\n1.059701 1.051152\n1.079602 1.065611\n1.099502 1.079213\n1.119403 1.092102\n1.139303 1.104387\n1.159204 1.116153\n1.179104 1.127465\n1.199005 1.138376\n1.218905 1.148929\n1.238806 1.159161\n1.258706 1.169101\n1.278607 1.178775\n1.298507 1.188206\n1.318408 1.197412\n1.338308 1.206411\n1.358209 1.215216\n1.378109 1.223843\n1.398010 1.232301\n1.417910 1.240601\n1.437811 1.248753\n1.457711 1.256764\n1.477612 1.264644\n1.497512 1.272398\n1.517413 1.280034\n1.537313 1.287556\n1.557214 1.294970\n1.577114 1.302282\n1.597015 1.309495\n1.616915 1.316614\n1.636816 1.323644\n1.656716 1.330586\n1.676617 1.337446\n1.696517 1.344225\n1.716418 1.350928\n1.736318 1.357556\n1.756219 1.364113\n1.776119 1.370600\n1.796020 1.377021\n1.815920 1.383377\n1.835821 1.389670\n1.855721 1.395903\n1.875622 1.402076\n1.895522 1.408193\n1.915423 1.414254\n1.935323 1.420261\n1.955224 1.426216\n1.975124 1.432120\n1.995025 1.437973\n2.014925 1.443779\n2.034826 1.449537\n2.054726 1.455249\n2.074627 1.460917\n2.094527 1.466540\n2.114428 1.472121\n2.134328 1.477659\n2.154229 1.483157\n2.174129 1.488615\n2.194030 1.494033\n2.213930 1.499413\n2.233831 1.504755\n2.253731 1.510061\n2.273632 1.515330\n2.293532 1.520564\n2.313433 1.525764\n2.333333 1.530929\n2.353234 1.536060\n2.373134 1.541159\n2.393035 1.546226\n2.412935 1.551260\n2.432836 1.556264\n2.452736 1.561236\n2.472637 1.566179\n2.492537 1.571092\n2.512438 1.575975\n2.532338 1.580830\n2.552239 1.585656\n2.572139 1.590454\n2.592040 1.595225\n2.611940 1.599969\n2.631841 1.604686\n2.651741 1.609376\n2.671642 1.614040\n2.691542 1.618679\n2.711443 1.623292\n2.731343 1.627880\n2.751244 1.632443\n2.771144 1.636982\n2.791045 1.641496\n2.810945 1.645987\n2.830846 1.650453\n2.850746 1.654897\n2.870647 1.659317\n2.890547 1.663714\n2.910448 1.668089\n2.930348 1.672441\n2.950249 1.676771\n2.970149 1.681079\n2.990050 1.685365\n3.009950 1.689630\n3.029851 1.693872\n3.049751 1.698094\n3.069652 1.702295\n3.089552 1.706474\n3.109453 1.710633\n3.129353 1.714771\n3.149254 1.718889\n3.169154 1.722986\n3.189055 1.727064\n3.208955 1.731121\n3.228856 1.735158\n3.248756 1.739175\n3.268657 1.743173\n3.288557 1.747151\n3.308458 1.751109\n3.328358 1.755048\n3.348259 1.758967\n3.368159 1.762868\n3.388060 1.766749\n3.407960 1.770611\n3.427861 1.774454\n3.447761 1.778278\n3.467662 1.782083\n3.487562 1.785869\n3.507463 1.789636\n3.527363 1.793385\n3.547264 1.797114\n3.567164 1.800825\n3.587065 1.804517\n3.606965 1.808191\n3.626866 1.811845\n3.646766 1.815481\n3.666667 1.819098\n3.686567 1.822696\n3.706468 1.826276\n3.726368 1.829837\n3.746269 1.833378\n3.766169 1.836901\n3.786070 1.840405\n3.805970 1.843890\n3.825871 1.847356\n3.845771 1.850803\n3.865672 1.854230\n3.885572 1.857638\n3.905473 1.861026\n3.925373 1.864395\n3.945274 1.867745\n3.965174 1.871074\n3.985075 1.874383\n4.004975 1.877673\n4.024876 1.880942\n4.044776 1.884190\n4.064677 1.887418\n4.084577 1.890624\n4.104478 1.893810\n4.124378 1.896974\n4.144279 1.900116\n4.164179 1.903236\n4.184080 1.906335\n4.203980 1.909410\n4.223881 1.912462\n4.243781 1.915491\n4.263682 1.918496\n4.283582 1.921477\n4.303483 1.924433\n4.323383 1.927364\n4.343284 1.930269\n4.363184 1.933148\n4.383085 1.936000\n4.402985 1.938824\n4.422886 1.941619\n4.442786 1.944385\n4.462687 1.947121\n4.482587 1.949826\n4.502488 1.952499\n4.522388 1.955138\n4.542289 1.957743\n4.562189 1.960312\n4.582090 1.962843\n4.601990 1.965336\n4.621891 1.967787\n4.641791 1.970195\n4.661692 1.972558\n4.681592 1.974873\n4.701493 1.977137\n4.721393 1.979347\n4.741294 1.981498\n4.761194 1.983588\n4.781095 1.985609\n4.800995 1.987557\n4.820896 1.989425\n4.840796 1.991203\n4.860697 1.992881\n4.880597 1.994447\n4.900498 1.995883\n4.920398 1.997168\n4.940299 1.998274\n5.000000 2.000000\n5.800000 2.000000\n```\n\n----------------------------------------\n\nTITLE: Composing USD Prim Path /B\nDESCRIPTION: Represents the absolute path to the prim named 'B' within the USD stage being composed.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndVariants.testenv/baseline/compositionResults_SpecializesAndVariants.txt#2025-04-23_snippet_6\n\nLANGUAGE: usd\nCODE:\n```\n/B\n```\n\n----------------------------------------\n\nTITLE: Loading USD Layer Stack\nDESCRIPTION: Shows the layer stack configuration with root.sdf as the primary layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantFallbackDrivingAuthoredVariant.testenv/baseline/compositionResults_TrickyVariantFallbackDrivingAuthoredVariant.txt#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\nLayer Stack:\n     root.sdf\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimInSublayerWithInternalReference/InternalSublayerReference_Child\nDESCRIPTION: Shows the composition results for the child prim path </PrimInSublayerWithInternalReference/InternalSublayerReference_Child>. The prim stack indicates the source of this child prim originates from the referenced prim </InternalSublayerReference> defined in root.sdf and sublayer.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimInSublayerWithInternalReference/InternalSublayerReference_Child>\n\nPrim Stack:\n    root.sdf             /InternalSublayerReference/InternalSublayerReference_Child\n    sublayer.sdf         /InternalSublayerReference/InternalSublayerReference_Child\n```\n\n----------------------------------------\n\nTITLE: Building USD C++ Test Executables with Dependencies - CMake\nDESCRIPTION: Defines C++ test targets using the pxr_build_test macro, specifying required libraries and CPP source files. These configurations dictate which USD modules each test executable is linked against, enabling automated builds of unit and integration tests. This pattern requires that the involved CMake macros (pxr_build_test) and libraries (e.g., usd, tf, arch) are available as part of the build environment. The macro expects a test target name, a list of libraries, and corresponding CPP source files, resulting in a test binary for each declaration.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testUsdStageNoPython\n    LIBRARIES\n        usd\n    CPPFILES\n        testenv/testUsdStageNoPython.cpp\n)\n\npxr_build_test(testUsdTemplatedIO\n    LIBRARIES\n        usd\n    CPPFILES\n        testenv/testUsdTemplatedIO.cpp\n)\n\npxr_build_test(testUsdStageThreading\n    LIBRARIES\n        arch\n        tf\n        work\n        sdf\n        usd\n    CPPFILES\n        testenv/testUsdStageThreading.cpp\n)\n\npxr_build_test(testUsdThreadedAuthoring\n    LIBRARIES\n        arch\n        tf\n        work\n        sdf\n        usd\n    CPPFILES\n        testenv/testUsdThreadedAuthoring.cpp\n)\n\npxr_build_test(testUsdTimeCodeStream\n    LIBRARIES\n        tf\n        usd\n    CPPFILES\n        testenv/testUsdTimeCodeStream.cpp\n)\n\npxr_build_test(testUsdSchemaBase\n    LIBRARIES\n        usd\n    CPPFILES\n        testenv/testUsdSchemaBase.cpp\n)\n\npxr_build_test(testUsdSchemaRegistryCpp\n    LIBRARIES\n        usd\n    CPPFILES\n        testenv/testUsdSchemaRegistryCpp.cpp\n)\n\npxr_build_test(testUsdResolveTarget\n    LIBRARIES\n        pcp\n        sdf\n        tf\n        usd\n        vt\n    CPPFILES\n        testenv/testUsdResolveTarget.cpp\n)\n\npxr_build_test(testUsdTimeValueAuthoringCpp\n    LIBRARIES\n        arch\n        plug\n        sdf\n        tf\n        usd\n    CPPFILES\n        testenv/testUsdTimeValueAuthoring.cpp\n)\n\npxr_build_test(testUsdUsdzResolver\n    LIBRARIES\n        ar\n        arch\n        tf\n        usd\n    CPPFILES\n        testenv/testUsdUsdzResolver.cpp\n)\n\npxr_build_test(testUsdZipFile_CPP\n    LIBRARIES\n        ar\n        arch\n        tf\n        usd\n    CPPFILES\n        testenv/testUsdZipFile.cpp\n)\n\npxr_build_test(testUsdUsdzBugGHSA01\n    LIBRARIES\n        ar\n        arch\n        tf\n        sdf\n        usd\n    CPPFILES\n        testenv/testUsdUsdzBugGHSA01.cpp\n)\n\npxr_build_test(testUsdSplinesCpp\n    LIBRARIES\n        tf\n        ts\n        sdf\n        usd\n    CPPFILES\n        testenv/testUsdSplinesCpp.cpp\n)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Trace Library Test Builds\nDESCRIPTION: Sets up multiple test build targets for various trace library components including categories, data handling, threading, and performance tests.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/trace/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_build_test(testTraceCategory\n    LIBRARIES\n        trace\n    CPPFILES\n        testenv/testTraceCategory.cpp\n)\n\npxr_build_test(testTraceData\n    LIBRARIES\n        trace\n    CPPFILES\n        testenv/testTraceData.cpp\n)\n\npxr_build_test(testTraceHash\n    LIBRARIES\n        trace\n    CPPFILES\n        testenv/testTraceHash.cpp\n)\n\npxr_build_test(testTraceMacros\n    LIBRARIES\n        trace\n    CPPFILES\n        testenv/testTraceMacros.cpp\n)\n\npxr_build_test(testTraceOverhead\n    LIBRARIES\n        trace\n    CPPFILES\n        testenv/testTraceOverhead.cpp\n)\n\npxr_build_test(testTraceThreading\n    LIBRARIES\n        trace\n    CPPFILES\n        testenv/testTraceThreading.cpp\n)\n\npxr_build_test(testTraceSerialization\n    LIBRARIES\n        trace\n    CPPFILES\n        testenv/testTraceSerialization.cpp\n)\n\npxr_build_test(testTraceCounters\n    LIBRARIES\n        trace\n    CPPFILES\n        testenv/testTraceCounters.cpp\n)\n\npxr_build_test(testTraceMarkers\n    LIBRARIES\n        trace\n    CPPFILES\n        testenv/testTraceMarkers.cpp\n)\n\npxr_build_test(testTraceReportPerf\n    LIBRARIES\n        trace\n    CPPFILES\n        testenv/testTraceReportPerf.cpp\n)\n\npxr_build_test(testTraceEventContainer\n    LIBRARIES\n        trace\n    CPPFILES\n        testenv/testTraceEventContainer.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Including RST files and ISO entities in Asset Resolution 2.0 Documentation\nDESCRIPTION: This snippet demonstrates the inclusion of external RST files and ISO entities in the documentation. It also includes a note about the proposal's implementation status.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_ar2.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: rolesAndUtils.rst\n.. include:: <isonum.txt>\n\n.. note::\n   This proposal has been implemented. This document exists for historical\n   reference and may be outdated. For up-to-date documentation, see the\n   `Ar overview page <api/ar_page_front.html>`_.\n```\n\n----------------------------------------\n\nTITLE: Defining VDF Library Configuration in CMake\nDESCRIPTION: Sets up the prefix and package name for the VDF library within the Pixar USD framework. This establishes the library's namespace and package organization.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/vdf/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/exec)\nset(PXR_PACKAGE vdf)\n```\n\n----------------------------------------\n\nTITLE: Curve Sample Data Pairs - Plaintext\nDESCRIPTION: This block contains pairs of floating-point numbers representing sample points along a spline curve, likely for validating interpolation behavior. Typically, these values are used as ground-truth or result comparison for regression tests. Inputs match specific X positions on the curve, outputs are corresponding Y values; no dependencies except for curve configuration. Suitable for automated diff or visual plot comparison.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveMayaTansLimitActive_TsTestBaseline.txt#2025-04-23_snippet_3\n\nLANGUAGE: Plaintext\nCODE:\n```\n-0.200000 0.000000\n0.000000 0.000000\n0.004975 0.000006\n0.009950 0.000024\n0.014925 0.000055\n0.019900 0.000099\n0.024876 0.000155\n0.029851 0.000224\n0.034826 0.000307\n0.039801 0.000402\n0.044776 0.000511\n0.049751 0.000634\n0.054726 0.000771\n0.059701 0.000922\n0.064677 0.001087\n0.069652 0.001266\n0.074627 0.001461\n0.079602 0.001670\n0.084577 0.001894\n0.089552 0.002133\n0.094527 0.002388\n0.099502 0.002659\n0.104478 0.002946\n0.109453 0.003249\n0.114428 0.003569\n0.119403 0.003905\n0.124378 0.004259\n0.129353 0.004630\n0.134328 0.005018\n0.139303 0.005425\n0.144279 0.005849\n0.149254 0.006292\n0.154229 0.006754\n0.159204 0.007235\n0.164179 0.007736\n0.169154 0.008256\n0.174129 0.008796\n0.179104 0.009357\n0.184080 0.009938\n0.189055 0.010541\n0.194030 0.011165\n0.199005 0.011811\n0.203980 0.012480\n0.208955 0.013172\n0.213930 0.013886\n0.218905 0.014625\n0.223881 0.015388\n0.228856 0.016176\n0.233831 0.016988\n0.238806 0.017826\n0.243781 0.018690\n0.248756 0.019582\n0.253731 0.020500\n0.258706 0.021447\n0.263682 0.022422\n0.268657 0.023425\n0.273632 0.024460\n0.278607 0.025524\n0.283582 0.026618\n0.288557 0.027746\n0.293532 0.028906\n0.298507 0.030099\n0.303483 0.031326\n0.308458 0.032588\n0.313433 0.033886\n0.318408 0.035221\n0.323383 0.036594\n0.328358 0.038005\n0.333333 0.039457\n0.338308 0.040949\n0.343284 0.042483\n0.348259 0.044060\n0.353234 0.045681\n0.358209 0.047348\n0.363184 0.049062\n0.368159 0.050824\n0.373134 0.052637\n0.378109 0.054500\n0.383085 0.056417\n0.388060 0.058388\n0.393035 0.060416\n0.398010 0.062503\n0.402985 0.064650\n0.407960 0.066859\n0.412935 0.069133\n0.417910 0.071475\n0.422886 0.073886\n0.427861 0.076370\n0.432836 0.078929\n0.437811 0.081566\n0.442786 0.084285\n0.447761 0.087089\n0.452736 0.089981\n0.457711 0.092966\n0.462687 0.096048\n0.467662 0.099232\n0.472637 0.102522\n0.477612 0.105924\n0.482587 0.109443\n0.487562 0.113086\n0.492537 0.116859\n0.497512 0.120771\n0.502488 0.124830\n0.507463 0.129043\n0.512438 0.133422\n0.517413 0.137976\n0.522388 0.142720\n0.527363 0.147665\n0.532338 0.152827\n0.537313 0.158224\n0.542289 0.163875\n0.547264 0.169803\n0.552239 0.176032\n0.557214 0.182593\n0.562189 0.189519\n0.567164 0.196853\n0.572139 0.204643\n0.577114 0.212947\n0.582090 0.221837\n0.587065 0.231404\n0.592040 0.241761\n0.597015 0.253057\n0.601990 0.265492\n0.606965 0.279343\n0.611940 0.295016\n0.616915 0.313146\n0.621891 0.334815\n0.626866 0.362173\n0.631841 0.400800\n0.636816 0.485153\n0.641791 0.718144\n0.646766 0.758641\n0.651741 0.785045\n0.656716 0.805098\n0.661692 0.821398\n0.666667 0.835173\n0.671642 0.847113\n0.676617 0.857650\n0.681592 0.867073\n0.686567 0.875587\n0.691542 0.883341\n0.696517 0.890450\n0.701493 0.897004\n0.706468 0.903073\n0.711443 0.908714\n0.716418 0.913977\n0.721393 0.918899\n0.726368 0.923514\n0.731343 0.927851\n0.736318 0.931933\n0.741294 0.935783\n0.746269 0.939419\n0.751244 0.942857\n0.756219 0.946112\n0.761194 0.949196\n0.766169 0.952120\n0.771144 0.954896\n0.776119 0.957532\n0.781095 0.960036\n0.786070 0.962417\n0.791045 0.964681\n0.796020 0.966834\n0.800995 0.968883\n0.805970 0.970832\n0.810945 0.972687\n0.815920 0.974452\n0.820896 0.976131\n0.825871 0.977728\n0.830846 0.979248\n0.835821 0.980692\n0.840796 0.982065\n0.845771 0.983368\n0.850746 0.984606\n0.855721 0.985781\n0.860697 0.986894\n0.865672 0.987949\n0.870647 0.988947\n0.875622 0.989891\n0.880597 0.990782\n0.885572 0.991623\n0.890547 0.992414\n0.895522 0.993158\n0.900498 0.993856\n0.905473 0.994509\n0.910448 0.995120\n0.915423 0.995689\n0.920398 0.996217\n0.925373 0.996706\n0.930348 0.997157\n0.935323 0.997571\n0.940299 0.997949\n0.945274 0.998292\n0.950249 0.998600\n0.955224 0.998876\n0.960199 0.999120\n0.965174 0.999332\n0.970149 0.999513\n0.975124 0.999665\n0.980100 0.999787\n0.985075 0.999881\n1.000000 1.000000\n1.200000 1.000000\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </RearLegRig/Legs> in USD\nDESCRIPTION: Shows the composition results for the prim path </RearLegRig/Legs> from 'root.sdf'. It lists the prim stack and its immediate child prim names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyMultipleRelocations4.testenv/baseline/compositionResults_TrickyMultipleRelocations4.txt#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </RearLegRig/Legs>\n\nPrim Stack:\n    root.sdf             /RearLegRig/Legs\n\nChild names:\n     ['RightRig', 'LeftRig']\n```\n\n----------------------------------------\n\nTITLE: Registering PCP Museum Tests with CMake\nDESCRIPTION: Series of pxr_register_test() commands that set up tests for USD's composition system. Each test runs testPcpCompositionResults with different input USD files and compares outputs against expected results.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testPcpMuseum_BasicRelocateToAnimInterface\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd BasicRelocateToAnimInterface/root.sdf\" \n    STDOUT_REDIRECT compositionResults_BasicRelocateToAnimInterface.txt\n    DIFF_COMPARE compositionResults_BasicRelocateToAnimInterface.txt \n)\n\npxr_register_test(testPcpMuseum_BasicRelocateToAnimInterfaceAsNewRootPrim\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd --errorFile compositionErrors_BasicRelocateToAnimInterfaceAsNewRootPrim_usd.txt BasicRelocateToAnimInterfaceAsNewRootPrim/root.sdf\" \n    STDOUT_REDIRECT compositionResults_BasicRelocateToAnimInterfaceAsNewRootPrim_usd.txt\n    DIFF_COMPARE compositionResults_BasicRelocateToAnimInterfaceAsNewRootPrim_usd.txt compositionErrors_BasicRelocateToAnimInterfaceAsNewRootPrim_usd.txt\n)\n\npxr_register_test(testPcpMuseum_BasicInherits\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd --errorFile compositionErrors_BasicInherits.txt BasicInherits/root.sdf\" \n    STDOUT_REDIRECT compositionResults_BasicInherits.txt\n    DIFF_COMPARE compositionResults_BasicInherits.txt compositionErrors_BasicInherits.txt\n    ENV \n        SDF_SCHEMA_PROHIBIT_INVALID_VARIANT_SELECTIONS=0\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Spline Test Data for Regression Prevention - Python\nDESCRIPTION: This Python snippet initializes a spline data structure for a test, defining its extrapolation methods, interpolation mode, and knots using high-precision floating-point values that match logged C++ settings. The object, Ts.TsTest_SplineData, requires dependencies on the 'Ts' module (likely Pixar's test harness) and expects classes for 'Knot', 'Extrapolation', and interpolation enumerations. Input parameters such as isHermite, preExtrapolation, postExtrapolation, and a list of knots are precisely configured to reflect the data used in regression prevention scenarios, with outputs intended for direct test assertions or numeric analysis.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PostRegressiveLimitOpposite_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.0f7f3ae9122b3p-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.4cccccccccccdp+0'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Registering VDF Tests in CMake for OpenUSD\nDESCRIPTION: This snippet demonstrates the pattern used to register multiple VDF tests using the pxr_register_test function. Each test is configured with a command path, expected return code, and sometimes additional options like output redirection, diff comparisons, or environment variables.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/vdf/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testVdfLinearMap\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testVdfLinearMap\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testVdfMask\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testVdfMask\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testVdfMaskThreading\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testVdfMaskThreading\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Intra-Page Links in RST Documentation\nDESCRIPTION: Example of creating links to sections within the same page using trailing underbar syntax in reStructuredText for USD documentation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n`Custom Link Text <glossary:API Schema>`_\n```\n\n----------------------------------------\n\nTITLE: Configuring and registering the Time test for ef library\nDESCRIPTION: Sets up a test for the Time component, specifying the required libraries and source files, and registers it with the testing framework with an expected return code of 0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/ef/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testEfTime\n    LIBRARIES\n        ef\n        tf\n    \n    CPPFILES\n        testenv/testEfTime.cpp\n)\n\npxr_register_test(testEfTime\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testEfTime\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Registering HdSt Basic Drawing Test with Wire-on-Surface Representation\nDESCRIPTION: This CMake snippet registers a test for HdSt basic drawing using wire-on-surface representation. It runs the testHdStBasicDrawing executable with specific parameters and compares the output image against an expected result.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_Immediate_lv0_wireOnSurf\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr wireOnSurf --write testHdStBasicDrawing_lv0_wireOnSurf.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv0_wireOnSurf.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\n----------------------------------------\n\nTITLE: Registering usdview CPU Skinning Test\nDESCRIPTION: Registers a CMake test named `testUsdviewCPUSkinning`. This test executes `testusdview` with the Python script `testUsdviewSkinning.py` and `arm.usda`. It specifically tests skeletal skinning computed on the CPU by setting the environment variable `USDSKELIMAGING_FORCE_CPU_COMPUTE=1`. Perceptual image difference comparison is performed against a set of images representing various states and resyncs, using an absolute failure threshold of 0.05 and expecting a return code of 0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdviewCPUSkinning\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewSkinning.py arm.usda\"\n    IMAGE_DIFF_COMPARE\n        change_complexity.png\n        vis_frame_4.png\n        invis_frame_4.png\n        vis_frame_8.png\n        pre_skinned_prim_resync_frame_2.png\n        post_skinned_prim_resync_frame_2.png\n        pre_skel_resync_frame_6.png\n        post_skel_resync_frame_6.png\n    FAIL 0.05\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    ENV\n        USDSKELIMAGING_FORCE_CPU_COMPUTE=1\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Test Scripts and Directories\nDESCRIPTION: Configures the installation of Python test scripts and test environment directories for recursion testing scenarios.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/trace/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_test_scripts(\n    testenv/testTrace.py\n    testenv/testTraceRecursion.py\n    testenv/testTraceReports.py\n    testenv/testTraceReporter.py\n    testenv/testTraceReporterLoadTrace.py\n)\n\npxr_install_test_dir(\n    SRC testenv/testTraceRecursion.testenv\n    DEST testTraceRecursion1\n)\n\npxr_install_test_dir(\n    SRC testenv/testTraceRecursion.testenv\n    DEST testTraceRecursion2\n)\n\npxr_install_test_dir(\n    SRC testenv/testTraceRecursion.testenv\n    DEST testTraceRecursion3\n)\n\npxr_install_test_dir(\n    SRC testenv/testTraceRecursion.testenv\n    DEST testTraceRecursion4\n)\n\npxr_install_test_dir(\n    SRC testenv/testTraceRecursion.testenv\n    DEST testTraceRecursion5\n)\n\npxr_install_test_dir(\n    SRC testenv/testTraceRecursion.testenv\n    DEST testTraceRecursion6\n)\n\npxr_install_test_dir(\n    SRC testenv/testTraceRecursion.testenv\n    DEST testTraceRecursion7\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Test Directory for USD Resolver Example in CMake\nDESCRIPTION: This snippet configures the installation of the test directory for the USD resolver example. It specifies the source and destination directories for the test files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/examples/usdResolverExample/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdResolverExample\n    DEST testUsdResolverExample\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Spline and Knot Settings in Python\nDESCRIPTION: This snippet defines the configuration for a spline curve, including interpolation method, extrapolation settings, and knot points with their respective properties.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveKeepStart_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  0.000000: 0.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.000000, postLen 1.300000, auto false / false\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.530268, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </Root> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </Root>. The prim stack indicates contributions from /Root and /_X within 'root.sdf'. The resolved child prim names are '_Y' and 'B'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Root>\n\nPrim Stack:\n    root.sdf             /Root\n    root.sdf             /_X\n\nChild names:\n     ['_Y', 'B']\n```\n\n----------------------------------------\n\nTITLE: Tracking Memory Resource Allocation in OpenUSD\nDESCRIPTION: Log output showing memory allocation and garbage collection metrics for OpenUSD resources. The log tracks various resource types including draw buffers, textures, topologies, and primvar data through different operations including initialization, allocation, deletion, and garbage collection.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStBufferArrayInstancingDisabled/baseline/testHdStBufferArrayInstancingDisabled-Run1-stdout.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnonUniformSize, 0\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 0\nsingleBufferSize, 0\ntextureMemory, 0\ngarbageCollected = 0\ninstMeshTopology = 0\ninstBasisCurvesTopology = 0\ninstVertexAdjacency = 0\ninstMeshTopologyRange = 0\ninstBasisCurvesTopologyRange = 0\n----- allocated -----\ndrawIndirect, 480\ndrawIndirectCull, 480\nnonUniformSize, 66968\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 19688\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 49904\ngarbageCollected = 0\ninstMeshTopology = 0\ninstBasisCurvesTopology = 0\ninstVertexAdjacency = 0\ninstMeshTopologyRange = 0\ninstBasisCurvesTopologyRange = 0\n----- delete a prim -----\ndrawIndirect, 480\ndrawIndirectCull, 480\nnonUniformSize, 66968\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 19688\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 49904\ngarbageCollected = 0\ninstMeshTopology = 0\ninstBasisCurvesTopology = 0\ninstVertexAdjacency = 0\ninstMeshTopologyRange = 0\ninstBasisCurvesTopologyRange = 0\n----- garbage collected -----\ndrawIndirect, 900\ndrawIndirectCull, 900\nnonUniformSize, 66280\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 19176\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 49408\ngarbageCollected = 1\ninstMeshTopology = 0\ninstBasisCurvesTopology = 0\ninstVertexAdjacency = 0\ninstMeshTopologyRange = 0\ninstBasisCurvesTopologyRange = 0\n----- delete more prims -----\ndrawIndirect, 660\ndrawIndirectCull, 660\nnonUniformSize, 54352\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 14992\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 40672\ngarbageCollected = 2\ninstMeshTopology = 0\ninstBasisCurvesTopology = 0\ninstVertexAdjacency = 0\ninstMeshTopologyRange = 0\ninstBasisCurvesTopologyRange = 0\n----- clear all -----\ndrawIndirect, 240\ndrawIndirectCull, 240\nnonUniformSize, 0\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nsingleBufferSize, 0\ntextureMemory, 786432\ngarbageCollected = 3\ninstMeshTopology = 0\ninstBasisCurvesTopology = 0\ninstVertexAdjacency = 0\ninstMeshTopologyRange = 0\ninstBasisCurvesTopologyRange = 0\n----- 3 points -----\ndrawIndirect, 240\ndrawIndirectCull, 240\nnonUniformSize, 36\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 36\nsingleBufferSize, 0\ntextureMemory, 786432\ngarbageCollected = 0\ninstMeshTopology = 0\ninstBasisCurvesTopology = 0\ninstVertexAdjacency = 0\ninstMeshTopologyRange = 0\ninstBasisCurvesTopologyRange = 0\n----- 5 points -----\ndrawIndirect, 240\ndrawIndirectCull, 240\nnonUniformSize, 60\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 60\nsingleBufferSize, 0\ntextureMemory, 786432\ngarbageCollected = 0\ninstMeshTopology = 0\ninstBasisCurvesTopology = 0\ninstVertexAdjacency = 0\ninstMeshTopologyRange = 0\ninstBasisCurvesTopologyRange = 0\n----- 4 points before GC -----\ndrawIndirect, 240\ndrawIndirectCull, 240\nnonUniformSize, 48\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 48\nsingleBufferSize, 0\ntextureMemory, 786432\ngarbageCollected = 0\ninstMeshTopology = 0\ninstBasisCurvesTopology = 0\ninstVertexAdjacency = 0\ninstMeshTopologyRange = 0\ninstBasisCurvesTopologyRange = 0\n----- 4 points after GC -----\ndrawIndirect, 240\ndrawIndirectCull, 240\nnonUniformSize, 48\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 48\nsingleBufferSize, 0\ntextureMemory, 786432\ngarbageCollected = 1\ninstMeshTopology = 0\ninstBasisCurvesTopology = 0\ninstVertexAdjacency = 0\ninstMeshTopologyRange = 0\ninstBasisCurvesTopologyRange = 0\n----- 0 points after GC -----\ndrawIndirect, 240\ndrawIndirectCull, 240\nnonUniformSize, 0\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 0\nsingleBufferSize, 0\ntextureMemory, 786432\ngarbageCollected = 1\ninstMeshTopology = 0\ninstBasisCurvesTopology = 0\ninstVertexAdjacency = 0\ninstMeshTopologyRange = 0\ninstBasisCurvesTopologyRange = 0\nOK\n```\n\n----------------------------------------\n\nTITLE: Conditionally Configuring UsdImagingHd MaterialX Tests in CMake\nDESCRIPTION: This CMake block checks if shared libraries (`BUILD_SHARED_LIBS`) and MaterialX support (`PXR_ENABLE_MATERIALX_SUPPORT`) are enabled. If true, it defines the build process for the `testUsdImagingHdMtlx` test executable using `pxr_build_test`, linking against `tf`, `hd`, `hdMtlx`, and `usdImaging`. It then installs the test using `pxr_install_test_dir` and registers multiple test cases via `pxr_register_test`, each running the executable with different USD input files (`--filename`) and comparing the output against expected MaterialX files (`DIFF_COMPARE`).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdImaging/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# configurations. \nif (BUILD_SHARED_LIBS AND $PXR_ENABLE_MATERIALX_SUPPORT)\n\npxr_build_test(testUsdImagingHdMtlx\n    LIBRARIES\n        tf\n        hd\n        hdMtlx\n        usdImaging\n    CPPFILES\n        testenv/testUsdImagingHdMtlx.cpp\n)\npxr_install_test_dir(\n    SRC testenv/testUsdImagingHdMtlx\n    DEST testUsdImagingHdMtlx\n)\npxr_register_test(testUsdImagingHdMtlx_withMtlxVersion\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdImagingHdMtlx --filename withMtlxVersion.usda\"\n    EXPECTED_RETURN_CODE 0\n    DIFF_COMPARE\n        withMtlxVersion.mtlx\n    TESTENV testUsdImagingHdMtlx\n)\npxr_register_test(testUsdImagingHdMtlx_withoutMtlxVersion\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdImagingHdMtlx --filename withoutMtlxVersion.usda\"\n    EXPECTED_RETURN_CODE 0\n    DIFF_COMPARE\n        withoutMtlxVersion.mtlx\n    TESTENV testUsdImagingHdMtlx\n)\npxr_register_test(testUsdImagingHdMtlx_atan2Node\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdImagingHdMtlx --filename atan2Node.usda\"\n    EXPECTED_RETURN_CODE 0\n    DIFF_COMPARE\n        atan2Node.mtlx\n    TESTENV testUsdImagingHdMtlx\n)\npxr_register_test(testUsdImagingHdMtlx_switchNode\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdImagingHdMtlx --filename switchNode.usda\"\n    EXPECTED_RETURN_CODE 0\n    DIFF_COMPARE\n        switchNode.mtlx\n    TESTENV testUsdImagingHdMtlx\n)\npxr_register_test(testUsdImagingHdMtlx_swizzleNode\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdImagingHdMtlx --filename swizzleNode.usda\"\n    EXPECTED_RETURN_CODE 0\n    DIFF_COMPARE\n        swizzleNode.mtlx\n    TESTENV testUsdImagingHdMtlx\n)\n\nendif() # BUILD_SHARED_LIBS AND PXR_ENABLE_MATERIALX_SUPPORT\n```\n\n----------------------------------------\n\nTITLE: Registering HdSt Basic Drawing Test with Refined Representation and Increased Refinement Level\nDESCRIPTION: This CMake snippet registers a test for HdSt basic drawing using refined representation with an increased refinement level. It runs the testHdStBasicDrawing executable with specific parameters and compares the output image against an expected result.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_Immediate_lv1_refined\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr refined --refineLevel 1 --write testHdStBasicDrawing_lv1_refined.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv1_refined.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\n----------------------------------------\n\nTITLE: Sampled Spline Data Points (Text)\nDESCRIPTION: Provides a list of time-value pairs representing sampled points along a curve or spline. This data can be used for plotting, validation, or testing purposes, showing the spline's shape between and potentially beyond the defined knots (0.0 and 1.0 in this case).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveMayaTansKeepStart_TsTestBaseline.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n-0.200000 0.000000\n0.000000 0.000000\n0.004975 0.000005\n0.009950 0.000020\n0.014925 0.000044\n0.019900 0.000079\n0.024876 0.000124\n0.029851 0.000179\n0.034826 0.000245\n0.039801 0.000321\n0.044776 0.000408\n0.049751 0.000505\n0.054726 0.000613\n0.059701 0.000733\n0.064677 0.000863\n0.069652 0.001004\n0.074627 0.001157\n0.079602 0.001321\n0.084577 0.001497\n0.089552 0.001684\n0.094527 0.001883\n0.099502 0.002094\n0.104478 0.002318\n0.109453 0.002553\n0.114428 0.002801\n0.119403 0.003061\n0.124378 0.003334\n0.129353 0.003620\n0.134328 0.003919\n0.139303 0.004231\n0.144279 0.004556\n0.149254 0.004895\n0.154229 0.005247\n0.159204 0.005613\n0.164179 0.005993\n0.169154 0.006388\n0.174129 0.006796\n0.179104 0.007219\n0.184080 0.007657\n0.189055 0.008109\n0.194030 0.008577\n0.199005 0.009060\n0.203980 0.009558\n0.208955 0.010072\n0.213930 0.010602\n0.218905 0.011148\n0.223881 0.011711\n0.228856 0.012290\n0.233831 0.012886\n0.238806 0.013499\n0.243781 0.014129\n0.248756 0.014777\n0.253731 0.015442\n0.258706 0.016126\n0.263682 0.016828\n0.268657 0.017548\n0.273632 0.018288\n0.278607 0.019046\n0.283582 0.019825\n0.288557 0.020623\n0.293532 0.021441\n0.298507 0.022279\n0.303483 0.023138\n0.308458 0.024019\n0.313433 0.024920\n0.318408 0.025844\n0.323383 0.026790\n0.328358 0.027758\n0.333333 0.028749\n0.338308 0.029764\n0.343284 0.030802\n0.348259 0.031864\n0.353234 0.032951\n0.358209 0.034063\n0.363184 0.035201\n0.368159 0.036365\n0.373134 0.037555\n0.378109 0.038772\n0.383085 0.040016\n0.388060 0.041289\n0.393035 0.042590\n0.398010 0.043920\n0.402985 0.045280\n0.407960 0.046671\n0.412935 0.048092\n0.417910 0.049545\n0.422886 0.051030\n0.427861 0.052549\n0.432836 0.054101\n0.437811 0.055688\n0.442786 0.057310\n0.447761 0.058968\n0.452736 0.060663\n0.457711 0.062395\n0.462687 0.064167\n0.467662 0.065978\n0.472637 0.067830\n0.477612 0.069723\n0.482587 0.071659\n0.487562 0.073639\n0.492537 0.075664\n0.497512 0.077735\n0.502488 0.079854\n0.507463 0.082021\n0.512438 0.084238\n0.517413 0.086507\n0.522388 0.088829\n0.527363 0.091206\n0.532338 0.093638\n0.537313 0.096129\n0.542289 0.098680\n0.547264 0.101293\n0.552239 0.103969\n0.557214 0.106711\n0.562189 0.109522\n0.567164 0.112403\n0.572139 0.115357\n0.577114 0.118387\n0.582090 0.121496\n0.587065 0.124686\n0.592040 0.127962\n0.597015 0.131325\n0.601990 0.134781\n0.606965 0.138332\n0.611940 0.141983\n0.616915 0.145738\n0.621891 0.149603\n0.626866 0.153583\n0.631841 0.157682\n0.636816 0.161907\n0.641791 0.166266\n0.646766 0.170763\n0.651741 0.175409\n0.656716 0.180210\n0.661692 0.185177\n0.666667 0.190319\n0.671642 0.195648\n0.676617 0.201177\n0.681592 0.206919\n0.686567 0.212892\n0.691542 0.219111\n0.696517 0.225594\n0.701493 0.232370\n0.706468 0.239458\n0.711443 0.246894\n0.716418 0.254709\n0.721393 0.262945\n0.726368 0.271650\n0.731343 0.280884\n0.736318 0.290716\n0.741294 0.301234\n0.746269 0.312551\n0.751244 0.324807\n0.756219 0.338194\n0.761194 0.352971\n0.766169 0.369511\n0.771144 0.388382\n0.776119 0.410521\n0.781095 0.437682\n0.786070 0.473936\n0.791045 0.535146\n0.796020 0.786450\n0.800995 0.832623\n0.805970 0.859001\n0.810945 0.877922\n0.815920 0.892721\n0.820896 0.904853\n0.825871 0.915094\n0.830846 0.923915\n0.835821 0.931623\n0.840796 0.938433\n0.845771 0.944500\n0.850746 0.949942\n0.855721 0.954848\n0.860697 0.959289\n0.865672 0.963323\n0.870647 0.966997\n0.875622 0.970350\n0.880597 0.973414\n0.885572 0.976218\n0.890547 0.978785\n0.895522 0.981134\n0.900498 0.983285\n0.905473 0.985253\n0.910448 0.987052\n0.915423 0.988693\n0.920398 0.990189\n0.925373 0.991548\n0.930348 0.992779\n0.935323 0.993890\n0.940299 0.994889\n0.945274 0.995782\n0.950249 0.996574\n0.955224 0.997272\n0.960199 0.997880\n0.965174 0.998403\n0.970149 0.998846\n0.975124 0.999211\n0.980100 0.999503\n0.985075 0.999724\n1.000000 1.000000\n1.200000 1.000000\n```\n\n----------------------------------------\n\nTITLE: Anchored Context-Dependent Path in USDZ\nDESCRIPTION: Shows an example of an anchored context-dependent path referencing another file within the same USDZ package.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/spec_usdz.rst#2025-04-23_snippet_2\n\nLANGUAGE: usda\nCODE:\n```\n@./model.geom.usd@\n```\n\n----------------------------------------\n\nTITLE: Setting Up Installation of Hydra SortedIds Test Directory\nDESCRIPTION: Configures the installation of test directory for Hydra's SortedIds system. This ensures test files are properly installed to the test destination.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/CMakeLists.txt#2025-04-23_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testHdSortedIds\n    DEST testHdSortedIds\n)\n```\n\n----------------------------------------\n\nTITLE: Including usdInitSchema Help Text via reStructuredText Directive\nDESCRIPTION: This reStructuredText directive (`literalinclude`) is used within Sphinx documentation to embed a specific section of the `toolset.help` file. It extracts the content related to `usdInitSchema` between the specified start and end markers and displays it as plain text (`language: none`), typically showing command-line tool usage or help output. This is relevant for understanding how to generate `moduleDeps.cpp`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toolset.rst#2025-04-23_snippet_19\n\nLANGUAGE: rst\nCODE:\n```\n.. literalinclude:: toolset.help\n   :language: none\n   :start-after: ==== usdInitSchema start ====\n   :end-before: ==== usdInitSchema end ====\n```\n\n----------------------------------------\n\nTITLE: Tracking Memory Usage in OpenUSD Through Various States\nDESCRIPTION: A memory allocation report showing how different memory metrics in OpenUSD change through various operations including initialization, allocation, deletion, garbage collection, and specific point count changes. The tracking includes various buffer types, texture memory, topology instances, and garbage collection counts.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStBufferArray/baseline/testHdStBufferArray-Run1-stdout.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n----- begin -----\nnonUniformSize, 0\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 0\nsingleBufferSize, 0\ntextureMemory, 0\ngarbageCollected = 0\ninstMeshTopology = 0\ninstBasisCurvesTopology = 0\ninstVertexAdjacency = 0\ninstMeshTopologyRange = 0\ninstBasisCurvesTopologyRange = 0\n----- allocated -----\ndrawIndirect, 480\ndrawIndirectCull, 480\nnonUniformSize, 55136\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 16592\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 41168\ngarbageCollected = 0\ninstMeshTopology = 4\ninstBasisCurvesTopology = 1\ninstVertexAdjacency = 4\ninstMeshTopologyRange = 4\ninstBasisCurvesTopologyRange = 1\n----- delete a prim -----\ndrawIndirect, 480\ndrawIndirectCull, 480\nnonUniformSize, 55136\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 16592\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 41168\ngarbageCollected = 0\ninstMeshTopology = 4\ninstBasisCurvesTopology = 1\ninstVertexAdjacency = 4\ninstMeshTopologyRange = 4\ninstBasisCurvesTopologyRange = 1\n----- garbage collected -----\ndrawIndirect, 900\ndrawIndirectCull, 900\nnonUniformSize, 55136\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 16272\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 41168\ngarbageCollected = 1\ninstMeshTopology = 4\ninstBasisCurvesTopology = 1\ninstVertexAdjacency = 4\ninstMeshTopologyRange = 4\ninstBasisCurvesTopologyRange = 1\n----- delete more prims -----\ndrawIndirect, 660\ndrawIndirectCull, 660\nnonUniformSize, 54352\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 14992\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 40672\ngarbageCollected = 2\ninstMeshTopology = 3\ninstBasisCurvesTopology = 1\ninstVertexAdjacency = 3\ninstMeshTopologyRange = 3\ninstBasisCurvesTopologyRange = 1\n----- clear all -----\ndrawIndirect, 240\ndrawIndirectCull, 240\nnonUniformSize, 0\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nsingleBufferSize, 0\ntextureMemory, 786432\ngarbageCollected = 3\ninstMeshTopology = 0\ninstBasisCurvesTopology = 0\ninstVertexAdjacency = 0\ninstMeshTopologyRange = 0\ninstBasisCurvesTopologyRange = 0\n----- 3 points -----\ndrawIndirect, 240\ndrawIndirectCull, 240\nnonUniformSize, 36\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 36\nsingleBufferSize, 0\ntextureMemory, 786432\ngarbageCollected = 0\ninstMeshTopology = 0\ninstBasisCurvesTopology = 0\ninstVertexAdjacency = 0\ninstMeshTopologyRange = 0\ninstBasisCurvesTopologyRange = 0\n----- 5 points -----\ndrawIndirect, 240\ndrawIndirectCull, 240\nnonUniformSize, 60\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 60\nsingleBufferSize, 0\ntextureMemory, 786432\ngarbageCollected = 0\ninstMeshTopology = 0\ninstBasisCurvesTopology = 0\ninstVertexAdjacency = 0\ninstMeshTopologyRange = 0\ninstBasisCurvesTopologyRange = 0\n----- 4 points before GC -----\ndrawIndirect, 240\ndrawIndirectCull, 240\nnonUniformSize, 48\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 48\nsingleBufferSize, 0\ntextureMemory, 786432\ngarbageCollected = 0\ninstMeshTopology = 0\ninstBasisCurvesTopology = 0\ninstVertexAdjacency = 0\ninstMeshTopologyRange = 0\ninstBasisCurvesTopologyRange = 0\n----- 4 points after GC -----\ndrawIndirect, 240\ndrawIndirectCull, 240\nnonUniformSize, 48\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 48\nsingleBufferSize, 0\ntextureMemory, 786432\ngarbageCollected = 1\ninstMeshTopology = 0\ninstBasisCurvesTopology = 0\ninstVertexAdjacency = 0\ninstMeshTopologyRange = 0\ninstBasisCurvesTopologyRange = 0\n----- 0 points after GC -----\ndrawIndirect, 240\ndrawIndirectCull, 240\nnonUniformSize, 0\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 0\nsingleBufferSize, 0\ntextureMemory, 786432\ngarbageCollected = 1\ninstMeshTopology = 0\ninstBasisCurvesTopology = 0\ninstVertexAdjacency = 0\ninstMeshTopologyRange = 0\ninstBasisCurvesTopologyRange = 0\nOK\n```\n\n----------------------------------------\n\nTITLE: Listing USD File References\nDESCRIPTION: This snippet shows references to two USD file types: a USDA file (ASCII representation of USD) and a USDZ file (zipped USD package). These files are likely used in a 3D scene or animation project using OpenUSD.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUtils/testenv/testUsdUtilsCreateNewUsdzPackage/baseline/contents_nested_2.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncombined2.usda\n0/combined.usdz\n```\n\n----------------------------------------\n\nTITLE: Removing Filesystem-Specific Functions - C++\nDESCRIPTION: Functions being removed that were specific to filesystem-based asset handling.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_ar2.rst#2025-04-23_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nArResolver::FetchToLocalResolvedPath\nSdfFileFormat::LayersAreFileBased\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for /Pigeon/Anim/Legs/LToes Prim\nDESCRIPTION: This snippet shows the composition results for the /Pigeon/Anim/Legs/LToes prim, including its prim stack and child names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpRegressionBugs_bug69932.testenv/baseline/compositionResults_bug69932.txt#2025-04-23_snippet_6\n\nLANGUAGE: USD\nCODE:\n```\nPrim Stack:\n    Pigeon_rig.sdf       /Pigeon/Anim/Legs/LToes\n    Pigeon_rig.sdf       /_class_CharRig/Anim/Legs/LToes\n    LegsRig.sdf          /LegsRig/LLegRig/Toes\n    LegsRig.sdf          /LegsRig/_Class_LegRig/Toes\n\nChild names:\n     ['Thumb']\n```\n\n----------------------------------------\n\nTITLE: Numerical Evaluation of Spline at Time Points\nDESCRIPTION: A tabular representation of the spline curve evaluation at various time points. Each row contains a time value and the corresponding evaluated value of the spline at that time, showing the curve's behavior from time 0.2 to 5.8.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/tsTest_TsFramework.testenv/baseline/test_BaselineParamsFail_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n0.200000 1.000000\n1.000000 1.000000\n1.019900 1.018739\n1.039801 1.035628\n1.059701 1.051152\n1.079602 1.065611\n1.099502 1.079213\n1.119403 1.092102\n1.139303 1.104387\n1.159204 1.116153\n1.179104 1.127465\n1.199005 1.138376\n1.218905 1.148929\n1.238806 1.159161\n1.258706 1.169101\n1.278607 1.178775\n1.298507 1.188206\n1.318408 1.197412\n1.338308 1.206411\n1.358209 1.215216\n1.378109 1.223843\n1.398010 1.232301\n1.417910 1.240601\n1.437811 1.248753\n1.457711 1.256764\n1.477612 1.264644\n1.497512 1.272398\n1.517413 1.280034\n1.537313 1.287556\n1.557214 1.294970\n1.577114 1.302282\n1.597015 1.309495\n1.616915 1.316614\n1.636816 1.323644\n1.656716 1.330586\n1.676617 1.337446\n1.696517 1.344225\n1.716418 1.350928\n1.736318 1.357556\n1.756219 1.364113\n1.776119 1.370600\n1.796020 1.377021\n1.815920 1.383377\n1.835821 1.389670\n1.855721 1.395903\n1.875622 1.402076\n1.895522 1.408193\n1.915423 1.414254\n1.935323 1.420261\n1.955224 1.426216\n1.975124 1.432120\n1.995025 1.437973\n2.014925 1.443779\n2.034826 1.449537\n2.054726 1.455249\n2.074627 1.460917\n2.094527 1.466540\n2.114428 1.472121\n2.134328 1.477659\n2.154229 1.483157\n2.174129 1.488615\n2.194030 1.494033\n2.213930 1.499413\n2.233831 1.504755\n2.253731 1.510061\n2.273632 1.515330\n2.293532 1.520564\n2.313433 1.525764\n2.333333 1.530929\n2.353234 1.536060\n2.373134 1.541159\n2.393035 1.546226\n2.412935 1.551260\n2.432836 1.556264\n2.452736 1.561236\n2.472637 1.566179\n2.492537 1.571092\n2.512438 1.575975\n2.532338 1.580830\n2.552239 1.585656\n2.572139 1.590454\n2.592040 1.595225\n2.611940 1.599969\n2.631841 1.604686\n2.651741 1.609376\n2.671642 1.614040\n2.691542 1.618679\n2.711443 1.623292\n2.731343 1.627880\n2.751244 1.632443\n2.771144 1.636982\n2.791045 1.641496\n2.810945 1.645987\n2.830846 1.650453\n2.850746 1.654897\n2.870647 1.659317\n2.890547 1.663714\n2.910448 1.668089\n2.930348 1.672441\n2.950249 1.676771\n2.970149 1.681079\n2.990050 1.685365\n3.009950 1.689630\n3.029851 1.693872\n3.049751 1.698094\n3.069652 1.702295\n3.089552 1.706474\n3.109453 1.710633\n3.129353 1.714771\n3.149254 1.718889\n3.169154 1.722986\n3.189055 1.727064\n3.208955 1.731121\n3.228856 1.735158\n3.248756 1.739175\n3.268657 1.743173\n3.288557 1.747151\n3.308458 1.751109\n3.328358 1.755048\n3.348259 1.758967\n3.368159 1.762868\n3.388060 1.766749\n3.407960 1.770611\n3.427861 1.774454\n3.447761 1.778278\n3.467662 1.782083\n3.487562 1.785869\n3.507463 1.789636\n3.527363 1.793385\n3.547264 1.797114\n3.567164 1.800825\n3.587065 1.804517\n3.606965 1.808191\n3.626866 1.811845\n3.646766 1.815481\n3.666667 1.819098\n3.686567 1.822696\n3.706468 1.826276\n3.726368 1.829837\n3.746269 1.833378\n3.766169 1.836901\n3.786070 1.840405\n3.805970 1.843890\n3.825871 1.847356\n3.845771 1.850803\n3.865672 1.854230\n3.885572 1.857638\n3.905473 1.861026\n3.925373 1.864395\n3.945274 1.867745\n3.965174 1.871074\n3.985075 1.874383\n4.004975 1.877673\n4.024876 1.880942\n4.044776 1.884190\n4.064677 1.887418\n4.084577 1.890624\n4.104478 1.893810\n4.124378 1.896974\n4.144279 1.900116\n4.164179 1.903236\n4.184080 1.906335\n4.203980 1.909410\n4.223881 1.912462\n4.243781 1.915491\n4.263682 1.918496\n4.283582 1.921477\n4.303483 1.924433\n4.323383 1.927364\n4.343284 1.930269\n4.363184 1.933148\n4.383085 1.936000\n4.402985 1.938824\n4.422886 1.941619\n4.442786 1.944385\n4.462687 1.947121\n4.482587 1.949826\n4.502488 1.952499\n4.522388 1.955138\n4.542289 1.957743\n4.562189 1.960312\n4.582090 1.962843\n4.601990 1.965336\n4.621891 1.967787\n4.641791 1.970195\n4.661692 1.972558\n4.681592 1.974873\n4.701493 1.977137\n4.721393 1.979347\n4.741294 1.981498\n4.761194 1.983588\n4.781095 1.985609\n4.800995 1.987557\n4.820896 1.989425\n4.840796 1.991203\n4.860697 1.992881\n4.880597 1.994447\n4.900498 1.995883\n4.920398 1.997168\n4.940299 1.998274\n5.000000 2.000000\n5.800000 2.000000\n```\n\n----------------------------------------\n\nTITLE: Reporting Prohibited USD Reference to Deleted Prim\nDESCRIPTION: This log output shows a composition error for the prim `/Bad_SubrootRefToDeleted` defined in `root.sdf`. The error indicates that this prim attempts to reference `/Char/ToBeDeleted` (also in `root.sdf`), which is prohibited because the target prim is either marked as deleted or is the source of a relocation, preventing opinions or references from its original location.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_RelocateToNone.testenv/baseline/compositionErrors_RelocateToNone.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nErrors while composing </Bad_SubrootRefToDeleted>\n\n@RelocateToNone/root.sdf@</Bad_SubrootRefToDeleted>\nCANNOT reference:\n@RelocateToNone/root.sdf@</Char/ToBeDeleted>\nwhich is a prohibited child of its parent because it would require allowing opinions from the source of a relocation at @RelocateToNone/root.sdf@</Char/ToBeDeleted>.\n```\n\n----------------------------------------\n\nTITLE: Defining FileExtensionValidator for UsdUtils\nDESCRIPTION: Documentation for a validator that ensures only valid core layer extensions, texture extensions, and embedded audio files are allowed in a package for compatibility.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n[usdUtilsValidators:FileExtensionValidator]:\n\tDoc: Only valid core layer extensions (.usd, .usda, .usdc, .usdz), valid core texture extensions (.exr, .jpg, .jpeg, .png) and embedded audio files (.M4A, .MP3, .WAV) are allowed in a package.\n\tKeywords: UsdUtilsValidators, UsdzValidators\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimWithReferencesInVariants/Ref\nDESCRIPTION: Displays the composition results for the child prim path </PrimWithReferencesInVariants/Ref>. The prim stack shows its origin within the '{v=ref}' variant definition in root.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimWithReferencesInVariants/Ref>\n\nPrim Stack:\n    root.sdf             /PrimWithReferencesInVariants{v=ref}Ref\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Tree Binary Build in CMake\nDESCRIPTION: Specifies the libraries required to build the usdtree binary using the pxr_cpp_bin command.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdtree/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_cpp_bin(usdtree\n        LIBRARIES\n        ar\n        sdf\n        tf\n        usd\n        usdUtils\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building usdSkelValidators Library in CMake\nDESCRIPTION: Sets up the usdSkelValidators library with its dependencies, public classes, headers, and implementation files. The library depends on several other USD components including tf, plug, sdf, usd, usdSkel, and usdValidation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/usdSkelValidators/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usdValidation)\nset(PXR_PACKAGE usdSkelValidators)\n\npxr_library(usdSkelValidators\n    LIBRARIES\n        tf\n        plug\n        sdf\n        usd\n        usdSkel\n        usdValidation\n\n    PUBLIC_CLASSES\n        validatorTokens\n        \n    PUBLIC_HEADERS\n        api.h\n\n    CPPFILES\n        validators.cpp\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Injecting JavaScript for Anchor Transformation in USD Documentation\nDESCRIPTION: This JavaScript code transforms anchors in the old documentation site to make them compatible with the new Sphinx-generated HTML. It lowers the case of anchors and replaces slashes with hyphens.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$(function() {\n    if (window.location.hash) {\n        new_anchor = window.location.hash.toLowerCase().replace('/', '-')\n        if ($(new_anchor).length) {\n            window.location.hash = new_anchor;\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering CMake Test for Pcp ErrorInvalidPayload\nDESCRIPTION: Defines a CMake test named `testPcpMuseum_ErrorInvalidPayload` using `pxr_register_test`. It runs `testPcpCompositionResults` with the `--usd` flag and an `--errorFile` argument on the `ErrorInvalidPayload/root.sdf` file. This test checks for errors arising from invalid payloads during composition. Standard output and the error file are compared against baseline files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testPcpMuseum_ErrorInvalidPayload\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd --errorFile compositionErrors_ErrorInvalidPayload.txt ErrorInvalidPayload/root.sdf\" \n    STDOUT_REDIRECT compositionResults_ErrorInvalidPayload.txt\n    DIFF_COMPARE compositionResults_ErrorInvalidPayload.txt compositionErrors_ErrorInvalidPayload.txt\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring PEGTL Library Build in CMake\nDESCRIPTION: Sets up the PEGTL library configuration with prefix paths, public headers, and build workarounds for header-only library support. Links against the arch library and includes a comprehensive list of header files for parsing and grammar functionality.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/pegtl/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/base)\nset(PXR_PACKAGE pegtl)\n\npxr_library(pegtl\n    # Workaround lack of build support for header-only libs.\n    LIBRARIES\n       arch\n    \n    PUBLIC_HEADERS\n        pegtl.hpp\n        pegtl/apply_mode.hpp\n        pegtl/argv_input.hpp\n        [...]\n        pegtl/version.hpp\n        pegtl/visit.hpp\n\n    CPPFILES\n        # Workaround lack of build support for header-only libs.\n        build-workaround.cpp\n\n    DISABLE_PRECOMPILED_HEADERS\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Test Data Directory 'testUsdZipInputFiles' in CMake\nDESCRIPTION: Uses the `pxr_install_test_dir` custom CMake function to install the contents of the source directory `testenv/testUsdZipInputFiles` into the destination directory `testUsdZipInputFiles` within the build/install test environment.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdzip/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdZipInputFiles\n    DEST testUsdZipInputFiles\n)\n```\n\n----------------------------------------\n\nTITLE: Python Spline Test Data Configuration\nDESCRIPTION: Python representation of spline test data including knot configurations with precise hexadecimal float values for time, slopes, and lengths.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/MoveStartKeepRatio_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.999999999999ap-2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.333269df97aabp-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.333269df97aabp-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Configuring Spline Regression Segment Parameters - C++/Config\nDESCRIPTION: Represents a configuration block for the TsRegressionPreventer::SetResult function, specifying various boolean flags and floating-point properties for pre- and post-segments of a curve. Dependencies include knowledge of the TsRegressionPreventer interface as well as possibly a C++ or configuration parser. Inputs include boolean configuration fields and segment widths, while the output is the encoded state configuration. Intended as a data section to drive or document curve regression logic.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveMayaTansNone_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: false\n  havePreSegment: false\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.000000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.000000\n  havePostSegment: true\n  postActiveAdjusted: false\n  postActiveAdjustedWidth: 1.300000\n  postOppositeAdjusted: false\n  postOppositeAdjustedWidth: 0.800000\n```\n\n----------------------------------------\n\nTITLE: Registering HdSt Quadrangulation Tests in CMake\nDESCRIPTION: A set of CMake test registrations for testing quadrangulation in HdStBasicDrawing with various representation modes and culling styles. These tests enable force quadrangulation through an environment variable and validate the rendering output.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_Quadrangulate_hull\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr hull --write testHdStBasicDrawing_quad_hull.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_quad_hull.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing_Quadrangulate\n    ENV\n        HD_ENABLE_FORCE_QUADRANGULATE=1\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\n----------------------------------------\n\nTITLE: Registering OpenGL Codegen Tests with X11 Support\nDESCRIPTION: Registers codegen tests for OpenGL when X11 is available. Sets specific OpenGL configuration options including enabling bindless buffers and textures, and setting GLSL version.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\n# OpenGL codegen tests require X11 to create a context\nif(PXR_ENABLE_GL_SUPPORT AND X11_FOUND)\n    register_codegen_tests(_GL \"HGI_ENABLE_VULKAN=0;HGIGL_ENABLE_BINDLESS_BUFFER=1;HGIGL_ENABLE_BINDLESS_TEXTURE=1;HGIGL_GLSL_VERSION=450\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering Sdr Registry Test in CMake\nDESCRIPTION: This snippet registers the Sdr Registry test using the pxr_register_test CMake function. It specifies the test command and environment variables to skip certain plugin discoveries.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/sdr/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testSdrRegistry\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdrRegistry\"\n    ENV\n        PXR_NDR_SKIP_DISCOVERY_PLUGIN_DISCOVERY=1\n        PXR_NDR_SKIP_PARSER_PLUGIN_DISCOVERY=1\n)\n```\n\n----------------------------------------\n\nTITLE: Installing USD Skeleton Test Directories\nDESCRIPTION: Configures installation of test directories for specific USD Skeleton test components including bake skinning, cache, root, and skinning query tests.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdSkel/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdSkelBakeSkinning\n    DEST testUsdSkelBakeSkinning\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdSkelCache\n    DEST testUsdSkelCache\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdSkelRoot\n    DEST testUsdSkelRoot\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdSkelSkinningQuery\n    DEST testUsdSkelSkinningQuery\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Test Directories for JS Library in CMake\nDESCRIPTION: This snippet installs test directories for various components of the 'js' library, including IO, converter, and writer tests. It ensures that the necessary test environments are set up correctly.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/js/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testJsIO\n    DEST testJsIO\n)\npxr_install_test_dir(\n    SRC testenv/testJsIO_Errors\n    DEST testJsIO_Errors\n)\npxr_install_test_dir(\n    SRC testenv/testJsConverter\n    DEST testJsConverter\n)\npxr_install_test_dir(\n    SRC testenv/testJsWriter\n    DEST testJsWriter\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation Spline Parameters in Python\nDESCRIPTION: This snippet defines the configuration for an animation spline, including interpolation type, extrapolation methods, and knot points with their respective properties.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/NoopLimitOpposite_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  0.000000: 0.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.000000, postLen 0.800000, auto false / false\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.800000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </Char> in USD Scene\nDESCRIPTION: Displays the composition results for the prim </Char>. It shows the prim stack derived from 'root.sdf' and 'model.sdf', the names of its direct children (including 'Relocated'), prohibited children ('ToBeDeleted', 'ToBeRelocated' due to relocation), properties, and the final resolved targets for its relationships, demonstrating how relocations affect target paths.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_RelocateToNone.testenv/baseline/compositionResults_RelocateToNone_usd.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd-composition-output\nCODE:\n```\nResults for composing </Char>\n\nPrim Stack:\n    root.sdf             /Char\n    model.sdf            /Model\n\nChild names:\n     ['Relocated']\n\nProhibited child names:\n     ['ToBeDeleted', 'ToBeRelocated']\n\nProperty names:\n     ['relationship1', 'relationship2', 'relationship3']\n\nProperty stacks:\n/Char.relationship1:\n    model.sdf            /Model.relationship1\n/Char.relationship2:\n    model.sdf            /Model.relationship2\n/Char.relationship3:\n    model.sdf            /Model.relationship3\n\nRelationship targets:\n/Char.relationship1:\n    /Char/ToBeDeleted/Child\n/Char.relationship2:\n    /Char/Relocated/Child\n/Char.relationship3:\n    /Char/Relocated/ToBeDeletedChild\n```\n\n----------------------------------------\n\nTITLE: Vertex Results for Empty Topology (GPU Subdivision Enabled)\nDESCRIPTION: This snippet shows the vertex coordinate results for a subdivision test on an empty topology using the Catmull-Clark scheme with GPU subdivision enabled (GPU subdivision = 1). Consistent with the empty topology, the vertex list is empty.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStSubdivisionOsd3/baseline/testHdStSubdivisionOsd3-Run1-stdout.txt#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Setting Build Variables for usdSkelImaging in CMake\nDESCRIPTION: These CMake commands set two variables used within the OpenUSD build system. `PXR_PREFIX` likely defines a path prefix or namespace, set here to `pxr/usdImaging`. `PXR_PACKAGE` defines the specific package name, set to `usdSkelImaging`. These variables are typically used later in the build process, potentially by the `pxr_library` function or other build system logic.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdSkelImaging/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usdImaging)\nset(PXR_PACKAGE usdSkelImaging)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /SublayerPrim\nDESCRIPTION: Displays the composition results for the prim </SublayerPrim>. The prim stack shows that this prim is solely defined within the sublayer.sdf file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </SublayerPrim>\n\nPrim Stack:\n    sublayer.sdf         /SublayerPrim\n```\n\n----------------------------------------\n\nTITLE: Defining Regressive Post-Curve Bezier Spline\nDESCRIPTION: Defines a regressive post-curve Bezier spline with two knots. The spline uses held extrapolation and has a post-tangent width of 2 at the first knot.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\nSpline: RegressivePostC\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 2\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Generated USD File with Time Range Settings\nDESCRIPTION: Shows the output USDA file structure with metadata for time range and up axis. This establishes the animation duration and coordinate system for the scene.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_xforms.rst#2025-04-23_snippet_1\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    \"Step 1: Start and end time codes\"\n    endTimeCode = 192\n    startTimeCode = 1\n    upAxis = \"Z\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Link Button in RST\nDESCRIPTION: RST directive to create a link button that points to the USD C++ API documentation index page.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/apiDocs.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. link-button:: api/index.html\n   :type: url\n   :text: USD C++ API Documentation\n```\n\n----------------------------------------\n\nTITLE: Defining Filename Role in Sphinx RST\nDESCRIPTION: Creates a custom role 'filename' for formatting filenames in Sphinx documentation. Uses monospace font. Used with the syntax :filename:`path/to/file`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/rolesAndUtils.rst#2025-04-23_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. role:: filename\n   :class: mono\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra DirtyList Test Build in CMake\nDESCRIPTION: Defines the build configuration for testing Hydra's dirty list functionality. This test validates the system for tracking elements that need updating in the rendering pipeline.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testHdDirtyList\n   LIBRARIES\n       hd\n       tf\n\n   CPPFILES\n       testenv/testHdDirtyList.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Registering CMake Test for Pcp ErrorOwner\nDESCRIPTION: Defines a CMake test named `testPcpMuseum_ErrorOwner` using `pxr_register_test`. It runs `testPcpCompositionResults` with `--usd`, `--errorFile`, and an additional `--session` flag pointing to `ErrorOwner/session.sdf`, along with the main input `ErrorOwner/root.sdf`. This test checks for ownership-related errors, potentially involving session layers. Standard output and the error file are compared against baseline files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/CMakeLists.txt#2025-04-23_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testPcpMuseum_ErrorOwner\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd --errorFile compositionErrors_ErrorOwner.txt --session ErrorOwner/session.sdf ErrorOwner/root.sdf\" \n    STDOUT_REDIRECT compositionResults_ErrorOwner.txt\n    DIFF_COMPARE compositionResults_ErrorOwner.txt compositionErrors_ErrorOwner.txt\n)\n```\n\n----------------------------------------\n\nTITLE: USD Prim Hierarchy Results\nDESCRIPTION: Displays the complete composition results showing prim stacks, child names, property stacks and inheritance relationships throughout the scene hierarchy\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpRegressionBugs_bug92827.testenv/baseline/compositionResults_bug92827.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </Rig>\n\nPrim Stack:\n    root.sdf             /Rig\n\nChild names:\n     ['B', 'Class', 'Other']\n\n------------------------------------------------------------------------\nResults for composing </Rig/B>\n\nPrim Stack:\n\n------------------------------------------------------------------------\nResults for composing </Rig/Class>\n\nPrim Stack:\n    root.sdf             /Rig/Class\n\nChild names:\n     ['A', 'B']\n```\n\n----------------------------------------\n\nTITLE: Listing Event Ranges in Plaintext\nDESCRIPTION: This snippet shows the format used to list event ranges. Each event is represented by a 'Begin' and 'End' value, with the text 'Found event' preceding each range.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/trace/testenv/testTraceEventContainer.testenv/baseline/testTraceEventContainer-Run1-stdout.txt#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n            Begin: 101\n            End: 102\n        Found event\n            Begin: 100\n            End: 101\n        Found event\n            Begin: 99\n            End: 100\n```\n\n----------------------------------------\n\nTITLE: Configuring X11-Dependent HdSt Test Programs\nDESCRIPTION: Defines test programs for the HdSt library that require X11. These include tests for buffer management, code generation, draw item caching, and various renderer-specific features.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (X11_FOUND)\npxr_build_test(testHdStBarAllocationLimit\n    LIBRARIES\n        hdSt\n        hd\n        gf\n        tf\n    CPPFILES\n        testenv/testHdStBarAllocationLimit.cpp\n)\npxr_build_test(testHdStBufferAggregation\n    LIBRARIES\n        hdSt\n        hd\n        hgi\n        garch\n        glf\n        vt\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStBufferAggregation.cpp\n)\npxr_build_test(testHdStBufferArray\n    LIBRARIES\n        hdSt\n        hd\n        glf\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStBufferArray.cpp\n)\npxr_build_test(testHdStBufferSource\n    LIBRARIES\n        hd\n        vt\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStBufferSource.cpp\n)\npxr_build_test(testHdStBufferSourceDependency\n    LIBRARIES\n        hdSt\n        hd\n        glf\n        tf\n    CPPFILES\n        testenv/testHdStBufferSourceDependency.cpp\n)\npxr_build_test(testHdStCodeGen\n    LIBRARIES\n        hdSt\n        hd\n        hio\n        glf\n        tf\n    CPPFILES\n        testenv/testHdStCodeGen.cpp\n)\npxr_build_test(testHdStCurveDrawing\n    LIBRARIES\n        hdSt\n        hd\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStCurveDrawing.cpp\n)\npxr_build_test(testHdStCurvePrimvarInterpolation\n    LIBRARIES\n        hdSt\n        hd\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStCurvePrimvarInterpolation.cpp\n)\npxr_build_test(testHdStCurvesPrimvars\n    LIBRARIES\n        hdSt\n        hd\n        glf\n        sdf\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStCurvesPrimvars.cpp\n)\npxr_build_test(testHdStDisplayStyle\n    LIBRARIES\n        hdSt\n        hd\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStDisplayStyle.cpp\n)\npxr_build_test(testHdStDrawBatching\n    LIBRARIES\n        hdSt\n        hd\n        hio\n        glf\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStDrawBatching.cpp\n)\npxr_build_test(testHdStDrawItemIntegrity\n    LIBRARIES\n        hdSt\n        hd\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStDrawItemIntegrity.cpp\n)\npxr_build_test(testHdStDrawItemsCache\n    LIBRARIES\n        hdSt\n        hd\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStDrawItemsCache.cpp\n)\npxr_build_test(testHdStDynamicUvTexture\n    LIBRARIES\n        hdSt\n        tf\n    CPPFILES\n        testenv/testHdStDynamicUvTexture.cpp\n)\npxr_build_test(testHdStFaceCulling\n    LIBRARIES\n        hdSt\n        hd\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStFaceCulling.cpp\n)\npxr_build_test(testHdStFrustumCulling\n    LIBRARIES\n        hdSt\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStFrustumCulling.cpp\n)\npxr_build_test(testHdStGL\n    LIBRARIES\n        garch\n        glf\n        tf\n    CPPFILES\n        testenv/testHdStGL.cpp\n)\npxr_build_test(testHdStGLSL\n    LIBRARIES\n        hio\n        glf\n        garch\n        tf\n    CPPFILES\n        testenv/testHdStGLSL.cpp\n)\npxr_build_test(testHdStHWFaceCulling\n    LIBRARIES\n        hdSt\n        hd\n        glf\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStHWFaceCulling.cpp\n)\npxr_build_test(testHdStIndirectDrawBatchCodeGen\n    LIBRARIES\n        hdSt\n        hd\n        hio\n        glf\n        tf\n    CPPFILES\n        testenv/testHdStIndirectDrawBatchCodeGen.cpp\n)\npxr_build_test(testHdStIndirectDrawBatchCulling\n    LIBRARIES\n        hdSt\n        glf\n        tf\n    CPPFILES\n        testenv/testHdStIndirectDrawBatchCulling.cpp\n)\npxr_build_test(testHdStInitRepr\n    LIBRARIES\n        hdSt\n        hd\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStInitRepr.cpp\n)\npxr_build_test(testHdStInstancing\n    LIBRARIES\n        hdSt\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStInstancing.cpp\n)\npxr_build_test(testHdStInstancingUnbalanced\n    LIBRARIES\n        hdSt\n        tf\n        gf\n    CPPFILES\n        testenv/testHdStInstancingUnbalanced.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining OpenUSD Scene Graph Hierarchy\nDESCRIPTION: This code snippet illustrates the structure of a scene graph in OpenUSD. It shows a root node with three child nodes, each with their own subchildren. The hierarchy is represented using indentation and symbols, with node types and properties indicated in square brackets.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdtree/testenv/testUsdTree/baseline/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\n/\n `--root [def]\n     |--child1 [def Xform]\n     |   |--subchild1a [def]\n     |   `--subchild1b [def]\n     |--child2 [def]\n     |   |--subchild2a [def]\n     |   |   `--subgrandchild2a1 [def]\n     |   `--subchild2b [def]\n     `--child3 [over] (active = true)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra BufferSpec Test Build in CMake\nDESCRIPTION: Defines the build configuration for testing Hydra's buffer specification functionality. This test validates the buffer spec system that defines data storage requirements for Hydra.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testHdBufferSpec\n   LIBRARIES\n       hd\n\n   CPPFILES\n       testenv/testHdBufferSpec.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Reference Addition in USD\nDESCRIPTION: Adding a reference to cone2.usda file\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddiff/testenv/testDiffToolIterateUsdz/baseline/iterate_usd_crate.txt#2025-04-23_snippet_1\n\nLANGUAGE: usda\nCODE:\n```\nadd references = @./cone2.usda@\n```\n\n----------------------------------------\n\nTITLE: Defining the usdfixbrokenpixarschemas Python Executable in CMake\nDESCRIPTION: Uses the `pxr_python_bin` CMake function to define an executable target named `usdfixbrokenpixarschemas`. This executable is implemented in Python and depends on the `sdf` and `usd` OpenUSD libraries, making their functionalities available to the script.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdfixbrokenpixarschemas/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_python_bin(usdfixbrokenpixarschemas\n    DEPENDENCIES\n        sdf\n        usd\n)\n```\n\n----------------------------------------\n\nTITLE: Regression Preventer Configuration\nDESCRIPTION: Configuration settings for the TsRegressionPreventer showing segment adjustments and width values for pre and post segments\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/InitiallyRegressiveKeepStart_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: true\n  havePreSegment: false\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.000000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.000000\n  havePostSegment: true\n  postActiveAdjusted: true\n  postActiveAdjustedWidth: 14.666557\n  postOppositeAdjusted: true\n  postOppositeAdjustedWidth: 3.666557\n```\n\n----------------------------------------\n\nTITLE: Bottom-Up Directory Walk Output\nDESCRIPTION: Output showing a bottom-up directory traversal pattern, starting from the deepest directories and moving up to the root.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/testenv/baseline/TfFileUtils/non-specific/TestTfWalkDirs-log.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n('a/b/c/d/e/f/g', [], ['fourteen', 'gator', 'thirteen'])\n('a/b/c/d/e/f/h', [], ['fifteen', 'hippo', 'sixteen'])\n('a/b/c/d/e/f/i', [], ['eighteen', 'igloo', 'seventeen'])\n('a/b/c/d/e/f', ['g', 'h', 'i'], ['eleven', 'fish', 'twelve'])\n('a/b/c/d/e', ['f'], ['Eskimo', 'Fortune', 'Garbage', 'elephant', 'nine', 'ten'])\n('a/b/c/d', ['e'], ['cycle_to_b', 'dog', 'eight', 'seven'])\n('a/b/c', ['d'], ['cat', 'five', 'six'])\n('a/b', ['c'], ['banana', 'four', 'three'])\n('a', ['b'], ['aardvark', 'one', 'two'])\n```\n\n----------------------------------------\n\nTITLE: Listing USD File Structure\nDESCRIPTION: This snippet shows the file structure of a USD project, including the root USDA file and tile files in different directories. It demonstrates the organization of assets in a USD pipeline.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUtils/testenv/testUsdUtilsCreateNewUsdzPackage/baseline/contents_udim.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nroot.usda\nrelative.tile.1001.txt\n0/subfolder.tile.1001.txt\n```\n\n----------------------------------------\n\nTITLE: Analyzing Composition for /_PrivateClass Prim (USD)\nDESCRIPTION: Presents the composition analysis for the '/_PrivateClass' prim. It identifies 'root.sdf' as the source layer in the prim stack and lists 'attr' as its only composed property, also originating from 'root.sdf'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorPermissionDenied.testenv/baseline/compositionResults_ErrorPermissionDenied.txt#2025-04-23_snippet_3\n\nLANGUAGE: usd\nCODE:\n```\nResults for composing </_PrivateClass>\n\nPrim Stack:\n    root.sdf             /_PrivateClass\n\nProperty names:\n     ['attr']\n\nProperty stacks:\n/_PrivateClass.attr:\n    root.sdf             /_PrivateClass.attr\n```\n\n----------------------------------------\n\nTITLE: Configuring usdBakeMtlx Library with MaterialX and OpenGL - CMake\nDESCRIPTION: Defines and configures the usdBakeMtlx library using CMake, specifying required dependencies such as MaterialX libraries and internal USD modules. Includes a conditional block to skip the build when OpenGL support is absent or when targeting Apple embedded platforms, to ensure necessary rendering capabilities. Outputs both a C++ library and a Python extension module, references public classes, headers, and disables precompiled headers for improved compatibility.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/usdBakeMtlx/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usdImaging)\nset(PXR_PACKAGE usdBakeMtlx)\n\n# MaterialX's MaterialXRenderGlsl library, which is used by usdBakeMtlx,\n# requires OpenGL.\nif (NOT ${PXR_ENABLE_GL_SUPPORT} OR PXR_APPLE_EMBEDDED)\n    message(STATUS\n        \"Skipping ${PXR_PACKAGE} because PXR_ENABLE_GL_SUPPORT is OFF or PXR_APPLE_EMBEDDED is ON\")\n    return()\nendif()\n\npxr_library(usdBakeMtlx\n    LIBRARIES\n        tf\n        sdr\n        usdMtlx\n        usdShade\n        hd\n        hdMtlx\n        usdImaging\n        MaterialXCore\n        MaterialXFormat\n        MaterialXRenderGlsl\n\n    PUBLIC_CLASSES\n        bakeMaterialX\n\n    PUBLIC_HEADERS\n        api.h\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapBakeMaterialX.cpp\n\n    PYMODULE_FILES\n        __init__.py\n\n    DISABLE_PRECOMPILED_HEADERS\n)\n\npxr_python_bin(usdBakeMaterialX\n    DEPENDENCIES\n        usdBakeMtlx\n)\n\n```\n\n----------------------------------------\n\nTITLE: Registering CMake Test for Pcp ErrorInvalidInstanceTargetPath\nDESCRIPTION: Defines a CMake test named `testPcpMuseum_ErrorInvalidInstanceTargetPath` using `pxr_register_test`. It executes `testPcpCompositionResults` with the `--usd` flag and an `--errorFile` argument on the `ErrorInvalidInstanceTargetPath/root.sdf` file. This test case checks for errors related to invalid instance target paths during composition. Standard output and the error file are compared against expected results.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testPcpMuseum_ErrorInvalidInstanceTargetPath\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd --errorFile compositionErrors_ErrorInvalidInstanceTargetPath_usd.txt ErrorInvalidInstanceTargetPath/root.sdf\" \n    STDOUT_REDIRECT compositionResults_ErrorInvalidInstanceTargetPath_usd.txt\n    DIFF_COMPARE compositionResults_ErrorInvalidInstanceTargetPath_usd.txt compositionErrors_ErrorInvalidInstanceTargetPath_usd.txt\n)\n```\n\n----------------------------------------\n\nTITLE: Python Object Representation of Spline Data\nDESCRIPTION: A Python object representation of the same spline configuration using the Ts.TsTest_SplineData class. It defines knot points with precise floating-point values using the float.fromhex() method for numerical accuracy.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/tsTest_MayapyFramework.testenv/baseline/test_Baseline_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x1p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1p-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.4p+2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1p-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Building HDSI Test Targets in OpenUSD\nDESCRIPTION: Configures the build process for test executables related to various HDSI scene index implementations. Each test is set up with required library dependencies and source files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdsi/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testHdsiComputeSceneIndexDiff\n   LIBRARIES\n       hd\n       hdsi\n       tf\n\n   CPPFILES\n       testenv/testHdsiComputeSceneIndexDiff.cpp\n)\npxr_build_test(testHdsiPinnedCurveExpandingSceneIndex\n   LIBRARIES\n       hd\n       hdsi\n       tf\n\n   CPPFILES\n       testenv/testHdsiPinnedCurveExpandingSceneIndex.cpp\n)\npxr_build_test(testHdsiSwitchingSceneIndex\n   LIBRARIES\n       hd\n       hdsi\n       tf\n\n   CPPFILES\n       testenv/testHdsiSwitchingSceneIndex.cpp\n)\npxr_build_test(testHdsiPrefixPathPruningSceneIndex\n   LIBRARIES\n       hd\n       hdsi\n       tf\n\n   CPPFILES\n       testenv/testHdsiPrefixPathPruningSceneIndex.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Invalid File Handling Tests\nDESCRIPTION: Multiple test configurations for verifying usdcat's error handling with missing or invalid input files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdcat/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testMissingOrInvalidFiles\n    DEST testUsdCatMissingOrInvalidFiles1\n)\n\npxr_register_test(testUsdCatMissingOrInvalidFiles1\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdcat hello.txt\"\n    EXPECTED_RETURN_CODE 1 \n)\n\npxr_install_test_dir(\n    SRC testenv/testMissingOrInvalidFiles\n    DEST testUsdCatMissingOrInvalidFiles2\n)\n\npxr_register_test(testUsdCatMissingOrInvalidFiles2\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdcat foo.usda\"\n    EXPECTED_RETURN_CODE 1 \n)\n\npxr_register_test(testUsdCatMissingOrInvalidFiles3\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdcat --flattenLayerStack missingFile.usda\"\n    EXPECTED_RETURN_CODE 1\n)\n```\n\n----------------------------------------\n\nTITLE: Representing Spline Data as TsTest_SplineData Object in Python\nDESCRIPTION: Python representation of the same spline using Ts.TsTest_SplineData class. This representation includes all the same parameters as the text format but with explicit Python object construction and floating-point hexadecimal values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/tsTest_TsFramework.testenv/baseline/test_BaselineFail_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x1p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1p-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.4p+2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1p-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Defining Python Binary 'usddumpcrate' Linking USD Libraries via CMake\nDESCRIPTION: Defines a Python binary target named 'usddumpcrate' using the custom `pxr_python_bin` CMake function. It specifies dependencies on the `sdf` (Scene Description Foundation) and `usd` (Universal Scene Description) libraries, ensuring they are linked and available to the Python executable. Requires the `pxr_python_bin` function and the specified library targets.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddumpcrate/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_python_bin(usddumpcrate\n    LIBRARIES\n      sdf\n      usd\n)\n```\n\n----------------------------------------\n\nTITLE: Spline Definition with Knots (Text)\nDESCRIPTION: Describes a spline's properties, including whether it's hermite, its pre/post extrapolation methods (Held), and its knot data. Each knot specifies time, value, interpolation type, slopes, tangent lengths, and auto-tangent settings.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveMayaTansKeepStart_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  0.000000: 0.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.000000, postLen 1.300000, auto false / false\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.530268, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Tabulating Spline Interpolation Output - Data\nDESCRIPTION: Presents a dense tabulation of (x, y) values sampled from a spline, facilitating accuracy visualization or statistical analysis. Inputs are implied to be the spline as configured in prior snippets, outputs are the floating-point pairs listed in two columns. This dataset is typically used for graphing, further testing, or regression checking with external numerical tools. No dependencies or code required, but targeted at subsequent automated or manual comparison.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReorderKeepStart_TsTestBaseline.txt#2025-04-23_snippet_3\n\nLANGUAGE: data\nCODE:\n```\n0.400000 1.000000\n1.000000 1.000000\n1.014925 0.996762\n1.029851 0.994243\n1.044776 0.992203\n1.059701 0.990512\n1.074627 0.989088\n1.089552 0.987878\n1.104478 0.986844\n1.119403 0.985957\n1.134328 0.985197\n1.149254 0.984546\n1.164179 0.983991\n1.179104 0.983521\n1.194030 0.983126\n1.208955 0.982799\n1.223881 0.982534\n1.238806 0.982325\n1.253731 0.982167\n1.268657 0.982056\n1.283582 0.981987\n1.298507 0.981959\n1.313433 0.981968\n1.328358 0.982010\n1.343284 0.982085\n1.358209 0.982190\n1.373134 0.982322\n1.388060 0.982480\n1.402985 0.982663\n1.417910 0.982869\n1.432836 0.983097\n1.447761 0.983344\n1.462687 0.983611\n1.477612 0.983896\n1.492537 0.984199\n1.507463 0.984517\n1.522388 0.984850\n1.537313 0.985198\n1.552239 0.985559\n1.567164 0.985934\n1.582090 0.986320\n1.597015 0.986718\n1.611940 0.987127\n1.626866 0.987546\n1.641791 0.987974\n1.656716 0.988412\n1.671642 0.988859\n1.686567 0.989313\n1.701493 0.989776\n1.716418 0.990245\n1.731343 0.990721\n1.746269 0.991203\n1.761194 0.991692\n1.776119 0.992185\n1.791045 0.992684\n1.805970 0.993188\n1.820896 0.993695\n1.835821 0.994207\n1.850746 0.994723\n1.865672 0.995241\n1.880597 0.995763\n1.895522 0.996287\n1.910448 0.996813\n1.925373 0.997341\n1.940299 0.997871\n1.955224 0.998402\n1.970149 0.998934\n1.985075 0.999467\n2.000000 1.000000\n2.014925 1.000533\n2.029851 1.001066\n2.044776 1.001598\n2.059701 1.002129\n2.074627 1.002659\n2.089552 1.003187\n2.104478 1.003713\n2.119403 1.004237\n2.134328 1.004759\n2.149254 1.005277\n2.164179 1.005793\n2.179104 1.006305\n2.194030 1.006812\n2.208955 1.007316\n2.223881 1.007815\n2.238806 1.008308\n2.253731 1.008797\n2.268657 1.009279\n2.283582 1.009755\n2.298507 1.010224\n2.313433 1.010687\n2.328358 1.011141\n2.343284 1.011588\n2.358209 1.012026\n2.373134 1.012454\n2.388060 1.012873\n2.402985 1.013282\n2.417910 1.013680\n2.432836 1.014066\n2.447761 1.014441\n2.462687 1.014802\n2.477612 1.015150\n2.492537 1.015483\n2.507463 1.015801\n2.522388 1.016104\n2.537313 1.016389\n2.552239 1.016656\n2.567164 1.016903\n2.582090 1.017131\n2.597015 1.017337\n2.611940 1.017520\n2.626866 1.017678\n2.641791 1.017810\n2.656716 1.017915\n2.671642 1.017990\n2.686567 1.018032\n2.701493 1.018041\n2.716418 1.018013\n2.731343 1.017944\n2.746269 1.017833\n2.761194 1.017675\n2.776119 1.017466\n2.791045 1.017201\n2.805970 1.016874\n2.820896 1.016479\n2.835821 1.016009\n2.850746 1.015454\n2.865672 1.014803\n2.880597 1.014043\n2.895522 1.013156\n2.910448 1.012122\n2.925373 1.010912\n2.940299 1.009488\n2.955224 1.007797\n2.970149 1.005757\n2.985075 1.003238\n3.000000 1.000000\n3.014925 0.997508\n3.029851 0.997822\n3.044776 1.001559\n3.059701 1.009599\n3.074627 1.023251\n3.089552 1.044627\n3.104478 1.077524\n3.119403 1.130147\n3.134328 1.229514\n3.149254 1.831215\n3.164179 1.945461\n3.179104 1.982965\n3.194030 1.997712\n3.200000 2.000000\n3.208955 2.002154\n3.223881 2.005382\n3.238806 2.008180\n3.253731 2.010576\n3.268657 2.012594\n3.283582 2.014258\n3.298507 2.015591\n3.313433 2.016614\n3.328358 2.017347\n3.343284 2.017811\n3.358209 2.018023\n3.373134 2.018003\n3.388060 2.017766\n3.402985 2.017330\n3.417910 2.016711\n3.432836 2.015925\n3.447761 2.014986\n3.462687 2.013910\n3.477612 2.012711\n3.492537 2.011403\n3.507463 2.010000\n3.522388 2.008516\n3.537313 2.006964\n3.552239 2.005357\n3.567164 2.003708\n3.582090 2.002032\n3.597015 2.000339\n3.611940 1.998644\n3.626866 1.996960\n3.641791 1.995298\n3.656716 1.993673\n3.671642 1.992098\n3.686567 1.990585\n3.701493 1.989148\n3.716418 1.987800\n3.731343 1.986556\n3.746269 1.985429\n3.761194 1.984433\n3.776119 1.983584\n3.791045 1.982896\n3.805970 1.982385\n3.820896 1.982067\n3.835821 1.981958\n3.850746 1.982075\n3.865672 1.982436\n3.880597 1.983059\n3.895522 1.983964\n3.910448 1.985170\n3.925373 1.986699\n3.940299 1.988573\n3.955224 1.990815\n4.000000 2.000000\n4.600000 2.000000\n```\n\n----------------------------------------\n\nTITLE: Registering Display Style Tests with Different Refinement Settings\nDESCRIPTION: Registers tests for HdSt display style functionality with both default and refined settings. These tests render geometry with different display settings and compare against reference images.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_32\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStDisplayStyle\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStDisplayStyle --offscreen --write testHdStDisplayStyle.png\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        testHdStDisplayStyle.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    TESTENV testHdStDisplayStyle\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStDisplayStyle_refined\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStDisplayStyle --offscreen --refineLevel 2 --write testHdStDisplayStyle_refined.png\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        testHdStDisplayStyle_refined.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    TESTENV testHdStDisplayStyle\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Boost Python Test in CMake\nDESCRIPTION: Defines a function to create a Boost Python test, including setting up the test module and registering the test with CMake.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/external/boost/python/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(boost_python_test TEST_NAME)\n    set(oneValueArgs SCRIPT)\n    cmake_parse_arguments(test \"\" \"${oneValueArgs}\" \"\" ${ARGN})\n    \n    if (NOT test_SCRIPT)\n        set(test_SCRIPT \"test/${TEST_NAME}.py\")\n    endif()\n\n    get_filename_component(installed_script \"${test_SCRIPT}\" NAME_WE)\n\n    boost_python_test_module(${TEST_NAME} ${ARGN})\n    pxr_test_scripts(\"${test_SCRIPT}\")\n    pxr_register_test(\"python_${TEST_NAME}\"\n        PYTHON\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/pyrun ${installed_script}\"\n    )\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Tests for USD Recursive Payloads Example in CMake\nDESCRIPTION: Sets up different test configurations based on the host system and compiler. For Linux with GCC, it includes additional diff comparisons. For other platforms, it runs a basic test without comparisons due to potential floating-point precision differences.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/examples/usdRecursivePayloadsExample/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (\"${CMAKE_HOST_SYSTEM_NAME}\" STREQUAL \"Linux\" AND\n    \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n    pxr_register_test(testUsdRecursivePayloadsExample\n        PYTHON\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdRecursivePayloadsExample\"\n        DIFF_COMPARE flattenedContents.usda newFlattenedContents.usda\n        EXPECTED_RETURN_CODE 0\n        ENV\n            ${PXR_PLUGINPATH_NAME}=${CMAKE_INSTALL_PREFIX}/share/usd/examples/plugin/usdRecursivePayloadsExample/resources\n    )\nelse()\n    pxr_register_test(testUsdRecursivePayloadsExample\n        PYTHON\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdRecursivePayloadsExample\"\n        EXPECTED_RETURN_CODE 0\n        ENV\n            ${PXR_PLUGINPATH_NAME}=${CMAKE_INSTALL_PREFIX}/share/usd/examples/plugin/usdRecursivePayloadsExample/resources\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: OpenUSD Schema Generation Configuration\nDESCRIPTION: Configuration listing for schema generation, including public classes, Python module files, and resource files required for the generative procedural implementation in OpenUSD.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdProc/generatedSchema.classes.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT.\n\n# Public Classes\ngenerativeProcedural\ntokens\n\n# Python Module Files\nmodule.cpp\nwrapGenerativeProcedural.cpp\nwrapTokens.cpp\n\n# Resource Files\ngeneratedSchema.usda\nplugInfo.json\nschema.usda:usdProc/schema.usda\n```\n\n----------------------------------------\n\nTITLE: Defining Scene Description Path Role in Sphinx RST\nDESCRIPTION: Creates a custom role 'sdfpath' for formatting USD scene description paths in Sphinx documentation. Uses monospace font with special styling. Used with the syntax :sdfpath:`/Path/To/Prim`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/rolesAndUtils.rst#2025-04-23_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. role:: sdfpath\n   :class: mono, sdfpath\n```\n\n----------------------------------------\n\nTITLE: Configuring and registering the DependencyCache test for ef library\nDESCRIPTION: Sets up a test for the DependencyCache component, specifying the required libraries and source files, and registers it with the testing framework with an expected return code of 0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/ef/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testEfDependencyCache\n    LIBRARIES\n        ef\n        tf\n        work\n    \n    CPPFILES\n        testenv/testEfDependencyCache.cpp\n)\n\npxr_register_test(testEfDependencyCache\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testEfDependencyCache\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Spline and Knot Data in Python\nDESCRIPTION: This snippet defines the spline configuration, including interpolation method and extrapolation settings, as well as knot data with time, value, and tangent information.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PostRegressiveContain_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  0.000000: 0.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.000000, postLen 0.800000, auto false / false\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 1.000000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Composition Results for /Inherit/CHARACTER\nDESCRIPTION: Shows the prim stack for the /Inherit/CHARACTER prim, which only appears in root.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SubrootReferenceAndVariants2.testenv/baseline/compositionResults_SubrootReferenceAndVariants2.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </Inherit/CHARACTER>\n\nPrim Stack:\n    root.sdf             /Inherit/CHARACTER\n```\n\n----------------------------------------\n\nTITLE: Registering Automated USD Composition Result Test Suites - CMake\nDESCRIPTION: This code snippet repeatedly registers multiple automated test suites for various complex USD composition scenarios using the pxr_register_test macro in CMake. Each registration specifies the test name, indicates Python usage, constructs a command to execute the test harness (testPcpCompositionResults) with a particular .sdf file, and ensures stdout is redirected to a designated results file, which is then compared (DIFF_COMPARE) with an expected output. Dependencies include the USD test harness, a functioning Python environment, and pre-existing .sdf input files. The inputs are typically root-level USD files, with outputs being redirected test results and optional error logs. The primary limitation is that all dependencies and files must exist at configure and run time for tests to execute correctly.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testPcpMuseum_TrickyNestedClasses\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickyNestedClasses/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickyNestedClasses.txt\n    DIFF_COMPARE compositionResults_TrickyNestedClasses.txt \n)\n\npxr_register_test(testPcpMuseum_TrickyNestedClasses2\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickyNestedClasses2/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickyNestedClasses2.txt\n    DIFF_COMPARE compositionResults_TrickyNestedClasses2.txt \n)\n\npxr_register_test(testPcpMuseum_TrickyNestedClasses3\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickyNestedClasses3/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickyNestedClasses3.txt\n    DIFF_COMPARE compositionResults_TrickyNestedClasses3.txt \n)\n\npxr_register_test(testPcpMuseum_TrickyNestedSpecializes\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickyNestedSpecializes/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickyNestedSpecializes.txt\n    DIFF_COMPARE compositionResults_TrickyNestedSpecializes.txt \n)\n\npxr_register_test(testPcpMuseum_TrickyNestedSpecializes2\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickyNestedSpecializes2/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickyNestedSpecializes2.txt\n    DIFF_COMPARE compositionResults_TrickyNestedSpecializes2.txt \n)\n\npxr_register_test(testPcpMuseum_TrickyNestedClasses4\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickyNestedClasses4/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickyNestedClasses4.txt\n    DIFF_COMPARE compositionResults_TrickyNestedClasses4.txt \n)\n\npxr_register_test(testPcpMuseum_TrickyNestedVariants\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickyNestedVariants/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickyNestedVariants.txt\n    DIFF_COMPARE compositionResults_TrickyNestedVariants.txt \n)\n\npxr_register_test(testPcpMuseum_TrickySpecializesAndInherits\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickySpecializesAndInherits/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickySpecializesAndInherits.txt\n    DIFF_COMPARE compositionResults_TrickySpecializesAndInherits.txt \n)\n\npxr_register_test(testPcpMuseum_TrickySpecializesAndInherits2\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickySpecializesAndInherits2/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickySpecializesAndInherits2.txt\n    DIFF_COMPARE compositionResults_TrickySpecializesAndInherits2.txt \n)\n\npxr_register_test(testPcpMuseum_TrickySpecializesAndInherits3\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickySpecializesAndInherits3/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickySpecializesAndInherits3.txt\n    DIFF_COMPARE compositionResults_TrickySpecializesAndInherits3.txt \n)\n\npxr_register_test(testPcpMuseum_TrickySpecializesAndRelocates\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickySpecializesAndRelocates/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickySpecializesAndRelocates.txt\n    DIFF_COMPARE compositionResults_TrickySpecializesAndRelocates.txt \n)\n\npxr_register_test(testPcpMuseum_TrickySpookyVariantSelection\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickySpookyVariantSelection/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickySpookyVariantSelection.txt\n    DIFF_COMPARE compositionResults_TrickySpookyVariantSelection.txt \n)\n\npxr_register_test(testPcpMuseum_TrickySpookyVariantSelectionInClass\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickySpookyVariantSelectionInClass/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickySpookyVariantSelectionInClass.txt\n    DIFF_COMPARE compositionResults_TrickySpookyVariantSelectionInClass.txt \n)\n\npxr_register_test(testPcpMuseum_TrickyConnectionToRelocatedAttribute\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickyConnectionToRelocatedAttribute/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickyConnectionToRelocatedAttribute.txt\n    DIFF_COMPARE compositionResults_TrickyConnectionToRelocatedAttribute.txt \n)\n\npxr_register_test(testPcpMuseum_TrickyRelocatedTargetInVariant\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickyRelocatedTargetInVariant/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickyRelocatedTargetInVariant.txt\n    DIFF_COMPARE compositionResults_TrickyRelocatedTargetInVariant.txt \n)\n\npxr_register_test(testPcpMuseum_TrickyRelocationOfPrimFromPayload\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickyRelocationOfPrimFromPayload/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickyRelocationOfPrimFromPayload.txt\n    DIFF_COMPARE compositionResults_TrickyRelocationOfPrimFromPayload.txt \n)\n\npxr_register_test(testPcpMuseum_TrickyRelocationOfPrimFromVariant\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickyRelocationOfPrimFromVariant/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickyRelocationOfPrimFromVariant.txt\n    DIFF_COMPARE compositionResults_TrickyRelocationOfPrimFromVariant.txt \n)\n\npxr_register_test(testPcpMuseum_TrickyRelocationSquatter\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickyRelocationSquatter/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickyRelocationSquatter.txt\n    DIFF_COMPARE compositionResults_TrickyRelocationSquatter.txt \n)\n\npxr_register_test(testPcpMuseum_TrickyMultipleRelocations\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickyMultipleRelocations/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickyMultipleRelocations.txt\n    DIFF_COMPARE compositionResults_TrickyMultipleRelocations.txt \n)\n\npxr_register_test(testPcpMuseum_TrickyMultipleRelocations2\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickyMultipleRelocations2/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickyMultipleRelocations2.txt\n    DIFF_COMPARE compositionResults_TrickyMultipleRelocations2.txt \n)\n\npxr_register_test(testPcpMuseum_TrickyMultipleRelocations3\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickyMultipleRelocations3/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickyMultipleRelocations3.txt\n    DIFF_COMPARE compositionResults_TrickyMultipleRelocations3.txt \n)\n\npxr_register_test(testPcpMuseum_TrickyMultipleRelocations4\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickyMultipleRelocations4/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickyMultipleRelocations4.txt\n    DIFF_COMPARE compositionResults_TrickyMultipleRelocations4.txt\n)\n\npxr_register_test(testPcpMuseum_TrickyMultipleRelocations5\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickyMultipleRelocations5/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickyMultipleRelocations5.txt\n    DIFF_COMPARE compositionResults_TrickyMultipleRelocations5.txt\n)\n\npxr_register_test(testPcpMuseum_TrickyMultipleRelocationsAndClasses\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickyMultipleRelocationsAndClasses/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickyMultipleRelocationsAndClasses.txt\n    DIFF_COMPARE compositionResults_TrickyMultipleRelocationsAndClasses.txt \n)\n\npxr_register_test(testPcpMuseum_TrickyMultipleRelocationsAndClasses2\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickyMultipleRelocationsAndClasses2/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickyMultipleRelocationsAndClasses2.txt\n    DIFF_COMPARE compositionResults_TrickyMultipleRelocationsAndClasses2.txt \n)\n\npxr_register_test(testPcpMuseum_TrickyNonLocalVariantSelection\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd TrickyNonLocalVariantSelection/root.sdf\" \n    STDOUT_REDIRECT compositionResults_TrickyNonLocalVariantSelection.txt\n    DIFF_COMPARE compositionResults_TrickyNonLocalVariantSelection.txt \n)\n\npxr_register_test(testPcpMuseum_ErrorOpinionAtRelocationSource\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd --errorFile compositionErrors_ErrorOpinionAtRelocationSource.txt ErrorOpinionAtRelocationSource/root.sdf\" \n    STDOUT_REDIRECT compositionResults_ErrorOpinionAtRelocationSource.txt\n    DIFF_COMPARE compositionResults_ErrorOpinionAtRelocationSource.txt compositionErrors_ErrorOpinionAtRelocationSource.txt\n)\n\npxr_register_test(testPcpMuseum_ErrorArcCycle\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd --errorFile compositionErrors_ErrorArcCycle.txt ErrorArcCycle/root.sdf\" \n    STDOUT_REDIRECT compositionResults_ErrorArcCycle.txt\n    DIFF_COMPARE compositionResults_ErrorArcCycle.txt compositionErrors_ErrorArcCycle.txt\n)\n\npxr_register_test(testPcpMuseum_ErrorPermissionDenied\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd  ErrorPermissionDenied/root.sdf\" \n    STDOUT_REDIRECT compositionResults_ErrorPermissionDenied_usd.txt\n    DIFF_COMPARE compositionResults_ErrorPermissionDenied_usd.txt\n)\n\npxr_register_test(testPcpMuseum_ErrorConnectionPermissionDenied\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd  ErrorConnectionPermissionDenied/root.sdf\" \n```\n\n----------------------------------------\n\nTITLE: Registering UsdView Point Instancer Variant Test in CMake\nDESCRIPTION: This snippet registers a test for UsdView point instancer variants. It specifies a Python command to run the test script, sets up image comparisons for different variants, and defines failure thresholds.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_31\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdviewPointInstancerVariant\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewPointInstancerVariant.py test.usda\"\n    IMAGE_DIFF_COMPARE\n        variantB.png\n        variantA.png\n    FAIL 0.05\n    FAIL_PERCENT 0.03\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Documentation Header for OpenExec\nDESCRIPTION: A markdown header with an HTML ID anchor that defines the main documentation page for OpenExec, which appears to be a component of the OpenUSD project.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/exec/docs/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Exec  {#mainpage}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hydra SortedIdsPerf Test Build in CMake\nDESCRIPTION: Configures the build for performance testing of Hydra's sorted IDs system. This test measures and validates the performance characteristics of the sorted identifier management system.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/CMakeLists.txt#2025-04-23_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testHdSortedIdsPerf\n   LIBRARIES\n       hd\n       sdf\n       tf\n       arch\n\n   CPPFILES\n       testenv/testHdSortedIdsPerf.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Variadic Input Test Configuration\nDESCRIPTION: Test setup for verifying usdcat's ability to handle multiple input files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdcat/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testVariadicCatting\n    DEST testUsdCatVariadicCatting\n)\n\npxr_register_test(testUsdCatVariadicCatting\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdcat a.usd b.usd c.usd\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TsRegressionPreventer Results - USD Animation Test Data - YAML\nDESCRIPTION: Defines the properties and detailed boolean/float configuration of a TsRegressionPreventer result, capturing the presence and state of pre/post spline segments and how they are adjusted. Each field (e.g., havePreSegment, preActiveAdjusted, preActiveAdjustedWidth) governs a distinct aspect of the curve adjustment logic essential to regression prevention. Used as direct input for test harnesses or regression detection subsystems; intended data inputs are boolean state flags and curve segment widths with floating point precision.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReorderKeepRatio_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: true\n  havePreSegment: true\n  preActiveAdjusted: true\n  preActiveAdjustedWidth: 0.199998\n  preOppositeAdjusted: true\n  preOppositeAdjustedWidth: 0.199998\n  havePostSegment: true\n  postActiveAdjusted: false\n  postActiveAdjustedWidth: 0.250000\n  postOppositeAdjusted: false\n  postOppositeAdjustedWidth: 0.250000\n```\n\n----------------------------------------\n\nTITLE: Configuring Gf Library in CMake for OpenUSD\nDESCRIPTION: Sets up the Gf library with its dependencies, public and private classes, headers, and Python modules. It also configures the library's build process and includes various test configurations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/gf/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_INCLUDE_CURRENT_DIR OFF)\n\nset(PXR_PREFIX pxr/base)\nset(PXR_PACKAGE gf)\n\npxr_library(gf\n    LIBRARIES\n        arch\n        tf\n\n    PUBLIC_CLASSES\n        bbox3d\n        camera\n        color\n        colorSpace\n        dualQuatd\n        dualQuatf\n        dualQuath\n        frustum\n        gamma\n        half\n        homogeneous\n        ilmbase_half\n        interval\n        line\n        line2d\n        lineSeg\n        lineSeg2d\n        math\n        matrixData\n        matrix2d\n        matrix2f\n        matrix3f\n        matrix3d\n        matrix4f\n        matrix4d\n        multiInterval\n        plane\n        quatd\n        quatf\n        quath\n        quaternion\n        range1d\n        range1f\n        range2d\n        range2f\n        range3d\n        range3f\n        ray\n        rect2i\n        rotation\n        size2\n        size3\n        transform\n        vec2d\n        vec2f\n        vec2h\n        vec2i\n        vec3d\n        vec3f\n        vec3h\n        vec3i\n        vec4d\n        vec4f\n        vec4h\n        vec4i\n\n    PYTHON_PUBLIC_CLASSES\n        pyBufferUtils\n\n    PUBLIC_HEADERS\n        api.h\n        declare.h\n        ilmbase_halfLimits.h\n        limits.h\n        numericCast.h\n        traits.h\n\n    CPPFILES\n        nc/nanocolor.c\n\n    PRIVATE_CLASSES\n        ostreamHelpers\n\n    PRIVATE_HEADERS\n        ilmbase_eLut.h\n        ilmbase_toFloat.h\n        nc/nanocolor.h\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapBBox3d.cpp\n        wrapCamera.cpp\n        wrapColor.cpp\n        wrapColorSpace.cpp\n        wrapDualQuatd.cpp\n        wrapDualQuatf.cpp\n        wrapDualQuath.cpp\n        wrapFrustum.cpp\n        wrapGamma.cpp\n        wrapHalf.cpp\n        wrapHomogeneous.cpp\n        wrapInterval.cpp\n        wrapLimits.cpp\n        wrapLine.cpp\n        wrapLineSeg.cpp\n        wrapMath.cpp\n        wrapMatrix2d.cpp\n        wrapMatrix2f.cpp\n        wrapMatrix3f.cpp\n        wrapMatrix3d.cpp\n        wrapMatrix4f.cpp\n        wrapMatrix4d.cpp\n        wrapMultiInterval.cpp\n        wrapPlane.cpp\n        wrapQuaternion.cpp\n        wrapQuatd.cpp\n        wrapQuatf.cpp\n        wrapQuath.cpp\n        wrapRange1d.cpp\n        wrapRange1f.cpp\n        wrapRange2d.cpp\n        wrapRange2f.cpp\n        wrapRange3d.cpp\n        wrapRange3f.cpp\n        wrapRay.cpp\n        wrapRect2i.cpp\n        wrapRotation.cpp\n        wrapSize2.cpp\n        wrapSize3.cpp\n        wrapTransform.cpp\n        wrapVec2d.cpp\n        wrapVec2f.cpp\n        wrapVec2h.cpp\n        wrapVec2i.cpp\n        wrapVec3d.cpp\n        wrapVec3f.cpp\n        wrapVec3h.cpp\n        wrapVec3i.cpp\n        wrapVec4d.cpp\n        wrapVec4f.cpp\n        wrapVec4h.cpp\n        wrapVec4i.cpp\n\n    PYMODULE_FILES\n        __init__.py\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Italic-Underline Text Role in Sphinx RST\nDESCRIPTION: Creates a custom role 'iu' for italic-underline text formatting in Sphinx documentation. Used with the syntax :iu:`text`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/rolesAndUtils.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. role:: iu\n```\n\n----------------------------------------\n\nTITLE: Setting Package and Prefix for hdPrman Headers in CMake\nDESCRIPTION: Configures the installation path for hdPrman headers to be alongside other Hydra backends in the pxr/imaging directory.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/hdPrman/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE hdPrman)\n```\n\n----------------------------------------\n\nTITLE: RegressivePostFringe Spline Test Cases\nDESCRIPTION: Test results showing sampled points on the RegressivePostFringe spline with three different sampling ranges: [0,1], [-1.5,2.5] with extrapolation, and [0.25,0.75] with higher density sampling.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_93\n\nLANGUAGE: text\nCODE:\n```\nTest Case 187: SampleWithSources([0, 1], 500, 500, 1)\n0: (TsSourceKnotInterp)\n    (0, 0)\n    (0.1071872622053436, 0.00286865234375)\n    (0.2063654745862603, 0.01123046875)\n    (0.2978456243045132, 0.02471923828125)\n    (0.38193869852186546, 0.04296875)\n    (0.45895568440007994, 0.06561279296875)\n    (0.5292075691009197, 0.09228515625)\n    (0.593005339786148, 0.12261962890625)\n    (0.6506599836175275, 0.15625)\n    (0.7024824877568216, 0.19281005859375)\n    (0.7487838393657933, 0.23193359375)\n    (0.7898750256062055, 0.27325439453125)\n    (0.8260670336398214, 0.31640625)\n    (0.8576708506284039, 0.36102294921875)\n    (0.8849974637337162, 0.40673828125)\n    (0.9083578601175213, 0.45318603515625)\n    (0.9280630269415823, 0.5)\n    (0.9577516205575238, 0.59326171875)\n    (0.9765511418756453, 0.68359375)\n    (0.9869494881900511, 0.76806640625)\n    (0.9914345567948458, 0.84375)\n    (0.9926164500520189, 0.95703125)\n    (0.9942890692926063, 0.98876953125)\n    (0.9964842521320709, 0.99713134765625)\n    (1, 1)\n\nTest Case 188: SampleWithSources([-1.5, 2.5], 500, 500, 10)\n0: (TsSourcePreExtrap)\n    (-1.5, 0)\n    (0, 0)\n1: (TsSourceKnotInterp)\n    (0, 0)\n    (0.38193869852186546, 0.04296875)\n    (0.6506599836175275, 0.15625)\n    (0.8260670336398214, 0.31640625)\n    (0.9280630269415823, 0.5)\n    (0.9765511418756453, 0.68359375)\n    (0.9914345567948458, 0.84375)\n    (1, 1)\n2: (TsSourcePostExtrap)\n    (1, 1)\n    (2.5, 1)\n\nTest Case 189: SampleWithSources([0.25, 0.75], 500, 500, 0.5)\n```\n\n----------------------------------------\n\nTITLE: Removing Baseline Asset Reference in USD\nDESCRIPTION: Removes a reference to a baseline text file in the USD scene.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddiff/testenv/testDiffToolIterateUsdz/baseline/iterate_usd.txt#2025-04-23_snippet_3\n\nLANGUAGE: USD\nCODE:\n```\n-    asset baseline = @./baseline.txt@\n```\n\n----------------------------------------\n\nTITLE: Character Rig Composition with Tail Variant\nDESCRIPTION: Details the composition results for character components including tail rig and animation hierarchies. Shows prohibited child names and variant-dependent structure.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyRelocationOfPrimFromVariant.testenv/baseline/compositionResults_TrickyRelocationOfPrimFromVariant.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\nResults for composing </Char/TailRig>\n\nPrim Stack:\n    CharRig.sdf          /CharRig{TailRigVersion=Standard}TailRig\n    TailRig.sdf          /TailRig\n\nProhibited child names:\n     ['Tail']\n\nResults for composing </Char/Anim>\n\nPrim Stack:\n    CharRig.sdf          /CharRig/Anim\n\nChild names:\n     ['Tail']\n```\n\n----------------------------------------\n\nTITLE: Defining HdSt Library with Dependencies and Classes\nDESCRIPTION: Configures the HdSt library build using the pxr_library CMake function. Specifies all required libraries, include directories, public and private classes, and resource files needed for the Storm renderer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npxr_library(hdSt\n    LIBRARIES\n        hio\n        garch\n        glf\n        hd\n        hdsi\n        hgiGL\n        hgiInterop\n        sdr\n        tf\n        trace\n        ${TBB_tbb_LIBRARY}\n        ${OPENSUBDIV_LIBRARIES}\n        ${optionalLibs}\n\n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n        ${OPENSUBDIV_INCLUDE_DIR}\n        ${optionalIncludeDirs}\n\n    PUBLIC_CLASSES\n        basisCurves\n        binding\n        bufferArrayRange\n        bufferResource\n        bufferArrayRegistry\n        commandBuffer\n        computation\n        copyComputation\n        debugCodes\n        dependencyForwardingSceneIndexPlugin\n        dependencySceneIndexPlugin\n        dispatchBuffer\n        domeLightComputations\n        drawItem\n        drawItemInstance\n        drawTarget\n        drawTargetRenderPassState\n        dynamicUvTextureObject\n        extComputation\n        extCompCpuComputation\n        extCompGpuComputation\n        extCompGpuComputationResource\n        extCompGpuPrimvarBufferSource\n        extCompPrimvarBufferSource\n        fallbackLightingShader\n        field\n        fieldSubtextureIdentifier\n        flatNormals\n        geometricShader\n        glConversions\n        glslfxShader\n        glslProgram\n        bufferUtils\n        hgiConversions\n        hioConversions\n        imageShaderRenderPass\n        implicitSurfaceSceneIndexPlugin\n        nurbsApproximatingSceneIndexPlugin\n        instancer\n        interleavedMemoryManager\n        light      \n        lightingShader\n        material\n        materialNetwork\n        mesh\n        package\n        points\n        primUtils\n        ptexTextureObject\n        renderBuffer\n        renderDelegate\n        renderParam\n        renderPass\n        renderPassShader\n        renderPassState\n        resourceRegistry\n        samplerObject\n        samplerObjectRegistry\n        shaderCode\n        simpleLightingShader\n        smoothNormals\n        stagingBuffer\n        strategyBase\n        subtextureIdentifier\n        tetMeshConversionSceneIndexPlugin\n        textureBinder\n        textureCpuData\n        textureHandle\n        textureHandleRegistry\n        textureIdentifier\n        textureObject\n        textureObjectRegistry\n        textureUtils\n        tokens\n        udimTextureObject\n        unitTestGLDrawing\n        vboMemoryManager\n        vboSimpleMemoryManager\n        velocityMotionResolvingSceneIndexPlugin\n        volume\n        ${optionalPublicClasses}\n\n    PUBLIC_HEADERS\n        api.h\n        dynamicUvTextureImplementation.h\n        enums.h\n\n    PRIVATE_CLASSES\n        assetUvTextureCpuData\n        basisCurvesComputations\n        basisCurvesShaderKey\n        basisCurvesTopology\n        codeGen\n        cullingShaderKey\n        drawBatch\n        drawItemsCache\n        extCompComputeShader\n        extCompComputedInputSource\n        extCompInputSource\n        extCompSceneInputSource\n        fieldTextureCpuData\n        imageShaderShaderKey\n        indirectDrawBatch\n        materialNetworkShader\n        materialBindingResolvingSceneIndexPlugin\n        materialPrimvarTransferSceneIndexPlugin\n        materialParam\n        meshShaderKey\n        meshTopology \n        nodeIdentifierResolvingSceneIndexPlugin\n        pipelineDrawBatch\n        pointsShaderKey\n        quadrangulate\n        renderPassShaderKey\n        resourceBinder\n        shaderKey\n        subdivision\n        triangulate\n        unitTestHelper\n        vertexAdjacency\n        volumeShader\n        volumeShaderKey\n        ${optionalPrivateClasses}\n\n    RESOURCE_FILES\n        plugInfo.json\n        shaders/basisCurves.glslfx\n        shaders/compute.glslfx\n        shaders/domeLight.glslfx\n        shaders/edgeId.glslfx\n        shaders/fallbackLighting.glslfx\n        shaders/fallbackLightingShader.glslfx\n        shaders/fallbackMaterialNetwork.glslfx\n        shaders/fallbackVolume.glslfx\n        shaders/frustumCull.glslfx\n        shaders/imageShader.glslfx\n        shaders/instancing.glslfx\n        shaders/invalidMaterialNetwork.glslfx\n        shaders/mesh.glslfx\n        shaders/meshFaceCull.glslfx\n        shaders/meshNormal.glslfx\n        shaders/meshWire.glslfx\n        shaders/overlayShader.glslfx\n        shaders/points.glslfx\n        shaders/pointId.glslfx\n        shaders/pointDisk.glslfx\n        shaders/ptexTexture.glslfx\n        shaders/renderPass.glslfx\n        shaders/renderPassShader.glslfx\n        shaders/simpleLightingShader.glslfx\n        shaders/surfaceHelpers.glslfx\n        shaders/terminals.glslfx\n        shaders/visibility.glslfx\n        shaders/volume.glslfx\n        textures/fallbackBlackDomeLight.png\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Generated Files for OpenUSD Project\nDESCRIPTION: This snippet lists the various components generated for the OpenUSD project, including public classes, Python module files, and resource files. It serves as a manifest of the auto-generated content.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdSemantics/generatedSchema.classes.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT.\n\n# Public Classes\nlabelsAPI\ntokens\n\n# Python Module Files\nmodule.cpp\nwrapLabelsAPI.cpp\nwrapTokens.cpp\n\n# Resource Files\ngeneratedSchema.usda\nplugInfo.json\nschema.usda:usdSemantics/schema.usda\n```\n\n----------------------------------------\n\nTITLE: Invalid USD Relocation Path Error\nDESCRIPTION: Error message showing an invalid relocation attempt in USD where the target path </Rig/Other/A> is an ancestor of the source path </Rig/Other/A/Instance/A>. This violates USD's relocation rules as relocations cannot target ancestor paths.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpRegressionBugs_bug92827.testenv/baseline/compositionErrors_bug92827.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nRelocation from </Rig/Other/A/Instance/A> to </Rig/Other/A> authored at @bug92827/root.sdf@</> is invalid and will be ignored: The target of a relocate cannot be an ancestor of its source.\n```\n\n----------------------------------------\n\nTITLE: Installing testMultipleFixer Test Directory with CMake\nDESCRIPTION: Uses the `pxr_install_test_dir` CMake function to install the test environment for the 'multiple fixer' scenario. It copies the contents of the `testenv/testMultipleFixer` source directory into the build's test installation location under the name `testMultipleFixer`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdfixbrokenpixarschemas/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testMultipleFixer\n    DEST testMultipleFixer\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Composition Results for /ModelGroup/Model_2/Anim in USD\nDESCRIPTION: Shows the composition analysis for the prim `/ModelGroup/Model_2/Anim`. It details the prim stack (`group.sdf`) and its child prim (`Collider`). No specific properties or relationships are listed for this prim in the output.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyMultipleRelocations2.testenv/baseline/compositionResults_TrickyMultipleRelocations2.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </ModelGroup/Model_2/Anim>\n\nPrim Stack:\n    group.sdf            /Group/Model/Anim\n\nChild names:\n     ['Collider']\n```\n\n----------------------------------------\n\nTITLE: Sequential Event Range Detection Log\nDESCRIPTION: Log output showing 72 sequential events being detected in descending order. Each event has a Begin and End timestamp, with the range being exactly 1 unit in size.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/trace/testenv/testTraceEventContainer.testenv/baseline/testTraceEventContainer-Run1-stdout.txt#2025-04-23_snippet_8\n\nLANGUAGE: log\nCODE:\n```\nFound event\n    Begin: 71\n    End: 72\nFound event\n    Begin: 70\n    End: 71\nFound event\n    Begin: 69\n    End: 70\n[...]\nFound event\n    Begin: 1\n    End: 2\nFound event\n    Begin: 0\n    End: 1\nPASSED\n```\n\n----------------------------------------\n\nTITLE: Disabling Static Python Linking in USD Build\nDESCRIPTION: CMake flag to disable static linking to Python in USD build, useful for generating wheel packages or leveraging Python's ABI compatibility.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/BUILDING.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n-DPXR_PY_UNDEFINED_DYNAMIC_LOOKUP=ON\n```\n\n----------------------------------------\n\nTITLE: Analyzing Composition for /Model Prim (USD)\nDESCRIPTION: Displays the composition results for the '/Model' prim. It shows that the prim stack originates from 'root.sdf' and lists 'attr' as its sole property, also sourced from 'root.sdf'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorPermissionDenied.testenv/baseline/compositionResults_ErrorPermissionDenied.txt#2025-04-23_snippet_4\n\nLANGUAGE: usd\nCODE:\n```\nResults for composing </Model>\n\nPrim Stack:\n    root.sdf             /Model\n\nProperty names:\n     ['attr']\n\nProperty stacks:\n/Model.attr:\n    root.sdf             /Model.attr\n```\n\n----------------------------------------\n\nTITLE: Registering USD Checker Variant Set Validation Tests with CMake\nDESCRIPTION: This set of pxr_register_test invocations registers automated tests for the usdchecker CLI, specifying custom variantSets or variants to verify the validation framework's handling of combinations that either pass or fail. Each test command is expected to return a specific exit code, which is checked to confirm proper tool behavior. Dependencies include a valid CMake environment, the usdchecker binary in the install prefix, and the relevant USD asset files; inputs are test scenario variants, while outputs are binary test pass/fail states.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdChecker30\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdchecker --useNewValidationFramework bad/badVariants3.usda --variantSets set1\"\n    EXPECTED_RETURN_CODE 1\n)\n\n# variantSets set2, set3 do not exist by default, as set1:ref1 default on the /World prim, doesn\\'t bring in any new variant set via a reference and hence doesn\\'t fail validation.\npxr_register_test(testUsdChecker31\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdchecker --useNewValidationFramework bad/badVariants3.usda --variantSets set2\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdChecker32\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdchecker --useNewValidationFramework bad/badVariants3.usda --variantSets set3\"\n    EXPECTED_RETURN_CODE 0\n)\n\n# Running a specific variant combination which fails validation\npxr_register_test(testUsdChecker33\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdchecker --useNewValidationFramework bad/badVariants3.usda --variants set1:ref2,set2:A,set3:D\"\n    EXPECTED_RETURN_CODE 1\n)\n\n# Running a specific variant with variants from a specific variantSet (one of this combination fails validation, set1:ref2 set3:D)\npxr_register_test(testUsdChecker34\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdchecker --useNewValidationFramework bad/badVariants3.usda --variants set1:ref2 --variantSets set3\"\n    EXPECTED_RETURN_CODE 1\n)\n\n```\n\n----------------------------------------\n\nTITLE: Installing PCP Museum Test Directories\nDESCRIPTION: CMake commands using pxr_install_test_dir to install test environment directories for various PCP composition scenarios. Each command copies a testenv source directory to a destination for testing.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testPcpMuseum_TrickyVariantWeakerSelection3.testenv\n    DEST testPcpMuseum_TrickyVariantWeakerSelection3\n)\n```\n\n----------------------------------------\n\nTITLE: Regression Prevention Configuration Settings\nDESCRIPTION: Configuration settings for TsRegressionPreventer showing segment adjustments and width parameters for pre and post segments\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/InitiallyRegressiveNone_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: false\n  havePreSegment: false\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.000000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.000000\n  havePostSegment: true\n  postActiveAdjusted: false\n  postActiveAdjustedWidth: 15.800000\n  postOppositeAdjusted: false\n  postOppositeAdjustedWidth: 16.800000\n```\n\n----------------------------------------\n\nTITLE: Defining MissingReferenceValidator for UsdUtils\nDESCRIPTION: Documentation for a validator that ensures the composed USD stage doesn't contain any unresolvable asset dependencies in all possible variations when using the default asset resolver.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n[usdUtilsValidators:MissingReferenceValidator]:\n\tDoc: The composed USD stage should not contain any unresolvable asset dependencies (in every possible variation of the asset), when using the default asset resolver.\n\tKeywords: UsdUtilsValidators\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Layer Composition Results for /S4\nDESCRIPTION: Details the prim stack and time offsets for /S4 primitive showing sublayer configurations with offset and scale parameters.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer2.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </S4>\n\nPrim Stack:\n    s_12fps.sdf          /S4\n\nTime Offsets:\n    session_24fps.sdf    /S4             root       (offset=0.00, scale=1.00)\n        session_24fps.sdf                sublayer   (offset=0.00, scale=2.00)\n        sess_s.sdf                       sublayer   (offset=20.00, scale=4.00)\n```\n\n----------------------------------------\n\nTITLE: Instantiating TsTest_SplineData Object (Python)\nDESCRIPTION: Python code demonstrating the instantiation of a `Ts.TsTest_SplineData` object. This object programmatically defines a spline structure equivalent to the custom text format snippet. It sets extrapolation methods to Held and defines a list of knots, each specifying time, value, interpolation method, slopes, tangent lengths, and auto flags using hexadecimal float representations. Requires the Pixar OpenUSD Ts library.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReplaceContain_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('-0x1p-2'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.8p+1'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x1p-2'), postSlope = float.fromhex('0x1p-2'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x1p-2'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Compression Package Dependencies\nDESCRIPTION: Sets up the base package configuration and Python binary dependencies for the USD compression utility.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdcompress/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usd)\n\npxr_python_bin(usdcompress\n    DEPENDENCIES\n        tf\n        gf\n        sdf\n        usd\n        usdDraco\n        usdGeom\n)\n```\n\n----------------------------------------\n\nTITLE: Animation Spline Time-Value Evaluation Points Table\nDESCRIPTION: A table of time-value pairs representing the evaluation of the defined spline at multiple time points, showing how the curve interpolates between the knot points at times 1.0 and 5.0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/tsTest_TsFramework.testenv/baseline/test_Baseline_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: plain text\nCODE:\n```\n0.200000 1.000000\n1.000000 1.000000\n1.019900 1.018739\n1.039801 1.035628\n1.059701 1.051152\n1.079602 1.065611\n1.099502 1.079213\n1.119403 1.092102\n1.139303 1.104387\n1.159204 1.116153\n1.179104 1.127465\n1.199005 1.138376\n1.218905 1.148929\n1.238806 1.159161\n1.258706 1.169101\n1.278607 1.178775\n1.298507 1.188206\n1.318408 1.197412\n1.338308 1.206411\n1.358209 1.215216\n1.378109 1.223843\n1.398010 1.232301\n1.417910 1.240601\n1.437811 1.248753\n1.457711 1.256764\n1.477612 1.264644\n1.497512 1.272398\n1.517413 1.280034\n1.537313 1.287556\n1.557214 1.294970\n1.577114 1.302282\n1.597015 1.309495\n1.616915 1.316614\n1.636816 1.323644\n1.656716 1.330586\n1.676617 1.337446\n1.696517 1.344225\n1.716418 1.350928\n1.736318 1.357556\n1.756219 1.364113\n1.776119 1.370600\n1.796020 1.377021\n1.815920 1.383377\n1.835821 1.389670\n1.855721 1.395903\n1.875622 1.402076\n1.895522 1.408193\n1.915423 1.414254\n1.935323 1.420261\n1.955224 1.426216\n1.975124 1.432120\n1.995025 1.437973\n2.014925 1.443779\n2.034826 1.449537\n2.054726 1.455249\n2.074627 1.460917\n2.094527 1.466540\n2.114428 1.472121\n2.134328 1.477659\n2.154229 1.483157\n2.174129 1.488615\n2.194030 1.494033\n2.213930 1.499413\n2.233831 1.504755\n2.253731 1.510061\n2.273632 1.515330\n2.293532 1.520564\n2.313433 1.525764\n2.333333 1.530929\n2.353234 1.536060\n2.373134 1.541159\n2.393035 1.546226\n2.412935 1.551260\n2.432836 1.556264\n2.452736 1.561236\n2.472637 1.566179\n2.492537 1.571092\n2.512438 1.575975\n2.532338 1.580830\n2.552239 1.585656\n2.572139 1.590454\n2.592040 1.595225\n2.611940 1.599969\n2.631841 1.604686\n2.651741 1.609376\n2.671642 1.614040\n2.691542 1.618679\n2.711443 1.623292\n2.731343 1.627880\n2.751244 1.632443\n2.771144 1.636982\n2.791045 1.641496\n2.810945 1.645987\n2.830846 1.650453\n2.850746 1.654897\n2.870647 1.659317\n2.890547 1.663714\n2.910448 1.668089\n2.930348 1.672441\n2.950249 1.676771\n2.970149 1.681079\n2.990050 1.685365\n3.009950 1.689630\n3.029851 1.693872\n3.049751 1.698094\n3.069652 1.702295\n3.089552 1.706474\n3.109453 1.710633\n3.129353 1.714771\n3.149254 1.718889\n3.169154 1.722986\n3.189055 1.727064\n3.208955 1.731121\n3.228856 1.735158\n3.248756 1.739175\n3.268657 1.743173\n3.288557 1.747151\n3.308458 1.751109\n3.328358 1.755048\n3.348259 1.758967\n3.368159 1.762868\n3.388060 1.766749\n3.407960 1.770611\n3.427861 1.774454\n3.447761 1.778278\n3.467662 1.782083\n3.487562 1.785869\n3.507463 1.789636\n3.527363 1.793385\n3.547264 1.797114\n3.567164 1.800825\n3.587065 1.804517\n3.606965 1.808191\n3.626866 1.811845\n3.646766 1.815481\n3.666667 1.819098\n3.686567 1.822696\n3.706468 1.826276\n3.726368 1.829837\n3.746269 1.833378\n3.766169 1.836901\n3.786070 1.840405\n3.805970 1.843890\n3.825871 1.847356\n3.845771 1.850803\n3.865672 1.854230\n3.885572 1.857638\n3.905473 1.861026\n3.925373 1.864395\n3.945274 1.867745\n3.965174 1.871074\n3.985075 1.874383\n4.004975 1.877673\n4.024876 1.880942\n4.044776 1.884190\n4.064677 1.887418\n4.084577 1.890624\n4.104478 1.893810\n4.124378 1.896974\n4.144279 1.900116\n4.164179 1.903236\n4.184080 1.906335\n4.203980 1.909410\n4.223881 1.912462\n4.243781 1.915491\n4.263682 1.918496\n4.283582 1.921477\n4.303483 1.924433\n4.323383 1.927364\n4.343284 1.930269\n4.363184 1.933148\n4.383085 1.936000\n4.402985 1.938824\n4.422886 1.941619\n4.442786 1.944385\n4.462687 1.947121\n4.482587 1.949826\n4.502488 1.952499\n4.522388 1.955138\n4.542289 1.957743\n4.562189 1.960312\n4.582090 1.962843\n4.601990 1.965336\n4.621891 1.967787\n4.641791 1.970195\n4.661692 1.972558\n4.681592 1.974873\n4.701493 1.977137\n4.721393 1.979347\n4.741294 1.981498\n4.761194 1.983588\n4.781095 1.985609\n4.800995 1.987557\n4.820896 1.989425\n4.840796 1.991203\n4.860697 1.992881\n4.880597 1.994447\n4.900498 1.995883\n4.920398 1.997168\n4.940299 1.998274\n5.000000 2.000000\n5.800000 2.000000\n```\n\n----------------------------------------\n\nTITLE: VerticalTorture Bezier Spline Specification\nDESCRIPTION: Technical specification for a VerticalTorture Bezier spline with highly asymmetric tangent parameters. The first knot has a smaller width (0.44) with a 0.5 slope, while the second knot has a much larger width (1.32) with 0 slope.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_33\n\nLANGUAGE: text\nCODE:\n```\nSpline: VerticalTorture\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0.4409269851976059\n  post-tan slope 0.5\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 1.3227809555928178\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Layer Metadata Test Configuration\nDESCRIPTION: Test setup for verifying usdcat's handling of layer metadata.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdcat/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdCatLayerMetadata\n    DEST testUsdCatLayerMetadata\n)\n\npxr_register_test(testUsdCatLayerMetadata\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdcat --layerMetadata input.usda -o output.usda\"\n    DIFF_COMPARE output.usda\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: File Output Test Configuration\nDESCRIPTION: Test configuration for verifying usdcat's ability to write output to a file, comparing the result with expected output.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdcat/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testCatToFile\n    DEST testUsdCatOutToFile\n)\n\npxr_register_test(testUsdCatOutToFile\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdcat input.usda --out output.usda\"\n    DIFF_COMPARE output.usda\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Registering the testUsdVolVolume Test in CMake\nDESCRIPTION: This snippet uses the `pxr_register_test` function (specific to the OpenUSD build system and likely wrapping CTest functionality) to register a test named `testUsdVolVolume`. It specifies that the test is run using Python, provides the command `${CMAKE_INSTALL_PREFIX}/tests/testUsdVolVolume` to execute it, and sets the expected return code to 0, indicating success.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdVol/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdVolVolume\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdVolVolume\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Python Module Files for OpenUSD Shader Schema\nDESCRIPTION: This snippet lists the Python module files that implement the wrapper functions for the public classes. These files likely contain the Python bindings for the C++ implementations of the shader schema classes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdShade/generatedSchema.classes.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# Python Module Files\nmodule.cpp\nwrapConnectableAPI.cpp\nwrapCoordSysAPI.cpp\nwrapMaterial.cpp\nwrapMaterialBindingAPI.cpp\nwrapNodeDefAPI.cpp\nwrapNodeGraph.cpp\nwrapShader.cpp\nwrapTokens.cpp\n```\n\n----------------------------------------\n\nTITLE: Defining Cusp Bezier Spline in OpenUSD\nDESCRIPTION: Partial specification for a Cusp Bezier spline with held extrapolation. The curve has a knot at (0,0) with specific tangent settings. The specification is incomplete in the provided text.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_96\n\nLANGUAGE: text\nCODE:\n```\nSpline: Cusp\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 1\n  post-tan slope 0.5\nKnot:\n```\n\n----------------------------------------\n\nTITLE: Displaying Composition Results for /ModelGroup/Model_2 in USD\nDESCRIPTION: Shows the composition analysis for the prim `/ModelGroup/Model_2`. It details the prim stack (`root.sdf`, `group.sdf`), child prims (`Anim`, `Rig`), properties (`modelRel`), and the resolved relationship targets for `modelRel` pointing to `/ModelGroup/Model_2/Anim/Collider`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyMultipleRelocations2.testenv/baseline/compositionResults_TrickyMultipleRelocations2.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </ModelGroup/Model_2>\n\nPrim Stack:\n    root.sdf             /ModelGroup/Model_2\n    group.sdf            /Group/Model\n\nChild names:\n     ['Anim', 'Rig']\n\nProperty names:\n     ['modelRel']\n\nProperty stacks:\n/ModelGroup/Model_2.modelRel:\n    root.sdf             /ModelGroup/Model_2.modelRel\n\nRelationship targets:\n/ModelGroup/Model_2.modelRel:\n    /ModelGroup/Model_2/Anim/Collider\n```\n\n----------------------------------------\n\nTITLE: Composition Results for Prim /SS4\nDESCRIPTION: Details the composition resolution for the prim path `/SS4`. It shows the Prim Stack, listing layers contributing opinions to this prim, and the Time Offsets, illustrating how time scales and offsets accumulate through the hierarchy of sublayers and references affecting this prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer4.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </SS4>\n\nPrim Stack:\n    ss_12fps.sdf         /SS4\n    ss_12fps.sdf         /SS4\n    ss_12fps.sdf         /SS4\n    ss_12fps.sdf         /SS4\n    ref.sdf              /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_48tcps.sdf       /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_24tcps_12fps.sdf /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_12fps.sdf        /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n\nTime Offsets:\n    session.sdf          /SS4            root       (offset=0.00, scale=1.00)\n        session.sdf                      sublayer   (offset=0.00, scale=0.50)\n        sess_s.sdf                       sublayer   (offset=5.00, scale=1.00)\n        sess_s_48tcps.sdf                sublayer   (offset=5.00, scale=0.50)\n        sess_s_24tcps_12fps.sdf          sublayer   (offset=5.00, scale=1.00)\n        sess_s_12fps.sdf                 sublayer   (offset=5.00, scale=2.00)\n        s.sdf                            sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=4.00)\n        s_48tcps.sdf                     sublayer   (offset=10.00, scale=0.50)\n        ss.sdf                           sublayer   (offset=15.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=15.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=15.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=15.00, scale=4.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=4.00)\n        s_12fps.sdf                      sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=4.00)\n    ref.sdf              /Ref            reference  (offset=60.00, scale=4.00)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.50)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=2.00)\n    ref_48tcps.sdf       /Ref            reference  (offset=60.00, scale=2.00)\n        ref_s.sdf                        sublayer   (offset=0.00, scale=2.00)\n        ref_s_24tcps_12fps.sdf           sublayer   (offset=0.00, scale=2.00)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=4.00)\n    ref_24tcps_12fps.sdf /Ref            reference  (offset=60.00, scale=4.00)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.50)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=2.00)\n    ref_12fps.sdf        /Ref            reference  (offset=60.00, scale=8.00)\n        ref_s.sdf                        sublayer   (offset=0.00, scale=0.50)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.25)\n        ref_s_24tcps_12fps.sdf           sublayer   (offset=0.00, scale=0.50)\n\n------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: USD Relocate Error: Target is Descendant of Source\nDESCRIPTION: Error message detailing an invalid USD relocate operation where the target path (`/Model_3/Instance/Test`) is a descendant of the source path (`/Model_3/Instance`). Relocating a prim to one of its own descendants is not permitted as it would lead to an invalid scene hierarchy.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInvalidAuthoredRelocates.testenv/baseline/compositionErrors_ErrorInvalidAuthoredRelocates.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nRelocation from </Model_3/Instance> to </Model_3/Instance/Test> authored at @ErrorInvalidAuthoredRelocates/root.sdf@</> is invalid and will be ignored: The target of a relocate cannot be a descendant of its source.\n```\n\n----------------------------------------\n\nTITLE: Conditionally Installing and Registering the usdAppUtils Frame Recorder Test in CMake\nDESCRIPTION: Installs test data for the frame recorder test from `testenv/FrameRecorderTest` into the build/install test directory `testUsdAppUtilsFrameRecorder` using `pxr_install_test_dir`. It then conditionally registers the Python test `testUsdAppUtilsFrameRecorder` using `pxr_register_test`. The registration only occurs if the build is not in headless test mode (`PXR_HEADLESS_TEST_MODE` is false) and the target platform is neither Windows (`WIN32`) nor Apple (`APPLE`). If registered, the test command points to the installed script (`${CMAKE_INSTALL_PREFIX}/tests/testUsdAppUtilsFrameRecorder`), and success is expected with a return code of 0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdAppUtils/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/FrameRecorderTest\n    DEST testUsdAppUtilsFrameRecorder\n)\nif (NOT PXR_HEADLESS_TEST_MODE AND NOT WIN32 AND NOT APPLE)\n    pxr_register_test(testUsdAppUtilsFrameRecorder\n        PYTHON\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdAppUtilsFrameRecorder\"\n        EXPECTED_RETURN_CODE 0\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Composing USD Prim Path /A\nDESCRIPTION: Represents the absolute path to the prim named 'A' within the USD stage being composed.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndVariants.testenv/baseline/compositionResults_SpecializesAndVariants.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\n/A\n```\n\n----------------------------------------\n\nTITLE: Registering Boost Python Tests in CMake\nDESCRIPTION: Registers multiple Boost Python tests using the previously defined function.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/external/boost/python/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nboost_python_test(\"injected\")\nboost_python_test(\"properties\")\nboost_python_test(\"return_arg\")\nboost_python_test(\"staticmethod\")\nboost_python_test(\"shared_ptr\")\nboost_python_test(\"enable_shared_from_this\")\nboost_python_test(\"andreas_beyer\")\nboost_python_test(\"wrapper_held_type\")\nboost_python_test(\"polymorphism\")\nboost_python_test(\"polymorphism2\")\nboost_python_test(\"minimal\")\nboost_python_test(\"args\")\nboost_python_test(\"raw_ctor\")\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenUSD Plugin Build in CMake\nDESCRIPTION: This CMake script conditionally adds subdirectories for Alembic and Draco plugins based on build flags, and always adds subdirectories for OSL shaders and USD shaders. It controls which plugins are built as part of the OpenUSD project.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/plugin/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (${PXR_BUILD_ALEMBIC_PLUGIN})\n    add_subdirectory(usdAbc)\nendif()\nif (${PXR_BUILD_DRACO_PLUGIN})\n    add_subdirectory(usdDraco)\nendif()\nadd_subdirectory(sdrOsl)\nadd_subdirectory(usdShaders)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Skipping RenderMan Shader Build - CMake\nDESCRIPTION: This snippet checks if the 'hdPrman' build target exists and halts the shader configuration if not, printing a status message. It prevents unnecessary build steps when the required renderer target is missing and ensures that subsequent commands only run when dependencies are met. The use of message and early return is a common pattern for conditional build logic in CMake.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/shaders/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT TARGET hdPrman)\n  message(STATUS \"Skipping RenderMan shaders, hdPrman required\")\n  return()\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Analyzing Composition Results for /Root Prim\nDESCRIPTION: Details the composition results for the prim path `/Root`. It lists the resolved prim stack (showing contributions from `root.sdf`, `A.sdf`, `C.sdf`, `B.sdf`), the discovered property names (`C_attr`, `B_attr`, `A_attr`), and the specific layer source for each property's value (`A.sdf` for `A_attr`, `B.sdf` for `B_attr`, `C.sdf` for `C_attr`).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicPayloadDiamond.testenv/baseline/compositionResults_BasicPayloadDiamond.txt#2025-04-23_snippet_2\n\nLANGUAGE: usd\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Root>\n\nPrim Stack:\n    root.sdf             /Root\n    A.sdf                /A\n    C.sdf                /C\n    B.sdf                /B\n    C.sdf                /C\n\nProperty names:\n     ['C_attr', 'B_attr', 'A_attr']\n\nProperty stacks:\n/Root.A_attr:\n    A.sdf                /A.A_attr\n/Root.B_attr:\n    B.sdf                /B.B_attr\n/Root.C_attr:\n    C.sdf                /C.C_attr\n    C.sdf                /C.C_attr\n\n------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Sampling Animation Curve with Fine Time Resolution\nDESCRIPTION: Test case showing animation curve sampling with a higher resolution (0.5 time units) over a shorter range [92.5, 117.5], focusing on the inner loop pre-echo, prototype, and post-echo source sections.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_71\n\nLANGUAGE: text\nCODE:\n```\nTest Case 147: SampleWithSources([92.5, 117.5], 10, 50, 0.5)\n0: (TsSourceInnerLoopPreEcho)\n    (92.5, 19.208180987202926)\n    (92.8466796875, 17.57080078125)\n    (93.1353759765625, 16.46331787109375)\n    (93.4453125, 15.54296875)\n    (93.7816162109375, 14.87310791015625)\n    (93.96125793457031, 14.651908874511719)\n    (94.1494140625, 14.51708984375)\n    (94.24688529968262, 14.48454761505127)\n    (94.34672546386719, 14.476570129394531)\n    (94.5538330078125, 14.53826904296875)\n    (94.77137756347656, 14.710105895996094)\n    (95, 15)\n    (95.8505859375, 16.12744140625)\n    (96.5546875, 16.80078125)\n    (97.1533203125, 17.17529296875)\n    (97.6875, 17.40625)\n    (98.1982421875, 17.64892578125)\n    (98.7265625, 18.05859375)\n    (99.3134765625, 18.79052734375)\n    (100, 20)\n1: (TsSourceInnerLoopProto)\n    (100, 20)\n    (100.18321228027344, 20.312599182128906)\n    (100.3582763671875, 20.50567626953125)\n    (100.52583312988281, 20.58715057373047)\n    (100.60699653625488, 20.58851146697998)\n    (100.6865234375, 20.56494140625)\n    (100.84098815917969, 20.44696807861328)\n    (100.9898681640625, 20.24114990234375)\n    (101.2734375, 19.59765625)\n    (101.8017578125, 17.60498046875)\n    (102.3125, 15.09375)\n    (102.8466796875, 12.57080078125)\n    (103.1353759765625, 11.46331787109375)\n    (103.4453125, 10.54296875)\n    (103.7816162109375, 9.87310791015625)\n    (103.96125793457031, 9.651908874511719)\n    (104.1494140625, 9.51708984375)\n    (104.24688529968262, 9.48454761505127)\n    (104.34672546386719, 9.476570129394531)\n    (104.5538330078125, 9.53826904296875)\n    (104.77137756347656, 9.710105895996094)\n    (105, 10)\n    (105.8505859375, 11.12744140625)\n    (106.5546875, 11.80078125)\n    (107.1533203125, 12.17529296875)\n    (107.6875, 12.40625)\n    (108.1982421875, 12.64892578125)\n    (108.7265625, 13.05859375)\n    (109.3134765625, 13.79052734375)\n    (110, 15)\n2: (TsSourceInnerLoopPostEcho)\n    (110, 15)\n    (110.18321228027344, 15.312599182128906)\n    (110.3582763671875, 15.50567626953125)\n    (110.52583312988281, 15.587150573730469)\n    (110.60699653625488, 15.58851146697998)\n    (110.6865234375, 15.56494140625)\n    (110.84098815917969, 15.446968078613281)\n    (110.9898681640625, 15.24114990234375)\n    (111.2734375, 14.59765625)\n    (111.8017578125, 12.60498046875)\n    (112.3125, 10.09375)\n    (112.8466796875, 7.57080078125)\n    (113.1353759765625, 6.46331787109375)\n    (113.4453125, 5.54296875)\n    (113.7816162109375, 4.87310791015625)\n    (113.96125793457031, 4.651908874511719)\n    (114.1494140625, 4.51708984375)\n    (114.24688529968262, 4.4845476150512695)\n    (114.34672546386719, 4.476570129394531)\n    (114.5538330078125, 4.53826904296875)\n    (114.77137756347656, 4.710105895996094)\n    (115, 5)\n    (115.8505859375, 6.12744140625)\n    (116.5546875, 6.80078125)\n    (117.1533203125, 7.17529296875)\n    (117.5, 7.32518281535649)\n```\n\n----------------------------------------\n\nTITLE: Defining USD Clips Representing Gaps in Time Samples (usda)\nDESCRIPTION: Defines USD layers (`clip2.usd` / `clip3.usd`) containing a `Model` prim but without any time samples for the attribute `a`. These files represent gaps in the time-sampled data within a value clip set, relevant for testing interpolation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/valueClips.md#2025-04-23_snippet_7\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\ndef \"Model\"\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring pxOsd Library Build in CMake\nDESCRIPTION: Defines the build configuration for the pxOsd library, which is part of Pixar's OpenUSD imaging system. The library depends on OpenSubdiv and includes mesh topology, validation, and subdivision tag functionality with Python bindings.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/pxOsd/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE pxOsd)\n\npxr_library(pxOsd\n    LIBRARIES\n        tf\n        gf\n        vt\n        ${OPENSUBDIV_OSDCPU_LIBRARY}\n\n    INCLUDE_DIRS\n        ${OPENSUBDIV_INCLUDE_DIR}\n        \n    PUBLIC_HEADERS\n        api.h\n\n    PUBLIC_CLASSES\n        meshTopology\n        meshTopologyValidation\n        refinerFactory\n        subdivTags\n        tokens\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapMeshTopology.cpp\n        wrapMeshTopologyValidation.cpp\n        wrapSubdivTags.cpp\n        wrapTokens.cpp\n\n    PYMODULE_FILES\n        __init__.py\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra CollectionExpressionEvaluator Test Build in CMake\nDESCRIPTION: Defines the build configuration for testing Hydra's collection expression evaluator. This test validates the system that evaluates expressions for filtering and selecting collections of geometry.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/CMakeLists.txt#2025-04-23_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testHdCollectionExpressionEvaluator\n    LIBRARIES\n        hd\n        tf\n        sdf\n        \n    CPPFILES\n        testenv/testHdCollectionExpressionEvaluator.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: OpenUSD Generated Schema Manifest\nDESCRIPTION: Lists the public classes, Python module files, and resource files that are part of the generated OpenUSD schema. Includes components for asset previews, spatial audio, and tokens.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdMedia/generatedSchema.classes.txt#2025-04-23_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n# WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT.\n\n# Public Classes\nassetPreviewsAPI\nspatialAudio\ntokens\n\n# Python Module Files\nmodule.cpp\nwrapAssetPreviewsAPI.cpp\nwrapSpatialAudio.cpp\nwrapTokens.cpp\n\n# Resource Files\ngeneratedSchema.usda\nplugInfo.json\nschema.usda:usdMedia/schema.usda\n```\n\n----------------------------------------\n\nTITLE: Declaring Scene Geometry Groups (Geom) - Custom Scene Configuration\nDESCRIPTION: Describes a geometric grouping node with Xform schema, enclosing subordinate geometry such as mesh primitives. Dependencies are limited to scene graph organization. Parameters comprise scenePath and typeName. Inputs/outputs are hierarchical structure rather than geometric or visual data.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdImaging/testenv/testUsdImagingStageSceneIndexContents/baseline/basic.txt#2025-04-23_snippet_2\n\nLANGUAGE: custom-config\nCODE:\n```\n</Geom> type = \n\t[__usdPrimInfo]\n\t\t[isLoaded]\n\t\t\t1\n\t\t[specifier]\n\t\t\tdef\n\t\t[typeName]\n\t\t\tXform\n\t[primOrigin]\n\t\t[scenePath]\n\t\t\tHdPrimOriginSchema::OriginPath(/Geom)\n\t[primvars]\n```\n\n----------------------------------------\n\nTITLE: Setting USD Project Variables in CMake\nDESCRIPTION: This CMake snippet defines two variables, `PXR_PREFIX` and `PXR_PACKAGE`, setting them to \"pxr/usd\" and \"usd\" respectively. These variables are likely used throughout the USD CMake build system to manage project structure, naming conventions, or file paths. Requires a CMake environment.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdstitch/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usd)\n```\n\n----------------------------------------\n\nTITLE: Registering VDF Test with Environment Variable in CMake\nDESCRIPTION: This snippet demonstrates how to register a VDF test with a specific environment variable setting. The testVdfExecutionTypeRegistry test is configured to run with TF_FATAL_VERIFY set to 0, which likely affects the behavior of fatal assertions in the test.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/vdf/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testVdfExecutionTypeRegistry\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testVdfExecutionTypeRegistry\"\n    EXPECTED_RETURN_CODE 0\n    ENV\n      TF_FATAL_VERIFY=0\n)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /Parent2/Sibling Prim\nDESCRIPTION: Shows the prim stack for the composed prim at path </Parent2/Sibling>, reflecting its inherited sources.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Parent2/Sibling>\n\nPrim Stack:\n    root.sdf             /Parent2/Sibling\n    root.sdf             /PI/Sibling\n    ref.sdf              /PR/Sibling\n    root.sdf             /PIS/Sibling\n    root.sdf             /PISI/Sibling\n    root.sdf             /PS/Sibling\n    root.sdf             /PSI/Sibling\n```\n\n----------------------------------------\n\nTITLE: Finalizing USD Project Build Configuration\nDESCRIPTION: Completes the project configuration by calling the epilogue function which may perform cleanup or final setup tasks.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\npxr_toplevel_epilogue()\n```\n\n----------------------------------------\n\nTITLE: Tapered Capsule Definition\nDESCRIPTION: Specifies a tapered capsule shape with bottom radius 0.5, top radius 0.3, height 2, and sweep 120, including detailed topology and vertex coordinates.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/geomUtil/testenv/testMeshGenerators/baseline/generatedMeshes_open.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nbottomRadius = 0.5, topRadius = 0.3, height = 2, sweep = 120\n\nTopology:\n  (rightHanded, catmullClark, [...])\n\nPoints:\n  [(0, 0, -1.5524938), (0.20380278, 0, -1.5093086), ...]\n```\n\n----------------------------------------\n\nTITLE: Initial Layer Stack\nDESCRIPTION: Displays the layer stack contributing to the composition, starting with the root layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building usdPhysicsValidators Library with CMake\nDESCRIPTION: Sets up the CMake configuration for building the usdPhysicsValidators library, which is part of the OpenUSD project's validation framework. The library depends on several core USD components and includes validators for physics-related USD data.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/usdPhysicsValidators/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usdValidation)\nset(PXR_PACKAGE usdPhysicsValidators)\n\npxr_library(usdPhysicsValidators\n    LIBRARIES\n        tf\n        plug\n        sdf\n        usd\n        usdGeom\n        usdPhysics\n        usdValidation\n\n    PUBLIC_CLASSES\n        validatorTokens\n        \n    PUBLIC_HEADERS\n        api.h\n\n    CPPFILES\n        validators.cpp\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring HioAvif Tests\nDESCRIPTION: Sets up test environment, builds test executable, and registers test case for the HioAvif plugin with expected return code checking.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/plugin/hioAvif/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testHioAvif\n    DEST testHioAvif\n)\n\npxr_build_test(testHioAvif\n    LIBRARIES\n        hio\n    CPPFILES\n        testenv/testHioAvif.cpp\n)\n\npxr_register_test(testHioAvif\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHioAvif\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TsRegressionPreventer SetResult Parameters in YAML\nDESCRIPTION: Defines parameters for the `TsRegressionPreventer::SetResult` function, likely used in regression testing for spline evaluation within the OpenUSD Ts library. It specifies details about pre and post segments existence and adjustment status for active and opposite sides, along with their adjusted widths.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReplaceKeepRatio_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: false\n  havePreSegment: true\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.250000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.250000\n  havePostSegment: true\n  postActiveAdjusted: false\n  postActiveAdjustedWidth: 0.250000\n  postOppositeAdjusted: false\n  postOppositeAdjustedWidth: 0.250000\n```\n\n----------------------------------------\n\nTITLE: Installing LZ4 using Make commands\nDESCRIPTION: Commands to build and install LZ4 using Make. The installation command may require root permissions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/pxrLZ4/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake\nmake install     # this command may require root permissions\n```\n\n----------------------------------------\n\nTITLE: Composing _Class_KnotRig Prim in USD\nDESCRIPTION: This snippet shows the composition results for the _Class_KnotRig prim within the TentacleInterface. It includes the prim stack and child names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsAndRelocates5.testenv/baseline/compositionResults_TrickyInheritsAndRelocates5.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </CharRig/Rig/TentaclesRig/TentacleRigs/R1TentacleRig/TentacleInterface/_Class_KnotRig>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface/_Class_KnotRig\n    TentacleRig.sdf      /TentacleRig/TentacleInterface/_Class_KnotRig\n\nChild names:\n     ['Anim']\n```\n\n----------------------------------------\n\nTITLE: Defining Spline Shape and Extrapolation Modes - Config/Text\nDESCRIPTION: Encodes spline segment parameters including hermite interpolation flag, pre- and post-extrapolation methods, and explicit knot location, value, and slope information. This snippet is likely parsed or processed by animation or curve configuration tools. Inputs are descriptive parameters for the spline and each knot, outputs are values passed to spline evaluators. Limitations: Not a procedural script, but data-only.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveMayaTansNone_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  0.000000: 0.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.000000, postLen 1.300000, auto false / false\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.800000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Setting up execUsd Package Configuration in CMake\nDESCRIPTION: Defines the package prefix and name for the execUsd library in OpenUSD, establishing the namespace and organization for the components that follow.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/execUsd/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/exec)\nset(PXR_PACKAGE execUsd)\n```\n\n----------------------------------------\n\nTITLE: Regression Prevention Configuration in YAML\nDESCRIPTION: Configuration settings for a regression prevention test showing segment adjustments and widths for pre and post conditions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/MoveStartLimitActive_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: true\n  havePreSegment: false\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.000000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.000000\n  havePostSegment: true\n  postActiveAdjusted: true\n  postActiveAdjustedWidth: 0.199994\n  postOppositeAdjusted: true\n  postOppositeAdjustedWidth: 0.799994\n```\n\n----------------------------------------\n\nTITLE: Logging Event Processing in Reverse Order\nDESCRIPTION: This snippet shows the log output for processing events in reverse order, from position 200 back to 102. Each line represents a single event with its begin and end positions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/trace/testenv/testTraceEventContainer.testenv/baseline/testTraceEventContainer-Run1-stdout.txt#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nReverse\n    Found event\n        Begin: 199\n        End: 200\n    Found event\n        Begin: 198\n        End: 199\n    Found event\n        Begin: 197\n        End: 198\n    ...\n    Found event\n        Begin: 103\n        End: 104\n    Found event\n        Begin: 102\n        End: 103\n    Found event\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra DataSourceLocator Test Build in CMake\nDESCRIPTION: Defines the build configuration for testing Hydra's data source locator functionality. This test validates the system for locating and accessing data sources within the Hydra framework.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testHdDataSourceLocator\n   LIBRARIES\n       hd\n\n   CPPFILES\n       testenv/testHdDataSourceLocator.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Draco-based USD Diff Tests in CMake\nDESCRIPTION: Sets up conditional tests for Draco file comparisons using the usddiff tool, which are only included if the Draco plugin is enabled.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddiff/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (PXR_BUILD_DRACO_PLUGIN)\n    pxr_register_test(testUsdDiffWithDracoFiles\n    PYTHON\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usddiff --noeffect CubeWithGenericPrimvars.drc CubeWithGenericPrimvars.drc\"\n        EXPECTED_RETURN_CODE 0\n        PRE_PATH\n            ${CMAKE_INSTALL_PREFIX}/bin\n    )\n\n    # ... more Draco-related tests ...\n\nelse()\n    message(STATUS \"Skipping Draco-based usddiff tests because PXR_BUILD_DRACO_PLUGIN=OFF\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering Test for USD Resolver Example in CMake\nDESCRIPTION: This snippet registers the test for the USD resolver example. It specifies the test command, expected return code, and sets up environment variables needed for the test execution.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/examples/usdResolverExample/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdResolverExample\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdResolverExample\"\n    EXPECTED_RETURN_CODE 0\n    ENV\n        ${PXR_PLUGINPATH_NAME}=${CMAKE_INSTALL_PREFIX}/share/usd/examples/plugin/usdResolverExample/resources\n        USD_RESOLVER_EXAMPLE_ASSET_DIR=./assets\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the usdVol Library Dependencies and Files in CMake\nDESCRIPTION: This snippet uses the `pxr_library` function (specific to the OpenUSD build system) to define the `usdVol` library. It specifies dependencies on the `tf`, `usd`, and `usdGeom` libraries, indicates inclusion of schema files, lists `api.h` as a public header, includes Python module files (`__init__.py`), and references Doxygen documentation (`overview.dox`).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdVol/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_library(usdVol\n    INCLUDE_SCHEMA_FILES\n\n    LIBRARIES\n        tf\n        usd\n        usdGeom\n\n    PUBLIC_HEADERS\n        api.h\n\n    PYMODULE_FILES\n        __init__.py\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake for USD Components\nDESCRIPTION: This CMake snippet adds the plugin and shaders subdirectories to the build process. It ensures that the build system will process the CMakeLists.txt files in each of these directories, compiling their contents as part of the project.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(plugin)\nadd_subdirectory(shaders)\n```\n\n----------------------------------------\n\nTITLE: Spline Definition - Inner and Extrap Loops\nDESCRIPTION: Complex spline configuration with both inner loops and extrapolation loops. Uses LoopRepeat for pre-extrapolation and LoopOscillate for post-extrapolation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nSpline: InnerAndExtrapLoops\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap LoopRepeat\n  post extrap LoopOscillate\nLoop:\n  start 100, end 110, numPreLoops 2, numPostLoops 2, valueOffset -5\nKnot:\n  value type double\n  curve type Bezier\n  time 100\n  value 20\n  next interp Curve\n  pre-tan width 2\n  pre-tan slope 2\n  post-tan width 2\n  post-tan slope 2\nKnot:\n  value type double\n  curve type Bezier\n  time 105\n  value 10\n  next interp Curve\n  pre-tan width 2.5\n  pre-tan slope 1.5\n  post-tan width 2.5\n  post-tan slope 1.5\n```\n\n----------------------------------------\n\nTITLE: Composition Result for /SingleRef\nDESCRIPTION: Displays the composition results for the prim '/SingleRef'. The prim stack shows that '/SingleRef' defined in 'root.sdf' references '/A' defined in 'A.sdf'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ExpressionsInReferences.testenv/baseline/compositionResults_ExpressionsInReferences.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </SingleRef>\n\nPrim Stack:\n    root.sdf             /SingleRef\n    A.sdf                /A\n\n------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: USD Composition Error Log for /RigClass (Text)\nDESCRIPTION: Reports an error during USD composition for the prim path '/RigClass'. It indicates that the layer 'TrickyInheritsAndRelocatesToNewRootPrim/root.sdf' possesses an invalid opinion at the relocation source path '/Rig/RigClass', which will be ignored by the composition process.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsAndRelocatesToNewRootPrim.testenv/baseline/compositionErrors_TrickyInheritsAndRelocatesToNewRootPrim.txt#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nErrors while composing </RigClass>\n\nThe layer @TrickyInheritsAndRelocatesToNewRootPrim/root.sdf@ has an invalid opinion at the relocation source path </Rig/RigClass>, which will be ignored.\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Registration Based on Build Type\nDESCRIPTION: This snippet shows how certain tests are only registered for shared library builds, demonstrating conditional test registration based on build configuration.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif (BUILD_SHARED_LIBS)\n    pxr_register_test(testUsdResolverChanged\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdResolverChanged\"\n        EXPECTED_RETURN_CODE 0\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: IndirectDrawBatchTest Output Log\nDESCRIPTION: Output from IndirectDrawBatchTest showing memory and performance metrics across multiple stages: begin, batched, executed, and clear all. Tracks resource allocation, garbage collection, and draw calls.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStDrawBatching/baseline/testHdStDrawBatching-Run1-stdout.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n==== IndirectDrawBatchTest:\n----- begin -----\nnonUniformSize, 0\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 0\nsingleBufferSize, 0\ntextureMemory, 0\ngarbageCollected = 0\ndrawCalls = 0\nnum batches: 5\n----- batched -----\nnonUniformSize, 1512\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 0\nprimvar, 4240\nsingleBufferSize, 0\ntextureMemory, 0\ntopology, 472\ngarbageCollected = 0\ndrawCalls = 0\n----- executed -----\ndrawIndirect, 600\ndrawIndirectCull, 600\ndrawIndirectResult, 20\nnonUniformSize, 1512\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 0\nprimvar, 4240\nsingleBufferSize, 0\ntextureMemory, 0\ntopology, 472\ngarbageCollected = 0\ndrawCalls = 5\n----- clear all -----\nnonUniformSize, 0\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 0\nsingleBufferSize, 0\ntextureMemory, 0\ngarbageCollected = 1\ndrawCalls = 5\n```\n\n----------------------------------------\n\nTITLE: Composing Child </Good_SubrootRefToRelocated/Child> under Referencing Prim\nDESCRIPTION: Displays the composition results for </Good_SubrootRefToRelocated/Child>, a child prim under a prim that references a relocated target. The prim stack shows that this child prim inherits its definition directly from the corresponding child </Char/Relocated/Child> within the referenced (and relocated) prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_RelocateToNone.testenv/baseline/compositionResults_RelocateToNone_usd.txt#2025-04-23_snippet_4\n\nLANGUAGE: usd-composition-output\nCODE:\n```\nResults for composing </Good_SubrootRefToRelocated/Child>\n\nPrim Stack:\n    root.sdf             /Char/Relocated/Child\n    model.sdf            /Model/ToBeRelocated/Child\n```\n\n----------------------------------------\n\nTITLE: Sampling Bezier Curve with Inner Loop Post-Echo\nDESCRIPTION: Test case showing point data for a Bezier curve with inner loop post-echo sampling. The data represents point coordinates sampled from time 110 to 130 with fine increments.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_51\n\nLANGUAGE: data\nCODE:\n```\n2: (TsSourceInnerLoopPostEcho)\n    (110, 15)\n    (110.3582763671875, 15.50567626953125)\n    (110.52583312988281, 15.587150573730469)\n    (110.6865234375, 15.56494140625)\n    (110.9898681640625, 15.24114990234375)\n    (111.2734375, 14.59765625)\n    (111.8017578125, 12.60498046875)\n    (112.3125, 10.09375)\n    (112.8466796875, 7.57080078125)\n    (113.4453125, 5.54296875)\n    (113.7816162109375, 4.87310791015625)\n    (114.1494140625, 4.51708984375)\n    (114.34672546386719, 4.476570129394531)\n    (114.5538330078125, 4.53826904296875)\n    (115, 5)\n    (115.8505859375, 6.12744140625)\n    (116.5546875, 6.80078125)\n    (117.1533203125, 7.17529296875)\n    (117.6875, 7.40625)\n    (118.1982421875, 7.64892578125)\n    (118.7265625, 8.05859375)\n    (119.3134765625, 8.79052734375)\n    (120, 10)\n    (120.3582763671875, 10.50567626953125)\n    (120.52583312988281, 10.587150573730469)\n    (120.6865234375, 10.56494140625)\n    (120.9898681640625, 10.24114990234375)\n    (121.2734375, 9.59765625)\n    (121.8017578125, 7.60498046875)\n    (122.3125, 5.09375)\n    (122.8466796875, 2.57080078125)\n    (123.4453125, 0.54296875)\n    (123.7816162109375, -0.12689208984375)\n    (124.1494140625, -0.48291015625)\n    (124.34672546386719, -0.5234298706054688)\n    (124.5538330078125, -0.46173095703125)\n    (125, 0)\n    (125.8505859375, 1.12744140625)\n    (126.5546875, 1.80078125)\n    (127.1533203125, 2.17529296875)\n    (127.6875, 2.40625)\n    (128.1982421875, 2.64892578125)\n    (128.7265625, 3.05859375)\n    (129.3134765625, 3.79052734375)\n    (130, 5)\n```\n\n----------------------------------------\n\nTITLE: Setting Up USD Tree Not Flattened Test in CMake\nDESCRIPTION: Configures a test for USD Tree without flattening, including unloaded, attributes, and metadata options.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdtree/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdTreePayload\n    DEST testUsdTreeNotFlattened\n)\n\npxr_register_test(testUsdTreeNotFlattened\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdtree --unloaded --attributes --metadata input.usda\"\n    STDOUT_REDIRECT output_notflattened.txt\n    DIFF_COMPARE output_notflattened.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Content Panels\nDESCRIPTION: ReStructuredText markup defining the main navigation panels for USD documentation, including sections for getting started, downloads, and learning resources.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/index_body.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. panels::\n   :container: container-fluid p-0 mb-4\n   :column: col-lg-4 p-0\n   :card: + m-1\n   :header: text-secondary font-weight-bold\n   \n   :fa:`power-off` Get Started\n   ^^^^^^^^^^^\n   - :doc:`intro`\n   - :doc:`Tutorials <tut_usd_tutorials>`\n   - :doc:`FAQ <usdfaq>`\n   - :doc:`Toolset <toolset>`\n\n   -----------------------------------\n\n   :fa:`download` Download\n   ^^^^^^^^\n   - `Get and Build USD <https://github.com/PixarAnimationStudios/OpenUSD/blob/release/README.md#getting-and-building-the-code>`_\n   - Source: `Release <https://github.com/PixarAnimationStudios/OpenUSD/tree/release>`_ (`Changes <https://github.com/PixarAnimationStudios/OpenUSD/blob/release/CHANGELOG.md#change-log>`__)\n   - Source: `Dev <https://github.com/PixarAnimationStudios/OpenUSD/tree/dev>`_ (`Changes <https://github.com/PixarAnimationStudios/OpenUSD/blob/dev/CHANGELOG.md#change-log>`__)\n   - :ref:`Demo Assets <dl_downloads:Assets>`\n\n   -----------------------------------\n\n   :fa:`book` Learn\n   ^^^^^^^^^^^^^\n   - `Learning Content on the USD Working Group Wiki <https://wiki.aswf.io/display/WGUSD/Learning+Content>`_\n   - :doc:`Terms and Concepts <glossary>`\n   - `API Documentation <api/index.html>`_\n   - `OpenUSD Forum <https://forum.openusd.org>`_\n   - :doc:`Specifications <spec>`\n   - :doc:`Proposals <wp>`\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenUSD Library with CMake\nDESCRIPTION: This CMake snippet sets up the configuration for an OpenUSD library. It defines the PXR prefix and package name, and uses the pxr_library macro to specify the library's components, including schema files, dependency libraries, C++ files, and Python module files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/codegenTemplates/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX {{ pxrPrefix }})\nset(PXR_PACKAGE {{ libraryName }})\n\npxr_library({{ libraryName }}\n    INCLUDE_SCHEMA_FILES\n\n    LIBRARIES\n        # List dependency libraries\n\n    CPPFILES\n        # List non-schema cpp files\n\n    PYMODULE_FILES\n        __init__.py\n)\n```\n\n----------------------------------------\n\nTITLE: FourThirdOneThird Bezier Spline Definition\nDESCRIPTION: Configuration for a FourThirdOneThird Bezier spline with Held extrapolation. The knots are defined at time=0 and time=1 with specific tangent widths (1.333 and 0.333) that determine the shape of the curve.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_102\n\nLANGUAGE: raw\nCODE:\n```\nSpline: FourThirdOneThird\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 1.3333333333333333\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 0.3333333333333333\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /Parent/Child Prim\nDESCRIPTION: Details the prim stack for the composed prim at path </Parent/Child>. It shows the extensive list of prim specs from various layers (root.sdf, ref.sdf) and paths that contribute to this child prim due to inheritance and composition arcs.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Parent/Child>\n\nPrim Stack:\n    root.sdf             /Parent/Child\n    root.sdf             /Parent/Sibling\n    root.sdf             /PI/Sibling\n    root.sdf             /PI/Child\n    ref.sdf              /PR/Child\n    ref.sdf              /PR/Sibling\n    root.sdf             /PIS/Sibling\n    root.sdf             /PISI/Sibling\n    root.sdf             /PIS/Child\n    root.sdf             /PISI/Child\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration\nDESCRIPTION: Configures the hioOiio plugin build with required libraries, include directories, source files, and resources using the pxr_plugin macro.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/plugin/hioOiio/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npxr_plugin(hioOiio\n    LIBRARIES\n        ar\n        arch\n        gf\n        hio\n        tf\n        ${OIIO_LIBRARIES}\n        ${__OIIO_IMATH_LIBS}\n\n    INCLUDE_DIRS\n        ${OIIO_INCLUDE_DIRS}\n        ${__OIIO_IMATH_INCLUDE}\n\n    CPPFILES\n        oiioImage.cpp\n        metadata.cpp\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Boost Library Components for OpenUSD\nDESCRIPTION: Configures the Boost library with necessary public headers and a workaround for header-only libraries. Disables precompiled headers for this library component.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/external/boost/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_library(boost\n    PUBLIC_HEADERS\n        python.hpp\n\n    CPPFILES\n        # Workaround lack of build support for header-only libs.\n        build-workaround.cpp\n\n    DISABLE_PRECOMPILED_HEADERS\n)\n```\n\n----------------------------------------\n\nTITLE: USD Composition Error Log for /Rig/Anim/BadRigInstance (Text)\nDESCRIPTION: Details a composition error for '/Rig/Anim/BadRigInstance'. It states that inheritance from '/Rig/RigClass' (defined in 'TrickyInheritsAndRelocatesToNewRootPrim/root.sdf') is prohibited because '/Rig/RigClass' is a relocation source, and allowing opinions from relocation sources is restricted in this context.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsAndRelocatesToNewRootPrim.testenv/baseline/compositionErrors_TrickyInheritsAndRelocatesToNewRootPrim.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nErrors while composing </Rig/Anim/BadRigInstance>\n\n@TrickyInheritsAndRelocatesToNewRootPrim/root.sdf@</Rig/Anim/BadRigInstance>\nCANNOT inherit from:\n@TrickyInheritsAndRelocatesToNewRootPrim/root.sdf@</Rig/RigClass>\nwhich is a prohibited child of its parent because it would require allowing opinions from the source of a relocation at @TrickyInheritsAndRelocatesToNewRootPrim/root.sdf@</Rig/RigClass>.\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </A> in OpenUSD\nDESCRIPTION: This snippet demonstrates the composition of prim </A>, showing its prim stack, child names, property names, property stacks, and relationship targets across different layers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicListEditing.testenv/baseline/compositionResults_BasicListEditing_usd.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nPrim Stack:\n    root.sdf             /A\n    sub1.sdf             /A\n    sub2.sdf             /A\n    root.sdf             /root_prepend\n    sub1.sdf             /sub1_prepend\n    sub2.sdf             /sub2_prepend\n    sub2.sdf             /sub2_append\n    sub1.sdf             /sub1_append\n    root.sdf             /root_append\n\nChild names:\n     ['z', 'a', 'x', 'f', 'y', 'b', 'c']\n\nProperty names:\n     ['targets', 'x', 'y', 'z', 'a', 'b', 'c', 'f']\n\nProperty stacks:\n/A.a:\n    sub1.sdf             /A.a\n/A.b:\n    sub1.sdf             /A.b\n/A.c:\n    sub1.sdf             /A.c\n/A.f:\n    root.sdf             /A.f\n/A.targets:\n    root.sdf             /A.targets\n    root.sdf             /root_prepend.targets\n    sub1.sdf             /sub1_prepend.targets\n    sub2.sdf             /sub2_prepend.targets\n    sub2.sdf             /sub2_append.targets\n    sub1.sdf             /sub1_append.targets\n    root.sdf             /root_append.targets\n/A.x:\n    sub2.sdf             /A.x\n/A.y:\n    sub2.sdf             /A.y\n/A.z:\n    sub2.sdf             /A.z\n\nRelationship targets:\n/A.targets:\n    /A/root_prepend\n    /A/sub1_prepend\n    /A/sub2_prepend\n    /A/sub2_append\n    /A/sub1_append\n    /A/root_append\n```\n\n----------------------------------------\n\nTITLE: Defining RigidBodyChecker for UsdPhysics\nDESCRIPTION: Documentation for a validator that validates all UsdPhysicsRigidBodyAPIs applied to a prim to ensure proper rigid body physics setup.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n[usdPhysicsValidators:RigidBodyChecker]:\n\tDoc: Validates all of the UsdPhysicsRigidBodyAPIs applied to a prim.\n\tKeywords: UsdPhysicsValidators, UsdPhysicsRigidBodyAPI\n\tSchemaTypes: UsdPhysicsRigidBodyAPI\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Loading USD Layer File Path\nDESCRIPTION: Specifies the path to the root USD layer file being loaded for composition analysis. The `@` symbols often denote layer identifiers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndVariants.testenv/baseline/compositionResults_SpecializesAndVariants.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n@SpecializesAndVariants/root.sdf@\n```\n\n----------------------------------------\n\nTITLE: Including Basic CMake Configuration Modules for USD\nDESCRIPTION: Includes fundamental CMake modules that define build options, project defaults, and package dependencies for the USD project.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(Options)\ninclude(ProjectDefaults)\ninclude(Packages)\n```\n\n----------------------------------------\n\nTITLE: Removing Asset Info Functions - C++\nDESCRIPTION: Functions being removed related to asset info handling which is being consolidated into the resolve functions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_ar2.rst#2025-04-23_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nArResolver::ResolveWithAssetInfo\nArResolver::UpdateAssetInfo\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PS/Child Prim\nDESCRIPTION: Shows the prim stack for the composed prim at path </PS/Child>, inheriting from /PSI/Child.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PS/Child>\n\nPrim Stack:\n    root.sdf             /PS/Child\n    root.sdf             /PSI/Child\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenUSD Build Directories with CMake\nDESCRIPTION: CMake script that adds subdirectories for different OpenUSD components. Conditionally includes the imaging module based on the PXR_BUILD_IMAGING flag.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(performance)\nadd_subdirectory(usd)\nif (${PXR_BUILD_IMAGING})\n    add_subdirectory(imaging)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing USD Alembic Test Directories in CMake\nDESCRIPTION: Sets up the installation of test directories for various USD Alembic test scenarios, ensuring that test data is properly deployed.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/plugin/usdAbc/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdAbcAlembicData\n    DEST testUsdAbcAlembicData\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdAbcBugs\n    DEST testUsdAbcBugs\n)\n\n# ... (additional test directory installations)\n\npxr_install_test_dir(\n    SRC testenv/testUsdAbcXformPrimCollapsing\n    DEST testUsdAbcXformPrimCollapsing\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Spline Data Object in Python\nDESCRIPTION: Instantiates a Ts.TsTest_SplineData object with detailed parameters for spline interpolation. It includes extrapolation methods, knot points with precise floating-point values, and interpolation settings for each segment.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/NoopContain_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.999999999999ap-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.999999999999ap-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Windows USD Installation Directory Structure\nDESCRIPTION: Example directory layout for USD installation on Windows, showing DLL and plugin organization.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/usdfaq.rst#2025-04-23_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nC:\\MyPrograms\\MyCustomUSDTool\\MyCustomTool.exe\nC:\\MyPrograms\\MyCustomUSDTool\\tbb.dll\nC:\\MyPrograms\\MyCustomUSDTool\\usd_ar.dll\nC:\\MyPrograms\\MyCustomUSDTool\\(...remaining USD DLLs...)\nC:\\MyPrograms\\MyCustomUSDTool\\usd\\plugInfo.json\nC:\\MyPrograms\\MyCustomUSDTool\\usd\\ar\\resources\\plugInfo.json\nC:\\MyPrograms\\MyCustomUSDTool\\usd\\(...remaining core USD plugin directories and files...)\nC:\\MyPrograms\\MyCustomUSDTool\\usd\\(...other non-core plugin directories as needed...)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Composition Errors for </FaceRig/BrowRig/LBrow/BrowInnUDPosBrowInnUDNeg_sculpt>\nDESCRIPTION: This section details composition errors for a specific prim within a face rig structure. The errors originate from attribute connections defined in '@ErrorInvalidInstanceTargetPath/ref.sdf@'. One connection from a class attribute (</BrowRig/SymBrow/BrowInnUDPosBrowInnUDNeg_sculpt.amount>) targets an instance attribute (</BrowRig/Anim/RBrow.InnUD>), which is invalid. Another connection to </BrowRig/Anim/LBrow.InnUD> is marked as invalid, potentially because it refers to a pre-relocation path. Both are ignored.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInvalidInstanceTargetPath.testenv/baseline/compositionErrors_ErrorInvalidInstanceTargetPath.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nErrors while composing </FaceRig/BrowRig/LBrow/BrowInnUDPosBrowInnUDNeg_sculpt>\n\nThe attribute connection </BrowRig/Anim/RBrow.InnUD> from </BrowRig/SymBrow/BrowInnUDPosBrowInnUDNeg_sculpt.amount> in layer @ErrorInvalidInstanceTargetPath/ref.sdf@ is authored in a class but refers to an instance of that class.  Ignoring.\nThe attribute connection </BrowRig/Anim/LBrow.InnUD> from </BrowRig/SymBrow/BrowInnUDPosBrowInnUDNeg_sculpt.amount> in layer @ErrorInvalidInstanceTargetPath/ref.sdf@ is invalid.  This may be because the path is the pre-relocated source path of a relocated prim.  Ignoring.\n```\n\n----------------------------------------\n\nTITLE: Tabulating Evaluated Spline Curve Values - Text\nDESCRIPTION: Represents a tabular mapping of evaluated parameter values (inputs) to spline curve outputs across a sampled domain. Each row contains a domain point and its evaluated curve value, used for regression validation against code or analytic curve expectation. There are no explicit dependencies, but context assumes this data validates the spline configuration and SplineData object declared above. Input: float sample values. Output: expected evaluated curve values. May be processed by an automated testing pipeline or visually checked.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveMayaTansNone_TsTestBaseline.txt#2025-04-23_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n-0.200000 0.000000\n0.000000 0.000000\n0.004975 0.000006\n0.009950 0.000023\n0.014925 0.000052\n0.019900 0.000093\n0.024876 0.000145\n0.029851 0.000210\n0.034826 0.000287\n0.039801 0.000377\n0.044776 0.000479\n0.049751 0.000594\n0.054726 0.000721\n0.059701 0.000862\n0.064677 0.001016\n0.069652 0.001184\n0.074627 0.001365\n0.079602 0.001560\n0.084577 0.001768\n0.089552 0.001991\n0.094527 0.002229\n0.099502 0.002481\n0.104478 0.002747\n0.109453 0.003029\n0.114428 0.003326\n0.119403 0.003638\n0.124378 0.003966\n0.129353 0.004310\n0.134328 0.004670\n0.139303 0.005046\n0.144279 0.005439\n0.149254 0.005849\n0.154229 0.006276\n0.159204 0.006720\n0.164179 0.007182\n0.169154 0.007662\n0.174129 0.008160\n0.179104 0.008677\n0.184080 0.009212\n0.189055 0.009767\n0.194030 0.010341\n0.199005 0.010935\n0.203980 0.011549\n0.208955 0.012183\n0.213930 0.012839\n0.218905 0.013515\n0.223881 0.014213\n0.228856 0.014933\n0.233831 0.015676\n0.238806 0.016441\n0.243781 0.017230\n0.248756 0.018042\n0.253731 0.018878\n0.258706 0.019739\n0.263682 0.020625\n0.268657 0.021536\n0.273632 0.022474\n0.278607 0.023438\n0.283582 0.024429\n0.288557 0.025448\n0.293532 0.026496\n0.298507 0.027572\n0.303483 0.028678\n0.308458 0.029814\n0.313433 0.030981\n0.318408 0.032179\n0.323383 0.033410\n0.328358 0.034673\n0.333333 0.035971\n0.338308 0.037303\n0.343284 0.038671\n0.348259 0.040074\n0.353234 0.041516\n0.358209 0.042995\n0.363184 0.044513\n0.368159 0.046072\n0.373134 0.047672\n0.378109 0.049315\n0.383085 0.051001\n0.388060 0.052732\n0.393035 0.054508\n0.398010 0.056333\n0.402985 0.058206\n0.407960 0.060129\n0.412935 0.062104\n0.417910 0.064133\n0.422886 0.066217\n0.427861 0.068358\n0.432836 0.070558\n0.437811 0.072818\n0.442786 0.075142\n0.447761 0.077530\n0.452736 0.079987\n0.457711 0.082513\n0.462687 0.085112\n0.467662 0.087787\n0.472637 0.090540\n0.477612 0.093375\n0.482587 0.096295\n0.487562 0.099304\n0.492537 0.102405\n0.497512 0.105604\n0.502488 0.108904\n0.507463 0.112310\n0.512438 0.115827\n0.517413 0.119462\n0.522388 0.123220\n0.527363 0.127109\n0.532338 0.131134\n0.537313 0.135305\n0.542289 0.139630\n0.547264 0.144119\n0.552239 0.148782\n0.557214 0.153631\n0.562189 0.158680\n0.567164 0.163943\n0.572139 0.169437\n0.577114 0.175180\n0.582090 0.181194\n0.587065 0.187503\n0.592040 0.194136\n0.597015 0.201124\n0.601990 0.208508\n0.606965 0.216332\n0.611940 0.224652\n0.616915 0.233534\n0.621891 0.243060\n0.626866 0.253336\n0.631841 0.264494\n0.636816 0.276713\n0.641791 0.290236\n0.646766 0.305410\n0.651741 0.322761\n0.656716 0.343152\n0.661692 0.368173\n0.666667 0.401429\n0.671642 0.455837\n0.676617 0.709192\n0.681592 0.763010\n0.686567 0.793086\n0.691542 0.814808\n0.696517 0.831999\n0.701493 0.846278\n0.706468 0.858502\n0.711443 0.869185\n0.716418 0.878661\n0.721393 0.887165\n0.726368 0.894863\n0.731343 0.901882\n0.736318 0.908319\n0.741294 0.914253\n0.746269 0.919743\n0.751244 0.924842\n0.756219 0.929591\n0.761194 0.934025\n0.766169 0.938175\n0.771144 0.942065\n0.776119 0.945719\n0.781095 0.949155\n0.786070 0.952390\n0.791045 0.955440\n0.796020 0.958317\n0.800995 0.961034\n0.805970 0.963601\n0.810945 0.966026\n0.815920 0.968320\n0.820896 0.970490\n0.825871 0.972542\n0.830846 0.974484\n0.835821 0.976321\n0.840796 0.978059\n0.845771 0.979702\n0.850746 0.981255\n0.855721 0.982723\n0.860697 0.984110\n0.865672 0.985418\n0.870647 0.986652\n0.875622 0.987815\n0.880597 0.988909\n0.885572 0.989938\n0.890547 0.990904\n0.895522 0.991809\n0.900498 0.992657\n0.905473 0.993448\n0.910448 0.994185\n0.915423 0.994870\n0.920398 0.995505\n0.925373 0.996092\n0.930348 0.996631\n0.935323 0.997125\n0.940299 0.997575\n0.945274 0.997983\n0.950249 0.998350\n0.955224 0.998676\n0.960199 0.998964\n0.965174 0.999215\n0.970149 0.999428\n0.975124 0.999607\n0.980100 0.999751\n0.985075 0.999861\n1.000000 1.000000\n1.200000 1.000000\n```\n\n----------------------------------------\n\nTITLE: Defining the execUsd Library with Dependencies and Components\nDESCRIPTION: Configures the execUsd library with its dependencies, public headers, class declarations, and resource files. This defines the structure of the library including both public and private components.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/execUsd/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_library(execUsd\n    LIBRARIES\n        esf\n        usd\n        \n    PUBLIC_HEADERS\n        api.h\n\n    PUBLIC_CLASSES\n        sceneAdapter\n\n    PRIVATE_CLASSES\n        attribute\n        object\n        prim\n        property\n        stage\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Subdiv Tag Test with Catmull-Clark Scheme\nDESCRIPTION: Results from testing subdivision tags with Catmull-Clark subdivision on a complex mesh with right-handed orientation. The output displays the index results and vertex coordinates at different subdivision levels.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStSubdivisionOsd3/baseline/testHdStSubdivisionOsd3-Run1-stdout.txt#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nSubdiv Tag Test\nTest subdivTag\nScheme catmullClark\nOrientation rightHanded\nGPU subdivision = 0\nIndex Results\n[11, 27, 22, 30, 27, 12, 28, 22, 22, 28, 13, 29, 30, 22, 29, 14, 15, 32, 24, 36, 32, 16, 34, 24, 24, 34, 17, 35, 36, 24, 35, 18, 13, 37, 25, 31, 37, 19, 38, 25, 25, 38, 20, 39, 31, 25, 39, 16, 16, 39, 26, 34, 39, 20, 40, 26, 26, 40, 21, 41, 34, 26, 41, 17]\nResults\n[(-1, 0, 1), (-1, 0, 0), (-0.5, 0, 0), (-0.5, 0, 1), (0, 0, 1), (0.5, 0, 0), (1, 0, 0), (1, 0, 1), (-0.5, 0, -1), (0, 0, -1), (1, 0, -1), (-0.9375, 0, 0.875), (-0.9375, 0, 0.125), (-0.5, 0, 0), (-0.5, 0, 1), (0.0625, 0, 1), (0.5, 0, 0), (1, 0, 0), (0.875, 0, 0.875), (-0.4375, 0, -0.875), (0.0625, 0, -1), (0.875, 0, -0.875), (-0.75, 0, 0.5), (-0.125, 0, 0.5), (0.625, 0, 0.5), (-0.125, 0, -0.5), (0.625, 0, -0.5), (-1, 0, 0.5), (-0.75, 0, 0), (-0.5, 0, 0.5), (-0.75, 0, 1), (-0.0625, 0, 0), (0.25, 0, 0.5), (-0.25, 0, 1), (0.6875, 0, 0), (1, 0, 0.5), (0.5, 0, 1), (-0.5, 0, -0.5), (-0.25, 0, -1), (0.25, 0, -0.5), (0.5, 0, -1), (1, 0, -0.5)]\n```\n\n----------------------------------------\n\nTITLE: Analyzing PrimitiveIDMap Test Results\nDESCRIPTION: Test results for PrimitiveIDMap functionality showing the primitive parameter results and the decoded mapping. This output demonstrates how primitive IDs are mapped and decoded in the subdivision process.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStSubdivisionOsd3/baseline/testHdStSubdivisionOsd3-Run1-stdout.txt#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nPrimitiveIDMap Test\nPrimitiveParam Results\n[1, 3, 2, 4, 4, 4, 4, 9, 11, 11, 11, 10]\nDecoded map\n[0, 1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8]\n```\n\n----------------------------------------\n\nTITLE: Setting Project Prefix and Package for USD in CMake - CMake\nDESCRIPTION: This snippet sets two CMake variables: PXR_PREFIX and PXR_PACKAGE, which define the project path prefix ('pxr/usd') and package name ('usd') for the Pixar USD codebase. These variables are commonly used for directory structure and build configuration and must be set before target or module definition. No external dependencies beyond CMake are required. No inputs or outputs are produced; instead, the variables affect subsequent CMake processing.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/sdfdump/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usd)\n```\n\n----------------------------------------\n\nTITLE: Registering CMake Test for Pcp ErrorInconsistentProperties\nDESCRIPTION: Defines a CMake test named `testPcpMuseum_ErrorInconsistentProperties` using `pxr_register_test`. It runs `testPcpCompositionResults` with the `--usd` flag and specifies an error output file (`--errorFile`). The input scene `ErrorInconsistentProperties/root.sdf` is designed to trigger inconsistent property errors. Both standard output and the generated error file are compared against baseline files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testPcpMuseum_ErrorInconsistentProperties\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd --errorFile compositionErrors_ErrorInconsistentProperties_usd.txt ErrorInconsistentProperties/root.sdf\" \n    STDOUT_REDIRECT compositionResults_ErrorInconsistentProperties_usd.txt\n    DIFF_COMPARE compositionResults_ErrorInconsistentProperties_usd.txt compositionErrors_ErrorInconsistentProperties_usd.txt\n)\n```\n\n----------------------------------------\n\nTITLE: Building Test Shared Libraries for USD Validation\nDESCRIPTION: Creates test shared libraries for validation context and registry testing. These libraries are installed to the UsdValidationPlugins prefix and depend on the tf, usd, and usdValidation libraries.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/usdValidation/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_build_test_shared_lib(TestUsdValidationContextValidators\n    INSTALL_PREFIX UsdValidationPlugins\n    LIBRARIES\n        tf\n        usd\n        usdValidation\n\n    CPPFILES\n        testenv/testUsdValidationContextValidators.cpp\n)\n\npxr_build_test_shared_lib(TestUsdValidationRegistryPy\n    INSTALL_PREFIX UsdValidationPlugins\n    LIBRARIES\n        tf\n        usd\n        usdValidation\n\n    CPPFILES\n        testenv/testUsdValidationRegistryPy.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Registering UsdView Test with Error Output Comparison\nDESCRIPTION: Registers a test for UsdView that captures and compares error output against expected results. Useful for validating error handling for invalid file types and syntax errors.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdviewFileArguments5\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testInvalidFileArg.py invalidSyntax.usda\"\n    CLEAN_OUTPUT \"(?:[A-Za-z]:)?/.*(?=invalidSyntax)\"\n    STDERR_REDIRECT invalidSyntax_test_out\n    DIFF_COMPARE invalidSyntax_test_out\n    EXPECTED_RETURN_CODE 1\n    ENV\n        PXR_USDVIEW_SUPPRESS_STATE_SAVING=1\n)\n```\n\n----------------------------------------\n\nTITLE: Spline Definition - ExtrapLoopReset Mode\nDESCRIPTION: Definition of a Bezier spline with LoopReset extrapolation mode. Specifies knots at times 100, 105, and 110 with corresponding values and tangent information.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nSpline: ExtrapLoopReset\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap LoopReset\n  post extrap LoopReset\nKnot:\n  value type double\n  curve type Bezier\n  time 100\n  value 10\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 3\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 105\n  value 20\n  next interp Linear\n  pre-tan width 3\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 110\n  value 15\n  next interp Held\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Analyzing OpenUSD Prim Stack for SS2\nDESCRIPTION: Output showing the primitive stack for /SS2, displaying all layers that contribute to this prim's composition and the resolution order.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer3.txt#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nPrim Stack:\n    ss_48tcps.sdf        /SS2\n    ss_48tcps.sdf        /SS2\n    ss_48tcps.sdf        /SS2\n    ss_48tcps.sdf        /SS2\n    ref.sdf              /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_48tcps.sdf       /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_24tcps_12fps.sdf /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_12fps.sdf        /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n```\n\n----------------------------------------\n\nTITLE: USD Prim Composition for /A/Child\nDESCRIPTION: Shows the prim stack composition for the Child prim under /A, including variant selections.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantOverrideOfFallback.testenv/baseline/compositionResults_TrickyVariantOverrideOfFallback.txt#2025-04-23_snippet_2\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /A/Child\n    root.sdf             /A{vset1=selection}Child\n    root.sdf             /B/Child\n    root.sdf             /B{vset2=selection}Child\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Core Components Build\nDESCRIPTION: Defines and iterates through core USD component directories to include in the build process. The list includes core libraries like ar, sdf, usd, and various USD schemas and utilities.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(DIRS\n    ar\n    kind\n    sdf\n    ndr\n    sdr\n    pcp\n    usd\n    usdGeom\n    usdVol\n    usdMedia\n    usdShade\n    usdLux\n    usdProc\n    usdRender\n    usdHydra\n    usdRi\n    usdSemantics\n    usdSkel\n    usdUI\n    usdUtils\n    usdPhysics\n    plugin\n)\n\nforeach(d ${DIRS})\n    add_subdirectory(${d})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Registering Tests with Environment Variable Configuration in CMake\nDESCRIPTION: Registers tests that require specific environment variables to be set. This example shows the TfEnvSetting test with multiple environment variables configured for the test execution.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(TfEnvSetting\n    ENV\n        TF_TEST_BOOL_ENV_SETTING=1\n        TF_TEST_INT_ENV_SETTING=123\n        TF_TEST_STRING_ENV_SETTING=alpha\n        TF_ENV_SETTING_ALERTS_ENABLED=0\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTf TfEnvSetting\"\n    STDERR_REDIRECT debugTfEnvSettingStderr.txt\n    DIFF_COMPARE debugTfEnvSettingStderr.txt\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Test Directories for UsdView Tests\nDESCRIPTION: Series of pxr_install_test_dir commands that set up test directories for various UsdView tests. Each command copies source files from a source directory to a destination directory.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdviewAlive\n    DEST testUsdviewAlive\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenUSD Tutorial Installation with CMake\nDESCRIPTION: Sets up installation paths and subdirectories for OpenUSD tutorials. It checks if Python support is enabled and adds various tutorial subdirectories to the build.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/tutorials/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX tutorials)\nset(PXR_INSTALL_SUBDIR share/usd/tutorials)\n\nif (NOT PXR_ENABLE_PYTHON_SUPPORT)\n    message(STATUS \"Not installing tutorial scripts because PXR_ENABLE_PYTHON_SUPPORT=OFF\")\n    return()\nendif()\n        \nadd_subdirectory(authoringProperties)\nadd_subdirectory(authoringVariants)\nadd_subdirectory(convertingLayerFormats)\nadd_subdirectory(endToEnd)\nadd_subdirectory(helloWorld)\nadd_subdirectory(referencingLayers)\nadd_subdirectory(traversingStage)\n```\n\n----------------------------------------\n\nTITLE: Defining Code Generation Test Function in OpenUSD\nDESCRIPTION: Defines a CMake function that registers multiple code generation tests with various configurations. The function takes suffix and environment parameters and creates tests for mesh, curves, and points rendering with different options.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(register_codegen_tests suffix hgi_env)\n    pxr_register_test(testHdStCodeGen${suffix}_Mesh_Indirect\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStCodeGen --mesh\"\n        EXPECTED_RETURN_CODE 0\n        STDOUT_REDIRECT codegen_mesh_indirect.out\n        DIFF_COMPARE codegen_mesh_indirect.out\n        TESTENV testHdStCodeGen${suffix}\n        ENV\n            TF_DEBUG=HD_SAFE_MODE\n            ${hgi_env}\n    )\n    pxr_register_test(testHdStCodeGen${suffix}_Mesh_Indirect_SmoothNormals\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStCodeGen --mesh --smoothNormals\"\n        EXPECTED_RETURN_CODE 0\n        STDOUT_REDIRECT codegen_mesh_indirect_smoothNormals.out\n        DIFF_COMPARE codegen_mesh_indirect_smoothNormals.out\n        TESTENV testHdStCodeGen${suffix}\n        ENV\n            TF_DEBUG=HD_SAFE_MODE\n            ${hgi_env}\n    )\n    pxr_register_test(testHdStCodeGen${suffix}_Mesh_Indirect_DoubleSided\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStCodeGen --mesh --doubleSided\"\n        EXPECTED_RETURN_CODE 0\n        STDOUT_REDIRECT codegen_mesh_indirect_doubleSided.out\n        DIFF_COMPARE codegen_mesh_indirect_doubleSided.out\n        TESTENV testHdStCodeGen${suffix}\n        ENV\n            TF_DEBUG=HD_SAFE_MODE\n            ${hgi_env}\n    )\n    pxr_register_test(testHdStCodeGen${suffix}_Mesh_Indirect_FaceVarying\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStCodeGen --mesh --faceVarying\"\n        EXPECTED_RETURN_CODE 0\n        STDOUT_REDIRECT codegen_mesh_indirect_faceVarying.out\n        DIFF_COMPARE codegen_mesh_indirect_faceVarying.out\n        TESTENV testHdStCodeGen${suffix}\n        ENV\n            TF_DEBUG=HD_SAFE_MODE\n            ${hgi_env}\n    )\n    pxr_register_test(testHdStCodeGen${suffix}_Mesh_Indirect_Instance\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStCodeGen --mesh --instance\"\n        EXPECTED_RETURN_CODE 0\n        STDOUT_REDIRECT codegen_mesh_indirect_instance.out\n        DIFF_COMPARE codegen_mesh_indirect_instance.out\n        TESTENV testHdStCodeGen${suffix}\n        ENV\n            TF_DEBUG=HD_SAFE_MODE\n            ${hgi_env}\n    )\n    pxr_register_test(testHdStCodeGen${suffix}_Mesh_EdgeOnly\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStCodeGen --mesh --edgeOnly\"\n        EXPECTED_RETURN_CODE 0\n        STDOUT_REDIRECT codegen_mesh_edgeonly.out\n        DIFF_COMPARE codegen_mesh_edgeonly.out\n        TESTENV testHdStCodeGen${suffix}\n        ENV\n            TF_DEBUG=HD_SAFE_MODE\n            ${hgi_env}\n    )\n    pxr_register_test(testHdStCodeGen${suffix}_Mesh_EdgeOnly_BlendWireframe\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStCodeGen --mesh --edgeOnly --blendWireframe\"\n        EXPECTED_RETURN_CODE 0\n        STDOUT_REDIRECT codegen_mesh_edgeonly_blendwireframe.out\n        DIFF_COMPARE codegen_mesh_edgeonly_blendwireframe.out\n        TESTENV testHdStCodeGen${suffix}\n        ENV\n            TF_DEBUG=HD_SAFE_MODE\n            ${hgi_env}\n    )\n    pxr_register_test(testHdStCodeGen${suffix}_Curves_Indirect\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStCodeGen --curves\"\n        EXPECTED_RETURN_CODE 0\n        STDOUT_REDIRECT codegen_curves_indirect.out\n        DIFF_COMPARE codegen_curves_indirect.out\n        TESTENV testHdStCodeGen${suffix}\n        ENV\n            TF_DEBUG=HD_SAFE_MODE\n            ${hgi_env}\n    )\n    pxr_register_test(testHdStCodeGen${suffix}_Points_Indirect\n        COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStCodeGen --points\"\n        EXPECTED_RETURN_CODE 0\n        STDOUT_REDIRECT codegen_points_indirect.out\n        DIFF_COMPARE codegen_points_indirect.out\n        TESTENV testHdStCodeGen${suffix}\n        ENV\n            TF_DEBUG=HD_SAFE_MODE\n            ${hgi_env}\n    )\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Registering Hardware Face Culling Test\nDESCRIPTION: Registers a test for HdSt hardware face culling. This test verifies the hardware-accelerated face culling functionality and compares stdout output against a reference file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_39\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStHWFaceCulling\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStHWFaceCulling\"\n    EXPECTED_RETURN_CODE 0\n    STDOUT_REDIRECT testHdStHWFaceCulling-Run1-stdout.txt\n    DIFF_COMPARE testHdStHWFaceCulling-Run1-stdout.txt\n    TESTENV testHdStHWFaceCulling\n)\n```\n\n----------------------------------------\n\nTITLE: Including Table of Contents and Index Body in reStructuredText\nDESCRIPTION: This code demonstrates how to use the 'include' directive in reStructuredText to incorporate external files into a document. It imports both the table of contents and the main index body from separate files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: toc.rst\n\n.. include:: index_body.rst\n```\n\n----------------------------------------\n\nTITLE: Opacity Value Change in USD\nDESCRIPTION: Modification of display opacity value from 0.4 to 0.8\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddiff/testenv/testDiffToolIterateUsdz/baseline/iterate_usd_crate.txt#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\nfloat[] primvars:displayOpacity = [0.4]\nfloat[] primvars:displayOpacity = [0.8]\n```\n\n----------------------------------------\n\nTITLE: Composing `/referencedMiddleman` Prim in USD\nDESCRIPTION: Outlines the composition of the prim `/referencedMiddleman`. Its stack includes `implementation` (with variant `testVariantSet=testVariant`). It defines both `referencedAttr` (locally) and `variantAttr` (from the variant).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndVariants2.testenv/baseline/compositionResults_SpecializesAndVariants2.txt#2025-04-23_snippet_4\n\nLANGUAGE: usd\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </referencedMiddleman>\n\nPrim Stack:\n    root.sdf             /referencedMiddleman\n    root.sdf             /implementation\n    root.sdf             /implementation{testVariantSet=testVariant}\n\nVariant Selections:\n    {testVariantSet = testVariant}\n\nProperty names:\n     ['variantAttr', 'referencedAttr']\n\nProperty stacks:\n/referencedMiddleman.referencedAttr:\n    root.sdf             /referencedMiddleman.referencedAttr\n/referencedMiddleman.variantAttr:\n    root.sdf             /implementation{testVariantSet=testVariant}.variantAttr\n```\n\n----------------------------------------\n\nTITLE: Initializing Spline Data Structure in Python for OpenUSD\nDESCRIPTION: This code snippet initializes a Ts.TsTest_SplineData object with specific spline properties, including interpolation methods, extrapolation settings, and knot points. It uses hexadecimal float representation for precise numeric values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveKeepRatio_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.3416f3213ad1cp+0'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.7b2f6f1ab02dfp-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Defining Project Package Name with CMake - CMake\nDESCRIPTION: This snippet assigns the CMake variable 'PXR_PACKAGE' to 'usdProcImaging'. It designates the package or module being configured for build and installation, and is referenced in subsequent CMake commands to organize targets, resources, and outputs. There are no parameters or dependencies; this simply provides labeling for other macro calls.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdProcImaging/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PACKAGE usdProcImaging)\n```\n\n----------------------------------------\n\nTITLE: Setting Shader Source Directory Variable - CMake\nDESCRIPTION: This snippet sets the 'shader_dir' variable to the path containing standard shader source files. It uses the project source directory to construct a consistent location for shader includes and later automates shader compilation using this directory. The variable is required as an argument in subsequent function calls for OSL shader compilation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/shaders/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(shader_dir \"${PROJECT_SOURCE_DIR}/pxr/usd/plugin/usdShaders/shaders\")\n\n```\n\n----------------------------------------\n\nTITLE: Registering testUsdUtilsUserProcessingFunc Python Test using CMake\nDESCRIPTION: This CMake code uses the `pxr_register_test` function to register a Python test named `testUsdUtilsUserProcessingFunc`. The test is executed by running the Python script located at `${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsUserProcessingFunc`. A return code of 0 is expected for the test to pass. This test likely validates user processing function utilities within UsdUtils.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUtils/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdUtilsUserProcessingFunc\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsUserProcessingFunc\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Composing /CharRig Prim in USD\nDESCRIPTION: Shows the composition results for the prim </CharRig> defined in `root.sdf`. It lists the contributing layers in the prim stack and identifies its direct children ('Anim', 'Rig').\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorOpinionAtRelocationSource.testenv/baseline/compositionResults_ErrorOpinionAtRelocationSource.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </CharRig>\n\nPrim Stack:\n    root.sdf             /CharRig\n\nChild names:\n     ['Anim', 'Rig']\n```\n\n----------------------------------------\n\nTITLE: Iterating and Adding Subdirectories in CMake\nDESCRIPTION: This CMake code defines a variable 'DIRS' containing a list of directory names (starting with 'usdchecker'). It then iterates through this list using a foreach loop. Inside the loop, the 'add_subdirectory' command is called for each directory name stored in the loop variable 'd', instructing CMake to process the CMakeLists.txt file within that subdirectory.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(DIRS\n    usdchecker\n)\n\nforeach(d ${DIRS})\n    add_subdirectory(${d})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Registering testUsdUtilsUsdzUtils Python Test using CMake\nDESCRIPTION: This CMake code snippet employs the `pxr_register_test` function to register the `testUsdUtilsUsdzUtils` Python test. The test command points to the script `${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsUsdzUtils`, and a successful execution is indicated by a return code of 0. This test probably verifies utilities related to USDZ file handling within UsdUtils.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUtils/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdUtilsUsdzUtils\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsUsdzUtils\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Processed 3D Coordinate Results\nDESCRIPTION: Output array containing processed 3D coordinates as tuples. Each tuple represents a point in 3D space with x, y, z values, likely representing vertex positions or geometry data points.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStSubdivisionOsd3/baseline/testHdStSubdivisionOsd3-Run1-stdout.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n[(0, 0, -0.5), (-0.5, 0, 0), (0, 0, 0.5), (0.5, 0, 0), (0, 0.5, -1), (-1, 0.5, 0), (0, 0.5, 1), (1, 0.5, 0), (0, 0, -1.5), (-1.5, 0, 0), (0, 0, 1.5), (1.5, 0, 0), (0, -0.5, -1), (-1, -0.5, 0), (0, -0.5, 1), (1, -0.5, 0), (0, 0, -0.46875), (-0.46875, 0, 0), (0, 0, 0.46875), (0.46875, 0, 0), (0, 0.375, -0.75), (-0.75, 0.375, 0), (0, 0.375, 0.75), (0.75, 0.375, 0), (0, 0, -1.03125), (-1.03125, 0, 0), (0, 0, 1.03125), (1.03125, 0, 0), (0, -0.375, -0.75), (-0.75, -0.375, 0), (0, -0.375, 0.75), (0.75, -0.375, 0), (-0.375, 0.25, -0.375), (-0.375, 0.25, 0.375), (0.375, 0.25, 0.375), (0.375, 0.25, -0.375), (-0.625, 0.25, -0.625), (-0.625, 0.25, 0.625), (0.625, 0.25, 0.625), (0.625, 0.25, -0.625), (-0.625, -0.25, -0.625), (-0.625, -0.25, 0.625), (0.625, -0.25, 0.625), (0.625, -0.25, -0.625), (-0.375, -0.25, -0.375), (-0.375, -0.25, 0.375), (0.375, -0.25, 0.375), (0.375, -0.25, -0.375), (-0.3125, 0, -0.3125), (0, 0.25, -0.5625), (-0.5, 0.375, -0.5), (-0.5625, 0.25, 0), (-0.3125, 0, 0.3125), (-0.5, 0.375, 0.5), (0, 0.25, 0.5625), (0.3125, 0, 0.3125), (0.5, 0.375, 0.5), (0.5625, 0.25, 0), (0.3125, 0, -0.3125), (0.5, 0.375, -0.5), (0, 0.25, -0.9375), (-0.6875, 0, -0.6875), (-0.9375, 0.25, 0), (-0.6875, 0, 0.6875), (0, 0.25, 0.9375), (0.6875, 0, 0.6875), (0.9375, 0.25, 0), (0.6875, 0, -0.6875), (0, -0.25, -0.9375), (-0.5, -0.375, -0.5), (-0.9375, -0.25, 0), (-0.5, -0.375, 0.5), (0, -0.25, 0.9375), (0.5, -0.375, 0.5), (0.9375, -0.25, 0), (0.5, -0.375, -0.5), (0, -0.25, -0.5625), (-0.5625, -0.25, 0), (0, -0.25, 0.5625), (0.5625, -0.25, 0)]\n```\n\n----------------------------------------\n\nTITLE: Installing Test Directories for VDF Components\nDESCRIPTION: Configures the installation of test directories for various VDF components. These directories contain test environments needed for testing different VDF functionality.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/vdf/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testVdfEdit\n    DEST testVdfEdit\n)\n\npxr_install_test_dir(\n    SRC testenv/testVdfGrapher\n    DEST testVdfGrapher\n)\n\npxr_install_test_dir(\n    SRC testenv/testVdfIndexedWeights\n    DEST testVdfIndexedWeights\n)\n\npxr_install_test_dir(\n    SRC testenv/testVdfIndexedWeights_Perf\n    DEST testVdfIndexedWeights_Perf\n)\n\npxr_install_test_dir(\n    SRC testenv/testVdfSparseInputPathFinder\n    DEST testVdfSparseInputPathFinder\n)\n\npxr_install_test_dir(\n    SRC testenv/testVdfTraversal\n    DEST testVdfTraversal\n)\n```\n\n----------------------------------------\n\nTITLE: Viewing USD Scene with usdview\nDESCRIPTION: Command to open and view a USD scene file using the usdview tool. This allows inspection of the scene and identification of geometry to modify.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_houdini_example.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ usdview  USD/extras/usd/tutorials/Houdini/shot.usda\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PISI Prim\nDESCRIPTION: Shows the prim stack and child names for the base prim at path </PISI> defined in root.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PISI>\n\nPrim Stack:\n    root.sdf             /PISI\n\nChild names:\n     ['Child', 'Sibling']\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Scripts for USD Resolver Example in CMake\nDESCRIPTION: This snippet sets up the test scripts for the USD resolver example. It uses the pxr_test_scripts function to define the test environment and script location.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/examples/usdResolverExample/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_test_scripts(\n    testenv/testUsdResolverExample.py\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Usdview Test with pxr_register_test Macro in CMake\nDESCRIPTION: This CMake code snippet demonstrates the use of the pxr_register_test macro to register and configure a Usdview test. It specifies the test name, the command to run (which typically runs a Python test script or Usdview directly), expected return code, redirected output files, and environment variables. Dependencies include a working CMake installation, the Usdview executable installed at the specified prefix, and relevant test Python scripts and/or .usda files. Inputs are test names, scripts, and input files; outputs are result files and process exit codes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdviewFileArguments7\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testInvalidFileArg.py missing\"\n    STDERR_REDIRECT missing_test_out\n    DIFF_COMPARE missing_test_out\n    EXPECTED_RETURN_CODE 1\n    ENV\n        PXR_USDVIEW_SUPPRESS_STATE_SAVING=1\n)\n\n```\n\n----------------------------------------\n\nTITLE: Creating TsTest_SplineData Object in Python\nDESCRIPTION: This snippet demonstrates the creation of a TsTest_SplineData object with detailed configuration including extrapolation methods, knot data, and precise floating-point values using hex notation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/InitiallyRegressiveKeepRatio_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.38p+7'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('-0x1.4cccccccccccdp+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.d51ef685d1a68p+3'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.4ep+7'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1.ccccccccccccdp+4'), preSlope = float.fromhex('0x1.999999999999ap-2'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.b37271a44a374p+1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Verifying USD File Format Conversion\nDESCRIPTION: Shows how to use usddiff to verify that the content of the original and converted USD files match, despite the format change.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_converting_between_layer_formats.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ usddiff Sphere.usd NewSphere_binary.usd\n```\n\n----------------------------------------\n\nTITLE: Defining USD Logo Image Substitution in Sphinx RST\nDESCRIPTION: Creates an image substitution '|usdlogo|' for the USD logo in Sphinx documentation. Loads the SVG image from a URL and applies custom styling.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/rolesAndUtils.rst#2025-04-23_snippet_12\n\nLANGUAGE: rst\nCODE:\n```\n.. |usdlogo| image:: https://openusd.org/images/USDLogoUnsized.svg\n   :class: usd-logo-image\n```\n\n----------------------------------------\n\nTITLE: Defining a Four-Knot Bezier Spline (USD Spline Format)\nDESCRIPTION: Defines a more complex Bezier spline named 'FourKnotBezier' using double precision values. It includes four knots at times 1, 2, 3, and 4, with corresponding values 1, 2, 1, and 2, creating multiple curve segments. Interpolation between all knots is curved (Bezier), and Held extrapolation is used. Specific tangent properties are defined for each knot to shape the resulting multi-segment curve. This definition serves as input for tests like 'Test Case 7: Sample([1, 4], 166.667, 500, 1)'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nSpline: FourKnotBezier\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0.25\n  post-tan slope -0.25\nKnot:\n  value type double\n  curve type Bezier\n  time 2\n  value 2\n  next interp Curve\n  pre-tan width 0.25\n  pre-tan slope 0.25\n  post-tan width 0.25\n  post-tan slope 0.25\nKnot:\n  value type double\n  curve type Bezier\n  time 3\n  value 1\n  next interp Curve\n  pre-tan width 0.25\n  pre-tan slope -0.25\n  post-tan width 0.25\n  post-tan slope -0.25\nKnot:\n  value type double\n  curve type Bezier\n  time 4\n  value 2\n  next interp Curve\n  pre-tan width 0.25\n  pre-tan slope 0.25\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Registering usdview Reload/Reopen Test\nDESCRIPTION: Registers a CMake test named `testUsdviewReloadReopen`. This test executes `testusdview` with the Python script `testUsdviewReloadReopen.py` and `test.usda`. It checks the behavior of reloading and reopening stages by performing perceptual image difference comparison against `coloredAndFramed.png`, `reloaded.png`, and `reopened.png`, using failure thresholds of 0.05 absolute and 0.03 percent, and expecting a return code of 0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdviewReloadReopen\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewReloadReopen.py test.usda\"\n    IMAGE_DIFF_COMPARE\n        coloredAndFramed.png\n        reloaded.png\n        reopened.png\n    FAIL 0.05\n    FAIL_PERCENT 0.03\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Index Results for Empty Topology (GPU Subdivision Disabled)\nDESCRIPTION: This snippet shows the index results for a subdivision test on an empty topology using the Catmull-Clark scheme with GPU subdivision disabled (GPU subdivision = 0). As expected for an empty topology, the resulting index list is empty.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStSubdivisionOsd3/baseline/testHdStSubdivisionOsd3-Run1-stdout.txt#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: USD Composition Error Log for /Model_Renamed (Text)\nDESCRIPTION: Reports an error during USD composition for the prim path '/Model_Renamed'. The error indicates that the layer 'TrickyInheritsAndRelocatesToNewRootPrim/root.sdf' contains an invalid opinion at the relocation source path '/Group/Model', which will be ignored by the composition engine.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsAndRelocatesToNewRootPrim.testenv/baseline/compositionErrors_TrickyInheritsAndRelocatesToNewRootPrim.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nErrors while composing </Model_Renamed>\n\nThe layer @TrickyInheritsAndRelocatesToNewRootPrim/root.sdf@ has an invalid opinion at the relocation source path </Group/Model>, which will be ignored.\n```\n\n----------------------------------------\n\nTITLE: Testing Property Opinion Handling\nDESCRIPTION: Sets up tests for property opinion handling including single custom opinions, multiple opinions, and opinion error ignoring.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdcompress/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testPropertyOpinions\n    DEST testUsdCompressPropertyOpinionsOneCustom\n)\n\npxr_register_test(testUsdCompressPropertyOpinionsOneCustom\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdcompress CubeOneCustomOpinion.usda -o out.usda\"\n    EXPECTED_RETURN_CODE 1\n    PRE_PATH\n        ${CMAKE_INSTALL_PREFIX}/bin\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenUSD ts Library Build\nDESCRIPTION: Creates the main ts library target with all components and dependencies. Includes documentation files and configures build options.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_library(ts\n    LIBRARIES\n        ${libs}\n\n    INCLUDE_DIRS\n        ${include}\n\n    PRIVATE_CLASSES\n        ${privateClasses}\n\n    PUBLIC_CLASSES\n        ${classes}\n\n    PUBLIC_HEADERS\n        ${headers}\n\n    PYMODULE_CPPFILES\n        ${pycpp}\n\n    PYMODULE_FILES\n        ${pyfiles}\n\n    DOXYGEN_FILES\n        doxygen/overview.md\n        doxygen/status.md\n        doxygen/regression.md\n        doxygen/tsTest.dox\n        doxygen/images/boldS.png\n        doxygen/images/centerVertical.png\n        doxygen/images/endVert.png\n        doxygen/images/fourThirdOneThird.png\n        doxygen/images/keepRatio.png\n        doxygen/images/keepStart.png\n        doxygen/images/nearVertical.png\n        doxygen/images/oneThirdFourThird.png\n        doxygen/images/regressiveS.png\n        doxygen/images/regressiveSStandard.png\n        doxygen/images/startVert.png\n        doxygen/images/tanLens.png\n)\n```\n\n----------------------------------------\n\nTITLE: Building USD Shade Connectability Test\nDESCRIPTION: Configures the build for the USD Shade Connectability API test, specifying required libraries and source files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdShade/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_build_test(testUsdShadeHasConnectableAPI\n    LIBRARIES\n        tf\n        usdShade\n        usdGeom\n    CPPFILES\n        testenv/testUsdShadeHasConnectableAPI.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: USD Composition Warning: Ignored Opinion (Good Relocation Scenario)\nDESCRIPTION: Reports a warning encountered during the composition of '</Good_ReloOfRelocated>'. An opinion specified in the layer '@ErrorInvalidReferenceToRelocationSource/char.sdf@' at the relocation source path '</Char/PreRelo>' is deemed invalid by the composition engine and will be ignored.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInvalidReferenceToRelocationSource.testenv/baseline/compositionErrors_ErrorInvalidReferenceToRelocationSource.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThe layer @ErrorInvalidReferenceToRelocationSource/char.sdf@ has an invalid opinion at the relocation source path </Char/PreRelo>, which will be ignored.\n```\n\n----------------------------------------\n\nTITLE: Defining RegressiveSBothOut Spline in OpenUSD\nDESCRIPTION: Specifies the RegressiveSBothOut spline with Bezier curve type, held extrapolation, and two knot points. This spline has symmetrical tangent properties for both knots.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\nSpline: RegressiveSBothOut\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 4\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 4\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Defining Spline Properties and Knots (Text/Config)\nDESCRIPTION: This snippet defines a spline in a human-readable text format. It specifies that it's not a Hermite spline and uses Held extrapolation for both pre and post segments. It then lists the knots defining the curve, including their time, value, interpolation type (Curve), slopes, tangent lengths, and auto-tangent settings.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveMayaTansContain_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  0.000000: 0.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.000000, postLen 1.000000, auto false / false\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.800000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Examining USD Layer Stack Composition with Variant Selections\nDESCRIPTION: This output shows the layer composition for a USD scene focusing on the 'Sullivan' prim. It demonstrates how variant selections ('pin=ShotPin' and 'shade=PhongShade') affect the composition of the prim stack across multiple layers and class hierarchies.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritedVariantSelection.testenv/baseline/compositionResults_TrickyInheritedVariantSelection.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLoading @TrickyInheritedVariantSelection/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </Sullivan>\n\nPrim Stack:\n    root.sdf             /Sullivan\n    root.sdf             /_extraclass_Sullivan\n    root.sdf             /_pinclass_Sullivan\n    root.sdf             /_shadeclass_Sullivan\n    sequence.sdf         /Sullivan\n    sequence.sdf         /_pinclass_Sullivan\n    sequence.sdf         /_shadeclass_Sullivan\n    sequence.sdf         /Sullivan{pin=ShotPin}\n    sequence.sdf         /_extraclass_Sullivan\n    model-pin.sdf        /SullivanShotPin\n    model-pin.sdf        /SullivanShotPin{shade=PhongShade}\n    model-shade.sdf      /SullivanShotPinPhongShade\n    model-shade.sdf      /SullivanShotPinNoShade\n    model-pin.sdf        /SullivanNoPin\n    model-pin.sdf        /SullivanNoPin{shade=PhongShade}\n    model-shade.sdf      /SullivanNoPinPhongShade\n    model-shade.sdf      /SullivanNoPinNoShade\n\nVariant Selections:\n    {pin = ShotPin}\n    {shade = PhongShade}\n\n------------------------------------------------------------------------\nResults for composing </_pinclass_Sullivan>\n\nPrim Stack:\n    root.sdf             /_pinclass_Sullivan\n\n------------------------------------------------------------------------\nResults for composing </_shadeclass_Sullivan>\n\nPrim Stack:\n    root.sdf             /_shadeclass_Sullivan\n\n------------------------------------------------------------------------\nResults for composing </_extraclass_Sullivan>\n\nPrim Stack:\n    root.sdf             /_extraclass_Sullivan\n```\n\n----------------------------------------\n\nTITLE: Defining PackageEncapsulationValidator for UsdUtils\nDESCRIPTION: Documentation for a validator that recommends packages to be self-contained by warning when a composed stage contains references to files outside the package.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n[usdUtilsValidators:PackageEncapsulationValidator]:\n\tDoc: If the root layer is a package, then its recommended for the composed stage to not contain references to files outside the package. The package should be self-contained, warn if not.\n\tKeywords: UsdUtilsValidators, UsdzValidators\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Building Test Shared Libraries\nDESCRIPTION: Creates multiple test shared libraries with different functionalities for plugin testing. Each library is installed in the PlugPlugins directory and links against the tf library.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/plug/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_build_test_shared_lib(TestPlugDso1\n    INSTALL_PREFIX PlugPlugins\n    LIBRARIES\n        tf\n    CPPFILES\n        testenv/TestPlugDso1.cpp\n) \npxr_build_test_shared_lib(TestPlugDso2\n    INSTALL_PREFIX PlugPlugins\n    LIBRARIES\n        tf\n    CPPFILES\n        testenv/TestPlugDso2.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hydra Buffer Source Test Build in CMake\nDESCRIPTION: Configures the build for a test of the Hydra buffer source with empty values. This test verifies the correct handling of empty buffer values in the Hydra rendering system.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testHdBufferSourceEmptyVal\n   LIBRARIES\n       hd\n       vt\n       gf\n       tf\n       arch\n\n   CPPFILES\n       testenv/testHdBufferSourceEmptyVal.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Light Color Temperatures in UsdLux\nDESCRIPTION: This USDA snippet illustrates the use of colorTemperature attribute in RectLights. It sets up three lights with different color temperatures (6500K, 3500K, and 9500K) to demonstrate how this attribute affects light color.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdLux/userDoc/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: usda\nCODE:\n```\ndef Scope \"Lights\"\n{\n    def RectLight \"LightIntensity1\"\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestSpheres/Sphere1>\n        ]        \n\n        float inputs:intensity = 20.0        \n        bool inputs:enableColorTemperature = true\n        float inputs:colorTemperature = 6500\n        double3 xformOp:translate = (-2.5, 5, 3)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n    def RectLight \"LightIntensity2\"\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestSpheres/Sphere2>\n        ]        \n\n        float inputs:intensity = 20.0\n        bool inputs:enableColorTemperature = true\n        float inputs:colorTemperature = 3500\n        double3 xformOp:translate = (0, 5, 3)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n    def RectLight \"LightIntensity3\"\n    {\n        uniform bool collection:lightLink:includeRoot = 0\n        rel collection:lightLink:includes = [\n            </TestSpheres/Sphere3>\n        ]        \n\n        float inputs:intensity = 20.0\n        bool inputs:enableColorTemperature = true\n        float inputs:colorTemperature = 9500\n        double3 xformOp:translate = (2.5, 5, 3)\n        uniform token[] xformOpOrder = [\"xformOp:translate\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RegressivePostJ Spline in OpenUSD\nDESCRIPTION: Begins the definition of the RegressivePostJ spline, specifying its basic properties such as value type and curve type. The snippet is incomplete and does not include full knot details.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\nSpline: RegressivePostJ\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra ExtComputationUtils Test Build in CMake\nDESCRIPTION: Defines the build configuration for testing Hydra's extended computation utilities. This test validates helper functions and utilities for the extended computation system.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testHdExtComputationUtils\n   LIBRARIES\n       hd\n\n   CPPFILES\n       testenv/testHdExtComputationUtils.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Sampling Marginal Spline in Python\nDESCRIPTION: This snippet defines a Marginal spline with two knots and samples it using the SampleWithSources function. It demonstrates the behavior of the spline interpolation between knots and extrapolation beyond the knot range.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_107\n\nLANGUAGE: python\nCODE:\n```\nSpline: MarginalN\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 5e-12\n  post-tan slope 1000000000000\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 5e-12\n  pre-tan slope 1000000000000\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Viewing Layer Stack and Composition Results in OpenUSD\nDESCRIPTION: This log output shows the results of loading and composing a USD file with a complex class hierarchy. It displays the complete layer stack, prim inheritance chains, and property stacks for various primitives in the scene.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyClassHierarchy.testenv/baseline/compositionResults_TrickyClassHierarchy.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLoading @TrickyClassHierarchy/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </Sullivan_1>\n\nPrim Stack:\n    root.sdf             /Sullivan_1\n    root.sdf             /_Class_Sullivan\n    root.sdf             /_Class_Char\n    root.sdf             /_Class_Model\n    Sullivan.sdf         /Sullivan\n    Sullivan.sdf         /_Class_Sullivan\n    Sullivan.sdf         /_Class_Char\n    Sullivan.sdf         /_Class_Model\n\nProperty names:\n     ['name']\n\nProperty stacks:\n/Sullivan_1.name:\n    root.sdf             /_Class_Sullivan.name\n    root.sdf             /_Class_Char.name\n    root.sdf             /_Class_Model.name\n\n------------------------------------------------------------------------\nResults for composing </_Class_Sullivan>\n\nPrim Stack:\n    root.sdf             /_Class_Sullivan\n\nProperty names:\n     ['name']\n\nProperty stacks:\n/_Class_Sullivan.name:\n    root.sdf             /_Class_Sullivan.name\n\n------------------------------------------------------------------------\nResults for composing </_Class_Char>\n\nPrim Stack:\n    root.sdf             /_Class_Char\n\nProperty names:\n     ['name']\n\nProperty stacks:\n/_Class_Char.name:\n    root.sdf             /_Class_Char.name\n\n------------------------------------------------------------------------\nResults for composing </_Class_Model>\n\nPrim Stack:\n    root.sdf             /_Class_Model\n\nProperty names:\n     ['name']\n\nProperty stacks:\n/_Class_Model.name:\n    root.sdf             /_Class_Model.name\n```\n\n----------------------------------------\n\nTITLE: Declaring SplineData Test Case with Explicit Knots - Python\nDESCRIPTION: Defines a test spline data object in Python (or C++ pseudo-Python hybrid), specifying non-Hermite interpolation and explicit pre/post extrapolation types and knots. Each knot is constructed with fields for time, interpolation method, value, slopes, segment lengths, and auto/interpolation flags. Requires Ts or TsTest_SplineData classes and methods. Inputs are explicitly defined float values using fromhex, likely for precise floating-point equivalence testing. Intended for regression or unit testing where correct parsing/assembly of spline data is under test.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveMayaTansNone_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.4cccccccccccdp+0'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.999999999999bp-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: USD Layer Stack Composition Output\nDESCRIPTION: Shows the composition results of loading root.sdf file and displaying the layer stack and prim stack results for three prims (A, B, C). Demonstrates how prim C inherits from both A and B.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpRegressionBugs_USD-6755.testenv/baseline/compositionResults.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nLoading @root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </A>\n\nPrim Stack:\n    root.sdf             /A\n\n------------------------------------------------------------------------\nResults for composing </B>\n\nPrim Stack:\n    root.sdf             /B\n\n------------------------------------------------------------------------\nResults for composing </C>\n\nPrim Stack:\n    root.sdf             /C\n    root.sdf             /A\n    root.sdf             /B\n```\n\n----------------------------------------\n\nTITLE: Avoiding SdfPath::GetString() in Performance-Critical Code\nDESCRIPTION: SdfPath::GetString() provides a fully unrolled representation of a namespace location, useful for debugging but expensive to compute. It should be avoided in performance-critical loops and used only when necessary, preferably guarded by a debug flag.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/bestPractices.md#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nSdfPath::GetString()\n```\n\nLANGUAGE: cpp\nCODE:\n```\nSdfPath::GetText()\n```\n\n----------------------------------------\n\nTITLE: Setting Shader Installation Subdirectory Path - CMake\nDESCRIPTION: This snippet assigns the subdirectory path for plugin shader installation resources. It sets the 'PXR_INSTALL_SUBDIR' variable to ensure that compiled shader programs are placed in the correct USD plugin resource directory during installation. This path variable is reused by installation commands in subsequent functions and targets.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/shaders/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_INSTALL_SUBDIR \"plugin/usd/resources\")\n\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Code Role in Sphinx RST\nDESCRIPTION: Creates a custom role 'code' for formatting generic code or language-ambiguous code snippets in Sphinx documentation. Uses monospace font. Used with the syntax :code:`code`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/rolesAndUtils.rst#2025-04-23_snippet_9\n\nLANGUAGE: rst\nCODE:\n```\n.. role:: code\n   :class: mono\n```\n\n----------------------------------------\n\nTITLE: Listing Sampled Spline Data Points (Text/Data)\nDESCRIPTION: This snippet contains a list of time-value pairs, representing points sampled from the defined spline curve. The first column is the time coordinate, and the second column is the corresponding value on the spline at that time. This data is likely used for verification, plotting, or comparison in testing scenarios.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveMayaTansContain_TsTestBaseline.txt#2025-04-23_snippet_3\n\nLANGUAGE: data\nCODE:\n```\n-0.200000 0.000000\n0.000000 0.000000\n0.004975 0.000008\n0.009950 0.000033\n0.014925 0.000075\n0.019900 0.000135\n0.024876 0.000211\n0.029851 0.000306\n0.034826 0.000419\n0.039801 0.000550\n0.044776 0.000699\n0.049751 0.000868\n0.054726 0.001055\n0.059701 0.001263\n0.064677 0.001490\n0.069652 0.001737\n0.074627 0.002005\n0.079602 0.002294\n0.084577 0.002604\n0.089552 0.002935\n0.094527 0.003289\n0.099502 0.003664\n0.104478 0.004063\n0.109453 0.004485\n0.114428 0.004930\n0.119403 0.005399\n0.124378 0.005893\n0.129353 0.006412\n0.134328 0.006956\n0.139303 0.007526\n0.144279 0.008122\n0.149254 0.008745\n0.154229 0.009396\n0.159204 0.010074\n0.164179 0.010782\n0.169154 0.011518\n0.174129 0.012284\n0.179104 0.013080\n0.184080 0.013908\n0.189055 0.014767\n0.194030 0.015658\n0.199005 0.016583\n0.203980 0.017541\n0.208955 0.018534\n0.213930 0.019563\n0.218905 0.020627\n0.223881 0.021729\n0.228856 0.022869\n0.233831 0.024048\n0.238806 0.025267\n0.243781 0.026527\n0.248756 0.027828\n0.253731 0.029173\n0.258706 0.030562\n0.263682 0.031997\n0.268657 0.033478\n0.273632 0.035007\n0.278607 0.036585\n0.283582 0.038214\n0.288557 0.039896\n0.293532 0.041631\n0.298507 0.043421\n0.303483 0.045268\n0.308458 0.047175\n0.313433 0.049142\n0.318408 0.051172\n0.323383 0.053266\n0.328358 0.055428\n0.333333 0.057659\n0.338308 0.059962\n0.343284 0.062339\n0.348259 0.064794\n0.353234 0.067328\n0.358209 0.069946\n0.363184 0.072650\n0.368159 0.075444\n0.373134 0.078331\n0.378109 0.081316\n0.383085 0.084403\n0.388060 0.087597\n0.393035 0.090901\n0.398010 0.094322\n0.402985 0.097866\n0.407960 0.101537\n0.412935 0.105343\n0.417910 0.109292\n0.422886 0.113390\n0.427861 0.117646\n0.432836 0.122069\n0.437811 0.126671\n0.442786 0.131460\n0.447761 0.136451\n0.452736 0.141656\n0.457711 0.147091\n0.462687 0.152771\n0.467662 0.158717\n0.472637 0.164950\n0.477612 0.171492\n0.482587 0.178373\n0.487562 0.185622\n0.492537 0.193276\n0.497512 0.201377\n0.502488 0.209973\n0.507463 0.219124\n0.512438 0.228898\n0.517413 0.239378\n0.522388 0.250669\n0.527363 0.262897\n0.532338 0.276223\n0.537313 0.290855\n0.542289 0.307066\n0.547264 0.325225\n0.552239 0.345842\n0.557214 0.369642\n0.562189 0.397675\n0.567164 0.431418\n0.572139 0.472613\n0.577114 0.521662\n0.582090 0.573877\n0.587065 0.621096\n0.592040 0.659872\n0.597015 0.691263\n0.601990 0.717138\n0.606965 0.738960\n0.611940 0.757744\n0.616915 0.774186\n0.621891 0.788773\n0.626866 0.801858\n0.631841 0.813702\n0.636816 0.824503\n0.641791 0.834414\n0.646766 0.843558\n0.651741 0.852032\n0.656716 0.859916\n0.661692 0.867276\n0.666667 0.874168\n0.671642 0.880639\n0.676617 0.886727\n0.681592 0.892468\n0.686567 0.897892\n0.691542 0.903023\n0.696517 0.907886\n0.701493 0.912500\n0.706468 0.916882\n0.711443 0.921050\n0.716418 0.925017\n0.721393 0.928796\n0.726368 0.932399\n0.731343 0.935836\n0.736318 0.939117\n0.741294 0.942250\n0.746269 0.945244\n0.751244 0.948106\n0.756219 0.950843\n0.761194 0.953460\n0.766169 0.955964\n0.771144 0.958359\n0.776119 0.960652\n0.781095 0.962846\n0.786070 0.964945\n0.791045 0.966955\n0.796020 0.968877\n0.800995 0.970717\n0.805970 0.972477\n0.810945 0.974160\n0.815920 0.975769\n0.820896 0.977308\n0.825871 0.978777\n0.830846 0.980181\n0.835821 0.981521\n0.840796 0.982799\n0.845771 0.984018\n0.850746 0.985179\n0.855721 0.986284\n0.860697 0.987336\n0.865672 0.988335\n0.870647 0.989283\n0.875622 0.990182\n0.880597 0.991034\n0.885572 0.991839\n0.890547 0.992599\n0.895522 0.993315\n0.900498 0.993988\n0.905473 0.994620\n0.910448 0.995212\n0.915423 0.995765\n0.920398 0.996279\n0.925373 0.996756\n0.930348 0.997197\n0.935323 0.997602\n0.940299 0.997973\n0.945274 0.998310\n0.950249 0.998614\n0.955224 0.998886\n0.960199 0.999126\n0.965174 0.999336\n0.970149 0.999516\n0.975124 0.999666\n0.980100 0.999788\n0.985075 0.999882\n1.000000 1.000000\n1.200000 1.000000\n```\n\n----------------------------------------\n\nTITLE: Registering Clip Plane Tests in OpenUSD\nDESCRIPTION: Registers tests for clip plane functionality with different clip plane configurations. These tests run basic drawing operations and compare generated images against reference images with perceptual comparison.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStClipPlanes1\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --clipPlane -1 0 0 -1.5 --write testHdStClipPlanes1.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStClipPlanes1.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStClipPlanes\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStClipPlanes2\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --clipPlane 1 0 0 1.5 --clipPlane -1 0 0 1.5 --write testHdStClipPlanes2.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStClipPlanes2.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStClipPlanes\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the usdresolve Python Binary Target in CMake\nDESCRIPTION: Defines a Python binary target named `usdresolve` using the custom `pxr_python_bin` CMake function. It specifies that this binary depends on the `ar`, `sdf`, and `usd` components within the OpenUSD project.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdresolve/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_python_bin(usdresolve\n    DEPENDENCIES\n        ar\n        sdf\n        usd\n)\n```\n\n----------------------------------------\n\nTITLE: Running Unicode Character Class Generation Script\nDESCRIPTION: Command to execute the tfGenCharacterClasses.py script that generates character class definitions from Unicode database. The script reads DerivedCoreProperties.txt and generates unicodeCharacterClasses.cpp file. This needs to be run only when upgrading to a new Unicode version.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/unicode/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# example run from the pxr/base/tf/unicode directory\npython tfGenCharacterClasses.py --srcDir <path/to/DerivedCoreProperties.txt>\n    --destDir .. --srcTemplate unicodeCharacterClasses.template.cpp\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </Good_SubrootRefToRelocatedChild> Referencing Child of Relocated Prim\nDESCRIPTION: Displays the composition results for </Good_SubrootRefToRelocatedChild>, which uses a sub-root reference to target a specific child </Char/Relocated/Child> under a relocated prim. The prim stack includes the referencing prim's definition from 'root.sdf' followed by the composed definition of the referenced child prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_RelocateToNone.testenv/baseline/compositionResults_RelocateToNone_usd.txt#2025-04-23_snippet_5\n\nLANGUAGE: usd-composition-output\nCODE:\n```\nResults for composing </Good_SubrootRefToRelocatedChild>\n\nPrim Stack:\n    root.sdf             /Good_SubrootRefToRelocatedChild\n    root.sdf             /Char/Relocated/Child\n    model.sdf            /Model/ToBeRelocated/Child\n```\n\n----------------------------------------\n\nTITLE: Adding OpenVDB Support to hdPrman in CMake\nDESCRIPTION: Conditionally adds OpenVDB support by linking to the hioOpenVDB library if PXR_ENABLE_OPENVDB_SUPPORT is enabled.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/hdPrman/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif (${PXR_ENABLE_OPENVDB_SUPPORT})\n    list(APPEND optionalLibs hioOpenVDB)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering USD Diff Tool Tests in CMake\nDESCRIPTION: Defines multiple test cases for the usddiff tool, covering various scenarios such as comparing identical files, different files, and different USD formats.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddiff/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdDiffExitCodesForDiff1\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usddiff a.usda a.usda --noeffect\"\n    EXPECTED_RETURN_CODE 0\n    PRE_PATH\n        ${CMAKE_INSTALL_PREFIX}/bin\n)\n\npxr_register_test(testUsdDiffExitCodesForDiff2\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usddiff a.usda b.usda --noeffect\"\n    EXPECTED_RETURN_CODE 1\n    PRE_PATH\n        ${CMAKE_INSTALL_PREFIX}/bin\n)\n```\n\n----------------------------------------\n\nTITLE: Defining RegressivePostJ Spline in OpenUSD\nDESCRIPTION: Specifies a Bezier spline with Held pre and post extrapolation. It has two knots at times 0 and 1, with asymmetric tangent properties for curve shaping.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_83\n\nLANGUAGE: text\nCODE:\n```\nSpline: RegressivePostJ\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 2.5\n  post-tan slope 0.6\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n```\n\n----------------------------------------\n\nTITLE: Accessing HdMaterialNetwork in C++\nDESCRIPTION: Shows how to access HdMaterialNetwork, which is used to represent material networks and will be adapted for light networks.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_renderers.rst#2025-04-23_snippet_19\n\nLANGUAGE: C++\nCODE:\n```\nHdMaterialNetwork\n```\n\n----------------------------------------\n\nTITLE: Sequential Event Position Log\nDESCRIPTION: Log output showing detected events with their begin and end positions. Each event spans a single unit interval with sequential positioning.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/trace/testenv/testTraceEventContainer.testenv/baseline/testTraceEventContainer-Run1-stdout.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nFound event\n    Begin: 148\n    End: 149\nFound event\n    Begin: 149\n    End: 150\n[...continued pattern...]\n```\n\n----------------------------------------\n\nTITLE: Defining Content Table Structure\nDESCRIPTION: Configuration for table of contents structure using Python markdown format.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/LightFilter.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{contents}\n:depth: 2\n:local:\n:backlinks: none\n```\n\n----------------------------------------\n\nTITLE: Registering UsdView OIT Test in CMake\nDESCRIPTION: This snippet registers a test for UsdView OIT (Order-Independent Transparency) rendering. It specifies a Python command to run the test script, sets up an image comparison, and defines failure thresholds.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdviewOIT\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewOIT.py test.usda\"\n    IMAGE_DIFF_COMPARE\n        oit.png\n    FAIL 0.05\n    FAIL_PERCENT 0.03\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Finding Format Plugins Using Path Extensions in USD\nDESCRIPTION: Example of how to use the FindAllPlugins method to locate format plugins in USD based on a file path's extension. This demonstrates using SdfFileFormat to find compatible plugins for a given filename extension.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/testenv/testHdSortedIds/baseline/testHdSortedId_removeOnlyElementTest.txt#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```cpp\nSdfFileFormatConstPtr\nSdfFileFormat::FindById(const TfToken& formatId)\n{\n    TRACE_FUNCTION();\n\n    // Look up format using registry.\n    return _GetRegistry()->FindById(formatId);\n}\n\nSdfFileFormatConstPtrVector\nSdfFileFormat::FindAllByExtension(const std::string& extension)\n{\n    TRACE_FUNCTION();\n\n    return _GetRegistry()->FindAllByExtension(extension);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Analyzing Loop Subdivision on Triangles with Right-Handed Orientation\nDESCRIPTION: Results from applying Loop subdivision on a triangle mesh with right-handed orientation at subdivision levels 0 and 1. The output shows the triangle's index results in tuple form and the resulting vertex position coordinates in 3D space.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStSubdivisionOsd3/baseline/testHdStSubdivisionOsd3-Run1-stdout.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nLoop Subdivision Test\nTest triangle\nScheme loop\nOrientation rightHanded\nGPU subdivision = 0\nIndex Results\n[(3, 6, 8), (6, 4, 7), (8, 7, 5), (7, 8, 6)]\nResults\n[(0, 1, 0), (-1, 0, 0), (1, 0, 0), (0, 1, 0), (-1, 0, 0), (1, 0, 0), (-0.5, 0.5, 0), (0, 0, 0), (0.5, 0.5, 0)]\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Scripts for usdSemantics in CMake\nDESCRIPTION: This snippet sets up test scripts for the usdSemantics library using CMake. It specifies two test environment scripts for testing the UsdSemanticsLabelsAPI and UsdSemanticsLabelsQuery.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdSemantics/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_test_scripts(\n    testenv/testUsdSemanticsLabelsAPI.py\n    testenv/testUsdSemanticsLabelsQuery.py\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Windows Export Properties for Boost Library\nDESCRIPTION: Configures the Boost library to export all symbols on Windows platforms, ensuring proper .lib file generation. This is necessary for the build-workaround.cpp file's symbol to be exported correctly during linking.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/external/boost/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Ensure symbol in build-workaround.cpp is exported on Windows,\n# otherwise the build will error out at link time because no\n# .lib file will be generated. Using this setting is OK because\n# we only expect there to be one exportable symbol in this library.\nset_target_properties(boost \n    PROPERTIES \n        WINDOWS_EXPORT_ALL_SYMBOLS TRUE\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Code Role in Sphinx RST\nDESCRIPTION: Creates a custom role 'python' for inline Python code formatting in Sphinx documentation. Uses monospace font. Used with the syntax :python:`code`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/rolesAndUtils.rst#2025-04-23_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n.. role:: python\n   :class: mono\n```\n\n----------------------------------------\n\nTITLE: BoldS Spline Test Cases\nDESCRIPTION: Test results showing sampled points on the BoldS spline with three different sampling ranges: [0,1], [-1.5,2.5] with extrapolation, and [0.25,0.75] with higher density sampling.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_95\n\nLANGUAGE: text\nCODE:\n```\nTest Case 190: SampleWithSources([0, 1], 500, 500, 1)\n0: (TsSourceKnotInterp)\n    (0, 0)\n    (0.11142730712890625, 0.00286865234375)\n    (0.21173095703125, 0.01123046875)\n    (0.30150604248046875, 0.02471923828125)\n    (0.38134765625, 0.04296875)\n    (0.45185089111328125, 0.06561279296875)\n    (0.51361083984375, 0.09228515625)\n    (0.5672225952148438, 0.12261962890625)\n    (0.61328125, 0.15625)\n    (0.6523818969726562, 0.19281005859375)\n    (0.68511962890625, 0.23193359375)\n    (0.7120895385742188, 0.27325439453125)\n    (0.73388671875, 0.31640625)\n    (0.7511062622070312, 0.36102294921875)\n    (0.76434326171875, 0.40673828125)\n    (0.7741928100585938, 0.45318603515625)\n    (0.78125, 0.5)\n    (0.78936767578125, 0.59326171875)\n    (0.79345703125, 0.68359375)\n    (0.79827880859375, 0.76806640625)\n    (0.80859375, 0.84375)\n    (0.8172988891601562, 0.87738037109375)\n    (0.82916259765625, 0.90771484375)\n    (0.8447799682617188, 0.93438720703125)\n    (0.86474609375, 0.95703125)\n    (0.8896560668945312, 0.97528076171875)\n    (0.92010498046875, 0.98876953125)\n    (0.9566879272460938, 0.99713134765625)\n    (1, 1)\n\nTest Case 191: SampleWithSources([-1.5, 2.5], 500, 500, 10)\n0: (TsSourcePreExtrap)\n    (-1.5, 0)\n    (0, 0)\n1: (TsSourceKnotInterp)\n    (0, 0)\n    (0.38134765625, 0.04296875)\n    (0.61328125, 0.15625)\n    (0.73388671875, 0.31640625)\n    (0.78125, 0.5)\n    (0.80859375, 0.84375)\n    (0.86474609375, 0.95703125)\n    (1, 1)\n2: (TsSourcePostExtrap)\n    (1, 1)\n    (2.5, 1)\n\nTest Case 192: SampleWithSources([0.25, 0.75], 500, 500, 0.5)\n```\n\n----------------------------------------\n\nTITLE: Initializing TsRegressionPreventer Results in OpenUSD\nDESCRIPTION: This snippet shows the result of a TsRegressionPreventer operation, including adjustment flags and segment information for pre and post segments.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/NoopKeepRatio_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: false\n  havePreSegment: false\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.000000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.000000\n  havePostSegment: true\n  postActiveAdjusted: false\n  postActiveAdjustedWidth: 0.800000\n  postOppositeAdjusted: false\n  postOppositeAdjustedWidth: 0.800000\n```\n\n----------------------------------------\n\nTITLE: Tracking Rendering Statistics Through Scene Modifications in OpenUSD\nDESCRIPTION: A test output that tracks memory usage, draw calls, and other rendering statistics as various modifications are made to a scene with multiple cubes. The test starts with an initial state and progresses through adding left-handed transforms, changing culling modes, adding instancers, and adding additional geometry.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStHWFaceCulling/baseline/testHdStHWFaceCulling-Run1-stdout.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n==== FaceCullingTest:\n----- begin -----\nnonUniformSize, 0\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 0\nsingleBufferSize, 0\ntextureMemory, 0\ngarbageCollected = 0\ndrawCalls = 0\nrebuildBatches = 0\n\n----- draw initial state -----\ndrawIndirect, 240\ndrawIndirectCull, 240\nnonUniformSize, 624\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 896\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 496\ngarbageCollected = 0\ndrawCalls = 1\ndrawBatches = 1\nitemsDrawn = 4\ndrawItemsFetched = 1\nrebuildBatches = 1\n\n----- add left handed transform to cube2 -----\ndrawIndirect, 480\ndrawIndirectCull, 480\nnonUniformSize, 624\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 896\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 496\ngarbageCollected = 0\ndrawCalls = 2\ndrawBatches = 2\nitemsDrawn = 4\ndrawItemsFetched = 1\nrebuildBatches = 2\n\n----- change cube3's repr to cull front -----\ndrawIndirect, 480\ndrawIndirectCull, 480\nnonUniformSize, 648\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 920\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 496\ngarbageCollected = 0\ndrawCalls = 3\ndrawBatches = 3\nitemsDrawn = 4\ndrawItemsFetched = 2\nrebuildBatches = 3\n\n----- add instancer to cube4 -----\ndrawIndirect, 500\ndrawIndirectCull, 500\nnonUniformSize, 712\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 960\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 520\ngarbageCollected = 1\ndrawCalls = 4\ndrawBatches = 4\nitemsDrawn = 4\ndrawItemsFetched = 2\nrebuildBatches = 4\n\n----- add additional left-handed cube -----\ndrawIndirect, 580\ndrawIndirectCull, 580\nnonUniformSize, 712\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 1152\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 520\ngarbageCollected = 1\ndrawCalls = 4\ndrawBatches = 4\nitemsDrawn = 5\ndrawItemsFetched = 3\nrebuildBatches = 5\nOK\n```\n\n----------------------------------------\n\nTITLE: Defining the rmanUsdValidators Plugin Library in CMake\nDESCRIPTION: Uses the `pxr_plugin` CMake function to define the `rmanUsdValidators` plugin library. It specifies dependencies on core USD libraries (like `tf`, `plug`, `sdf`, `usd`, `usdRender`, `usdRi`, `usdShade`, `usdValidation`), lists `validatorTokens` as private classes, includes `validators.cpp` as the source file, and adds `plugInfo.json` as a resource file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/rmanUsdValidators/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_plugin(rmanUsdValidators\n    LIBRARIES\n        tf\n        plug\n        sdf\n        usd\n        usdRender\n        usdRi\n        usdShade\n        usdValidation\n\n    PRIVATE_CLASSES\n        validatorTokens\n\n    CPPFILES\n        validators.cpp\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Registering usdzip ARKit Asset Packaging Test in CMake\nDESCRIPTION: Registers a Python test named `testUsdZipARKitAsset` using `pxr_register_test`. The test executes `usdzip` with the `--arkitAsset` flag, specifying `root.usd` as the asset and creating `package.usdz` suitable for ARKit. It lists contents to `contents_arkit.txt`, expects success (return code 0), and compares the generated `contents_arkit.txt` against a reference file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdzip/CMakeLists.txt#2025-04-23_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdZipARKitAsset\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdzip --arkitAsset root.usd package.usdz -l contents_arkit.txt\"\n    DIFF_COMPARE contents_arkit.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Defining MaterialBindingRelationships Validator\nDESCRIPTION: Documentation for a validator that ensures all properties named 'material:binding' or in that namespace are properly defined as relationships rather than attributes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n[usdShadeValidators:MaterialBindingRelationships]:\n\tDoc: All properties named 'material:binding' or in that namespace should be relationships.\n\tKeywords: UsdShadeValidators\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Applied API Schemas via Plugin Metadata in JSON\nDESCRIPTION: This JSON snippet demonstrates how to specify additional built-in API schemas within a plugin's `plugInfo.json` file using the `AutoApplyAPISchemas` metadata. It allows plugins to automatically apply specified API schemas (both single-apply like `ExistingSingleApplyAPI` and multi-apply like `ExistingMultiApplyAPI:foo` with its instance name) to certain prim types or other API schemas without modifying the original schema definitions. The `apiSchemaAutoApplyTo` array lists the target schema types.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/generatingSchemas.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Plugins\": [\n        {\n            \"Info\": {\n                \"AutoApplyAPISchemas\" : {\n                    \"ExistingSingleApplyAPI\": {\n                        \"apiSchemaAutoApplyTo\": [\n                            \"ExistingPrimType\"\n                        ]\n                    },\n                    \"ExistingMultiApplyAPI:foo\": {\n                        \"apiSchemaAutoApplyTo\": [\n                            \"ExistingPrimType\", \"ExistingSingleApplyAPI\"\n                        ]\n                    }\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering VDF Tests for Execution\nDESCRIPTION: Registers tests with the testing framework, specifying execution commands, expected return codes, and comparison files for output validation. This allows automated testing of VDF library functionality.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/vdf/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testVdfBasic\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testVdfBasic\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testVdfCountingIterator\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testVdfCountingIterator\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testVdfDefaultInitAllocator\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testVdfDefaultInitAllocator\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testVdfVector\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testVdfVector\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testVdfGrapher\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testVdfGrapher\"\n    EXPECTED_RETURN_CODE 0\n    POST_COMMAND \"${PYTHON_EXECUTABLE} normalizeDotFile.py test.dot test.out\"\n    DIFF_COMPARE test.out\n    DIFF_COMPARE traverse.out\n    DIFF_COMPARE network.dot\n    DIFF_COMPARE subset.dot\n    DIFF_COMPARE overlapping_subsets.dot\n    DIFF_COMPARE displayFull.dot\n    DIFF_COMPARE displayNoLabels.dot\n    DIFF_COMPARE displaySummary.dot\n    TESTENV testVdfGrapher\n)\n\npxr_register_test(testVdfHardToReach\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testVdfHardToReach\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testVdfIndexedWeights\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testVdfIndexedWeights -c\"\n    STDOUT_REDIRECT test.out\n    EXPECTED_RETURN_CODE 0\n    DIFF_COMPARE test.out\n)\n\npxr_register_test(testVdfIterators\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testVdfIterators\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testVdfLinearMap\n```\n\n----------------------------------------\n\nTITLE: Defining ComplexParams Spline with Custom Extrapolation\nDESCRIPTION: Definition of a Bézier spline with complex parameters including Linear pre-extrapolation and Sloped post-extrapolation. The spline has three knots with custom tangent widths and slopes at different time points.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_40\n\nLANGUAGE: plain text\nCODE:\n```\nSpline: ComplexParams\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Linear\n  post extrap Sloped 0.57\nKnot:\n  value type double\n  curve type Bezier\n  time 7\n  value 7.21\n  next interp Held\n  preValue 5.5\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 15\n  value 8.18\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 2.49\n  post-tan slope 1.17\nKnot:\n  value type double\n  curve type Bezier\n  time 20\n  value 14.72\n  next interp Curve\n  pre-tan width 3.77\n  pre-tan slope -1.4\n  post-tan width 1.1\n  post-tan slope -1.4\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Layer Composition for Model Hierarchy\nDESCRIPTION: This snippet shows the layer stack and composition results for various prims in a USD stage. It includes the prim stack for each composed prim, demonstrating how local and global class hierarchies are combined.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicLocalAndGlobalClassCombination.testenv/baseline/compositionResults_BasicLocalAndGlobalClassCombination.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLoading @BasicLocalAndGlobalClassCombination/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </Model_1>\n\nPrim Stack:\n    root.sdf             /Model_1\n    model.sdf            /Model\n    model.sdf            /_class_Model\n\nChild names:\n     ['_class_Nested', 'Instance']\n\n------------------------------------------------------------------------\nResults for composing </Model_1/_class_Nested>\n\nPrim Stack:\n    root.sdf             /Model_1/_class_Nested\n    model.sdf            /Model/_class_Nested\n    model.sdf            /_class_Model/_class_Nested\n\nChild names:\n     ['Sym', 'Left']\n\n------------------------------------------------------------------------\nResults for composing </Model_1/_class_Nested/Sym>\n\nPrim Stack:\n    root.sdf             /Model_1/_class_Nested/Sym\n    model.sdf            /Model/_class_Nested/Sym\n    model.sdf            /_class_Model/_class_Nested/Sym\n\n------------------------------------------------------------------------\nResults for composing </Model_1/_class_Nested/Left>\n\nPrim Stack:\n    root.sdf             /Model_1/_class_Nested/Left\n    root.sdf             /Model_1/_class_Nested/Sym\n    model.sdf            /Model/_class_Nested/Left\n    model.sdf            /Model/_class_Nested/Sym\n    model.sdf            /_class_Model/_class_Nested/Left\n    model.sdf            /_class_Model/_class_Nested/Sym\n\n------------------------------------------------------------------------\nResults for composing </Model_1/Instance>\n\nPrim Stack:\n    root.sdf             /Model_1/Instance\n    root.sdf             /Model_1/_class_Nested\n    model.sdf            /Model/Instance\n    model.sdf            /Model/_class_Nested\n    model.sdf            /_class_Model/Instance\n    model.sdf            /_class_Model/_class_Nested\n\nChild names:\n     ['Sym', 'Left']\n\n------------------------------------------------------------------------\nResults for composing </Model_1/Instance/Sym>\n\nPrim Stack:\n    root.sdf             /Model_1/Instance/Sym\n    root.sdf             /Model_1/_class_Nested/Sym\n    model.sdf            /Model/Instance/Sym\n    model.sdf            /Model/_class_Nested/Sym\n    model.sdf            /_class_Model/Instance/Sym\n    model.sdf            /_class_Model/_class_Nested/Sym\n\n------------------------------------------------------------------------\nResults for composing </Model_1/Instance/Left>\n\nPrim Stack:\n    root.sdf             /Model_1/Instance/Left\n    root.sdf             /Model_1/Instance/Sym\n    root.sdf             /Model_1/_class_Nested/Left\n    root.sdf             /Model_1/_class_Nested/Sym\n    model.sdf            /Model/Instance/Left\n    model.sdf            /Model/Instance/Sym\n    model.sdf            /Model/_class_Nested/Left\n    model.sdf            /Model/_class_Nested/Sym\n    model.sdf            /_class_Model/Instance/Left\n    model.sdf            /_class_Model/Instance/Sym\n    model.sdf            /_class_Model/_class_Nested/Left\n    model.sdf            /_class_Model/_class_Nested/Sym\n```\n\n----------------------------------------\n\nTITLE: Group_1 Prim Composition\nDESCRIPTION: Composition results for the Group_1 prim showing stack layers, allowed and prohibited child names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TypicalReferenceToChargroupWithRename.testenv/baseline/compositionResults_TypicalReferenceToChargroupWithRename.txt#2025-04-23_snippet_2\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /Group_1\n    group.sdf            /Group\n\nChild names:\n     ['Model_1']\n\nProhibited child names:\n     ['Model']\n```\n\n----------------------------------------\n\nTITLE: Describing a Spline with Knots (Custom Text Format)\nDESCRIPTION: This text snippet describes a spline configuration. It specifies that the spline is not Hermite, uses Held extrapolation for both pre and post segments, and details two knots. Each knot definition includes time, value, interpolation type ('Curve'), pre/post slopes, pre/post tangent lengths, and auto-tangent flags. This appears to be a custom textual format used within the OpenUSD Ts library.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PostRegressiveLimitActive_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  0.000000: 0.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.000000, postLen 0.800000, auto false / false\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 1.165675, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Schema Generation Component Listing\nDESCRIPTION: Lists the components required for USD schema generation including public classes, Python module files, and resource files. Contains auto-generation warning and file organization structure.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/examples/usdSchemaExamples/generatedSchema.classes.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT.\n\n# Public Classes\ncomplex\nparamsAPI\nsimple\ntokens\n\n# Python Module Files\nmodule.cpp\nwrapComplex.cpp\nwrapParamsAPI.cpp\nwrapSimple.cpp\nwrapTokens.cpp\n\n# Resource Files\ngeneratedSchema.usda\nplugInfo.json\nschema.usda:usdSchemaExamples/schema.usda\n```\n\n----------------------------------------\n\nTITLE: Defining usdRiPxr Library Resources Conditionally in CMake\nDESCRIPTION: This CMake code sets the 'PXR_PREFIX' and 'PXR_PACKAGE' variables for the 'usdRiPxr' library. It then uses an 'if/else' block based on the 'RENDERMAN_VERSION' variable to define the 'usdRiPxr' library using the 'pxr_library' function. If RenderMan version is less than 26.2, it sources resource files (plugInfo.json, generatedSchema.usda, schema.usda) from the local project structure. Otherwise, it sources these files from the specified RenderMan installation directory ('RENDERMAN_LOCATION'). This ensures compatibility with different RenderMan distributions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/usdRiPxr/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE usdRiPxr)\n\n# Conditional logic based on RenderMan version\nif (RENDERMAN_VERSION VERSION_LESS \"26.2\")\n    pxr_library(usdRiPxr\n        RESOURCE_FILES\n        plugInfo.json\n        generatedSchema.usda\n        schema.usda:usdRiPxr/schema.usda\n    )\nelse()\n    # Get the usdRiPxr plugin files from renderman itself\n    # usdRiPxr schemas are known to be installed under the following path:\n    # ${RENDERMAN_LOCATION}/lib/usd_plugins/usdRiPxr/Resources\n    pxr_library(usdRiPxr\n        RESOURCE_FILES\n        ${RENDERMAN_LOCATION}/lib/usd_plugins/usdRiPxr/Resources/plugInfo.json:plugInfo.json\n        ${RENDERMAN_LOCATION}/lib/usd_plugins/usdRiPxr/Resources/generatedSchema.usda:generatedSchema.usda\n        ${RENDERMAN_LOCATION}/lib/usd_plugins/usdRiPxr/Resources/usdRiPxr/schema.usda:usdRiPxr/schema.usda\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: RST Section Header Definition\nDESCRIPTION: Defines the main section header for the variants tutorial using RST syntax\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_variants_example_in_katana.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n==========================\nVariants Example in Katana\n==========================\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation Spline and Knots in Python\nDESCRIPTION: This snippet defines the configuration for an animation spline, including extrapolation methods and knot data with time, value, slope, and length parameters.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/InitiallyRegressiveKeepRatio_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  156.000000: 0.000000, Curve, preSlope 0.000000, postSlope -1.300000, preLen 0.000000, postLen 14.660030, auto false / false\n  167.000000: 28.800000, Curve, preSlope 0.400000, postSlope 0.000000, preLen 3.401930, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Installing Test Directories\nDESCRIPTION: Sets up test directory installation for USD UI node graph and scene graph tests.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUI/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdUINodeGraphNode\n    DEST testUsdUINodeGraphNode\n)\npxr_install_test_dir(\n    SRC testenv/testUsdUISceneGraphPrim\n    DEST testUsdUISceneGraphPrim\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring ESF Tests in OpenUSD with CMake\nDESCRIPTION: Sets up build configurations and test registrations for the ESF library components. Creates and registers tests for FixedSizePolymorphicHolder and EditReason components with expected return codes and execution commands.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/esf/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testEsfFixedSizePolymorphicHolder\n    LIBRARIES\n        esf\n        tf\n    CPPFILES\n        testenv/testEsfFixedSizePolymorphicHolder.cpp\n)\n\npxr_build_test(testEsfEditReason\n    LIBRARIES\n        esf\n    CPPFILES\n        testenv/testEsfEditReason.cpp\n)\n\npxr_register_test(testEsfFixedSizePolymorphicHolder\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testEsfFixedSizePolymorphicHolder\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testEsfEditReason\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testEsfEditReason\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Variables and Definitions for rmanOslParser Plugin in CMake\nDESCRIPTION: Initializes CMake variables specific to the `rmanOslParser` plugin build. It sets `PXR_PREFIX` to an empty string and `PXR_PACKAGE` to `rmanOslParser`. It also adds the `PRMANBUILDINGAPI` preprocessor definition, likely required when compiling code that interacts with the RenderMan Pro Server API.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/rmanOslParser/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX \"\")\nset(PXR_PACKAGE rmanOslParser)\nadd_definitions(-DPRMANBUILDINGAPI)\n```\n\n----------------------------------------\n\nTITLE: Configuring HIO Image Test Build in CMake\nDESCRIPTION: Sets up the build configuration for the HIO image unit tests, including library dependencies and test source files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hio/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_build_test(testHioImage\n    LIBRARIES\n        ar\n        hio\n        plug\n        tf\n\n   CPPFILES\n        testenv/testHioImage.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </Root/B/C> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </Root/B/C>. The prim stack includes /Root/B/C from 'root.sdf', and /Ref/C and /_G from 'ref.sdf'. The resolved child prim names are '_Z' and 'D'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Root/B/C>\n\nPrim Stack:\n    root.sdf             /Root/B/C\n    ref.sdf              /Ref/C\n    ref.sdf              /_G\n\nChild names:\n     ['_Z', 'D']\n```\n\n----------------------------------------\n\nTITLE: Adding PRMANBUILDINGAPI Definition for RiEntryPoints Header in CMake\nDESCRIPTION: Adds a temporary compiler definition to handle an issue with RiEntryPoints.h incorrectly making libloadprman symbols DLL import.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/hdPrman/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DPRMANBUILDINGAPI)\n```\n\n----------------------------------------\n\nTITLE: Setting OpenUSD Project Variables in CMake\nDESCRIPTION: Sets CMake variables `PXR_PREFIX` and `PXR_PACKAGE` to define the prefix path and package name for the OpenUSD component being built. These variables are likely used downstream in the build process for naming conventions or installation paths.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdresolve/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usd)\n```\n\n----------------------------------------\n\nTITLE: Configuring a Regressive S-Curve with Pre-Out Spline\nDESCRIPTION: Definition of a regressive S-curve with pre-out spline configuration. Uses Bezier interpolation with held extrapolation and defines keyframes at time 0 and 1 with different tangent controls from the standard curve.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_79\n\nLANGUAGE: plaintext\nCODE:\n```\nSpline: RegressiveSPreOut\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 1\n  post-tan slope 0.5\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 3\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Installing USD Layer Files with CMake\nDESCRIPTION: CMake install command that copies Sphere.usd and Sphere.usda files to a specified installation subdirectory for USD layer format conversion examples. Uses the PXR_INSTALL_SUBDIR variable to determine the target installation path.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/tutorials/convertingLayerFormats/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n    FILES\n        Sphere.usd\n        Sphere.usda\n    DESTINATION\n        ${PXR_INSTALL_SUBDIR}/convertingLayerFormats\n)\n```\n\n----------------------------------------\n\nTITLE: Test Case Sample Outputs - Text\nDESCRIPTION: Each test case is associated with a block of (x, y) float tuples representing sampled curve points for specific input intervals and sampling rates. Used for comparing expected and actual outputs in unit or regression tests for numerical methods. No dependencies are present within this snippet, but assumes access to a numerical sampling utility. Inputs and outputs are floating point sequences; outputs should be interpreted in the order presented.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n(5, 60)\n(7.6875, 62.40625)\n(10, 65)\n(10.6865234375, 65.56494140625)\n(11.2734375, 64.59765625)\n(12.3125, 60.09375)\n(13.4453125, 55.54296875)\n(14.1494140625, 54.51708984375)\n(15, 55)\n(17.6875, 57.40625)\n(20, 60)\n(20.6865234375, 60.56494140625)\n(21.2734375, 59.59765625)\n(22.3125, 55.09375)\n(23.4453125, 50.54296875)\n(24.1494140625, 49.51708984375)\n(25, 50)\n(27.6875, 52.40625)\n(30, 55)\n(30.6865234375, 55.56494140625)\n(31.2734375, 54.59765625)\n(32.3125, 50.09375)\n(33.4453125, 45.54296875)\n(34.1494140625, 44.51708984375)\n(35, 45)\n(37.6875, 47.40625)\n(40, 50)\n(40.6865234375, 50.56494140625)\n(41.2734375, 49.59765625)\n(42.3125, 45.09375)\n(43.4453125, 40.54296875)\n(44.1494140625, 39.51708984375)\n(45, 40)\n(47.6875, 42.40625)\n(50, 45)\n(50.6865234375, 45.56494140625)\n(51.2734375, 44.59765625)\n(52.3125, 40.09375)\n(53.4453125, 35.54296875)\n(54.1494140625, 34.51708984375)\n(55, 35)\n(57.6875, 37.40625)\n(60, 40)\n(60.6865234375, 40.56494140625)\n(61.2734375, 39.59765625)\n(62.3125, 35.09375)\n(63.4453125, 30.54296875)\n(64.1494140625, 29.51708984375)\n(65, 30)\n(67.6875, 32.40625)\n(70, 35)\n(70.6865234375, 35.56494140625)\n(71.2734375, 34.59765625)\n(72.3125, 30.09375)\n(73.4453125, 25.54296875)\n(74.1494140625, 24.51708984375)\n(75, 25)\n(77.6875, 27.40625)\n(80, 30)\n(80.6865234375, 30.56494140625)\n(81.2734375, 29.59765625)\n(82.3125, 25.09375)\n(83.4453125, 20.54296875)\n(84.1494140625, 19.51708984375)\n(85, 20)\n(87.6875, 22.40625)\n(90, 25)\n(90.6865234375, 25.56494140625)\n(91.2734375, 24.59765625)\n(92.3125, 20.09375)\n(93.4453125, 15.54296875)\n(94.1494140625, 14.51708984375)\n(95, 15)\n(97.6875, 17.40625)\n(100, 20)\n(100.6865234375, 20.56494140625)\n(101.2734375, 19.59765625)\n(102.3125, 15.09375)\n(103.4453125, 10.54296875)\n(104.1494140625, 9.51708984375)\n(105, 10)\n(107.6875, 12.40625)\n(110, 15)\n(110.6865234375, 15.56494140625)\n(111.2734375, 14.59765625)\n(112.3125, 10.09375)\n(113.4453125, 5.54296875)\n(114.1494140625, 4.51708984375)\n(115, 5)\n(117.6875, 7.40625)\n(120, 10)\n(120.6865234375, 10.56494140625)\n(121.2734375, 9.59765625)\n(122.3125, 5.09375)\n(123.4453125, 0.54296875)\n(124.1494140625, -0.48291015625)\n(125, 0)\n(127.6875, 2.40625)\n(130, 5)\n```\n\nLANGUAGE: text\nCODE:\n```\n(180, 30)\n(180.6865234375, 30.56494140625)\n(181.2734375, 29.59765625)\n(182.3125, 25.09375)\n(183.4453125, 20.54296875)\n(184.1494140625, 19.51708984375)\n(185, 20)\n(187.6875, 22.40625)\n(190, 25)\n(190.6865234375, 25.56494140625)\n(191.2734375, 24.59765625)\n(192.3125, 20.09375)\n(193.4453125, 15.54296875)\n(194.1494140625, 14.51708984375)\n(195, 15)\n(197.6875, 17.40625)\n(200, 20)\n(200.6865234375, 20.56494140625)\n(201.2734375, 19.59765625)\n(202.3125, 15.09375)\n(203.4453125, 10.54296875)\n(204.1494140625, 9.51708984375)\n(205, 10)\n```\n\n----------------------------------------\n\nTITLE: Processing Input Array of Numeric Values\nDESCRIPTION: Raw input array containing numeric values that appear to be encoded vertex data or geometry information. The values are integers ranging from 16 to 79.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStSubdivisionOsd3/baseline/testHdStSubdivisionOsd3-Run1-stdout.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n[17, 48, 32, 51, 48, 16, 49, 32, 32, 49, 20, 50, 51, 32, 50, 21, 18, 52, 33, 54, 52, 17, 51, 33, 33, 51, 21, 53, 54, 33, 53, 22, 19, 55, 34, 57, 55, 18, 54, 34, 34, 54, 22, 56, 57, 34, 56, 23, 16, 58, 35, 49, 58, 19, 57, 35, 35, 57, 23, 59, 49, 35, 59, 20, 21, 50, 36, 62, 50, 20, 60, 36, 36, 60, 24, 61, 62, 36, 61, 25, 22, 53, 37, 64, 53, 21, 62, 37, 37, 62, 25, 63, 64, 37, 63, 26, 23, 56, 38, 66, 56, 22, 64, 38, 38, 64, 26, 65, 66, 38, 65, 27, 20, 59, 39, 60, 59, 23, 66, 39, 39, 66, 27, 67, 60, 39, 67, 24, 25, 61, 40, 70, 61, 24, 68, 40, 40, 68, 28, 69, 70, 40, 69, 29, 26, 63, 41, 72, 63, 25, 70, 41, 41, 70, 29, 71, 72, 41, 71, 30, 27, 65, 42, 74, 65, 26, 72, 42, 42, 72, 30, 73, 74, 42, 73, 31, 24, 67, 43, 68, 67, 27, 74, 43, 43, 74, 31, 75, 68, 43, 75, 28, 29, 69, 44, 77, 69, 28, 76, 44, 44, 76, 16, 48, 77, 44, 48, 17, 30, 71, 45, 78, 71, 29, 77, 45, 45, 77, 17, 52, 78, 45, 52, 18, 31, 73, 46, 79, 73, 30, 78, 46, 46, 78, 18, 55, 79, 46, 55, 19, 28, 75, 47, 76, 75, 31, 79, 47, 47, 79, 19, 58, 76, 47, 58, 16]\n```\n\n----------------------------------------\n\nTITLE: Configuring usdUtilsValidators Test in CMake\nDESCRIPTION: Defines the test configuration for usdUtilsValidators, specifying the test libraries, source files, installation directory, and expected return code. The test depends on various USD framework components including ar, arch, tf, sdf, usd, and specialized modules like usdGeom and usdShade.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/usdUtilsValidators/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testUsdUtilsValidators\n    LIBRARIES\n        ar\n        arch\n        tf\n        sdf\n        usd\n        usdGeom\n        usdShade\n        usdValidation\n        usdUtils\n        usdUtilsValidators\n    CPPFILES\n        testenv/testUsdUtilsValidators.cpp\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdUtilsValidators\n    DEST testUsdUtilsValidators\n)\n\npxr_register_test(testUsdUtilsValidators\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsValidators\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: OpenUSD Python Module Files\nDESCRIPTION: Defines the C++ wrapper module files that provide Python bindings for the core USD functionality, including implementations for pass, product, settings, and other components.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdRender/generatedSchema.classes.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Python Module Files\nmodule.cpp\nwrapPass.cpp\nwrapProduct.cpp\nwrapSettings.cpp\nwrapSettingsBase.cpp\nwrapTokens.cpp\nwrapVar.cpp\n```\n\n----------------------------------------\n\nTITLE: Disabling C++ Signatures in Python Docstrings\nDESCRIPTION: Defines a compiler definition to disable automatic C++ signature insertion in Python docstrings, as these are generated separately through the Python documentation build process.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/external/boost/python/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(python\n    PUBLIC PXR_BOOST_PYTHON_NO_PY_SIGNATURES\n)\n```\n\n----------------------------------------\n\nTITLE: Index Results for Empty Topology (GPU Subdivision Enabled)\nDESCRIPTION: This snippet shows the index results for a subdivision test on an empty topology using the Catmull-Clark scheme with GPU subdivision enabled (GPU subdivision = 1). Similar to the non-GPU case, the resulting index list for an empty topology is empty.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStSubdivisionOsd3/baseline/testHdStSubdivisionOsd3-Run1-stdout.txt#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Installing Test Data Directory 'testUsdZipInputFiles4' in CMake\nDESCRIPTION: Uses the `pxr_install_test_dir` custom CMake function to install the contents of the source directory `testenv/testUsdZipInputFiles` into the destination directory `testUsdZipInputFiles4` within the build/install test environment, likely for a fourth test variant focusing on recursive inputs.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdzip/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdZipInputFiles\n    DEST testUsdZipInputFiles4\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Geometry Validators Test Build in CMake\nDESCRIPTION: Sets up the build configuration for the USD Geometry Validators test suite, specifying required libraries and test implementation files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/usdGeomValidators/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testUsdGeomValidators\n    LIBRARIES\n        tf\n        usd\n        usdValidation\n        usdGeom\n        usdGeomValidators\n    CPPFILES\n        testenv/testUsdGeomValidators.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Regressive Loop Spline Definition for Animation Curves\nDESCRIPTION: Definition of a 'RegressiveLoop' spline with Bezier curve type, specifying held extrapolation mode and two knots with precise control point parameters (time, value, tangent width and slope).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_72\n\nLANGUAGE: text\nCODE:\n```\nSpline: RegressiveLoop\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 156\n  value 0\n  next interp Curve\n  pre-tan width 6.2\n  pre-tan slope -1.3\n  post-tan width 15.8\n  post-tan slope -1.3\nKnot:\n  value type double\n  curve type Bezier\n  time 167\n  value 28.8\n  next interp Curve\n  pre-tan width 21.7\n  pre-tan slope 2.4\n  post-tan width 5.5\n  post-tan slope 2.4\n```\n\n----------------------------------------\n\nTITLE: Spline Configuration Data\nDESCRIPTION: Spline curve configuration specifying interpolation type, extrapolation methods and knot point data including slopes and lengths\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/InitiallyRegressiveKeepStart_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  156.000000: 0.000000, Curve, preSlope 0.000000, postSlope -1.300000, preLen 0.000000, postLen 14.666557, auto false / false\n  167.000000: 28.800000, Curve, preSlope 0.400000, postSlope 0.000000, preLen 3.666557, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Loading USD Layer Stack\nDESCRIPTION: Shows the initial layer stack composition starting from root.sdf file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantSelectionInVariant.testenv/baseline/compositionResults_TrickyVariantSelectionInVariant.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nLayer Stack:\n     root.sdf\n```\n\n----------------------------------------\n\nTITLE: Analyzing Invalid Topology Test with Catmull-Clark Scheme\nDESCRIPTION: Results from testing Catmull-Clark subdivision on an invalid topology mesh. The output shows how the algorithm handles problematic mesh configurations, with partial or incomplete results.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStSubdivisionOsd3/baseline/testHdStSubdivisionOsd3-Run1-stdout.txt#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nInvalid Topology Test\nTest subdivTag\nScheme catmullClark\nOrientation rightHanded\nGPU subdivision = 0\nIndex Results\n[7, 18, 14, 21, 18, 8, 19, 14, 14, 19, 9, 20, 21, 14, 20, 10, 11, 22, 16, 22, 12, 23, 17, 24, 13, 24, 17, 23]\nResults\n[(-1, 0, 1), (-1, 0, 0), (-0.5, 0, 0), (-0.5, 0, 1), (0, 0, 1), (0.5, 0, 0), (1, 0, 0), (-0.9375, 0, 0.875), (-0.9375, 0, 0.125), (-0.5625, 0, 0.125), (-0.5625, 0, 0.875), (0, 0, 1), (0.5, 0, 0), (1, 0, 0), (-0.75, 0, 0.5), (0, 0, 0), (0, 0, 1), (0.75, 0, 0), (-1, 0, 0.5), (-0.75, 0, 0), (-0.5, 0, 0.5), (-0.75, 0, 1), (0, 0, 1), (0.75, 0, 0), (0.75, 0, 0)]\n```\n\n----------------------------------------\n\nTITLE: Registering Test Scripts\nDESCRIPTION: Registers Python test scripts for the usdRi module testing suite.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdRi/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_test_scripts(\n    testenv/testUsdRiSchemata.py\n    testenv/testUsdRiSplineAPI.py\n    testenv/testUsdRiUtilities.py\n)\n```\n\n----------------------------------------\n\nTITLE: Registering testInvocationErrorInvalidExtension Test in CMake\nDESCRIPTION: Registers a Python test named `testInvocationErrorInvalidExtension` using `pxr_register_test`. This test runs the `usdfixbrokenpixarschemas` command with a file that has an unsupported extension (`file.txt`). Similar to the invalid file test, it expects the command to fail with a return code of 1 (`EXPECTED_RETURN_CODE 1`), ensuring the tool validates input file types.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdfixbrokenpixarschemas/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testInvocationErrorInvalidExtension\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdfixbrokenpixarschemas file.txt\"\n    EXPECTED_RETURN_CODE 1\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Layer Stack in OpenUSD\nDESCRIPTION: Shows the layer stack of the OpenUSD scene, including the root layer and sublayers. Note the duplicate inclusion of B.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicDuplicateSublayer.testenv/baseline/compositionResults_BasicDuplicateSublayer.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLayer Stack:\n     root.sdf\n     A.sdf\n     B.sdf\n     B.sdf\n```\n\n----------------------------------------\n\nTITLE: Configuring and Testing Spline Data with TsRegressionPreventer in Python\nDESCRIPTION: This snippet defines interpolation parameters and test data for spline regression checks using a Python-based test harness. It includes regression-related flags (such as adjustment state, segment presence, and widths), spline configuration (type, extrapolation mode, and knot data), and the construction of spline test data objects. Dependencies include the TsRegressionPreventer and Ts.TsTest_SplineData, and parameters like segment adjustment states and knots are crucial to define spline shape and regression behavior. Inputs are test parameters and knot values; output is structured spline test data as used by the regression system.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PostRegressiveKeepRatio_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: true\n  havePreSegment: true\n  preActiveAdjusted: true\n  preActiveAdjustedWidth: 1.203475\n  preOppositeAdjusted: true\n  preOppositeAdjustedWidth: 0.740596\n  havePostSegment: false\n  postActiveAdjusted: false\n  postActiveAdjustedWidth: 0.000000\n  postOppositeAdjusted: false\n  postOppositeAdjustedWidth: 0.000000\n-----\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  0.000000: 0.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.000000, postLen 0.740596, auto false / false\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 1.203475, postLen 0.000000, auto false / false\n-----\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.7b2f6f1ab02dfp-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.3416f3213ad1cp+0'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Defining Regressive Pre-Curve Bezier Spline\nDESCRIPTION: Specifies a regressive pre-curve Bezier spline with two knots. The spline uses held extrapolation and has a post-tangent width of 2 at the first knot.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\nSpline: RegressivePreC\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 2\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Composing Anim Prim in _Class_KnotRig in USD\nDESCRIPTION: This snippet shows the composition results for the Anim prim within _Class_KnotRig. It includes the prim stack, property names, and property stacks.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsAndRelocates5.testenv/baseline/compositionResults_TrickyInheritsAndRelocates5.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </CharRig/Rig/TentaclesRig/TentacleRigs/R1TentacleRig/TentacleInterface/_Class_KnotRig/Anim>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface/_Class_KnotRig/Anim\n    TentacleRig.sdf      /TentacleRig/TentacleInterface/_Class_KnotRig/Anim\n\nProperty names:\n     ['foo']\n\nProperty stacks:\n/CharRig/Rig/TentaclesRig/TentacleRigs/R1TentacleRig/TentacleInterface/_Class_KnotRig/Anim.foo:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface/_Class_KnotRig/Anim.foo\n    TentacleRig.sdf      /TentacleRig/TentacleInterface/_Class_KnotRig/Anim.foo\n```\n\n----------------------------------------\n\nTITLE: Initializing TsTest_SplineData in Python\nDESCRIPTION: This Python code initializes a `Ts.TsTest_SplineData` object. It configures the spline properties (non-Hermite, Held extrapolation) and defines its knots programmatically. The knot parameters (time, value, interpolation method, slopes, lengths, auto flags) correspond to the textual description snippet, using hexadecimal float representations. This suggests it's part of a test setup for the OpenUSD Ts library.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PostRegressiveLimitActive_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.999999999999ap-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.2a69b463e86acp+0'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Composing TentacleInterface Prim in USD\nDESCRIPTION: This snippet shows the composition results for the TentacleInterface prim in the tentacle rig. It includes the prim stack and child names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsAndRelocates5.testenv/baseline/compositionResults_TrickyInheritsAndRelocates5.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </CharRig/Rig/TentaclesRig/TentacleRigs/R1TentacleRig/TentacleInterface>\n\nPrim Stack:\n    root.sdf             /CharRig/Rig/TentaclesRig/TentacleRigs/_Class_TentacleRig/TentacleInterface\n    TentacleRig.sdf      /TentacleRig/TentacleInterface\n\nChild names:\n     ['_Class_KnotRig', 'Knot03Rig']\n```\n\n----------------------------------------\n\nTITLE: Building SDF Test Libraries in CMake\nDESCRIPTION: Configures build settings for test-related shared libraries that support SDF testing infrastructure. Includes file format capabilities, exception handling, and custom resolvers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/sdf/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_build_test_shared_lib(TestSdfFileFormatCapabilities\n    INSTALL_PREFIX SdfPlugins\n    LIBRARIES\n        sdf\n        tf\n    CPPFILES\n        testenv/TestSdfFileFormatCapabilities.cpp\n)\n\n# ... additional test libraries ...\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenUSD Test Suite in CMake\nDESCRIPTION: Sets up various test scripts, shared libraries, and executables for testing different aspects of the OpenUSD library. This includes Python test scripts, C++ test executables, and test plugins.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_test_scripts(\n    testenv/testUsdAppliedAPISchemas.py\n    testenv/testUsdAttributeBlocking.py\n    testenv/testUsdAttributeConnections.py\n    testenv/testUsdAttributeAssetPathVariableExpressions.py\n    testenv/testUsdAttributeQuery.py\n    testenv/testUsdBugs.py\n    testenv/testUsdBug119633.py\n    testenv/testUsdBug141491.py\n    testenv/testUsdChangeProcessing.py\n    testenv/testUsdClasses.py\n    testenv/testUsdCollectionAPI.py\n    testenv/testUsdCratePayloadConversionFromVersion07.py\n    testenv/testUsdCrateRelocates.py\n    testenv/testUsdCrateSpecific.py\n    testenv/testUsdCreateProperties.py\n    testenv/testUsdDataFormats.py\n    testenv/testUsdExternalAssetDependencies.py\n    testenv/testUsdErrors.py\n    testenv/testUsdFallbackPrimTypes.py\n    testenv/testUsdFileFormats.py\n    testenv/testUsdFlatten.py\n    testenv/testUsdFlatten2.py\n    testenv/testUsdFlattenLayerStack.py\n    testenv/testUsdFlattenProperties.py\n    testenv/testUsdInherits.py\n    testenv/testUsdInstanceProxy.py\n    testenv/testUsdInstancing.py\n    testenv/testUsdLoadUnloadDeepNestedInstancing.py\n    testenv/testUsdMetadata.py\n    testenv/testUsdModel.py\n    testenv/testUsdNamespaceEditor.py\n    testenv/testUsdNamespaceEditorDependentEditsBase.py:testUsdNamespaceEditorDependentEditsBase.py\n    testenv/testUsdNamespaceEditorDependentEditsBasicClassArcs.py\n    testenv/testUsdNamespaceEditorDependentEditsBasicReferencesAndPayloads.py\n    testenv/testUsdNamespaceEditorDependentEditsBasicRelocates.py\n    testenv/testUsdNamespaceEditorDependentEditsBasicSublayers.py\n    testenv/testUsdNamespaceEditorDependentEditsBasicVariants.py\n    testenv/testUsdNamespaceEditorDependentEditsSiblingNodeSpecConflicts.py\n    testenv/testUsdNamespaceEditorProperties.py\n    testenv/testUsdNamespaceEditorTargetPathFixup.py\n    testenv/testUsdNotices.py\n    testenv/testUsdObjectsChangedNotices.py\n    testenv/testUsdObjectsChangedNoticesSublayerOps.py\n    testenv/testUsdOpaqueAttributes.py\n    testenv/testUsdPathExpressionAttrs.py\n    testenv/testUsdPayloads.py\n    testenv/testUsdPrimCompositionQuery.py\n    testenv/testUsdPrimFlagsPredicate.py\n    testenv/testUsdPrimRange.py\n    testenv/testUsdPrims.py\n    testenv/testUsdReadOutOfBounds.py\n    testenv/testUsdReferences.py\n    testenv/testUsdRelationships.py\n    testenv/testUsdResolveTargetPy.py\n    testenv/testUsdSchemaBasePy.py\n    testenv/testUsdSchemaRegistry.py\n    testenv/testUsdSchemaRegistryThreadedInit.py\n    testenv/testUsdSchemaVersioning.py\n    testenv/testUsdSpecializes.py\n    testenv/testUsdSplines.py\n    testenv/testUsdStage.py\n    testenv/testUsdStageCache.py\n    testenv/testUsdStageDefaultResolver.py\n    testenv/testUsdStageLoadUnload.py\n    testenv/testUsdStagePopulationMasks.py\n    testenv/testUsdTimeCode.py\n    testenv/testUsdTimeCodeRepr.py\n    testenv/testUsdTimeOffsets.py\n    testenv/testUsdTimeSamples.py\n    testenv/testUsdTimeValueAuthoring.py\n    testenv/testUsdUsdzFileFormat.py\n    testenv/testUsdValueClips.py\n    testenv/testUsdVariantEditing.py\n    testenv/testUsdVariantFallbacks.py\n    testenv/testUsdVariants.py\n    testenv/testUsdZipFile.py\n)\n\npxr_build_test_shared_lib(TestUsdProceduralExternalAssetsFileFormatPlugin\n    INSTALL_PREFIX UsdPlugins\n    LIBRARIES\n        sdf\n        tf\n        usd\n        \n    CPPFILES\n        testenv/TestUsdProceduralExternalAssetsFileFormatPlugin.cpp\n)\n\npxr_build_test_shared_lib(TestUsdResolverChangedResolver\n    INSTALL_PREFIX UsdPlugins\n    LIBRARIES\n        ar\n        plug\n        tf\n\n    CPPFILES\n        testenv/TestUsdResolverChangedResolver.cpp\n)\n\npxr_build_test(testUsdAttributeBlockingCpp\n    LIBRARIES\n        tf\n        usd\n    CPPFILES\n        testenv/testUsdAttributeBlocking.cpp\n)\n\npxr_build_test(testUsdAttributeInterpolationCpp\n    LIBRARIES\n        usd\n    CPPFILES\n        testenv/testUsdAttributeInterpolationCpp.cpp\n)\n\npxr_build_test(testUsdColorSpaceAPI\n    LIBRARIES\n        usd\n    CPPFILES\n        testenv/testUsdColorSpaceAPI.cpp\n)\n\npxr_build_test(testUsdCreateAttributeCpp\n    LIBRARIES\n        usd\n    CPPFILES\n        testenv/testUsdCreateAttributeCpp.cpp\n)\n\npxr_build_test(testUsdHardToReach\n    LIBRARIES\n        usd\n    CPPFILES\n        testenv/testUsdHardToReach.cpp\n)\n\npxr_build_test(testUsdIntegerCoding\n    LIBRARIES\n        usd\n    CPPFILES\n        testenv/testUsdIntegerCoding.cpp\n)\n\npxr_build_test(testUsdMetadataCpp\n    LIBRARIES\n        usd\n    CPPFILES\n        testenv/testUsdMetadata.cpp\n)\n\npxr_build_test(testUsdResolverChanged\n    LIBRARIES\n        arch\n        plug\n        sdf\n        tf\n        usd\n    CPPFILES\n        testenv/testUsdResolverChanged.cpp\n)\n\npxr_build_test(testUsdInstancingCpp\n    LIBRARIES\n        tf\n        usd\n        sdf\n    CPPFILES\n        testenv/testUsdInstancingCpp.cpp\n)\n\npxr_build_test(testUsdPrimGetDescendants\n    LIBRARIES\n        tf\n        usd\n    CPPFILES\n        testenv/testUsdPrimGetDescendants.cpp\n)\n\npxr_build_test(testUsdStageNotification\n```\n\n----------------------------------------\n\nTITLE: Defining Bezier Curve Knots and Parameters for Animation\nDESCRIPTION: Configuration of Bezier curve knots with parameters defining tangent widths and slopes. These knot definitions control the shape of animation curves between control points.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_56\n\nLANGUAGE: plaintext\nCODE:\n```\n  pre-tan width 1.3\n  pre-tan slope -5.3\n  post-tan width 1.8\n  post-tan slope -5.3\nKnot:\n  value type double\n  curve type Bezier\n  time 140\n  value 15\n  next interp Curve\n  pre-tan width 3\n  pre-tan slope -4\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Python Spline Test Data Object\nDESCRIPTION: Python test data object construction showing detailed spline configuration with hex-formatted floating point values for precise numerical representation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/MoveStartLimitActive_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.999999999999ap-2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.9996744b2b777p-3'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.9998d045fe11p-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Conditional Build Configuration for OpenUSD Components\nDESCRIPTION: Adds subdirectories for tutorials and examples to the build process if their respective build flags (PXR_BUILD_TUTORIALS and PXR_BUILD_EXAMPLES) are enabled. This allows for selective compilation of optional OpenUSD components.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/usd/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (PXR_BUILD_TUTORIALS)\n    add_subdirectory(tutorials)\nendif()\nif (PXR_BUILD_EXAMPLES)\n    add_subdirectory(examples)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake include directory configuration for ef library\nDESCRIPTION: Disables the inclusion of the current directory in the include path to prevent ambiguity between local headers and system headers, specifically for time.h.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/ef/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Remove current dir from include path, or else ef/time.h replaces the system\n# header <time.h>\nset(CMAKE_INCLUDE_CURRENT_DIR OFF)\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Scene Composition with Layer and Prim Stacks\nDESCRIPTION: This snippet shows the layer stack, prim stack, and child names for various prims in a USD scene. It illustrates how USD resolves inheritance and referencing during composition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicListEditingWithInherits.testenv/baseline/compositionResults_BasicListEditingWithInherits.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLoading @BasicListEditingWithInherits/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </Model>\n\nPrim Stack:\n    root.sdf             /Model\n    model.sdf            /Model\n\nChild names:\n     ['SymRig', 'LeftRig']\n\n------------------------------------------------------------------------\nResults for composing </Model/SymRig>\n\nPrim Stack:\n    model.sdf            /Model/SymRig\n\nChild names:\n     ['C2', 'C1']\n\n------------------------------------------------------------------------\nResults for composing </Model/SymRig/C2>\n\nPrim Stack:\n    model.sdf            /Model/SymRig/C2\n\n------------------------------------------------------------------------\nResults for composing </Model/SymRig/C1>\n\nPrim Stack:\n    model.sdf            /Model/SymRig/C1\n\n------------------------------------------------------------------------\nResults for composing </Model/LeftRig>\n\nPrim Stack:\n    model.sdf            /Model/LeftRig\n    model.sdf            /Model/SymRig\n\nChild names:\n     ['C1', 'C2']\n\n------------------------------------------------------------------------\nResults for composing </Model/LeftRig/C1>\n\nPrim Stack:\n    model.sdf            /Model/SymRig/C1\n\n------------------------------------------------------------------------\nResults for composing </Model/LeftRig/C2>\n\nPrim Stack:\n    model.sdf            /Model/SymRig/C2\n```\n\n----------------------------------------\n\nTITLE: Configuring HgiGL Command Test\nDESCRIPTION: Configures additional test case for HgiGL command functionality, specifically for shared library builds. Includes image comparison test setup.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hgiGL/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testHgiGLCommand\n    DEST testHgiGLCommand\n)\npxr_register_test(testHgiGLCommand\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHgiCommand --write testHgiGLCommand_triangle.png\"\n    IMAGE_DIFF_COMPARE\n        testHgiGLCommand_triangle.png\n    FAIL 1\n    FAIL_PERCENT 0.001\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Defining USD Python Binary Target 'usdstitch' in CMake\nDESCRIPTION: This CMake code defines a Python binary target named `usdstitch` using the `pxr_python_bin` function. It declares dependencies on the `tf`, `sdf`, and `usdUtils` libraries within the Pixar USD framework. This likely sets up the necessary build steps to create an executable for the `usdstitch` tool. Requires the `pxr_python_bin` CMake function to be defined and the dependent libraries to be available.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdstitch/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_python_bin(usdstitch\n    DEPENDENCIES\n        tf\n        sdf\n        usdUtils\n)\n```\n\n----------------------------------------\n\nTITLE: Sampling Animation Spline with LoopOscillate Extrapolation\nDESCRIPTION: Demonstrates sampling the LoopOscillate spline at various time ranges and intervals, showing the resulting interpolated and extrapolated values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_67\n\nLANGUAGE: plaintext\nCODE:\n```\nTest Case 142: SampleWithSources([100, 110], 50, 50, 1)\n0: (TsSourceKnotInterp)\n    (100, 10)\n    (100.269775390625, 10.0286865234375)\n    (100.517578125, 10.1123046875)\n    (100.744873046875, 10.2471923828125)\n    (100.953125, 10.4296875)\n    (101.143798828125, 10.6561279296875)\n    (101.318359375, 10.9228515625)\n    (101.625, 11.5625)\n    (101.884765625, 12.3193359375)\n    (102.109375, 13.1640625)\n    (102.5, 15)\n    (102.890625, 16.8359375)\n    (103.115234375, 17.6806640625)\n    (103.375, 18.4375)\n    (103.681640625, 19.0771484375)\n    (103.856201171875, 19.3438720703125)\n    (104.046875, 19.5703125)\n    (104.255126953125, 19.7528076171875)\n    (104.482421875, 19.8876953125)\n    (104.730224609375, 19.9713134765625)\n    (105, 20)\n    (110, 15)\n\nTest Case 143: SampleWithSources([85, 125], 50, 50, 10)\n0: (TsSourcePreExtrapLoop)\n    (85, 20)\n    (90, 15)\n1: (TsSourceKnotInterp)\n    (100, 10)\n    (100.953125, 10.4296875)\n    (101.625, 11.5625)\n    (102.5, 15)\n    (103.375, 18.4375)\n    (104.046875, 19.5703125)\n    (105, 20)\n    (110, 15)\n2: (TsSourcePostExtrapLoop)\n    (120, 10)\n    (120.953125, 10.4296875)\n    (121.625, 11.5625)\n    (122.5, 15)\n    (123.375, 18.4375)\n    (124.046875, 19.5703125)\n    (125, 20)\n\nTest Case 144: SampleWithSources([102.5, 107.5], 50, 50, 0.5)\n0: (TsSourceKnotInterp)\n    (102.5, 15)\n    (102.5, 15)\n    (102.689453125, 15.9326171875)\n    (102.890625, 16.8359375)\n    (103.115234375, 17.6806640625)\n    (103.239990234375, 18.0718994140625)\n    (103.375, 18.4375)\n    (103.521728515625, 18.7738037109375)\n    (103.681640625, 19.0771484375)\n    (103.856201171875, 19.3438720703125)\n    (104.046875, 19.5703125)\n    (104.255126953125, 19.7528076171875)\n    (104.482421875, 19.8876953125)\n    (104.730224609375, 19.9713134765625)\n    (105, 20)\n    (107.5, 17.5)\n```\n\n----------------------------------------\n\nTITLE: Sample With Sources Test Case for Bezier Curve Points\nDESCRIPTION: Example of a SampleWithSources test showing sampling in the range [-1.5, 2.5] with 500x500 resolution and a step of 10. The data is organized by interpolation type with coordinate pairs representing curve points.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_101\n\nLANGUAGE: raw\nCODE:\n```\nTest Case 203: SampleWithSources([-1.5, 2.5], 500, 500, 10)\n0: (TsSourcePreExtrap)\n    (-1.5, 0)\n    (0, 0)\n1: (TsSourceKnotInterp)\n    (0, 0)\n    (0.11530587257148221, 0.10626445002348442)\n    (0.1562471875, 0.24925592656511997)\n    (0.16930476110179554, 0.582671934724551)\n    (0.2185553281119, 0.7417224541031999)\n    (0.34770995415269335, 0.8747519755217067)\n    (0.5953357933925889, 0.9660734928604977)\n    (1, 1)\n2: (TsSourcePostExtrap)\n    (1, 1)\n    (2.5, 1)\n```\n\n----------------------------------------\n\nTITLE: Setting Package Variables for rmanUsdValidators in CMake\nDESCRIPTION: Sets the `PXR_PREFIX` CMake variable to an empty string and the `PXR_PACKAGE` variable to `rmanUsdValidators`. These variables are likely used by the OpenUSD build system's custom CMake functions to configure the plugin build.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/rmanUsdValidators/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX \"\")\nset(PXR_PACKAGE rmanUsdValidators)\n```\n\n----------------------------------------\n\nTITLE: Loading Contributors List with JavaScript and HTML\nDESCRIPTION: A small HTML and JavaScript snippet that dynamically loads the contributors list from an external file (contributors.html) into the current document using jQuery.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/contributors.rst#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"contributors\"></div>\n<script>\n   $(\"#contributors\").load(\"../contributors.html\");\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring User Guides Section Navigation in Sphinx Documentation\nDESCRIPTION: Sphinx toctree directive that configures the User Guides section navigation with a depth limit of 1, including various guides related to collections, color, namespace editing, rendering, primvars, schema domains, and variable expressions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toc.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :hidden:\n   :caption: User Guides\n   :maxdepth: 1\n\n   Collections and Patterns <user_guides/collections_and_patterns>\n   Color User's Guide <user_guides/color_user_guide>\n   Namespace Editing <user_guides/namespace_editing>\n   Rendering with USD <user_guides/render_user_guide>\n   Primvars <user_guides/primvars>\n   Schema Domains <user_guides/schemas/index>\n   Variable Expressions <user_guides/variable_expressions>\n```\n\n----------------------------------------\n\nTITLE: Sphere Parameter Updates\nDESCRIPTION: Modifications to sphere radius (1 to 2) and translation values (-5 to -6 on X axis)\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddiff/testenv/testDiffToolIterateUsdz/baseline/iterate_usd_crate.txt#2025-04-23_snippet_4\n\nLANGUAGE: usda\nCODE:\n```\ndouble radius = 1\ndouble3 xformOp:translate = (-5, 0, 0)\ndouble radius = 2\ndouble3 xformOp:translate = (-6, 0, 0)\n```\n\n----------------------------------------\n\nTITLE: Defining Work Library Configuration in CMake for OpenUSD\nDESCRIPTION: Configures the 'work' library with its dependencies, including TBB (Threading Building Blocks). Specifies public classes related to threading and parallel processing, and defines various headers, Python module files, and documentation files to include in the build.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/work/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/base)\nset(PXR_PACKAGE work)\n\npxr_library(work\n    LIBRARIES\n        tf\n        trace\n        ${TBB_tbb_LIBRARY}\n\n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n\n    PUBLIC_CLASSES\n        detachedTask\n        dispatcher\n        loops\n        reduce\n        singularTask\n        threadLimits\n        utils\n\n    PUBLIC_HEADERS\n        api.h\n        sort.h\n        withScopedParallelism.h\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapThreadLimits.cpp\n\n    PYMODULE_FILES\n        __init__.py\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Include Build Subdirectories with CMake\nDESCRIPTION: This CMake code adds several subdirectories to the build configuration. 'hdStorm' and 'hioAvif' are added unconditionally. 'hdEmbree' is included if the `PXR_BUILD_EMBREE_PLUGIN` variable is true. 'hdPrmanLoader' is included if `PXR_BUILD_PRMAN_PLUGIN` is true AND the `RENDERMAN_VERSION_MAJOR` variable is greater than \"22\". 'hioOiio' is included if `PXR_BUILD_OPENIMAGEIO_PLUGIN` is true. This pattern allows for a modular build where components are included based on user configuration or detected dependencies.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/plugin/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(hdStorm)\nif (${PXR_BUILD_EMBREE_PLUGIN})\n    add_subdirectory(hdEmbree)\nendif()\nif (${PXR_BUILD_PRMAN_PLUGIN} AND \"${RENDERMAN_VERSION_MAJOR}\" GREATER \"22\")\n    add_subdirectory(hdPrmanLoader)\nendif()\nif (PXR_BUILD_OPENIMAGEIO_PLUGIN)\n    add_subdirectory(hioOiio)\nendif()\nadd_subdirectory(hioAvif)\n```\n\n----------------------------------------\n\nTITLE: Configuring Regressive Post-Control Bezier Spline in OpenUSD\nDESCRIPTION: This snippet defines a regressive post-control Bezier spline configuration in OpenUSD. It specifies the value type, time valuation, curve type, and extrapolation methods.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_86\n\nLANGUAGE: plaintext\nCODE:\n```\nSpline: RegressivePostC\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\n```\n\n----------------------------------------\n\nTITLE: Defining and Documenting a Spline with Knots and Slopes - Structured Text\nDESCRIPTION: This block uses a clear, readable format to define a spline including its Hermite status, extrapolation modes, and explicit knot positions with slopes and segment lengths. This is suitable for documentation, configuration, and validation of spline curves in animation or data regression, clearly listing input values for each key parameter. There are no code execution dependencies, and the format must be parsed by custom or domain-specific tools rather than a programming language.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReorderLimitActive_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: structured text\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope -0.250000, preLen 0.000000, postLen 0.250000, auto false / false\n  3.000000: 1.000000, Curve, preSlope -0.250000, postSlope -0.250000, preLen 0.250000, postLen 0.250000, auto false / false\n  3.200000: 2.000000, Curve, preSlope 0.250000, postSlope 0.250000, preLen 0.130900, postLen 0.250000, auto false / false\n  4.000000: 2.000000, Curve, preSlope 0.250000, postSlope 0.000000, preLen 0.250000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </RefToRoot/_Y/C/D> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </RefToRoot/_Y/C/D>. The prim stack combines contributions from /Ref/C/D and /Ref/C/_Z in 'ref.sdf'. The 'prop' property stack lists contributions from both corresponding locations, mirroring </Root/_Y/C/D>.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </RefToRoot/_Y/C/D>\n\nPrim Stack:\n    ref.sdf              /Ref/C/D\n    ref.sdf              /Ref/C/_Z\n\nProperty names:\n     ['prop']\n\nProperty stacks:\n/RefToRoot/_Y/C/D.prop:\n    ref.sdf              /Ref/C/D.prop\n    ref.sdf              /Ref/C/_Z.prop\n```\n\n----------------------------------------\n\nTITLE: Configuring Spline and Knots in Python\nDESCRIPTION: This snippet defines a spline configuration with Hermite interpolation disabled and held extrapolation. It also specifies two knots with their respective properties.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/NoopLimitActive_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSpline:\n  hermite False\n  preExtrap Held\n  postExtrap Held\nKnots:\n  0.000000: 0.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.000000, postLen 0.800000, auto False / False\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.800000, postLen 0.000000, auto False / False\n```\n\n----------------------------------------\n\nTITLE: Calculating RenderMan Environment Variables for Testing in CMake\nDESCRIPTION: Determines the absolute paths for `RMANTREE` (RenderMan installation root, derived from `RENDERMAN_INCLUDE_DIR`) and `RMAN_SHADERPATH` (path to test shaders within the build/install directory, derived from `CMAKE_INSTALL_PREFIX`). These calculated paths (`RMANTREE_PATH`, `RMANSHADER_PATH`) are intended to be set as environment variables for running tests, ensuring the tests can locate the RenderMan installation and necessary shader resources. The comment notes `RMAN_SHADERPATH` might only be needed for monolithic builds.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/rmanOslParser/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Need to set RMANTREE and RMAN_SHADERPATH environment variable when running\n# tests.\n#\n# XXX: RMAN_SHADERPATH is only necessary for the monolithic build; in all\n# other cases, the shaders accessed by the test are automatically found\n# relative to libHdPrmanLoader. We may be able to remove this if we made\n# it so this library wasn't embedded in the monolithic library.\nget_filename_component(RMANTREE_PATH \"${RENDERMAN_INCLUDE_DIR}/..\" ABSOLUTE)\nget_filename_component(RMANSHADER_PATH \"${CMAKE_INSTALL_PREFIX}/plugin/usd/resources/shaders\" ABSOLUTE)\n```\n\n----------------------------------------\n\nTITLE: Listing Resource Files for OpenUSD Animation Schema\nDESCRIPTION: Enumerates the resource files used in the OpenUSD animation schema, including the generated schema file, plugin information, and the main schema definition file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdSkel/generatedSchema.classes.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# Resource Files\ngeneratedSchema.usda\nplugInfo.json\nschema.usda:usdSkel/schema.usda\n```\n\n----------------------------------------\n\nTITLE: Defining Cusp Bezier Curve Spline in Text Format\nDESCRIPTION: Specifies a cusp Bezier curve spline with two knot points. The curve has opposing tangent slopes, creating a sharp peak or cusp at the midpoint of the curve.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_27\n\nLANGUAGE: text\nCODE:\n```\nSpline: Cusp\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 1\n  post-tan slope 0.5\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 0\n  next interp Curve\n  pre-tan width 1\n  pre-tan slope -0.5\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Conditionally Installing and Registering testRenderSettingsTerminalsAPI Test (PRMan Plugin) in CMake\nDESCRIPTION: This CMake block conditionally executes only if the `PXR_BUILD_PRMAN_PLUGIN` variable is enabled. If true, it first installs the `testenv/testRenderSettingsTerminalsAPI` test directory using `pxr_install_test_dir`. Then, it registers a Python test named `testRenderSettingsTerminalsAPI` using `pxr_register_test`. The test runs `usdfixbrokenpixarschemas` on `test.usda` with backup, compares the results (`test.usda`, `backup.usda`) against baselines using `DIFF_COMPARE`, expects success (`EXPECTED_RETURN_CODE 0`), and cleans output. This setup ensures RenderMan-specific fixes are tested only when the relevant plugin is built.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdfixbrokenpixarschemas/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif (PXR_BUILD_PRMAN_PLUGIN)\npxr_install_test_dir(\n    SRC testenv/testRenderSettingsTerminalsAPI\n    DEST testRenderSettingsTerminalsAPI\n)\n\npxr_register_test(testRenderSettingsTerminalsAPI\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdfixbrokenpixarschemas test.usda --backup backup.usda\"\n    DIFF_COMPARE test.usda\n    DIFF_COMPARE backup.usda\n    EXPECTED_RETURN_CODE 0\n    CLEAN_OUTPUT\n)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering usdview Clipping Planes Test\nDESCRIPTION: Registers a CMake test named `testUsdviewClippingPlanes`. This test executes `testusdview` with the Python script `testUsdviewClippingPlanes.py` and `test.usda`. It validates camera clipping plane functionality by performing perceptual image difference comparison against multiple images representing different clipping scenarios (`no_override.png`, `override_near.png`, etc.), using failure thresholds of 0.05 absolute and 0.03 percent, and expecting a return code of 0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdviewClippingPlanes\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewClippingPlanes.py test.usda\"\n    IMAGE_DIFF_COMPARE\n        no_override.png\n        override_near.png\n        override_far.png\n        override_both.png\n        before_recompute.png\n        after_recompute.png\n    FAIL 0.05\n    FAIL_PERCENT 0.03\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Core HGI Interop Build Settings\nDESCRIPTION: Sets up initial build configuration variables and checks GPU support requirement. Defines the package prefix and name, and exits if GPU support is disabled.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hgiInterop/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE hgiInterop)\n\nif (NOT ${PXR_BUILD_GPU_SUPPORT})\n    message(STATUS\n        \"Skipping ${PXR_PACKAGE} because PXR_BUILD_GPU_SUPPORT is OFF\")\n    return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring TsRegressionPreventer Results - Data\nDESCRIPTION: Defines the segment-level boolean and floating-point settings controlling how regression along a spline is prevented. Dependencies include knowledge of the TsRegressionPreventer class or logic. Parameters include whether pre/post segments exist, their activation adjustments, and relevant widths, suitable for low-level debugging or test validation. Inputs/outputs are not code-executable, but structure supports code-driven parsing.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReorderKeepStart_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: data\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: true\n  havePreSegment: true\n  preActiveAdjusted: true\n  preActiveAdjustedWidth: 0.130900\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.250000\n  havePostSegment: true\n  postActiveAdjusted: false\n  postActiveAdjustedWidth: 0.250000\n  postOppositeAdjusted: false\n  postOppositeAdjustedWidth: 0.250000\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for /Model/Scope/HighScopeStuff\nDESCRIPTION: Displays the composition results for '/Model/Scope/HighScopeStuff'. The prim stack indicates this prim is defined at '/Model{complexity=high}Scope/HighScopeStuff' within 'model.sdf', originating from the 'high' complexity variant applied to the '/Model/Scope' prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsInVariants.testenv/baseline/compositionResults_TrickyInheritsInVariants.txt#2025-04-23_snippet_6\n\nLANGUAGE: usd-composition-log\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Model/Scope/HighScopeStuff>\n\nPrim Stack:\n    model.sdf            /Model{complexity=high}Scope/HighScopeStuff\n```\n\n----------------------------------------\n\nTITLE: Loading USD Session and Root Layers\nDESCRIPTION: This section shows the initial loading messages indicating which session and root SDF layer files are being loaded for the USD stage composition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLoading session @BasicReference/session.sdf@\n\nLoading @BasicReference/root.sdf@\n```\n\n----------------------------------------\n\nTITLE: USD Light Schema Class and File Listing\nDESCRIPTION: Auto-generated listing of public classes, Python wrapper modules, and resource files that make up the USD lighting schema. Includes various light types, APIs, and supporting classes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdLux/generatedSchema.classes.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT.\n\n# Public Classes\nboundableLightBase\ncylinderLight\ndiskLight\ndistantLight\ndomeLight\ndomeLight_1\ngeometryLight\nlightAPI\nlightFilter\nlightListAPI\nlistAPI\nmeshLightAPI\nnonboundableLightBase\npluginLight\npluginLightFilter\nportalLight\nrectLight\nshadowAPI\nshapingAPI\nsphereLight\ntokens\nvolumeLightAPI\n\n# Python Module Files\nmodule.cpp\nwrapBoundableLightBase.cpp\nwrapCylinderLight.cpp\nwrapDiskLight.cpp\nwrapDistantLight.cpp\nwrapDomeLight.cpp\nwrapDomeLight_1.cpp\nwrapGeometryLight.cpp\nwrapLightAPI.cpp\nwrapLightFilter.cpp\nwrapLightListAPI.cpp\nwrapListAPI.cpp\nwrapMeshLightAPI.cpp\nwrapNonboundableLightBase.cpp\nwrapPluginLight.cpp\nwrapPluginLightFilter.cpp\nwrapPortalLight.cpp\nwrapRectLight.cpp\nwrapShadowAPI.cpp\nwrapShapingAPI.cpp\nwrapSphereLight.cpp\nwrapTokens.cpp\nwrapVolumeLightAPI.cpp\n\n# Resource Files\ngeneratedSchema.usda\nplugInfo.json\nschema.usda:usdLux/schema.usda\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Alembic Plugin Dependencies in CMake\nDESCRIPTION: Sets up the necessary dependencies and optional libraries for the USD Alembic plugin. It checks for Alembic availability, configures HDF5 support if enabled, and sets up Imath libraries.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/plugin/usdAbc/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usdAbc)\n\nif(NOT ALEMBIC_FOUND)\n    message(WARNING \"Not building ${PXR_PACKAGE} because of missing dependency: Alembic\")\n    return()\nendif()\n\nset(optionalLibs \"\")\nset(optionalIncludeDirs \"\")\n\nif (PXR_ENABLE_HDF5_SUPPORT)\n   add_definitions(-DPXR_HDF5_SUPPORT_ENABLED)\n   list(APPEND optionalLibs ${HDF5_LIBRARIES} ${HDF5_HL_LIBRARIES})\n   list(APPEND optionalIncludeDirs ${HDF5_INCLUDE_DIRS})\nendif()\n\nif (Imath_FOUND)\n    set(__ALEMBIC_IMATH_LIBS \"Imath::ImathConfig;Imath::Imath\")\nelse()\n    set(__ALEMBIC_IMATH_INCLUDES ${OPENEXR_INCLUDE_DIRS})\n    LIST(APPEND __ALEMBIC_IMATH_LIBS ${OPENEXR_Half_LIBRARY})\n    LIST(APPEND __ALEMBIC_IMATH_LIBS ${OPENEXR_Imath_LIBRARY})\n    LIST(APPEND __ALEMBIC_IMATH_LIBS ${OPENEXR_Iex_LIBRARY})\n    LIST(APPEND __ALEMBIC_IMATH_LIBS ${OPENEXR_IexMath_LIBRARY})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring a Regressive Standard S-Curve Spline\nDESCRIPTION: Definition of a regressive standard S-curve spline with Bezier interpolation and held extrapolation. Includes two keyframes at time 0 and 1 with their respective tangent controls.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_78\n\nLANGUAGE: plaintext\nCODE:\n```\nSpline: RegressiveSStandard\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 1.2\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 1.2\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Displaying Initial USD Layer Stack\nDESCRIPTION: Shows the initial layer stack being processed, which consists solely of the 'root.sdf' layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicSpecializesAndInherits.testenv/baseline/compositionResults_BasicSpecializesAndInherits.txt#2025-04-23_snippet_0\n\nLANGUAGE: log\nCODE:\n```\nLoading @BasicSpecializesAndInherits/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n```\n\n----------------------------------------\n\nTITLE: Defining the hdPrman Plugin Configuration in CMake\nDESCRIPTION: Uses the pxr_plugin macro to define the hdPrman plugin with its libraries, include directories, public and private classes, headers, and resource files. This is the main configuration for the plugin build.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/hdPrman/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\npxr_plugin(${PXR_PACKAGE}\n    LIBRARIES\n        ar\n        arch\n        js\n        plug\n        tf\n        vt\n        gf\n        hd\n        hdsi\n        hio\n        usdRi\n        usdVol\n        usdVolImaging\n        ${optionalLibs}\n\n    INCLUDE_DIRS\n        ${RENDERMAN_INCLUDE_DIR}\n        ${optionalIncludeDirs}\n\n    PUBLIC_CLASSES\n        basisCurves\n        camera\n        cone\n        coordSys\n        coordSysPrimSceneIndexPlugin\n        cylinder\n        debugCodes\n        dependencySceneIndexPlugin\n        dependencyForwardingSceneIndexPlugin\n        displayFilter\n        gprim\n        gprimbase\n        instancer\n        integrator\n        light\n        lightFilter\n        material\n        matfiltConvertPreviewMaterial\n        matfiltResolveVstructs\n        mesh\n        renderTerminalOutputInvalidatingSceneIndexPlugin\n        points\n        renderDelegate\n        renderSettings\n        rileyCameraSchema\n        rileyClippingPlaneSchema\n        rileyConversionSceneIndexPlugin\n        rileyCoordinateSystemSchema\n        rileyDisplacementSchema\n        rileyDisplayFilterSchema\n        rileyDisplaySchema\n        rileyFallbackMaterialSceneIndexPlugin\n        rileyGeometryInstanceSchema\n        rileyGeometryPrototypeSchema\n        rileyGlobalsSceneIndexPlugin\n        rileyGlobalsSchema\n        rileyIntegratorSchema\n        rileyLightInstanceSchema\n        rileyLightShaderSchema\n        rileyMaterialSchema\n        rileyParamSchema\n        rileyParamListSchema\n        rileyPrimvarSchema\n        rileyPrimvarListSchema\n        rileyRenderOutputSchema\n        rileyRenderTargetSchema\n        rileyRenderViewSchema\n        rileySampleFilterSchema\n        rileyShadingNodeSchema\n        rixStrings\n        sampleFilter\n        sphere\n        tetMeshConversionSceneIndexPlugin\n        tokens\n        volume\n        xcpt\n        ${optionalPublicClasses}\n\n    PRIVATE_CLASSES\n        cameraContext\n        debugUtil\n        extComputationPrimvarPruningSceneIndexPlugin\n        framebuffer\n        implicitSurfaceSceneIndexPlugin\n        materialPrimvarTransferSceneIndexPlugin\n        matfiltSceneIndexPlugins\n        motionBlurSceneIndexPlugin\n        pinnedCurveExpandingSceneIndexPlugin\n        previewSurfacePrimvarsSceneIndexPlugin\n        renderBuffer\n        renderParam\n        renderPass\n        renderPassSceneIndex\n        renderPassSceneIndexPlugin\n        renderSettingsFilteringSceneIndexPlugin\n        renderViewContext\n        resourceRegistry\n        retesselationSceneIndexPlugin\n        rileyCameraPrim\n        rileyCoordinateSystemPrim\n        rileyClippingPlanePrim\n        rileyDisplacementPrim\n        rileyDisplayFilterPrim\n        rileyDisplayPrim\n        rileyGeometryInstancePrim\n        rileyGeometryPrototypePrim\n        rileyGlobalsSceneIndex\n        rileyGlobalsPrim\n        rileyIntegratorPrim\n        rileyLightInstancePrim\n        rileyLightShaderPrim\n        rileyMaterialPrim\n        rileyPrimBase\n        rileyPrimFactory\n        rileyRenderOutputPrim\n        rileyRenderTargetPrim\n        rileyRenderViewPrim\n        rileySampleFilterPrim\n        rileyTypes\n        sceneIndexObserverApi\n        updateObjectSettingsSceneIndex\n        updateObjectSettingsSceneIndexPlugin\n        utils\n        velocityMotionResolvingSceneIndexPlugin\n        virtualStructResolvingSceneIndex\n\n    PUBLIC_HEADERS\n        api.h\n        rileySchemaTypeDefs.h\n\n    PRIVATE_HEADERS\n        prmanArchDefs.h\n        pxr/base/vt/typeHeaders.h # polyfill until USD 22.08\n        pxr/base/vt/visitValue.h  # polyfill until USD 22.11\n        rileyIds.h\n        virtualStructConditionalGrammar.tab.h\n\n    CPPFILES\n        lightLinkingSceneIndexPlugin.cpp\n        rendererPlugin.cpp\n        virtualStructConditionalGrammar.lex.cpp\n        virtualStructConditionalGrammar.tab.cpp\n\n    RESOURCE_FILES\n        plugInfo.json\n\n    DISABLE_PRECOMPILED_HEADERS\n)\n```\n\n----------------------------------------\n\nTITLE: Defining RegressiveSBothOut Spline in OpenUSD\nDESCRIPTION: Specifies a Bezier spline with Held pre and post extrapolation. It has two knots at times 0 and 1, with symmetric tangent properties for curve shaping.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_81\n\nLANGUAGE: text\nCODE:\n```\nSpline: RegressiveSBothOut\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 4\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 4\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenUSD Init Module CMake Build\nDESCRIPTION: Sets up CMake configuration for the OpenUSD init module build, defining the project prefix and package name, and configures the library build with placeholders for dependencies, cpp files, and includes the Python __init__.py module file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/testenv/testUsdGenSchema/baseline/init/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE init)\n\npxr_library(init\n    INCLUDE_SCHEMA_FILES\n\n    LIBRARIES\n        # List dependency libraries\n\n    CPPFILES\n        # List non-schema cpp files\n\n    PYMODULE_FILES\n        __init__.py\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Spline in OpenUSD Format\nDESCRIPTION: Specification of a non-hermite spline with Held pre and post extrapolation. The spline contains two knots at time points 1.0 and 5.0 with values 1.0 and 2.0 respectively, defining a curve with specific slope and length properties.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/tsTest_TsFramework.testenv/baseline/test_BaselineFail_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 1.000000, preLen 0.000000, postLen 0.500000, auto false / false\n  5.000000: 2.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.500000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra Schema Generator in CMake\nDESCRIPTION: Conditionally builds the hdGenSchema Python tool based on the availability of Python support and the Jinja2 dependency. This tool is likely used for generating schema code for the Hydra system.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT PXR_ENABLE_PYTHON_SUPPORT)\n    message(STATUS \"Skipping building hdGenSchema, Python modules required.\")\nelseif (NOT JINJA2_FOUND)\n    message(WARNING \"Skipping building hdGenSchema due to missing dependency: Jinja2\")\nelse()\n    pxr_python_bin(hdGenSchema\n        DEPENDENCIES\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Managing Subdirectories and Conditional Inclusions with CMake - CMake\nDESCRIPTION: This CMake script initializes a list variable (DIRS) containing the names of main project subcomponents, then iterates over this list to automatically call add_subdirectory for each element (usdrecord, usdview, testusdview). It includes a conditional block to add the usdBakeMtlx subdirectory only if MaterialX support is enabled, indicated by the PXR_ENABLE_MATERIALX_SUPPORT variable. No external dependencies beyond CMake itself are required; it expects relevant subdirectories to exist in the project root. Inputs: availability of subproject folders and the MaterialX flag. Outputs: extension of the project build with specified components.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(DIRS\n    usdrecord\n    usdview\n    testusdview\n)\n\nforeach(d ${DIRS})\n    add_subdirectory(${d})\nendforeach()\n\nif (${PXR_ENABLE_MATERIALX_SUPPORT})\n    add_subdirectory(usdBakeMtlx)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering testUsdUtilsVarSelsSessionLayer Python Test using CMake\nDESCRIPTION: This CMake code registers a Python test named `testUsdUtilsVarSelsSessionLayer` using the `pxr_register_test` function. It executes the script `${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsVarSelsSessionLayer` and expects a return code of 0. This test likely focuses on variant selections within session layers handled by UsdUtils.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUtils/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdUtilsVarSelsSessionLayer\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsVarSelsSessionLayer\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Defining SkelBindingApiValidator\nDESCRIPTION: Documentation for a validator that verifies that a prim with SkelBindingAPI applied is either of SkelRoot type or parented by a SkelRoot prim, ensuring proper skeletal hierarchy.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n[usdSkelValidators:SkelBindingApiValidator]:\n\tDoc: Verify that a prim with SkelBindingAPI applied, is either of SkelRoot type or parented by a SkelRoot prim.\n\tKeywords: UsdSkelValidators\n\tSchemaTypes: UsdSkelBindingAPI\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Including RST Dependencies\nDESCRIPTION: RST include directives for required role definitions and historical badge components\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/tut_variants_example_in_katana.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: rolesAndUtils.rst\n\n.. include:: tut_historical_badge.rst\n```\n\n----------------------------------------\n\nTITLE: Registering Python Test Case for OpenUSD Kind Library (CMake)\nDESCRIPTION: Uses the custom `pxr_register_test` CMake function to add a test named 'testKindRegistry' to CTest. It specifies that the test is executed using Python, defines the command to run the test (pointing to the installed test script/resource location), and sets the expected return code to 0, indicating success.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/kind/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testKindRegistry\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testKindRegistry\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Windows-Specific YY_NO_UNISTD_H Definition in CMake\nDESCRIPTION: Adds a compiler definition for Windows to prevent YY files from trying to include unistd.h, which doesn't exist on Windows platforms.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/hdPrman/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (WIN32)\n    add_compile_definitions(\"YY_NO_UNISTD_H\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Recording TsRegressionPreventer Results in YAML Format\nDESCRIPTION: YAML-like data representing the output of a `TsRegressionPreventer::SetResult` call within OpenUSD's Ts module. It captures details about adjustments made to spline segments (pre and post), including boolean flags indicating if adjustments occurred (`adjusted`, `preActiveAdjusted`, etc.) and the numerical width of those adjustments (`preActiveAdjustedWidth`, etc.). This data is likely used for regression testing to ensure consistent spline manipulation behavior.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReorderContain_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: true\n  havePreSegment: true\n  preActiveAdjusted: true\n  preActiveAdjustedWidth: 0.200000\n  preOppositeAdjusted: true\n  preOppositeAdjustedWidth: 0.200000\n  havePostSegment: true\n  postActiveAdjusted: false\n  postActiveAdjustedWidth: 0.250000\n  postOppositeAdjusted: false\n  postOppositeAdjustedWidth: 0.250000\n```\n\n----------------------------------------\n\nTITLE: Interpolated Time-Value Pairs from the Spline\nDESCRIPTION: A table of time-value pairs representing interpolated points along the spline. The table shows the values at regular intervals from before the first knot (0.2) to after the last knot (5.8), demonstrating the held extrapolation behavior and the curve interpolation between the knots.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/tsTest_TsFramework.testenv/baseline/test_BaselineFail_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n0.200000 1.000000\n1.000000 1.000000\n1.019900 1.018739\n1.039801 1.035628\n1.059701 1.051152\n1.079602 1.065611\n1.099502 1.079213\n1.119403 1.092102\n1.139303 1.104387\n1.159204 1.116153\n1.179104 1.127465\n1.199005 1.138376\n1.218905 1.148929\n1.238806 1.159161\n1.258706 1.169101\n1.278607 1.178775\n1.298507 1.188206\n1.318408 1.197412\n1.338308 1.206411\n1.358209 1.215216\n1.378109 1.223843\n1.398010 1.232301\n1.417910 1.240601\n1.437811 1.248753\n1.457711 1.256764\n1.477612 1.264644\n1.497512 1.272398\n1.517413 1.280034\n1.537313 1.287556\n1.557214 1.294970\n1.577114 1.302282\n1.597015 1.309495\n1.616915 1.316614\n1.636816 1.323644\n1.656716 1.330586\n1.676617 1.337446\n1.696517 1.344225\n1.716418 1.350928\n1.736318 1.357556\n1.756219 1.364113\n1.776119 1.370600\n1.796020 1.377021\n1.815920 1.383377\n1.835821 1.389670\n1.855721 1.395903\n1.875622 1.402076\n1.895522 1.408193\n1.915423 1.414254\n1.935323 1.420261\n1.955224 1.426216\n1.975124 1.432120\n1.995025 1.437973\n2.014925 1.443779\n2.034826 1.449537\n2.054726 1.455249\n2.074627 1.460917\n2.094527 1.466540\n2.114428 1.472121\n2.134328 1.477659\n2.154229 1.483157\n2.174129 1.488615\n2.194030 1.494033\n2.213930 1.499413\n2.233831 1.504755\n2.253731 1.510061\n2.273632 1.515330\n2.293532 1.520564\n2.313433 1.525764\n2.333333 1.530929\n2.353234 1.536060\n2.373134 1.541159\n2.393035 1.546226\n2.412935 1.551260\n2.432836 1.556264\n2.452736 1.561236\n2.472637 1.566179\n2.492537 1.571092\n2.512438 1.575975\n2.532338 1.580830\n2.552239 1.585656\n2.572139 1.590454\n2.592040 1.595225\n2.611940 1.599969\n2.631841 1.604686\n2.651741 1.609376\n2.671642 1.614040\n2.691542 1.618679\n2.711443 1.623292\n2.731343 1.627880\n2.751244 1.632443\n2.771144 1.636982\n2.791045 1.641496\n2.810945 1.645987\n2.830846 1.650453\n2.850746 1.654897\n2.870647 1.659317\n2.890547 1.663714\n2.910448 1.668089\n2.930348 1.672441\n2.950249 1.676771\n2.970149 1.681079\n2.990050 1.685365\n3.009950 1.689630\n3.029851 1.693872\n3.049751 1.698094\n3.069652 1.702295\n3.089552 1.706474\n3.109453 1.710633\n3.129353 1.714771\n3.149254 1.718889\n3.169154 1.722986\n3.189055 1.727064\n3.208955 1.731121\n3.228856 1.735158\n3.248756 1.739175\n3.268657 1.743173\n3.288557 1.747151\n3.308458 1.751109\n3.328358 1.755048\n3.348259 1.758967\n3.368159 1.762868\n3.388060 1.766749\n3.407960 1.770611\n3.427861 1.774454\n3.447761 1.778278\n3.467662 1.782083\n3.487562 1.785869\n3.507463 1.789636\n3.527363 1.793385\n3.547264 1.797114\n3.567164 1.800825\n3.587065 1.804517\n3.606965 1.808191\n3.626866 1.811845\n3.646766 1.815481\n3.666667 1.819098\n3.686567 1.822696\n3.706468 1.826276\n3.726368 1.829837\n3.746269 1.833378\n3.766169 1.836901\n3.786070 1.840405\n3.805970 1.843890\n3.825871 1.847356\n3.845771 1.850803\n3.865672 1.854230\n3.885572 1.857638\n3.905473 1.861026\n3.925373 1.864395\n3.945274 1.867745\n3.965174 1.871074\n3.985075 1.874383\n4.004975 1.877673\n4.024876 1.880942\n4.044776 1.884190\n4.064677 1.887418\n4.084577 1.890624\n4.104478 1.893810\n4.124378 1.896974\n4.144279 1.900116\n4.164179 1.903236\n4.184080 1.906335\n4.203980 1.909410\n4.223881 1.912462\n4.243781 1.915491\n4.263682 1.918496\n4.283582 1.921477\n4.303483 1.924433\n4.323383 1.927364\n4.343284 1.930269\n4.363184 1.933148\n4.383085 1.936000\n4.402985 1.938824\n4.422886 1.941619\n4.442786 1.944385\n4.462687 1.947121\n4.482587 1.949826\n4.502488 1.952499\n4.522388 1.955138\n4.542289 1.957743\n4.562189 1.960312\n4.582090 1.962843\n4.601990 1.965336\n4.621891 1.967787\n4.641791 1.970195\n4.661692 1.972558\n4.681592 1.974873\n4.701493 1.977137\n4.721393 1.979347\n4.741294 1.981498\n4.761194 1.983588\n4.781095 1.985609\n4.800995 1.987557\n4.820896 1.989425\n4.840796 1.991203\n4.860697 1.992881\n4.880597 1.994447\n4.900498 1.995883\n4.920398 1.997168\n4.940299 1.998274\n5.000000 2.000000\n5.800000 2.000000\n```\n\n----------------------------------------\n\nTITLE: Symlink Root Directory Walk Output\nDESCRIPTION: Output showing directory traversal starting from a symbolic link root, maintaining the same structure as the original walk.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/testenv/baseline/TfFileUtils/non-specific/TestTfWalkDirs-log.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n('link_to_a', ['b'], ['aardvark', 'one', 'two'])\n('link_to_a/b', ['c'], ['banana', 'four', 'three'])\n('link_to_a/b/c', ['d'], ['cat', 'five', 'six'])\n('link_to_a/b/c/d', ['e'], ['cycle_to_b', 'dog', 'eight', 'seven'])\n('link_to_a/b/c/d/e', ['f'], ['Eskimo', 'Fortune', 'Garbage', 'elephant', 'nine', 'ten'])\n('link_to_a/b/c/d/e/f', ['g', 'h', 'i'], ['eleven', 'fish', 'twelve'])\n('link_to_a/b/c/d/e/f/g', [], ['fourteen', 'gator', 'thirteen'])\n('link_to_a/b/c/d/e/f/h', [], ['fifteen', 'hippo', 'sixteen'])\n('link_to_a/b/c/d/e/f/i', [], ['eighteen', 'igloo', 'seventeen'])\n```\n\n----------------------------------------\n\nTITLE: OpenUSD Resource Files\nDESCRIPTION: Lists the resource files containing USD schema definitions and plugin information, including the generated schema, plugin configuration, and base schema files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdRender/generatedSchema.classes.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Resource Files\ngeneratedSchema.usda\nplugInfo.json\nschema.usda:usdRender/schema.usda\n```\n\n----------------------------------------\n\nTITLE: Python Module Import Error Example\nDESCRIPTION: Example of common Python import error when USD modules cannot be found in PYTHONPATH.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/usdfaq.rst#2025-04-23_snippet_11\n\nLANGUAGE: pycon\nCODE:\n```\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nImportError: No module named pxr\n```\n\n----------------------------------------\n\nTITLE: OpenUSD Public Classes Definition\nDESCRIPTION: Lists the public classes that are part of the OpenUSD schema system, including pass, product, settings, settingsBase, tokens, and var components.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdRender/generatedSchema.classes.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Public Classes\npass\nproduct\nsettings\nsettingsBase\ntokens\nvar\n```\n\n----------------------------------------\n\nTITLE: Defining and Sampling Bezier Splines - USD Spline Data - pseudo-data\nDESCRIPTION: This snippet defines splines using key-value specifications for value types, curve types, interpolation rules, and knot/control point properties, followed by test cases specifying time/sample spaces and the results of evaluating these splines at specified sample points. There are no external dependencies; the structure aligns with in-memory or file-based test data for animation tools using Bezier-style spline interpolation. Inputs are structured blocks describing splines, knots, and sample results, with general output as a list of (time, value) tuples. Limitations: The format is pseudo-code and not directly executable—it is meant as source data or a test vector for related implementations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_6\n\nLANGUAGE: pseudo-data\nCODE:\n```\nSpline: InnerLoopPost\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nLoop:\n  start 100, end 110, numPreLoops 0, numPostLoops 2, valueOffset -5\nKnot:\n  value type double\n  curve type Bezier\n  time 90\n  value 8.8\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 2.2\n  post-tan slope -1\nKnot:\n  value type double\n  curve type Bezier\n  time 100\n  value 20\n  next interp Curve\n  pre-tan width 2\n  pre-tan slope 2\n  post-tan width 2\n  post-tan slope 2\nKnot:\n  value type double\n  curve type Bezier\n  time 105\n  value 10\n  next interp Curve\n  pre-tan width 2.5\n  pre-tan slope 1.5\n  post-tan width 2.5\n  post-tan slope 1.5\nKnot:\n  value type double\n  curve type Bezier\n  time 125\n  value 35\n  next interp Curve\n  pre-tan width 1.3\n  pre-tan slope -5.3\n  post-tan width 1.8\n  post-tan slope -5.3\nKnot:\n  value type double\n  curve type Bezier\n  time 140\n  value 15\n  next interp Curve\n  pre-tan width 3\n  pre-tan slope -4\n  post-tan width 0\n  post-tan slope 0\n\n------------------------------------------------------------------------\nTest Case 19: Sample([90, 140], 10, 25, 1)\n0: (source n/a)\n    (90, 8.8)\n    (90.452880859375, 8.519287109375)\n    (90.70757446289062, 8.473101806640624)\n    (90.97929687499999, 8.485546875)\n    (91.56840820312499, 8.673876953125001)\n    (92.209375, 9.059375000000001)\n    (93.603515625, 10.322265625)\n    (95.07499999999999, 12.075)\n    (96.537109375, 14.118359375)\n    (97.903125, 16.253125)\n    (100, 20)\n    (100.3582763671875, 20.50567626953125)\n    (100.52583312988281, 20.58715057373047)\n    (100.6865234375, 20.56494140625)\n    (100.9898681640625, 20.24114990234375)\n    (101.2734375, 19.59765625)\n    (101.8017578125, 17.60498046875)\n    (102.3125, 15.09375)\n    (102.8466796875, 12.57080078125)\n    (103.4453125, 10.54296875)\n    (103.7816162109375, 9.87310791015625)\n    (104.1494140625, 9.51708984375)\n    (104.34672546386719, 9.476570129394531)\n    (104.5538330078125, 9.53826904296875)\n    (105, 10)\n    (105.8505859375, 11.12744140625)\n    (106.5546875, 11.80078125)\n    (107.1533203125, 12.17529296875)\n    (107.6875, 12.40625)\n    (108.1982421875, 12.64892578125)\n    (108.7265625, 13.05859375)\n    (109.3134765625, 13.79052734375)\n    (110, 15)\n    (110.3582763671875, 15.50567626953125)\n    (110.52583312988281, 15.587150573730469)\n    (110.6865234375, 15.56494140625)\n    (110.9898681640625, 15.24114990234375)\n    (111.2734375, 14.59765625)\n    (111.8017578125, 12.60498046875)\n    (112.3125, 10.09375)\n    (112.8466796875, 7.57080078125)\n    (113.4453125, 5.54296875)\n    (113.7816162109375, 4.87310791015625)\n    (114.1494140625, 4.51708984375)\n    (114.34672546386719, 4.476570129394531)\n    (114.5538330078125, 4.53826904296875)\n    (115, 5)\n    (115.8505859375, 6.12744140625)\n    (116.5546875, 6.80078125)\n    (117.1533203125, 7.17529296875)\n    (117.6875, 7.40625)\n    (118.1982421875, 7.64892578125)\n    (118.7265625, 8.05859375)\n    (119.3134765625, 8.79052734375)\n    (120, 10)\n    (120.3582763671875, 10.50567626953125)\n    (120.52583312988281, 10.587150573730469)\n    (120.6865234375, 10.56494140625)\n    (120.9898681640625, 10.24114990234375)\n    (121.2734375, 9.59765625)\n    (121.8017578125, 7.60498046875)\n    (122.3125, 5.09375)\n    (122.8466796875, 2.57080078125)\n    (123.4453125, 0.54296875)\n    (123.7816162109375, -0.12689208984375)\n    (124.1494140625, -0.48291015625)\n    (124.34672546386719, -0.5234298706054688)\n    (124.5538330078125, -0.46173095703125)\n    (125, 0)\n    (125.8505859375, 1.12744140625)\n    (126.5546875, 1.80078125)\n    (127.1533203125, 2.17529296875)\n    (127.6875, 2.40625)\n    (128.1982421875, 2.64892578125)\n    (128.7265625, 3.05859375)\n    (129.3134765625, 3.79052734375)\n    (130, 5)\n    (131.984375, 9.9375)\n    (133.251953125, 13.0859375)\n    (134.625, 16)\n    (135.332763671875, 17.2080078125)\n    (136.044921875, 18.1640625)\n    (136.754150390625, 18.8037109375)\n    (137.10537719726562, 18.9847412109375)\n    (137.453125, 19.0625)\n    (137.79647827148438, 19.0289306640625)\n    (138.134521484375, 18.8759765625)\n    (138.791015625, 18.1796875)\n    (139.415283203125, 16.9091796875)\n    (140, 15)\n\n```\n\nLANGUAGE: pseudo-data\nCODE:\n```\nTest Case 20: Sample([15, 215], 10, 25, 10)\n0: (source n/a)\n    (15, 8.8)\n    (90, 8.8)\n    (90.97929687499999, 8.485546875)\n    (92.209375, 9.059375000000001)\n    (95.07499999999999, 12.075)\n    (100, 20)\n    (100.6865234375, 20.56494140625)\n    (101.2734375, 19.59765625)\n    (102.3125, 15.09375)\n    (103.4453125, 10.54296875)\n    (104.1494140625, 9.51708984375)\n    (105, 10)\n    (107.6875, 12.40625)\n    (110, 15)\n    (110.6865234375, 15.56494140625)\n    (111.2734375, 14.59765625)\n    (112.3125, 10.09375)\n    (113.4453125, 5.54296875)\n    (114.1494140625, 4.51708984375)\n    (115, 5)\n    (117.6875, 7.40625)\n    (120, 10)\n    (120.6865234375, 10.56494140625)\n    (121.2734375, 9.59765625)\n    (122.3125, 5.09375)\n    (123.4453125, 0.54296875)\n    (124.1494140625, -0.48291015625)\n    (125, 0)\n    (127.6875, 2.40625)\n    (130, 5)\n    (134.625, 16)\n    (137.453125, 19.0625)\n    (138.791015625, 18.1796875)\n    (140, 15)\n    (215, 15)\n\n```\n\nLANGUAGE: pseudo-data\nCODE:\n```\nTest Case 21: Sample([102.5, 127.5], 10, 25, 0.5)\n0: (source n/a)\n    (102.5, 14.208180987202924)\n    (102.8466796875, 12.57080078125)\n    (103.1353759765625, 11.46331787109375)\n    (103.4453125, 10.54296875)\n    (103.7816162109375, 9.87310791015625)\n    (103.96125793457031, 9.651908874511719)\n    (104.1494140625, 9.51708984375)\n    (104.34672546386719, 9.476570129394531)\n    (104.5538330078125, 9.53826904296875)\n    (104.77137756347656, 9.710105895996094)\n    (105, 10)\n    (105.8505859375, 11.12744140625)\n    (106.5546875, 11.80078125)\n    (107.1533203125, 12.17529296875)\n    (107.6875, 12.40625)\n    (108.1982421875, 12.64892578125)\n    (108.7265625, 13.05859375)\n    (109.3134765625, 13.79052734375)\n    (110, 15)\n    (110.18321228027344, 15.312599182128906)\n    (110.3582763671875, 15.50567626953125)\n    (110.52583312988281, 15.587150573730469)\n    (110.6865234375, 15.56494140625)\n    (110.84098815917969, 15.446968078613281)\n    (110.9898681640625, 15.24114990234375)\n    (111.2734375, 14.59765625)\n    (111.8017578125, 12.60498046875)\n    (112.3125, 10.09375)\n    (112.8466796875, 7.57080078125)\n    (113.1353759765625, 6.46331787109375)\n    (113.4453125, 5.54296875)\n    (113.7816162109375, 4.87310791015625)\n    (113.96125793457031, 4.651908874511719)\n    (114.1494140625, 4.51708984375)\n    (114.34672546386719, 4.476570129394531)\n    (114.5538330078125, 4.53826904296875)\n    (114.77137756347656, 4.710105895996094)\n    (115, 5)\n    (115.8505859375, 6.12744140625)\n    (116.5546875, 6.80078125)\n    (117.1533203125, 7.17529296875)\n    (117.6875, 7.40625)\n    (118.1982421875, 7.64892578125)\n    (118.7265625, 8.05859375)\n    (119.3134765625, 8.79052734375)\n    (120, 10)\n    (120.18321228027344, 10.312599182128906)\n    (120.3582763671875, 10.50567626953125)\n    (120.52583312988281, 10.587150573730469)\n    (120.6865234375, 10.56494140625)\n    (120.84098815917969, 10.446968078613281)\n    (120.9898681640625, 10.24114990234375)\n    (121.2734375, 9.59765625)\n    (121.8017578125, 7.60498046875)\n    (122.3125, 5.09375)\n    (122.8466796875, 2.57080078125)\n    (123.1353759765625, 1.46331787109375)\n    (123.4453125, 0.54296875)\n    (123.7816162109375, -0.12689208984375)\n    (123.96125793457031, -0.34809112548828125)\n    (124.1494140625, -0.48291015625)\n    (124.34672546386719, -0.5234298706054688)\n    (124.5538330078125, -0.46173095703125)\n    (124.77137756347656, -0.28989410400390625)\n    (125, 0)\n    (125.8505859375, 1.12744140625)\n    (126.5546875, 1.80078125)\n    (127.1533203125, 2.17529296875)\n    (127.5, 2.3251828153564897)\n\n```\n\nLANGUAGE: pseudo-data\nCODE:\n```\nSpline: ExtrapLoopRepeat\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap LoopRepeat\n  post extrap LoopRepeat\nKnot:\n  value type double\n  curve type Bezier\n  time 100\n  value 10\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 3\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 105\n  value 20\n  next interp Linear\n  pre-tan width 3\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 110\n  value 15\n  next interp Held\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n\n------------------------------------------------------------------------\nTest Case 22: Sample([100, 110], 50, 50, 1)\n0: (source n/a)\n    (100, 10)\n    (100.269775390625, 10.0286865234375)\n    (100.517578125, 10.1123046875)\n\n```\n\n----------------------------------------\n\nTITLE: Defining usdzip Python Binary Target in CMake\nDESCRIPTION: Declares a Python binary target named `usdzip` using the `pxr_python_bin` custom CMake function. It specifies that this target depends on the `usd` package.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdzip/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_python_bin(usdzip\n    DEPENDENCIES\n        usd\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Paths for OpenUSD hdSt Module\nDESCRIPTION: Sets up the package prefix and name for the hdSt (Hydra Storm) module in the OpenUSD imaging framework. The commented line indicates that Storm uses GL support.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE hdSt)\n\n# XXX We check for PXR_ENABLE_GL_SUPPORT since Storm currently still uses\n```\n\n----------------------------------------\n\nTITLE: Invoking OSL Shader Compilation for Specific Shaders - CMake\nDESCRIPTION: This group of commands invokes the 'prman_osl' function for various shader sources, using either the current directory or a shared shader directory. It includes conditionally building shaders if MaterialX support is enabled. Each call triggers compilation, creation of a custom build target, and installation for that shader, thus automating shader integration into the build. The commands rely on prior variable declarations and ensure consistent build behavior for each shader.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/shaders/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nprman_osl(UsdPreviewSurfaceParameters ${CMAKE_CURRENT_SOURCE_DIR})\nif (${PXR_ENABLE_MATERIALX_SUPPORT})\nprman_osl(StandardSurfaceParameters ${CMAKE_CURRENT_SOURCE_DIR})\nprman_osl(DisplacementParameters ${CMAKE_CURRENT_SOURCE_DIR})\nendif()\nprman_osl(UsdUVTexture ${shader_dir})\nprman_osl(UsdPrimvarReader_float ${shader_dir})\nprman_osl(UsdPrimvarReader_float2 ${shader_dir})\nprman_osl(UsdPrimvarReader_float3 ${shader_dir})\n\n```\n\n----------------------------------------\n\nTITLE: Registering Test Executable with CMake - CMake\nDESCRIPTION: This snippet uses the pxr_register_test macro to register a test executable as part of the CMake build process. The macro specifies the path to the installed test binary via the CMAKE_INSTALL_PREFIX and ensures the test is included in test discovery for automated test runs. Dependencies include proper CMake project setup, pxr_register_test macro definition, and available test binaries in the install directory. Inputs are the test target name and the command to launch; no direct outputs are produced, but the build system will add and later invoke these tests.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/CMakeLists.txt#2025-04-23_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nCOMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdTypes\"\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Test Spline Data Object - USD Animation Test Harness - Python\nDESCRIPTION: Constructs a Ts.TsTest_SplineData Python object, specifying Hermite/extrapolation settings and a full list of knot objects, each initialized with hexadecimal floating point conversion for precise value matching. Dependencies include the USD test suite, float.fromhex for platform-independent numeric exactness, and Ts.TsTest_SplineData types (Extrapolation, InterpCurve, Knot). Inputs cover interpolation settings and a fully parameterized set of knots; output is a configured spline data object used directly in regression test code. Only works in contexts where all Ts classes and constants are defined.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReorderKeepRatio_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('-0x1p-2'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.8p+1'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('-0x1p-2'), postSlope = float.fromhex('-0x1p-2'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x1.99988d2a1f8eap-3'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.999999999999ap+1'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x1p-2'), postSlope = float.fromhex('0x1p-2'), preLen = float.fromhex('0x1.99988d2a1f8eap-3'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x1p-2'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PISI/Sibling Prim\nDESCRIPTION: Shows the prim stack for the prim at path </PISI/Sibling>, defined directly in root.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PISI/Sibling>\n\nPrim Stack:\n    root.sdf             /PISI/Sibling\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for /Pigeon/Rig Prim\nDESCRIPTION: This snippet shows the composition results for the /Pigeon/Rig prim, including its prim stack and child names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpRegressionBugs_bug69932.testenv/baseline/compositionResults_bug69932.txt#2025-04-23_snippet_1\n\nLANGUAGE: USD\nCODE:\n```\nPrim Stack:\n    Pigeon_rig.sdf       /Pigeon/Rig\n    Pigeon_bodyrig.sdf   /CharRig/Rig\n\nChild names:\n     ['LegsRig', 'ToesRig']\n```\n\n----------------------------------------\n\nTITLE: Creating Download Button for Kitchen Set in HTML\nDESCRIPTION: HTML code that creates a centered download button for the Kitchen Set USD resource. When clicked, the button initiates a download of the Kitchen_set.zip file from the openusd.org server.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/dl_kitchen_set.rst#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<center>\n  <form method=\"get\" action=\"https://openusd.org/files/Kitchen_set.zip\">\n    <button type=\"submit\">OK</button>\n  </form>\n</center>\n```\n\n----------------------------------------\n\nTITLE: MaterialX Support Configuration\nDESCRIPTION: Configures MaterialX support in USD based on the PXR_ENABLE_MATERIALX_SUPPORT flag. When enabled, includes the usdMtlx directory in the build.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (${PXR_ENABLE_MATERIALX_SUPPORT})\n    add_subdirectory(usdMtlx)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Bezier Spline with Inner Loop Configuration\nDESCRIPTION: Spline definition with Bezier curve type and loop configuration. The spline uses a double value type with Held extrapolation and specific looping parameters. Two knots define the curve with Bezier interpolation and tangent information.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_48\n\nLANGUAGE: data\nCODE:\n```\nSpline: InnerLoop2and2\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nLoop:\n  start 100, end 110, numPreLoops 2, numPostLoops 2, valueOffset -5\nKnot:\n  value type double\n  curve type Bezier\n  time 100\n  value 20\n  next interp Curve\n  pre-tan width 2\n  pre-tan slope 2\n  post-tan width 2\n  post-tan slope 2\nKnot:\n  value type double\n  curve type Bezier\n  time 105\n  value 10\n  next interp Curve\n  pre-tan width 2.5\n  pre-tan slope 1.5\n  post-tan width 2.5\n  post-tan slope 1.5\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenUSD VT Tests with CMake\nDESCRIPTION: Sets up testing for the VT library component, including C++ tests and Python tests. The configuration defines test targets, their dependencies, and registers them for execution with specific commands.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/vt/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testVtCpp\n    LIBRARIES\n        tf\n        gf\n        vt\n    CPPFILES\n        testenv/testVtCpp.cpp\n)\npxr_test_scripts(\n    testenv/testVtArray.py\n    testenv/testVtValue.py\n)\npxr_register_test(testVtValue\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testVtValue\"\n)\npxr_register_test(testVtArray\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testVtArray\"\n)\npxr_register_test(testVtCpp\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testVtCpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Project Variables in CMake\nDESCRIPTION: Defines CMake variables `PXR_PREFIX` and `PXR_PACKAGE`. `PXR_PREFIX` likely sets a common path prefix for source or build artifacts related to USD validation, while `PXR_PACKAGE` specifies the package name as `usdchecker`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usdValidation)\nset(PXR_PACKAGE usdchecker)\n```\n\n----------------------------------------\n\nTITLE: Test Case Interval Sampling Output - Text\nDESCRIPTION: This snippet summarizes sampled points from test cases run over given intervals and rates, generated by a spline/time series sampler. Input configurations (interval, rate, etc.) are only referenced in headings; output is a flat list of numerical coordinate tuples for each sample. No code dependencies; used for downstream validation, plotting, or feeding into further analysis pipelines.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n(139.5, 0)\n(156, 0)\n(159.8128873576108, -4.764763836917713)\n(160.18835163444288, -4.0747201348201)\n(160.21796700999704, -1.3797178383925954)\n(160.40783650930155, 3.2877491878339833)\n(161.26406315738473, 9.895187079328819)\n(163.2927499792748, 18.410101971561097)\n(167, 28.8)\n(183.5, 28.8)\n```\n\n----------------------------------------\n\nTITLE: Setting OpenUSD Imaging Package Variables\nDESCRIPTION: Defines the base prefix for the imaging system and sets the package name for the OIIO plugin.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/plugin/hioOiio/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE hioOiio)\n```\n\n----------------------------------------\n\nTITLE: USD Variant Selection for /B\nDESCRIPTION: Indicates the specific variant selection applied during the composition of prim `/B`. The variant set `introducingVariantSet` has the variant `introducingVariant` selected.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndVariants.testenv/baseline/compositionResults_SpecializesAndVariants.txt#2025-04-23_snippet_8\n\nLANGUAGE: usd\nCODE:\n```\nVariant Selections:\n    {introducingVariantSet = introducingVariant}\n```\n\n----------------------------------------\n\nTITLE: Creating Download Button for UsdSkel Examples in HTML\nDESCRIPTION: This snippet creates a centered download button that, when clicked, initiates the download of UsdSkel examples from the specified URL. It uses a simple HTML form with a submit button.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/dl_usdskel_examples.rst#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<center>\n  <form method=\"get\" action=\"https://openusd.org/files/UsdSkelExamples.zip\">\n    <button type=\"submit\">OK</button>\n  </form>\n</center>\n```\n\n----------------------------------------\n\nTITLE: Configuring AR Test Scripts\nDESCRIPTION: Registers Python test scripts for various AR functionality including asset info, default resolver, package utils, and resolver context testing.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/ar/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_test_scripts(\n    testenv/testArAssetInfo.py\n    testenv/testArAdvancedAPI.py\n    testenv/testArDefaultResolver.py\n    testenv/testArOpenAsset.py\n    testenv/testArPackageUtils.py\n    testenv/testArResolvedPath.py\n    testenv/testArResolverContext.py\n    testenv/testArTimestamp.py\n)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /InconsistentPropertyType (USD Output)\nDESCRIPTION: Shows the prim stack and property stack for the prim '/InconsistentPropertyType'. It details that the prim definition comes from '/InconsistentPropertyType' in 'root.sdf' and '/InconsistentPropType' in 'ref.sdf'. The property 'x' originates solely from '/InconsistentPropType.x' in 'ref.sdf'. This output likely illustrates how USD handles composition when property types differ across layers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInconsistentProperties.testenv/baseline/compositionResults_ErrorInconsistentProperties.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </InconsistentPropertyType>\n\nPrim Stack:\n    root.sdf             /InconsistentPropertyType\n    ref.sdf              /InconsistentPropType\n\nProperty names:\n     ['x']\n\nProperty stacks:\n/InconsistentPropertyType.x:\n    ref.sdf              /InconsistentPropType.x\n```\n\n----------------------------------------\n\nTITLE: OpenUSD Generated Files Structure\nDESCRIPTION: Directory listing showing the structure of generated schema files, including public API classes, Python wrapper implementations, and schema resource files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUI/generatedSchema.classes.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT.\n\n# Public Classes\naccessibilityAPI\nbackdrop\nnodeGraphNodeAPI\nsceneGraphPrimAPI\ntokens\n\n# Python Module Files\nmodule.cpp\nwrapAccessibilityAPI.cpp\nwrapBackdrop.cpp\nwrapNodeGraphNodeAPI.cpp\nwrapSceneGraphPrimAPI.cpp\nwrapTokens.cpp\n\n# Resource Files\ngeneratedSchema.usda\nplugInfo.json\nschema.usda:usdUI/schema.usda\n```\n\n----------------------------------------\n\nTITLE: Configuring the ef library with dependencies and public interfaces\nDESCRIPTION: Defines the ef library configuration including its dependencies on other OpenUSD libraries, required include directories, public headers, and public classes that will be exposed by the library.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/ef/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_library(ef\n    LIBRARIES\n        vdf\n        arch\n        tf\n        trace\n        usd\n        work\n        ${TBB_tbb_LIBRARY}\n\n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n\n    PUBLIC_HEADERS\n        api.h\n        executor.h\n        firstValidInputValue.h\n        pageCacheBasedExecutor.h\n        pageCacheExecutor.h\n        pageCacheSubExecutor.h\n        subExecutor.h\n\n    PUBLIC_CLASSES\n        dependencyCache\n        inputValueBlock\n        leafNode\n        leafNodeCache\n        leafNodeIndexer\n        maskedSubExecutor\n        outputValueCache\n        pageCache\n        pageCacheCommitRequest\n        pageCacheStorage\n        time\n        timeInputNode\n        timeInterval\n        vectorKey\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring RenderMan Components Build in CMake for OpenUSD\nDESCRIPTION: This CMake configuration adds subdirectories for various RenderMan components and conditionally builds the OSL parser only when OSL support is disabled in the main build. This ensures all RenderMan functionality is available while avoiding duplicate OSL implementations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(rmanArgsParser)\nadd_subdirectory(rmanDiscovery)\nadd_subdirectory(hdPrman)\nadd_subdirectory(rtx_hioImage)\nadd_subdirectory(usdRiPxr)\nadd_subdirectory(rmanUsdValidators)\n# Only build rmanOslParser when sdrOsl is disabled\n# This allows hdPrman to render OSL files without OSL pre-installed\nif (NOT PXR_ENABLE_OSL_SUPPORT)\n    add_subdirectory(rmanOslParser)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Animation Curve Sampling with Fine-grained Time Steps\nDESCRIPTION: Test case showing detailed sampling with small time steps, focusing on loop behavior within inner regions. Demonstrates precise curve evaluation at 0.5 time unit intervals.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_59\n\nLANGUAGE: plaintext\nCODE:\n```\nTest Case 135: SampleWithSources([102.5, 127.5], 10, 25, 0.5)\n0: (TsSourceInnerLoopProto)\n    (102.5, 14.208180987202924)\n    (102.8466796875, 12.57080078125)\n    (103.1353759765625, 11.46331787109375)\n    (103.4453125, 10.54296875)\n    (103.7816162109375, 9.87310791015625)\n    (103.96125793457031, 9.651908874511719)\n    (104.1494140625, 9.51708984375)\n    (104.34672546386719, 9.476570129394531)\n    (104.5538330078125, 9.53826904296875)\n    (104.77137756347656, 9.710105895996094)\n    (105, 10)\n    (105.8505859375, 11.12744140625)\n    (106.5546875, 11.80078125)\n    (107.1533203125, 12.17529296875)\n    (107.6875, 12.40625)\n    (108.1982421875, 12.64892578125)\n    (108.7265625, 13.05859375)\n    (109.3134765625, 13.79052734375)\n    (110, 15)\n1: (TsSourceInnerLoopPostEcho)\n    (110, 15)\n    (110.18321228027344, 15.312599182128906)\n    (110.3582763671875, 15.50567626953125)\n    (110.52583312988281, 15.587150573730469)\n    (110.6865234375, 15.56494140625)\n    (110.84098815917969, 15.446968078613281)\n    (110.9898681640625, 15.24114990234375)\n    (111.2734375, 14.59765625)\n    (111.8017578125, 12.60498046875)\n    (112.3125, 10.09375)\n    (112.8466796875, 7.57080078125)\n    (113.1353759765625, 6.46331787109375)\n    (113.4453125, 5.54296875)\n    (113.7816162109375, 4.87310791015625)\n    (113.96125793457031, 4.651908874511719)\n    (114.1494140625, 4.51708984375)\n    (114.34672546386719, 4.476570129394531)\n    (114.5538330078125, 4.53826904296875)\n    (114.77137756347656, 4.710105895996094)\n    (115, 5)\n    (115.8505859375, 6.12744140625)\n    (116.5546875, 6.80078125)\n    (117.1533203125, 7.17529296875)\n    (117.6875, 7.40625)\n    (118.1982421875, 7.64892578125)\n    (118.7265625, 8.05859375)\n    (119.3134765625, 8.79052734375)\n    (120, 10)\n    (120.18321228027344, 10.312599182128906)\n    (120.3582763671875, 10.50567626953125)\n    (120.52583312988281, 10.587150573730469)\n    (120.6865234375, 10.56494140625)\n    (120.84098815917969, 10.446968078613281)\n    (120.9898681640625, 10.24114990234375)\n    (121.2734375, 9.59765625)\n    (121.8017578125, 7.60498046875)\n    (122.3125, 5.09375)\n    (122.8466796875, 2.57080078125)\n    (123.1353759765625, 1.46331787109375)\n    (123.4453125, 0.54296875)\n    (123.7816162109375, -0.12689208984375)\n    (123.96125793457031, -0.34809112548828125)\n    (124.1494140625, -0.48291015625)\n    (124.34672546386719, -0.5234298706054688)\n    (124.5538330078125, -0.46173095703125)\n    (124.77137756347656, -0.28989410400390625)\n    (125, 0)\n    (125.8505859375, 1.12744140625)\n    (126.5546875, 1.80078125)\n    (127.1533203125, 2.17529296875)\n    (127.5, 2.3251828153564897)\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </_X/_Y/C> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </_X/_Y/C>. The prim stack contributions come from /Ref/C and /_G within 'ref.sdf'. The resolved child prim names are '_Z' and 'D'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </_X/_Y/C>\n\nPrim Stack:\n    ref.sdf              /Ref/C\n    ref.sdf              /_G\n\nChild names:\n     ['_Z', 'D']\n```\n\n----------------------------------------\n\nTITLE: Defining USDA File Structure and References (udims/root.usda)\nDESCRIPTION: These lines describe the structural properties of the 'udims/root.usda' file, likely representing output from a USD inspection tool or key lines from the file itself. The first line indicates no sublayers are used. The second line defines a reference relationship, pointing to external files using the UDIM pattern './test.<UDIM>.txt' (where <UDIM> is replaced by the tile number, e.g., 1001, 1002). The third line confirms that no payloads are included in this file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUtils/testenv/testUsdUtilsDependencyExtractor/baseline/udims.txt#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\nudims/root.usda no sublayers\nudims/root.usda references[001]: ./test.<UDIM>.txt\nudims/root.usda no payloads\n```\n\n----------------------------------------\n\nTITLE: Listing Sampled Time-Value Points from a Spline\nDESCRIPTION: A list of time and value pairs representing points sampled along the spline defined in the preceding snippets. Each line contains a time value (first column) followed by the corresponding spline value (second column) evaluated at that time. This data is likely used for verifying spline evaluation accuracy, comparing against expected results in tests, or for plotting the curve.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReorderContain_TsTestBaseline.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n0.400000 1.000000\n1.000000 1.000000\n1.014925 0.996762\n1.029851 0.994243\n1.044776 0.992203\n1.059701 0.990512\n1.074627 0.989088\n1.089552 0.987878\n1.104478 0.986844\n1.119403 0.985957\n1.134328 0.985197\n1.149254 0.984546\n1.164179 0.983991\n1.179104 0.983521\n1.194030 0.983126\n1.208955 0.982799\n1.223881 0.982534\n1.238806 0.982325\n1.253731 0.982167\n1.268657 0.982056\n1.283582 0.981987\n1.298507 0.981959\n1.313433 0.981968\n1.328358 0.982010\n1.343284 0.982085\n1.358209 0.982190\n1.373134 0.982322\n1.388060 0.982480\n1.402985 0.982663\n1.417910 0.982869\n1.432836 0.983097\n1.447761 0.983344\n1.462687 0.983611\n1.477612 0.983896\n1.492537 0.984199\n1.507463 0.984517\n1.522388 0.984850\n1.537313 0.985198\n1.552239 0.985559\n1.567164 0.985934\n1.582090 0.986320\n1.597015 0.986718\n1.611940 0.987127\n1.626866 0.987546\n1.641791 0.987974\n1.656716 0.988412\n1.671642 0.988859\n1.686567 0.989313\n1.701493 0.989776\n1.716418 0.990245\n1.731343 0.990721\n1.746269 0.991203\n1.761194 0.991692\n1.776119 0.992185\n1.791045 0.992684\n1.805970 0.993188\n1.820896 0.993695\n1.835821 0.994207\n1.850746 0.994723\n1.865672 0.995241\n1.880597 0.995763\n1.895522 0.996287\n1.910448 0.996813\n1.925373 0.997341\n1.940299 0.997871\n1.955224 0.998402\n1.970149 0.998934\n1.985075 0.999467\n2.000000 1.000000\n2.014925 1.000533\n2.029851 1.001066\n2.044776 1.001598\n2.059701 1.002129\n2.074627 1.002659\n2.089552 1.003187\n2.104478 1.003713\n2.119403 1.004237\n2.134328 1.004759\n2.149254 1.005277\n2.164179 1.005793\n2.179104 1.006305\n2.194030 1.006812\n2.208955 1.007316\n2.223881 1.007815\n2.238806 1.008308\n2.253731 1.008797\n2.268657 1.009279\n2.283582 1.009755\n2.298507 1.010224\n2.313433 1.010687\n2.328358 1.011141\n2.343284 1.011588\n2.358209 1.012026\n2.373134 1.012454\n2.388060 1.012873\n2.402985 1.013282\n2.417910 1.013680\n2.432836 1.014066\n2.447761 1.014441\n2.462687 1.014802\n2.477612 1.015150\n2.492537 1.015483\n2.507463 1.015801\n2.522388 1.016104\n2.537313 1.016389\n2.552239 1.016656\n2.567164 1.016903\n2.582090 1.017131\n2.597015 1.017337\n2.611940 1.017520\n2.626866 1.017678\n2.641791 1.017810\n2.656716 1.017915\n2.671642 1.017990\n2.686567 1.018032\n2.701493 1.018041\n2.716418 1.018013\n2.731343 1.017944\n2.746269 1.017833\n2.761194 1.017675\n2.776119 1.017466\n2.791045 1.017201\n2.805970 1.016874\n2.820896 1.016479\n2.835821 1.016009\n2.850746 1.015454\n2.865672 1.014803\n2.880597 1.014043\n2.895522 1.013156\n2.910448 1.012122\n2.925373 1.010912\n2.940299 1.009488\n2.955224 1.007797\n2.970149 1.005757\n2.985075 1.003238\n3.000000 1.000000\n3.014925 0.998197\n3.029851 1.001078\n3.044776 1.010478\n3.059701 1.029730\n3.074627 1.066153\n3.089552 1.143699\n3.104478 1.722358\n3.119403 1.860755\n3.134328 1.920209\n3.149254 1.955053\n3.164179 1.976886\n3.179104 1.990444\n3.194030 1.998185\n3.200000 2.000000\n3.208955 2.002154\n3.223881 2.005382\n3.238806 2.008180\n3.253731 2.010576\n3.268657 2.012594\n3.283582 2.014258\n3.298507 2.015591\n3.313433 2.016614\n3.328358 2.017347\n3.343284 2.017811\n3.358209 2.018023\n3.373134 2.018003\n3.388060 2.017766\n3.402985 2.017330\n3.417910 2.016711\n3.432836 2.015925\n3.447761 2.014986\n3.462687 2.013910\n3.477612 2.012711\n3.492537 2.011403\n3.507463 2.010000\n3.522388 2.008516\n3.537313 2.006964\n3.552239 2.005357\n3.567164 2.003708\n3.582090 2.002032\n3.597015 2.000339\n3.611940 1.998644\n3.626866 1.996960\n3.641791 1.995298\n3.656716 1.993673\n3.671642 1.992098\n3.686567 1.990585\n3.701493 1.989148\n3.716418 1.987800\n3.731343 1.986556\n3.746269 1.985429\n3.761194 1.984433\n3.776119 1.983584\n3.791045 1.982896\n3.805970 1.982385\n3.820896 1.982067\n3.835821 1.981958\n3.850746 1.982075\n3.865672 1.982436\n3.880597 1.983059\n3.895522 1.983964\n3.910448 1.985170\n3.925373 1.986699\n3.940299 1.988573\n3.955224 1.990815\n4.000000 2.000000\n4.600000 2.000000\n```\n\n----------------------------------------\n\nTITLE: USD Prim Index Node 13 Details (Inherit)\nDESCRIPTION: Describes Node 13, an 'inherit' type node representing </PIS/Child> derived from </PISI/Child>. Details include parent node (12), dependency type (ancestral, non-virtual), source/target information within the 'SpecializesAndAncestralArcs4/root.sdf' layer stack, namespace mappings (Map to parent, Map to root), and the contributing prim stack.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4_graph.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nNode 13:\n    Parent node:              12\n    Type:                     inherit\n    DependencyType:           ancestral, non-virtual\n    Source path:              </PISI/Child>\n    Source layer stack:       @SpecializesAndAncestralArcs4/root.sdf@\n    Target path:              </PIS/Child>\n    Target layer stack:       @SpecializesAndAncestralArcs4/root.sdf@\n    Map to parent:\n        / -> /\n        /PISI -> /PIS\n    Map to root:\n        / -> /\n        /PISI -> /Parent\n    Namespace depth:          1\n    Depth below introduction: 1\n    Is due to ancestor:       TRUE\n    Permission:               Public\n    Is restricted:            FALSE\n    Is inert:                 FALSE\n    Contribute specs:         TRUE\n        Restricted at depth:  0\n    Has specs:                TRUE\n    Has symmetry:             FALSE\n    Prim stack:\n      </PISI/Child> root.sdf - @SpecializesAndAncestralArcs4/root.sdf@\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Bezier Curve Spline in Text Format\nDESCRIPTION: Specifies a standard Bezier curve spline with two knot points. The curve is time-valued, uses Bezier interpolation, and has held extrapolation. Knot points define the curve shape with tangent weights and slopes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_23\n\nLANGUAGE: text\nCODE:\n```\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 3.5\n  post-tan slope 0.57\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 2\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Instantiating Spline Test Data Structure - Python\nDESCRIPTION: Instantiates a Python test object representing a spline configuration, specifying whether Hermite interpolation is used, pre- and post-extrapolation methods, and a list of three knots with their respective parameters (time, interpolation method, value, slopes, lengths, and automation flags). Dependencies: the code assumes the existence of the Ts.TsTest_SplineData class and related enums/types such as Extrapolation and Knot in the test framework. Key parameters include knot times, values, slopes, and extrapolation modes. The object acts as ground-truth data for validating spline evaluation logic. Inputs: spline configuration parameters; Outputs: a configured spline data object instance. Constraints: this requires all referenced classes and enums to be previously defined. Designed for internal test validation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReplaceLimitOpposite_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('-0x1p-2'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.8p+1'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x1p-2'), postSlope = float.fromhex('0x1p-2'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x1p-2'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: USD Composition Error Log for /Model_Renamed/Scope (Text)\nDESCRIPTION: Reports errors during USD composition for the prim path '/Model_Renamed/Scope'. It lists two identical errors indicating that the layer 'TrickyInheritsAndRelocatesToNewRootPrim/root.sdf' contains invalid opinions at the relocation source path '/Group/Model', which will be ignored.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsAndRelocatesToNewRootPrim.testenv/baseline/compositionErrors_TrickyInheritsAndRelocatesToNewRootPrim.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nErrors while composing </Model_Renamed/Scope>\n\nThe layer @TrickyInheritsAndRelocatesToNewRootPrim/root.sdf@ has an invalid opinion at the relocation source path </Group/Model>, which will be ignored.\nThe layer @TrickyInheritsAndRelocatesToNewRootPrim/root.sdf@ has an invalid opinion at the relocation source path </Group/Model>, which will be ignored.\n```\n\n----------------------------------------\n\nTITLE: EndVert Bezier Spline Definition\nDESCRIPTION: Configuration for an EndVert Bezier spline with Held extrapolation. The spline has a tangent width of 1 at the first knot and a tangent width of 0 at the second knot, creating a curve that ends vertically.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_105\n\nLANGUAGE: raw\nCODE:\n```\nSpline: EndVert\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 1\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Defining ColliderChecker for UsdPhysics\nDESCRIPTION: Documentation for a validator that validates all UsdPhysicsCollisionAPIs applied to a prim to ensure proper collision detection setup.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n[usdPhysicsValidators:ColliderChecker]:\n\tDoc: Validates all of the UsdPhysicsCollisionAPIs applied to a prim.\n\tKeywords: UsdPhysicsValidators, UsdPhysicsCollisionAPI\n\tSchemaTypes: UsdPhysicsCollisionAPI\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Defining Regressive Post-Fringe Bezier Curve Spline in Text Format\nDESCRIPTION: Specifies a regressive post-fringe Bezier curve spline with two knot points. The curve has a large initial tangent width and a small final tangent width, creating a fast start and slow finish effect.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nSpline: RegressivePostFringe\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 1.3\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 0.05\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Layer Stack\nDESCRIPTION: Shows the USD layer stack for the composition, which in this case only contains root.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SubrootReferenceAndVariants2.testenv/baseline/compositionResults_SubrootReferenceAndVariants2.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLayer Stack:\n     root.sdf\n```\n\n----------------------------------------\n\nTITLE: Installing and Registering the usdAppUtils Camera Test in CMake\nDESCRIPTION: Installs test data required for the camera test from the source directory `testenv/CameraTest` into the build/install test directory named `testUsdAppUtilsCamera` using `pxr_install_test_dir`. It then registers a Python test named `testUsdAppUtilsCamera` using `pxr_register_test`, specifying the command to execute the test script located in the installation prefix's tests directory (`${CMAKE_INSTALL_PREFIX}/tests/testUsdAppUtilsCamera`) and defining that an exit code of 0 indicates success.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdAppUtils/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/CameraTest\n    DEST testUsdAppUtilsCamera\n)\npxr_register_test(testUsdAppUtilsCamera\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdAppUtilsCamera\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Logging Sequential Event Ranges\nDESCRIPTION: Log output showing a sequential list of events with their beginning and ending positions. Each event has a range that typically spans a single unit, with positions ranging from 0 to 200.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/trace/testenv/testTraceEventContainer.testenv/baseline/testTraceEventContainer-Run1-stdout.txt#2025-04-23_snippet_2\n\nLANGUAGE: log\nCODE:\n```\n            End: 189\n        Found event\n            Begin: 189\n            End: 190\n        Found event\n            Begin: 190\n            End: 191\n        Found event\n            Begin: 191\n            End: 192\n        Found event\n            Begin: 192\n            End: 193\n        Found event\n            Begin: 193\n            End: 194\n        Found event\n            Begin: 194\n            End: 195\n        Found event\n            Begin: 195\n            End: 196\n        Found event\n            Begin: 196\n            End: 197\n        Found event\n            Begin: 197\n            End: 198\n        Found event\n            Begin: 198\n            End: 199\n        Found event\n            Begin: 199\n            End: 200\n        Found event\n            Begin: 0\n            End: 1\n        Found event\n            Begin: 1\n            End: 2\n        Found event\n            Begin: 2\n            End: 3\n        Found event\n            Begin: 3\n            End: 4\n        Found event\n            Begin: 4\n            End: 5\n        Found event\n            Begin: 5\n            End: 6\n        Found event\n            Begin: 6\n            End: 7\n        Found event\n            Begin: 7\n            End: 8\n        Found event\n            Begin: 8\n            End: 9\n        Found event\n            Begin: 9\n            End: 10\n        Found event\n            Begin: 10\n            End: 11\n        Found event\n            Begin: 11\n            End: 12\n        Found event\n            Begin: 12\n            End: 13\n        Found event\n            Begin: 13\n            End: 14\n        Found event\n            Begin: 14\n            End: 15\n        Found event\n            Begin: 15\n            End: 16\n        Found event\n            Begin: 16\n            End: 17\n        Found event\n            Begin: 17\n            End: 18\n        Found event\n            Begin: 18\n            End: 19\n        Found event\n            Begin: 19\n            End: 20\n        Found event\n            Begin: 20\n            End: 21\n        Found event\n            Begin: 21\n            End: 22\n        Found event\n            Begin: 22\n            End: 23\n        Found event\n            Begin: 23\n            End: 24\n        Found event\n            Begin: 24\n            End: 25\n        Found event\n            Begin: 25\n            End: 26\n        Found event\n            Begin: 26\n            End: 27\n        Found event\n            Begin: 27\n            End: 28\n        Found event\n            Begin: 28\n            End: 29\n        Found event\n            Begin: 29\n            End: 30\n        Found event\n            Begin: 30\n            End: 31\n        Found event\n            Begin: 31\n            End: 32\n        Found event\n            Begin: 32\n            End: 33\n        Found event\n            Begin: 33\n            End: 34\n        Found event\n            Begin: 34\n            End: 35\n        Found event\n            Begin: 35\n            End: 36\n        Found event\n            Begin: 36\n            End: 37\n        Found event\n            Begin: 37\n            End: 38\n        Found event\n            Begin: 38\n            End: 39\n        Found event\n            Begin: 39\n            End: 40\n        Found event\n            Begin: 40\n            End: 41\n        Found event\n            Begin: 41\n            End: 42\n        Found event\n            Begin: 42\n            End: 43\n        Found event\n            Begin: 43\n            End: 44\n        Found event\n            Begin: 44\n            End: 45\n        Found event\n            Begin: 45\n            End: 46\n        Found event\n            Begin: 46\n            End: 47\n        Found event\n            Begin: 47\n            End: 48\n        Found event\n            Begin: 48\n            End: 49\n        Found event\n            Begin: 49\n            End: 50\n        Found event\n            Begin: 50\n            End: 51\n        Found event\n            Begin: 51\n            End: 52\n        Found event\n            Begin: 52\n            End: 53\n        Found event\n            Begin: 53\n            End: 54\n        Found event\n            Begin: 54\n            End: 55\n        Found event\n            Begin: 55\n            End: 56\n        Found event\n            Begin: 56\n            End: 57\n        Found event\n            Begin: 57\n            End: 58\n        Found event\n            Begin: 58\n            End: 59\n        Found event\n            Begin: 59\n            End: 60\n        Found event\n            Begin: 60\n            End: 61\n        Found event\n            Begin: 61\n            End: 62\n        Found event\n            Begin: 62\n            End: 63\n        Found event\n            Begin: 63\n            End: 64\n        Found event\n            Begin: 64\n            End: 65\n        Found event\n            Begin: 65\n            End: 66\n        Found event\n            Begin: 66\n            End: 67\n        Found event\n            Begin: 67\n            End: 68\n        Found event\n            Begin: 68\n            End: 69\n        Found event\n            Begin: 69\n            End: 70\n        Found event\n            Begin: 70\n            End: 71\n        Found event\n            Begin: 71\n            End: 72\n        Found event\n            Begin: 72\n            End: 73\n        Found event\n            Begin: 73\n            End: 74\n        Found event\n            Begin: 74\n            End: 75\n        Found event\n            Begin: 75\n            End: 76\n        Found event\n            Begin: 76\n            End: 77\n        Found event\n            Begin: 77\n            End: 78\n        Found event\n            Begin: 78\n            End: 79\n        Found event\n            Begin: 79\n            End: 80\n        Found event\n            Begin: 80\n            End: 81\n        Found event\n            Begin: 81\n            End: 82\n        Found event\n            Begin: 82\n            End: 83\n        Found event\n            Begin: 83\n            End: 84\n        Found event\n            Begin: 84\n            End: 85\n        Found event\n            Begin: 85\n            End: 86\n        Found event\n            Begin: 86\n            End: 87\n        Found event\n            Begin: 87\n            End: 88\n        Found event\n            Begin: 88\n            End: 89\n        Found event\n            Begin: 89\n            End: 90\n        Found event\n            Begin: 90\n            End: 91\n        Found event\n            Begin: 91\n            End: 92\n        Found event\n            Begin: 92\n            End: 93\n        Found event\n            Begin: 93\n            End: 94\n        Found event\n            Begin: 94\n            End: 95\n        Found event\n            Begin: 95\n            End: 96\n        Found event\n            Begin: 96\n            End: 97\n        Found event\n            Begin: 97\n            End: 98\n        Found event\n            Begin: 98\n            End: 99\n        Found event\n            Begin: 99\n            End: 100\n        Found event\n            Begin: 100\n            End: 101\n        Found event\n            Begin: 101\n            End: 102\n        Found event\n            Begin: 102\n            End: 103\n        Found event\n            Begin: 103\n            End: 104\n        Found event\n            Begin: 104\n            End: 105\n        Found event\n            Begin: 105\n            End: 106\n        Found event\n            Begin: 106\n            End: 107\n        Found event\n            Begin: 107\n            End: 108\n        Found event\n            Begin: 108\n            End: 109\n        Found event\n            Begin: 109\n            End: 110\n        Found event\n            Begin: 110\n            End: 111\n        Found event\n            Begin: 111\n            End: 112\n        Found event\n            Begin: 112\n            End: 113\n        Found event\n            Begin: 113\n            End: 114\n        Found event\n            Begin: 114\n            End: 115\n        Found event\n            Begin: 115\n            End: 116\n        Found event\n            Begin: 116\n            End: 117\n        Found event\n            Begin: 117\n            End: 118\n        Found event\n            Begin: 118\n            End: 119\n        Found event\n            Begin: 119\n            End: 120\n        Found event\n            Begin: 120\n            End: 121\n        Found event\n            Begin: 121\n            End: 122\n        Found event\n            Begin: 122\n            End: 123\n        Found event\n            Begin: 123\n            End: 124\n        Found event\n            Begin: 124\n            End: 125\n        Found event\n            Begin: 125\n            End: 126\n        Found event\n            Begin: 126\n            End: 127\n        Found event\n            Begin: 127\n            End: 128\n        Found event\n            Begin: 128\n            End: 129\n        Found event\n            Begin: 129\n            End: 130\n        Found event\n            Begin: 130\n            End: 131\n        Found event\n            Begin: 131\n            End: 132\n        Found event\n            Begin: 132\n            End: 133\n        Found event\n            Begin: 133\n            End: 134\n        Found event\n            Begin: 134\n            End: 135\n        Found event\n            Begin: 135\n            End: 136\n        Found event\n            Begin: 136\n            End: 137\n        Found event\n            Begin: 137\n            End: 138\n        Found event\n            Begin: 138\n            End: 139\n        Found event\n            Begin: 139\n            End: 140\n        Found event\n            Begin: 140\n            End: 141\n        Found event\n            Begin: 141\n            End: 142\n        Found event\n            Begin: 142\n            End: 143\n        Found event\n            Begin: 143\n            End: 144\n        Found event\n            Begin: 144\n            End: 145\n        Found event\n            Begin: 145\n            End: 146\n        Found event\n            Begin: 146\n            End: 147\n        Found event\n            Begin: 147\n            End: 148\n        Found event\n```\n\n----------------------------------------\n\nTITLE: Building and Registering Computation Registration Test in CMake\nDESCRIPTION: Configures the testExecComputationRegistration test, linking it with the exec library and setting up the test to run with expected return code 0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/exec/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testExecComputationRegistration\n    LIBRARIES\n        exec\n    CPPFILES\n        testenv/testExecComputationRegistration.cpp\n)\n\npxr_register_test(testExecComputationRegistration\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testExecComputationRegistration\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Defining PhysicsJointChecker Validator\nDESCRIPTION: Documentation for a validator that validates all UsdPhysicsJoint prims to ensure they are correctly configured for physics simulations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n[usdPhysicsValidators:PhysicsJointChecker]:\n\tDoc: Validates all of the UsdPhysicsJoint prims.\n\tKeywords: UsdPhysicsValidators, UsdPhysicsJoint\n\tSchemaTypes: UsdPhysicsJoint\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Using HdIdentifier in C++\nDESCRIPTION: Shows the usage of HdIdentifier, which is currently used in the Render Index representation for lights but will be replaced.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_renderers.rst#2025-04-23_snippet_21\n\nLANGUAGE: C++\nCODE:\n```\nHdIdentifier\n```\n\n----------------------------------------\n\nTITLE: Defining Spline Properties and Knots (Custom Format)\nDESCRIPTION: This snippet defines a spline using a custom text-based format. It specifies that the spline is not Hermite, uses Held extrapolation before the first knot and after the last knot, and lists four knots. Each knot definition includes its time, value, interpolation type (Curve), pre/post slopes, pre/post tangent lengths, and auto tangent flags.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReorderLimitOpposite_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope -0.250000, preLen 0.000000, postLen 0.250000, auto false / false\n  3.000000: 1.000000, Curve, preSlope -0.250000, postSlope -0.250000, preLen 0.250000, postLen 0.130900, auto false / false\n  3.200000: 2.000000, Curve, preSlope 0.250000, postSlope 0.250000, preLen 0.250000, postLen 0.250000, auto false / false\n  4.000000: 2.000000, Curve, preSlope 0.250000, postSlope 0.000000, preLen 0.250000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Defining PortalLight Properties in OpenUSD\nDESCRIPTION: This code block defines the properties of a PortalLight, including height, width, and shader ID. It specifies the USD types, fallback values, and descriptions for each property.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/PortalLight.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### inputs:height\n\n**USD type**: `float`\n\n**Fallback value**: `1.0`\n\nHeight of the portal rectangle in the local Y \naxis.\n\n\n### inputs:width\n\n**USD type**: `float`\n\n**Fallback value**: `1.0`\n\nWidth of the portal rectangle in the local X \naxis.\n\n\n### light:shaderId\n\n**USD type**: `token`\n\n**Fallback value**: `PortalLight`\n\nThe shader ID for a PortalLight. \nUSD will also register a Sdr shader node with a \"PortalLight\" identifier and \nthe source type \"USD\" to correspond to the light's inputs\n```\n\n----------------------------------------\n\nTITLE: Masking Tests Configuration\nDESCRIPTION: Test configurations for verifying usdcat's masking functionality with different options and scenarios.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdcat/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdCatMask\n    DEST testUsdCatMask\n)\n\npxr_register_test(testUsdCatMask\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdcat --mask /InsideMask --flatten --skipSourceFileComment input.usda -o output.usda\"\n    DIFF_COMPARE output.usda\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdCatMask2\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdcat --mask /InsideMask input.usda -o output.usda\"\n    EXPECTED_RETURN_CODE 1\n)\n```\n\n----------------------------------------\n\nTITLE: Generating RST Table of Contents for usdVol Documentation\nDESCRIPTION: ReStructuredText formatted table of contents file that lists the core volume-related schema documentation pages. Generated automatically by genSchemaDocs tool.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdVol/usdVol_toc.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. WARNING: THIS FILE IS GENERATED BY genSchemaDocs.  DO NOT EDIT.\n.. TOC for usdVol\n.. Generated: 04:05PM on May 16, 2024\n\n################\nVolumes (usdVol)\n################\n\n.. toctree::\n   overview.md\n   Field3DAsset.md\n   FieldAsset.md\n   FieldBase.md\n   OpenVDBAsset.md\n   Volume.md\n```\n\n----------------------------------------\n\nTITLE: Configuring TsRegressionPreventer Settings (YAML-like)\nDESCRIPTION: This snippet shows the configuration settings for a `TsRegressionPreventer::SetResult`. It specifies parameters related to segment adjustments, including whether pre/post segments exist, whether they are active and adjusted, and the widths of these adjustments. These settings are likely used in regression testing to ensure spline behavior remains consistent.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveMayaTansContain_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: true\n  havePreSegment: false\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.000000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.000000\n  havePostSegment: true\n  postActiveAdjusted: true\n  postActiveAdjustedWidth: 1.000000\n  postOppositeAdjusted: false\n  postOppositeAdjustedWidth: 0.800000\n```\n\n----------------------------------------\n\nTITLE: Model_1 Prim Composition\nDESCRIPTION: Shows the prim stack for /Model_1 including class inheritance and child relationships.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpookyInherits.testenv/baseline/compositionResults_TrickySpookyInherits.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /Model_1\n    root.sdf             /_class_Model\n    model.sdf            /Model\n    model.sdf            /_class_Model\n\nChild names:\n     ['Rig', 'Anim']\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Spline Parameters in Text Format\nDESCRIPTION: A human-readable text representation of animation spline parameters including interpolation type, extrapolation methods, and knot points with slopes and tangent lengths.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/tsTest_TsFramework.testenv/baseline/test_Baseline_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 1.000000, preLen 0.000000, postLen 0.500000, auto false / false\n  5.000000: 2.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.500000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: USD Relocate Error: Target is Ancestor of Source\nDESCRIPTION: Error message for an invalid USD relocate operation where the target path (`/Model_2/Instance`) is an ancestor of the source path (`/Model_2/Instance/Test`). This type of hierarchical restructuring via relocate is invalid because it would create a cyclical dependency or illogical structure.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInvalidAuthoredRelocates.testenv/baseline/compositionErrors_ErrorInvalidAuthoredRelocates.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nRelocation from </Model_2/Instance/Test> to </Model_2/Instance> authored at @ErrorInvalidAuthoredRelocates/root.sdf@</> is invalid and will be ignored: The target of a relocate cannot be an ancestor of its source.\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Draco Plugin Build Settings\nDESCRIPTION: Configures CMake build settings for the USD Draco plugin including dependencies, source files, Python bindings, and resource files. Sets up Windows symbol exports and includes required libraries like tf, gf, sdf, usd, and usdGeom.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/plugin/usdDraco/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usdDraco)\n\nif(WIN32 AND NOT CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS)\n  set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS 1)\n  set(USD_DRACO_SET_WINDOWS_EXPORT 1)\nendif()\n\npxr_plugin(${PXR_PACKAGE}\n    LIBRARIES\n        tf\n        gf\n        sdf\n        usd\n        usdGeom\n        ${DRACO_LIBRARY}\n\n    INCLUDE_DIRS\n        ${DRACO_INCLUDES}\n\n    CPPFILES\n        attributeDescriptor.cpp\n\tattributeFactory.cpp\n        exportTranslator.cpp\n        fileFormat.cpp\n        importTranslator.cpp\n        writer.cpp\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapDraco.cpp\n\n    PYMODULE_FILES\n        __init__.py\n\n    RESOURCE_FILES\n        plugInfo.json\n\n    DOXYGEN_FILES\n        overview.dox\n)\n\nif(USD_DRACO_SET_WINDOWS_EXPORT)\n  unset(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring File Cleanup Test for USD Stitch Clips in CMake\nDESCRIPTION: Sets up a test case to ensure proper file cleanup when usdstitchclips encounters an error, checking for non-existence of output files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdstitchclips/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testFileCleanup\n    DEST testUsdStitchClipsFileCleanup1\n)\n\npxr_register_test(testUsdStitchClipsFileCleanup1\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdstitchclips --clipPath /Wrong/Clip/Path --out result.usd a.usd b.usd\"\n    EXPECTED_RETURN_CODE 1\n    FILES_DONT_EXIST result.usd result.topology.usd\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Context Arena\nDESCRIPTION: Demonstrates setting a custom context arena and adding a single framebuffer entry with 1x1x1 dimensions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hgiGL/testenv/testHgiGL/baseline/graphicsCmdsDescCache.txt#2025-04-23_snippet_2\n\nLANGUAGE: config\nCODE:\n```\n_FramebufferCache: {\n    _FramebufferDesc: {colorTexture0 dimensions:(1, 1, 1), colorTexture1 dimensions:(1, 1, 1), depthFormat 10depthTexture dimensions:(1, 1, 1)}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spline Parameters in OpenUSD\nDESCRIPTION: This snippet defines the parameters for a spline curve, including interpolation method, extrapolation behavior, and knot points. It uses the Ts.TsTest_SplineData class to represent the spline configuration.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/InitiallyRegressiveLimitActive_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.38p+7'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('-0x1.4cccccccccccdp+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.d5546ea4f1444p+3'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.4ep+7'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1.ccccccccccccdp+4'), preSlope = float.fromhex('0x1.999999999999ap-2'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.d551ba9621ce3p+1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: USD Layer Stack Definition\nDESCRIPTION: Shows the active layer stack containing just the root.sdf file\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantOverrideOfLocalClass.testenv/baseline/compositionResults_TrickyVariantOverrideOfLocalClass.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\nLayer Stack:\n     root.sdf\n```\n\n----------------------------------------\n\nTITLE: Project Email Reference in Markdown\nDESCRIPTION: Email contact information for reporting code of conduct violations to the OpenUSD project administrators.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/CODE_OF_CONDUCT.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nusd-admin@pixar.com\n```\n\n----------------------------------------\n\nTITLE: USD Composition Error: Invalid Relocation of Pre-Relocated Prim\nDESCRIPTION: Details a USD composition error occurring for the prim '</Bad_ReloOfPreRelo>'. The error indicates that this prim cannot be relocated from '</ReferencedChar/PreRelo>' because the latter is identified as a prohibited child. This prohibition stems from it being involved in a relocation sourced from '</Char/PreRelo>' in 'char.sdf', and allowing opinions from such sources is disallowed in this composition context.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInvalidReferenceToRelocationSource.testenv/baseline/compositionErrors_ErrorInvalidReferenceToRelocationSource.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n@ErrorInvalidReferenceToRelocationSource/root.sdf@</Bad_ReloOfPreRelo>\nCANNOT be relocated from:\n@ErrorInvalidReferenceToRelocationSource/root.sdf@</ReferencedChar/PreRelo>\nwhich is a prohibited child of its parent because it would require allowing opinions from the source of a relocation at @ErrorInvalidReferenceToRelocationSource/char.sdf@</Char/PreRelo>.\n```\n\n----------------------------------------\n\nTITLE: Registering Hydra Storm Test Suite in CMake\nDESCRIPTION: Defines multiple test cases for Hydra Storm renderer components using pxr_register_test. Tests include image comparison, stdout verification, and specific environment configurations. Tests cover functionality for samplers, textures, subdivision, and state transitions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_43\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testHdStSamplerObjectRegistry\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStSamplerObjectRegistry --offscreen\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        outSampler1.png\n        outSampler2.png\n        outHiResSampler.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n)\npxr_register_test(testHdStSubdivisionOsd3\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStSubdivision\"\n    EXPECTED_RETURN_CODE 0\n    STDOUT_REDIRECT testHdStSubdivisionOsd3-Run1-stdout.txt\n    DIFF_COMPARE testHdStSubdivisionOsd3-Run1-stdout.txt\n    TESTENV testHdStSubdivisionOsd3\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStTextureHandleRegistry\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStTextureHandleRegistry --offscreen\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        outTextureBasic.png\n        outTextureSampler1LowRes.png\n        outTextureSampler1.png\n        outTextureSampler2.png\n        outTextureBeforeFileChange.png\n        outTextureAfterFileChange.png\n        outTextureAfterReload.png\n        outTextureWithLowGlobalMemoryRequest.png\n        outTextureWithHighGlobalMemoryRequest.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n)\npxr_register_test(testHdStTextureObjectRegistry\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStTextureObjectRegistry --offscreen\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        outTexture1FullRes.png\n        outTexture1LowRes.png\n        outTexture1Reloaded.png\n        outTexture2.png\n        outGrayscaleTexture.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n)\npxr_register_test(testHdStTransition0\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStTransition --offscreen --outputFilePrefix testHdStTransition0 --repr hull -c draw,animate=/cube1,repr=smoothHull,draw,repr=hull,draw,refineLevel=1,repr=refined,draw,refineLevel=2,draw\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        testHdStTransition0_0.png\n        testHdStTransition0_1.png\n        testHdStTransition0_2.png\n        testHdStTransition0_3.png\n        testHdStTransition0_4.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    TESTENV testHdStTransition\n    ENV\n        HD_ENABLE_FORCE_QUADRANGULATE=1\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStTransition1\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStTransition --offscreen --outputFilePrefix testHdStTransition1 --repr smoothHull -c draw,animate=/cube1,animate=/grid1,animate=/curve2,animate=/points3,repr=hull,draw\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        testHdStTransition1_0.png\n        testHdStTransition1_1.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    TESTENV testHdStTransition\n    ENV\n        HD_ENABLE_FORCE_QUADRANGULATE=1\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStTransition2\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStTransition --offscreen --outputFilePrefix testHdStTransition2 --repr smoothHull -c draw,clipPlane=1:0:0:1,draw,clipPlane=-1:0:0:1,draw\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        testHdStTransition2_0.png\n        testHdStTransition2_1.png\n        testHdStTransition2_2.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    TESTENV testHdStTransition\n    ENV\n        HD_ENABLE_FORCE_QUADRANGULATE=1\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStTransitionRefinedCurves\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStTransition --offscreen --outputFilePrefix testHdStTransitionRefinedCurves0 --repr hull -c draw,repr=smoothHull,draw\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        testHdStTransitionRefinedCurves0_0.png\n        testHdStTransitionRefinedCurves0_1.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    TESTENV testHdStTransitionRefinedCurves\n    ENV\n        HD_ENABLE_REFINED_CURVES=1\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStSubResourceRegistry\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStSubResourceRegistry\"\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStSubResourceRegistry\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\n----------------------------------------\n\nTITLE: Including Boost Subdirectory in CMake Build\nDESCRIPTION: Adds the Boost library subdirectory to the CMake build process, allowing the OpenUSD project to include and build Boost library components as needed.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/external/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(boost)\n```\n\n----------------------------------------\n\nTITLE: TsTest_SplineData Object Construction\nDESCRIPTION: Python code constructing a TsTest_SplineData object with specific spline parameters including interpolation methods and knot points\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/MoveStartContain_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.999999999999ap-2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.3333333333333p-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.3333333333333p-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Loading USD Layer Stack\nDESCRIPTION: Shows the layer stack configuration with root.sdf as the primary layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpecializesAndInherits.testenv/baseline/compositionResults_TrickySpecializesAndInherits.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nLayer Stack:\n     root.sdf\n```\n\n----------------------------------------\n\nTITLE: Creating Cross-References to Sections in RST Documentation\nDESCRIPTION: Examples of how to create cross-references to section headers in other documents using the :ref: directive in reStructuredText for USD documentation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:ref:`glossary:API Schema` OR\n:ref:`Custom Link Text <glossary:API Schema>`\n```\n\n----------------------------------------\n\nTITLE: Instantiating TsTest_SplineData in Python\nDESCRIPTION: This Python code snippet demonstrates the creation of a `Ts.TsTest_SplineData` object. It mirrors the spline definition from the previous snippet, setting `isHermite` to `False`, defining Held extrapolation for pre and post segments, and populating the `knots` list with `Ts.TsTest_SplineData.Knot` objects. Each knot specifies time, value, interpolation method, slopes, tangent lengths, and auto flags, using hexadecimal float representations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveMayaTansContain_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1p+0'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.999999999999bp-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Sample Points for Bezier Spline CenterVertical Test Cases\nDESCRIPTION: Sample point coordinates generated from CenterVertical spline configuration with various sampling ranges. The test cases demonstrate sampling at [0, 1], [-1.5, 2.5], and [0.25, 0.75] ranges with different densities.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_28\n\nLANGUAGE: text\nCODE:\n```\nTest Case 81: Sample([0.25, 0.75], 500, 500, 0.5)\n0: (source n/a)\n    (0.25, 0.1390758262260128)\n    (0.2890625, 0.1640625)\n    (0.3375244140625, 0.19775390625)\n    (0.3779296875, 0.228515625)\n    (0.4110107421875, 0.25634765625)\n    (0.4375, 0.28125)\n    (0.4581298828125, 0.30322265625)\n    (0.4736328125, 0.322265625)\n    (0.4847412109375, 0.33837890625)\n    (0.4921875, 0.3515625)\n    (0.4990234375, 0.369140625)\n    (0.5, 0.375)\n    (0.5009765625, 0.369140625)\n    (0.5078125, 0.3515625)\n    (0.5152587890625, 0.33837890625)\n    (0.5263671875, 0.322265625)\n    (0.5418701171875, 0.30322265625)\n    (0.5625, 0.28125)\n    (0.5889892578125, 0.25634765625)\n    (0.6220703125, 0.228515625)\n    (0.6624755859375, 0.19775390625)\n    (0.7109375, 0.1640625)\n    (0.75, 0.1390758262260128)\n```\n\n----------------------------------------\n\nTITLE: Displaying Prim Stack Composition for /SS3 in OpenUSD\nDESCRIPTION: Shows the composition result for the /SS3 prim, displaying the stack of scene description files that contribute to this prim and their hierarchy.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecond4.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nPrim Stack:\n    ss_24tcps_12fps.sdf  /SS3\n    ss_24tcps_12fps.sdf  /SS3\n    ss_24tcps_12fps.sdf  /SS3\n    ss_24tcps_12fps.sdf  /SS3\n    ref.sdf              /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_48tcps.sdf       /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_24tcps_12fps.sdf /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_12fps.sdf        /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n```\n\n----------------------------------------\n\nTITLE: Defining VerticalTorture Spline in OpenUSD\nDESCRIPTION: Defines a complex Bezier spline named VerticalTorture with two knots at time 0 and 1, featuring asymmetric tangent configurations for a more intricate animation curve.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_99\n\nLANGUAGE: plaintext\nCODE:\n```\nSpline: VerticalTorture\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0.4409269851976059\n  post-tan slope 0.5\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 1.3227809555928178\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Configuring usdVolImaging Library with CMake - CMake\nDESCRIPTION: This CMake code configures the usdVolImaging static or shared library in the Pixar OpenUSD project. It sets local variables for package management, then calls the pxr_library macro to declare the library, its dependencies (usdImaging), public classes (such as dataSourceFieldAsset, openvdbAssetAdapter, field3dAssetAdapter, tokens), public headers (api.h), and resource files (plugInfo.json). Dependency: The pxr_library macro, which is expected to be defined as part of the build infrastructure. Inputs are set variables and the list of components; outputs are build artifacts registered with CMake for dependent components.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdVolImaging/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usdImaging)\nset(PXR_PACKAGE usdVolImaging)\n\npxr_library(usdVolImaging\n    LIBRARIES\n        usdImaging\n\n    PUBLIC_CLASSES\n        dataSourceFieldAsset\n        openvdbAssetAdapter\n        field3dAssetAdapter\n        tokens\n\n    PUBLIC_HEADERS\n        api.h\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Complex Geometry Compression\nDESCRIPTION: Configures tests for compressing complex geometry including triangles, quads, and geometry with holes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdcompress/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testComplexSet\n    DEST testUsdCompressComplexSet\n)\n\npxr_register_test(testUsdCompressComplexSet\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdcompress ComplexSet.usda -o ComplexSetCompressed.usda\"\n    EXPECTED_RETURN_CODE 0\n    DIFF_COMPARE ComplexSetCompressed.usda\n    DIFF_COMPARE ComplexSetCompressed.usda.draco/ComplexSet_Geom_CubesFill_CubesFillGeom101.drc\n    PRE_PATH\n        ${CMAKE_INSTALL_PREFIX}/bin\n)\n```\n\n----------------------------------------\n\nTITLE: OpenUSD Context Management Function Names\nDESCRIPTION: A list of private context management function names that handle various aspects of USD context lifecycle including binding, creation, refreshing and path validation. These functions are internal implementation details of the OpenUSD framework.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/ar/testenv/testArOptionalImplementation/baseline/resolver_with_context.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n_BindContext\n_UnbindContext\n_CreateDefaultContext\n_CreateDefaultContextForAsset\n_CreateContextFromString\n_RefreshContext\n_GetCurrentContext\n_IsContextDependentPath\n```\n\n----------------------------------------\n\nTITLE: Setting USD Build Variables in CMake\nDESCRIPTION: Sets the CMake variables `PXR_PREFIX` to 'pxr/usd' and `PXR_PACKAGE` to 'usd'. These variables likely control namespacing or output paths for the USD build components within the OpenUSD project structure. Requires CMake.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddumpcrate/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usd)\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Path for Tiny Render Delegate\nDESCRIPTION: Environment variable configuration required to enable the Tiny render delegate plugin in Usdview since it resides in the Extras folder.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/imaging/examples/hdTiny/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsetenv PXR_PLUGINPATH_NAME <inst>/share/usd/examples/plugin/hdTiny/resources\n```\n\n----------------------------------------\n\nTITLE: Reporting Inconsistent Property Type (Relationship vs Attribute) - Plain Text\nDESCRIPTION: This text block logs an error encountered during property composition in OpenUSD when a single property path is defined as both a relationship and an attribute across different spec locations. It lists both the defining and conflicting specs by Sdf asset path and informs the user that the conflicting definition will be ignored. Useful for tracking data model inconsistencies during USD stage assembly; requires no external dependencies. Inputs are property paths and Sdf asset identifiers. Output is a human-readable error message. No parameters can be tuned.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInconsistentProperties.testenv/baseline/compositionErrors_ErrorInconsistentProperties.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n------------------------------------------------------------------------\nErrors while composing </InconsistentPropertyType>\n\nThe property </InconsistentPropertyType.x> has inconsistent spec types.  The defining spec is @ErrorInconsistentProperties/ref.sdf@</InconsistentPropType.x> and is a relationship spec.  The conflicting spec is @ErrorInconsistentProperties/root.sdf@</InconsistentPropertyType.x> and is an attribute spec.  The conflicting spec will be ignored.\n```\n\n----------------------------------------\n\nTITLE: UsdLux Class References\nDESCRIPTION: References to key UsdLux classes mentioned in the documentation that form the foundation for geometry light implementation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_geometry_lights.rst#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nUsdLuxGeometryLight\n```\n\nLANGUAGE: cpp\nCODE:\n```\nUsdGeomGprim\n```\n\n----------------------------------------\n\nTITLE: Calculating IES Angle Scale\nDESCRIPTION: Mathematical formula for applying angle scaling to IES profile sampling.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/ShapingAPI.md#2025-04-23_snippet_3\n\nLANGUAGE: math\nCODE:\n```\n\\begin{aligned}\n&if \\quad angleScale > 0: \\\\\n& \\quad 𝛳_{ies} = 𝛳_{light} / angleScale \\\\\n&if \\quad angleScale = 0: \\\\\n& \\quad 𝛳_{ies} = 𝛳_{light} \\\\\n&if \\quad angleScale < 0: \\\\\n& \\quad 𝛳_{ies} = (𝛳_{light} - π) / -angleScale\n\\end{aligned}\n```\n\n----------------------------------------\n\nTITLE: Setting Build Variables and Conditional Inclusion - CMake - CMake\nDESCRIPTION: This snippet sets the \"PXR_PREFIX\" and \"PXR_PACKAGE\" variables, provides a conditional block to skip further configuration if the \"PXR_BUILD_USDVIEW\" flag is not enabled, and registers a Python tool dependency using a CMake macro. Dependencies like \"usdviewq\" are listed to ensure all required components are built. Prerequisites include CMake and the existence of the relevant CMake macros/functions. It expects boolean flags and package names as input and controls which sub-projects are included in the build based on configuration. Limited to projects using the Pixar USD build system with these macros.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/usdview/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usdImaging)\nset(PXR_PACKAGE usdviewq)\n\nif (NOT PXR_BUILD_USDVIEW)\n    return()\nendif()\n\npxr_python_bin(usdview\n    DEPENDENCIES\n        usdviewq\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Python Module Files for OpenUSD Animation\nDESCRIPTION: Specifies the Python module files that implement the bindings for the OpenUSD animation schema classes. These files are likely used in the build process to generate Python wrappers for the C++ classes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdSkel/generatedSchema.classes.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# Python Module Files\nmodule.cpp\nwrapAnimation.cpp\nwrapBindingAPI.cpp\nwrapBlendShape.cpp\nwrapRoot.cpp\nwrapSkeleton.cpp\nwrapTokens.cpp\n```\n\n----------------------------------------\n\nTITLE: Setting Build Variables for OpenUSD Kind Package (CMake)\nDESCRIPTION: Sets CMake variables `PXR_PREFIX` to 'pxr/usd' and `PXR_PACKAGE` to 'kind'. These variables are likely used by subsequent custom OpenUSD CMake functions to define paths, target names, or namespaces within the build process.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/kind/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE kind)\n```\n\n----------------------------------------\n\nTITLE: Creating TsTest_SplineData Object (Python)\nDESCRIPTION: Constructs a TsTest_SplineData object using the OpenUSD Ts module in Python. It initializes a non-hermite spline with 'Held' extrapolation and defines two knots at times 0.0 and 1.0, specifying their values, slopes, and tangent lengths using hexadecimal float representations. Depends on the Ts module from OpenUSD.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveMayaTansKeepStart_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.4cccccccccccdp+0'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.0f7f3ae9122b3p-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Loading USD Layer Stack\nDESCRIPTION: Shows the loading of a USD layer file and its layer stack configuration for SetClass and related prims\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpecializesAndInherits3.testenv/baseline/compositionResults_TrickySpecializesAndInherits3.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nLayer Stack:\n     root.sdf\n\nPrim Stack:\n    root.sdf             /SetClass\n\nChild names:\n     ['Metal', 'CorrodedMetal']\n```\n\n----------------------------------------\n\nTITLE: Registering USD MaterialX Tests\nDESCRIPTION: Registers individual test cases for USD MaterialX functionality, including discovery, file format parsing with diff comparisons, and general parser testing.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdMtlx/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdMtlxDiscovery\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdMtlxDiscovery\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdMtlxFileFormat\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdMtlxFileFormat\"\n    DIFF_COMPARE Looks.usda NodeGraphs.usda GraphlessNodes.usda usd_preview_surface_gold.usda Include.usda Include_From_Usdz.usda CustomNodeDef.usda\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdMtlxParser\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdMtlxParser\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Building and Installing HdTiny Test in CMake\nDESCRIPTION: Configures the build process for the HdTiny test, specifying libraries and source files. It also sets up the installation directory for the test.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/imaging/examples/hdTiny/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testHdTiny\n    LIBRARIES\n        hdx\n    \n    CPPFILES\n        testenv/testHdTiny.cpp\n)\n\npxr_install_test_dir(\n    SRC testenv/testHdTiny\n    DEST testHdTiny\n)\n```\n\n----------------------------------------\n\nTITLE: File Registration Pattern Example in USD\nDESCRIPTION: Shows how USD file format registration works with path extensions. The example demonstrates the registration process for the 'usda' file format, which is recognized by both .usda and .usd extensions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/testenv/testHdSortedIds/baseline/testHdSortedId_removeOnlyElementTest.txt#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```cpp\nTF_REGISTRY_FUNCTION(TfType)\n{\n    SDF_DEFINE_FILE_FORMAT(SdfAsciiFileFormat, SdfFileFormat);\n}\n\nTF_REGISTRY_FUNCTION(SdfFileFormat)\n{\n    SdfFileFormat::Register(TfCreateRefPtr(new SdfAsciiFileFormat));\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Clip Set Name Test for USD Stitch Clips in CMake\nDESCRIPTION: Configures a test case for usdstitchclips with a custom clip set name, stitching multiple USD files and comparing the output with expected results.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdstitchclips/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testStitchClips\n    DEST testUsdStitchClipsCustomSetName\n)\n\npxr_register_test(testUsdStitchClipsCustomSetName\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdstitchclips --noComment --clipSet bob --clipPath /World/fx/Particles_Splash --out result_customSetName.usda Particles_Splash.101.usd Particles_Splash.102.usd Particles_Splash.103.usd Particles_Splash.104.usd Particles_Splash.105.usd Particles_Splash.106.usd Particles_Splash.107.usd Particles_Splash.108.usd Particles_Splash.109.usd \"\n    EXPECTED_RETURN_CODE 0 \n    DIFF_COMPARE result_customSetName.usda result_customSetName.topology.usda\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TF Library Build in CMake\nDESCRIPTION: Main configuration for building the TF library, including specification of library components, dependencies, public/private classes, headers, and Python module files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_library(tf\n    LIBRARIES\n        arch\n        ${WINLIBS}\n        ${TBB_tbb_LIBRARY}\n\n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n\n    PUBLIC_CLASSES\n        anyUniquePtr\n        anyWeakPtr\n        # ... other classes\n\n    PYTHON_PUBLIC_CLASSES\n        makePyConstructor\n        # ... other python classes\n\n    PUBLIC_HEADERS\n        api.h\n        # ... other headers\n\n    PRIVATE_CLASSES\n        atomicRenameUtil\n        # ... other private classes\n\n    CPPFILES\n        initConfig.cpp\n        # ... other cpp files\n)\n```\n\n----------------------------------------\n\nTITLE: Using Default TimeCode with UsdAttribute::Get() in C++\nDESCRIPTION: Specifies the default time coordinate (`UsdTimeCode::Default()`) used by `UsdAttribute::Get()` in C++ if no time is explicitly provided. Using this time code retrieves the attribute's default value, potentially ignoring animation data.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_65\n\nLANGUAGE: cpp\nCODE:\n```\nUsdTimeCode::Default()\n```\n\n----------------------------------------\n\nTITLE: Initializing TsRegressionPreventer Settings in Python\nDESCRIPTION: This snippet defines the settings for a TsRegressionPreventer object, including adjustment flags and width values for pre and post segments of an animation curve.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveKeepStart_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: true\n  havePreSegment: false\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.000000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.000000\n  havePostSegment: true\n  postActiveAdjusted: false\n  postActiveAdjustedWidth: 1.300000\n  postOppositeAdjusted: true\n  postOppositeAdjustedWidth: 0.530268\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Spline with Inner and Outer Loops\nDESCRIPTION: Specifies an animation spline with Bezier curve type, LoopRepeat pre-extrapolation, LoopOscillate post-extrapolation, and inner loop configuration.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_68\n\nLANGUAGE: plaintext\nCODE:\n```\nSpline: InnerAndExtrapLoops\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap LoopRepeat\n  post extrap LoopOscillate\nLoop:\n  start 100, end 110, numPreLoops 2, numPostLoops 2, valueOffset -5\nKnot:\n  value type double\n  curve type Bezier\n  time 100\n  value 20\n  next interp Curve\n  pre-tan width 2\n  pre-tan slope 2\n  post-tan width 2\n  post-tan slope 2\nKnot:\n  value type double\n  curve type Bezier\n  time 105\n  value 10\n  next interp Curve\n  pre-tan width 2.5\n  pre-tan slope 1.5\n  post-tan width 2.5\n  post-tan slope 1.5\n```\n\n----------------------------------------\n\nTITLE: Composing Prim A in OpenUSD\nDESCRIPTION: Shows the composition results for prim A, including its prim stack and property names. Unlike B, A does not have duplicate entries due to the layer structure.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicDuplicateSublayer.testenv/baseline/compositionResults_BasicDuplicateSublayer.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </A>\n\nPrim Stack:\n    root.sdf             /A\n    A.sdf                /A\n\nProperty names:\n     ['A_attr']\n\nProperty stacks:\n/A.A_attr:\n    A.sdf                /A.A_attr\n```\n\n----------------------------------------\n\nTITLE: RegressivePostG Spline Test Cases\nDESCRIPTION: Test results showing sampled points on the RegressivePostG spline. Three different sampling ranges are shown: [0,1], [-1.5,2.5] with extrapolation, and [0.25,0.75] with higher density sampling.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_89\n\nLANGUAGE: text\nCODE:\n```\nTest Case 181: SampleWithSources([0, 1], 500, 500, 1)\n0: (TsSourceKnotInterp)\n    (0, 0)\n    (0.10876654536479234, 0.06436399921359735)\n    (0.2056091794711261, 0.1264142610140221)\n    (0.29122018670055816, 0.18616852043798762)\n    (0.3662918514346454, 0.24364451252220737)\n    (0.4315164580549446, 0.2988599723033947)\n    (0.48758629094301276, 0.3518326348182631)\n    (0.5351936344804068, 0.4025802351035259)\n    (0.5750307730486834, 0.45112050819589655)\n    (0.6077899910293996, 0.4974711891320883)\n    (0.6341635728041123, 0.5416500129488149)\n    (0.6548438027543783, 0.5836747146827895)\n    (0.6705229652617544, 0.6235630293707255)\n    (0.6818933447077976, 0.6613326920493364)\n    (0.6896472254740647, 0.6970014377553356)\n    (0.6970746284934981, 0.7621071183963525)\n    (0.6989919631635546, 0.8678878176224353)\n    (0.7045584449190876, 0.9088465967949158)\n    (0.7109166347374293, 0.9264051663995128)\n    (0.7205811696915637, 0.9420401693986321)\n    (0.7342443341630477, 0.9557693408289871)\n    (0.752598412533438, 0.9676104157272915)\n    (0.7763356891842916, 0.9775811291302583)\n    (0.8061484484971655, 0.985699216074601)\n    (0.8867695526352011, 0.9964484507342681)\n    (1, 1)\n\nTest Case 182: SampleWithSources([-1.5, 2.5], 500, 500, 10)\n0: (TsSourcePreExtrap)\n    (-1.5, 0)\n    (0, 0)\n1: (TsSourceKnotInterp)\n    (0, 0)\n    (0.3662918514346454, 0.24364451252220737)\n    (0.5750307730486834, 0.45112050819589655)\n    (0.6705229652617544, 0.6235630293707255)\n    (0.6970746284934981, 0.7621071183963525)\n    (0.6989919631635546, 0.8678878176224353)\n    (0.7205811696915637, 0.9420401693986321)\n    (0.8061484484971655, 0.985699216074601)\n    (1, 1)\n2: (TsSourcePostExtrap)\n    (1, 1)\n    (2.5, 1)\n\nTest Case 183: SampleWithSources([0.25, 0.75], 500, 500, 0.5)\n0: (TsSourceKnotInterp)\n    (0.25, 0.15739790075577148)\n    (0.29122018670055816, 0.18616852043798762)\n    (0.3662918514346454, 0.24364451252220737)\n    (0.4315164580549446, 0.2988599723033947)\n    (0.48758629094301276, 0.3518326348182631)\n    (0.5351936344804068, 0.4025802351035259)\n    (0.5750307730486834, 0.45112050819589655)\n    (0.6077899910293996, 0.4974711891320883)\n    (0.6341635728041123, 0.5416500129488149)\n    (0.6548438027543783, 0.5836747146827895)\n    (0.6705229652617544, 0.6235630293707255)\n    (0.6818933447077976, 0.6613326920493364)\n    (0.6896472254740647, 0.6970014377553356)\n    (0.6944768919421125, 0.7305870015254365)\n    (0.6970746284934981, 0.7621071183963525)\n    (0.6983434493725097, 0.8190219515874833)\n    (0.6989919631635546, 0.8678878176224353)\n    (0.7008143158549816, 0.8893467255481278)\n    (0.7045584449190876, 0.9088465967949158)\n    (0.7109166347374293, 0.9264051663995128)\n    (0.7205811696915637, 0.9420401693986321)\n    (0.7342443341630477, 0.9557693408289871)\n    (0.75, 0.9659340582004123)\n```\n\n----------------------------------------\n\nTITLE: Registering HdSt Tests with CMake in OpenUSD\nDESCRIPTION: This snippet shows the pattern used to register multiple HdSt tests using the pxr_register_test CMake function. Each test specifies a command to run, expected return code, environment variables, and sometimes image comparison parameters.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_41\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStInstancing\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStInstancing --offscreen --write testHdStInstancing.png\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        testHdStInstancing.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    TESTENV testHdStInstancing\n    ENV\n        HGIGL_ENABLE_BINDLESS_BUFFER=1\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\n----------------------------------------\n\nTITLE: USD Format Error Example\nDESCRIPTION: Example of error message when USD file format is not recognized due to missing plugins.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/usdfaq.rst#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nERROR: USD format not recognized: <filename>.usd\n```\n\n----------------------------------------\n\nTITLE: USD Composition Analysis for Prim </S1>: Stack and Time Offsets\nDESCRIPTION: This snippet displays the composition results for the prim path </S1>. The 'Prim Stack' shows 's.sdf' as the defining layer for this prim. Similar to the analysis for </S2>, the 'Time Offsets' section meticulously lists all contributing layers from the root ('session_24fps.sdf') downwards, along with their calculated time offsets and scales derived from the layer stack structure. This provides insight into the specific composition arc and time transformations affecting </S1>.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer3.txt#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </S1>\n\nPrim Stack:\n    s.sdf                /S1\n\nTime Offsets:\n    session_24fps.sdf    /S1             root       (offset=0.00, scale=1.00)\n        sess_s.sdf                       sublayer   (offset=10.00, scale=2.00)\n        sess_s_48tcps.sdf                sublayer   (offset=10.00, scale=1.00)\n        sess_s_24tcps_12fps.sdf          sublayer   (offset=10.00, scale=2.00)\n        sess_s_12fps.sdf                 sublayer   (offset=10.00, scale=4.00)\n        root_12fps.sdf                   sublayer   (offset=0.00, scale=2.00)\n        s.sdf                            sublayer   (offset=20.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=40.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=40.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=40.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=40.00, scale=8.00)\n        s_48tcps.sdf                     sublayer   (offset=20.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=8.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=20.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=40.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=40.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=40.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=40.00, scale=8.00)\n        s_12fps.sdf                      sublayer   (offset=20.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=60.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=60.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=60.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=60.00, scale=8.00)\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </SymRig> in USD\nDESCRIPTION: Displays the composition results for the prim path </SymRig> within the 'root.sdf' layer. It lists the prim stack contributing to this prim and its immediate child prim names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyMultipleRelocations4.testenv/baseline/compositionResults_TrickyMultipleRelocations4.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </SymRig>\n\nPrim Stack:\n    root.sdf             /SymRig\n\nChild names:\n     ['Leg_bone']\n```\n\n----------------------------------------\n\nTITLE: Registering usdzip Test for Missing Input Error Handling in CMake\nDESCRIPTION: Registers a Python test named `testUsdZipMissingInput` using `pxr_register_test`. The test executes the installed `usdzip` command attempting to create an archive `nonexistent.usdz` from a non-existent input file `nonexistent.usd`. It expects the command to fail with a return code of 1, testing error handling.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdzip/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdZipMissingInput\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdzip nonexistent.usdz nonexistent.usd\"\n    EXPECTED_RETURN_CODE 1\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenUSD Project Subdirectories in CMake\nDESCRIPTION: Defines a list of subdirectories to be included in the build process and iterates through them to add each one using add_subdirectory. The directories included are vdf, ef, esf, exec, and execUsd.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(DIRS\n    vdf\n    ef\n    esf\n    exec\n    execUsd\n)\n\nforeach(d ${DIRS})\n    add_subdirectory(${d})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Defining a Two-Knot Bezier Spline (USD Spline Format)\nDESCRIPTION: Defines a Bezier spline named 'TwoKnotBezier' with double precision values. It has two knots at time 1 (value 1) and time 5 (value 2). The interpolation between knots is curved (Bezier), and extrapolation outside this range is Held. Tangent properties (width, slope) are specified for each knot to control the curve shape. This definition is used as input for sampling tests like 'Test Case 1: Sample([1, 5], 125, 500, 1)'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSpline: TwoKnotBezier\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0.5\n  post-tan slope 1\nKnot:\n  value type double\n  curve type Bezier\n  time 5\n  value 2\n  next interp Curve\n  pre-tan width 0.5\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Initializing Spline Data Structure in Python\nDESCRIPTION: This code snippet defines a Ts.TsTest_SplineData object with specific parameters for spline interpolation. It includes settings for Hermite interpolation, extrapolation methods, and knot definitions with precise floating-point values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveContain_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1p+0'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.999999999999ap-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Registering HdSt Immediate Basic Drawing Tests in CMake\nDESCRIPTION: Configures tests for HdSt basic drawing with immediate mode, various representation modes, and no refinement. These tests use offscreen rendering, image comparison, and disable multi-draw indirect for GL and Vulkan.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_Immediate_lv0_points\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --repr points --write testHdStBasicDrawing_lv0_points.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lv0_points.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        HGIGL_ENABLE_MULTI_DRAW_INDIRECT=0\n        HGIVULKAN_ENABLE_MULTI_DRAW_INDIRECT=0\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Trace Library Build\nDESCRIPTION: Defines the core trace library configuration including dependencies, source files, and public interfaces. Sets up the main library build with TBB dependency and multiple class implementations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/trace/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/base)\nset(PXR_PACKAGE trace)\n\npxr_library(trace\n    LIBRARIES\n        arch\n        js\n        tf\n        ${TBB_tbb_LIBRARY}\n\n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n\n    PUBLIC_CLASSES\n        aggregateTree\n        aggregateNode\n        category\n        collection\n        collectionNotice\n        collector\n        counterAccumulator\n        dataBuffer\n        dynamicKey\n        event\n        eventContainer\n        eventData\n        eventList\n        eventNode\n        eventTree\n        key\n        reporter\n        reporterBase\n        reporterDataSourceBase\n        reporterDataSourceCollection\n        reporterDataSourceCollector\n        serialization\n        staticKeyData\n        threads\n\n    PRIVATE_CLASSES\n        aggregateTreeBuilder\n        eventTreeBuilder\n        jsonSerialization\n\n    PUBLIC_HEADERS\n        api.h\n        concurrentList.h\n        stringHash.h\n        trace.h\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapAggregateNode.cpp\n        wrapAggregateTree.cpp\n        wrapCollector.cpp\n        wrapReporter.cpp\n        wrapTestTrace.cpp\n\n    PYMODULE_FILES\n        __init__.py\n        __main__.py\n\n    DOXYGEN_FILES\n        overview.dox\n        detailedOverview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for usdLux Documentation in Markdown\nDESCRIPTION: This snippet creates a table of contents in Markdown format for the usdLux module documentation. It includes links to various light types, APIs, and related components within the OpenUSD lighting system.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/usdLux_toc.rst#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n.. WARNING: THIS FILE IS GENERATED BY genSchemaDocs.  DO NOT EDIT.\n.. TOC for usdLux\n.. Generated: 11:28PM on April 14, 2025\n\n###############\nLights (usdLux)\n###############\n\n.. toctree::\n   overview.md\n   BoundableLightBase.md\n   CylinderLight.md\n   DiskLight.md\n   DistantLight.md\n   DomeLight.md\n   DomeLight_1.md\n   GeometryLight.md\n   LightAPI.md\n   LightFilter.md\n   LightListAPI.md\n   ListAPI.md\n   MeshLightAPI.md\n   NonboundableLightBase.md\n   PluginLight.md\n   PluginLightFilter.md\n   PortalLight.md\n   RectLight.md\n   ShadowAPI.md\n   ShapingAPI.md\n   SphereLight.md\n   VolumeLightAPI.md\n```\n\n----------------------------------------\n\nTITLE: Configuring Spline Test Data Structure - Python\nDESCRIPTION: This snippet instantiates a Python object representing a spline data test, specifying whether Hermite interpolation is used, configured extrapolation methods, and details of each knot including times, values, slopes, lengths, and interpolation types. Requires a Python context where Ts.TsTest_SplineData and its subtypes (Extrapolation, Knot, InterpCurve, etc.) are defined. Key parameters include isHermite (boolean), pre/postExtrapolation methods, and an array of knots with their interpolation attributes; output is a fully constructed spline data structure for downstream testing or validation. Limitations involve the necessity of proper definitions for involved classes/enums.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveMayaTansLimitOpposite_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.4cccccccccccdp+0'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.0f7f3ae9122b3p-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Registering Individual C++ Tests for Tf Module in CMake\nDESCRIPTION: Registers individual C++ tests for specific Tf components using the pxr_register_test macro. These tests cover areas like unique pointers, atomic operations, and bit manipulation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(TfAnyUniquePtr\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTf TfAnyUniquePtr\"\n)\npxr_register_test(TfAtomicOfstreamWrapper\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTf TfAtomicOfstreamWrapper\"\n)\npxr_register_test(TfBits\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTf TfBits\"\n)\npxr_register_test(TfBitUtils\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTf TfBitUtils\"\n)\npxr_register_test(TfCompressedBits\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTf TfCompressedBits\"\n)\n```\n\n----------------------------------------\n\nTITLE: Analyzing OpenUSD Prim Stack for SS4\nDESCRIPTION: Output showing the primitive stack for /SS4, displaying all layers that contribute to this prim's composition and the resolution order.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer3.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nPrim Stack:\n    ss_12fps.sdf         /SS4\n    ss_12fps.sdf         /SS4\n    ss_12fps.sdf         /SS4\n    ss_12fps.sdf         /SS4\n    ref.sdf              /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_48tcps.sdf       /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_24tcps_12fps.sdf /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_12fps.sdf        /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n```\n\n----------------------------------------\n\nTITLE: Configuring Regression Prevention Settings in OpenUSD Animation\nDESCRIPTION: This snippet defines the settings for the TsRegressionPreventer, which is used to adjust animation curves to prevent regression. It includes flags for pre and post segments, as well as adjustment values for active and opposite sides.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveLimitOpposite_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: true\n  havePreSegment: false\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.000000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.000000\n  havePostSegment: true\n  postActiveAdjusted: false\n  postActiveAdjustedWidth: 1.300000\n  postOppositeAdjusted: true\n  postOppositeAdjustedWidth: 0.530268\n```\n\n----------------------------------------\n\nTITLE: Configuring Regressive Pre-Control Bezier Spline in OpenUSD\nDESCRIPTION: This snippet defines a regressive pre-control Bezier spline configuration in OpenUSD. It specifies the value type, time valuation, curve type, and extrapolation methods.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_85\n\nLANGUAGE: plaintext\nCODE:\n```\nSpline: RegressivePreC\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\n```\n\n----------------------------------------\n\nTITLE: Defining Spline Properties and Knots in OpenUSD Animation\nDESCRIPTION: This snippet specifies the properties of a spline curve, including its type (non-hermite), extrapolation methods, and knot data. The knots define the key points of the spline with their respective slopes and segment lengths.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveLimitOpposite_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  0.000000: 0.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.000000, postLen 1.300000, auto false / false\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.530268, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Building Test Cases for Work Library in OpenUSD\nDESCRIPTION: Defines multiple test builds for the 'work' library, each focusing on different components like dispatcher, loops, reduce, sort, and thread limits. Each test links against the work library and specifies its corresponding source file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/work/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testWorkDispatcher\n    LIBRARIES\n        work\n    CPPFILES\n        testenv/testWorkDispatcher.cpp\n) \npxr_build_test(testWorkLoops\n    LIBRARIES\n        work\n    CPPFILES\n        testenv/testWorkLoops.cpp\n)\npxr_build_test(testWorkReduce\n    LIBRARIES\n        work\n    CPPFILES\n        testenv/testWorkReduce.cpp\n)\npxr_build_test(testWorkSort\n    LIBRARIES\n        work\n    CPPFILES\n        testenv/testWorkSort.cpp\n) \npxr_build_test(testWorkThreadLimits\n    LIBRARIES\n        work\n    CPPFILES\n        testenv/testWorkThreadLimits.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Python-Based Tests in CMake for OpenUSD\nDESCRIPTION: Registers Python-specific tests for the Tf library, identified by the PYTHON flag. These tests use Python interpreters to execute test scripts rather than native binaries.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(TfFileUtils_Python\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTfFileUtils\"\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for usdUI in ReStructuredText\nDESCRIPTION: This snippet defines a table of contents for the usdUI module using ReStructuredText syntax. It includes a warning about automated generation, a timestamp, and links to various component and API documentation pages.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdUI/usdUI_toc.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. WARNING: THIS FILE IS GENERATED BY genSchemaDocs.  DO NOT EDIT.\n.. TOC for usdUI\n.. Generated: 05:23PM on April 01, 2025\n\n##########\nUI (usdUI)\n##########\n\n.. toctree::\n   overview.md\n   AccessibilityAPI.md\n   Backdrop.md\n   NodeGraphNodeAPI.md\n   SceneGraphPrimAPI.md\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Layer Stack for Composition\nDESCRIPTION: Shows the ordered list of USD layers contributing to the final composed scene, starting from the root layer `root.sdf` and including its sublayers `sub.sdf`, `sub_48tcps.sdf`, and the base layer `base.sdf`. The order dictates the strength of opinions during composition, with layers listed earlier having higher strength.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ReferenceListOpsWithOffsets.testenv/baseline/compositionResults_ReferenceListOpsWithOffsets.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLayer Stack:\n     root.sdf\n     sub.sdf\n     sub_48tcps.sdf\n     base.sdf\n```\n\n----------------------------------------\n\nTITLE: Registering HdSt Basic Drawing Tests with MDI and Lighting in CMake\nDESCRIPTION: A series of CMake test registrations for HdStBasicDrawing with different representation modes (hull, smoothHull, wire, etc.), lighting, and refinement levels. Each test runs with offscreen rendering and validates the output against reference images.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_MDI_lighting_lv2_hull\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --lighting --repr hull --refineLevel 2 --write testHdStBasicDrawing_lighting_lv2_hull.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_lighting_lv2_hull.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TsRegressionPreventer Settings (YAML-like)\nDESCRIPTION: A YAML-like block specifying configuration parameters for `TsRegressionPreventer::SetResult`. This data likely defines expected outcomes or states for spline segment adjustments in regression testing within the Ts library, detailing flags and widths for pre/post segment handling.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReplaceContain_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: false\n  havePreSegment: true\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.250000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.250000\n  havePostSegment: true\n  postActiveAdjusted: false\n  postActiveAdjustedWidth: 0.250000\n  postOppositeAdjusted: false\n  postOppositeAdjustedWidth: 0.250000\n```\n\n----------------------------------------\n\nTITLE: Animation Curve Sampling with High Resolution\nDESCRIPTION: Test case showing detailed animation curve sampling over a small time range with high resolution. Shows precise Bezier curve evaluation with dense sampling between keyframes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_61\n\nLANGUAGE: plaintext\nCODE:\n```\nTest Case 136: SampleWithSources([100, 110], 50, 50, 1)\n0: (TsSourceKnotInterp)\n    (100, 10)\n    (100.269775390625, 10.0286865234375)\n    (100.517578125, 10.1123046875)\n    (100.744873046875, 10.2471923828125)\n    (100.953125, 10.4296875)\n    (101.143798828125, 10.6561279296875)\n    (101.318359375, 10.9228515625)\n    (101.625, 11.5625)\n    (101.884765625, 12.3193359375)\n    (102.109375, 13.1640625)\n    (102.5, 15)\n    (102.890625, 16.8359375)\n    (103.115234375, 17.6806640625)\n    (103.375, 18.4375)\n    (103.681640625, 19.0771484375)\n    (103.856201171875, 19.3438720703125)\n    (104.046875, 19.5703125)\n    (104.255126953125, 19.7528076171875)\n    (104.482421875, 19.8876953125)\n    (104.730224609375, 19.9713134765625)\n    (105, 20)\n    (110, 15)\n```\n\n----------------------------------------\n\nTITLE: Defining Spline Properties and Knots in Text Format\nDESCRIPTION: Provides a textual description of a spline configuration used within the OpenUSD Ts library. It specifies that the spline is non-hermite, uses 'Held' extrapolation before the first knot and after the last knot, and defines three knots with their respective time, value, interpolation type (Curve), pre/post slopes, pre/post tangent lengths, and auto-tangent flags (both false).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReplaceKeepRatio_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope -0.250000, preLen 0.000000, postLen 0.250000, auto false / false\n  3.000000: 2.000000, Curve, preSlope 0.250000, postSlope 0.250000, preLen 0.250000, postLen 0.250000, auto false / false\n  4.000000: 2.000000, Curve, preSlope 0.250000, postSlope 0.000000, preLen 0.250000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Configuring Python DLL Link Test Function in CMake\nDESCRIPTION: Function that sets up a test environment to verify correct DLL loading for Python modules on Windows. Creates test implementations with 'good' and 'bad' DLLs to verify proper loading behavior.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_py_dll_link_test)\n    if (NOT (PXR_BUILD_TESTS AND WIN32))\n        return()\n    endif()\n\n    if (NOT TARGET python_modules)\n        return()\n    endif()\n\n    foreach(implementation_suffix Good Bad)\n        set(implementation_name \"testTfPyDllLinkImplementation${implementation_suffix}\")\n        add_library(${implementation_name} SHARED\n            \"testenv/${implementation_name}.cpp\"\n        )\n        # ... rest of implementation setup\n    endforeach()\n\n    add_library(testTfPyDllLinkModule SHARED\n        \"testenv/testTfPyDllLinkModule.c\"\n    )\n    # ... rest of module setup\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building OpenUSD Exec Library in CMake\nDESCRIPTION: Defines the exec library build configuration including dependencies, headers, classes, and resource files. The library depends on several other components like ef, esf, tf, and others, and includes both public and private headers and classes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/exec/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/exec)\nset(PXR_PACKAGE exec)\n\npxr_library(exec\n    LIBRARIES\n        ef\n        esf\n        tf\n        trace\n        sdf\n        usd\n        vdf\n        vt\n        ${TBB_tbb_LIBRARY}\n\n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n        \n    PUBLIC_HEADERS\n        api.h\n        providerResolution.h\n        registerSchema.h\n        types.h\n\n    PUBLIC_CLASSES\n        computationBuilders\n        request\n        system\n        tokens\n        typeRegistry\n        valueKey\n\n    PRIVATE_HEADERS\n        compilationState.h\n        inputKey.h\n\n    PRIVATE_CLASSES\n        callbackNode\n        compilationTask\n        compiledOutputCache\n        compiler\n        compilerTaskSync\n        computationDefinition\n        definitionRegistry\n        inputResolvingCompilationTask\n        leafCompilationTask\n        outputKey\n        outputProvidingCompilationTask\n        program\n        requestImpl\n        uncompilationRuleSet\n        uncompilationTable\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /InternalReference\nDESCRIPTION: Shows the composition results for the prim </InternalReference>. The prim stack indicates its definition in root.sdf and lists its child prim names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </InternalReference>\n\nPrim Stack:\n    root.sdf             /InternalReference\n\nChild names:\n     ['InternalReference_Child']\n```\n\n----------------------------------------\n\nTITLE: Configuring Learn Section Navigation in Sphinx Documentation\nDESCRIPTION: Sphinx toctree directive that configures the Learn section navigation with hidden titlesonly pages including introduction, glossary, tutorials, downloads, and product information.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toc.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :hidden:\n   :titlesonly:\n   :caption: Learn\n\n   intro\n   Terms and Concepts <glossary>\n   Tutorials <tut_usd_tutorials>\n   dl_downloads\n   usd_products\n```\n\n----------------------------------------\n\nTITLE: Instantiating TsTest_SplineData Configuration - Python\nDESCRIPTION: This snippet constructs a TsTest_SplineData object with explicit parameters, including Hermite mode off, both pre- and post-extrapolations set to 'Held', and a list of knots with hex-encoded floating-point values and slopes. The instantiation lays out all required initialization data to test spline interpolation, and assumes access to the Ts.TsTest_SplineData module. Key parameters include knot positions, their slopes, and lengths, forming the foundation for a regression test or calculation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReplaceNone_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('-0x1p-2'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.8p+1'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x1p-2'), postSlope = float.fromhex('0x1p-2'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x1p-2'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x1p-2'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1p-2'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: FringeVert Bezier Spline Definition\nDESCRIPTION: Configuration for a FringeVert Bezier spline with Held extrapolation. This spline uses precise tangent widths (1.244 and 0.089) to create a specific curve behavior useful for fringe or edge cases.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_106\n\nLANGUAGE: raw\nCODE:\n```\nSpline: FringeVert\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 1.2440169358562925\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 0.08931639747704094\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Configuring TsRegressionPreventer Results (YAML)\nDESCRIPTION: This snippet details the output or configuration settings for a `TsRegressionPreventer`, likely used to track or prevent unintended changes in spline evaluation. It specifies boolean flags and width values related to adjustments made on the pre and post segments of the spline during testing.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/ReorderLimitOpposite_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: true\n  havePreSegment: true\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.250000\n  preOppositeAdjusted: true\n  preOppositeAdjustedWidth: 0.130900\n  havePostSegment: true\n  postActiveAdjusted: false\n  postActiveAdjustedWidth: 0.250000\n  postOppositeAdjusted: false\n  postOppositeAdjustedWidth: 0.250000\n```\n\n----------------------------------------\n\nTITLE: Listing TsRegressionPreventer Parameters - YAML\nDESCRIPTION: This YAML section details the state of a regression preventer after processing, including flags and widths for pre- and post-segments. It is descriptive output meant for status reporting or test result serialization. Fields correspond to internal state and may determine how subsequent spline computation is handled. Suitable as input for status validation or regression analysis tools.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveMayaTansLimitActive_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: true\n  havePreSegment: false\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.000000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.000000\n  havePostSegment: true\n  postActiveAdjusted: true\n  postActiveAdjustedWidth: 1.165675\n  postOppositeAdjusted: false\n  postOppositeAdjustedWidth: 0.800000\n```\n\n----------------------------------------\n\nTITLE: Registering Test Cases\nDESCRIPTION: Registers all test cases with the build system, including both C++ and Python tests, with specific test parameters and output comparison requirements.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/trace/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testTraceCategory\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTraceCategory\"\n)\n\npxr_register_test(testTraceData\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTraceData\"\n)\n\npxr_register_test(testTraceHash\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTraceHash\"\n)\n\npxr_register_test(testTraceMacros\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTraceMacros\"\n)\n\npxr_register_test(testTraceThreading\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTraceThreading\"\n)\n\npxr_register_test(testTrace\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTrace\"\n)\n\npxr_register_test(testTraceRecursion1\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTraceRecursion\"\n    DIFF_COMPARE recursion_5begins.out\n)\n\npxr_register_test(testTraceRecursion2\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTraceRecursion\"\n    DIFF_COMPARE recursion_typical.out\n)\n\npxr_register_test(testTraceRecursion3\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTraceRecursion\"\n    DIFF_COMPARE recursion_newnode.out\n)\n\npxr_register_test(testTraceRecursion4\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTraceRecursion\"\n    DIFF_COMPARE recursion_inner.out\n)\n\npxr_register_test(testTraceRecursion5\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTraceRecursion\"\n    DIFF_COMPARE recursion_1817.out\n)\n\npxr_register_test(testTraceRecursion6\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTraceRecursion\"\n    DIFF_COMPARE recursion_branch.out\n)\n\npxr_register_test(testTraceRecursion7\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTraceRecursion\"\n    DIFF_COMPARE recursion_marker_merge.out\n)\n\npxr_register_test(testTraceReports\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTraceReports\"\n)\n\npxr_register_test(testTraceReporter\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTraceReporter\"\n)\n\npxr_register_test(testTraceReporterLoadTrace\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTraceReporterLoadTrace\"\n)\n\npxr_register_test(testTraceSerialization\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTraceSerialization\"\n)\n\npxr_register_test(testTraceCounters\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTraceCounters\"\n)\n\npxr_register_test(testTraceMarkers\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTraceMarkers\"\n)\n\npxr_register_test(testTraceReportPerf\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTraceReportPerf\"\n)    \n\npxr_register_test(testTraceEventContainer\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTraceEventContainer\"\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Draw Item Integrity and Cache Tests\nDESCRIPTION: Registers tests for HdSt draw item integrity and caching functionality. These tests verify the correctness of draw items and their caching mechanism.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_34\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStDrawItemIntegrity\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStDrawItemIntegrity --offscreen\"\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStDrawItemIntegrity\n)\npxr_register_test(testHdStDrawItemsCache\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStDrawItemsCache --offscreen\"\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStDrawItemsCache\n    ENV\n        HDST_ENABLE_DRAW_ITEMS_CACHE=1\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /InternalReference/InternalReference_Child\nDESCRIPTION: Shows the composition results for the child prim </InternalReference/InternalReference_Child>. The prim stack indicates its definition originates from root.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </InternalReference/InternalReference_Child>\n\nPrim Stack:\n    root.sdf             /InternalReference/InternalReference_Child\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PSI Prim\nDESCRIPTION: Shows the prim stack and child names for the base prim at path </PSI> defined in root.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PSI>\n\nPrim Stack:\n    root.sdf             /PSI\n\nChild names:\n     ['Child', 'Sibling']\n```\n\n----------------------------------------\n\nTITLE: Building C++ Test for TfPyInvoke in CMake\nDESCRIPTION: Defines a C++ test target for TfPyInvoke functionality using the pxr_build_test macro. The test links against the 'tf' library and uses a single source file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testTfPyInvoke\n    LIBRARIES\n        tf\n    CPPFILES\n        testenv/testTfPyInvoke.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Regressive Pre-Fringe Bezier Curve Spline in Text Format\nDESCRIPTION: Specifies a regressive pre-fringe Bezier curve spline with two knot points. The curve has a small initial tangent width and a large final tangent width, creating a slow start and fast finish effect.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nSpline: RegressivePreFringe\nSpline:\n  value type double\n  time valued 0\n  curve type Bezier\n  pre extrap Held\n  post extrap Held\nKnot:\n  value type double\n  curve type Bezier\n  time 0\n  value 0\n  next interp Curve\n  pre-tan width 0\n  pre-tan slope 0\n  post-tan width 0.05\n  post-tan slope 0\nKnot:\n  value type double\n  curve type Bezier\n  time 1\n  value 1\n  next interp Curve\n  pre-tan width 1.3\n  pre-tan slope 0\n  post-tan width 0\n  post-tan slope 0\n```\n\n----------------------------------------\n\nTITLE: Example Hierarchical Path Listing\nDESCRIPTION: This block lists a series of hierarchical paths. The paths systematically cover combinations starting with /A/, /Y/, or /Z/, each followed by a second component represented by a capital letter from A to Z. These paths likely represent example locations, asset identifiers, or organizational units within a larger structure, possibly for testing or demonstration purposes in the OpenUSD project.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/testenv/testHdSortedIds/baseline/testHdSortedId_removeRangeTest.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/A/A\n/A/B\n/A/C\n/A/D\n/A/E\n/A/F\n/A/G\n/A/H\n/A/I\n/A/J\n/A/K\n/A/L\n/A/M\n/A/N\n/A/O\n/A/P\n/A/Q\n/A/R\n/A/S\n/A/T\n/A/U\n/A/V\n/A/W\n/A/X\n/A/Y\n/A/Z\n/Y/A\n/Y/B\n/Y/C\n/Y/D\n/Y/E\n/Y/F\n/Y/G\n/Y/H\n/Y/I\n/Y/J\n/Y/K\n/Y/L\n/Y/M\n/Y/N\n/Y/O\n/Y/P\n/Y/Q\n/Y/R\n/Y/S\n/Y/T\n/Y/U\n/Y/V\n/Y/W\n/Y/X\n/Y/Y\n/Y/Z\n/Z/A\n/Z/B\n/Z/C\n/Z/D\n/Z/E\n/Z/F\n/Z/G\n/Z/H\n/Z/I\n/Z/J\n/Z/K\n/Z/L\n/Z/M\n/Z/N\n/Z/O\n/Z/P\n/Z/Q\n/Z/R\n/Z/S\n/Z/T\n/Z/U\n/Z/V\n/Z/W\n/Z/X\n/Z/Y\n/Z/Z\n```\n\n----------------------------------------\n\nTITLE: Sample With Sources Test Cases\nDESCRIPTION: Test case outputs showing sampled points with different time ranges and parameters, including source interpolation types\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_47\n\nLANGUAGE: text\nCODE:\n```\nTest Case 122: SampleWithSources([-3.5, 8.5], 166.667, 500, 10)\n0: (TsSourcePreExtrap)\n    (-3.5, 1)\n    (1, 1)\n```\n\n----------------------------------------\n\nTITLE: Installing Test Data Directory 'testUsdZipInputFiles2' in CMake\nDESCRIPTION: Uses the `pxr_install_test_dir` custom CMake function to install the contents of the source directory `testenv/testUsdZipInputFiles` into the destination directory `testUsdZipInputFiles2` within the build/install test environment, likely for a second test variant.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdzip/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdZipInputFiles\n    DEST testUsdZipInputFiles2\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring Test Scripts for rmanOslParser using pxr_test_scripts in CMake\nDESCRIPTION: Uses the custom `pxr_test_scripts` CMake function to declare the Python test script associated with the `rmanOslParser` plugin. This function likely handles copying or registering the specified script (`testenv/testRmanOslParser.py`) as part of the build's testing infrastructure.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/rmanOslParser/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\npxr_test_scripts(\n    testenv/testRmanOslParser.py\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building hdMtlx Library in OpenUSD with CMake\nDESCRIPTION: This CMake script defines the build configuration for the hdMtlx library, which is part of Pixar's imaging system. It sets up the package prefix, specifies dependent libraries including both internal (gf, hd, etc.) and external (MaterialX) dependencies, and declares public classes and headers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdMtlx/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE hdMtlx)\n\npxr_library(hdMtlx\n    LIBRARIES\n        gf\n        hd\n        sdf\n        sdr\n        tf\n        trace\n        usdMtlx\n        vt\n        MaterialXCore\n        MaterialXFormat\n\n    PUBLIC_CLASSES\n        hdMtlx\n        debugCodes\n\n    PUBLIC_HEADERS\n        api.h\n)\n```\n\n----------------------------------------\n\nTITLE: Composing Child Prims of </A> in OpenUSD\nDESCRIPTION: This snippet shows the composition results for child prims of </A>, including z, a, x, f, y, b, and c. Each child prim's stack is displayed, demonstrating which layer defines it.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicListEditing.testenv/baseline/compositionResults_BasicListEditing_usd.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </A/z>\n\nPrim Stack:\n    sub2.sdf             /A/z\n\n------------------------------------------------------------------------\nResults for composing </A/a>\n\nPrim Stack:\n    sub1.sdf             /A/a\n\n------------------------------------------------------------------------\nResults for composing </A/x>\n\nPrim Stack:\n    sub2.sdf             /A/x\n\n------------------------------------------------------------------------\nResults for composing </A/f>\n\nPrim Stack:\n    root.sdf             /A/f\n\n------------------------------------------------------------------------\nResults for composing </A/y>\n\nPrim Stack:\n    sub2.sdf             /A/y\n\n------------------------------------------------------------------------\nResults for composing </A/b>\n\nPrim Stack:\n    sub1.sdf             /A/b\n\n------------------------------------------------------------------------\nResults for composing </A/c>\n\nPrim Stack:\n    sub1.sdf             /A/c\n```\n\n----------------------------------------\n\nTITLE: Composing Prim /PayloadRefPayload/Frame in USD\nDESCRIPTION: Details composition for `/PayloadRefPayload/Frame`. The prim stack comes from `B.sdf`. Time offsets accumulate from the root (`root.sdf`) and the nested payload structure involving `ref.sdf`, `ref_sub.sdf`, and `B.sdf`, incorporating scaling.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicTimeOffset.testenv/baseline/compositionResults_BasicTimeOffset.txt#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </PayloadRefPayload/Frame>\n\nPrim Stack:\n    B.sdf                /Model/Frame\n\nTime Offsets:\n    root.sdf             /PayloadRefPayload/Frame root       (offset=0.00, scale=1.00)\n    ref.sdf              /Ref/Frame      payload    (offset=10.00, scale=2.00)\n        ref_sub.sdf                      sublayer   (offset=20.00, scale=1.00)\n    B.sdf                /Model/Frame    payload    (offset=50.00, scale=2.00)\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Composition Result for /Model\nDESCRIPTION: Shows the resulting prim stack for the '/Model' prim, defined in 'root.sdf'. It also lists the child prim names found under '/Model' after composition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicSpecializesAndInherits.testenv/baseline/compositionResults_BasicSpecializesAndInherits.txt#2025-04-23_snippet_7\n\nLANGUAGE: log\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </Model>\n\nPrim Stack:\n    root.sdf             /Model\n\nChild names:\n     ['Looks']\n```\n\n----------------------------------------\n\nTITLE: Registering Face Culling Tests with Different Culling Modes\nDESCRIPTION: Registers tests for HdSt face culling with different culling styles (None, Back, Front, BackUnlessDoubleSided, FrontUnlessDoubleSided). These tests verify that face culling works correctly by comparing rendered outputs.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_36\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStFaceCulling_None\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStFaceCulling --offscreen --repr wireOnSurf --cullStyle Nothing --write testHdStFaceCulling_cull_none.png\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        testHdStFaceCulling_cull_none.png\n    FAIL 1\n    FAIL_PERCENT 1\n    TESTENV testHdStFaceCulling\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStFaceCulling_Back\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStFaceCulling --offscreen --repr wireOnSurf --cullStyle Back --write testHdStFaceCulling_cull_back.png\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        testHdStFaceCulling_cull_back.png\n    FAIL 1\n    FAIL_PERCENT 1\n    TESTENV testHdStFaceCulling\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStFaceCulling_Front\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStFaceCulling --offscreen --repr wireOnSurf --cullStyle Front --write testHdStFaceCulling_cull_front.png\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        testHdStFaceCulling_cull_front.png\n    FAIL 1\n    FAIL_PERCENT 1\n    TESTENV testHdStFaceCulling\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStFaceCulling_BackUnlessDoubleSided\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStFaceCulling --offscreen --repr wireOnSurf --cullStyle BackUnlessDoubleSided --write testHdStFaceCulling_cull_backUnlessDS.png\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        testHdStFaceCulling_cull_backUnlessDS.png\n    FAIL 1\n    FAIL_PERCENT 1\n    TESTENV testHdStFaceCulling\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\npxr_register_test(testHdStFaceCulling_FrontUnlessDoubleSided\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStFaceCulling --offscreen --repr wireOnSurf --cullStyle FrontUnlessDoubleSided --write testHdStFaceCulling_cull_frontUnlessDS.png\"\n    EXPECTED_RETURN_CODE 0\n    IMAGE_DIFF_COMPARE\n        testHdStFaceCulling_cull_frontUnlessDS.png\n    FAIL 1\n    FAIL_PERCENT 1\n    TESTENV testHdStFaceCulling\n    ENV\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\n----------------------------------------\n\nTITLE: Python Spline Data Object Initialization\nDESCRIPTION: Python code instantiating a TsTest_SplineData object with detailed parameters including extrapolation methods and knot configurations using hex float values\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/MoveStartLimitOpposite_TsTestBaseline.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.999999999999ap-2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.9998d045fe11p-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.9996744b2b777p-3'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Configuring Regression Prevention Settings\nDESCRIPTION: Configuration data for TsRegressionPreventer showing adjustment settings for pre and post segments with width values and activation states\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/MoveStartContain_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: true\n  havePreSegment: false\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.000000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.000000\n  havePostSegment: true\n  postActiveAdjusted: true\n  postActiveAdjustedWidth: 0.600000\n  postOppositeAdjusted: true\n  postOppositeAdjustedWidth: 0.600000\n```\n\n----------------------------------------\n\nTITLE: Configuring Press Section Navigation in Sphinx Documentation\nDESCRIPTION: Sphinx toctree directive that configures the Press section navigation with hidden titlesonly pages for open source release and announcement information.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toc.rst#2025-04-23_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :hidden:\n   :titlesonly:\n   :caption: Press\n\n   press_opensource_release\n   press_opensource_announce\n```\n\n----------------------------------------\n\nTITLE: Building and Registering Uncompilation Table Test in CMake\nDESCRIPTION: Configures the testExecUncompilationTable test, linking it with both exec and work libraries and setting up the test to run with expected return code 0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/exec/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testExecUncompilationTable\n    LIBRARIES\n        exec\n        work\n    CPPFILES\n        testenv/testExecUncompilationTable.cpp\n)\n\npxr_register_test(testExecUncompilationTable\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testExecUncompilationTable\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Model Prim Composition\nDESCRIPTION: Displays the prim stack for /Model showing reference layer composition and child prim names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpecializesAndInherits.testenv/baseline/compositionResults_TrickySpecializesAndInherits.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /Model\n    ref.sdf              /Ref\n\nChild names:\n     ['A', 'B', 'C', 'D']\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Dependencies and Python Binaries - CMake\nDESCRIPTION: The snippet sets up the project-specific prefix and package variables and declares the 'usdedit' Python binary along with its dependencies (sdf and usd) using the CMake-based build system. These variables and the pxr_python_bin command help establish consistent project structure and ensure required modules are available for the binary.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdedit/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usd)\n\npxr_python_bin(usdedit\n    DEPENDENCIES\n        sdf\n        usd\n)\n\n```\n\n----------------------------------------\n\nTITLE: Analyzing Composition for /VariantsOpinionsOnRestrictedPrim/Child (USD)\nDESCRIPTION: Shows the composition analysis for '/VariantsOpinionsOnRestrictedPrim/Child'. This prim's stack includes opinions from 'root.sdf' directly, opinions from a variant ('{child=a}') defined in 'root.sdf', and opinions from 'ref.sdf' (via '/Ref/Child'). It lists the active variant selection '{child = a}' and its child prim 'Child2'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorPermissionDenied.testenv/baseline/compositionResults_ErrorPermissionDenied.txt#2025-04-23_snippet_6\n\nLANGUAGE: usd\nCODE:\n```\nResults for composing </VariantsOpinionsOnRestrictedPrim/Child>\n\nPrim Stack:\n    root.sdf             /VariantsOpinionsOnRestrictedPrim/Child\n    root.sdf             /VariantsOpinionsOnRestrictedPrim/Child{child=a}\n    ref.sdf              /Ref/Child\n\nVariant Selections:\n    {child = a}\n\nChild names:\n     ['Child2']\n```\n\n----------------------------------------\n\nTITLE: Configuring USD MaterialX Library Build\nDESCRIPTION: Configures the main usdMtlx library build including dependencies, source files, and public/private classes. Sets up MaterialX stdlib directory if provided and defines core library components.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdMtlx/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usdMtlx)\n\nif (MATERIALX_STDLIB_DIR)\n    add_definitions(-DPXR_MATERIALX_STDLIB_DIR=\"${MATERIALX_STDLIB_DIR}\")\nendif()\n\npxr_library(usdMtlx\n    INCLUDE_SCHEMA_FILES\n\n    LIBRARIES\n        arch\n        gf\n        sdf\n        sdr\n        tf\n        vt\n        usd\n        usdGeom\n        usdShade\n        usdUI\n        usdUtils\n        MaterialXCore\n        MaterialXFormat\n\n    CPPFILES\n        discovery.cpp\n        parser.cpp\n\n    PRIVATE_CLASSES\n        backdoor\n        fileFormat\n\n    PUBLIC_CLASSES\n        debugCodes\n        reader\n        utils\n\n    PUBLIC_HEADERS\n        api.h\n\n    PYMODULE_CPPFILES\n        wrapBackdoor.cpp\n\n    PYMODULE_FILES\n        __init__.py\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for Prim /SS2\nDESCRIPTION: Details the composition resolution for the prim path `/SS2`. It shows the Prim Stack, listing layers contributing opinions to this prim, and the Time Offsets, illustrating how time scales and offsets accumulate through the hierarchy of sublayers affecting this prim. The Time Offsets section is partially shown.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer4.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </SS2>\n\nPrim Stack:\n    ss_48tcps.sdf        /SS2\n    ss_48tcps.sdf        /SS2\n    ss_48tcps.sdf        /SS2\n    ss_48tcps.sdf        /SS2\n    ref.sdf              /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_48tcps.sdf       /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_24tcps_12fps.sdf /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n    ref_12fps.sdf        /Ref\n    ref_s.sdf            /Ref\n    ref_s_48tcps.sdf     /Ref\n    ref_s_24tcps_12fps.sdf /Ref\n    ref_s_12fps.sdf      /Ref\n\nTime Offsets:\n    session.sdf          /SS2            root       (offset=0.00, scale=1.00)\n        session.sdf                      sublayer   (offset=0.00, scale=0.50)\n        sess_s.sdf                       sublayer   (offset=5.00, scale=1.00)\n        sess_s_48tcps.sdf                sublayer   (offset=5.00, scale=0.50)\n        sess_s_24tcps_12fps.sdf          sublayer   (offset=5.00, scale=1.00)\n```\n\n----------------------------------------\n\nTITLE: Registering Python Test Scripts\nDESCRIPTION: Registers multiple Python test scripts for various USD Shade functionality including material binding, shaders, and node graphs.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdShade/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_test_scripts(\n    testenv/testUsdShadeBinding.py\n    testenv/testUsdShadeConnectability.py\n    testenv/testUsdShadeConnectableAPIBehavior.py\n    testenv/testUsdShadeCoordSysAPI.py\n    testenv/testUsdShadeCoordSysAPIDeprecated.py\n    testenv/testUsdShadeGetValueProducingAttribute.py\n    testenv/testUsdShadeInterfaceInputConsumers.py\n    testenv/testUsdShadeMaterialBinding.py\n    testenv/testUsdShadeMaterialOutputs.py\n    testenv/testUsdShadeMaterialBindFaceSubset.py\n    testenv/testUsdShadeMaterialAuthoring.py\n    testenv/testUsdShadeMaterialBaseMaterial.py\n    testenv/testUsdShadeMaterialSpecializesBaseComposition.py\n    testenv/testUsdShadeNodeGraphs.py\n    testenv/testUsdShadeShaders.py\n    testenv/testUsdShadeShaderDef.py\n    testenv/testUsdShadeUdimUtils.py\n)\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </RefToRoot> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </RefToRoot>. This prim references /Root, as indicated by the prim stack contributions from /RefToRoot, /Root, and /_X within 'root.sdf'. The resolved child prim names ('_Y', 'B') are inherited from the referenced /Root.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </RefToRoot>\n\nPrim Stack:\n    root.sdf             /RefToRoot\n    root.sdf             /Root\n    root.sdf             /_X\n\nChild names:\n     ['_Y', 'B']\n```\n\n----------------------------------------\n\nTITLE: Initializing Spline Data Structure in Python\nDESCRIPTION: This code snippet defines a spline data structure using Python classes. It includes hermite flag, extrapolation methods, and knot data with various properties such as time, value, slopes, and interpolation methods.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/NoopNone_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x0p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x0p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1.999999999999ap-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1.999999999999ap-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Renaming PEGTL Macros in C++ Files\nDESCRIPTION: A Bash command to replace all occurrences of 'TAO_PEGTL_' with 'PXR_PEGTL_' in C++ source and header files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/pegtl/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nsed -i 's/TAO_PEGTL_/PXR_PEGTL_/g' $(find -name '[^.]*.[hc]pp')\n```\n\n----------------------------------------\n\nTITLE: Registering usdchecker Test Cases in CMake\nDESCRIPTION: Uses the custom `pxr_register_test` CMake function to define individual test cases. Each call registers a test with a unique name (e.g., `testUsdChecker1`). The `COMMAND` specifies the `usdchecker` executable path (using `${CMAKE_INSTALL_PREFIX}/bin/usdchecker`) followed by arguments and the input USD file path (relative to the installed test directory). Arguments like `--arkit`, `--rootPackageOnly`, `--useNewValidationFramework`, `--dumpRules`, `--variants`, and `--variantSets` are used to control validation behavior. `EXPECTED_RETURN_CODE` specifies the anticipated exit code (0 for success/valid, 1 for failure/invalid). Some tests also use `DIFF_COMPARE` to check output files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdChecker1\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdchecker clean/clean.usd\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdChecker5\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdchecker --arkit clean/clean_arkit.usdz\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdChecker7\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdchecker --arkit --rootPackageOnly clean/clean_flat.usdz\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdChecker10\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdchecker --arkit --dumpRules bad/variants.usdc -o variants_failedChecks.txt\"\n    DIFF_COMPARE variants_failedChecks.txt\n    EXPECTED_RETURN_CODE 1\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdChecker14\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdchecker --useNewValidationFramework clean/clean.usd\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\n# Explicitly set clean variant combination, should pass\npxr_register_test(testUsdChecker26\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdchecker --useNewValidationFramework bad/badVariants2.usda --variants testSet:test1,testSet2:test2A\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\n# Explicitly set variantSets, one combination of testSet variantSet will fail\npxr_register_test(testUsdChecker28\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdchecker --useNewValidationFramework bad/badVariants2.usda --variantSets testSet\"\n    EXPECTED_RETURN_CODE 1\n)\n```\n\n----------------------------------------\n\nTITLE: Model/B Prim Composition\nDESCRIPTION: Shows the prim stack for /Model/B including inherited and referenced layers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpecializesAndInherits.testenv/baseline/compositionResults_TrickySpecializesAndInherits.txt#2025-04-23_snippet_3\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /Model/B\n    root.sdf             /Model/C\n    ref.sdf              /Ref/B\n    ref.sdf              /Ref/C\n    root.sdf             /Model/D\n    ref.sdf              /Ref/D\n```\n\n----------------------------------------\n\nTITLE: Composing Prim /MultiRef/Anim in USD\nDESCRIPTION: Details the composition results for the child prim path `/MultiRef/Anim`. It shows the prim stack originating from `B.sdf` and lists the accumulated time offsets considering the root layer (`root.sdf`) and the multiple reference arcs (`ref.sdf`/`ref_sub.sdf` and `B.sdf`).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicTimeOffset.testenv/baseline/compositionResults_BasicTimeOffset.txt#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </MultiRef/Anim>\n\nPrim Stack:\n    B.sdf                /Model/Anim\n\nTime Offsets:\n    root.sdf             /MultiRef/Anim  root       (offset=0.00, scale=1.00)\n    ref.sdf              /Ref2/Anim      reference  (offset=10.00, scale=1.00)\n        ref_sub.sdf                      sublayer   (offset=20.00, scale=1.00)\n    B.sdf                /Model/Anim     reference  (offset=30.00, scale=1.00)\n```\n\n----------------------------------------\n\nTITLE: Composing `/_element_class` Prim in USD\nDESCRIPTION: Details the composition of the class prim `/_element_class`. Its prim stack includes `middleman`, `referencedMiddleman`, and `implementation` (with variant `testVariantSet=testVariant`). It defines `variantAttr` (from the variant) and `referencedAttr` (from `referencedMiddleman`).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndVariants2.testenv/baseline/compositionResults_SpecializesAndVariants2.txt#2025-04-23_snippet_2\n\nLANGUAGE: usd\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </_element_class>\n\nPrim Stack:\n    root.sdf             /_element_class\n    root.sdf             /middleman\n    root.sdf             /referencedMiddleman\n    root.sdf             /implementation\n    root.sdf             /implementation{testVariantSet=testVariant}\n\nVariant Selections:\n    {testVariantSet = testVariant}\n\nProperty names:\n     ['variantAttr', 'referencedAttr']\n\nProperty stacks:\n/_element_class.referencedAttr:\n    root.sdf             /referencedMiddleman.referencedAttr\n/_element_class.variantAttr:\n    root.sdf             /implementation{testVariantSet=testVariant}.variantAttr\n```\n\n----------------------------------------\n\nTITLE: TsRegressionPreventer Configuration/Output (Text)\nDESCRIPTION: Displays the state or result from TsRegressionPreventer::SetResult, detailing adjustments made to spline segments (pre and post). Indicates whether segments exist and if/how their active or opposite sides were adjusted.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/PreRegressiveMayaTansKeepStart_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: true\n  havePreSegment: false\n  preActiveAdjusted: false\n  preActiveAdjustedWidth: 0.000000\n  preOppositeAdjusted: false\n  preOppositeAdjustedWidth: 0.000000\n  havePostSegment: true\n  postActiveAdjusted: false\n  postActiveAdjustedWidth: 1.300000\n  postOppositeAdjusted: true\n  postOppositeAdjustedWidth: 0.530268\n```\n\n----------------------------------------\n\nTITLE: Spline Configuration\nDESCRIPTION: Spline configuration defining hermite settings, extrapolation methods, and knot points with their respective slopes and lengths\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/InitiallyRegressiveNone_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  156.000000: 0.000000, Curve, preSlope 0.000000, postSlope -1.300000, preLen 0.000000, postLen 15.800000, auto false / false\n  167.000000: 28.800000, Curve, preSlope 0.400000, postSlope 0.000000, preLen 16.800000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Listing PEGTL Header Files\nDESCRIPTION: A Bash command to list all files in the current directory and subdirectories, useful for updating build configuration files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/pegtl/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nfind -type f\n```\n\n----------------------------------------\n\nTITLE: Defining Bold-Underline Text Role in Sphinx RST\nDESCRIPTION: Creates a custom role 'bu' for bold-underline text formatting in Sphinx documentation. Used with the syntax :bu:`text`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/rolesAndUtils.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. role:: bu\n```\n\n----------------------------------------\n\nTITLE: USD Layer Stack Composition\nDESCRIPTION: Shows the layer stack composition starting from root.sdf file, displaying how prims are composed across multiple layers with specializes and inheritance relationships.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpecializesAndInherits2.testenv/baseline/compositionResults_TrickySpecializesAndInherits2.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nLoading @TrickySpecializesAndInherits2/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </NestedClass>\n\nPrim Stack:\n    root.sdf             /NestedClass\n\n------------------------------------------------------------------------\nResults for composing </Specializes>\n\nPrim Stack:\n    root.sdf             /Specializes\n\nChild names:\n     ['Nested']\n\n------------------------------------------------------------------------\nResults for composing </Specializes/Nested>\n\nPrim Stack:\n    root.sdf             /Specializes/Nested\n\n------------------------------------------------------------------------\nResults for composing </Root>\n\nPrim Stack:\n    root.sdf             /Root\n    ref.sdf              /Ref\n    ref2.sdf             /Ref2\n    root.sdf             /Specializes\n    ref.sdf              /Specializes\n    ref2.sdf             /Specializes\n\nChild names:\n     ['Nested']\n\n------------------------------------------------------------------------\nResults for composing </Root/Nested>\n\nPrim Stack:\n    root.sdf             /Root/Nested\n    ref.sdf              /Ref/Nested\n    ref2.sdf             /Ref2/Nested\n    root.sdf             /Specializes/Nested\n    root.sdf             /NestedClass\n    ref.sdf              /Specializes/Nested\n    ref.sdf              /NestedClass\n    ref2.sdf             /Specializes/Nested\n    ref2.sdf             /NestedClass\n    ref3.sdf             /Ref3\n    ref3.sdf             /NestedClass\n```\n\n----------------------------------------\n\nTITLE: Defining the usdSkelImaging Library using pxr_library in CMake\nDESCRIPTION: This CMake snippet uses the custom `pxr_library` function (specific to the OpenUSD build system) to define the `usdSkelImaging` library. It specifies dependencies on other libraries (`hio`, `hd`, `usdImaging`, `usdSkel`), lists the C++ classes intended for public use, declares public header files (`api.h`, `dataSourceUtils.h`), and includes necessary resource files like `plugInfo.json` and a GLSL shader (`shaders/skinning.glslfx`). This encapsulates the configuration needed to build and integrate the library.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdSkelImaging/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_library(usdSkelImaging\n    LIBRARIES\n        hio\n        hd\n        usdImaging\n        usdSkel\n\n    PUBLIC_CLASSES\n        animationAdapter\n        animationSchema\n        bindingAPIAdapter\n        bindingSchema\n        blendShapeAdapter\n        blendShapeData\n        blendShapeSchema\n        dataSourceAnimationPrim\n        dataSourceBindingAPI\n        dataSourceBlendShapePrim\n        dataSourceResolvedExtComputationPrim\n        dataSourceResolvedPointsBasedPrim\n        dataSourceResolvedSkeletonPrim\n        dataSourceSkeletonPrim\n        extComputations\n        inbetweenShapeSchema\n        jointInfluencesData\n        package\n        pointsResolvingSceneIndex\n        resolvedSkeletonSchema\n        resolvingSceneIndexPlugin\n        skelData\n        skeletonResolvingSceneIndex\n        skeletonAdapter\n        skeletonSchema\n        skelGuideData\n        skelRootAdapter\n        tokens\n        utils\n\n    PUBLIC_HEADERS\n        api.h\n        dataSourceUtils.h\n\n    RESOURCE_FILES\n        plugInfo.json\n        shaders/skinning.glslfx\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring VDF Library with Dependencies and Headers\nDESCRIPTION: Defines the VDF library with its external dependencies, include directories, and comprehensive lists of public and private headers and classes. This is the main configuration for building the VDF library component.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/vdf/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_library(vdf\n    LIBRARIES\n        arch\n        gf\n        tf\n        trace\n        vt\n        work\n        ${TBB_tbb_LIBRARY}\n\n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n        \n    PUBLIC_HEADERS\n        api.h\n        boxedContainer.h\n        boxedContainerTraits.h\n        countingIterator.h\n        parallelExecutorDataManager.h\n        parallelExecutorDataManagerInterface.h\n        parallelExecutorEngineBase.h\n        parallelSpeculationExecutorEngine.h\n        dataManagerBasedExecutor.h\n        dataManagerBasedSubExecutor.h\n        defaultInitAllocator.h\n        estimateSize.h\n        execNodeDebugName.h\n        executorDataManager.h\n        executorDataManagerInterface.h\n        executorFactory.h\n        executorFactoryBase.h\n        fixedSizePolymorphicHolder.h\n        forEachCommonType.h\n        indexedData.h\n        indexedDataIterator.h\n        indexedWeights.h\n        inputValuesPointer.h\n        iteratorRange.h\n        iterators.h\n        linearMap.h\n        lruCache.h\n        maskMemoizer.h\n        maskedIterator.h\n        parallelExecutorDataManager.h\n        parallelExecutorDataManagerInterface.h\n        parallelExecutorEngineBase.h\n        parallelSpeculationExecutorEngine.h\n        pullBasedExecutorEngine.h\n        readIterator.h\n        readIteratorRange.h\n        readWriteAccessor.h\n        readWriteIterator.h\n        readWriteIteratorRange.h\n        requiredInputsPredicate.h\n        scheduleNode.h\n        scheduleTasks.h\n        speculationExecutor.h\n        speculationExecutorEngine.h\n        subrangeView.h\n        traits.h\n        typedVector.h\n        vectorAccessor.h\n        weightedIterator.h\n\n    PUBLIC_CLASSES\n        allocateBoxedValue\n        compressedIndexMapping\n        connection\n        connectorSpecs\n        context\n        datalessExecutor\n        dataManagerHashTable\n        dataManagerVector\n        debugCodes\n        error\n        evaluationState\n        executionStats\n        executionStatsProcessor\n        executionTypeRegistry\n        executorInterface\n        executorBufferData\n        executorDataVector\n        executorErrorLogger\n        executorInvalidationData\n        executorInvalidator\n        executorObserver\n        extensibleNode\n        fallbackValueRegistry\n        fixedSizeHolder\n        grapher\n        grapherOptions\n        indexedWeightsOperand\n        input\n        inputAndOutputSpecs\n        inputSpec\n        inputVector\n        isolatedSubnetwork\n        iterator\n        mask\n        maskedOutput\n        maskedOutputVector\n        network\n        networkStats\n        networkUtil\n        node\n        nodeProcessInvalidationInterface\n        nodeSet\n        object\n        output\n        outputSpec\n        parallelDataManagerVector\n        parallelExecutorDataVector\n        parallelExecutorEngine\n        parallelTaskSync\n        parallelTaskWaitlist\n        poolChainIndex\n        rawValueAccessor\n        request\n        rootNode\n        schedule\n        scheduler\n        simpleExecutor\n        smblData\n        sparseInputPathFinder\n        sparseInputTraverser\n        sparseOutputTraverser\n        sparseVectorizedInputTraverser\n        sparseVectorizedOutputTraverser\n        speculationExecutorBase\n        speculationNode\n        testUtils\n        tokens\n        typeDispatchTable\n        types\n        vector\n        vectorData\n        vectorDataTyped\n        vectorImpl_Boxed\n        vectorImpl_Compressed\n        vectorImpl_Contiguous\n        vectorImpl_Dispatch\n        vectorImpl_Empty\n        vectorImpl_Shared\n        vectorImpl_Single\n        vectorSubrangeAccessor\n\n    PRIVATE_HEADERS\n        dataManagerAllocator.h\n\n    PRIVATE_CLASSES\n        dotGrapher\n        dynamicTopologicalSorter\n        inputAndOutputSpecsRegistry\n        maskRegistry\n        poolChainIndexer\n        scheduleInvalidator\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Spline Data Using Ts.TsTest_SplineData in Python\nDESCRIPTION: A Python representation of the spline data using the Ts.TsTest_SplineData class, defining the same parameters as the text format but in programmatic form with precise floating-point values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/tsTest_TsFramework.testenv/baseline/test_Baseline_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x1p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1p-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.4p+2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1p-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: Sampling Bézier Spline Points\nDESCRIPTION: A collection of coordinate pairs representing points sampled from a Bézier spline with specific parameters. Each pair shows x and y coordinates of a point on the curve.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_38\n\nLANGUAGE: plain text\nCODE:\n```\n    (0.15625000000140626, 1.5625)\n    (0.17418670654434032, 1.5457611083984375)\n    (0.1928100585950766, 1.5194091796875)\n    (0.21207427978642823, 1.4840850830078125)\n    (0.23193359375120848, 1.4404296875)\n    (0.27325439453230743, 1.3306884765625)\n    (0.3164062500008789, 1.1953125)\n    (0.3610229492194284, 1.0394287109375)\n    (0.4067382812504614, 0.8681640625)\n    (0.5, 0.5)\n    (0.5932617187495386, 0.1318359375)\n    (0.6389770507805715, -0.0394287109375)\n    (0.6835937499991211, -0.1953125)\n    (0.7267456054676926, -0.3306884765625)\n    (0.7680664062487916, -0.4404296875)\n    (0.7879257202135719, -0.4840850830078125)\n    (0.8071899414049235, -0.5194091796875)\n    (0.8258132934556597, -0.5457611083984375)\n    (0.8437499999985938, -0.5625)\n    (0.8609542846665388, -0.5689849853515625)\n    (0.877380371092308, -0.5645751953125)\n    (0.8929824829087147, -0.5486297607421875)\n    (0.9077148437485718, -0.5205078125)\n    (0.9215316772446926, -0.4795684814453125)\n    (0.9343872070298904, -0.4251708984375)\n    (0.9462356567369785, -0.3566741943359375)\n    (0.9570312499987695, -0.2734375)\n    (0.9752807617177145, -0.0601806640625)\n    (0.988769531249231, 0.2197265625)\n    (0.9971313476558243, 0.5714111328125)\n    (1, 1)\n```\n\n----------------------------------------\n\nTITLE: Character Rig Composition Structure\nDESCRIPTION: Displays the prim stack for the main character rig, showing inheritance from humanRig.sdf and defining child prims Anim and Rig.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpookyInheritsInSymmetricArmRig.testenv/baseline/compositionResults_TrickySpookyInheritsInSymmetricArmRig.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /CharRig\n    humanRig.sdf         /HumanRig\n\nChild names:\n     ['Anim', 'Rig']\n```\n\n----------------------------------------\n\nTITLE: Representing USD File Loading Action\nDESCRIPTION: This line represents the action of loading the `root.sdf` layer file, located in the `RelativePathPayloads` directory, using a USD tool or process. This action initiates the scene composition, resolving references and payloads defined within the specified root layer and its sublayers, as detailed in the subsequent output sections (Layer Stack, Prim Stack).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_RelativePathPayloads.testenv/baseline/compositionResults_RelativePathPayloads.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLoading @RelativePathPayloads/root.sdf@\n```\n\n----------------------------------------\n\nTITLE: Handling NDEBUG Flag for Unit Tests in CMake Build Configurations\nDESCRIPTION: Removes the NDEBUG flag from various build configurations to ensure assert calls in unit tests remain active. The NDEBUG flag is later reapplied only to the main library.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/external/boost/python/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (MSVC)\n    set(ndebug_flag \"/DNDEBUG\")\nelse()\n    set(ndebug_flag \"-DNDEBUG\")\nendif()\n\nforeach(config RELEASE RELWITHDEBINFO MINSIZEREL)\n    string(REPLACE\n        ${ndebug_flag} \"\"\n        CMAKE_CXX_FLAGS_${config} ${CMAKE_CXX_FLAGS_${config}}\n    )\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Defining a Capsule Primitive in OpenUSD\nDESCRIPTION: A complete definition of a Capsule primitive with radius 0.5 and height 2. The data includes full topology information with face vertex counts, indices, points (vertices), and normal vectors for a CatmullClark subdivision surface.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/geomUtil/testenv/testMeshGenerators/baseline/generatedMeshes_closed.txt#2025-04-23_snippet_0\n\nLANGUAGE: 3D geometry\nCODE:\n```\n1. Capsule\n----------\nradius = 0.5, height = 2, sweep = 360\n\nTopology:\n  (rightHanded, catmullClark, ([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]), ([2, 1, 0, 3, 2, 0, 4, 3, 0, 5, 4, 0, 6, 5, 0, 7, 6, 0, 8, 7, 0, 9, 8, 0, 10, 9, 0, 1, 10, 0, 1, 2, 12, 11, 2, 3, 13, 12, 3, 4, 14, 13, 4, 5, 15, 14, 5, 6, 16, 15, 6, 7, 17, 16, 7, 8, 18, 17, 8, 9, 19, 18, 9, 10, 20, 19, 10, 1, 11, 20, 11, 12, 22, 21, 12, 13, 23, 22, 13, 14, 24, 23, 14, 15, 25, 24, 15, 16, 26, 25, 16, 17, 27, 26, 17, 18, 28, 27, 18, 19, 29, 28, 19, 20, 30, 29, 20, 11, 21, 30, 21, 22, 32, 31, 22, 23, 33, 32, 23, 24, 34, 33, 24, 25, 35, 34, 25, 26, 36, 35, 26, 27, 37, 36, 27, 28, 38, 37, 28, 29, 39, 38, 29, 30, 40, 39, 30, 21, 31, 40, 31, 32, 42, 41, 32, 33, 43, 42, 33, 34, 44, 43, 34, 35, 45, 44, 35, 36, 46, 45, 36, 37, 47, 46, 37, 38, 48, 47, 38, 39, 49, 48, 39, 40, 50, 49, 40, 31, 41, 50, 41, 42, 52, 51, 42, 43, 53, 52, 43, 44, 54, 53, 44, 45, 55, 54, 45, 46, 56, 55, 46, 47, 57, 56, 47, 48, 58, 57, 48, 49, 59, 58, 49, 50, 60, 59, 50, 41, 51, 60, 51, 52, 62, 61, 52, 53, 63, 62, 53, 54, 64, 63, 54, 55, 65, 64, 55, 56, 66, 65, 56, 57, 67, 66, 57, 58, 68, 67, 58, 59, 69, 68, 59, 60, 70, 69, 60, 51, 61, 70, 61, 62, 72, 71, 62, 63, 73, 72, 63, 64, 74, 73, 64, 65, 75, 74, 65, 66, 76, 75, 66, 67, 77, 76, 67, 68, 78, 77, 68, 69, 79, 78, 69, 70, 80, 79, 70, 61, 71, 80, 71, 72, 81, 72, 73, 81, 73, 74, 81, 74, 75, 81, 75, 76, 81, 76, 77, 81, 77, 78, 81, 78, 79, 81, 79, 80, 81, 80, 71, 81]), ([]))\n\nPoints:\n  [(0, 0, -1.5), (0.19134171, 0, -1.4619398), (0.1547987, 0.11246783, -1.4619398), (0.059127837, 0.18197678, -1.4619398), (-0.05912787, 0.18197678, -1.4619398), (-0.15479872, 0.112467825, -1.4619398), (-0.19134171, -1.6727624e-8, -1.4619398), (-0.15479866, -0.11246789, -1.4619398), (-0.05912786, -0.18197678, -1.4619398), (0.059127867, -0.18197678, -1.4619398), (0.15479869, -0.11246785, -1.4619398), (0.35355338, 0, -1.3535534), (0.2860307, 0.20781346, -1.3535534), (0.109253995, 0.33624926, -1.3535534), (-0.10925406, 0.33624923, -1.3535534), (-0.2860307, 0.20781344, -1.3535534), (-0.35355338, -3.090862e-8, -1.3535534), (-0.28603062, -0.20781356, -1.3535534), (-0.10925404, -0.33624923, -1.3535534), (0.10925405, -0.33624923, -1.3535534), (0.28603068, -0.20781349, -1.3535534), (0.46193975, 0, -1.1913418), (0.3737171, 0.27152136, -1.1913418), (0.14274722, 0.43933082, -1.1913418), (-0.14274731, 0.4393308, -1.1913418), (-0.37371713, 0.27152133, -1.1913418), (-0.46193975, -4.0384055e-8, -1.1913418), (-0.373717, -0.2715215, -1.1913418), (-0.14274728, -0.4393308, -1.1913418), (0.1427473, -0.4393308, -1.1913418), (0.3737171, -0.2715214, -1.1913418), (0.5, 0, -1), (0.4045085, 0.29389262, -1), (0.15450849, 0.47552827, -1), (-0.15450858, 0.47552824, -1), (-0.40450853, 0.2938926, -1), (-0.5, -4.371139e-8, -1), (-0.40450838, -0.29389277, -1), (-0.15450855, -0.47552824, -1), (0.15450856, -0.47552824, -1), (0.40450847, -0.29389265, -1), (0.5, 0, 1), (0.4045085, 0.29389262, 1), (0.15450849, 0.47552827, 1), (-0.15450858, 0.47552824, 1), (-0.40450853, 0.2938926, 1), (-0.5, -4.371139e-8, 1), (-0.40450838, -0.29389277, 1), (-0.15450855, -0.47552824, 1), (0.15450856, -0.47552824, 1), (0.40450847, -0.29389265, 1), (0.46193975, 0, 1.1913418), (0.3737171, 0.27152136, 1.1913418), (0.14274722, 0.43933082, 1.1913418), (-0.14274731, 0.4393308, 1.1913418), (-0.37371713, 0.27152133, 1.1913418), (-0.46193975, -4.0384055e-8, 1.1913418), (-0.373717, -0.2715215, 1.1913418), (-0.14274728, -0.4393308, 1.1913418), (0.1427473, -0.4393308, 1.1913418), (0.3737171, -0.2715214, 1.1913418), (0.35355338, 0, 1.3535534), (0.2860307, 0.20781346, 1.3535534), (0.109253995, 0.33624926, 1.3535534), (-0.10925406, 0.33624923, 1.3535534), (-0.2860307, 0.20781344, 1.3535534), (-0.35355338, -3.090862e-8, 1.3535534), (-0.28603062, -0.20781356, 1.3535534), (-0.10925404, -0.33624923, 1.3535534), (0.10925405, -0.33624923, 1.3535534), (0.28603068, -0.20781349, 1.3535534), (0.19134171, 0, 1.4619398), (0.1547987, 0.11246783, 1.4619398), (0.059127837, 0.18197678, 1.4619398), (-0.05912787, 0.18197678, 1.4619398), (-0.15479872, 0.112467825, 1.4619398), (-0.19134171, -1.6727624e-8, 1.4619398), (-0.15479866, -0.11246789, 1.4619398), (-0.05912786, -0.18197678, 1.4619398), (0.059127867, -0.18197678, 1.4619398), (0.15479869, -0.11246785, 1.4619398), (0, 0, 1.5)]\n\nNormals:\n  [(0, 0, -1), (0.38268343, 0, -0.9238795), (0.3095974, 0.22493567, -0.9238795), (0.118255675, 0.36395356, -0.9238795), (-0.11825574, 0.36395356, -0.9238795), (-0.30959743, 0.22493565, -0.9238795), (-0.38268343, -3.3455247e-8, -0.9238795), (-0.3095973, -0.22493578, -0.9238795), (-0.11825572, -0.36395356, -0.9238795), (0.118255734, -0.36395356, -0.9238795), (0.30959737, -0.2249357, -0.9238795), (0.70710677, 0, -0.70710677), (0.5720614, 0.4156269, -0.70710677), (0.21850799, 0.6724985, -0.70710677), (-0.21850812, 0.67249846, -0.70710677), (-0.5720614, 0.41562688, -0.70710677), (-0.70710677, -6.181724e-8, -0.70710677), (-0.57206124, -0.41562712, -0.70710677), (-0.21850808, -0.67249846, -0.70710677), (0.2185081, -0.67249846, -0.70710677), (0.57206136, -0.41562697, -0.70710677), (0.9238795, 0, -0.38268346), (0.7474342, 0.5430427, -0.38268346), (0.28549445, 0.87866163, -0.38268346), (-0.28549463, 0.8786616, -0.38268346), (-0.74743426, 0.54304266, -0.38268346), (-0.9238795, -8.076811e-8, -0.38268346), (-0.747434, -0.543043, -0.38268346), (-0.28549457, -0.8786616, -0.38268346), (0.2854946, -0.8786616, -0.38268346), (0.7474342, -0.5430428, -0.38268346), (1, 0, 0), (0.809017, 0.58778524, 0), (0.30901697, 0.95105654, 0), (-0.30901715, 0.9510565, 0), (-0.80901706, 0.5877852, 0), (-1, -8.742278e-8, 0), (-0.80901676, -0.58778554, 0), (-0.3090171, -0.9510565, 0), (0.30901712, -0.9510565, 0), (0.80901694, -0.5877853, 0), (1, 0, 0), (0.809017, 0.58778524, 0), (0.30901697, 0.95105654, 0), (-0.30901715, 0.9510565, 0), (-0.80901706, 0.5877852, 0), (-1, -8.742278e-8, 0), (-0.80901676, -0.58778554, 0), (-0.3090171, -0.9510565, 0), (0.30901712, -0.9510565, 0), (0.80901694, -0.5877853, 0), (0.9238795, 0, 0.38268346), (0.7474342, 0.5430427, 0.38268346), (0.28549445, 0.87866163, 0.38268346), (-0.28549463, 0.8786616, 0.38268346), (-0.74743426, 0.54304266, 0.38268346), (-0.9238795, -8.076811e-8, 0.38268346), (-0.747434, -0.543043, 0.38268346), (-0.28549457, -0.8786616, 0.38268346), (0.2854946, -0.8786616, 0.38268346), (0.7474342, -0.5430428, 0.38268346), (0.70710677, 0, 0.70710677), (0.5720614, 0.4156269, 0.70710677), (0.21850799, 0.6724985, 0.70710677), (-0.21850812, 0.67249846, 0.70710677), (-0.5720614, 0.41562688, 0.70710677), (-0.70710677, -6.181724e-8, 0.70710677), (-0.57206124, -0.41562712, 0.70710677), (-0.21850808, -0.67249846, 0.70710677), (0.2185081, -0.67249846, 0.70710677), (0.57206136, -0.41562697, 0.70710677), (0.38268343, 0, 0.9238795), (0.3095974, 0.22493567, 0.9238795), (0.118255675, 0.36395356, 0.9238795), (-0.11825574, 0.36395356, 0.9238795), (-0.30959743, 0.22493565, 0.9238795), (-0.38268343, -3.3455247e-8, 0.9238795), (-0.3095973, -0.22493578, 0.9238795), (-0.11825572, -0.36395356, 0.9238795), (0.118255734, -0.36395356, 0.9238795), (0.30959737, -0.2249357, 0.9238795), (0, 0, 1)]\n```\n\n----------------------------------------\n\nTITLE: Prim A Composition Result\nDESCRIPTION: Shows composition results for prim /A including variant selections and child prims.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantFallbackDrivingAuthoredVariant.testenv/baseline/compositionResults_TrickyVariantFallbackDrivingAuthoredVariant.txt#2025-04-23_snippet_1\n\nLANGUAGE: usda\nCODE:\n```\nPrim Stack:\n    root.sdf             /A\n    root.sdf             /A{vset1=fallback}\n    root.sdf             /A{vset2=authored}\n\nVariant Selections:\n    {vset1 = fallback}\n    {vset2 = authored}\n\nChild names:\n     ['vset2_authored_child']\n```\n\n----------------------------------------\n\nTITLE: Logging Detected Events with Start and End Times\nDESCRIPTION: This code snippet represents a log of detected events, showing the begin and end times for each event. The events are sequentially numbered and each spans a single time unit.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/trace/testenv/testTraceEventContainer.testenv/baseline/testTraceEventContainer-Run1-stdout.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nFound event\n    Begin: 72\n    End: 73\nFound event\n    Begin: 73\n    End: 74\nFound event\n    Begin: 74\n    End: 75\n...\nFound event\n    Begin: 29\n    End: 30\nFound event\n```\n\n----------------------------------------\n\nTITLE: Python Representation of Spline Data using TsTest_SplineData Class\nDESCRIPTION: A Python object representation of the same spline curve using the Ts.TsTest_SplineData class. It includes the spline settings, extrapolation methods, and knot points with precise floating-point values specified using hexadecimal notation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/tsTest_TsFramework.testenv/baseline/test_BaselineParamsFail_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTs.TsTest_SplineData(isHermite = False, preExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), postExtrapolation = Ts.TsTest_SplineData.Extrapolation(method = Ts.TsTest_SplineData.ExtrapHeld), knots = [Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1p+0'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+0'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x1p+0'), preLen = float.fromhex('0x0p+0'), postLen = float.fromhex('0x1p-1'), preAuto = False, postAuto = False), Ts.TsTest_SplineData.Knot(time = float.fromhex('0x1.4p+2'), nextSegInterpMethod = Ts.TsTest_SplineData.InterpCurve, value = float.fromhex('0x1p+1'), preSlope = float.fromhex('0x0p+0'), postSlope = float.fromhex('0x0p+0'), preLen = float.fromhex('0x1p-1'), postLen = float.fromhex('0x0p+0'), preAuto = False, postAuto = False)])\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Page\nDESCRIPTION: RST formatted documentation page containing links to OpenUSD presentations, conference materials, videos and example assets. Includes nested section headers, tables of contents, and image panels.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/dl_downloads.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: rolesAndUtils.rst\n\n====================\nDownloads and Videos\n====================\n\n.. contents:: Table of Contents\n    :local:\n    :depth: 2\n    \nPresentations\n=============\n\n| `The State and Future of USD Animation Characters, Sept 2024 <https://openusd.org/files/USDAnimatedCharactersMSF.pdf>`__ (`Recording also available <https://tools.metaverse-standards.org/documents/f/44069>`__, must be a member of the Metaverse Standards Forum to access)\n| `OpenExec, Oct 2024 <https://openusd.org/files/OpenExecASWF.pdf>`__ (`Recording also available <https://lf-aswf.atlassian.net/wiki/spaces/WGUSD/pages/11274066/Presentations#OpenExec-Update-2024-(October-23%2C-2024>`__)\n```\n\n----------------------------------------\n\nTITLE: USD Layer Stack Composition Output\nDESCRIPTION: Shows the composition of USD layers including root.sdf and model.sdf with variant selections and property stacks for prim /A\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyVariantWeakerSelection.testenv/baseline/compositionResults_TrickyVariantWeakerSelection.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLoading @TrickyVariantWeakerSelection/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </A>\n\nPrim Stack:\n    root.sdf             /A\n    root.sdf             /A{v=v2}\n    model.sdf            /A\n    model.sdf            /A{v=v2}\n\nVariant Selections:\n    {v = v2}\n\nProperty names:\n     ['v2']\n\nProperty stacks:\n/A.v2:\n    root.sdf             /A{v=v2}.v2\n    model.sdf            /A{v=v2}.v2\n```\n\n----------------------------------------\n\nTITLE: Implementing ComposeFieldsForFileFormatArguments with Attribute Defaults\nDESCRIPTION: C++ implementation of ComposeFieldsForFileFormatArguments that uses uniform attribute defaults instead of metadata fields to compute file format arguments.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/dynamicFileFormat.md#2025-04-23_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nvoid MyDynamicFileFormat::ComposeFieldsForFileFormatArguments(\n    const std::string& assetPath, \n    const PcpDynamicFileFormatContext& context,\n    FileFormatArguments* args,\n    VtValue *dependencyContextData) const\n{\n    static const TfToken dynamicNameToken(\"dynamicName\");\n    VtValue dynamicNameValue;\n    if (context.ComposeAttributeDefaultValue(dynamicNameToken, &dynamicNameValue)) {\n        (*args)[dynamicNameToken] = TfStringify(dynamicNameValue);\n    }\n\n    static const TfToken dynamicNumberToken(\"dynamicNumber\");\n    static const TfToken isPositiveToken(\"isPositive\");\n    VtValue dynamicNumberValue;\n    if (context.ComposeAttributeDefaultValue(dynamicNumberToken, &dynamicNumberValue)) {\n        if (dynamicNumberValue.IsHolding<int>() &&\n            dynamicNumberValue.UncheckedGet<int>() > 0) {\n            (*args)[isPositiveToken] = \"true\";\n        } else {\n            (*args)[isPositiveToken] = \"false\";\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Subdirectory List in CMake\nDESCRIPTION: This snippet defines a CMake variable named `DIRS` that holds a list of subdirectory names. These directories represent various components of the project, such as USD imaging modules (usdImaging, usdImagingGL, etc.), utilities (usdAppUtils, usdviewq), and output directories (bin, plugin). This variable is used later to systematically include these components in the build.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(DIRS\n    usdImaging\n    usdImagingGL\n    usdProcImaging\n    usdRiPxrImaging\n    usdSkelImaging\n    usdVolImaging\n    usdAppUtils\n    usdviewq\n    bin\n    plugin\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Boost Python Path Prefix and Package Name in CMake\nDESCRIPTION: Defines the package prefix path and name for the Boost Python library in the OpenUSD project structure.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/external/boost/python/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/external/boost)\nset(PXR_PACKAGE python)\n```\n\n----------------------------------------\n\nTITLE: USD Composition Error Log for /Model_Renamed/B (Text)\nDESCRIPTION: Reports an error during USD composition for the prim path '/Model_Renamed/B'. Similar to the error for '/Model_Renamed', it states that the layer 'TrickyInheritsAndRelocatesToNewRootPrim/root.sdf' has an invalid opinion at the relocation source path '/Group/Model', which will be ignored.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickyInheritsAndRelocatesToNewRootPrim.testenv/baseline/compositionErrors_TrickyInheritsAndRelocatesToNewRootPrim.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nErrors while composing </Model_Renamed/B>\n\nThe layer @TrickyInheritsAndRelocatesToNewRootPrim/root.sdf@ has an invalid opinion at the relocation source path </Group/Model>, which will be ignored.\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition Result for /AddRefs2\nDESCRIPTION: Details the composition results for the prim `/AddRefs2`. The Prim Stack shows `sub_48tcps.sdf` as the strongest layer providing the prim definition, followed by `base.sdf` and contributions from `ref.sdf`. It includes four references to `/Ref` with different time offsets and scales compared to `/AddRefs1`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ReferenceListOpsWithOffsets.testenv/baseline/compositionResults_ReferenceListOpsWithOffsets.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </AddRefs2>\n\nPrim Stack:\n    sub_48tcps.sdf       /AddRefs2\n    base.sdf             /AddRefs2\n    ref.sdf              /Ref\n    ref.sdf              /Ref\n    ref.sdf              /Ref\n    ref.sdf              /Ref\n\nTime Offsets:\n    root.sdf             /AddRefs2       root       (offset=0.00, scale=1.00)\n        sub.sdf                          sublayer   (offset=10.00, scale=2.00)\n        sub_48tcps.sdf                   sublayer   (offset=0.00, scale=0.50)\n    ref.sdf              /Ref            reference  (offset=100.00, scale=1.00)\n    ref.sdf              /Ref            reference  (offset=5.00, scale=2.00)\n    ref.sdf              /Ref            reference  (offset=100.00, scale=1.00)\n    ref.sdf              /Ref            reference  (offset=0.00, scale=1.00)\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </_X> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </_X>. The prim stack originates solely from /_X in 'root.sdf'. The resolved child prim names are '_Y' and 'B'. This prim likely serves as an inheritance source.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </_X>\n\nPrim Stack:\n    root.sdf             /_X\n\nChild names:\n     ['_Y', 'B']\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Metadata Test for USD Stitch Clips in CMake\nDESCRIPTION: Sets up a test case for usdstitchclips using template metadata, specifying start and end time codes, active offset, stride, and template path.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdstitchclips/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testStitchClipsTemplate\n    DEST testUsdStitchClipsTemplate1\n)\n\npxr_register_test(testUsdStitchClipsTemplate1\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdstitchclips --noComment --templateMetadata --startTimeCode 101 --endTimeCode 104 --activeOffset 0.3 --stride 1 --templatePath p.#.usd --clipPath /World/fx/Particles_Splash/points --out result.usda p.101.usda p.102.usda p.103.usda p.104.usda\"\n    EXPECTED_RETURN_CODE 0\n    DIFF_COMPARE result.usda result.topology.usda\n)\n```\n\n----------------------------------------\n\nTITLE: Composing /CharRig/Anim Prim in USD\nDESCRIPTION: Details the composition of the prim </CharRig/Anim> from `root.sdf`. It shows the prim stack and its child 'Path'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorOpinionAtRelocationSource.testenv/baseline/compositionResults_ErrorOpinionAtRelocationSource.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </CharRig/Anim>\n\nPrim Stack:\n    root.sdf             /CharRig/Anim\n\nChild names:\n     ['Path']\n```\n\n----------------------------------------\n\nTITLE: Limited Bottom-Up Directory Walk Output\nDESCRIPTION: Output showing a bottom-up directory walk that stops at a specific directory (a/b/c/d).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/testenv/baseline/TfFileUtils/non-specific/TestTfWalkDirs-log.txt#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n('a/b/c/d/e/f/g', [], ['fourteen', 'gator', 'thirteen'])\n('a/b/c/d/e/f/h', [], ['fifteen', 'hippo', 'sixteen'])\n('a/b/c/d/e/f/i', [], ['eighteen', 'igloo', 'seventeen'])\n('a/b/c/d/e/f', ['g', 'h', 'i'], ['eleven', 'fish', 'twelve'])\n('a/b/c/d/e', ['f'], ['Eskimo', 'Fortune', 'Garbage', 'elephant', 'nine', 'ten'])\n('a/b/c/d', ['e'], ['cycle_to_b', 'dog', 'eight', 'seven'])\n```\n\n----------------------------------------\n\nTITLE: Displaying USD Composition Results for Prim </Root>\nDESCRIPTION: This section shows the composition results for the prim </Root>. The 'Prim Stack' lists multiple layers contributing opinions to the root prim. The 'Time Offsets' section shows the hierarchical application of time scales and offsets originating from the root layer (session.sdf) and cascading down through its sublayers, affecting any time-sampled data within those layers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer4.txt#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nResults for composing </Root>\n\nPrim Stack:\n    session.sdf          /Root\n    sess_s.sdf           /Root\n    sess_s_48tcps.sdf    /Root\n    sess_s_24tcps_12fps.sdf /Root\n    sess_s_12fps.sdf     /Root\n    root_12fps.sdf       /Root\n\nTime Offsets:\n    session.sdf          /Root           root       (offset=0.00, scale=1.00)\n        session.sdf                      sublayer   (offset=0.00, scale=0.50)\n        sess_s.sdf                       sublayer   (offset=5.00, scale=1.00)\n        sess_s_48tcps.sdf                sublayer   (offset=5.00, scale=0.50)\n        sess_s_24tcps_12fps.sdf          sublayer   (offset=5.00, scale=1.00)\n        sess_s_12fps.sdf                 sublayer   (offset=5.00, scale=2.00)\n        s.sdf                            sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=4.00)\n        s_48tcps.sdf                     sublayer   (offset=10.00, scale=0.50)\n        ss.sdf                           sublayer   (offset=15.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=15.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=15.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=15.00, scale=4.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=10.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=20.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=20.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=20.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=20.00, scale=4.00)\n        s_12fps.sdf                      sublayer   (offset=10.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=2.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=1.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=2.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=4.00)\n```\n\n----------------------------------------\n\nTITLE: Displaying Effective Layer Stack\nDESCRIPTION: Shows the effective layer stack involved in the composition after loading the initial file. In this simple case, only the `root.sdf` layer is listed as contributing directly at this stage, although other layers will be pulled in via composition arcs.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicPayloadDiamond.testenv/baseline/compositionResults_BasicPayloadDiamond.txt#2025-04-23_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Installing testInvocationErrors Test Directory with CMake\nDESCRIPTION: Uses the `pxr_install_test_dir` CMake function to install a test environment. It copies the contents of the source directory `testenv/testInvocationErrors` into the build's test installation location, naming the destination directory `testInvocationErrorInvalidExtension`. This prepares the files needed for tests related to invocation errors.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdfixbrokenpixarschemas/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testInvocationErrors\n    DEST testInvocationErrorInvalidExtension\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Building of Examples and Documentation in OpenUSD CMake\nDESCRIPTION: This CMake code snippet conditionally adds subdirectories for building examples and documentation based on the PXR_BUILD_EXAMPLES and PXR_BUILD_DOCUMENTATION flags. It allows for flexible build configurations in the OpenUSD project.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/extras/imaging/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (PXR_BUILD_EXAMPLES)\n    add_subdirectory(examples)\nendif()\nif (PXR_BUILD_DOCUMENTATION)\n    add_subdirectory(docs)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining OpenUSD Scene Graph Hierarchy\nDESCRIPTION: This snippet illustrates the structure of an OpenUSD scene graph, including prims with different types and properties. It shows a root scope, child groups, components, and a subcomponent with their respective kinds and attributes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdtree/testenv/testUsdTreePayload/baseline/output_unloaded.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\n/\n `--root [def Scope] (kind = assembly)\n     |--child1 [def] (kind = group)\n     `--child2 [def Xform] (kind = group)\n         |--subchild2a [def Xform] (kind = component)\n         |   `--subgrandchild2a1 [def Cube] (kind = subcomponent)\n         `--subchild2b [def Xform] (active = false, kind = component)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Semantic Label Inheritance in USD\nDESCRIPTION: This snippet illustrates the inheritance of semantic labels in a USD scene. It shows how labels are accumulated through the hierarchy, creating both direct and inherited labels for each prim.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdSemantics/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: USD\nCODE:\n```\ndef Xform \"OfficeBookshelf\" (apiSchemas = [\"SemanticsLabelsAPI:category\"])\n{\n    token[] semantics:labels:category = [\"furniture\", \"bookcase\"]\n    def Xform \"TopShelf\" (apiSchemas = [\"SemanticsLabelsAPI:category\"])\n    {\n        token[] semantics:labels:category = [\"shelf\"]\n        def Xform \"Screw\" (apiSchemas = [\"SemanticsLabelsAPI:category\"])\n        {\n            token[] semantics:labels:category = [\"screw\", \"hardware\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: USD Layer Stack and Composition Analysis\nDESCRIPTION: Displays the composition structure of a USD file, showing layer stacks, prim hierarchies, and variant selections. Demonstrates how payloads and references are resolved across different layers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpRegressionBugs_bug74847.testenv/baseline/compositionResults_bug74847.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLoading @bug74847/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </A>\n\nPrim Stack:\n    root.sdf             /A\n    payload.sdf          /A\n\nChild names:\n     ['B']\n\n------------------------------------------------------------------------\nResults for composing </A/B>\n\nPrim Stack:\n    payload.sdf          /A/B\n    ref.sdf              /A\n\nChild names:\n     ['B']\n\n------------------------------------------------------------------------\nResults for composing </A/B/B>\n\nPrim Stack:\n    ref.sdf              /A/B\n    ref.sdf              /A/B{deformable=off}\n\nVariant Selections:\n    {deformable = off}\n```\n\n----------------------------------------\n\nTITLE: Implementing MyDynamicFileFormat Class in C++\nDESCRIPTION: Defines a custom SdfFileFormat subclass called MyDynamicFileFormat. It includes required overrides for CanRead and Read methods, as well as a protected constructor.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/dynamicFileFormat.md#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nclass MyDynamicFileFormat : public SdfFileFormat\n{\npublic:\n    // Required SdfFileFormat overrides.\n    bool CanRead(const std::string &file) const override;\n    bool Read(SdfLayer *layer,\n              const std::string& resolvedPath,\n              bool metadataOnly) const override;\n\nprotected:\n    SDF_FILE_FORMAT_FACTORY_ACCESS;\n\n    virtual ~MyDynamicFileFormat();\n    MyDynamicFileFormat() : \n        SdfFileFormat(\n            TfToken(\"MyDynamicFileFormat\"), // formatId\n            TfToken(\"1.0\"), // versionString\n            TfToken(\"usd\"), // target\n            \"mydynamicfile\") // extension\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Schema Domains in reStructuredText\nDESCRIPTION: This reStructuredText code creates a table of contents that links to documentation for three OpenUSD schema domains: usdLux, usdUI, and usdVol. The toctree directive with maxdepth:2 ensures the TOC doesn't go too deep into nested sections.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n##############\nSchema Domains\n##############\n\n.. toctree::\n   :maxdepth: 2\n\n   usdLux/usdLux_toc\n   usdUI/usdUI_toc\n   usdVol/usdVol_toc\n```\n\n----------------------------------------\n\nTITLE: Configuring hdPrman Test Build in CMake\nDESCRIPTION: Sets up a test build for hdPrman except on static Windows builds due to symbol visibility issues. The test links against necessary libraries including cameraUtil, hdPrman, hd, usd, and RenderMan.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/hdPrman/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32 AND NOT BUILD_SHARED_LIBS)\n    # XXX: Temporarily disable this test on static Windows builds\n    #      due to symbol visibility issues.\nelse()\n    pxr_build_test(testHdPrman\n        LIBRARIES\n            cameraUtil\n            hdPrman\n            hd\n            usd\n            usdImaging\n            usdRender\n            ${PXRCORE_LIBRARY}\n            ${PRMAN_LIBRARY}\n        CPPFILES\n            testenv/testHdPrman.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Logging Status and Warning Messages from Multiple Delegates\nDESCRIPTION: Log output showing status and warning messages from delegate_1 and delegate_2. The log format follows [delegate_name]: message_type issued pattern.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/testenv/baseline/TfDelegate/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: log\nCODE:\n```\n[delegate_1]: Status issued\n[delegate_1]: Warning issued\n[delegate_1]: Status issued\n[delegate_2]: Status issued\n[delegate_1]: Warning issued\n[delegate_2]: Warning issued\n[delegate_1]: Status issued\n[delegate_1]: Warning issued\n```\n\n----------------------------------------\n\nTITLE: Displaying Local Table of Contents in RST Document\nDESCRIPTION: Inserts a local table of contents for the RST document, improving navigation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_renderers.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. contents:: :local:\n```\n\n----------------------------------------\n\nTITLE: Adding MaterialX Support to hdPrman in CMake\nDESCRIPTION: Conditionally adds MaterialX support libraries and classes if PXR_ENABLE_MATERIALX_SUPPORT is enabled. Additionally includes OSL support if enabled, with optional shader installation directory configuration.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/hdPrman/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(optionalIncludeDirs \"\")\nset(optionalPublicClasses \"\")\nif (${PXR_ENABLE_MATERIALX_SUPPORT})\n    list(APPEND optionalLibs\n        MaterialXCore\n        MaterialXFormat\n        MaterialXGenShader\n        MaterialXGenOsl\n        MaterialXRender\n        hdMtlx\n    )\n    list(APPEND optionalPublicClasses matfiltMaterialX)\n\n    if (${PXR_ENABLE_OSL_SUPPORT})\n        if (DEFINED OSL_SHADER_INSTALL_DIR)\n            add_compile_definitions(\n              OSL_SHADER_INSTALL_DIR=\\\"${OSL_SHADER_INSTALL_DIR}\\\"\n            )\n        endif()\n\n        list(APPEND optionalLibs ${OSL_COMP_LIBRARY})\n        list(APPEND optionalIncludeDirs ${OSL_INCLUDE_DIR})\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </_X/B/C> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </_X/B/C>. The prim stack contributions come from /Ref/C and /_G within 'ref.sdf'. The resolved child prim names are '_Z' and 'D'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </_X/B/C>\n\nPrim Stack:\n    ref.sdf              /Ref/C\n    ref.sdf              /_G\n\nChild names:\n     ['_Z', 'D']\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenUSD ts Library Tests\nDESCRIPTION: Configures and registers various test cases for the ts library, including unit tests and integration tests. Sets up test environments and comparison criteria.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npxr_build_test(\n    testTsThreadedCOW\n    CPPFILES\n        testenv/testTsThreadedCOW.cpp\n    LIBRARIES\n        ts\n        tf\n)\n\npxr_register_test(\n    testTsSplineSampling\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTsSplineSampling\"\n    DIFF_COMPARE testTsSplineSampling.txt\n)\n```\n\n----------------------------------------\n\nTITLE: Defining ShaderSdrCompliance Validator\nDESCRIPTION: Documentation for a validator that ensures shader prim input types conform to their appropriate SDF types in the respective SDR shader definition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n[usdShadeValidators:ShaderSdrCompliance]:\n\tDoc: Shader prim's input types must be conforming to their appropriate sdf types in the respective sdr shader.\n\tKeywords: UsdShadeValidators\n\tSchemaTypes: UsdShadeShader\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Human-Readable Spline Configuration in OpenUSD\nDESCRIPTION: A text-based representation of a spline configuration specifying interpolation method, extrapolation behavior, and knot points with their properties including time, value, slopes, and length parameters.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/tsTest_MayapyFramework.testenv/baseline/test_Baseline_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 1.000000, preLen 0.000000, postLen 0.500000, auto false / false\n  5.000000: 2.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.500000, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Diff Tests for USDZ Files in CMake\nDESCRIPTION: Sets up tests to verify the usddiff tool's functionality when comparing USDZ files and their contents.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddiff/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testDiffToolIterateUsdz1\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usddiff a.usdz a.usdz\"\n    EXPECTED_RETURN_CODE 0\n    PRE_PATH\n        ${CMAKE_INSTALL_PREFIX}/bin\n)\n\n# ... more USDZ comparison tests ...\n```\n\n----------------------------------------\n\nTITLE: Model/D Prim Composition\nDESCRIPTION: Shows the prim stack for /Model/D including inherited and referenced layers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpecializesAndInherits.testenv/baseline/compositionResults_TrickySpecializesAndInherits.txt#2025-04-23_snippet_5\n\nLANGUAGE: usd\nCODE:\n```\nPrim Stack:\n    root.sdf             /Model/D\n    ref.sdf              /Ref/D\n```\n\n----------------------------------------\n\nTITLE: Analyzing Composition for /Parent/Child Prim (USD)\nDESCRIPTION: Details the composition results for the '/Parent/Child' prim. It shows that the prim's definition originates solely from the 'A.sdf' layer in this composed view.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorPermissionDenied.testenv/baseline/compositionResults_ErrorPermissionDenied.txt#2025-04-23_snippet_2\n\nLANGUAGE: usd\nCODE:\n```\nResults for composing </Parent/Child>\n\nPrim Stack:\n    A.sdf                /Parent/Child\n```\n\n----------------------------------------\n\nTITLE: Composing `/middleman` Prim in USD\nDESCRIPTION: Displays the composition results for the prim `/middleman`. Its stack includes `referencedMiddleman` and `implementation`. It defines the `referencedAttr` property, sourced from `/referencedMiddleman`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndVariants2.testenv/baseline/compositionResults_SpecializesAndVariants2.txt#2025-04-23_snippet_3\n\nLANGUAGE: usd\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </middleman>\n\nPrim Stack:\n    root.sdf             /middleman\n    root.sdf             /referencedMiddleman\n    root.sdf             /implementation\n\nProperty names:\n     ['referencedAttr']\n\nProperty stacks:\n/middleman.referencedAttr:\n    root.sdf             /referencedMiddleman.referencedAttr\n```\n\n----------------------------------------\n\nTITLE: Defining Filter Metadata Keys in USD\nDESCRIPTION: This snippet defines custom metadata keys for filtering USD prims. It includes keys for visibility, material binding, and purpose, which can be used to control how prims are processed or displayed in USD-compatible applications.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUtils/testenv/testUsdUtilsCreateNewUsdzPackage/baseline/contents_filter_metadata_keys.txt#2025-04-23_snippet_0\n\nLANGUAGE: USD\nCODE:\n```\n#usda 1.0\n(\n    \"This file defines the filter metadata keys used by Pixar.\"\n)\n\nover \"GLOBAL\" (\n    customData = {\n        string[] filterMetadataKeys = [\n            \"visibility\",\n            \"materialBinding\",\n            \"purpose\",\n        ]\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Build for USD Command-line Tools in CMake\nDESCRIPTION: Conditionally adds the 'bin' subdirectory to the build process based on the PXR_BUILD_USD_TOOLS flag. If the flag is OFF, command-line tools are skipped with a status message.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (PXR_BUILD_USD_TOOLS)\n    add_subdirectory(bin)\nelse()\n    message(STATUS \"Skipping commandline tools because PXR_BUILD_USD_TOOLS=OFF\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in Markdown\nDESCRIPTION: This snippet defines a table of contents for the documentation using Markdown syntax. It specifies the depth, local scope, and disables backlinks.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/ListAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n:depth: 2\n:local:\n:backlinks: none\n```\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /S3 in USD Scene\nDESCRIPTION: The composition results for the /S3 primitive, showing both the prim stack and time offsets. Similar to /S4, this prim has a simpler inheritance structure with only one prim in the stack (s_24tcps_12fps.sdf).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer1.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </S3>\n\nPrim Stack:\n    s_24tcps_12fps.sdf   /S3\n\nTime Offsets:\n    session_48tcps.sdf   /S3             root       (offset=0.00, scale=1.00)\n        sess_s.sdf                       sublayer   (offset=10.00, scale=4.00)\n        sess_s_48tcps.sdf                sublayer   (offset=10.00, scale=2.00)\n        sess_s_24tcps_12fps.sdf          sublayer   (offset=10.00, scale=4.00)\n        sess_s_12fps.sdf                 sublayer   (offset=10.00, scale=8.00)\n        root_24tcps_12fps.sdf            sublayer   (offset=0.00, scale=2.00)\n        s.sdf                            sublayer   (offset=20.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=60.00, scale=8.00)\n        ss_48tcps.sdf                    sublayer   (offset=60.00, scale=4.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=60.00, scale=8.00)\n```\n\n----------------------------------------\n\nTITLE: Initializing TsRegressionPreventer Settings in Python\nDESCRIPTION: This snippet defines the settings for a TsRegressionPreventer object, which includes flags and values for segment adjustments in both pre and post conditions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/NoopKeepStart_TsTestBaseline.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTsRegressionPreventer::SetResult:\n  adjusted: False\n  havePreSegment: False\n  preActiveAdjusted: False\n  preActiveAdjustedWidth: 0.000000\n  preOppositeAdjusted: False\n  preOppositeAdjustedWidth: 0.000000\n  havePostSegment: True\n  postActiveAdjusted: False\n  postActiveAdjustedWidth: 0.800000\n  postOppositeAdjusted: False\n  postOppositeAdjustedWidth: 0.800000\n```\n\n----------------------------------------\n\nTITLE: USD Layer Stack Analysis for /Group\nDESCRIPTION: Shows the composition results for the /Group prim, including layer stack, prim stack, variant selections, child prims and properties. Demonstrates standin variant selection and property inheritance.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TypicalReferenceToChargroup.testenv/baseline/compositionResults_TypicalReferenceToChargroup.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nLayer Stack:\n     root.sdf\n\nPrim Stack:\n    root.sdf             /Group\n    group.sdf            /Group\n    group.sdf            /Group{standin=sim}\n\nVariant Selections:\n    {standin = sim}\n\nChild names:\n     ['Model']\n\nProperty names:\n     ['standin_name']\n\nProperty stacks:\n/Group.standin_name:\n    group.sdf            /Group{standin=sim}.standin_name\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Tree Masked Test in CMake\nDESCRIPTION: Sets up a test for USD Tree with masking, flattening, attributes, and metadata options.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdtree/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdTreePayload\n    DEST testUsdTreeMasked\n)\n\npxr_register_test(testUsdTreeMasked\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdtree --flatten --attributes --metadata --mask /root/child1 input.usda\"\n    STDOUT_REDIRECT output_masked.txt\n    DIFF_COMPARE output_masked.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Composition Errors for </ConnectionToLocalClass/Instance_1>\nDESCRIPTION: This section displays error messages encountered during the composition of the USD prim </ConnectionToLocalClass/Instance_1>. The errors indicate problems with attribute connections defined in the layer '@ErrorInvalidInstanceTargetPath/root.sdf@'. Specifically, one connection targets a path outside the scope of the prim's inheritance, and another, defined within a class (</ConnectionToLocalClass/LocalClass>), improperly targets an instance attribute (</ConnectionToLocalClass/Instance_2.y>). Both invalid connections are ignored.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInvalidInstanceTargetPath.testenv/baseline/compositionErrors_ErrorInvalidInstanceTargetPath.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nErrors while composing </ConnectionToLocalClass/Instance_1>\n\nThe attribute connection </ConnectionToLocalClass/Instance_1.y> from </ConnectionToLocalClass/LocalClass.x> in layer @ErrorInvalidInstanceTargetPath/root.sdf@ refers to a path outside the scope of the inherit from </ConnectionToLocalClass/Instance_1>.  Ignoring.\nThe attribute connection </ConnectionToLocalClass/Instance_2.y> from </ConnectionToLocalClass/LocalClass.x> in layer @ErrorInvalidInstanceTargetPath/root.sdf@ is authored in a class but refers to an instance of that class.  Ignoring.\n```\n\n----------------------------------------\n\nTITLE: Analyzing OpenUSD Scene Layer Stack\nDESCRIPTION: Shows the initial layer stack loading and composition results for a character rig with variant selections and inheritance tests.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpookyVariantSelectionInClass.testenv/baseline/compositionResults_TrickySpookyVariantSelectionInClass.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLoading @TrickySpookyVariantSelectionInClass/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </Char>\n\nPrim Stack:\n    root.sdf             /Char\n    CharRig.sdf          /CharRig\n\nChild names:\n     ['Anim', 'Rig', 'InheritTest']\n```\n\n----------------------------------------\n\nTITLE: Spline Configuration Settings\nDESCRIPTION: Basic spline configuration defining interpolation type and extrapolation methods, along with knot points and their properties.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsRegressionPreventer.testenv/baseline/MoveStartLimitActive_TsTestBaseline.txt#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nSpline:\n  hermite false\n  preExtrap Held\n  postExtrap Held\nKnots:\n  0.400000: 0.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.000000, postLen 0.199994, auto false / false\n  1.000000: 1.000000, Curve, preSlope 0.000000, postSlope 0.000000, preLen 0.799994, postLen 0.000000, auto false / false\n```\n\n----------------------------------------\n\nTITLE: Time-Varying Semantic Labels in USD\nDESCRIPTION: This snippet demonstrates how semantic labels can vary over time in USD. It uses time samples to represent changing states of a Dog prim, showing transitions between different actions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdSemantics/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: USD\nCODE:\n```\ndef Xform \"Dog\" (\n    apiSchemas = [\"SemanticsLabelsAPI:state\"]\n)\n{\n    token[] semantics:labels:state.timeSamples = {\n        0 : [\"walking\"],\n        # Transition from walking to running at time code 100\n        100 : [\"running\"]\n        200 : [\"jumping\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in Markdown\nDESCRIPTION: This code snippet defines a table of contents for the documentation using Markdown syntax. It specifies the depth, local scope, and disables backlinks.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/VolumeLightAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{contents}\n:depth: 2\n:local:\n:backlinks: none\n```\n```\n\n----------------------------------------\n\nTITLE: Using usddiff to Compare USD Files\nDESCRIPTION: usddiff compares two USD files by running a diff program on the output of usdcat for each file. It takes two file paths as arguments and has options for flattening and other comparisons.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toolset.rst#2025-04-23_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nusddiff [-h] [--flatten] [--noeffect] [--nocomments] [--noattributes]\n        [--nometadata] [--noapis] [--nostage] [-f] [--view]\n        [--diff-program DIFF_PROGRAM]\n        file1 file2\n```\n\n----------------------------------------\n\nTITLE: Registering testMultipleFixer Test in CMake\nDESCRIPTION: Registers a Python test named `testMultipleFixer` using `pxr_register_test`. It runs `usdfixbrokenpixarschemas` on `test.usda`, enabling the backup feature (`--backup backup.usda`). A post-command copies the potentially modified `test.usda` to `test_Yup.usda`. The test then uses `DIFF_COMPARE` (an OpenUSD-specific CMake function/macro) to compare both `test_Yup.usda` and `backup.usda` against baseline files. It expects successful execution (return code 0) and cleans up generated output files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdfixbrokenpixarschemas/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testMultipleFixer\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdfixbrokenpixarschemas test.usda --backup backup.usda\"\n    POST_COMMAND \"${CMAKE_COMMAND} -E copy test.usda test_Yup.usda\"\n    DIFF_COMPARE test_Yup.usda\n    DIFF_COMPARE backup.usda\n    EXPECTED_RETURN_CODE 0\n    CLEAN_OUTPUT\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Collaborate Section Navigation in Sphinx Documentation\nDESCRIPTION: Sphinx toctree directive that configures the Collaborate section navigation, including links to GitHub source code, community forum, contribution guidelines, contributors list, and release schedule.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toc.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :hidden:\n   :caption: Collaborate\n\n   Source Code @ GitHub <https://github.com/PixarAnimationStudios/OpenUSD>\n   OpenUSD Forum <https://forum.openusd.org>\n   Contributing <contributing_to_usd>\n   Contributors <contributors>\n   Release Schedule <release_schedule>\n```\n\n----------------------------------------\n\nTITLE: USD Layer Stack and Composition Results\nDESCRIPTION: Detailed breakdown of USD composition results showing layer stacks, prim stacks, variant selections, child names, and property stacks for multiple prims. Demonstrates how properties and variants are resolved across different USD layers.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TypicalReferenceToRiggedModel.testenv/baseline/compositionResults_TypicalReferenceToRiggedModel.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLoading @TypicalReferenceToRiggedModel/root.sdf@\n\n------------------------------------------------------------------------\nLayer Stack:\n     root.sdf\n\n------------------------------------------------------------------------\nResults for composing </Model>\n\nPrim Stack:\n    root.sdf             /Model\n    root.sdf             /Class\n    mcat.sdf             /Model\n    mcat.sdf             /Class\n    mcat.sdf             /Model{pin=latest}\n    model_latest.sdf     /Model\n    model_latest.sdf     /Model{standin=render}\n    model_latest_payload.sdf /Model\n\nVariant Selections:\n    {pin = latest}\n    {standin = render}\n\nChild names:\n     ['Rig']\n\nProperty names:\n     ['standin_name', 'a']\n\nProperty stacks:\n/Model.a:\n    root.sdf             /Model.a\n    root.sdf             /Class.a\n    model_latest.sdf     /Model.a\n/Model.standin_name:\n    model_latest.sdf     /Model{standin=render}.standin_name\n\n------------------------------------------------------------------------\nResults for composing </Model/Rig>\n\nPrim Stack:\n    model_latest_payload.sdf /Model/Rig\n\n------------------------------------------------------------------------\nResults for composing </Class>\n\nPrim Stack:\n    root.sdf             /Class\n\nProperty names:\n     ['a']\n\nProperty stacks:\n/Class.a:\n    root.sdf             /Class.a\n```\n\n----------------------------------------\n\nTITLE: Configuring Test for Compressing USD with Creases (Discarding Subdivision)\nDESCRIPTION: Installs the test environment for 'testCreases' (reused) and registers a CMake test named 'testUsdCompressDiscardCreases'. This test executes the `usdcompress` command on 'MeshWithCreases.usda', outputting 'MeshWithCreasesCompressedDiscarded.usda' while discarding subdivision information (`--discard_subdivision 1`). It expects a return code of 0 and compares both the compressed USDA file and the resulting Draco file against predefined expected outputs to verify crease discarding.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdcompress/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# Checks that mesh creases are discarded (with --discard_subdivision 1).\npxr_install_test_dir(\n    SRC testenv/testCreases\n    DEST testUsdCompressDiscardCreases\n)\n\npxr_register_test(testUsdCompressDiscardCreases\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdcompress MeshWithCreases.usda -o MeshWithCreasesCompressedDiscarded.usda --discard_subdivision 1\"\n    EXPECTED_RETURN_CODE 0\n    DIFF_COMPARE MeshWithCreasesCompressedDiscarded.usda\n    DIFF_COMPARE MeshWithCreasesCompressedDiscarded.usda.draco/xform_bottomPanel.drc\n    PRE_PATH\n        ${CMAKE_INSTALL_PREFIX}/bin\n)\n```\n\n----------------------------------------\n\nTITLE: Reporting Inconsistent Value Types for Attributes - Plain Text\nDESCRIPTION: This text block details an error found when attribute specs for a property have different value types in various Sdf files within OpenUSD composition. It provides the property path, locations of the defining and conflicting specs, and explicitly states the value types in conflict (e.g., 'string' vs 'double'). The message concludes by noting that the conflicting spec is ignored. Utilized for validation and debugging in asset pipelines. Inputs are property and Sdf spec references; output is a plain error message. No dependencies or configuration options.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInconsistentProperties.testenv/baseline/compositionErrors_ErrorInconsistentProperties.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n------------------------------------------------------------------------\nErrors while composing </InconsistentValueType>\n\nThe attribute </InconsistentValueType.x> has specs with inconsistent value types.  The defining spec is @ErrorInconsistentProperties/ref.sdf@</InconsistentValType.x> with value type 'string'.  The conflicting spec is @ErrorInconsistentProperties/root.sdf@</InconsistentValueType.x> with value type 'double'.  The conflicting spec will be ignored.\n```\n\n----------------------------------------\n\nTITLE: Configuring Accessibility Information with UsdUI\nDESCRIPTION: Shows how to add accessibility information to a mesh using AccessibilityAPI schema. Demonstrates multiple namespaced accessibility triplets with labels, descriptions and priorities.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUI/userDoc/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: usda\nCODE:\n```\ndef Mesh \"Cube\" (\n    prepend apiSchemas = [\"AccessibilityAPI\"]\n) {\n    string accessibility:default:label = \"Regular cube\"\n    string accessibility:default:description = \"A plain featureless cube\"\n    token accessibility:default:priority = \"standard\"\n\n    string accessibility:size:label = \"Regular sized cube\"\n    string accessibility:size:description = \"A 4-meter featureless cube\"\n    token accessibility:size:priority = \"low\"\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition for /Pigeon/Rig/ToesRig Prim\nDESCRIPTION: This snippet shows the composition results for the /Pigeon/Rig/ToesRig prim, including its prim stack and child names.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpRegressionBugs_bug69932.testenv/baseline/compositionResults_bug69932.txt#2025-04-23_snippet_4\n\nLANGUAGE: USD\nCODE:\n```\nPrim Stack:\n    Pigeon_rig.sdf       /Pigeon/Rig/ToesRig\n    Pigeon_bodyrig.sdf   /CharRig/Rig/ToesRig\n\nChild names:\n     ['_Class_ToesRig', 'LToesRig']\n```\n\n----------------------------------------\n\nTITLE: Accessing Schema Properties in C++/Python\nDESCRIPTION: Illustrates the difference between 'Get' and 'Create' methods for accessing schema properties. GetPointsAttr() is threadsafe but may return an invalid attribute, while CreatePointsAttr() ensures a valid, typed definition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/commonIdioms.md#2025-04-23_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nGetPointsAttr()\nCreatePointsAttr()\n```\n\n----------------------------------------\n\nTITLE: Markdown Content Block Definition\nDESCRIPTION: Table of contents configuration block specifying depth, local scope, and backlink settings for the documentation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/NonboundableLightBase.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n:depth: 2\n:local:\n:backlinks: none\n```\n\n----------------------------------------\n\nTITLE: Configuring Test for Compressing USD with Creases\nDESCRIPTION: Installs the test environment for 'testCreases' and registers a CMake test named 'testUsdCompressCreases'. This test executes the `usdcompress` command on 'MeshWithCreases.usda', outputting 'MeshWithCreasesCompressed.usda'. It expects a return code of 0 and compares both the compressed USDA file and the resulting Draco file against predefined expected outputs to verify standard compression of meshes with creases.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdcompress/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Checks that mesh with creases is successfully compressed.\npxr_install_test_dir(\n    SRC testenv/testCreases\n    DEST testUsdCompressCreases\n)\n\npxr_register_test(testUsdCompressCreases\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdcompress MeshWithCreases.usda -o MeshWithCreasesCompressed.usda\"\n    EXPECTED_RETURN_CODE 0\n    DIFF_COMPARE MeshWithCreasesCompressed.usda\n    DIFF_COMPARE MeshWithCreasesCompressed.usda.draco/xform_bottomPanel.drc\n    PRE_PATH\n        ${CMAKE_INSTALL_PREFIX}/bin\n)\n```\n\n----------------------------------------\n\nTITLE: Overriding OpenUSD Plugin Path Environment Variable (CMake)\nDESCRIPTION: CMake command to override the default environment variable name used for locating OpenUSD plugins.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/BUILDING.md#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n-DPXR_OVERRIDE_PLUGINPATH_NAME=CUSTOM_USD_PLUGINPATHS\n```\n\n----------------------------------------\n\nTITLE: Publishing USD Packages to PyPI Test Server\nDESCRIPTION: Commands to extract the distribution files, install twine, and upload packages to the PyPI test server. This allows testing the upload process before publishing to the main PyPI repository.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/build_scripts/pypi/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nunzip dist.zip\npython3 -m pip install twine\npython3 -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*\n```\n\n----------------------------------------\n\nTITLE: Setting Project Prefix and Package Name (CMake)\nDESCRIPTION: Initializes CMake variables `PXR_PREFIX` and `PXR_PACKAGE` to define the project's imaging prefix and the specific package name (`hdEmbree`) being configured in this file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/plugin/hdEmbree/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE hdEmbree)\n```\n\n----------------------------------------\n\nTITLE: Registering CMake Test for Pcp ErrorInvalidTargetPath\nDESCRIPTION: Defines a CMake test named `testPcpMuseum_ErrorInvalidTargetPath` using `pxr_register_test`. It executes `testPcpCompositionResults` with the `--usd` flag and an `--errorFile` argument on the `ErrorInvalidTargetPath/root.sdf` file. This tests the handling of general invalid target path errors during composition. Standard output and the error file are compared against baseline files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testPcpMuseum_ErrorInvalidTargetPath\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd --errorFile compositionErrors_ErrorInvalidTargetPath.txt ErrorInvalidTargetPath/root.sdf\" \n    STDOUT_REDIRECT compositionResults_ErrorInvalidTargetPath.txt\n    DIFF_COMPARE compositionResults_ErrorInvalidTargetPath.txt compositionErrors_ErrorInvalidTargetPath.txt\n)\n```\n\n----------------------------------------\n\nTITLE: Reporting Inconsistent Variability for Attributes - Plain Text\nDESCRIPTION: This diagnostic text message describes a scenario where an attribute's variability (e.g., Uniform vs Varying) is in conflict between Sdf specs during OpenUSD property composition. It clearly lists both defining and conflicting specs, their respective variability types, and concludes by indicating the conflicting spec's variability will be disregarded. Serves as an error report for asset and pipeline maintainers. There are no input parameters or required dependencies. Outputs are structured error logs.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ErrorInconsistentProperties.testenv/baseline/compositionErrors_ErrorInconsistentProperties.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n------------------------------------------------------------------------\nErrors while composing </InconsistentVariability>\n\nThe attribute </InconsistentVariability.x> has specs with inconsistent variability.  The defining spec is @ErrorInconsistentProperties/ref.sdf@</InconsistentVar.x> with variability 'SdfVariabilityUniform'.  The conflicting spec is @ErrorInconsistentProperties/root.sdf@</InconsistentVariability.x> with variability 'SdfVariabilityVarying'.  The conflicting variability will be ignored.\n```\n\n----------------------------------------\n\nTITLE: Installing USD Wheel Package Locally\nDESCRIPTION: Command to install a locally built USD wheel package using pip without accessing the internet. This is used for testing packages before publishing them to PyPI.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/build_scripts/pypi/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install --no-index --find-links=file:///path/to/dist usd-core\n```\n\n----------------------------------------\n\nTITLE: Registering usdzip Test with Explicit Recursive Inputs in CMake\nDESCRIPTION: Registers a Python test named `testUsdZipInputFiles4` using `pxr_register_test`. The test executes the installed `usdzip` command to create an archive named `recursive_inputs.usdz` using explicitly listed files and a directory (`src/a.txt`, `src/b.png`, `src/sub`) as input. It expects the command to succeed (return code 0). No output comparison is specified.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdzip/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdZipInputFiles4\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdzip recursive_inputs.usdz src/a.txt src/b.png src/sub\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Tf Debug Tests with Environment Variables in CMake\nDESCRIPTION: Registers tests for TfDebug functionality with custom environment variables. Includes conditional compilation based on whether monolithic builds are enabled.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/tf/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT PXR_BUILD_MONOLITHIC)\npxr_register_test(TfDebugTestEnv\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testTf TfDebugTestEnv\"\n    ENV TF_DEBUG=\"FOO* FLAM_* FLAM -FOOFLIMFLAM TF_DISCOVERY_D*\"\n    STDOUT_REDIRECT debugTestEnv.out\n    DIFF_COMPARE debugTestEnv.out\n)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenUSD Plugin Prefix (CMake)\nDESCRIPTION: CMake command to set a custom prefix for OpenUSD shared libraries. This example sets the prefix to 'pxr' instead of the default 'lib'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/BUILDING.md#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n-DPXR_LIB_PREFIX=pxr\n```\n\n----------------------------------------\n\nTITLE: Configuring Light Filter Collections in USDA\nDESCRIPTION: Example showing how to configure a light filter to affect specific geometry using collection-based filtering, demonstrating filter linking to specific scene paths.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdLux/userDoc/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: usda\nCODE:\n```\ndef MyFilter \"MyFilter\"\n{\n    uniform bool collection:filterLink:includeRoot = 0\n    prepend rel collection:filterLink:includes = </World/BuildingA>\n    # ... other filter settings as needed ...\n}\n```\n\n----------------------------------------\n\nTITLE: USD File Using Uniform Attribute Defaults for Dynamic File Format\nDESCRIPTION: USD file demonstrating the usage of uniform attribute defaults with a dynamic file format. It includes a prim with references and a payload, and defines uniform attributes.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/dynamicFileFormat.md#2025-04-23_snippet_7\n\nLANGUAGE: USD\nCODE:\n```\n#usda 1.0\n\ndef \"Root\" (\n    references = </Params>\n    payload = @./dynamic.mydynamicfile@\n)\n{\n}\n\ndef \"Params\" (\n)\n{\n    uniform string dynamicName = \"Foo\"\n    uniform int dynamicNumber = 8\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GCC/Clang Compiler Options\nDESCRIPTION: Applies compiler-specific options for GNU and Clang compilers to hide symbols and inlines in C code for the HioAvif target.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/plugin/hioAvif/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_CXX_COMPILER_ID MATCHES \"GNU|Clang\")\n    if (TARGET hioAvif)\n        # Hide symbols and inlines in the C code\n        target_compile_options(hioAvif PRIVATE\n             $<$<COMPILE_LANGUAGE:C>:-fvisibility=hidden>)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Test Data Directory for ARKit Asset Test in CMake\nDESCRIPTION: Uses the `pxr_install_test_dir` custom CMake function to install the contents of the source directory `testenv/testUsdZipAsset` into the destination directory `testUsdZipARKitAsset` within the build/install test environment, likely for ARKit-specific tests.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdzip/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdZipAsset\n    DEST testUsdZipARKitAsset\n)\n```\n\n----------------------------------------\n\nTITLE: Loading USD Layer Stack\nDESCRIPTION: Shows the initial layer stack configuration with root.sdf as the primary layer.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TrickySpookyInheritsInSymmetricArmRig.testenv/baseline/compositionResults_TrickySpookyInheritsInSymmetricArmRig.txt#2025-04-23_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\nLoading @TrickySpookyInheritsInSymmetricArmRig/root.sdf@\n\nLayer Stack:\n     root.sdf\n```\n\n----------------------------------------\n\nTITLE: Accessing Prim Children in C++/Python\nDESCRIPTION: Demonstrates methods for accessing direct children of a UsdPrim. GetChildren() uses the canonical traversal predicate, while GetFilteredChildren() allows custom predicates.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/commonIdioms.md#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nUsdPrim::GetChildren()\nUsdPrim::GetFilteredChildren()\n```\n\n----------------------------------------\n\nTITLE: Listing Resource Files for OpenUSD Shader Schema\nDESCRIPTION: This snippet enumerates the resource files associated with the OpenUSD shader schema. These files likely contain the schema definitions, plugin information, and generated schema data.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdShade/generatedSchema.classes.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# Resource Files\ngeneratedSchema.usda\nplugInfo.json\nschema.usda:usdShade/schema.usda\n```\n\n----------------------------------------\n\nTITLE: Uninstanced USD Scene Description\nDESCRIPTION: Example of USD scene description without instancing, showing multiple car references in a parking lot scene.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/docs/instancing.md#2025-04-23_snippet_0\n\nLANGUAGE: USD\nCODE:\n```\n#usda 1.0\n\ndef \"ParkingLot\"\n{\n    def \"Car_1\" (references = @./Car.usd@</Car>)\n    {\n    }\n\n    def \"Car_2\" (references = @./Car.usd@</Car>)\n    {\n    }\n\n    # ...\n\n    def \"Car_n\" (references = @./Car.usd@</Van>)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StageMetadataChecker for Core USD\nDESCRIPTION: Documentation for a validator that ensures stages that can be consumed as referenceable assets have a valid 'defaultPrim' specified for proper referencing behavior.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/bin/usdchecker/testenv/testUsdChecker/baseline/arkitRules_validationFramework.txt#2025-04-23_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n[usdValidation:StageMetadataChecker]:\n\tDoc: Stages that can be consumed as referenceable assets must have a valid 'defaultPrim' specified.\n\tKeywords: UsdCoreValidators\n\tisSuite: False\n```\n\n----------------------------------------\n\nTITLE: Registering the rmanUsdValidators Test with Environment Setup in CMake\nDESCRIPTION: Registers the `testRmanUsdValidators` executable as a test using the `pxr_register_test` function. It defines the test command, expects a return code of 0, and sets the `RMANTREE` environment variable using the value of `RMANTREE_PATH` for the test execution environment. A preceding comment notes that `RMAN_SHADERPATH` might also need to be set externally.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/rmanUsdValidators/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Need to set RMANTREE and RMAN_SHADERPATH environment variable when running\n# tests\nget_filename_component(RMANTREE_PATH \"${RENDERMAN_INCLUDE_DIR}/..\" ABSOLUTE)\n\npxr_register_test(testRmanUsdValidators\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testRmanUsdValidators\"\n    EXPECTED_RETURN_CODE 0\n    ENV\n        RMANTREE=${RMANTREE_PATH}\n)\n```\n\n----------------------------------------\n\nTITLE: Logging Event Processing in Forward Order\nDESCRIPTION: This snippet shows the log output for processing events in forward order, from position 142 to 200. Each line represents a single event with its begin and end positions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/trace/testenv/testTraceEventContainer.testenv/baseline/testTraceEventContainer-Run1-stdout.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nFound event\n    Begin: 142\n    End: 143\nFound event\n    Begin: 143\n    End: 144\nFound event\n    Begin: 144\n    End: 145\n...\nFound event\n    Begin: 198\n    End: 199\nFound event\n    Begin: 199\n    End: 200\n```\n\n----------------------------------------\n\nTITLE: Encoding Thumbnail Preview in USDA\nDESCRIPTION: Example of encoding a default thumbnail preview using assetInfo dictionary in USDA format. This structure allows for future expansion of preview types and variations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_asset_previews.rst#2025-04-23_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\nassetInfo = {\n  dictionary previews = {\n      dictionary thumbnails = {\n          dictionary default = {\n              asset defaultImage = @chair_thumb.jpg@\n          }\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering HdSt Adaptive Basic Drawing Tests in CMake\nDESCRIPTION: Sets up multiple tests for HdSt basic drawing with adaptive refinement, various representation modes, lighting, and different refinement levels. Each test uses offscreen rendering and image comparison.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/CMakeLists.txt#2025-04-23_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdStBasicDrawing_Adaptive_lighting_lv1_hull\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdStBasicDrawing --offscreen --lighting --repr hull --refineLevel 1 --write testHdStBasicDrawing_adaptive_lighting_lv1_hull.png\"\n    IMAGE_DIFF_COMPARE\n        testHdStBasicDrawing_adaptive_lighting_lv1_hull.png\n    FAIL 1\n    FAIL_PERCENT 1\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    TESTENV testHdStBasicDrawing_Adaptive\n    ENV\n        HD_ENABLE_OPENSUBDIV3_ADAPTIVE=1\n        TF_DEBUG=HD_SAFE_MODE\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring HioOpenVDB Package Build Settings in CMake\nDESCRIPTION: Defines the core build configuration for the hioOpenVDB library, including package prefix setup, GPU support checking, and Windows-specific math definitions. Handles conditional Imath library linking and configures all necessary dependencies and components for the library build.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hioOpenVDB/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE hioOpenVDB)\n\nif (NOT ${PXR_BUILD_GPU_SUPPORT})\n    message(STATUS\n            \"Skipping ${PXR_PACKAGE} because PXR_BUILD_GPU_SUPPORT is OFF\")\n    return()\nendif()\n\nif (WIN32)\n    # OpenVDB uses constants from <cmath> that aren't available on\n    # Windows unless this is defined.\n    add_definitions(-D_USE_MATH_DEFINES)\nendif()\n\n# Use the import targets set by Imath's package config\nif (Imath_FOUND)\n    LIST(APPEND __VDB_IMATH_LIBS \"Imath::Imath\")\nelse()\n    LIST(APPEND __VDB_IMATH_LIBS ${OPENEXR_Half_LIBRARY})\nendif()\n\npxr_library(hioOpenVDB\n    LIBRARIES\n        ar\n        gf\n        hio\n        tf\n        usd\n        ${__VDB_IMATH_LIBS}\n        ${OPENVDB_LIBRARY}\n\n    INCLUDE_DIRS\n        ${OPENVDB_INCLUDE_DIR}\n        ${Boost_INCLUDE_DIRS}\n\n    PUBLIC_CLASSES\n        utils\n        vdbAssetInterface\n\n    PUBLIC_HEADERS\n        api.h\n\n    PRIVATE_CLASSES\n        debugCodes\n        vdbTextureData\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PSI/Sibling Prim\nDESCRIPTION: Shows the prim stack for the prim at path </PSI/Sibling>, defined directly in root.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PSI/Sibling>\n\nPrim Stack:\n    root.sdf             /PSI/Sibling\n```\n\n----------------------------------------\n\nTITLE: Light Filter Geometry Linking in USDA\nDESCRIPTION: Example showing how to configure a light filter to only affect specific geometry using filterLink collections.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: usda\nCODE:\n```\ndef MyFilter \"MyFilter\"\n{\n    uniform bool collection:filterLink:includeRoot = 0\n    prepend rel collection:filterLink:includes = </World/BuildingA>\n    # ... other filter settings as needed ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JS Library in CMake for OpenUSD\nDESCRIPTION: This snippet defines the 'js' library for the OpenUSD project, specifying its dependencies, public classes, and headers. It includes both public and private headers, with a focus on RapidJSON integration.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/js/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/base)\nset(PXR_PACKAGE js)\n\npxr_library(js\n    LIBRARIES\n        tf\n\n    PUBLIC_CLASSES\n        json\n        utils\n        value\n\n    PUBLIC_HEADERS\n        api.h\n        converter.h\n        types.h\n\n    PRIVATE_HEADERS\n        rapidjson/allocators.h\n        rapidjson/document.h\n        rapidjson/encodedstream.h\n        rapidjson/encodings.h\n        rapidjson/error/en.h\n        rapidjson/error/error.h\n        rapidjson/filereadstream.h\n        rapidjson/filewritestream.h\n        rapidjson/fwd.h\n        rapidjson/internal/biginteger.h\n        rapidjson/internal/diyfp.h\n        rapidjson/internal/dtoa.h\n        rapidjson/internal/ieee754.h\n        rapidjson/internal/itoa.h\n        rapidjson/internal/meta.h\n        rapidjson/internal/pow10.h\n        rapidjson/internal/regex.h\n        rapidjson/internal/stack.h\n        rapidjson/internal/strfunc.h\n        rapidjson/internal/strtod.h\n        rapidjson/internal/swap.h\n        rapidjson/istreamwrapper.h\n        rapidjson/memorybuffer.h\n        rapidjson/memorystream.h\n        rapidjson/msinttypes/inttypes.h\n        rapidjson/msinttypes/stdint.h\n        rapidjson/ostreamwrapper.h\n        rapidjson/pointer.h\n        rapidjson/prettywriter.h\n        rapidjson/rapidjson.h\n        rapidjson/reader.h\n        rapidjson/schema.h\n        rapidjson/stream.h\n        rapidjson/stringbuffer.h\n        rapidjson/writer.h\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Fine Sampling of Bezier Curve Knot Region\nDESCRIPTION: Test case showing high-precision sampling (0.5 time units) of a Bezier animation curve within a specific knot region [158.75, 164.25] to capture detailed curvature and intermediate values.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/testenv/testTsSplineSampling.testenv/baseline/testTsSplineSampling.txt#2025-04-23_snippet_75\n\nLANGUAGE: text\nCODE:\n```\nTest Case 150: SampleWithSources([158.75, 164.25], 45.4545, 17.3611, 0.5)\n0: (TsSourceKnotInterp)\n    (158.75, -3.6209645175359184)\n    (159.33730468589425, -4.347771882426931)\n    (159.60567344933264, -4.620192107328366)\n    (159.8128873576108, -4.764763836917713)\n    (159.96685427049485, -4.781994787828266)\n    (160.07548204775082, -4.672392676693319)\n    (160.1466785491448, -4.4364652201461645)\n    (160.18835163444288, -4.0747201348201)\n    (160.20840916341103, -3.587665137348416)\n    (160.21475899581543, -2.975807944364408)\n    (160.21796700999704, -1.3797178383925954)\n    (160.2306409113064, -0.39650035867137895)\n    (160.26123855511622, 0.7094884500289858)\n    (160.31766780119258, 1.9377408710752047)\n    (160.40783650930155, 3.2877491878339833)\n    (160.53965253920916, 4.759005683672028)\n    (160.72102375068152, 6.351002641956045)\n    (160.9598580034847, 8.06323234605274)\n    (161.26406315738473, 9.895187079328819)\n    (161.64154707214766, 11.846359125150988)\n    (162.1002176075396, 13.916240766885954)\n    (162.64798262332664, 16.104324287900422)\n    (163.2927499792748, 18.410101971561097)\n    (164.04242753515013, 20.833066101234685)\n    (164.25, 21.444269124851825)\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Skeleton Test Scripts\nDESCRIPTION: Registers Python test scripts for various USD Skeleton components including animation mapping, blending, skinning, and topology tests.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdSkel/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_test_scripts(\n    testenv/testUsdSkelAnimMapper.py\n    testenv/testUsdSkelAnimQuery.py \n    testenv/testUsdSkelBakeSkinning.py\n    testenv/testUsdSkelBindingAPI.py\n    testenv/testUsdSkelBlendShape.py\n    testenv/testUsdSkelCache.py\n    testenv/testUsdSkelRoot.py\n    testenv/testUsdSkelSkeletonQuery.py\n    testenv/testUsdSkelSkinningQuery.py\n    testenv/testUsdSkelTopology.py\n    testenv/testUsdSkelUtils.py\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring usdUtilsValidators Library in CMake\nDESCRIPTION: Sets up the build configuration for the usdUtilsValidators library, defining dependencies, public classes, headers, implementation files, and resource files. The library depends on tf, plug, sdf, usd, usdUtils, and usdValidation components.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/usdUtilsValidators/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usdValidation)\nset(PXR_PACKAGE usdUtilsValidators)\n\npxr_library(usdUtilsValidators\n    LIBRARIES\n        tf\n        plug\n        sdf\n        usd\n        usdUtils\n        usdValidation\n\n    PUBLIC_CLASSES\n        validatorTokens\n        \n    PUBLIC_HEADERS\n        api.h\n\n    CPPFILES\n        validators.cpp\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Project Variables in CMake\nDESCRIPTION: Sets the `PXR_PREFIX` variable to `pxr/usd` and the `PXR_PACKAGE` variable to `usd`. These variables are likely used downstream in the CMake build process to define paths or identify components related to the USD library.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdzip/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usd)\n```\n\n----------------------------------------\n\nTITLE: USD Path Pattern with Combined Predicates\nDESCRIPTION: Example of combining multiple predicate functions with boolean operators.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/collections_and_patterns.rst#2025-04-23_snippet_15\n\nLANGUAGE: usd\nCODE:\n```\n/standin*{hasAPI:MaterialBindingAPI and not (isa:Sphere or isa:Cube)}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing OpenUSD CMake Package\nDESCRIPTION: This snippet configures the CMake package for OpenUSD, generating a configuration file and setting up installation rules for the package and its targets.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(pxrConfig.cmake.in\n  \"${PROJECT_BINARY_DIR}/pxrConfig.cmake\" @ONLY)\ninstall(FILES\n  \"${PROJECT_BINARY_DIR}/pxrConfig.cmake\"\n  DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n)\n\ninstall(EXPORT pxrTargets DESTINATION \"cmake\")\n```\n\n----------------------------------------\n\nTITLE: Conditional USD Tools Build Configuration\nDESCRIPTION: Controls the build configuration for USD command-line tools based on the PXR_BUILD_USD_TOOLS flag. When enabled, builds the tools in the bin directory.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (PXR_BUILD_USD_TOOLS)\n    add_subdirectory(bin)\nelse()\n    message(STATUS \"Skipping commandline tools because PXR_BUILD_USD_TOOLS=OFF\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring usdGeom Library in CMake\nDESCRIPTION: Sets up the usdGeom library with its dependencies, includes, classes, and headers. It also configures Python modules and documentation files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdGeom/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usdGeom)\n\npxr_library(usdGeom\n    INCLUDE_SCHEMA_FILES\n\n    LIBRARIES\n        js\n        tf\n        plug\n        vt\n        sdf\n        trace\n        usd\n        work\n        ${TBB_tbb_LIBRARY}\n\n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n\n    PUBLIC_CLASSES\n        debugCodes\n        bboxCache\n        constraintTarget\n        xformCache\n        boundableComputeExtent\n        metrics\n        primvar\n        xformOp\n\n    PUBLIC_HEADERS\n        api.h\n\n\n    PRIVATE_CLASSES\n        samplingUtils\n\n    PYMODULE_CPPFILES\n        wrapBBoxCache.cpp\n        wrapConstraintTarget.cpp\n        wrapMetrics.cpp\n        wrapPrimvar.cpp\n        wrapXformCache.cpp\n        wrapXformOp.cpp\n\n    PYMODULE_FILES\n        __init__.py\n\n    DOXYGEN_FILES\n        overview.dox\n        snippets.dox\n        images/USDCurveBasisMatrix.png\n        images/USDCurveHydra.png\n        images/USDCurvePrimvars.png\n        images/USDTetMeshRightHanded.svg\n        images/USDTetMeshLeftHanded.svg\n        examples_usdGeom.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hydra ExtComp Dependency Sort Test Build in CMake\nDESCRIPTION: Configures the build for testing Hydra's extended computation dependency sorting. This test verifies the system for properly ordering dependent computations in the rendering pipeline.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hd/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testHdExtCompDependencySort\n   LIBRARIES\n       hd\n       sdf\n       tf\n\n   CPPFILES\n       testenv/testHdExtCompDependencySort.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Test Scripts\nDESCRIPTION: Configures Python test scripts for USD UI node graph and scene graph functionality testing.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUI/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_test_scripts(\n    testenv/testUsdUINodeGraphNode.py\n    testenv/testUsdUISceneGraphPrim.py\n)\n```\n\n----------------------------------------\n\nTITLE: Imath Library Configuration\nDESCRIPTION: Sets up Imath library dependencies using either modern CMake targets or legacy include/library paths depending on how Imath was found.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/plugin/hioOiio/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (Imath_FOUND)\n    set(__OIIO_IMATH_LIBS \"Imath::Imath\")\nelse()\n    set(__OIIO_IMATH_INCLUDE ${OPENEXR_INCLUDE_DIRS})\n    set(__OIIO_IMATH_LIBS ${OPENEXR_LIBRARIES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering UsdView Expression Variable Edits Test (Delegate) in CMake\nDESCRIPTION: This snippet registers a test for UsdView expression variable edits using a delegate. It specifies a Python command to run the test script, sets up image comparisons for different steps, defines failure thresholds, and sets an environment variable to disable scene index.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_32\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdviewExpressionVariableEdits_Delegate\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewExpressionVariableEdits.py test.usda\"\n    IMAGE_DIFF_COMPARE\n        start.png\n        step_1.png\n        step_2.png\n    FAIL 0.05\n    FAIL_PERCENT 0.03\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    ENV\n        USDIMAGINGGL_ENGINE_ENABLE_SCENE_INDEX=0\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Package Prefix and Name in CMake\nDESCRIPTION: These CMake commands set the `PXR_PREFIX` variable to define the base directory path (`pxr/imaging`) and the `PXR_PACKAGE` variable to specify the name (`hdPrmanLoader`) for the plugin being configured within the OpenUSD build system.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/plugin/hdPrmanLoader/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE hdPrmanLoader)\n```\n\n----------------------------------------\n\nTITLE: Registering Unit Tests with pxr_register_test Macro - CMake\nDESCRIPTION: These snippets demonstrate the use of the pxr_register_test macro in CMake to register unit and integration tests for USD utilities. Dependencies include CMake (>=3.x), and the pxr_register_test macro must be defined elsewhere. Command-line parameters specify the test executor, arguments, expected outputs (via DIFF_COMPARE), and return codes. Inputs are specified as test case names and test commands; outputs are expected diff files or return codes. This pattern enables modular and automated test orchestration in the OpenUSD project.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUtils/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsConditionalAbortDiagnosticDelegateCase11\n    PYTHON\n    COMMAND\n    \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsConditionalAbortDiagnosticDelegate case11\"\n    EXPECTED_RETURN_CODE 134\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsConditionalAbortDiagnosticDelegateCase11a\n    PYTHON\n    COMMAND\n    \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsConditionalAbortDiagnosticDelegate case11a\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsConditionalAbortDiagnosticDelegateCase12\n    PYTHON\n    COMMAND\n    \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsConditionalAbortDiagnosticDelegate case12\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsConditionalAbortDiagnosticDelegateCase12a\n    PYTHON\n    COMMAND\n    \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsConditionalAbortDiagnosticDelegate case12a\"\n    EXPECTED_RETURN_CODE 134\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsConditionalAbortDiagnosticDelegateCase13\n    PYTHON\n    COMMAND\n    \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsConditionalAbortDiagnosticDelegate case13\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsConditionalAbortDiagnosticDelegateCase13a\n    PYTHON\n    COMMAND\n    \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsConditionalAbortDiagnosticDelegate case13a\"\n    EXPECTED_RETURN_CODE 134\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsConditionalAbortDiagnosticDelegateCase14\n    PYTHON\n    COMMAND\n    \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsConditionalAbortDiagnosticDelegate case14\"\n    EXPECTED_RETURN_CODE 134\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsConditionalAbortDiagnosticDelegateCase14a\n    PYTHON\n    COMMAND\n    \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsConditionalAbortDiagnosticDelegate case14a\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsConditionalAbortDiagnosticDelegateCase15\n    PYTHON\n    COMMAND\n    \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsConditionalAbortDiagnosticDelegate case15\"\n    EXPECTED_RETURN_CODE 134\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsConditionalAbortDiagnosticDelegateCase16\n    PYTHON\n    COMMAND\n    \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsConditionalAbortDiagnosticDelegate case16\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsCoalescingDiagnosticDelegateCpp\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsCoalescingDiagnosticDelegateCpp\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsCreateNewARKitUsdzPackage\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsCreateNewUsdzPackage --check --arkit -l contents_arkit.txt package.usdz root.usd\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsCreateNewARKitUsdzPackageInPlace\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsCreateNewUsdzPackage --editLayersInPlace --expectedDirtyLayers flat.usda --check --arkit package_flat.usdz flat.usda -l contents_arkit_flat_in_place.txt\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsCreateNewUsdzPackage\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsCreateNewUsdzPackage --check -l contents.txt package.usdz root.usd\"\n    DIFF_COMPARE contents.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsCreateNewUsdzPackageContextDep\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsCreateNewUsdzPackage --check -l contents_usdz_context_dep_assets.txt usdzContextDepAssets.usdz usdzContextDepAssets/usdzContextDepAssets.usda\"\n    DIFF_COMPARE contents_usdz_context_dep_assets.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsCreateNewUsdzPackageFilterMetadataKeys\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsCreateNewUsdzPackage --check -l contents_filter_metadata_keys.txt filter_metadata_keys.usdz filterMetadataKeys/filter_metadata_keys.usda\"\n    DIFF_COMPARE contents_filter_metadata_keys.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsCreateNewUsdzPackageUdim\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsCreateNewUsdzPackage --check -l contents_udim.txt udim.usdz udim/root.usda\"\n    DIFF_COMPARE contents_udim.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsCreateNewUsdzPackageRemapClipsDir\n   PYTHON\n   COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsCreateNewUsdzPackage --check remapClipsDir.usdz remapClipsDir/root.usda -l contents_remap_clips_dir.txt\"\n   DIFF_COMPARE contents_remap_clips_dir.txt\n   EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsCreateNewUsdzPackageEditInPlace\n   PYTHON\n   COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsCreateNewUsdzPackage --editLayersInPlace --expectedDirtyLayers nestedUsdz/combined.usda --check combined.usdz nestedUsdz/combined.usda -l contents_nested_in_place.txt\"\n   DIFF_COMPARE contents_nested_in_place.txt\n   EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsDependencies\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsDependencies\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsDependenciesCustomResolver\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsDependenciesCustomResolver\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsDependencyExtractor1\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsDependencyExtractor ascii.usda ascii-usda.txt\"\n    DIFF_COMPARE ascii-usda.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsDependencyExtractor2\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsDependencyExtractor ascii.usd ascii-usd.txt\"\n    DIFF_COMPARE ascii-usd.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsDependencyExtractor3\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsDependencyExtractor crate.usdc crate-usdc.txt\"\n    DIFF_COMPARE crate-usdc.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsDependencyExtractor4\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsDependencyExtractor crate.usd crate-usd.txt\"\n    DIFF_COMPARE crate-usd.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsDependencyExtractor5\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsDependencyExtractor --open-as-anon anon.usda anon.txt\"\n    DIFF_COMPARE anon.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsDependencyExtractor6\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsDependencyExtractor udims/root.usda udims.txt\"\n    DIFF_COMPARE udims.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsDependencyExtractor7\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsDependencyExtractor --resolve-udim-paths udims/root.usda udims-resolved.txt\"\n    DIFF_COMPARE udims-resolved.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsFlattenLayerStack\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsFlattenLayerStack\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsIntrospection\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsIntrospection\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsLocalizeAsset\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsLocalizeAsset default/root.usda default_localized -l contents_default.txt\"\n    DIFF_COMPARE contents_default.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsLocalizeAssetUdims\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsLocalizeAsset udim/root.usda udim_localized -l contents_udim.txt\"\n    DIFF_COMPARE contents_udim.txt\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsModifyAssetPaths\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsModifyAssetPaths layer.usda modified.usda\"\n    DIFF_COMPARE\n        modified.usda duplicates.usda removal.usda removal_preserve_length.usda\n        ref_layer_mod.usda ref_unmodified.usda preserve_metadata.usda\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsPipeline\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsPipeline\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsSparseValueWriter\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsSparseValueWriter\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsStageCache\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsStageCache\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsStitch\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsStitch\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsStitchClips\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsStitchClips\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsUpdateSchemaWithSdrNode\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsUpdateSchemaWithSdrNode\"\n    DIFF_COMPARE resultAPISchema.usda\n    DIFF_COMPARE resultAPIIdentifierMissing.usda\n    DIFF_COMPARE result_override.usda\n    DIFF_COMPARE resultUsdShadeConnectableAPIMetadata.usda\n    DIFF_COMPARE resultUsdShadeConnectableAPIMetadata2.usda\n    DIFF_COMPARE duplicateProp.usda\n    DIFF_COMPARE duplicatePropTypeMisMatch.usda\n    DIFF_COMPARE schemaConcrete.usda\n    DIFF_COMPARE testSdrNodeNonShaderNamespacePrefixResult.usda\n    DIFF_COMPARE testSdrNodeShaderNamespacePrefixResult.usda\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsUpdateSchemaWithSdrNodeError\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsUpdateSchemaWithSdrNode TestUsdUpdateSchemaWithSdrNode True\"\n    EXPECTED_RETURN_CODE 1\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsStitchCpp\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsStitchCpp\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsTimeCodeRange\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsTimeCodeRange\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdUtilsTimeCodeRangeCpp\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdUtilsTimeCodeRangeCpp\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Building usdGeom C++ Tests in CMake\nDESCRIPTION: Configures the build for C++ tests of usdGeom components using the pxr_build_test function.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdGeom/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testUsdGeomXformCache\n    LIBRARIES\n        usd\n        usdGeom\n    CPPFILES\n        testenv/testUsdGeomXformCache.cpp\n)\n\n\npxr_build_test(testUsdGeomCreateAttribute\n    LIBRARIES\n        usd\n        usdGeom\n    CPPFILES\n        testenv/testUsdGeomCreateAttribute.cpp\n)\n\npxr_build_test(testUsdGeomIsA\n    LIBRARIES\n        usd\n        usdGeom\n    CPPFILES\n        testenv/testUsdGeomIsA.cpp\n)\n\npxr_build_test(testUsdGeomHasAPI\n    LIBRARIES\n        usd\n        usdGeom\n    CPPFILES\n        testenv/testUsdGeomHasAPI.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: PluginLightFilter Table of Contents\nDESCRIPTION: Markdown content directive for generating a table of contents with specific depth and backlink settings.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/schemas/usdLux/PluginLightFilter.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{contents}\n:depth: 2\n:local:\n:backlinks: none\n```\n\n----------------------------------------\n\nTITLE: Loading Initial USD Session Layers\nDESCRIPTION: Logs the initiation of the USD session by loading the specified session and root `.sdf` files. These files serve as the entry points for scene composition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer4.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLoading session @TimeCodesPerSecond/session.sdf@\n\nLoading @TimeCodesPerSecond/root_12fps.sdf@\n```\n\n----------------------------------------\n\nTITLE: Layer2 USD Content\nDESCRIPTION: Defines the content of layer2.usda, which references prims in layer1.usda.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_23\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n)                \n\ndef \"OtherStageRef2\" (\n    references = @layer1.usda@</Prim1/Child>\n) {\n    int overChildAttr\n}    \n```\n\n----------------------------------------\n\nTITLE: Configuring usdGeom Test Scripts in CMake\nDESCRIPTION: Defines test scripts for various usdGeom components using the pxr_test_scripts function.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdGeom/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_test_scripts(\n    testenv/testUsdGeomBasisCurves.py\n    testenv/testUsdGeomBBoxCache.py\n    testenv/testUsdGeomCamera.py\n    testenv/testUsdGeomComputeAtTime.py\n    testenv/testUsdGeomConstraintTarget.py\n    testenv/testUsdGeomConsts.py\n    testenv/testUsdGeomCurves.py\n    testenv/testUsdGeomExtentFromPlugins.py\n    testenv/testUsdGeomExtentTransform.py\n    testenv/testUsdGeomHermiteCurves.py\n    testenv/testUsdGeomImageable.py\n    testenv/testUsdGeomMesh.py\n    testenv/testUsdGeomMetrics.py\n    testenv/testUsdGeomMotionAPI.py\n    testenv/testUsdGeomNoPlugLoad.py\n    testenv/testUsdGeomPointInstancer.py\n    testenv/testUsdGeomPrimvar.py\n    testenv/testUsdGeomPurposeVisibility.py\n    testenv/testUsdGeomSchemata.py\n    testenv/testUsdGeomSubset.py\n    testenv/testUsdGeomTetMesh.py\n    testenv/testUsdGeomXformable.py\n    testenv/testUsdGeomXformCommonAPI.py\n)\n```\n\n----------------------------------------\n\nTITLE: Registering usdview Default Material Test\nDESCRIPTION: Registers a CMake test named `testUsdviewDefaultMaterial`. This test runs `testusdview` with the Python script `testUsdviewDefaultMaterial.py` and `test.usda`. It checks the application of default ambient/specular materials by performing perceptual image difference comparison against `none.png`, `ambient.png`, `specular.png`, and `both.png`, using failure thresholds of 0.05 absolute and 0.03 percent, and expecting a return code of 0.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdviewDefaultMaterial\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewDefaultMaterial.py test.usda\"\n    IMAGE_DIFF_COMPARE\n        none.png\n        ambient.png\n        specular.png\n        both.png\n    FAIL 0.05\n    FAIL_PERCENT 0.03\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Installing usdGeom Test Directories in CMake\nDESCRIPTION: Sets up the installation of test directories for various usdGeom components using the pxr_install_test_dir function.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdGeom/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdGeomBasisCurves\n    DEST testUsdGeomBasisCurves\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdGeomBBoxCache\n    DEST testUsdGeomBBoxCache\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdGeomCamera\n    DEST testUsdGeomCamera\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdGeomConsts\n    DEST testUsdGeomConsts\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdGeomPointInstancer\n    DEST testUsdGeomPointInstancer\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdGeomSubset\n    DEST testUsdGeomSubset)\n\npxr_install_test_dir(\n    SRC testenv/testUsdGeomBBoxCache\n    DEST testUsdGeomBBoxCache\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdGeomExtentFromPlugins\n    DEST testUsdGeomExtentFromPlugins\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdGeomExtentTransform\n    DEST testUsdGeomExtentTransform\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdGeomComputeAtTime\n    DEST testUsdGeomComputeAtTime\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdGeomImageable\n    DEST testUsdGeomImageable\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdGeomMesh\n    DEST testUsdGeomMesh\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdGeomTetMesh\n    DEST testUsdGeomTetMesh\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Utils Library with CMake\nDESCRIPTION: Defines the core usdUtils library components including dependencies, classes, headers, and Python module files. Sets up the primary library configuration with required includes and dependencies.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUtils/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usdUtils)\n\npxr_library(usdUtils\n    LIBRARIES\n        arch\n        tf\n        gf\n        sdf\n        usd\n        usdGeom\n        usdShade\n        ${TBB_tbb_LIBRARY}\n\n    INCLUDE_DIRS\n        ${TBB_INCLUDE_DIRS}\n\n    PUBLIC_CLASSES\n        authoring\n        coalescingDiagnosticDelegate\n        conditionalAbortDiagnosticDelegate\n        debugCodes\n        dependencies\n        flattenLayerStack\n        introspection\n        localizeAsset\n        pipeline\n        registeredVariantSet\n        sparseValueWriter\n        stageCache\n        stitch\n        stitchClips\n        timeCodeRange\n        usdzPackage\n\n    PRIVATE_CLASSES\n        assetLocalization\n        assetLocalizationDelegate\n        assetLocalizationPackage\n\n    PUBLIC_HEADERS\n        api.h\n        userProcessingFunc.h\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapAuthoring.cpp\n        wrapCoalescingDiagnosticDelegate.cpp\n        wrapConditionalAbortDiagnosticDelegate.cpp\n        wrapDependencies.cpp\n        wrapFlattenLayerStack.cpp\n        wrapIntrospection.cpp\n        wrapLocalizeAsset.cpp\n        wrapPipeline.cpp\n        wrapRegisteredVariantSet.cpp\n        wrapSparseValueWriter.cpp\n        wrapStageCache.cpp\n        wrapStitch.cpp\n        wrapStitchClips.cpp\n        wrapTimeCodeRange.cpp\n        wrapUserProcessingFunc.cpp\n\n    PYMODULE_FILES\n        __init__.py\n        complianceChecker.py\n        constantsGroup.py\n        fixBrokenPixarSchemas.py\n        toolPaths.py\n        updateSchemaWithSdrNode.py\n        usdzUtils.py\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Registering usdGeom Tests in CMake\nDESCRIPTION: Registers various tests for usdGeom components using the pxr_register_test function, specifying command, expected return code, and environment variables where necessary.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdGeom/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdGeomBasisCurves\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdGeomBasisCurves\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdGeomBBoxCache\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdGeomBBoxCache\"\n    EXPECTED_RETURN_CODE 0\n    ENV \n        TF_DEBUG=USDGEOM_BBOX\n        USD_ASSIGN_PROTOTYPES_DETERMINISTICALLY=1\n)\n\npxr_register_test(testUsdGeomCamera\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdGeomCamera\"\n    EXPECTED_RETURN_CODE 0\n)\n\n# ... (more test registrations) ...\n\npxr_register_test(testUsdGeomImageable\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdGeomImageable\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Baseline Reference Removal\nDESCRIPTION: Removal of reference to baseline.txt asset\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddiff/testenv/testDiffToolIterateUsdz/baseline/iterate_usd_crate.txt#2025-04-23_snippet_3\n\nLANGUAGE: usda\nCODE:\n```\nasset baseline = @./baseline.txt@\n```\n\n----------------------------------------\n\nTITLE: Updated Layer2 After Namespace Editing\nDESCRIPTION: Shows the updated content of layer2.usda after applying namespace edits with dependent stages.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_25\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n\ndef \"OtherStageRef2\" (\n    references = @layer1.usda@</Prim1/RenamedChild>\n)\n{\n    int overChildAttr\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenUSD SDF Filter Build\nDESCRIPTION: CMake configuration that sets up project prefixes and builds the sdffilter binary. It specifies the PXR prefix path, package name, and links required libraries including arch, tf, and sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/sdffilter/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usd)\n\npxr_cpp_bin(sdffilter\n    INCLUDE_DIRS\n \n    LIBRARIES\n        arch\n        tf\n        sdf\n)\n```\n\n----------------------------------------\n\nTITLE: Vertex Results for Torus Topology (GPU Subdivision Disabled)\nDESCRIPTION: This snippet contains the calculated vertex coordinates (as 3D tuples) after applying the Catmull-Clark subdivision scheme to a torus topology without GPU acceleration (GPU subdivision = 0). Each tuple represents the (x, y, z) position of a vertex.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStSubdivisionOsd3/baseline/testHdStSubdivisionOsd3-Run1-stdout.txt#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n[(0, 0, -0.5), (-0.5, 0, 0), (0, 0, 0.5), (0.5, 0, 0), (0, 0.5, -1), (-1, 0.5, 0), (0, 0.5, 1), (1, 0.5, 0), (0, 0, -1.5), (-1.5, 0, 0), (0, 0, 1.5), (1.5, 0, 0), (0, -0.5, -1), (-1, -0.5, 0), (0, -0.5, 1), (1, -0.5, 0), (0, 0, -0.46875), (-0.46875, 0, 0), (0, 0, 0.46875), (0.46875, 0, 0), (0, 0.375, -0.75), (-0.75, 0.375, 0), (0, 0.375, 0.75), (0.75, 0.375, 0), (0, 0, -1.03125), (-1.03125, 0, 0), (0, 0, 1.03125), (1.03125, 0, 0), (0, -0.375, -0.75), (-0.75, -0.375, 0), (0, -0.375, 0.75), (0.75, -0.375, 0), (-0.375, 0.25, -0.375), (-0.375, 0.25, 0.375), (0.375, 0.25, 0.375), (0.375, 0.25, -0.375), (-0.625, 0.25, -0.625), (-0.625, 0.25, 0.625), (0.625, 0.25, 0.625), (0.625, 0.25, -0.625), (-0.625, -0.25, -0.625), (-0.625, -0.25, 0.625), (0.625, -0.25, 0.625), (0.625, -0.25, -0.625), (-0.375, -0.25, -0.375), (-0.375, -0.25, 0.375), (0.375, -0.25, 0.375), (0.375, -0.25, -0.375), (-0.3125, 0, -0.3125), (0, 0.25, -0.5625), (-0.5, 0.375, -0.5), (-0.5625, 0.25, 0), (-0.3125, 0, 0.3125), (-0.5, 0.375, 0.5), (0, 0.25, 0.5625), (0.3125, 0, 0.3125), (0.5, 0.375, 0.5), (0.5625, 0.25, 0), (0.3125, 0, -0.3125), (0.5, 0.375, -0.5), (0, 0.25, -0.9375), (-0.6875, 0, -0.6875), (-0.9375, 0.25, 0), (-0.6875, 0, 0.6875), (0, 0.25, 0.9375), (0.6875, 0, 0.6875), (0.9375, 0.25, 0), (0.6875, 0, -0.6875), (0, -0.25, -0.9375), (-0.5, -0.375, -0.5), (-0.9375, -0.25, 0), (-0.5, -0.375, 0.5), (0, -0.25, 0.9375), (0.5, -0.375, 0.5), (0.9375, -0.25, 0), (0.5, -0.375, -0.5), (0, -0.25, -0.5625), (-0.5625, -0.25, 0), (0, -0.25, 0.5625), (0.5625, -0.25, 0)]\n```\n\n----------------------------------------\n\nTITLE: Defining Referenced Prims in USDA\nDESCRIPTION: Example USDA file (refModel.usda) defining prims to be referenced.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/user_guides/namespace_editing.rst#2025-04-23_snippet_4\n\nLANGUAGE: USDA\nCODE:\n```\ndef \"modelA\" ()\n{\n    def \"modelAChild\" ()\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Diff Tool in CMake\nDESCRIPTION: Sets up the prefix and package for the USD project and configures the usddiff Python binary with its dependencies.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usddiff/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usd)\n\npxr_python_bin(usddiff\n    DEPENDENCIES\n        tf\n        sdf\n)\n```\n\n----------------------------------------\n\nTITLE: Registering USD Physics Test Cases\nDESCRIPTION: Configures individual test cases for the USD Physics library, setting up Python-based tests with expected return codes and execution paths.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdPhysics/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testUsdPhysicsMetrics\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdPhysicsMetrics\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdPhysicsRigidBodyAPI\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdPhysicsRigidBodyAPI\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdPhysicsCollisionGroupAPI\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdPhysicsCollisionGroupAPI\"\n    EXPECTED_RETURN_CODE 0\n)\n\npxr_register_test(testUsdPhysicsParsing\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdPhysicsParsing\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring ESF Library in OpenUSD with CMake\nDESCRIPTION: Defines the ESF library with its dependencies, public headers, classes, and resource files in the OpenUSD project. It establishes library prefix and package name for ESF (Extended Scene Framework) and enumerates all components required for building the library.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/esf/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/exec)\nset(PXR_PACKAGE esf)\n\npxr_library(esf\n    LIBRARIES\n        arch\n        sdf\n        tf\n        vt\n        usd\n        \n    PUBLIC_HEADERS\n        api.h\n        journal.h\n\n    PUBLIC_CLASSES\n        attribute\n        editReason\n        fixedSizePolymorphicHolder\n        object\n        prim\n        property\n        stage\n\n    RESOURCE_FILES\n        plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Catmull-Clark Subdivision on Triangles with Right-Handed Orientation\nDESCRIPTION: Results from applying Catmull-Clark subdivision on a triangle mesh with right-handed orientation at subdivision levels 0 and 1. The output shows the triangle's index results and the resulting vertex position coordinates in 3D space.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStSubdivisionOsd3/baseline/testHdStSubdivisionOsd3-Run1-stdout.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTest triangle\nScheme catmullClark\nOrientation rightHanded\nGPU subdivision = 0\nIndex Results\n[3, 7, 6, 9, 4, 8, 6, 7, 5, 9, 6, 8]\nResults\n[(0, 1, 0), (-1, 0, 0), (1, 0, 0), (0, 1, 0), (-1, 0, 0), (1, 0, 0), (0, 0.33333334, 0), (-0.5, 0.5, 0), (0, 0, 0), (0.5, 0.5, 0)]\n```\n\n----------------------------------------\n\nTITLE: Using usdresolve for Asset Path Resolution\nDESCRIPTION: usdresolve performs command-line ArResolver resolution of asset paths. It takes asset paths as arguments and has options for context and verbose output.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toolset.rst#2025-04-23_snippet_5\n\nLANGUAGE: none\nCODE:\n```\nusdresolve [-h] [--context CONTEXT] [--verbose] assetPath [assetPath ...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Reference Section Navigation in Sphinx Documentation\nDESCRIPTION: Sphinx toctree directive that configures the Reference section navigation with a depth limit of 1, including API documentation, toolset information, specifications, proposals, FAQ, performance considerations and metrics, and third-party plugin information.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/toc.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :hidden:\n   :caption: Reference\n   :maxdepth: 1\n\n   apiDocs\n   Toolset <toolset>\n   Specifications <spec>\n   Proposals <wp>\n   FAQ <usdfaq>\n   Performance Considerations <maxperf>\n   Performance Metrics <ref_performance_metrics>\n   Third Party Plugins <plugins>\n```\n\n----------------------------------------\n\nTITLE: Tracking GPU Memory and Render Statistics for Primvar Operations in OpenUSD\nDESCRIPTION: This output shows statistics from a test that measures how primvar operations affect GPU memory usage and rendering performance. The test tracks metrics like buffer sizes, texture memory, draw calls, and garbage collection across different rendering states including initialization, flat shading, smooth shading, and various primvar modifications.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStPrimvars/baseline/testHdStPrimvars-Run1-stdout.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n==== PrimvarsTest:\n----- begin -----\nnonUniformSize, 0\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 0\nsingleBufferSize, 0\ntextureMemory, 0\ngarbageCollected = 0\ndrawCalls = 0\nrebuildBatches = 0\nbufferArrayRangeMigrated = 0\n\n----- draw flat -----\ndrawIndirect, 240\ndrawIndirectCull, 240\nnonUniformSize, 768\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 1056\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 480\ngarbageCollected = 0\ndrawCalls = 1\ndrawBatches = 1\nitemsDrawn = 4\ndrawItemsFetched = 1\nrebuildBatches = 1\nbufferArrayRangeMigrated = 0\n\n----- draw flat : primvars added -----\ndrawIndirect, 480\ndrawIndirectCull, 480\nnonUniformSize, 992\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 1296\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 480\ngarbageCollected = 1\ndrawCalls = 3\ndrawBatches = 3\nitemsDrawn = 4\ndrawItemsFetched = 1\nrebuildBatches = 2\nbufferArrayRangeMigrated = 3\n\n----- draw smooth -----\ndrawIndirect, 480\ndrawIndirectCull, 480\nnonUniformSize, 1312\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 1360\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 736\ngarbageCollected = 2\ndrawCalls = 4\ndrawBatches = 4\nitemsDrawn = 4\ndrawItemsFetched = 2\nrebuildBatches = 3\nbufferArrayRangeMigrated = 5\n\n----- draw smooth : primvar resized -----\ndrawIndirect, 540\ndrawIndirectCull, 540\nnonUniformSize, 1312\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 1376\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 736\ngarbageCollected = 3\ndrawCalls = 4\ndrawBatches = 4\nitemsDrawn = 4\ndrawItemsFetched = 2\nrebuildBatches = 3\nbufferArrayRangeMigrated = 6\n\n----- draw smooth : primvar removed -----\ndrawIndirect, 720\ndrawIndirectCull, 720\nnonUniformSize, 1312\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 1344\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 736\ngarbageCollected = 4\ndrawCalls = 4\ndrawBatches = 4\nitemsDrawn = 4\ndrawItemsFetched = 2\nrebuildBatches = 3\nbufferArrayRangeMigrated = 7\n\n----- draw smooth : facevarying primvar added -----\ndrawIndirect, 540\ndrawIndirectCull, 540\nnonUniformSize, 1744\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 1776\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 736\ngarbageCollected = 5\ndrawCalls = 4\ndrawBatches = 4\nitemsDrawn = 4\ndrawItemsFetched = 2\nrebuildBatches = 3\nbufferArrayRangeMigrated = 8\n\n----- draw smooth : facevarying primvar removed -----\ndrawIndirect, 540\ndrawIndirectCull, 540\nnonUniformSize, 1312\nnumberOfTextureHandles, 0\nnumberOfTextureObjects, 2\nprimvar, 1344\nsingleBufferSize, 0\ntextureMemory, 786432\ntopology, 736\ngarbageCollected = 6\ndrawCalls = 4\ndrawBatches = 4\nitemsDrawn = 4\ndrawItemsFetched = 2\nrebuildBatches = 3\nbufferArrayRangeMigrated = 9\nOK\n```\n\n----------------------------------------\n\nTITLE: Configuring Core OpenUSD Hydra Components in CMake\nDESCRIPTION: This CMake script defines the build order for core OpenUSD imaging components by adding various subdirectories to the build process. It includes graphics libraries, the Hydra renderer, and platform-specific graphics implementations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(garch)\nadd_subdirectory(hf)\nadd_subdirectory(hio)\nadd_subdirectory(cameraUtil)\nadd_subdirectory(pxOsd)\nadd_subdirectory(geomUtil)\nadd_subdirectory(glf)\nadd_subdirectory(hgi)\nadd_subdirectory(hgiGL)\nadd_subdirectory(hgiMetal)\nadd_subdirectory(hgiVulkan)\nadd_subdirectory(hgiInterop)\nadd_subdirectory(hd)\nadd_subdirectory(hdar)\nadd_subdirectory(hdGp)\nadd_subdirectory(hdsi)\n```\n\n----------------------------------------\n\nTITLE: Registering Sdr Filesystem Discovery Test in CMake\nDESCRIPTION: This snippet registers the Sdr filesystem discovery test using the pxr_register_test CMake function. It specifies the test command and expected return code.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/sdr/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testSdrFilesystemDiscovery\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testSdrFilesystemDiscovery\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring usdProc Library Build in CMake for OpenUSD\nDESCRIPTION: This CMake snippet configures the build for the usdProc library in the OpenUSD project. It sets the prefix and package name, then defines the library with its dependencies, public headers, Python module files, and Doxygen documentation files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdProc/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/usd)\nset(PXR_PACKAGE usdProc)\n\npxr_library(usdProc\n    INCLUDE_SCHEMA_FILES\n\n    LIBRARIES\n        tf\n        usd\n        usdGeom\n\n    PUBLIC_HEADERS\n        api.h\n\n    PYMODULE_FILES\n        __init__.py\n\n    DOXYGEN_FILES\n        overview.dox\n\n)\n```\n\n----------------------------------------\n\nTITLE: HTML Meta Refresh Redirect\nDESCRIPTION: Implements an HTML meta refresh redirect to the spec_usdpreviewsurface.html page with 0 second delay.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdpreviewsurface.rst#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta http-equiv=\"refresh\" content=\"0;url=spec_usdpreviewsurface.html\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Boost Library Path and Package in OpenUSD\nDESCRIPTION: Sets the prefix path and package name for Boost library within the OpenUSD project structure.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/external/boost/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/external)\nset(PXR_PACKAGE boost)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Catmull-Clark Subdivision on Triangles with Left-Handed Orientation\nDESCRIPTION: Results from applying Catmull-Clark subdivision on a triangle mesh with left-handed orientation at subdivision levels 0 and 1. The output shows the triangle's index results and the resulting vertex position coordinates in 3D space.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdSt/testenv/testHdStSubdivisionOsd3/baseline/testHdStSubdivisionOsd3-Run1-stdout.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTest triangle\nScheme catmullClark\nOrientation leftHanded\nGPU subdivision = 0\nIndex Results\n[3, 7, 6, 9, 5, 8, 6, 7, 4, 9, 6, 8]\nResults\n[(0, 1, 0), (-1, 0, 0), (1, 0, 0), (0, 1, 0), (-1, 0, 0), (1, 0, 0), (0, 0.33333334, 0), (0.5, 0.5, 0), (0, 0, 0), (-0.5, 0.5, 0)]\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Anti-Regression Mode with CMake\nDESCRIPTION: CMake option to set the default anti-regression authoring mode when building USD using CMake.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/ts/doxygen/regression.md#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n-DPXR_TS_DEFAULT_ANTI_REGRESSION_AUTHORING_MODE=TsAntiRegression...\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-Specific Linker Flags in CMake\nDESCRIPTION: Conditionally modifies the shared linker flags for Windows builds (when the `WIN32` variable is true). It appends flags to ignore several default libraries (`libmmd.lib`, `libirc.lib`, `svml_dispmd.lib`, `libdecimal.lib`), potentially to avoid conflicts or ensure specific library versions provided by RenderMan or other dependencies are used.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/rmanOslParser/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n    set( CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} /NODEFAULTLIB:libmmd.lib /NODEFAULTLIB:libirc.lib /NODEFAULTLIB:svml_dispmd.lib /NODEFAULTLIB:libdecimal.lib\" )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering CMake Test for Pcp ErrorSublayerCycle\nDESCRIPTION: Defines a CMake test named `testPcpMuseum_ErrorSublayerCycle` using `pxr_register_test`. It executes `testPcpCompositionResults` with the `--usd` flag and an `--errorFile` argument on the `ErrorSublayerCycle/root.sdf` file. This test case is designed to trigger errors caused by cycles in sublayer references. Standard output and the error file are compared against baseline files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testPcpMuseum_ErrorSublayerCycle\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd --errorFile compositionErrors_ErrorSublayerCycle.txt ErrorSublayerCycle/root.sdf\" \n    STDOUT_REDIRECT compositionResults_ErrorSublayerCycle.txt\n    DIFF_COMPARE compositionResults_ErrorSublayerCycle.txt compositionErrors_ErrorSublayerCycle.txt\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the usdAppUtils Library with Dependencies and Python Bindings in CMake\nDESCRIPTION: Defines the `usdAppUtils` library using the `pxr_library` CMake function. It specifies dependencies on other USD libraries (garch, gf, hio, sdf, tf, usd, usdGeom, usdImagingGL), lists public headers (api.h) and classes (camera, frameRecorder), defines C++ files for Python module wrapping, includes associated Python module files, and specifies Doxygen documentation files (overview.dox). This function handles the compilation, linking, and Python binding generation for the library.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdAppUtils/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_library(usdAppUtils\n    LIBRARIES\n        garch\n        gf\n        hio\n        sdf\n        tf\n        usd\n        usdGeom\n        usdImagingGL\n\n    PUBLIC_HEADERS\n        api.h\n\n    PUBLIC_CLASSES\n        camera\n        frameRecorder\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapCamera.cpp\n        wrapFrameRecorder.cpp\n\n    PYMODULE_FILES\n        __init__.py\n        cameraArgs.py\n        colorArgs.py\n        complexityArgs.py\n        framesArgs.py\n        rendererArgs.py\n\n    DOXYGEN_FILES\n        overview.dox\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Python Module Files for OpenUSD Schema\nDESCRIPTION: This code block iterates through a list of Python module files and generates a formatted output for each module. It's used to create a comprehensive list of Python modules associated with the OpenUSD schema.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/codegenTemplates/generatedSchema.classes.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# Python Module Files\n{% for pythonModule in pythonModules %}\n{{ pythonModule }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Applying List Operations for Relationship Resolution in C++\nDESCRIPTION: The C++ method `SdfListOp::ApplyOperations` defines the rules for combining list-edited items, such as relationship targets. It processes opinions from weakest to strongest to compute the final list.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/glossary.rst#2025-04-23_snippet_60\n\nLANGUAGE: cpp\nCODE:\n```\nSdfListOp::ApplyOperations\n```\n\n----------------------------------------\n\nTITLE: Analyzing USD Composition Result for /DeleteRefs2\nDESCRIPTION: Details the composition results for the prim `/DeleteRefs2`. Similar to `/DeleteRefs1`, it shows a reduced Prim Stack due to reference deletion operations, with `sub_48tcps.sdf` being the strongest contributing layer for the prim definition. It lists contributing layers (`sub_48tcps.sdf`, `base.sdf`, `ref.sdf`) and the single remaining reference with its time offset.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ReferenceListOpsWithOffsets.testenv/baseline/compositionResults_ReferenceListOpsWithOffsets.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </DeleteRefs2>\n\nPrim Stack:\n    sub_48tcps.sdf       /DeleteRefs2\n    base.sdf             /DeleteRefs2\n    ref.sdf              /Ref\n\nTime Offsets:\n    root.sdf             /DeleteRefs2    root       (offset=0.00, scale=1.00)\n        sub.sdf                          sublayer   (offset=10.00, scale=2.00)\n        sub_48tcps.sdf                   sublayer   (offset=0.00, scale=0.50)\n    ref.sdf              /Ref            reference  (offset=100.00, scale=1.00)\n```\n\n----------------------------------------\n\nTITLE: Building C++ Accessibility API Test\nDESCRIPTION: Configures the build for the USD UI Accessibility API test with required library dependencies.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdUI/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\npxr_build_test(testUsdUIAccessibilityAPI\n    LIBRARIES\n        tf\n        usd\n        usdUI\n    CPPFILES\n        testenv/testUsdUIAccessibilityAPI.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Test Data Directory 'testUsdZipAsset' in CMake\nDESCRIPTION: Uses the `pxr_install_test_dir` custom CMake function to install the contents of the source directory `testenv/testUsdZipAsset` into the destination directory `testUsdZipAsset` within the build/install test environment.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdzip/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testUsdZipAsset\n    DEST testUsdZipAsset\n)\n```\n\n----------------------------------------\n\nTITLE: Schema File Structure Definition\nDESCRIPTION: Defines the structure and contents of the generated schema, listing public classes, Python module files for wrapping classes, and associated resource files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/testenv/testUsdGenSchema/baseline/basic/generatedSchema.classes.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT.\n\n# Public Classes\nbase\nderived\nderivedNonAppliedAPI\nemptyMultipleApplyAPI\nmultipleApplyAPI\nmultipleApplyAPI_1\nnoAlias\nnonAppliedAPI\npublicMultipleApplyAPI\nsingleApplyAPI\nsingleApplyAPI_1\ntestHairman\ntestHairman_1\ntestNoVersion0_2\ntokens\n\n# Python Module Files\nmodule.cpp\nwrapBase.cpp\nwrapDerived.cpp\nwrapDerivedNonAppliedAPI.cpp\nwrapEmptyMultipleApplyAPI.cpp\nwrapMultipleApplyAPI.cpp\nwrapMultipleApplyAPI_1.cpp\nwrapNoAlias.cpp\nwrapNonAppliedAPI.cpp\nwrapPublicMultipleApplyAPI.cpp\nwrapSingleApplyAPI.cpp\nwrapSingleApplyAPI_1.cpp\nwrapTestHairman.cpp\nwrapTestHairman_1.cpp\nwrapTestNoVersion0_2.cpp\nwrapTokens.cpp\n\n# Resource Files\ngeneratedSchema.usda\nplugInfo.json\nschema.usda:usdContrived/schema.usda\n```\n\n----------------------------------------\n\nTITLE: Listing Resource Files for OpenUSD Schema Generation\nDESCRIPTION: This snippet lists the resource files used in the OpenUSD schema generation process. It includes generated schema, plug information, and the main schema file.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usd/testenv/testUsdGenSchema/baseline/init/generatedSchema.classes.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Resource Files\ngeneratedSchema.usda\nplugInfo.json\nschema.usda:/schema.usda\n```\n\n----------------------------------------\n\nTITLE: Composing Prepend and Append Prims in OpenUSD\nDESCRIPTION: This snippet demonstrates the composition of prepend and append prims for sub2, sub1, and root layers. It shows their prim stacks, property names, property stacks, and relationship targets.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicListEditing.testenv/baseline/compositionResults_BasicListEditing_usd.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for composing </sub2_prepend>\n\nPrim Stack:\n    sub2.sdf             /sub2_prepend\n\nProperty names:\n     ['targets']\n\nProperty stacks:\n/sub2_prepend.targets:\n    sub2.sdf             /sub2_prepend.targets\n\nRelationship targets:\n/sub2_prepend.targets:\n    /sub2_prepend/sub2_prepend\n\n------------------------------------------------------------------------\nResults for composing </sub2_append>\n\nPrim Stack:\n    sub2.sdf             /sub2_append\n\nProperty names:\n     ['targets']\n\nProperty stacks:\n/sub2_append.targets:\n    sub2.sdf             /sub2_append.targets\n\nRelationship targets:\n/sub2_append.targets:\n    /sub2_append/sub2_append\n\n------------------------------------------------------------------------\nResults for composing </sub1_prepend>\n\nPrim Stack:\n    sub1.sdf             /sub1_prepend\n\nProperty names:\n     ['targets']\n\nProperty stacks:\n/sub1_prepend.targets:\n    sub1.sdf             /sub1_prepend.targets\n\nRelationship targets:\n/sub1_prepend.targets:\n    /sub1_prepend/sub1_prepend\n\n------------------------------------------------------------------------\nResults for composing </sub1_append>\n\nPrim Stack:\n    sub1.sdf             /sub1_append\n\nProperty names:\n     ['targets']\n\nProperty stacks:\n/sub1_append.targets:\n    sub1.sdf             /sub1_append.targets\n\nRelationship targets:\n/sub1_append.targets:\n    /sub1_append/sub1_append\n\n------------------------------------------------------------------------\nResults for composing </root_prepend>\n\nPrim Stack:\n    root.sdf             /root_prepend\n\nProperty names:\n     ['targets']\n\nProperty stacks:\n/root_prepend.targets:\n    root.sdf             /root_prepend.targets\n\nRelationship targets:\n/root_prepend.targets:\n    /root_prepend/root_prepend\n\n------------------------------------------------------------------------\nResults for composing </root_append>\n\nPrim Stack:\n    root.sdf             /root_append\n\nProperty names:\n     ['targets']\n\nProperty stacks:\n/root_append.targets:\n    root.sdf             /root_append.targets\n\nRelationship targets:\n/root_append.targets:\n    /root_append/root_append\n```\n\n----------------------------------------\n\nTITLE: Configuring HgiVulkan Command Test\nDESCRIPTION: Sets up additional test configuration for HgiVulkan command testing, specifically for shared library builds. Includes image comparison and detailed debug settings.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hgiVulkan/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testHgiVulkanCommand\n    DEST testHgiVulkanCommand\n)\npxr_register_test(testHgiVulkanCommand\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHgiCommand --write testHgiVulkanCommand_triangle.png\"\n    IMAGE_DIFF_COMPARE\n        testHgiVulkanCommand_triangle.png\n    FAIL 1\n    FAIL_PERCENT 0.001\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    ENV\n        HGI_ENABLE_VULKAN=1\n        HGIVULKAN_DEBUG=1\n        HGIVULKAN_DEBUG_VERBOSE=1\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Invalid Clip Paths Test for USD Stitch Clips in CMake\nDESCRIPTION: Configures a test case for usdstitchclips with an invalid clip path, expecting a successful execution (return code 0).\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/bin/usdstitchclips/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/testInvalidClipPaths\n    DEST testUsdStitchClipsInvalidClipPaths1\n)\n\npxr_register_test(testUsdStitchClipsInvalidClipPaths1\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/usdstitchclips a.usd b.usd --clipPath /World/fx/Particles_Splash --out test1.usd\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version Requirements and Project Definition for USD\nDESCRIPTION: Specifies the minimum CMake version required and defines the project name as 'usd'.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.26)\n\nproject(usd)\n```\n\n----------------------------------------\n\nTITLE: USD Variant Composition Results\nDESCRIPTION: Shows the prim and property stacks for Model with variant selection, demonstrating how variants affect property inheritance and composition.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_VariantSpecializesAndReference.testenv/baseline/compositionResults_VariantSpecializesAndReference.txt#2025-04-23_snippet_1\n\nLANGUAGE: usda\nCODE:\n```\nPrim Stack:\n    root.sdf             /Model\n    root.sdf             /Model{shadingVariant=New_Shading_Variant}\n    root.sdf             /New_Shading_Variant\n    root.sdf             /Model_defaultShadingVariant\n\nVariant Selections:\n    {shadingVariant = New_Shading_Variant}\n\nChild names:\n     ['Material', 'Material_Child']\n```\n\n----------------------------------------\n\nTITLE: Registering HDSI Tests in OpenUSD\nDESCRIPTION: Registers the built test executables with the test system, specifying their execution commands using the installation path. This allows the tests to be discovered and run by the testing framework.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hdsi/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testHdsiComputeSceneIndexDiff\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdsiComputeSceneIndexDiff\"\n)\npxr_register_test(testHdsiPinnedCurveExpandingSceneIndex\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdsiPinnedCurveExpandingSceneIndex\"\n)\npxr_register_test(testHdsiSwitchingSceneIndex\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdsiSwitchingSceneIndex\"\n)\npxr_register_test(testHdsiPrefixPathPruningSceneIndex\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testHdsiPrefixPathPruningSceneIndex\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directory Settings for VtVisitValue Polyfill in CMake\nDESCRIPTION: Disables CMAKE_INCLUDE_CURRENT_DIR to ensure the preprocessor resolves includes correctly for a polyfill. This is needed until hdPrman drops support for USD versions older than 22.11.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/third_party/renderman-26/plugin/hdPrman/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INCLUDE_CURRENT_DIR OFF)\n```\n\n----------------------------------------\n\nTITLE: Loading Target USD File\nDESCRIPTION: Specifies the root USD layer file being loaded for composition analysis.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_SpecializesAndAncestralArcs4.testenv/baseline/compositionResults_SpecializesAndAncestralArcs4.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLoading @SpecializesAndAncestralArcs4/root.sdf@\n```\n\n----------------------------------------\n\nTITLE: Composing Prim </_X/B/C/D> (USD Composition Log)\nDESCRIPTION: Shows the composition results for the prim at path </_X/B/C/D>. The prim stack combines contributions from /Ref/C/D and /Ref/C/_Z in 'ref.sdf'. The 'prop' property stack lists contributions from both corresponding locations.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_ImpliedAndAncestralInherits_ComplexEvaluation.testenv/baseline/compositionResults_ImpliedAndAncestralInherits_ComplexEvaluation.txt#2025-04-23_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </_X/B/C/D>\n\nPrim Stack:\n    ref.sdf              /Ref/C/D\n    ref.sdf              /Ref/C/_Z\n\nProperty names:\n     ['prop']\n\nProperty stacks:\n/_X/B/C/D.prop:\n    ref.sdf              /Ref/C/D.prop\n    ref.sdf              /Ref/C/_Z.prop\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenUSD Garch Library Build with Platform-Specific OpenGL Context in CMake\nDESCRIPTION: CMake configuration that sets up the Garch library build with platform-specific OpenGL context and debug window implementations. It detects the platform (Apple, X11, Windows) and configures appropriate source files and library dependencies accordingly.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/garch/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/imaging)\nset(PXR_PACKAGE garch)\n\nif (NOT ${PXR_ENABLE_GL_SUPPORT})\n    message(STATUS\n        \"Skipping ${PXR_PACKAGE} because PXR_ENABLE_GL_SUPPORT is OFF\")\n    return()\nendif()\n\nif(APPLE)\n    set(GARCH_GLPLATFORMCONTEXT       glPlatformContextDarwin)\n    set(GARCH_GLPLATFORMDEBUGWINDOW   glPlatformDebugWindowDarwin)\n    set(GARCH_SOURCE_EXTENSION        mm)\n    set(GARCH_PLATFORM_LIBRARIES      \"-framework Foundation\")\n    if (PXR_APPLE_EMBEDDED)\n        list(APPEND GARCH_PLATFORM_LIBRARIES \"-framework UIKit\")\n    else()\n        list(APPEND GARCH_PLATFORM_LIBRARIES \"-framework AppKit\")\n        list(APPEND GARCH_PLATFORM_LIBRARIES OpenGL::GL)\n    endif()\nelseif(X11_FOUND)\n    set(GARCH_GLPLATFORMCONTEXT       glPlatformContextGLX)\n    set(GARCH_GLPLATFORMDEBUGWINDOW   glPlatformDebugWindowGLX)\n    set(GARCH_SOURCE_EXTENSION        cpp)\n    set(GARCH_PLATFORM_LIBRARIES      ${X11_LIBRARIES} OpenGL::GL)\nelseif(WIN32)\n    set(GARCH_GLPLATFORMCONTEXT       glPlatformContextWindows)\n    set(GARCH_GLPLATFORMDEBUGWINDOW   glPlatformDebugWindowWindows)\n    set(GARCH_SOURCE_EXTENSION        cpp)\n    set(GARCH_PLATFORM_LIBRARIES      OpenGL::GL)\nendif()\n\npxr_library(garch\n    LIBRARIES\n        arch\n        tf\n        ${GARCH_PLATFORM_LIBRARIES}\n\n    PUBLIC_CLASSES\n        glApi\n        glDebugWindow\n        glPlatformDebugContext\n\n    PUBLIC_HEADERS\n        api.h\n        gl.h\n        glPlatformContext.h\n        khrplatform.h\n        ${GARCH_GLPLATFORMCONTEXT}.h\n\n    PRIVATE_HEADERS\n        ${GARCH_GLPLATFORMDEBUGWINDOW}.h\n\n    CPPFILES\n        ${GARCH_GLPLATFORMCONTEXT}.${GARCH_SOURCE_EXTENSION}\n        ${GARCH_GLPLATFORMDEBUGWINDOW}.${GARCH_SOURCE_EXTENSION}\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapPlatformDebugContext.cpp\n\n    PYMODULE_FILES\n        __init__.py\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Testing for UsdShadeValidators in CMake\nDESCRIPTION: Configures the test build, installation, and registration for UsdShadeValidators. This includes specifying the test dependencies, source files, installation directory, and expected return code.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdValidation/usdShadeValidators/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testUsdShadeValidators\n    LIBRARIES\n        tf\n        sdr\n        usd\n        usdValidation\n        usdShade\n        usdShadeValidators\n    CPPFILES\n        testenv/testUsdShadeValidators.cpp\n)\n\npxr_install_test_dir(\n    SRC testenv/testUsdShadeValidators\n    DEST testUsdShadeValidators\n)\n\npxr_register_test(testUsdShadeValidators\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testUsdShadeValidators\"\n    EXPECTED_RETURN_CODE 0\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gf Tests in CMake for OpenUSD\nDESCRIPTION: Sets up various tests for the Gf library, including C++ tests and Python test scripts. It also registers these tests with the CMake test system using pxr_register_test commands.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/gf/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npxr_build_test(testGfHardToReach\n    LIBRARIES\n        gf\n    CPPFILES\n        testenv/testGfHardToReach.cpp\n)\n\npxr_build_test(testGfColorCpp\n    LIBRARIES\n        gf\n    CPPFILES\n        testenv/testGfColorCpp.cpp\n)\n\npxr_test_scripts(\n    testenv/testGfBBox3d.py\n    testenv/testGfCamera.py\n    testenv/testGfColorPy.py\n    testenv/testGfDecomposeRotation.py\n    testenv/testGfDualQuaternion.py\n    testenv/testGfFrustum.py\n    testenv/testGfGamma.py\n    testenv/testGfHomogeneous.py\n    testenv/testGfInterval.py\n    testenv/testGfLine.py\n    testenv/testGfLineSeg.py\n    testenv/testGfMath.py\n    testenv/testGfMatrix.py\n    testenv/testGfMultiInterval.py\n    testenv/testGfPlane.py\n    testenv/testGfQuaternion.py\n    testenv/testGfRange.py\n    testenv/testGfRay.py\n    testenv/testGfRect2i.py\n    testenv/testGfRotation.py\n    testenv/testGfSize.py\n    testenv/testGfTransform.py\n    testenv/testGfVec.py\n)\n\npxr_register_test(testGfBBox3d\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testGfBBox3d\"\n)\n# ... (additional test registrations)\npxr_register_test(testGfCamera\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testGfCamera\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Framebuffer Entries\nDESCRIPTION: Demonstrates adding 42 framebuffer entries with incrementing dimensions. Each entry contains color textures and depth texture with matching dimensions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hgiGL/testenv/testHgiGL/baseline/graphicsCmdsDescCache.txt#2025-04-23_snippet_0\n\nLANGUAGE: config\nCODE:\n```\n_FramebufferCache: {\n    _FramebufferDesc: {colorTexture0 dimensions:(1, 1, 1), colorTexture1 dimensions:(1, 1, 1), depthFormat 10depthTexture dimensions:(1, 1, 1)}\n    _FramebufferDesc: {colorTexture0 dimensions:(2, 2, 1), colorTexture1 dimensions:(2, 2, 1), depthFormat 10depthTexture dimensions:(2, 2, 1)}\n    /* ... abbreviated for brevity ... */\n    _FramebufferDesc: {colorTexture0 dimensions:(42, 42, 1), colorTexture1 dimensions:(42, 42, 1), depthFormat 10depthTexture dimensions:(42, 42, 1)}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Python Subdirectory to Boost Library Build\nDESCRIPTION: Includes the Python subdirectory in the build process, which contains Python-specific Boost components.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/external/boost/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(python)\n```\n\n----------------------------------------\n\nTITLE: Creating Test Modules with Unicode Support\nDESCRIPTION: Creates test modules with special handling for Unicode paths on Windows. Ensures consistent behavior across different operating systems.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/base/plug/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n    pxr_create_test_module(TestPlugModuleUnicode\n        INSTALL_PREFIX PlugPlugins\n        DEST_DIR TestPlugMödüleÜnicöde\n    )\nelse()\n    pxr_create_test_module(TestPlugModuleUnicode\n        INSTALL_PREFIX PlugPlugins\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Deleting Alternate Framebuffer Entries\nDESCRIPTION: Shows the framebuffer cache after deleting every other entry, leaving only entries with even-numbered dimensions from 2 to 42.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hgiGL/testenv/testHgiGL/baseline/graphicsCmdsDescCache.txt#2025-04-23_snippet_1\n\nLANGUAGE: config\nCODE:\n```\n_FramebufferCache: {\n    _FramebufferDesc: {colorTexture0 dimensions:(2, 2, 1), colorTexture1 dimensions:(2, 2, 1), depthFormat 10depthTexture dimensions:(2, 2, 1)}\n    /* ... abbreviated for brevity ... */\n    _FramebufferDesc: {colorTexture0 dimensions:(42, 42, 1), colorTexture1 dimensions:(42, 42, 1), depthFormat 10depthTexture dimensions:(42, 42, 1)}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining prefix and package for ef library in OpenUSD\nDESCRIPTION: Sets the prefix and package variables for the ef library, placing it in the pxr/exec namespace within the OpenUSD project structure.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/exec/ef/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(PXR_PREFIX pxr/exec)\nset(PXR_PACKAGE ef)\n```\n\n----------------------------------------\n\nTITLE: Displaying Time Offset Configuration for SS4\nDESCRIPTION: Output showing the time offset and scale configurations for /SS4 prim, detailing how each layer and reference contributes to the overall timing behavior.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_TimeCodesPerSecond.testenv/baseline/compositionResults_TimeCodesPerSecondWithSessionLayer3.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nTime Offsets:\n    session_24fps.sdf    /SS4            root       (offset=0.00, scale=1.00)\n        sess_s.sdf                       sublayer   (offset=10.00, scale=2.00)\n        sess_s_48tcps.sdf                sublayer   (offset=10.00, scale=1.00)\n        sess_s_24tcps_12fps.sdf          sublayer   (offset=10.00, scale=2.00)\n        sess_s_12fps.sdf                 sublayer   (offset=10.00, scale=4.00)\n        root_12fps.sdf                   sublayer   (offset=0.00, scale=2.00)\n        s.sdf                            sublayer   (offset=20.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=40.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=40.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=40.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=40.00, scale=8.00)\n        s_48tcps.sdf                     sublayer   (offset=20.00, scale=1.00)\n        ss.sdf                           sublayer   (offset=30.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=30.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=30.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=30.00, scale=8.00)\n        s_24tcps_12fps.sdf               sublayer   (offset=20.00, scale=2.00)\n        ss.sdf                           sublayer   (offset=40.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=40.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=40.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=40.00, scale=8.00)\n        s_12fps.sdf                      sublayer   (offset=20.00, scale=4.00)\n        ss.sdf                           sublayer   (offset=60.00, scale=4.00)\n        ss_48tcps.sdf                    sublayer   (offset=60.00, scale=2.00)\n        ss_24tcps_12fps.sdf              sublayer   (offset=60.00, scale=4.00)\n        ss_12fps.sdf                     sublayer   (offset=60.00, scale=8.00)\n    ref.sdf              /Ref            reference  (offset=120.00, scale=8.00)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.50)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=2.00)\n    ref_48tcps.sdf       /Ref            reference  (offset=120.00, scale=4.00)\n        ref_s.sdf                        sublayer   (offset=0.00, scale=2.00)\n        ref_s_24tcps_12fps.sdf           sublayer   (offset=0.00, scale=2.00)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=4.00)\n    ref_24tcps_12fps.sdf /Ref            reference  (offset=120.00, scale=8.00)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.50)\n        ref_s_12fps.sdf                  sublayer   (offset=0.00, scale=2.00)\n    ref_12fps.sdf        /Ref            reference  (offset=120.00, scale=16.00)\n        ref_s.sdf                        sublayer   (offset=0.00, scale=0.50)\n        ref_s_48tcps.sdf                 sublayer   (offset=0.00, scale=0.25)\n        ref_s_24tcps_12fps.sdf           sublayer   (offset=0.00, scale=0.50)\n```\n\n----------------------------------------\n\nTITLE: MaterialX Schema Component Listing\nDESCRIPTION: Auto-generated listing of schema components including public classes, Python module files, and resource files for MaterialX USD integration.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/usdMtlx/generatedSchema.classes.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT.\n\n# Public Classes\nmaterialXConfigAPI\ntokens\n\n# Python Module Files\nmodule.cpp\nwrapMaterialXConfigAPI.cpp\nwrapTokens.cpp\n\n# Resource Files\ngeneratedSchema.usda\nplugInfo.json\nschema.usda:usdMtlx/schema.usda\n```\n\n----------------------------------------\n\nTITLE: Composition Results for /PrimWithInternalReference/InternalReference_Child\nDESCRIPTION: Displays the composition results for the child prim path </PrimWithInternalReference/InternalReference_Child>. The prim stack shows its origin from the internally referenced prim </InternalReference> defined in root.sdf.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_BasicReference.testenv/baseline/compositionResults_BasicReference.txt#2025-04-23_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------------------\nResults for composing </PrimWithInternalReference/InternalReference_Child>\n\nPrim Stack:\n    root.sdf             /InternalReference/InternalReference_Child\n```\n\n----------------------------------------\n\nTITLE: Checking Prim Type in C++\nDESCRIPTION: Demonstrates how to check if a prim is of a specific type using IsA<> template function.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/docs/wp_usdlux_for_renderers.rst#2025-04-23_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\nprim.IsA<SomeType>()\n```\n\n----------------------------------------\n\nTITLE: Registering UsdView Expression Variable Edits Test in CMake\nDESCRIPTION: This snippet registers a test for UsdView expression variable edits. It specifies a Python command to run the test script, sets up image comparisons for different steps, defines failure thresholds, and sets an environment variable to enable scene index.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/bin/testusdview/CMakeLists.txt#2025-04-23_snippet_33\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testUsdviewExpressionVariableEdits\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/bin/testusdview --testScript testUsdviewExpressionVariableEdits.py test.usda\"\n    IMAGE_DIFF_COMPARE\n        start.png\n        step_1.png\n        step_2.png\n    FAIL 0.05\n    FAIL_PERCENT 0.03\n    PERCEPTUAL\n    EXPECTED_RETURN_CODE 0\n    ENV\n        USDIMAGINGGL_ENGINE_ENABLE_SCENE_INDEX=1\n)\n```\n\n----------------------------------------\n\nTITLE: Initial Framebuffer Descriptors Configuration\nDESCRIPTION: Defines a sequence of framebuffer descriptors with incrementing dimensions from 2x2 to 10x10. Each descriptor specifies two color textures and a depth texture with matching dimensions.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/imaging/hgiGL/testenv/testHgiGL/baseline/graphicsCmdsDescCache.txt#2025-04-23_snippet_3\n\nLANGUAGE: config\nCODE:\n```\n_FramebufferDesc: {colorTexture0 dimensions:(2, 2, 1), colorTexture1 dimensions:(2, 2, 1), depthFormat 10depthTexture dimensions:(2, 2, 1)}\n_FramebufferDesc: {colorTexture0 dimensions:(3, 3, 1), colorTexture1 dimensions:(3, 3, 1), depthFormat 10depthTexture dimensions:(3, 3, 1)}\n_FramebufferDesc: {colorTexture0 dimensions:(4, 4, 1), colorTexture1 dimensions:(4, 4, 1), depthFormat 10depthTexture dimensions:(4, 4, 1)}\n_FramebufferDesc: {colorTexture0 dimensions:(5, 5, 1), colorTexture1 dimensions:(5, 5, 1), depthFormat 10depthTexture dimensions:(5, 5, 1)}\n_FramebufferDesc: {colorTexture0 dimensions:(6, 6, 1), colorTexture1 dimensions:(6, 6, 1), depthFormat 10depthTexture dimensions:(6, 6, 1)}\n_FramebufferDesc: {colorTexture0 dimensions:(7, 7, 1), colorTexture1 dimensions:(7, 7, 1), depthFormat 10depthTexture dimensions:(7, 7, 1)}\n_FramebufferDesc: {colorTexture0 dimensions:(8, 8, 1), colorTexture1 dimensions:(8, 8, 1), depthFormat 10depthTexture dimensions:(8, 8, 1)}\n_FramebufferDesc: {colorTexture0 dimensions:(9, 9, 1), colorTexture1 dimensions:(9, 9, 1), depthFormat 10depthTexture dimensions:(9, 9, 1)}\n_FramebufferDesc: {colorTexture0 dimensions:(10, 10, 1), colorTexture1 dimensions:(10, 10, 1), depthFormat 10depthTexture dimensions:(10, 10, 1)}\n```\n\n----------------------------------------\n\nTITLE: Registering CMake Test for Pcp ErrorConnectionPermissionDenied\nDESCRIPTION: Defines a CMake test named `testPcpMuseum_ErrorConnectionPermissionDenied` using the `pxr_register_test` macro. This test executes the `testPcpCompositionResults` tool with the `--usd` flag on the `ErrorConnectionPermissionDenied/root.sdf` file, which is expected to cause a permission denied error during composition. The standard output is redirected and compared against `compositionResults_ErrorConnectionPermissionDenied_usd.txt`.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\npxr_register_test(testPcpMuseum_ErrorConnectionPermissionDenied\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd ErrorConnectionPermissionDenied/root.sdf\" \n    STDOUT_REDIRECT compositionResults_ErrorConnectionPermissionDenied_usd.txt\n    DIFF_COMPARE compositionResults_ErrorConnectionPermissionDenied_usd.txt\n)\n```\n\n----------------------------------------\n\nTITLE: Cache Scope Control Function Declarations in C++\nDESCRIPTION: Declaration of two functions that control cache scoping - one to begin a cache scope and one to end it. These are likely used in OpenUSD to manage caching boundaries and resource lifecycle.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/ar/testenv/testArOptionalImplementation/baseline/resolver_with_cache.txt#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n_BeginCacheScope\n_EndCacheScope\n```\n\n----------------------------------------\n\nTITLE: Registering PCP Museum Tests in CMake for OpenUSD\nDESCRIPTION: This code snippet demonstrates the pattern used to register multiple test cases for OpenUSD's Pcp composition results. Each test uses the pxr_register_test CMake function to set up a Python-based test command, specify input files, and define output and comparison files.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npxr_register_test(testPcpMuseum_PayloadsAndAncestralArcs3_allpayloads\n    PYTHON\n    COMMAND \"${CMAKE_INSTALL_PREFIX}/tests/testPcpCompositionResults --usd PayloadsAndAncestralArcs3/root.sdf\" \n    STDOUT_REDIRECT compositionResults_PayloadsAndAncestralArcs3_allpayloads.txt\n    DIFF_COMPARE compositionResults_PayloadsAndAncestralArcs3_allpayloads.txt \n)\n```\n\n----------------------------------------\n\nTITLE: Markdown Links Section\nDESCRIPTION: Reference links for the Contributor Covenant source material, including homepage and version-specific links.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/CODE_OF_CONDUCT.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n```\n\n----------------------------------------\n\nTITLE: Reporting Prohibited USD Reference to Pre-Relocated Prim\nDESCRIPTION: This log output displays a composition error for the prim `/Bad_SubrootRefToPreRelocated` in `root.sdf`. It attempts to reference `/Char/ToBeRelocated` (in `root.sdf`), which is disallowed. This prohibition occurs because `/Char/ToBeRelocated` is the source of a relocation, preventing references to its original path after relocation.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usd/pcp/testenv/testPcpMuseum_RelocateToNone.testenv/baseline/compositionErrors_RelocateToNone.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nErrors while composing </Bad_SubrootRefToPreRelocated>\n\n@RelocateToNone/root.sdf@</Bad_SubrootRefToPreRelocated>\nCANNOT reference:\n@RelocateToNone/root.sdf@</Char/ToBeRelocated>\nwhich is a prohibited child of its parent because it would require allowing opinions from the source of a relocation at @RelocateToNone/root.sdf@</Char/ToBeRelocated>.\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice (Plaintext)\nDESCRIPTION: This is the standard boilerplate text recommended by the Apache License 2.0 appendix for inclusion in project source files, usually within comment blocks. It includes placeholders for the copyright year '[yyyy]' and the copyright owner '[name of copyright owner]', which must be replaced with specific details. It also references the location of the full license text.\nSOURCE: https://github.com/pixaranimationstudios/openusd/blob/dev/pxr/usdImaging/usdviewq/fonts/Roboto_Mono/LICENSE.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```"
  }
]