[
  {
    "owner": "autodesk",
    "repo": "maya-usd",
    "content": "TITLE: Export animation using AL_usdmaya_ExportCommand\nDESCRIPTION: This example demonstrates how to export animation data using the AL_usdmaya_ExportCommand. The `-f` flag specifies the output file path, and the `-animation` flag enables animation export.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/importExport.md#_snippet_1\n\nLANGUAGE: MEL\nCODE:\n```\nAL_usdmaya_ExportCommand -f \"<path/to/out/file.usd>\" -animation\n```\n\n----------------------------------------\n\nTITLE: Import USD with specific variants using Python\nDESCRIPTION: This snippet demonstrates how to import a USD file into Maya using `cmds.mayaUSDImport` and select specific variants for different prims using the `primVariant` flag. The `primVariant` flag requires a list of tuples, where each tuple contains the prim path, variant group name, and variant name.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/commands/Readme.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncmds.mayaUSDImport(\n    file='/tmp/test.usda',\n    primVariant= [\n(\"/primPath/prim_1\", \"VariantGroup\", \"Variant_1\"),\n(\"/primPath/prim_2\", \"VariantGroup\", \"Variant_2\")])\n```\n\n----------------------------------------\n\nTITLE: Undo/Redo Usage in Python with MayaUsd\nDESCRIPTION: This Python code demonstrates how to use UsdUndoBlock in Python to enable undo/redo functionality for USD data model changes. It shows both implicit and explicit UsdUndoableItem handling. The implicit version uses a Maya command for undo/redo. Requires maya.cmds and mayaUsdLib.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/undo/README-USD-Undo.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport maya.cmds as cmds\n\n# create a stage in memory\nself.stage = Usd.Stage.CreateInMemory()\n\n# track the layer state changes\nmayaUsdLib.UsdUndoManager.trackLayerStates(self.stage.GetRootLayer())\n\n# create undo block\nwith mayaUsdLib.UsdUndoBlock():\n    prim = self.stage.DefinePrim('/World', 'Sphere')\n    self.assertTrue(bool(prim))\n\n#undo\ncmds.undo()\n\n#redo\ncmds.redo()\n\n# Explicit item used\nundoItem = mayaUsdLib.UsdUndoableItem()\nwith mayaUsdLib.UsdUndoBlock(undoItem):\n    prim = self.stage.DefinePrim('/World', 'Sphere')\n    self.assertTrue(bool(prim))\n\n#undo\nundoItem.undo()\n\n#redo\nundoItem.redo()\n```\n\n----------------------------------------\n\nTITLE: Configuring File Copy for Plugin Metadata in CMake\nDESCRIPTION: This snippet retrieves the location of the `TRANSLATORS_PACKAGE` library and configures the copying of `plugInfo.json` to specific locations within the build directory. This ensures the plugin's metadata is correctly deployed.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nget_target_property(LIBRARY_LOCATION\n  ${TRANSLATORS_PACKAGE}\n  LOCATION\n  )\n\nget_filename_component(LIBRARY_LOCATION\n  ${LIBRARY_LOCATION}\n  DIRECTORY\n  )\n\nconfigure_file(\n  ${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\n  ${CMAKE_CURRENT_BINARY_DIR}/lib/usd/${TRANSLATORS_PACKAGE}/resources/plugInfo.json\n  )\n\n# Setup the actual plugInfo.json\nset(LIBRARY_LOCATION \"../..\")\nconfigure_file(\n  ${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\n  ${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\n  )\n```\n\n----------------------------------------\n\nTITLE: Importing USD file as Proxy Shape\nDESCRIPTION: This C++ code demonstrates how to import a USD file as a proxy shape node with AL_usdmaya_ProxyShapeImport command. It loads the specified usda file and creates a ProxyShape with a specified name.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nAL_usdmaya_ProxyShapeImport -file \"/scratch/dev/myaweomescene.usda\" -name \"MyAwesomeScene\";\n```\n\n----------------------------------------\n\nTITLE: Create Anonymous Layer with mayaUsdLayerEditor - MEL\nDESCRIPTION: This MEL command creates a new anonymous layer and inserts it as a sublayer into an existing parent layer. It utilizes the `mayaUsdLayerEditor` command with the `-addAnonymous` flag to perform this action.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/MIGRATION_GUIDE.md#_snippet_4\n\nLANGUAGE: MEL\nCODE:\n```\nmayaUsdLayerEditor -edit -addAnonymous  \"new_anon_layer_id\" \"existing_parent_layer_id\";\n```\n\n----------------------------------------\n\nTITLE: Including specific prims using population mask\nDESCRIPTION: This C++ code demonstrates how to include specific prims to read from stage when stage is opened by using the -pmi/-populationMaskInclude flag in AL_usdmaya_ProxyShapeImport command.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\n-populationMaskInclude \"/only/show/this/prim1,/only/show/this/prim2\"\n```\n\n----------------------------------------\n\nTITLE: Setting USD Attributes for Mesh with UsdMaya Adaptor (Python)\nDESCRIPTION: This snippet shows how to create and remove USD attributes for a mesh using the UsdMaya adaptor and UsdGeom schema.  It demonstrates setting the 'subdivisionScheme' attribute to 'loop', removing it, and setting the 'purpose' attribute to 'proxy'. Dependencies: pxr.UsdGeom, pxr.UsdMaya.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/doc/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pxr import UsdGeom, UsdMaya\nUsdMaya.Adaptor(\"|my|mesh|shape\").GetSchema(UsdGeom.Mesh).CreateAttribute(UsdGeom.Tokens.subdivisionScheme).Set(UsdGeom.Tokens.loop) # set subdivisionScheme=loop\nUsdMaya.Adaptor(\"|my|mesh|shape\").GetSchema(UsdGeom.Mesh).RemoveAttribute(UsdGeom.Tokens.subdivisionScheme) # unauthor subdivisionScheme\nUsdMaya.Adaptor(\"|my|mesh|shape\").GetSchema(UsdGeom.Mesh).CreateAttribute(UsdGeom.Tokens.purpose).Set(UsdGeom.Tokens.proxy) # this works because a Mesh is an Imageable\n```\n\n----------------------------------------\n\nTITLE: Computing Node Output Value (C++)\nDESCRIPTION: This code implements the compute method for the Maya node. It checks if the requested plug is the outputFloat plug. If so, it retrieves the inputFloat value using inputFloatValue, calculates the output value (in this case, simply passing the input through), sets the outputFloat value using outputFloatValue, and returns kSuccess. If the requested plug is not the outputFloat plug, it returns kInvalidParameter.  This demonstrates how to access and manipulate attribute values within the compute function.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/developer.md#_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nMStatus MyMayaNode::compute(const MPlug& plug, MDataBlock& dataBlock)\n{\n  if(plug == outFloat()) {\n    return outputFloatValue(dataBlock, outFloat(), inputFloatValue(dataBlock, inFloat()));\n  }\n  // not my param\n  return MS::kInvalidParameter;\n}\n```\n\n----------------------------------------\n\nTITLE: Include Order Example C++\nDESCRIPTION: This example illustrates the prescribed include order for C++ headers in the Maya-USD project. It demonstrates the separation of different types of headers (private, public, library, Maya) with blank lines and alphabetical sorting within each section.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/codingGuidelines.md#_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"exportTranslator.h\"\n\n#include \"private/util.h\"\n\n#include <mayaUsd/fileio/jobs/jobArgs.h>\n#include <mayaUsd/fileio/jobs/writeJob.h>\n#include <mayaUsd/fileio/shading/shadingModeRegistry.h>\n#include <mayaUsd/fileio/utils/writeUtil.h>\n\n#include <usdUfe/ufe/UsdSceneItem.h>\n\n#include <maya/MFileObject.h>\n#include <maya/MGlobal.h>\n#include <maya/MSelectionList.h>\n#include <maya/MString.h>\n\n#include <string>\n\n#ifdef UFE_V3_FEATURES_AVAILABLE\n#include <ufe/types.h>\n#endif\n```\n\n----------------------------------------\n\nTITLE: Export using Maya file interface\nDESCRIPTION: This example shows how to export a Maya scene to USD using the Maya file interface. It sets various export options such as dynamic attributes, meshes, nurbs curves, duplicate instances, animal schema, merge transforms, animation, timeline range, and frame range.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/importExport.md#_snippet_0\n\nLANGUAGE: MEL\nCODE:\n```\nfile -force -options \"Dynamic_Attributes=1;Meshes=1;Nurbs_Curves=1;Duplicate_Instances=1;Use_Animal_Schema=1;Merge_Transforms=1;Animation=1;Use_Timeline_Range=1;Frame_Min=1;Frame_Max=1;Filter_Sample=0;\" -typ \"AL usdmaya export\" -es \"/var/tmp/vv.usdc\";\n```\n\n----------------------------------------\n\nTITLE: Registering Import Plugin with MayaUSD (Python)\nDESCRIPTION: This code snippet demonstrates how to register an import plugin with MayaUSD using the `mayaUsd.lib.JobContextRegistry.RegisterImportJobContext` and `mayaUsd.lib.JobContextRegistry.SetImportOptionsUI` functions. The import plugin's job context name must be unique.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/tutorials/import-export-plugin/README-PYTHON.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmayaUsd.lib.JobContextRegistry.RegisterImportJobContext\nmayaUsd.lib.JobContextRegistry.SetImportOptionsUI\n```\n\n----------------------------------------\n\nTITLE: Defining Static Members and Initialise/Compute Functions (C++)\nDESCRIPTION: This code defines the static MObject members for the attributes and provides empty implementations for the initialise and compute methods.  The static MObject instances are required for attribute management, and the initialise method is crucial for attribute setup. The compute function is where the node's logic is executed, processing input data and producing output data.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/developer.md#_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n// the handles to the attribute definitions\nMObject MyMayaNode::m_inFloat;\nMObject MyMayaNode::m_outFloat;\n\n// this will decsribe the attributes on our node\nMStatus MyMayaNode::initialise()\n{\n  // to do\n}\n\n// this will implement the compute method.\nMStatus MyMayaNode::compute(const MPlug& plug, MDataBlock& dataBlock)\n{\n  // to do\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Transforms from ProxyShape in Maya (C++)\nDESCRIPTION: This command removes all Maya transform nodes previously generated to drive prims within a USD proxy shape. It's useful for cleaning up the Maya scene after importing transforms from USD and is undoable.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_13\n\nLANGUAGE: c++\nCODE:\n```\nAL_usdmaya_ProxyShapeRemoveAllTransforms \"ProxyShape1\";  // drive the USD prims\n```\n\n----------------------------------------\n\nTITLE: Registering an Edit Router in Python\nDESCRIPTION: This Python code snippet demonstrates how to register an edit router using the `mayaUsd.lib.registerEditRouter` function.  It registers the `routeToSessionLayer` function to handle 'visibility' operations, ensuring that edits to visibility are routed according to the logic within `routeToSessionLayer`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/EditRouting.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport mayaUsd.lib\nmayaUsd.lib.registerEditRouter('visibility', routeToSessionLayer)\n\n```\n\n----------------------------------------\n\nTITLE: Connect Maya Time to USD Assembly Nodes\nDESCRIPTION: This Python code snippet connects Maya's global time to the 'time' attribute of all pxrUsdReferenceAssembly nodes in the scene. This allows for animation within the USD assembly to be driven by Maya's timeline. The code iterates through all assembly nodes and creates a connection between 'time1.outTime' and each assembly node's 'time' attribute. It depends on the maya.cmds module.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/doc/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Connecting Maya's global time to all assembly nodes in a scene \nassemblyNodes = cmds.ls(type='pxrUsdReferenceAssembly')\nfor assemblyNode in assemblyNodes:\n    cmds.connectAttr('time1.outTime', '%s.time' % assemblyNode)\n```\n\n----------------------------------------\n\nTITLE: Applying Schemas with Custom Adaptor in Python\nDESCRIPTION: This code defines a custom `BulletMassShemaAdaptor` class that inherits from `mayaUsdLib.SchemaApiAdaptor`. It includes `ApplySchema` and `UnapplySchema` methods to create and remove a bullet simulation containing a Maya shape. It uses `RigidBody.CreateRigidBody.command` to create the rigid body.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass BulletMassShemaAdaptor(mayaUsdLib.SchemaApiAdaptor):\n    #\n    # These two extra function are added to the\n    # BulletMassShemaAdaptor previously defined:\n    #\n    def ApplySchema(self, dgModifier):\n        \"\"\"Creates a bullet simulation containing the Maya shape\"\"\"\n        if self.GetMayaObjectForSchema() is not None:\n            return True\n\n        path = om.MDagPath.getAPathTo(self.mayaObject)\n\n        if not path or not path.pop():\n            return False\n\n        BulletUtils.checkPluginLoaded()\n        RigidBody.CreateRigidBody.command(transformName=path.fullPathName(), bAttachSelected=False)\n\n        return self.GetMayaObjectForSchema() is not None\n\n    def UnapplySchema(self, dgModifier):\n        \"\"\"Remove the Maya shape from a simulation\"\"\"\n        if self.GetMayaObjectForSchema() is None:\n            # Already unapplied?\n            return False\n\n        path = om.MDagPath.getAPathTo(self.mayaObject)\n        if not path or not path.pop():\n            return False\n\n        BulletUtils.checkPluginLoaded()\n        BulletUtils.removeBulletObjectsFromList([path.fullPathName()])\n\n        return self.GetMayaObjectForSchema() is None\n```\n\n----------------------------------------\n\nTITLE: Registering Export Plugin with MayaUSD (Python)\nDESCRIPTION: This code snippet demonstrates how to register an export plugin with MayaUSD using the `mayaUsd.lib.JobContextRegistry.RegisterExportJobContext` and `mayaUsd.lib.JobContextRegistry.SetExportOptionsUI` functions. The export plugin's job context name must be unique.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/tutorials/import-export-plugin/README-PYTHON.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmayaUsd.lib.JobContextRegistry.RegisterExportJobContext\nmayaUsd.lib.JobContextRegistry.SetExportOptionsUI\n```\n\n----------------------------------------\n\nTITLE: Converting Maya Path to UsdPrim and Vice Versa in Python\nDESCRIPTION: This snippet illustrates the conversion between Maya paths and USD Prims using `getUsdPrimFromMayaPath` and `getMayaPathFromUsdPrim`. It selects the first selected object in Maya, retrieves its long name, and uses it to get the corresponding USD Prim. It then uses the Prim to get the Maya Path. Finally it asserts that the primPath attribute of the maya node is the same as the string representation of the Prim's path.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/python.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom maya import cmds\nfrom AL import usdmaya\n\n# Prim for Maya path\nprim = usdmaya.ProxyShape.getUsdPrimFromMayaPath(cmds.ls(selected=True, long=True)[0])\n\n# Maya path for Prim\nproxy = usdmaya.ProxyShape.getByName(\"AL_usdmaya_ProxyShape\")\nassert proxy is not None\nnode = proxy.getMayaPathFromUsdPrim(prim)\n\n# Compare\nassert cmds.getAttr(\"{}.primPath\".format(node)) == str(prim.GetPath())\n```\n\n----------------------------------------\n\nTITLE: Preparing Scene and Exporting PhysicsRigidBodyAPI with Animation in Python\nDESCRIPTION: This code prepares a Maya scene with an animated rigid body and exports it to USD. It creates a sphere, applies a rigid body using `RigidBody.CreateRigidBody().command`, and sets keyframes on the `initialVelocity` attributes. The scene is then exported to a USD file with the `PhysicsRigidBodyAPI` schema included, using a specific frame range.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ncmds.file(new=True, f=True)\ns1T = cmds.polySphere()[0]\nrbT, rbShape = RigidBody.CreateRigidBody().command(\n\tautoFit=True,\n\tcolliderShapeType= RigidBody.eShapeType.kColliderSphere,\n\tmeshes=[s1T],\n\tradius=1.0,\n\tmass=5.0)\nsl = om.MSelectionList()\nsl.add(s1T)\nbulletPath = sl.getDagPath(0)\nbulletPath.extendToShape(1)\ncmds.setKeyframe(bulletPath, at=\"initialVelocityX\", t=1, v=5.0)\ncmds.setKeyframe(bulletPath, at=\"initialVelocityX\", t=10, v=50.0)\ncmds.setKeyframe(bulletPath, at=\"initialVelocityY\", t=1, v=6.0)\ncmds.setKeyframe(bulletPath, at=\"initialVelocityY\", t=10, v=60.0)\ncmds.setKeyframe(bulletPath, at=\"initialVelocityZ\", t=1, v=7.0)\ncmds.setKeyframe(bulletPath, at=\"initialVelocityZ\", t=10, v=70.0)\n\ncmds.mayaUSDExport(mergeTransformAndShape=True, file=\"RBExport.usda\",\n\t\t\t\t   apiSchema=[\"PhysicsRigidBodyAPI\"], frameRange=(1, 10))\n```\n\n----------------------------------------\n\nTITLE: Configuring plugInfo.json File in CMake\nDESCRIPTION: This snippet configures the plugInfo.json file, which is essential for Maya to discover and load the plugin.  It uses `configure_file` to copy and process `plugInfo.json.in` to `plugInfo.json` in the build directory, replacing variables with their CMake values using `@ONLY` to prevent recursive variable expansion. LIBRARY_LOCATION is set to specify the relative path to the plugin directory, which is used in the plugInfo.json.in template.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/pxrUsdTranslators/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIBRARY_LOCATION \"../../plugin\")\nconfigure_file (\n  \"${CMAKE_CURRENT_SOURCE_DIR}/plugInfo.json.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\"\n  @ONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Compute Prim Lock Status Python\nDESCRIPTION: This Python snippet demonstrates how to compute the lock status of a prim using the ModelAPI's ComputeLock() method. This method determines the effective lock state of the prim, considering inheritance and metadata. This requires the AL_USDMaya plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/lock/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntransCApi.ComputeLock()\n```\n\n----------------------------------------\n\nTITLE: Importing all transforms with AL_usdmaya_ProxyShapeImportAllTransforms\nDESCRIPTION: This C++ code demonstrates how to traverse the prim hierarchy, and for each prim found, an Transform node will be created with AL_usdmaya_ProxyShapeImportAllTransforms command. The -pushToPrim/-p2p option controls whether the generated Transforms have their pushToPrim attribute set to true.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_12\n\nLANGUAGE: c++\nCODE:\n```\nAL_usdmaya_ProxyShapeImportAllTransforms \"ProxyShape1\" -p2p true;  // drive the USD prims\nAL_usdmaya_ProxyShapeImportAllTransforms \"ProxyShape1\" -p2p false ; // observe the USD prims\n```\n\n----------------------------------------\n\nTITLE: Attribute Edit Router in Python\nDESCRIPTION: This Python code snippet shows an example of an attribute edit router that routes 'visibility' attribute edits to the session layer of the stage containing the prim. It retrieves the prim and attribute name from the context, checks if the attribute name is 'visibility', and then sets the 'layer' in the routingData dictionary to the identifier of the session layer.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/EditRouting.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef routeAttrToSessionLayer(context, routingData):\n    '''\n    Edit router implementation for 'attribute' operations that routes\n    to the session layer of the stage that contains the prim.\n    '''\n    prim = context.get('prim')\n    if prim is None:\n        print('Prim not in context')\n        return\n\n    attrName = context.get('attribute')\n    if attrName != \"visibility\":\n        return\n\n    routingData['layer'] = prim.GetStage().GetSessionLayer().identifier\n\n```\n\n----------------------------------------\n\nTITLE: Alembic Chaser Example\nDESCRIPTION: This Python snippet demonstrates how to use the Alembic chaser during Maya USD export to export Maya attributes matching a specific prefix as USD attributes. It loads the pxrUsd plugin and uses the mayaUSDExport command with the chaser and chaserArgs options.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/commands/Readme.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncmds.loadPlugin('pxrUsd')\ncmds.mayaUSDExport(\n    file=usdFilePath,\n    chaser=['alembic'],\n    chaserArgs=[\n       ('alembic', 'attrprefix', 'ABC_'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Exporting to Alembic from Maya\nDESCRIPTION: This MEL command exports a Maya object (pSphere1) to an Alembic file, including color set information. The -wcs flag specifies that all color sets on MFnMeshes should be written as color 3 or color 4 indexed geometry parameters with face-varying scope.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/importExport.md#_snippet_11\n\nLANGUAGE: MEL\nCODE:\n```\nAbcExport -j \"-root |pSphere1 -writeColorSets -f /var/tmp/colouredVerts.abc\";\n```\n\n----------------------------------------\n\nTITLE: Defining PlugInfo File CMake\nDESCRIPTION: Defines the plugInfo file that is part of the project. PlugInfo describes the plugin metadata.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/utils/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(PLUGINFO\n    plugInfo.json)\n```\n\n----------------------------------------\n\nTITLE: Register Edit Router in Python\nDESCRIPTION: This Python code registers an edit router with a custom operation name. The `routeCmdToRootLayer` function determines the destination layer based on the provided context. The `mayaUsd.lib.registerEditRouter` function associates the custom operation name with the routing function, allowing the command to be routed to the desired layer.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/EditRouting.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nimport mayaUsd.lib\n\ndef routeCmdToRootLayer(context, routingData):\n    '''\n    Route the command to the root layer.\n    '''\n    prim = context.get('prim')\n    if prim:\n        routingData['layer'] = prim.GetStage().GetRootLayer().identifier\n\nmayaUsd.lib.registerEditRouter('my studio name: custom operation name', routeCmdToRootLayer)\n```\n\n----------------------------------------\n\nTITLE: Get Prim Lock Metadata Python\nDESCRIPTION: This Python snippet retrieves the direct metadata value for the lock status of a prim using the ModelAPI's GetLock() method. This returns the explicit lock setting defined on the prim, without considering inheritance. This requires the AL_USDMaya plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/lock/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntransCApi.GetLock()\n```\n\n----------------------------------------\n\nTITLE: Extra Data Plugin Class Definition for Mesh Attributes in C++\nDESCRIPTION: This C++ code defines a class `TranslatorMyRenderMeshAttributes` that inherits from `ExtraDataPluginBase`. It registers itself as an extra data plugin using `AL_USDMAYA_DECLARE_EXTRA_DATA_PLUGIN` and overrides virtual functions for initialization, importing, post-importing, updating, pre-teardown, exporting objects, and writing edits. This plugin is specifically for handling mesh (MFn::kMesh) attributes.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/extraDataTranslatorPlugins.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include \"AL/usdmaya/fileio/translators/ExtraDataPlugin.h\"\n#include \"AL/usdmaya/fileio/translators/TranslatorContext.h\"\n#include <maya/MPlug.h>\n\nPXR_NAMESPACE_USING_DIRECTIVE\n\nnamespace AL {\nnamespace usdmaya {\nnamespace fileio {\nnamespace translators {\n\n//----------------------------------------------------------------------------------------------------------------------\nclass TranslatorMyRenderMeshAttributes\n  : public ExtraDataPluginBase\n{\npublic:\n\n  AL_USDMAYA_DECLARE_EXTRA_DATA_PLUGIN(TranslatorMyRenderMeshAttributes);\n\n  MFn::Type getFnType() const override\n    { return MFn::kMesh; };\n  MStatus initialize() override;\n  MStatus import(const UsdPrim& prim, const MObject& parent) override;\n  MStatus postImport(const UsdPrim& prim) override;\n  MStatus update(const UsdPrim& path) override;\n  MStatus preTearDown(UsdPrim& prim) override;\n  MStatus exportObject(UsdPrim& prim, const MObject& node, const ExporterParams& params) override;\n  MStatus writeEdits(MObject object, UsdPrim prim, const ExporterParams& params);\n};\n\n} // translators\n} // fileio\n} // usdmaya\n} // AL\n```\n\n----------------------------------------\n\nTITLE: Exporting with Job Context via Command Line in Python\nDESCRIPTION: This Python code snippet shows how to export a scene with a specified job context using the `cmds.mayaUSDExport` command. The `jobContext` parameter is used to specify the desired job context. The second example shows the equivalent expanded command without using jobContext parameter.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/Managing_export_options_via_JobContext_in_Python.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncmds.mayaUSDExport(\n    mergeTransformAndShape=True,\n    file=\"MyScene\", \n    jobContext=[\"MyContext\"]\n    )\n```\n\nLANGUAGE: python\nCODE:\n```\ncmds.mayaUSDExport(\n    mergeTransformAndShape=True,\n    file=\"MyScene\", \n    shadingMode=\"useRegistry\",\n    convertMaterialsTo=[\"MyContextMaterials\"],\n    apiSchema=[\"MyContextLightApi\", \"MyContextShadowApi\"],\n    chaser=[\"MyContextMeshChaser\", \"MyContextXformChaser\"],\n    chaserArgs=[[\"MyContextMeshChaser\", \"frobiness\", \"42\"],\n                [\"MyContextXformChaser\", \"precision\", \"5\"]]\n    )\n```\n\n----------------------------------------\n\nTITLE: ShadowAPI Adaptor Class (Python)\nDESCRIPTION: This snippet defines a specialized ShadowAPI adaptor class that maps USD attributes (inputs:shadow:color, inputs:shadow:enable) directly to Maya attributes (shadowColor, useRayTraceShadows) of a pointLight.  This demonstrates how to create custom adaptors for scenarios where USD properties should be reflected in Maya attributes.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nclass shadowApiAdaptorLightShape(mayaUsdLib.SchemaApiAdaptor):\n    def CanAdapt(self):\n        \"\"\"Can this adaptor adapt the light? Can run some extra tests and reject\n        if there are issues with the light.\"\"\"\n        node = om.MFnDependencyNode(self.mayaObject)\n        print(\"Yes, I can adapt\", node.name())\n        return True\n    \n    def GetAdaptedAttributeNames(self):\n        \"\"\"Return the list of USD attribute names that are directly mapped to a Maya attribute\"\"\"\n        return [\"inputs:shadow:color\", \"inputs:shadow:enable\"]\n\n    def GetMayaNameForUsdAttrName(self, usdName):\n        \"\"\"Return the Maya attribute name that fits the USD attribute name.\"\"\"\n        if usdName == \"inputs:shadow:color\":\n            return \"shadowColor\"\n        if usdName == \"inputs:shadow:enable\":\n            # Two Maya enablers. Return the RayTrace one.\n            return \"useRayTraceShadows\"\n```\n\n----------------------------------------\n\nTITLE: Installing the Plugin in CMake\nDESCRIPTION: This snippet defines the installation rules for the target 'mayaUsdPlugin'. It specifies that the library and runtime components should be installed to a subdirectory named 'plugin' within the INSTALL_DIR_SUFFIX.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/plugin/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS\n    ${TARGET_NAME}\n    LIBRARY\n        DESTINATION ${INSTALL_DIR_SUFFIX}/plugin\n    RUNTIME\n        DESTINATION ${INSTALL_DIR_SUFFIX}/plugin\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting PhysicsMassAPI on a Sphere in Python\nDESCRIPTION: This code creates a sphere, attaches a rigid body using `RigidBody.CreateRigidBody().command`, and then exports the scene to a USD file using `cmds.mayaUSDExport`. The `apiSchema` flag is set to `PhysicsMassAPI`, which ensures that the mass value on the simulation is exported to USD.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nsphere = cmds.polySphere()[0]\nrbT, rbShape = RigidBody.CreateRigidBody().command(\n    autoFit=True,\n    colliderShapeType= RigidBody.eShapeType.kColliderSphere,\n    meshes=[sphere],\n    radius=1.0,\n    mass=5.0)\n\ncmds.mayaUSDExport(mergeTransformAndShape=True, file=\"physics_api_on_sphere.usda\", apiSchema=[\"PhysicsMassAPI\"])\n```\n\n----------------------------------------\n\nTITLE: Defining a Maya Node with NodeHelper Class (C++)\nDESCRIPTION: This code defines a basic Maya node class, MyMayaNode, inheriting from MPxNode and AL::maya::NodeHelper. It utilizes the AL_DECLARE_NODE and AL_DECL_ATTRIBUTE macros to automatically generate necessary methods and members for node creation and attribute handling.  This includes declaring input and output float attributes and overriding the compute method.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/developer.md#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n/// This will be a very basic node that has 1 input, and 1 output. \n/// The compute will simply pass the input float through to the output. \nclass MyMayaNode : public MPxNode, AL::maya::NodeHelper\n{\npublic:\n  // this adds a creator method, kTypeId, and kTypeName\n  AL_DECLARE_NODE();\n\n  // declare the attributes (more on that in a bit). \n  AL_DECL_ATTRIBUTE(inFloat);\n  AL_DECL_ATTRIBUTE(outFloat);\n\n  // and we'll add a compute method, because we can!\n  MStatus compute(const MPlug& plug, MDataBlock& dataBlock) override;\n};\n```\n\n----------------------------------------\n\nTITLE: Translating Multiple Prims (Import) (C++)\nDESCRIPTION: This command executes a translator plugin to import multiple prims into Maya for editing. It uses the *ip* flag with a comma separated list of prim paths to trigger the import process. This allows users to bring a USD prim into Maya, edit it, and push the changes back to USD.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_19\n\nLANGUAGE: c++\nCODE:\n```\nAL_usdmaya_TranslatePrim -ip \"/MyPrim,/YourPrim\";  //< Run the Prim's translator's import on multiple Prims\n```\n\n----------------------------------------\n\nTITLE: PhysicsRigidBodyShemaAdaptor for Export in Python\nDESCRIPTION: This code defines a `BulletRigidBodyShemaAdaptor` class that exports rigid body data to USD. `CanAdaptForExport` checks for a bullet shape. `CopyToPrim` applies the `UsdPhysics.RigidBodyAPI` and copies the `initialVelocity` attribute to the USD prim using `mayaUsdLib.WriteUtil.SetUsdAttr()`. This enables exporting animation data to the USD file.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# We have multiple adaptors using this function, so it makes sense to extract it\ndef _GetBullet(mayaNode):\n    \"\"\"Navigate to a bullet shape if it exists\"\"\"\n\tpath = om.MDagPath.getAPathTo(mayaNode)\n\tif not path or not path.pop():\n\t\treturn None\n\n\tfor i in range(path.numberOfShapesDirectlyBelow()):\n\t\tpath.extendToShape(i)\n\t\tdepFn = om.MFnDependencyNode(path.node())\n\t\tif depFn.typeName == \"bulletRigidBodyShape\":\n\t\t\treturn path.node()\n\t\tpath.pop()\n\n\treturn None\n\nclass BulletRigidBodyShemaAdaptor(mayaUsdLib.SchemaApiAdaptor):\n    def CanAdaptForExport(self, jobArgs):\n        \"\"\"Can always export if bullet is found.\"\"\"\n        return _GetBullet(self.mayaObject) is not None\n\n    def CopyToPrim(self, prim, usdTime, valueWriter):\n        \"\"\"Barebones export callback.\"\"\"\n        rbSchema = UsdPhysics.RigidBodyAPI.Apply(prim)\n        velAttr = rbSchema.CreateVelocityAttr()\n        depFn = om.MFnDependencyNode(_GetBullet(self.mayaObject))\n        velocityPlug = depFn.findPlug(\"initialVelocity\", False)\n        mayaUsdLib.WriteUtil.SetUsdAttr(velocityPlug, velAttr, usdTime, valueWriter)\n        return True\n\nmayaUsdLib.SchemaApiAdaptor.Register(BulletRigidBodyShemaAdaptor,\n                                     \"mesh\", \"PhysicsRigidBodyAPI\")\n```\n\n----------------------------------------\n\nTITLE: Export with extensive animation check disabled\nDESCRIPTION: This example demonstrates disabling the extensive animation check during export using AL_usdmaya_ExportCommand. The `-eac 0` or `-extensiveAnimationCheck 0` flag disables the check. The `-ani` flag enables animation export.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/importExport.md#_snippet_9\n\nLANGUAGE: MEL\nCODE:\n```\nAL_usdmaya_ExportCommand -f \"<path/to/out/file.usd>\"  -eac 0 -ani\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Library with CMake\nDESCRIPTION: This CMake snippet creates a shared library named ${PROJECT_NAME}. It leverages CMake's `add_library` command with the `SHARED` option to produce a dynamically linked library. The library will include code and resources defined in subsequent `target_sources` and related commands.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/ui/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(${PROJECT_NAME} SHARED)\n```\n\n----------------------------------------\n\nTITLE: USD Data with Explicit Frame Range\nDESCRIPTION: This USD data defines an ALFrameRange prim named 'frame_range' within an Xform named 'shot_name'.  The ALFrameRange prim has explicitly defined animationStartFrame, startFrame, endFrame, animationEndFrame, and currentFrame values. These values will override the Maya playback options and timeline.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/frameRanges/README.md#_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\n#usda 1.0\n(\n    defaultPrim = \"shot_name\"    \n)\n\ndef Xform \"shot_name\" ()\n{\n    def ALFrameRange \"frame_range\" ()\n    {\n        double animationStartFrame = 1072\n        double startFrame = 1080\n        double endFrame = 1200\n        double animationEndFrame = 1290\n        \n        double currentFrame = 1100\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Load Maya USD Plugin in Python\nDESCRIPTION: This Python snippet loads the AL_USDMayaPlugin in Maya. It uses the maya.cmds module to call the loadPlugin command, making all the plugin's features available.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/basicUsage.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom maya import cmds\ncmds.loadPlugin('AL_USDMayaPlugin')\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Definitions for usdUfe\nDESCRIPTION: This snippet sets various compiler definitions for the usdUfe project. It configures debug flags based on the build type, enables Maya's new prim delete feature, and defines export symbols and package names. OS specific flags are also defined, along with a flag indicating whether the project is building for windows.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${PROJECT_NAME}\n    PUBLIC\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:TBB_USE_DEBUG>\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_DEBUG_PYTHON>\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_LINKING_PYTHON>\n        $<$<BOOL:${MAYA_ENABLE_NEW_PRIM_DELETE}>:MAYA_ENABLE_NEW_PRIM_DELETE>\n    PRIVATE\n        USDUFE_EXPORT\n        MFB_PACKAGE_NAME=\"${PROJECT_NAME}\"\n        MFB_ALT_PACKAGE_NAME=\"${PROJECT_NAME}\"\n        MFB_PACKAGE_MODULE=\"${PROJECT_NAME}\"\n        $<$<BOOL:${IS_MACOSX}>:OSMac_>\n        $<$<BOOL:${IS_LINUX}>:LINUX>\n\n        # this flag is needed when building for Maya\n        $<$<BOOL:${IS_WINDOWS}>:WIN32>\n)\n```\n\n----------------------------------------\n\nTITLE: USD Data with Root Layer Frame Range\nDESCRIPTION: This USD data defines a root layer with startTimeCode and endTimeCode metadata. An ALFrameRange prim is defined, but it does not contain any explicit frame range attributes. Therefore, when this USD file is imported into Maya, the timeline will be set according to the startTimeCode and endTimeCode defined in the root layer.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/frameRanges/README.md#_snippet_3\n\nLANGUAGE: usd\nCODE:\n```\n#usda 1.0\n(\n    startTimeCode = 1072\n    endTimeCode = 1290\n    defaultPrim = \"shot_name\"    \n)\n\ndef Xform \"shot_name\" ()\n{\n    def ALFrameRange \"frame_range\" ()\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding or Creating a LayerManager and Getting Layer Identifiers in Python\nDESCRIPTION: This snippet shows how to find or create a LayerManager instance using `findOrCreate()` and then retrieves the layer identifiers using `getLayerIdentifiers()`. It prints the list of layer identifiers.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/python.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom AL import usdmaya\ntheLayerMan = usdmaya.LayerManager.findOrCreate()\nprint theLayerMan.getLayerIdentifiers()\n```\n\n----------------------------------------\n\nTITLE: Define Target Sources (CMake)\nDESCRIPTION: This snippet defines the source files to be compiled into the ${PROJECT_NAME} target, using the target_sources command in CMake. These source files implement various commands, such as exporting, importing, listing job contexts, and editing layers in Maya USD.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/commands/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        baseExportCommand.cpp\n        baseImportCommand.cpp\n        baseListJobContextsCommand.cpp\n        baseListShadingModesCommand.cpp\n        editTargetCommand.cpp\n        layerEditorCommand.cpp\n        layerEditorWindowCommand.cpp\n        schemaCommand.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Prim Path as Maya Transform (C++)\nDESCRIPTION: This command imports a specified prim path and its parent transforms from USD into Maya as AL_usdmaya_Transform nodes. Modifications made to these Maya transforms will be directly translated into USD, and the changes will be stored within the current edit target.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_14\n\nLANGUAGE: c++\nCODE:\n```\nAL_usdmaya_ProxyShapeImportPrimPathAsMaya \"ProxyShape1\" -pp \"/some/prim/path\";\n```\n\n----------------------------------------\n\nTITLE: Import USD file using Proxy Shape in MEL\nDESCRIPTION: This MEL command imports a USD file using the AL_usdmaya_ProxyShapeImport command. It specifies the file path to the USD file that needs to be imported. The AL_USDMAYA_SOURCE_LOCATION environment variable should be defined.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/basicUsage.md#_snippet_2\n\nLANGUAGE: mel\nCODE:\n```\nAL_usdmaya_ProxyShapeImport -file \"${AL_USDMAYA_SOURCE_LOCATION}/AL_USDMaya/src/samples/testchar_animallogo01_surfgeo_highres.usd\";\n```\n\n----------------------------------------\n\nTITLE: Resyncing ProxyShape with USD Changes (C++)\nDESCRIPTION: This command informs AL_USDMaya that the Maya scene at a specified prim path and its descendants may be affected by upcoming changes in USD. It triggers a USDNotice call, updating corresponding Maya nodes and internal caches.  Clients are expected to then modify the stage to trigger a USDNotice which updates corresponding maya nodes.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_17\n\nLANGUAGE: c++\nCODE:\n```\nAL_usdmaya_ProxyShapeResync -p \"ProxyShape1\" -pp \"/some/prim/path\"\n```\n\n----------------------------------------\n\nTITLE: Defining Include Directories\nDESCRIPTION: This snippet defines the include directories for the `mayaUsdAPI` library.  It includes the PXR USD include directories, Maya include directories, and the binary output directory for generated headers.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${PROJECT_NAME}\n    PRIVATE\n        ${PXR_INCLUDE_DIRS}\n        ${MAYA_INCLUDE_DIRS}\n        ${CMAKE_BINARY_DIR}/include\n)\n```\n\n----------------------------------------\n\nTITLE: Using Alembic Chaser with attrprefix option (Python)\nDESCRIPTION: This code shows how to use the `usdExport` command with the `AlembicChaser` to export Maya attributes with specified prefixes and namespaces to USD. The `attrprefix` option allows mapping Maya attribute prefixes to different USD namespaces.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/doc/README.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncmds.usdExport(\n    file=usdFilePath,\n    chaser=['alembic'],\n    chaserArgs=[\n       ('alembic', 'attrprefix', 'ABC_,ABC2_=customPrefix_,ABC3_=,ABC4_=customNamespace:'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Getting a ProxyShape by Name and its UsdStage in Python\nDESCRIPTION: This code retrieves a specific ProxyShape in the scene by its name using `getByName` and then obtains the corresponding USD stage associated with that proxy shape using `getUsdStage()`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/python.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom AL import usdmaya\nmyShape = usdmaya.ProxyShape.getByName('name_of_my_Proxy_Shape')\ntheStage = myShape.getUsdStage()\n```\n\n----------------------------------------\n\nTITLE: Preventing Loadable Prims from being Loaded\nDESCRIPTION: This C++ code demonstrates how to prevent all loadable prims from being loaded when importing the USD stage by specifying the unloaded flag in AL_usdmaya_ProxyShapeImport command.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_9\n\nLANGUAGE: c++\nCODE:\n```\n-unloaded true   //< don't load any loadable prims\n-unloaded false  //< load all loadable prims    \n```\n\n----------------------------------------\n\nTITLE: Animate Cue Ball in Maya with USD (Python)\nDESCRIPTION: This python script loads a USD stage into Maya, animates a cue ball by changing a variant and setting keyframes on its transform, and exports the cue ball animation to a USD file. It utilizes the AL_USDMaya plugin for USD integration in Maya.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/endToEndMaya/README.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nimport maya\nimport os\nfrom pxr import Sdf\n\nASSET_BASE = os.getcwd()\n\ndef LoadStage():\n    if not maya.cmds.pluginInfo('AL_USDMayaPlugin', l=True, q=True):\n        maya.cmds.loadPlugin('AL_USDMayaPlugin')\n    stageFile = os.path.join(ASSET_BASE, 'shots/s00_01/s00_01.usd')\n    if not os.path.exists(stageFile):\n        raise RuntimeError('File not found: %s'%stageFile)\n    maya.cmds.AL_usdmaya_ProxyShapeImport(f=stageFile, name='shot')\n\ndef GetStage():\n    from AL import usdmaya\n    stageCache = usdmaya.StageCache.Get()\n    stages = stageCache.GetAllStages()\n    if stages:\n        return stages[0]\n    else:\n        raise RuntimeError('No stage loaded in AL_USDMaya!')\n\ndef AnimateCue():\n    maya.cmds.AL_usdmaya_ChangeVariant('shot', pp='/World/anim', vs='animVariant', v='rig')\n    maya.cmds.currentTime(1)\n    maya.cmds.select('cueball_rig:ball_ctrl')\n    maya.cmds.move(0, 77, 0, r=True)\n    maya.cmds.setKeyframe('|shot|World|anim|CueBall|cueball_rig:ball_ctrl.translate')\n    maya.cmds.currentTime(10)\n    maya.cmds.move(14, 0, -7, r=True)\n    maya.cmds.setKeyframe('|shot|World|anim|CueBall|cueball_rig:ball_ctrl.translate')\n\ndef ExportCueAnimation():\n    maya.cmds.select('cueball_rig:Ball')\n    maya.cmds.AL_usdmaya_ExportCommand(f=os.path.join(ASSET_BASE, 'shots/s00_01/s00_01_animcue_tmp.usd'), selected=True, frameRange=(1,10))\n    os.rename('shots/s00_01/s00_01_animcue_tmp.usd', 'shots/s00_01/s00_01_animcue.usd') # temp workaround for limitation in ExportCommand to override existing layer\n\nmaya.cmds.file(f=True, new=True)\nLoadStage()\nAnimateCue()\nExportCueAnimation()\n```\n\n----------------------------------------\n\nTITLE: Include Directories (CMake)\nDESCRIPTION: This snippet specifies the include directories required for compiling the target. These directories include the GTest include directory, the PXR USD include directory, the Maya include directory, and local directories within the project structure. This ensures that the compiler can find all the necessary header files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaTestPlugin/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${TARGET_NAME}\n    PRIVATE\n        ${GTEST_INCLUDE_DIRS}\n        ${PXR_INCLUDE_DIRS}\n        ${MAYA_INCLUDE_DIRS}\n        \"../../lib/AL_USDMaya\"\n        \"../../schemas\"\n        ${MAYATEST_INCLUDE_LOCATION}\n)\n```\n\n----------------------------------------\n\nTITLE: Translating Multiple Prims (Tear Down) (C++)\nDESCRIPTION: This command executes a translator plugin to push changes made to multiple prims in Maya back into the current edit target within USD. It uses the *-tp* flag with a comma-separated list of prim paths to trigger the tear down (export) process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_22\n\nLANGUAGE: c++\nCODE:\n```\nAL_usdmaya_TranslatePrim -tp \"/MyPrim,/YourPrim\";  //< Run the Prim's translator's tearDown on multiple Prims\n```\n\n----------------------------------------\n\nTITLE: Specifying Arbitrary Attributes for Export using JSON\nDESCRIPTION: This JSON snippet demonstrates how to specify arbitrary attributes for export from Maya to USD. It defines attribute names, USD attribute names, attribute types (primvar), interpolation, and flags to translate Maya double attributes to USD single precision attributes. This JSON is used in the Maya attribute USD_UserExportedAttributesJson.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/commands/Readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{ \"myMayaAttributeOne\":\n{ }, \"myMayaAttributeTwo\":\n\n{ \"usdAttrName\": \"my:namespace:attributeTwo\" }\n\n, \"attributeAsPrimvar\":\n\n{ \"usdAttrType\": \"primvar\" }\n\n, \"attributeAsVertexInterpPrimvar\":\n\n{ \"usdAttrType\": \"primvar\", \"interpolation\": \"vertex\" }\n\n, \"attributeAsRibAttribute\":\n\n{ \"usdAttrType\": \"usdRi\" }\n\n\"doubleAttributeAsFloatAttribute\":\n\n{ \"translateMayaDoubleToUsdSinglePrecision\": true }\n```\n\n----------------------------------------\n\nTITLE: Configuring Header File from Template\nDESCRIPTION: This snippet configures the `mayaUsdAPI.h` header file from a template `mayaUsdAPI.h.src`.  It copies the source file to the destination directory within the binary output and uses CMake to replace variables defined within the `.src` file with their actual values.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRCFILE ${CMAKE_CURRENT_SOURCE_DIR}/mayaUsdAPI.h.src)\nset(DSTFILE ${CMAKE_BINARY_DIR}/include/mayaUsdAPI/mayaUsdAPI.h)\nif (NOT EXISTS ${DSTFILE})\n    message(STATUS \"promoting: \" ${SRCFILE})\nendif()\nconfigure_file(${SRCFILE} ${DSTFILE})\n```\n\n----------------------------------------\n\nTITLE: Import USD with Info Chaser\nDESCRIPTION: This Python code snippet demonstrates how to invoke mayaUSDImport with a custom import chaser named 'info'. The 'chaser' argument specifies the name of the import chaser to be executed after the main import process. The example imports a USD file located at '/tmp/test.usda' and applies the 'info' chaser.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/doc/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncmds.mayaUSDImport(\n    file='/tmp/test.usda',\n    chaser=['info']\n)\n```\n\n----------------------------------------\n\nTITLE: Import USD proxy shape in Maya\nDESCRIPTION: This command imports a USD proxy shape into Maya, pointing to a specified USD file. The file should contain a scene with prims that have defined selectability properties.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/selectability/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncmds.AL_usdmaya_ProxyShapeImport(file=\"<PATH_TO_ASSETS_FOLDER_IN_THIS_DIRECTORY>/selectable_world.usda\")\n```\n\n----------------------------------------\n\nTITLE: Register BulletMassShemaAdaptor (Python)\nDESCRIPTION: This snippet demonstrates how to register the custom BulletMassShemaAdaptor class with MayaUSD, associating it with the 'shape' type and the 'PhysicsMassAPI' schema.  This makes the adaptor available for use when dealing with shapes participating in Bullet simulations in MayaUSD.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nmayaUsdLib.SchemaApiAdaptor.Register(BulletMassShemaAdaptor, \"shape\", \"PhysicsMassAPI\")\n```\n\n----------------------------------------\n\nTITLE: Register Import and Export Plugins in C++\nDESCRIPTION: These C++ macros register the import and export plugins with MayaUSD. The macros automatically handle the registration process. The first callback retrieves options; the second displays a UI to edit options.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/tutorials/import-export-plugin-c++/README.md#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nREGISTER_EXPORT_JOB_CONTEXT_FCT()       // Register the export plugin\nREGISTER_EXPORT_JOB_CONTEXT_UI_FCT()    // Register the export UI (optional)\n\nREGISTER_IMPORT_JOB_CONTEXT_FCT()       // Register the import plugin\nREGISTER_IMPORT_JOB_CONTEXT_UI_FCT()    // Register the import UI (optional)\n```\n\n----------------------------------------\n\nTITLE: Target Sources Definition (UFE v3)\nDESCRIPTION: Conditionally defines additional source files for the ${PROJECT_NAME} target if CMAKE_UFE_V3_FEATURES_AVAILABLE is true. This adds updater related source files. These files are added as private sources.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_UFE_V3_FEATURES_AVAILABLE)\n    target_sources(${PROJECT_NAME}\n        PRIVATE\n            fallbackPrimUpdater.cpp\n            primUpdater.cpp\n            primUpdaterArgs.cpp\n            primUpdaterContext.cpp\n            primUpdaterRegistry.cpp\n            primUpdaterManager.cpp\n            pullInformation.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Applying/Unapplying PhysicsMassAPI Interactively in Python\nDESCRIPTION: This code demonstrates how to interactively apply and unapply the `PhysicsMassAPI` schema using the `mayaUsdLib.Adaptor` class. It creates a sphere, gets its DAG path, and then uses `ApplySchemaByName` and `UnapplySchemaByName` to modify the applied schemas.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nsphere2 = cmds.polySphere()[0]\nsl = om.MSelectionList()\nsl.add(sphere2)\ndagPath = sl.getDagPath(0)\ndagPath.extendToShape()\n\nadaptor = mayaUsdLib.Adaptor(dagPath.fullPathName())\nprint(adaptor.GetAppliedSchemas())\n# Returns: []\nphysicsMass = adaptor.ApplySchemaByName(\"PhysicsMassAPI\")\nprint(adaptor.GetAppliedSchemas())\n# Returns: ['PhysicsMassAPI']\nadaptor.UnapplySchemaByName(\"PhysicsMassAPI\")\nprint(adaptor.GetAppliedSchemas())\n# Returns: []\n```\n\n----------------------------------------\n\nTITLE: Transform3d Interface for Custom Transform Commands (C++)\nDESCRIPTION: This code defines the Transform3d interface with methods to create undoable commands for translate, rotate, and scale operations. These methods are used by Maya's move, rotate, and scale commands to customize USD runtime undoable commands. Each method returns an undoable command that restores the original transformation upon undo.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/trf/UsdTransform3d.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n    //! Create an undoable translate command.  The command is not executed.\n    //! \\param x X-axis translation.\n    //! \\param y Y-axis translation.\n    //! \\param z Z-axis translation.\n    //! \\return Undoable command whose undo restores the original translation.\n    virtual TranslateUndoableCommand::Ptr translateCmd(\n        double x, double y, double z) = 0;\n\n    //! Create an undoable rotate command.  The command is not executed.\n    //! \\param x value to rotate on the X-axis, in degrees.\n    //! \\param y value to rotate on the Y-axis, in degrees.\n    //! \\param z value to rotate on the Z-axis, in degrees.\n    //! \\return Undoable command whose undo restores the original rotation.\n    virtual RotateUndoableCommand::Ptr rotateCmd(\n        double x, double y, double z) = 0;\n\n    //! Create an undoable scale command.  The command is not executed.\n    //! \\param x value to scale on the X-axis.\n    //! \\param y value to scale on the Y-axis.\n    //! \\param z value to scale on the Z-axis.\n    //! \\return Undoable command whose undo restores the scale's value\n    virtual ScaleUndoableCommand::Ptr scaleCmd(\n        double x, double y, double z) = 0;\n```\n\n----------------------------------------\n\nTITLE: Loading Subset of USD file\nDESCRIPTION: This C++ code shows how to load only a subset of the USD file using AL_usdmaya_ProxyShapeImport command, by specifying a root prim path with the -pp/-primPath flag.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\n-primPath \"/myScene/foo/bar\"\n```\n\n----------------------------------------\n\nTITLE: Record Changes to Edit Target Layer and Export - Python\nDESCRIPTION: This Python script demonstrates how to record changes to the current Edit Target Layer and export the content to a string. It imports a USD asset, creates Maya transforms for the prim paths, moves the ball, and then exports the root layer to a string.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/layers.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#set this to the root of your source distribution\nAL_USDMayaRootPath = 'MYSOURCEROOT'\n\nfrom maya import cmds\n#Import very simple ball - everything will be displayed in hydra, so this should create a single transform and shape\nmaya.cmds.AL_usdmaya_ProxyShapeImport(f=AL_USDMayaRoot + '/extras/usd/tutorials/endToEndMaya/assets/Ball/Ball.usd', name='shot')\n#Create a maya transform (which will drive the USD values) for each prim in USD\n\n#Create maya transforms for all of the prim paths, and move the ball  \ncmds.select(\"AL_usdmaya_ProxyShape1\")\nmaya.cmds.AL_usdmaya_ProxyShapeImportAllTransforms(pushToPrim=True)\nmaya.cmds.setAttr(\"shot|Ball|mesh.translateY\",10) \n\n#Export the root layer to a string\nfrom AL import usdmaya\ntheStageCache = usdmaya.StageCache.Get()\ntheStage = theStageCache.GetAllStages()[0]\nprint theStage.GetRootLayer().ExportToString() #making an assumption about root layer being current layer\n```\n\n----------------------------------------\n\nTITLE: Adding a Library Target in CMake\nDESCRIPTION: This command adds a new library target named 'mayaUsdPlugin' and specifies that it is a module library. Module libraries are typically plugins that are loaded at runtime.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/plugin/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(${TARGET_NAME} MODULE)\n```\n\n----------------------------------------\n\nTITLE: Get Help for Proxy Shape Import in MEL\nDESCRIPTION: This MEL command retrieves the help documentation for the AL_usdmaya_ProxyShapeImport command. This is useful for understanding the available options and usage of the command.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/basicUsage.md#_snippet_1\n\nLANGUAGE: mel\nCODE:\n```\nAL_usdmaya_ProxyShapeImport -help\n```\n\n----------------------------------------\n\nTITLE: Export with frame sample removal using AL_usdmaya_ExportCommand\nDESCRIPTION: This example shows how to remove identical adjacent samples when exporting using the AL_usdmaya_ExportCommand. The `-f` flag specifies the output file path, and the `-fs` flag enables frame sample removal.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/importExport.md#_snippet_5\n\nLANGUAGE: MEL\nCODE:\n```\nAL_usdmaya_ExportCommand -f \"<path/to/out/file.usd>\" -fs\n```\n\n----------------------------------------\n\nTITLE: Export sub-frame samples using AL_usdmaya_ExportCommand\nDESCRIPTION: This example shows how to export sub-frame samples using the AL_usdmaya_ExportCommand. The `-ss` or `-subSamples` flag specifies the number of sub-frame samples per frame.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/importExport.md#_snippet_10\n\nLANGUAGE: MEL\nCODE:\n```\nAL_usdmaya_ExportCommand -f \"<path/to/out/file.usd>\"  -ss 2\n```\n\n----------------------------------------\n\nTITLE: Setup Assets and Shots (Bash)\nDESCRIPTION: This bash script creates assets (Ball and Table), copies USD files, adds shading variants, creates a room set, and sets up shots (s00 and s00_01). It uses python scripts to automate parts of the setup.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/endToEndMaya/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\npython scripts/create_asset.py Ball --shadingVariantLayer -o models/Ball -f\npython scripts/create_asset.py Table -o models/Table -f\n\ncp assets/Ball/Ball.maya.usd models/Ball/Ball.maya.usd\ncp assets/Table/Table.maya.usd models/Table/Table.maya.usd\ncp -r assets/Ball/tex/ models/Ball/\n\npython tutorial_scripts/add_shadingVariants.py -f\n\npython tutorial_scripts/create_Room_set.py -f\n\npython scripts/create_shot.py s00 -o shots/s00 -b ../../assets/shot.usd -f\npython scripts/create_shot.py s00_01 -o shots/s00_01 -b ../s00/s00.usd -f\npython tutorial_scripts/add_set_to_s00.py -f\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation based on Feature Flags\nDESCRIPTION: This snippet conditionally defines compiler definitions based on the status of various feature flags related to USD, Maya, and UFE. It enables specific features like COLOR4_SDR support, namespace editing, display layer API, scene item metadata, display name support, and default value support if the corresponding flags are enabled.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nmessage(STATUS \"USD_HAS_COLOR4_SDR_SUPPORT is ${USD_HAS_COLOR4_SDR_SUPPORT}\")\nif (USD_HAS_COLOR4_SDR_SUPPORT)\n    target_compile_definitions(${PROJECT_NAME}\n        PRIVATE\n            USD_HAS_COLOR4_SDR_SUPPORT=1\n    )\nendif()\n\nmessage(STATUS \"USD_HAS_NAMESPACE_EDIT is ${USD_HAS_NAMESPACE_EDIT}\")\nif (USD_HAS_NAMESPACE_EDIT)\n    target_compile_definitions(${PROJECT_NAME}\n        PRIVATE\n        USD_HAS_NAMESPACE_EDIT=1\n    )\nendif()\n\nmessage(STATUS \"MAYA_HAS_DISPLAY_LAYER_API is ${MAYA_HAS_DISPLAY_LAYER_API}\")\nif (MAYA_HAS_DISPLAY_LAYER_API)\n    target_compile_definitions(${PROJECT_NAME}\n        PRIVATE\n            MAYA_HAS_DISPLAY_LAYER_API=1\n    )\nendif()\n\nmessage(STATUS \"UFE_SCENEITEM_HAS_METADATA is ${UFE_SCENEITEM_HAS_METADATA}\")\nif (UFE_SCENEITEM_HAS_METADATA)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        UFE_SCENEITEM_HAS_METADATA=1\n    )\nendif()\n\nif (UFE_HAS_DISPLAY_NAME)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        UFE_HAS_DISPLAY_NAME=1\n    )\nendif()\n\n\nif (UFE_DEFAULT_VALUE_SUPPORT)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        UFE_DEFAULT_VALUE_SUPPORT=1\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Translating Prim (Import) (C++)\nDESCRIPTION: This command executes a translator plugin to import a specific prim type into Maya for editing. It uses the *ip* flag with the prim path to trigger the import process. This allows users to bring a USD prim into Maya, edit it, and push the changes back to USD.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_18\n\nLANGUAGE: c++\nCODE:\n```\nAL_usdmaya_TranslatePrim -ip \"/MyPrim\";  //< Run the Prim's translator's import\n```\n\n----------------------------------------\n\nTITLE: Creating a Stage from File Path in MEL\nDESCRIPTION: The provided MEL function `mayaUsd_createStageFromFilePath` demonstrates how to create a USD stage from a file path within ADSK_USDMaya. This involves creating a proxy shape node, setting its `.filePath` attribute, and connecting `time1` to the `.time` attribute for animation. This function replicates part of the functionality found in AL_USDMaya's `AL_usdmaya_ProxyShapeImport` command.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/MIGRATION_GUIDE.md#_snippet_3\n\nLANGUAGE: MEL\nCODE:\n```\nmayaUsd_createStageFromFilePath\n```\n\n----------------------------------------\n\nTITLE: Expansion of AL_DECLARE_NODE and AL_DECL_ATTRIBUTE Macros (C++)\nDESCRIPTION: This code shows the expansion of the AL_DECLARE_NODE and AL_DECL_ATTRIBUTE macros.  It demonstrates the methods and members that are automatically generated, including the creator, initialise, and type name for the node, as well as private MObject members and public plug accessor methods for each attribute. This significantly reduces boilerplate code when defining custom Maya nodes.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/developer.md#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n/// This will be a very basic node that has 1 input, and 1 output. \n/// The compute will simply pass the input float through to the output. \nclass MyMayaNode : public MPxNode, AL::maya::NodeHelper\n{\npublic:\n  //-----------------------------\n  // AL_DECLARE_NODE();\n  //-----------------------------\n  static void* creator();\n  static MStatus initialise();\n  static const MString kTypeName;\n  static const MTypeId kTypeId;\n  //-----------------------------\n\n  //-----------------------------\n  // AL_DECL_ATTRIBUTE(inFloat);\n  //-----------------------------\n  private:\n    static MObject m_inFloat;\n  public:\n    MPlug inFloatPlug() const;\n    static const MObject& inFloat();\n  //-----------------------------\n\n  //-----------------------------\n  // AL_DECL_ATTRIBUTE(outFloat);\n  //-----------------------------\n  private:\n    static MObject m_outFloat;\n  public:\n    MPlug outFloatPlug() const;\n    static const MObject& outFloat();\n  //-----------------------------\n\n  MStatus compute(const MPlug& plug, MDataBlock& dataBlock) override;\n};\n```\n\n----------------------------------------\n\nTITLE: Python Script for Registering Edit Routers\nDESCRIPTION: This Python script defines edit routers for attributes, visibility, and variant selections, routing them to the session layer of the stage. It includes functions to register each edit router using `mayaUsd.lib.registerEditRouter`. The `registerEditRouters` function combines all the individual registration functions for easy execution.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/EditRouting.md#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nimport mayaUsd.lib\n\nsessionAttributes = set(['visibility', 'radius'])\nsessionVariantSets = set(['rigVariants', 'proxyVariants'])\n\ndef routeToSessionLayer(context, routingData):\n    '''\n    Edit router implementation for that routes to the session layer\n    of the stage that contains the prim.\n    '''\n    prim = context.get('prim')\n    if prim is None:\n        print('Prim not in context')\n        return\n\n    routingData['layer'] = prim.GetStage().GetSessionLayer().identifier\n\ndef routeAttrToSessionLayer(context, routingData):\n    '''\n    Edit router implementation for 'attribute' operations that routes\n    to the session layer of the stage that contains the prim.\n    '''\n    prim = context.get('prim')\n    if prim is None:\n        print('Prim not in context')\n        return\n\n    attrName = context.get('attribute')\n    if attrName not in sessionAttributes:\n        return\n\n    routingData['layer'] = prim.GetStage().GetSessionLayer().identifier\n\ndef routeVariantSelectionToSessionLayer(context, routingData):\n    '''\n    Edit router implementation for 'primMetadata' operations that routes\n    some variantSelection to the session layer of the stage that contains the \n    prim.\n    '''\n    prim = context.get('prim')\n    if prim is None:\n        print('Prim not in context')\n        return\n\n    metadataName = context.get('primMetadata')\n    if metadataName != 'variantSelection':\n        return\n    \n    variantSetName = context.get('keyPath')\n    if variantSetName not in sessionVariantSets:\n        return\n\n    routingData['layer'] = prim.GetStage().GetSessionLayer().identifier\n\ndef registerAttributeEditRouter():\n    '''\n    Register an edit router for the 'attribute' operation that routes to\n    the session layer.\n    '''\n    mayaUsd.lib.registerEditRouter('attribute', routeAttrToSessionLayer)\n\ndef registerVisibilityEditRouter():\n    '''\n    Register an edit router for the 'visibility' operation that routes to\n    the session layer.\n    '''\n    mayaUsd.lib.registerEditRouter('visibility', routeToSessionLayer)\n\ndef registerPrimMetadataEditRouter():\n    '''\n    Register an edit router for the 'primMetadata' operation that routes to\n    the session layer.\n    '''\n    mayaUsd.lib.registerEditRouter('primMetadata', routeVariantSelectionToSessionLayer)\n\ndef registerEditRouters():\n    registerAttributeEditRouter()\n    registerVisibilityEditRouter()\n    registerPrimMetadataEditRouter()\n```\n\n----------------------------------------\n\nTITLE: Loading Maya USD plugin via MEL\nDESCRIPTION: This snippet demonstrates how to load the `pxrUsd` plugin in Maya using the MEL command `loadPlugin`. This plugin is required to import, export, and reference USD files within Maya.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/doc/README.md#_snippet_0\n\nLANGUAGE: MEL\nCODE:\n```\nloadPlugin pxrUsd\n```\n\n----------------------------------------\n\nTITLE: Undo/Redo Usage in UFE Command (C++)\nDESCRIPTION: This C++ code snippet demonstrates how to use UsdUndoBlock within a UFE command to enable undo/redo functionality for USD data model changes.  It requires a UsdUndoableItem instance to store the edits and the override of execute(), undo() and redo() functions.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/undo/README-USD-Undo.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nUsdUndoableItem _undoableItem;\n\nvoid UsdUndoYourCommand::undo() \n{\n    _undoableItem.undo();\n}\n\nvoid UsdUndoYourCommand::redo()\n{\n    _undoableItem.redo();\n}\n\nvoid UsdUndoYourCommand::execute()\n{\n    UsdUndoBlock undoBlock(&_undoableItem);\n    \n    /* your usd data model changes */\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Maya Command in C++\nDESCRIPTION: This code demonstrates how to register the command, construct its GUI, and generate a plugin UI. It uses the fnPlugin object to register the command with Maya and the AL::maya::MenuBuilder to construct the menus based on the GUI definitions.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/developer.md#_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\n// register the command\n  status = fnPlugin.registerCommand(\n      MyCommand::kName,\n      MyCommand::creator,\n      MyCommand::createSyntax);\n  if(!status) {\n    status.perror(\"unable to register command MyCommand\");\n    return status;\n  }\n\n  // build the GUI\n  constructMyCommandUI();\n\n  // call this ONCE per plugin. \n  AL::maya::MenuBuilder::generatePluginUI(fnPlugin, \"somePrefix\");\n```\n\n----------------------------------------\n\nTITLE: UI Callbacks (Python)\nDESCRIPTION: This snippet mentions UI callbacks, where the callback is called when the user clicks the `options` button associated with your plugin in the main MayaUSD export UI. It further describes the usage of `showUI`, `fillUI` and `queryUI` to create the dialog, fill it with data and retrieve data when confirmed by the user. These functions are standard `Qt` UI functions.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/tutorials/import-export-plugin/README-PYTHON.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nshowUI\nfillUI\nqueryUI\n```\n\n----------------------------------------\n\nTITLE: Extra Data Plugin Class Definition for Transform Attributes in C++\nDESCRIPTION: This C++ code defines a class `TranslatorMyRendererTransformAttributes` that inherits from `ExtraDataPluginBase`.  It registers itself as an extra data plugin using `AL_USDMAYA_DECLARE_EXTRA_DATA_PLUGIN` and overrides virtual functions for initialization, importing, post-importing, updating, pre-teardown, exporting objects, and writing edits. This plugin is specifically designed for handling transform (MFn::kTransform) attributes.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/extraDataTranslatorPlugins.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n//----------------------------------------------------------------------------------------------------------------------\nclass TranslatorMyRendererTransformAttributes\n  : public ExtraDataPluginBase\n{\npublic:\n\n  AL_USDMAYA_DECLARE_EXTRA_DATA_PLUGIN(TranslatorMyRendererTransformAttributes);\n\n  MFn::Type getFnType() const override\n    { return MFn::kTransform; };\n  MStatus initialize() override;\n  MStatus import(const UsdPrim& prim, const MObject& parent) override;\n  MStatus postImport(const UsdPrim& prim) override;\n  MStatus update(const UsdPrim& path) override;\n  MStatus preTearDown(UsdPrim& prim) override;\n  MStatus exportObject(UsdPrim& prim, const MObject& node, const ExporterParams& params) override;\n  MStatus writeEdits(MObject object, UsdPrim prim, const ExporterParams& params);\n};\n\n} // translators\n} // fileio\n} // usdmaya\n} // AL\n```\n\n----------------------------------------\n\nTITLE: Unlock Hierarchy via ModelAPI Python\nDESCRIPTION: This Python script unlocks all nodes under a specified hierarchy in Maya by setting the lock state of the root prim to \"unlocked\" using the ModelAPI.  It retrieves the stage, gets the root prim, and unlocks it. Requires the AL_USDMaya plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/lock/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntransA = stage.GetPrimAtPath('/transA')\ntransAApi = maya_schemas.ModelAPI(transA)\ntransAApi.SetLock(\"unlocked\")\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries (usdTestUsdPlugin)\nDESCRIPTION: Links the `usdTestUsdPlugin` target with `mayaUsd` and `usdShade`. These libraries provide the core functionality required for the plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${TARGET_NAME}\n    PRIVATE\n        mayaUsd\n        usdShade\n)\n```\n\n----------------------------------------\n\nTITLE: Translating Prim (Tear Down) (C++)\nDESCRIPTION: This command executes a translator plugin to push changes made to a prim in Maya back into the current edit target within USD. It uses the *-tp* flag with the prim path to trigger the tear down (export) process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_21\n\nLANGUAGE: c++\nCODE:\n```\nAL_usdmaya_TranslatePrim -tp \"/MyPrim\";  //< Run the Prim's translator's tearDown\n```\n\n----------------------------------------\n\nTITLE: Register and Import Bullet Schema API (Python)\nDESCRIPTION: This Python code snippet demonstrates how to register the `BulletRigidBodyShemaImporter` with Maya USD and import a USD file using the registered schema API. It uses `mayaUsdLib.SchemaApiAdaptor.Register` to register the importer for \"mesh\" primitives with the \"PhysicsRigidBodyAPI\" schema. It then uses `cmds.mayaUSDImport` to import the \"RBExport.usda\" file, specifying the `apiSchema` and enabling animation data reading.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nmayaUsdLib.SchemaApiAdaptor.Register(BulletRigidBodyShemaImporter,\n                                     \"mesh\", \"PhysicsRigidBodyAPI\")\ncmds.file(new=True, f=True)\ncmds.mayaUSDImport(file=\"RBExport.usda\", apiSchema=[\"PhysicsRigidBodyAPI\"],\n                   readAnimData=True)\n```\n\n----------------------------------------\n\nTITLE: mayaUSDExportCommand - MEL Example\nDESCRIPTION: This MEL command exports a USD file using `mayaUSDExportCommand`. It specifies the file path and export options. This command is used with the ADSK_USDMaya plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/MIGRATION_GUIDE.md#_snippet_14\n\nLANGUAGE: MEL\nCODE:\n```\nmayaUSDExportCommand -f \"<path/to/out/file.usd>\" ...options...\n```\n\n----------------------------------------\n\nTITLE: Extending Transform3dHandler for Edit Transforms in C++\nDESCRIPTION: This C++ code snippet demonstrates extending the Ufe::Transform3dHandler to include a new virtual function, editTransform3d. This allows for creating specific Transform3d interfaces for targeting individual or groups of transform operations within a USD transformable prim. The default implementation simply returns the standard Transform3d interface.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/trf/UsdTransform3d.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n    /*! Return an interface to be used to edit the 3D transformation of the\n        object.  By default, returns the normal Transform3d interface.  The\n        edit transform object may have a different local transformation and a\n        \\ref Ufe::Transform3d::segmentInclusiveMatrix() and\n        \\ref Ufe::Transform3d::segmentExclusiveMatrix() than the normal\n        Transform3d interface associated with a scene item.  All changes made\n        through the edit transform 3D object will be visible through the normal\n        \\ref Ufe::Transform3d::transform3d() interface.\n        \\param item SceneItem to use to retrieve its Transform3d interface.\n        \\param hint Contextual information for Transform3d interface creation.\n        \\return Transform3d interface of given SceneItem. Returns a null\n        pointer if no Transform3d interface can be created for the item.\n    */\n    virtual Transform3d::Ptr editTransform3d(\n        const SceneItem::Ptr&      item,\n        const EditTransform3dHint& hint = EditTransform3dHint()\n    ) const {\n        return transform3d(item);\n    }\n```\n\n----------------------------------------\n\nTITLE: Define Translator TfType\nDESCRIPTION: Defines a TfType for the translator plugin, associating it with a TranslatorFactory. This allows the USD plug system to instantiate the translator when needed. Requires deriving from TranslatorBase and implementing a New method.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/AL/usdmaya/fileio/translators/README.md#_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\nTfType::Define<plugClass, TfType::Bases<TranslatorBase>>()\n  .SetFactory<TranslatorFactory<plugClass>>();\n```\n\n----------------------------------------\n\nTITLE: Creating a Bullet Rigid Body (Python)\nDESCRIPTION: This snippet shows how to create a Bullet rigid body simulation with a sphere as the collider. It creates a sphere, then uses the BulletUtils.CreateRigidBody command to generate the necessary Bullet nodes and attributes.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nsphere = cmds.polySphere()[0]\nrbT, rbShape = RigidBody.CreateRigidBody().command(\n    autoFit=True,\n    colliderShapeType= RigidBody.eShapeType.kColliderSphere,\n    meshes=[sphere],\n    radius=1.0,\n    mass=5.0,\n    centerOfMass=(0.9, 0.8, 0.7))\n```\n\n----------------------------------------\n\nTITLE: Export Options Callback (Python)\nDESCRIPTION: This snippet refers to the `exportEnablerFn` callback function, which retrieves a dictionary of options that the export plugin wants to control. Those options will no longer be editable by the user in the main MayaUSD export UI. The example returns a global dictionary containing the forced options that can be accessed through the `exampleSettings` variable.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/tutorials/import-export-plugin/README-PYTHON.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nexportEnablerFn\n```\n\n----------------------------------------\n\nTITLE: Export with transform merging using AL_usdmaya_ExportCommand\nDESCRIPTION: This example shows how to enable or disable transform merging using the AL_usdmaya_ExportCommand. `-mergeTransforms 1` merges transforms and child shapes, while `-mergeTransforms 0` exports them separately.  The `-f` flag specifies the output file path.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/importExport.md#_snippet_6\n\nLANGUAGE: MEL\nCODE:\n```\nAL_usdmaya_ExportCommand -f \"<path/to/out/file.usd>\" -mergeTransforms 1\n```\n\nLANGUAGE: MEL\nCODE:\n```\nAL_usdmaya_ExportCommand -f \"<path/to/out/file.usd>\" -mergeTransforms 0\n```\n\n----------------------------------------\n\nTITLE: Barebones Schema API Importer in Maya USD (Python)\nDESCRIPTION: This code snippet demonstrates a minimal implementation of a Schema API importer in Maya USD using Python. It defines a class `BarebonesSchemaApiImporter` that inherits from `mayaUsdLib.SchemaApiAdaptor` and implements the required methods `CanAdaptForImport`, `ApplySchemaForImport`, and `CopyFromPrim`. All methods return `True`, indicating that the importer can always import, apply the schema, and copy data from the USD prim.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass BarebonesSchemaApiImporter(mayaUsdLib.SchemaApiAdaptor):\n    def CanAdaptForImport(self, jobArgs):\n        \"\"\"Can always import.\"\"\"\n        return True\n\n    def ApplySchemaForImport(self, primReaderArgs, context):\n        \"\"\"Called to create objects/attributes/connections required on import.\"\"\"\n        return True\n\n    def CopyFromPrim(self, prim, args, context):\n        \"\"\"Barebones import callback. You have the USD prim and the Maya object, and\n        all latitude to edit the USD prim at will. Please resist the temptation to\n        write attributes that are not part of the schema.\"\"\"\n        return True\n```\n\n----------------------------------------\n\nTITLE: Using the BulletMassShemaAdaptor (Python)\nDESCRIPTION: This snippet demonstrates how to use the registered BulletMassShemaAdaptor to read attributes of a Maya sphere that is part of a bullet simulation as if they were attributes of the PhysicsMassAPI.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nsl = om.MSelectionList()\nsl.add(sphere)\ndagPath = sl.getDagPath(0)\ndagPath.extendToShape()\n\nadaptor = mayaUsdLib.Adaptor(dagPath.fullPathName())\nprint(adaptor.GetAppliedSchemas())\n# Returns: ['PhysicsMassAPI']\nphysicsMass = adaptor.GetSchemaByName(\"PhysicsMassAPI\")\nprint(physicsMass.GetAuthoredAttributeNames())\n# Returns: ['physics:centerOfMass', 'physics:mass']\n```\n\n----------------------------------------\n\nTITLE: Enabling Export of Adapted API in Python\nDESCRIPTION: This code snippet adds the `CanAdaptForExport` method to the `BulletMassShemaAdaptor` class. This method checks if the `PhysicsMassAPI` schema is in the list of included API names and returns `True` if it is, and a bullet simulation is present, otherwise returns `False`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass BulletMassShemaAdaptor(mayaUsdLib.SchemaApiAdaptor):\n    #\n    # Cumulative update to the existing BulletMassShemaAdaptor\n    #\n    def CanAdaptForExport(self, jobArgs):\n        if \"PhysicsMassAPI\" in jobArgs.includeAPINames:\n            # Re-using previously defined code:\n            return self.CanAdapt()\n        return False\n```\n\n----------------------------------------\n\nTITLE: Appending FileIO Translator Headers to List CMake\nDESCRIPTION: Appends a list of header files related to file I/O translators in AL_USDMaya to the AL_usdmaya_fileio_translators_headers list. These headers define interfaces for translating different Maya node types to USD.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND AL_usdmaya_fileio_translators_headers\n        AL/usdmaya/fileio/translators/DagNodeTranslator.h\n        AL/usdmaya/fileio/translators/DgNodeTranslator.h\n        AL/usdmaya/fileio/translators/TransformTranslator.h\n        AL/usdmaya/fileio/translators/TranslatorBase.h\n        AL/usdmaya/fileio/translators/TranslatorContext.h\n        AL/usdmaya/fileio/translators/TranslatorTestPlugin.h\n        AL/usdmaya/fileio/translators/TranslatorTestType.h\n        AL/usdmaya/fileio/translators/ExtraDataPlugin.h\n        AL/usdmaya/fileio/translators/TestExtraDataPlugin.h\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Export Job Context in C++\nDESCRIPTION: This C++ code snippet demonstrates how to register an export job context using the `REGISTER_EXPORT_JOB_CONTEXT_FCT` macro. It defines an enabler function that returns a `VtDictionary` of export options. The options include shading mode, material conversion, API schemas, and chaser configurations.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/Managing_export_options_via_JobContext_in_Python.md#_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nREGISTER_EXPORT_JOB_CONTEXT_FCT(\n    MyContext, \n    \"UI name for MyContext\", // Same for import and export.\n    \"Tooltip for MyContext when used for export\")\n{\n    // Enabler function code. Returns a VtDictionary of export options\n    // to be used when MyContext is chosen for export.\n    VtDictionary args;\n    args[UsdMayaJobExportArgsTokens->shadingMode]\n        = VtValue(std::string(\"useRegistry\"));\n    args[UsdMayaJobExportArgsTokens->convertMaterialsTo] = VtValue(\n        std::vector<VtValue> { VtValue(std::string(\"MyContextMaterials\")) });\n    args[UsdMayaJobExportArgsTokens->apiSchema] = VtValue(std::vector<VtValue> {\n         VtValue(std::string(\"MyContextLightApi\")),\n         VtValue(std::string(\"MyContextShadowApi\")) });\n    args[UsdMayaJobExportArgsTokens->chaser]= VtValue(std::vector<VtValue> { \n        VtValue(std::string(\"MyContextMeshChaser\")),\n        VtValue(std::string(\"MyContextXformChaser\")) });\n    std::vector<VtValue> chaserArgs;\n    chaserArgs.emplace_back(std::vector<VtValue> {\n        VtValue(std::string(\"MyContextMeshChaser\")),\n        VtValue(std::string(\"frobiness\")),\n        VtValue(std::string(\"42\")) });\n    chaserArgs.emplace_back(std::vector<VtValue> {\n        VtValue(std::string(\"MyContextXformChaser\")),\n        VtValue(std::string(\"precision\")),\n        VtValue(std::string(\"5\")) });\n    args[UsdMayaJobExportArgsTokens->chaserArgs] = VtValue(chaserArgs);\n    return args;\n}\n```\n\n----------------------------------------\n\nTITLE: AL_usdmaya_ImportCommand - MEL Example\nDESCRIPTION: This MEL command imports a USD file using `AL_usdmaya_ImportCommand`. It specifies the file path, prim path, and other import options. This command is specific to the AL_USDMaya plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/MIGRATION_GUIDE.md#_snippet_8\n\nLANGUAGE: MEL\nCODE:\n```\nAL_usdmaya_ImportCommand -f \"<path/to/out/file.usd>\" -primPath \"/path/to/prim\" ...options...\n```\n\n----------------------------------------\n\nTITLE: Applying GeomModelAPI to a Maya Sphere (Python)\nDESCRIPTION: This snippet demonstrates how to apply the GeomModelAPI to a Maya sphere using the Adaptor class, set a 'cross' cardGeometry mode, and then query the authored attribute names and values.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport mayaUsd.lib as mayaUsdLib\nfrom maya import cmds\ncmds.loadPlugin(\"mayaUsdPlugin\")\n\nsphereXform = cmds.polySphere()[0]\nadaptor = mayaUsdLib.Adaptor(sphereXform)\n\n# Apply GeomModelAPI to the sphere:\ngeomModelAPI = adaptor.ApplySchemaByName(\"GeomModelAPI\")\nprint(geomModelAPI.GetAttributeNames())\n# result: ['model:applyDrawMode', 'model:cardGeometry', 'model:cardTextureXNeg'...\nprint(geomModelAPI.GetAuthoredAttributeNames())\n# result: []\n\n# Set cardGeometry to \"cross\"\ncardGeometryAttribute = geomModelAPI.CreateAttribute(\"model:cardGeometry\")\ncardGeometryAttribute.Set(\"cross\")\nprint(geomModelAPI.GetAuthoredAttributeNames())\n# result: ['model:cardGeometry']\nprint(cardGeometryAttribute.Get())\n# result: cross\n```\n\n----------------------------------------\n\nTITLE: Promoting Header List with CMake\nDESCRIPTION: This CMake snippet calls a custom function `mayaUsd_promoteHeaderList` to promote the list of header files defined in `HEADERS` to the `base` subdirectory.  This function is responsible for managing the copying and organization of header files in the build directory, likely handling dependencies and other build-related configurations.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/base/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_promoteHeaderList(HEADERS ${HEADERS} SUBDIR base)\n```\n\n----------------------------------------\n\nTITLE: Manage plugin settings in C++\nDESCRIPTION: These C++ functions manage the plugin settings by loading defaults, saving settings and loading settings from a Maya option variable. JSON text is used to save the settings.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/tutorials/import-export-plugin-c++/README.md#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ngetDefaultExportSettings()  // Get defaults for the plugin settings.\nloadExportSettings()        // Load the plugin settings, with defaults if needed.\nsaveExportSettings()        // Save the plugin settings in a Maya opion var.\n\n// Idem for import\ngetDefaultImportSettings()\nloadImportSettings()\nsaveImportSettings()\n```\n\n----------------------------------------\n\nTITLE: Import Anonymous Layer into ProxyShape - Python\nDESCRIPTION: This Python script demonstrates how to import an anonymous root layer into a ProxyShape using the `AL_usdmaya_ProxyShapeImport` command. It creates a USD stage in memory, defines a sphere, and then imports the stage into Maya.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/layers.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pxr import Usd, UsdUtils, UsdGeom\nfrom maya import cmds\n\nstageCache = UsdUtils.StageCache.Get()\nwith Usd.StageCacheContext(stageCache):\n    stage = Usd.Stage.CreateInMemory()\n    with Usd.EditContext(stage, Usd.EditContext(stage.GetRootLayer())):\n        UsdGeom.Sphere.Define(stage, \"/sphere\").GetRadiusAttr().Set(1.0)\n\ncmds.AL_usdmaya_ProxyShapeImport(\n    stageId=stageCache.GetId(stage).ToLongInt(),\n    name='anonymousShape'\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Setting MaterialX Build Flag\nDESCRIPTION: This snippet checks if `CMAKE_WANT_MATERIALX_BUILD` is set and, if so, sets `WANT_MATERIALX_BUILD` to ON. This allows the configuration to be passed to `mayaUsdAPI.h.src`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_WANT_MATERIALX_BUILD)\n    set(WANT_MATERIALX_BUILD ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Target Sources Definition (Common)\nDESCRIPTION: Defines the source files for the ${PROJECT_NAME} target using the target_sources CMake command. It lists the .cpp files that form the core functionality of the fileio component. These files are added as private sources.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        fallbackPrimReader.cpp\n        flexibleSparseValueWriter.cpp\n        functorPrimReader.cpp\n        functorPrimWriter.cpp\n        importData.cpp\n        instancedNodeWriter.cpp\n        jobContextRegistry.cpp\n        primReader.cpp\n        primReaderArgs.cpp\n        primReaderContext.cpp\n        primReaderRegistry.cpp\n        primWriter.cpp\n        primWriterArgs.cpp\n        primWriterContext.cpp\n        primWriterRegistry.cpp\n        registryHelper.cpp\n        schemaApiAdaptor.cpp\n        schemaApiAdaptorRegistry.cpp\n        shaderReader.cpp\n        shaderReaderRegistry.cpp\n        shaderWriter.cpp\n        shaderWriterRegistry.cpp\n        transformWriter.cpp\n        writeJobContext.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Register Edit Routers on Startup using MEL\nDESCRIPTION: This MEL script registers edit routers when Maya is launched. It checks if the Maya USD plugin is loaded and, if so, executes a Python script to register the custom edit routers. This ensures that the edit routers are available each time Maya starts. The script uses `scriptJob` to run `registerUserEditRouters` proc when a new scene is opened.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/EditRouting.md#_snippet_11\n\nLANGUAGE: MEL\nCODE:\n```\nglobal proc registerUserEditRouters() {\n    if (`pluginInfo -q -loaded mayaUsdPlugin`) {\n        python(\"import userEditRouters; userEditRouters.registerEditRouters()\");\n    } else {\n        print(\"*** Missing Maya USD plugin!!! ***\");\n    }\n}\n\nscriptJob -permanent -event \"NewSceneOpened\" \"registerUserEditRouters\";\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata on Maya Nodes with UsdMaya Adaptor (Python)\nDESCRIPTION: This snippet demonstrates how to set and clear metadata on a Maya node using the UsdMaya adaptor. It shows how to import the UsdMaya module and use its adaptor to set the 'kind' metadata to 'group' and then clear it.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/doc/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pxr import UsdMaya\nUsdMaya.Adaptor(\"|my|dag|path\").SetMetadata(\"kind\", \"group\") # set kind=group\nUsdMaya.Adaptor(\"|my|dag|path\").ClearMetadata(\"kind\") # clear kind\n```\n\n----------------------------------------\n\nTITLE: Setting Target Include Directories (CMake)\nDESCRIPTION: This specifies the include directories that the compiler will search for header files.  It includes PXR (Pixar RenderMan), Maya, and CMake binary directories as include paths for the library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/pxrUsdPreviewSurface/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${TARGET_NAME}\n    PRIVATE\n        ${PXR_INCLUDE_DIRS}\n        ${MAYA_INCLUDE_DIRS}\n        ${CMAKE_BINARY_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Using ScopedTransaction (Python)\nDESCRIPTION: This code snippet demonstrates how to use the `ScopedTransaction` class in Python with a `with` statement. This ensures that the transaction is automatically closed when the code block exits, even if an exception occurs.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/AL/usd/transaction/README.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nwith AL.usd.transaction.ScopedTransaction(stage, layer):\n    ## perform some operations\n    ## going out of context will close transaction\n```\n\n----------------------------------------\n\nTITLE: Importing USD with PhysicsMassAPI in Python\nDESCRIPTION: This code snippet demonstrates importing a USD file with the `PhysicsMassAPI` schema applied. It first creates a new Maya scene, then imports the USD file using `cmds.mayaUSDImport` with the `apiSchema` flag set to `PhysicsMassAPI`. Finally, it verifies that the `PhysicsMassAPI` schema is applied to the imported object.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ncmds.file(new=True, f=True)\ncmds.mayaUSDImport(file=\"physics_api_on_sphere.usda\", apiSchema=[\"PhysicsMassAPI\"])\n\nsl = om.MSelectionList()\n# pSphereShape1 is the transform, since the bullet shape prevented\n# merging the mesh and the transform.\n# The shape will be named pSphereShape1Shape...\nsl.add(\"pSphereShape1\")\ndagPath = sl.getDagPath(0)\ndagPath.extendToShape()\n\nadaptor = mayaUsdLib.Adaptor(dagPath.fullPathName())\nprint(adaptor.GetAppliedSchemas())\n# Returns: ['PhysicsMassAPI']\n```\n\n----------------------------------------\n\nTITLE: Export with disabled transform merging and instance duplication\nDESCRIPTION: This example shows how to export instanced shapes using the AL_usdmaya_ExportCommand by disabling transform merging and instance duplication. `-mergeTransforms 0` and `-duplicateInstances 0` are used.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/importExport.md#_snippet_7\n\nLANGUAGE: MEL\nCODE:\n```\nAL_usdmaya_ExportCommand -f \"<path/to/out/file.usd>\" -mergeTransforms 0 -duplicateInstances 0\n```\n\n----------------------------------------\n\nTITLE: Target Sources Definition in CMake\nDESCRIPTION: This CMake snippet defines the source files that are part of the target specified by ${TARGET_NAME}. These source files are compiled and linked into the final library. The PRIVATE keyword specifies that these sources are only used internally to build the specified target and are not exposed to other targets that depend on it.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/hdMaya/delegates/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${TARGET_NAME}\n    PRIVATE\n        delegate.cpp\n        delegateCtx.cpp\n        delegateDebugCodes.cpp\n        delegateRegistry.cpp\n        proxyDelegate.cpp\n        proxyUsdImagingDelegate.cpp\n        sceneDelegate.cpp\n        testDelegate.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Import using AL_usdmaya_ImportCommand\nDESCRIPTION: This example demonstrates how to import a USD file using the AL_usdmaya_ImportCommand. The `-f` flag specifies the input file path.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/importExport.md#_snippet_8\n\nLANGUAGE: MEL\nCODE:\n```\nAL_usdmaya_ImportCommand -f \"<path/to/out/file.usd>\"\n```\n\n----------------------------------------\n\nTITLE: Finding Loadable Assets under specific path\nDESCRIPTION: This C++ code shows how to restrict returned results to just those under the specified path using AL_usdmaya_ProxyShapeFindLoadable command.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_11\n\nLANGUAGE: c++\nCODE:\n```\nAL_usdmaya_ProxyShapeFindLoadable -pp \"/only/assets/under/here\";\nAL_usdmaya_ProxyShapeFindLoadable -pp -loaded \"/only/assets/under/here\";\nAL_usdmaya_ProxyShapeFindLoadable -pp -unloaded \"/only/assets/under/here\";\n```\n\n----------------------------------------\n\nTITLE: Importing a Schema API (Python)\nDESCRIPTION: This snippet demonstrates how to import a USD file with the GeomModelAPI, specifying the schema APIs to import, and then verifies that the schema and its attributes are correctly applied to the imported sphere.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# Import\ncmds.file(new=True, f=True)\ncmds.mayaUSDImport(file=\"geom_api_on_sphere.usda\", apiSchema=[\"GeomModelAPI\"])\n\n# Check that the schema is still there:\nadaptor = mayaUsdLib.Adaptor(\"pSphere1\")\nprint(adaptor.GetAppliedSchemas())\n# result: ['GeomModelAPI']\n\n# Get the GeomModelAPI of the sphere:\ngeomModelAPI = adaptor.GetSchemaByName(\"GeomModelAPI\")\nprint(geomModelAPI.GetAuthoredAttributeNames())\n# result: ['model:cardGeometry']\n\n# Get cardGeometry\ncardGeometryAttribute = geomModelAPI.GetAttribute(\"model:cardGeometry\")\nprint(cardGeometryAttribute.Get())\n# result: cross\n```\n\n----------------------------------------\n\nTITLE: Installing Headers CMake\nDESCRIPTION: This snippet installs the header files defined in the HEADERS variable to a specific destination directory under the CMAKE_INSTALL_PREFIX. The destination directory is constructed as ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/render/px_vp20. This makes the headers available to other projects that depend on this library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/px_vp20/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${HEADERS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/render/px_vp20\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Packages (CMake)\nDESCRIPTION: This snippet installs the Python packages to the specified destination. It uses the `install` command to copy the entire `AL` directory from the binary directory to the `AL_INSTALL_PREFIX/lib/python` directory, making the Python package available for use.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/mayatest/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(\n    DIRECTORY\n        ${CMAKE_BINARY_DIR}/AL\n    DESTINATION\n        ${AL_INSTALL_PREFIX}/lib/python\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Compile Definitions (CMake)\nDESCRIPTION: Sets compile definitions for the library, including platform-specific macros (OSMac_, LINUX) and export macros (AL_MAYA_EVENTS_EXPORT, AL_MAYA_UTILS_EXPORT, AL_MAYA_MACROS_EXPORT). These macros control conditional compilation and symbol visibility.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${MAYAUTILS_LIBRARY_NAME}\n    PRIVATE\n        $<$<BOOL:${IS_MACOSX}>:OSMac_>\n        $<$<BOOL:${IS_LINUX}>:LINUX>\n        AL_MAYA_EVENTS_EXPORT\n        AL_MAYA_UTILS_EXPORT\n        AL_MAYA_MACROS_EXPORT\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Export Job Context in Python\nDESCRIPTION: This Python code snippet demonstrates how to register an export job context using the `mayaUsdLib.JobContextRegistry.RegisterExportJobContext` function. It defines an enabler function that returns a dictionary of export options, similar to the C++ example. These options are used when the context is chosen for export.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/Managing_export_options_via_JobContext_in_Python.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport mayaUsd.lib as mayaUsdLib\n\ndef MyContextExportEnabler():\n    \"\"\"Enabler function code. Returns a dictionary of export options\n    to be used when MyContext is chosen for export.\"\"\"\n    return {\n        \"shadingMode\" : \"useRegistry\",\n        \"convertMaterialsTo\" : [\"MyContextMaterials\"],\n        \"apiSchema\" : [\"MyContextLightApi\", \"MyContextShadowApi\"],\n        \"chaser\" : [\"MyContextMeshChaser\", \"MyContextXformChaser\"],\n        \"chaserArgs\" : [[\"MyContextMeshChaser\", \"frobiness\", \"42\"],\n                        [\"MyContextXformChaser\", \"precision\", \"5\"]]\n    }\n\nmayaUsdLib.JobContextRegistry.RegisterExportJobContext(\n    \"MyContext\", \n    \"UI name for MyContext\",\n    \"Tooltip for MyContext when used for export\",\n    MyContextExportEnabler)\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin JSON File (CMake)\nDESCRIPTION: Configures the plugInfo.json and mayaUsdPlugInfo.json files by copying them from the source directory to the build directory.  These JSON files provide metadata about the plugin, such as its name, version, and dependencies, which Maya uses to load and manage the plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/tutorials/import-export-plugin-c++/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/plugInfo.json\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/exampleImportExportPlugin/plugInfo.json\"\n)\n\nconfigure_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/mayaUsdPlugInfo.json\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/mayaUsdPlugInfo.json\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Script Files in CMake\nDESCRIPTION: This CMake code defines a list of Python test script files to be used for unit testing. It uses the `set` command to create a variable named `TEST_SCRIPT_FILES` containing the names of the Python scripts.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/render/mayaToHydra/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_SCRIPT_FILES\n    testMtohBasicRender.py\n    testMtohCommand.py\n    testMtohDagChanges.py\n    testMtohVisibility.py\n)\n```\n\n----------------------------------------\n\nTITLE: Bullet Rigid Body Schema Importer in Maya USD (Python)\nDESCRIPTION: This code snippet implements a Schema API importer for bullet rigid body simulations in Maya USD using Python. It defines functions to create a bullet simulation and a class `BulletRigidBodyShemaImporter` that inherits from `mayaUsdLib.SchemaApiAdaptor`. The `ApplySchemaForImport` method creates the bullet simulation if it doesn't already exist, and the `CopyFromPrim` method reads the velocity attribute from the USD prim and applies it to the Maya object.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndef _ApplyBulletSchema(mayaShape):\n    \"\"\"Creates a bullet simulation containing the \"mayaShape\".\"\"\"\n    if _GetBulletShape(mayaShape) is not None:\n        return True\n\n    path = om.MDagPath.getAPathTo(mayaShape)\n    if not path or not path.pop():\n        return False\n\n    BulletUtils.checkPluginLoaded()\n    RigidBody.CreateRigidBody.command(transformName=path.fullPathName(),\n\t\t\t\t\t\t\t\t  bAttachSelected=False)\n\n    return True\n\nclass BulletRigidBodyShemaImporter(mayaUsdLib.SchemaApiAdaptor):\n    #\n    # Not an incremental class this time. Import and export can be split in two\n    # separate classes as needed.\n    #\n    def CanAdaptForImport(self, jobArgs):\n        \"\"\"Can always import.\"\"\"\n        return True\n\n    def ApplySchemaForImport(self, primReaderArgs, context):\n        \"\"\"Called to create objects/attributes/connections required on import.\"\"\"\n        # Check if already applied:\n        if _GetBullet(self.mayaObject) is not None:\n            return True\n\n        retVal = _ApplyBulletSchema(self.mayaObject)\n        newObject = _GetBullet(self.mayaObject)\n        if newObject is None:\n            return False\n\n        # Register the new node so we can know which ones were created on import:\n        context.RegisterNewMayaNode(\n                primReaderArgs.GetUsdPrim().GetPath().pathString,\n                newObject)\n        return True\n\n    def CopyFromPrim(self, prim, args, context):\n        \"\"\"Barebones import callback.\"\"\"\n        rbSchema = UsdPhysics.RigidBodyAPI(prim)\n        if not rbSchema:\n            return False\n\n        velAttr = rbSchema.GetVelocityAttr()\n        if velAttr:\n            mayaUsdLib.ReadUtil.ReadUsdAttribute(\n                velAttr, _GetBullet(self.mayaObject),\n                \"initialVelocity\", args, context)\n\n        return True\n```\n\n----------------------------------------\n\nTITLE: Using Alembic Chaser with primvarprefix option (Python)\nDESCRIPTION: This snippet illustrates how to use the `usdExport` command with the `AlembicChaser` to export Maya attributes with specific prefixes as USD primvars. It demonstrates mapping Maya attribute prefixes to different USD namespaces for primvars.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/doc/README.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ncmds.usdExport(\n    file=usdFilePath,\n    chaser=['alembic'],\n    chaserArgs=[\n       ('alembic', 'primvarprefix', 'ABC_,ABC2_=customPrefix_,ABC3_=,ABC4_=customNamespace:'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Building Maya Plugin with pxr_plugin Macro\nDESCRIPTION: This snippet uses a custom macro `pxr_plugin` to define the Maya plugin 'pxrUsdPreviewSurface'. It specifies the plugin type, required libraries (arch, basePxrUsdPreviewSurface, mayaUsd, Maya Foundation and OpenMaya libraries), include directories (PXR and Maya include directories), source files (plugin.cpp), and private headers (api.h). It also disables precompiled headers.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/maya/plugin/pxrUsdPreviewSurface/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_plugin(${PXR_PACKAGE}\n    MAYA_PLUGIN\n\n    LIBRARIES\n        arch\n        basePxrUsdPreviewSurface\n        mayaUsd\n        ${MAYA_Foundation_LIBRARY}\n        ${MAYA_OpenMaya_LIBRARY}\n\n    INCLUDE_DIRS\n        ${PXR_INCLUDE_DIRS}\n        ${MAYA_INCLUDE_DIRS}\n\n    CPPFILES\n        plugin.cpp\n\n    PRIVATE_HEADERS\n        api.h\n\n    DISABLE_PRECOMPILED_HEADERS\n)\n```\n\n----------------------------------------\n\nTITLE: Prim Metadata Edit Router in Python\nDESCRIPTION: This Python code snippet implements an edit router for 'primMetadata' operations, specifically for variant selections within variant sets named 'mySessionVariant'. It routes these edits to the session layer of the stage containing the prim. It checks for the prim, metadata name ('variantSelection'), and variant set name ('mySessionVariant') before setting the 'layer' in the routingData.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/EditRouting.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef routeVariantSelectionToSessionLayer(context, routingData):\n    '''\n    Edit router implementation for 'primMetadata' operations that routes\n    variant selections within variantSets named 'mySessionVariant' to the\n    session layer of the stage that contains the prim.\n    '''\n    prim = context.get('prim')\n    if prim is None:\n        return\n\n    metadataName = context.get('primMetadata')\n    if metadataName != \"variantSelection\":\n        return\n\n    variantSetName = context.get('keyPath')\n    if variantSetName != \"mySessionVariant\":\n        return\n\n    routingData['layer'] = prim.GetStage().GetSessionLayer().identifier\n\nmayaUsd.lib.registerEditRouter('primMetadata', routeVariantSelectionToSessionLayer)\n\n```\n\n----------------------------------------\n\nTITLE: Importing USD Proxy Shape in Maya (MEL)\nDESCRIPTION: This MEL command creates a Maya proxy shape that references a USD file, allowing the USD scene to be displayed within Maya. It uses the `AL_usdmaya_ProxyShapeImport` command to load the specified USD file.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/meshTranslation/README.md#_snippet_0\n\nLANGUAGE: mel\nCODE:\n```\ncmds.AL_usdmaya_ProxyShapeImport(file=\"<PATH_TO_tutorialAssets_FOLDER>/primitive_world.usda\")\n```\n\n----------------------------------------\n\nTITLE: Manage the plugin UI in C++\nDESCRIPTION: These C++ functions are responsible for creating, filling, and querying the plugin's user interface. They leverage the Qt framework and Maya SDK to build the UI dialog, populate it with elements, and extract the values entered by the user.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/tutorials/import-export-plugin-c++/README.md#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nshowExportUI()      // Create the UI dialog and calls the next two functions\n                    // and save the new settings\nfillExportUI()      // Fill the dialog with UI element and their values\nqueryExportUI()     // Extract the values from the UI elements\n```\n\n----------------------------------------\n\nTITLE: Export Layout Animation (Python)\nDESCRIPTION: This python function exports the layout animation by iterating through frames 1 to 11, setting the current time, and then exporting the layout layer to a USD file. It uses the GetLayoutLayer() function to retrieve the layer.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/endToEndMaya/README.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nExportLayoutAnimation()\n```\n\n----------------------------------------\n\nTITLE: Handling Runtime Search Paths\nDESCRIPTION: This snippet handles the runtime search paths for macOS and Linux. It adds paths to the plugin's runtime search path, allowing it to find its dependencies at runtime. The paths added include relative paths, absolute paths based on PXR_USD_LOCATION, and paths within the installation prefix.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaPlugin/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX) \n    mayaUsd_init_rpath(rpath \"plugin\")\n    mayaUsd_add_rpath(rpath \"../lib\")\n    if(DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    elseif(DEFINED PXR_USD_LOCATION)\n        mayaUsd_add_rpath(rpath \"${PXR_USD_LOCATION}/lib\")\n    endif()\n    if(IS_LINUX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib64\")\n    endif()\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../../../Maya.app/Contents/MacOS\")\n    endif()\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/lib\")\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/plugin/pxr/lib\")\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/plugin/pxr/maya/lib\")\n    mayaUsd_install_rpath(rpath ${PXR_PACKAGE})\nendif()\n```\n\n----------------------------------------\n\nTITLE: LookdevXUfe Dependency Handling (CMake)\nDESCRIPTION: This snippet checks for the LookdevXUfe dependency when building LookdevXUsd.  If Maya version is greater than 2025, it tries to find LookdevXUfe, otherwise disables LookdevXUsd. If LookdevXUfe is not found, it disables the building of LookdevXUsd and prints a warning message.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_LOOKDEVXUSD_LIBRARY)\n    if(NOT BUILD_MAYAUSDAPI_LIBRARY)\n        message(FATAL_ERROR \"Building LookdevXUsd requires MayaUsdAPI.\")\n    endif()\n\n    if(MAYA_APP_VERSION VERSION_GREATER 2025)\n        find_package(LookdevXUfe) # Optional component - if not found, disable LookdevXUsd.\n    else()\n        set(BUILD_LOOKDEVXUSD_LIBRARY OFF)\n        message(WARNING \"Disabling LookdevXUsd: it is not supported by Maya ${MAYA_APP_VERSION}.\")\n    endif()\n    if (LookdevXUfe_FOUND)\n        message(STATUS \"Build LookdevXUsd with LookdevXUfe version: ${LookdevXUfe_VERSION}\")\n        message(STATUS \"   LookdevXUfe include dir: ${LookdevXUfe_INCLUDE_DIR}\")\n        message(STATUS \"   LookdevXUfe library    : ${LookdevXUfe_LIBRARY}\")\n    else()\n        set(BUILD_LOOKDEVXUSD_LIBRARY OFF)\n        message(WARNING \"Disabling LookdevXUsd as LookdevXUfe was not found (in Maya devkit).\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Connecting the Camera Proxy to a Maya Camera in MEL\nDESCRIPTION: This MEL code connects the camera proxy node to an existing Maya camera and specifies the path to a UsdGeomCamera within the USD stage. The USD camera prim path and Maya camera name must be defined. It connects various camera attributes from the proxy node to the Maya camera.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/cameraProxy.md#_snippet_1\n\nLANGUAGE: MEL\nCODE:\n```\nstring $usdCameraPrimPath = \"/viewports/interactive_cam\"; // <- for example, this needs to be defined in USD first.\nstring $mayaCamera = \"perspShape\";\nsetAttr ($cameraProxy + \".path\") $usdCameraPrimPath;\nconnectAttr -force -lock true ($cameraProxy + \".focalLength\")            ($mayaCamera + \".focalLength\");\nconnectAttr -force -lock true ($cameraProxy + \".nearClipPlane\")          ($mayaCamera + \".nearClipPlane\");\nconnectAttr -force -lock true ($cameraProxy + \".farClipPlane\")           ($mayaCamera + \".farClipPlane\");\nconnectAttr -force -lock true ($cameraProxy + \".orthographic\")           ($mayaCamera + \".orthographic\");\nconnectAttr -force -lock true ($cameraProxy + \".horizontalFilmAperture\") ($mayaCamera + \".horizontalFilmAperture\");\nconnectAttr -force -lock true ($cameraProxy + \".horizontalFilmOffset\")   ($mayaCamera + \".horizontalFilmOffset\");\nconnectAttr -force -lock true ($cameraProxy + \".verticalFilmAperture\")   ($mayaCamera + \".verticalFilmAperture\");\nconnectAttr -force -lock true ($cameraProxy + \".verticalFilmOffset\")     ($mayaCamera + \".verticalFilmOffset\");\nconnectAttr -force -lock true ($cameraProxy + \".focusDistance\")          ($mayaCamera + \".focusDistance\");\nconnectAttr -force -lock true ($cameraProxy + \".fStop\")                  ($mayaCamera + \".fStop\");\n```\n\n----------------------------------------\n\nTITLE: Lock Prim via ModelAPI Python\nDESCRIPTION: This Python script demonstrates how to lock a prim in Maya using the ModelAPI from the AL.usd.schemas.maya module. It retrieves the stage, gets a specific prim, and sets its lock state to \"inherited\", causing it to inherit the lock status from its ancestors. This requires the AL_USDMaya plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/lock/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom AL import usdmaya\nfrom AL.usd.schemas import maya as maya_schemas\nstageCache = usdmaya.StageCache.Get()\nstage = stageCache.GetAllStages()[0]\ntransC = stage.GetPrimAtPath('/transA/camB/transC')\ntransCApi = maya_schemas.ModelAPI(transC)\ntransCApi.SetLock(\"inherited\")\n```\n\n----------------------------------------\n\nTITLE: Using ScopedTransaction (C++)\nDESCRIPTION: This code snippet shows how to use the `ScopedTransaction` class in C++ to automatically open and close a transaction. When the `ScopedTransaction` instance goes out of scope, the transaction is automatically closed.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/AL/usd/transaction/README.md#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nAL::usd::transaction::ScopedTransaction transaction(stage, layer);\n/// perform some operations\n/// going out of scope will close transaction\n```\n\n----------------------------------------\n\nTITLE: Define ImportModule Python Test in CMake\nDESCRIPTION: This CMake code defines a test for importing modules within the ALUSDMaya Python environment. It sets the `PYTHON_MODULE` to `testUSDMayaPythonModuleOnly` and specifies environment variables for plugin path and library path overrides. The `NO_STANDALONE_INIT` flag indicates that this test does not require standalone initialization.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaTestPlugin/py/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_add_test(TestALUSDMayaPython_ImportModule\n    PYTHON_MODULE testUSDMayaPythonModuleOnly\n    ENV\n        \"${PXR_OVERRIDE_PLUGINPATH_NAME}=${ADDITIONAL_PXR_PLUGINPATH_NAME}\"\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n    NO_STANDALONE_INIT\n)\n```\n\n----------------------------------------\n\nTITLE: USD Prim Locking Example (ADSK_USDMaya)\nDESCRIPTION: This USD snippet demonstrates how to lock a prim's transform operations individually in ADSK_USDMaya using the `mayaLock` metadata. This metadata is applied to each `xformOp` and affects the current prim and its descendants. It behaves like native Maya attributes, requiring explicit locking state at individual `xformOp`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/MIGRATION_GUIDE.md#_snippet_1\n\nLANGUAGE: usd\nCODE:\n```\ndef Xform \"geo\"\n{\n    float3 xformOp:rotateXYZ (\n        mayaLock = \"on\"\n    )\n    double3 xformOp:translate (\n        mayaLock = \"on\"\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Install Headers (CMake)\nDESCRIPTION: This snippet installs the header files specified in the `HEADERS` variable to a designated destination directory within the installation prefix. The destination directory is `${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/commands/`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/commands/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES ${HEADERS}\n     DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/commands/\n)\n```\n\n----------------------------------------\n\nTITLE: Running Tests via Command Line\nDESCRIPTION: This command runs the tests registered within a Maya plugin, leveraging the AL_usdmaya_UnitTestHarness command. It accepts various flags directly from googletest, allowing for filtering, output customization, and other testing options. The flags control the behavior of the googletest framework.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/testing.md#_snippet_0\n\nLANGUAGE: MEL\nCODE:\n```\nAL_usdmaya_UnitTestHarness [flags]\n```\n\n----------------------------------------\n\nTITLE: OgsFragment Class Usage in MaterialXGenOgsXml\nDESCRIPTION: The OgsFragment class serves as the main entry point for generating OGS XML fragments. It takes a MaterialX::Element and a shader generation environment as input. It provides methods to retrieve the fragment's source code and name, facilitating the integration of MaterialX shaders into Maya's rendering pipeline.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/MaterialXGenOgsXml/README.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Forcing Mesh Translation from USD to Maya (Python)\nDESCRIPTION: This Python code snippet forces the translation of a specific Mesh prim from USD into Maya using the `AL_usdmaya_TranslatePrim` command with the `fi` (force import) flag. It selects the proxy shape and then imports the prim specified by its path. It depends on the `maya.cmds` module.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/meshTranslation/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Python script editor\nfrom maya import cmds\n\n# Instead of using this select command you can pass the name of the proxy shape into -p\ncmds.select(cmds.listRelatives(cmds.ls(type=\"AL_usdmaya_ProxyShape\")[0], p=True))\n\n# force the translator to import the prim into Maya the specified path\ncmds.AL_usdmaya_TranslatePrim(fi=True, ip=\"/root/sphere\")\n\ncmds.select(clear=True)\n```\n\n----------------------------------------\n\nTITLE: Creating the Camera Proxy Node in MEL\nDESCRIPTION: This MEL snippet creates the AL_usd_ProxyUsdGeomCamera node and connects it to a USD stage proxy. The stage proxy name must be defined. It also selects the camera node.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/cameraProxy.md#_snippet_0\n\nLANGUAGE: MEL\nCODE:\n```\nstring $stageProxy = \"AL_usdmaya_Proxy\"; // <- for example, this should be the name of the stage proxy shape.\nstring $cameraProxy = `createNode AL_usd_ProxyUsdGeomCamera`;\nconnectAttr ($stageProxy + \".outStageData\") ($cameraProxy + \".stage\");\nselect -r $cameraNode;\n```\n\n----------------------------------------\n\nTITLE: Setting Test Script Files (Python)\nDESCRIPTION: This snippet defines a CMake variable, `TEST_SCRIPT_FILES`, containing a list of Python scripts that will be executed as unit tests. These scripts cover various aspects of the Maya USD integration, such as attribute handling, command execution, and scene manipulation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/ufe/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_SCRIPT_FILES\n    testAttribute.py\n    testAttributeBlock.py\n    testAttributes.py\n    testBlockedLayerEdit.py\n    testChildFilter.py\n    testComboCmd.py\n    testContextOps.py\n    testDefaultPrimCmds.py\n    testDuplicateCmd.py\n    testDuplicateProxyShape.py\n    testEditRouting.py\n    testPrimMetadataEditRouting.py\n    testGroupCmd.py\n    testMatrices.py\n    testMayaPickwalk.py\n    testMoveCmd.py\n    testObject3d.py\n    testObservableScene.py\n    testParentCmd.py\n    testPayloadCommands.py\n    testPointInstances.py\n    testPythonWrappers.py\n    testReferenceCommands.py\n    testRelationshipBlock.py\n    testRename.py\n    testReorderCmd.py\n    testRotateCmd.py\n    testRotateCmdUndoRedo.py\n    testRotatePivot.py\n    testPivotConversion.py\n    testScaleCmd.py\n    testSceneItem.py\n    testSelection.py\n    testSelectionNotification.py\n    testSelectionByArray.py\n    testSchemas.py\n    testToggleCommands.py\n    testTransform3dChainOfResponsibility.py\n    testTransform3dTranslate.py\n    testTransform3dTranslateWithTimeSamples.py\n    testUIInfoHandler.py\n    testUfePythonImport.py\n    testVariant.py\n    testVisibilityCmd.py\n)\n```\n\n----------------------------------------\n\nTITLE: Promoting Header List\nDESCRIPTION: This snippet uses a custom CMake function `mayaUsd_promoteHeaderList` to manage the promotion of header files for the `mayaUsd_Schemas` library. It takes the list of headers, the `TARGET_NAME`, and a base directory as input.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/schemas/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_promoteHeaderList(HEADERS ${HEADERS}\n                          BASEDIR ${TARGET_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Target with CMake\nDESCRIPTION: This CMake command installs the UFE Python target library and runtime components. It specifies the installation destination as a subdirectory within the project's Python modules directory under the CMake install prefix. The target is installed for both library and runtime environments.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/ufe/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${UFE_PYTHON_TARGET_NAME}\n    LIBRARY\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/python/${PROJECT_NAME}/${UFE_PYTHON_MODULE_NAME}\n    RUNTIME\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/python/${PROJECT_NAME}/${UFE_PYTHON_MODULE_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Appending Node Sources to List CMake\nDESCRIPTION: Appends a list of source files related to Maya nodes in AL_USDMaya to the AL_usdmaya_nodes_source list. These source files implement the functionality defined in the corresponding header files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND AL_usdmaya_nodes_source\n        AL/usdmaya/nodes/Engine.cpp\n        AL/usdmaya/nodes/Layer.cpp\n        AL/usdmaya/nodes/LayerManager.cpp\n        AL/usdmaya/nodes/MeshAnimCreator.cpp\n        AL/usdmaya/nodes/MeshAnimDeformer.cpp\n        AL/usdmaya/nodes/ProxyShape.cpp\n        AL/usdmaya/nodes/ProxyShapeSelection.cpp\n        AL/usdmaya/nodes/ProxyUsdGeomCamera.cpp\n        AL/usdmaya/nodes/RendererManager.cpp\n        AL/usdmaya/nodes/Transform.cpp\n        AL/usdmaya/nodes/Scope.cpp\n        AL/usdmaya/nodes/BasicTransformationMatrix.cpp\n        AL/usdmaya/nodes/TransformationMatrix.cpp\n        AL/usdmaya/nodes/proxy/PrimFilter.cpp\n        AL/usdmaya/nodes/proxy/ProxyShapeMetaData.cpp\n        AL/usdmaya/nodes/proxy/ProxyShapeVariantFallbacks.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting include directories for AL_USDMayaUtils\nDESCRIPTION: This snippet specifies the include directories for the AL_USDMayaUtils library, making the header files in those directories available during compilation. It includes both project-specific include directories (`${USDMAYAUTILS_INCLUDE_LOCATION}`) and system-level include directories for USD and Maya (`${PXR_INCLUDE_DIRS}`, `${MAYA_INCLUDE_DIRS}`).\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdmayautils/AL/usdmaya/utils/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${USDMAYA_UTILS_LIBRARY_NAME} \n    PUBLIC\n        ${USDMAYAUTILS_INCLUDE_LOCATION}\n)\ntarget_include_directories(${USDMAYA_UTILS_LIBRARY_NAME} \n    SYSTEM PUBLIC\n        ${PXR_INCLUDE_DIRS}\n        ${MAYA_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Initialising Node Attributes and UI using NodeHelper (C++)\nDESCRIPTION: This code demonstrates using the AL::maya::NodeHelper class to initialize the node's attributes and create a UI frame in the Attribute Editor. It shows how to use the setNodeType method to associate the AE template, addFrame to create a UI frame, and addFloat to create float attributes with specific flags (kReadable, kWritable, kStorable, kConnectable). It also illustrates setting up attribute dependencies using attributeAffects. All Maya API calls are wrapped in a try/catch block to handle potential errors.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/developer.md#_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nMStatus MyMayaNode::initialise()\n{\n  // the node helper tests *every* return argument from Maya, so you don't have\n  // to. Just wrap the initialise in a try/catch, and if anything goes wrong \n  // it will jump into the catch block with an MStatus\n  try\n  {\n    // make sure you add this line first! \n    // The node helper will generate the AE template automatically, \n    // in a function called \"AEMyMayaNodeTemplate\". We need to tell\n    // the node helper that the node type is \"MyMayaNode\", otherwise\n    // it won't be able to generate a meaningful name!\n    setNodeType(kTypeName);\n\n    // Next we will add a UI Frame, that will have the title \n    // \"My Maya Node Controls\". All attributes that appear \n    // under this frame, will be added to that UI control in the \n    // Attribute Editor. (unless they are hidden, or outputs)\n    addFrame(\"My Maya Node Controls\");\n\n    // Now lets add a couple of float attributes. The arguments are:\n    //   - the long name\n    //   - the short name\n    //   - the default value\n    //   - a collection of flags (described in a section below!)\n    m_inFloat  = addFloat(\"inputFloat\", \"if\", 0.0f, kReadable | kWritable | kStorable | kConnectable);\n    m_outFloat = addFloat(\"outputFloat\", \"of\", 0.0f, kReadable | kConnectable);\n\n    // now lets set up the dependency between the input and the output attribute\n    attributeAffects(m_inFloat, m_outFloat);\n  }\n  catch (const MStatus& status)\n  {\n    return status;\n  }\n\n  // Our node successfully initialised! Woot!\n  // All that's left is to generate the attribute editor template. \n  generateAETemplate();\n\n  return MS::kSuccess;\n}\n```\n\n----------------------------------------\n\nTITLE: Alembic Chaser primvarprefix Example\nDESCRIPTION: This Python snippet shows an example of using the mayaUSDExport command with the Alembic chaser and the primvarprefix option to export Maya attributes matching specified prefixes as USD primvars.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/commands/Readme.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncmds.loadPlugin('pxrUsd')\ncmds.mayaUSDExport(\n    file=usdFilePath,\n    chaser=['alembic'],\n    chaserArgs=[\n       ('alembic', 'primvarprefix', 'ABC_,ABC2_=customPrefix_,ABC3_=,ABC4_=customNamespace:'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Disable Selectability of Root Prim (Python)\nDESCRIPTION: This code disables selectability for all prims in the scene by setting the root prim's selectability to 'unselectable'.  This cascades down to all descendants.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/selectability/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nroot = stage.GetPrimAtPath(\"/root\")\nrootApi = maya_schemas.ModelAPI(root)\nrootApi.SetSelectability(maya_schemas.Tokens.selectability_unselectable)\n```\n\n----------------------------------------\n\nTITLE: Adding a Subdirectory for Tests in CMake\nDESCRIPTION: This CMake snippet adds a subdirectory named `tests` to the build. This directory typically contains unit tests for the Maya USD translators.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT SKIP_USDMAYA_TESTS)\n  add_subdirectory(tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Expansion of AL_MAYA_DEFINE_NODE Macro (C++)\nDESCRIPTION: This code shows how the AL_MAYA_DEFINE_NODE macro expands into the definition of the node's type name (kTypeName), a unique type ID (kTypeId), and a creator function that instantiates the node. This expansion showcases the underlying code generated by the macro, revealing the mechanisms for node registration within Maya.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/developer.md#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n// the typename for the node\nconst MString MyMayaNode::kTypeName(\"MyMayaNode\");\n\n// the unique type ID of the node\nconst MTypeId MyMayaNode::kTypeId(0x12345);\n\n// a very simple creator function for the node \nvoid* MyMayaNode::creator()\n{\n  return new MyMayaNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Launching User Exported Attributes UI (Python)\nDESCRIPTION: This code snippet demonstrates how to launch the User Exported Attributes UI in Maya, styled like the channel box. This UI allows users to tag attributes for export to USD, which are then stored in the `USD_UserExportedAttributesJson` attribute.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/doc/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pxr.UsdMaya import userExportedAttributesUI\nuserExportedAttributesUI.UserExportedAttributeWidget().show(dockable=True, area='right', floating=False)\n```\n\n----------------------------------------\n\nTITLE: Python Variant Fallback Example\nDESCRIPTION: This Python example demonstrates how to store variant fallbacks in the session layer's custom data for a USD stage. It uses the `json` module to serialize the variant fallbacks dictionary and assigns it to the 'variant_fallbacks' key in the custom layer data.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> variantFallbacks = {'geo': ['proxy', 'render']}\n>>> customLayerData = stage.GetSessionLayer().customLayerData\n>>> customLayerData['variant_fallbacks'] = json.dumps(variantFallbacks)\n>>> stage.GetSessionLayer().customLayerData = customLayerData\n>>> print(stage.GetSessionLayer().ExportToString())\n#sdf 1.4.32\n(\n    customLayerData = {\n        string variant_fallbacks = '{\"geo\": [\"proxy\", \"render\"]}='\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Library Scripts using CMake\nDESCRIPTION: This snippet sets the installation prefix for Python library files using CMake, and then installs the Python scripts in `maya_lib_scripts_src` to that prefix.  This ensures Python scripts are installed in the appropriate Python package location based on project name and allows the scripts to be importable.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/resources/scripts/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(PYTHON_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/lib/python/${PROJECT_NAME}/lib)\ninstall(FILES ${maya_lib_scripts_src} DESTINATION ${PYTHON_INSTALL_PREFIX})\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files in CMake\nDESCRIPTION: This CMake snippet installs the header files specified in the HEADERS variable to the specified destination. The install command copies the header files to the ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/listeners/ directory during the installation process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/listeners/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES ${HEADERS}\n     DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/listeners/\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring a New Maya Command in C++\nDESCRIPTION: This code snippet demonstrates the basic structure for declaring a new MEL command in C++ using the Maya API. It defines a class derived from MPxCommand and uses the AL_MAYA_DECLARE_COMMAND macro to declare necessary static members.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/developer.md#_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nclass MyCommand : public MPxCommand\n{\npublic:\n  AL_MAYA_DECLARE_COMMAND();\n  MStatus doIt(const MArgList& args) override;\n}\n```\n\n----------------------------------------\n\nTITLE: Configure usdExport Defaults in plugInfo.json\nDESCRIPTION: This JSON snippet demonstrates how to set default flags for the `usdExport` command in Maya USD using the `plugInfo.json` file. It configures options such as `exportMaterialCollections`, `chaser`, and `chaserArgs`. This allows users to define site-specific defaults for exporting USD files from Maya.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/doc/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"Plugins\": [\n    {\n      \"Info\": {\n        \"UsdMaya\": {\n            \"UsdExport\": {\n              \"exportMaterialCollections\": true,\n              \"chaser\": [\"alembic\"],\n              \"chaserArgs\": [\n                  [\"alembic\", \"primvarprefix\", \"ABC_,ABC2_=customPrefix_,ABC3_=,ABC4_=customNamespace:\"],\n                  [\"alembic\", \"attrprefix\", \"ABC_,ABC2_=customPrefix_,ABC3_=,ABC4_=customNamespace:\"]\n              ]\n          }\n        }\n      },\n      \"Name\": \"MySiteSpecificConfigPlugin\",\n      \"Type\": \"resource\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Define USD plugin information in JSON\nDESCRIPTION: This JSON file describes the plugin to the USD plugin system.  It defines the plugin's name, type, root path, library path, and the `JobContextPlugin` entry to tell USD the type of the plugin as export plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/tutorials/import-export-plugin-c++/README.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Plugins\": [\n        {\n            \"Name\": \"exampleImportExportPlugin\",\n            \"Type\": \"library\",\n            \"Root\": \"..\",\n            \"LibraryPath\": \"exampleImportExportPlugin.mll\",\n            \"Info\": {\n                \"UsdMaya\": {\n                    \"JobContextPlugin\": {\n                    }\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Instancing USD Scene into Maya\nDESCRIPTION: This C++ code demonstrates how to instance a USD scene into Maya multiple times using the AL_usdmaya_ProxyShapeImport command, by specifying multiple transform nodes.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nAL_usdmaya_ProxyShapeImport -file \"/scratch/dev/myaweomescene.usda\" -name \"MyAwesomeScene\" \"transform1\" \"transform2\";\n```\n\n----------------------------------------\n\nTITLE: Using the ShadowAPI Adaptor (Python)\nDESCRIPTION: This snippet shows how to use the registered ShadowAPI adaptor to read and write the shadowColor attribute of a Maya point light as if it were the inputs:shadow:color attribute of the ShadowAPI. It showcases the interaction between the custom adaptor and the Maya attributes.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nlightShape1 = cmds.pointLight()\ncmds.setAttr(lightShape1 + \".shadowColor\", 0.5, 0.25, 0)\n\nadaptor = mayaUsdLib.Adaptor(lightShape1)\nprint(adaptor.GetAppliedSchemas())\n# result: Yes, I can adapt pointLightShape1\n# result: [\"ShadowAPI\"]\n\nschema = adaptor.GetSchemaByName(\"ShadowAPI\")\n# result: Yes, I can adapt pointLightShape1\n\nprint(schema.GetAuthoredAttributeNames())\n# result: [\"inputs:shadow:color\", \"inputs:shadow:enable\"]\n\nshadowColor = schema.GetAttribute(\"inputs:shadow:color\")\nprint(shadowColor.Get())\n# result: (0.21763764, 0.047366142, 0)\nprint(mayaUsdLib.ConvertMayaToLinear((0.5, 0.25, 0))\n# result: (0.21763764, 0.047366142, 0)\n\nshadowColor.Set((1,0,0))\nprint(cmds.getAttr(\"pointLightShape1.shadowColor\"))\n# result: [(1.0, 0.0, 0.0)]\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple Prims from USD to Maya (MEL)\nDESCRIPTION: This MEL command imports multiple USD prims into Maya by specifying a comma-separated list of prim paths using the `ip` flag. The `fi` flag forces the translation. It leverages the `AL_usdmaya_TranslatePrim` command.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/meshTranslation/README.md#_snippet_2\n\nLANGUAGE: mel\nCODE:\n```\ncmds.AL_usdmaya_TranslatePrim(fi=True, ip=\"/root/sphere,/root/cube\")\n```\n\n----------------------------------------\n\nTITLE: Defining the mayaUsd_Schemas Target\nDESCRIPTION: This snippet defines the target name as `mayaUsd_Schemas` and creates a shared library with that name using CMake's `add_library` command.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/schemas/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TARGET_NAME mayaUsd_Schemas)\n\nadd_library(${TARGET_NAME} SHARED)\n```\n\n----------------------------------------\n\nTITLE: Registering a Maya USD Layer Editor Selection Callback in Python\nDESCRIPTION: This Python snippet demonstrates how to use `mayaUsd.lib.registerUICallback` to register a callback function that is triggered when the layer selection changes in the Maya USD Layer Editor. The callback function receives the object path of the stage and a list of selected layer IDs.  The callback then prints the layerIds.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/commands/Readme.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport mayaUsd.lib\ndef exampleCallback(context, callbackData):\n    # Get the stage object path\n    objectPath = context.get('objectPath')\n    # Get the list of selected layers\n    layerIds = callbackData.get('layerIds')\n    for layerId in layerIds:\n        print(layerIds)\n\nmayaUsd.lib.registerUICallback('onLayerEditorSelectionChanged', exampleCallback)\n```\n\n----------------------------------------\n\nTITLE: Header List Configuration - CMake\nDESCRIPTION: This snippet defines a list of header files to be included in the library. It first creates a list named HEADERS containing the names of the header files. Then, it conditionally appends additional header files to the list based on the UFE_TRIE_NODE_HAS_CHILDREN_COMPONENTS_ACCESSOR flag.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/utils/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    adaptor.h\n    jointWriteUtils.h\n    meshReadUtils.h\n    meshWriteUtils.h\n    readUtil.h\n    roundTripUtil.h\n    shadingUtil.h\n    userTaggedAttribute.h\n    writeUtil.h\n    xformStack.h\n)\n\nif(UFE_TRIE_NODE_HAS_CHILDREN_COMPONENTS_ACCESSOR)\n    list(APPEND HEADERS\n        orphanedNodesManagerUtil.h\n        proxyAccessorUtil.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Test Script Files (CMake)\nDESCRIPTION: This snippet defines a CMake variable, `TEST_SCRIPT_FILES`, as a list of Python script file names to be used for unit tests. These scripts are expected to reside in a location where CMake can find them during the configuration process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsdAPI/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_SCRIPT_FILES\n    testMayaUsdAPIProxyStage.py\n    testMayaUsdAPIProxyShapeNotice.py\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Clipboard Support\nDESCRIPTION: This snippet conditionally adds 'wrapClipboard.cpp' to the target sources and defines UFE_CLIPBOARD_SUPPORT based on the UFE_CLIPBOARD_SUPPORT variable, enabling clipboard functionality in the Python extension.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/python/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (UFE_CLIPBOARD_SUPPORT)\n    target_sources(${PYTHON_TARGET_NAME}\n        PRIVATE\n            wrapClipboard.cpp\n    )\n\n    target_compile_definitions(${PYTHON_TARGET_NAME}\n        PRIVATE\n            UFE_CLIPBOARD_SUPPORT=1\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining MayaUSD Versions\nDESCRIPTION: This snippet sets compiler definitions for the mayaUsd project, defining version numbers for ADSK USD, mayaUsd and Maya python.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        ADSK_USD_VERSION=${ADSK_USD_VERSION}\n        MAYAUSD_VERSION=${MAYAUSD_VERSION}\n        MAYA_PY_VERSION=${MAYA_PY_VERSION}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing public headers for AL_USDMayaUtils\nDESCRIPTION: This snippet installs the public header files of the AL_USDMayaUtils library to the specified destination directory (`${AL_INSTALL_PREFIX}/include/AL/usdmaya/utils`). This makes the headers available for other projects that depend on the AL_USDMayaUtils library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdmayautils/AL/usdmaya/utils/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ninstall( FILES ${usdmaya_utils_headers}\n        DESTINATION ${AL_INSTALL_PREFIX}/include/AL/usdmaya/utils\n)\n```\n\n----------------------------------------\n\nTITLE: Preventing Commands with Edit Router in Python\nDESCRIPTION: This Python code snippet demonstrates how to prevent a command from executing by raising an exception within an edit router. The `preventCommandEditRouter` function raises an exception with a message indicating that the operation is not permitted, effectively canceling the command.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/EditRouting.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndef preventCommandEditRouter(context, routingData):\n    '''\n    Edit router that prevents an operation from happening.\n    '''\n    opName = context.get('operation') or 'unknown operation'\n    raise Exception('Sorry, %s is not permitted' % opName)\n\n```\n\n----------------------------------------\n\nTITLE: Excluding Prims from Proxy Shape\nDESCRIPTION: This C++ code shows how to exclude specific prims from being displayed in the proxy by using the -excludePrimPath/-epp flag in AL_usdmaya_ProxyShapeImport command.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\n-excludePrimPath \"/do/not/show/this/prim\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion for MayaToHydra\nDESCRIPTION: This CMake snippet conditionally adds the `render/mayaToHydra` subdirectory if the `BUILD_HDMAYA` variable is enabled. This allows for selectively including the Maya to Hydra bridge during the build process, depending on the project's configuration. The `BUILD_HDMAYA` variable should be defined elsewhere in the project's CMake configuration.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_HDMAYA)\n    add_subdirectory(render/mayaToHydra)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install SVG Icons for Shared Components (Maya 2023+)\nDESCRIPTION: This CMake snippet installs SVG icons for shared components, iterating through a list of icon file paths (`SHARED_COMPONENTS_ICONS`). This ensures that necessary icons are available for the shared components' user interface elements. The installation is performed conditionally, only for Maya versions 2023 and later.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/resources/ae/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n set(SHARED_COMPONENTS_ICONS\n        ${MAYAUSD_SHARED_COMPONENTS}/icons/dark/add\n        ${MAYAUSD_SHARED_COMPONENTS}/icons/dark/delete\n        ${MAYAUSD_SHARED_COMPONENTS}/icons/dark/menu\n        ${MAYAUSD_SHARED_COMPONENTS}/icons/dark/selector\n        ${MAYAUSD_SHARED_COMPONENTS}/icons/dark/warning\n    )\n    foreach(ICON_BASE ${SHARED_COMPONENTS_ICONS})\n        install(FILES \"${ICON_BASE}.svg\"\n            DESTINATION \"${CMAKE_INSTALL_PREFIX}/lib/python/usd_shared_components/icons/dark\"\n        )\n    endforeach()\n```\n\n----------------------------------------\n\nTITLE: Add Prim to Context Mapping\nDESCRIPTION: Adds a mapping between a USD prim and a Maya object to the translator context. This allows for retrieving the Maya object associated with a USD prim during the translation process. The context serves as a storage for these mappings.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/AL/usdmaya/fileio/translators/README.md#_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nGetContext()->AddPrim(usdPrim, mayaObject);\n```\n\n----------------------------------------\n\nTITLE: Applying Compiler Configuration\nDESCRIPTION: This snippet applies a predefined compiler configuration for the `mayaUsd_Schemas` target, presumably handled by a custom CMake function `mayaUsd_compile_config`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/schemas/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_compile_config(${TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Importing USD with Fallback Frame Range (Demo2)\nDESCRIPTION: This command imports a USD file containing an ALFrameRange prim without any explicit frame values. In this case, the Maya animation and visible range will be set based on the startTimeCode and endTimeCode metadata defined in the root layer of the USD file. Replace `<PATH_TO_ASSETS_FOLDER_IN_THIS_DIRECTORY>/frame_range_stage.usda` with the actual path to the USD file.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/frameRanges/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncmds.AL_usdmaya_ProxyShapeImport(file=\"<PATH_TO_ASSETS_FOLDER_IN_THIS_DIRECTORY>/frame_range_stage.usda\")\n```\n\n----------------------------------------\n\nTITLE: Append compute shaders to list (CMake)\nDESCRIPTION: This snippet appends the names of compute shader files (GLSL, OpenCL, and a JSON file) to the `MAYAUSD_COMPUTESHADERS` list. This list is later used for installation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/vp2ComputeShaders/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND MAYAUSD_COMPUTESHADERS\n    computeNormals.glsl\n    computeNormals.cl\n    plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Interactive Python Test Scripts\nDESCRIPTION: This CMake snippet defines a separate list of Python test scripts that are intended for interactive testing. These tests likely require user interaction or visual inspection. It uses the `set` command to define the `INTERACTIVE_TEST_SCRIPT_FILES` variable.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/utils/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INTERACTIVE_TEST_SCRIPT_FILES\n    testUtilsSelectability.py\n    testUtilsSelectabilityPointInstanceSelection.py\n)\n```\n\n----------------------------------------\n\nTITLE: Installing MEL File\nDESCRIPTION: This snippet installs the configured MEL file `AEpxrUsdPreviewSurfaceTemplate.mel` to the specified destination directory under the PXR installation prefix. This makes the MEL script available for Maya to use.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/maya/plugin/pxrUsdPreviewSurface/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/AEpxrUsdPreviewSurfaceTemplate.mel\n    DESTINATION \"${PXR_INSTALL_PREFIX}/${PXR_INSTALL_SUBDIR}/lib/usd/usdMaya/resources\"\n)\n```\n\n----------------------------------------\n\nTITLE: Export frame range using AL_usdmaya_ExportCommand\nDESCRIPTION: This example demonstrates how to export a specific frame range using the AL_usdmaya_ExportCommand. The `-f` flag specifies the output file path, and the `-frameRange` or `-ani` flag set frame range for animation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/importExport.md#_snippet_3\n\nLANGUAGE: MEL\nCODE:\n```\nAL_usdmaya_ExportCommand -f \"<path/to/out/file.usd>\" -frameRange 0 24\n```\n\nLANGUAGE: MEL\nCODE:\n```\nAL_usdmaya_ExportCommand -f \"<path/to/out/file.usd>\" -ani\n```\n\n----------------------------------------\n\nTITLE: Installing Top-Level plugInfo.json for MayaUSD\nDESCRIPTION: This snippet writes a top-level plugInfo.json file that includes the resources directory, allowing Maya to discover the plugin's resources. It then installs this file to the plugin directory. This approach enables a modular plugin structure where resource locations can be managed separately.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/pxrUsdTranslators/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE\n \"file(WRITE \\\"${CMAKE_CURRENT_BINARY_DIR}/plugin/plugInfo.json\\\" \\\"{\\n    \\\\\\\"Includes\\\\\\\": [ \\\\\\\"*/resources/\\\\\\\" ]\\n}\\\")\"\n)\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/plugin/plugInfo.json\n DESTINATION ${AL_INSTALL_PREFIX}/plugin\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Target Sources in CMake\nDESCRIPTION: This CMake snippet defines the source files for the ${PROJECT_NAME} target. It uses the target_sources command to specify the private source files required for building the target, which include notice.cpp, proxyShapeNotice.cpp, and stageNoticeListener.cpp.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/listeners/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n       notice.cpp\n       proxyShapeNotice.cpp\n       stageNoticeListener.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Run-Time Search Paths\nDESCRIPTION: This snippet sets run-time search paths (rpaths) for macOS and Linux. It uses custom CMake functions (`mayaUsd_init_rpath`, `mayaUsd_add_rpath`, `mayaUsd_install_rpath`) to define paths for shared libraries. It uses the variables `MAYAUSD_TO_USD_RELATIVE_PATH`, `PXR_USD_LOCATION` and `MAYAUSDUI_INSTALL_PATH` to determine the locations to add to the rpath.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/ui/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX)\n    mayaUsd_init_rpath(rpath \"lib\")\n    if(DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    elseif(DEFINED PXR_USD_LOCATION)\n        mayaUsd_add_rpath(rpath \"${PXR_USD_LOCATION}/lib\")\n    endif()\n    if(IS_LINUX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib64\")\n    endif()\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../Maya.app/Contents/MacOS\")\n        if (Qt6_FOUND)\n            mayaUsd_add_rpath(rpath \"@executable_path/../Frameworks\")\n        endif()\n    endif()\n    mayaUsd_add_rpath(rpath ${MAYAUSDUI_INSTALL_PATH})\n    mayaUsd_install_rpath(rpath ${PROJECT_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install Headers CMake\nDESCRIPTION: This snippet installs the header files defined in the HEADERS variable to a specific destination directory under the installation prefix. The destination directory is determined by combining CMAKE_INSTALL_PREFIX, PROJECT_NAME, and the render/vp2RenderDelegate subdirectory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/vp2RenderDelegate/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES ${HEADERS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/render/vp2RenderDelegate\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Paths\nDESCRIPTION: Defines the installation paths for resources and the library. The resources path specifies where additional files like plugInfo.json are installed, while the library path indicates where the compiled library is placed.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/translators/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(RESOURCES_INSTALL_PATH\n    ${CMAKE_INSTALL_PREFIX}/lib/usd/${TARGET_NAME}/resources\n)\n\nset(LIBRARY_INSTALL_PATH\n    ${CMAKE_INSTALL_PREFIX}/lib\n)\n```\n\n----------------------------------------\n\nTITLE: AL_usdmaya File Import - MEL Example\nDESCRIPTION: This MEL command uses the `file` command to import a USD file with the `AL usdmaya import` type. It specifies the file path and import options. This approach is specific to the AL_USDMaya plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/MIGRATION_GUIDE.md#_snippet_9\n\nLANGUAGE: MEL\nCODE:\n```\nfile -force -typ \"AL usdmaya import\" -options \"....\" /path/to/out/file.usd\n```\n\n----------------------------------------\n\nTITLE: Layout Shot in Maya with USD (Python)\nDESCRIPTION: This python script loads a USD stage into Maya using the AL_USDMaya plugin, retrieves the stage and layout layer, sets the current edit target, opens the USD outliner (if usd-qt-components is available), animates the camera, and exports the layout animation to a USD file. It relies on the AL_USDMaya plugin for USD integration in Maya.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/endToEndMaya/README.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport maya\nimport os\nfrom pxr import Sdf\n\nASSET_BASE = os.getcwd()\n\ndef LoadStage():\n    if not maya.cmds.pluginInfo('AL_USDMayaPlugin', l=True, q=True):\n        maya.cmds.loadPlugin('AL_USDMayaPlugin')\n    stageFile = os.path.join(ASSET_BASE, 'shots/s00_01/s00_01.usd')\n    if not os.path.exists(stageFile):\n        raise RuntimeError('File not found: %s'%stageFile)\n    maya.cmds.AL_usdmaya_ProxyShapeImport(f=stageFile, name='shot')\n\ndef GetStage():\n    from AL import usdmaya\n    stageCache = usdmaya.StageCache.Get()\n    stages = stageCache.GetAllStages()\n    if stages:\n        return stages[0]\n    else:\n        raise RuntimeError('No stage loaded in AL_USDMaya!')\n\ndef GetLayoutLayer():\n    stage = GetStage()\n    layoutLayerFilePath = os.path.join(ASSET_BASE, 'shots/s00_01/s00_01_layout.usd')\n\n    # we use Sdf, a lower level library, to obtain the 'layout' layer.\n    workingLayer = Sdf.Layer.FindOrOpen(layoutLayerFilePath)\n    assert stage.HasLocalLayer(workingLayer)\n    return workingLayer\n    \ndef SetCurrentEditTarget():\n    maya.cmds.AL_usdmaya_LayerCurrentEditTarget('shot', layer=GetLayoutLayer().identifier, findByIdentifier=True)\n\ndef OpenOutliner():\n    import usdqt.app\n    stage = GetStage()\n    dialog = usdqt.app.UsdOutliner(stage)\n    dialog.show()\n    return dialog\n\ndef AnimateCamera():\n    maya.cmds.setAttr(\"main_cam.readAnimatedValues\", 1)\n    maya.cmds.currentTime(1)\n    maya.cmds.select('main_cam')\n    maya.cmds.move(5, 121, 61)\n    maya.cmds.rotate(-30, 5, 0)\n    maya.cmds.setKeyframe('main_cam.translate')\n    maya.cmds.setKeyframe('main_cam.rotate')\n    \n    maya.cmds.currentTime(10)\n    maya.cmds.move(0, -1, 0, r=True)\n    maya.cmds.rotate(0, -10, 0, r=True)\n    maya.cmds.setKeyframe('main_cam.translate')\n    maya.cmds.setKeyframe('main_cam.rotate')\n\ndef ExportLayoutAnimation():\n    layer = GetLayoutLayer()\n    for i in xrange(1, 11):\n        maya.cmds.currentTime(i)\n    layer.Export(os.path.join(ASSET_BASE, 'shots/s00_01/s00_01_layout.usd'))\n\n\nmaya.cmds.file(f=True, new=True)\nLoadStage()\nSetCurrentEditTarget()\nAnimateCamera()\n```\n\n----------------------------------------\n\nTITLE: List XML shader fragments CMake\nDESCRIPTION: This snippet creates a list of XML files (`SHADERFRAGMENTS_XMLS`) that define shader fragments. These files are copied from `pxrUsdPreviewSurface` (with modifications) and include new fragments related to basis curves, fallback shaders, primvar readers, and other shader functionalities.  The list is used later for installation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/vp2ShaderFragments/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND SHADERFRAGMENTS_XMLS\n    # Copied from pxrUsdPreviewSurface with change to support multiple lights\n    Float4ToFloatW.xml\n    Float4ToFloatX.xml\n    Float4ToFloatY.xml\n    Float4ToFloatZ.xml\n    Float3ToFloatX.xml\n    Float3ToFloatY.xml\n    Float3ToFloatZ.xml\n    FloatToFloat3.xml\n    UsdPreviewSurfaceLightAPI1.xml\n    UsdPreviewSurfaceLightAPI2.xml\n    UsdPreviewSurfaceLightAPI3.xml\n    lightingContributions.xml\n    opacityToTransparency.xml\n    scaledDiffusePassThrough.xml\n    scaledSpecularPassThrough.xml\n    usdPreviewSurfaceCombiner.xml\n    usdPreviewSurfaceLightingAPI1.xml\n    usdPreviewSurfaceLightingAPI2.xml\n    usdPreviewSurfaceLightingAPI3.xml\n    # New fragments\n    BasisCurvesCubicColorDomain.xml\n    BasisCurvesCubicCPVHull.xml\n    BasisCurvesCubicCPVPassing.xml\n    BasisCurvesCubicCPVShader.xml\n    BasisCurvesCubicDomain_GLSL.xml\n    BasisCurvesCubicDomain_HLSL.xml\n    BasisCurvesCubicDomain_Cg.xml\n    BasisCurvesCubicFallbackShader.xml\n    BasisCurvesCubicHull.xml\n    BasisCurvesLinearColorDomain.xml\n    BasisCurvesLinearCPVHull.xml\n    BasisCurvesLinearCPVPassing.xml\n    BasisCurvesLinearCPVShader.xml\n    BasisCurvesLinearDomain_GLSL.xml\n    BasisCurvesLinearDomain_HLSL.xml\n    BasisCurvesLinearDomain_Cg.xml\n    BasisCurvesLinearFallbackShader.xml\n    BasisCurvesLinearHull.xml\n    FallbackCPVShader.xml\n    FallbackCPVShaderStandardSurface.xml\n    FallbackShader.xml\n    FallbackShaderStandardSurface.xml\n    Float4ToFloat3.xml\n    Float4ToFloat4.xml\n    NwFaceCameraIfNAN.xml\n    PointsFallbackShader.xml\n    PointsFallbackCPVShader.xml\n    PointsGeometry.xml\n    UsdDrawModeCards.xml\n    UsdPrimvarColor.xml\n    UsdPrimvarReader_color.xml\n    UsdPrimvarReader_float.xml\n    UsdPrimvarReader_float2.xml\n    UsdPrimvarReader_float3.xml\n    UsdPrimvarReader_float4.xml\n    UsdPrimvarReader_vector.xml\n    UsdTransform2d.xml\n    UsdUVTexture_noCM.xml\n    UsdUVTexture.xml\n    # USD plug info\n    plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin\nDESCRIPTION: This snippet installs the `${PXR_PACKAGE}` target to the `${AL_INSTALL_PREFIX}/plugin` directory. It also installs the PDB file on Windows systems.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaPlugin/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS\n    ${PXR_PACKAGE}\n    LIBRARY\n        DESTINATION ${AL_INSTALL_PREFIX}/plugin\n    RUNTIME\n        DESTINATION ${AL_INSTALL_PREFIX}/plugin\n)\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:${PXR_PACKAGE}> DESTINATION ${AL_INSTALL_PREFIX}/plugin OPTIONAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Import USD Proxy Shape MEL\nDESCRIPTION: This MEL command imports a USD file as a proxy shape into Maya using the AL_usdmaya_ProxyShapeImport command. Replace <PATH_TO_ASSETS_FOLDER>/lock_hierarchy.usda with the actual path to your USD asset. The AL_USDMaya plugin needs to be loaded before running this command.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/lock/README.md#_snippet_0\n\nLANGUAGE: mel\nCODE:\n```\ncmds.AL_usdmaya_ProxyShapeImport(file=\"<PATH_TO_ASSETS_FOLDER>/lock_hierarchy.usda\")\n```\n\n----------------------------------------\n\nTITLE: Forcing Prim Translation (Import) (C++)\nDESCRIPTION: This command forces the import of a prim type into Maya, even if it is not imported by default. This is necessary for prims like Meshes, which may be retained in a USD proxy shape for performance reasons. It uses the *-fi* flag in conjunction with the *-ip* flag and the prim path.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_20\n\nLANGUAGE: c++\nCODE:\n```\nAL_usdmaya_TranslatePrim -fi -ip \"/MyMesh\";  //< Run the Prim's translator's import\n```\n\n----------------------------------------\n\nTITLE: Python Target Name Definition\nDESCRIPTION: This snippet defines the name of the Python extension library target, taking into account platform-specific requirements. On Windows, when compiling with debug Python, it appends `_d` to the library name.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/python/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_WINDOWS AND MAYAUSD_DEFINE_BOOST_DEBUG_PYTHON_FLAG)\n    # On Windows when compiling with debug python the library must be named with _d.\n    set(PYTHON_TARGET_NAME _${PROJECT_NAME}_d)\nelse()\n    set(PYTHON_TARGET_NAME _${PROJECT_NAME})\nendif()\n\nadd_library(${PYTHON_TARGET_NAME} SHARED)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for Target\nDESCRIPTION: This CMake snippet sets compile definitions for the target ${PROJECT_NAME}. It defines platform-specific macros for macOS and Linux (OSMac_ and LINUX, respectively) based on the ${IS_MACOSX} and ${IS_LINUX} variables. It also defines MAYAUSD_UI_EXPORT, likely used for exporting symbols from the library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/ui/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        # These flags are needed for Maya\n        $<$<BOOL:${IS_MACOSX}>:OSMac_>\n        $<$<BOOL:${IS_LINUX}>:LINUX>\n\n        MAYAUSD_UI_EXPORT\n)\n```\n\n----------------------------------------\n\nTITLE: Setting VP2 Rendering Engine to OpenGL Legacy Mode\nDESCRIPTION: This MEL code snippet sets the Maya preferences to use the Viewport 2.0 based OpenGL Legacy Mode profile, which is necessary for VP2 to work with the current ProxyShape implementation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/build.md#_snippet_4\n\nLANGUAGE: mel\nCODE:\n```\noptionVar -sv \"vp2RenderingEngine\" \"OpenGL\";\n```\n\n----------------------------------------\n\nTITLE: Installing Maya Outliner Icons\nDESCRIPTION: This CMake snippet installs icons specific to the Maya Outliner.  It iterates through a list of icon base names (`OUTLINER_ICONS`). For each icon, it installs the 100px version, renaming it to remove the '_100' suffix, and also installs the 150px and 200px versions directly. This allows Maya to automatically choose the appropriate resolution icon. The icons are installed in the `${CMAKE_INSTALL_PREFIX}/lib/icons` directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/resources/icons/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(OUTLINER_ICONS\n    MayaReference\n)\nforeach(ICON_BASE ${OUTLINER_ICONS})\n    # The _100.png files need to be installed without the _100. This is the\n    # base icon name that is used. Maya will automatically choose the _150/_200\n    # image if neeeded.\n    install(FILES \"out_USD_${ICON_BASE}_100.png\"\n        DESTINATION \"${CMAKE_INSTALL_PREFIX}/lib/icons\"\n        RENAME \"out_USD_${ICON_BASE}.png\"\n    )\n    install(FILES \"out_USD_${ICON_BASE}_150.png\" \"out_USD_${ICON_BASE}_200.png\"\n        DESTINATION \"${CMAKE_INSTALL_PREFIX}/lib/icons\"\n    )\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Get Maya Object from Context Mapping\nDESCRIPTION: Retrieves a Maya object from the translator context, given a USD prim. This allows accessing Maya objects created during the import process, enabling further manipulation and connection. Returns true if the object is found, false otherwise.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/AL/usdmaya/fileio/translators/README.md#_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nMObject object;\nif(GetContext()->GetMObject(prim, object)) {\n  // lets do it\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Test Support Files (Python)\nDESCRIPTION: This snippet defines a CMake variable, `TEST_SUPPORT_FILES`, containing a list of supporting Python files required by the unit tests.  Specifically `testTRSBase.py` provides a base class for other tests.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/ufe/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_SUPPORT_FILES\n    testTRSBase.py\n)\n```\n\n----------------------------------------\n\nTITLE: Set compiler definitions\nDESCRIPTION: This snippet sets compiler definitions for the target. It includes platform-specific definitions (LINUX, _WIN32) and a definition for the MAYAUSD_VERSION if it's defined. These definitions affect how the code is compiled based on the platform and version.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/mayaToHydra/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${TARGET_NAME}\n    PRIVATE \n        # M3dView needs this (technically, MNativeWindowHdl.h)\n        # private atm because M3dView is only used in .cpp right now\n        # gcc will NOT set this automatically\n        $<$<BOOL:${IS_LINUX}>:LINUX>\n        # Not sure if msvcc sets this automatically, but won't hurt to redefine\n        $<$<BOOL:${IS_WINDOWS}>:_WIN32>\n)\n\nif(DEFINED MAYAUSD_VERSION)\n    target_compile_definitions(${TARGET_NAME}\n        PRIVATE\n            MAYAUSD_VERSION=${MAYAUSD_VERSION}\n    )\nendif()\n\nmayaUsd_compile_config(${TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: USD PlugInfo JSON Configuration\nDESCRIPTION: This JSON file describes the plugin to the USD plugin system.  It defines the plugin name, type (python), the root directory, and specifies that it's a MayaUSD JobContextPlugin, indicating an export plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/tutorials/import-export-plugin/README.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Plugins\": [\n        {\n            \"Name\": \"ExampleExportPlugin\",\n            \"Type\": \"python\",\n            \"Root\": \"..\",\n            \"Info\": {\n                \"UsdMaya\": {\n                    \"JobContextPlugin\": {\n                    }\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Export nurbs curves using AL_usdmaya_ExportCommand\nDESCRIPTION: This example shows how to export nurbs curves using the AL_usdmaya_ExportCommand. The `-f` flag specifies the output file path, and the `-nc` flag enables nurbs curve export.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/importExport.md#_snippet_4\n\nLANGUAGE: MEL\nCODE:\n```\nAL_usdmaya_ExportCommand -f \"<path/to/out/file.usd>\" -nc\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Maya USD API\nDESCRIPTION: This snippet defines the source files that will be compiled into the `${PROJECT_NAME}` library.  These files contain the implementation of various API components like context operations, global state, proxy stages, renderers, UFE handlers, and undo functionality.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        contextOps.cpp\n        global.cpp\n        proxyStage.cpp\n        proxyShapeNotice.cpp\n        render.cpp\n        ufeHandlers.cpp\n        undo.cpp\n        utils.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Promoting Header List with CMake macro\nDESCRIPTION: This snippet calls the `mayaUsd_promoteHeaderList` CMake macro. It promotes the headers specified in the `HEADERS` variable to a subdirectory named `nodes`. The macro likely handles additional processing or organization of the header files, potentially related to documentation generation or API exposure.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/nodes/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_promoteHeaderList(HEADERS ${HEADERS} SUBDIR nodes)\n```\n\n----------------------------------------\n\nTITLE: Header File Definition with CMake\nDESCRIPTION: Defines a list of header files required for the Maya USD project's chaser functionalities using CMake. These headers define the interfaces and data structures used by the source files, covering export and import functionalities. The headers are later used for promotion and installation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/chaser/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n    exportChaser.h\n    exportChaserRegistry.h\n    importChaserRegistry.h\n    importChaser.h\n)\n```\n\n----------------------------------------\n\nTITLE: Promote Headers CMake\nDESCRIPTION: This snippet promotes the header files listed in the HEADERS variable to a subdirectory within the render/vp2RenderDelegate structure using the mayaUsd_promoteHeaderList macro.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/vp2RenderDelegate/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_promoteHeaderList(HEADERS ${HEADERS} SUBDIR render/vp2RenderDelegate)\n```\n\n----------------------------------------\n\nTITLE: Install Python Script CMake\nDESCRIPTION: This snippet installs the analyticMayaUsdPerformance.py script to a Python-specific directory under the installation prefix. The destination directory is determined by combining CMAKE_INSTALL_PREFIX, lib/python, and PROJECT_NAME.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/vp2RenderDelegate/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(PYTHON_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/lib/python/${PROJECT_NAME})\ninstall(FILES analyticMayaUsdPerformance.py DESTINATION ${PYTHON_INSTALL_PREFIX})\n```\n\n----------------------------------------\n\nTITLE: Expanding AL_MAYA_DECLARE_COMMAND Macro in C++\nDESCRIPTION: This code shows what the AL_MAYA_DECLARE_COMMAND macro expands into.  This macro provides the necessary static members for creating a maya command.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/developer.md#_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nstatic const char* const g_helpText;\n  static void* creator();\n  static MSyntax createSyntax();\n  static const MString kName;\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for AL_USDMayaSchemas target\nDESCRIPTION: This CMake command configures the include directories for the AL_USDMayaSchemas target. It adds the current binary directory to the public include path, making the generated headers available to downstream targets.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(AL_USDMayaSchemas\n\tPUBLIC\n\t${CMAKE_CURRENT_BINARY_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Responding to Transaction Close Notice (C++)\nDESCRIPTION: This code snippet demonstrates how to respond to a transaction close notice. It processes the changed and resynced paths and then updates the content, similar to how `ObjectChanged` notices are handled.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/AL/usd/transaction/README.md#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nvoid UsdProcedural::onTransaction(const AL::usd::transaction::CloseNotice& notice, const UsdStageWeakPtr& sender)\n{\n  processPaths(notice.GetChangedInfoOnlyPaths(), m_changedPaths);\n  processPaths(notice.GetResyncedPaths(), m_resynchedPaths);\n  updateContent();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Python Bindings Library CMake\nDESCRIPTION: This snippet creates a shared library for Python bindings. The library name depends on the build configuration (Debug or Release) on Windows.  It configures compilation settings, defines compiler definitions, sets include directories, and links the library against its dependencies, including `AL_USDMayaSchemas`.  `set_python_module_property` is called which seems to set module specific properties, although its definition is not present in the provided context.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/maya/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_WINDOWS AND MAYAUSD_DEFINE_BOOST_DEBUG_PYTHON_FLAG)\n    # On Windows when compiling with debug python the library must be named with _d.\n    set(PYTHON_LIBRARY_NAME _AL_USDMayaSchemas_d)\nelse()\n    set(PYTHON_LIBRARY_NAME _AL_USDMayaSchemas)\nendif()\n\nadd_library(${PYTHON_LIBRARY_NAME}\n    SHARED\n    module.cpp\n    wrapModelAPI.cpp\n    wrapTokens.cpp\n    wrapFrameRange.cpp\n)\n\n# compiler configuration\nmayaUsd_compile_config(${PYTHON_LIBRARY_NAME})\n\ntarget_compile_definitions(${PYTHON_LIBRARY_NAME}\n    PRIVATE\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:TBB_USE_DEBUG>\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_DEBUG_PYTHON>\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_LINKING_PYTHON>\n        MFB_PACKAGE_NAME=AL_USDMayaSchemas\n        MFB_ALT_PACKAGE_NAME=AL_USDMayaSchemas\n        MFB_PACKAGE_MODULE=AL.usd.schemas.maya\n)\n\ntarget_include_directories(${PYTHON_LIBRARY_NAME} \n  PRIVATE\n    ${CMAKE_BINARY_DIR}/include\n)\n\nset_python_module_property(${PYTHON_LIBRARY_NAME})\n\ntarget_link_libraries(${PYTHON_LIBRARY_NAME} AL_USDMayaSchemas ${DEPENDANT_LIBRARIES})\n\ninstall(TARGETS ${PYTHON_LIBRARY_NAME}\n    LIBRARY\n    DESTINATION ${bindings_install_path}\n    RUNTIME\n    DESTINATION ${bindings_install_path}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Bindings\nDESCRIPTION: This snippet installs the Python bindings library, including runtime components, to the specified destination directory under `${CMAKE_INSTALL_PREFIX}`.  It also installs a PDB file on Windows in debug mode.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/schemas/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${TARGET_PYTHON_NAME}\n    LIBRARY\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/python/mayaUsd/${SCHEMAS_LIBRARY_NAME}\n    RUNTIME\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/python/mayaUsd/${SCHEMAS_LIBRARY_NAME}\n)\n\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:${TARGET_PYTHON_NAME}> \n        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/python/mayaUsd/${SCHEMAS_LIBRARY_NAME} OPTIONAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Maya USD with build.py (Windows Example)\nDESCRIPTION: This snippet demonstrates the use of the build.py script on a Windows system. It provides example arguments for specifying the locations of Maya, Pixar USD, the Maya Devkit, and the workspace directory.  Note the use of quotes around the Maya installation path due to spaces. The script compiles and installs the necessary libraries and plugins.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/build.md#_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\nc:\\maya-usd> python build.py --maya-location \"C:\\Program Files\\Autodesk\\Maya2025\" --pxrusd-location C:\\USD-Release --devkit-location C:\\devkitBase C:\\workspace\n```\n\n----------------------------------------\n\nTITLE: Header File List Definition (CMake)\nDESCRIPTION: This snippet defines a list of header files that are part of the maya-usd translator module. These headers are later promoted and installed to the include directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/translators/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    skelBindingsProcessor.h\n    translatorBlendShape.h\n    translatorCamera.h\n    translatorCurves.h\n    translatorGprim.h\n    translatorLight.h\n    translatorMaterial.h\n    translatorMayaReference.h\n    translatorMesh.h\n    translatorNurbsPatch.h\n    translatorPrim.h\n    translatorRfMLight.h\n    translatorSkel.h\n    translatorUtil.h\n    translatorXformable.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler in CMake\nDESCRIPTION: This CMake command (mayaUsd_compile_config) is a custom function or macro (likely defined elsewhere) that configures compiler settings for the specified target (${PROJECT_NAME}). It could set compiler flags, include paths, or other settings specific to the Maya USD project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/ui/importDialogDemo/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_compile_config(${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Public Header Files in CMake\nDESCRIPTION: This CMake snippet sets the `arg_PUBLIC_HEADER_FILES` variable, which lists the public header files for the library. These headers are installed to allow other modules to use the library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(arg_PUBLIC_HEADER_FILES\n    Camera.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Name and Creating Shared Library\nDESCRIPTION: This snippet defines the target name as 'hdMaya' and creates a shared library with that name. The shared library will be built from the source files defined later.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/hdMaya/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TARGET_NAME hdMaya)\n\nadd_library(${TARGET_NAME} SHARED)\n```\n\n----------------------------------------\n\nTITLE: CMake Compiler Configuration\nDESCRIPTION: This CMake example showcases how to configure compiler definitions for a target using `target_compile_definitions` and `mayaUsd_compile_config`. It demonstrates setting private definitions specific to the target and applying project-wide compiler configurations via `mayaUsd_compile_config`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/codingGuidelines.md#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\n# -----------------------------------------------------------------------------\n# compiler configuration\n# -----------------------------------------------------------------------------\nadd_library(${UFE_PYTHON_TARGET_NAME} SHARED)\ntarget_compile_definitions(${UFE_PYTHON_TARGET_NAME}\n   PRIVATE\n       MFB_PACKAGE_NAME=${UFE_PYTHON_MODULE_NAME}\n       MFB_ALT_PACKAGE_NAME=${UFE_PYTHON_MODULE_NAME}\n       MFB_PACKAGE_MODULE=\"${PROJECT_NAME}.${UFE_PYTHON_MODULE_NAME}\"\n)\nmayaUsd_compile_config(${UFE_PYTHON_TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files with CMake\nDESCRIPTION: This CMake snippet configures header files from source (`.src`) files to their destination in the build directory. It checks if the destination file exists and, if not, prints a status message. The `configure_file` command is then used to copy and potentially modify the source file to the destination. This allows for variables to be substituted into the header files during the build process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/base/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRCFILE ${CMAKE_CURRENT_SOURCE_DIR}/mayaUsd.h.src)\nset(DSTFILE ${CMAKE_BINARY_DIR}/include/mayaUsd/mayaUsd.h)\nif (NOT EXISTS ${dstFile})\n    message(STATUS \"promoting: \" ${SRCFILE})\nendif()\nconfigure_file(${SRCFILE} ${DSTFILE})\n\nset(SRCFILE ${CMAKE_CURRENT_SOURCE_DIR}/buildInfo.h.src)\nset(DSTFILE ${CMAKE_BINARY_DIR}/include/mayaUsd/buildInfo.h)\nconfigure_file(${SRCFILE} ${DSTFILE})\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Python Bindings\nDESCRIPTION: This snippet links the Python bindings library against the `mayaUsd_Schemas` library (`${TARGET_NAME}`).\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/schemas/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${TARGET_PYTHON_NAME}\n    PUBLIC\n        ${TARGET_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Specify Source Files (CMake)\nDESCRIPTION: This snippet specifies the list of source files that will be compiled and linked into the AL_USDMayaTestPlugin library. The source files include tests for various aspects of the USD-Maya integration, such as event handling, matrix transformations, commands, file I/O, nodes, and translators.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaTestPlugin/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${TARGET_NAME}\n    PRIVATE\n        plugin.cpp\n        AL/maya/test_EventHandler.cpp\n        AL/maya/test_MatrixToSRT.cpp\n        AL/maya/test_MayaEventManager.cpp\n        AL/usdmaya/commands/test_ExportCommands.cpp\n        AL/usdmaya/commands/test_LayerCommands.cpp\n        AL/usdmaya/commands/test_LayerManagerCommands.cpp\n        AL/usdmaya/commands/test_ProxyShapeImport.cpp\n        AL/usdmaya/commands/test_TranslateCommand.cpp\n        AL/usdmaya/fileio/export_misc.cpp\n        AL/usdmaya/fileio/export_blendshape.cpp\n        AL/usdmaya/fileio/export_constraints.cpp\n        AL/usdmaya/fileio/export_ik.cpp\n        AL/usdmaya/fileio/export_import_instancing.cpp\n        AL/usdmaya/fileio/export_lattice.cpp\n        AL/usdmaya/fileio/export_multiple_shapes.cpp\n        AL/usdmaya/fileio/export_nonlinear.cpp\n        AL/usdmaya/fileio/export_unmerged.cpp\n        AL/usdmaya/fileio/import_instances.cpp\n        AL/usdmaya/fileio/import_playback_range.cpp\n        AL/usdmaya/fileio/test_activeInActiveTranslators.cpp\n        AL/usdmaya/nodes/proxy/test_PrimFilter.cpp\n        AL/usdmaya/nodes/test_ActiveInactive.cpp\n        AL/usdmaya/nodes/test_ExtraDataPlugin.cpp\n        AL/usdmaya/nodes/test_LayerManager.cpp\n        AL/usdmaya/nodes/test_lockPrims.cpp\n        AL/usdmaya/nodes/test_ProxyShape.cpp\n        AL/usdmaya/nodes/test_ProxyShapeSelectabilityDB.cpp\n        AL/usdmaya/nodes/test_ProxyUsdGeomCamera.cpp\n        AL/usdmaya/nodes/test_Transform.cpp\n        AL/usdmaya/nodes/test_TransformMatrix.cpp\n        AL/usdmaya/nodes/test_ScopeMatrix.cpp\n        AL/usdmaya/nodes/test_TranslatorContext.cpp\n        AL/usdmaya/nodes/test_VariantFallbacks.cpp\n        AL/usdmaya/test_DiffGeom.cpp\n        AL/usdmaya/test_DiffPrimVar.cpp\n        test_translators_AnimationTranslator.cpp\n        test_translators_CameraTranslator.cpp\n        test_translators_DgTranslator.cpp\n        test_translators_MeshTranslator.cpp\n        test_translators_NurbsCurveTranslator.cpp\n        test_translators_PythonBindings.cpp\n        test_translators_TransformTranslator.cpp\n        test_translators_Translator.cpp\n        test_usdmaya.cpp\n        test_usdmaya_AttributeType.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: BulletMassShemaAdaptor Class (Python)\nDESCRIPTION: This snippet defines a BulletMassShemaAdaptor class that extends mayaUsdLib.SchemaApiAdaptor.  It maps USD attributes of PhysicsMassAPI (physics:mass, physics:centerOfMass) to corresponding attributes on a bulletRigidBodyShape in Maya. It includes logic to navigate from the adapted Maya object to the associated bullet rigid body shape.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nimport mayaUsd.lib as mayaUsdLib\nfrom pxr import Tf, Gf, Usd, UsdPhysics\nfrom maya import cmds\nimport maya.api.OpenMaya as om\nimport maya.app.mayabullet.BulletUtils as BulletUtils\nimport maya.app.mayabullet.RigidBody as RigidBody\n\ncmds.loadPlugin(\"mayaUsdPlugin\")\ncmds.loadPlugin(\"bullet\")\n\nclass BulletMassShemaAdaptor(mayaUsdLib.SchemaApiAdaptor):\n    _nameMapping = {\n        \"physics:mass\": \"mass\",\n        \"physics:centerOfMass\": \"centerOfMass\"\n    }\n\n    def CanAdapt(self):\n        if not self.mayaObject:\n            return False\n\n        # We do not want to process the bullet node shape itself. It adds nothing of interest.\n        node = om.MFnDependencyNode(self.mayaObject)\n        if not node or node.typeName == \"bulletRigidBodyShape\":\n            return False\n\n        # Navigate to bullet shape if it exists:\n        return self.GetMayaObjectForSchema() is not None\n\n    def GetMayaObjectForSchema(self):\n        path = om.MDagPath.getAPathTo(self.mayaObject)\n        if not path or not path.pop():\n            return None\n\n        for i in range(path.numberOfShapesDirectlyBelow()):\n            path.extendToShape(i)\n            depFn = om.MFnDependencyNode(path.node())\n            if depFn.typeName == \"bulletRigidBodyShape\":\n                return path.node()\n            path.pop()\n\n        return None\n\n    def GetAdaptedAttributeNames(self):\n        return list(BulletMassShemaAdaptor._nameMapping.keys())\n\n    def GetMayaNameForUsdAttrName(self, usdName):\n        return BulletMassShemaAdaptor._nameMapping.get(usdName, \"\")\n```\n\n----------------------------------------\n\nTITLE: Linking libraries for AL_USDMayaUtils\nDESCRIPTION: This code links the AL_USDMayaUtils library against a series of dependency libraries, including USD components (usdUfe, ar, gf, etc.), AL_MayaUtils, Boost Python, Python libraries, and Maya libraries. These libraries provide necessary functions and data structures for the AL_USDMayaUtils library to function correctly.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdmayautils/AL/usdmaya/utils/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${USDMAYA_UTILS_LIBRARY_NAME}\n  usdUfe\n  AL_MayaUtils\n  ar \n  gf \n  kind\n  plug \n  sdf \n  tf\n  usd\n  usdGeom\n  usdUtils\n  vt\n  ${Boost_PYTHON_LIBRARY}\n  ${PYTHON_LIBRARIES}\n  ${MAYA_Foundation_LIBRARY}\n  ${MAYA_OpenMaya_LIBRARY}\n)\n```\n\n----------------------------------------\n\nTITLE: Building MayaUSD with Maya's Python on MacOS\nDESCRIPTION: This snippet shows how to build MayaUSD using Maya's version of Python on MacOS to avoid conflicts with the system Python. It specifies the path to `mayapy` executable.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/build.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n/Applications/Autodesk/maya2025/Maya.app/Contents/bin/mayapy build_usd.py ~/Desktop/BUILD\n```\n\n----------------------------------------\n\nTITLE: Base Command Class in Python\nDESCRIPTION: This Python code defines a base command class `_BaseCommand` inheriting from `MPxCommand`.  It includes the basic structure for Maya command implementation with methods like `doIt`, `undoIt`, and `redoIt`. This base class is not registered directly but serves as a template for concrete sub-commands.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/undo/README-Nice-Undo.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass _BaseCommand(MPxCommand):\n    def __init__(self):\n        super().__init__()\n\n    # MPxCommand command implementation.\n\n    @classmethod\n    def creator(cls):\n        # Create the right-sub-class instance.\n        return cls()\n    \n    @classmethod\n    def createSyntax(cls):\n        syntax = MSyntax()\n        # Add your syntax arguments and flags\n        return syntax\n\n    def doIt(self, args):\n        # implement your whole command\n        pass\n\n    def undoIt(self):\n        # implement your whole command\n        pass\n\n    def redoIt(self):\n        # implement your whole command\n        pass\n```\n\n----------------------------------------\n\nTITLE: Installing Python Module\nDESCRIPTION: This snippet defines the installation rules for the Python extension library, placing the library files and initialization file into a project-specific directory within the Python libraries directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/python/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(PYLIB_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/lib/python/${PROJECT_NAME})\n\ninstall(TARGETS ${PYTHON_TARGET_NAME}\n    LIBRARY\n        DESTINATION ${PYLIB_INSTALL_PREFIX}\n    ARCHIVE\n        DESTINATION ${PYLIB_INSTALL_PREFIX}\n    RUNTIME\n        DESTINATION ${PYLIB_INSTALL_PREFIX}\n)\n\ninstall(FILES __init__.py DESTINATION ${PYLIB_INSTALL_PREFIX})\n\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:${PYTHON_TARGET_NAME}> \n            DESTINATION ${PYLIB_INSTALL_PREFIX} OPTIONAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Cloning and Branching with Git\nDESCRIPTION: This shell script snippet demonstrates how to clone a forked repository, add the original repository as a remote, fetch the remote, and checkout a new branch based on the 'develop' branch.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/contributing.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\ngit clone https://github.com/your_fork/AL_USDMaya.git\ncd AL_USD\n\n# Add the original repository as a remote\ngit remote add al_origin https://github.com/AnimalLogic/AL_USDMaya.git\n\ngit fetch al_origin\n\ngit checkout -b my_feature al_origin/develop\n```\n\n----------------------------------------\n\nTITLE: Installing Files with CMake\nDESCRIPTION: This snippet installs header files to the installation directory using the `install` command.  It installs the header files defined in the `HEADERS` variable into the `${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/base` directory and `usdUfe.h` into `${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}`.  Requires `${CMAKE_INSTALL_PREFIX}` to be a valid path.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/base/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${HEADERS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/base\n)\n\ninstall(FILES ${CMAKE_BINARY_DIR}/include/${PROJECT_NAME}/usdUfe.h\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Promoting Header List (CMake)\nDESCRIPTION: This promotes a list of header files, making them available for inclusion by other parts of the project. The `mayaUsd_promoteHeaderList` macro manages the visibility and installation of the specified header files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/pxrUsdPreviewSurface/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_promoteHeaderList( \n    HEADERS\n        usdPreviewSurface.h\n        usdPreviewSurfacePlugin.h\n    BASEDIR\n        ${TARGET_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: This snippet links the `${PXR_PACKAGE}` target with various libraries, including Ar, Arch, UsdImaging, UsdImagingGL, AL_EventSystem, AL_USDMayaUtils, AL_MayaUtils, UsdUfe, AL_USDMaya, and Maya libraries.  These libraries are essential for the functionality of the plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaPlugin/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${PXR_PACKAGE}\n    ar\n    arch\n    usdImaging\n    usdImagingGL\n    AL_EventSystem\n    AL_USDMayaUtils\n    AL_MayaUtils\n    usdUfe\n    AL_USDMaya\n    ${MAYA_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Header Variables CMake\nDESCRIPTION: This snippet defines a variable named HEADERS that contains a list of header files. These headers are glslProgram.h, utils.h, and utilsLegacy.h. These headers are used in later commands for promotion and installation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/px_vp20/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    glslProgram.h\n    utils.h\n    utilsLegacy.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Library CMake\nDESCRIPTION: Adds a shared library named ${LIBRARY_NAME} using the headers and sources specified. Includes all the various source and header lists defined earlier.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(${LIBRARY_NAME}\n    SHARED\n        ${AL_usdmaya_public_headers}\n        ${AL_usdmaya_source}\n        ${AL_usdmaya_cmds_source}\n        ${AL_usdmaya_fileio_source}\n        ${AL_usdmaya_fileio_translators_source}\n        ${AL_usdmaya_nodes_source}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Test Code - CMake\nDESCRIPTION: This snippet defines a Python code string that loads the AL_MayaUtilsTests plugin and runs a unit test harness. It uses maya.cmds to interact with Maya.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/tests/mayaplugintest/CMakeLists.txt#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nset(pycode \"\nimport sys\nimport maya.cmds\nmaya.cmds.loadPlugin('AL_MayaUtilsTests')\nsys.exit(maya.cmds.AL_maya_test_UnitTestHarness())\n\")\n```\n\n----------------------------------------\n\nTITLE: Installing Library Target\nDESCRIPTION: This snippet installs the `mayaUsdAPI` library target to the `${LIBRARY_INSTALL_PATH}` directory. It installs the library, archive, and runtime components.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n    TARGETS ${PROJECT_NAME}\n    LIBRARY\n    DESTINATION ${LIBRARY_INSTALL_PATH}\n    ARCHIVE\n    DESTINATION ${LIBRARY_INSTALL_PATH}\n    RUNTIME\n    DESTINATION ${LIBRARY_INSTALL_PATH}\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries CMake\nDESCRIPTION: Links the target library against a list of required libraries. Includes AL-related libraries, USD libraries, Boost Python library, Maya libraries, usdUfe, UFE library, and ghc_filesystem.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${LIBRARY_NAME}\n    AL_EventSystem\n    AL_USDMayaUtils\n    AL_MayaUtils\n    AL_USDTransaction\n    ar \n    gf \n    kind\n    plug \n    sdf \n    tf\n    usd\n    usdGeom\n    usdUtils\n    usdImaging\n    usdImagingGL\n    vt\n    ${Boost_PYTHON_LIBRARY}\n    ${MAYA_Foundation_LIBRARY}\n    ${MAYA_OpenMayaAnim_LIBRARY}\n    ${MAYA_OpenMayaUI_LIBRARY}\n    ${MAYA_OpenMaya_LIBRARY}\n    ${MAYA_OpenMayaRender_LIBRARY}\n    mayaUsd\n    usdUfe\n    ${UFE_LIBRARY}\n    ghc_filesystem\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring mayaUsdPlugInfo.json\nDESCRIPTION: Configures the `mayaUsdPlugInfo.json` file to be placed in the `TestMayaUsdPlug` directory, ensuring the test plugin has the necessary metadata for Maya.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/mayaUsdPlugInfo.json\"\n               \"${CMAKE_CURRENT_BINARY_DIR}/TestMayaUsdPlug/mayaUsdPlugInfo.json\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Name\nDESCRIPTION: Sets the target name for the library being built. This name is used throughout the CMake configuration to refer to the library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/translators/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TARGET_NAME mayaUsd_Translators)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Python Bindings (CMake)\nDESCRIPTION: This snippet links the necessary libraries to the Python bindings library. It links the `AL_USDMayaSchemasTest` library and the `DEPENDANT_LIBRARIES` variable, ensuring that the Python bindings have access to the underlying C++ code and its dependencies.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/mayatest/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${PYTHON_LIBRARY_NAME} AL_USDMayaSchemasTest ${DEPENDANT_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Compiler configuration for AL_USDMayaUtils\nDESCRIPTION: This applies compiler configurations to the AL_USDMayaUtils library. The `mayaUsd_compile_config` function (not defined in the provided snippet, assumed to be in a mayaUsd cmake module) is used to configure the compiler. This step likely sets compiler flags and include paths specific to the Maya USD project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdmayautils/AL/usdmaya/utils/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_compile_config(${USDMAYA_UTILS_LIBRARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Conditional Target Sources (UFE SceneItem Metadata)\nDESCRIPTION: This snippet conditionally adds source files related to scene item metadata based on whether UFE_SCENEITEM_HAS_METADATA is defined.  It includes UsdUndoClearSceneItemMetadataCommand.cpp and UsdUndoSetSceneItemMetadataCommand.cpp.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (UFE_SCENEITEM_HAS_METADATA)\n    target_sources(${PROJECT_NAME}\n        PRIVATE\n            UsdUndoClearSceneItemMetadataCommand.cpp\n            UsdUndoSetSceneItemMetadataCommand.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Promote Header List (CMake)\nDESCRIPTION: This snippet uses a custom CMake function `mayaUsd_promoteHeaderList` to promote the headers specified in the HEADERS variable. This function is used to organize and make the headers accessible during the build process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/commands/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_promoteHeaderList(HEADERS ${HEADERS} SUBDIR commands)\n```\n\n----------------------------------------\n\nTITLE: Site-Specific Config Test Setup (CMake)\nDESCRIPTION: This snippet configures a test using `testUsdImportExportSiteSpecificConfig` for importing and exporting site-specific configurations.  The test is added with `mayaUsd_add_test`, specifying the python module, working directory and environment variables. It sets the `PXR_OVERRIDE_PLUGINPATH_NAME` environment variable to specify the location of the 'SiteSpecificConfig' plugin used for the test, overriding the default plugin path.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/translators/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_add_test(testUsdImportExportSiteSpecificConfig\n    PYTHON_MODULE testUsdImportExportSiteSpecificConfig\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    ENV\n        \"${PXR_OVERRIDE_PLUGINPATH_NAME}=${CMAKE_CURRENT_BINARY_DIR}/../plugin/SiteSpecificConfig\"\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n)\nset_property(TEST testUsdImportExportSiteSpecificConfig APPEND PROPERTY LABELS translators)\n```\n\n----------------------------------------\n\nTITLE: Configure plugInfo.json CMake\nDESCRIPTION: This snippet uses the `configure_file` command to process a template file (`plugInfo.json.in`) and generate the `plugInfo.json` file. The `@ONLY` option indicates that only variables explicitly referenced in the input file should be replaced. This file is likely used to provide metadata about the USD plugin to Maya.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/maya/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file (\n    plugInfo.json.in\n    ${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\n    @ONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Library CMake\nDESCRIPTION: Adds a shared library for Python bindings using the specified source files. Includes wrapper files for StageCache, LayerManager, ProxyShape, and Translator classes. Creates the shared object for the python module.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(${PYTHON_LIBRARY_NAME}\n    SHARED\n    AL/usdmaya/module.cpp\n    AL/usdmaya/wrapStageCache.cpp\n    AL/usdmaya/nodes/wrapLayerManager.cpp\n    AL/usdmaya/nodes/wrapProxyShape.cpp\n    AL/usdmaya/fileio/translators/wrapTranslatorBase.cpp\n    AL/usdmaya/fileio/translators/wrapTranslatorContext.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compile Definitions (UFE Has Native Type Metadata)\nDESCRIPTION: This snippet conditionally defines a compile definition based on whether UFE_HAS_NATIVE_TYPE_METADATA is defined. It sets UFE_HAS_NATIVE_TYPE_METADATA=1 if true, likely impacting how native data types are handled.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif (UFE_HAS_NATIVE_TYPE_METADATA)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        UFE_HAS_NATIVE_TYPE_METADATA=1\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Promote Headers CMake\nDESCRIPTION: This snippet utilizes a custom CMake function, `mayaUsd_promoteHeaderList`, to promote the header files defined in the `HEADERS` variable. The headers are placed into a subdirectory named `render/vp2ShaderFragments` within the include directory structure.  It's assumed that the `mayaUsd_promoteHeaderList` function is defined elsewhere in the project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/vp2ShaderFragments/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_promoteHeaderList(HEADERS ${HEADERS} SUBDIR render/vp2ShaderFragments)\n```\n\n----------------------------------------\n\nTITLE: Extracting and Setting AL_USDMAYA Version - CMake\nDESCRIPTION: Extracts version information (MAJOR, MINOR, PATCH) from the `AL/usdmaya/Version.h` header file using CMake's `file(STRINGS)` command and regular expressions.  It then combines these components to set a `AL_USDMAYA_VERSION` variable.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_35\n\nLANGUAGE: cmake\nCODE:\n```\nif(EXISTS \"${CMAKE_CURRENT_LIST_DIR}/AL/usdmaya/Version.h\")\n    foreach(_version_comp MAJOR MINOR PATCH)\n        file(STRINGS\n            \"${CMAKE_CURRENT_LIST_DIR}/AL/usdmaya/Version.h\"\n            _version_comp_def\n            REGEX \"#define AL_USDMAYA_VERSION_${_version_comp} .*$\")\n        string(REGEX MATCHALL \"[0-9]+\" AL_USDMAYA_${_version_comp}_VERSION ${_version_comp_def})\n    endforeach()\n    set(AL_USDMAYA_VERSION ${AL_USDMAYA_MAJOR_VERSION}.${AL_USDMAYA_MINOR_VERSION}.${AL_USDMAYA_PATCH_VERSION} CACHE INTERNAL \"AL_USDMaya Version String\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Dependent Libraries in CMake\nDESCRIPTION: This snippet appends AL_USDMaya and usdMaya to the DEPENDANT_LIBRARIES list. This list will be used later to link the library being built against these dependencies. This ensures the resulting translator plugin has access to the functionality provided by these libraries.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/pxrUsdTranslators/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND DEPENDANT_LIBRARIES AL_USDMaya usdMaya)\n```\n\n----------------------------------------\n\nTITLE: Conditional UFE v3 Feature (CMake)\nDESCRIPTION: This snippet conditionally includes source files and header files related to UFE v3 features. If `CMAKE_UFE_V3_FEATURES_AVAILABLE` is true, it adds `PullPushCommands.cpp` to the target sources and `PullPushCommands.h` to the list of headers.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/commands/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_UFE_V3_FEATURES_AVAILABLE)\n    target_sources(${PROJECT_NAME}\n        PRIVATE\n            PullPushCommands.cpp\n    )\n    list(APPEND HEADERS\n        PullPushCommands.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Links (macOS)\nDESCRIPTION: Creates symbolic links to the Python framework on macOS. This allows the executable to find the Python framework at runtime. The symbolic link is created in both the build directory and the install directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/maya/tests/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX)\n    # Create symbolic link to python framework\n    file(CREATE_LINK ${MAYA_LOCATION}/Frameworks ${CMAKE_CURRENT_BINARY_DIR}/../Frameworks SYMBOLIC)\n    file(MAKE_DIRECTORY ${AL_INSTALL_PREFIX})\n    file(CREATE_LINK ${MAYA_LOCATION}/Frameworks ${AL_INSTALL_PREFIX}/Frameworks SYMBOLIC)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Link Libraries\nDESCRIPTION: Specifies the libraries that the target library will be linked against.  Includes USD, Maya and other dependencies needed for compilation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/translators/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${TARGET_NAME}\n    PRIVATE\n        arch\n        gf\n        kind\n        sdf\n        tf\n        usd\n        usdGeom\n        usdLux\n        usdRi\n        usdShade\n        usdSkel\n        usdUtils\n        vt\n        ${MAYA_LIBRARIES}\n        mayaUsd\n        mayaUsd_Schemas\n        basePxrUsdPreviewSurface\n        ghc_filesystem\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Global Library Location CMake\nDESCRIPTION: Sets a global property to store the library's install location. This is used to make the location of the library available globally within the CMake project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nset_property(GLOBAL PROPERTY GLOBAL_LIBRARY_LOCATION ${AL_INSTALL_PREFIX}/lib/${CMAKE_SHARED_LIBRARY_PREFIX}${LIBRARY_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX})\n```\n\n----------------------------------------\n\nTITLE: Installing the usdUfe Library\nDESCRIPTION: This snippet installs the usdUfe library to the specified destination within the CMAKE_INSTALL_PREFIX. It installs the library, archive, and runtime components to the 'lib' directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${PROJECT_NAME}\n    LIBRARY\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib\n    ARCHIVE\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib\n    RUNTIME\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Library in CMake\nDESCRIPTION: This snippet defines a shared library named ${PXR_TRANSLATORS_PACKAGE} using ProxyShapeTranslator.cpp and plugin.cpp as source files. The SHARED keyword indicates that a dynamically linked library will be created.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/pxrUsdTranslators/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(${PXR_TRANSLATORS_PACKAGE}\n  SHARED\n  ProxyShapeTranslator.cpp\n  plugin.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Maya-USD\nDESCRIPTION: This snippet sets the include directories for the mayaUsd project, including PXR, Maya, UFE include directories as system public, and a local include directory as public.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(${PROJECT_NAME}\n    SYSTEM PUBLIC\n        ${PXR_INCLUDE_DIRS}\n        ${MAYA_INCLUDE_DIRS}\n        ${UFE_INCLUDE_DIR}\n)\ntarget_include_directories(${PROJECT_NAME}\n    PUBLIC\n        ${CMAKE_BINARY_DIR}/include\n)\n```\n\n----------------------------------------\n\nTITLE: Appending Header Files to a List\nDESCRIPTION: Appends a list of header files to the HEADERS variable. The inclusion of certain header files is conditional based on available UFE features. This variable is used later for promoting and installing the header files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/ufe/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    Global.h\n    MayaStagesSubject.h\n    MayaUsdContextOps.h\n    MayaUsdContextOpsHandler.h\n    MayaUsdObject3d.h\n    MayaUsdObject3dHandler.h\n    MayaUsdUIInfoHandler.h\n    ProxyShapeContextOpsHandler.h\n    ProxyShapeHandler.h\n    ProxyShapeHierarchy.h\n    ProxyShapeHierarchyHandler.h\n    UsdSceneItemOps.h\n    UsdSceneItemOpsHandler.h\n    UsdStageMap.h\n    UsdUIUfeObserver.h\n    UsdUndoDeleteCommand.h\n    UsdUndoDuplicateCommand.h\n    UsdUndoMaterialCommands.h\n    UsdUndoRenameCommand.h\n    Utils.h\n)\n\nif(CMAKE_UFE_V3_FEATURES_AVAILABLE)\n    list(APPEND HEADERS\n        # Not dependent on UFE v3, but used to draw orphaned pulled Maya nodes\n        # in the Outliner, which is a UFE v3 feature.\n        EditAsMayaCommand.h\n        MayaUIInfoHandler.h\n        MayaUsdHierarchy.h\n        MayaUsdHierarchyHandler.h\n        MayaUsdRootChildHierarchy.h\n        PulledObjectHierarchy.h\n        PulledObjectHierarchyHandler.h\n        UsdPathMappingHandler.h\n    )\nendif()\n\nif (UFE_LIGHTS_SUPPORT)\n    list(APPEND HEADERS\n        UsdLight.h\n        UsdLightHandler.h\n    )\nendif()\n\nif (UFE_MATERIALS_SUPPORT)\n    list(APPEND HEADERS\n        UsdMaterial.h\n        UsdMaterialHandler.h\n    )\nendif()\n\nif (UFE_SCENE_SEGMENT_SUPPORT)\n    list(APPEND HEADERS\n        ProxyShapeSceneSegmentHandler.h\n    )\nendif()\n\nif (v4_BatchOps IN_LIST UFE_PREVIEW_FEATURES)\n    list(APPEND HEADERS\n        UsdBatchOpsHandler.h\n        UsdUndoDuplicateSelectionCommand.h\n    )\nendif()\n\nif(CodeWrapperHandler IN_LIST UFE_PREVIEW_FEATURES)\n    list(APPEND HEADERS\n        UsdCodeWrapperHandler.h\n    )\nendif()\n\nif(UFE_CAMERAHANDLER_HAS_FINDALL)\n    list(APPEND HEADERS\n        ProxyShapeCameraHandler.h\n    )\nendif()\n\nif(CMAKE_UFE_V4_FEATURES_AVAILABLE)\n    list(APPEND HEADERS\n        UsdShaderNodeDef.h\n        UsdShaderNodeDefHandler.h\n        UsdUndoCreateFromNodeDefCommand.h\n        UsdConnections.h\n        UsdConnectionHandler.h\n        UsdUINodeGraphNode.h\n        UsdUINodeGraphNodeHandler.h\n        UsdUndoConnectionCommands.h\n        UsdUndoCreateStageWithNewLayerCommand.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Schemas\nDESCRIPTION: These CMake commands add the specified subdirectories to the build process. This includes the AL/usd/schemas/maya directory and AL/usd/schemas/mayatest directory, likely containing schema definitions and related tests.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(AL/usd/schemas/maya)\nadd_subdirectory(AL/usd/schemas/mayatest)\n```\n\n----------------------------------------\n\nTITLE: Configuring plugInfo.json in CMake\nDESCRIPTION: This CMake snippet uses `configure_file` to create the `plugInfo.json` file from a template. This file is essential for Maya to recognize and load the USD plugin correctly.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file (\n  \"${CMAKE_CURRENT_SOURCE_DIR}/plugInfo.json.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\"\n  @ONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Install Targets\nDESCRIPTION: Installs the Python extension library to a specific location within the Python package structure. Also handles optional installation of PDB files on Windows.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/python/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(PYLIB_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/lib/python/${PROJECT_NAME}/lib)\n\ninstall(TARGETS ${PYTHON_TARGET_NAME}\n    LIBRARY\n    DESTINATION ${PYLIB_INSTALL_PREFIX}\n    ARCHIVE\n    DESTINATION ${PYLIB_INSTALL_PREFIX}\n    RUNTIME\n    DESTINATION ${PYLIB_INSTALL_PREFIX}\n)\n\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:${PYTHON_TARGET_NAME}> \n            DESTINATION ${PYLIB_INSTALL_PREFIX} OPTIONAL)\nendif()\n\ninstall(FILES __init__.py DESTINATION ${PYLIB_INSTALL_PREFIX})\n```\n\n----------------------------------------\n\nTITLE: Defining Build Options\nDESCRIPTION: This snippet defines several build options for the maya-usd project. These options control which components of the project are built, such as core libraries, plugins, and tests. These options can be toggled when configuring the build.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\noption(BUILD_MAYAUSD_LIBRARY \"Build Core USD libraries.\" ON)\noption(BUILD_MAYAUSDAPI_LIBRARY \"Build the mayaUsdAPI subset library that provides a stable versioned interface to mayaUsd for external plugins.\" ON)\noption(BUILD_LOOKDEVXUSD_LIBRARY \"Build LookdevXUsd library using LookdevXUfe.\" ON)\noption(BUILD_ADSK_PLUGIN \"Build Autodesk USD plugin.\" ON)\noption(BUILD_PXR_PLUGIN \"Build the Pixar USD plugin and libraries.\" ON)\noption(BUILD_AL_PLUGIN \"Build the Animal Logic USD plugin and libraries.\" ON)\noption(BUILD_HDMAYA \"Build the legacy Maya-To-Hydra plugin and scene delegate.\" OFF)\noption(BUILD_RFM_TRANSLATORS \"Build translators for RenderMan for Maya shaders.\" ON)\noption(BUILD_TESTS \"Build tests.\" ON)\noption(BUILD_STRICT_MODE \"Enforce all warnings as errors.\" ON)\noption(BUILD_SHARED_LIBS \"Build libraries as shared or static.\" ON)\noption(BUILD_WITH_PYTHON_3 \"Build with python 3.\" OFF)\nif(APPLE)\n    option(BUILD_UB2 \"Build Universal Binary 2 (UB2) Intel64+arm64\" OFF)\nendif()\nset(BUILD_WITH_PYTHON_3_VERSION 3.7 CACHE STRING \"The version of Python 3 to build with\")\noption(CMAKE_WANT_MATERIALX_BUILD \"Enable building with MaterialX.\" ON)\noption(CMAKE_WANT_VALIDATE_UNDO_ITEM \"Enable validating undo items list.\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Target Sources for Python Extension\nDESCRIPTION: Specifies the source files used to build the Python extension library. Includes wrapper files for specific classes.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/python/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PYTHON_TARGET_NAME} \n    PRIVATE\n        module.cpp\n        wrapProxyStage.cpp\n        wrapProxyShapeNotice.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining source and header files for usdmaya_utils\nDESCRIPTION: This CMake code uses the list command to append source and header files to the `usdmaya_utils_headers` and `usdmaya_utils_source` variables, respectively. These lists are later used to define the library's components.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdmayautils/AL/usdmaya/utils/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND usdmaya_utils_headers\n    AnimationTranslator.h\n    Api.h\n    AttributeType.h\n    DebugCodes.h\n    DgNodeHelper.h\n    Utils.h\n    ForwardDeclares.h\n    MeshUtils.h\n    NurbsCurveUtils.h\n    DiffPrimVar.h\n)\n\nlist(APPEND usdmaya_utils_source\n    AnimationTranslator.cpp\n    AttributeType.cpp\n    DebugCodes.cpp\n    DgNodeHelper.cpp\n    Utils.cpp\n    MeshUtils.cpp\n    NurbsCurveUtils.cpp\n    DiffPrimVar.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Applying MayaUsd Compile Configuration\nDESCRIPTION: This snippet applies a pre-defined MayaUsd compile configuration to the target 'hdMaya'. This likely sets up compiler flags and other settings specific to MayaUsd.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/hdMaya/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_compile_config(${TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring Python Tests (CMake)\nDESCRIPTION: This CMake code iterates through the `TEST_SCRIPT_FILES` list. For each Python script, it gets a unittest target, adds a test, sets the working directory, defines an environment variable (`LD_LIBRARY_PATH`), and adds a `MayaUsdApi` label for easy filtering in ctest.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsdAPI/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(script ${TEST_SCRIPT_FILES})\n    mayaUsd_get_unittest_target(target ${script})\n    mayaUsd_add_test(${target}\n        PYTHON_MODULE ${target}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        ENV\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n    )\n\n    # Add a ctest label to these tests for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS MayaUsdApi)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Define Translators Python Test in CMake\nDESCRIPTION: This snippet defines a test for the translators within the ALUSDMaya Python module, using CMake. The `PYTHON_MODULE` is set to `testTranslators`, and a working directory is specified. It also includes environment variables for overriding plugin and library paths, important for testing translator functionality.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaTestPlugin/py/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_add_test(TestALUSDMayaPython_Translators\n    PYTHON_MODULE testTranslators\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    ENV\n        \"${PXR_OVERRIDE_PLUGINPATH_NAME}=${ADDITIONAL_PXR_PLUGINPATH_NAME}\"\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using Alembic Chaser with usdExport (Python)\nDESCRIPTION: This snippet demonstrates how to use the `usdExport` command with the `AlembicChaser` to export Maya attributes with a specific prefix as USD attributes. The chaserArgs parameter is used to specify the 'attrprefix' for the AlembicChaser.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/doc/README.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncmds.usdExport(\n    file=usdFilePath,\n    chaser=['alembic'],\n    chaserArgs=[\n       ('alembic', 'attrprefix', 'ABC_'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Define ProxyShape Python Test in CMake\nDESCRIPTION: This snippet defines a test for the ProxyShape functionality within the ALUSDMaya Python module using CMake's `mayaUsd_add_test` function. It specifies the Python module to be tested (`testProxyShape`) and sets environment variables to override plugin paths and library paths. The test focuses on the behavior of proxy shapes.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaTestPlugin/py/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_add_test(TestALUSDMayaPython_ProxyShape\n    PYTHON_MODULE testProxyShape\n    ENV\n        \"${PXR_OVERRIDE_PLUGINPATH_NAME}=${ADDITIONAL_PXR_PLUGINPATH_NAME}\"\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for Python Bindings (CMake)\nDESCRIPTION: This snippet sets compile definitions for the Python bindings library. It includes definitions for debugging, package name, alternative package name, and package module, enabling the library to function correctly within the Python environment.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/mayatest/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${PYTHON_LIBRARY_NAME}\n    PRIVATE\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:TBB_USE_DEBUG>\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_DEBUG_PYTHON>\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_LINKING_PYTHON>\n        MFB_PACKAGE_NAME=AL_USDMayaSchemasTest\n        MFB_ALT_PACKAGE_NAME=AL_USDMayaSchemasTest\n        MFB_PACKAGE_MODULE=AL.usd.schemas.mayatest\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Configuration in CMake\nDESCRIPTION: This CMake snippet configures the compiler settings for the `TRANSLATORS_PACKAGE` library.  It utilizes the `mayaUsd_compile_config` macro to set compiler flags specific to Maya USD.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_compile_config(${TRANSLATORS_PACKAGE})\n```\n\n----------------------------------------\n\nTITLE: Add MaterialX Translators\nDESCRIPTION: Adds MaterialX reader and writer source files to the target sources if the Maya application version is greater than 2022.  It also defines the compile definition `WANT_MATERIALX_TRANSLATORS=1`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/translators/shading/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (MAYA_APP_VERSION VERSION_GREATER 2022)\n    target_sources(${TARGET_NAME}\n        PRIVATE\n            mtlxBaseReader.cpp\n            mtlxBaseWriter.cpp\n            mtlxConstructorReader.cpp\n            mtlxConverterReader.cpp\n            mtlxFileTextureReader.cpp\n            mtlxImageReader.cpp\n            mtlxPlace2dTextureWriter.cpp\n            mtlxPreviewSurfaceReader.cpp\n            mtlxPreviewSurfaceWriter.cpp\n            mtlxStandardSurfaceReader.cpp\n            mtlxStandardSurfaceWriter.cpp\n            mtlxSymmetricShaderReader.cpp\n            mtlxSymmetricShaderWriter.cpp\n            mtlxTranslationTableReader.cpp\n            mtlxTranslationTableWriter.cpp\n            mtlxFileTextureWriter.cpp\n    )\n    target_compile_definitions(${TARGET_NAME}\n        PRIVATE\n        WANT_MATERIALX_TRANSLATORS=1\n    )\n```\n\n----------------------------------------\n\nTITLE: Compute Selectability of a Prim (Python)\nDESCRIPTION: This snippet retrieves the computed selectability of a prim using the `ModelAPI::ComputeSelectability` method. It then checks if the computed selectability is not 'unselectable' and prints a message.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/selectability/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ns = cubeApi.ComputeSelectability()\n\nif(s != maya_schemas.Tokens.selectability_unselectable):\n  print \"The Cone's selectable!\"\n```\n\n----------------------------------------\n\nTITLE: Installing Python Bindings Library (CMake)\nDESCRIPTION: This snippet installs the Python bindings library to the specified destination. It uses the `install` command to copy the library and runtime files to the `bindings_install_path`, making the Python bindings available for use.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/mayatest/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${PYTHON_LIBRARY_NAME}\n    LIBRARY\n    DESTINATION ${bindings_install_path}\n    RUNTIME\n    DESTINATION ${bindings_install_path}\n)\n```\n\n----------------------------------------\n\nTITLE: Add Specific Test with Custom Environment CMake\nDESCRIPTION: This CMake snippet adds a specific Python test (`testHdImagingShape`) with a custom environment variable (`MAYAUSD_DISABLE_VP2_RENDER_DELEGATE`) set to 1. This disables the Viewport 2.0 render delegate for this particular test. It also sets the `LD_LIBRARY_PATH` and adds a label for filtering.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/nodes/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# The testHdImagingShape test requires that we're using the legacy Pixar batch\n# renderer and that the Viewport 2.0 render delegate is disabled.\nmayaUsd_add_test(testHdImagingShape\n    PYTHON_MODULE testHdImagingShape\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    ENV\n        \"MAYAUSD_DISABLE_VP2_RENDER_DELEGATE=1\"\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n)\nset_property(TEST testHdImagingShape APPEND PROPERTY LABELS nodes)\n```\n\n----------------------------------------\n\nTITLE: Adding the Translator Library in CMake\nDESCRIPTION: This CMake snippet adds a shared library target, `TRANSLATORS_PACKAGE`, which includes the listed C++ source files. This library constitutes the core of the Maya USD translators.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(${TRANSLATORS_PACKAGE}\n    SHARED\n    Camera.cpp\n    CommonTranslatorOptions.cpp\n    MayaReference.cpp\n    Mesh.cpp\n    NurbsCurve.cpp\n    FrameRange.cpp\n    DirectionalLight.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Library Target (CMake)\nDESCRIPTION: This installs the library target to the specified destination.  It installs both the library and archive files to the specified library installation path. It handles shared, static, and potentially dynamic library installations.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/pxrUsdPreviewSurface/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n    TARGETS ${TARGET_NAME}\n    LIBRARY\n    DESTINATION ${LIBRARY_INSTALL_PATH}\n    ARCHIVE\n    DESTINATION ${LIBRARY_INSTALL_PATH}\n    RUNTIME\n    DESTINATION ${LIBRARY_INSTALL_PATH}\n)\n```\n\n----------------------------------------\n\nTITLE: Run-Time Search Paths (RPATH)\nDESCRIPTION: This snippet configures run-time search paths (RPATH) for the Python extension library on macOS and Linux. It sets up various RPATH entries to ensure that the library can find its dependencies at runtime, including handling relative paths to USD and Maya installations.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/python/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX)\n    mayaUsd_init_rpath(rpath \"lib\")\n    mayaUsd_add_rpath(rpath \"../../..\")\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../../../../Maya.app/Contents/MacOS\")\n        mayaUsd_add_rpath(rpath \"../../../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    endif()\n    mayaUsd_install_rpath(rpath ${PYTHON_TARGET_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files in CMake\nDESCRIPTION: This CMake command specifies the installation destination for the header files defined in the HEADERS variable. It installs the files into the include directory of the project, under a subdirectory named `utils`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/utils/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES ${HEADERS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/utils/\n)\n```\n\n----------------------------------------\n\nTITLE: Writing and Installing AL/__init__.py - CMake\nDESCRIPTION: Generates an `__init__.py` file for the `AL` Python package within the build directory, which initializes the namespace for the package. This involves writing a Python try/except block to handle namespace declaration, ensuring compatibility with different Python environments.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_32\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE\n    \"file(WRITE \\\"${CMAKE_CURRENT_BINARY_DIR}/lib/python/AL/__init__.py\\\"\n    \\\"try:\\n\\t__import__('pkg_resources').declare_namespace(__name__)\\nexcept:\\n\\tfrom pkgutil import extend_path\\n\\t__path__ = extend_path(__path__, __name__)\\\")\"\n)\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/lib/python/AL/__init__.py\n    DESTINATION ${AL_INSTALL_PREFIX}/lib/python/AL\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target\nDESCRIPTION: This snippet links various libraries to the ${PROJECT_NAME} target.  `mayaUsd` is linked publicly, while `Qt::Core`, `Qt::Gui`, and `Qt::Widgets` are linked privately. This setup establishes the dependencies required for the target to function correctly.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/ui/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${PROJECT_NAME}\n    PUBLIC\n        mayaUsd\n    PRIVATE\n\t\tQt::Core\n\t\tQt::Gui\n\t\tQt::Widgets\n)\n```\n\n----------------------------------------\n\nTITLE: Appending Python Scripts to a List in CMake\nDESCRIPTION: This snippet appends the `cacheToUsd.py` script to the `maya_lib_scripts_src` variable. This list likely holds python scripts that are part of the Maya-USD libraries and this particular script probably implements some kind of caching mechanism from Maya to USD.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/resources/scripts/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND maya_lib_scripts_src\n    cacheToUsd.py\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories for the `${PXR_PACKAGE}` target. It includes directories for PXR, Maya, and the AL_USDMaya library, ensuring that the compiler can find the necessary header files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaPlugin/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${PXR_PACKAGE}\n    PRIVATE\n        ${PXR_INCLUDE_DIRS}\n        ${MAYA_INCLUDE_DIRS}\n        \"../../lib/AL_USDMaya\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Properties (usdTestMayaPlugin)\nDESCRIPTION: This snippet uses the `maya_set_plugin_properties` macro to set specific properties for the `usdTestMayaPlugin`. These properties are essential for Maya to correctly recognize and load the plugin. The exact properties set are dependent on the implementation of the `maya_set_plugin_properties` macro.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nmaya_set_plugin_properties(${TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Install Target (CMake)\nDESCRIPTION: This snippet specifies the installation locations for the target library and runtime components. It uses the `install` command to copy the library and runtime files to the `${AL_INSTALL_PREFIX}/plugin` directory. This ensures that the plugin is installed in the correct location for Maya to find and load it.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaTestPlugin/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# install\ninstall(TARGETS ${TARGET_NAME}\n    LIBRARY\n    DESTINATION ${AL_INSTALL_PREFIX}/plugin\n    RUNTIME\n    DESTINATION ${AL_INSTALL_PREFIX}/plugin\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Script Files (Lambert)\nDESCRIPTION: This snippet initializes a list of Python test script files related to the Lambert shader and then appends several script names to it. These scripts test various aspects of the VP2 Render Delegate with Lambert shaders.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/render/vp2RenderDelegate/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_SCRIPT_FILES_LAMBERT \"\")\n\nlist(APPEND TEST_SCRIPT_FILES_LAMBERT\n    testVP2RenderDelegateDisplayColors.py\n\ttestVP2RenderDelegateGeomSubset.py\n    testVP2RenderDelegatePointInstanceOrientation.py\n    testVP2RenderDelegateTextureLoading.py\n    testVP2RenderDelegateDuplicateProxy.py\n    testVP2RenderDelegateInteractiveWorkflows.py\n    testVP2RenderDelegatePointInstanceSelection.py\n    testVP2RenderDelegatePointInstancesPickMode.py\n    testVP2RenderDelegatePrimPath.py\n    testVP2RenderDelegateUSDPreviewSurface.py\n    testVP2RenderDelegateConsolidation.py\n    testVP2RenderDelegatePerInstanceInheritedData.py\n    testVP2RenderDelegateBasisCurves.py\n    testVP2RenderDelegatePoints.py\n    testVP2RenderDelegateUsdCamera.py\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Script Files with CMake\nDESCRIPTION: This snippet defines a list of Python test script files using the `set` command in CMake.  These scripts are then used to generate unit tests.  The list is extended conditionally based on the availability of `CMAKE_UFE_V3_FEATURES_AVAILABLE` and `UFE_TRIE_NODE_HAS_CHILDREN_COMPONENTS_ACCESSOR`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/fileio/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_SCRIPT_FILES\n    testComponentTags.py\n    testCopyLayerPrims.py\n    testPrimReader.py\n    testPrimWriter.py\n    testExportChaser.py\n    testExportChaserJobContext.py\n    testImportChaser.py\n    testImportWithNamespace.py\n    testJobContextRegistry.py\n    testDisplayLayerSaveRestore.py\n    testSaveMutedAnonLayer.py\n    testSaveLockedAnonLayer.py\n    testSaveUpAxisAndUnits.py\n    testNonLocalEditTargetLayer.py\n\n    # Once of the tests in this file requires UsdMaya (from the Pixar plugin). That test\n    # will be skipped if not found (probably because BUILD_PXR_PLUGIN is off).\n    testSchemaApiAdaptor.py\n)\n\nif(CMAKE_UFE_V3_FEATURES_AVAILABLE)\n    list(APPEND TEST_SCRIPT_FILES\n        testEditAsMayaBBox.py\n        testEditAsMayaDefaultValue.py\n        testMergeToUsd.py\n        testDuplicateAs.py\n        testPrimUpdater.py\n        testCacheToUsd.py\n        testMayaUsdOptions.py\n        testSwitchMayaReference.py\n    )\nendif()\n\nif(UFE_TRIE_NODE_HAS_CHILDREN_COMPONENTS_ACCESSOR)\n    list(APPEND TEST_SCRIPT_FILES\n        testHideOrphanedNodes.py\n    )\nendif()\n\n# requires MaterialX support\nif (MAYA_APP_VERSION VERSION_GREATER 2022)\n    list(APPEND TEST_SCRIPT_FILES\n        testShaderReader.py\n        testShaderWriter.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for a Target\nDESCRIPTION: Defines preprocessor symbols for the target ${PROJECT_NAME} based on whether certain UFE features are enabled. This allows for conditional compilation of code depending on the available features.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/ufe/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (UFE_LIGHTS_SUPPORT)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        UFE_LIGHTS_SUPPORT=1\n    )\n    if (UFE_VOLUME_LIGHTS_SUPPORT)\n        target_compile_definitions(${PROJECT_NAME}\n    \t    PRIVATE\n                UFE_VOLUME_LIGHTS_SUPPORT=1\n        )\n    endif()\nendif()\n\nif (UFE_MATERIALS_SUPPORT)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        UFE_MATERIALS_SUPPORT=1\n    )\n\n    if (UFE_MATERIAL_HAS_HASMATERIAL)\n        target_compile_definitions(${PROJECT_NAME}\n        PRIVATE\n            UFE_MATERIAL_HAS_HASMATERIAL=1\n        )\n    endif()\nendif()\n\nif (UFE_SCENE_SEGMENT_SUPPORT)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        UFE_SCENE_SEGMENT_SUPPORT=1\n    )\nendif()\n\nif (UFE_UINODEGRAPHNODE_HAS_SIZE)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        UFE_UINODEGRAPHNODE_HAS_SIZE=1\n    )\nendif()\n\nif (UFE_UINODEGRAPHNODE_HAS_DISPLAYCOLOR)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        UFE_UINODEGRAPHNODE_HAS_DISPLAYCOLOR=1\n    )\nendif()\n\nif (UFE_CONTEXTOPS_HAS_OPTIONBOX)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        UFE_CONTEXTOPS_HAS_OPTIONBOX=1\n    )\nendif()\n\nif (v4_BatchOps IN_LIST UFE_PREVIEW_FEATURES)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        UFE_PREVIEW_BATCHOPS_SUPPORT=1\n    )\nendif()\n\nif(CodeWrapperHandler IN_LIST UFE_PREVIEW_FEATURES)\n    target_compile_definitions(${PROJECT_NAME}\n        PRIVATE\n        UFE_PREVIEW_CODE_WRAPPER_HANDLER_SUPPORT=1\n    )\nendif()\n\nif (UFE_SCENE_SEGMENT_HANDLER_ROOT_PATH)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        UFE_SCENE_SEGMENT_HANDLER_ROOT_PATH=1\n    )\nendif()\n\nif (NOT MAYA_APP_VERSION VERSION_GREATER 2025)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        MAYAUSD_NEED_OUTLINER_FILTER_FIX=1\n    )\nendif()\n\nif (UFE_CAMERAHANDLER_HAS_FINDALL)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        UFE_CAMERAHANDLER_HAS_FINDALL=1\n    )\nendif()\n\nif (UFE_CAMERA_HAS_COMPUTEDVISIBILITY)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        UFE_CAMERA_HAS_COMPUTEDVISIBILITY=1\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Include Directories CMake\nDESCRIPTION: Sets the include directories for the target library.  This specifies where the compiler should look for header files.  Includes PXR, Maya, and UFE include directories.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(\n    ${LIBRARY_NAME}\n    PUBLIC\n    ${PXR_INCLUDE_DIRS}\n    ${MAYA_INCLUDE_DIRS}\n    ${UFE_INCLUDE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Writing and Installing lib/usd/plugInfo.json - CMake\nDESCRIPTION: Creates a minimal `plugInfo.json` file in the build directory specifically for the `/lib/usd` folder, which defines an inclusion pattern for resources.  This file is then installed to the appropriate destination to ensure the resources directory is properly linked for USD.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_33\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE\n    \"file(WRITE \\\"${CMAKE_CURRENT_BINARY_DIR}/lib/usd/plugInfo.json\\\" \\\"{\\n    \\\\\"Includes\\\\\": [ \\\\\"*/resources/\\\\\" ]\\n}\\\")\"\n)\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/lib/usd/plugInfo.json\n    DESTINATION ${AL_INSTALL_PREFIX}/lib/usd\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing plugInfo.json\nDESCRIPTION: Configures the plugInfo.json file and installs it to the specified resources installation path. This file likely contains metadata about the plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/translators/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/plugInfo.json\"\n               \"${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\"\n)\n\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\n    DESTINATION ${RESOURCES_INSTALL_PATH}\n)\n```\n\n----------------------------------------\n\nTITLE: Target Sources Configuration CMake\nDESCRIPTION: This snippet configures the target sources for the project, specifying which C++ files should be compiled and linked into the target. The PRIVATE keyword indicates that these sources are not exposed to other projects that might depend on this one.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/undo/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        OpUndoItemList.cpp\n        OpUndoItemMuting.cpp\n        OpUndoItemRecorder.cpp\n        OpUndoItemValidator.cpp\n        OpUndoItems.cpp\n        MayaUsdUndoBlock.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Library with CMake\nDESCRIPTION: This snippet creates a shared library named `AL_MayaTest` using the `add_library` command. It also specifies the source files (`testHelpers.cpp`, `testHarness.cpp`) to be included in the library.  The library type is defined as SHARED.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayatest/AL/maya/test/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(${MAYA_TEST_LIBRARY_NAME} SHARED)\n\ntarget_sources(${MAYA_TEST_LIBRARY_NAME}\n  PRIVATE\n    testHelpers.cpp\n    testHarness.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Add MaterialX Surface Shader Writer\nDESCRIPTION: Conditionally adds `mtlxMaterialXSurfaceShaderWriter.cpp` to the target sources if the Maya application version is greater than or equal to 2025.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/translators/shading/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif (MAYA_APP_VERSION VERSION_GREATER_EQUAL 2025)\n    target_sources(${TARGET_NAME}\n        PRIVATE\n            mtlxMaterialXSurfaceShaderWriter.cpp\n    )\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Compile Definitions\nDESCRIPTION: Defines compile-time definitions for the target library. These definitions can be used to control the behavior of the code during compilation, such as enabling platform-specific features or toggling optional functionality based on the presence of MAYA_HAS_OPENPBR_SURFACE_SHADER.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/translators/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${TARGET_NAME}\n    PRIVATE\n        $<$<BOOL:${IS_MACOSX}>:OSMac_>\n)\n\nif (MAYA_HAS_OPENPBR_SURFACE_SHADER)\n    target_compile_definitions(${TARGET_NAME}\n        PRIVATE\n        MAYA_HAS_OPENPBR_SURFACE_SHADER=1\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing plugInfo.json - CMake\nDESCRIPTION: Configures the `plugInfo.json` file which contains metadata about the plugin, such as its name, library path, and resource locations.  It sets variables defining these attributes and then uses the `configure_file` command to generate the final `plugInfo.json` based on a template.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\nset(libFile ${CMAKE_SHARED_LIBRARY_PREFIX}${LIBRARY_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX})\nset(PLUG_INFO_RESOURCE_PATH \"resources\")\nset(PLUG_INFO_ROOT \"..\")\nset(PLUG_INFO_PLUGIN_NAME \"pxr.${LIBRARY_NAME}\")\nset(PLUG_INFO_LIBRARY_PATH \"../../${libFile}\")\nconfigure_file(\n    plugInfo.json\n    ${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Public Headers CMake\nDESCRIPTION: This snippet installs the public header files (`ModelAPI.h`, `FrameRange.h`, `api.h`, `tokens.h`) to the specified destination directory within the installation prefix.  These headers provide the public interface for the `AL_USDMayaSchemas` library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/maya/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n    FILES\n        ModelAPI.h\n        FrameRange.h\n        api.h\n        tokens.h\n    DESTINATION\n        ${AL_INSTALL_PREFIX}/include/AL/usd/schemas/maya\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (CMake)\nDESCRIPTION: Specifies the include directories required for compiling the library.  It sets public include directories for the library target. These directories contain the header files needed for the library to build correctly.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${MAYAUTILS_LIBRARY_NAME}\n    PUBLIC \n    ${MAYAUTILS_INCLUDE_LOCATION}\n    ${MAYA_INCLUDE_DIRS}\n    )\n```\n\n----------------------------------------\n\nTITLE: Importing USD stage with session layer overload\nDESCRIPTION: This C++ code demonstrates importing the USD stage with an overloaded session layer using the -session flag in AL_usdmaya_ProxyShapeImport command.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_8\n\nLANGUAGE: c++\nCODE:\n```\n-session \"#usda 1.0\"\n```\n\n----------------------------------------\n\nTITLE: Applying Compile Configuration CMake\nDESCRIPTION: Applies a custom compile configuration using the mayaUsd_compile_config function, targeting the newly created library.  This likely sets up compiler flags specific to the Maya USD project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_compile_config(${LIBRARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Ufe Clipboard Support Disabling (CMake)\nDESCRIPTION: This snippet disables Ufe clipboard support if the USD version is less than 0.23.11. This is because the clipboard support requires USD v23.11 and C++17.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nif (USD_VERSION VERSION_LESS \"0.23.11\")\n    # The clipboard support was added in Ufe v6 and backported to Ufe v5.\n    # Compiling UsdUfe standalone with Ufe v5 will result in clipboard being\n    # enabled, but we must disable it here if USD version doesn't match C++ version.\n    if (UFE_CLIPBOARD_SUPPORT)\n        message(WARNING \"Disabling Ufe clipboard support since it requires USD v23.11 and C++17\")\n        set(UFE_CLIPBOARD_SUPPORT FALSE)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configure Export Empty PlugInfo CMake\nDESCRIPTION: Configures CMake to copy and potentially modify the plugInfoExportEmptyConfig.json file, creating plugInfo.json in the ExportEmptyConfig directory within the build directory. This configuration is used for tests related to exporting empty Xforms in USD.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/plugInfoExportEmptyConfig.json\"\n               \"${CMAKE_CURRENT_BINARY_DIR}/ExportEmptyConfig/plugInfo.json\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configure Target Sources\nDESCRIPTION: This snippet uses the `target_sources` CMake command to add a list of source files to the `${TARGET_NAME}` target. The `PRIVATE` keyword indicates that these sources are only used for building the target and are not exposed to other targets that link against it.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/translators/shading/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${TARGET_NAME}\n    PRIVATE\n        shadingAsset.cpp\n        shadingTokens.cpp\n        usdBlinnReader.cpp\n        usdBlinnWriter.cpp\n        usdDisplacementShaderWriter.cpp\n        usdFileTextureWriter.cpp\n        usdLambertReader.cpp\n        usdLambertWriter.cpp\n        usdMaterialReader.cpp\n        usdMaterialWriter.cpp\n        usdPhongReader.cpp\n        usdPhongWriter.cpp\n        usdPhongEWriter.cpp\n        usdReflectWriter.cpp\n        usdUVTextureReader.cpp\n        usdPrimvarReaderFloat3Reader.cpp\n        usdStandardSurfaceReader.cpp\n        usdStandardSurfaceWriter.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Copying USD Schema and Generating Code with CMake\nDESCRIPTION: This snippet copies a USD schema file and a `plugInfo.json` file to the binary directory, then executes the `USD_GENSCHEMA` tool to generate code from the schema.  It checks for errors during the schema generation process. The files are copied from source to the binary directory to avoid modifying the source files and allow for clean builds.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/fileio/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_UFE_V3_FEATURES_AVAILABLE)\n    #------------------------------------------------------------------------------\n    # Custom Rig Schema\n    #------------------------------------------------------------------------------\n    file(COPY\n            ${CMAKE_CURRENT_SOURCE_DIR}/UsdCustomRigSchema/schema.usda\n        DESTINATION\n            ${CMAKE_CURRENT_BINARY_DIR}/UsdCustomRigSchema\n    )\n    \n    # Note: we must copy the base plugInfo.json so that the USD schema generator below\n    #       does not author things we don't want, like the resource path of library path.\n    file(COPY\n            ${CMAKE_CURRENT_SOURCE_DIR}/UsdCustomRigSchema/plugInfo.json\n        DESTINATION\n            ${CMAKE_CURRENT_BINARY_DIR}/UsdCustomRigSchema\n    )\n    \n    execute_process(COMMAND\n                        ${Python_EXECUTABLE}\n                        ${USD_GENSCHEMA}\n                        ${CMAKE_CURRENT_BINARY_DIR}/UsdCustomRigSchema/schema.usda\n                        ${CMAKE_CURRENT_BINARY_DIR}/UsdCustomRigSchema/\n                    WORKING_DIRECTORY\n                        ${CMAKE_CURRENT_BINARY_DIR}\n                    RESULT_VARIABLE\n                        usdgen_res\n    )\n\n    if(usdgen_res)\n        message(FATAL_ERROR \"Schemas generation failed\")\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Registering for Transaction Notifications (C++)\nDESCRIPTION: This code snippet demonstrates how to register for transaction notifications using `TfNotice::Register`. The `onTransaction` method will be called when a transaction is closed on the specified USD stage.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/AL/usd/transaction/README.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nTfWeakPtr<UsdProcedural> me(this);\nm_transactionNoticeKey = TfNotice::Register(me, &UsdProcedural::onTransaction, stage);\n```\n\n----------------------------------------\n\nTITLE: Defining Build Options\nDESCRIPTION: Defines CMake options to control which components are built, including building optional schemas and translators, and skipping tests. These options can be set by the user to customize the build.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\noption(BUILD_USDMAYA_SCHEMAS \"Build optional schemas.\" ON)\noption(BUILD_USDMAYA_TRANSLATORS \"Build optional translators.\" ON)\noption(SKIP_USDMAYA_TESTS \"Build tests\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compile Definitions based on Maya APIs\nDESCRIPTION: This snippet shows how to conditionally define compile definitions based on different Maya API versions and features.  It checks for support for features such as default material API, color management, OpenPBR shader, and new point snapping support.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nmessage(STATUS \"MAYA_HAS_DEFAULT_MATERIAL_API is ${MAYA_HAS_DEFAULT_MATERIAL_API}\")\nif (MAYA_HAS_DEFAULT_MATERIAL_API)\n    target_compile_definitions(${PROJECT_NAME}\n        PRIVATE\n            HAS_DEFAULT_MATERIAL_SUPPORT_API=1\n    )\nendif()\n\nmessage(STATUS \"MAYA_HAS_COLOR_MANAGEMENT_SUPPORT_API is ${MAYA_HAS_COLOR_MANAGEMENT_SUPPORT_API}\")\nif (MAYA_HAS_COLOR_MANAGEMENT_SUPPORT_API)\n    target_compile_definitions(${PROJECT_NAME}\n        PRIVATE\n        HAS_COLOR_MANAGEMENT_SUPPORT_API=1\n    )\nendif()\n\nif (MAYA_HAS_OPENPBR_SURFACE_SHADER)\n    target_compile_definitions(${PROJECT_NAME}\n        PRIVATE\n        MAYA_HAS_OPENPBR_SURFACE_SHADER=1\n    )\nendif()\n\nmessage(STATUS \"MAYA_NEW_POINT_SNAPPING_SUPPORT is ${MAYA_NEW_POINT_SNAPPING_SUPPORT}\")\nif (MAYA_NEW_POINT_SNAPPING_SUPPORT)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        MAYA_NEW_POINT_SNAPPING_SUPPORT=1\n    )\nendif()\n\nmessage(STATUS \"MAYA_HAS_CRASH_DETECTION is ${MAYA_HAS_CRASH_DETECTION}\")\nif (MAYA_HAS_CRASH_DETECTION)\n    target_compile_definitions(${PROJECT_NAME}\n        PRIVATE\n        MAYA_HAS_CRASH_DETECTION=1\n    )\nendif()\n\nmessage(STATUS \"MAYA_CURRENT_UFE_CAMERA_SUPPORT is ${MAYA_CURRENT_UFE_CAMERA_SUPPORT}\")\nif (MAYA_CURRENT_UFE_CAMERA_SUPPORT)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n    MAYA_CURRENT_UFE_CAMERA_SUPPORT=1\n    )\nendif()\n\nmessage(STATUS \"MAYA_MRENDERITEM_UFE_IDENTIFIER_SUPPORT is ${MAYA_MRENDERITEM_UFE_IDENTIFIER_SUPPORT}\")\nif (MAYA_MRENDERITEM_UFE_IDENTIFIER_SUPPORT)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n    MAYA_MRENDERITEM_UFE_IDENTIFIER_SUPPORT=1\n    )\nendif()\n\nmessage(STATUS \"MAYA_UPDATE_UFE_IDENTIFIER_SUPPORT is ${MAYA_UPDATE_UFE_IDENTIFIER_SUPPORT}\")\nif (MAYA_UPDATE_UFE_IDENTIFIER_SUPPORT)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n    MAYA_UPDATE_UFE_IDENTIFIER_SUPPORT=1\n    )\nendif()\n\nmessage(STATUS \"MAYA_HAS_DISPLAY_STYLE_ALL_VIEWPORTS is ${MAYA_HAS_DISPLAY_STYLE_ALL_VIEWPORTS}\")\nif (MAYA_HAS_DISPLAY_STYLE_ALL_VIEWPORTS)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n    MAYA_HAS_DISPLAY_STYLE_ALL_VIEWPORTS=1\n    )\nendif()\n\nmessage(STATUS \"MAYA_ARRAY_ITERATOR_DIFFERENCE_TYPE_SUPPORT is ${MAYA_ARRAY_ITERATOR_DIFFERENCE_TYPE_SUPPORT}\")\nif (MAYA_ARRAY_ITERATOR_DIFFERENCE_TYPE_SUPPORT)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n    MAYA_ARRAY_ITERATOR_DIFFERENCE_TYPE_SUPPORT=1\n    )\nendif()\n\nmessage(STATUS \"MAYA_HAS_GET_MEMBER_PATHS is ${MAYA_HAS_GET_MEMBER_PATHS}\")\nif (MAYA_HAS_GET_MEMBER_PATHS)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n    MAYA_HAS_GET_MEMBER_PATHS=1\n    )\nendif()\n\nmessage(STATUS \"USD_HAS_TRACKER_INSTANCE_COUNT is ${USD_HAS_TRACKER_INSTANCE_COUNT}\")\nif (USD_HAS_TRACKER_INSTANCE_COUNT)\n    target_compile_definitions(${PROJECT_NAME}\n        PRIVATE\n        USD_HAS_TRACKER_INSTANCE_COUNT=1\n    )\nendif()\n\nmessage(STATUS \"MAYA_HAS_DISPLAY_LAYER_API is ${MAYA_HAS_DISPLAY_LAYER_API}\")\nif (MAYA_HAS_DISPLAY_LAYER_API)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n    MAYA_HAS_DISPLAY_LAYER_API=1\n    )\nendif()\n\nmessage(STATUS \"MAYA_HAS_NEW_DISPLAY_LAYER_MESSAGING_API is ${MAYA_HAS_NEW_DISPLAY_LAYER_MESSAGING_API}\")\nif (MAYA_HAS_NEW_DISPLAY_LAYER_MESSAGING_API)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n    MAYA_HAS_NEW_DISPLAY_LAYER_MESSAGING_API=1\n    )\nendif()\n\nmessage(STATUS \"MAYA_HAS_RENDER_ITEM_HIDE_ON_PLAYBACK_API is ${MAYA_HAS_RENDER_ITEM_HIDE_ON_PLAYBACK_API}\")\nif (MAYA_HAS_RENDER_ITEM_HIDE_ON_PLAYBACK_API)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n    MAYA_HAS_RENDER_ITEM_HIDE_ON_PLAYBACK_API=1\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install Header Files CMake\nDESCRIPTION: This snippet installs the header files listed in the `HEADERS` variable. These files are installed into the `${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/render/vp2ShaderFragments` directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/vp2ShaderFragments/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${HEADERS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/render/vp2ShaderFragments\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Compile Configuration for Python CMake\nDESCRIPTION: Applies the mayaUsd_compile_config function to the Python library. Sets compiler flags specific for the Maya USD project for the python module.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_compile_config(${PYTHON_LIBRARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Schema Generation CMake\nDESCRIPTION: This snippet configures and executes a Python script (`USD_GENSCHEMA`) to generate USD schema files. It sets the paths for the input schema files (`usd/schema.usda.in`, `usdGeom/schema.usda.in`) and the output schema file (`./schema.usda`). The `execute_process` command runs the Python script, and the `if` statement checks for errors during the schema generation process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/maya/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(USD_SCHEMA_PATH usd/schema.usda)\nset(USDGEOM_SCHEMA_PATH usdGeom/schema.usda)\nconfigure_file (\n    ./schema.usda.in\n    ./schema.usda\n)\n\nexecute_process(\n    COMMAND\n        \"${Python_EXECUTABLE}\"\n        \"${USD_GENSCHEMA}\"\n        \"${CMAKE_CURRENT_BINARY_DIR}/schema.usda\"\n        .\n    WORKING_DIRECTORY\n        \"${CMAKE_CURRENT_BINARY_DIR}\"\n    RESULT_VARIABLE\n        usdgen_res\n)\nif(usdgen_res)\n    message(FATAL_ERROR \"Schemas generation failed\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Promoting Headers with mayaUsd_promoteHeaderList\nDESCRIPTION: This snippet promotes the header files defined in the `HEADERS` variable for public usage using the `mayaUsd_promoteHeaderList` macro. The `BASEDIR` specifies the base directory for the headers.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/jobs/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_promoteHeaderList(\n    HEADERS \n        ${HEADERS} \n    BASEDIR \n        ${PROJECT_NAME}/fileio/jobs\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Maya USD API Library\nDESCRIPTION: This snippet adds a shared library named `${PROJECT_NAME}` using CMake. The library will be built from the source files specified in the `target_sources` command.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(${PROJECT_NAME} SHARED)\n```\n\n----------------------------------------\n\nTITLE: Defining Interactive Test Script Files with CMake\nDESCRIPTION: This snippet defines a CMake list of Python script files that will be used as interactive unit tests for the Maya USD project. These tests typically involve a user interface or require manual interaction.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INTERACTIVE_TEST_SCRIPT_FILES\n    testAttributeEditorTemplate.py\n    testMayaUsdInteractiveLayerEditorCommands.py\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Sources\nDESCRIPTION: This snippet defines the source files to be compiled into the Python extension library. It includes various wrapper files and adds a 'wrapClipboard.cpp' when UFE_CLIPBOARD_SUPPORT is enabled.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/python/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(${PYTHON_TARGET_NAME} \n    PRIVATE\n        module.cpp\n        wrapEditRouter.cpp\n        wrapGlobal.cpp\n        wrapTokens.cpp\n\t\twrapUICallback.cpp\n        wrapUtils.cpp\n        wrapCommands.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: USD Prim Selectability Example (AL_USDMaya)\nDESCRIPTION: This USD snippet shows how to control prim selectability in AL_USDMaya using the `al_usdmaya_selectability` metadata. Setting it to \"unselectable\" makes the prim and its descendants unselectable in the viewport.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/MIGRATION_GUIDE.md#_snippet_2\n\nLANGUAGE: usd\nCODE:\n```\ndef Xform \"geo\" (\n    al_usdmaya_selectability = \"unselectable\"\n)\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional PDB Installation (Windows)\nDESCRIPTION: This snippet conditionally installs the Program Database (PDB) file for the target 'hdMaya' on Windows systems. The PDB file contains debugging information.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/hdMaya/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:${TARGET_NAME}> \n            DESTINATION ${CMAKE_INSTALL_PREFIX}/lib OPTIONAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for MayaUSD\nDESCRIPTION: This snippet sets the include directories for the target ${PXR_TRANSLATORS_PACKAGE}. It adds the directories containing the AL_USDMaya headers and the USD Maya headers. This allows the compiler to find the necessary header files during compilation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/pxrUsdTranslators/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(\n  ${PXR_TRANSLATORS_PACKAGE}\n  PUBLIC\n  ${PROJECT_SOURCE_DIR}/lib/AL_USDMaya\n  ${USD_MAYA_INCLUDE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Search Paths (rpath) - CMake\nDESCRIPTION: Configures the runtime search paths (rpath) for the installed libraries on macOS and Linux to ensure that the necessary dependencies can be found at runtime. It uses custom CMake functions `mayaUsd_init_rpath` and `mayaUsd_add_rpath` along with standard variables like `AL_INSTALL_PREFIX` and `CMAKE_INSTALL_PREFIX`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX)\n    mayaUsd_init_rpath(rpath lib/python/${arDirPath})\n    mayaUsd_add_rpath(rpath \"${AL_INSTALL_PREFIX}/lib\")\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/lib\")\n    mayaUsd_install_rpath(rpath ${PYTHON_LIBRARY_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Header Files List Append (UFE v3)\nDESCRIPTION: Conditionally appends additional header files to the HEADERS list if CMAKE_UFE_V3_FEATURES_AVAILABLE is true.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_UFE_V3_FEATURES_AVAILABLE)\n    list(APPEND HEADERS\n        fallbackPrimUpdater.h\n        primUpdater.h\n        primUpdaterArgs.h\n        primUpdaterContext.h\n        primUpdaterRegistry.h\n        primUpdaterManager.h\n        pullInformation.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Linker Flags for Linux\nDESCRIPTION: This snippet sets linker flags for Linux to use RUNPATH instead of RPATH for shared libraries, executables, and modules. It enables new dynamic tagging (--enable-new-dtags).\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(${CMAKE_SYSTEM_NAME} MATCHES \"Linux\") # IS_LINUX not yet defined\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,--enable-new-dtags\")\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,--enable-new-dtags\")\n    set(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,--enable-new-dtags\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Run-Time Search Paths\nDESCRIPTION: This snippet sets up run-time search paths (rpath) for shared libraries on macOS and Linux, ensuring that the necessary USD libraries are found at runtime.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX)\n    mayaUsd_init_rpath(rpath \"lib\")\n    if(DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    elseif(DEFINED PXR_USD_LOCATION)\n        mayaUsd_add_rpath(rpath \"${PXR_USD_LOCATION}/lib\")\n    endif()\n    if (IS_LINUX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib64\")\n    endif()\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../Maya.app/Contents/MacOS\")\n    endif()\n    mayaUsd_install_rpath(rpath ${PROJECT_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Include pxrUsdMayaGL Subdirectory (CMake)\nDESCRIPTION: Adds the `pxrUsdMayaGL` directory as a subdirectory to the current CMake project. This makes targets defined in `pxrUsdMayaGL/CMakeLists.txt` available in the current scope. No specific dependencies are listed here, but the `pxrUsdMayaGL` subdirectory must contain a valid `CMakeLists.txt` file.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/maya/lib/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(pxrUsdMayaGL)\n```\n\n----------------------------------------\n\nTITLE: USD Prim Locking Example (AL_USDMaya)\nDESCRIPTION: This USD snippet demonstrates how to lock a prim in AL_USDMaya using the `al_usdmaya_lock` metadata.  Locking the prim prevents modifications to its transform. This metadata affects the current prim and all its descendants.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/MIGRATION_GUIDE.md#_snippet_0\n\nLANGUAGE: usd\nCODE:\n```\ndef Xform \"geo\" (\n    al_usdmaya_lock = transform\n)\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Display Build Message CMake\nDESCRIPTION: This snippet displays a message to the console during the CMake build process. It provides information about the Autodesk USD plugin build.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nmessage(\"========== ADSK USD Plugin ==========\")\n```\n\n----------------------------------------\n\nTITLE: Add Multiple Maya Usd Utils Tests CMake\nDESCRIPTION: Several calls to the `add_mayaUsdUtils_test` function, each defining a different test executable with its corresponding source files. This demonstrates how the function is used to set up different testing scenarios within the project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/utils/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_mayaUsdUtils_test(\n    testDiffValues\n    test_DiffValues.cpp\n    test_DiffValuesArrays.cpp\n    test_DiffValuesGeneric.cpp\n    test_DiffValuesMatrices.cpp\n    test_DiffValuesQuaternions.cpp\n    test_DiffValuesDoubleVecs.cpp\n    test_DiffValuesFloatVecs.cpp\n    test_DiffValuesHalfVecs.cpp\n    test_DiffValuesIntVecs.cpp\n)\n\nadd_mayaUsdUtils_test(\n    testDiffAttributes\n    test_DiffAttributes.cpp\n)\n\nadd_mayaUsdUtils_test(\n    testDiffRelationships\n    test_DiffRelationships.cpp\n)\n\nadd_mayaUsdUtils_test(\n    testDiffDictionaries\n    test_DiffDictionaries.cpp\n)\n\nadd_mayaUsdUtils_test(\n    testDiffLists\n    test_DiffLists.cpp\n)\n\nadd_mayaUsdUtils_test(\n    testDiffComputeOverall\n    test_DiffComputeOverall.cpp\n)\n\nadd_mayaUsdUtils_test(\n    testDiffPrims\n    test_DiffPrimsAttributes.cpp\n    test_DiffPrimsRelations.cpp\n    test_DiffPrimsChildren.cpp\n    test_DiffPrims.cpp\n)\n\nadd_mayaUsdUtils_test(\n    testMergePrims\n    test_MergePrims.cpp\n)\n\nadd_mayaUsdUtils_test(\n    testDiffMetadatas\n    test_DiffMetadatas.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Schema API Export Test Setup (CMake)\nDESCRIPTION: This snippet sets up a test for exporting schema APIs using `testUsdExportSchemaApi`. It defines the test target using `mayaUsd_add_test` with its corresponding Python module, working directory, and environment variables. Notably, it sets both `MAYA_PLUG_IN_PATH` and `PXR_OVERRIDE_PLUGINPATH_NAME` to ensure proper plugin loading and API overrides during the test. The test is also labelled 'translators'.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/translators/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# Requires Physics API to test some exporters:\n# One of the tests in this file requires UsdMaya (from the Pixar plugin). That test\n# will be skipped if not found (probably because BUILD_PXR_PLUGIN is off).\nmayaUsd_add_test(testUsdExportSchemaApi\n    PYTHON_MODULE testUsdExportSchemaApi\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    ENV\n        \"MAYA_PLUG_IN_PATH=${CMAKE_CURRENT_BINARY_DIR}/../plugin\"\n        \"${PXR_OVERRIDE_PLUGINPATH_NAME}=${CMAKE_CURRENT_BINARY_DIR}/../plugin/nullApiExporter\"\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n)\nset_property(TEST testUsdExportSchemaApi APPEND PROPERTY LABELS translators)\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files for the Target (CMake)\nDESCRIPTION: Specifies the source files that will be compiled and linked into the plugin. These include C++ files that implement the plugin's functionality, such as plugin entry point, helpers, and import/export logic.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/tutorials/import-export-plugin-c++/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${TARGET_NAME}\n    PRIVATE\n        plugin.cpp\n        helpers.cpp\n        helpersJSON.cpp\n        helpersUI.cpp\n        exampleExportPlugin.cpp\n        exampleImportPlugin.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Resources (CMake)\nDESCRIPTION: This snippet installs the plugin resources, including the configured `plugInfo.json` and the generated schema file (`generatedSchema.usda`), to the specified destination. These resources are essential for the plugin to function correctly.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/mayatest/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(\n    FILES ${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\n    DESTINATION ${resources_install_path}\n)\n\ninstall(\n    FILES ${CMAKE_CURRENT_BINARY_DIR}/generatedSchema.usda \n    DESTINATION ${resources_install_path}\n)\n```\n\n----------------------------------------\n\nTITLE: Promoting Header Files\nDESCRIPTION: This snippet uses the 'mayaUsd_promoteHeaderList' function to promote the defined header files. This function likely copies or creates symlinks to the header files in a location where they can be easily included by other projects.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/hdMaya/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_promoteHeaderList(\n    HEADERS\n        ${HEADERS}\n    BASEDIR\n        ${TARGET_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing Plug-in Information File\nDESCRIPTION: This snippet configures the 'plugInfo.json' file and installs it to the appropriate destination. It defines variables for the library filename, plug-in info path, library path within plug-in info, and resource path.  It configures the plugInfo file using configure_file, then installs the library and the configured plugInfo.json file.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/hdMaya/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIBFILENAME ${CMAKE_SHARED_LIBRARY_PREFIX}${TARGET_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX})\nset(PLUG_INFO_PATH \"plugInfo.json\")\nset(PLUG_INFO_LIBRARY_PATH \"../../../${LIBFILENAME}\")\nset(PLUG_INFO_RESOURCE_PATH \"resources\")\n\nconfigure_file(${PLUG_INFO_PATH} ${CMAKE_CURRENT_BINARY_DIR}/${PLUG_INFO_PATH})\n\ninstall(TARGETS ${TARGET_NAME}\n        LIBRARY\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib\n        RUNTIME\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib\n)\n\ninstall(FILES\n            ${CMAKE_CURRENT_BINARY_DIR}/${PLUG_INFO_PATH}\n        DESTINATION\n            ${CMAKE_INSTALL_PREFIX}/lib/usd/hdMaya/resources\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Sources for Python Bindings\nDESCRIPTION: Adds source files for the UFE Python bindings target. These files are specifically used for wrapping C++ code for use in Python. This snippet is independent of the main C++ target configuration.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/ufe/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${UFE_PYTHON_TARGET_NAME} \n    PRIVATE\n        module.cpp\n        wrapGlobal.cpp\n        wrapUtils.cpp\n        wrapNotice.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Install MayaUSD Attribute Editor Templates\nDESCRIPTION: This CMake snippet iterates through a list of template subdirectories (`MAYAUSD_AE_TEMPLATES`) and installs Python files related to the Maya Attribute Editor templates into the specified destination. These files include template definitions, UI components, and custom controls.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/resources/ae/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MAYAUSD_AE_TEMPLATES usdschemabase)\n\nforeach(_SUBDIR ${MAYAUSD_AE_TEMPLATES})\n    install(FILES\n        ${_SUBDIR}/__init__.py\n        ${_SUBDIR}/ae_template.py\n        ${_SUBDIR}/aeUITemplate.py\n        ${_SUBDIR}/arrayCustomControl.py\n        ${_SUBDIR}/attributeCustomControl.py\n        ${_SUBDIR}/connectionsCustomControl.py\n        ${_SUBDIR}/displayCustomControl.py\n        ${_SUBDIR}/enumCustomControl.py\n        ${_SUBDIR}/imageCustomControl.py\n        ${_SUBDIR}/materialCustomControl.py\n        ${_SUBDIR}/metadataCustomControl.py\n        ${_SUBDIR}/observers.py\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/python/ufe_ae/usd/nodes/${_SUBDIR}\n    )\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Setting Run-time Search Paths (usdTestMayaPlugin)\nDESCRIPTION: This snippet sets up the run-time search paths for the plugin, ensuring that it can find its dependencies at runtime. It uses `mayaUsd_init_rpath`, `mayaUsd_add_rpath`, and `mayaUsd_install_rpath` macros to add paths to the search list, considering different operating systems (macOS and Linux) and relative paths to USD libraries. This conditional configuration handles dependency resolution.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX)\n    mayaUsd_init_rpath(rpath \"plugin\")\n    if(DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    elseif(DEFINED PXR_USD_LOCATION)\n        mayaUsd_add_rpath(rpath \"${PXR_USD_LOCATION}/lib\")\n    endif()\n    if(IS_LINUX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib64\")\n    endif()\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../../../Maya.app/Contents/MacOS\")\n    endif()\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/lib\")\n    mayaUsd_install_rpath(rpath ${TARGET_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Shading Mode Test Configuration (CMake)\nDESCRIPTION: This snippet configures a test for listing Maya's shading modes within the USD context using the command `testUsdMayaListShadingModesCommand`. It uses `mayaUsd_add_test` to define the test, specifying the Python module, working directory, and environment variables. Critically, it explicitly sets the `MAYA_PLUG_IN_PATH` to point to the plugin directory, ensuring the test can load the required Maya USD plugin. The test is then labeled as 'translators'.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/translators/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# We are explicitly not setting PXR_PLUGINPATH_NAME here. We want to test\n# manually loading the plugin that provides Maya export.\nmayaUsd_add_test(testUsdMayaListShadingModesCommand\n    PYTHON_MODULE testUsdMayaListShadingModesCommand\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    ENV\n        \"MAYA_PLUG_IN_PATH=${CMAKE_CURRENT_BINARY_DIR}/../plugin\"\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n)\nset_property(TEST testUsdMayaListShadingModesCommand APPEND PROPERTY LABELS translators)\n```\n\n----------------------------------------\n\nTITLE: Building with CMake\nDESCRIPTION: This CMake command configures the build process, specifying paths to dependencies like Boost, Maya, USD, and Google Test. It also sets the install prefix and CMAKE_MODULE_PATH. This snippet shows how to build and install the plugin using make.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/build.md#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake \\\n      -DCMAKE_INSTALL_PREFIX='/path/to/install' \\\n      -DCMAKE_MODULE_PATH='/paths/to/folders/which/have/cmake/files' \\\n      -DBOOST_ROOT='/path/to/boost' \\\n      -DMAYA_LOCATION='/path/to/maya' \\\n      -DUSD_CONFIG_FILE='/path/to/pxrConfig.cmake'\\\n      -DGTEST_ROOT='/path/to/googletest'\\\n      -DCMAKE_PREFIX_PATH='/path/to/maya/lib/cmake'\n      ..\n\nmake -j <NUM_CORES> install\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files CMake\nDESCRIPTION: Installs the defined header files to the specified destination during the installation process. The destination path is `${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/fileio/shading`, which places the headers in the include directory under the Maya-USD project structure.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/shading/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${HEADERS}\n     DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/fileio/shading\n)\n```\n\n----------------------------------------\n\nTITLE: Define Compiler Definitions (CMake)\nDESCRIPTION: This snippet defines compiler definitions for the target. These definitions include preprocessor macros such as `AL_USDMAYA_UNITTEST`, `AL_USDMAYATEST_PLUGIN_EXPORT`, `AL_USDMAYA_TEST_DATA` (which points to the test data directory), and platform-specific macros for macOS and Linux. These definitions control conditional compilation within the source code.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaTestPlugin/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${TARGET_NAME}\n    PRIVATE\n        AL_USDMAYA_UNITTEST\n        AL_USDMAYATEST_PLUGIN_EXPORT\n        AL_USDMAYA_TEST_DATA=\"${CMAKE_CURRENT_SOURCE_DIR}/test_data\"\n        $<$<BOOL:${IS_MACOSX}>:OSMac_>\n        $<$<BOOL:${IS_LINUX}>:LINUX>\n)\n```\n\n----------------------------------------\n\nTITLE: Including Compile Configurations\nDESCRIPTION: This snippet calls `mayaUsd_compile_config` to perform custom compile configurations for the specified project. This command is assumed to be defined elsewhere within the CMake setup.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_compile_config(${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Installing Python Initialization File\nDESCRIPTION: This snippet installs an empty `__init__.py` file to make the subfolders within the project considered as Python modules. It is installed into the `${CMAKE_INSTALL_PREFIX}/lib/python/${PROJECT_NAME}` directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES __init__.py DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/python/${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectories\nDESCRIPTION: Adds several subdirectories to the build process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(chaser)\nadd_subdirectory(jobs)\nadd_subdirectory(shading)\nadd_subdirectory(translators)\nadd_subdirectory(utils)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Set Compile Definitions and Target Sources (MaterialX Version >= 1.38.8)\nDESCRIPTION: Adds compile definitions and source files for MaterialX versions 1.38.8 and later. Includes a fix for UV scaling and offset for UDIMs, along with new node implementations.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/MaterialXGenOgsXml/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(MaterialX_VERSION VERSION_GREATER_EQUAL \"1.38.8\")\n# Locally fixing the UV scale and offset for UDIMs. We will submit to 1.39 later.\ntarget_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n    FIX_NODEGRAPH_UDIM_SCALE_OFFSET\n    )\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        Nodes/MayaHwImageNode.cpp\n        Nodes/MayaCompoundNode.cpp\n        Nodes/MayaShaderGraph.cpp\n        Nodes/MayaSourceCodeNode.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files\nDESCRIPTION: This snippet installs the header files defined earlier to the 'include/hdMaya' directory under the installation prefix.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/hdMaya/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${HEADERS}\n        DESTINATION\n            ${CMAKE_INSTALL_PREFIX}/include/hdMaya\n)\n```\n\n----------------------------------------\n\nTITLE: Append Versioned Node GLSL Library\nDESCRIPTION: Appends a versioned GLSL library for nodes to a list. Includes implementations related to color transformations.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/MaterialXGenOgsXml/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND NODE_GLSL_LIB_VERSIONED\n    libraries/usd_transform_color.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Teardown Multiple Prims to USD (MEL)\nDESCRIPTION: This MEL command tears down multiple USD prims by specifying a comma-separated list of prim paths using the `td` flag. This writes any modifications to the specified prims back to the active EditTarget.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/meshTranslation/README.md#_snippet_4\n\nLANGUAGE: mel\nCODE:\n```\ncmds.AL_usdmaya_TranslatePrim(td=\"/root/sphere,/root/cube\")\n```\n\n----------------------------------------\n\nTITLE: Install helpTableMayaUSD File (CMake)\nDESCRIPTION: This CMake code snippet installs the file \"helpTableMayaUSD\" to the destination directory \"${CMAKE_INSTALL_PREFIX}/lib/helpTable\". This ensures that the help table file is placed in the appropriate location during the installation process of the Maya-USD plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/resources/helpTable/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"helpTableMayaUSD\"\n\t\tDESTINATION \"${CMAKE_INSTALL_PREFIX}/lib/helpTable\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Definitions for Maya-USD\nDESCRIPTION: This snippet sets compile definitions for the mayaUsd project based on build type, platform, and feature flags like MaterialX and Qt support. It defines both public and private definitions.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${PROJECT_NAME}\n    PUBLIC\n        PXR_PLUGINPATH_NAME=${PXR_OVERRIDE_PLUGINPATH_NAME}\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:TBB_USE_DEBUG>\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_DEBUG_PYTHON>\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_LINKING_PYTHON>\n        $<$<BOOL:${CMAKE_WANT_VALIDATE_UNDO_ITEM}>:WANT_VALIDATE_UNDO_ITEM>\n        $<$<BOOL:${MAYA_ENABLE_NEW_PRIM_DELETE}>:MAYA_ENABLE_NEW_PRIM_DELETE>\n    PRIVATE\n        MAYAUSD_MACROS_EXPORT\n        MAYAUSD_CORE_EXPORT\n        MFB_PACKAGE_NAME=\"${PROJECT_NAME}\"\n        MFB_ALT_PACKAGE_NAME=\"${PROJECT_NAME}\"\n        MFB_PACKAGE_MODULE=\"${PROJECT_NAME}\"\n        $<$<BOOL:${IS_MACOSX}>:OSMac_>\n        $<$<BOOL:${IS_LINUX}>:LINUX>\n        $<$<BOOL:${IS_LINUX}>:GL_GLEXT_PROTOTYPES>\n        $<$<BOOL:${IS_LINUX}>:GLX_GLXEXT_PROTOTYPES>\n        $<$<BOOL:${CMAKE_WANT_MATERIALX_BUILD}>:WANT_MATERIALX_BUILD>\n\t\t$<$<BOOL:${Qt_FOUND}>:WANT_QT_BUILD>\n        $<$<BOOL:${BUILD_HDMAYA}>:BUILD_HDMAYA>\n\n        # this flag is needed when building maya-usd in Maya\n        $<$<BOOL:${IS_WINDOWS}>:WIN32>\n)\n```\n\n----------------------------------------\n\nTITLE: Adding subdirectory using CMake\nDESCRIPTION: This snippet uses the `add_subdirectory` command in CMake to include the 'icons' directory as a subdirectory in the current project. It tells CMake to process the CMakeLists.txt file located within the 'icons' directory. It is useful for organizing larger projects into smaller, more manageable components.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/resources/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(icons)\n```\n\n----------------------------------------\n\nTITLE: Compile Configuration\nDESCRIPTION: This snippet applies a mayaUsd-specific compile configuration to the Python extension library using the `mayaUsd_compile_config` macro.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/python/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_compile_config(${PYTHON_TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files with CMake\nDESCRIPTION: This snippet installs the header files defined in the `HEADERS` variable to a specific destination directory. The `DESTINATION` is specified using `CMAKE_INSTALL_PREFIX` and the relative path to the `fileio/jobs` headers.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/jobs/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES ${HEADERS}\n     DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/fileio/jobs\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Tests CMake\nDESCRIPTION: This snippet iterates through the list of test scripts and adds each one as a CTest target. It also sets environment variables for each test, and assigns a CTest label for filtering.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/render/pxrUsdMayaGL/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(script ${TEST_SCRIPT_FILES})\n    mayaUsd_get_unittest_target(target ${script})\n    mayaUsd_add_test(${target}\n        INTERACTIVE\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        PYTHON_SCRIPT ${script}\n        ENV\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n\n            # Maya uses a very old version of GLEW, so we need support for\n            # pre-loading a newer version from elsewhere.\n            \"LD_PRELOAD=${ADDITIONAL_LD_PRELOAD}\"\n\n            # All of the pxrUsdMayaGL tests exercise Pixar's batch renderer, so\n            # we turn the Viewport 2.0 render delegate off.\n            \"MAYAUSD_DISABLE_VP2_RENDER_DELEGATE=1\"\n    )\n\n    # Assign a CTest label to these tests for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS pxrUsdMayaGL)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories\nDESCRIPTION: This snippet adds the 'adapters' and 'delegates' subdirectories to the build process. CMake will process the 'CMakeLists.txt' files in those subdirectories.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/hdMaya/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(adapters)\nadd_subdirectory(delegates)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Script Files (Standard Surface)\nDESCRIPTION: This snippet initializes a list of Python test script files related to the Standard Surface shader and then appends testVP2RenderDelegateDisplayColorsStandardSurface.py to it. This script is used for testing with the StandardSurface shader.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/render/vp2RenderDelegate/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_SCRIPT_FILES_STANDARDSURFACE \"\")\n\nlist(APPEND TEST_SCRIPT_FILES_STANDARDSURFACE\n    testVP2RenderDelegateDisplayColorsStandardSurface.py\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Public Headers - CMake\nDESCRIPTION: Installs the public header files for the AL library and its submodules (maya, usdmaya, cmds, fileio, nodes, proxy, tests, and fileio/translators). These headers are copied to the specified destination under the `AL_INSTALL_PREFIX`, providing the API for other projects to use the library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_34\n\nLANGUAGE: cmake\nCODE:\n```\ninstall( FILES ${AL_maya_headers}\n        DESTINATION ${AL_INSTALL_PREFIX}/include/AL/maya\n)\ninstall( FILES\n            ${AL_usdmaya_headers}\n        DESTINATION ${AL_INSTALL_PREFIX}/include/AL/usdmaya\n)\ninstall( FILES\n            ${AL_usdmaya_cmds_headers}\n        DESTINATION ${AL_INSTALL_PREFIX}/include/AL/usdmaya/cmds\n)\ninstall( FILES\n            ${AL_usdmaya_fileio_headers}\n        DESTINATION ${AL_INSTALL_PREFIX}/include/AL/usdmaya/fileio\n)\ninstall( FILES\n            ${AL_usdmaya_nodes_headers}\n        DESTINATION ${AL_INSTALL_PREFIX}/include/AL/usdmaya/nodes\n)\ninstall( FILES\n            ${AL_usdmaya_nodes_proxy_headers}\n        DESTINATION ${AL_INSTALL_PREFIX}/include/AL/usdmaya/nodes/proxy\n)\ninstall( FILES\n            ${AL_usdmaya_tests_headers}\n        DESTINATION ${AL_INSTALL_PREFIX}/include/AL/usdmaya/tests\n)\ninstall( FILES\n            ${AL_usdmaya_fileio_translators_headers}\n        DESTINATION ${AL_INSTALL_PREFIX}/include/AL/usdmaya/fileio/translators\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Qt Properties to Avoid Macro Overlap (CMake)\nDESCRIPTION: Prevents Qt from defining certain macros (foreach, signals, slots, emit) by setting the QT_NO_KEYWORDS interface compile definition. This avoids conflicts with other libraries, such as Boost, and enforces the use of Qt's Q_ macros.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/tutorials/import-export-plugin-c++/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(Qt::Core PROPERTIES INTERFACE_COMPILE_DEFINITIONS QT_NO_KEYWORDS)\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectories in CMake for Maya-USD Modules\nDESCRIPTION: This CMake code snippet adds subdirectories for various modules in the Maya-USD project, allowing for modular compilation and organization. The `add_subdirectory` command includes the CMakeLists.txt file from each specified subdirectory into the current build process. Dependencies for these subdirectories are managed within their respective CMakeLists.txt files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(base)\nadd_subdirectory(commands)\nadd_subdirectory(fileio)\nadd_subdirectory(listeners)\nadd_subdirectory(nodes)\nadd_subdirectory(python)\nadd_subdirectory(render)\nadd_subdirectory(resources)\nif( PXR_VERSION GREATER_EQUAL 2211 )\n    add_subdirectory(sceneIndex)\nendif()\nadd_subdirectory(ufe)\nadd_subdirectory(undo)\nadd_subdirectory(utils)\n```\n\n----------------------------------------\n\nTITLE: Configuring PlugInfo CMake\nDESCRIPTION: Configures and installs the `plugInfo.json` file.  `configure_file` command copies `plugInfo.json` to `${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json` during configuration. The variables `${CMAKE_SHARED_LIBRARY_PREFIX}`, `${PROJECT_NAME}`, and `${CMAKE_SHARED_LIBRARY_SUFFIX}` are used to populate necessary values in the `plugInfo.json` file. The `install` command then installs this configured file to `${PLUG_INFO_DIR}`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/sceneIndex/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(PLUG_INFO_LIBRARY_PATH ${CMAKE_SHARED_LIBRARY_PREFIX}${PROJECT_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX})\nset(PLUG_INFO_DIR ${CMAKE_INSTALL_PREFIX}/lib/usd/sceneIndex/resources)\n\nconfigure_file(\n    plugInfo.json\n    ${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\n)\n\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\n    DESTINATION ${PLUG_INFO_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Target Sources and Definitions (UFE Clipboard Support)\nDESCRIPTION: This snippet conditionally adds source files and a compile definition based on whether UFE_CLIPBOARD_SUPPORT is defined.  It includes UsdClipboard.cpp, UsdClipboardCommands.cpp, UsdClipboardHandler.cpp, UsdUndoDuplicateCommand.cpp, UsdUndoDuplicateSelectionCommand.cpp and sets UFE_CLIPBOARD_SUPPORT=1.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (UFE_CLIPBOARD_SUPPORT)\n    target_sources(${PROJECT_NAME}\n        PRIVATE\n            UsdClipboard.cpp\n            UsdClipboardCommands.cpp\n            UsdClipboardHandler.cpp\n            UsdUndoDuplicateCommand.cpp\n            UsdUndoDuplicateSelectionCommand.cpp\n    )\n\n    target_compile_definitions(${PROJECT_NAME}\n        PRIVATE\n            UFE_CLIPBOARD_SUPPORT=1\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Run-Time Search Paths\nDESCRIPTION: This snippet configures run-time search paths for the Python extension library on macOS and Linux. It adds paths relative to the install location and potentially to Maya's application contents, facilitating library loading at runtime. It also handles a relative path between MayaUSD and USD.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/python/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX)\n    mayaUsd_init_rpath(rpath \"lib\")\n    mayaUsd_add_rpath(rpath \"../../../..\")\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../../../../Maya.app/Contents/MacOS\")\n        mayaUsd_add_rpath(rpath \"../../../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    endif()\n    mayaUsd_install_rpath(rpath ${PYTHON_TARGET_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Header Promotion CMake\nDESCRIPTION: This snippet utilizes a custom CMake function, `mayaUsd_promoteHeaderList`, to handle header promotion. It takes the `HEADERS` variable, its content, and the subdirectory 'undo' as arguments. This likely prepares the headers for inclusion and installation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/undo/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_promoteHeaderList(HEADERS ${HEADERS} SUBDIR undo)\n```\n\n----------------------------------------\n\nTITLE: Appending Source Files to List CMake\nDESCRIPTION: Appends a list of source files related to core AL_USDMaya functionality to the AL_usdmaya_source list. These source files provide the implementation for debug codes, global variables, metadata handling, and stage caching.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND AL_usdmaya_source\n        AL/usdmaya/DebugCodes.cpp\n        AL/usdmaya/Global.cpp\n        AL/usdmaya/Metadata.cpp\n        AL/usdmaya/StageCache.cpp\n        AL/usdmaya/TransformOperation.cpp\n        AL/usdmaya/moduleDeps.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Headers CMake\nDESCRIPTION: Installs the header files to the specified destination. The `install` command copies the header files listed in the `HEADERS` variable to the `${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/sceneIndex` directory.  This ensures that the headers are available in the correct location after the project is installed.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/sceneIndex/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${HEADERS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/sceneIndex\n)\n```\n\n----------------------------------------\n\nTITLE: Define pxr_shared_library for usdMaya\nDESCRIPTION: Defines a shared library named `usdMaya` using the `pxr_shared_library` function, specifying its dependencies, include directories, public headers, public and private classes, C++ source files, Python module source files, and resource files. It also disables precompiled headers for this library. This library provides the core functionality for the USD Maya plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/maya/lib/usdMaya/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\npxr_shared_library(${PXR_PACKAGE}\n    LIBRARIES\n        ar\n        gf\n        kind\n        sdf\n        tf\n        usd\n        usdGeom\n        usdUtils\n        vt\n        ${MAYA_Foundation_LIBRARY}\n        ${MAYA_OpenMaya_LIBRARY}\n        ${MAYA_OpenMayaAnim_LIBRARY}\n        ${MAYA_OpenMayaRender_LIBRARY}\n        ${MAYA_OpenMayaUI_LIBRARY}\n        mayaUsd\n        ${UFE_LIBRARY}\n\n    INCLUDE_DIRS\n        ${PXR_INCLUDE_DIRS}\n        ${MAYA_INCLUDE_DIRS}\n        ${UFE_INCLUDE_DIR}\n\n    PUBLIC_HEADERS\n        api.h\n\n    PUBLIC_CLASSES\n        editUtil\n        translatorModelAssembly\n\n        exportCommand\n        exportTranslator\n        importCommand\n        importTranslator\n        listShadingModesCommand\n        proxyShape\n        referenceAssembly\n\n    PRIVATE_CLASSES\n        readJobWithSceneAssembly\n        instancerShapeAdapterWithSceneAssembly\n\n    CPPFILES\n        readJob_ImportWithProxies.cpp\n\n    PYMODULE_CPPFILES\n        module.cpp\n        wrapAssembly.cpp\n        wrapEditUtil.cpp\n\n    PYMODULE_FILES\n        __init__.py\n        AEpxrUsdReferenceAssemblyTemplate.py\n        userExportedAttributesUI.py\n\n    RESOURCE_FILES\n        AEpxrUsdProxyShapeTemplate.mel\n        out_pxrUsdProxyShape.xpm\n        out_pxrUsdReferenceAssembly.xpm\n        usdMaya.mel\n        usdTranslatorExport.mel\n        usdTranslatorImport.mel\n\n    DISABLE_PRECOMPILED_HEADERS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Sources with CMake\nDESCRIPTION: This snippet uses the `target_sources` command in CMake to define the source files for the `${PROJECT_NAME}` target. It specifies the files required for building the target as PRIVATE, meaning they are only used internally by the target and not exposed to other targets that link against it.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/nodes/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        hdImagingShape.cpp\n        layerManager.cpp\n        pointBasedDeformerNode.cpp\n        proxyAccessor.cpp\n        proxyShapeBase.cpp\n        proxyShapePlugin.cpp\n        proxyShapeStageExtraData.cpp\n        proxyShapeListenerBase.cpp\n        stageData.cpp\n        stageNode.cpp\n        usdPrimProvider.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Add RFM Translators\nDESCRIPTION: Conditionally adds `rfmShaderTranslation.cpp` to the target if `BUILD_RFM_TRANSLATORS` is true. This enables support for RFM shader translations.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/translators/shading/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_RFM_TRANSLATORS)\n    target_sources(${TARGET_NAME}\n        PRIVATE\n            rfmShaderTranslation.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Icons using CMake\nDESCRIPTION: This snippet iterates through a list of icon names and installs corresponding PNG files of different resolutions into the specified 'icons' directory within the Maya USD installation path. It also renames certain icon files during the installation process. The icon names and destination are parameterized.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/icons/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PLUGIN_ICONS\n    out_mayaUsdProxyShape\n    menu_options\n    toggle_off\n    toggle_on\n    USD_generic\n    USD_stage\n)\nforeach(ICON_BASE ${PLUGIN_ICONS})\n    # The _100.png files need to be installed without the _100. This is the\n    # base icon name that is used. Maya will automatically choose the _150/_200\n    # image if neeeded.\n    install(FILES \"${ICON_BASE}_100.png\"\n        DESTINATION \"${INSTALL_DIR_SUFFIX}/icons\"\n        RENAME \"${ICON_BASE}.png\"\n    )\n    install(FILES \"${ICON_BASE}_150.png\" \"${ICON_BASE}_200.png\"\n        DESTINATION \"${INSTALL_DIR_SUFFIX}/icons\"\n    )\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Define Translator Plugin\nDESCRIPTION: This macro defines a translator plugin and binds it to a specific USD schema type.  It's a convenience macro for registering the translator with the USD plug system. Requires the AL_USDMayaTranslators library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/AL/usdmaya/fileio/translators/README.md#_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nAL_USDMAYA_DEFINE_TRANSLATOR(TranslatorTestPlugin, TranslatorTestType)\n```\n\n----------------------------------------\n\nTITLE: Defining MaterialX Directory\nDESCRIPTION: If MaterialX build is enabled, this snippet defines the MaterialX_DIR. It replaces backslashes with forward slashes for compatibility and sets MaterialX directory compile definition.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_WANT_MATERIALX_BUILD)\n# Path where MaterialX was found. Allows loading the required libraries.\nstring(REPLACE \"\\\\\" \"/\" Forward_MaterialX_DIR ${MaterialX_DIR})\ntarget_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        MaterialX_DIR=\"${Forward_MaterialX_DIR}\"\n)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directory Suffix CMake\nDESCRIPTION: This snippet sets the installation directory suffix for the Pixar USD plugin.  It defines a variable `INSTALL_DIR_SUFFIX` which specifies the subdirectory where the plugin will be installed relative to the `CMAKE_INSTALL_PREFIX`. It also sets the `PXR_INSTALL_PREFIX` based on the defined suffix.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_DIR_SUFFIX plugin/pxr)\nset(PXR_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/${INSTALL_DIR_SUFFIX})\n```\n\n----------------------------------------\n\nTITLE: Initialize and add runtime search paths\nDESCRIPTION: This snippet initializes and adds runtime search paths (rpaths) for the plugin, specifically for macOS and Linux. It uses conditional logic to add paths based on the operating system and the presence of certain environment variables (MAYAUSD_TO_USD_RELATIVE_PATH, PXR_USD_LOCATION).\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/mayaToHydra/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX) \n    mayaUsd_init_rpath(rpath \"lib/maya\")\n    if(DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    elseif(DEFINED PXR_USD_LOCATION)\n        mayaUsd_add_rpath(rpath \"${PXR_USD_LOCATION}/lib\")\n    endif()\n    if (IS_LINUX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib64\")\n    endif()\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../../Maya.app/Contents/MacOS\")\n    endif()\n    mayaUsd_add_rpath(rpath \"../\")\n    mayaUsd_install_rpath(rpath ${TARGET_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Callback for the Attribute Editor Template in Python\nDESCRIPTION: This code snippet demonstrates how to register a custom callback function to add layout sections to the MayaUSD Attribute Editor (AE) template. The callback allows plugins to organize plugin-specific attributes of a prim into AE layout sections. It shows how to retrieve the MayaUsd AE template object, add controls, suppress attributes, and register/unregister the callback during plugin loading/unloading.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/resources/ae/usdschemabase/Attribute-Editor-Template-Doc.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# AE template UI callback function.\nimport ufe\nimport maya.internal.common.ufe_ae.template as ufeAeTemplate\nfrom ufe_ae.usd.nodes.usdschemabase.ae_template import AETemplate as mayaUsd_AETemplate\n\n# Callback function which receives two params as input: callback context and\n# callback data (empty).\ndef onBuildAETemplateCallback(context, data):\n    # In the callback context you can retrieve the ufe path string.\n    ufe_path_string = context.get('ufe_path_string')\n    ufePath = ufe.PathString.path(ufe_path_string)\n    ufeItem = ufe.Hierarchy.createItem(ufePath)\n\n    # The callback data is empty.\n\n    # Then you can call the special static method above to get the MayaUsd\n    # AE template class object. Using that object you can then create\n    # layout sections and add controls.\n    #\n    # Any controls added should be done using mayaUsdAETemplate.addControls()\n    # which takes care of checking the AE state (show array attributes, nice\n    # name, etc). It also adds the added attributes to the addedAttrs list.\n    # This will keep the attributes from also appearing in the \"Extra\n    # Attributes\" section.\n    #\n    # If you don't want attributes shown in the AE, you should call\n    # mayaUsdAETemplate.suppress().\n    #\n    # You can also inject a function into the attribute nice naming.\n    # See [Attribute Nice Naming callback] section below for more info.\n    #\n    mayaUsdAETemplate = mayaUsd_AETemplate.getAETemplateForCustomCallback()\n    if mayaUsdAETemplate:\n        # Create a new section and add attributes to it.\n        with ufeAeTemplate.Layout(self.mayaUsdAETemplate, 'My Section', collapse=True):\n            self.mayaUsdAETemplate.addControls(['param1', 'param2'])\n\n# Register your callback so it will be called during the MayaUsd AE\n# template UI building code. This would probably done during plugin loading.\n# The first param string 'onBuildAETemplate' is the callback operation and the\n# second is the name of your callback function.\nimport mayaUsd.lib as mayaUsdLib\nfrom usdUfe import registerUICallback\nmayaUsdLib.registerUICallback('onBuildAETemplate', onBuildAETemplateCallback)\n\n# During your plugin unload you should unregister the callback (and any attribute\n# nice naming function you also added).\nmayaUsdLib.unregisterUICallback('onBuildAETemplate', onBuildAETemplateCallback)\n\n```\n\n----------------------------------------\n\nTITLE: Including MayaUsd Compile Configuration\nDESCRIPTION: This snippet includes a separate MayaUsd-specific compile configuration file. This file likely contains additional compile settings specific to the MayaUsd integration.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_compile_config(${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Initializing Run-Time Search Paths (CMake)\nDESCRIPTION: This sets up run-time search paths for the library on macOS and Linux, ensuring that the library can find its dependencies at runtime. It configures the rpath using `mayaUsd_init_rpath` and `mayaUsd_add_rpath` macros, considering different scenarios like relative paths and USD installation locations.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/pxrUsdPreviewSurface/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX)\n    mayaUsd_init_rpath(rpath \"lib\")\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/lib\")\n    if(DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    elseif(DEFINED PXR_USD_LOCATION)\n        mayaUsd_add_rpath(rpath \"${PXR_USD_LOCATION}/lib\")\n    endif()\n    if(IS_LINUX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib64\")\n    endif()\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../Maya.app/Contents/MacOS\")\n    endif()\n    mayaUsd_install_rpath(rpath ${TARGET_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Run-Time Search Paths for usdUfe\nDESCRIPTION: This snippet sets the run-time search paths for the usdUfe project on macOS and Linux. It initializes the rpath to 'lib', and adds additional paths based on the MAYAUSD_TO_USD_RELATIVE_PATH or PXR_USD_LOCATION variables. It also handles platform-specific paths for Linux and macOS, taking into consideration the relative location of USD and Maya.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX)\n    mayaUsd_init_rpath(rpath \"lib\")\n    if(DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    elseif(DEFINED PXR_USD_LOCATION)\n        mayaUsd_add_rpath(rpath \"${PXR_USD_LOCATION}/lib\")\n    endif()\n    if (IS_LINUX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib64\")\n    endif()\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../Maya.app/Contents/MacOS\")\n    endif()\n    mayaUsd_install_rpath(rpath ${PROJECT_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Append Node GLSL Implementations\nDESCRIPTION: Appends GLSL implementations for nodes to a list. Includes implementations for texture coordinate tangents and arbitrary tangents.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/MaterialXGenOgsXml/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND NODE_GLSL_IMPLEMENTATIONS\n    libraries/mx_texcoordtangents_vector3.glsl\n    libraries/mx_arbitrarytangents_vector3.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Library (CMake)\nDESCRIPTION: This snippet defines the source files for the Python bindings of the USDTransaction library and creates the shared library using add_library. It sets the compile configuration using mayaUsd_compile_config.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/AL/usd/transaction/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND usdtransaction_python_source\n  module.cpp\n  wrapNotice.cpp\n  wrapTransaction.cpp\n  wrapTransactionManager.cpp\n)\n\nadd_library(${USDTRANSACTION_PYTHON_LIBRARY_NAME}\n  SHARED\n    ${usdtransaction_python_source}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files with CMake\nDESCRIPTION: This snippet installs the header files defined in the `HEADERS` variable to a specific destination directory. The destination is constructed using `${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/ui`. This ensures that the header files are placed in the appropriate location within the install tree.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/ui/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${HEADERS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/ui\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options (MSVC)\nDESCRIPTION: This snippet disables the 4251 warning in MSVC, caused by exporting STL classes from UFE.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n    target_compile_options(${PROJECT_NAME}\n        PUBLIC\n            /wd4251\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing PDB files on Windows in CMake\nDESCRIPTION: This snippet installs the Program Database (PDB) files for the target on Windows, which are used for debugging.  The files are installed into the same plugin directory.  Installation is marked as OPTIONAL.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/plugin/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:${TARGET_NAME}> DESTINATION ${INSTALL_DIR_SUFFIX}/plugin OPTIONAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install Node Declaration Files\nDESCRIPTION: Installs the node declaration files to a specific destination under the libraries directory of the project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/MaterialXGenOgsXml/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${NODE_DECLARATIONS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/libraries/adsk/maya\n)\n```\n\n----------------------------------------\n\nTITLE: Promoting Header List\nDESCRIPTION: This snippet calls a custom CMake function `mayaUsd_promoteHeaderList` to handle the promotion of header files. This function is responsible for copying the header files into the appropriate include directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_promoteHeaderList( \n    HEADERS\n        ${HEADERS}\n    BASEDIR\n        ${PROJECT_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Define a Custom Composite Command in Python\nDESCRIPTION: This Python code defines a custom composite command that can be routed in MayaUSD. It uses the `OperationEditRouterContext` to route sub-commands to the correct layer, ensuring that all sub-commands are directed to the same destination layer, overriding individual routing settings. The `customOpName` is a unique identifier for the command.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/EditRouting.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nimport mayaUsd.lib\nimport ufe\n\nclass CustomCompositeCmd(ufe.CompositeUndoableCommand):\n    '''\n    Custom composite command that can be routed.\n    '''\n\n    customOpName = 'my studio name: custom operation name'\n\n    def __init__(self, prim, sceneItem):\n        super().__init__()\n        self._prim = prim\n        ctx = mayaUsd.lib.OperationEditRouterContext(self.customOpName, self._prim)\n        o3d = ufe.Object3d.object3d(sceneItem)\n        self.append(o3d.setVisibleCmd(False))\n\n    def execute(self):\n        ctx = mayaUsd.lib.OperationEditRouterContext(self.customOpName, self._prim)\n        super().execute()\n\n    def undo(self):\n        ctx = mayaUsd.lib.OperationEditRouterContext(self.customOpName, self._prim)\n        super().undo()\n\n    def redo(self):\n        ctx = mayaUsd.lib.OperationEditRouterContext(self.customOpName, self._prim)\n        super().redo()\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring Unit Tests in CMake\nDESCRIPTION: This CMake code iterates through the list of test script files, creates a test target for each script using `mayaUsd_get_unittest_target`, and adds a test using `mayaUsd_add_test`. It configures the test environment by setting the working directory and environment variables such as `MAYA_PLUG_IN_PATH`, `LD_LIBRARY_PATH`, and `LD_PRELOAD`. Finally, it adds a CTest label to facilitate test filtering.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/render/mayaToHydra/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(script ${TEST_SCRIPT_FILES})\n    mayaUsd_get_unittest_target(target ${script})\n    mayaUsd_add_test(${target}\n        INTERACTIVE\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        PYTHON_SCRIPT ${script}\n        ENV\n            \"MAYA_PLUG_IN_PATH=${CMAKE_INSTALL_PREFIX}/lib/maya\"\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n\n            # Maya uses a very old version of GLEW, so we need support for\n            # pre-loading a newer version from elsewhere.\n            \"LD_PRELOAD=${ADDITIONAL_LD_PRELOAD}\"\n    )\n\n    # Assign a CTest label to these tests for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS mtoh)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: AL_usdmaya File Export - MEL Example\nDESCRIPTION: This MEL command uses the `file` command to export a USD file with the `AL usdmaya export` type. It specifies the file path and export options. This approach is specific to the AL_USDMaya plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/MIGRATION_GUIDE.md#_snippet_11\n\nLANGUAGE: MEL\nCODE:\n```\nfile -force -typ \"AL usdmaya export\" -options \"....\" /path/to/out/file.usd\n```\n\n----------------------------------------\n\nTITLE: Conditional Compile Definitions Based on Variables in CMake\nDESCRIPTION: This snippet conditionally defines compile definitions based on the values of CMake variables such as MAYAUSD_VERSION and BUILD_LOOKDEVXUSD_LIBRARY. This allows for customizing the plugin's behavior based on the build environment.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/plugin/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(DEFINED MAYAUSD_VERSION)\n    target_compile_definitions(${TARGET_NAME}\n        PRIVATE\n            MAYAUSD_VERSION=${MAYAUSD_VERSION}\n    )\nendif()\n\nif(BUILD_LOOKDEVXUSD_LIBRARY)\n    target_compile_definitions(${TARGET_NAME}\n        PRIVATE\n            HAS_LOOKDEVXUSD=1\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing PlugInfo\nDESCRIPTION: This snippet configures the `plugInfo.json` file using CMake's `configure_file` command, replacing variables within the file. It then installs this configured file to a specific destination within the installation directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/schemas/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nfile(RELATIVE_PATH\n    SCHEMAS_LIBRARY_DIR\n    ${CMAKE_INSTALL_PREFIX}/lib/usd/${TARGET_NAME}/resources/..\n    ${CMAKE_INSTALL_PREFIX}/lib/\n)\n\nconfigure_file(\"plugInfo.json.in\" \"./plugInfo.json\" @ONLY)\nconfigure_file(\"${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\" .)\n```\n\n----------------------------------------\n\nTITLE: Install Header Files\nDESCRIPTION: Installs the header files to a specific destination under the include directory of the project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/MaterialXGenOgsXml/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${HEADERS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/render/MaterialXGenOgsXml\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Project and Disallowing LOCATION Property\nDESCRIPTION: Sets the project name to AL_USDMaya and disables the use of the LOCATION property for build targets if the CMake policy CMP0026 is defined.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(AL_USDMaya)\n\n# Disallow use of the LOCATION property for build targets\nif (POLICY CMP0026)\n    cmake_policy(SET CMP0026 OLD)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Inclusion based on New Prim Delete (Python)\nDESCRIPTION: This CMake snippet conditionally appends either `testDeleteCmd.py` or `testLegacyDeleteCmd.py` to the `TEST_SCRIPT_FILES` list depending on the value of the `MAYA_ENABLE_NEW_PRIM_DELETE` variable. This enables testing of either the new or legacy delete command implementation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/ufe/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(MAYA_ENABLE_NEW_PRIM_DELETE)\n    list(APPEND TEST_SCRIPT_FILES\n        testDeleteCmd.py\n    )\nelse()\n    list(APPEND TEST_SCRIPT_FILES\n        testLegacyDeleteCmd.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Target Sources in CMake\nDESCRIPTION: This CMake snippet defines the source files to be compiled for the specified target (${PROJECT_NAME}). It includes both `.cpp` and `.h` files related to the layer editor UI, dialogs, models, and utility functions. The PRIVATE keyword specifies that these sources are only used within the target itself.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/ui/layerEditor/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(${PROJECT_NAME}\n    PRIVATE\n        batchSaveLayersUIDelegate.cpp\n        dirtyLayersCountBadge.cpp\n        generatedIconButton.cpp\n        layerEditorWidget.cpp\n        layerEditorWidget.h\n        layerTreeItem.cpp\n        layerTreeItem.h\n        layerTreeItemDelegate.cpp\n        layerTreeItemDelegate.h\n        layerTreeModel.cpp\n        layerTreeModel.h\n        layerTreeView.cpp\n        layerTreeView.h\n        loadLayersDialog.cpp\n        loadLayersDialog.h\n        mayaCommandHook.cpp\n        mayaCommandHook.h\n        mayaLayerEditorWindow.cpp\n        mayaLayerEditorWindow.h\n        mayaSessionState.cpp\n        mayaSessionState.h\n        mayaQtUtils.cpp\n        mayaQtUtils.h\n        pathChecker.cpp\n        pathChecker.h\n        qtUtils.cpp\n        qtUtils.h\n        resources.qrc\n        saveLayersDialog.cpp\n        saveLayersDialog.h\n        sessionState.cpp\n        sessionState.h\n        stageSelectorWidget.cpp\n        stageSelectorWidget.h\n        stringResources.cpp\n        stringResources.h\n        warningDialogs.cpp\n        warningDialogs.h\n)\n```\n\n----------------------------------------\n\nTITLE: Promoting Headers CMake\nDESCRIPTION: Promotes the header files for the Maya USD project. `mayaUsd_promoteHeaderList` is a custom function that promotes the headers listed in `HEADERS` variable to the `sceneIndex` subdirectory. This step is crucial for making the plugin's headers accessible to other modules within the Maya USD ecosystem.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/sceneIndex/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_promoteHeaderList(HEADERS ${HEADERS} SUBDIR sceneIndex)\n```\n\n----------------------------------------\n\nTITLE: Generating Schemas\nDESCRIPTION: This snippet generates schemas using a Python script (`${USD_GENSCHEMA}`). It configures the schema.usda file, executes the Python script to generate the schemas, and checks for errors during the schema generation process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/schemas/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# Bake library name, tokens prefix and usd schemas path\nset(USD_SCHEMA_PATH usd/schema.usda)\nset(USDGEOM_SCHEMA_PATH usdGeom/schema.usda)\nconfigure_file (./schema.usda.in ./schema.usda)\nexecute_process(COMMAND\n                    ${Python_EXECUTABLE}\n                    ${USD_GENSCHEMA}\n                    ${CMAKE_CURRENT_BINARY_DIR}/schema.usda\n                    .\n                WORKING_DIRECTORY\n                    ${CMAKE_CURRENT_BINARY_DIR}\n                RESULT_VARIABLE\n                    usdgen_res\n)\nif(usdgen_res)\n    message(FATAL_ERROR \"Schemas generation failed\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Python Module Property\nDESCRIPTION: Configures a property specifically for Python modules. The details of set_python_module_property are not shown here but it likely sets up details for importing and linking the Python module.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/python/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset_python_module_property(${PYTHON_TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Search Paths\nDESCRIPTION: This snippet sets up runtime search paths for the `mayaUsd_Schemas` library on macOS and Linux. It uses a custom CMake function `mayaUsd_init_rpath` and `mayaUsd_add_rpath` to add various paths, including relative paths based on `MAYAUSD_TO_USD_RELATIVE_PATH` and absolute paths based on `PXR_USD_LOCATION`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/schemas/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX)\n    mayaUsd_init_rpath(rpath \"lib\")\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/lib\")\n    if(DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    elseif(DEFINED PXR_USD_LOCATION)\n        mayaUsd_add_rpath(rpath \"${PXR_USD_LOCATION}/lib\")\n    endif()\n    if(IS_LINUX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib64\")\n    endif()\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../Maya.app/Contents/MacOS\")\n    endif()\n    mayaUsd_install_rpath(rpath ${TARGET_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Teardown Mesh Translation from Maya to USD (Python)\nDESCRIPTION: This Python code snippet triggers the teardown of a specified prim's translation, writing any modifications made in Maya back to the current EditTarget (SessionLayer) in USD. It uses the `AL_usdmaya_TranslatePrim` command with the `tp` flag. Requires the `AL.usdmaya` and `AL.usd.schemas` modules.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/meshTranslation/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom AL import usdmaya\nfrom AL.usd import schemas\nstageCache = usdmaya.StageCache.Get()\nstage = stageCache.GetAllStages()[0]\n\n# Set the EditTarget to be the SessionLayer,\nstage.SetEditTarget(stage.GetSessionLayer())\n# Instead of using this select command you can pass the name of the proxy shape into -p\ncmds.select(cmds.listRelatives(cmds.ls(type=\"AL_usdmaya_ProxyShape\")[0], p=True))\n\n# trigger the teardown of the prim at the specified path\ncmds.AL_usdmaya_TranslatePrim(tp=\"/root/sphere\")\n\ncmds.select(clear=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Top-Level plugInfo.json in CMake\nDESCRIPTION: This CMake snippet generates and installs a top-level `plugInfo.json` file that includes the configured `plugInfo.json` from the resources directory. This ensures that Maya can find all necessary plugin information.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(CODE\n \"file(WRITE \\\"${CMAKE_CURRENT_BINARY_DIR}/lib/usd/plugInfo.json\\\" \\\"{\\n    \\\\\\\"Includes\\\\\\\": [ \\\\\\\"*/resources/\\\\\\\" ]\\n}\\\")\"\n)\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/lib/usd/plugInfo.json\n DESTINATION ${AL_INSTALL_PREFIX}/lib/usd\n)\n```\n\n----------------------------------------\n\nTITLE: Finding MaterialX Package\nDESCRIPTION: This snippet finds the MaterialX package if the `hdMtlx` target is available, indicating that MaterialX was built into USD. It also prints a message to the console if MaterialX is found.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET hdMtlx)\n    # MaterialX was built into USD. We need to know where to find MaterialX targets.\n    find_package(MaterialX REQUIRED)\n    if(TARGET MaterialXCore)\n        message(STATUS \"Found MaterialX\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending Public Headers to List CMake\nDESCRIPTION: Appends all the header lists (core, commands, file I/O, nodes, translators) to the AL_usdmaya_public_headers list. This creates a comprehensive list of all public headers for the library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND AL_usdmaya_public_headers\n        ${AL_usdmaya_headers}\n        ${AL_usdmaya_cmds_headers}\n        ${AL_usdmaya_fileio_headers}\n        ${AL_usdmaya_nodes_headers}\n        ${AL_usdmaya_fileio_translators_headers}\n)\n```\n\n----------------------------------------\n\nTITLE: Install XML Shader Fragments CMake\nDESCRIPTION: This snippet installs the shader fragment XML files listed in the `SHADERFRAGMENTS_XMLS` variable. These files are installed into the `${CMAKE_INSTALL_PREFIX}/lib/usd/mayaUsd_ShaderFragments/resources` directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/vp2ShaderFragments/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${SHADERFRAGMENTS_XMLS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/usd/mayaUsd_ShaderFragments/resources\n)\n```\n\n----------------------------------------\n\nTITLE: mayaUSD File Export - MEL Example\nDESCRIPTION: This MEL command uses the `file` command to export a USD file with the `USD Export` type. It specifies the file path and export options. This approach is used with the ADSK_USDMaya plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/MIGRATION_GUIDE.md#_snippet_15\n\nLANGUAGE: MEL\nCODE:\n```\nfile -force -typ \"USD Export\" -options \"....\" /path/to/out/file.usd\n```\n\n----------------------------------------\n\nTITLE: Defining Test Script Files with CMake\nDESCRIPTION: This snippet defines a CMake list of Python script files that will be used as unit tests for the Maya USD project. These tests will be executed in a non-interactive environment.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_SCRIPT_FILES\n    testMayaUsdConverter.py\n    testMayaUsdCreateStageCommands.py\n    testMayaUsdCreateStageInMayaRef.py\n    testMayaUsdDirtyScene.py\n    testMayaUsdLayerEditorCommands.py\n    testMayaUsdProxyAccessor.py\n    testMayaUsdCacheId.py\n    testMayaUsdInfoCommand.py\n    testMayaUsdSchemaCommand.py\n)\n```\n\n----------------------------------------\n\nTITLE: Installing General Library Icons\nDESCRIPTION: This CMake snippet installs general library icons.  It iterates through a list of icon base names (`LIB_ICONS`). Similar to the Outliner icons, the 100px version is installed and renamed to remove the '_100' suffix. The 150px and 200px versions are installed as is. The destination directory is `${CMAKE_INSTALL_PREFIX}/lib/icons`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/resources/icons/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB_ICONS\n    saveOption1\n    saveOption2\n    saveOption3\n    discard_edits\n    edit_as_Maya\n    merge_to_USD\n    cache_to_USD\n    orphaned_node_badge\n)\nforeach(ICON_BASE ${LIB_ICONS})\n    # The _100.png files need to be installed without the _100. This is the\n    # base icon name that is used. Maya will automatically choose the _150/_200\n    # image if neeeded.\n    install(FILES \"${ICON_BASE}_100.png\"\n        DESTINATION \"${CMAKE_INSTALL_PREFIX}/lib/icons\"\n        RENAME \"${ICON_BASE}.png\"\n    )\n    install(FILES \"${ICON_BASE}_150.png\" \"${ICON_BASE}_200.png\"\n        DESTINATION \"${CMAKE_INSTALL_PREFIX}/lib/icons\"\n    )\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Installing Library\nDESCRIPTION: This snippet configures the installation of the library, specifying the destination directory for the library and associated files. It installs the library targets to the specified `CMAKE_INSTALL_PREFIX` location and conditionally installs PDB files on Windows.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/lookdevXUsd/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${PROJECT_NAME}\n    LIBRARY\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib\n    ARCHIVE\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib\n    RUNTIME\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib\n)\n\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:${PROJECT_NAME}> \n        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib OPTIONAL\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: This CMake snippet sets the include directories for the `TRANSLATORS_PACKAGE` library, allowing the compiler to find necessary header files. The paths include `../schemas` and `../lib/AL_USDMaya`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(\n    ${TRANSLATORS_PACKAGE}\n    PUBLIC\n    ../schemas\n    ../lib/AL_USDMaya\n)\n```\n\n----------------------------------------\n\nTITLE: Including Utility Modules\nDESCRIPTION: This snippet includes custom utility modules and finds the Maya package if the `BUILD_MAYAUSD_LIBRARY` option is enabled. These utility modules contain helpful functions and macros used throughout the build process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(cmake/utils.cmake)\nif (BUILD_MAYAUSD_LIBRARY)\n    find_package(Maya 2022 REQUIRED)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Exporting a Schema API (Python)\nDESCRIPTION: This snippet shows how to export a Maya scene with the GeomModelAPI applied to a sphere, using the `apiSchema` export option to explicitly specify the schema APIs to export.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Export: \ncmds.mayaUSDExport(mergeTransformAndShape=True, file=\"geom_api_on_sphere.usda\", apiSchema=[\"GeomModelAPI\"])\n```\n\n----------------------------------------\n\nTITLE: Installing Target Files using CMake\nDESCRIPTION: This CMake snippet installs the built target `${PROJECT_NAME}`. It specifies the destination for the library, archive and runtime components of the target, all set to `${MAYAUSDUI_INSTALL_PATH}`. It also handles the installation of PDB files on Windows, if available.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/ui/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n    TARGETS ${PROJECT_NAME}\n    LIBRARY\n        DESTINATION ${MAYAUSDUI_INSTALL_PATH}\n    ARCHIVE\n        DESTINATION ${MAYAUSDUI_INSTALL_PATH}\n    RUNTIME\n        DESTINATION ${MAYAUSDUI_INSTALL_PATH}\n)\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:${PROJECT_NAME}> \n        DESTINATION ${MAYAUSDUI_INSTALL_PATH} OPTIONAL\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Paths (CMake)\nDESCRIPTION: This snippet sets the installation paths for resources, libraries, and Python bindings using the `set` command. It defines where the compiled artifacts will be placed during the installation process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/mayatest/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(\n    resources_install_path\n    ${AL_INSTALL_PREFIX}/lib/usd/AL_USDMayaSchemasTest/resources\n)\n\nset(\n    library_install_path\n    ${AL_INSTALL_PREFIX}/lib\n)\n\nset(\n    bindings_install_path\n    ${AL_INSTALL_PREFIX}/lib/python/AL/usd/schemas/mayatest\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Install Message\nDESCRIPTION: This snippet configures CMake to avoid noisy install messages during the installation process. It sets the `CMAKE_INSTALL_MESSAGE` variable to \"NEVER\".\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_MESSAGE \"NEVER\")\n```\n\n----------------------------------------\n\nTITLE: Handling Run-Time Search Paths in CMake\nDESCRIPTION: This CMake snippet configures run-time search paths for the library on macOS and Linux. It uses `mayaUsd_init_rpath` and `mayaUsd_add_rpath` to specify the paths where the library should look for dependencies at runtime.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX) \n    mayaUsd_init_rpath(rpath \"lib\")\n    mayaUsd_add_rpath(rpath \"../lib\")\n    if(DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    elseif(DEFINED PXR_USD_LOCATION)\n        mayaUsd_add_rpath(rpath \"${PXR_USD_LOCATION}/lib\")\n    endif()\n    if (IS_LINUX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib64\")\n    endif()\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../../../Maya.app/Contents/MacOS\")\n    endif()\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/lib\")\n    mayaUsd_install_rpath(rpath ${TRANSLATORS_PACKAGE})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Inclusion based on UFE Preview Features (Python)\nDESCRIPTION: This CMake snippet conditionally appends `testBatchOpsHandler.py` to the `TEST_SCRIPT_FILES` list if the `v4_BatchOps` is in the `UFE_PREVIEW_FEATURES` list. This includes tests that are part of the UFE preview features.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/ufe/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif (v4_BatchOps IN_LIST UFE_PREVIEW_FEATURES)\n    list(APPEND TEST_SCRIPT_FILES\n        testBatchOpsHandler.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake\nDESCRIPTION: This CMake snippet uses the `add_subdirectory` command to include specified subdirectories. The `add_subdirectory` command adds the specified source directory to the build. It also adds a dependency to the target defined by the CMakeLists.txt file in the source directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/resources/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(ae)\nadd_subdirectory(helpTable)\nadd_subdirectory(icons)\nadd_subdirectory(scripts)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake\nDESCRIPTION: This snippet adds several subdirectories to the CMake project. These subdirectories likely contain source code and CMakeLists.txt files for different components of the Maya-USD project, such as rendering and shader functionalities.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(px_vp20)\nadd_subdirectory(pxrUsdMayaGL)\nadd_subDirectory(vp2ComputeShaders)\nadd_subdirectory(vp2RenderDelegate)\nadd_subdirectory(vp2ShaderFragments)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet specifies the include directories for the target, including GTest include directories and MAYATEST_INCLUDE_LOCATION.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/tests/mayaplugintest/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${TARGET_NAME}\n  PRIVATE\n      ${GTEST_INCLUDE_DIRS}\n      ${MAYATEST_INCLUDE_LOCATION}\n)\n```\n\n----------------------------------------\n\nTITLE: Concrete Sub-Commands in Python\nDESCRIPTION: This Python code shows examples of concrete sub-commands (`FirstConcreteCommand`, `SecondConcreteCommand`) inheriting from the `_BaseCommand` class. These sub-commands define the `commandName` and are registered with Maya. The `registerCommands` and `deregisterCommands` functions handle registering and deregistering these commands with a Maya plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/undo/README-Nice-Undo.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nclass FirstConcreteCommand(_BaseCommand):\n    commandName = 'NiceComprehensibleName'\n    def __init__(self):\n        super().__init__()\n\n\nclass SecondConcreteCommand(_BaseCommand):\n    commandName = 'AnotherNiceName'\n    def __init__(self):\n        super().__init__()\n\n_allCommandClasses = [\n    FirstConcreteCommand,\n    SecondConcreteCommand,\n]\n\ndef registerCommands(pluginName):\n    plugin = MFnPlugin.findPlugin(pluginName)\n    if not plugin:\n        MGlobal.displayWarning('Cannot register commands')\n        return\n    \n    plugin = MFnPlugin(plugin)\n    \n    for cls in _allCommandClasses:\n        try:\n            plugin.registerCommand(cls.commandName, cls.creator, cls.createSyntax) \n        except Exception as ex:\n            print(ex)\n\n\ndef deregisterCommands(pluginName):\n    plugin = MFnPlugin.findPlugin(pluginName)\n    if not plugin:\n        MGlobal.displayWarning('Cannot deregister commands')\n        return\n    \n    plugin = MFnPlugin(plugin)\n    \n    for cls in _allCommandClasses:\n        try:\n            plugin.deregisterCommand(cls.commandName) \n        except Exception as ex:\n            print(ex)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project. It ensures that the CMake version used is compatible with the project's configuration.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13...3.17)\n```\n\n----------------------------------------\n\nTITLE: Installing plugInfo.json resources for MayaUSD\nDESCRIPTION: This snippet installs the generated plugInfo.json file into the resources directory for the plugin package. This allows Maya to locate the resource files associated with the plugin. ${PXR_TRANSLATORS_PACKAGE} is used to create the correct resource path within the plugin directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/pxrUsdTranslators/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\n DESTINATION ${AL_INSTALL_PREFIX}/plugin/${PXR_TRANSLATORS_PACKAGE}/resources\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Files with CMake\nDESCRIPTION: This CMake snippet installs the header files and the configured `mayaUsd.h` file to specific locations within the installation directory. The `install` command is used to copy the files to the destination directories specified by `CMAKE_INSTALL_PREFIX` and `${PROJECT_NAME}`. The header files are installed in the `${PROJECT_NAME}/base` subdirectory, while `mayaUsd.h` is installed in the `${PROJECT_NAME}` directory.  `CMAKE_BINARY_DIR` holds the path to the build directory where the configured header file is.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/base/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES ${HEADERS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/base\n)\n\ninstall(FILES ${CMAKE_BINARY_DIR}/include/mayaUsd/mayaUsd.h\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet specifies the include directories required to compile the project. The `target_include_directories` command adds these directories to the include search path for the compiler. It includes directories for PXR, UFE, LookdevXUfe and a binary include directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/lookdevXUsd/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${PROJECT_NAME} \n    PUBLIC\n        ${PXR_INCLUDE_DIRS}\n        ${UFE_INCLUDE_DIR}\n        ${LookdevXUfe_INCLUDE_DIR}\n        ${CMAKE_BINARY_DIR}/include\n)\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory for Tests (CMake)\nDESCRIPTION: This snippet adds a subdirectory named `py` to the build process, presumably containing additional Python-based tests. This allows for organizing and managing a larger suite of unit tests for the plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaTestPlugin/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT SKIP_USDMAYA_TESTS)\n    add_subdirectory(py)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Tests (Standard Surface)\nDESCRIPTION: This snippet iterates through the list of Standard Surface test scripts and configures each one as a unit test. It sets environment variables for the test execution, including paths to Maya plugins and libraries.  It also sets a CTest label for filtering.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/render/vp2RenderDelegate/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(script ${TEST_SCRIPT_FILES_STANDARDSURFACE})\n    mayaUsd_get_unittest_target(target ${script})\n    mayaUsd_add_test(${target}\n        INTERACTIVE\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        PYTHON_SCRIPT ${script}\n        ENV\n            \"MAYA_PLUG_IN_PATH=${CMAKE_INSTALL_PREFIX}/lib/maya\"\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n            \"MAYA_LIGHTAPI_VERSION=${MAYA_LIGHTAPI_VERSION}\"\n\n            # Maya uses a very old version of GLEW, so we need support for\n            # pre-loading a newer version from elsewhere.\n            \"LD_PRELOAD=${ADDITIONAL_LD_PRELOAD}\"\n\n            # Used in detecting whether there is support for volume light gizmos\n            \"UFE_VOLUME_LIGHTS_SUPPORT=${UFE_VOLUME_LIGHTS_SUPPORT}\"\n    )\n\n    # Assign a CTest label to these tests for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS vp2RenderDelegate)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Sources\nDESCRIPTION: This snippet defines the source files to be included in the ${PROJECT_NAME} target. The PRIVATE keyword indicates that these sources are only used within this target and are not exposed to other targets that link against it.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(${PROJECT_NAME}\n    PRIVATE\n        Global.cpp\n        SetVariantSelectionCommand.cpp\n        StagesSubject.cpp\n        UfeNotifGuard.cpp\n        UsdAttribute.cpp\n        UsdAttributeHolder.cpp\n        UsdAttributes.cpp\n        UsdAttributesHandler.cpp\n        UsdCamera.cpp\n        UsdCameraHandler.cpp\n        UsdContextOps.cpp\n        UsdContextOpsHandler.cpp\n        UsdHierarchy.cpp\n        UsdHierarchyHandler.cpp\n        UsdObject3d.cpp\n        UsdObject3dHandler.cpp\n        UsdRootChildHierarchy.cpp\n        UsdSceneItem.cpp\n        UsdUIInfoHandler.cpp\n        UsdUndoAddNewPrimCommand.cpp\n        UsdUndoAddPayloadCommand.cpp\n        UsdUndoAddRefOrPayloadCommand.cpp\n        UsdUndoAddReferenceCommand.cpp\n        UsdUndoClearPayloadsCommand.cpp\n        UsdUndoClearReferencesCommand.cpp\n        UsdUndoCreateGroupCommand.cpp\n        UsdUndoInsertChildCommand.cpp\n        UsdUndoLongDurationCommand.cpp\n        UsdUndoPayloadCommand.cpp\n        UsdUndoReloadRefCommand.cpp\n        UsdUndoReorderCommand.cpp\n        UsdUndoSelectAfterCommand.cpp\n        UsdUndoSetKindCommand.cpp\n        UsdUndoToggleActiveCommand.cpp\n        UsdUndoToggleInstanceableCommand.cpp\n        UsdUndoVisibleCommand.cpp\n        UsdUndoSetDefaultPrimCommand.cpp\n        UsdUndoClearDefaultPrimCommand.cpp\n        UsdUndoableCommand.cpp\n        Utils.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Restoring the Default Edit Router in Python\nDESCRIPTION: This Python code snippet demonstrates how to restore the default edit router for a specific operation using the `mayaUsd.lib.restoreDefaultEditRouter` function.  In this case, it restores the default edit router for 'visibility' operations, effectively disabling any custom routing previously set for visibility.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/EditRouting.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport mayaUsd.lib\nmayaUsd.lib.restoreDefaultEditRouter('visibility')\n\n```\n\n----------------------------------------\n\nTITLE: Appending FileIO Headers to List CMake\nDESCRIPTION: Appends a list of header files related to file I/O operations in AL_USDMaya to the AL_usdmaya_fileio_headers list. These headers define interfaces for animation translation, exporting, importing, and node factory operations.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND AL_usdmaya_fileio_headers\n        AL/usdmaya/fileio/AnimationTranslator.h\n        AL/usdmaya/fileio/Export.h\n        AL/usdmaya/fileio/ExportParams.h\n        AL/usdmaya/fileio/ExportTranslator.h\n        AL/usdmaya/fileio/Import.h\n        AL/usdmaya/fileio/ImportParams.h\n        AL/usdmaya/fileio/ImportTranslator.h\n        AL/usdmaya/fileio/NodeFactory.h\n        AL/usdmaya/fileio/SchemaPrims.h\n        AL/usdmaya/fileio/TransformIterator.h\n)\n```\n\n----------------------------------------\n\nTITLE: Append Versioned Node GLSL Implementations\nDESCRIPTION: Appends versioned GLSL implementations for nodes to a list. These implementations are specific to certain MaterialX versions and include utility functions and color transformations.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/MaterialXGenOgsXml/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND NODE_GLSL_IMPLEMENTATIONS_VERSIONED\n    libraries/usd_utilities_genglsl_impl.mtlx\n    libraries/mx_srgb_texture_to_aces_2065_1_color3.glsl\n    libraries/mx_srgb_texture_to_aces_2065_1_color4.glsl\n    libraries/mx_srgb_texture_to_acescg_color3.glsl\n    libraries/mx_srgb_texture_to_acescg_color4.glsl\n    libraries/mx_srgb_texture_to_lin_dci_p3_d65_color3.glsl\n    libraries/mx_srgb_texture_to_lin_dci_p3_d65_color4.glsl\n    libraries/mx_srgb_texture_to_linrec2020_color3.glsl\n    libraries/mx_srgb_texture_to_linrec2020_color4.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Maya-USD\nDESCRIPTION: This snippet links libraries to the mayaUsd project, including usd, maya, ufe libraries and their dependencies.  It also handles MaterialX conditional linking.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${PROJECT_NAME}\n    PUBLIC\n        ar\n        gf\n        hd\n        hdx\n        js\n        kind\n        plug\n        sdf\n        tf\n        trace\n        usd\n        usdGeom\n        usdImaging\n        usdImagingGL\n        usdLux\n        usdRender\n        usdRi\n        usdShade\n        usdSkel\n        usdUtils\n        usdUI\n        vt\n        ${UFE_LIBRARY}\n        ${MAYA_LIBRARIES}\n        usdUfe\n        $<$<BOOL:$<VERSION_GREATER_EQUAL:${USD_VERSION},0.24.11>>:Boost::headers>\n    PRIVATE\n        ghc_filesystem\n        $<$<BOOL:${CMAKE_WANT_MATERIALX_BUILD}>:hdMtlx>\n        $<$<BOOL:${CMAKE_WANT_MATERIALX_BUILD}>:MaterialXCore>\n        $<$<BOOL:${CMAKE_WANT_MATERIALX_BUILD}>:MaterialXFormat>\n        $<$<BOOL:${CMAKE_WANT_MATERIALX_BUILD}>:MaterialXRender>\n        $<$<BOOL:${CMAKE_WANT_MATERIALX_BUILD}>:MaterialXGenShader>\n        $<$<BOOL:${CMAKE_WANT_MATERIALX_BUILD}>:MaterialXGenGlsl>\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files for mayaUsd_Schemas\nDESCRIPTION: This snippet specifies the source files required to build the `mayaUsd_Schemas` library. It uses the `target_sources` command with the `PRIVATE` scope to indicate that these sources are only used for building this specific target.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/schemas/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${TARGET_NAME} \n    PRIVATE\n        ALMayaReference.cpp\n        MayaReference.cpp\n        ModuleDeps.cpp\n        tokens.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries in CMake\nDESCRIPTION: This snippet links the 'mayaUsdPlugin' library against other libraries. The UFE_LIBRARY and basePxrUsdPreviewSurface libraries are linked privately. Depending on whether Qt is found, either mayaUsdUI or mayaUsd is linked.  Platform-specific linking is also handled here.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/plugin/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${TARGET_NAME}\n    PRIVATE\n        ${UFE_LIBRARY}\n        basePxrUsdPreviewSurface\n)\n\nif (Qt_FOUND)\n    target_link_libraries(${TARGET_NAME}\n        PRIVATE\n            mayaUsdUI\n    )\nelse()\n    target_link_libraries(${TARGET_NAME}\n        PRIVATE\n            mayaUsd\n    )\nendif()\n\n# The mayaUsd plugin does need the mayaUsdAPI library. However, other plugins that\n# depend on it have no way of locating it currently at runtime, so it has to be\n# preloaded.\nif(IS_MACOSX OR IS_LINUX)\n    target_link_libraries(${TARGET_NAME}\n        PRIVATE\n            mayaUsdAPI\n    )\nendif()\n\n# For initializing the handlers of lookdevXUsd\nif (BUILD_LOOKDEVXUSD_LIBRARY)\n    target_link_libraries(${TARGET_NAME}\n        PRIVATE\n            lookdevXUsd\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add and Remove Items from Context for TearDown\nDESCRIPTION: Adds a Maya object (created during import) to the context's item storage. This object can then be automatically removed during the TearDown phase, ensuring clean-up of temporary Maya nodes. This uses insertItem during Import and removerItems during teardown.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/AL/usdmaya/fileio/translators/README.md#_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nGetContext()->AddPrim(usdPrim, mayaObject);\n\nMFnDependencyNode fn;\nMObject newObj = fn.create(\"myCustomNodeType\");\nGetContext()->insertItem(usdPrim.GetPath(), newObj);\n```\n\nLANGUAGE: c++\nCODE:\n```\nGetContext()->removerItems(primPath);\n```\n\n----------------------------------------\n\nTITLE: Defining Target Sources CMake\nDESCRIPTION: Defines the source files used for the project.  `target_sources` specifies the private source files for the project `${PROJECT_NAME}`, which includes `proxyShapeSceneIndexPlugin.cpp`. This ensures that the specified cpp file is compiled and linked into the target.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/sceneIndex/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        proxyShapeSceneIndexPlugin.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Add Python Library\nDESCRIPTION: Adds a shared library target for the Python extension module. SHARED indicates that this is a dynamically linked library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/python/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(${PYTHON_TARGET_NAME} SHARED)\n```\n\n----------------------------------------\n\nTITLE: Building Maya USD with build.py (MacOS Example)\nDESCRIPTION: This snippet demonstrates the use of the build.py script on a macOS system. It provides example arguments for specifying the locations of Maya, Pixar USD, the Maya Devkit, and the workspace directory. The script compiles and installs the necessary libraries and plugins.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/build.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n➜ maya-usd python build.py --maya-location /Applications/Autodesk/maya2025 --pxrusd-location /opt/local/USD-Release --devkit-location /opt/local/devkitBase /opt/local/workspace\n```\n\n----------------------------------------\n\nTITLE: Installing Library (CMake)\nDESCRIPTION: Installs the compiled library to the specified destination directory.  It handles installing both the library itself and, on Windows, the associated PDB file.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${MAYAUTILS_LIBRARY_NAME}\n    LIBRARY\n    DESTINATION ${MAYAUTILS_LIBRARY_LOCATION}\n    RUNTIME\n    DESTINATION ${MAYAUTILS_LIBRARY_LOCATION}\n)\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:${MAYAUTILS_LIBRARY_NAME}> DESTINATION ${MAYAUTILS_LIBRARY_LOCATION} OPTIONAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Target and Adding Sources (usdTestInfoImportChaser)\nDESCRIPTION: Defines the CMake target `usdTestInfoImportChaser` as a shared library and specifies its source files (`plugin.cpp`, `infoImportChaser.cpp`).\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(TARGET_NAME usdTestInfoImportChaser)\nadd_library(${TARGET_NAME} SHARED)\n\n# -----------------------------------------------------------------------------\n# sources\n# -----------------------------------------------------------------------------\ntarget_sources(${TARGET_NAME}\n    PRIVATE\n        plugin.cpp\n        infoImportChaser.cpp\n)\nmayaUsd_compile_config(${TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Minimal Schema API Exporter in Python\nDESCRIPTION: This code defines a minimal `BarebonesSchemaApiExporter` class. It includes `CanAdaptForExport` which determines if data is available for export, and `CopyToPrim` which handles the actual data transfer from Maya to USD. It's crucial to only write attributes that belong to the target schema.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass BarebonesSchemaApiExporter(mayaUsdLib.SchemaApiAdaptor):\n    def CanAdaptForExport(self, jobArgs):\n        \"\"\"Can always export if the data is there (or can be found nearby).\"\"\"\n        return _ContainsExportableDataForApi(self.mayaObject)\n\n    def CopyToPrim(self, prim, usdTime, valueWriter):\n        \"\"\"Barebones export callback. You have the Maya object and the USD prim,\n        and all latitude to edit the USD prim at will. Please resist the\n        temptation to write attributes that are not part of the schema.\"\"\"\n\n        # expect to be called at default time and once per sample time if\n        # exporting animation.\n\n        return True\n```\n\n----------------------------------------\n\nTITLE: Adding Tests Subdirectory CMake\nDESCRIPTION: This snippet conditionally adds the `tests` subdirectory to the build process if the `SKIP_USDMAYA_TESTS` variable is not set. This allows for running unit tests or integration tests as part of the build.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/maya/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT SKIP_USDMAYA_TESTS)\n    add_subdirectory(tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Maya-USD Unit Tests with CMake\nDESCRIPTION: This snippet iterates through the list of test script files and uses the `mayaUsd_get_unittest_target` and `mayaUsd_add_test` CMake functions to create and add each test. It also sets environment variables for each test and adds a ctest label for filtering.  It relies on custom CMake functions defined elsewhere (`mayaUsd_get_unittest_target`, `mayaUsd_add_test`).\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/fileio/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(script ${TEST_SCRIPT_FILES})\n    mayaUsd_get_unittest_target(target ${script})\n    mayaUsd_add_test(${target}\n        PYTHON_MODULE ${target}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        ENV\n            \"USD_FORCE_DEFAULT_MATERIALS_SCOPE_NAME=1\"\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n    )\n\n    # Add a ctest label to these tests for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS fileio)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Write PlugInfo JSON CMake\nDESCRIPTION: Writes a plugInfo.json file containing include paths to the build directory. This ensures correct inclusion of resources.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(CODE\n    \"file(WRITE \\\"${CMAKE_CURRENT_BINARY_DIR}/lib/usd/plugInfo.json\\\" \\\"{\\n    \\\\\\\"Includes\\\\\\\": [ \\\\\\\"*/resources/\\\\\\\" ]\\n}\\\")\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Program Database File (PDB) on Windows\nDESCRIPTION: This snippet conditionally installs the program database file (PDB) associated with the usdUfe library on Windows. The PDB file is used for debugging and is installed to the 'lib' directory within the CMAKE_INSTALL_PREFIX. The installation is marked as optional.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:${PROJECT_NAME}> \n        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib OPTIONAL\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories to the Build\nDESCRIPTION: This snippet adds several subdirectories to the build process. These subdirectories likely contain source code and CMakeLists.txt files for different modules or components of the usdUfe project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(base)\nadd_subdirectory(python)\nadd_subdirectory(resources)\nadd_subdirectory(ufe)\nadd_subdirectory(undo)\nadd_subdirectory(utils)\n```\n\n----------------------------------------\n\nTITLE: Cloning and Preparing the Repository\nDESCRIPTION: These shell commands clone the AL_USDMaya repository, create a build directory, and navigate into it, preparing the environment for the build process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/build.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone <git_path_to_AL_UsdMaya>\ncd AL_USDMaya\nmkdir build\ncd build\n```\n\n----------------------------------------\n\nTITLE: Setting Site-Specific Defaults for MayaUSD Export\nDESCRIPTION: This JSON configuration demonstrates how to set site-specific defaults for the MayaUSDExportCommand by modifying the plugInfo.json file of a custom plugin. This includes settings for exportMaterialCollections, chaser, and chaserArgs.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/commands/Readme.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"Plugins\": [\n    {\n      \"Info\": {\n        \"UsdMaya\": {\n            \"UsdExport\": {\n              \"exportMaterialCollections\": true,\n              \"chaser\": [\"alembic\"],\n              \"chaserArgs\": [\n                  [\"alembic\", \"primvarprefix\", \"ABC_,ABC2_=customPrefix_,ABC3_=,ABC4_=customNamespace:\"],\n                  [\"alembic\", \"attrprefix\", \"ABC_,ABC2_=customPrefix_,ABC3_=,ABC4_=customNamespace:\"]\n              ]\n          }\n        }\n      },\n      \"Name\": \"MySiteSpecificConfigPlugin\",\n      \"Type\": \"resource\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Packages CMake\nDESCRIPTION: This snippet configures the Python package structure. It copies the `__init__.py` file to the appropriate directory in the build tree. Then, it iterates through the folder hierarchy (`AL/usd/schemas/maya`) and creates `__init__.py` files in each directory except the terminal one to ensure proper namespace handling for the Python package.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/maya/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# configure_file has a nice feature where it will copy the __init__ file over when it gets modified, unlike file(COPY ...)\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/__init__.py ${CMAKE_BINARY_DIR}/AL/usd/schemas/maya/__init__.py COPYONLY)\n\nstring(REPLACE \"/\" \";\" folderHierarchy \"AL/usd/schemas/maya\")\n\nlist(LENGTH folderHierarchy listCount)\nmath(EXPR listMaxIndex \"${listCount}-1\")\n\n# Install an __init__ file for all folders except for the terminal folder which uses the checked in\n# __init__ file.\nif(${listCount} STRGREATER 1)\n    set(currentPath \"\")\n    foreach(i RANGE 0 ${listMaxIndex})\n      if(${i} STREQUAL ${listMaxIndex})\n        break()#we are at the last folder, we will use the checked in __init__.py for this folder.\n      endif()\n      set(currentFolder \"\")\n      list(GET folderHierarchy ${i} currentFolder)\n      list(APPEND currentPath ${currentFolder})\n\n      string(REPLACE \";\" \"/\" currentPath \"${currentPath}\")\n      file(WRITE\n        ${CMAKE_BINARY_DIR}/${currentPath}/__init__.py\n        \"try:\\n\\t__import__('pkg_resources').declare_namespace(__name__)\\nexcept:\\n\\tfrom pkgutil import extend_path\\n\\t__path__ = extend_path(__path__, __name__)\\n\"\n      )\n    endforeach(i)\nendif()\n\ninstall(\n    DIRECTORY\n        ${CMAKE_BINARY_DIR}/AL\n    DESTINATION\n        ${AL_INSTALL_PREFIX}/lib/python\n)\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectories to Build CMake\nDESCRIPTION: This snippet adds subdirectories to the build process. Each subdirectory contains specific components of the Autodesk Maya USD plugin, such as icons, the plugin binary, and supporting scripts.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(icons)\nadd_subdirectory(plugin)\nadd_subdirectory(scripts)\n```\n\n----------------------------------------\n\nTITLE: Defining Library and Version in CMake\nDESCRIPTION: This snippet defines the usdUfe project name, includes version information from an external file, and sets the project version based on the included version components. It also creates a shared library with the defined project name.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(usdUfe)\n\ninclude(usdUfe_version.info)\nset(USDUFE_VERSION \"${USDUFE_MAJOR_VERSION}.${USDUFE_MINOR_VERSION}.${USDUFE_PATCH_LEVEL}\")\n\nadd_library(${PROJECT_NAME} SHARED)\n```\n\n----------------------------------------\n\nTITLE: Adding Maya Reference Test with CMake\nDESCRIPTION: This snippet adds a test for adding Maya references, conditional on `CMAKE_UFE_V3_FEATURES_AVAILABLE`. The test's environment variables include `HAS_ORPHANED_NODES_MANAGER` if `UFE_TRIE_NODE_HAS_CHILDREN_COMPONENTS_ACCESSOR` is set.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/fileio/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_UFE_V3_FEATURES_AVAILABLE)\n    mayaUsd_get_unittest_target(target testAddMayaReference.py)\n\n    if(UFE_TRIE_NODE_HAS_CHILDREN_COMPONENTS_ACCESSOR)\n        mayaUsd_add_test(${target}\n            PYTHON_MODULE ${target}\n            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n            ENV\n                \"HAS_ORPHANED_NODES_MANAGER=1\"\n                \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n        )\n    else()\n        mayaUsd_add_test(${target}\n            PYTHON_MODULE ${target}\n            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n            ENV\n                \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n        )\n    endif()\n\n    # Add a ctest label for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS fileio)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Get Direct Selectability Value of Prim (Python)\nDESCRIPTION: This snippet retrieves the direct selectability metadata value of a prim using the `ModelAPI::GetSelectability` method and prints the value. This returns the explicitly set selectability, not the computed one.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/selectability/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprint \"The Cone's selectability metadata value is '{}'\".format(cubeApi.GetSelectability())\n```\n\n----------------------------------------\n\nTITLE: Target Sources Configuration (CMake)\nDESCRIPTION: This snippet configures the target sources for the ${PROJECT_NAME} library, specifying which C++ files should be compiled and linked into the target. The PRIVATE keyword indicates that these sources are only used internally by the target.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/translators/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        skelBindingsProcessor.cpp\n        translatorBlendShape.cpp\n        translatorCamera.cpp\n        translatorCurves.cpp\n        translatorGprim.cpp\n        translatorLight.cpp\n        translatorMaterial.cpp\n        translatorMayaReference.cpp\n        translatorMesh.cpp\n        translatorNurbsPatch.cpp\n        translatorPrim.cpp\n        translatorRfMLight.cpp\n        translatorRfMLightDeprecated.cpp\n        translatorSkel.cpp\n        translatorUtil.cpp\n        translatorXformable.cpp\n        translatorXformableDecompose.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Definitions (CMake)\nDESCRIPTION: Sets compiler definitions, including platform-specific flags (OSMac_ for macOS) and standard math definitions (_USE_MATH_DEFINES).  These definitions are used during the compilation process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/tutorials/import-export-plugin-c++/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${TARGET_NAME}\n    PRIVATE\n        $<$<BOOL:${IS_MACOSX}>:OSMac_>\n        _USE_MATH_DEFINES\n)\n```\n\n----------------------------------------\n\nTITLE: Set Target Sources CMake\nDESCRIPTION: This snippet defines the source files to be compiled for the ${PROJECT_NAME} target. It lists all the .cpp files required for the render delegate's functionality.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/vp2RenderDelegate/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        basisCurves.cpp\n        bboxGeom.cpp\n        debugCodes.cpp\n        drawItem.cpp\n        extComputation.cpp\n        instancer.cpp\n        material.cpp\n        mayaPrimCommon.cpp\n        mesh.cpp\n        meshViewportCompute.cpp\n        points.cpp\n        proxyRenderDelegate.cpp\n        colorManagementPreferences.cpp\n        renderDelegate.cpp\n        renderParam.cpp\n        sampler.cpp\n        shader.cpp\n        tokens.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Python Unit Test (Embedded String)\nDESCRIPTION: This is the embedded python code that gets executed as part of the unit test. It loads the plugin into Maya, then executes the unit test harness function and exits. The standard output of the harness will be captured as the test result.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaTestPlugin/CMakeLists.txt#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport maya.cmds\nmaya.cmds.loadPlugin('AL_USDMayaTestPlugin')\nsys.exit(maya.cmds.AL_maya_test_UnitTestHarness())\n```\n\n----------------------------------------\n\nTITLE: Conditional Compile Definitions based on Maya Light API version\nDESCRIPTION: Defines the MAYA_LIGHTAPI_VERSION_2 compile definition when the MAYA_LIGHTAPI_VERSION is greater than or equal to 2.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (MAYA_LIGHTAPI_VERSION GREATER_EQUAL 2)\n    target_compile_definitions(${PROJECT_NAME}\n        PRIVATE\n            MAYA_LIGHTAPI_VERSION_2=${MAYA_LIGHTAPI_VERSION}\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Python Init Files CMake\nDESCRIPTION: Sets the PY_INIT_FILES variable to a list of Python initialization files. These files are essential for packaging the Python module associated with the AL_USDTransaction library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(PY_INIT_FILES\n  ${CMAKE_CURRENT_SOURCE_DIR}/AL/__init__.py\n  ${CMAKE_CURRENT_SOURCE_DIR}/AL/usd/__init__.py\n  ${CMAKE_CURRENT_SOURCE_DIR}/AL/usd/transaction/__init__.py\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files CMake\nDESCRIPTION: This code block sets a list of header files to be included in the build. These headers define the interfaces and data structures used by the source files. The list command is used conditionally to append to the HEADERS variable if the CMAKE_UFE_V4_FEATURES_AVAILABLE variable is set.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/trf/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    UsdPointInstanceModifierBase.h\n    UsdPointInstanceOrientationModifier.h\n    UsdPointInstancePositionModifier.h\n    UsdPointInstanceScaleModifier.h\n    UsdPointInstanceUndoableCommands.h\n    UsdRotateUndoableCommand.h\n    UsdScaleUndoableCommand.h\n    UsdSetXformOpUndoableCommandBase.h\n    UsdTransform3dBase.h\n    UsdTransform3dCommonAPI.h\n    UsdTransform3dMatrixOp.h\n    UsdTransform3dPointInstance.h\n    UsdTransform3dReadImpl.h\n    UsdTransform3dSetObjectMatrix.h\n    UsdTransform3dUndoableCommands.h\n    UsdTranslateUndoableCommand.h\n    UsdTRSUndoableCommandBase.h\n    XformOpUtils.h\n)\n\nif(CMAKE_UFE_V4_FEATURES_AVAILABLE)\n    list(APPEND HEADERS\n        UsdTransform3dRead.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Querying Invisible Faces in USD\nDESCRIPTION: This snippet shows how to query for invisible faces (polygon holes) in USD using `UsdGeomMesh::GetHoleIndicesAttr()`. It retrieves an array of indices that indicate which faces are tagged as invisible, representing polygon holes defined in Maya using the `performPolyHoleFace` command or the `Edit Mesh -> Assign Invisible Faces` menu item.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/geometry.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nUsdGeomMesh::GetHoleIndicesAttr()\n```\n\n----------------------------------------\n\nTITLE: Defining Maya-USD Project\nDESCRIPTION: This snippet defines the mayaUsd project and adds a shared library. The project name is taken from the environment.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(mayaUsd)\n\nadd_library(${PROJECT_NAME} SHARED)\n```\n\n----------------------------------------\n\nTITLE: Configuring USD Schemas (CMake)\nDESCRIPTION: This snippet configures the USD schema files. It sets the paths for the schema files and uses `configure_file` to generate the final schema files.  This is a preparatory step before schema generation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/mayatest/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(USD_SCHEMA_PATH usd/schema.usda)\nset(USDGEOM_SCHEMA_PATH usdGeom/schema.usda)\nconfigure_file (\n    ./schema.usda.in\n    ./schema.usda\n)\n```\n\n----------------------------------------\n\nTITLE: Building Maya USD with build.py (Linux Example)\nDESCRIPTION: This snippet demonstrates the use of the build.py script on a Linux system. It provides example arguments for specifying the locations of Maya, Pixar USD, the Maya Devkit, and the workspace directory. The script compiles and installs the necessary libraries and plugins.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/build.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n➜ maya-usd python build.py --maya-location /usr/autodesk/maya2025 --pxrusd-location /usr/local/USD-Release --devkit-location /usr/local/devkitBase /usr/local/workspace\n```\n\n----------------------------------------\n\nTITLE: Defining Target Sources in CMake\nDESCRIPTION: This snippet defines the source files that will be compiled into the target named by the ${PROJECT_NAME} variable. It lists both C++ source files and UI-related files ('.ui' and '.qrc'). The PRIVATE keyword indicates that these sources are only used to build this specific target.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/ui/importDialog/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(${PROJECT_NAME}\n    PRIVATE\n        ItemDelegate.cpp\n        TreeItem.cpp\n        TreeModel.cpp\n        TreeModelFactory.cpp\n        USDImportDialog.cpp\n        USDImportDialogCmd.cpp\n        USDQtUtil.cpp\n\n        USDImportDialog.ui\n        images/ui.qrc\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory in CMake\nDESCRIPTION: This CMake command includes the CMakeLists.txt file located in the 'AL' subdirectory. This allows the 'AL' subdirectory to be built as part of the overall project. The 'AL' subdirectory likely contains the definition and build instructions for a module or component.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/utils/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(AL)\n```\n\n----------------------------------------\n\nTITLE: Define Python Unit Test (CMake)\nDESCRIPTION: This snippet defines a Python unit test for the plugin using the custom CMake function `mayaUsd_add_test`. It defines a Python code string that loads the plugin, runs a unit test harness, and exits. It also sets environment variables for the test, including `PXR_OVERRIDE_PLUGINPATH_NAME` and `LD_LIBRARY_PATH`. This enables automated testing of the plugin's functionality.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaTestPlugin/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(pycode \"\nimport sys\nimport maya.cmds\nmaya.cmds.loadPlugin('AL_USDMayaTestPlugin')\nsys.exit(maya.cmds.AL_maya_test_UnitTestHarness())\n\")\n\nmayaUsd_add_test(${TARGET_NAME}\n    PYTHON_COMMAND \"${pycode}\"\n    ENV\n        \"${PXR_OVERRIDE_PLUGINPATH_NAME}=${ADDITIONAL_PXR_PLUGINPATH_NAME}\"\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Targets and Properties\nDESCRIPTION: This CMake snippet iterates through the list of test scripts, retrieves a unittest target for each script using `mayaUsd_get_unittest_target`, and adds a test target using `mayaUsd_add_test`. It also sets properties like the working directory and environment variables for the test. The `translators` label is added for filtering.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/translators/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(script ${TEST_SCRIPT_FILES})\n    mayaUsd_get_unittest_target(target ${script})\n    mayaUsd_add_test(${target}\n        PYTHON_MODULE ${target}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        ENV\n            \"USD_FORCE_DEFAULT_MATERIALS_SCOPE_NAME=1\"\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n    )\n\n    # Add a ctest label to these tests for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS translators)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Executing USD Schema Generation (CMake)\nDESCRIPTION: This snippet executes the USD schema generation process using the `execute_process` command. It runs a Python script (`USD_GENSCHEMA`) to generate schemas from the configured schema files. The process checks for errors and terminates if schema generation fails.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/mayatest/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nexecute_process(\n    COMMAND\n        \"${Python_EXECUTABLE}\"\n        \"${USD_GENSCHEMA}\"\n        \"${CMAKE_CURRENT_BINARY_DIR}/schema.usda\"\n        .\n    WORKING_DIRECTORY\n        \"${CMAKE_CURRENT_BINARY_DIR}\"\n    RESULT_VARIABLE\n        usdgen_res\n)\nif(usdgen_res)\n    message(FATAL_ERROR \"Schemas generation failed\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Promoting Headers using CMake\nDESCRIPTION: This snippet utilizes a custom CMake function (`mayaUsd_promoteHeaderList`) to manage header files. It promotes the headers defined in the `HEADERS` variable and places them into a specific directory structure during installation, determined by `${PROJECT_NAME}/ui`. This ensures proper organization and accessibility of the headers.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/ui/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    api.h\n    initStringResources.h\n)\n\nmayaUsd_promoteHeaderList( \n    HEADERS\n        ${HEADERS}\n    BASEDIR\n        ${PROJECT_NAME}/ui\n)\n```\n\n----------------------------------------\n\nTITLE: Installing __init__.py with CMake\nDESCRIPTION: This CMake command installs the `__init__.py` file. This file is essential for marking the directory as a Python package. It is installed into the same destination directory as the Python module.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/ufe/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES __init__.py\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/python/${PROJECT_NAME}/${UFE_PYTHON_MODULE_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Maya Subdirectory for Building\nDESCRIPTION: This snippet adds the `maya` subdirectory to the build process.  `pxr_toplevel_prologue()` and `pxr_toplevel_epilogue()` likely contain setup and teardown steps that wrap the subdirectory addition. The `maya` directory presumably contains the CMakeLists.txt file for building Maya-specific parts of the plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npxr_toplevel_prologue()\n    add_subdirectory(maya)\npxr_toplevel_epilogue()\n```\n\n----------------------------------------\n\nTITLE: Maya Module File Configuration (CMake)\nDESCRIPTION: This snippet configures and installs the Maya module file based on the operating system.  It uses `configure_file` to copy and customize the module template and then installs it to the specified destination.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_ADSK_PLUGIN)\n    if (IS_WINDOWS)\n        configure_file(\"modules/mayaUSD_Win.mod.template\" ${PROJECT_BINARY_DIR}/mayaUSD.mod)\n    else()\n        configure_file(\"modules/mayaUSD.mod.template\" ${PROJECT_BINARY_DIR}/mayaUSD.mod)\n    endif()\n    install(FILES ${PROJECT_BINARY_DIR}/mayaUSD.mod DESTINATION ${CMAKE_INSTALL_PREFIX})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Sources CMake\nDESCRIPTION: This code block sets the target sources for the ${PROJECT_NAME} target. It uses the target_sources command to specify a list of C++ files to be compiled into the target. The PRIVATE keyword indicates that these sources are only used internally by the target and are not exposed to other targets.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/trf/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        UsdPointInstanceOrientationModifier.cpp\n        UsdPointInstancePositionModifier.cpp\n        UsdPointInstanceScaleModifier.cpp\n        UsdRotateUndoableCommand.cpp\n        UsdScaleUndoableCommand.cpp\n        UsdSetXformOpUndoableCommandBase.cpp\n        UsdTransform3dBase.cpp\n        UsdTransform3dCommonAPI.cpp\n        UsdTransform3dMatrixOp.cpp\n        UsdTransform3dPointInstance.cpp\n        UsdTransform3dReadImpl.cpp\n        UsdTransform3dSetObjectMatrix.cpp\n        UsdTransform3dUndoableCommands.cpp\n        UsdTranslateUndoableCommand.cpp\n        UsdTRSUndoableCommandBase.cpp\n        Utils.cpp\n        XformOpUtils.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining al_usdmaya_lock metadata in USDA\nDESCRIPTION: This USDA snippet demonstrates how to define the al_usdmaya_lock metadata on Xform and Camera prims. The \"geo\" prim sets the lock to \"transform\", the \"cam\" prim inherits the lock state from \"geo\", and the \"accessory\" prim explicitly sets the lock to \"unlocked\". This configuration controls the locking of transform attributes on the corresponding Maya objects when the USD scene is imported.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/lock.md#_snippet_0\n\nLANGUAGE: usda\nCODE:\n```\n#usda 1.0\n(\n    doc = \"\"\"Generated from Composed Stage of root layer \n\"\"\"\n)\n\ndef Xform \"root\"\n{\n    def Xform \"geo\" (\n        al_usdmaya_lock = \"transform\"\n    )\n    {\n        def Camera \"cam\" (\n            al_usdmaya_lock = \"inherited\"\n        )\n        {\n            def Xform \"accessory\" (\n                al_usdmaya_lock = \"unlocked\"\n            )\n            {\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional MaterialX Test Setup (CMake)\nDESCRIPTION: This snippet conditionally sets up MaterialX related tests based on the Maya version. If the Maya application version is greater than 2022, it defines a list of Python script files to be used as test targets. It then iterates through this list, using `mayaUsd_add_test` to configure each test with its Python module, working directory, and required environment variables. Each test is also labeled as 'translators'.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/translators/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif (MAYA_APP_VERSION VERSION_GREATER 2022)\n    set(MTLX_TEST_SCRIPT_FILES\n        testUsdExportMaterialScope.py\n        testUsdExportMaterialScopeLegacy.py\n        testUsdExportMaterialsOnly.py\n        testUsdExportAssignedMaterials.py\n        testUsdExportMaterialX.py\n        testUsdImportMaterialX.py\n\t\ttestUsdExportFannedOutFileNodesMaterial.py\n    )\n    foreach(script ${MTLX_TEST_SCRIPT_FILES})\n        mayaUsd_get_unittest_target(target ${script})\n        mayaUsd_add_test(${target}\n            PYTHON_MODULE ${target}\n            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n            ENV\n                \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n        )\n\n        # Add a ctest label to these tests for easy filtering.\n        set_property(TEST ${target} APPEND PROPERTY LABELS translators)\n    endforeach()\n\n    if (BUILD_RFM_TRANSLATORS)\n        mayaUsd_add_test(testUsdExportMultiMaterial\n            PYTHON_MODULE testUsdExportMultiMaterial\n            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n            ENV\n                \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n        )\n        set_property(TEST testUsdExportMultiMaterial APPEND PROPERTY LABELS translators)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining the Maya USD Plugin with CMake\nDESCRIPTION: This CMake snippet defines a Maya USD plugin named `pxrUsd`. It specifies the libraries to link against, include directories, source files, private headers, and resource files required for the plugin. It also disables precompiled headers.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/maya/plugin/pxrUsd/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PACKAGE pxrUsd)\n\npxr_plugin(${PXR_PACKAGE}\n    MAYA_PLUGIN\n\n    LIBRARIES\n        mayaUsd\n        sdf\n        tf\n        usd\n        usdGeom\n        usdMaya\n        ${MAYA_Foundation_LIBRARY}\n        ${MAYA_OpenMaya_LIBRARY}\n        ${MAYA_OpenMayaRender_LIBRARY}\n        ${UFE_LIBRARY}\n\n    INCLUDE_DIRS\n        ${PXR_INCLUDE_DIRS}\n        ${MAYA_INCLUDE_DIRS}\n        ${UFE_INCLUDE_DIR}\n\n    CPPFILES\n        alembicChaser.cpp\n        plugin.cpp\n        usdTranslator.cpp\n\n    PRIVATE_HEADERS\n        api.h\n\n    RESOURCE_FILES\n        plugInfo.json\n\n    DISABLE_PRECOMPILED_HEADERS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Dependent Libraries in CMake\nDESCRIPTION: This CMake snippet appends required libraries to the `DEPENDANT_LIBRARIES` variable. These libraries are essential for the correct compilation and linking of the Maya USD translators.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND DEPENDANT_LIBRARIES AL_USDMaya AL_USDMayaSchemas mayaUsd mayaUsd_Schemas gf plug tf)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Unit Tests with CMake\nDESCRIPTION: Iterates through the list of Python scripts defined earlier, creates a test target for each script using `mayaUsd_get_unittest_target`, and adds a unit test using `mayaUsd_add_test`. The working directory and environment variables (LD_LIBRARY_PATH) are also specified for the test.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/schemas/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(script ${TEST_SCRIPT_FILES})\n    mayaUsd_get_unittest_target(target ${script})\n    mayaUsd_add_test(${target}\n        PYTHON_MODULE ${target}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        ENV\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n    )\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Open USD Outliner in Maya (Python)\nDESCRIPTION: This python snippet attempts to open a USD outliner within Maya, provided the 'usdqt.app' package is available. It gets the current USD stage and displays the outliner dialog.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/endToEndMaya/README.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndlg = OpenOutliner()\n```\n\n----------------------------------------\n\nTITLE: Defining Target and Adding Sources (usdTestApiWriter)\nDESCRIPTION: This CMake snippet defines the target `usdTestApiWriter` as a SHARED library and adds source files such as `bulletAdaptor.cpp`, `plugin.cpp` and `nullApiExporter.cpp`. Compilation settings are configured using `mayaUsd_compile_config`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(TARGET_NAME usdTestApiWriter)\nadd_library(${TARGET_NAME} SHARED)\n\n# -----------------------------------------------------------------------------\n# sources\n# -----------------------------------------------------------------------------\ntarget_sources(${TARGET_NAME}\n    PRIVATE\n        bulletAdaptor.cpp\n        plugin.cpp\n        nullApiExporter.cpp\n)\nmayaUsd_compile_config(${TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Cloning the Maya USD Repository using Git\nDESCRIPTION: This snippet shows how to clone the maya-usd repository from GitHub and navigate into the newly created directory. This is the initial step in acquiring the source code necessary for building the project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/build.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Autodesk/maya-usd.git\ncd maya-usd\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Addition\nDESCRIPTION: Conditionally adds the mayaReferenceUpdater.cpp source file based on the availability of CMAKE_UFE_V3_FEATURES. This allows for different behavior based on the environment.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/translators/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_UFE_V3_FEATURES_AVAILABLE)\n    target_sources(${TARGET_NAME}\n        PRIVATE\n            mayaReferenceUpdater.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Python Import Unit Test with CMake\nDESCRIPTION: This CMake snippet adds a specific unit test (`testMayaUsdPythonImport.py`) to check if both USD and MayaUSD Python bindings can be imported within a script node context.  It configures the module path and enables secure batch mode for Maya. The `MayaUsd` label is also set for ctest filtering.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_get_unittest_target(target testMayaUsdPythonImport.py)\nmayaUsd_add_test(${target}\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    PYTHON_MODULE ${target}\n    MODULE_PATH ${CMAKE_INSTALL_PREFIX}\n    ENV\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n        \"MAYA_SECURE_BATCH_ENABLE=1\"\n)\nset_property(TEST ${target} APPEND PROPERTY LABELS MayaUsd)\n```\n\n----------------------------------------\n\nTITLE: Installing Library CMake\nDESCRIPTION: Installs the target library to the specified destination (${AL_INSTALL_PREFIX}/lib). Also installs the PDB file on Windows if it exists. Defines the installation paths.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${LIBRARY_NAME}\n    LIBRARY\n    DESTINATION ${AL_INSTALL_PREFIX}/lib\n    RUNTIME\n    DESTINATION ${AL_INSTALL_PREFIX}/lib\n)\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:${LIBRARY_NAME}> DESTINATION ${AL_INSTALL_PREFIX}/lib OPTIONAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Calculating Relative Path (CMake)\nDESCRIPTION: This snippet calculates the relative path between the `resources_install_path` and the `library_install_path`. It stores the relative path in the `SCHEMASTEST_LIBRARY_DIR` variable, which can be used to locate the library from the resources directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/mayatest/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nfile(RELATIVE_PATH\n    SCHEMASTEST_LIBRARY_DIR\n    ${resources_install_path}/..\n    ${library_install_path}\n\n)\n```\n\n----------------------------------------\n\nTITLE: Header Files List Append (Orphaned Nodes)\nDESCRIPTION: Conditionally appends orphaned node manager header files to the HEADERS list if UFE_TRIE_NODE_HAS_CHILDREN_COMPONENTS_ACCESSOR is true.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(UFE_TRIE_NODE_HAS_CHILDREN_COMPONENTS_ACCESSOR)\n    list(APPEND HEADERS\n        orphanedNodesManager.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Fast Edit Routing in Python\nDESCRIPTION: This Python code snippet shows how to use fast edit routing to route 'transform' commands to a specific layer. It defines functions to get the stage and layer, and then registers the route using `mayaUsd.lib.registerStageLayerEditRouter`. This approach avoids creating temporary dictionaries and is optimized for performance.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/EditRouting.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nimport mayaUsd.lib\n\ndef getStage():\n    '''\n    Here we hard-code the stage, but a more sphoisticated script\n    would select the stage using some mechanism, like UI or\n    based on notifications when a stage is created.\n    '''\n    psPathStr = \"|stage1|stageShape1\"\n    return mayaUsd.lib.GetPrim(psPathStr).GetStage()\n\ndef getLayer(stage):\n    '''Here we route to the session layer, but any known layer could be used.'''\n    return stage.GetSessionLayer()\n\nstage = getStage()\nlayer = getLayer(stage)\nmayaUsd.lib.registerStageLayerEditRouter('transform', stage, layer)\n\n```\n\n----------------------------------------\n\nTITLE: Adding Plug-in Unit Tests with CMake\nDESCRIPTION: This CMake snippet adds unit tests for Maya USD plug-ins. It iterates through a list of test scripts, retrieves the test target, and adds the test. It sets the working directory, defines the `MAYA_PXR_PLUGINPATH_NAME` environment variable to point to the plug-in directory, and adds the `MayaUsd` label for ctest filtering.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(script ${TEST_PLUG_FILES})\n    mayaUsd_get_unittest_target(target ${script})\n    mayaUsd_add_test(${target}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        PYTHON_MODULE ${target}\n        ENV\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n            \"MAYA_PXR_PLUGINPATH_NAME=${CMAKE_CURRENT_BINARY_DIR}/usd/plugin/TestMayaUsdPlug\"\n    )\n\n    # Add a ctest label to these tests for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS MayaUsd)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Patching USD for MaterialX Support (USD 22.05b)\nDESCRIPTION: This code snippet demonstrates how to patch USD version 22.05b to enable MaterialX support for MayaUSD. It involves checking out the specific USD tag and then applying a series of cherry-pick commands to incorporate the necessary MaterialX updates.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/MaterialX.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout tags/v22.05b\n# Fetch updates for MaterialX 1.38.4:\ngit cherry-pick ac3ca253e643a095e0985264238be28b95109a44\ngit cherry-pick 034df39a78a5fc4cada49b545ad2a87fd6666e1d\ngit cherry-pick aaf20de564e29c3e59bcd32b3539add08b7597c6\ngit cherry-pick 8a1ad41d27e2f1b9595a7404a7f8a89dce5cb5bc\ngit cherry-pick e6edb7e8fd74f3f0d5cd981450df0c937a809257\n```\n\n----------------------------------------\n\nTITLE: Setting PYTHONPATH to Include PyOpenGL\nDESCRIPTION: This snippet demonstrates how to set the `PYTHONPATH` environment variable to point to a system Python installation or a third-party Python package manager that has PyOpenGL installed. This is necessary because Maya's Python does not ship with PyOpenGL, which is a dependency of `usdview`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/build.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nexport PYTHONPATH=$PYTHONPATH:Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages\n```\n\n----------------------------------------\n\nTITLE: Define LayerManager Python Test in CMake\nDESCRIPTION: This CMake snippet sets up a test for the LayerManager within the ALUSDMaya Python module. It defines the `PYTHON_MODULE` as `testLayerManager`, sets the `WORKING_DIRECTORY`, and configures environment variables for plugin path overrides and library paths. The test targets the layer management aspects of the ALUSDMaya Python module.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaTestPlugin/py/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_add_test(TestALUSDMayaPython_LayerManager\n    PYTHON_MODULE testLayerManager\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    ENV\n        \"${PXR_OVERRIDE_PLUGINPATH_NAME}=${ADDITIONAL_PXR_PLUGINPATH_NAME}\"\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Script with CMake\nDESCRIPTION: This snippet sets the installation prefix for Python files and then uses the `install` command to install the `proxyAccessor.py` script. It installs the Python script to a directory under the `${CMAKE_INSTALL_PREFIX}`, making it accessible when the Maya USD plugin is installed.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/nodes/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(PYTHON_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/lib/python/${PROJECT_NAME}/lib)\ninstall(FILES proxyAccessor.py DESTINATION ${PYTHON_INSTALL_PREFIX})\n```\n\n----------------------------------------\n\nTITLE: CMake Naming Convention - Variables\nDESCRIPTION: This CMake example shows naming conventions for different types of CMake variables. It uses uppercase for Option names, Custom variables, and recommends respecting third-party variables (don't change them).\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/codingGuidelines.md#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\n# e.g for options names\noption(BUILD_USDMAYA_SCHEMAS \"Build optional schemas.\" ON)\noption(BUILD_TESTS \"Build tests.\" ON)\noption(BUILD_STRICT_MODE \"Enforce all warnings as errors.\" ON)\n\n# e.g for options names\nset(BUILD_WITH_PYTHON_3_VERSION 3.7 CACHE STRING \"The version of Python 3 to build with\")\n \nset(HEADERS\n    jobArgs.h\n    modelKindProcessor.h\n    readJob.h\n    writeJob.h\n)\n \nset(RESOURCES_INSTALL_PATH ${CMAKE_INSTALL_PREFIX}/lib/usd/${TARGET_NAME}/resources)\n \nset(USDTRANSACTION_PYTHON_LIBRARY_LOCATION ${AL_INSTALL_PREFIX}/lib/python/AL/usd/transaction)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries in CMake\nDESCRIPTION: This CMake snippet links the `TRANSLATORS_PACKAGE` library with the dependent libraries specified in the `DEPENDANT_LIBRARIES` variable. This ensures that all necessary dependencies are resolved during linking.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${TRANSLATORS_PACKAGE} ${DEPENDANT_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Initializing Run-Time Search Paths (rpath) in CMake\nDESCRIPTION: This snippet initializes and adds run-time search paths (rpaths) for the plugin on macOS and Linux.  It handles various scenarios including relative paths to USD and the installation prefix.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/plugin/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX) \n    mayaUsd_init_rpath(rpath \"plugin\")\n    if(DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    elseif(DEFINED PXR_USD_LOCATION)\n        mayaUsd_add_rpath(rpath \"${PXR_USD_LOCATION}/lib\")\n    endif()\n    if(IS_LINUX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib64\")\n    endif()\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../../../Maya.app/Contents/MacOS\")\n    endif()\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/lib\")\n    mayaUsd_install_rpath(rpath ${TARGET_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Runtime Search Paths (CMake)\nDESCRIPTION: This snippet initializes and installs the runtime search path for macOS and Linux systems, using mayaUsd_init_rpath, mayaUsd_add_rpath and mayaUsd_install_rpath.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/AL/usd/transaction/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX)\n    mayaUsd_init_rpath(rpath ${USDTRANSACTION_PYTHON_LIBRARY_LOCATION})\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/plugin/al/lib\")\n    mayaUsd_install_rpath(rpath ${USDTRANSACTION_PYTHON_LIBRARY_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Variables\nDESCRIPTION: Sets various CMake variables to control the build process, including disabling verbose makefile output, including the current directory in include paths, defining the installation directory suffix, and setting the AL_INSTALL_PREFIX.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VERBOSE_MAKEFILE OFF)\nset(CMAKE_INCLUDE_CURRENT_DIR ON)\n\nset(INSTALL_DIR_SUFFIX plugin/al)\nset(AL_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/${INSTALL_DIR_SUFFIX})\n```\n\n----------------------------------------\n\nTITLE: Installing plugInfo.json using CMake\nDESCRIPTION: This CMake code generates and installs a `plugInfo.json` file to the installation directory. It uses the `file(WRITE)` command to create the JSON file in the binary directory with the specified content. Then, it uses the `install` command to copy the generated file to the final install location under the `lib/usd` subdirectory. The JSON file includes an entry that allows inclusion of resource directories.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_DESTINATION \n    ${CMAKE_INSTALL_PREFIX}/lib/usd\n)\ninstall(CODE\n    \"file(WRITE \\\"${CMAKE_CURRENT_BINARY_DIR}/lib/usd/plugInfo.json\\\" \\\"{\\n    \\\\\\\"Includes\\\\\\\": [ \\\\\\\"*/resources/\\\\\\\" ]\\n}\\\")\"\n)\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/lib/usd/plugInfo.json\n    DESTINATION ${INSTALL_DESTINATION}\n)\n```\n\n----------------------------------------\n\nTITLE: Appending Command Sources to List CMake\nDESCRIPTION: Appends a list of source files related to Maya commands in AL_USDMaya to the AL_usdmaya_cmds_source list. These source files implement the commands defined in the corresponding header files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND AL_usdmaya_cmds_source\n        AL/usdmaya/cmds/CreateUsdPrim.cpp\n        AL/usdmaya/cmds/DebugCommands.cpp\n        AL/usdmaya/cmds/EventCommand.cpp\n        AL/usdmaya/cmds/LayerCommands.cpp\n        AL/usdmaya/cmds/ListTranslators.cpp\n        AL/usdmaya/cmds/ProxyShapeCommands.cpp\n        AL/usdmaya/cmds/ProxyShapePostLoadProcess.cpp\n        AL/usdmaya/cmds/RendererCommands.cpp\n        AL/usdmaya/cmds/SyncFileIOGui.cpp\n        AL/usdmaya/cmds/UnloadPrim.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Copy Ball Rig Asset (Bash)\nDESCRIPTION: This bash command copies the Ball rig asset from the assets directory to the models directory. This is a preparation step for animating the ball.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/endToEndMaya/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ncp assets/Ball/Ball_rig.ma models/Ball/Ball_rig.ma\n```\n\n----------------------------------------\n\nTITLE: Install compute shaders (CMake)\nDESCRIPTION: This snippet uses the `install` command to copy the compute shader files specified in the `MAYAUSD_COMPUTESHADERS` list to the destination directory `${CMAKE_INSTALL_PREFIX}/lib/usd/mayaUSD_ComputeShaders/resources`.  `CMAKE_INSTALL_PREFIX` defines the root installation directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/vp2ComputeShaders/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES ${MAYAUSD_COMPUTESHADERS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/usd/mayaUSD_ComputeShaders/resources\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Chaser Import Test\nDESCRIPTION: This CMake snippet configures a test target for importing using the Chaser functionality. It sets the MAYA_PLUG_IN_PATH and PXR_OVERRIDE_PLUGINPATH_NAME environment variables to point to the plugin directory, as well as LD_LIBRARY_PATH.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/translators/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_add_test(testUsdImportChaser\n    PYTHON_MODULE testUsdImportChaser\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    ENV\n        \"MAYA_PLUG_IN_PATH=${CMAKE_CURRENT_BINARY_DIR}/../plugin\"\n        \"${PXR_OVERRIDE_PLUGINPATH_NAME}=${CMAKE_CURRENT_BINARY_DIR}/../plugin\"\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n)\nset_property(TEST testUsdImportChaser APPEND PROPERTY LABELS translators)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories with CMake\nDESCRIPTION: This CMake snippet adds several subdirectories to the build process. These subdirectories likely contain additional CMakeLists.txt files that define further build targets, tests, and libraries related to different components of the Maya USD project, such as UFE, core Maya USD, and USD itself.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(ufe)\nadd_subdirectory(mayaUsd)\nadd_subdirectory(usd)\nif (BUILD_MAYAUSDAPI_LIBRARY)\n    add_subdirectory(mayaUsdAPI)\nendif()\nif(LOOKDEVXUFE_HAS_PYTHON_BINDINGS)\n    add_subdirectory(LookdevXUfe)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing the AL_EventSystem Library in CMake\nDESCRIPTION: This snippet installs the compiled AL_EventSystem library to the specified destination. It handles both the library file and, on Windows, the program database (PDB) file. The DESTINATION parameter specifies where the library should be placed during installation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/utils/AL/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${EVENTS_LIBRARY_NAME}\n    LIBRARY\n    DESTINATION ${EVENTS_LIBRARY_LOCATION}\n    RUNTIME\n    DESTINATION ${EVENTS_LIBRARY_LOCATION}\n)\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:${EVENTS_LIBRARY_NAME}> DESTINATION ${EVENTS_LIBRARY_LOCATION} OPTIONAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Install Directory Suffix CMake\nDESCRIPTION: This snippet sets the installation directory suffix for the Autodesk Maya USD plugin. The `INSTALL_DIR_SUFFIX` variable determines where the plugin will be installed relative to the main installation directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_DIR_SUFFIX plugin/adsk)\n```\n\n----------------------------------------\n\nTITLE: Append Source Files to utils_event_source - CMake\nDESCRIPTION: This snippet appends the EventHandler.cpp file to the utils_event_source variable.  This variable is used to specify the source files required for the event system. The CMAKE_CURRENT_SOURCE_DIR variable provides the current directory of the CMakeLists.txt file.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/utils/AL/event/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND utils_event_source\n    ${CMAKE_CURRENT_SOURCE_DIR}/EventHandler.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring plugInfo.json (Second Pass) (CMake)\nDESCRIPTION: This snippet configures the `plugInfo.json` file again after computing the relative path. It is called a second time to bake the correct values into the file.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/mayatest/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n    ${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\n    ${CMAKE_CURRENT_BINARY_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Runtime Search Paths (CMake)\nDESCRIPTION: This snippet configures the runtime search paths for the target, allowing the plugin to find its dependencies at runtime. It uses custom CMake functions `mayaUsd_init_rpath`, `mayaUsd_add_rpath`, and `mayaUsd_install_rpath` to set up these paths, which include paths relative to the plugin directory, the installation prefix, and the USD installation location.  Platform specific paths are included for MacOSX.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaTestPlugin/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# handle run-time search paths\nif(IS_MACOSX OR IS_LINUX)\n    mayaUsd_init_rpath(rpath \"plugin\")\n    mayaUsd_add_rpath(rpath \"../lib\")\n    if(BUILD_TESTS)\n        mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/lib/gtest\")\n    endif()\n    if(DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    elseif(DEFINED PXR_USD_LOCATION)\n        mayaUsd_add_rpath(rpath \"${PXR_USD_LOCATION}/lib\")\n    endif()\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../../../Maya.app/Contents/MacOS\")\n    endif()\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/lib\")\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/plugin/pxr/lib\")\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/plugin/pxr/maya/lib\")\n    mayaUsd_install_rpath(rpath ${TARGET_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Append Node Declarations\nDESCRIPTION: Appends MaterialX node declarations to a list. These declarations define the interfaces for various Maya surface and utility nodes.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/MaterialXGenOgsXml/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND NODE_DECLARATIONS\n    libraries/maya_surfaces.mtlx\n    libraries/maya_utilities.mtlx\n    libraries/maya_utilities_ng.mtlx\n    libraries/usd_utilities.mtlx\n    libraries/lookdevKit.mtlx\n    libraries/lookdevKit_ng.mtlx\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Inclusion based on Maya API Version (Python)\nDESCRIPTION: This CMake snippet conditionally appends `testCamera.py` to the `TEST_SCRIPT_FILES` list if the `MAYA_API_VERSION` is greater than or equal to 20220100. This includes tests that require a specific Maya API version.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/ufe/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif (MAYA_API_VERSION VERSION_GREATER_EQUAL 20220100)\n    list(APPEND TEST_SCRIPT_FILES\n        testCamera.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files\nDESCRIPTION: This snippet installs the header files into the specified destination directory. It uses the `HEADERS` variable defined earlier and sets the destination path using `CMAKE_INSTALL_PREFIX`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES  ${HEADERS}\n    DESTINATION \n        ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Discard Edits Test with CMake\nDESCRIPTION: This snippet conditionally adds a test for discard edits, based on whether `CMAKE_UFE_V3_FEATURES_AVAILABLE` is set. The test's environment variables are set based on whether `UFE_TRIE_NODE_HAS_CHILDREN_COMPONENTS_ACCESSOR` is set.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/fileio/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_UFE_V3_FEATURES_AVAILABLE)\n    set(TEST_DISCARD_EDITS testDiscardEdits.py)\n    mayaUsd_get_unittest_target(target ${TEST_DISCARD_EDITS})\n    if(UFE_TRIE_NODE_HAS_CHILDREN_COMPONENTS_ACCESSOR)\n        mayaUsd_add_test(${target}\n            PYTHON_MODULE ${target}\n            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n            ENV\n                \"HAS_ORPHANED_NODES_MANAGER=1\"\n                \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n        )\n    else()\n        mayaUsd_add_test(${target}\n            PYTHON_MODULE ${target}\n            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n            ENV\n                \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n        )\n    endif()\n\n    # Add a ctest label for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS fileio)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Boost Root and Debug Options in CMake\nDESCRIPTION: This CMake snippet configures the Boost library by setting the BOOST_ROOT variable to the location of the pxr_usd library.  It also enables Boost's debug features for Python, which is useful during development.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/codingGuidelines.md#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nset(BOOST_ROOT ${pxr_usd_location})\nset(Boost_USE_DEBUG_PYTHON ON)\n```\n\n----------------------------------------\n\nTITLE: Set Header Variables CMake\nDESCRIPTION: This snippet uses the `set` command to define a CMake variable named `HEADERS`. This variable stores a list of header files related to the undo functionality. These header files declare the interfaces and data structures used by the source files defined in other snippets.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/undo/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n    UsdUndoBlock.h\n    UsdUndoManager.h\n    UsdUndoStateDelegate.h\n    UsdUndoableItem.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring Unit Tests with CMake\nDESCRIPTION: This CMake snippet iterates through the list of Python test scripts and creates unit test targets for each using the `mayaUsd_get_unittest_target` and `mayaUsd_add_test` functions.  It sets the Python module, working directory, and environment variables for each test. Additionally, a ctest label ('fileio_utils') is added to each test for filtering purposes.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/fileio/utils/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(script ${TEST_SCRIPT_FILES})\n    mayaUsd_get_unittest_target(target ${script})\n    mayaUsd_add_test(${target}\n        PYTHON_MODULE ${target}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        ENV\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n    )\n\n    # Add a ctest label to these tests for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS fileio_utils)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Constant Name Example C++\nDESCRIPTION: This code snippet illustrates the naming convention for constant variables (constexpr or const) in the maya-usd project. Constant names should have a leading 'k' followed by UpperCamelCase.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/codingGuidelines.md#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nconst int kDaysInAWeek = 7;\nconst int kMyMagicNumber = 42;\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Script Addition\nDESCRIPTION: This CMake code conditionally adds test scripts to the TEST_SCRIPT_FILES list based on whether the BUILD_PXR_PLUGIN or BUILD_RFM_TRANSLATORS flags are enabled. This allows for testing specific features depending on which plugins are built.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/translators/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_PXR_PLUGIN)\n    # This test uses the file \"UsdExportUVTransforms.ma\" which\n    # requires the plugin \"pxrUsdPreviewSurface\" that is built by the\n    # Pixar plugin.\n    list(APPEND TEST_SCRIPT_FILES\n        testUsdExportUVTransforms.py\n    )\n\n    # This test uses the file \"asset.ma\" which\n    # requires the plugin \"pxrUsdPreviewSurface\" that is built by the\n    # Pixar plugin.\n    list(APPEND TEST_SCRIPT_FILES\n        testUsdExportUsdzPackage.py\n    )\nendif()\n\nif (BUILD_RFM_TRANSLATORS)\n    list(APPEND TEST_SCRIPT_FILES\n        testUsdImportRfMShaders.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Restoring All Default Edit Routers in Python\nDESCRIPTION: This Python code snippet demonstrates how to restore all default edit routers using the `mayaUsd.lib.restoreAllDefaultEditRouters` function. This effectively disables all custom edit routing for all operations.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/EditRouting.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nimport mayaUsd.lib\nmayaUsd.lib.restoreAllDefaultEditRouters()\n\n```\n\n----------------------------------------\n\nTITLE: Install Targets\nDESCRIPTION: This snippet defines the installation process for the Python extension library. It specifies the destination directory for the library files and any associated program database (PDB) files on Windows.  It also installs the `__init__.py` file to create a proper Python package.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/python/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(PYLIB_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/lib/python/${PROJECT_NAME}/lib)\n\ninstall(TARGETS ${PYTHON_TARGET_NAME}\n    LIBRARY\n    DESTINATION ${PYLIB_INSTALL_PREFIX}\n    ARCHIVE\n    DESTINATION ${PYLIB_INSTALL_PREFIX}\n    RUNTIME\n    DESTINATION ${PYLIB_INSTALL_PREFIX}\n)\n\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:${PYTHON_TARGET_NAME}> \n            DESTINATION ${PYLIB_INSTALL_PREFIX} OPTIONAL)\nendif()\n\ninstall(FILES __init__.py DESTINATION ${PYLIB_INSTALL_PREFIX})\n```\n\n----------------------------------------\n\nTITLE: Import animated USD meshes to Maya using ProxyShape\nDESCRIPTION: This script imports a USD file, gets the ProxyShape, extracts the prims, and uses the TranslateUSDMeshesToMaya class to translate USD meshes to Maya meshes. The Maya meshes are then driven live from the USD ProxyShape allowing for animation as the timeline is scrubbed.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/tutorials/animatedMesh/README.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Import the animatedMeshImport class in your preferred way \nproxyShape  = cmds.AL_usdmaya_ProxyShapeImport(file='/your/usd/file.usdc')\nshape = usdmaya.ProxyShape.getByName(proxyShape[0])\nprims = Usd.PrimRange.Stage(shape.getUsdStage())\nprimList = [prim for prim in prims][:1]\nparents = cmds.listRelatives(proxyShape[0], ap=True)\nanimatedTranslator = TranslateUSDMeshesToMaya(parents[0], primList)\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Inclusion based on UFE Clipboard Support (Python)\nDESCRIPTION: This CMake snippet conditionally appends `testClipboard.py` to the `TEST_SCRIPT_FILES` list if the `UFE_CLIPBOARD_SUPPORT` variable is set. This includes tests related to UFE Clipboard functionality.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/ufe/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif (UFE_CLIPBOARD_SUPPORT)\n    list(APPEND TEST_SCRIPT_FILES\n        testClipboard.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Tests (Python)\nDESCRIPTION: This CMake snippet iterates through the `TEST_SCRIPT_FILES` list, creating a unit test target for each Python script using the `mayaUsd_get_unittest_target` and `mayaUsd_add_test` macros. It sets the working directory, Python module, and environment variables for the test execution.  Finally, the tests are labeled 'ufe'.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/ufe/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(script ${TEST_SCRIPT_FILES})\n    mayaUsd_get_unittest_target(target ${script})\n    mayaUsd_add_test(${target}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        PYTHON_MODULE ${target}\n        ENV\n            \"MAYA_PLUG_IN_PATH=${CMAKE_CURRENT_SOURCE_DIR}/ufeTestPlugins\"\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n            \"UFE_HAS_CODE_WRAPPER=${UFE_HAS_CODE_WRAPPER}\"\n            \"USD_HAS_COLOR4_SDR_SUPPORT=${USD_HAS_COLOR4_SDR_SUPPORT}\"\n            \"USD_HAS_MX_METADATA_SUPPORT=${USD_HAS_MX_METADATA_SUPPORT}\"\n            \"UFE_ATTRIBUTES_GET_ENUMS=${UFE_ATTRIBUTES_GET_ENUMS}\"\n            \"UFE_HAS_NATIVE_TYPE_METADATA=${UFE_HAS_NATIVE_TYPE_METADATA}\"\n            \"UFE_UINODEGRAPHNODE_HAS_SIZE=${UFE_UINODEGRAPHNODE_HAS_SIZE}\"\n            \"UFE_UINODEGRAPHNODE_HAS_DISPLAYCOLOR=${UFE_UINODEGRAPHNODE_HAS_DISPLAYCOLOR}\"\n            \"UFE_MATERIAL_HAS_HASMATERIAL=${UFE_MATERIAL_HAS_HASMATERIAL}\"\n            \"UFE_CAMERA_HAS_RENDERABLE=${UFE_CAMERA_HAS_RENDERABLE}\"\n            \"UFE_SCENE_SEGMENT_HANDLER_ROOT_PATH=${UFE_SCENE_SEGMENT_HANDLER_ROOT_PATH}\"\n            \"UFE_VOLUME_LIGHTS_SUPPORT=${UFE_VOLUME_LIGHTS_SUPPORT}\"\n            \"UFE_SCENEITEM_HAS_METADATA=${UFE_SCENEITEM_HAS_METADATA}\"\n            \"HAS_LOOKDEVXUSD=${BUILD_LOOKDEVXUSD_LIBRARY}\"\n    )\n\n    # Add a ctest label to these tests for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS ufe)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Include Directories\nDESCRIPTION: Specifies the include directories needed for compiling the main project library. This includes Pixar USD, Maya, and UFE include directories.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/python/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${PROJECT_NAME} \n    PUBLIC\n        ${PXR_INCLUDE_DIRS}\n        ${MAYA_INCLUDE_DIRS}\n        ${UFE_INCLUDE_DIR}\n        ${CMAKE_BINARY_DIR}/include\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Search Paths for MayaUSD\nDESCRIPTION: This snippet conditionally sets runtime search paths (rpaths) based on the operating system (macOS or Linux) and defined variables. This ensures that the plugin can find its dependencies at runtime. It adds rpaths for the plugin directory, library directory, and USD library directories (either relative or absolute, based on MAYAUSD_TO_USD_RELATIVE_PATH or PXR_USD_LOCATION). It calls `mayaUsd_init_rpath`, `mayaUsd_add_rpath`, and `mayaUsd_install_rpath` macros, to manage rpath settings.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/pxrUsdTranslators/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX) \n    mayaUsd_init_rpath(rpath \"plugin\")\n    mayaUsd_add_rpath(rpath \"../lib\")\n\n    if(DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    elseif(DEFINED PXR_USD_LOCATION)\n        mayaUsd_add_rpath(rpath \"${PXR_USD_LOCATION}/lib\")\n    endif()\n    if (IS_LINUX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib64\")\n    endif()\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../../../Maya.app/Contents/MacOS\")\n    endif()\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/lib\")\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/plugin/pxr/lib\")\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/plugin/pxr/maya/lib\")\n    mayaUsd_install_rpath(rpath ${PXR_TRANSLATORS_PACKAGE})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Promoting Headers in CMake\nDESCRIPTION: This CMake snippet promotes the header files specified in the HEADERS variable using the mayaUsd_promoteHeaderList macro. It specifies that these headers should be placed in the 'listeners' subdirectory during the promotion process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/listeners/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_promoteHeaderList(HEADERS ${HEADERS} SUBDIR listeners)\n```\n\n----------------------------------------\n\nTITLE: Setting TF_DEBUG Environment Variable\nDESCRIPTION: This code snippet shows how to set the TF_DEBUG environment variable to enable debugging for specific areas within AL_USDMaya.  You should export this environmental variable prior to running Maya.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/developer.md#_snippet_12\n\nLANGUAGE: Text\nCODE:\n```\nexport TF_DEBUG=\"ALUSDMAYA* -ALUSDMAYA_EVALUATION -ALUSDMAYA_COMMANDS\"\n```\n\n----------------------------------------\n\nTITLE: Locking Layer in MEL Script (Non-Undoable)\nDESCRIPTION: This MEL script snippet demonstrates how to lock a USD layer using the `mayaUsdLayerEditor` command. The lock type (0=Unlocked, 1=Locked, 2=System-Locked) and whether to include sublayers (0=Top Layer Only, 1=Top and Sublayers) are specified as arguments. This command is un-doable.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/LayerLocking.md#_snippet_2\n\nLANGUAGE: MEL\nCODE:\n```\n// Lock Type: 0 = Unlocked, 1 = Locked and 2 = System-Locked. \n// Include Sublayers : 0 = Top Layer Only, 1 : Top and Sublayers\nmayaUsdLayerEditor -edit -lockLayer 0 0 \"proxyShapePath\" \"layerIdentifier\"\n```\n\nLANGUAGE: MEL\nCODE:\n```\n// example: locks an anonymousLayer1 without changing the lock state of its sublayers\nmayaUsdLayerEditor -edit -lockLayer 1 0 \"|PathTo|proxyShape\" \"anon:00000143164533E0:anonymousLayer1\"\n```\n\nLANGUAGE: MEL\nCODE:\n```\n// example: locks an exampleLayer.usda as well as its sub-layers\nmayaUsdLayerEditor -edit -lockLayer 1 1 \"|stage|stageShape1\" \"d:/Assets/exampleLayer.usda\"\n```\n\nLANGUAGE: MEL\nCODE:\n```\n// example: System-locks an exampleLayer.usda\nmayaUsdLayerEditor -edit -lockLayer 2 0 \"|stage|stageShape1\" \"d:/Assets/exampleLayer.usda\"\n```\n\n----------------------------------------\n\nTITLE: Installing Proxy Shape Icons using CMake\nDESCRIPTION: This snippet handles the special case of installing icon files specifically for the proxy shape base. It installs PNG and SVG files with different resolutions, renaming them to a 'Base' variant during the installation. This ensures proper icon naming conventions for proxy shape related icons.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/icons/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(MAYAUSDPROXYSHAPE \"mayaUsdProxyShape\")\ninstall(FILES \"out_${MAYAUSDPROXYSHAPE}_100.png\"\n    DESTINATION \"${INSTALL_DIR_SUFFIX}/icons\"\n    RENAME \"out_${MAYAUSDPROXYSHAPE}Base.png\"\n)\ninstall(FILES \"out_${MAYAUSDPROXYSHAPE}_150.png\"\n    DESTINATION \"${INSTALL_DIR_SUFFIX}/icons\"\n    RENAME \"out_${MAYAUSDPROXYSHAPE}Base_150.png\"\n)\ninstall(FILES \"out_${MAYAUSDPROXYSHAPE}_200.png\"\n    DESTINATION \"${INSTALL_DIR_SUFFIX}/icons\"\n    RENAME \"out_${MAYAUSDPROXYSHAPE}Base_200.png\"\n)\ninstall(FILES \"${MAYAUSDPROXYSHAPE}.svg\"\n    DESTINATION \"${INSTALL_DIR_SUFFIX}/icons\"\n    RENAME \"${MAYAUSDPROXYSHAPE}Base.svg\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configure MEL Template (CMake)\nDESCRIPTION: This CMake command configures a MEL template file, replacing variables within the template with values defined in the CMake environment. The resulting file is placed in the CMake binary directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/scripts/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\"${PROJECT_SOURCE_DIR}/lib/usd/pxrUsdPreviewSurface/AEusdPreviewSurfaceTemplate.mel\"\n               \"${CMAKE_CURRENT_BINARY_DIR}/AEusdPreviewSurfaceTemplate.mel\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories using CMake\nDESCRIPTION: This code snippet uses the `add_subdirectory` command in CMake to include different components of the Maya-USD project in the build process. These components include hdMaya (if BUILD_HDMAYA is enabled), pxrUsdPreviewSurface, translators, schemas, and ui (if Qt is found).\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_HDMAYA)\n    add_subdirectory(hdMaya)\nendif()\n\nadd_subdirectory(pxrUsdPreviewSurface)\nadd_subdirectory(translators)\nadd_subdirectory(schemas)\n\nif(Qt_FOUND)\n    add_subdirectory(ui)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Edit as Maya Test with CMake\nDESCRIPTION: This snippet adds a test for edit as Maya functionality, conditionally based on `CMAKE_UFE_V3_FEATURES_AVAILABLE`. It sets environment variables, including `HAS_ORPHANED_NODES_MANAGER` if `UFE_TRIE_NODE_HAS_CHILDREN_COMPONENTS_ACCESSOR` is set, and `USD_FORCE_DEFAULT_MATERIALS_SCOPE_NAME`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/fileio/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_UFE_V3_FEATURES_AVAILABLE)\n    mayaUsd_get_unittest_target(target testEditAsMaya.py)\n\n    if(UFE_TRIE_NODE_HAS_CHILDREN_COMPONENTS_ACCESSOR)\n        mayaUsd_add_test(${target}\n            PYTHON_MODULE ${target}\n            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n            ENV\n                \"HAS_ORPHANED_NODES_MANAGER=1\"\n                \"USD_FORCE_DEFAULT_MATERIALS_SCOPE_NAME=1\"\n                \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n        )\n    else()\n        mayaUsd_add_test(${target}\n            PYTHON_MODULE ${target}\n            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n            ENV\n                \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n                \"USD_FORCE_DEFAULT_MATERIALS_SCOPE_NAME=1\"\n        )\n    endif()\n\n    # Add a ctest label for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS fileio)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Header Files List Definition\nDESCRIPTION: Defines a list of header files used in the ${PROJECT_NAME} target. This list is used for installation and promotion.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    fallbackPrimReader.h\n    flexibleSparseValueWriter.h\n    functorPrimReader.h\n    functorPrimWriter.h\n    importData.h\n    instancedNodeWriter.h\n    jobContextRegistry.h\n    primReader.h\n    primReaderArgs.h\n    primReaderContext.h\n    primReaderRegistry.h\n    primWriter.h\n    primWriterArgs.h\n    primWriterContext.h\n    primWriterRegistry.h\n    registryHelper.h\n    schemaApiAdaptor.h\n    schemaApiAdaptorRegistry.h\n    shaderReader.h\n    shaderReaderRegistry.h\n    shaderWriter.h\n    shaderWriterRegistry.h\n    transformWriter.h\n    writeJobContext.h\n)\n```\n\n----------------------------------------\n\nTITLE: Export dynamic attributes using AL_usdmaya_ExportCommand\nDESCRIPTION: This example shows how to export dynamic attributes using the AL_usdmaya_ExportCommand. The `-f` flag specifies the output file path, and the `-dynamic` flag enables dynamic attribute export.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/importExport.md#_snippet_2\n\nLANGUAGE: MEL\nCODE:\n```\nAL_usdmaya_ExportCommand -f \"<path/to/out/file.usd>\" -dynamic\n```\n\n----------------------------------------\n\nTITLE: Configuring Python __init__.py (CMake)\nDESCRIPTION: This snippet configures the `__init__.py` file for the Python package. It uses `configure_file` with `COPYONLY` to copy the original `__init__.py` file from the source directory to the binary directory. This ensures that the Python package is properly initialized.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/mayatest/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/__init__.py ${CMAKE_BINARY_DIR}/AL/usd/schemas/mayatest/__init__.py COPYONLY)\n```\n\n----------------------------------------\n\nTITLE: Finding Loadable Assets\nDESCRIPTION: This C++ snippet illustrates how one might theoretically use AL_usdmaya_ProxyShapeFindLoadable to list asset references. The description acknowledges uncertainty about the command's actual functionality.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_10\n\nLANGUAGE: c++\nCODE:\n```\nAL_usdmaya_ProxyShapeFindLoadable              //< produce a list of all assets? payloads?\nAL_usdmaya_ProxyShapeFindLoadable -unloaded    //< produce a list of all unloaded assets? unloaded payloads?\nAL_usdmaya_ProxyShapeFindLoadable -loaded      //< produce a list of all loaded assets? loaded payloads?\n```\n\n----------------------------------------\n\nTITLE: Link Libraries (CMake)\nDESCRIPTION: This snippet specifies the libraries that the target should be linked against. These libraries include AL_EventSystem, AL_USDMayaUtils, AL_MayaUtils, usdUfe, AL_USDMaya, AL_MayaTest, AL_USDMayaSchemas, AL_USDMayaSchemasTest, and the GTest libraries. This ensures that the compiled library has access to the necessary functions and data structures from these dependencies.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaTestPlugin/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${TARGET_NAME}\n    PRIVATE\n        AL_EventSystem\n        AL_USDMayaUtils\n        AL_MayaUtils\n        usdUfe\n        AL_USDMaya   #Adding this recursively pulls in lots of things\n        AL_MayaTest\n        AL_USDMayaSchemas\n        AL_USDMayaSchemasTest\n        ${GTEST_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Configured Header File\nDESCRIPTION: This snippet installs the configured `mayaUsdAPI.h` header file from the binary directory to the install include directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${CMAKE_BINARY_DIR}/include/${PROJECT_NAME}/mayaUsdAPI.h\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Compiler Warning for MSVC\nDESCRIPTION: This snippet disables a specific compiler warning (4251) when using the MSVC compiler. This warning is related to exporting STL classes and is suppressed for the usdUfe project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n    target_compile_options(${PROJECT_NAME}\n        PUBLIC\n            /wd4251\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: Adds an executable target named `${TARGET_NAME}` (which is 'testMayaSchemas'). This tells CMake to create an executable with this name.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/maya/tests/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Adding Tests Conditionally (Maya Version)\nDESCRIPTION: This snippet conditionally appends additional test scripts based on the Maya application version. Specifically, it adds testVP2RenderDelegateSelection.py and testVP2RenderDelegateUsdSkel.py if the Maya version is greater than 2022 and testVP2RenderDelegateDrawModes.py if greater than 2024.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/render/vp2RenderDelegate/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (MAYA_APP_VERSION VERSION_GREATER 2022)\n    list(APPEND TEST_SCRIPT_FILES_LAMBERT\n        testVP2RenderDelegateSelection.py\n        testVP2RenderDelegateUsdSkel.py\n    )\nendif()\n\nif (MAYA_APP_VERSION VERSION_GREATER 2024)\n    list(APPEND TEST_SCRIPT_FILES_LAMBERT\n        testVP2RenderDelegateDrawModes.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Target Sources in CMake\nDESCRIPTION: This snippet defines the source files used to build the ${PROJECT_NAME} target. The `target_sources` command specifies the source files as PRIVATE, meaning they are only used within the target and not exposed to other dependent targets.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/jobs/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        jobArgs.cpp\n        meshDataReadJob.cpp\n        modelKindProcessor.cpp\n        readJob.cpp\n        writeJob.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the Python Bindings Target\nDESCRIPTION: This snippet defines the name of the Python bindings library and creates a shared library for it. The target name includes a `_d` suffix in debug mode on Windows.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/schemas/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(SCHEMAS_LIBRARY_NAME schemas)\n\nif(IS_WINDOWS AND MAYAUSD_DEFINE_BOOST_DEBUG_PYTHON_FLAG)\n    # On Windows when compiling with debug python the library must be named with _d.\n    set(TARGET_PYTHON_NAME \"_${SCHEMAS_LIBRARY_NAME}_d\")\nelse()\n    set(TARGET_PYTHON_NAME \"_${SCHEMAS_LIBRARY_NAME}\")\nendif()\n\nadd_library(${TARGET_PYTHON_NAME} SHARED)\n```\n\n----------------------------------------\n\nTITLE: Include Directive - Same Directory C++\nDESCRIPTION: This code snippet demonstrates how to include a header file (.h) that resides in the same directory as the source file (.cpp) using double quotes and without specifying a path. This applies to both public and private headers.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/codingGuidelines.md#_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\n// In foobar.cpp\n#include \"foobar.h\"\n```\n\n----------------------------------------\n\nTITLE: Setting Run-Time Search Paths for macOS and Linux\nDESCRIPTION: This snippet sets run-time search paths for macOS and Linux. It configures rpath to find the required libraries at runtime, considering relative paths to USD and potential Maya USD to USD relative paths.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX)\n    mayaUsd_init_rpath(rpath \"lib\")\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/lib\")\n    if(DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    elseif(DEFINED PXR_USD_LOCATION)\n        mayaUsd_add_rpath(rpath \"${PXR_USD_LOCATION}/lib\")\n    endif()\n    if(IS_LINUX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib64\")\n    endif()\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../Maya.app/Contents/MacOS\")\n    endif()\n    mayaUsd_install_rpath(rpath ${PROJECT_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion for Scene Index based on PXR Version\nDESCRIPTION: This CMake code snippet conditionally adds the `sceneIndex` subdirectory only if the `PXR_VERSION` is greater than or equal to 2211. This ensures that the `sceneIndex` module is included only when the project is using a compatible version of Pixar's USD library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif( PXR_VERSION GREATER_EQUAL 2211 )\n    add_subdirectory(sceneIndex)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Disabling a Debug Notice in C++\nDESCRIPTION: This code disables a specific debug notice using the AL_usdmaya_UseDebugCommand with the -ds flag.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/developer.md#_snippet_16\n\nLANGUAGE: C++\nCODE:\n```\nAL_usdmaya_UseDebugCommand -ds \"ALUSDMAYA_TRANSLATORS\";\n```\n\n----------------------------------------\n\nTITLE: Setting Target Sources\nDESCRIPTION: Specifies the source files that will be compiled into the target library. The PRIVATE keyword indicates that these source files are only used for this target and are not exposed to other targets.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/translators/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${TARGET_NAME}\n    PRIVATE\n        cameraReader.cpp\n        cameraWriter.cpp\n        instancerWriter.cpp\n        jointWriter.cpp\n        lightReader.cpp\n        lightRfMWriter.cpp\n        lightRfMWriterPxrMeshLight.cpp\n        lightWriter.cpp\n        locatorWriter.cpp\n        materialReader.cpp\n        mayaReferenceReader.cpp\n        meshReader.cpp\n        meshWriter.cpp\n        meshWriterBlendShapes.cpp\n        nurbsCurvesReader.cpp\n        nurbsCurveWriter.cpp\n        nurbsPatchReader.cpp\n        nurbsSurfaceWriter.cpp\n        particleWriter.cpp\n        plugin.cpp\n        scopeReader.cpp\n        skelReader.cpp\n        stageWriter.cpp\n        strokeWriter.cpp\n        xformReader.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Paths CMake\nDESCRIPTION: This snippet defines CMake variables to specify the installation paths for resources, libraries, and Python bindings.  These paths are used later in the `install` commands to determine where the built components are placed during installation. `AL_INSTALL_PREFIX` is assumed to be defined elsewhere, specifying the root installation directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/maya/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(\n    resources_install_path\n    ${AL_INSTALL_PREFIX}/lib/usd/AL_USDMayaSchemas/resources\n)\n\nset(\n    library_install_path\n    ${AL_INSTALL_PREFIX}/lib\n)\n\nset(\n    bindings_install_path\n    ${AL_INSTALL_PREFIX}/lib/python/AL/usd/schemas/maya\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries in CMake\nDESCRIPTION: The target_link_libraries command specifies the libraries that the executable target (${PROJECT_NAME}) should link against. The PRIVATE keyword indicates that these libraries are only needed for building this specific target and not exposed to other targets linking against it. It links mayaUsdUI and Qt modules (Core, Gui, Widgets).\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/ui/importDialogDemo/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${PROJECT_NAME}\n    PRIVATE\n        mayaUsdUI\n\t\tQt::Core\n\t\tQt::Gui\n\t\tQt::Widgets\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for AL_USDMayaSchemasTest (CMake)\nDESCRIPTION: This snippet sets compile definitions for the `AL_USDMayaSchemasTest` library. These definitions control various aspects of the build, such as exporting symbols and enabling debugging features based on the build type (Debug or Release).\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/mayatest/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(AL_USDMayaSchemasTest\n    PRIVATE\n        AL_USDMAYASCHEMASTEST_EXPORTS\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:TBB_USE_DEBUG>\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_DEBUG_PYTHON>\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_LINKING_PYTHON>\n)\n```\n\n----------------------------------------\n\nTITLE: Target Sources Configuration (CMake)\nDESCRIPTION: Configures the target sources for the ${PROJECT_NAME} using the `target_sources` CMake command.  This command specifies the C++ source files that are part of the project's build process. These source files are compiled and linked to create the final executable or library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/pxrUsdMayaGL/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        batchRenderer.cpp\n        debugCodes.cpp\n        hdImagingShapeDrawOverride.cpp\n        hdImagingShapeUI.cpp\n        instancerImager.cpp\n        instancerShapeAdapter.cpp\n        proxyDrawOverride.cpp\n        proxyShapeDelegate.cpp\n        proxyShapeUI.cpp\n        sceneDelegate.cpp\n        shapeAdapter.cpp\n        softSelectHelper.cpp\n        usdProxyShapeAdapter.cpp\n        userData.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MEL File for Maya Attribute Editor\nDESCRIPTION: This snippet configures the `AEusdPreviewSurfaceTemplate.mel` file. The `configure_file` command takes the source file, processes it (likely replacing variables), and writes the output to `AEpxrUsdPreviewSurfaceTemplate.mel` in the build directory. This MEL file is used to customize the appearance and functionality of the Attribute Editor for the pxrUsdPreviewSurface in Maya.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/maya/plugin/pxrUsdPreviewSurface/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\"${PROJECT_SOURCE_DIR}/lib/usd/pxrUsdPreviewSurface/AEusdPreviewSurfaceTemplate.mel\"\n               \"${CMAKE_CURRENT_BINARY_DIR}/AEpxrUsdPreviewSurfaceTemplate.mel\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Python Test Script Files with CMake\nDESCRIPTION: This CMake snippet defines a list of Python test scripts and conditionally appends more scripts if MaterialX support is enabled and UFE v3 features are available. It uses `set` and `list(APPEND ...)` CMake commands to manage the list of test files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/utils/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TEST_SCRIPT_FILES\n    testBlockSceneModificationContext.py\n    testDiagnosticDelegate.py\n    testUtilsEditability.py\n)\n\nif(CMAKE_WANT_MATERIALX_BUILD AND CMAKE_UFE_V3_FEATURES_AVAILABLE)\n    list(APPEND TEST_SCRIPT_FILES\n        testMaterialCommands.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Simple Command Edit Router in Python\nDESCRIPTION: This Python code snippet demonstrates a simple edit router implementation that routes edits to the session layer of the stage containing the prim. It retrieves the prim from the context, checks if it exists, and then sets the 'layer' in the routingData dictionary to the identifier of the session layer.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/EditRouting.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef routeToSessionLayer(context, routingData):\n    '''\n    Edit router implementation for that routes to the session layer\n    of the stage that contains the prim.\n    '''\n    prim = context.get('prim')\n    if prim is None:\n        print('Prim not in context')\n        return\n\n    routingData['layer'] = prim.GetStage().GetSessionLayer().identifier\n\n```\n\n----------------------------------------\n\nTITLE: Set Target Properties (CMake)\nDESCRIPTION: This snippet sets target-specific properties, particularly the file extension, based on the operating system. On Windows, the suffix is set to \".mll\", while on macOS, it's set to \".bundle\".  This ensures the library is built with the correct extension for each platform.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaTestPlugin/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_WINDOWS)\n    set_target_properties(${TARGET_NAME} PROPERTIES SUFFIX \".mll\")\nelif(IS_MACOSX)\n    set_target_properties(${TARGET_NAME} PROPERTIES PREFIX \"\" SUFFIX \".bundle\")\nelif(IS_LINUX)\n    set_target_properties(${TARGET_NAME} PROPERTIES PREFIX \"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Specifying Target Sources in CMake\nDESCRIPTION: This snippet specifies the source files that are compiled to create the 'mayaUsdPlugin' library. The PRIVATE keyword indicates that these sources are only used for building this target.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/plugin/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${TARGET_NAME} \n    PRIVATE\n        plugin.cpp\n        adskImportCommand.cpp\n        adskExportCommand.cpp\n        adskListJobContextsCommand.cpp\n        adskListShadingModesCommand.cpp\n        adskStageLoadUnloadCommands.cpp\n        geomNode.cpp\n        importTranslator.cpp\n        exportTranslator.cpp\n        ProxyShape.cpp\n        ProxyShapeListener.cpp\n        mayaUsdInfoCommand.cpp\n        gizmoShape.cpp\n        gizmoGeometryOverride.cpp\n        drawUtils.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Set Target Sources for MaterialX Shader Generation\nDESCRIPTION: Defines the source files used for generating MaterialX shaders within the Maya-USD project. These files include generators, implementations, utilities, and node definitions essential for the shader generation process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/MaterialXGenOgsXml/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        GlslFragmentGenerator.cpp\n        GlslOcioNodeImpl.cpp\n        OgsFragment.cpp\n        OgsXmlGenerator.cpp\n        ShaderGenUtil.cpp\n        LobePruner.cpp\n        Nodes/SurfaceNodeMaya.cpp\n        Nodes/TexcoordNodeMaya.cpp\n        Nodes/MayaDarkClosureNode.cpp\n        PugiXML/pugixml.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Installing USD Plugin Resources CMake\nDESCRIPTION: This snippet installs the USD plugin resources. It calculates the relative path from the resources installation directory to the library installation directory using `file(RELATIVE_PATH)`. Then, it configures the `plugInfo.json` file (overwriting it with the version generated earlier). Finally, it installs the `plugInfo.json` and `generatedSchema.usda` files to the resources installation directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/maya/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfile(RELATIVE_PATH\n    SCHEMAS_LIBRARY_DIR\n    ${resources_install_path}/..\n    ${library_install_path}\n\n)\n\n# Bake relative path\nconfigure_file(\n    ${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\n    ${CMAKE_CURRENT_BINARY_DIR}\n)\n\ninstall(\n    FILES ${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\n    DESTINATION ${resources_install_path}\n)\n\ninstall(\n    FILES ${CMAKE_CURRENT_BINARY_DIR}/generatedSchema.usda \n    DESTINATION ${resources_install_path}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Devtoolset-6 on CentOS\nDESCRIPTION: This snippet provides instructions for installing Devtoolset-6 on CentOS, which includes GCC 6. It involves adding a repository, importing a key, installing the devtoolset, and disabling the vault after installation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/build.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n# download the packages, install may fail with \"no public key found\"\nsudo yum-config-manager --add-repo=http://vault.centos.org/7.6.1810/sclo/x86_64/rh/\n\n# to fix \"no public key found\"\ncd /etc/pki/rpm-gpg\nls # confirm RPM-GPG-KEY-CentOS-SIG-SCLo exists\nsudo rpm --import RPM-GPG-KEY-CentOS-SIG-SCLo\nrpm -qa gpg* # confirm key with substring f2ee9d55 exists\n\n# to install devtoolset-6\nsudo yum install devtoolset-6\n\n# disable the vault after successful install\nsudo yum-config-manager --disable vault.centos.org_7.6.1810_sclo_x86_64_rh_\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion Based on BUILD_MAYAUSD_LIBRARY in CMake\nDESCRIPTION: This CMake block conditionally adds the 'mayaUsd' and 'usd' subdirectories to the build if the BUILD_MAYAUSD_LIBRARY flag is enabled.  It ensures that these components are only built when the MayaUsd library is configured to be built.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_MAYAUSD_LIBRARY)\n    add_subdirectory(mayaUsd)\n    add_subdirectory(usd)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install Header Files - CMake\nDESCRIPTION: This snippet installs the header files specified in utils_event_headers to the AL/event subdirectory under the installation prefix. The AL_INSTALL_PREFIX variable defines the root installation directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/utils/AL/event/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninstall( FILES ${utils_event_headers}\n          DESTINATION ${AL_INSTALL_PREFIX}/include/AL/event )\n```\n\n----------------------------------------\n\nTITLE: Appending Command Headers to List CMake\nDESCRIPTION: Appends a list of header files related to Maya commands in AL_USDMaya to the AL_usdmaya_cmds_headers list. These headers define the interfaces for commands such as creating USD prims, debugging, handling events, and managing layers.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND AL_usdmaya_cmds_headers\n        AL/usdmaya/cmds/CreateUsdPrim.h\n        AL/usdmaya/cmds/DebugCommands.h\n        AL/usdmaya/cmds/EventCommand.h\n        AL/usdmaya/cmds/LayerCommands.h\n        AL/usdmaya/cmds/ListTranslators.h\n        AL/usdmaya/cmds/ProxyShapeCommands.h\n        AL/usdmaya/cmds/ProxyShapePostLoadProcess.h\n        AL/usdmaya/cmds/RendererCommands.h\n        AL/usdmaya/cmds/SyncFileIOGui.h\n        AL/usdmaya/cmds/UnloadPrim.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Include Directories\nDESCRIPTION: Specifies the include directories that the compiler should search for header files. These directories are added as public include directories, meaning they are also available to other targets that depend on this one.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/maya/tests/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${TARGET_NAME}\n    PUBLIC\n        ${PROJECT_SOURCE_DIR}/schemas\n        ${GTEST_INCLUDE_DIRS}\n        ${PXR_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Appending FileIO Sources to List CMake\nDESCRIPTION: Appends a list of source files related to file I/O operations in AL_USDMaya to the AL_usdmaya_fileio_source list. These source files implement the functionality defined in the corresponding header files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND AL_usdmaya_fileio_source\n        AL/usdmaya/fileio/AnimationTranslator.cpp\n        AL/usdmaya/fileio/Export.cpp\n        AL/usdmaya/fileio/ExportTranslator.cpp\n        AL/usdmaya/fileio/Import.cpp\n        AL/usdmaya/fileio/ImportTranslator.cpp\n        AL/usdmaya/fileio/NodeFactory.cpp\n        AL/usdmaya/fileio/SchemaPrims.cpp\n        AL/usdmaya/fileio/TransformIterator.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Target Sources Definition (Python Extension)\nDESCRIPTION: This snippet defines the target sources for the Python extension library.  It specifies a list of C++ files to be compiled into the library, providing the core functionality and bindings for the Python module.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/python/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PYTHON_TARGET_NAME} \n    PRIVATE\n        module.cpp\n        pythonObjectRegistry.cpp\n        wrapSparseValueWriter.cpp\n        wrapAdaptor.cpp\n        wrapBlockSceneModificationContext.cpp\n        wrapColorSpace.cpp\n        wrapConverter.cpp\n        wrapCopyLayerPrims.cpp\n        wrapDiagnosticDelegate.cpp\n        wrapLayerLocking.cpp\n        wrapLoadRules.cpp\n        wrapMeshWriteUtils.cpp\n        wrapOpUndoItem.cpp\n        wrapQuery.cpp\n        wrapReadUtil.cpp\n        wrapRoundTripUtil.cpp\n        wrapStageCache.cpp\n        wrapTokens.cpp\n        wrapTranslatorUtil.cpp\n        wrapUsdUndoManager.cpp\n        wrapUserTaggedAttribute.cpp\n        wrapUtil.cpp\n        wrapWriteUtil.cpp\n        wrapXformStack.cpp\n\n        wrapOpenMaya.cpp\n        wrapPrimReader.cpp\n        wrapPrimWriter.cpp\n        wrapExportChaser.cpp\n        wrapImportChaser.cpp\n        wrapJobContextRegistry.cpp\n        wrapSchemaApiAdaptor.cpp\n        wrapShadingUtil.cpp\n        wrapShadingMode.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Promote Header List\nDESCRIPTION: Promotes the header list to a specific subdirectory for installation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/MaterialXGenOgsXml/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_promoteHeaderList(HEADERS ${HEADERS} SUBDIR render/MaterialXGenOgsXml)\n```\n\n----------------------------------------\n\nTITLE: Including CMake Modules and Macros\nDESCRIPTION: This snippet configures the `CMAKE_MODULE_PATH` variable to include custom CMake modules and macros located in the project's source directory.  These modules and macros likely provide project-specific functionalities for the build process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}\n    ${PROJECT_SOURCE_DIR}/cmake/modules\n    ${CMAKE_CURRENT_SOURCE_DIR}/cmake/macros\n)\n```\n\n----------------------------------------\n\nTITLE: Installing AL_USDMayaSchemasTest Library (CMake)\nDESCRIPTION: This snippet installs the `AL_USDMayaSchemasTest` library to the specified destination. It uses the `install` command to copy the library and runtime files to the `library_install_path`.  It also handles installing the PDB file on MSVC.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/mayatest/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(\n    TARGETS AL_USDMayaSchemasTest\n    LIBRARY\n    DESTINATION ${library_install_path}\n    RUNTIME\n    DESTINATION ${library_install_path}\n)\nif(MSVC)\n    install(FILES $<TARGET_PDB_FILE:AL_USDMayaSchemasTest> DESTINATION ${library_install_path} OPTIONAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Applying Python Module Properties\nDESCRIPTION: This snippet applies properties specific to Python modules, likely using a custom CMake function `set_python_module_property`, configuring the Python module.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/schemas/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset_python_module_property(${TARGET_PYTHON_NAME})\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Inclusion based on UFE Materials Support (Python)\nDESCRIPTION: This CMake snippet conditionally appends `testMaterial.py` to the `TEST_SCRIPT_FILES` list if the `UFE_MATERIALS_SUPPORT` variable is set. This includes tests related to UFE Materials.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/ufe/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif (UFE_MATERIALS_SUPPORT)\n    list(APPEND TEST_SCRIPT_FILES\n        testMaterial.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Build Arguments for MayaUSD with CMake\nDESCRIPTION: This code snippet demonstrates how to pass CMake variables to the build system using the `--build-args` flag. It shows how to enable building the Autodesk plugin, disable the Pixar plugin, and disable building tests.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/build.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n--build-args=\"-DBUILD_ADSK_PLUGIN=ON,-DBUILD_PXR_PLUGIN=OFF,-DBUILD_TESTS=OFF\"\n```\n\n----------------------------------------\n\nTITLE: Defining Node Type and ID using AL_MAYA_DEFINE_NODE (C++)\nDESCRIPTION: This code uses the AL_MAYA_DEFINE_NODE macro to define the node's type name, unique type ID, and a simple creator function. The macro takes the node class name and a hexadecimal ID as arguments, automatically creating the necessary static members and the creator function. This is a core step for registering the custom node with Maya.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/developer.md#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nAL_MAYA_DEFINE_NODE(MyMayaNode, 0x12345);\n```\n\n----------------------------------------\n\nTITLE: Setting compile definitions for AL_USDMayaUtils\nDESCRIPTION: This snippet sets compile definitions for the AL_USDMayaUtils library based on platform (macOS, Linux), build type (Debug), and an export definition. These definitions are used during compilation to enable or disable specific features or behaviors.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdmayautils/AL/usdmaya/utils/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${USDMAYA_UTILS_LIBRARY_NAME}\n    PRIVATE\n        $<$<BOOL:${IS_MACOSX}>:OSMac_>\n        $<$<BOOL:${IS_LINUX}>:LINUX>\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:TBB_USE_DEBUG>\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_DEBUG_PYTHON>\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_LINKING_PYTHON>\n        AL_USDMAYA_UTILS_EXPORT\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Rig Schema Test with CMake\nDESCRIPTION: This snippet defines and adds a test for the custom rig schema generated in the previous step. It sets the `PXR_OVERRIDE_PLUGINPATH_NAME` environment variable to point to the generated schema files. The test uses `mayaUsd_get_unittest_target` and `mayaUsd_add_test` functions.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/fileio/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_UFE_V3_FEATURES_AVAILABLE)\n    set(TEST_CUSTOM_RIG testCustomRig.py)\n    mayaUsd_get_unittest_target(target ${TEST_CUSTOM_RIG})\n    mayaUsd_add_test(${target}\n        PYTHON_MODULE ${target}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        ENV\n            \"${PXR_OVERRIDE_PLUGINPATH_NAME}=${CMAKE_CURRENT_BINARY_DIR}/UsdCustomRigSchema/\"\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define Target Sources CMake\nDESCRIPTION: This CMake snippet defines the source files that will be compiled into a target library or executable. The `target_sources` command associates a list of C++ source files with a specified target, which is defined by the `${PROJECT_NAME}` variable. These source files constitute the implementation of the undo functionality within the Maya-USD project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/undo/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        UsdUndoBlock.cpp\n        UsdUndoManager.cpp\n        UsdUndoStateDelegate.cpp\n        UsdUndoableItem.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: List Script Sources (CMake)\nDESCRIPTION: This CMake code snippet appends a list of MEL and Python scripts to the `scripts_src` variable. This variable is likely used later for installing these scripts into the Maya environment.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/scripts/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND scripts_src\n    mayaUsdTranslatorImport.mel\n    mayaUsdTranslatorExport.mel\n    mayaUsd_exportHelpers.py\n    mayaUSDRegisterStrings.mel\n    mayaUSDRegisterStrings.py\n    AEmayaUsdProxyShapeBaseTemplate.mel\n    AEmayaUsdProxyShapeTemplate.mel\n    AETemplateHelpers.py\n    mayaUsdMenu.mel\n    mayaUsdMenu.py\n    mayaUsd_createStageFromFile.mel\n    mayaUsd_createStageWithNewLayer.py\n    mayaUsd_createStageFromAsset.mel\n    mayaUsd_imageFileDialogs.mel\n    mayaUsd_layerEditorFileDialogs.mel\n    mayaUsd_fileOptions.mel\n    mayaUsd_pluginUICreation.mel\n    mayaUsd_pluginUIDeletion.mel\n    mayaUsd_pluginBatchLoad.mel\n    mayaUsd_pluginBatchUnload.mel\n    mayaUsd_preferenceTab.mel\n    mayaUsd_selectionUtils.py\n    mayaUsd_USDRootFileRelative.py\n    usdFileSaveOptions.mel\n    USDMenuProc.mel\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files (CMake)\nDESCRIPTION: Lists the header files associated with the maya_utils and maya_event components. These lists are later used to install these header files in the appropriate include directories.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND maya_utils_headers\n    utils/Api.h\n    utils/CommandGuiHelper.h\n    utils/FileTranslatorBase.h\n    utils/FileTranslatorOptions.h\n    utils/ForwardDeclares.h\n    utils/MayaHelperMacros.h\n    utils/MenuBuilder.h\n    utils/MObjectMap.h\n    utils/NodeHelper.h\n    utils/Utils.h\n    utils/DebugCodes.h\n    utils/PluginTranslatorOptions.h\n)\n\nlist(APPEND maya_event_headers\n    event/MayaEventManager.h\n    event/Api.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Target Sources CMake\nDESCRIPTION: Defines the source files that will be compiled into the target library `${PROJECT_NAME}`. These source files implement shading mode display color, exporter, importer, PxrRis shading, registry, symmetric shader reader, and writer functionalities.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/shading/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        shadingModeDisplayColor.cpp\n        shadingModeExporter.cpp\n        shadingModeExporterContext.cpp\n        shadingModeImporter.cpp\n        shadingModePxrRis.cpp\n        shadingModeRegistry.cpp\n        shadingModeUseRegistry.cpp\n        symmetricShaderReader.cpp\n        symmetricShaderWriter.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files in CMake\nDESCRIPTION: This snippet installs the listed header files to a specific destination directory within the installation prefix. The destination path is constructed using the `CMAKE_INSTALL_PREFIX` variable and the project name. This step ensures that the necessary header files are available after the project is installed.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/ui/importDialog/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES ${HEADERS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/ui\n)\n```\n\n----------------------------------------\n\nTITLE: Including Public CMake Module and Setting up Python\nDESCRIPTION: This snippet includes a module named `Public`, which likely contains common build configurations and functions used across the project. It also calls `pxr_setup_python()`, a custom function to configure Python environment for the build.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(Public)\npxr_setup_python()\n```\n\n----------------------------------------\n\nTITLE: CMake Add Subdirectory\nDESCRIPTION: Adds the 'plugin' subdirectory to the CMake build process.  This command instructs CMake to process the CMakeLists.txt file present within the specified directory and incorporate its contents into the overall build configuration. The plugin subdirectory likely contains source code, headers, and other resources related to a plugin component.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(plugin)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Targets for Material Scope Scripts\nDESCRIPTION: This CMake snippet iterates through the TEST_SCRIPT_FILES_WITH_MATERIAL_SCOPE, creates test targets, and configures them similarly to the other tests, but it omits the USD_FORCE_DEFAULT_MATERIALS_SCOPE_NAME environment variable.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/translators/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(script ${TEST_SCRIPT_FILES_WITH_MATERIAL_SCOPE})\n    mayaUsd_get_unittest_target(target ${script})\n    mayaUsd_add_test(${target}\n        PYTHON_MODULE ${target}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        ENV\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n    )\n\n    # Add a ctest label to these tests for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS translators)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Header Promotion using CMake Macro\nDESCRIPTION: This CMake snippet uses a custom macro, `mayaUsd_promoteHeaderList`, to promote the listed header files. This promotion step likely prepares the headers for installation or for use in generating documentation. The BASEDIR argument specifies the base directory where the headers are located relative to the target.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/hdMaya/delegates/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_promoteHeaderList( \n    HEADERS\n        ${HEADERS}\n    BASEDIR\n        ${TARGET_NAME}/delegates\n)\n```\n\n----------------------------------------\n\nTITLE: Appending FileIO Translator Sources to List CMake\nDESCRIPTION: Appends a list of source files related to file I/O translators in AL_USDMaya to the AL_usdmaya_fileio_translators_source list. These source files implement the translators defined in the corresponding header files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND AL_usdmaya_fileio_translators_source\n        AL/usdmaya/fileio/translators/DagNodeTranslator.cpp\n        AL/usdmaya/fileio/translators/DgNodeTranslator.cpp\n        AL/usdmaya/fileio/translators/TransformTranslator.cpp\n        AL/usdmaya/fileio/translators/TranslatorBase.cpp\n        AL/usdmaya/fileio/translators/TranslatorContext.cpp\n        AL/usdmaya/fileio/translators/TranslatorTestPlugin.cpp\n        AL/usdmaya/fileio/translators/TranslatorTestType.cpp\n        AL/usdmaya/fileio/translators/ExtraDataPlugin.cpp\n        AL/usdmaya/fileio/translators/TestExtraDataPlugin.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories (CMake)\nDESCRIPTION: These snippets add the \"lib\" and \"plugin\" subdirectories to the CMake build process. This ensures that the CMake build system will process the CMakeLists.txt files located within these directories.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/maya/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(lib)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(plugin)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Link Libraries (CMake)\nDESCRIPTION: This specifies the libraries that the target will be linked against. Public libraries are linked for downstream projects, while private libraries are only used within the target itself.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/pxrUsdPreviewSurface/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${TARGET_NAME}\n    PUBLIC\n        tf\n    PRIVATE\n        arch\n        gf\n        plug\n        sdf\n        vt\n        usdShade\n        ${MAYA_LIBRARIES}\n        mayaUsd\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to usdUfe\nDESCRIPTION: This snippet links the specified libraries to the usdUfe project. It links libraries from USD (gf, sdf, tf, usd, usdGeom, usdImaging, usdShade, usdUtils, vt) and the UFE library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${PROJECT_NAME}\n    PUBLIC\n        gf\n        sdf\n        tf\n        usd\n        usdGeom\n        usdImaging\n        usdShade\n        usdUtils\n        vt\n        ${UFE_LIBRARY}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Tests Conditionally (Camera Gizmo Support)\nDESCRIPTION: This snippet conditionally appends test scripts if Maya camera gizmo support is enabled. It adds testVP2RenderDelegateLights.py and testVP2RenderDelegateCameras.py to the list of test scripts.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/render/vp2RenderDelegate/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(MAYA_CAMERA_GIZMO_SUPPORT)\n    list(APPEND TEST_SCRIPT_FILES_LAMBERT\n        testVP2RenderDelegateLights.py\n        testVP2RenderDelegateCameras.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configure PlugInfo JSON CMake\nDESCRIPTION: Configures the plugInfo.json file, which provides metadata about the plugin. This metadata is used by USD to discover and load the plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(libFile ${CMAKE_SHARED_LIBRARY_PREFIX}${LIBRARY_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX})\nset(PLUG_INFO_RESOURCE_PATH \"resources\")\nset(PLUG_INFO_ROOT \"..\")\nset(PLUG_INFO_PLUGIN_NAME \"pxr.${LIBRARY_NAME}\")\nset(PLUG_INFO_LIBRARY_PATH \"../../${libFile}\")\nconfigure_file(\n    plugInfo.json\n    ${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\n)\n```\n\n----------------------------------------\n\nTITLE: Install Python Module CMake\nDESCRIPTION: Installs the Python module by copying the initialization files to the appropriate location within the installation directory. This makes the module available for use after installation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(INPUT_FILE ${PY_INIT_FILES})\n  string(REPLACE ${CMAKE_CURRENT_SOURCE_DIR} ${AL_INSTALL_PREFIX}/lib/python OUTPUT_FILE ${INPUT_FILE})\n  get_filename_component(OUTPUT_PATH ${OUTPUT_FILE} DIRECTORY)\n  install(FILES\n        ${INPUT_FILE}  # .py files\n      DESTINATION ${OUTPUT_PATH}\n  )\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Path\nDESCRIPTION: This snippet sets the CMake module path to include the `cmake/modules` directory in the project source directory. This allows CMake to find custom modules used by the project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_MODULE_PATH\n    ${CMAKE_MODULE_PATH}\n    ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Locations\nDESCRIPTION: Sets variables for the include locations of various subdirectories, such as utils, mayautils, and usdmayautils.  These locations are used to ensure the compiler can find the necessary header files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(EVENTS_INCLUDE_LOCATION ${CMAKE_CURRENT_LIST_DIR}/utils)\nset(MAYAUTILS_INCLUDE_LOCATION ${CMAKE_CURRENT_LIST_DIR}/mayautils)\nset(USDMAYAUTILS_INCLUDE_LOCATION ${CMAKE_CURRENT_LIST_DIR}/usdmayautils)\nset(MAYATEST_INCLUDE_LOCATION ${CMAKE_CURRENT_LIST_DIR}/mayatest)\nset(USDTRANSACTION_INCLUDE_LOCATION ${CMAKE_CURRENT_LIST_DIR}/usdtransaction)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Subdirectory (CMake)\nDESCRIPTION: This snippet sets the PXR_INSTALL_SUBDIR variable to \"maya\" using the CMake set command. This likely specifies that the Maya-USD project will be installed within a \"maya\" subdirectory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/maya/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_INSTALL_SUBDIR \"maya\")\n```\n\n----------------------------------------\n\nTITLE: Setting Python Module Properties\nDESCRIPTION: This snippet calls a custom function 'set_python_module_property' to configure additional properties specific to Python modules for the target.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/python/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset_python_module_property(${PYTHON_TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Promoted Header List - CMake\nDESCRIPTION: This snippet promotes the header files defined in the HEADERS variable. It uses the mayaUsd_promoteHeaderList macro to copy the header files to a location where they can be easily included by other modules. BASEDIR specifies the relative path to the header files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/utils/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_promoteHeaderList(\n    HEADERS\n        ${HEADERS}\n    BASEDIR\n        ${PROJECT_NAME}/fileio/utils\n)\n```\n\n----------------------------------------\n\nTITLE: Install Header Files (CMake)\nDESCRIPTION: Installs the specified header files to a designated destination during the project's installation process.  The `install` command copies the header files to the `${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/render/pxrUsdMayaGL` directory. This ensures that the headers are available to other projects that depend on this library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/pxrUsdMayaGL/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${HEADERS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/render/pxrUsdMayaGL\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files\nDESCRIPTION: This snippet defines a list of header files to be used in the project. This list is then used to install the headers in the correct location.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n    Global.h\n    SetVariantSelectionCommand.h\n    StagesSubject.h\n    UfeNotifGuard.h\n    UfeVersionCompat.h\n    UsdAttribute.h\n    UsdAttributeHolder.h\n    UsdAttributes.h\n    UsdAttributesHandler.h\n    UsdCamera.h\n    UsdCameraHandler.h\n    UsdContextOps.h\n    UsdContextOpsHandler.h\n    UsdHierarchy.h\n    UsdHierarchyHandler.h\n    UsdObject3d.h\n    UsdObject3dHandler.h\n    UsdRootChildHierarchy.h\n    UsdSceneItem.h\n    UsdUIInfoHandler.h\n    UsdUndoAddNewPrimCommand.h\n    UsdUndoAddPayloadCommand.h\n    UsdUndoAddRefOrPayloadCommand.h\n    UsdUndoAddReferenceCommand.h\n    UsdUndoClearPayloadsCommand.h\n    UsdUndoClearReferencesCommand.h\n    UsdUndoCreateGroupCommand.h\n    UsdUndoInsertChildCommand.h\n    UsdUndoLongDurationCommand.h\n    UsdUndoPayloadCommand.h\n    UsdUndoReloadRefCommand.h\n    UsdUndoReorderCommand.h\n    UsdUndoSelectAfterCommand.h\n    UsdUndoSetKindCommand.h\n    UsdUndoToggleActiveCommand.h\n    UsdUndoToggleInstanceableCommand.h\n    UsdUndoVisibleCommand.h\n    UsdUndoSetDefaultPrimCommand.h\n    UsdUndoClearDefaultPrimCommand.h\n    UsdUndoableCommand.h\n    Utils.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Search Paths for Python Bindings\nDESCRIPTION: This snippet sets up runtime search paths for the Python bindings library on macOS and Linux, likely to ensure that the library can find its dependencies at runtime.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/schemas/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX)\n    mayaUsd_init_rpath(rpath mayaUsd)\n    mayaUsd_add_rpath(rpath \"../../../\")\n    mayaUsd_install_rpath(rpath ${TARGET_PYTHON_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing the __init__.py file\nDESCRIPTION: This snippet installs the `__init__.py` file, making the installed directory a valid Python package. This is essential for Python to recognize the module.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/schemas/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES __init__.py\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/python/mayaUsd/${SCHEMAS_LIBRARY_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: MayaUSD PlugInfo JSON Configuration\nDESCRIPTION: This JSON file configures MayaUSD to locate the USD plugin. The `PlugPath` property specifies the relative path to the folder containing the `plugInfo.json` file.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/tutorials/import-export-plugin/README.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"MayaUsdIncludes\": [\n        {\n            \"PlugPath\":\"resources\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Header List Definition CMake\nDESCRIPTION: Defines the header files required for the Maya USD adapter. These headers declare the interfaces and data structures used within the adapter library. This helps in managing dependencies and ensuring consistency across different parts of the codebase.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/hdMaya/adapters/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n    adapter.h\n    adapterDebugCodes.h\n    adapterRegistry.h\n    cameraAdapter.h\n    constantShadowMatrix.h\n    dagAdapter.h\n    lightAdapter.h\n    proxyAdapter.h\n    materialAdapter.h\n    materialNetworkConverter.h\n    mayaAttrs.h\n    shapeAdapter.h\n    tokens.h\n)\n```\n\n----------------------------------------\n\nTITLE: Install the target and headers\nDESCRIPTION: This snippet installs the built target (the mtoh plugin) and the associated header files to specific destinations under the CMAKE_INSTALL_PREFIX. It also includes an optional installation of the PDB file for Windows builds.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/mayaToHydra/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${TARGET_NAME}\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/maya)\n\ninstall(FILES ${HEADERS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/render/mayaToHydra\n)\n\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:${TARGET_NAME}> \n            DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/maya OPTIONAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Python Test Script Files with CMake\nDESCRIPTION: This snippet defines a variable `TEST_SCRIPT_FILES` containing a list of Python test script file names. Additional test scripts are conditionally appended to the list depending on the CMake features available (CMAKE_UFE_V3_FEATURES_AVAILABLE and CMAKE_WANT_VALIDATE_UNDO_ITEM).\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/undo/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TEST_SCRIPT_FILES\n    testUsdUndoManager.py\n)\n\nif(CMAKE_UFE_V3_FEATURES_AVAILABLE)\n    list(APPEND TEST_SCRIPT_FILES\n        testOpUndoItemList.py\n    )\n    if(CMAKE_WANT_VALIDATE_UNDO_ITEM)\n        list(APPEND TEST_SCRIPT_FILES\n            testOpUndoItem.py\n        )\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install Python Module Structure for UFE AE\nDESCRIPTION: This snippet installs `__init__.py` files to create Python modules, and it installs the `ae_utils.py` script. The modules are created at different directory levels to support the UFE AE functionality within Maya USD.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/resources/ae/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES __init__.py DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/python/ufe_ae/usd)\ninstall(FILES ae_utils.py DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/python/ufe_ae/usd)\ninstall(FILES __init__.py DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/python/ufe_ae/usd/nodes)\n```\n\n----------------------------------------\n\nTITLE: Setting Undo Label with Python Decorator\nDESCRIPTION: This Python code defines a decorator `setUndoLabel` that sets the function metadata to provide a nice label in Maya's undo system. It modifies the `__module__` and `__name__` properties of the function to control the undo label.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/undo/README-Nice-Undo.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef setUndoLabel(label):\n    '''\n    This function decorator sets the function metadata so that it has\n    a nice label in the Maya undo system and UI.\n    '''\n    def wrap(func):\n        nonBreakSpace = '\\xa0'\n        func.__module__ = label.replace(' ', nonBreakSpace)\n        func.__name__ = ''\n        return func\n    return wrap\n\n# Example of using the decorator.\n@setUndoLabel(\"nice label\")\ndef example(c):\n    print(c)\n```\n\n----------------------------------------\n\nTITLE: Importing USD with Frame Range (Demo1)\nDESCRIPTION: This command imports a USD file containing an ALFrameRange prim with specified range and currentFrame values.  The command sets the animation and visible range in Maya's RangeSlider and the current frame in the TimeSlider according to the USD file. Replace `<PATH_TO_ASSETS_FOLDER_IN_THIS_DIRECTORY>/frame_range_prim.usda` with the actual path to the USD file.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/frameRanges/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncmds.AL_usdmaya_ProxyShapeImport(file=\"<PATH_TO_ASSETS_FOLDER_IN_THIS_DIRECTORY>/frame_range_prim.usda\")\n```\n\n----------------------------------------\n\nTITLE: Copying and Installing __init__.py - CMake\nDESCRIPTION: Copies the `__init__.py` file to a temporary directory and then installs it to the designated location within the Python library structure. This ensures that the Python package is properly initialized.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_31\n\nLANGUAGE: cmake\nCODE:\n```\nexecute_process(COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/__init__.py ${CMAKE_CURRENT_BINARY_DIR}/lib/python/${arDirPath}/__init__.py)\ninstall(FILES\n        ${CMAKE_CURRENT_BINARY_DIR}/lib/python/${arDirPath}/__init__.py\n    DESTINATION\n        ${AL_INSTALL_PREFIX}/lib/python/${arDirPath}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Directory Path in CMake\nDESCRIPTION: This snippet sets the DIRECTORY_PATH variable to specify the location of the PxrUsd translator files within the AL/usdmaya file structure. This variable can be used in subsequent configurations or build steps to reference the correct directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/pxrUsdTranslators/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(DIRECTORY_PATH AL/usdmaya/fileio/translators/pxrUsd)\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion Based on BUILD_LOOKDEVXUSD_LIBRARY in CMake\nDESCRIPTION: This CMake block conditionally adds the 'lookdevXUsd' subdirectory to the build process when the BUILD_LOOKDEVXUSD_LIBRARY flag is enabled. This allows for selective building of the lookdevXUsd component.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_LOOKDEVXUSD_LIBRARY)\n    add_subdirectory(lookdevXUsd)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Header Files List (CMake)\nDESCRIPTION: Defines a list of header files to be managed by CMake. These header files contain declarations and definitions used throughout the project's source code.  The `set` command creates a CMake variable named `HEADERS` and assigns it the list of header files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/pxrUsdMayaGL/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    batchRenderer.h\n    debugCodes.h\n    hdImagingShapeDrawOverride.h\n    hdImagingShapeUI.h\n    instancerImager.h\n    instancerShapeAdapter.h\n    proxyDrawOverride.h\n    proxyShapeUI.h\n    renderParams.h\n    sceneDelegate.h\n    shapeAdapter.h\n    softSelectHelper.h\n    usdProxyShapeAdapter.h\n    userData.h\n)\n```\n\n----------------------------------------\n\nTITLE: Target Sources Configuration - CMake\nDESCRIPTION: This snippet configures the source files for the ${PROJECT_NAME} target. It uses the target_sources command to specify the private source files to be compiled into the library. The conditional if statement adds additional source files based on the UFE_TRIE_NODE_HAS_CHILDREN_COMPONENTS_ACCESSOR flag.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/utils/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PROJECT_NAME}\n    PRIVATE\n        adaptor.cpp\n        jointWriteUtils.cpp\n        meshReadUtils.cpp\n        meshWriteUtils.cpp\n        readUtil.cpp\n        roundTripUtil.cpp\n        shadingUtil.cpp\n        userTaggedAttribute.cpp\n        writeUtil.cpp\n        xformStack.cpp\n)\n\nif(UFE_TRIE_NODE_HAS_CHILDREN_COMPONENTS_ACCESSOR)\n    target_sources(${PROJECT_NAME}\n        PRIVATE\n            orphanedNodesManagerUtil.cpp\n            proxyAccessorUtil.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Optionally Building PXR Translators in CMake\nDESCRIPTION: This CMake snippet conditionally builds a translator for the pxrUsd Maya plugin. It checks if the `BUILD_USDMAYA_PXR_TRANSLATORS` option is enabled and, if so, adds a subdirectory `pxrUsdTranslators` to the build.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\noption(BUILD_USDMAYA_PXR_TRANSLATORS\n    \"Build a translator for pxrUsd maya plugin, that allows it to export AL_usdmaya_ProxyShapes as references when usdExport is called.\"\n    ON)\n    \nif(BUILD_USDMAYA_PXR_TRANSLATORS)\n    set(PXR_TRANSLATORS_PACKAGE AL_USDMayaPxrTranslators)\n    add_subdirectory(pxrUsdTranslators)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing the mayaUsd_Schemas Library\nDESCRIPTION: This snippet installs the `mayaUsd_Schemas` library, including the library itself, archives, and runtime components, to the specified destination directory `${CMAKE_INSTALL_PREFIX}/lib`. It also conditionally installs the PDB file on Windows if it exists.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/schemas/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n    TARGETS ${TARGET_NAME}\n    LIBRARY\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib\n    ARCHIVE\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib\n    RUNTIME\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib\n)\n\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:${TARGET_NAME}> DESTINATION ${CMAKE_INSTALL_PREFIX}/lib OPTIONAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Compile Definitions in CMake\nDESCRIPTION: This CMake snippet defines compile-time definitions for the `TRANSLATORS_PACKAGE` library. These definitions include platform-specific macros such as `AL_MAYA_MACROS_EXPORT`, `OSMac_`, and `LINUX`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT IS_WINDOWS)\n  target_compile_definitions(${TRANSLATORS_PACKAGE}\n      PRIVATE\n          AL_MAYA_MACROS_EXPORT\n          $<$<BOOL:${IS_MACOSX}>:OSMac_>\n          $<$<BOOL:${IS_LINUX}>:LINUX>\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for mayaUsd_Schemas\nDESCRIPTION: This snippet specifies the include directories for the `mayaUsd_Schemas` library. It adds the `${CMAKE_BINARY_DIR}/include` directory to the include path, allowing the library to find necessary header files during compilation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/schemas/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${TARGET_NAME} \n    PUBLIC\n        ${CMAKE_BINARY_DIR}/include\n)\n```\n\n----------------------------------------\n\nTITLE: Include usdMaya Subdirectory (CMake)\nDESCRIPTION: Adds the `usdMaya` directory as a subdirectory to the current CMake project.  This makes targets defined in `usdMaya/CMakeLists.txt` available in the current scope.  No specific dependencies are listed here, but the `usdMaya` subdirectory must contain a valid `CMakeLists.txt` file.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/maya/lib/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(usdMaya)\n```\n\n----------------------------------------\n\nTITLE: Installing SVG icons using CMake\nDESCRIPTION: This snippet installs SVG files related to the Maya USD plugin into the specified 'icons' directory. The destination directory is determined by the 'INSTALL_DIR_SUFFIX' variable, and files are installed using the CMake `install` command. Specific file names include 'mayaUsdProxyShape.svg'.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/icons/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"mayaUsdProxyShape.svg\"\n    DESTINATION \"${INSTALL_DIR_SUFFIX}/icons\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Maya-USD Python Test with CMake\nDESCRIPTION: This CMake code snippet uses the `mayaUsd_add_test` function to configure a Python test for Maya-USD. It defines the test name, specifies the Python module to run, and sets environment variables needed for the test's execution, including paths to plugins and libraries.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/pxrUsdTranslators/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TEST_NAME TestPxrUsdTranslators)\n\nmayaUsd_add_test(${TEST_NAME}\n    PYTHON_MODULE testPxrTranslators\n    ENV\n        \"TEST_DIR=${CMAKE_CURRENT_SOURCE_DIR}\"\n        \"${PXR_OVERRIDE_PLUGINPATH_NAME}=${ADDITIONAL_PXR_PLUGINPATH_NAME}\"\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for usdUfe\nDESCRIPTION: This snippet defines the include directories for the usdUfe project. It includes the PXR (USD) include directories, the UFE include directory, and a directory within the CMake binary directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(${PROJECT_NAME} \n    PUBLIC\n        ${PXR_INCLUDE_DIRS}\n        ${UFE_INCLUDE_DIR}\n        ${CMAKE_BINARY_DIR}/include\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for AL_USDMayaSchemasTest (CMake)\nDESCRIPTION: This snippet sets the include directories for the `AL_USDMayaSchemasTest` library. It specifies the directories where the compiler should search for header files, including the PXR include directories.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/mayatest/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(AL_USDMayaSchemasTest \n  PUBLIC\n    ${PXR_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files CMake\nDESCRIPTION: Defines the source files that are part of the ${PROJECT_NAME} target.  These source files are used to build the library or executable.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/utils/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        autoUndoCommands.cpp\n        blockSceneModificationContext.cpp\n        colorSpace.cpp\n        converter.cpp\n        copyLayerPrims.cpp\n        customLayerData.cpp\n        diagnosticDelegate.cpp\n        dynamicAttribute.cpp\n        json.cpp\n        layerLocking.cpp\n        layerMuting.cpp\n        layers.cpp\n        loadRulesAttribute.cpp\n        mayaEditRouter.cpp\n        mayaNodeObserver.cpp\n        mayaNodeTypeObserver.cpp\n        query.cpp\n        plugRegistryHelper.cpp\n        primActivation.cpp\n        progressBarScope.cpp\n        selectability.cpp\n        stageCache.cpp\n        targetLayer.cpp\n        traverseLayer.cpp\n        undoHelperCommand.cpp\n        util.cpp\n        utilDictionary.cpp\n        utilFileSystem.cpp\n        utilSerialization.cpp\n        variants.cpp\n        variantFallbacks.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Installing MEL and Python Scripts using CMake\nDESCRIPTION: This snippet installs the files listed in the `scripts_src` variable (MEL and Python scripts) to the `/lib/scripts` directory under the `CMAKE_INSTALL_PREFIX`. The `CMAKE_INSTALL_PREFIX` is defined during the CMake configuration process, specifying the root directory where the project will be installed.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/resources/scripts/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${scripts_src}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/scripts\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Target Sources (UFE v3)\nDESCRIPTION: This snippet conditionally adds additional source files to the Python extension library based on the availability of CMake UFE v3 features. It includes `wrapPrimUpdater.cpp` and `wrapPrimUpdaterManager.cpp` if `CMAKE_UFE_V3_FEATURES_AVAILABLE` is true.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/python/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_UFE_V3_FEATURES_AVAILABLE)\n    target_sources(${PYTHON_TARGET_NAME}\n        PRIVATE\n            wrapPrimUpdater.cpp\n            wrapPrimUpdaterManager.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Light API Version in OgsXmlGenerator\nDESCRIPTION: This snippet illustrates how to enable the superior or FIS environmental lighting APIs in MaterialX. The `setUseLightAPI` function controls the lighting model used during shader translation, allowing for improved illumination in recent Maya versions.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/MaterialXGenOgsXml/README.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nMaterialX::OgsXmlGenerator::setUseLightAPI(2); // For superior environmental lighting\nMaterialX::OgsXmlGenerator::setUseLightAPI(3); // For FIS environmental lighting\n```\n\n----------------------------------------\n\nTITLE: AL_usdmaya_ExportCommand - MEL Example\nDESCRIPTION: This MEL command exports a USD file using `AL_usdmaya_ExportCommand`. It specifies the file path and export options. This command is specific to the AL_USDMaya plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/MIGRATION_GUIDE.md#_snippet_10\n\nLANGUAGE: MEL\nCODE:\n```\nAL_usdmaya_ExportCommand -f \"<path/to/out/file.usd>\" ...options...\n```\n\n----------------------------------------\n\nTITLE: Installing PDB Files (Windows) with CMake\nDESCRIPTION: This CMake command conditionally installs Program Database (PDB) files on Windows. PDB files are debugging symbol files that provide debugging information. The installation is marked as optional, so its failure won't halt the overall install process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/ufe/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:${UFE_PYTHON_TARGET_NAME}> \n            DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/python/${PROJECT_NAME}/${UFE_PYTHON_MODULE_NAME} OPTIONAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Library\nDESCRIPTION: This snippet defines the project and adds a shared library target. The `add_library` command creates the shared library with the specified project name.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/lookdevXUsd/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(lookdevXUsd)\n\nadd_library(${PROJECT_NAME} SHARED)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files with CMake\nDESCRIPTION: This snippet defines a list of header files in the `HEADERS` variable using CMake's `set` command. These header files are used in the Maya USD project and will be installed to a specific directory during the installation process. The headers provide the declarations for the C++ classes and functions used in the source files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/nodes/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    hdImagingShape.h\n    layerManager.h\n    pointBasedDeformerNode.h\n    proxyAccessor.h\n    proxyShapeBase.h\n    proxyShapePlugin.h\n    proxyStageProvider.h\n    proxyShapeStageExtraData.h\n    proxyShapeListenerBase.h\n    stageData.h\n    stageNode.h\n    usdPrimProvider.h\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Headers and Resources\nDESCRIPTION: This snippet installs the header files defined in the `HEADERS` variable and the configured `plugInfo.json` file to their respective destination directories under `${CMAKE_INSTALL_PREFIX}`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/schemas/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${HEADERS}\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${TARGET_NAME}\n)\n\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/usd/${TARGET_NAME}/resources\n)\n\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/generatedSchema.usda \n        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/usd/${TARGET_NAME}/resources\n)\n```\n\n----------------------------------------\n\nTITLE: Promoting Header Files CMake\nDESCRIPTION: This code block uses the mayaUsd_promoteHeaderList macro to promote the header files specified in the HEADERS variable. This likely involves copying the headers to a location where they can be easily accessed by other parts of the project. The BASEDIR and SUBDIR parameters specify the base directory and subdirectory where the headers should be promoted to.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/trf/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_promoteHeaderList(HEADERS ${HEADERS} BASEDIR ${PROJECT_NAME} SUBDIR ufe/trf)\n```\n\n----------------------------------------\n\nTITLE: Set Edit Target with mayaUsdEditTarget - MEL\nDESCRIPTION: This MEL command sets the edit target to a specified layer for a given USD shape. The `mayaUsdEditTarget` command is used with the `-e` flag for editing and the `-et` flag to define the target layer. The shape to apply the edit target is also specified.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/MIGRATION_GUIDE.md#_snippet_7\n\nLANGUAGE: MEL\nCODE:\n```\nmayaUsdEditTarget -e -et \"target_layer_id\" \"|usdTest|usdTestShape\";\n```\n\n----------------------------------------\n\nTITLE: Promote Headers CMake\nDESCRIPTION: Promotes the defined header files to a specific directory structure within the build environment. This is crucial for making the headers accessible to other parts of the Maya USD plugin and dependent projects. The `mayaUsd_promoteHeaderList` macro manages the copy operations.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/hdMaya/adapters/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_promoteHeaderList( \n    HEADERS\n        ${HEADERS}\n    BASEDIR\n        ${TARGET_NAME}/adapters\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Selectability of a Prim in USD Maya (Python)\nDESCRIPTION: This snippet demonstrates how to set the selectability of a specific prim in a USD stage using the `maya_schemas.ModelAPI`. It retrieves the stage, finds the target prim, and sets its selectability to 'selectable'.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/selectability/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom AL import usdmaya\nfrom AL.usd.schemas import maya as maya_schemas\nstageCache = usdmaya.StageCache.Get()\nstage = stageCache.GetAllStages()[0]\ncube = stage.GetPrimAtPath(\"/root/cube\")\n\ncubeApi = maya_schemas.ModelAPI(cube)\ncubeApi.SetSelectability(maya_schemas.Tokens.selectability_selectable)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Compile Definitions CMake\nDESCRIPTION: Sets compile definitions for the target library. These definitions include platform-specific flags (OSMac_, LINUX), export macros, and the location name.  This allows the code to behave differently based on the platform and configuration.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${LIBRARY_NAME}\n    PRIVATE\n        $<$<BOOL:${IS_MACOSX}>:OSMac_>\n        $<$<BOOL:${IS_LINUX}>:LINUX>\n        AL_MAYA_MACROS_EXPORT\n        AL_USDMAYA_EXPORT\n        AL_USDMAYA_LOCATION_NAME=\"${AL_USDMAYA_LOCATION_NAME}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Install Header Files using CMake\nDESCRIPTION: This CMake snippet installs the specified header files into a designated installation directory. The `DESTINATION` variable specifies the installation path relative to the `CMAKE_INSTALL_PREFIX`, which is typically set during the CMake configuration process. These header files become part of the installable package.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/hdMaya/delegates/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${HEADERS}\n    DESTINATION \n        ${CMAKE_INSTALL_PREFIX}/include/hdMaya/delegates\n)\n```\n\n----------------------------------------\n\nTITLE: Installing AL_USDMayaUtils Library\nDESCRIPTION: This CMake code installs the compiled AL_USDMayaUtils library to the destination specified by `MAYA_UTILS_LIBRARY_LOCATION`. It handles installation for both library and runtime components.  It also conditionally installs the PDB file on Windows.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdmayautils/AL/usdmaya/utils/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${USDMAYA_UTILS_LIBRARY_NAME}\n    LIBRARY\n    DESTINATION ${MAYA_UTILS_LIBRARY_LOCATION}\n    RUNTIME\n    DESTINATION ${MAYA_UTILS_LIBRARY_LOCATION}\n)\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:${USDMAYA_UTILS_LIBRARY_NAME}> DESTINATION ${MAYA_UTILS_LIBRARY_LOCATION} OPTIONAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending Headers to CMake List\nDESCRIPTION: This snippet creates a list of header files and appends `Api.h`, `testHelpers.h`, and `testHarness.h` to the `maya_test_headers` list.  This list is later used for installing the headers.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayatest/AL/maya/test/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND maya_test_headers\n    Api.h\n    testHelpers.h\n    testHarness.h\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries - CMake\nDESCRIPTION: This snippet links the target with the specified libraries, including GTest, AL_MayaTest, and MAYAUTILS_LIBRARY_NAME.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/tests/mayaplugintest/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${TARGET_NAME}\n  PRIVATE\n      ${GTEST_LIBRARIES}\n      AL_MayaTest\n      ${MAYAUTILS_LIBRARY_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring nullApiExporter_plugInfo.json\nDESCRIPTION: Configures the `nullApiExporter_plugInfo.json` and copies it to the destination folder. This helps the plugin load correctly.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/nullApiExporter_plugInfo.json\"\n                \"${CMAKE_CURRENT_BINARY_DIR}/nullApiExporter/plugInfo.json\"\n)\n```\n\n----------------------------------------\n\nTITLE: Import USD with an import chaser using Python\nDESCRIPTION: This snippet shows how to import a USD file into Maya using `cmds.mayaUSDImport` and specify an import chaser to be executed after the initial import process. The `chaser` flag is used to specify the name of the import chaser. This chaser must be registered using `USDMAYA_DEFINE_IMPORT_CHASER_FACTORY` macro.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/commands/Readme.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncmds.mayaUSDImport(\n    file='/tmp/test.usda',\n    chaser=['info'])\n```\n\n----------------------------------------\n\nTITLE: Locking Layer in C++ (Non-Undoable)\nDESCRIPTION: This C++ snippet demonstrates how to lock a USD layer using the `MayaUsd::lockLayer` function. This method directly locks the layer without undo support. Parameters include the proxy shape path, the layer to lock, the desired lock type, and a flag to update the proxy shape attribute.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/LayerLocking.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nMayaUsd::lockLayer(proxyShapePath, layer, locktype, updateProxyShapeAttr);\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Addition in CMake\nDESCRIPTION: This snippet conditionally appends a test script to `TEST_SCRIPT_FILES` if `BUILD_PXR_PLUGIN` is enabled. This ensures that tests depending on the Pixar plugin are only included when the plugin is built.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/pxrUsdPreviewSurface/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_PXR_PLUGIN)\n    # This test uses the file \"PxrUsdPreviewSurfaceExportTest.ma\" which\n    # requires the plugin \"pxrUsdPreviewSurface\" that is built by the\n    # Pixar plugin.\n    list(APPEND TEST_SCRIPT_FILES\n        testPxrUsdPreviewSurfaceExport.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install Headers CMake\nDESCRIPTION: This snippet installs the header files defined in the `HEADERS` variable to a specific destination directory within the installation prefix. The destination path includes the project name and an 'undo' subdirectory, ensuring proper organization of the installed headers.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/undo/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${HEADERS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/undo/\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Header Appending (UFE Clipboard Support)\nDESCRIPTION: This snippet conditionally appends headers related to clipboard support to the HEADERS list if UFE_CLIPBOARD_SUPPORT is defined. It appends UsdClipboard.h, UsdClipboardCommands.h, UsdClipboardHandler.h, UsdUndoDuplicateCommand.h, and UsdUndoDuplicateSelectionCommand.h.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif (UFE_CLIPBOARD_SUPPORT)\n    list(APPEND HEADERS\n        UsdClipboard.h\n        UsdClipboardCommands.h\n        UsdClipboardHandler.h\n        UsdUndoDuplicateCommand.h\n        UsdUndoDuplicateSelectionCommand.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Open and Insert Layer with mayaUsdLayerEditor - MEL\nDESCRIPTION: This MEL command opens an existing USD layer from a specified path and inserts it as a sublayer into a parent layer at a given index. The `mayaUsdLayerEditor` command is used with the `-insertSubPath` flag to achieve this functionality.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/MIGRATION_GUIDE.md#_snippet_5\n\nLANGUAGE: MEL\nCODE:\n```\nmayaUsdLayerEditor -edit -insertSubPath 0  \"/path/to/layer/file.usd\" \"existing_parent_layer_id\";\n```\n\n----------------------------------------\n\nTITLE: Defining Target and Adding Sources (usdTestMayaPlugin)\nDESCRIPTION: This snippet defines the CMake target `usdTestMayaPlugin` as a shared library, specifies the source files (`plugin.cpp`, `mayaShaderTranslation.cpp`) that contribute to the target, and configures compilation options using the `mayaUsd_compile_config` macro. It establishes the foundational structure for building the plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TARGET_NAME usdTestMayaPlugin)\n\nadd_library(${TARGET_NAME} SHARED)\n\n# -----------------------------------------------------------------------------\n# sources\n# -----------------------------------------------------------------------------\ntarget_sources(${TARGET_NAME}\n    PRIVATE\n        plugin.cpp\n        mayaShaderTranslation.cpp\n)\n\nmayaUsd_compile_config(${TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Adding AL_USDMayaSchemas Library CMake\nDESCRIPTION: This snippet creates the `AL_USDMayaSchemas` shared library using the `add_library` command.  It specifies the source files that are compiled to create the library. It also configures the compilation settings using `mayaUsd_compile_config`, defines compiler definitions based on the build type (Debug/Release), sets include directories, and links the library against its dependencies.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/maya/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(AL_USDMayaSchemas\n    SHARED\n    ModelAPI.cpp\n    FrameRange.cpp\n    tokens.cpp\n    ModuleDeps.cpp\n)\n\n# compiler configuration\nmayaUsd_compile_config(AL_USDMayaSchemas)\n\ntarget_compile_definitions(AL_USDMayaSchemas\n    PRIVATE\n        AL_USDMAYASCHEMAS_EXPORTS\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:TBB_USE_DEBUG>\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_DEBUG_PYTHON>\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_LINKING_PYTHON>\n)\n\ntarget_include_directories(AL_USDMayaSchemas \n  PUBLIC\n    ${PXR_INCLUDE_DIRS}\n)\n\n# Hamed 2019 \n# https://stackoverflow.com/questions/25617839/undefined-reference-to-symbol-pthread-key-deleteglibc-2-2-5\nset(PTHREAD_LINK \"\")\nif(IS_LINUX)\n    set(PTHREAD_LINK -lpthread -lm)\nendif()\n\ntarget_link_libraries(AL_USDMayaSchemas ${DEPENDANT_LIBRARIES} ${PTHREAD_LINK})\n\ninstall(\n    TARGETS AL_USDMayaSchemas\n    LIBRARY\n    DESTINATION ${library_install_path}\n    RUNTIME\n    DESTINATION ${library_install_path}\n)\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:AL_USDMayaSchemas> DESTINATION ${library_install_path} OPTIONAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Python Bindings Library (CMake)\nDESCRIPTION: This snippet creates the Python bindings library, which allows Python code to interact with the C++ plugin. It specifies the source files to be compiled and linked into the library. It also calls `mayaUsd_compile_config` which is assumed to handle compiler configuration specific to MayaUSD.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/mayatest/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(${PYTHON_LIBRARY_NAME}\n    SHARED\n    module.cpp\n    wrapTokens.cpp\n    ${CMAKE_CURRENT_BINARY_DIR}/wrapExamplePolyCubeNode.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for Python CMake\nDESCRIPTION: Sets compile definitions for the Python library. Includes platform-specific flags and package name macros. Allows platform-specific behavior and defines the names the module will expose.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${PYTHON_LIBRARY_NAME}\n    PRIVATE\n        $<$<BOOL:${IS_MACOSX}>:OSMac_>\n        $<$<BOOL:${IS_LINUX}>:LINUX>\n        MFB_PACKAGE_NAME=${LIBRARY_NAME}\n        MFB_ALT_PACKAGE_NAME=${LIBRARY_NAME}\n        MFB_PACKAGE_MODULE=usdmaya\n)\n```\n\n----------------------------------------\n\nTITLE: Namespace Name Example C++\nDESCRIPTION: This code snippet demonstrates the naming convention for namespaces within the maya-usd project. Namespace names should be UpperCamelCase, with top-level namespaces based on the project name.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/codingGuidelines.md#_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nnamespace MayaAttrs {}\n```\n\n----------------------------------------\n\nTITLE: Checking Maya UB2 Compatibility\nDESCRIPTION: This snippet checks if Maya was built with Universal Binary 2 (UB2) and issues a warning if it wasn't, when building a UB2 version of maya-usd on Apple.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE AND BUILD_UB2 AND NOT MAYA_MACOSX_BUILT_WITH_UB2)\n    message(WARNING  \"Maya was NOT built with Universal Binary 2\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Compiler Definitions\nDESCRIPTION: This snippet defines compiler definitions for the Python extension library. It sets preprocessor definitions based on the operating system (MacOSX) and project name to be used in the compilation process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/python/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${PYTHON_TARGET_NAME}\n    PRIVATE\n        $<$<BOOL:${IS_MACOSX}>:OSMac_>\n        MFB_PACKAGE_NAME=${PROJECT_NAME}\n        MFB_ALT_PACKAGE_NAME=${PROJECT_NAME}\n        MFB_PACKAGE_MODULE=${PROJECT_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration (CMake)\nDESCRIPTION: This snippet configures the installation of the header files.  It copies the header files listed in ${HEADERS} to the destination directory specified by ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/fileio/translators during the installation process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/translators/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${HEADERS}\n     DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/fileio/translators\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Target Sources (UFE V3)\nDESCRIPTION: This snippet conditionally adds source files based on the availability of CMAKE_UFE_V3_FEATURES. It includes UsdUndoUngroupCommand.cpp if UFE V3 features are available. This allows for version-specific features to be compiled into the project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_UFE_V3_FEATURES_AVAILABLE)\n    target_sources(${PROJECT_NAME}\n        PRIVATE\n            UsdUndoUngroupCommand.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files with CMake\nDESCRIPTION: This snippet uses the `install` command in CMake to install the header files listed in the `HEADERS` variable. It specifies the destination directory as `${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/nodes/`. This ensures that the header files are placed in the appropriate location during the installation of the Maya USD project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/nodes/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${HEADERS}\n     DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/nodes/\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Name and Location with CMake\nDESCRIPTION: This snippet defines the name of the Maya test library (`AL_MayaTest`) and its installation location in the AL_INSTALL_PREFIX/lib directory.  These variables are used later in the CMake configuration to build and install the library to a specific directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayatest/AL/maya/test/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(MAYA_TEST_LIBRARY_NAME \"AL_MayaTest\")\nset(MAYA_TEST_LIBRARY_LOCATION ${AL_INSTALL_PREFIX}/lib)\n```\n\n----------------------------------------\n\nTITLE: Setting MayaUSD Version\nDESCRIPTION: This snippet includes the `mayausd_version.info` file and sets the `MAYAUSD_VERSION` variable based on the major, minor, and patch level defined in the included file.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_MAYAUSD_LIBRARY)\n    include(cmake/mayausd_version.info)\n    set(MAYAUSD_VERSION \"${MAYAUSD_MAJOR_VERSION}.${MAYAUSD_MINOR_VERSION}.${MAYAUSD_PATCH_LEVEL}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Header List Definition CMake\nDESCRIPTION: This snippet defines a list of header files that are part of the module. These headers will likely be included by the source files defined in the target_sources block and will be installed as part of the module.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/undo/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    OpUndoItemList.h\n    OpUndoItemMuting.h\n    OpUndoItemRecorder.h\n    OpUndoItemValidator.h\n    OpUndoItems.h\n    MayaUsdUndoBlock.h\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files\nDESCRIPTION: This snippet installs the header files specified in the HEADERS list to the destination directory `${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/ufe`. This ensures that the headers are available after installation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES ${HEADERS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/ufe\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files (CMake)\nDESCRIPTION: This installs specified header files into the include directory within the installation prefix. It places the `api.h`, `usdPreviewSurface.h`, and `usdPreviewSurfacePlugin.h` files in the `${CMAKE_INSTALL_PREFIX}/include/${TARGET_NAME}` directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/pxrUsdPreviewSurface/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES api.h usdPreviewSurface.h usdPreviewSurfacePlugin.h\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${TARGET_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Querying the State of a Debug Notice in C++\nDESCRIPTION: This code snippet shows how to query the state of a debug notice using the AL_usdmaya_UseDebugCommand with the -st flag in MEL. It checks if the notice is enabled and prints a corresponding message.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/developer.md#_snippet_15\n\nLANGUAGE: C++\nCODE:\n```\nif(`AL_usdmaya_UseDebugCommand -st \"ALUSDMAYA_TRANSLATORS\"`)\n\tprint \"ALUSDMAYA_TRANSLATORS is enabled\\n\";\nelse\n\tprint \"ALUSDMAYA_TRANSLATORS is disabled\\n\";\n```\n\n----------------------------------------\n\nTITLE: Conditional Compile Definitions (UFE Camera Computed Visibility)\nDESCRIPTION: This snippet conditionally defines a compile definition based on whether UFE_CAMERA_HAS_COMPUTEDVISIBILITY is defined. It sets the UFE_CAMERA_HAS_COMPUTEDVISIBILITY=1 if true. This controls compile-time behavior related to camera computed visibility features.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (UFE_CAMERA_HAS_COMPUTEDVISIBILITY)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        UFE_CAMERA_HAS_COMPUTEDVISIBILITY=1\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test - CMake\nDESCRIPTION: This snippet adds a unit test using the defined Python code. It sets the PYTHON_COMMAND to the Python code string and configures environment variables such as MAYA_PLUG_IN_PATH, PXR_OVERRIDE_PLUGINPATH_NAME, and LD_LIBRARY_PATH.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/tests/mayaplugintest/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_add_test(${TARGET_NAME}\n    PYTHON_COMMAND \"${pycode}\"\n    ENV\n        \"MAYA_PLUG_IN_PATH=${MAYAUTILS_TEST_MAYAPLUGIN_INSTALL_PATH}\"\n        \"${PXR_OVERRIDE_PLUGINPATH_NAME}=${ADDITIONAL_PXR_PLUGINPATH_NAME}\"\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Set Header List (CMake)\nDESCRIPTION: This snippet defines a list of header files that are associated with the commands in the Maya USD plugin. These headers declare the classes and functions implemented in the corresponding source files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/commands/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n        abstractLayerEditorWindow.h\n        baseExportCommand.h\n        baseImportCommand.h\n        baseListJobContextsCommand.h\n        baseListShadingModesCommand.h\n        editTargetCommand.h\n        layerEditorCommand.h\n        layerEditorWindowCommand.h\n        schemaCommand.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Target Sources CMake\nDESCRIPTION: This snippet defines the source files that will be compiled into a library or executable. It uses the target_sources command to add glslProgram.cpp, utils.cpp, and utilsLegacy.cpp as private sources to the target specified by ${PROJECT_NAME}.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/px_vp20/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        glslProgram.cpp\n        utils.cpp\n        utilsLegacy.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Compile Definitions (CMake)\nDESCRIPTION: This adds compile definitions to the target, enabling specific features or configurations. It adds `PXRUSDPREVIEWSURFACE_EXPORTS` and conditionally adds `OSMac_` if the platform is macOS. These definitions affect how the code is compiled and linked.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/pxrUsdPreviewSurface/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${TARGET_NAME} \n    PRIVATE\n        PXRUSDPREVIEWSURFACE_EXPORTS\n        $<$<BOOL:${IS_MACOSX}>:OSMac_>\n)\n```\n\n----------------------------------------\n\nTITLE: Promoting Header Files CMake\nDESCRIPTION: Promotes the specified header files within the Maya-USD project structure using the `mayaUsd_promoteHeaderList` function. It sets the `BASEDIR` to `${PROJECT_NAME}/fileio/shading`, ensuring headers are correctly placed for access by other modules within the project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/shading/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_promoteHeaderList(\n    HEADERS \n        ${HEADERS} \n    BASEDIR \n        ${PROJECT_NAME}/fileio/shading\n)\n```\n\n----------------------------------------\n\nTITLE: Finding USD Package\nDESCRIPTION: This snippet uses `find_package` to locate the USD package with a minimum required version of 0.21.11. It also checks for the `usdGenSchema` tool if building the MayaUSD library, AL plugin, or tests.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(USD 0.21.11 REQUIRED)\nif (BUILD_MAYAUSD_LIBRARY OR BUILD_AL_PLUGIN OR BUILD_TESTS)\n    if(NOT USD_GENSCHEMA)\n        message(FATAL_ERROR \"Building MayaUsd requires usdGenSchema (from USD)\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Link Libraries\nDESCRIPTION: This snippet specifies the libraries to link against the Python extension library. It links against the core `${PROJECT_NAME}` library and, conditionally, the Python library from Pixar's USD if the USD version is greater than or equal to 0.24.11.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/python/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${PYTHON_TARGET_NAME}\n    PRIVATE\n        ${PROJECT_NAME}\n        $<$<BOOL:$<VERSION_GREATER_EQUAL:${USD_VERSION},0.24.11>>:python> # usd_python from Pixar\n)\n```\n\n----------------------------------------\n\nTITLE: Creating ProxyShape from Prim Path (C++)\nDESCRIPTION: This command creates a transform hierarchy of Maya Transform nodes to a specified prim path and then creates a new ProxyShape to represent all of the geometry underneath that prim path. The -ap flag builds a transform hierarchy.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_15\n\nLANGUAGE: c++\nCODE:\n```\nAL_usdmaya_ProxyShapeImportPrimPathAsMaya \"ProxyShape1\" -ap -pp \"/some/prim/path\";\n```\n\n----------------------------------------\n\nTITLE: Locking Layer in C++ (Undoable)\nDESCRIPTION: This C++ snippet demonstrates how to lock a USD layer using the `MayaCommandHook::lockLayer` function, which utilizes the underlying `mayaUsdLayerEditor` MEL command for undo support.  Parameters include the USD layer, the lock state, and a flag to include sublayers.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/LayerLocking.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nMayaCommandHook::lockLayer(usdLayer, lockState, includeSubLayers);\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for mayaUsd_Schemas\nDESCRIPTION: This snippet specifies the libraries that the `mayaUsd_Schemas` library should be linked against. It includes `usd`, `usdGeom`, `${PYTHON_LIBRARIES}`, and `${PTHREAD_LINK}`. It also conditionally links `pthread` and `m` on Linux.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/schemas/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${TARGET_NAME} \n    PUBLIC\n        usd \n        usdGeom\n        ${PYTHON_LIBRARIES} \n        ${PTHREAD_LINK}\n        $<$<BOOL:${IS_LINUX}>:\"pthread\">\n        $<$<BOOL:${IS_LINUX}>:\"m\">\n)\n```\n\n----------------------------------------\n\nTITLE: Header Installation with CMake\nDESCRIPTION: Installs the header files to the specified destination using CMake. The `install` command copies the files listed in `HEADERS` to the `${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/fileio/chaser` directory, which is where header files are installed for the project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/chaser/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES ${HEADERS}\n     DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/fileio/chaser\n)\n```\n\n----------------------------------------\n\nTITLE: Finding GTest Package with CMake\nDESCRIPTION: This snippet uses the `find_package` command in CMake to locate the GTest (Google Test) library. The `REQUIRED` keyword ensures that the build process fails if GTest is not found.  This is a necessary prerequisite for the AL_MayaTest library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayatest/AL/maya/test/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(GTest REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Create Symbolic Link for Python Framework on macOS CMake\nDESCRIPTION: Creates a symbolic link to the Python framework directory if the operating system is macOS. This allows the executables to find the necessary Python libraries.  Requires MAYA_LOCATION to be defined.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/utils/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX)\n    # Create symbolic link to python framework\n    file(CREATE_LINK ${MAYA_LOCATION}/Frameworks ${CMAKE_CURRENT_BINARY_DIR}/../Frameworks SYMBOLIC)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Alembic Chaser attrprefix Example\nDESCRIPTION: This Python code shows an example of how to invoke mayaUSDExport with the Alembic chaser and the attrprefix option, specifying multiple Maya attribute prefixes and their corresponding USD prefixes for export.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/commands/Readme.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncmds.loadPlugin('pxrUsd')\ncmds.mayaUSDExport(\n    file=usdFilePath,\n    chaser=['alembic'],\n    chaserArgs=[\n       ('alembic', 'attrprefix', 'ABC_,ABC2_=customPrefix_,ABC3_=,ABC4_=customNamespace:'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Register ShadowAPI Adaptor (Python)\nDESCRIPTION: This snippet shows how to register the custom ShadowAPI adaptor class with MayaUSD, associating it with the 'light' type and the 'ShadowAPI' schema.  This makes the adaptor available for use when interacting with lights in MayaUSD.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nmayaUsdLib.SchemaApiAdaptor.Register(shadowApiAdaptorLightShape, \"light\", \"ShadowAPI\")\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Properties for MayaUSD\nDESCRIPTION: This snippet calls the `maya_set_plugin_properties` macro to configure plugin-specific properties for the translator plugin. This likely involves setting attributes such as plugin version, author, and other metadata that Maya uses to manage plugins.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/pxrUsdTranslators/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nmaya_set_plugin_properties(${PXR_TRANSLATORS_PACKAGE})\n```\n\n----------------------------------------\n\nTITLE: Promoting Headers CMake\nDESCRIPTION: This snippet promotes the header files listed in the HEADERS variable to a specific subdirectory within the Maya-USD project. The mayaUsd_promoteHeaderList macro likely handles copying or linking the headers to the render/px_vp20 directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/px_vp20/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_promoteHeaderList(HEADERS ${HEADERS} SUBDIR render/px_vp20)\n```\n\n----------------------------------------\n\nTITLE: Locking Layer in Python (Non-Undoable)\nDESCRIPTION: This Python script snippet demonstrates how to lock a USD layer using the `cmds.mayaUsdLayerEditor` command. The lock type (in this case, System-Locked) and proxy shape path are specified as arguments. This command is un-doable.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/LayerLocking.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# example: System-locks an exampleLayer\ncmds.mayaUsdLayerEditor(exampleLayer.identifier, edit=True, lockLayer=(2, 0, proxyShapePath))\n```\n\n----------------------------------------\n\nTITLE: Define Target and Find Package (CMake)\nDESCRIPTION: This snippet defines the target name for the plugin, finds the required GTest package, and declares a shared library to be built. It sets the foundation for the build process by establishing the core dependencies and target type.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaTestPlugin/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TARGET_NAME AL_USDMayaTestPlugin)\n\nfind_package(GTest REQUIRED)\n\nadd_library(${TARGET_NAME} SHARED)\n```\n\n----------------------------------------\n\nTITLE: Header Promotion (CMake)\nDESCRIPTION: This snippet uses the `mayaUsd_promoteHeaderList` function to make the specified header files accessible to other modules or projects. It specifies the headers to promote (${HEADERS}) and the base directory for the headers (${PROJECT_NAME}/fileio/translators).\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/translators/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_promoteHeaderList(\n    HEADERS \n        ${HEADERS} \n    BASEDIR \n        ${PROJECT_NAME}/fileio/translators\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Maya-USD Target\nDESCRIPTION: This snippet installs the mayaUsd library, specifying destinations for library, archive, and runtime components. PDB files are also installed on Windows.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${PROJECT_NAME}\n    LIBRARY\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib\n    ARCHIVE\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib\n    RUNTIME\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib\n)\n\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:${PROJECT_NAME}> \n        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib OPTIONAL\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Sources with CMake\nDESCRIPTION: This snippet sets the target sources for the project using the `target_sources` command. It specifies that `tokens.cpp` is a private source file for the `${PROJECT_NAME}` target. This ensures that the specified source file is compiled and linked into the project's binary.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/base/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        tokens.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Sources CMake\nDESCRIPTION: Defines the source files to be included in the `${PROJECT_NAME}` target using the `target_sources` command.  Specifies the source files are private, meaning they are only used by the specified target and are not exposed to other targets.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/ufe/trf/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        RotationUtils.cpp\n        UsdTransform3dFallbackMayaXformStack.cpp\n        UsdTransform3dMayaXformStack.cpp\n        XformOpUtils.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Add pxrUsd Subdirectory in CMake\nDESCRIPTION: This CMake command adds the 'pxrUsd' directory to the build. It allows CMake to find and process the CMakeLists.txt file within that subdirectory, incorporating its build targets into the main project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/maya/plugin/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(pxrUsd)\n```\n\n----------------------------------------\n\nTITLE: Installing Library with CMake\nDESCRIPTION: This snippet installs the compiled `AL_MayaTest` library to the specified destination directory under MAYA_TEST_LIBRARY_LOCATION. The `LIBRARY` keyword indicates that the shared library is installed. It also installs the runtime components to the same location.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayatest/AL/maya/test/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${MAYA_TEST_LIBRARY_NAME}\n  LIBRARY\n  DESTINATION ${MAYA_TEST_LIBRARY_LOCATION}\n  RUNTIME\n  DESTINATION ${MAYA_TEST_LIBRARY_LOCATION}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing plugInfo.json in CMake\nDESCRIPTION: This CMake snippet installs the `plugInfo.json` file to the destination directory `${AL_INSTALL_PREFIX}/lib/usd/${TRANSLATORS_PACKAGE}/resources`. This is necessary for Maya to properly recognize and load the plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\n DESTINATION ${AL_INSTALL_PREFIX}/lib/usd/${TRANSLATORS_PACKAGE}/resources\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties (Platform Specific) - CMake\nDESCRIPTION: This snippet configures the target properties based on the operating system. It sets the suffix for Windows (.mll), prefix and suffix for macOS (.bundle), and prefix for Linux (empty).\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/tests/mayaplugintest/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_WINDOWS)\n    set_target_properties(${TARGET_NAME} PROPERTIES SUFFIX \".mll\")\nelif(IS_MACOSX)\n    set_target_properties(${TARGET_NAME} PROPERTIES PREFIX \"\" SUFFIX \".bundle\")\nelif(IS_LINUX)\n    set_target_properties(${TARGET_NAME} PROPERTIES PREFIX \"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Installation of Shared Components (Maya 2023+)\nDESCRIPTION: This CMake snippet conditionally installs additional files if the Maya application version is 2023 or greater. It installs collection-related custom controls and Maya host integration scripts, as well as a set of shared components for collection management, common utilities, data structures, and USD-specific data handling.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/resources/ae/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(MAYA_APP_VERSION VERSION_GREATER_EQUAL 2023)\n    foreach(_SUBDIR ${MAYAUSD_AE_TEMPLATES})\n        install(FILES\n            ${_SUBDIR}/collectionCustomControl.py\n            ${_SUBDIR}/collectionMayaHost.py\n            DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/python/ufe_ae/usd/nodes/${_SUBDIR}\n        )\n    endforeach()\n\n    set(MAYAUSD_SHARED_COMPONENTS usd-shared-components/src/python/usdSharedComponents)\n    install(FILES\n        ${MAYAUSD_SHARED_COMPONENTS}/collection/__init__.py\n        ${MAYAUSD_SHARED_COMPONENTS}/collection/widget.py\n        ${MAYAUSD_SHARED_COMPONENTS}/collection/includeExcludeWidget.py\n        ${MAYAUSD_SHARED_COMPONENTS}/collection/expressionWidget.py\n        ${MAYAUSD_SHARED_COMPONENTS}/collection/warningWidget.py\n        ${MAYAUSD_SHARED_COMPONENTS}/collection/expressionRulesMenu.py\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/python/usd_shared_components/collection/\n    )\n\n    install(FILES\n        ${MAYAUSD_SHARED_COMPONENTS}/common/__init__.py\n        ${MAYAUSD_SHARED_COMPONENTS}/common/filteredStringListModel.py\n        ${MAYAUSD_SHARED_COMPONENTS}/common/filteredStringListView.py\n        ${MAYAUSD_SHARED_COMPONENTS}/common/host.py\n        ${MAYAUSD_SHARED_COMPONENTS}/common/stringListPanel.py\n        ${MAYAUSD_SHARED_COMPONENTS}/common/persistentStorage.py\n        ${MAYAUSD_SHARED_COMPONENTS}/common/resizable.py\n        ${MAYAUSD_SHARED_COMPONENTS}/common/theme.py\n        ${MAYAUSD_SHARED_COMPONENTS}/common/menuButton.py\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/python/usd_shared_components/common/\n    )\n\n    install(FILES\n        ${MAYAUSD_SHARED_COMPONENTS}/data/__init__.py\n        ${MAYAUSD_SHARED_COMPONENTS}/data/collectionData.py\n        ${MAYAUSD_SHARED_COMPONENTS}/data/stringListData.py\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/python/usd_shared_components/data/\n    )\n\n    install(FILES\n        ${MAYAUSD_SHARED_COMPONENTS}/usdData/__init__.py\n        ${MAYAUSD_SHARED_COMPONENTS}/usdData/usdCollectionData.py\n        ${MAYAUSD_SHARED_COMPONENTS}/usdData/usdCollectionStringListData.py\n        ${MAYAUSD_SHARED_COMPONENTS}/usdData/validator.py\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/python/usd_shared_components/usdData/\n    )\n\n    set(SHARED_COMPONENTS_ICONS\n        ${MAYAUSD_SHARED_COMPONENTS}/icons/dark/add\n        ${MAYAUSD_SHARED_COMPONENTS}/icons/dark/delete\n        ${MAYAUSD_SHARED_COMPONENTS}/icons/dark/menu\n        ${MAYAUSD_SHARED_COMPONENTS}/icons/dark/selector\n        ${MAYAUSD_SHARED_COMPONENTS}/icons/dark/warning\n    )\n    foreach(ICON_BASE ${SHARED_COMPONENTS_ICONS})\n        install(FILES \"${ICON_BASE}.svg\"\n            DESTINATION \"${CMAKE_INSTALL_PREFIX}/lib/python/usd_shared_components/icons/dark\"\n        )\n    endforeach()\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Python Module Properties\nDESCRIPTION: This snippet sets Python module-specific properties for the Python extension library using the `set_python_module_property` macro.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/python/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset_python_module_property(${PYTHON_TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Python Library Name (CMake)\nDESCRIPTION: This snippet sets the name of the Python library based on the build environment. It checks if the build is on Windows and using debug Python, and if so, appends `_d` to the library name. This is necessary for debug builds on Windows to distinguish the debug Python library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/mayatest/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(IS_WINDOWS AND MAYAUSD_DEFINE_BOOST_DEBUG_PYTHON_FLAG)\n    # On Windows when compiling with debug python the library must be named with _d.\n    set(PYTHON_LIBRARY_NAME _AL_USDMayaSchemasTest_d)\nelse()\n    set(PYTHON_LIBRARY_NAME _AL_USDMayaSchemasTest)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Name CMake\nDESCRIPTION: Defines the LIBRARY_NAME variable as AL_USDMaya. This variable is later used to name the compiled library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIBRARY_NAME AL_USDMaya)\n```\n\n----------------------------------------\n\nTITLE: Configuring ALUsdMayaConfig.cmake\nDESCRIPTION: Gets the locations of the library and Python library, and then configures the ALUsdMayaConfig.cmake file using the input file ALUsdMayaConfig.cmake.in. This file is used by other projects to find and use the AL_USDMaya plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(LIBRARY_LOCATION GLOBAL PROPERTY GLOBAL_LIBRARY_LOCATION)\nget_property(PYTHON_LIBRARY_LOCATION GLOBAL PROPERTY GLOBAL_PYTHON_LIBRARY_LOCATION)\nconfigure_file(ALUsdMayaConfig.cmake.in ${PROJECT_BINARY_DIR}/ALUsdMayaConfig.cmake @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Sources - CMake\nDESCRIPTION: This snippet specifies the source files to be compiled into the AL_MayaUtilsTests library. It uses the target_sources command to add the listed .cpp files to the target.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/tests/mayaplugintest/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${TARGET_NAME}\n    PRIVATE\n        plugin.cpp\n        test_maya_MenuBuilder.cpp\n        test_maya_NodeHelper.cpp\n        test_mobjectmap.cpp\n        utils/CommandGuiHelperTest.cpp\n        utils/NodeHelperUnitTest.cpp\n        utils/PluginTranslatorOptionsTest.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Sources in CMake\nDESCRIPTION: This CMake command defines the source files to be included in the target library named ${PROJECT_NAME}. The PRIVATE keyword indicates that these sources are only used internally within the library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/utils/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        diffAttributes.cpp\n        diffCore.cpp\n        diffDictionaries.cpp\n        diffLists.cpp\n        diffMetadatas.cpp\n        diffPrims.cpp\n        diffRelationships.cpp\n        diffValues.cpp\n        editability.cpp\n        editRouter.cpp\n        editRouterContext.cpp\n        layers.cpp\n        loadRules.cpp\n        loadRulesText.cpp\n        mergePrims.cpp\n        mergePrimsOptions.cpp\n        schemas.cpp\n        uiCallback.cpp\n        usdUtils.cpp\n        Utils.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Inclusion based on Maya Version (Python)\nDESCRIPTION: This CMake snippet conditionally appends `testCenterPivot.py` to the `TEST_SCRIPT_FILES` list if the `MAYA_APP_VERSION` is greater than or equal to 2023. This allows for version-specific tests.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/ufe/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(MAYA_APP_VERSION VERSION_GREATER_EQUAL 2023)\n    list(APPEND TEST_SCRIPT_FILES\n        testCenterPivot.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Promoting Header Files CMake\nDESCRIPTION: Calls a custom function (mayaUsd_promoteHeaderList) to promote the specified header files into the build tree under the utils subdirectory.  This likely prepares the headers for inclusion by other parts of the build process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/utils/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_promoteHeaderList(HEADERS ${HEADERS} SUBDIR utils)\n```\n\n----------------------------------------\n\nTITLE: Installing Target Library\nDESCRIPTION: Installs the target library to the specified library installation path. This includes installing the library itself, archive files, and runtime files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/translators/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n    TARGETS ${TARGET_NAME}\n    LIBRARY\n    DESTINATION ${LIBRARY_INSTALL_PATH}\n    ARCHIVE\n    DESTINATION ${LIBRARY_INSTALL_PATH}\n    RUNTIME\n    DESTINATION ${LIBRARY_INSTALL_PATH}\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: This snippet links the `mayaUsdAPI` library with its dependencies. It links publicly with `tf` and privately with `sdf` and `mayaUsd`. Public linking makes `tf` available to other libraries that link to `mayaUsdAPI`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${PROJECT_NAME}\n    PUBLIC\n        tf\n    PRIVATE\n        sdf\n        mayaUsd\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Inclusion based on UFE Lights Support (Python)\nDESCRIPTION: This CMake snippet conditionally appends `testLight.py` to the `TEST_SCRIPT_FILES` list if the `UFE_LIGHTS_SUPPORT` variable is set. This includes tests related to UFE Lights.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/ufe/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif (UFE_LIGHTS_SUPPORT)\n    list(APPEND TEST_SCRIPT_FILES\n        testLight.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting MayaUSDAPI Version\nDESCRIPTION: This snippet includes the `mayausdapi_version.info` file and sets the `MAYAUSDAPI_VERSION` variable based on the major, minor, and patch level defined in the included file.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_MAYAUSDAPI_LIBRARY)\n    include(cmake/mayausdapi_version.info)\n    set(MAYAUSDAPI_VERSION \"${MAYAUSDAPI_MAJOR_VERSION}.${MAYAUSDAPI_MINOR_VERSION}.${MAYAUSDAPI_PATCH_LEVEL}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Definitions for Python Bindings\nDESCRIPTION: This snippet defines compiler definitions for the Python bindings library, including `MFB_PACKAGE_NAME`, `MFB_ALT_PACKAGE_NAME`, and `MFB_PACKAGE_MODULE`, which are likely used for setting up the Python module's metadata.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/schemas/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${TARGET_PYTHON_NAME}\n    PRIVATE\n        MFB_PACKAGE_NAME=${SCHEMAS_LIBRARY_NAME}\n        MFB_ALT_PACKAGE_NAME=${SCHEMAS_LIBRARY_NAME}\n        MFB_PACKAGE_MODULE=mayaUsd.schemas\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions\nDESCRIPTION: This snippet sets compile definitions for the Python target, including definitions for macOS, package name, and package module. These definitions are used during the compilation process to configure the library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/python/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${PYTHON_TARGET_NAME}\n    PRIVATE\n        $<$<BOOL:${IS_MACOSX}>:OSMac_>\n        MFB_PACKAGE_NAME=${PROJECT_NAME}\n        MFB_ALT_PACKAGE_NAME=${PROJECT_NAME}\n        MFB_PACKAGE_MODULE=${PROJECT_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Getting USD Stage from StageCache in Python\nDESCRIPTION: This snippet demonstrates how to access the USD stage via the StageCache singleton. It retrieves all in-memory stages and prints the first one, assuming a proxy shape has been created.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/python.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom AL import usdmaya\nstageCache = usdmaya.StageCache.Get()\nstages = stageCache.GetAllStages()\nif stages:\n    print stages[0]\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for CMake Target\nDESCRIPTION: This snippet sets the include directories for the `AL_MayaTest` library using the `target_include_directories` command. These directories include the locations of header files for GTest, PXR (Pixar USD), and Maya.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayatest/AL/maya/test/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(${MAYA_TEST_LIBRARY_NAME}\n  PRIVATE\n    ${MAYATEST_INCLUDE_LOCATION}\n    ${GTEST_INCLUDE_DIRS}\n    ${PXR_INCLUDE_DIRS}\n    ${MAYA_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories\nDESCRIPTION: Adds subdirectories to the build process, including utils, mayatest, mayautils, usdmayautils, usdtransaction, lib, and plugin. The mayatest subdirectory is only added if SKIP_USDMAYA_TESTS is not set.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(utils)\nif(NOT SKIP_USDMAYA_TESTS)\n  add_subdirectory(mayatest)\nendif() \nadd_subdirectory(mayautils)\nadd_subdirectory(usdmayautils)\nadd_subdirectory(usdtransaction)\n\nadd_subdirectory(lib)\nadd_subdirectory(plugin)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compile Definitions (UFE CameraHandler Has FindAll)\nDESCRIPTION: This snippet conditionally defines a compile definition based on whether UFE_CAMERAHANDLER_HAS_FINDALL is defined. It sets UFE_CAMERAHANDLER_HAS_FINDALL=1 if true, influencing the functionality of the CameraHandler.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif (UFE_CAMERAHANDLER_HAS_FINDALL)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        UFE_CAMERAHANDLER_HAS_FINDALL=1\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install Scripts (CMake)\nDESCRIPTION: This CMake command installs the files listed in the `scripts_src` variable to a specific destination directory within the Maya installation structure. `INSTALL_DIR_SUFFIX` would be defined elsewhere, and determines the final installation location.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/scripts/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES ${scripts_src}\n    DESTINATION ${INSTALL_DIR_SUFFIX}/scripts\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling RPATH and Injecting LD_LIBRARY_PATH for Tests\nDESCRIPTION: This snippet shows how to disable RPATH using CMake and inject `LD_LIBRARY_PATH` to allow tests to run when RPATH is disabled. This is useful when libraries are not in standard locations.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/build.md#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nCMAKE_SKIP_RPATH=TRUE\n```\n\n----------------------------------------\n\nTITLE: Conditional Header Appending (UFE V3)\nDESCRIPTION: This snippet conditionally appends the header UsdUndoUngroupCommand.h to the HEADERS list, if CMAKE_UFE_V3_FEATURES_AVAILABLE is defined.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_UFE_V3_FEATURES_AVAILABLE)\n    list(APPEND HEADERS\n        UsdUndoUngroupCommand.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Target - CMake\nDESCRIPTION: This snippet defines the installation path for the target, placing the runtime and library components in the MAYAUTILS_TEST_MAYAPLUGIN_INSTALL_PATH.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/tests/mayaplugintest/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MAYAUTILS_TEST_MAYAPLUGIN_INSTALL_PATH ${AL_INSTALL_PREFIX}/testplugins)\n\ninstall(TARGETS ${TARGET_NAME}\n    RUNTIME\n    DESTINATION ${MAYAUTILS_TEST_MAYAPLUGIN_INSTALL_PATH}\n    LIBRARY\n    DESTINATION ${MAYAUTILS_TEST_MAYAPLUGIN_INSTALL_PATH}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler for MayaUSD\nDESCRIPTION: This snippet calls the `mayaUsd_compile_config` macro to set up compiler configurations specific to MayaUSD. This likely includes setting compiler flags and defining preprocessor macros required for building the translator plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/pxrUsdTranslators/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_compile_config(${PXR_TRANSLATORS_PACKAGE})\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Target\nDESCRIPTION: This snippet adds `initStringResources.cpp` as a private source file to the target ${PROJECT_NAME}.  Private sources are only visible within the target during compilation, ensuring encapsulation. This configuration includes the file in the library build process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/ui/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        initStringResources.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectories with CMake\nDESCRIPTION: This CMake code snippet adds subdirectories to the current project. It unconditionally adds 'pxrUsdMayaGL' and 'vp2RenderDelegate' subdirectories.  It conditionally adds the 'mayaToHydra' subdirectory if the 'BUILD_HDMAYA' variable is true.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/render/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(pxrUsdMayaGL)\nadd_subdirectory(vp2RenderDelegate)\n\nif(BUILD_HDMAYA)\n    add_subdirectory(mayaToHydra)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: Links the specified libraries to the executable. These libraries provide the functionality used by the source code. The Boost Python library is conditionally linked based on whether the system is Linux.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/maya/tests/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${TARGET_NAME}\n    AL_USDMayaSchemas\n    mayaUsd_Schemas\n    ${GTEST_LIBRARIES}\n    sdf\n    tf\n    vt\n    plug\n    $<$<BOOL:${IS_LINUX}>:${Boost_PYTHON_LIBRARY}>\n)\n```\n\n----------------------------------------\n\nTITLE: Including Directories in CMake\nDESCRIPTION: This snippet specifies include directories for the target. The UFE_INCLUDE_DIR is included as a private include directory, meaning it's only used when compiling the target itself.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/plugin/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${TARGET_NAME}\n    PRIVATE\n        ${UFE_INCLUDE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing PlugInfo JSON\nDESCRIPTION: This snippet installs the plugInfo.json file, which includes the configured resources directory. It writes the JSON file and then installs it.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(CODE\n    \"file(WRITE \\\"${CMAKE_CURRENT_BINARY_DIR}/lib/usd/plugInfo.json\\\" \\\"{\\n    \\\\\"Includes\\\\\": [ \\\\\"*/resources/\\\\\" ]\\n}\\\")\"\n)\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/lib/usd/plugInfo.json\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/usd\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Script Files CMake\nDESCRIPTION: This snippet defines a CMake variable TEST_SCRIPT_FILES as a list of python scripts that are intended to be unit tests.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/render/pxrUsdMayaGL/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_SCRIPT_FILES\n    testProxyShapeDrawAndTransform.py\n    testProxyShapeDrawColorAccuracy.py\n    testProxyShapeDrawColors.py\n    testProxyShapeDrawLighting.py\n    testProxyShapeDrawPurpose.py\n    testProxyShapeDrawTimeSampled.py\n    testProxyShapeDrawUsdChangeProcessing.py\n    testProxyShapeDrawVisibility.py\n    testProxyShapeLiveSurface.py\n    testProxyShapeRendererSceneMessages.py\n    testPxrUsdMayaGL.py\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Names and Locations (CMake)\nDESCRIPTION: This snippet sets the name and location for the USDTransaction library. It also defines the library name for Python bindings, adjusting the name based on whether it is a debug build on Windows.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/AL/usd/transaction/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(USDTRANSACTION_LIBRARY_NAME \"AL_USDTransaction\")\nset(USDTRANSACTION_LIBRARY_LOCATION ${AL_INSTALL_PREFIX}/lib)\n\n# Python bindings\nif(IS_WINDOWS AND MAYAUSD_DEFINE_BOOST_DEBUG_PYTHON_FLAG)\n  # On Windows when compiling with debug python the library must be named with _d.\n  set(USDTRANSACTION_PYTHON_LIBRARY_NAME _${USDTRANSACTION_LIBRARY_NAME}_d)\n  else()\n  set(USDTRANSACTION_PYTHON_LIBRARY_NAME _${USDTRANSACTION_LIBRARY_NAME})\nendif()\n\nset(USDTRANSACTION_PYTHON_LIBRARY_LOCATION ${AL_INSTALL_PREFIX}/lib/python/AL/usd/transaction)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Library (CMake)\nDESCRIPTION: This snippet installs the Python library to the specified destination.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/AL/usd/transaction/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${USDTRANSACTION_PYTHON_LIBRARY_NAME}\n  LIBRARY\n  DESTINATION ${USDTRANSACTION_PYTHON_LIBRARY_LOCATION}\n  RUNTIME\n  DESTINATION ${USDTRANSACTION_PYTHON_LIBRARY_LOCATION}\n)\n```\n\n----------------------------------------\n\nTITLE: MayaUsd Promote Header List\nDESCRIPTION: This snippet promotes the header list for the project.  It relies on a custom `mayaUsd_promoteHeaderList` CMake function, passing in the header files and project name as a base directory, used to generate include paths.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/lookdevXUsd/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_promoteHeaderList(\n    HEADERS\n        ${HEADERS}\n    BASEDIR\n        ${PROJECT_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet specifies the source files to be compiled into the library. The `target_sources` command associates these source files with the library target, making them part of the build process. The source files are defined as PRIVATE.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/lookdevXUsd/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PROJECT_NAME}\n    PRIVATE\n        LookdevXUsd.cpp\n        UsdCapabilityHandler.cpp\n        UsdClipboardHandler.cpp\n        UsdComponentConnections.cpp\n        UsdConnectionCommands.cpp\n        UsdDebugHandler.cpp\n        UsdDeleteCommand.cpp\n        UsdExtendedAttributeHandler.cpp\n        UsdExtendedConnectionHandler.cpp\n        UsdFileHandler.cpp\n        UsdHierarchy.cpp\n        UsdHierarchyHandler.cpp\n        UsdLookdevHandler.cpp\n        UsdMaterial.cpp\n        UsdMaterialCommands.cpp\n        UsdMaterialHandler.cpp\n        UsdMaterialValidator.cpp\n        UsdSceneItemOps.cpp\n        UsdSceneItemOpsHandler.cpp\n        UsdSceneItemUI.cpp\n        UsdSceneItemUIHandler.cpp\n        UsdSoloingHandler.cpp\n        UsdUINodeGraphNode.cpp\n        UsdUINodeGraphNodeHandler.cpp\n        Utils.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Define Python Test Files in CMake\nDESCRIPTION: This CMake code defines a list of Python script files to be used as unit tests. The variable TEST_SCRIPT_FILES holds the names of the Python files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/LookdevXUfe/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_SCRIPT_FILES\n    testLdxCapabilityHandler.py\n    testLdxComponentConnections.py        \n    testLdxConnection.py\n    testLdxDebugHandler.py\n    testLdxFileHandler.py\n)\n```\n\n----------------------------------------\n\nTITLE: Appending Dependent Libraries CMake\nDESCRIPTION: This snippet appends the libraries `PYTHON_LIBRARIES`, `usd`, and `usdGeom` to the `DEPENDANT_LIBRARIES` list. These libraries are dependencies of the `AL_USDMayaSchemas` library and will be linked against it during the build process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/maya/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND DEPENDANT_LIBRARIES ${PYTHON_LIBRARIES} usd usdGeom)\n```\n\n----------------------------------------\n\nTITLE: USD Exported Schema (USD)\nDESCRIPTION: This snippet demonstrates the USD code generated when exporting the schema.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_2\n\nLANGUAGE: USD\nCODE:\n```\ndef Mesh \"pSphere1\" (\n    prepend apiSchemas = [\"GeomModelAPI\", \"MaterialBindingAPI\"]\n)\n{\n    // Geometry data\n    \n    // GeomModelAPI:\n    uniform token model:cardGeometry\n\n    // More geometry data\n}\n```\n\n----------------------------------------\n\nTITLE: Define Function to Add Maya Usd Utils Test CMake\nDESCRIPTION: Defines a CMake function `add_mayaUsdUtils_test` that automates the process of creating a test executable, setting its sources, configuring the compiler, linking required libraries (GTest and usdUfe), and adding a test command to run the executable. The function takes the target name as its primary argument and variable number of cpp source files as input via ARGN.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/utils/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_mayaUsdUtils_test TARGET_NAME)\n    add_executable(${TARGET_NAME})\n\n    # -----------------------------------------------------------------------------\n    # sources\n    # -----------------------------------------------------------------------------\n    target_sources(${TARGET_NAME}\n        PRIVATE\n            main.cpp\n            ${ARGN}\n    )\n\n    # -----------------------------------------------------------------------------\n    # compiler configuration\n    # -----------------------------------------------------------------------------\n    mayaUsd_compile_config(${TARGET_NAME})\n\n    target_compile_definitions(${TARGET_NAME}\n        PRIVATE\n            $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:TBB_USE_DEBUG>\n            $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_DEBUG_PYTHON>\n            $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_LINKING_PYTHON>\n    )\n\n    # -----------------------------------------------------------------------------\n    # link libraries\n    # -----------------------------------------------------------------------------\n    target_link_libraries(${TARGET_NAME}\n        PRIVATE \n            GTest::GTest\n            usdUfe\n    )\n\n    # -----------------------------------------------------------------------------\n    # unit tests\n    # -----------------------------------------------------------------------------\n    mayaUsd_add_test(${TARGET_NAME}\n        COMMAND $<TARGET_FILE:${TARGET_NAME}>\n        ENV\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n    )\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Python\nDESCRIPTION: This snippet configures Python by setting include directories, libraries, and executable paths based on predefined variables or by including the `cmake/python.cmake` module. It also ensures that the Python interpreter is found.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif (DEFINED PYTHON_INCLUDE_DIR AND DEFINED PYTHON_LIBRARIES AND DEFINED Python_EXECUTABLE)\n    SET(PYTHON_INCLUDE_DIRS \"${PYTHON_INCLUDE_DIR}\")\n    SET(PYTHONLIBS_FOUND TRUE)\n    # Use the Python module to find the python lib.\n    if(BUILD_WITH_PYTHON_3)\n        find_package(Python ${BUILD_WITH_PYTHON_3_VERSION} EXACT REQUIRED COMPONENTS Interpreter)\n    else()\n        find_package(Python 2.7 EXACT REQUIRED COMPONENTS Interpreter)\n    endif()\n    if(NOT Python_Interpreter_FOUND)\n        set(PYTHONLIBS_FOUND FALSE)\n    endif()\nendif()\nif (NOT PYTHONLIBS_FOUND)\n    include(cmake/python.cmake)\nendif()\nmessage(STATUS \"Build MayaUSD with Python3 = \" ${BUILD_WITH_PYTHON_3})\nmessage(STATUS \"   PYTHON_INCLUDE_DIRS = ${PYTHON_INCLUDE_DIRS}\")\nmessage(STATUS \"   PYTHON_LIBRARIES    = ${PYTHON_LIBRARIES}\")\nmessage(STATUS \"   Python_EXECUTABLE   = ${Python_EXECUTABLE}\")\n```\n\n----------------------------------------\n\nTITLE: USD Version Check CMake\nDESCRIPTION: This CMake code snippet illustrates how to check the USD version in CMake files using the `USD_VERSION` variable.  It demonstrates conditional configuration based on the USD version, ensuring compatibility with different USD releases. The `VERSION_LESS` operator allows comparing the variable against a specific version string.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/codingGuidelines.md#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(USD_VERSION VERSION_LESS \"0.24.11\")\n  # CMake code specific to USD versions less than 0.24.11\nendif\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Tests Conditionally on Windows\nDESCRIPTION: This CMake snippet conditionally adds C++ tests specifically on Windows due to linking problems on Linux and OSX. It uses the `add_mayaUsdLibUtils_test` function to add tests for load rules, file system utilities, target layer manipulation, and string splitting.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/utils/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(IS_WINDOWS)\n    # There are link problems on Linux and OSX with C++ test using USD + Maya,\n    # so only run the test on Windows. The code is not platform-specific anwyay,\n    # testing on Windows is sufficient.\n    add_mayaUsdLibUtils_test(\n        testLoadRules\n        testLoadRules.cpp\n    )\n    add_mayaUsdLibUtils_test(\n        testUtilsFileSystem\n        testUtilsFileSystem.cpp\n    )\n    add_mayaUsdLibUtils_test(\n        testTargetLayer\n        testTargetLayer.cpp\n    )\n    add_mayaUsdLibUtils_test(\n        testSplitString\n        testSplitString.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Headers (CMake)\nDESCRIPTION: This snippet installs the public headers to the specified destination.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/AL/usd/transaction/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${usdtransaction_headers}\n  DESTINATION ${AL_INSTALL_PREFIX}/include/AL/usd/transaction\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Name\nDESCRIPTION: Sets the target name for the executable to 'testMayaSchemas'. This variable is later used to refer to the target throughout the CMake script.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/maya/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TARGET_NAME testMayaSchemas)\n```\n\n----------------------------------------\n\nTITLE: Python Target Name Definition\nDESCRIPTION: Defines the name of the Python target based on the operating system and debug settings. On Windows, the debug version of the library is named with a '_d' suffix.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/python/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_WINDOWS AND MAYAUSD_DEFINE_BOOST_DEBUG_PYTHON_FLAG)\n    # On Windows when compiling with debug python the library must be named with _d.\n    set(PYTHON_TARGET_NAME _${PROJECT_NAME}_d)\nelse()\n    set(PYTHON_TARGET_NAME _${PROJECT_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: UFE Version Check C++\nDESCRIPTION: This code demonstrates how to conditionally compile code based on the UFE version using preprocessor directives. It utilizes the `UFE_V3_FEATURES_AVAILABLE` macro to include UFE-specific code only when the required UFE version is available.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/codingGuidelines.md#_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\n#ifdef UFE_V3_FEATURES_AVAILABLE\n#include <ufe/types.h>\n#endif\n```\n\n----------------------------------------\n\nTITLE: mayaUSD File Import - MEL Example\nDESCRIPTION: This MEL command uses the `file` command to import a USD file with the `USD Import` type. It specifies the file path and import options. This approach is used with the ADSK_USDMaya plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/MIGRATION_GUIDE.md#_snippet_13\n\nLANGUAGE: MEL\nCODE:\n```\nfile -force -typ \"USD Import\" -options \"....\" /path/to/out/file.usd\n```\n\n----------------------------------------\n\nTITLE: Generate Anim Shot (Python)\nDESCRIPTION: This python script generates a shot USD file that uses the ball rig, likely utilizing AL_USDMaya's ALMayaReference custom schema. Details of this script are not provided in the context.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/tutorials/endToEndMaya/README.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\npython tutorial_scripts/prep_anim_shot_s00_01.py\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion Based on BUILD_MAYAUSDAPI_LIBRARY in CMake\nDESCRIPTION: This CMake block conditionally adds the 'mayaUsdAPI' subdirectory to the build if the BUILD_MAYAUSDAPI_LIBRARY flag is enabled. This ensures the MayaUsdAPI library is built only when its corresponding build flag is set.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_MAYAUSDAPI_LIBRARY)\n    add_subdirectory(mayaUsdAPI)\nendif()\n```\n\n----------------------------------------\n\nTITLE: mayaUSDImportCommand - MEL Example\nDESCRIPTION: This MEL command imports a USD file using `mayaUSDImportCommand`. It specifies the file path, prim path, and other import options. This command is used with the ADSK_USDMaya plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/MIGRATION_GUIDE.md#_snippet_12\n\nLANGUAGE: MEL\nCODE:\n```\nmayaUSDImportCommand -f \"<path/to/out/file.usd>\" -primPath \"/path/to/prim\" ...options...\n```\n\n----------------------------------------\n\nTITLE: Promoting Header List\nDESCRIPTION: This snippet promotes the header list using the custom `mayaUsd_promoteHeaderList` function.  The function likely moves or copies the headers to a specific directory structure for inclusion during compilation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_promoteHeaderList(HEADERS ${HEADERS} BASEDIR ${PROJECT_NAME} SUBDIR ufe)\n```\n\n----------------------------------------\n\nTITLE: Define Python Test Files CMake\nDESCRIPTION: This CMake snippet defines a list of Python files to be used as unit tests for the Maya USD project. These tests will be automatically discovered and executed using `ctest`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/nodes/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_SCRIPT_FILES\n    testGeomNode.py\n    testLayerManagerSerialization.py\n    testPointBasedDeformerNode.py\n    testProxyShapeBase.py\n    testProxyShapeConversion.py\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Scripts with CMake\nDESCRIPTION: This CMake snippet defines a test script for the Maya USD plugin. It uses the `pxr_test_scripts` macro to specify the Python script to be used for testing the Alembic chaser functionality.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/maya/plugin/pxrUsd/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_test_scripts(\n    testenv/testPxrUsdAlembicChaser.py\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory with CMake\nDESCRIPTION: This snippet adds a subdirectory named 'utils' to the build process, using the `add_subdirectory` command. This command is used to include CMakeLists.txt files present within subdirectories of the current source directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/fileio/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(utils)\n```\n\n----------------------------------------\n\nTITLE: CMake Add utils\nDESCRIPTION: Adds the 'utils' subdirectory to the CMake build process. This indicates that the utils directory contains utility functions or helper classes used by other parts of the project. Building it through the project adds these tools to the build.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(utils)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compile Definitions (UFE Camera Renderable)\nDESCRIPTION: This snippet conditionally defines a compile definition based on whether UFE_CAMERA_HAS_RENDERABLE is defined. It sets the UFE_CAMERA_HAS_RENDERABLE=1 if true. This controls compile-time behavior related to camera renderable features.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (UFE_CAMERA_HAS_RENDERABLE)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        UFE_CAMERA_HAS_RENDERABLE=1\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Inclusion based on UFE V4 Features (Python)\nDESCRIPTION: This CMake snippet conditionally appends a set of test files (AttributeInfo, Connections, UINodeGraphNode, ShaderNodeDef if materialx is built) to the `TEST_SCRIPT_FILES` list if the `CMAKE_UFE_V4_FEATURES_AVAILABLE` variable is set. These include tests specific to the UFE V4 feature set.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/ufe/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_UFE_V4_FEATURES_AVAILABLE)\n    list(APPEND TEST_SCRIPT_FILES\n        testAttributeInfo.py\n        testConnections.py\n        testUINodeGraphNode.py\n    )\n\n    if(CMAKE_WANT_MATERIALX_BUILD)\n        list(APPEND TEST_SCRIPT_FILES\n            testShaderNodeDef.py\n        )\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Printing ProxyShape Reference Count State (C++)\nDESCRIPTION: This command prints the internal reference counts maintained by an AL_usdmaya_ProxyShape node. These reference counts determine the lifespan of AL_usdmaya_Transform nodes. This is primarily useful for developers working on the core of AL_USDMaya.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_16\n\nLANGUAGE: c++\nCODE:\n```\nAL_usdmaya_ProxyShapePrintRefCountState -p \"ProxyShapeName\";\n```\n\n----------------------------------------\n\nTITLE: Checking MayaUSDAPI Library Dependency\nDESCRIPTION: This snippet checks if the `BUILD_MAYAUSDAPI_LIBRARY` option is enabled without `BUILD_MAYAUSD_LIBRARY`, and issues a fatal error if it is the case.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_MAYAUSDAPI_LIBRARY)\n    if (NOT BUILD_MAYAUSD_LIBRARY)\n        message(FATAL_ERROR \"Building mayaUsdAPI library requires MayaUsd core libraries to be built, please enable BUILD_MAYAUSD_LIBRARY.\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Header Files\nDESCRIPTION: Defines the list of header files used in the MaterialX shader generation. These headers provide interfaces and declarations for classes and functions used in the shader generation process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/MaterialXGenOgsXml/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    CombinedMaterialXVersion.h\n    GlslFragmentGenerator.h\n    GlslOcioNodeImpl.h\n    OgsFragment.h\n    OgsXmlGenerator.h\n    ShaderGenUtil.h\n    LobePruner.h\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Public Headers in CMake\nDESCRIPTION: This CMake snippet installs the public header files specified in `arg_PUBLIC_HEADER_FILES` to the destination directory `${AL_INSTALL_PREFIX}/include/${DIRECTORY_PATH}`. This allows other modules to include these headers.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES ${arg_PUBLIC_HEADER_FILES}\n     DESTINATION ${AL_INSTALL_PREFIX}/include/${DIRECTORY_PATH}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Tests Conditionally (UFE Identifier)\nDESCRIPTION: This snippet conditionally appends the testVP2RenderDelegateIsolateSelect.py script if the Maya MRenderItem UFE identifier support is enabled.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/render/vp2RenderDelegate/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(MAYA_MRENDERITEM_UFE_IDENTIFIER_SUPPORT)\n    list(APPEND TEST_SCRIPT_FILES_LAMBERT\n        testVP2RenderDelegateIsolateSelect.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using Ninja Generator with CMake for MayaUSD\nDESCRIPTION: This snippet shows how to use the Ninja generator with CMake for building MayaUSD. It requires installing the Ninja binary and setting the generator and `CMAKE_MAKE_PROGRAM` variables.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/build.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npython build.py --generator Ninja --build-args=-DCMAKE_MAKE_PROGRAM='path to ninja binary'\n```\n\n----------------------------------------\n\nTITLE: Defining Compile Definitions in CMake\nDESCRIPTION: This snippet defines compile-time definitions for the target. It defines MAYAUSD_PLUGIN_EXPORT to enable exporting symbols from the plugin and optionally defines WANT_QT_BUILD if Qt is found.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/plugin/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${TARGET_NAME}\n    PRIVATE\n        MAYAUSD_PLUGIN_EXPORT\n\t\t$<$<BOOL:${Qt_FOUND}>:WANT_QT_BUILD>\n)\n```\n\n----------------------------------------\n\nTITLE: Add MX OpenPBR Surface Reader/Writer\nDESCRIPTION: Conditionally adds MaterialX OpenPBR surface reader and writer files to the target sources if USD has MaterialX OpenPBR surface support AND Maya has OpenPBR surface shader support.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/translators/shading/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif (USD_HAS_MX_OPENPBR_SURFACE AND MAYA_HAS_OPENPBR_SURFACE_SHADER)\n        target_sources(${TARGET_NAME}\n            PRIVATE\n                mtlxOpenPBRSurfaceReader.cpp\n                mtlxOpenPBRSurfaceWriter.cpp\n        )\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Inclusion in CMake\nDESCRIPTION: This snippet conditionally includes 'adskMaterialCommands.cpp' in the target sources if CMake's UFE V3 features are available, demonstrating feature-based compilation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/plugin/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_UFE_V3_FEATURES_AVAILABLE)\n    target_sources(${TARGET_NAME} \n        PRIVATE\n            adskMaterialCommands.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory CMake\nDESCRIPTION: Adds the AL/usd/transaction subdirectory to the build process. This incorporates the source code and build instructions located within that directory into the overall project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(AL/usd/transaction)\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Bindings Source Files\nDESCRIPTION: This snippet specifies the source files used to build the Python bindings library. It uses the `target_sources` command with the `PRIVATE` scope to indicate that these sources are only used for building this specific target.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/schemas/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${TARGET_PYTHON_NAME} \n    PRIVATE\n        module.cpp\n        wrapTokens.cpp\n        wrapMayaReference.cpp\n        wrapALMayaReference.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Install Header Files\nDESCRIPTION: Installs the header files listed in HEADERS to a specific destination directory under the installation prefix.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${HEADERS}\n     DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/fileio\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the Target Name in CMake\nDESCRIPTION: This snippet sets the target name for the Maya USD plugin, which is used throughout the CMake configuration to identify the library being built.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/plugin/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TARGET_NAME mayaUsdPlugin)\n```\n\n----------------------------------------\n\nTITLE: Appending Node Headers to List CMake\nDESCRIPTION: Appends a list of header files related to Maya nodes in AL_USDMaya to the AL_usdmaya_nodes_headers list. These headers define interfaces for various nodes such as Engine, Layer, ProxyShape, and Transform.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND AL_usdmaya_nodes_headers\n        AL/usdmaya/nodes/Engine.h\n        AL/usdmaya/nodes/Layer.h\n        AL/usdmaya/nodes/LayerManager.h\n        AL/usdmaya/nodes/MeshAnimCreator.h\n        AL/usdmaya/nodes/MeshAnimDeformer.h\n        AL/usdmaya/nodes/ProxyShape.h\n        AL/usdmaya/nodes/ProxyUsdGeomCamera.h\n        AL/usdmaya/nodes/RendererManager.h\n        AL/usdmaya/nodes/Transform.h\n        AL/usdmaya/nodes/Scope.h\n        AL/usdmaya/nodes/BasicTransformationMatrix.h\n        AL/usdmaya/nodes/TransformationMatrix.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Plug Files with CMake\nDESCRIPTION: This snippet defines a CMake list containing Python script files specifically used for testing plug-in functionality within the Maya USD project.  The `testMayaUsdPlugVersionCheck.py` script is intended to verify plug-in version compatibility.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_PLUG_FILES\n    testMayaUsdPlugVersionCheck.py\n)\n```\n\n----------------------------------------\n\nTITLE: Promoting Header Files CMake\nDESCRIPTION: Uses the custom CMake function `mayaUsd_promoteHeaderList` to promote the specified header files. The `BASEDIR` and `SUBDIR` parameters define the base directory and subdirectory where the header files will be promoted, within the project structure.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/ufe/trf/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_promoteHeaderList(HEADERS ${HEADERS} BASEDIR ${PROJECT_NAME} SUBDIR ufe/trf)\n```\n\n----------------------------------------\n\nTITLE: Configuring MaterialX Support\nDESCRIPTION: This snippet configures MaterialX support by checking for the `hdMtlx` target in USD and disabling MaterialX if it's not available. It requires at least USD 21.08 and USD must have been built with MaterialX. It also checks if the Maya LightAPI version is sufficient.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_WANT_MATERIALX_BUILD)\n    # Requires at least USD 21.08 for hdMtlx module and USD must have been built with MaterialX:\n    if(NOT TARGET hdMtlx)\n        set(CMAKE_WANT_MATERIALX_BUILD OFF)\n        message(WARNING \"Disabling MaterialX VP2 rendering: it is not supported by this USD package.\")\n    endif()\nendif()\ninclude(cmake/usd.cmake)\n```\n\n----------------------------------------\n\nTITLE: Appending Child Sources in CMake\nDESCRIPTION: This snippet adds the 'event' subdirectory to the build process. The 'add_subdirectory' command tells CMake to process the CMakeLists.txt file within the 'event' directory, thus incorporating those sources into the overall build.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/utils/AL/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(event)\n```\n\n----------------------------------------\n\nTITLE: Target Source Configuration with CMake\nDESCRIPTION: Configures the target's source files for the Maya USD project using CMake.  Specifies the C++ source files to be compiled and linked into the target `${PROJECT_NAME}` as PRIVATE dependencies. These source files are related to export and import chaser functionalities.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/chaser/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(${PROJECT_NAME}\n    PRIVATE\n        exportChaser.cpp\n        exportChaserRegistry.cpp\n        importChaserRegistry.cpp\n        importChaser.cpp\n\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a subdirectory in CMake\nDESCRIPTION: This CMake command adds the 'AL/maya/test' directory to the build process. This allows CMake to find and process the CMakeLists.txt file located within that subdirectory, including any targets or dependencies defined there. This is essential for incorporating test code into the larger Maya USD project build.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayatest/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(AL/maya/test)\n```\n\n----------------------------------------\n\nTITLE: Installing Library (CMake)\nDESCRIPTION: This snippet installs the USDTransaction library to the specified destination. It also installs the PDB file on Windows if MSVC is defined.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/AL/usd/transaction/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${USDTRANSACTION_LIBRARY_NAME}\n  LIBRARY\n  DESTINATION ${USDTRANSACTION_LIBRARY_LOCATION}\n  RUNTIME\n  DESTINATION ${USDTRANSACTION_LIBRARY_LOCATION}\n)\nif(MSVC)\n  install(FILES $<TARGET_PDB_FILE:${USDTRANSACTION_LIBRARY_NAME}> DESTINATION ${USDTRANSACTION_LIBRARY_LOCATION} OPTIONAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for Python Bindings\nDESCRIPTION: Sets compile definitions for the UFE Python bindings target. These definitions are used to configure the Python module, including setting the package name and handling platform-specific configurations for macOS.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/ufe/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${UFE_PYTHON_TARGET_NAME}\n    PRIVATE\n        $<$<BOOL:${IS_MACOSX}>:OSMac_>\n        MFB_PACKAGE_NAME=${UFE_PYTHON_MODULE_NAME}\n        MFB_ALT_PACKAGE_NAME=${UFE_PYTHON_MODULE_NAME}\n        MFB_PACKAGE_MODULE=\"${PROJECT_NAME}.${UFE_PYTHON_MODULE_NAME}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Import of Adapted API in Python\nDESCRIPTION: This code extends the `BulletMassShemaAdaptor` with `CanAdaptForImport` and `ApplySchemaForImport` methods. `CanAdaptForImport` checks if `PhysicsMassAPI` is in `jobArgs.includeAPINames`. `ApplySchemaForImport` applies the schema during import and registers the new bullet object.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass BulletMassShemaAdaptor(mayaUsdLib.SchemaApiAdaptor):\n    #\n    # More cumulative updates to existing BulletMassShemaAdaptor\n    #\n    def CanAdaptForImport(self, jobArgs):\n        return \"PhysicsMassAPI\" in jobArgs.includeAPINames\n\n    def ApplySchemaForImport(self, primReaderArgs, context):\n        # Check if already applied:\n        if self.GetMayaObjectForSchema() is not None:\n            return True\n\n        retVal = self.ApplySchema(om.MDGModifier())\n\n        if retVal:\n            newObject = self.GetMayaObjectForSchema()\n            if newObject is None:\n                return False\n\n            # Register the new node:\n            context.RegisterNewMayaNode(primReaderArgs.GetUsdPrim().GetPath().pathString,\n                                        newObject)\n\n        return retVal\n```\n\n----------------------------------------\n\nTITLE: Importing USD Stage from StageCache\nDESCRIPTION: This C++ code demonstrates how to load a stage already available in StageCache by pointing the Proxy to its Id instead of file path using AL_usdmaya_ProxyShapeImport command.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nAL_usdmaya_ProxyShapeImport -stageId 9223001 -name \"MyAwesomeScene\";\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Tests (CMake)\nDESCRIPTION: Conditionally adds the 'tests' subdirectory to the build process if the SKIP_USDMAYA_TESTS variable is not set. This allows including unit tests as part of the build.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT SKIP_USDMAYA_TESTS)\n  add_subdirectory(tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add OpenPBR Surface Writer/Reader\nDESCRIPTION: Conditionally adds `usdOpenPBRSurfaceWriter.cpp` and `usdOpenPBRSurfaceReader.cpp` to the target if `MAYA_HAS_OPENPBR_SURFACE_SHADER` is true. This allows for OpenPBR surface shader support.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/translators/shading/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (MAYA_HAS_OPENPBR_SURFACE_SHADER)\n    target_sources(${TARGET_NAME}\n        PRIVATE\n            usdOpenPBRSurfaceWriter.cpp\n            usdOpenPBRSurfaceReader.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Test Script Files with CMake\nDESCRIPTION: This snippet initializes a variable `TEST_SCRIPT_FILES` with a Python test script name. It uses the `set` command in CMake to define a list of unit test script files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/pxrUsdPreviewSurface/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_SCRIPT_FILES\n    testPxrUsdPreviewSurfaceDraw.py\n)\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Proxy Node from Time\nDESCRIPTION: This C++ code demonstrates how to disconnect the imported proxy node from the time1.outTime attribute, preventing it from being driven by time using the -ctt/-connectToTime flag in AL_usdmaya_ProxyShapeImport command.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/proxyShape.md#_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\n-connectToTime false\n```\n\n----------------------------------------\n\nTITLE: Conditionally Append Light Implementations (USD Backported MX39 OpenPBR)\nDESCRIPTION: Conditionally appends a GLSL light implementation specific to MaterialX 1.39 if USD has backported the OpenPBR features.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/MaterialXGenOgsXml/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(USD_HAS_BACKPORTED_MX39_OPENPBR)\n    list(APPEND LIGHT_IMPLEMENTATIONS\n        libraries/mx39_lighting_maya_all.glsl\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Type Name Example C++\nDESCRIPTION: This code snippet illustrates the naming convention for type names (classes, structs, enums) in the maya-usd project.  All type names should use UpperCamelCase with no underscores.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/codingGuidelines.md#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nclass MayaUsdStageData;\nclass ImportData;\nenum Roles;\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Library (CMake)\nDESCRIPTION: Adds a shared library target named ${MAYAUTILS_LIBRARY_NAME} using the specified source files.  This defines how the library is built from the provided C++ sources. \nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(${MAYAUTILS_LIBRARY_NAME}\n    SHARED\n        ${maya_source}\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Attribute Edit Router in Python\nDESCRIPTION: This Python code snippet shows how to register an edit router for attributes. It uses `mayaUsd.lib.registerEditRouter` to register the `routeAttrToSessionLayer` function to handle the routing of attribute modifications.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/EditRouting.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport mayaUsd.lib\nmayaUsd.lib.registerEditRouter('attribute', routeAttrToSessionLayer)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files (CMake)\nDESCRIPTION: Lists the C++ source files to be compiled into the AL_MayaUtils library. These files provide the implementation for the library's functionality.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND maya_source\n    utils/FileTranslatorOptions.cpp\n    utils/MenuBuilder.cpp\n    utils/NodeHelper.cpp\n    utils/CommandGuiHelper.cpp\n    utils/PluginTranslatorOptions.cpp\n    utils/Utils.cpp\n    event/MayaEventManager.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Name and Creating Shared Library (CMake)\nDESCRIPTION: Defines the target name for the plugin and creates a shared library using that name. This is the initial step in building the plugin with CMake.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/tutorials/import-export-plugin-c++/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TARGET_NAME exampleImportExportPlugin)\nadd_library(${TARGET_NAME} SHARED)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Sources\nDESCRIPTION: Specifies the source files that make up the executable. These source files are added as private dependencies, meaning they are only used for this target.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/maya/tests/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${TARGET_NAME}\n    PRIVATE\n        main.cpp\n        testMayaSchemas.cpp\n        testModelAPI.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Inclusion based on UFE Scene Segment Support (Python)\nDESCRIPTION: This CMake snippet conditionally appends `testSceneSegment.py` to the `TEST_SCRIPT_FILES` list if the `UFE_SCENE_SEGMENT_SUPPORT` variable is set. This includes tests specific to UFE Scene Segment Support.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/ufe/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif (UFE_SCENE_SEGMENT_SUPPORT)\n    list(APPEND TEST_SCRIPT_FILES\n        testSceneSegment.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Architecture for Apple Builds\nDESCRIPTION: This snippet sets the architecture for Apple builds based on the `BUILD_UB2` option. If `BUILD_UB2` is enabled, it builds a Universal Binary 2 (UB2) for both x86_64 and arm64 architectures. Otherwise, it builds only for x86_64.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n    if(BUILD_UB2)\n        message(STATUS \"Building with Universal Binary 2\")\n        set(CMAKE_OSX_ARCHITECTURES \"x86_64;arm64\")\n        set(CMAKE_OSX_DEPLOYMENT_TARGET 11.0)\n    else()\n        set(CMAKE_OSX_ARCHITECTURES \"x86_64\")\n        set(CMAKE_OSX_DEPLOYMENT_TARGET 10.14)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Target and Adding Sources (usdTestUsdPlugin)\nDESCRIPTION: Defines the `usdTestUsdPlugin` target, which compiles `mayaShaderTranslation.cpp`. The `mayaUsd_compile_config` macro sets up the compile configurations. The target is defined as a shared library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(TARGET_NAME usdTestUsdPlugin)\n\nadd_library(${TARGET_NAME} SHARED)\n\n# -----------------------------------------------------------------------------\n# sources\n# -----------------------------------------------------------------------------\ntarget_sources(${TARGET_NAME}\n    PRIVATE\n        mayaShaderTranslation.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files CMake\nDESCRIPTION: Installs the specified header files to a destination directory under the installation prefix.  The `DESTINATION` parameter specifies where the headers will be placed during the installation process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/ufe/trf/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${HEADERS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/ufe/trf\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Subdirectory\nDESCRIPTION: This snippet adds the `python` subdirectory to the build process, which is likely to contain Python modules or scripts related to the `mayaUsdAPI` library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(python)\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Inclusion based on Display Layer API (Python)\nDESCRIPTION: This CMake snippet conditionally appends `testDisplayLayer.py` to the `TEST_SCRIPT_FILES` list if the `MAYA_HAS_DISPLAY_LAYER_API` variable is set. This includes tests related to the Maya Display Layer API.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/ufe/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif (MAYA_HAS_DISPLAY_LAYER_API)\n    list(APPEND TEST_SCRIPT_FILES\n        testDisplayLayer.py\n        )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Include Directories for Python Library (CMake)\nDESCRIPTION: This snippet defines include directories for the python library. It includes public and private directories.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/AL/usd/transaction/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${USDTRANSACTION_PYTHON_LIBRARY_NAME} \n  PUBLIC\n    ${USDTRANSACTION_INCLUDE_LOCATION} \n    ${PXR_INCLUDE_DIRS}\n  PRIVATE\n    ${CMAKE_BINARY_DIR}/include\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Set Target Sources (MaterialX Version < 1.38.9)\nDESCRIPTION: Adds source files specific to older versions of MaterialX (prior to 1.38.9). These files provide GLSL implementations for Maya transformation nodes.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/MaterialXGenOgsXml/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(MaterialX_VERSION VERSION_LESS \"1.38.9\")\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        Nodes/MayaTransformNormalNodeGlsl.cpp\n        Nodes/MayaTransformPointNodeGlsl.cpp\n        Nodes/MayaTransformVectorNodeGlsl.cpp\n)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Print Serialized Layer Attribute - Python\nDESCRIPTION: This Python script retrieves and prints the contents of the serialized (szd) attribute of a USD layer in Maya. It depends on having a USD scene loaded with a layer named \"Ball_usd\".\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/layers.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint cmds.getAttr(\"Ball_usd.szd\")\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries (CMake)\nDESCRIPTION: Specifies the libraries to link against when building the AL_MayaUtils library.  These libraries provide the necessary dependencies for the library to function. It links against AL_EventSystem, Maya libraries, and usdUfe.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${MAYAUTILS_LIBRARY_NAME}\n  AL_EventSystem\n  ${MAYA_Foundation_LIBRARY}\n  ${MAYA_OpenMaya_LIBRARY}\n  ${MAYA_OpenMayaAnim_LIBRARY}\n  ${MAYA_OpenMayaUI_LIBRARY}\n  usdUfe\n)\n```\n\n----------------------------------------\n\nTITLE: Finding UFE Package\nDESCRIPTION: This snippet uses `find_package` to locate the UFE package with a minimum required version of 0.2.0. It also prints the UFE version, include directory, and library path to the console.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(UFE 0.2.0 REQUIRED)\nmessage(STATUS \"Build MayaUsd with UFE version ${UFE_VERSION}\")\nmessage(STATUS \"   UFE include dir: ${UFE_INCLUDE_DIR}\")\nmessage(STATUS \"   UFE library: ${UFE_LIBRARY}\")\nmessage(STATUS \"   UFE preview features: ${UFE_PREVIEW_FEATURES}\")\n```\n\n----------------------------------------\n\nTITLE: Formatting Debug Messages in C++\nDESCRIPTION: This code demonstrates how to format debug messages using TF_DEBUG.  This is done within the C++ plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/developer.md#_snippet_17\n\nLANGUAGE: C++\nCODE:\n```\nTF_DEBUG(ALUSDMAYA_MY_CUSTOM_FLAG).Msg(\"Hello world, this is an int %d, and this is a string \\\"$s\\\"\\n\", 42, \"hellllllo!\");\n```\n\n----------------------------------------\n\nTITLE: Add Python Unit Tests with CMake\nDESCRIPTION: This CMake code iterates through the list of Python test files, creates a unit test target for each using `mayaUsd_get_unittest_target`, adds the test using `mayaUsd_add_test`, and sets a label for filtering.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/LookdevXUfe/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(script ${TEST_SCRIPT_FILES})\n    mayaUsd_get_unittest_target(target ${script})\n    mayaUsd_add_test(${target}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        PYTHON_MODULE ${target}\n    )\n\n    # Add a ctest label to these tests for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS LookdevXUfe)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring Unit Tests (CMake)\nDESCRIPTION: This CMake snippet iterates through the `TEST_SCRIPT_FILES` list, creates a test target for each script using `mayaUsd_get_unittest_target`, and then adds a test using `mayaUsd_add_test`. Environment variables are configured to ensure the tests run correctly, including setting library paths, pre-loading libraries, disabling the Viewport 2.0 render delegate, and using older color management.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/maya/lib/pxrUsdMayaGL/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(script ${TEST_SCRIPT_FILES})\n    mayaUsd_get_unittest_target(target ${script})\n    mayaUsd_add_test(${target}\n        INTERACTIVE\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        PYTHON_SCRIPT ${script}\n        ENV\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n\n            # Maya uses a very old version of GLEW, so we need support for\n            # pre-loading a newer version from elsewhere.\n            \"LD_PRELOAD=${ADDITIONAL_LD_PRELOAD}\"\n\n            # All of the pxrUsdMayaGL tests exercise Pixar's batch renderer, so\n            # we turn the Viewport 2.0 render delegate off.\n            \"MAYAUSD_DISABLE_VP2_RENDER_DELEGATE=1\"\n\n            # Fallback to old color management. We will have to investigate\n            # and introduce OCIOv2 compatible version of these tests.\n            \"MAYA_COLOR_MANAGEMENT_SYNCOLOR=1\"\n    )\n\n    # Assign a CTest label to these tests for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS pxrUsdMayaGL)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Define MayaUsd plugin includes in JSON\nDESCRIPTION: This JSON file defines the relative path to the folder that contains the USD JSON file, used by MayaUSD to load the plugin. The `PlugPath` property specifies the folder containing the `plugInfo.json` file.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/tutorials/import-export-plugin-c++/README.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"MayaUsdIncludes\": [\n        {\n            \"PlugPath\":\"exampleImportExportPlugin\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Info File (usdTestMayaPlugin)\nDESCRIPTION: This snippet configures the `plugInfoMaya.json` file, copying it to `Maya/plugInfo.json` in the binary directory.  This JSON file contains metadata about the plugin, enabling Maya to discover and load the plugin correctly. The `configure_file` command replaces variables within the JSON file.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/plugInfoMaya.json\"\n               \"${CMAKE_CURRENT_BINARY_DIR}/Maya/plugInfo.json\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining PXR Package\nDESCRIPTION: This snippet sets the package name to `AL_USDMayaPlugin`. This variable is later used to define the target library and other build configurations.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaPlugin/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PACKAGE AL_USDMayaPlugin)\n```\n\n----------------------------------------\n\nTITLE: Include Directive - Private Headers C++\nDESCRIPTION: This code snippet demonstrates how to include private project header files using double quotes and relative paths.  Avoid using \"._\" or \".._\" in the relative path.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/codingGuidelines.md#_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\n#include \"privateUtils.h\"\n#include \"pvt/helperFunctions.h\"\n```\n\n----------------------------------------\n\nTITLE: Define target name and create shared library\nDESCRIPTION: This snippet defines the target name for the mtoh plugin and creates a shared library using CMake's add_library command.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/mayaToHydra/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TARGET_NAME mtoh)\n\nadd_library(${TARGET_NAME} SHARED)\n```\n\n----------------------------------------\n\nTITLE: Target Source Definition CMake\nDESCRIPTION: Defines the source files that are compiled into the target library specified by `${TARGET_NAME}`. These are the core implementation files for the Maya USD adapter, handling the conversion and adaptation of Maya data to USD.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/hdMaya/adapters/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(${TARGET_NAME}\n    PRIVATE\n        adapter.cpp\n        adapterDebugCodes.cpp\n        adapterRegistry.cpp\n        aiSkydomeLightAdapter.cpp\n        areaLightAdapter.cpp\n        cameraAdapter.cpp\n        dagAdapter.cpp\n        directionalLightAdapter.cpp\n        lightAdapter.cpp\n        proxyAdapter.cpp\n        materialAdapter.cpp\n        materialNetworkConverter.cpp\n        mayaAttrs.cpp\n        meshAdapter.cpp\n        nurbsCurveAdapter.cpp\n        pointLightAdapter.cpp\n        shapeAdapter.cpp\n        spotLightAdapter.cpp\n        tokens.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Set Maya Type Name (CMake)\nDESCRIPTION: This CMake command sets the variable `PREVIEWSURFACE_MAYA_TYPE_NAME` to the string `usdPreviewSurface`. This is likely used to register a custom shader type within Maya for USD preview surfaces.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/scripts/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(PREVIEWSURFACE_MAYA_TYPE_NAME \"usdPreviewSurface\")\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files CMake\nDESCRIPTION: Defines a variable `HEADERS` containing a list of header files. These header files are related to transformation utilities within the Maya-USD project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/ufe/trf/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    RotationUtils.h\n    UsdTransform3dFallbackMayaXformStack.h\n    UsdTransform3dMayaXformStack.h\n    XformOpUtils.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Compile Definitions\nDESCRIPTION: This snippet defines the compile definition `AL_USDMAYA_PLUGIN_EXPORT` for the `${PXR_PACKAGE}` target. This definition is used to control the export of symbols from the plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaPlugin/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${PXR_PACKAGE}\n    PRIVATE\n        AL_USDMAYA_PLUGIN_EXPORT\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Library (CMake)\nDESCRIPTION: This snippet defines the source files and headers for the USDTransaction library and creates the shared library using add_library. It sets the compile configuration using mayaUsd_compile_config.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/AL/usd/transaction/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND usdtransaction_headers\n  Api.h\n  Notice.h\n  Transaction.h\n  TransactionManager.h\n)\n\nlist(APPEND usdtransaction_source\n  Notice.cpp\n  Transaction.cpp\n  TransactionManager.cpp\n)\n\nadd_library(${USDTRANSACTION_LIBRARY_NAME}\n  SHARED\n    ${usdtransaction_source}\n)\n\n# compiler configuration\nmayaUsd_compile_config(${USDTRANSACTION_LIBRARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with ctest\nDESCRIPTION: This snippet demonstrates how to run unit tests directly from the build directory using `ctest`. It provides an example of running Animal Logic's tests.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/build.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n➜  ctest -j 8\nTest project /Users/sabrih/Desktop/workspace/build/Debug/plugin/al\n    Start 4: AL_USDMayaTestPlugin\n    Start 5: TestUSDMayaPython\n    Start 8: TestPxrUsdTranslators\n    Start 7: TestAdditionalTranslators\n    Start 1: AL_MayaUtilsTests\n    Start 3: Python:AL_USDTransactionTests\n    Start 2: GTest:AL_USDTransactionTests\n    Start 6: testMayaSchemas\n1/8 Test #2: GTest:AL_USDTransactionTests .....   Passed    0.06 sec\n2/8 Test #6: testMayaSchemas ..................   Passed    0.10 sec\n3/8 Test #3: Python:AL_USDTransactionTests ....   Passed    0.73 sec\n4/8 Test #1: AL_MayaUtilsTests ................   Passed    6.01 sec\n5/8 Test #8: TestPxrUsdTranslators ............   Passed    9.96 sec\n6/8 Test #5: TestUSDMayaPython ................   Passed   10.28 sec\n7/8 Test #7: TestAdditionalTranslators ........   Passed   12.06 sec\n8/8 Test #4: AL_USDMayaTestPlugin .............   Passed   27.43 sec\n100% tests passed, 0 tests failed out of 8\n```\n\n----------------------------------------\n\nTITLE: Installing Program Database File (CMake)\nDESCRIPTION: This conditionally installs the program database (PDB) file on Windows. PDB files contain debugging information.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/pxrUsdPreviewSurface/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:${TARGET_NAME}> \n        DESTINATION ${LIBRARY_INSTALL_PATH} OPTIONAL\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Properties in CMake\nDESCRIPTION: This snippet calls a custom CMake function, 'maya_set_plugin_properties', to set specific properties for the Maya USD plugin, likely including versioning or dependencies.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/plugin/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nmaya_set_plugin_properties(${TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Set plugin properties\nDESCRIPTION: This snippet sets plugin properties using the maya_set_plugin_properties macro. These properties are likely used by Maya to manage and load the plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/mayaToHydra/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nmaya_set_plugin_properties(${TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Get USD Stage from Translator Context\nDESCRIPTION: Retrieves the USD stage from the translator context. The context provides access to data relevant to the translation process. Requires the TranslatorStageDataUtils class.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/AL/usdmaya/fileio/translators/README.md#_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nUsdStageRefPtr stage = TranslatorStageDataUtils::GetStage(GetContext());\n```\n\n----------------------------------------\n\nTITLE: Install Node GLSL Implementations\nDESCRIPTION: Installs the GLSL implementation files for nodes to a specific destination under the libraries directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/MaterialXGenOgsXml/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${NODE_GLSL_IMPLEMENTATIONS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/libraries/adsk/maya/genglsl\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Interactive Test Script Files (Python)\nDESCRIPTION: This snippet defines a CMake variable, `INTERACTIVE_TEST_SCRIPT_FILES`, containing a list of Python scripts designated as interactive tests. These tests may require user interaction or visual verification.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/ufe/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(INTERACTIVE_TEST_SCRIPT_FILES\n    testPixelMoveCmd.py\n    testUIIcons.py\n)\n```\n\n----------------------------------------\n\nTITLE: Installing PDB Files (Windows)\nDESCRIPTION: Installs the program database (PDB) file for the target library on Windows. This file contains debugging information.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/translators/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:${TARGET_NAME}>\n        DESTINATION ${LIBRARY_INSTALL_PATH} OPTIONAL\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Python Bindings\nDESCRIPTION: Links the main C++ target ${PROJECT_NAME} to the UFE Python bindings target. This allows the Python bindings to access the functionality provided by the main C++ module.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/ufe/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${UFE_PYTHON_TARGET_NAME}\n    PUBLIC\n        ${PROJECT_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Run-time Search Paths\nDESCRIPTION: Configures run-time search paths for macOS and Linux.  It sets up relative paths to find shared libraries at runtime using custom functions.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/python/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX)\n    mayaUsd_init_rpath(rpath \"lib\")\n    mayaUsd_add_rpath(rpath \"../../..\")\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../../../../Maya.app/Contents/MacOS\")\n        mayaUsd_add_rpath(rpath \"../../../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    endif()\n    mayaUsd_install_rpath(rpath ${PYTHON_TARGET_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Python Target Name\nDESCRIPTION: This snippet determines the name of the Python target based on the operating system and whether debug Python is enabled. On Windows with debug Python, the library name is suffixed with '_d'. Otherwise, it's prefixed with '_'.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(IS_WINDOWS AND MAYAUSD_DEFINE_BOOST_DEBUG_PYTHON_FLAG)\n    # On Windows when compiling with debug python the library must be named with _d.\n    set(PYTHON_TARGET_NAME \"_${PROJECT_NAME}_d\")\nelse()\n    set(PYTHON_TARGET_NAME \"_${PROJECT_NAME}\")\nendif()\n\nadd_library(${PYTHON_TARGET_NAME} SHARED)\n```\n\n----------------------------------------\n\nTITLE: Setting Python Module Properties CMake\nDESCRIPTION: Applies custom properties to the Python module using the set_python_module_property function. Likely defines how python modules are loaded.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nset_python_module_property(${PYTHON_LIBRARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Public Include Directories - CMake\nDESCRIPTION: This snippet sets the public include directories for the target, including MAYAUTILS_INCLUDE_LOCATION. These directories are accessible to other projects that link against this target.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/tests/mayaplugintest/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${TARGET_NAME}\n    PUBLIC\n    ${MAYAUTILS_INCLUDE_LOCATION}\n)\n```\n\n----------------------------------------\n\nTITLE: Registering UI Callback in Python\nDESCRIPTION: This Python script snippet demonstrates how to register a callback function using `mayaUsd.lib.registerUICallback` to be notified about system lock changes due to refreshSystemLock. The example callback retrieves the proxy shape path and the list of affected layers.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/LayerLocking.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef exampleCallback(context, callbackData):\n    # Get the proxy shape path\n    proxyShapePath = context.get('proxyShapePath')\n    # Get the list of affected layers\n    layerIds = callbackData.get('affectedLayerIds')\n    print(\"The layers with a change in lock status are:\")\n    for layerId in layerIds:\n        print(layerIds)\n\nmayaUsd.lib.registerUICallback('onRefreshSystemLock', exampleCallback)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Tests in CMake\nDESCRIPTION: This snippet conditionally adds a subdirectory named 'tests' to the build process, enabling the inclusion of unit tests or other testing-related files. The `if(NOT SKIP_USDMAYA_TESTS)` condition checks whether the `SKIP_USDMAYA_TESTS` variable is defined and false. If it's not, the tests subdirectory is included.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/pxrUsdTranslators/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT SKIP_USDMAYA_TESTS)\n  add_subdirectory(tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Applying MayaUSD Compile Configuration (CMake)\nDESCRIPTION: This applies a custom MayaUSD compile configuration to the target. It likely sets compiler flags specific to the MayaUSD environment.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/pxrUsdPreviewSurface/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_compile_config(${TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: This snippet links the library with its dependencies. The `target_link_libraries` command specifies the libraries to be linked with the target, ensuring that the necessary symbols are available at link time. Public libraries are linked for dependent projects while private libraries are only linked for this project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/lookdevXUsd/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${PROJECT_NAME}\n    PUBLIC\n        sdf\n        sdr\n        mayaUsdAPI\n    PRIVATE\n        usd\n        usdShade\n        usdUtils\n        usdUI\n        ${UFE_LIBRARY}\n        ${LookdevXUfe_LIBRARY}\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries (CMake)\nDESCRIPTION: This snippet links the USDTransaction library with tf, sdf, usd, and python libraries.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/AL/usd/transaction/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${USDTRANSACTION_LIBRARY_NAME}\n  tf\n  sdf\n  usd\n  ${python_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries (usdTestMayaPlugin)\nDESCRIPTION: This snippet links the `usdTestMayaPlugin` target with the `mayaUsd` and `usdShade` libraries. These libraries provide essential functionalities for the plugin to interact with Maya and USD, respectively. Linking ensures that the plugin has access to the necessary symbols and functions defined in these libraries.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${TARGET_NAME}\n    PRIVATE\n        mayaUsd\n        usdShade\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake\nDESCRIPTION: This CMake snippet adds subdirectories for the AL_USDMayaPlugin and, conditionally, the AL_USDMayaTestPlugin. The SKIP_USDMAYA_TESTS variable controls whether the test plugin is included. It demonstrates how to structure a CMake project with multiple sub-projects.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(AL_USDMayaPlugin)\nif(NOT SKIP_USDMAYA_TESTS)\n  add_subdirectory(AL_USDMayaTestPlugin)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Python Library (CMake)\nDESCRIPTION: This snippet links the python library with the USDTransaction library and python libraries.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/AL/usd/transaction/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${USDTRANSACTION_PYTHON_LIBRARY_NAME}\n  ${USDTRANSACTION_LIBRARY_NAME}\n  ${python_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: This snippet links the Python extension library against the core project library. This allows the extension to access functionality provided by the core project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/python/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${PYTHON_TARGET_NAME}\n    PRIVATE\n        ${PROJECT_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting PXR Package Name in CMake\nDESCRIPTION: This snippet sets the name of the PXR package to 'pxrUsdPreviewSurface'. This variable is used later in the CMake configuration to define the plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/maya/plugin/pxrUsdPreviewSurface/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_PACKAGE pxrUsdPreviewSurface)\n```\n\n----------------------------------------\n\nTITLE: Defining a Maya Command in C++\nDESCRIPTION: This snippet shows how to define a maya command, along with syntax for creating the command.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/developer.md#_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\nAL_MAYA_DEFINE_COMMAND(MyCommand);\n\nconst char* const MyCommand::g_helpText = R\"(\nMyCommand Overview:\n\n  I am some information about how the command should be used.\n)\";\n\nMSyntax MyCommand::createSyntax()\n{\n  MSyntax syn;\n  syn.addFlag(\"-h\", \"-help\", MSyntax::kNoArg);\n  syn.addFlag(\"-sa\", \"-someArg\", MSyntax::kString);\n  return syn;\n}\n\nMStatus MyCommand::doIt(const MArgList& argList)\n{\n  MStatus status;\n  MArgDatabase database(syntax(), args, &status);\n  if(!status)\n    return status;\n  AL_COMMAND_HELP(args, g_helpText);\n\n  // test for any flags\n  MString someArg = \"defaultValue\";\n  if(args.isFlagSet(\"-sa\"))\n  {\n    args.getFlagArgument(\"-sa\", 0, someArg);\n  }\n\n  // now do the actual commandy stuff\n\n  return MS::kSuccess;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Compile Configuration\nDESCRIPTION: Applies a custom compile configuration function (mayaUsd_compile_config) to the target library.  This function likely handles common compiler flag settings.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/translators/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_compile_config(${TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Specifying Build Stages for MayaUSD\nDESCRIPTION: This snippet illustrates how to specify which build stages to execute using the `--stages` flag. It provides examples of configuring, building, and installing the project, as well as running tests.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/build.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n--stages=configure,build,install\n--stages=test\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Properties (usdTestInfoImportChaser)\nDESCRIPTION: Sets the plugin properties for the `usdTestInfoImportChaser` target, enabling Maya to recognize and load it as a plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nmaya_set_plugin_properties(${TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Inclusion based on MRenderItem UFE Identifier Support (Python)\nDESCRIPTION: This CMake snippet conditionally appends `testSetsCmd.py` to the `TEST_SCRIPT_FILES` list if the `MAYA_MRENDERITEM_UFE_IDENTIFIER_SUPPORT` variable is set. This allows including tests specifically when this feature is enabled.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/ufe/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(MAYA_MRENDERITEM_UFE_IDENTIFIER_SUPPORT)\n    list(APPEND TEST_SCRIPT_FILES\n        testSetsCmd.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Library Target\nDESCRIPTION: This snippet creates a library target named `${PXR_PACKAGE}` which is `AL_USDMayaPlugin`. The source file for this library is `plugin.cpp`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaPlugin/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(\n    ${PXR_PACKAGE}\n    plugin.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for MayaUSD\nDESCRIPTION: This snippet links the target ${PXR_TRANSLATORS_PACKAGE} with the libraries specified in the DEPENDANT_LIBRARIES variable. This ensures that the library has access to the functions and data structures defined in the linked libraries.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/pxrUsdTranslators/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${PXR_TRANSLATORS_PACKAGE} PRIVATE ${DEPENDANT_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Configure Compiler (CMake)\nDESCRIPTION: This snippet configures the compiler settings for the target, likely using a custom CMake function named `mayaUsd_compile_config`. This allows for centralized management of compiler flags and options used throughout the build process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaTestPlugin/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# compiler configuration\nmayaUsd_compile_config(${TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files with CMake\nDESCRIPTION: This snippet defines a list of header files using the `set` command in CMake. These header files are crucial for the project's structure and include API definitions, debug codes, forward declarations, and token definitions. The `HEADERS` variable is later used to manage these header files throughout the build process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/base/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    api.h\n    debugCodes.h\n    forwardDeclares.h\n    tokens.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Python Module Properties (CMake)\nDESCRIPTION: This snippet calls the function `set_python_module_property` on the target. The definition of this function is not included in the provided document, but it is expected that it sets certain properties or compiler definitions specific to a python module.  It is required for creating the Python bindings.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/mayatest/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset_python_module_property(${PYTHON_LIBRARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Tests\nDESCRIPTION: Adds a unit test for the executable. The test is run by executing the executable. Environment variables are set to configure the plugin path and library path for the test.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/maya/tests/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_add_test(${TARGET_NAME}\n    COMMAND $<TARGET_FILE:${TARGET_NAME}>\n    ENV\n        \"${PXR_OVERRIDE_PLUGINPATH_NAME}=${ADDITIONAL_PXR_PLUGINPATH_NAME}\"\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Script Files CMake\nDESCRIPTION: This CMake snippet sets a variable TEST_SCRIPT_FILES to a list of Python scripts that will be used as test cases for the Maya USD plugin. These tests cover export and import functionalities.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/translators/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_SCRIPT_FILES\n    testUsdExport8BitNormalMap.py\n    testUsdExportAnimation.py\n    testUsdExportAsClip.py\n    testUsdExportBindTransform.py\n    testUsdExportBlendshapes.py\n    testUsdExportCamera.py\n    testUsdExportCameraAttrSpline.py\n    testUsdExportColorSets.py\n    testUsdExportConnected.py\n    testUsdExportDefaultPrim.py\n    testUsdExportDisplayColor.py\n    testUsdExportEulerFilter.py\n    testUsdExportFileFormat.py\n    testUsdExportFilterTypes.py\n    testUsdExportFrameOffset.py\n    testUsdExportGeomSubset.py\n    testUsdExportInstances.py\n    testUsdExportLayerAttributes.py\n    testUsdExportLight.py\n    testUsdExportLocator.py\n    testUsdExportMayaInstancer.py\n    testUsdExportMesh.py\n    testUsdExportNurbsCurve.py\n    testUsdExportOpenLayer.py\n    testUsdExportOverImport.py\n    testUsdExportUsdPreviewSurface.py\n    testUsdExportRootPrim.py\n    testUsdExportTypes.py\n    testUsdExportUnits.py\n    testUsdExportUpAxis.py\n    testUsdExportUVSetsSwitch.py\n\n    # To investigate: following test asserts in MFnParticleSystem, but passes.\n    # PPT, 17-Jun-20.\n    testUsdExportParticles.py\n    testUsdExportPref.py\n\n    # Following test runs only in legacy render layer mode, otherwise skipped.\n    # Legacy render layers are deprecated, and should not be used.\n    # To avoid skipping and run in legacy render layer mode,\n    # export MAYA_ENABLE_LEGACY_RENDER_LAYERS=1\n    testUsdExportRenderLayerMode.py\n\n    # # XXX: This test is disabled by default since it requires the RenderMan for Maya plugin.\n    # testUsdExportRfMLight.py\n    testUsdExportRoots.py\n    testUsdExportRootsAndRootPrim.py\n    testUsdExportSelection.py\n    testUsdExportSelectionHierarchy.py\n    testUsdExportSkeleton.py\n    testUsdExportSkin.py\n    testUsdExportStagesAsRefs.py\n    testUsdExportStripNamespaces.py\n    testUsdExportStroke.py\n    testUsdExportTexture.py\n    testUsdExportUserTaggedAttributes.py\n    testUsdExportVisibilityDefault.py\n    testUsdImportAnonymousLayer.py\n    testUsdImportCamera.py\n    testUsdImportBasisCurves.py\n    testUsdImportBatchNurbsCurves.py\n    testUsdImportBlendShapes.py\n    testUsdImportLinearCurves.py\n    testUsdImportHighDegreeNurbsCurves.py\n    testUsdImportNurbsCurves.py\n    testUsdImportBatchBezierCurves.py\n    testUsdImportColorSets.py\n    testUsdImportDisplacement.py\n    testUsdImportExportScope.py\n    testUsdImportExportTypelessDefs.py\n\n    # To investigate: following test asserts in TDNshapeEditorManager.cpp, but\n    # passes.  PPT, 17-Jun-20.\n    testUsdImportFrameRange.py\n    testUsdImportFramerates.py\n    testUsdImportInstances.py\n    testUsdImportLight.py\n    testUsdImportMayaReference.py\n    testUsdImportMesh.py\n    testUsdImportPointCache.py\n    testUsdImportPreviewSurface.py\n    testUsdImportRelativeTextures.py\n\n    # XXX: This test is disabled by default since it requires the RenderMan for Maya plugin.\n    # testUsdImportRfMLight.py\n    testUsdImportSessionLayer.py\n    testUsdImportShadingModeDisplayColor.py\n    testUsdImportShadingModePxrRis.py\n    testUsdImportUVSetMappings.py\n    testUsdImportUSDZTextures.py\n    testUsdExportImportRoundtripPreviewSurface.py\n    testUsdImportSkeleton.py\n    testUsdImportUnits.py\n    testUsdImportUpAxis.py\n    testUsdImportXforms.py\n    testUsdImportXformAnim.py\n    testUsdImportEulerFilter.py\n    testUsdMayaAdaptor.py\n    testUsdMayaAdaptorGeom.py\n    testUsdMayaAdaptorMetadata.py\n    testUsdMayaAdaptorUndoRedo.py\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Maya Type Name\nDESCRIPTION: This snippet sets a variable `PREVIEWSURFACE_MAYA_TYPE_NAME` to 'pxrUsdPreviewSurface'. This is likely used to identify the type within Maya.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/maya/plugin/pxrUsdPreviewSurface/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(PREVIEWSURFACE_MAYA_TYPE_NAME \"pxrUsdPreviewSurface\")\n```\n\n----------------------------------------\n\nTITLE: Query Edit Target with mayaUsdEditTarget - MEL\nDESCRIPTION: This MEL command queries the edit target for a specified USD shape using the `mayaUsdEditTarget` command. The `-q` flag indicates a query operation, and the `-et` flag specifies that the edit target should be retrieved.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/MIGRATION_GUIDE.md#_snippet_6\n\nLANGUAGE: MEL\nCODE:\n```\nmayaUsdEditTarget -q -et \"|usdTest|usdTestShape\";\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Plugins (CMake)\nDESCRIPTION: This snippet uses the pxr_add_extra_plugins CMake command to add a plugin. The exact functionality of this command depends on the custom implementation of the pxr_add_extra_plugins macro.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/maya/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_add_extra_plugins(plugin)\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Addition in CMake\nDESCRIPTION: This snippet conditionally adds the `MaterialXGenOgsXml` subdirectory if the `CMAKE_WANT_MATERIALX_BUILD` variable is set to true. This allows the project to include MaterialX support only when it's desired.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (CMAKE_WANT_MATERIALX_BUILD)\n    add_subdirectory(MaterialXGenOgsXml)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Definitions\nDESCRIPTION: This snippet configures compiler definitions for the project. It sets preprocessor macros that can be used to conditionally compile code based on the target platform and build configuration. The `target_compile_definitions` command associates these definitions with the library target.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/lookdevXUsd/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        LOOKDEVX_USD_SHARED\n        PXR_VERSION=${PXR_VERSION}\n        MFB_PACKAGE_NAME=\"${PROJECT_NAME}\"\n        MFB_ALT_PACKAGE_NAME=\"${PROJECT_NAME}\"\n        MFB_PACKAGE_MODULE=\"${PROJECT_NAME}\"\n        $<$<BOOL:${IS_MACOSX}>:OSMac_>\n        $<$<BOOL:${IS_LINUX}>:LINUX>\n        # this flag is needed when building for Maya\n        $<$<BOOL:${IS_WINDOWS}>:WIN32>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Headers\nDESCRIPTION: Installs header files to the include directory. This allows other projects to use the library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/translators/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${HEADERS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${TARGET_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Install Path\nDESCRIPTION: This snippet defines the library install path variable for installing the library target.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIBRARY_INSTALL_PATH\n    ${CMAKE_INSTALL_PREFIX}/lib\n)\n```\n\n----------------------------------------\n\nTITLE: Creating AL_USDMayaUtils Library\nDESCRIPTION: This code creates a shared library named AL_USDMayaUtils using the source files defined in the `usdmaya_utils_source` variable.  It utilizes CMake's `add_library` command to define the library target.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdmayautils/AL/usdmaya/utils/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(${USDMAYA_UTILS_LIBRARY_NAME}\n    SHARED\n        ${usdmaya_utils_source}\n)\n```\n\n----------------------------------------\n\nTITLE: Importing usdmaya Module in Python\nDESCRIPTION: This code snippet imports the usdmaya module from the AL library. It is the foundational import statement required to access Maya USD functionalities through Python.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/python.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom AL import usdmaya\n```\n\n----------------------------------------\n\nTITLE: Compile Configuration\nDESCRIPTION: Applies a common set of compile configurations to the Python target using a custom function mayaUsd_compile_config.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/python/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_compile_config(${PYTHON_TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Install PlugInfo JSON to USD CMake\nDESCRIPTION: Installs the generated plugInfo.json file to the USD library directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/lib/usd/plugInfo.json\n    DESTINATION ${AL_INSTALL_PREFIX}/lib/usd\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Qt Libraries (CMake)\nDESCRIPTION: Links the required Qt libraries (Core, Gui, Widgets) to the target. This allows the plugin to use Qt functionality for creating user interfaces.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/tutorials/import-export-plugin-c++/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${TARGET_NAME}\n    PRIVATE\n\t\tQt::Core\n\t\tQt::Gui\n\t\tQt::Widgets\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Interactive Unit Tests (Python)\nDESCRIPTION: This CMake snippet iterates through the `INTERACTIVE_TEST_SCRIPT_FILES` list, creating an interactive unit test target for each Python script. It specifies that these tests are interactive and sets the working directory and environment variables. Finally, the tests are labeled 'ufe'.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/ufe/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(script ${INTERACTIVE_TEST_SCRIPT_FILES})\n    mayaUsd_get_unittest_target(target ${script})\n    mayaUsd_add_test(${target}\n        INTERACTIVE\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        PYTHON_SCRIPT ${script}\n        ENV\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n    )\n\n    # Add a ctest label to these tests for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS ufe)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Adding MaterialX Shader Generator C++ Test\nDESCRIPTION: This CMake snippet conditionally adds a C++ test for MaterialX shader generation utilities if MaterialX support is enabled and the USD version is greater than or equal to 22.11. It defines compiler definitions and links necessary libraries for the test.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/utils/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_WANT_MATERIALX_BUILD AND PXR_VERSION GREATER_EQUAL 2211)\n    add_mayaUsdLibUtils_test(\n        test_ShaderGenUtils\n        test_ShaderGenUtils.cpp\n    )\n\n    target_compile_definitions(test_ShaderGenUtils\n        PRIVATE\n            MATERIALX_TEST_DATA=\"${CMAKE_CURRENT_SOURCE_DIR}/materialx_test_data\"\n            MATERIALX_TEST_OUTPUT=\"${CMAKE_BINARY_DIR}/test/Temporary/test_ShaderGenUtils\"\n        )\n\n        target_link_libraries(test_ShaderGenUtils\n        PRIVATE\n            usdMtlx\n            MaterialXCore\n            MaterialXFormat\n        )\n\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files for the Target\nDESCRIPTION: This snippet specifies the source files that will be compiled and linked into the hdMaya library. The source files are 'debugCodes.cpp' and 'utils.cpp'.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/hdMaya/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${TARGET_NAME}\n    PRIVATE\n        debugCodes.cpp\n        utils.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Library\nDESCRIPTION: Adds a shared library target with the specified name. This command creates the target that will be built during the CMake process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/translators/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(${TARGET_NAME} SHARED)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for AL_USDMayaSchemasTest (CMake)\nDESCRIPTION: This snippet links the necessary libraries to the `AL_USDMayaSchemasTest` library. It uses the `DEPENDANT_LIBRARIES` variable, which contains a list of libraries that the plugin depends on.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/mayatest/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(AL_USDMayaSchemasTest ${DEPENDANT_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Tests with CMake Functions\nDESCRIPTION: This snippet iterates through the test scripts and adds them as unit tests using custom CMake functions. It sets the working directory, specifies the Python module, and defines environment variables required for the tests. It appends the `usdPreviewSurface` label to the test.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/pxrUsdPreviewSurface/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(script ${TEST_SCRIPT_FILES})\n    mayaUsd_get_unittest_target(target ${script})\n    mayaUsd_add_test(${target}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        PYTHON_MODULE ${target}\n        ENV\n            \"USD_FORCE_DEFAULT_MATERIALS_SCOPE_NAME=1\"\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n    )\n    set_property(TEST ${target} APPEND PROPERTY LABELS usdPreviewSurface)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Finding GTest Package\nDESCRIPTION: Finds the GTest package, which is required for unit testing. The `REQUIRED` keyword ensures that CMake will stop with an error if GTest is not found.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/maya/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(GTest REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Install Headers CMake\nDESCRIPTION: This CMake snippet uses the `install` command to specify where the header files should be placed during the installation process. It copies the header files defined in the `HEADERS` variable to a destination directory under the `include` directory of the installation prefix. The destination path is `${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/undo/`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/undo/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES ${HEADERS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/undo/\n)\n```\n\n----------------------------------------\n\nTITLE: Refreshing System Lock in C++ (Non-Undoable)\nDESCRIPTION: This C++ snippet shows how to refresh the system lock status of a USD layer using `MayaCommandHook::refreshLayerSystemLock`, which calls the `mayaUsdLayerEditor refreshSystemLock` MEL command. Parameters include the USD layer and a flag to refresh sublayers. This operation is un-doable.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/LayerLocking.md#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nMayaCommandHook::refreshLayerSystemLock(usdLayer, refreshSubLayers);\n```\n\n----------------------------------------\n\nTITLE: Setting Run-Time Search Paths\nDESCRIPTION: Configures the run-time search paths for the target library. This ensures that the library can find its dependencies at runtime, especially on macOS and Linux.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/translators/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX)\n    mayaUsd_init_rpath(rpath \"lib\")\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/lib\")\n    if(DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    elseif(DEFINED PXR_USD_LOCATION)\n        mayaUsd_add_rpath(rpath \"${PXR_USD_LOCATION}/lib\")\n    endif()\n    if(IS_LINUX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib64\")\n    endif()\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../Maya.app/Contents/MacOS\")\n    endif()\n    mayaUsd_install_rpath(rpath ${TARGET_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files for Installation\nDESCRIPTION: This snippet defines a list of header files that will be installed alongside the `mayaUsd_Schemas` library. This prepares them for inclusion in other projects.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/schemas/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    api.h\n    ALMayaReference.h\n    MayaReference.h\n    tokens.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Tests with CMake\nDESCRIPTION: This CMake snippet iterates through a list of test scripts, retrieves the test target using `mayaUsd_get_unittest_target`, and adds the test using `mayaUsd_add_test`. It sets the working directory and defines the environment variables required for the test to run. Finally, it sets the `MayaUsd` label for ctest filtering.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(script ${TEST_SCRIPT_FILES})\n    mayaUsd_get_unittest_target(target ${script})\n    mayaUsd_add_test(${target}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        PYTHON_MODULE ${target}\n        ENV\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n    )\n\n    # Add a ctest label to these tests for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS MayaUsd)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Installing Target\nDESCRIPTION: Installs the executable to the specified destination. `${AL_INSTALL_PREFIX}/bin` is the installation directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/maya/tests/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${TARGET_NAME} DESTINATION ${AL_INSTALL_PREFIX}/bin)\n```\n\n----------------------------------------\n\nTITLE: Calling mayaUsd_compile_config\nDESCRIPTION: This snippet calls a custom function mayaUsd_compile_config with the project name as an argument. The implementation of this function is not provided in the original file.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_compile_config(${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Linker Flags for Linux in CMake\nDESCRIPTION: This conditional statement checks if the build is on Linux (IS_LINUX). If true, it sets a linker flag to ignore unresolved symbols in shared libraries. This is useful for development and debugging, particularly when the executable isn't directly using the Maya API but encounters 'undefined reference' errors from OpenMaya* libraries.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/ui/importDialogDemo/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (IS_LINUX)\n    # On Linux there are many 'undefined reference to' errors from the OpenMaya* libs.\n    # This executable doesn't directly use Maya API and isn't installed. It is simply\n    # used for debugging purposes during development.\n    set_property(TARGET ${PROJECT_NAME}\n        APPEND_STRING PROPERTY LINK_FLAGS \" -Wl,--unresolved-symbols=ignore-in-shared-libs\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Tests Subdirectory (CMake)\nDESCRIPTION: This snippet adds the subdirectory 'tests' to the build, conditionally, to be used for running tests, skipping if SKIP_USDMAYA_TESTS is set.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/AL/usd/transaction/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT SKIP_USDMAYA_TESTS)\n  add_subdirectory(tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining a CMake Function for C++ Tests\nDESCRIPTION: This CMake snippet defines a function `add_mayaUsdLibUtils_test` to create and configure C++ test executables. It adds source files, configures compiler definitions, links libraries, and adds the test to the ctest suite. Key parameters include TARGET_NAME for the test executable name, and ARGN for the source files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/utils/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(add_mayaUsdLibUtils_test TARGET_NAME)\n    add_executable(${TARGET_NAME})\n\n    # -----------------------------------------------------------------------------\n    # sources\n    # -----------------------------------------------------------------------------\n    target_sources(${TARGET_NAME}\n        PRIVATE\n        main.cpp\n        ${ARGN}\n    )\n\n    # -----------------------------------------------------------------------------\n    # compiler configuration\n    # -----------------------------------------------------------------------------\n    mayaUsd_compile_config(${TARGET_NAME})\n\n    target_compile_definitions(${TARGET_NAME}\n        PRIVATE\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:TBB_USE_DEBUG>\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_DEBUG_PYTHON>\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_LINKING_PYTHON>\n    )\n\n    # -----------------------------------------------------------------------------\n    # link libraries\n    # -----------------------------------------------------------------------------\n    target_link_libraries(${TARGET_NAME}\n        PRIVATE\n        GTest::GTest\n        ${MAYA_LIBRARIES}\n        mayaUsd\n        usdUfe\n    )\n\n    # -----------------------------------------------------------------------------\n    # unit tests\n    # -----------------------------------------------------------------------------\n    mayaUsd_add_test(${TARGET_NAME}\n        COMMAND $<TARGET_FILE:${TARGET_NAME}>\n        ENV\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n        \"MAYA_LOCATION=${MAYA_LOCATION}\"\n    )\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable Location\nDESCRIPTION: Sets the name of the environment variable used to store the AL_USDMaya installation location. This allows other applications to find the plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(AL_USDMAYA_LOCATION_NAME\n    \"AL_USDMAYA_LOCATION\"\n    CACHE\n    STRING\n    \"Name of the environment variable used to store AL_USDMaya installation location\"\n)\n```\n\n----------------------------------------\n\nTITLE: Promoting Header List in CMake\nDESCRIPTION: This CMake macro, `mayaUsd_promoteHeaderList`, is responsible for making the defined header files available for inclusion by other modules. The macro likely handles copying or linking the headers to a location where they can be found during compilation of dependent targets. It takes the HEADERS variable, the project name and the utils subdirectory as arguments.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/utils/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_promoteHeaderList(HEADERS ${HEADERS} BASEDIR ${PROJECT_NAME} SUBDIR utils)\n```\n\n----------------------------------------\n\nTITLE: Adding Interactive Unit Tests (Iterative) with CMake\nDESCRIPTION: This CMake snippet iterates through a list of interactive test scripts, retrieves the test target, and adds the test. It sets the `INTERACTIVE` flag, working directory, and necessary environment variables, including `MAYA_PLUG_IN_PATH` and `LD_LIBRARY_PATH`. Finally, it adds the `MayaUsd` label for ctest filtering.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(script ${INTERACTIVE_TEST_SCRIPT_FILES})\n    mayaUsd_get_unittest_target(target ${script})\n    mayaUsd_add_test(${target}\n        INTERACTIVE\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        PYTHON_SCRIPT ${script}\n        ENV\n            \"MAYA_PLUG_IN_PATH=${CMAKE_INSTALL_PREFIX}/lib/maya\"\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n    )\n\n    # Add a ctest label to these tests for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS MayaUsd)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files in CMake\nDESCRIPTION: This CMake snippet defines a list of header files used in the project. The set command assigns the list of header files (notice.h, proxyShapeNotice.h, stageNoticeListener.h) to the HEADERS variable for later use in the CMake configuration.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/listeners/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n    notice.h\n    proxyShapeNotice.h\n    stageNoticeListener.h\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing RPATH\nDESCRIPTION: Initializes the runtime search path (rpath) for the executable on macOS and Linux. This ensures that the executable can find its dependencies at runtime.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/maya/tests/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX)\n    mayaUsd_init_rpath(rpath \"bin\")\n    if(BUILD_TESTS)\n        mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/lib/gtest\")\n    endif()\n    mayaUsd_add_rpath(rpath \"../lib\")\n    mayaUsd_install_rpath(rpath ${TARGET_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Applying Maya USD Compile Configuration (CMake)\nDESCRIPTION: Applies the standard compile configurations for Maya USD projects.  This function likely sets necessary compiler flags and include paths for Maya USD development.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/tutorials/import-export-plugin-c++/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_compile_config(${TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files CMake\nDESCRIPTION: Specifies the installation location for the header files. The headers are copied to the include directory under the project name, within the utils subdirectory of the installation prefix.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/utils/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${HEADERS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/utils/\n)\n```\n\n----------------------------------------\n\nTITLE: Unregister ShadowAPI Adaptor (Python)\nDESCRIPTION: This snippet demonstrates how to deregister the custom ShadowAPI adaptor class from MayaUSD.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/doc/SchemaAPI_Import_Export_in_Python.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nmayaUsdLib.SchemaApiAdaptor.Unregister(shadowApiAdaptorLightShape, \"light\", \"ShadowAPI\")\n```\n\n----------------------------------------\n\nTITLE: Setting Directory Variable CMake\nDESCRIPTION: Sets the arDirPath variable to AL/usdmaya using the CMake set command.  This variable likely represents the base directory for the AL/usdmaya module.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(arDirPath AL/usdmaya)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files CMake\nDESCRIPTION: Defines a list of header files that are part of the project. These headers define the interfaces and data structures used in the source files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/utils/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    autoUndoCommands.h\n    blockSceneModificationContext.h\n    colorSpace.h\n    customLayerData.h\n    converter.h\n    copyLayerPrims.h\n    diagnosticDelegate.h\n    dynamicAttribute.h\n    hash.h\n    json.h\n    jsonConverter.h\n    layerLocking.h\n    layerMuting.h\n    layers.h\n    loadRules.h\n    mayaEditRouter.h\n    mayaNodeObserver.h\n    mayaNodeTypeObserver.h\n    query.h\n    plugRegistryHelper.h\n    primActivation.h\n    progressBarScope.h\n    selectability.h\n    stageCache.h\n    targetLayer.h\n    traverseLayer.h\n    trieVisitor.h\n    undoHelperCommand.h\n    util.h\n    utilDictionary.h\n    utilFileSystem.h\n    utilSerialization.h\n    variants.h\n    variantFallbacks.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files for Maya USD API\nDESCRIPTION: This snippet defines the header files associated with the `mayaUsdAPI` library. These header files declare the interfaces and data structures used by the library's components.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    api.h\n    contextOps.h\n    global.h\n    proxyStage.h\n    ufeHandlers.h\n    proxyShapeNotice.h\n    render.h\n    undo.h\n    utils.h\n)\n```\n\n----------------------------------------\n\nTITLE: Compiler Definitions for Python Extension\nDESCRIPTION: Defines compiler flags and macros for the Python extension library, including platform-specific flags (OSMac_) and package naming conventions. These definitions are PRIVATE to the target.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/python/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${PYTHON_TARGET_NAME}\n    PRIVATE\n        $<$<BOOL:${IS_MACOSX}>:OSMac_>\n        MFB_PACKAGE_NAME=${PROJECT_NAME}\n        MFB_ALT_PACKAGE_NAME=${PROJECT_NAME}\n        MFB_PACKAGE_MODULE=${PROJECT_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Building with Docker\nDESCRIPTION: These shell commands clone the AL_USDMaya repository and build the AL_USDMaya docker image using the specified build script.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/build.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.al.com.au/rnd/AL_USDMaya\ncd AL_USDMaya\nsudo ./build_docker_centos6.sh\n```\n\n----------------------------------------\n\nTITLE: Adding Maya Hydra Plugin Test with CMake\nDESCRIPTION: This CMake snippet adds an interactive unit test (`testMayaHydraPlugin.py`) to check if the MayaHydra plugin loads correctly.  It specifies the Python script to be executed, sets environment variables for plugin paths, and adds the `MayaUsd` label for ctest filtering.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_get_unittest_target(target testMayaHydraPlugin.py)\nmayaUsd_add_test(${target}\n    INTERACTIVE\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    PYTHON_SCRIPT testMayaHydraPlugin.py\n    ENV\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n        \"MAYA_PLUG_IN_PATH=${CMAKE_INSTALL_PREFIX}/lib/maya\"\n        \"PXR_OVERRIDE_PLUGINPATH_NAME=${CMAKE_INSTALL_PREFIX}/lib/usd\"\n)\nset_property(TEST ${target} APPEND PROPERTY LABELS MayaUsd)\n```\n\n----------------------------------------\n\nTITLE: Installing Test Directory with CMake\nDESCRIPTION: This CMake snippet defines the installation directory for test files. It uses the `pxr_install_test_dir` macro to specify the source directory and destination directory for installing the Alembic chaser test files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/maya/plugin/pxrUsd/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/AlembicChaser\n    DEST testPxrUsdAlembicChaser\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Sources with CMake\nDESCRIPTION: This CMake snippet defines the source files for the target `${PROJECT_NAME}`. The source files `buildInfo.cpp`, `debugCodes.cpp`, and `tokens.cpp` are added as private sources, which means they are only used when building this specific target and are not exposed for linking against other targets. The `target_sources` command is used to associate these files with the specified target.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/base/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        buildInfo.cpp\n        debugCodes.cpp\n        tokens.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Appending CMake Module Path with Source Directory\nDESCRIPTION: This CMake command appends the current source directory's cmake subdirectory to the CMAKE_MODULE_PATH.  This allows CMake to find custom modules within the project structure.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n```\n\n----------------------------------------\n\nTITLE: Compiler Definitions (usdTestUsdPlugin)\nDESCRIPTION: Adds a compiler definition `OSMac_` if the operating system is macOS. This enables platform-specific code to be compiled.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${TARGET_NAME}\n    PRIVATE\n        $<$<BOOL:${IS_MACOSX}>:OSMac_>\n)\n```\n\n----------------------------------------\n\nTITLE: Appending Dependent Libraries (CMake)\nDESCRIPTION: This snippet appends the `PYTHON_LIBRARIES` and `usd` libraries to the `DEPENDANT_LIBRARIES` list.  This ensures these libraries are linked during the build process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/mayatest/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND DEPENDANT_LIBRARIES ${PYTHON_LIBRARIES} usd)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Library - CMake\nDESCRIPTION: Installs the Python library to a specific destination within the installation prefix, based on the `arDirPath` variable. It also sets target properties and global properties to manage the library's location, ensuring it's correctly referenced by other parts of the build system.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_30\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${PYTHON_LIBRARY_NAME}\n    LIBRARY\n    DESTINATION ${AL_INSTALL_PREFIX}/lib/python/${arDirPath}\n    RUNTIME\n    DESTINATION ${AL_INSTALL_PREFIX}/lib/python/${arDirPath}\n)\nset_target_properties(${PYTHON_LIBRARY_LOCATION}\n    PROPERTIES LOCATION\n    ${AL_INSTALL_PREFIX}/lib/python/${arDirPath}/${PYTHON_LIBRARY_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX}\n)\nset_property(GLOBAL PROPERTY GLOBAL_PYTHON_LIBRARY_LOCATION ${AL_INSTALL_PREFIX}/lib/python/${arDirPath}/${PYTHON_LIBRARY_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX})\n```\n\n----------------------------------------\n\nTITLE: Setting Target Include Directories\nDESCRIPTION: Specifies the include directories that will be used during compilation. These directories contain header files that are necessary for the target library to build correctly. It includes PXR, Maya and the CMake binary directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/translators/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${TARGET_NAME}\n    PRIVATE\n        ${PXR_INCLUDE_DIRS}\n        ${MAYA_INCLUDE_DIRS}\n        ${CMAKE_BINARY_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Inclusion based on UFE V3 Features (Python)\nDESCRIPTION: This CMake snippet conditionally appends `testUngroupCmd.py` to the `TEST_SCRIPT_FILES` list if the `CMAKE_UFE_V3_FEATURES_AVAILABLE` variable is set. This includes tests specific to the UFE V3 feature set.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/ufe/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_UFE_V3_FEATURES_AVAILABLE)\n    list(APPEND TEST_SCRIPT_FILES\n        testUngroupCmd.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring plugInfo.json (CMake)\nDESCRIPTION: This snippet configures the `plugInfo.json` file, replacing variables within the input file `plugInfo.json.in` and creating the final `plugInfo.json` file in the build directory. It uses the `@ONLY` option to ensure only variables prefixed with `@` are replaced.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/mayatest/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file (\n    plugInfo.json.in\n    ${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\n    @ONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Install Python __init__.py for UFE AE (Python 2 Compatibility)\nDESCRIPTION: This snippet conditionally installs an `__init__.py` file into the `ufe_ae` directory if the build is not using Python 3. This is necessary for Python 2 to recognize the directory as a module. The presence of this file is avoided in Python 3 to enable \"Implicit Namespace Packages\" as per PEP 420.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/resources/ae/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT BUILD_WITH_PYTHON_3)\ninstall(FILES __init__.py DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/python/ufe_ae)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Header Appending (UFE SceneItem Metadata)\nDESCRIPTION: This snippet conditionally appends header files related to scene item metadata to the HEADERS list, based on whether UFE_SCENEITEM_HAS_METADATA is defined.  It adds UsdUndoClearSceneItemMetadataCommand.h and UsdUndoSetSceneItemMetadataCommand.h.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif (UFE_SCENEITEM_HAS_METADATA)\n    list(APPEND HEADERS\n\t\tUsdUndoClearSceneItemMetadataCommand.h\n\t\tUsdUndoSetSceneItemMetadataCommand.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Compile Definitions - CMake\nDESCRIPTION: This snippet sets compile definitions for the target, conditionally defining OSMac_ on macOS and LINUX on Linux.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/tests/mayaplugintest/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${TARGET_NAME}\n    PRIVATE\n        $<$<BOOL:${IS_MACOSX}>:OSMac_>\n        $<$<BOOL:${IS_LINUX}>:LINUX>\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Interactive Maya Test Configuration with CMake\nDESCRIPTION: This CMake snippet adds a special interactive test that allows starting Maya with specific test configurations. It's designed for debugging and isn't part of the standard test suites.  It disables the test by default and adds labels for `Debugging` and sets the `MAYA_MODULE_PATH` environment variable.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(target _Interactive_Maya)\nadd_test(\n    NAME \"${target}\"\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    COMMAND ${MAYA_EXECUTABLE}\n)\n\nset_property(TEST ${target} APPEND PROPERTY DISABLED True)\nset_property(TEST ${target} APPEND PROPERTY LABELS Debugging)\nset_property(TEST ${target} APPEND PROPERTY ENVIRONMENT \"MAYA_MODULE_PATH=${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Library Name and Install Location in CMake\nDESCRIPTION: This snippet sets the name of the events library (AL_EventSystem) and defines the installation location for the library files. The installation prefix AL_INSTALL_PREFIX is used to specify the root directory where the library will be installed.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/utils/AL/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(EVENTS_LIBRARY_NAME \"AL_EventSystem\")\nset(EVENTS_LIBRARY_LOCATION ${AL_INSTALL_PREFIX}/lib)\n```\n\n----------------------------------------\n\nTITLE: Setting Run-Time Search Paths\nDESCRIPTION: This snippet configures the run-time search paths for the library, ensuring that the dynamic linker can find the necessary shared libraries at runtime. It checks the operating system and sets the rpath using custom CMake functions.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/lookdevXUsd/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX)\n    mayaUsd_init_rpath(rpath \"lib\")\n    if(DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    elseif(DEFINED PXR_USD_LOCATION)\n        mayaUsd_add_rpath(rpath \"${PXR_USD_LOCATION}/lib\")\n    endif()\n    if (IS_LINUX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib64\")\n    endif()\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../Maya.app/Contents/MacOS\")\n    endif()\n    mayaUsd_install_rpath(rpath ${PROJECT_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Python __init__.py Files (CMake)\nDESCRIPTION: This snippet creates nested `__init__.py` files for each subdirectory in the Python package. It iterates through the folder hierarchy and writes a simple `__init__.py` file to each subdirectory, enabling namespace package functionality. This makes sure python can find the modules in the directory structure.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/mayatest/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nstring(REPLACE \"/\" \";\" folderHierarchy \"AL/usd/schemas/mayatest\")\n\nlist(LENGTH folderHierarchy listCount)\nmath(EXPR listMaxIndex \"${listCount}-1\")\n\n# Install an __init__ file for all folders except for the terminal folder which uses the checked in\n# __init__ file.\nif(${listCount} STRGREATER 1)\n    set(currentPath \"\")\n    foreach(i RANGE 0 ${listMaxIndex})\n      if(${i} STREQUAL ${listMaxIndex})\n        break()#we are at the last folder, we will use the checked in __init__.py for this folder.\n      endif()\n      set(currentFolder \"\")\n      list(GET folderHierarchy ${i} currentFolder)\n      list(APPEND currentPath ${currentFolder})\n\n      string(REPLACE \";\" \"/\" currentPath \"${currentPath}\")\n      file(WRITE\n        ${CMAKE_BINARY_DIR}/${currentPath}/__init__.py\n        \"try:\\n\\t__import__('pkg_resources').declare_namespace(__name__)\\nexcept:\\n\\tfrom pkgutil import extend_path\\n\\t__path__ = extend_path(__path__, __name__)\\n\"\n      )\n    endforeach(i)\nendif()\n```\n\n----------------------------------------\n\nTITLE: MayaUsd Compile Configuration\nDESCRIPTION: This snippet applies MayaUsd-specific compile configurations. This relies on a custom `mayaUsd_compile_config` CMake function that is assumed to be defined elsewhere.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/lookdevXUsd/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_compile_config(${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target in CMake\nDESCRIPTION: This CMake snippet links the `ghc_filesystem` library to the specified target (${PROJECT_NAME}). The PRIVATE keyword indicates that this library is only required for the implementation of the target and should not be exposed to other targets that depend on it.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/ui/layerEditor/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${PROJECT_NAME}\n    PRIVATE\n        ghc_filesystem\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling MaterialX for Older Maya Versions\nDESCRIPTION: This snippet disables MaterialX support if the Maya LightAPI version is less than 2, as MaterialX VP2 rendering is not supported by older versions of Maya.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_WANT_MATERIALX_BUILD AND MAYA_LIGHTAPI_VERSION LESS 2)\n    set(CMAKE_WANT_MATERIALX_BUILD OFF)\n    message(WARNING \"Disabling MaterialX VP2 rendering: it is not supported by this version of Maya.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install PlugInfo Resource CMake\nDESCRIPTION: Installs the generated plugInfo.json file into the resources directory of the AL_USDTransaction library. This ensures that USD can find the plugin metadata after installation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/plugInfo.json\n    DESTINATION ${AL_INSTALL_PREFIX}/lib/usd/${LIBRARY_NAME}/resources\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with UFE Clipboard Support\nDESCRIPTION: This snippet conditionally compiles clipboard-related source files and defines a compilation flag `UFE_CLIPBOARD_SUPPORT` if `UFE_CLIPBOARD_SUPPORT` is enabled. It adds `clipboard.cpp` to the target sources and `clipboard.h` to the headers list, and defines the compilation definition.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (UFE_CLIPBOARD_SUPPORT)\n    target_sources(${PROJECT_NAME}\n        PRIVATE\n            clipboard.cpp\n    )\n    list(APPEND HEADERS\n        clipboard.h\n    )\n\n    target_compile_definitions(${PROJECT_NAME}\n        PRIVATE\n            UFE_CLIPBOARD_SUPPORT=1\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Qt Compile Definitions\nDESCRIPTION: This snippet configures compile definitions for the Qt::Core target to prevent Qt from defining certain macros (foreach, signals, slots, emit). This prevents conflicts with other libraries like Boost, and enforces the use of Q_ macros in the code. It sets the QT_NO_KEYWORDS interface compile definition.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/ui/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(Qt::Core PROPERTIES INTERFACE_COMPILE_DEFINITIONS QT_NO_KEYWORDS)\n```\n\n----------------------------------------\n\nTITLE: Enabling a Debug Notice in C++\nDESCRIPTION: This code enables a specific debug notice using the AL_usdmaya_UseDebugCommand with the -en flag. Replace \"ALUSDMAYA_TRANSLATORS\" with the desired notice name.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/developer.md#_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\nAL_usdmaya_UseDebugCommand -en \"ALUSDMAYA_TRANSLATORS\";\n```\n\n----------------------------------------\n\nTITLE: Compile Definitions for Python Library (CMake)\nDESCRIPTION: This snippet defines compile definitions for the python library, including debug flags and MFB package related properties.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/AL/usd/transaction/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${USDTRANSACTION_PYTHON_LIBRARY_NAME}\n  PRIVATE\n    $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:TBB_USE_DEBUG>\n    $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_DEBUG_PYTHON>\n    $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_LINKING_PYTHON>\n    MFB_PACKAGE_NAME=${USDTRANSACTION_LIBRARY_NAME}\n    MFB_ALT_PACKAGE_NAME=${USDTRANSACTION_LIBRARY_NAME}\n    MFB_PACKAGE_MODULE=${USDTRANSACTION_LIBRARY_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Finding and Configuring Boost\nDESCRIPTION: Finds the Boost library and configures it for use with Python. It handles different Boost versions and sets the Boost_PYTHON_LIBRARY variable accordingly.  It checks USD versions and sets BOOST_ROOT if needed. WIN32 specific boost debug flags are also set.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(USD_VERSION VERSION_LESS \"0.24.11\")\n    if(NOT DEFINED ENV{BOOST_ROOT})\n        set(ENV{BOOST_ROOT} ${PXR_USD_LOCATION})\n    endif()\n\n    if(WIN32)\n        if(MAYAUSD_DEFINE_BOOST_DEBUG_PYTHON_FLAG)\n            set(Boost_USE_DEBUG_PYTHON ON)\n        endif()\n    endif()\n\n    find_package(Boost REQUIRED)\n\n    # As of boost 1.67 the boost_python component name includes the\n    # associated Python version (e.g. python27, python36). After boost 1.70\n    # the built-in cmake files will deal with this. If we are using boost\n    # that does not have working cmake files, or we are using a new boost\n    # and not using cmake's boost files, we need to do the below.\n    # https://cmake.org/cmake/help/latest/module/FindBoost.html\n    # Find the component under the versioned name and then set the generic\n    # Boost_PYTHON_LIBRARY variable so that we don't have to duplicate this\n    # logic in each library's CMakeLists.txt.\n    #\n    # Note: Autodesk USD build 21.11 (Linux) uses Boost 1.66\n    #\n    set(boost_version_string \"${Boost_MAJOR_VERSION}.${Boost_MINOR_VERSION}.${Boost_SUBMINOR_VERSION}\")\n    if (((${boost_version_string} VERSION_GREATER_EQUAL \"1.67\") AND\n        (${boost_version_string} VERSION_LESS \"1.70\")) OR\n        ((${boost_version_string} VERSION_GREATER_EQUAL \"1.70\") AND\n        Boost_NO_BOOST_CMAKE))\n\n        set(python_version_nodot \"${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}\")\n        set(Boost_FIND_COMPONENTS\n            python${python_version_nodot}\n        )\n\n        set(Boost_PYTHON_LIBRARY \"${Boost_PYTHON${python_version_nodot}_LIBRARY}\")\n    else()\n        set(Boost_FIND_COMPONENTS\n            python\n        )\n    endif()\n\n    find_package(Boost COMPONENTS\n                    ${Boost_FIND_COMPONENTS}\n                    REQUIRED\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (CMake)\nDESCRIPTION: This snippet sets the include directories for the USDTransaction library. It includes the USDTransaction include location and the PXR include directories.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/AL/usd/transaction/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${USDTRANSACTION_LIBRARY_NAME} \n  PUBLIC\n    ${USDTRANSACTION_INCLUDE_LOCATION} \n    ${PXR_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Sources (CMake)\nDESCRIPTION: This specifies the source files that will be compiled and linked into the target library.  It defines a list of `.cpp` files that contribute to the `basePxrUsdPreviewSurface` library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/pxrUsdPreviewSurface/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${TARGET_NAME} \n    PRIVATE\n        cpvColor.cpp\n        usdPreviewSurface.cpp\n        usdPreviewSurfacePlugin.cpp\n        usdPreviewSurfaceReader.cpp\n        usdPreviewSurfaceShadingNodeOverride.cpp\n        usdPreviewSurfaceWriter.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Appending Proxy Node Headers to List CMake\nDESCRIPTION: Appends a list of header files related to proxy nodes in AL_USDMaya to the AL_usdmaya_nodes_proxy_headers list. These headers define interfaces for prim filters.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND AL_usdmaya_nodes_proxy_headers\n        AL/usdmaya/nodes/proxy/PrimFilter.h\n)\n```\n\n----------------------------------------\n\nTITLE: Compiler Configuration (CMake)\nDESCRIPTION: Applies compiler configurations to the library. It uses a custom function `mayaUsd_compile_config` (not defined in this snippet) to handle compiler-specific settings.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_compile_config(${MAYAUTILS_LIBRARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Configuring UV Sets Export Tests\nDESCRIPTION: This CMake snippet configures separate test targets for exporting UV sets with different settings for writing UV data as float2. `testUsdExportUVSets` disables float2 writing, while `testUsdExportUVSetsFloat` enables it. The \"translators\" label is added for filtering the tests.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/translators/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_add_test(testUsdExportUVSets\n    PYTHON_MODULE testUsdExportUVSets\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    ENV\n        \"PIXMAYA_WRITE_UV_AS_FLOAT2=0\"\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n)\nset_property(TEST testUsdExportUVSets APPEND PROPERTY LABELS translators)\n\nmayaUsd_add_test(testUsdExportUVSetsFloat\n    PYTHON_MODULE testUsdExportUVSets\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    ENV\n        \"PIXMAYA_WRITE_UV_AS_FLOAT2=1\"\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n)\nset_property(TEST testUsdExportUVSetsFloat APPEND PROPERTY LABELS translators)\n```\n\n----------------------------------------\n\nTITLE: Append Headers to utils_event_headers - CMake\nDESCRIPTION: This snippet appends the header files Api.h and EventHandler.h to the utils_event_headers variable. This variable is likely used to track the header files that belong to the event system within the utils library. The list command is a standard CMake command for manipulating lists.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/utils/AL/event/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND utils_event_headers\n    Api.h\n    EventHandler.h\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Run-Time Search Paths (CMake)\nDESCRIPTION: Initializes the run-time search paths for the plugin on macOS and Linux. This involves adding paths where the plugin can find its dependencies at runtime, including paths relative to the Maya USD installation and the USD installation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/tutorials/import-export-plugin-c++/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX)\n    mayaUsd_init_rpath(rpath \"plugin\")\n    if(DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    elseif(DEFINED PXR_USD_LOCATION)\n        mayaUsd_add_rpath(rpath \"${PXR_USD_LOCATION}/lib\")\n    endif()\n    if(IS_LINUX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib64\")\n    endif()\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../Maya.app/Contents/MacOS\")\n    endif()\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/lib\")\n    mayaUsd_install_rpath(rpath ${TARGET_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add Material Updater\nDESCRIPTION: Conditionally includes `materialUpdater.cpp` to the target sources if CMAKE_UFE_V3_FEATURES_AVAILABLE is true. This is likely related to path mapping requirements in Maya with UFE.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/translators/shading/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_UFE_V3_FEATURES_AVAILABLE)\n    target_sources(${TARGET_NAME}\n        PRIVATE\n            materialUpdater.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Targets in CMake\nDESCRIPTION: This CMake snippet installs the `TRANSLATORS_PACKAGE` library to the specified destination (`${AL_INSTALL_PREFIX}/lib`). It also handles the installation of the program database (PDB) file on Windows platforms, if available.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${TRANSLATORS_PACKAGE}\n LIBRARY\n DESTINATION ${AL_INSTALL_PREFIX}/lib\n RUNTIME\n DESTINATION ${AL_INSTALL_PREFIX}/lib\n)\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:${TRANSLATORS_PACKAGE}> DESTINATION ${AL_INSTALL_PREFIX}/lib OPTIONAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install and Register USD Maya Tests\nDESCRIPTION: Installs test directories and registers individual tests using `pxr_install_test_dir` and `pxr_register_test`. These tests are written in Python and executed using `MAYA_PY_EXECUTABLE`. The `TESTENV` and `ENV` variables define the testing environment and environment variables for each test. `WIN_DLL_PATH` is configured to add necessary dll locations for Windows.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/maya/lib/usdMaya/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/UsdExportAssemblyTest\n    DEST testUsdExportAssembly\n)\npxr_register_test(testUsdExportAssembly\n    CUSTOM_PYTHON ${MAYA_PY_EXECUTABLE}\n    COMMAND \"${TEST_INSTALL_PREFIX}/tests/testUsdExportAssembly\"\n    TESTENV testUsdExportAssembly\n    ENV ${TEST_ENV}\n    WIN_DLL_PATH \"${PXR_USD_LOCATION}/plugin/usd;${PXR_USD_LOCATION}/lib;${PXR_USD_LOCATION}/bin;${TEST_INSTALL_PREFIX}/maya/lib;${CMAKE_INSTALL_PREFIX}/lib\"\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/UsdExportAssemblyEditsTest\n    DEST testUsdExportAssemblyEdits\n)\npxr_register_test(testUsdExportAssemblyEdits\n    CUSTOM_PYTHON ${MAYA_PY_EXECUTABLE}\n    COMMAND \"${TEST_INSTALL_PREFIX}/tests/testUsdExportAssemblyEdits\"\n    TESTENV testUsdExportAssemblyEdits\n    ENV ${TEST_ENV}\n    WIN_DLL_PATH \"${PXR_USD_LOCATION}/plugin/usd;${PXR_USD_LOCATION}/lib;${PXR_USD_LOCATION}/bin;${TEST_INSTALL_PREFIX}/maya/lib;${CMAKE_INSTALL_PREFIX}/lib\"\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/UsdExportPackage\n    DEST testUsdExportPackage\n)\npxr_register_test(testUsdExportPackage\n    CUSTOM_PYTHON ${MAYA_PY_EXECUTABLE}\n    COMMAND \"${TEST_INSTALL_PREFIX}/tests/testUsdExportPackage\"\n    TESTENV testUsdExportPackage\n    ENV ${TEST_ENV}\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/UsdExportPointInstancerTest\n    DEST testUsdExportPointInstancer\n)\npxr_register_test(testUsdExportPointInstancer\n    CUSTOM_PYTHON ${MAYA_PY_EXECUTABLE}\n    COMMAND \"${TEST_INSTALL_PREFIX}/tests/testUsdExportPointInstancer\"\n    TESTENV testUsdExportPointInstancer\n    ENV ${TEST_ENV}\n    WIN_DLL_PATH \"${PXR_USD_LOCATION}/plugin/usd;${PXR_USD_LOCATION}/lib;${PXR_USD_LOCATION}/bin;${TEST_INSTALL_PREFIX}/maya/lib;${CMAKE_INSTALL_PREFIX}/lib\"\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/UsdImportAsAssemblies\n    DEST testUsdImportAsAssemblies\n)\npxr_register_test(testUsdImportAsAssemblies\n    CUSTOM_PYTHON ${MAYA_PY_EXECUTABLE}\n    COMMAND \"${TEST_INSTALL_PREFIX}/tests/testUsdImportAsAssemblies\"\n    TESTENV testUsdImportAsAssemblies\n    ENV ${TEST_ENV}\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/UsdImportNestedAssemblyAnimationTest\n    DEST testUsdImportNestedAssemblyAnimation\n)\npxr_register_test(testUsdImportNestedAssemblyAnimation\n    CUSTOM_PYTHON ${MAYA_PY_EXECUTABLE}\n    COMMAND \"${TEST_INSTALL_PREFIX}/tests/testUsdImportNestedAssemblyAnimation\"\n    TESTENV testUsdImportNestedAssemblyAnimation\n    ENV ${TEST_ENV}\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/UsdMayaGetVariantSetSelectionsTest\n    DEST testUsdMayaGetVariantSetSelections\n)\npxr_register_test(testUsdMayaGetVariantSetSelections\n    CUSTOM_PYTHON ${MAYA_PY_EXECUTABLE}\n    COMMAND \"${TEST_INSTALL_PREFIX}/tests/testUsdMayaGetVariantSetSelections\"\n    TESTENV testUsdMayaGetVariantSetSelections\n    ENV ${TEST_ENV}\n    WIN_DLL_PATH \"${PXR_USD_LOCATION}/plugin/usd;${PXR_USD_LOCATION}/lib;${PXR_USD_LOCATION}/bin;${TEST_INSTALL_PREFIX}/maya/lib;${CMAKE_INSTALL_PREFIX}/lib\"\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/UsdMayaModelKindProcessorTest\n    DEST testUsdMayaModelKindProcessor\n)\npxr_register_test(testUsdMayaModelKindProcessor\n    CUSTOM_PYTHON ${MAYA_PY_EXECUTABLE}\n    COMMAND \"${TEST_INSTALL_PREFIX}/tests/testUsdMayaModelKindProcessor\"\n    TESTENV testUsdMayaModelKindProcessor\n    ENV ${TEST_ENV}\n    WIN_DLL_PATH \"${PXR_USD_LOCATION}/plugin/usd;${PXR_USD_LOCATION}/lib;${PXR_USD_LOCATION}/bin;${TEST_INSTALL_PREFIX}/maya/lib;${CMAKE_INSTALL_PREFIX}/lib\"\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/UsdMayaReferenceAssemblyEdits\n    DEST testUsdMayaReferenceAssemblyEdits\n)\npxr_register_test(testUsdMayaReferenceAssemblyEdits\n    CUSTOM_PYTHON ${MAYA_PY_EXECUTABLE}\n    COMMAND \"${TEST_INSTALL_PREFIX}/tests/testUsdMayaReferenceAssemblyEdits\"\n    TESTENV testUsdMayaReferenceAssemblyEdits\n    ENV ${TEST_ENV}\n    WIN_DLL_PATH \"${PXR_USD_LOCATION}/plugin/usd;${PXR_USD_LOCATION}/lib;${PXR_USD_LOCATION}/bin;${TEST_INSTALL_PREFIX}/maya/lib;${CMAKE_INSTALL_PREFIX}/lib\"\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/UsdReferenceAssemblyChangeRepresentationsTest\n    DEST testUsdReferenceAssemblyChangeRepresentations\n)\npxr_register_test(testUsdReferenceAssemblyChangeRepresentations\n    CUSTOM_PYTHON ${MAYA_PY_EXECUTABLE}\n    COMMAND \"${TEST_INSTALL_PREFIX}/tests/testUsdReferenceAssemblyChangeRepresentations\"\n    TESTENV testUsdReferenceAssemblyChangeRepresentations\n    ENV ${TEST_ENV}\n    WIN_DLL_PATH \"${PXR_USD_LOCATION}/plugin/usd;${PXR_USD_LOCATION}/lib;${PXR_USD_LOCATION}/bin;${TEST_INSTALL_PREFIX}/maya/lib;${CMAKE_INSTALL_PREFIX}/lib\"\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\npxr_install_test_dir(\n    SRC testenv/UsdReferenceAssemblySelectionTest\n    DEST testUsdReferenceAssemblySelection\n)\npxr_register_test(testUsdReferenceAssemblySelection\n    CUSTOM_PYTHON ${MAYA_PY_EXECUTABLE}\n    COMMAND \"${TEST_INSTALL_PREFIX}/tests/testUsdReferenceAssemblySelection\"\n    TESTENV testUsdReferenceAssemblySelection\n    ENV ${TEST_ENV}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Properties (CMake)\nDESCRIPTION: Sets the plugin properties using a custom CMake function `maya_set_plugin_properties`. This may configure various attributes specific to Maya plugins, such as version information and dependencies.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/tutorials/import-export-plugin-c++/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nmaya_set_plugin_properties(${TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: This snippet links libraries to the target 'hdMaya'. It links 'mayaUsd' as a public dependency and 'hio' as a private dependency, conditionally based on the 'USD_001905_BUILD' variable.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/hdMaya/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${TARGET_NAME}\n    PUBLIC\n        mayaUsd\n    PRIVATE\n        $<$<BOOL:${USD_001905_BUILD}>:hio>\n)\n```\n\n----------------------------------------\n\nTITLE: Add Unit Tests with Dependencies CMake\nDESCRIPTION: This CMake snippet iterates through a list of Python script files, creates a test target for each, and sets up the environment for execution. It uses `mayaUsd_get_unittest_target` to create the target and `mayaUsd_add_test` to configure the test with working directory, environment variables including `LD_LIBRARY_PATH`, and labels.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/nodes/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(script ${TEST_SCRIPT_FILES})\n    mayaUsd_get_unittest_target(target ${script})\n    mayaUsd_add_test(${target}\n        PYTHON_MODULE ${target}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        ENV\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n    )\n\n    # Add a ctest label to these tests for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS nodes)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring UV Set Mappings Export Test\nDESCRIPTION: This CMake snippet configures a test target for exporting UV set mappings. It disables writing UV data as float2 and enables providing a default texCoord primvar name, using environment variables.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/translators/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_add_test(testUsdExportUVSetMappings\n    PYTHON_MODULE testUsdExportUVSetMappings\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    ENV\n        \"PIXMAYA_WRITE_UV_AS_FLOAT2=0\"\n        \"MAYAUSD_PROVIDE_DEFAULT_TEXCOORD_PRIMVAR_NAME=1\"\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n)\nset_property(TEST testUsdExportUVSetMappings APPEND PROPERTY LABELS translators)\n```\n\n----------------------------------------\n\nTITLE: Compiler Configuration\nDESCRIPTION: Configures the compiler for the target `${TARGET_NAME}` using the `mayaUsd_compile_config` function. This likely sets compiler flags and definitions specific to the Maya USD project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/maya/tests/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_compile_config(${TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Definitions\nDESCRIPTION: This snippet configures compiler definitions for the target 'hdMaya'. It defines 'HDMAYA_EXPORT' and 'OSMac_' based on whether the target is being built on macOS.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/hdMaya/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${TARGET_NAME}\n    PRIVATE\n        HDMAYA_EXPORT\n        $<$<BOOL:${IS_MACOSX}>:OSMac_>\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling VP1 Selection in VP2\nDESCRIPTION: This shell command sets the MAYA_VP2_USE_VP1_SELECTION environment variable to 1, enabling VP1 selection in VP2 for versions of Maya prior to 2019.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/build.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nMAYA_VP2_USE_VP1_SELECTION=1\n```\n\n----------------------------------------\n\nTITLE: Setting Test Script Files with Material Scope\nDESCRIPTION: This CMake snippet sets a list of Python scripts related to material scope testing. These scripts require special handling because they use custom material scope names, so the USD_FORCE_DEFAULT_MATERIALS_SCOPE_NAME environment variable is intentionally omitted.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/translators/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_SCRIPT_FILES_WITH_MATERIAL_SCOPE\n    testUsdExportDisplacement.py\n    testUsdExportShadingInstanced.py\n    testUsdExportShadingModePxrRis.py\n    testUsdExportImportUDIM.py\n)\n\nif (BUILD_RFM_TRANSLATORS)\n    list(APPEND TEST_SCRIPT_FILES_WITH_MATERIAL_SCOPE\n        testUsdExportRfMShaders.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files in CMake\nDESCRIPTION: This snippet defines a variable named `HEADERS` that contains a list of header files. These header files are associated with the file I/O jobs module.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/jobs/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n    jobArgs.h\n    meshDataReadJob.h\n    modelKindProcessor.h\n    readJob.h\n    writeJob.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding usdUfe Subdirectory in CMake\nDESCRIPTION: This CMake command adds the 'usdUfe' subdirectory to the build process. It instructs CMake to process the CMakeLists.txt file located within the 'usdUfe' directory and include its targets in the overall build.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(usdUfe)\n```\n\n----------------------------------------\n\nTITLE: Building Schemas and Translators\nDESCRIPTION: Conditionally adds subdirectories for building schemas and translators based on the BUILD_USDMAYA_SCHEMAS and BUILD_USDMAYA_TRANSLATORS options. If schemas are built and translators are enabled, it also sets the USD_MAYA_INCLUDE_DIR and TRANSLATORS_PACKAGE variables.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_USDMAYA_SCHEMAS)\n    message(STATUS \"Building AL_USDMayaSchemas\")\n    add_subdirectory(schemas)\n    if(BUILD_USDMAYA_TRANSLATORS)\n        message(STATUS \"Building AL_USDMayaTranslators\")\n        set(USD_MAYA_INCLUDE_DIR ${CMAKE_BINARY_DIR}/maya/include)\n        set(TRANSLATORS_PACKAGE AL_USDMayaTranslators)\n        add_subdirectory(translators)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending Header Files to List CMake\nDESCRIPTION: Appends a list of header files related to core AL_USDMaya functionality to the AL_usdmaya_headers list. These headers define the API, debug codes, metadata, and other core components of the library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND AL_usdmaya_headers\n        AL/usdmaya/Api.h\n        AL/usdmaya/DebugCodes.h\n        AL/usdmaya/Metadata.h\n        AL/usdmaya/PluginRegister.h\n        AL/usdmaya/StageCache.h\n        AL/usdmaya/TransformOperation.h\n        AL/usdmaya/TypeIDs.h\n        AL/usdmaya/ForwardDeclares.h\n        AL/usdmaya/Global.h\n        AL/usdmaya/Version.h\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Target Sources (UFE V4)\nDESCRIPTION: This snippet conditionally adds source files based on the availability of CMAKE_UFE_V4_FEATURES. It includes UsdShaderAttributeDef.cpp, UsdShaderAttributeHolder.cpp, and UsdUndoAttributesCommands.cpp if UFE V4 features are available.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_UFE_V4_FEATURES_AVAILABLE)\n    target_sources(${PROJECT_NAME}\n        PRIVATE\n            UsdShaderAttributeDef.cpp\n            UsdShaderAttributeHolder.cpp\n            UsdUndoAttributesCommands.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compile Definitions (UFE Attributes Get Enums)\nDESCRIPTION: This snippet conditionally defines a compile definition based on whether UFE_ATTRIBUTES_GET_ENUMS is defined. It sets UFE_ATTRIBUTES_GET_ENUMS=1 if true. This likely affects how attributes are handled within the UFE framework.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif (UFE_ATTRIBUTES_GET_ENUMS)\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        UFE_ATTRIBUTES_GET_ENUMS=1\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Definitions for mayaUsd_Schemas\nDESCRIPTION: This snippet defines compiler definitions for the `mayaUsd_Schemas` library based on the build type. It conditionally defines `TBB_USE_DEBUG`, `BOOST_DEBUG_PYTHON`, and `BOOST_LINKING_PYTHON` when the build type is `Debug`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/schemas/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${TARGET_NAME}\n    PUBLIC\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:TBB_USE_DEBUG>\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_DEBUG_PYTHON>\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_LINKING_PYTHON>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating AL_USDMayaSchemasTest Library (CMake)\nDESCRIPTION: This snippet creates the `AL_USDMayaSchemasTest` shared library, which represents the core plugin. It specifies the source files to be compiled and linked into the library. It also calls `mayaUsd_compile_config` which is assumed to handle compiler configuration specific to MayaUSD.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/schemas/AL/usd/schemas/mayatest/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(AL_USDMayaSchemasTest\n    SHARED\n    ModuleDeps.cpp\n    ${CMAKE_CURRENT_BINARY_DIR}/ExamplePolyCubeNode.cpp\n    ${CMAKE_CURRENT_BINARY_DIR}/tokens.cpp\n)\n\n# compiler configuration\nmayaUsd_compile_config(AL_USDMayaSchemasTest)\n```\n\n----------------------------------------\n\nTITLE: Compiler Definitions (usdTestApiWriter)\nDESCRIPTION: Adds a compiler definition `OSMac_` when the OS is macOS.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${TARGET_NAME}\n    PRIVATE\n        $<$<BOOL:${IS_MACOSX}>:OSMac_>\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Run-time Search Paths (usdTestUsdPlugin)\nDESCRIPTION: Sets up runtime search paths for the plugin to locate its dependencies, similar to the usdTestMayaPlugin target.  This ensures that the correct libraries are found at runtime.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX)\n    mayaUsd_init_rpath(rpath \"plugin\")\n    if(DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    elseif(DEFINED PXR_USD_LOCATION)\n        mayaUsd_add_rpath(rpath \"${PXR_USD_LOCATION}/lib\")\n    endif()\n    if(IS_LINUX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib64\")\n    endif()\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../../../Maya.app/Contents/MacOS\")\n    endif()\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/lib\")\n    mayaUsd_install_rpath(rpath ${TARGET_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install Headers - CMake\nDESCRIPTION: This snippet installs the header files defined in the HEADERS variable to a specified destination directory. It uses the install command to copy the header files to the CMAKE_INSTALL_PREFIX/include/${PROJECT_NAME}/fileio/utils directory, making them available for use by other projects.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/utils/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${HEADERS}\n     DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/fileio/utils\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files CMake\nDESCRIPTION: Sets the header files for the project. The `set` command defines the `HEADERS` variable, which includes `proxyShapeSceneIndexPlugin.h`. This list of headers will be processed later for installation and header promotion.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/sceneIndex/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    proxyShapeSceneIndexPlugin.h\n)\n```\n\n----------------------------------------\n\nTITLE: Building with Rez\nDESCRIPTION: These shell commands clone the AL_USDMaya repository, edit package names, and build/install the plugin using the Rez package manager with a specified build target and number of cores.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/build.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone <git_path_to_AL_UsdMaya>\ncd AL_USDMaya\n<edit package names to match your internal named rez packages>\nrez build --build-target RelWithDebInfo --install -- -- -j 8\n```\n\n----------------------------------------\n\nTITLE: Set Header Files CMake\nDESCRIPTION: This snippet defines a variable `HEADERS` containing a list of header files. In this case, it includes `shaderFragments.h`. This variable is used later for promoting and installing the header files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/vp2ShaderFragments/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    shaderFragments.h\n)\n```\n\n----------------------------------------\n\nTITLE: Header Promotion with CMake\nDESCRIPTION: Promotes the header files for the Maya USD project using the `mayaUsd_promoteHeaderList` CMake function. This function ensures that the headers are properly included in the build process and are accessible to other parts of the project. It relies on the previously defined `HEADERS` variable and the project name.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/chaser/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_promoteHeaderList(\n    HEADERS\n        ${HEADERS}\n    BASEDIR\n        ${PROJECT_NAME}/fileio/chaser\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Properties\nDESCRIPTION: This snippet sets additional plugin properties for the `${PXR_PACKAGE}` target using the `maya_set_plugin_properties` function. This likely configures properties such as the plugin name and version.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaPlugin/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nmaya_set_plugin_properties(${PXR_PACKAGE})\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Python CMake\nDESCRIPTION: Links the Python library against the main library (LIBRARY_NAME).  This ensures the Python bindings can access the core AL_USDMaya functionality.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${PYTHON_LIBRARY_NAME}\n    ${LIBRARY_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Library Target (CMake)\nDESCRIPTION: This creates the shared library target using the specified target name.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/pxrUsdPreviewSurface/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(${TARGET_NAME} SHARED)\n```\n\n----------------------------------------\n\nTITLE: Setting Python Library Name CMake\nDESCRIPTION: Sets the name of the Python library based on whether a debug Python build is being used on Windows.  If it is, the library name is appended with '_d'.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nif(IS_WINDOWS AND MAYAUSD_DEFINE_BOOST_DEBUG_PYTHON_FLAG)\n    # On Windows when compiling with debug python the library must be named with _d.\n    set(PYTHON_LIBRARY_NAME _${LIBRARY_NAME}_d)\nelse()\n    set(PYTHON_LIBRARY_NAME _${LIBRARY_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Link Libraries for Python Extension\nDESCRIPTION: Specifies the libraries to link against when building the Python extension library, including the main project library and other dependencies like sdf and mayaUsd. These libraries are linked PRIVATELY.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/python/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${PYTHON_TARGET_NAME}\n    PRIVATE\n        ${PROJECT_NAME}\n        sdf\n        mayaUsd\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Appending CMake\nDESCRIPTION: This snippet conditionally appends additional test scripts to the TEST_SCRIPT_FILES list, based on whether the build type is Debug or not. Specifically, it appends performance-related tests when not in Debug mode.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/render/pxrUsdMayaGL/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES Debug)\n    list(APPEND TEST_SCRIPT_FILES\n            testProxyShapeDrawPerformance.py\n            testProxyShapeDuplicatePerformance.py\n            testProxyShapeSelectionPerformance.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add Maya Usd Utils Test Example CMake\nDESCRIPTION: Example usage of the `add_mayaUsdUtils_test` function to create a test executable named `testDiffCore`. It includes `test_DiffCore.cpp` as a source file, in addition to the `main.cpp` included by the function itself.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/utils/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_mayaUsdUtils_test(\n    testDiffCore\n    test_DiffCore.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Run-time Search Paths (usdTestApiWriter)\nDESCRIPTION: Adds rpath to the plugin, allowing it to find its dependent libraries at runtime.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX)\n    mayaUsd_init_rpath(rpath \"plugin\")\n    if(DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    elseif(DEFINED PXR_USD_LOCATION)\n        mayaUsd_add_rpath(rpath \"${PXR_USD_LOCATION}/lib\")\n    endif()\n    if(IS_LINUX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib64\")\n    endif()\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../../../Maya.app/Contents/MacOS\")\n    endif()\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/lib\")\n    mayaUsd_install_rpath(rpath ${TARGET_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Boost Dependency Setup (CMake)\nDESCRIPTION: This snippet handles the Boost dependency when building MayaUsd for USD versions 0.24.11 or greater. It sets the BOOST_ROOT environment variable if not already defined, and then uses `find_package` to locate the Boost headers.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_MAYAUSD_LIBRARY AND (USD_VERSION VERSION_GREATER_EQUAL \"0.24.11\"))\n    # In USD v24.11 Pixar USD has completely removed Boost.\n    # However MayaUsd is still using a few of the Boost components, so\n    # when using USD v24.11 (or greater) we need to find Boost ourselves\n    # (from the USD build, since Boost is still required for OpenImageIO).\n    if(NOT DEFINED ENV{BOOST_ROOT})\n        set(ENV{BOOST_ROOT} ${PXR_USD_LOCATION})\n    endif()\n\n    find_package(Boost REQUIRED COMPONENTS headers)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Ignoring Intermediate Object Changes (C++)\nDESCRIPTION: This code snippet shows how to disregard intermediate `ObjectChanged` notices during a transaction. The `processPaths` and `updateContent` functions are only called if there are no transactions in progress for the given USD stage.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/AL/usd/transaction/README.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nvoid UsdProcedural::onObjectsChanged(UsdNotice::ObjectsChanged const& notice, UsdStageWeakPtr const& sender)\n{\n  (...)\n  /// If there are no transactions in process, update content immediately.\n  /// Otherwise transaction close notice will provide information about changes.\n  if (!AL::usd::transaction::Manager::InProgress(sender))\n  {\n    processPaths(SdfPathVector(notice.GetChangedInfoOnlyPaths()), m_changedPaths);\n    processPaths(SdfPathVector(notice.GetResyncedPaths()), m_resynchedPaths);\n    updateContent();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Python Plug Plugins\nDESCRIPTION: Iterates through a list of plug-in names, installing the corresponding Python files and configuring their associated JSON files.  It renames each Python file to `__init__.py` and places it in a subdirectory with the plug-in name.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(PLUGPLUGIN_NAMES\n    testPlugModule1\n    testPlugModule2\n    testPlugModule3\n    testPlugModule4\n    testPlugModule5\n    testPlugModule6\n)\n\nforeach(plugName ${PLUGPLUGIN_NAMES})\n    install(FILES \"${CMAKE_CURRENT_SOURCE_DIR}/${plugName}.py\"\n            RENAME __init__.py\n            DESTINATION \"${CMAKE_CURRENT_BINARY_DIR}/TestMayaUsdPlug/${plugName}\")\n\n    configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/${plugName}_plugInfo.json\"\n                   \"${CMAKE_CURRENT_BINARY_DIR}/TestMayaUsdPlug/${plugName}/plugInfo.json\"\n)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Defining Target and Finding Dependencies - CMake\nDESCRIPTION: This snippet defines the target name, finds the GTest package, and adds a shared library target with the specified name.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/tests/mayaplugintest/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TARGET_NAME AL_MayaUtilsTests)\n\nfind_package(GTest REQUIRED)\n\nadd_library(${TARGET_NAME} SHARED)\n```\n\n----------------------------------------\n\nTITLE: Set source files for the target\nDESCRIPTION: This snippet specifies the source files that will be compiled and linked into the mtoh plugin. It uses the target_sources command to associate the listed .cpp files with the target.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/mayaToHydra/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${TARGET_NAME}\n    PRIVATE\n        defaultLightDelegate.cpp\n        plugin.cpp\n        pluginDebugCodes.cpp\n        renderGlobals.cpp\n        renderOverride.cpp\n        shadingModeExporter.cpp\n        tokens.cpp\n        utils.cpp\n        viewCommand.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Settings\nDESCRIPTION: This snippet configures the compiler settings for the `${PXR_PACKAGE}` target using the `mayaUsd_compile_config` function. This likely sets specific compiler flags and options required for building Maya USD plugins.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/plugin/AL_USDMayaPlugin/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_compile_config(${PXR_PACKAGE})\n```\n\n----------------------------------------\n\nTITLE: Qt Dependency Setup (CMake)\nDESCRIPTION: This snippet handles the detection and configuration of Qt dependencies for the Maya USD build. It searches for Qt6 first within the Maya devkit and falls back to Qt5 if Qt6 is not found.  It sets the `Qt_FOUND` variable, and if Qt is not found, it raises an error.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_MAYAUSD_LIBRARY)\n    if(MAYA_APP_VERSION VERSION_GREATER 2024)\n        # First look for Qt6 in the Maya devkit.\n        # The Qt6 archive in the Maya devkit contains everything needed for the normal cmake find_package.\n        set(CMAKE_PREFIX_PATH \"${MAYA_DEVKIT_LOCATION}/Qt\")\n        find_package(Qt6 6.5 COMPONENTS Core Gui Widgets QUIET)\n    endif()\n    if (Qt6_FOUND)\n        message(STATUS \"Found Qt6 in Maya devkit, building with Qt ${Qt6_VERSION} features enabled.\")\n        set(Qt_FOUND TRUE)\n    else()\n        # If we didn't find Qt6 in Maya devkit, search again, but for Qt5 this time.\n        # Minimum version required is 5.15 (Maya 2022/2023/2024).\n        # This will find Qt in the Maya devkit using a custom find package.\n        # So the version will match Maya we are building for.\n        find_package(Maya_Qt 5.15 COMPONENTS Core Gui Widgets QUIET)\n        if (Maya_Qt_FOUND)\n            message(STATUS \"Found Qt5 in Maya devkit, building with Qt ${MAYA_QT_VERSION} features enabled.\")\n            set(Qt_FOUND TRUE)\n        endif()\n    endif()\n\n    if(NOT Qt_FOUND)\n        message(SEND_ERROR \"Could not find Qt in Maya devkit directory: ${MAYA_DEVKIT_LOCATION}.\")\n        if(MAYA_APP_VERSION VERSION_GREATER 2024)\n            message(STATUS \"  You must extract Qt.tar.gz\")\n        else()\n            if (IS_WINDOWS)\n                message(STATUS \"  In Maya devkit you must extract include/qt_5.15.2_vc14-include.zip\")\n            else()\n                message(STATUS \"  In Maya devkit you must extract include/qt_5.15.2-include.tar.gz\")\n            endif()\n        endif()\n        message(FATAL_ERROR \"Cannot build MayaUsd without Qt.\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Empty Xforms Export Test Setup (CMake)\nDESCRIPTION: This snippet defines a test for exporting empty Xforms using `testUsdExportEmptyXforms`. The `mayaUsd_add_test` function adds the test, configuring the python module to run, the working directory to use during test execution and environment variables needed during the tests execution.  `PXR_OVERRIDE_PLUGINPATH_NAME` is set to the 'ExportEmptyConfig' plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/translators/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_add_test(testUsdExportEmptyXforms\n    PYTHON_MODULE testUsdExportEmptyXforms\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    ENV\n        \"${PXR_OVERRIDE_PLUGINPATH_NAME}=${CMAKE_CURRENT_BINARY_DIR}/../plugin/ExportEmptyConfig\"\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Append Light Implementations\nDESCRIPTION: Appends GLSL light implementations to a list. Different versions of Maya lighting implementations are included.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/MaterialXGenOgsXml/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND LIGHT_IMPLEMENTATIONS\n    libraries/mx_lighting_maya_none.glsl\n    libraries/mx_lighting_maya_v1.glsl\n    libraries/mx_lighting_maya_v2.glsl\n    libraries/mx_lighting_maya_v3.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Target Sources Definition (Core Project)\nDESCRIPTION: This snippet defines the target sources for the core ${PROJECT_NAME} library.  It specifies the `moduleDeps.cpp` file as a private source to be compiled into the library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PROJECT_NAME}\n    PRIVATE\n        moduleDeps.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Script Files CMake\nDESCRIPTION: Defines a list of Python script files to be used as unit tests for the MayaUsd schemas. This list is later iterated over to generate individual test targets.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/schemas/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TEST_SCRIPT_FILES\n    testMayaUsdSchemasPythonImport.py\n    testMayaUsdSchemasMayaReference.py\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files in CMake\nDESCRIPTION: The target_sources command specifies the source files that should be compiled and linked into the executable. The PRIVATE keyword indicates that these source files are only used for building this specific target and are not exposed to other targets that might link against it.  testMayaUsdUI.cpp contains the main source code for the test application.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/ui/importDialogDemo/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        testMayaUsdUI.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties (CMake)\nDESCRIPTION: This snippet sets the LIBRARY_OUTPUT_DIRECTORY property for the Python library, ensuring it is placed in the correct location.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/AL/usd/transaction/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${USDTRANSACTION_PYTHON_LIBRARY_NAME}\n  PROPERTIES \n    LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compile Definitions based on UFE Clipboard Support\nDESCRIPTION: Defines the UFE_CLIPBOARD_SUPPORT compile definition when UFE_CLIPBOARD_SUPPORT is enabled.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (UFE_CLIPBOARD_SUPPORT)\n    target_compile_definitions(${PROJECT_NAME}\n        PRIVATE\n            UFE_CLIPBOARD_SUPPORT=1\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Executable in CMake\nDESCRIPTION: This CMake command creates an executable target named ${PROJECT_NAME}, which is typically defined at the beginning of the CMakeLists.txt file. The add_executable command tells CMake to produce an executable file from the source code provided in subsequent commands.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/ui/importDialogDemo/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Adding a Subdirectory with CMake\nDESCRIPTION: This snippet uses the `add_subdirectory` command in CMake to include the CMake project located in the 'AL/usdmaya/utils' directory.  This allows the parent project to utilize the targets and build configurations defined in the subdirectory. No specific dependencies are required outside of a functional CMake environment.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdmayautils/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(AL/usdmaya/utils)\n```\n\n----------------------------------------\n\nTITLE: Define Target Sources CMake\nDESCRIPTION: This snippet defines the source files that are compiled into the target library or executable.  It uses the `target_sources` command to specify the private source files for the `${PROJECT_NAME}` target. The `shaderFragments.cpp` file is included as a private source.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/vp2ShaderFragments/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        shaderFragments.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting UFE Code Wrapper Flag\nDESCRIPTION: This CMake snippet conditionally sets the `UFE_HAS_CODE_WRAPPER` variable to either \"1\" or \"0\" depending on whether `CodeWrapperHandler` is in the `UFE_PREVIEW_FEATURES` list. This flag is used to control the behavior of tests related to code wrapping.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/ufe/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(CodeWrapperHandler IN_LIST UFE_PREVIEW_FEATURES)\n    set(UFE_HAS_CODE_WRAPPER \"1\")\nelse()\n    set(UFE_HAS_CODE_WRAPPER \"0\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Test Script Files with CMake\nDESCRIPTION: This CMake snippet defines a list of Python test script files to be used for unit testing. The `set` command is used to create a variable named `TEST_SCRIPT_FILES` and assign a list of Python file names to it. These files are then iterated over to create individual test targets.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/fileio/utils/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TEST_SCRIPT_FILES\n    testReadWriteUtils.py\n    testXformStack.py\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name\nDESCRIPTION: This snippet defines the name of the project as 'maya-usd'. This name is used to identify the project in CMake and other build systems.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(maya-usd)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files\nDESCRIPTION: This snippet defines a list of header files that will be installed. The header files are 'api.h', 'utils.h', and 'debugCodes.h'.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/hdMaya/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    api.h\n    utils.h\n    debugCodes.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding and Labeling Python Tests with CMake\nDESCRIPTION: This snippet iterates through the `TEST_SCRIPT_FILES` list, uses `mayaUsd_get_unittest_target` to create a test target, and then `mayaUsd_add_test` to add it to the CMake test suite. The working directory is set, an environment variable is added, and finally, a 'undo' label is applied to the test for filtering purposes.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/undo/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(script ${TEST_SCRIPT_FILES})\n    mayaUsd_get_unittest_target(target ${script})\n    mayaUsd_add_test(${target}\n        PYTHON_MODULE ${target}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        ENV\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n    )\n\n    # Add a ctest label to these tests for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS undo)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Setting Run-time Search Paths (usdTestInfoImportChaser)\nDESCRIPTION: Configures runtime search paths for the `usdTestInfoImportChaser` plugin, ensuring that it can locate its dependencies.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX)\n    mayaUsd_init_rpath(rpath \"plugin\")\n    if(DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    elseif(DEFINED PXR_USD_LOCATION)\n        mayaUsd_add_rpath(rpath \"${PXR_USD_LOCATION}/lib\")\n    endif()\n    if(IS_LINUX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib64\")\n    endif()\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../../../Maya.app/Contents/MacOS\")\n    endif()\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/lib\")\n    mayaUsd_install_rpath(rpath ${TARGET_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting VP2 Device Override Environment Variable\nDESCRIPTION: This shell command sets the MAYA_VP2_DEVICE_OVERRIDE environment variable to force VP2 to use the \"OpenGL -- Legacy\" profile.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/build.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nMAYA_VP2_DEVICE_OVERRIDE=VirtualDeviceGL\n```\n\n----------------------------------------\n\nTITLE: Promote Header List\nDESCRIPTION: Promotes the header files listed in HEADERS to a specific subdirectory using the mayaUsd_promoteHeaderList function.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_promoteHeaderList(HEADERS ${HEADERS} SUBDIR fileio)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Converter Tests\nDESCRIPTION: This CMake code configures tests for custom converters. It iterates through template scripts, configures them, and creates test targets for each plugin type (Maya and USD), setting relevant environment variables like MAYA_PLUG_IN_PATH, PXR_OVERRIDE_PLUGINPATH_NAME, and USD_FORCE_DEFAULT_MATERIALS_SCOPE_NAME.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/translators/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(CUSTOM_TEST_SCRIPT_FILES\n    testUsdExportCustomConverter.template.py\n    testUsdImportCustomConverter.template.py\n)\nset(PLUGIN_TYPES\n    Maya\n    USD\n)\nforeach(template_script ${CUSTOM_TEST_SCRIPT_FILES})\n    string(REGEX REPLACE \"\\\\.template.py\" \".py\" script\n            \"${template_script}\")\n    configure_file(\n        \"${CMAKE_CURRENT_SOURCE_DIR}/${template_script}\"\n        \"${CMAKE_CURRENT_BINARY_DIR}/${script}\"\n        @ONLY\n    )\n\n    foreach(plugin_type ${PLUGIN_TYPES})\n        mayaUsd_get_unittest_target(module ${script})\n        set(target \"${module}-${plugin_type}\")\n        mayaUsd_add_test(${target}\n            PYTHON_MODULE ${module}\n            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n            ENV\n                \"MAYA_PLUG_IN_PATH=${CMAKE_CURRENT_BINARY_DIR}/../plugin\"\n                \"${PXR_OVERRIDE_PLUGINPATH_NAME}=${CMAKE_CURRENT_BINARY_DIR}/../plugin/${plugin_type}\"\n                \"INPUT_PATH=${CMAKE_CURRENT_SOURCE_DIR}\"\n                \"PYTHONPATH=${CMAKE_CURRENT_BINARY_DIR}\"\n                \"USD_FORCE_DEFAULT_MATERIALS_SCOPE_NAME=1\"\n                \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n                )\n        set_property(TEST ${target} APPEND PROPERTY LABELS translators)\n    endforeach()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Inclusion based on UFE SceneItem Metadata (Python)\nDESCRIPTION: This CMake snippet conditionally appends `testSceneItemMetadata.py` to the `TEST_SCRIPT_FILES` list if the `UFE_SCENEITEM_HAS_METADATA` variable is set. This includes tests related to UFE SceneItem Metadata.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/ufe/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif (UFE_SCENEITEM_HAS_METADATA)\n    list(APPEND TEST_SCRIPT_FILES\n        testSceneItemMetadata.py\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Promoting Headers with CMake\nDESCRIPTION: This snippet promotes a header file from a source directory to a binary directory using `configure_file`.  It checks if the destination file exists and displays a status message before promoting. `mayaUsd_promoteHeaderList` (not defined in the provided extract) is assumed to handle promoting the list of headers. Requires `${CMAKE_CURRENT_SOURCE_DIR}`, `${CMAKE_BINARY_DIR}` to be defined and `${SRCFILE}` to point to a valid source file.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/base/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRCFILE ${CMAKE_CURRENT_SOURCE_DIR}/usdUfe.h.src)\nset(DSTFILE ${CMAKE_BINARY_DIR}/include/usdUfe/usdUfe.h)\nif (NOT EXISTS ${dstFile})\n    message(STATUS \"promoting: \" ${SRCFILE})\nendif()\nconfigure_file(${SRCFILE} ${DSTFILE})\n\nmayaUsd_promoteHeaderList(HEADERS ${HEADERS} BASEDIR ${PROJECT_NAME} SUBDIR base)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Script Files (CMake)\nDESCRIPTION: This snippet defines a list of Python scripts to be used as unit tests. These scripts are stored in the `TEST_SCRIPT_FILES` variable, which is later iterated over to create individual test targets.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/maya/lib/pxrUsdMayaGL/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TEST_SCRIPT_FILES\n    testenv/testRefAssemblyDrawRepresentations.py\n    testenv/testBatchRendererIsolateSelection.py\n    testenv/testPxrUsdMayaGLInstancerDraw.py\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Options for CMake Target\nDESCRIPTION: This snippet configures the compiler settings for the `AL_MayaTest` library using the `mayaUsd_compile_config` macro, and adds compile definitions that are specific to different operating systems (macOS, Linux, Windows).  It also defines the AL_MAYA_TEST_EXPORT macro.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayatest/AL/maya/test/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_compile_config(${MAYA_TEST_LIBRARY_NAME})\n\ntarget_compile_definitions(${MAYA_TEST_LIBRARY_NAME}\n  PRIVATE\n    $<$<BOOL:${IS_MACOSX}>:OSMac_>\n    $<$<BOOL:${IS_LINUX}>:LINUX>\n    $<$<BOOL:${IS_WINDOWS}>:GTEST_LINKED_AS_SHARED_LIBRARY>\n    AL_MAYA_TEST_EXPORT\n)\n```\n\n----------------------------------------\n\nTITLE: Macro Name Example C++\nDESCRIPTION: This code snippet demonstrates the naming convention for macros within the maya-usd project. Macros should be avoided when possible, but if necessary, they should be all capitals with words separated by underscores.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/codingGuidelines.md#_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\n#define ROUND(x) …\n#define PI_ROUNDED 3.0\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files in CMake\nDESCRIPTION: This CMake command defines a list of header files that are used in the project. These headers will be promoted for inclusion in other modules that depend on this library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/utils/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n    ALHalf.h\n    diffCore.h\n    diffPrims.h\n    editability.h\n    editRouter.h\n    editRouterContext.h\n    layers.h\n    loadRules.h\n    mergePrims.h\n    mergePrimsOptions.h\n    schemas.h\n    SIMD.h\n    uiCallback.h\n    usdUtils.h\n    Utils.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting MAYA_MODULE_PATH Environment Variable\nDESCRIPTION: This snippet shows how to set the `MAYA_MODULE_PATH` environment variable to point to the location where the MayaUSD module files are installed. This allows Maya to discover and load the plugins.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/build.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nset MAYA_MODULE_PATH=C:\\workspace\\install\\RelWithDebInfo\nexport MAYA_MODULE_PATH=/usr/local/workspace/install/RelWithDebInfo\n```\n\n----------------------------------------\n\nTITLE: Refreshing System Lock in MEL Script (Non-Undoable)\nDESCRIPTION: This MEL script snippet demonstrates how to refresh the system lock status of a USD layer using the `mayaUsdLayerEditor` command. A flag determines if sublayers should also be refreshed. This command is un-doable.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/LayerLocking.md#_snippet_5\n\nLANGUAGE: MEL\nCODE:\n```\n// 0 = Only top layer, 1 = Include the sublayers\n// example: This will perform a write permission check on a layer:\nmayaUsdLayerEditor -edit -refreshSystemLock \"|stage|stageShape1\" 0 \"d:/Assets/exampleLayer.usda\"\n```\n\nLANGUAGE: MEL\nCODE:\n```\n// example: This will perform a write permission check on a layer and its sub-layers\nmayaUsdLayerEditor -edit -refreshSystemLock \"|stage|stageShape1\" 1 \"d:/Assets/exampleLayer.usda\"\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files CMake\nDESCRIPTION: This code block installs the header files to a specific destination directory. The install command copies the header files specified in the HEADERS variable to the directory specified by CMAKE_INSTALL_PREFIX/include/${PROJECT_NAME}/ufe/trf. CMAKE_INSTALL_PREFIX is a variable that specifies the installation prefix for the project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/trf/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${HEADERS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/ufe/trf\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Python Module Property (CMake)\nDESCRIPTION: This snippet calls a function to set the python module properties.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/AL/usd/transaction/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset_python_module_property(${USDTRANSACTION_PYTHON_LIBRARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Set utils_source Variable - CMake\nDESCRIPTION: This snippet sets the utils_source variable by appending the contents of utils_event_source to it. The PARENT_SCOPE option ensures that the variable is modified in the parent scope. It's likely utils_source is a global variable collecting all source files.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/utils/AL/event/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(utils_source ${utils_source} ${utils_event_source} PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Conditional Target Sources CMake\nDESCRIPTION: This code block conditionally adds a source file to the target based on whether the CMAKE_UFE_V4_FEATURES_AVAILABLE variable is set. This allows for different features to be included in the build based on the availability of certain dependencies or build options.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/trf/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_UFE_V4_FEATURES_AVAILABLE)\n    target_sources(${PROJECT_NAME}\n        PRIVATE\n            UsdTransform3dRead.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Promoting Headers with mayaUsd_promoteHeaderList in CMake\nDESCRIPTION: This snippet uses the `mayaUsd_promoteHeaderList` macro to promote the specified headers. This makes them available for inclusion by other parts of the Maya-USD project. It takes a list of header files, extracts the base directory, and promotes those headers.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/ui/importDialog/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n    IMayaMQtUtil.h\n    ItemDelegate.h\n    IUSDImportView.h\n    TreeItem.h\n    TreeModel.h\n    TreeModelFactory.h\n    USDImportDialog.h\n    USDImportDialogCmd.h\n    USDQtUtil.h\n)\n\nmayaUsd_promoteHeaderList( \n    HEADERS\n        ${HEADERS}\n    BASEDIR\n        ${PROJECT_NAME}/ui\n)\n```\n\n----------------------------------------\n\nTITLE: Installing MayaUSD Targets\nDESCRIPTION: This snippet installs the target ${PXR_TRANSLATORS_PACKAGE} as a library and runtime executable to the specified destination directory. It handles installation on Windows by also installing the PDB file if it exists, marking it as OPTIONAL. The DESTINATION variable determines where the files will be placed during the installation process. ${AL_INSTALL_PREFIX} is likely a variable defining the root installation path.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/pxrUsdTranslators/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${PXR_TRANSLATORS_PACKAGE}\n LIBRARY\n DESTINATION ${AL_INSTALL_PREFIX}/plugin\n RUNTIME\n DESTINATION ${AL_INSTALL_PREFIX}/plugin\n)\nif(IS_WINDOWS)\n install(FILES $<TARGET_PDB_FILE:${PXR_TRANSLATORS_PACKAGE}> DESTINATION ${AL_INSTALL_PREFIX}/plugin OPTIONAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Variable Name Example C++\nDESCRIPTION: This code snippet illustrates the naming convention for variable names, including function parameters and data members, in the maya-usd project.  Variable names should use lowerCamelCase with no underscores.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/codingGuidelines.md#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nconst MDagPath& dagPath\nconst MVector& rayDirection\nbool* drawRenderPurpose\n```\n\n----------------------------------------\n\nTITLE: Installing Headers with CMake\nDESCRIPTION: This snippet installs the header files listed in `maya_test_headers` to the specified destination directory under AL_INSTALL_PREFIX. The destination path is `/include/AL/maya/test`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayatest/AL/maya/test/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ninstall( FILES ${maya_test_headers}\n  DESTINATION ${AL_INSTALL_PREFIX}/include/AL/maya/test\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions (CMake)\nDESCRIPTION: This snippet sets the compile definitions for the USDTransaction library. It defines AL_USD_TRANSACTION_EXPORT and conditionally defines TBB_USE_DEBUG, BOOST_DEBUG_PYTHON and BOOST_LINKING_PYTHON if the build type is Debug.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/AL/usd/transaction/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${USDTRANSACTION_LIBRARY_NAME}\n    PRIVATE\n        AL_USD_TRANSACTION_EXPORT\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:TBB_USE_DEBUG>\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_DEBUG_PYTHON>\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_LINKING_PYTHON>\n)\n```\n\n----------------------------------------\n\nTITLE: Set Header Files CMake\nDESCRIPTION: This snippet defines the header files associated with the project. These header files are later promoted and installed to specific directories.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/vp2RenderDelegate/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n    proxyRenderDelegate.h\n    colorManagementPreferences.h\n)\n```\n\n----------------------------------------\n\nTITLE: Running Tests (Lambert)\nDESCRIPTION: This snippet iterates through the list of Lambert test scripts and configures each one as a unit test. It sets environment variables for the test execution, including paths to Maya plugins and libraries.  It also sets a CTest label for filtering.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/render/vp2RenderDelegate/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(script ${TEST_SCRIPT_FILES_LAMBERT})\n    mayaUsd_get_unittest_target(target ${script})\n    mayaUsd_add_test(${target}\n        INTERACTIVE\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        PYTHON_SCRIPT ${script}\n        ENV\n            \"MAYA_PLUG_IN_PATH=${CMAKE_INSTALL_PREFIX}/lib/maya\"\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n            \"MAYA_LIGHTAPI_VERSION=${MAYA_LIGHTAPI_VERSION}\"\n\n            # Maya uses a very old version of GLEW, so we need support for\n            # pre-loading a newer version from elsewhere.\n            \"LD_PRELOAD=${ADDITIONAL_LD_PRELOAD}\"\n\n            # Used in detecting whether there is support for volume light gizmos\n            \"UFE_VOLUME_LIGHTS_SUPPORT=${UFE_VOLUME_LIGHTS_SUPPORT}\"\n\n            # Legacy lambert tests will force the use of the lamber fallback shaders\n            \"MAYAUSD_VP2_USE_LAMBERT_FALLBACK=true\"\n    )\n\n    # Assign a CTest label to these tests for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS vp2RenderDelegate)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Include Subdirectory in CMake\nDESCRIPTION: This CMake command adds the specified subdirectory to the build process. It allows the project to incorporate modules or components located in separate directories. The 'AL/maya' directory must contain its own CMakeLists.txt file to define its build process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(AL/maya)\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files (CMake)\nDESCRIPTION: Installs the header files to the specified destination directory. This makes the header files available for other projects to include.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninstall( FILES ${maya_utils_headers}\n        DESTINATION ${AL_INSTALL_PREFIX}/include/AL/maya/utils\n)\n\ninstall( FILES ${maya_event_headers}\n        DESTINATION ${AL_INSTALL_PREFIX}/include/AL/maya/event\n)\n```\n\n----------------------------------------\n\nTITLE: Append Versioned Node GLSL Extra Implementations\nDESCRIPTION: Appends versioned extra GLSL implementations for nodes to a list. These implementations handle color transformations specific to different color spaces.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/MaterialXGenOgsXml/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND NODE_GLSL_EXTRA_IMPLEMENTATIONS_VERSIONED\n    libraries/mx_srgb_texture_to_lin_rec709_color3.glsl\n    libraries/mx_srgb_texture_to_lin_rec709_color4.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Tests Conditionally (Display Layer API)\nDESCRIPTION: This snippet conditionally appends test scripts if the Maya display layer API is available. It adds testVP2RenderDelegateDisplayLayers.py to the test script list.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/render/vp2RenderDelegate/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif (MAYA_HAS_DISPLAY_LAYER_API)\n    list(APPEND TEST_SCRIPT_FILES_LAMBERT\n        testVP2RenderDelegateDisplayLayers.py\n        )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Installation Based on MaterialX Version\nDESCRIPTION: Conditionally installs MaterialX libraries based on the detected MaterialX version. It uses a specific subdirectory for older versions to maintain compatibility.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/MaterialXGenOgsXml/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(MaterialX_VERSION VERSION_LESS \"1.38.4\")\n    MESSAGE(STATUS \"Using 1.38.3 libraries with MaterialX ${MaterialX_VERSION}\")\n    foreach(MTLX_FILE ${NODE_GLSL_IMPLEMENTATIONS_VERSIONED})\n        string(REPLACE \"libraries/\" \"libraries/1.38.3/\" MTLX_FILE ${MTLX_FILE})\n        install(FILES \"${MTLX_FILE}\"\n            DESTINATION ${CMAKE_INSTALL_PREFIX}/libraries/adsk/maya/genglsl\n        )\n    endforeach()\n    foreach(MTLX_FILE ${LIGHT_IMPLEMENTATIONS})\n        string(REPLACE \"libraries/\" \"libraries/1.38.3/\" MTLX_FILE ${MTLX_FILE})\n        install(FILES \"${MTLX_FILE}\"\n            DESTINATION ${CMAKE_INSTALL_PREFIX}/libraries/pbrlib/genglsl/ogsxml\n        )\n    endforeach()\nelif(MaterialX_VERSION VERSION_LESS \"1.38.8\")\n    MESSAGE(STATUS \"Using 1.38.[4-7] libraries with MaterialX ${MaterialX_VERSION}\")\n    foreach(MTLX_FILE ${NODE_GLSL_IMPLEMENTATIONS_VERSIONED})\n        string(REPLACE \"libraries/\" \"libraries/1.38.7/\" MTLX_FILE ${MTLX_FILE})\n        install(FILES \"${MTLX_FILE}\"\n            DESTINATION ${CMAKE_INSTALL_PREFIX}/libraries/adsk/maya/genglsl\n        )\n    endforeach()\n    foreach(MTLX_FILE ${LIGHT_IMPLEMENTATIONS})\n        string(REPLACE \"libraries/\" \"libraries/1.38.7/\" MTLX_FILE ${MTLX_FILE})\n        install(FILES \"${MTLX_FILE}\"\n            DESTINATION ${CMAKE_INSTALL_PREFIX}/libraries/pbrlib/genglsl/ogsxml\n        )\n    endforeach()\nelse()\n    MESSAGE(STATUS \"Using latest libraries with MaterialX ${MaterialX_VERSION}\")\n    install(FILES ${NODE_GLSL_IMPLEMENTATIONS_VERSIONED}\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/libraries/adsk/maya/genglsl\n    )\n    install(FILES ${NODE_GLSL_EXTRA_IMPLEMENTATIONS_VERSIONED}\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/libraries/adsk/maya/genglsl\n    )\n    install(FILES ${NODE_GLSL_LIB_VERSIONED}\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/libraries/adsk/maya/genglsl/lib\n    )\n    install(FILES ${LIGHT_IMPLEMENTATIONS}\n        DESTINATION ${CMAKE_INSTALL_PREFIX}/libraries/pbrlib/genglsl/ogsxml\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Maya USD Library (CMake)\nDESCRIPTION: Links the Maya USD library to the target.  This allows the plugin to use Maya USD functionality.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/tutorials/import-export-plugin-c++/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${TARGET_NAME}\n    PRIVATE\n        mayaUsd\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Python Packages with pip\nDESCRIPTION: This snippet shows how to use `pip list` to see the list of installed Python packages with your Python package manager. This can be used to verify if PyOpenGL is installed.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/build.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n➜ pip list\nDEPRECATION: Python 2.7 will reach the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 won't be maintained after that date. A future version of pip will drop support for Python 2.7.\nPackage    Version\n---------- -------\nJinja2     2.10   \nMarkupSafe 1.1.0  \npip        19.1.1 \nPyOpenGL   3.1.0  \nPySide2    5.12.1 \nPyYAML     3.13   \nsetuptools 39.0.1 \nshiboken2  5.12.1 \n```\n\n----------------------------------------\n\nTITLE: Defining Header Files CMake\nDESCRIPTION: Defines a list of header files used in the shading file I/O components. These headers provide declarations for RFM shader maps, shading mode exporters and importers, registries, and symmetric shader handling. The headers will be used during compilation and should be accessible from the include paths.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/shading/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    rfmShaderMap.h\n    shadingModeExporter.h\n    shadingModeExporterContext.h\n    shadingModeImporter.h\n    shadingModeRegistry.h\n    symmetricShaderReader.h\n    symmetricShaderWriter.h\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries (usdTestInfoImportChaser)\nDESCRIPTION: Links the `usdTestInfoImportChaser` target with the `mayaUsd` library.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${TARGET_NAME}\n    PRIVATE\n        mayaUsd\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files with CMake\nDESCRIPTION: This CMake snippet defines a list of header files. The header files `api.h`, `debugCodes.h`, `id.h`, `syncId.h`, and `tokens.h` are grouped in a list named `HEADERS`. This list can be used later for installing the header files to the installation directory. The `set` command is used to create the `HEADERS` variable and assign the list of header files to it.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/base/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n    api.h\n    debugCodes.h\n    id.h\n    syncId.h\n    tokens.h\n)\n```\n\n----------------------------------------\n\nTITLE: USD Version Check C++\nDESCRIPTION: This code snippet shows how to check the USD version in C++ code using the `PXR_VERSION` macro.  This allows for conditional compilation based on the USD version, ensuring compatibility with different USD releases. The macro represents the version as `PXR_MAJOR_VERSION * 10000 + PXR_MINOR_VERSION * 100 + PXR_PATCH_VERSION`.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/codingGuidelines.md#_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\n#if PXR_VERSION <= 2311\n// Code specific to USD versions less than or equal to 23.11\n#endif\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to CMake Target\nDESCRIPTION: This snippet links the required libraries to the `AL_MayaTest` library using the `target_link_libraries` command. These libraries include GTest, Maya libraries, arch, and tf.  Arch and tf are noted as dependencies that should be removed.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayatest/AL/maya/test/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${MAYA_TEST_LIBRARY_NAME}\n  PUBLIC\n    ${GTEST_LIBRARIES}\n    ${MAYA_LIBRARIES}\n    arch    # We should try and remove this dependency\n    tf      # We should try and remove this dependency\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling Configuration - CMake\nDESCRIPTION: This snippet applies MayaUsd-specific compile configurations to the target. It likely includes setting compiler flags and defining preprocessor macros.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/tests/mayaplugintest/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_compile_config(${TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Add CMake Subdirectories\nDESCRIPTION: Adds specified subdirectories to the CMake build process. Each subdirectory contains its own CMakeLists.txt file that defines how it should be built. This approach facilitates modular project management and code organization.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(fileio)\nadd_subdirectory(nodes)\nadd_subdirectory(render)\nadd_subdirectory(undo)\nadd_subdirectory(utils)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Tests with CMake Functions\nDESCRIPTION: This CMake snippet iterates through the defined Python test scripts and creates test targets using custom CMake functions (`mayaUsd_get_unittest_target` and `mayaUsd_add_test`). It also sets a property to add a ctest label for easy filtering of the tests.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/utils/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(script ${TEST_SCRIPT_FILES})\n    mayaUsd_get_unittest_target(target ${script})\n    mayaUsd_add_test(${target}\n        PYTHON_MODULE ${target}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        ENV\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n    )\n\n    # Add a ctest label to these tests for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS utils)\nendforeach()\n\nforeach(script ${INTERACTIVE_TEST_SCRIPT_FILES})\n    mayaUsd_get_unittest_target(target ${script})\n    mayaUsd_add_test(${target}\n        INTERACTIVE\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        PYTHON_SCRIPT ${script}\n        ENV\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n    )\n\n    # Add a ctest label to these tests for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS utils)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory in CMake\nDESCRIPTION: This CMake command adds the 'mayaplugintest' subdirectory to the current build process. It is used to incorporate external modules or components into the project, allowing their CMakeLists.txt file to be processed and their targets to be included in the overall build.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(mayaplugintest)\n```\n\n----------------------------------------\n\nTITLE: Header Files List Definition in CMake\nDESCRIPTION: This CMake snippet defines a list of header files that are associated with the delegate library. These headers contain declarations that define the library's public interface. The HEADERS variable is then used in subsequent build and install steps.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/hdMaya/delegates/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    delegate.h\n    delegateCtx.h\n    delegateDebugCodes.h\n    delegateRegistry.h\n    params.h\n    proxyDelegate.h\n    proxyUsdImagingDelegate.h\n    sceneDelegate.h\n    testDelegate.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring UV Sets Import Tests\nDESCRIPTION: This CMake snippet configures separate test targets for importing UV sets with different settings for reading UV data as float2. `testUsdImportUVSets` disables float2 reading, while `testUsdImportUVSetsFloat` enables it. The \"translators\" label is added for filtering the tests.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/translators/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_add_test(testUsdImportUVSets\n    PYTHON_MODULE testUsdImportUVSets\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    ENV\n        \"PIXMAYA_READ_FLOAT2_AS_UV=0\"\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n)\nset_property(TEST testUsdImportUVSets APPEND PROPERTY LABELS translators)\n\nmayaUsd_add_test(testUsdImportUVSetsFloat\n    PYTHON_MODULE testUsdImportUVSets\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    ENV\n        \"PIXMAYA_READ_FLOAT2_AS_UV=1\"\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n)\nset_property(TEST testUsdImportUVSetsFloat APPEND PROPERTY LABELS translators)\n```\n\n----------------------------------------\n\nTITLE: Promoting Headers for Maya-USD in CMake\nDESCRIPTION: This CMake snippet defines a list of header files (`HEADERS`) and uses the custom `mayaUsd_promoteHeaderList` function to handle header promotion. The function takes the list of headers and the base directory (${PROJECT_NAME}/ui) as input. The promoted headers are made available for inclusion in other parts of the project or external projects.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/ui/layerEditor/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n    batchSaveLayersUIDelegate.h\n)\n\nmayaUsd_promoteHeaderList(\n    HEADERS\n        ${HEADERS}\n    BASEDIR\n        ${PROJECT_NAME}/ui\n)\n```\n\n----------------------------------------\n\nTITLE: Copy Python Init Files CMake\nDESCRIPTION: Copies Python initialization files to the build location for module testing. This ensures that the Python modules are available during the build process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(INPUT_FILE ${PY_INIT_FILES})\n  string(REPLACE ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR} OUTPUT_FILE ${INPUT_FILE})\n  execute_process(COMMAND \"${CMAKE_COMMAND}\" -E copy \"${INPUT_FILE}\" \"${OUTPUT_FILE}\")\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Constructing a GUI for a Maya Command in C++\nDESCRIPTION: This code demonstrates how to create a GUI for a custom Maya command using the AL::maya::CommandGuiHelper class. It adds a string option to the GUI, which automatically handles the user interface elements.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/developer.md#_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nvoid constructMyCommandUI()\n{\n  AL::maya::CommandGuiHelper MyCommandUI(\"MyCommand\", \"My Command\", \"Run\", \"Menu/Path/My Command\", true);\n  MyCommandUI.addStringOption(\"sa\", \"Some Argument\");\n}\n```\n\n----------------------------------------\n\nTITLE: Install Headers CMake\nDESCRIPTION: Installs the header files to a designated destination directory during the installation process. This ensures that the headers are available in the correct location for users and developers who want to integrate with the Maya USD adapter. `CMAKE_INSTALL_PREFIX` specifies the root installation directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/hdMaya/adapters/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES ${HEADERS}\n    DESTINATION \n        ${CMAKE_INSTALL_PREFIX}/include/hdMaya/adapters\n)\n```\n\n----------------------------------------\n\nTITLE: Installing PlugInfo File CMake\nDESCRIPTION: Specifies the installation location for the plugInfo.json file.  It is installed to a resources subdirectory within the usd/mayaUsd_Utils directory of the installation prefix.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/utils/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${PLUGINFO}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/usd/mayaUsd_Utils/resources\n)\n```\n\n----------------------------------------\n\nTITLE: Link libraries to the target\nDESCRIPTION: This snippet links the hdMaya library to the mtoh target. This means that the mtoh plugin depends on the hdMaya library and will need it at runtime.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/mayaToHydra/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${TARGET_NAME}\n    PRIVATE \n        hdMaya \n)\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Path Variable Name\nDESCRIPTION: This snippet sets the name of the environment variable that USD uses to search for plugins. The cache string defines the name of the plugin path.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(PXR_OVERRIDE_PLUGINPATH_NAME PXR_PLUGINPATH_NAME\n    CACHE STRING \"Name of env var USD searches to find plugins\")\n```\n\n----------------------------------------\n\nTITLE: CMake Add schemas\nDESCRIPTION: Adds the 'schemas' subdirectory to the CMake build process. The schemas directory likely contains definitions or specifications for data structures used throughout the project. This makes the schema definition part of the build.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(schemas)\n```\n\n----------------------------------------\n\nTITLE: CMake Add translators\nDESCRIPTION: Adds the 'translators' subdirectory to the CMake build process. This likely contains code for converting between different data formats or APIs. Making it part of the CMake project makes these converters part of the overall build.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(translators)\n```\n\n----------------------------------------\n\nTITLE: Install Configured MEL Template (CMake)\nDESCRIPTION: This CMake command installs the configured MEL template file (generated in the previous step) to a specific destination directory within the Maya installation structure.  `INSTALL_DIR_SUFFIX` would be defined elsewhere, and determines the final installation location.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/adsk/scripts/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/AEusdPreviewSurfaceTemplate.mel\n    DESTINATION ${INSTALL_DIR_SUFFIX}/scripts\n)\n```\n\n----------------------------------------\n\nTITLE: Set header files for promotion\nDESCRIPTION: This snippet defines the header files to be promoted. These headers are likely made available for other modules or plugins to use.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/mayaToHydra/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    utils.h\n)\n\nmayaUsd_promoteHeaderList(HEADERS ${HEADERS} SUBDIR render/mayaToHydra)\n```\n\n----------------------------------------\n\nTITLE: Install Project __init__.py\nDESCRIPTION: This snippet installs an `__init__.py` file to create a Python module for the main project directory, specified by `PROJECT_NAME`. This allows the project to be imported as a module in Python.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/resources/ae/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES __init__.py DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/python/${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Including Jinja Module\nDESCRIPTION: This snippet includes the `cmake/jinja.cmake` module if the `BUILD_MAYAUSD_LIBRARY` option is enabled. This module provides functionality for using Jinja2 templates in the build process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_MAYAUSD_LIBRARY)\n    include(cmake/jinja.cmake)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending MEL and Python Scripts to a List in CMake\nDESCRIPTION: This snippet appends various MEL and Python script filenames to the `scripts_src` variable, used later in the build process to identify the source files for installation. This list likely contains scripts used for registering strings, adding references, caching, duplicating, merging, and other utilities within the Maya-USD plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/resources/scripts/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND scripts_src\n    mayaUsdLibRegisterStrings.mel\n    mayaUsdLibRegisterStrings.py\n    mayaUsdAddMayaReference.mel\n    mayaUsdAddMayaReference.py\n    mayaUsdAddUSDReference.mel\n    mayaUsdCacheMayaReference.mel\n    mayaUsdCacheMayaReference.py\n    mayaUsdClearRefsOrPayloadsOptions.mel\n    mayaUsdClearRefsOrPayloadsOptions.py\n    mayaUsdDuplicateAsUsdDataOptions.mel\n    mayaUsdDuplicateAsUsdDataOptions.py\n    mayaUsdMergeToUSDOptions.mel\n    mayaUsdMergeToUSDOptions.py\n    mayaUsdMergeToUsd.py\n    mayaUsdOptions.py\n    mayaUsdStageConversion.py\n    mayaUsdUtils.py\n    mayaUsdMayaReferenceUtils.py\n)\n```\n\n----------------------------------------\n\nTITLE: Example JSON for User Exported Attributes (Javascript)\nDESCRIPTION: This JSON object shows the structure of the `USD_UserExportedAttributesJson` attribute in Maya after tagging attributes for USD export using the User Exported Attributes UI. It includes examples of how to specify USD attribute names, types (primvar, usdRi), and interpolation.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/doc/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"myMayaAttributeOne\": {\n    },\n    \"myMayaAttributeTwo\": {\n        \"usdAttrName\": \"my:namespace:attributeTwo\"\n    },\n    \"attributeAsPrimvar\": {\n        \"usdAttrType\": \"primvar\"\n    },\n    \"attributeAsVertexInterpPrimvar\": {\n        \"usdAttrType\": \"primvar\",\n        \"interpolation\": \"vertex\"\n    },\n    \"attributeAsRibAttribute\": {\n        \"usdAttrType\": \"usdRi\"\n    }\n    \"doubleAttributeAsFloatAttribute\": {\n        \"translateMayaDoubleToUsdSinglePrecision\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Target Name and Installation Paths (CMake)\nDESCRIPTION: This snippet sets the target name for the library, and defines installation paths for resources and the library itself within the CMake project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/pxrUsdPreviewSurface/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TARGET_NAME basePxrUsdPreviewSurface)\n\nset(RESOURCES_INSTALL_PATH\n    ${CMAKE_INSTALL_PREFIX}/lib/usd/${TARGET_NAME}/resources\n)\n\nset(LIBRARY_INSTALL_PATH\n    ${CMAKE_INSTALL_PREFIX}/lib\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up USDMAYA_UTILS_LIBRARY_NAME and location\nDESCRIPTION: This snippet sets the library name and installation location for the usdmaya utils library, which are later used in the build and install steps.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdmayautils/AL/usdmaya/utils/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(USDMAYA_UTILS_LIBRARY_NAME \"AL_USDMayaUtils\")\nset(MAYA_UTILS_LIBRARY_LOCATION ${AL_INSTALL_PREFIX}/lib)\n```\n\n----------------------------------------\n\nTITLE: Add pxrUsdPreviewSurface Subdirectory in CMake\nDESCRIPTION: This CMake command adds the 'pxrUsdPreviewSurface' directory to the build. Similar to 'pxrUsd', it enables CMake to process the subdirectory's CMakeLists.txt file and include its build targets.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/maya/plugin/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(pxrUsdPreviewSurface)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries (usdTestApiWriter)\nDESCRIPTION: Links the `usdTestApiWriter` library to `mayaUsd` and `usdPhysics` libraries.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${TARGET_NAME}\n    PRIVATE\n        mayaUsd\n        usdPhysics\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Test with CMake\nDESCRIPTION: This CMake snippet registers a test for the Maya USD plugin. It utilizes `pxr_register_test` to specify the test name, custom Python executable, command to run, test environment, and environment variables required for the test.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/maya/plugin/pxrUsd/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_INSTALL_PREFIX \"${PXR_INSTALL_PREFIX}\")\n\npxr_register_test(testPxrUsdAlembicChaser\n    CUSTOM_PYTHON ${MAYA_PY_EXECUTABLE}\n    COMMAND \"${TEST_INSTALL_PREFIX}/tests/testPxrUsdAlembicChaser\"\n    TESTENV testPxrUsdAlembicChaser\n    ENV\n        MAYA_PLUG_IN_PATH=${TEST_INSTALL_PREFIX}/maya/plugin\n        MAYA_SCRIPT_PATH=${TEST_INSTALL_PREFIX}/maya/lib/usd/usdMaya/resources\n        MAYA_DISABLE_CIP=1\n        MAYA_NO_STANDALONE_ATEXIT=1\n        MAYA_APP_DIR=<PXR_TEST_DIR>/maya_profile\n        WIN_DLL_PATH \"${PXR_USD_LOCATION}/plugin/usd;${PXR_USD_LOCATION}/lib;${PXR_USD_LOCATION}/bin;${TEST_INSTALL_PREFIX}/maya/lib;${CMAKE_INSTALL_PREFIX}/lib\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Adding RPATH - CMake\nDESCRIPTION: This snippet initializes and adds run-time search paths (RPATH) for macOS and Linux. It uses custom CMake functions (mayaUsd_init_rpath, mayaUsd_add_rpath, mayaUsd_install_rpath) to configure the RPATH.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/tests/mayaplugintest/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_MACOSX OR IS_LINUX)\n    mayaUsd_init_rpath(rpath \"testplugins\")\n\n    mayaUsd_add_rpath(rpath \"../lib\")\n    if(BUILD_TESTS)\n        mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/lib/gtest\")\n    endif()\n    mayaUsd_add_rpath(rpath \"${MAYA_LOCATION}/lib\")\n    mayaUsd_add_rpath(rpath \"${CMAKE_INSTALL_PREFIX}/lib\")\n\n    if(DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../${MAYAUSD_TO_USD_RELATIVE_PATH}/lib\")\n    elseif(DEFINED PXR_USD_LOCATION)\n        mayaUsd_add_rpath(rpath \"${PXR_USD_LOCATION}/lib\")\n    endif()\n    if(IS_MACOSX AND DEFINED MAYAUSD_TO_USD_RELATIVE_PATH)\n        mayaUsd_add_rpath(rpath \"../../../../../Maya.app/Contents/MacOS\")\n    endif()\n    mayaUsd_install_rpath(rpath ${TARGET_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Include Subdirectory in CMake Project\nDESCRIPTION: This CMake command adds the specified directory (`AL_USDMaya`) to the build. CMake will look for a `CMakeLists.txt` file in that subdirectory and process it as part of the current project.  This allows modularizing the project structure.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(AL_USDMaya)\n```\n\n----------------------------------------\n\nTITLE: Querying Available Debug Notices in MEL/C++\nDESCRIPTION: This code snippet demonstrates how to query the list of available debug notices using the AL_usdmaya_UsdDebugCommand in MEL. The result is printed to the script editor.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/docs/developer.md#_snippet_13\n\nLANGUAGE: MEL\nCODE:\n```\nprint `AL_usdmaya_UsdDebugCommand -ls`;\n```\n\n----------------------------------------\n\nTITLE: Promote Headers CMake\nDESCRIPTION: This CMake snippet uses a custom function `mayaUsd_promoteHeaderList` to manage and organize the header files specified in the `HEADERS` variable. The function helps to structure the header files within the project's include directories, based on the project name and a subdirectory named `undo`. This promotes proper code organization and maintainability.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/undo/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nmayaUsd_promoteHeaderList(HEADERS ${HEADERS} BASEDIR ${PROJECT_NAME} SUBDIR undo)\n```\n\n----------------------------------------\n\nTITLE: CMake Add pxrUsdPreviewSurface\nDESCRIPTION: Adds the 'pxrUsdPreviewSurface' subdirectory to the CMake build process. This suggests a module related to the Pixar USD Preview Surface shader. This allows the module to be built as part of the overall project.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(pxrUsdPreviewSurface)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory\nDESCRIPTION: This snippet adds the subdirectory 'trf' to the build process. This likely includes another CMakeLists.txt file in the 'trf' directory to define its own build rules.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(trf)\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Info File (usdTestUsdPlugin)\nDESCRIPTION: Copies and configures the `plugInfoUsd.json` file to `USD/plugInfo.json` in the binary directory. This file contains the plugin metadata.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/plugInfoUsd.json\"\n               \"${CMAKE_CURRENT_BINARY_DIR}/USD/plugInfo.json\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Number Variables\nDESCRIPTION: This snippet defines variables to store build-related information, such as the build number, Git commit hash, and Git branch. These variables are used to report version information about the build.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MAYAUSD_BUILD_NUMBER \"0\" CACHE STRING \"Build number corresponding to this build.\")\n\n# Git commit hash corresponding to this build\n#\n# This is used to report version information of the Git commit has that\n# corresponds to a build. When unset, the default value DEVBLD is used\n# instead as this usually corresponds to a developers local build.\nset(MAYAUSD_GIT_COMMIT \"DEVBLD\" CACHE STRING \"Git commit hash corresponding to this build.\")\n\n# Git branch corresponding to this build\n#\n# This is used to report version information about the Git branch of a\n# build. When unset, the default value DEVBR is used instead as this\n# usually corresponds to developers local builds.\nset(MAYAUSD_GIT_BRANCH \"DEVBR\" CACHE STRING \"Change set identifier corresponding to this build.\")\n\n# MayaUsd cut-id\n\n# This is used to distinguish daily builds from one another. It is a\n# usually a combination of the date & git commit hash.\nset(MAYAUSD_CUT_ID \"DEVBLD\" CACHE STRING \"MayaUsd cut-id corresponding to this build.\")\n```\n\n----------------------------------------\n\nTITLE: Include Guard C++\nDESCRIPTION: This code snippet demonstrates the use of include guards to prevent multiple inclusions of header files, which can cause compilation errors.  It defines a preprocessor macro based on the file name to ensure that the header's contents are only processed once.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/codingGuidelines.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n// file foobar.h:\n#ifndef LIBRARY_FOOBAR_H\n#define LIBRARY_FOOBAR_H\n// … declarations …\n#endif // LIBRARY_FOOBAR_H\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files\nDESCRIPTION: This snippet defines the header files used in the project.  These headers are not directly used by CMake to build anything, it looks like the intent is for installation purposes, but is commented out later.  This section simply defines a list of headers.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/lookdevXUsd/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    Export.h\n    LookdevXUsd.h\n    UsdCapabilityHandler.h\n    UsdClipboardHandler.h\n    UsdComponentConnections.h\n    UsdConnectionCommands.h\n    UsdDebugHandler.h\n    UsdDeleteCommand.h\n    UsdExtendedAttributeHandler.h\n    UsdExtendedConnectionHandler.h\n    UsdFileHandler.h\n    UsdHierarchy.h\n    UsdHierarchyHandler.h\n    UsdLookdevHandler.h\n    UsdMaterial.h\n    UsdMaterialCommands.h\n    UsdMaterialHandler.h\n    UsdMaterialValidator.h\n    UsdSceneItemOps.h\n    UsdSceneItemOpsHandler.h\n    UsdSceneItemUI.h\n    UsdSceneItemUIHandler.h\n    UsdSoloingHandler.h\n    UsdUINodeGraphNode.h\n    UsdUINodeGraphNodeHandler.h\n    Utils.h\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Installation of PDB Files on Windows\nDESCRIPTION: This snippet conditionally installs the Program Database (PDB) file associated with the `mayaUsdAPI` library on Windows. The PDB file contains debugging information and is optional.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_WINDOWS)\n    install(FILES $<TARGET_PDB_FILE:${PROJECT_NAME}> \n        DESTINATION ${LIBRARY_INSTALL_PATH} OPTIONAL\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Library Name CMake\nDESCRIPTION: Sets the LIBRARY_NAME variable to AL_USDTransaction. This variable is used throughout the CMake script to refer to the library being built.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/usdtransaction/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIBRARY_NAME AL_USDTransaction)\n```\n\n----------------------------------------\n\nTITLE: Refreshing System Lock in Python (Non-Undoable)\nDESCRIPTION: This Python script snippet demonstrates how to refresh the system lock status of a USD layer and its sublayers using the `cmds.mayaUsdLayerEditor` command. The proxy shape path and a flag to include sublayers are specified as arguments. This command is un-doable.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/LayerLocking.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n// example: This will perform a write permission check on a layer and its sub-layers\ncmds.mayaUsdLayerEditor(topLayer.identifier, edit=True, refreshSystemLock=(proxyShapePath, 1))\n```\n\n----------------------------------------\n\nTITLE: Inline Namespace Usage C++\nDESCRIPTION: This code snippet illustrates how to properly use namespaces within inline code in header files. Fully qualified namespace names are required and using directives should be avoided. The example shows how using directives can be applied when absolutely necessary (e.g., using macros, which are not namespaced).\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/codingGuidelines.md#_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\n// In aFile.h\ninline PXR_NS::UsdPrim prim() const\n{\n    PXR_NAMESPACE_USING_DIRECTIVE\n    TF_VERIFY(fItem != nullptr);\n    return fItem->prim();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Library Name and Location (CMake)\nDESCRIPTION: Defines the name and installation location of the AL_MayaUtils library. It sets the MAYAUTILS_LIBRARY_NAME variable to \"AL_MayaUtils\" and the MAYAUTILS_LIBRARY_LOCATION variable to the installation prefix's lib directory.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/mayautils/AL/maya/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MAYAUTILS_LIBRARY_NAME \"AL_MayaUtils\")\nset(MAYAUTILS_LIBRARY_LOCATION ${AL_INSTALL_PREFIX}/lib)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory\nDESCRIPTION: Adds a subdirectory to the build process, allowing for modular organization of the project. In this case, the 'shading' subdirectory is added.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/translators/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(shading)\n```\n\n----------------------------------------\n\nTITLE: Installing Headers in CMake\nDESCRIPTION: This CMake snippet installs the specified header files (`HEADERS`) to the include directory of the installation prefix. The DESTINATION specifies the installation path as `${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/ui`, where `${CMAKE_INSTALL_PREFIX}` is the root installation directory configured during the CMake process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usd/ui/layerEditor/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES ${HEADERS}\n    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}/ui\n)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Source Files to a Target\nDESCRIPTION: Adds specified C++ source files to the target ${PROJECT_NAME} as private sources. These files are compiled into the target and are not exposed for linking by other targets. The inclusion of certain files is conditional based on whether certain UFE features are available.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/ufe/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        Global.cpp\n        MayaStagesSubject.cpp\n        MayaUsdContextOps.cpp\n        MayaUsdContextOpsHandler.cpp\n        MayaUsdObject3d.cpp\n        MayaUsdObject3dHandler.cpp\n        MayaUsdUIInfoHandler.cpp\n        ProxyShapeContextOpsHandler.cpp\n        ProxyShapeHandler.cpp\n        ProxyShapeHierarchy.cpp\n        ProxyShapeHierarchyHandler.cpp\n        UsdSceneItemOps.cpp\n        UsdSceneItemOpsHandler.cpp\n        UsdStageMap.cpp\n        UsdUIUfeObserver.cpp\n        UsdUndoDeleteCommand.cpp\n        UsdUndoDuplicateCommand.cpp\n        UsdUndoMaterialCommands.cpp\n        UsdUndoRenameCommand.cpp\n        Utils.cpp\n        moduleDeps.cpp\n)\n\nif(CMAKE_UFE_V3_FEATURES_AVAILABLE)\n    target_sources(${PROJECT_NAME}\n        PRIVATE\n            # See MayaUIInfoHandler.h comments.\n            EditAsMayaCommand.cpp\n            MayaUIInfoHandler.cpp\n            MayaUsdHierarchy.cpp\n            MayaUsdHierarchyHandler.cpp\n            MayaUsdRootChildHierarchy.cpp\n            PulledObjectHierarchy.cpp\n            PulledObjectHierarchyHandler.cpp\n            UsdPathMappingHandler.cpp\n    )\nendif()\n\nif (UFE_LIGHTS_SUPPORT)\n    target_sources(${PROJECT_NAME}\n        PRIVATE\n            UsdLight.cpp\n            UsdLightHandler.cpp\n    )\nendif()\n\nif (UFE_MATERIALS_SUPPORT)\n    target_sources(${PROJECT_NAME}\n        PRIVATE\n            UsdMaterial.cpp\n            UsdMaterialHandler.cpp\n    )\nendif()\n\nif (UFE_SCENE_SEGMENT_SUPPORT)\n    target_sources(${PROJECT_NAME}\n    PRIVATE\n        ProxyShapeSceneSegmentHandler.cpp\n    )\nendif()\n\nif (v4_BatchOps IN_LIST UFE_PREVIEW_FEATURES)\n    target_sources(${PROJECT_NAME}\n    PRIVATE\n        UsdBatchOpsHandler.cpp\n        UsdUndoDuplicateSelectionCommand.cpp\n    )\nendif()\n\nif(CodeWrapperHandler IN_LIST UFE_PREVIEW_FEATURES)\n    target_sources(${PROJECT_NAME}\n        PRIVATE\n        UsdCodeWrapperHandler.cpp\n    )\nendif()\n\nif(UFE_CAMERAHANDLER_HAS_FINDALL)\n    target_sources(${PROJECT_NAME}\n        PRIVATE\n            ProxyShapeCameraHandler.cpp\n    )\nendif()\n\nif(CMAKE_UFE_V4_FEATURES_AVAILABLE)\n    target_sources(${PROJECT_NAME}\n        PRIVATE\n            UsdShaderNodeDef.cpp\n            UsdShaderNodeDefHandler.cpp\n            UsdUndoCreateFromNodeDefCommand.cpp\n            UsdConnections.cpp\n            UsdConnectionHandler.cpp\n            UsdUINodeGraphNode.cpp\n            UsdUINodeGraphNodeHandler.cpp\n            UsdUndoConnectionCommands.cpp\n            UsdUndoCreateStageWithNewLayerCommand.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Set Compile Definitions and Target Sources (USD Backported MX39 OpenPBR)\nDESCRIPTION: Adds compile definitions and source files if USD has backported MaterialX 1.39 OpenPBR features. Includes a Maya closure source code node.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/MaterialXGenOgsXml/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(USD_HAS_BACKPORTED_MX39_OPENPBR)\ntarget_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n    USD_HAS_BACKPORTED_MX39_OPENPBR\n    )\ntarget_sources(${PROJECT_NAME} \n    PRIVATE\n        Nodes/MayaClosureSourceCodeNode.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Boost Version String Comparison CMake\nDESCRIPTION: Checks the Boost version string and sets a version comparison string (boost_1_70_0_ver_string).  This is done to handle inconsistencies in how Boost version is reported across different CMake and Boost versions.  Allows for version comparisons later on.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/lib/AL_USDMaya/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nif(${Boost_VERSION} MATCHES \"^([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)$\")\n    set(boost_1_70_0_ver_string \"1.70.0\")\nelse()\n    set(boost_1_70_0_ver_string \"107000\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Invalid Include Guard C++\nDESCRIPTION: This code snippet demonstrates examples of invalid include guards that use reserved identifiers (underscore followed by uppercase or double underscore), which should be avoided. Using these reserved identifiers can lead to undefined behavior.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/codingGuidelines.md#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// file foobar.h:\n#ifndef __LIBRARY_FOOBAR_H\n#define __LIBRARY_FOOBAR_H\n// … declarations …\n#endif // __LIBRARY_FOOBAR_H\n\n// file foobar2.h:\n#ifndef _LIBRARY_FOOBAR2_H\n#define _LIBRARY_FOOBAR2_H\n// … declarations …\n#endif // _LIBRARY_FOOBAR2_H\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory using CMake\nDESCRIPTION: This CMake command adds the specified subdirectory ('lib') to the build process. CMake will then process the CMakeLists.txt file within the 'lib' directory, effectively including it in the project build. No specific dependencies are required beyond CMake.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(lib)\n```\n\n----------------------------------------\n\nTITLE: Configure Site-Specific PlugInfo CMake\nDESCRIPTION: Configures CMake to copy and potentially modify the plugInfoSiteSpecificConfig.json file, creating plugInfo.json in the SiteSpecificConfig directory within the build directory. This configuration is likely used to define site-specific settings for the Maya-USD plugin.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/usd/plugin/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/plugInfoSiteSpecificConfig.json\"\n               \"${CMAKE_CURRENT_BINARY_DIR}/SiteSpecificConfig/plugInfo.json\"\n)\n```\n\n----------------------------------------\n\nTITLE: Function Name Example C++\nDESCRIPTION: This code snippet demonstrates the naming convention for functions and methods within the maya-usd project. Functions should be named using lowerCamelCase.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/codingGuidelines.md#_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nMString name() const override;\nvoid registerExitCallback();\n```\n\n----------------------------------------\n\nTITLE: Defining Compiler Configurations for Maya USD API\nDESCRIPTION: This snippet defines compiler definitions for the `mayaUsdAPI` library. It sets preprocessor macros for debugging (BOOST) and export/package information. It includes conditional definitions based on the build type, MaterialX build, and OS (macOS, Linux, Windows).\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${PROJECT_NAME} \n    PUBLIC\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_DEBUG_PYTHON>\n        $<$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:BOOST_LINKING_PYTHON>\n    PRIVATE\n        MAYAUSD_API_EXPORT\n        MFB_PACKAGE_NAME=\"${PROJECT_NAME}\"\n        MFB_ALT_PACKAGE_NAME=\"${PROJECT_NAME}\"\n        MFB_PACKAGE_MODULE=\"${PROJECT_NAME}\"\n        $<$<BOOL:${CMAKE_WANT_MATERIALX_BUILD}>:WANT_MATERIALX_BUILD>\n        $<$<BOOL:${IS_MACOSX}>:OSMac_>\n        $<$<BOOL:${IS_LINUX}>:LINUX>\n        # this flag is needed when building for Maya\n        $<$<BOOL:${IS_WINDOWS}>:WIN32>\n)\n```\n\n----------------------------------------\n\nTITLE: Adding MaterialX Tests\nDESCRIPTION: This snippet configures and adds tests related to MaterialX rendering. It defines environment variables required for MaterialX tests, including paths to Maya plugins, libraries, and MaterialX versions.  It also sets a CTest label for filtering.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/test/lib/mayaUsd/render/vp2RenderDelegate/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_WANT_MATERIALX_BUILD)\n    # We want modern OCIO for the MaterialX test:\n    mayaUsd_get_unittest_target(target testVP2RenderDelegateMaterialX.py)\n    mayaUsd_add_test(${target}\n        INTERACTIVE\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        PYTHON_SCRIPT testVP2RenderDelegateMaterialX.py\n        ENV\n            \"MAYA_PLUG_IN_PATH=${CMAKE_INSTALL_PREFIX}/lib/maya\"\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n            \"MAYA_LIGHTAPI_VERSION=${MAYA_LIGHTAPI_VERSION}\"\n            \"MATERIALX_VERSION=${MaterialX_VERSION}\"\n            \"MAYA_HAS_COLOR_MANAGEMENT_SUPPORT_API=${MAYA_HAS_COLOR_MANAGEMENT_SUPPORT_API}\"\n            \"MAYAUSD_EXPORT_EXPANDED_COLORSPACE_ATTRIBUTE=1\"\n            \"USD_HAS_MX_OPENPBR_SURFACE=${USD_HAS_MX_OPENPBR_SURFACE}\"\n            # Maya uses a very old version of GLEW, so we need support for\n            # pre-loading a newer version from elsewhere.\n            \"LD_PRELOAD=${ADDITIONAL_LD_PRELOAD}\"\n\n            # Legacy lambert tests will force the use of the lamber fallback shaders\n            \"MAYAUSD_VP2_USE_LAMBERT_FALLBACK=true\"\n    )\n\n    # Assign a CTest label to these tests for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS vp2RenderDelegate)\n\n    # Test MaterialX deactivation:\n    mayaUsd_get_unittest_target(target testVP2RenderDelegateNoMaterialX.py)\n    mayaUsd_add_test(${target}\n        INTERACTIVE\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        PYTHON_SCRIPT testVP2RenderDelegateNoMaterialX.py\n        ENV\n            \"MAYA_PLUG_IN_PATH=${CMAKE_INSTALL_PREFIX}/lib/maya\"\n            \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n            \"MAYA_LIGHTAPI_VERSION=${MAYA_LIGHTAPI_VERSION}\"\n            \"MATERIALX_VERSION=${MaterialX_VERSION}\"\n\n            # Maya uses a very old version of GLEW, so we need support for\n            # pre-loading a newer version from elsewhere.\n            \"LD_PRELOAD=${ADDITIONAL_LD_PRELOAD}\"\n\n            # Specify we only want preview surface rendering:\n            \"MAYAUSD_VP2_USE_ONLY_PREVIEWSURFACE=1\"\n\n            # Legacy lambert tests will force the use of the lamber fallback shaders\n            \"MAYAUSD_VP2_USE_LAMBERT_FALLBACK=true\"\n    )\n\n    # Assign a CTest label to these tests for easy filtering.\n    set_property(TEST ${target} APPEND PROPERTY LABELS vp2RenderDelegate)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Target Sources for Project\nDESCRIPTION: Specifies the source files used to build the main project library. This ensures that the compiler knows which source files to include in the compilation process.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsdAPI/python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${PROJECT_NAME}\n    PRIVATE\n        moduleDeps.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Set Environment Variables for Testing USD Maya\nDESCRIPTION: Sets environment variables required for running the USD Maya plugin tests. These variables include the Maya plugin path, script path, and settings to disable certain Maya features like Customer Involvement Program (CIP) and Crash Error Reporting (CER).  It also sets the Maya application directory to a temporary location for testing with a default profile. It also disables the standalone at exit functionality to ensure mayapy exit codes are correctly reported.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/maya/lib/usdMaya/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_INSTALL_PREFIX \"${PXR_INSTALL_PREFIX}\")\nset(TEST_ENV \n    MAYA_PLUG_IN_PATH=${TEST_INSTALL_PREFIX}/maya/plugin\n    MAYA_SCRIPT_PATH=${TEST_INSTALL_PREFIX}/maya/lib/usd/usdMaya/resources\n    MAYA_DISABLE_CIP=1\n    MAYA_DISABLE_CER=1\n    MAYA_NO_MORE_ASSERT=1\n    MAYA_NO_STANDALONE_ATEXIT=1\n    MAYA_APP_DIR=<PXR_TEST_DIR>/maya_profile\n)\n```\n\n----------------------------------------\n\nTITLE: Class Data Member Name Example C++\nDESCRIPTION: This code snippet illustrates the naming convention for non-static data members of classes/structs in the maya-usd project. They are named like ordinary non-member variables with leading underscores.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/codingGuidelines.md#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nUsdMayaStageNoticeListener _stageNoticeListener;\nstd::map<UsdTimeCode, MBoundingBox> _boundingBoxCache;\n```\n\n----------------------------------------\n\nTITLE: License Notice C++\nDESCRIPTION: This code snippet shows the required Apache 2.0 licensing statement that should be included at the beginning of every file in the maya-usd project.  It specifies the terms under which the code can be used, modified, and distributed.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/codingGuidelines.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Licensed under the Apache License, Version 2.0 (the “License”);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an “AS IS” BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Define pxr_test_scripts for USD Maya\nDESCRIPTION: Defines a list of Python test scripts for the USD Maya plugin using the `pxr_test_scripts` function. These scripts test various aspects of the plugin, including USD export, import, and assembly functionality. Some tests are conditionally included based on dependencies on Maya scene assembly features.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/pxr/maya/lib/usdMaya/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxr_test_scripts(\n        testenv/testUsdExportAssembly.py\n        testenv/testUsdExportAssemblyEdits.py\n        # testUsdExportPackage input file PackageTest.ma has a requirement on\n        # pxrUsdReferenceAssembly, and therefore cannot be moved to the core.\n        testenv/testUsdExportPackage.py\n        # testUsdExportPointInstancer uses MFnAssembly (Maya scene assembly\n        # function set), and therefore cannot be moved to the core.\n        testenv/testUsdExportPointInstancer.py\n        testenv/testUsdImportAsAssemblies.py\n        testenv/testUsdImportNestedAssemblyAnimation.py\n        testenv/testUsdMayaGetVariantSetSelections.py\n        testenv/testUsdMayaModelKindProcessor.py\n        testenv/testUsdMayaReferenceAssemblyEdits.py\n        testenv/testUsdReferenceAssemblyChangeRepresentations.py\n        testenv/testUsdReferenceAssemblySelection.py\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Header Appending (UFE V4)\nDESCRIPTION: This snippet conditionally appends the header UsdShaderAttributeDef.h, UsdShaderAttributeHolder.h, and UsdUndoAttributesCommands.h to the HEADERS list if CMAKE_UFE_V4_FEATURES_AVAILABLE is defined.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/ufe/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_UFE_V4_FEATURES_AVAILABLE)\n    list(APPEND HEADERS\n        UsdShaderAttributeDef.h\n        UsdShaderAttributeHolder.h\n        UsdUndoAttributesCommands.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Include Directive - Public Headers C++\nDESCRIPTION: This code snippet illustrates how to include public header files (both from within and outside the project) using angle brackets.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/codingGuidelines.md#_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\n#include <pxr/base/tf/stringUtils.h>\n#include <mayaUsd/nodes/stageData.h>\n```\n\n----------------------------------------\n\nTITLE: Defining and Building the AL_EventSystem Library in CMake\nDESCRIPTION: This snippet defines the AL_EventSystem library as a shared library, specifying the source files to be included. It also applies compiler configurations using `mayaUsd_compile_config` and defines preprocessor definitions for exporting symbols from the library. The necessary include directories are specified to allow the code to compile.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/utils/AL/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(${EVENTS_LIBRARY_NAME}\n    SHARED\n        ${utils_source}\n)\n\n# compiler configuration\nmayaUsd_compile_config(${EVENTS_LIBRARY_NAME})\n\ntarget_compile_definitions(${EVENTS_LIBRARY_NAME}\n    PRIVATE\n        AL_EVENT_EXPORT\n)\n\ntarget_include_directories(${EVENTS_LIBRARY_NAME}\n    PUBLIC \n    ${EVENTS_INCLUDE_LOCATION}\n)\n```\n\n----------------------------------------\n\nTITLE: Target Sources Definition (Orphaned Nodes)\nDESCRIPTION: Conditionally defines additional source files for the ${PROJECT_NAME} target and compile definitions if UFE_TRIE_NODE_HAS_CHILDREN_COMPONENTS_ACCESSOR is true. This adds orphaned node manager related source files and a compile definition. These files are added as private sources.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/fileio/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(UFE_TRIE_NODE_HAS_CHILDREN_COMPONENTS_ACCESSOR)\n    target_sources(${PROJECT_NAME}\n        PRIVATE\n            orphanedNodesManager.cpp\n            orphanedNodesManagerIO.cpp\n    )\n\n    target_compile_definitions(${PROJECT_NAME}\n    PRIVATE\n        HAS_ORPHANED_NODES_MANAGER=1\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Promote Header List (CMake)\nDESCRIPTION: Promotes the header files to a specific subdirectory within the project.  The `mayaUsd_promoteHeaderList` custom function moves the headers to the `render/pxrUsdMayaGL` subdirectory.  This helps organize the project's header files and maintain a consistent directory structure.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/mayaUsd/render/pxrUsdMayaGL/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_promoteHeaderList(HEADERS ${HEADERS} SUBDIR render/pxrUsdMayaGL)\n```\n\n----------------------------------------\n\nTITLE: Building Maya USD Test with CMake\nDESCRIPTION: This snippet defines a test named `TestAdditionalTranslators` using the `mayaUsd_add_test` function in CMake. It specifies the Python module `testTranslators` to be executed as part of the test and sets the environment variables `PXR_OVERRIDE_PLUGINPATH_NAME` and `LD_LIBRARY_PATH` to include custom plugin and library paths, respectively.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/plugin/al/translators/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nmayaUsd_add_test(TestAdditionalTranslators\n    PYTHON_MODULE testTranslators\n    ENV\n        \"${PXR_OVERRIDE_PLUGINPATH_NAME}=${ADDITIONAL_PXR_PLUGINPATH_NAME}\"\n        \"LD_LIBRARY_PATH=${ADDITIONAL_LD_LIBRARY_PATH}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing TreeView Icons with CMake\nDESCRIPTION: This CMake code installs a series of icons for the Maya-USD plugin. It iterates through a list of icon names, installing the 100px version with a renamed base name (removing the \"_100\") and the 150px and 200px versions with their original names to the specified destination directory under the installation prefix.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/lib/usdUfe/resources/icons/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TREEVIEW_ICONS\n    BlendShape\n    Camera\n    Capsule\n    CompArcBadge\n    CompArcBadgeV\n    Cone\n    Cube\n    Cylinder\n    Def\n    GeomSubset\n    LightFilter\n    LightPortal\n    Material\n    Mesh\n    NodeGraph\n    NurbsPatch\n    PluginLight\n    PointInstancer\n    Points\n    Scope\n    Shader\n    SkelAnimation\n    Skeleton\n    SkelRoot\n    Sphere\n    UsdGeomCurves\n    UsdGeomXformable\n    UsdLuxBoundableLightBase\n    UsdLuxNonboundableLightBase\n    UsdTyped\n    Volume\n)\nforeach(ICON_BASE ${TREEVIEW_ICONS})\n    # The _100.png files need to be installed without the _100. This is the\n    # base icon name that is used. A DCC (such as Maya) will automatically\n    # choose the _150/_200 image if neeeded.\n    install(FILES \"out_USD_${ICON_BASE}_100.png\"\n        DESTINATION \"${CMAKE_INSTALL_PREFIX}/lib/icons\"\n        RENAME \"out_USD_${ICON_BASE}.png\"\n    )\n    install(FILES \"out_USD_${ICON_BASE}_150.png\" \"out_USD_${ICON_BASE}_200.png\"\n        DESTINATION \"${CMAKE_INSTALL_PREFIX}/lib/icons\"\n    )\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Enumerator Name Example C++\nDESCRIPTION: This code snippet demonstrates the naming convention for enumerators (both scoped and unscoped) in the maya-usd project. Enumerators are named like constants (i.e., kEnumName). The enumeration name is mixed case because it's a type.\nSOURCE: https://github.com/autodesk/maya-usd/blob/dev/doc/codingGuidelines.md#_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\nenum class StringPolicy\n{\n  kStringOptional,\n  kStringMustHaveValue\n};\n```"
  }
]