[
  {
    "owner": "getditto",
    "repo": "dittoswifttools",
    "content": "TITLE: Implementing Data Browser in SwiftUI with Ditto\nDESCRIPTION: Creates a SwiftUI view that displays all collections, documents, and properties in the Ditto database. Allows real-time observation of changes to collections and documents.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport DittoDataBrowser\n\nstruct DataBrowserView: View {\n    var body: some View {\n       DataBrowser(ditto: DittoManager.shared.ditto)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Presence Viewer in SwiftUI with Ditto\nDESCRIPTION: Creates a SwiftUI view that displays a mesh graph of connected Ditto peers. Requires passing a Ditto instance to the PresenceView to visualize peer connections and transport types.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport DittoPresenceViewer\n\nstruct PresenceViewer: View{\n\n    var body: some View {\n        PresenceView(ditto: DittoManager.shared.ditto)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Presence Degradation View in SwiftUI with Ditto\nDESCRIPTION: Creates a SwiftUI view that tracks the status of the Ditto mesh network. It monitors the minimum required connected peers and provides a callback function for monitoring mesh status.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nimport DittoPresenceDegradation\n\nstruct PresenceDegradationViewer: View {\n    \n    var body: some View {\n        PresenceDegradationView(ditto: <diito>) { expectedPeers, remotePeers, settings in\n            //handle data\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ditto Heartbeat\nDESCRIPTION: Defines the DittoHeartbeatConfig struct used to configure the Heartbeat feature, including device ID, interval, metadata, and health metric providers.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\npublic struct DittoHeartbeatConfig {\n    public var id: String\n    public var secondsInterval: Int\n    public var metadata: [String: Any]?\n    public var healthMetricProviders: [HealthMetricProvider]\n    public var publishToDittoCollection: Bool\n\n    public init(id: String,\n                secondsInterval: Int,\n                metadata: [String : Any]? = nil,\n                healthMetricProviders: [HealthMetricProvider] = [],\n                publishToDittoCollection: Bool = true) {\n        self.id = id\n        self.secondsInterval = secondsInterval\n        self.metadata = metadata\n        self.healthMetricProviders = healthMetricProviders\n        self.publishToDittoCollection = publishToDittoCollection\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Peers List View in SwiftUI with Ditto\nDESCRIPTION: Creates a SwiftUI view that displays a list of local and connected remote peers within the Ditto mesh network. Shows transport connections in list form.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport DittoSwift\n\nstruct PeersListViewer: View {\n\n   var body: some View {\n       PeersListView(ditto: DittoManager.shared.ditto)\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Permissions Health in SwiftUI\nDESCRIPTION: Demonstrates how to use the PermissionsHealth view in a SwiftUI application to display the status of Ditto's required services and permissions.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nimport DittoPermissionsHealth\n\nstruct PermissionsHealthViewer: View {\n    var body: some View {\n        PermissionsHealth()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Disk Usage View in SwiftUI with Ditto\nDESCRIPTION: Creates a SwiftUI view that displays Ditto's file space usage with the ability to export this data. Requires passing a Ditto instance to DittoDiskUsageView.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport DittoDiskUsage\n\nstruct DiskUsageViewer: View {\n    var body: some View {\n        DittoDiskUsageView(ditto: DittoManager.shared.ditto)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging Details View in SwiftUI with Ditto\nDESCRIPTION: Creates a SwiftUI view that allows runtime selection of Ditto logging levels and toggling logging on/off. Settings are automatically persisted using UserDefaults.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nimport DittoExportLogs\nimport DittoSwift\nimport SwiftUI\n\nstruct LoggingDetailsViewer: View {\n    var body: some View {\n        LoggingDetailsView(ditto: <ditto instance>)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Heartbeat Data\nDESCRIPTION: Demonstrates how to create a HeartbeatVM object and start the heartbeat to access the data in the callback.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\nvar heartBeatVm = HeartbeatVM(ditto: DittoManager.shared.ditto!)\nheartBeatVm.startHeartbeat(config: DittoHeartbeatConfig(secondsInterval: Int, metadata: metadata: [String:Any]? )) { heartbeatInfo in\n        //use data\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Heartbeat in SwiftUI\nDESCRIPTION: Demonstrates how to use the HeartbeatView in a SwiftUI application, passing in the Ditto instance and heartbeat configuration.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nimport DittoHeartbeat\n\nstruct HeartbeatViewer: View {\n    var body: some View {\n        HeartbeatView(ditto: <ditto>, config: <heartbeatConfig>)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Presenting Presence Viewer in UIKit with Ditto\nDESCRIPTION: Shows how to present the DittoPresenceView in a UIKit application by accessing its viewController property. The example demonstrates integration within a UITableView selection handler.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n    present(DittoPresenceView(ditto: DittoManager.shared.ditto).viewController, animated: true) {\n        if let selected = tableView.indexPathForSelectedRow {\n            tableView.deselectRow(at: selected, animated: true)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Presenting Data Browser in UIKit with UIHostingController\nDESCRIPTION: Demonstrates how to present the DataBrowser in a UIKit application by wrapping it in a UIHostingController to bridge the SwiftUI component to UIKit.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nlet vc = UIHostingController(rootView: DataBrowser(ditto: DittoManager.shared.ditto))\n\npresent(vc, animated: true)\n```\n\n----------------------------------------\n\nTITLE: Presenting Peers List View in UIKit with UIHostingController\nDESCRIPTION: Demonstrates how to present the PeersListView in a UIKit application by wrapping it in a UIHostingController to bridge between SwiftUI and UIKit.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet vc = UIHostingController(rootView: PeersListView(ditto: DittoManager.shared.ditto))\n\npresent(vc, animated: true)\n```\n\n----------------------------------------\n\nTITLE: Presenting Presence Degradation View in UIKit with UIHostingController\nDESCRIPTION: Demonstrates how to present the PresenceDegradationView in a UIKit application by wrapping it in a UIHostingController to bridge the SwiftUI component to UIKit.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nlet vc = UIHostingController(rootView: PresenceDegradationView(ditto: <diito>))\n\npresent(vc, animated: true)\n```\n\n----------------------------------------\n\nTITLE: Implementing Heartbeat in UIKit\nDESCRIPTION: Shows how to present the HeartbeatView in a UIKit application using UIHostingController.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\nlet vc = UIHostingController(rootView: HeartbeatView(ditto: <ditto>, config: <heartbeatConfig>))\n```\n\n----------------------------------------\n\nTITLE: Implementing Permissions Health in UIKit\nDESCRIPTION: Shows how to present the PermissionsHealth view in a UIKit application using UIHostingController.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nlet vc = UIHostingController(rootView: PermissionsHealth())\n\npresent(vc, animated: true)\n```\n\n----------------------------------------\n\nTITLE: Presenting Export Data View as a Sheet in SwiftUI\nDESCRIPTION: Shows how to present the ExportData view as a modal sheet in SwiftUI. This component allows exporting the Ditto store directory as a zip file.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n.sheet(isPresented: $isPresented) {\n    ExportData(ditto: ditto)\n}\n```\n\n----------------------------------------\n\nTITLE: Presenting Export Logs View as a Sheet in SwiftUI\nDESCRIPTION: Shows how to present the ExportLogs view as a modal sheet in SwiftUI. The view provides functionality to export application logs as a zip file.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n.sheet(isPresented: $isPresented) {\n    ExportLogs()\n}\n```\n\n----------------------------------------\n\nTITLE: Presenting Export Data View in UIKit with UIHostingController\nDESCRIPTION: Demonstrates how to present the ExportData view in a UIKit application by wrapping it in a UIHostingController to bridge the SwiftUI component to UIKit.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nlet vc = UIHostingController(rootView: ExportData(ditto: ditto))\n\npresent(vc, animated: true)\n```\n\n----------------------------------------\n\nTITLE: Presenting Export Logs View in UIKit with UIHostingController\nDESCRIPTION: Demonstrates how to present the ExportLogs view in a UIKit application by wrapping it in a UIHostingController to bridge the SwiftUI component to UIKit.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nlet vc = UIHostingController(rootView: ExportLogs())\n\npresent(vc, animated: true)\n```\n\n----------------------------------------\n\nTITLE: Presenting Disk Usage View in UIKit with UIHostingController\nDESCRIPTION: Shows how to present the DittoDiskUsageView in a UIKit application by wrapping it in a UIHostingController to bridge the SwiftUI component to UIKit.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet vc = UIHostingController(rootView: DittoDiskUsageView(ditto: DittoManager.shared.ditto))\n\npresent(vc, animated: true)\n```\n\n----------------------------------------\n\nTITLE: Adding Logging Details View to Navigation in SwiftUI\nDESCRIPTION: Shows how to embed the LoggingDetailsView into a navigation hierarchy in SwiftUI with a navigation title. Provides access to log level configuration.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nNavigationView {\n    VStack {\n        LoggingDetailsView()\n    }\n    .navigationTitle(\"Logging Settings\")\n}\n```\n\n----------------------------------------\n\nTITLE: Presenting Logging Details View as a Sheet in SwiftUI\nDESCRIPTION: Demonstrates how to present the LoggingDetailsView as a modal sheet in SwiftUI. The view will appear when the isPresented binding is true.\nSOURCE: https://github.com/getditto/dittoswifttools/blob/main/README.md#2025-04-19_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n.sheet(isPresented: $isPresented) {\n    LoggingDetailsView()\n}\n```"
  }
]