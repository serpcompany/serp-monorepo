[
  {
    "owner": "kubernetes-sigs",
    "repo": "cluster-api",
    "content": "TITLE: Install Calico CNI using Manifest (Bash)\nDESCRIPTION: Applies the Calico CNI manifest (version v3.29.1 in this example) to the Kubernetes cluster using `kubectl create -f`. This step is necessary when the default CNI (like kindnet) has been disabled during cluster creation, as required for the KubeVirt setup.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f  https://raw.githubusercontent.com/projectcalico/calico/v3.29.1/manifests/calico.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes Cluster Configuration with clusterctl\nDESCRIPTION: This command generates a YAML file named 'my-cluster.yaml' with predefined Cluster API objects for a Kubernetes cluster. It specifies the Kubernetes version, number of control plane and worker machines.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/generate-cluster.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl generate cluster my-cluster --kubernetes-version v1.28.0 --control-plane-machine-count=3 --worker-machine-count=3 > my-cluster.yaml\n```\n\n----------------------------------------\n\nTITLE: Querying Cluster State with kubectl\nDESCRIPTION: This snippet uses kubectl to retrieve the current state of the ControlPlane and MachineDeployments within a Kubernetes cluster. This step is crucial for operators to verify the initial setup and track changes after updates.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/operate-cluster.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get kubeadmcontrolplane,machinedeployments\n```\n\n----------------------------------------\n\nTITLE: Generating Configuration Files with clusterctl generate yaml Command in Bash\nDESCRIPTION: This code snippet demonstrates various usage examples of the 'clusterctl generate yaml' command. It shows how to generate configuration files from different sources, list variables, and process input from stdin.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/generate-yaml.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Generates a configuration file with variable values using a template from a\n# specific URL as well as a GitHub URL.\nclusterctl generate yaml --from https://github.com/foo-org/foo-repository/blob/main/cluster-template.yaml\n\nclusterctl generate yaml --from https://foo.bar/cluster-template.yaml\n\n# Generates a configuration file with variable values using\n# a template stored locally.\nclusterctl generate yaml  --from ~/workspace/cluster-template.yaml\n\n# Prints list of variables used in the local template\nclusterctl generate yaml --from ~/workspace/cluster-template.yaml --list-variables\n\n# Prints list of variables from template passed in via stdin\ncat ~/workspace/cluster-template.yaml | clusterctl generate yaml --from - --list-variables\n\n# Default behavior for this sub-command is to read from stdin.\n# Generate configuration from stdin\ncat ~/workspace/cluster-template.yaml | clusterctl generate yaml\n```\n\n----------------------------------------\n\nTITLE: Set KUBECONFIG for Existing Cluster (Bash)\nDESCRIPTION: Sets the KUBECONFIG environment variable to point to the configuration file of an existing Kubernetes cluster, which will be used as the management cluster for Cluster API. This is intended for production scenarios where a persistent, backed-up cluster is required.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport KUBECONFIG=<...>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cluster Kubeconfig\nDESCRIPTION: Commands for retrieving the workload cluster's kubeconfig file using either clusterctl or kind.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_78\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl get kubeconfig capi-quickstart > capi-quickstart.kubeconfig\n```\n\nLANGUAGE: bash\nCODE:\n```\nkind get kubeconfig --name capi-quickstart > capi-quickstart.kubeconfig\n```\n\n----------------------------------------\n\nTITLE: Creating a Cluster with MachinePool Workers using ClusterClass in YAML\nDESCRIPTION: This YAML snippet illustrates defining MachinePools within a Cluster's topology specification when using a ClusterClass that supports them. Under `spec.topology.workers`, a `machinePools` array is defined. It specifies a MachinePool named 'mp-0' using the 'default-worker' class, setting the replica count to 4, and configuring metadata and a failure domain. This demonstrates how to instantiate MachinePool workers via the Cluster topology.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: Cluster\nmetadata:\n  name: my-docker-cluster\nspec:\n  topology:\n    workers:\n      machinePools:\n      - class: default-worker\n        name: mp-0\n        replicas: 4\n        metadata:\n          labels:\n            mpLabel: mpLabelValue\n          annotations:\n            mpAnnotation: mpAnnotationValue\n        failureDomain: region\n```\n\n----------------------------------------\n\nTITLE: Describing Kubernetes Cluster Resources\nDESCRIPTION: This snippet shows how to use the 'clusterctl describe' command to verify the status of cluster resources deployed using Cluster API. Dependencies include 'clusterctl' and a functional Kubernetes cluster. Key outputs are the readiness state and any warnings or errors that may indicate issues with the cluster setup.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/troubleshooting.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nclusterctl describe cluster capi-quickstart\nNAME                                                           READY  SEVERITY  REASON                       SINCE  MESSAGE\nCluster/capi-quickstart                                        True                                          46m\n├─ClusterInfrastructure - DockerCluster/capi-quickstart-94r9d  True                                          48m\n├─ControlPlane - KubeadmControlPlane/capi-quickstart-6487w     True                                          46m\n│ └─3 Machines...                                              True                                          47m    See capi-quickstart-6487w-d5lkp, capi-quickstart-6487w-mpmkq, ...\n└─Workers\n  └─MachineDeployment/capi-quickstart-md-0-d6dn6               False  Warning   WaitingForAvailableMachines  48m    Minimum availability requires 3 replicas, current 0 available\n    └─3 Machines...                                            True                                          47m    See capi-quickstart-md-0-d6dn6-584ff97cb7-kr7bj, capi-quickstart-md-0-d6dn6-584ff97cb7-s6cbf, ...\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials and Initializing Cluster API\nDESCRIPTION: Sets up AWS credentials, creates necessary IAM resources, and initializes the management cluster with the AWS infrastructure provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_REGION=us-east-1 # This is used to help encode your environment variables\nexport AWS_ACCESS_KEY_ID=<your-access-key>\nexport AWS_SECRET_ACCESS_KEY=<your-secret-access-key>\nexport AWS_SESSION_TOKEN=<session-token> # If you are using Multi-Factor Auth.\n\n# The clusterawsadm utility takes the credentials that you set as environment\n# variables and uses them to create a CloudFormation stack in your AWS account\n# with the correct IAM resources.\nclusterawsadm bootstrap iam create-cloudformation-stack\n\n# Create the base64 encoded credentials using clusterawsadm.\n# This command uses your environment variables and encodes\n# them in a value to be stored in a Kubernetes Secret.\nexport AWS_B64ENCODED_CREDENTIALS=$(clusterawsadm bootstrap credentials encode-as-profile)\n\n# Finally, initialize the management cluster\nclusterctl init --infrastructure aws\n```\n\n----------------------------------------\n\nTITLE: Writing Isolated Test Cases for Cluster API using envtest in Golang\nDESCRIPTION: This example demonstrates how to write isolated test cases for Cluster API using envtest. It shows the creation of a test namespace, object setup, and cleanup procedures to ensure test isolation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/testing.md#2025-04-22_snippet_15\n\nLANGUAGE: golang\nCODE:\n```\nfunc TestAFunc(t *testing.T) {\n\tg := NewWithT(t)\n\t// Generate namespace with a random name starting with ns1; such namespace\n\t// will host test objects in isolation from other tests.\n\tns1, err := env.CreateNamespace(ctx, \"ns1\")\n\tg.Expect(err).ToNot(HaveOccurred())\n\tdefer func() {\n\t\t// Cleanup the test namespace\n\t\tg.Expect(env.DeleteNamespace(ctx, ns1)).To(Succeed())\n\t}()\n\n\tobj := &clusterv1.Cluster{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"test\",\n\t\t\tNamespace: ns1.Name, // Place test objects in the test namespace\n\t\t},\n\t}\n\n\t// Actual test code...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Runtime Extension Server for Cluster API in Go\nDESCRIPTION: This Go code demonstrates the setup of a minimal Runtime Extension server for Kubernetes Cluster API. It initializes runtime hooks, configures logging and command-line flags, sets up profiling, and registers extension handlers for cluster lifecycle events. Dependencies include core Cluster API packages such as \\\"sigs.k8s.io/cluster-api/exp/runtime/server\\\" and logging utilities. Required parameters are webhook port, certificate directory, and optional profiler address. The HTTPS server concurrently handles runtime hooks, is discoverable by Cluster API via the Discovery endpoint, and manages context for safe shutdown. Input is through HTTP requests following OpenAPI, and outputs are responses to runtime hooks or log messages. The code stresses secure deployment, adherence to API contracts, and robust error handling.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-extensions.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/spf13/pflag\"\n\tcliflag \"k8s.io/component-base/cli/flag\"\n\t\"k8s.io/component-base/logs\"\n\tlogsv1 \"k8s.io/component-base/logs/api/v1\"\n\t\"k8s.io/klog/v2\"\n\tctrl \"sigs.k8s.io/controller-runtime\"\n\n\truntimecatalog \"sigs.k8s.io/cluster-api/exp/runtime/catalog\"\n\truntimehooksv1 \"sigs.k8s.io/cluster-api/exp/runtime/hooks/api/v1alpha1\"\n\t\"sigs.k8s.io/cluster-api/exp/runtime/server\"\n)\n\nvar (\n\t// catalog contains all information about RuntimeHooks.\n\tcatalog = runtimecatalog.New()\n\n\t// Flags.\n\tprofilerAddress string\n\twebhookPort     int\n\twebhookCertDir  string\n\tlogOptions      = logs.NewOptions()\n)\n\nfunc init() {\n\t// Adds to the catalog all the RuntimeHooks defined in cluster API.\n\t_ = runtimehooksv1.AddToCatalog(catalog)\n}\n\n// InitFlags initializes the flags.\nfunc InitFlags(fs *pflag.FlagSet) {\n\t// Initialize logs flags using Kubernetes component-base machinery.\n\tlogsv1.AddFlags(logOptions, fs)\n\n\t// Add test-extension specific flags\n\tfs.StringVar(&profilerAddress, \"profiler-address\", \"\",\n\t\t\"Bind address to expose the pprof profiler (e.g. localhost:6060)\")\n\n\tfs.IntVar(&webhookPort, \"webhook-port\", 9443,\n\t\t\"Webhook Server port\")\n\n\tfs.StringVar(&webhookCertDir, \"webhook-cert-dir\", \"/tmp/k8s-webhook-server/serving-certs/\",\n\t\t\"Webhook cert dir.\")\n}\n\nfunc main() {\n\t// Creates a logger to be used during the main func.\n\tsetupLog := ctrl.Log.WithName(\"setup\")\n\n\t// Initialize and parse command line flags.\n\tInitFlags(pflag.CommandLine)\n\tpflag.CommandLine.SetNormalizeFunc(cliflag.WordSepNormalizeFunc)\n\tpflag.CommandLine.AddGoFlagSet(flag.CommandLine)\n\t// Set log level 2 as default.\n\tif err := pflag.CommandLine.Set(\"v\", \"2\"); err != nil {\n\t\tsetupLog.Error(err, \"Failed to set default log level\")\n\t\tos.Exit(1)\n\t}\n\tpflag.Parse()\n\n\t// Validates logs flags using Kubernetes component-base machinery and applies them\n\tif err := logsv1.ValidateAndApply(logOptions, nil); err != nil {\n\t\tsetupLog.Error(err, \"Unable to start extension\")\n\t\tos.Exit(1)\n\t}\n\n\t// Add the klog logger in the context.\n\tctrl.SetLogger(klog.Background())\n\n\t// Initialize the golang profiler server, if required.\n\tif profilerAddress != \"\" {\n\t\tklog.Infof(\"Profiler listening for requests at %s\", profilerAddress)\n\t\tgo func() {\n\t\t\tklog.Info(http.ListenAndServe(profilerAddress, nil))\n\t\t}()\n\t}\n\n\t// Create a http server for serving runtime extensions\n\twebhookServer, err := server.New(server.Options{\n\t\tCatalog: catalog,\n\t\tPort:    webhookPort,\n\t\tCertDir: webhookCertDir,\n\t})\n\tif err != nil {\n\t\tsetupLog.Error(err, \"Error creating webhook server\")\n\t\tos.Exit(1)\n\t}\n\n\t// Register extension handlers.\n\tif err := webhookServer.AddExtensionHandler(server.ExtensionHandler{\n\t\tHook:        runtimehooksv1.BeforeClusterCreate,\n\t\tName:        \"before-cluster-create\",\n\t\tHandlerFunc: DoBeforeClusterCreate,\n\t}); err != nil {\n\t\tsetupLog.Error(err, \"Error adding handler\")\n\t\tos.Exit(1)\n\t}\n\tif err := webhookServer.AddExtensionHandler(server.ExtensionHandler{\n\t\tHook:        runtimehooksv1.BeforeClusterUpgrade,\n\t\tName:        \"before-cluster-upgrade\",\n\t\tHandlerFunc: DoBeforeClusterUpgrade,\n\t}); err != nil {\n\t\tsetupLog.Error(err, \"Error adding handler\")\n\t\tos.Exit(1)\n\t}\n\n\t// Setup a context listening for SIGINT.\n\tctx := ctrl.SetupSignalHandler()\n\n\t// Start the https server.\n\tsetupLog.Info(\"Starting Runtime Extension server\")\n\tif err := webhookServer.Start(ctx); err != nil {\n\t\tsetupLog.Error(err, \"Error running webhook server\")\n\t\tos.Exit(1)\n\t}\n}\n\nfunc DoBeforeClusterCreate(ctx context.Context, request *runtimehooksv1.BeforeClusterCreateRequest, response *runtimehooksv1.BeforeClusterCreateResponse) {\n\tlog := ctrl.LoggerFrom(ctx)\n\tlog.Info(\"BeforeClusterCreate is called\")\n\t// Your implementation\n}\n\nfunc DoBeforeClusterUpgrade(ctx context.Context, request *runtimehooksv1.BeforeClusterUpgradeRequest, response *runtimehooksv1.BeforeClusterUpgradeResponse) {\n\tlog := ctrl.LoggerFrom(ctx)\n\tlog.Info(\"BeforeClusterUpgrade is called\")\n\t// Your implementation\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic ClusterClass with Docker Templates in YAML\nDESCRIPTION: This YAML snippet defines a basic ClusterClass resource named 'docker-clusterclass-v0.1.0'. It specifies template references for the control plane (KubeadmControlPlaneTemplate, DockerMachineTemplate), infrastructure (DockerClusterTemplate), and a worker MachineDeployment class ('default-worker') using KubeadmConfigTemplate and DockerMachineTemplate. This class serves as a blueprint for creating basic Docker-based Kubernetes clusters managed by Cluster API.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\nmetadata:\n  name: docker-clusterclass-v0.1.0\nspec:\n  controlPlane:\n    ref:\n      apiVersion: controlplane.cluster.x-k8s.io/v1beta1\n      kind: KubeadmControlPlaneTemplate\n      name: docker-clusterclass-v0.1.0\n      namespace: default\n    machineInfrastructure:\n      ref:\n        kind: DockerMachineTemplate\n        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n        name: docker-clusterclass-v0.1.0\n        namespace: default\n  infrastructure:\n    ref:\n      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n      kind: DockerClusterTemplate\n      name: docker-clusterclass-v0.1.0-control-plane\n      namespace: default\n  workers:\n    machineDeployments:\n    - class: default-worker\n      template:\n        bootstrap:\n          ref:\n            apiVersion: bootstrap.cluster.x-k8s.io/v1beta1\n            kind: KubeadmConfigTemplate\n            name: docker-clusterclass-v0.1.0-default-worker\n            namespace: default\n        infrastructure:\n          ref:\n            apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n            kind: DockerMachineTemplate\n            name: docker-clusterclass-v0.1.0-default-worker\n            namespace: default\n```\n\n----------------------------------------\n\nTITLE: Deleting Workload Cluster\nDESCRIPTION: This command deletes the workload cluster named 'capi-quickstart'. It's important to use this method for proper cleanup of infrastructure resources.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_91\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete cluster capi-quickstart\n```\n\n----------------------------------------\n\nTITLE: Verify Kind Cluster Status (Bash)\nDESCRIPTION: Uses `kubectl` to display information about the newly created or configured Kubernetes cluster, verifying its readiness and accessibility. This command should run successfully after creating the `kind` cluster.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl cluster-info\n```\n\n----------------------------------------\n\nTITLE: Defining Patches in ClusterClass with Variable Substitution - Kubernetes YAML\nDESCRIPTION: This YAML demonstrates a patch definition within a ClusterClass that sets the imageRepository field in a referenced KubeadmControlPlaneTemplate using a variable. The 'selector' ensures the patch targets resources of type KubeadmControlPlaneTemplate, and the 'jsonPatches' field applies an 'add' operation to the intended path, using the value of the imageRepository variable. Requires variables to be defined in the ClusterClass and templates of the referenced apiVersion/kind present.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\\nkind: ClusterClass\\nmetadata:\\n  name: docker-clusterclass-v0.1.0\\nspec:\\n  ...\\n  patches:\\n  - name: imageRepository\\n    definitions:\\n    - selector:\\n        apiVersion: controlplane.cluster.x-k8s.io/v1beta1\\n        kind: KubeadmControlPlaneTemplate\\n        matchResources:\\n          controlPlane: true\\n      jsonPatches:\\n      - op: add\\n        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository\\n        valueFrom:\\n          variable: imageRepository\n```\n\n----------------------------------------\n\nTITLE: Retrieving ClusterClass Variable Value\nDESCRIPTION: Command to get the current value of a cluster variable using kubectl jsonpath\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/operate-cluster.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get cluster capi-quickstart -o jsonpath='{.spec.topology.variables[1]}'\n```\n\n----------------------------------------\n\nTITLE: Defining MachineHealthCheck CRD for Cluster API (YAML)\nDESCRIPTION: This YAML code defines a MachineHealthCheck Custom Resource for the Cluster API, configuring selection of worker nodes, unhealthy conditions based on the node 'Ready' state, timeouts, and a maximum unhealthy threshold as a percentage. Dependencies include Kubernetes Cluster API v1alpha3 and associated CRDs installed. Required parameters are label selectors for target machines and a set of node conditions; maxUnhealthy can be specified as an integer or percentage. The CR enables automated monitoring and, optionally, auto-remediation of unhealthy machines. Inputs are cluster machine states; outputs go to the status fields. The CRD must be used within a cluster supporting Cluster API.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20191030-machine-health-checking.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1alpha3\\nkind: MachineHealthCheck\\nmetadata:\\n  name: example\\n  namespace: machine-api\\nspec:\\n  selector:\\n    matchLabels:\\n      role: worker\\n  unhealthyConditions:\\n  - type:    \\\"Ready\\\"\\n    status:  \\\"Unknown\\\"\\n    timeout: \\\"5m\\\"\\n  - type:    \\\"Ready\\\"\\n    status:  \\\"False\\\"\\n    timeout: \\\"5m\\\"\\n  maxUnhealthy: \\\"40%\\\"\\nstatus:\\n  currentHealthy: 5\\n  expectedMachines: 5\\n\n```\n\n----------------------------------------\n\nTITLE: Create Default Kind Cluster (Bash)\nDESCRIPTION: Uses the `kind` command to create a default local Kubernetes cluster. This cluster can serve as a temporary bootstrap cluster or a development management cluster. Requires `kind` and Docker to be installed.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkind create cluster\n```\n\n----------------------------------------\n\nTITLE: Configuring Huawei Cloud Environment Variables for Cluster API\nDESCRIPTION: Environment variables setup for creating Kubernetes clusters on Huawei Cloud using Cluster API. Includes region, SSH key, machine types, and cluster specifications.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\nexport HC_REGION=\"cn-east-1\"\nexport HC_SSH_KEY_NAME=\"default\"\nexport KUBERNETES_VERSION=\"1.32.0\"\nexport CONTROL_PLANE_MACHINE_COUNT=\"1\"\nexport WORKER_MACHINE_COUNT=\"1\"\nexport HC_CONTROL_PLANE_MACHINE_TYPE=\"x1e.2u.4g\"\nexport HC_NODE_MACHINE_TYPE=\"x1e.2u.4g\"\nexport ECS_IMAGE_ID=\"218ca5t7-bxf3-5dg0-852p-y703c9fe1a52\"\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Infrastructure Provider with Cluster API\nDESCRIPTION: Demonstrates how to initialize a management cluster with the AWS infrastructure provider, automatically including core Cluster API, kubeadm bootstrap, and kubeadm control-plane providers.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/init.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl init --infrastructure aws\n```\n\n----------------------------------------\n\nTITLE: Checking Node Status on Kubernetes Cluster\nDESCRIPTION: This command retrieves the status of nodes in the Kubernetes cluster using kubectl. It's used to verify if the nodes are in 'Ready' state after CNI installation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_81\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --kubeconfig=./capi-quickstart.kubeconfig get nodes\n```\n\n----------------------------------------\n\nTITLE: Install clusterctl on Linux (Bash)\nDESCRIPTION: Installs the previously downloaded `clusterctl` binary to the `/usr/local/bin` directory on Linux systems using the `install` command. This requires root privileges (`sudo`) and sets the appropriate ownership and permissions (executable).\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo install -o root -g root -m 0755 clusterctl /usr/local/bin/clusterctl\n```\n\n----------------------------------------\n\nTITLE: Configuring KubeVirt Environment Variables for Cluster API\nDESCRIPTION: Environment variables setup for creating Kubernetes clusters using KubeVirt with Cluster API. Includes VM image template and CRI path configurations.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\nexport NODE_VM_IMAGE_TEMPLATE=\"quay.io/capk/ubuntu-2404-container-disk:v1.32.1\"\nexport CAPK_GUEST_K8S_VERSION=\"${NODE_VM_IMAGE_TEMPLATE/:*/}\"\nexport CRI_PATH=\"unix:///var/run/containerd/containerd.sock\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vultr Environment Variables\nDESCRIPTION: Sets environment variables for Vultr cloud provider, including cluster details, machine counts, plans, image, region, and other Vultr-specific configurations.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\nexport CLUSTER_NAME=<clustername>\nexport KUBERNETES_VERSION=v1.28.9\nexport CONTROL_PLANE_MACHINE_COUNT=1\nexport CONTROL_PLANE_PLANID=<plan_id>\nexport WORKER_MACHINE_COUNT=1\nexport WORKER_PLANID=<plan_id>\nexport MACHINE_IMAGE=<snapshot_id>\nexport REGION=<region>\nexport PLANID=<plan_id>\nexport VPCID=<vpc_id>\nexport SSHKEY_ID=<sshKey_id>\n```\n\n----------------------------------------\n\nTITLE: Checking Cluster Status Commands\nDESCRIPTION: Collection of commands for monitoring cluster status and retrieving cluster information.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_77\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get cluster\n```\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl describe cluster capi-quickstart\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get kubeadmcontrolplane\n```\n\n----------------------------------------\n\nTITLE: Customizing Provider Repositories in YAML\nDESCRIPTION: This YAML snippet demonstrates how to customize the list of available providers in the clusterctl configuration file. It shows adding custom providers, overriding pre-defined providers, and configuring providers on self-hosted GitLab.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  # add a custom provider\n  - name: \"my-infra-provider\"\n    url: \"https://github.com/myorg/myrepo/releases/latest/infrastructure-components.yaml\"\n    type: \"InfrastructureProvider\"\n  # override a pre-defined provider\n  - name: \"cluster-api\"\n    url: \"https://github.com/myorg/myforkofclusterapi/releases/latest/core-components.yaml\"\n    type: \"CoreProvider\"\n  # add a custom provider on a self-hosted GitLab (host should start with \"gitlab.\")\n  - name: \"my-other-infra-provider\"\n    url: \"https://gitlab.example.com/api/v4/projects/myorg%2Fmyrepo/packages/generic/myrepo/v1.2.3/infrastructure-components.yaml\"\n    type: \"InfrastructureProvider\"\n  # override a pre-defined provider on a self-hosted GitLab (host should start with \"gitlab.\")\n  - name: \"kubeadm\"\n    url: \"https://gitlab.example.com/api/v4/projects/external-packages%2Fcluster-api/packages/generic/cluster-api/v1.1.3/bootstrap-components.yaml\"\n    type: \"BootstrapProvider\"\n```\n\n----------------------------------------\n\nTITLE: Defining a ClusterResourceSet for OpenStack Cloud Provider (YAML)\nDESCRIPTION: This YAML manifest defines a ClusterResourceSet named 'cloud-provider-openstack'. It uses the 'Reconcile' strategy and targets clusters labeled with 'cloud=openstack'. It specifies two resources to be applied: a ConfigMap named 'cloud-provider-openstack' and a Secret named 'cloud-config'.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/cluster-resource-set.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: addons.cluster.x-k8s.io/v1beta1\nkind: ClusterResourceSet\nmetadata:\n  name: cloud-provider-openstack\n  namespace: default\nspec:\n  strategy: Reconcile\n  clusterSelector:\n    matchLabels:\n      cloud: openstack\n  resources:\n    - name: cloud-provider-openstack\n      kind: ConfigMap\n    - name: cloud-config\n      kind: Secret\n```\n\n----------------------------------------\n\nTITLE: Defining Variables in ClusterClass - Kubernetes YAML\nDESCRIPTION: This YAML snippet demonstrates how to declare a variable in a ClusterClass for use with patches. The 'variables' field specifies a variable named 'imageRepository', its requirement status, and schema metadata such as type, description, default, and example value. Requires Cluster API CRDs and is usable as part of the ClusterClass spec. Expects string input, with default fallback if not provided.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\\nkind: ClusterClass\\nmetadata:\\n  name: docker-clusterclass-v0.1.0\\nspec:\\n  ...\\n  variables:\\n  - name: imageRepository\\n    required: true\\n    schema:\\n      openAPIV3Schema:\\n        type: string\\n        description: ImageRepository is the container registry to pull images from.\\n        default: registry.k8s.io\\n        example: registry.k8s.io\n```\n\n----------------------------------------\n\nTITLE: Selecting Infrastructure Provider for Kubernetes Cluster\nDESCRIPTION: These commands demonstrate how to explicitly select an infrastructure provider (AWS in this case) when generating a cluster configuration. The second example also specifies a version of the provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/generate-cluster.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl generate cluster my-cluster --kubernetes-version v1.28.0 \\\n    --infrastructure aws > my-cluster.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl generate cluster my-cluster --kubernetes-version v1.28.0 \\\n    --infrastructure aws:v0.4.1 > my-cluster.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating a Cluster Using a Defined ClusterClass in Cluster API (YAML)\nDESCRIPTION: Defines a Cluster named 'foo' in the 'bar' namespace, referencing the 'mixed' ClusterClass. It specifies the desired Kubernetes version (v1.19.1), control plane replicas (3), and defines three machine deployments: 'big-pool-of-machines-1' (linux-worker, 5 replicas, custom label), 'small-pool-of-machines-1' (linux-worker, 1 replica), and 'microsoft-1' (windows-worker, 3 replicas). This demonstrates creating a cluster instance based on a pre-defined class, overriding certain topology aspects like replica counts and labels.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20210526-cluster-class-and-managed-topologies.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: Cluster\nmetadata:\n  name: foo\n  namespace: bar\nspec:\n  topology:\n    class: mixed\n    version: v1.19.1\n    controlPlane:\n      replicas: 3\n      labels: {}\n      annotations: {}\n    workers:\n      machineDeployments:\n      - class: linux-worker\n        name: big-pool-of-machines-1\n        replicas: 5\n        labels:\n          # This label is additive to the class' labels,\n          # or if the same label exists, it overwrites it.\n          custom-label: \"production\"\n      - class: linux-worker\n        name: small-pool-of-machines-1\n        replicas: 1\n      - class: windows-worker\n        name: microsoft-1\n        replicas: 3\n```\n\n----------------------------------------\n\nTITLE: Applying Generated Kubernetes Cluster Configuration\nDESCRIPTION: This command applies the generated cluster manifest to create the Kubernetes cluster using kubectl.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/generate-cluster.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f my-cluster.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Calico CNI using HelmChartProxy CRD with Go Templating - YAML\nDESCRIPTION: This YAML snippet demonstrates a HelmChartProxy custom resource for declaratively installing the Calico CNI add-on on workload clusters selected by label. The valuesTemplate key leverages Go templating to inject each cluster's pod CIDRs dynamically into the Helm values passed at install time. It requires that addons.cluster.x-k8s.io/v1alpha1 HelmChartProxy CRD is registered, the controller is installed, and cluster labels and topology are appropriately configured. Inputs include the Helm chart repository, chart name, dynamic cluster selection, and Go templated values; output is the automated installation of Calico across matching clusters. The snippet assumes prior installation of Cluster API's add-ons infrastructure.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220712-cluster-api-addon-orchestration.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: addons.cluster.x-k8s.io/v1alpha1\\nkind: HelmChartProxy\\nmetadata:\\n  name: calico-cni\\nspec:\\n  clusterSelector:\\n    matchLabels:\\n      calicoCNI: enabled\\n  releaseName: calico\\n  repoURL: https://projectcalico.docs.tigera.io/charts\\n  chartName: tigera-operator\\n  valuesTemplate: |\\n    installation:\\n      cni:\\n        type: Calico\\n        ipam:\\n          type: HostLocal\\n      calicoNetwork:\\n        bgp: Disabled\\n        mtu: 1350\\n        ipPools:{{range $i, $cidr := .Cluster.Spec.ClusterNetwork.Pods.CIDRBlocks }}\\n        - cidr: {{ $cidr }}\\n          encapsulation: None\\n          natOutgoing: Enabled\\n          nodeSelector: all(){{end}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cert-Manager in YAML\nDESCRIPTION: These YAML snippets demonstrate how to configure cert-manager in the clusterctl configuration file. They show how to set a custom repository URL, override the default version, and customize the wait timeout.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncert-manager:\n  url: \"/Users/foo/.config/cluster-api/dev-repository/cert-manager/latest/cert-manager.yaml\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncert-manager:\n  ...\n  version: \"v1.1.1\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncert-manager:\n  ...\n  timeout: 15m\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Kubernetes Pods in kube-system Namespace\nDESCRIPTION: This command lists pods in the kube-system namespace, useful for troubleshooting when nodes don't become ready after CNI installation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_87\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --kubeconfig=./capi-quickstart.kubeconfig get pod -n kube-system\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Images Using Kustomize\nDESCRIPTION: A Kustomize configuration to specify custom OS images for Cluster API nodes using AWSMachineTemplate patches. Requires JSON 6902 patches.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/using-kustomize.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\\napiVersion: kustomize.config.k8s.io/v1beta1\\nkind: Kustomization\\nresources:\\n  - ../../base\\npatchesJson6902:\\n  - path: custom-ami.json\\n    target:\\n      group: infrastructure.cluster.x-k8s.io\\n      kind: AWSMachineTemplate\\n      name: \".*\"\\n      version: v1alpha3\n```\n\n----------------------------------------\n\nTITLE: Patching Cluster Version with kubectl\nDESCRIPTION: This snippet demonstrates how to update the Kubernetes version of a cluster using kubectl by patching the version field in the Cluster's topology. This operation is essential for upgrading the cluster and requires that the new version is not a +2 minor upgrade to comply with existing providers' limitations.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/operate-cluster.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch cluster clusterclass-quickstart --type json --patch '[{\"op\": \"replace\", \"path\": \"/spec/topology/version\", \"value\": \"v1.22.0\"}]'\n```\n\n----------------------------------------\n\nTITLE: Creating a Cluster Referencing ClusterClass with Variables in YAML\nDESCRIPTION: YAML definition for creating a Cluster that references a ClusterClass and defines specific variable values. This example shows how to instantiate a cluster from a template, providing only the required customization parameters while defaulting others.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20210526-cluster-class-and-managed-topologies.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: Cluster\nmetadata:\n  name: my-cluster\nspec:\n  topology:\n    class: my-cluster-class\n    [...]\n    variables:\n    - name: region\n      value: us-east-1\n```\n\n----------------------------------------\n\nTITLE: Transformer Configuration for Kustomize\nDESCRIPTION: Provides a custom transformer configuration for Kustomize to correctly handle name modifications in Cluster API manifests.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/using-kustomize.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- kind: Cluster\\n  group: cluster.x-k8s.io\\n  version: v1alpha3\\n  fieldSpecs:\\n  - path: spec/clusterName\\n    kind: MachineDeployment\\n  - path: spec/template/spec/clusterName\\n    kind: MachineDeployment\\n\\n- kind: AWSCluster\\n  group: infrastructure.cluster.x-k8s.io\\n  version: v1alpha3\\n  fieldSpecs:\\n  - path: spec/infrastructureRef/name\\n    kind: Cluster\\n\\n- kind: KubeadmControlPlane\\n  group: controlplane.cluster.x-k8s.io\\n  version: v1alpha3\\n  fieldSpecs:\\n  - path: spec/controlPlaneRef/name\\n    kind: Cluster\\n\\n- kind: AWSMachine\\n  group: infrastructure.cluster.x-k8s.io\\n  version: v1alpha3\\n  fieldSpecs:\\n  - path: spec/infrastructureRef/name\\n    kind: Machine\\n\\n- kind: KubeadmConfig\\n  group: bootstrap.cluster.x-k8s.io\\n  version: v1alpha3\\n  fieldSpecs:\\n  - path: spec/bootstrap/configRef/name\\n    kind: Machine\\n\\n- kind: AWSMachineTemplate\\n  group: infrastructure.cluster.x-k8s.io\\n  version: v1alpha3\\n  fieldSpecs:\\n  - path: spec/template/spec/infrastructureRef/name\\n    kind: MachineDeployment\\n  - path: spec/infrastructureTemplate/name\\n    kind: KubeadmControlPlane\\n\\n- kind: KubeadmConfigTemplate\\n  group: bootstrap.cluster.x-k8s.io\\n  version: v1alpha3\\n  fieldSpecs:\\n  - path: spec/template/spec/bootstrap/configRef/name\\n    kind: MachineDeployment\n```\n\n----------------------------------------\n\nTITLE: Download clusterctl for macOS (AMD64) (Bash)\nDESCRIPTION: Downloads the `clusterctl` binary specifically compiled for macOS AMD64 (Intel) architectures using `curl`. The URL uses a template helper `{{#releaselink ...}}` to fetch the correct asset for version 1.9.x.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L {{#releaselink repo:\"https://github.com/kubernetes-sigs/cluster-api\" gomodule:\"sigs.k8s.io/cluster-api\" asset:\"clusterctl-darwin-amd64\" version:\"1.9.x\"}} -o clusterctl\n```\n\n----------------------------------------\n\nTITLE: Configuring ClusterClass with Inline and External Variables/Patches (YAML)\nDESCRIPTION: This YAML snippet demonstrates a ClusterClass resource definition in Cluster API (v1beta1). It showcases how to define both inline variables (`spec.variables`) and configure external patches (`spec.patches.external`) that reference specific Runtime Extension hooks (`generateExtension`, `validateExtension`, `discoverVariablesExtension`). The `status` section illustrates how discovered variables (both inline and external) are recorded, including how potential definition conflicts (`definitionsConflict: true`) are flagged.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-topology-mutation-hook.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\n# metadata\nspec:\n    # Inline variable definitions\n    variables:\n    # This variable is unique and can be accessed globally.\n    - name: no-proxy\n      required: true\n      schema:\n        openAPIV3Schema:\n          type: string\n          default: \"internal.com\"\n          example: \"internal.com\"\n          description: \"comma-separated list of machine or domain names excluded from using the proxy.\"\n    # This variable is also defined by an external DiscoverVariables hook.\n    - name: http-proxy\n      schema:\n        openAPIV3Schema:\n          type: string\n          default: \"proxy.example.com\"\n          example: \"proxy.example.com\"\n          description: \"proxy for http calls.\"\n    # External patch definitions.\n    patches:\n    - name: lbImageRepository\n      external:\n          generateExtension: generate-patches.k8s-upgrade-with-runtimesdk\n          validateExtension: validate-topology.k8s-upgrade-with-runtimesdk\n          ## Call variable discovery for this patch.\n          discoverVariablesExtension: discover-variables.k8s-upgrade-with-runtimesdk\nstatus:\n    # observedGeneration is used to check that the current version of the ClusterClass is the same as that when the Status was previously written.\n    # if metadata.generation isn't the same as observedGeneration Cluster using the ClusterClass should not reconcile.\n    observedGeneration: xx\n    # variables contains a list of all variable definitions, both inline and from external patches, that belong to the ClusterClass.\n    variables:\n      - name: no-proxy\n        definitions:\n          - from: inline\n            required: true\n            schema:\n              openAPIV3Schema:\n                type: string\n                default: \"internal.com\"\n                example: \"internal.com\"\n                description: \"comma-separated list of machine or domain names excluded from using the proxy.\"\n      - name: http-proxy\n        # definitionsConflict is true if there are non-equal definitions for a variable.\n        # Note: This conflict has to be resolved, until then corresponding Clusters are not reconciled.\n        definitionsConflict: true\n        definitions:\n          - from: inline\n            schema:\n              openAPIV3Schema:\n                type: string\n                default: \"proxy.example.com\"\n                example: \"proxy.example.com\"\n                description: \"proxy for http calls.\"\n          - from: lbImageRepository\n            schema:\n              openAPIV3Schema:\n                type: string\n                default: \"different.example.com\"\n                example: \"different.example.com\"\n                description: \"proxy for http calls.\"\n```\n\n----------------------------------------\n\nTITLE: Applying Cluster Configuration\nDESCRIPTION: Applies the generated cluster configuration to create the Kubernetes cluster resources.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_76\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f capi-quickstart.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating a ClusterClass with Variables and Patches in YAML\nDESCRIPTION: YAML definition for creating a ClusterClass object that includes variables for region and control plane machine type, along with patches to dynamically configure infrastructure templates. This demonstrates how to define customizable cluster templates with variable substitution.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20210526-cluster-class-and-managed-topologies.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\nmetadata:\n  name: my-cluster-class\nspec:\n  [...]\n  variables:\n  - name: region\n    required: true\n    schema:\n      openAPIV3Schema:\n        type: string\n  - name: controlPlaneMachineType\n    schema:\n      openAPIV3Schema:\n        type: string\n        default: t3.large\n  patches:\n  - name: region\n    definitions:\n    - selector:\n        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n        kind: AWSClusterTemplate\n      jsonPatches:\n      - op: replace\n        path: \"/spec/template/spec/region\"\n        valueFrom:\n          variable: region\n  - name: controlPlaneMachineType\n    definitions:\n    - selector:\n        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n        kind: AWSMachineTemplate\n        matchResources:\n          controlPlane: true\n      jsonPatches:\n      - op: replace\n        path: \"/spec/template/spec/instanceType\"\n        valueFrom:\n          variable: machineType\n```\n\n----------------------------------------\n\nTITLE: Configuring MachineHealthChecks in a ClusterClass in YAML\nDESCRIPTION: This YAML snippet demonstrates how to embed MachineHealthCheck configurations directly within a ClusterClass for both the control plane and worker MachineDeployments. It defines parameters like `maxUnhealthy`, `nodeStartupTimeout`, and `unhealthyConditions` under `spec.controlPlane.machineHealthCheck` and similar configurations, including `unhealthyRange`, under `spec.workers.machineDeployments[].machineHealthCheck` for the 'default-worker' class. This setup enables automatic health monitoring and remediation for nodes in clusters created from this class.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\nmetadata:\n  name: docker-clusterclass-v0.1.0\nspec:\n  controlPlane:\n    ...\n    machineHealthCheck:\n      maxUnhealthy: 33%\n      nodeStartupTimeout: 15m\n      unhealthyConditions:\n      - type: Ready\n        status: Unknown\n        timeout: 300s\n      - type: Ready\n        status: \"False\"\n        timeout: 300s\n  workers:\n    machineDeployments:\n    - class: default-worker\n      ...\n      machineHealthCheck:\n        unhealthyRange: \"[0-2]\"\n        nodeStartupTimeout: 10m\n        unhealthyConditions:\n        - type: Ready\n          status: Unknown\n          timeout: 300s\n        - type: Ready\n          status: \"False\"\n          timeout: 300s\n```\n\n----------------------------------------\n\nTITLE: KubeadmConfig Example with BootCommands\nDESCRIPTION: This snippet demonstrates how to specify commands to be executed early in the boot process using the BootCommands field in KubeadmConfig.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/kubeadm-bootstrap/index.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nbootCommands:\n  - cloud-init-per once mymkfs mkfs /dev/vdb\n```\n\n----------------------------------------\n\nTITLE: Defining Core Cluster API Resource Structs in Go\nDESCRIPTION: Defines the Go struct types `Machine` and `MachineList`, representing Kubernetes Custom Resources (CRDs) in Cluster API. It illustrates the standard structure including `TypeMeta`, `ObjectMeta`, `Spec`, and `Status` fields, following Kubebuilder conventions. This example highlights the standard practice of keeping top-level fields like `Spec` and `Status` as non-pointer types within the root object, contrasting with the pointer usage for optional fields discussed earlier in the document.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\ntype Machine struct {\n  metav1.TypeMeta   `json:\",inline\"`\n  metav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n  Spec   MachineSpec   `json:\"spec,omitempty\"`\n  Status MachineStatus `json:\"status,omitempty\"`\n}\ntype MachineList struct {\n  metav1.TypeMeta `json:\",inline\"`\n  metav1.ListMeta `json:\"metadata,omitempty\"`\n  Items           []Machine `json:\"items\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Credentials and Initializing Cluster API\nDESCRIPTION: Sets up Azure credentials, creates necessary secrets, and initializes the management cluster with the Azure infrastructure provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nexport AZURE_SUBSCRIPTION_ID=\"<SubscriptionId>\"\n\n# Create an Azure Service Principal and paste the output here\nexport AZURE_TENANT_ID=\"<Tenant>\"\nexport AZURE_CLIENT_ID=\"<AppId>\"\nexport AZURE_CLIENT_ID_USER_ASSIGNED_IDENTITY=$AZURE_CLIENT_ID # for compatibility with CAPZ v1.16 templates\nexport AZURE_CLIENT_SECRET=\"<Password>\"\n\n# Settings needed for AzureClusterIdentity used by the AzureCluster\nexport AZURE_CLUSTER_IDENTITY_SECRET_NAME=\"cluster-identity-secret\"\nexport CLUSTER_IDENTITY_NAME=\"cluster-identity\"\nexport AZURE_CLUSTER_IDENTITY_SECRET_NAMESPACE=\"default\"\n\n# Create a secret to include the password of the Service Principal identity created in Azure\n# This secret will be referenced by the AzureClusterIdentity used by the AzureCluster\nkubectl create secret generic \"${AZURE_CLUSTER_IDENTITY_SECRET_NAME}\" --from-literal=clientSecret=\"${AZURE_CLIENT_SECRET}\" --namespace \"${AZURE_CLUSTER_IDENTITY_SECRET_NAMESPACE}\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Update Strategy Decision Logic in CAPI (Mermaid)\nDESCRIPTION: This Mermaid sequence diagram details how Cluster API controllers (CP/MD) decide the update strategy. After receiving changes, the controller queries registered external updaters to determine if they can collectively handle all required changes. If all changes are covered, an external update is chosen; otherwise, it falls back to recreating machines or marks the update as failed.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240807-in-place-updates.md#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Operator\n\n    box Management Cluster\n        participant apiserver as kube-api server\n        participant capi as CP/MD Controller\n        participant hook as External updater 1\n        participant hook2 as External updater 2\n    end\n\n    Operator->>+apiserver: make changes to CP/MD\n    apiserver->>+capi: Notify changes\n    apiserver->>-Operator: OK\n    capi->>+hook: Can update?\n    hook->>capi: Set of changes\n    capi->>+hook2: Can update?\n    hook2->>capi: Set of changes\n    alt all changes covered?\n        capi->>apiserver: Decide Update Strategy\n    else\n        alt fallback strategy?\n            capi->>apiserver: Re-create machines\n        else\n            capi->>apiserver: Marked update as failed\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: Initializing envtest Environment in Golang for Cluster API Testing\nDESCRIPTION: This snippet demonstrates how to set up an envtest environment for Cluster API testing, including configuration of controllers and indexes. It shows the basic structure of a TestMain function using envtest.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/testing.md#2025-04-22_snippet_13\n\nLANGUAGE: golang\nCODE:\n```\nvar (\n\tenv *envtest.Environment\n\tctx = ctrl.SetupSignalHandler()\n)\n\nfunc TestMain(m *testing.M) {\n\t// Setup envtest\n\t...\n\n\t// Run tests\n\tos.Exit(envtest.Run(ctx, envtest.RunInput{\n\t\tM:        m,\n\t\tSetupEnv: func(e *envtest.Environment) { env = e },\n\t\tSetupIndexes:     setupIndexes,\n\t\tSetupReconcilers: setupReconcilers,\n\t}))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a MachineHealthCheck for Worker Nodes in Cluster API\nDESCRIPTION: YAML configuration for a MachineHealthCheck that monitors worker nodes and remediates them if they remain in an unhealthy state for 5 minutes. This example includes settings for clusterName, maxUnhealthy percentage, nodeStartupTimeout, and conditions to check.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/automated-machine-management/healthchecking.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: MachineHealthCheck\nmetadata:\n  name: capi-quickstart-node-unhealthy-5m\nspec:\n  # clusterName is required to associate this MachineHealthCheck with a particular cluster\n  clusterName: capi-quickstart\n  # (Optional) maxUnhealthy prevents further remediation if the cluster is already partially unhealthy\n  maxUnhealthy: 40%\n  # (Optional) nodeStartupTimeout determines how long a MachineHealthCheck should wait for\n  # a Node to join the cluster, before considering a Machine unhealthy.\n  # Defaults to 10 minutes if not specified.\n  # Set to 0 to disable the node startup timeout.\n  # Disabling this timeout will prevent a Machine from being considered unhealthy when\n  # the Node it created has not yet registered with the cluster. This can be useful when\n  # Nodes take a long time to start up or when you only want condition based checks for\n  # Machine health.\n  nodeStartupTimeout: 10m\n  # selector is used to determine which Machines should be health checked\n  selector:\n    matchLabels:\n      nodepool: nodepool-0\n  # Conditions to check on Nodes for matched Machines, if any condition is matched for the duration of its timeout, the Machine is considered unhealthy\n  unhealthyConditions:\n  - type: Ready\n    status: Unknown\n    timeout: 300s\n  - type: Ready\n    status: \"False\"\n    timeout: 300s\n```\n\n----------------------------------------\n\nTITLE: RBAC Annotation for MailgunMachineReconciler\nDESCRIPTION: RBAC annotation for the MailgunMachineReconciler to provide it with read-only access to Cluster API Machine resources, which is required for machine reconciliation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/controllers-and-reconciliation.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:rbac:groups=cluster.x-k8s.io,resources=machines;machines/status,verbs=get;list;watch\n```\n\n----------------------------------------\n\nTITLE: KubeadmConfig Example for Bootstrap Control Plane Node\nDESCRIPTION: This snippet shows the basic KubeadmConfig for the first control plane node in a cluster. It uses initConfiguration which will trigger kubeadm init during bootstrap.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/kubeadm-bootstrap/index.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: KubeadmConfig\napiVersion: bootstrap.cluster.x-k8s.io/v1beta1\nmetadata:\n  name: my-control-plane1-config\nspec:\n  initConfiguration:\n    nodeRegistration:\n      nodeRegistration: {} # node registration parameters are automatically injected by CAPD according to the kindest/node image in use.\n```\n\n----------------------------------------\n\nTITLE: Applying Cluster API Upgrade in Bash\nDESCRIPTION: This command applies the upgrade to all Cluster API providers for the v1beta1 contract version. It upgrades the providers to their latest stable releases.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/upgrade.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl upgrade apply --contract v1beta1\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Verbosity Level in Clusterctl\nDESCRIPTION: To increase log verbosity in clusterctl, use the -v flag followed by a positive integer that specifies the verbosity level. This helps with debugging issues by providing more detailed information in the logs.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n-v 3\n```\n\n----------------------------------------\n\nTITLE: Defining MachinePool Workers in a ClusterClass in YAML\nDESCRIPTION: This YAML snippet shows how to define MachinePool workers within a ClusterClass. It adds a `machinePools` section under `spec.workers` in the ClusterClass definition. A worker class 'default-worker' is defined, referencing a `KubeadmConfigTemplate` for bootstrapping and a `DockerMachinePoolTemplate` for the infrastructure. This allows clusters based on this ClusterClass to utilize MachinePools for managing worker nodes.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\nmetadata:\n  name: docker-clusterclass-v0.1.0\nspec:\n  workers:\n    machinePools:\n    - class: default-worker\n      template:\n        bootstrap:\n          ref:\n            apiVersion: bootstrap.cluster.x-k8s.io/v1beta1\n            kind: KubeadmConfigTemplate\n            name: quick-start-default-worker-bootstraptemplate\n        infrastructure:\n          ref:\n            apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n            kind: DockerMachinePoolTemplate\n            name: quick-start-default-worker-machinepooltemplate\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code for Running Cluster API E2E Tests (JSON)\nDESCRIPTION: Provides a `launch.json` configuration for Visual Studio Code to execute Go E2E tests for Cluster API. It specifies the test program (`e2e_suite_test.go`), sets the `ARTIFACTS` environment variable, passes necessary arguments for the E2E config file (`-e2e.config`) and Ginkgo focus (`-ginkgo.focus`), enables verbose output, sets build tags (`e2e`), and configures debugging options. Assumes the repository root is `${workspaceRoot}`.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/testing.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Run e2e test\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"test\",\n            \"program\": \"${workspaceRoot}/test/e2e/e2e_suite_test.go\",\n            \"env\": {\n                \"ARTIFACTS\":\"${workspaceRoot}/_artifacts\"\n            },\n            \"args\": [\n                \"-e2e.config=${workspaceRoot}/test/e2e/config/docker.yaml\",\n                \"-ginkgo.focus=\\\\[PR-Blocking\\\\]\",\n                \"-ginkgo.v=true\"\n            ],\n            \"trace\": \"verbose\",\n            \"buildFlags\": \"-tags 'e2e'\",\n            \"showGlobalVariables\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Failure Domains in FooClusterStatus\nDESCRIPTION: Implementation of failure domains for infrastructure providers. This shows how to surface available failure domains where machines can be placed in the InfraCluster resource status.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/infra-cluster.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype FooClusterStatus struct {\n    // failureDomains is a list of failure domain objects synced from the infrastructure provider.\n    FailureDomains clusterv1.FailureDomains `json:\"failureDomains,omitempty\"`\n    \n    // See other rules for more details about mandatory/optional fields in InfraCluster status.\n    // Other fields SHOULD be added based on the needs of your provider.\n}\n```\n\n----------------------------------------\n\nTITLE: Visual Studio Code Debug Configuration for CAPI\nDESCRIPTION: VSCode launch.json configuration for debugging the Core CAPI Controller.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Core CAPI Controller\",\n      \"type\": \"go\",\n      \"request\": \"attach\",\n      \"mode\": \"remote\",\n      \"remotePath\": \"\",\n      \"port\": 30000,\n      \"host\": \"127.0.0.1\",\n      \"showLog\": true,\n      \"trace\": \"log\",\n      \"logOutput\": \"rpc\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customized MailgunCluster API Types with Fields in Go\nDESCRIPTION: Customized API types for a MailgunCluster with email-based fields, including a Priority enum and fields for request details in the Spec and message tracking in the Status.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/implement-api-types.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Priority string\n\nconst (\n\t// PriorityUrgent means do this right away\n\tPriorityUrgent = Priority(\"Urgent\")\n\n\t// PriorityUrgent means do this immediately\n\tPriorityExtremelyUrgent = Priority(\"ExtremelyUrgent\")\n\n\t// PriorityBusinessCritical means you absolutely need to do this now\n\tPriorityBusinessCritical = Priority(\"BusinessCritical\")\n)\n\n// MailgunClusterSpec defines the desired state of MailgunCluster\ntype MailgunClusterSpec struct {\n\t// Priority is how quickly you need this cluster\n\tPriority Priority `json:\"priority\"`\n\t// Request is where you ask extra nicely\n\tRequest string `json:\"request\"`\n\t// Requester is the email of the person sending the request\n\tRequester string `json:\"requester\"`\n}\n\n// MailgunClusterStatus defines the observed state of MailgunCluster\ntype MailgunClusterStatus struct {\n\t// MessageID is set to the message ID from Mailgun when our message has been sent\n\tMessageID *string `json:\"response\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Server Etcd Client TLS Secret (YAML)\nDESCRIPTION: This YAML manifest defines a Kubernetes Secret named `$CLUSTER_NAME-apiserver-etcd-client` in the specified `$CLUSTER_NAMESPACE`. It serves as an alternative to the `kubectl create secret tls` command. The `data` section contains the base64-encoded API server etcd client certificate (`tls.crt`) and private key (`tls.key`). These credentials allow the API server to connect securely to the external etcd cluster.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/external-etcd.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Kubernetes APIServer etcd client certificate\nkind: Secret\napiVersion: v1\nmetadata:\n  name: $CLUSTER_NAME-apiserver-etcd-client\n  namespace: $CLUSTER_NAMESPACE\ndata:\n  tls.crt: |\n    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCRENDQWV5Z0F3SUJBZ0lJZFlkclZUMzV0\n    NW93RFFZSktvWklodmNOQVFFTEJRQXdEekVOTUFzR0ExVUUKQXhNRVpYUmpaREFlRncweE9UQTVN\n    ...\n  tls.key: |\n    LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdlFlTzVKOE5j\n    VCtDeGRubFR3alpuQ3YwRzByY0tETklhZzlSdFdrZ1p4MEcxVm1yClA4Zy9BRkhXVHdxSTUrNi81\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring KubeadmControlPlane with Certificate Rotation Settings in YAML\nDESCRIPTION: This YAML configuration example demonstrates how to set up a KubeadmControlPlane resource with automatic certificate rotation. The 'rolloutBefore.certificatesExpiryDays' setting triggers a rollout of control plane machines when certificates are within 21 days of expiration.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/certs/auto-rotate-certificates-in-kcp.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: controlplane.cluster.x-k8s.io/v1beta1\nkind: KubeadmControlPlane\nmetadata:\n  name: example-control-plane\nspec:\n  rolloutBefore:\n    certificatesExpiryDays: 21 # trigger a rollout if certificates expire within 21 days\n  kubeadmConfigSpec:\n    clusterConfiguration:\n      ...\n    initConfiguration:\n      ...\n    joinConfiguration:\n      ...\n  machineTemplate:\n    infrastructureRef:\n      ...\n  replicas: 1\n  version: v1.23.3\n```\n\n----------------------------------------\n\nTITLE: Defining Control Plane Status for External Managed Control Planes\nDESCRIPTION: Implements a status field for control plane providers where instances do not show up as Kubernetes nodes, such as managed control planes for AKS, EKS, GKE. Includes a boolean flag to indicate external management.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/control-plane.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype FooControlPlaneStatus struct {\n    ExternalManagedControlPlane bool `json:\"externalManagedControlPlane,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Committing API Type Changes\nDESCRIPTION: Commits the changes made to create the Cluster and Machine API types. This includes the generated Go files and CRD manifests.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/initialize-repo-and-api-types.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"Generate Cluster and Machine resources.\"\n```\n\n----------------------------------------\n\nTITLE: Checking Cluster API Component Deployments\nDESCRIPTION: Command to verify if Cluster API components are running properly in the management cluster.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/developers.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get deploy -A | grep \"cap\\|cert\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Cluster Flavor in Kubernetes Configuration\nDESCRIPTION: This command generates a cluster configuration using a specific flavor (high-availability in this case) provided by the infrastructure provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/generate-cluster.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl generate cluster my-cluster --kubernetes-version v1.28.0 \\\n    --flavor high-availability > my-cluster.yaml\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Infrastructure Provider with ClusterTopology Support\nDESCRIPTION: This script enables the experimental Cluster topology feature and initializes the Docker provider for Cluster API, which is intended for development environments only.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n# Enable the experimental Cluster topology feature.\nexport CLUSTER_TOPOLOGY=true\n\n# Initialize the management cluster\nclusterctl init --infrastructure docker\n```\n\n----------------------------------------\n\nTITLE: Configuring ExtensionConfig for Kubernetes Runtime Extensions\nDESCRIPTION: Example YAML configuration for setting up an ExtensionConfig resource to register a runtime extension in the management cluster. Includes service configuration, namespace selector, and CA certificate injection.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-extensions.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: runtime.cluster.x-k8s.io/v1alpha1\nkind: ExtensionConfig\nmetadata:\n  annotations:\n    runtime.cluster.x-k8s.io/inject-ca-from-secret: default/test-runtime-sdk-svc-cert\n  name: test-runtime-sdk-extensionconfig\nspec:\n  clientConfig:\n    service:\n      name: test-runtime-sdk-svc\n      namespace: default\n      port: 443\n  namespaceSelector:\n    matchExpressions:\n      - key: kubernetes.io/metadata.name\n        operator: In\n        values:\n          - default\n```\n\n----------------------------------------\n\nTITLE: Adding Status Subresource to Machine Type\nDESCRIPTION: Adds the status subresource annotation to the MailgunMachine type. This enables separate handling of Spec and Status requests for the custom resource, preventing conflicts and allowing separate RBAC rules.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/initialize-repo-and-api-types.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:subresource:status\n// +kubebuilder:object:root=true\n\n// MailgunMachine is the Schema for the mailgunmachines API\ntype MailgunMachine struct {\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Logs for Machine Startup Failures\nDESCRIPTION: This snippet illustrates how to access Docker logs to troubleshoot machine startup failures, particularly when encountering inotify limits. Ensure Docker is installed and properly configured. The key command outputs log details that can indicate specific issues causing the machine not to start.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/troubleshooting.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker logs capi-quickstart-6587k-xtvnz\n(...)\nFailed to create control group inotify object: Too many open files\nFailed to allocate manager object: Too many open files\n[!!!!!!] Failed to allocate manager object.\nExiting PID 1...\n```\n\n----------------------------------------\n\nTITLE: Improved Scheme Registration Pattern with Fewer Dependencies\nDESCRIPTION: An improved scheme registration pattern that reduces dependencies on controller-runtime by using standard Kubernetes runtime package, making API types more portable.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/implement-api-types.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport \"k8s.io/apimachinery/pkg/runtime\"\n\nvar (\n\t// schemeBuilder is used to add go types to the GroupVersionKind scheme.\n\tschemeBuilder = runtime.NewSchemeBuilder(addKnownTypes)\n\n\t// AddToScheme adds the types in this group-version to the given scheme.\n\tAddToScheme = schemeBuilder.AddToScheme\n\n\tobjectTypes = []runtime.Object{}\n)\n\nfunc addKnownTypes(scheme *runtime.Scheme) error {\n\tscheme.AddKnownTypes(GroupVersion, objectTypes...)\n\tmetav1.AddToGroupVersion(scheme, GroupVersion)\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Replicas Fields in ControlPlane Status for Cluster API\nDESCRIPTION: Mandatory fields to implement in the ControlPlane status for tracking replica counts. Includes selector information for scale subresource integration and various replica counters for different machine states.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/control-plane.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype FooControlPlaneStatus struct {\n    // selector is the label selector in string format to avoid introspection\n    // by clients, and is used to provide the CRD-based integration for the\n    // scale subresource and additional integrations for things like kubectl\n    // describe. The string will be in the same format as the query-param syntax.\n    // More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors\n    // +optional\n    Selector string `json:\"selector,omitempty\"`\n\n    // replicas is the total number of machines targeted by this control plane\n    // (their labels match the selector).\n    // +optional\n    Replicas *int32 `json:\"replicas,omitempty\"`\n\n    // readyReplicas is the number of ready replicas for this ControlPlane. A machine is considered ready when Machine's Ready condition is true.\n    // +optional\n    ReadyReplicas *int32 `json:\"readyReplicas,omitempty\"`\n\n    // availableReplicas is the number of available replicas for this ControlPlane. A machine is considered available when Machine's Available condition is true.\n    // +optional\n    AvailableReplicas *int32 `json:\"availableReplicas,omitempty\"`\n\n    // upToDateReplicas is the number of up-to-date replicas targeted by this ControlPlane. A machine is considered available when Machine's  UpToDate condition is true.\n    // +optional\n    UpToDateReplicas *int32 `json:\"upToDateReplicas,omitempty\"`\n\n    // See other rules for more details about mandatory/optional fields in ControlPlane status.\n    // Other fields SHOULD be added based on the needs of your provider.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KubeadmControlPlane with Remediation Strategy in Cluster API\nDESCRIPTION: YAML snippet demonstrating how to configure a KubeadmControlPlane with a remediation strategy to control retry behavior. This includes settings for maximum retries, retry period, and minimum healthy period between remediations.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/automated-machine-management/healthchecking.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: KubeadmControlPlane\nmetadata:\n  name: my-control-plane\nspec:\n  ...\n  remediationStrategy:\n    maxRetry: 5\n    retryPeriod: 2m\n    minHealthyPeriod: 2h\n```\n\n----------------------------------------\n\nTITLE: Defining Cluster and KubeadmControlPlane Resources in YAML\nDESCRIPTION: This YAML snippet defines a Cluster and KubeadmControlPlane resource. It includes specifications for the cluster network, control plane, and infrastructure references, as well as KubeadmControlPlane details like replicas, version, and kubeadm configuration.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20191017-kubeadm-based-control-plane.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Cluster\napiVersion: cluster.x-k8s.io/v1alpha3\nmetadata:\n  name: my-cluster\n  namespace: default\nspec:\n  clusterNetwork:\n    pods:\n      cidrBlocks: [\"192.168.0.0/16\"]\n  controlPlaneRef:\n    kind: KubeadmControlPlane\n    apiVersion: cluster.x-k8s.io/v1alpha3\n    name: my-controlplane\n    namespace: default\n  infrastructureRef:\n    kind: AcmeCluster\n    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha2\n    name: my-acmecluster\n    namespace: default\n---\nkind: KubeadmControlPlane\napiVersion: cluster.x-k8s.io/v1alpha3\nmetadata:\n  name: my-control-plane\n  namespace: default\nspec:\n  replicas: 1\n  version: v1.16.0\n  infrastructureTemplate:\n    kind: AcmeProviderMachineTemplate\n    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha2\n    namespace: default\n    name: my-acmemachinetemplate\n  kubeadmConfigSpec:\n    initConfiguration:\n      nodeRegistration:\n        name: '{{ ds.meta_data.local_hostname }}'\n        kubeletExtraArgs:\n          cloud-provider: acme\n    clusterConfiguration:\n      apiServer:\n        extraArgs:\n          cloud-provider: acme\n      controllerManager:\n        extraArgs:\n          cloud-provider: acme\n    joinConfiguration:\n      controlPlane: {}\n      nodeRegistration:\n        name: '{{ ds.meta_data.local_hostname }}'\n        kubeletExtraArgs:\n          cloud-provider: acme\n---\napiVersion: infrastructure.cluster.x-k8s.io/v1alpha2\nkind: AcmeProviderMachineTemplate\nmetadata:\n  name: my-acmemachinetemplate\n  namespace: default\nspec:\n  osImage:\n    id: objectstore-123456abcdef\n  instanceType: θ9.medium\n  iamInstanceProfile: \"control-plane.cluster-api-provider-acme.x-k8s.io\"\n  sshKeyName: my-ssh-key\n---\napiVersion: infrastructure.cluster.x-k8s.io/v1alpha2\nkind: AcmeCluster\nmetadata:\n  name: my-acmecluster\n  namespace: default\nspec:\n  region: antarctica-1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Infrastructure Machine Template YAML using kubectl\nDESCRIPTION: This command retrieves the YAML definition of a specific infrastructure machine template from the Kubernetes API server and saves it to `file.yaml`. Users should replace `<MachineTemplateType>` with the actual Custom Resource Definition (CRD) kind (e.g., `AWSMachineTemplate`, `AzureMachineTemplate`) and `<name>` with the specific template's name. This exported configuration serves as the starting point for creating a modified template.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/updating-machine-templates.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get <MachineTemplateType> <name> -o yaml > file.yaml\n```\n\n----------------------------------------\n\nTITLE: Initializing VMware Cloud Director Infrastructure Provider\nDESCRIPTION: This command initializes a Kubernetes cluster as a Cluster API management cluster with VMware Cloud Director (VCD) as the infrastructure provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize the management cluster\nclusterctl init --infrastructure vcd\n```\n\n----------------------------------------\n\nTITLE: Executing Cluster API Upgrade Plan in Bash\nDESCRIPTION: This command uses clusterctl to check for available upgrades for Cluster API providers. It displays the current and next versions for each provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/upgrade.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl upgrade plan\n```\n\n----------------------------------------\n\nTITLE: Specifying Requirements for MachinePool Machine Implementation\nDESCRIPTION: Table detailing the functional requirements for implementing MachinePool Machines, linking them to the user stories. Requirements cover Machine creation, health checks, deployment strategy, and node draining.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220209-machinepool-machines.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n--------------------------------------\n| ID | Requirement | Related Stories |\n|----|-------------|-----------------|\n| R1 | The MachinePool controller MUST create Machines representing the provider-specific resources in the MachinePool and enable cascading delete of infrastructure<br>machine resources upon delete of CAPI Machine. | U1 |\n| R2 | The machine health check controller MUST be able to select machines by label which belong to a MachinePool and remediate. | U2 |\n| R3 | The MachinePool API MUST provide an optional deployment strategy using the same type as MachineDeployment.Spec.Strategy. | U3 |\n| R4 | The Machine Controller MUST handle node drain for Machine Pool Machines with the same behavior as MachineDeployment Machines. | U1, U3 |\n--------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites for Cluster API Provider Development on MacOS\nDESCRIPTION: This script installs kubectl, kustomize, and kubebuilder on MacOS using Homebrew. These tools are required for developing a Cluster API provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install kubectl\nbrew install kubernetes-cli\n\n# Install kustomize\nbrew install kustomize\n\n# Install Kubebuilder\nbrew install kubebuilder\n```\n\n----------------------------------------\n\nTITLE: Creating ClusterRole for Non-Standard API Group in Bootstrap Provider\nDESCRIPTION: Example YAML configuration for creating a ClusterRole with the necessary RBAC permissions for a custom bootstrap provider using a non-standard API group. This allows Cluster API core controllers to interact with the provider's resources.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/bootstrap-config.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n    name: capi-foo-clusters\n    labels:\n      cluster.x-k8s.io/aggregate-to-manager: \"true\"\nrules:\n- apiGroups:\n    - bootstrap.foo.com\n  resources:\n    - fooconfig\n    - fooconfigtemplates\n  verbs:\n    - create\n    - delete\n    - get\n    - list\n    - patch\n    - update\n    - watch\n```\n\n----------------------------------------\n\nTITLE: Collecting CAPI pprof Profiles using Kubectl Port-Forward and Curl in Bash\nDESCRIPTION: Demonstrates collecting pprof profiles securely using command-line tools. First, `kubectl port-forward` exposes the CAPI controller manager's diagnostics port (8443). Second, a ServiceAccount token is created (requires prior RBAC setup). Then, `curl` is used with the token to fetch a goroutine dump (`/debug/pprof/goroutine?debug=2`) and a CPU profile (`/debug/pprof/profile?seconds=10`), saving them locally. Finally, `go tool pprof` starts a web server to analyze the collected CPU profile.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/diagnostics.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Terminal 1\nkubectl -n capi-system port-forward deployments/capi-controller-manager 8443\n\n# Terminal 2\nTOKEN=$(kubectl create token default)\n\n# Get a goroutine dump\ncurl \"https://localhost:8443/debug/pprof/goroutine?debug=2\" --header \"Authorization: Bearer $TOKEN\" -k > ./goroutine.txt\n\n# Get a profile\ncurl \"https://localhost:8443/debug/pprof/profile?seconds=10\" --header \"Authorization: Bearer $TOKEN\" -k > ./profile.out\ngo tool pprof -http=:8080 ./profile.out\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites for Cluster API Provider Development on Linux\nDESCRIPTION: This script installs kubectl, kustomize, and kubebuilder on Linux systems. It downloads and configures each tool with proper permissions and places them in the system path.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install kubectl\nKUBECTL_VERSION=$(curl -sfL https://dl.k8s.io/release/stable.txt)\ncurl -fLO https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl\n\n# Install kustomize\ncurl -s \"https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh\"  | bash\nchmod +x ./kustomize && sudo mv ./kustomize /usr/local/bin/kustomize\n\n# Install Kubebuilder\ncurl -sLo kubebuilder https://go.kubebuilder.io/dl/latest/$(go env GOOS)/$(go env GOARCH)\nchmod +x ./kubebuilder && sudo mv ./kubebuilder /usr/local/bin/kubebuilder\n```\n\n----------------------------------------\n\nTITLE: Contributing Process Instructions\nDESCRIPTION: Steps for making code contributions including CLA signing, PR submission, and commit guidelines.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. If you haven't already done so, sign a Contributor License Agreement (see details above).\n1. If working on an issue, signal other contributors that you are actively working on it using `/lifecycle active`.\n1. Fork the desired repo, develop and test your code changes.\n1. Submit a pull request.\n    1. All code PR must be labeled with one of\n        - ⚠️ (`:warning:`, major or breaking changes)\n        - ✨ (`:sparkles:`, feature additions)\n        - 🐛 (`:bug:`, patch and bugfixes)\n        - 📖 (`:book:`, documentation or proposals)\n        - 🌱 (`:seedling:`, minor or other)\n1. If your PR has multiple commits, you must [squash them into a single commit](https://kubernetes.io/docs/contribute/new-content/open-a-pr/#squashing-commits) before merging your PR.\n```\n\n----------------------------------------\n\nTITLE: Initializing KubeVirt Infrastructure Provider\nDESCRIPTION: This command initializes a Kubernetes cluster as a Cluster API management cluster with KubeVirt as the infrastructure provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl init --infrastructure kubevirt\n```\n\n----------------------------------------\n\nTITLE: Creating a Certificate Signing Request for Kubernetes Admin User in Bash\nDESCRIPTION: Creates a new Certificate Signing Request (CSR) for the 'admin' user with the 'system:masters' Kubernetes role. This generates both a private key and a CSR file that will be used for authentication.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/certs/generate-kubeconfig.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req  -subj \"/CN=admin/O=system:masters\" -new -newkey rsa:2048 -nodes -keyout admin.key  -out admin.csr\n```\n\n----------------------------------------\n\nTITLE: Move clusterctl to PATH on macOS (Bash)\nDESCRIPTION: Moves the executable `clusterctl` binary to `/usr/local/bin`, a standard directory included in the system's PATH on macOS. This makes the `clusterctl` command available globally in the terminal. Requires `sudo`.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsudo mv ./clusterctl /usr/local/bin/clusterctl\n```\n\n----------------------------------------\n\nTITLE: Example AfterControlPlaneUpgrade Request (YAML)\nDESCRIPTION: This YAML snippet shows an example request payload for the `AfterControlPlaneUpgrade` hook. It contains the API version, kind, optional settings, the Cluster object, and the Kubernetes version (`kubernetesVersion`) the control plane has been upgraded to. This hook is triggered after the control plane upgrade completes but before the upgrade propagates to MachineDeployments, enabling post-control-plane upgrade tasks.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-lifecycle-hooks.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: hooks.runtime.cluster.x-k8s.io/v1alpha1\nkind: AfterControlPlaneUpgradeRequest\nsettings: <Runtime Extension settings>\ncluster:\n  apiVersion: cluster.x-k8s.io/v1beta1\n  kind: Cluster\n  metadata:\n   name: test-cluster\n   namespace: test-ns\n  spec:\n   ...\n  status:\n   ...\nkubernetesVersion: \"v1.22.0\"\n```\n\n----------------------------------------\n\nTITLE: Running Cluster API tests with local kind cluster\nDESCRIPTION: Shell command for setting up a local kind cluster to speed up test execution. This avoids spinning up a testenv with each test execution and makes debugging easier.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./hack/setup-envtest-with-kind.sh\n```\n\n----------------------------------------\n\nTITLE: Sample Cluster Configuration YAML\nDESCRIPTION: Example YAML configuration for creating a cluster using the custom infrastructure provider, with both the Cluster API Cluster resource and the provider-specific MailgunCluster resource.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/building-running-and-testing.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: Cluster\nmetadata:\n  name: hello-mailgun\nspec:\n  clusterNetwork:\n    pods:\n      cidrBlocks: [\"192.168.0.0/16\"]\n  infrastructureRef:\n    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1\n    kind: MailgunCluster\n    name: hello-mailgun\n---\napiVersion: infrastructure.cluster.x-k8s.io/v1alpha1\nkind: MailgunCluster\nmetadata:\n  name: hello-mailgun\nspec:\n  priority: \"ExtremelyUrgent\"\n  request: \"Please make me a cluster, with sugar on top?\"\n  requester: \"cluster-admin@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Waiting for Control Plane Initialization with Kubectl (Bash)\nDESCRIPTION: This Bash command queries the status of the kubeadmcontrolplane resource in the workload cluster using 'kubectl get'. It is used in a wait loop to verify when the workload cluster control plane becomes initialized and available for further operations. Requires that the workload cluster creation was previously started. Output shows the initialization status, number of replicas, and other metadata.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/ignition.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get kubeadmcontrolplane ignition-cluster-control-plane\\n\n```\n\n----------------------------------------\n\nTITLE: Observing DrainingSucceeded Condition in YAML\nDESCRIPTION: This YAML snippet demonstrates the `DrainingSucceeded` condition, useful for identifying which pods are blocking node draining in a Kubernetes cluster. It provides information on the transition time, message details describing blocked pods, reasons, severity, and status. Requires access to the cluster's machine status information.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/automated-machine-management/machine_deletions.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n  ...\n  conditions:\n  ...\n  - lastTransitionTime: \"2024-08-30T13:36:27Z\"\n    message: |-\n      Drain not completed yet:\n      * Pods with deletionTimestamp that still exist: cert-manager/cert-manager-756d54fb98-hcb6k\n      * Pods with eviction failed:\n        * Cannot evict pod as it would violate the pod's disruption budget. The disruption budget nginx needs 10 healthy pods and has 10 currently: test-namespace/nginx-deployment-6886c85ff7-2jtqm, test-namespace/nginx-deployment-6886c85ff7-7ggsd, test-namespace/nginx-deployment-6886c85ff7-f6z4s, ... (7 more)\n    reason: Draining\n    severity: Info\n    status: \"False\"\n    type: DrainingSucceeded\n```\n\n----------------------------------------\n\nTITLE: Enabling ClusterTopology Feature Gate for Cluster API\nDESCRIPTION: Exports an environment variable to enable the ClusterTopology feature gate, which is required for managed topologies and ClusterClass support.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nexport CLUSTER_TOPOLOGY=true\n```\n\n----------------------------------------\n\nTITLE: Idempotent Reconciliation Implementation\nDESCRIPTION: A complete implementation of the reconciliation logic that ensures idempotency by checking and storing the message ID in the resource status to avoid sending duplicate emails.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/controllers-and-reconciliation.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n    if mgCluster.Status.MessageID != nil {\n        // We already sent a message, so skip reconciliation\n        return ctrl.Result{}, nil\n    }\n    \n    subject := fmt.Sprintf(\"[%s] New Cluster %s requested\", mgCluster.Spec.Priority, cluster.Name)\n    body := fmt.Sprintf(\"Hello! One cluster please.\\n\\n%s\\n\", mgCluster.Spec.Request)\n    \n    msg := mailgun.NewMessage(mgCluster.Spec.Requester, subject, body, r.Recipient)\n    _, msgID, err := r.Mailgun.Send(msg)\n    if err != nil {\n        return ctrl.Result{}, err\n    }\n    \n    // patch from sigs.k8s.io/cluster-api/util/patch\n    helper, err := patch.NewHelper(&mgCluster, r.Client)\n    if err != nil {\n        return ctrl.Result{}, err\n    }\n    mgCluster.Status.MessageID = &msgID\n    if err := helper.Patch(ctx, &mgCluster); err != nil {\n        return ctrl.Result{}, errors.Wrapf(err, \"couldn't patch cluster %q\", mgCluster.Name)\n    }\n    \n    return ctrl.Result{}, nil\n```\n\n----------------------------------------\n\nTITLE: Installing GoReleaser for Cluster API Development\nDESCRIPTION: Command to install GoReleaser, a tool for automating the building and release process for Go applications, used in the Cluster API project.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd cluster-api\nmake goreleaser\n```\n\n----------------------------------------\n\nTITLE: Writing Multiple Test Cases with Shared Objects in Cluster API using Golang\nDESCRIPTION: This snippet illustrates how to write multiple test cases that share objects in Cluster API testing. It demonstrates the use of GenerateName for unique object naming and DeepCopy to prevent side effects between test cases.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/testing.md#2025-04-22_snippet_16\n\nLANGUAGE: golang\nCODE:\n```\nfunc TestAFunc(t *testing.T) {\n\tg := NewWithT(t)\n\t// Generate namespace with a random name starting with ns1; such namespace\n\t// will host test objects in isolation from other tests.\n\tns1, err := env.CreateNamespace(ctx, \"ns1\")\n\tg.Expect(err).ToNot(HaveOccurred())\n\tdefer func() {\n\t\t// Cleanup the test namespace\n\t\tg.Expect(env.DeleteNamespace(ctx, ns1)).To(Succeed())\n\t}()\n\n\tobj := &clusterv1.Cluster{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tGenerateName: \"test-\",  // Instead of assigning a name, use GenerateName\n\t\t\tNamespace:    ns1.Name, // Place test objects in the test namespace\n\t\t},\n\t}\n\n\tt.Run(\"test case 1\", func(t *testing.T) {\n\t\tg := NewWithT(t)\n\t\t// Deep copy the object in each test case, so we prevent side effects in case the object changes.\n\t\t// Additionally, thanks to GenerateName, the objects gets a new name for each test case.\n\t\tobj := obj.DeepCopy()\n\n\t    // Actual test case code...\n\t}\n\tt.Run(\"test case 2\", func(t *testing.T) {\n\t\tg := NewWithT(t)\n\t\tobj := obj.DeepCopy()\n\n\t    // Actual test case code...\n\t}\n\t// More test cases.\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Kind Cluster Status after Custom Creation (Bash)\nDESCRIPTION: Uses `kubectl` to display information about the Kubernetes cluster created with a custom `kind` configuration, verifying its readiness and accessibility after using `kind create cluster --config=...`.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl cluster-info\n```\n\n----------------------------------------\n\nTITLE: Using clusterctl generate provider with Various Options in Bash\nDESCRIPTION: Examples of using the 'clusterctl generate provider' command with different flags to generate provider templates, display provider information, and specify versions. The command fetches provider components from repositories and can perform variable substitution from config files or environment variables.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/generate-provider.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Generates a yaml file for creating provider with variable values using\n# components defined in the provider repository.\nclusterctl generate provider --infrastructure aws\n\n# Generates a yaml file for creating provider for a specific version with variable values using\n# components defined in the provider repository.\nclusterctl generate provider --infrastructure aws:v0.4.1\n\n# Displays information about a specific infrastructure provider.\n# If applicable, prints out the list of required environment variables.\nclusterctl generate provider --infrastructure aws --describe\n\n# Displays information about a specific version of the infrastructure provider.\nclusterctl generate provider --infrastructure aws:v0.4.1 --describe\n\n# Generates a yaml file for creating provider for a specific version.\n# No variables will be processed and substituted using this flag\nclusterctl generate provider --infrastructure aws:v0.4.1 --raw\n```\n\n----------------------------------------\n\nTITLE: Defining InfraCluster Template Types in Go\nDESCRIPTION: Defines the Go structs for an infrastructure cluster template resource including TypeMeta, ObjectMeta and template specification. This template is required for use with ClusterClasses and must follow the naming convention of <InfraCluster>Template.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/infra-cluster.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:object:root=true\n// +kubebuilder:resource:path=fooclustertemplates,scope=Namespaced,categories=cluster-api\n// +kubebuilder:storageversion\n\n// FooClusterTemplate is the Schema for the fooclustertemplates API.\ntype FooClusterTemplate struct {\n    metav1.TypeMeta   `json:\",inline\"`\n    metav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n    Spec FooClusterTemplateSpec `json:\"spec,omitempty\"`\n}\n\ntype FooClusterTemplateSpec struct {\n    Template FooClusterTemplateResource `json:\"template\"`\n}\n\ntype FooClusterTemplateResource struct {\n    // Standard object's metadata.\n    // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n    // +optional\n    ObjectMeta clusterv1.ObjectMeta `json:\"metadata,omitempty\"`\n    Spec FooClusterSpec `json:\"spec\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Kustomize\nDESCRIPTION: Illustrates the directory structure used for organizing Kustomize manifests, including a base directory and overlays.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/using-kustomize.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\\n├── base\\n│   ├── base.yaml\\n│   └── kustomization.yaml\\n└── overlays\\n    ├── custom-ami\\n    │   ├── custom-ami.json\\n    │   └── kustomization.yaml\\n    └── mhc\\n        ├── kustomization.yaml\\n        └── workload-mhc.yaml\n```\n\n----------------------------------------\n\nTITLE: Example MachineHealthCheck YAML Configuration\nDESCRIPTION: Sample YAML configuration for a MachineHealthCheck resource that includes a reference to a Metal3RemediationTemplate. This demonstrates how to specify a custom remediation template for a group of machines.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20191030-machine-health-checking.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: MachineHealthCheck\napiVersion: cluster.x-k8s.io/v1alphaX\nmetadata:\n  name: REMEDIATION_GROUP\n  namespace: NAMESPACE_OF_UNHEALTHY_MACHINE\nspec:\n  selector:\n    matchLabels: \n      ...\n  remediationTemplate:\n    kind: Metal3RemediationTemplate\n    apiVersion: remediation.metal3.io/v1alphaX\n    name: M3_REMEDIATION_GROUP\n```\n\n----------------------------------------\n\nTITLE: Securing Cross-Namespace ClusterClass Reference with ValidatingAdmissionPolicy - Kubernetes YAML\nDESCRIPTION: A group of YAML manifests that together enforce and secure cross-namespace ClusterClass references in the Cluster resource. The ValidatingAdmissionPolicy controls which namespaces a Cluster may reference for ClusterClass, Binding ties the policy to a Secret resource containing allowed namespaces, and the Secret provides the actual configuration. This set must be deployed together and requires Kubernetes >= v1.25 with ValidatingAdmissionPolicy CRD enabled.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: admissionregistration.k8s.io/v1\\nkind: ValidatingAdmissionPolicy\\nmetadata:\\n  name: \"cluster-class-ref.cluster.x-k8s.io\"\\nspec:\\n  failurePolicy: Fail\\n  paramKind:\\n    apiVersion: v1\\n    kind: Secret\\n  matchConstraints:\\n    resourceRules:\\n    - apiGroups:   [\"cluster.x-k8s.io\"]\\n      apiVersions: [\"v1beta1\"]\\n      operations:  [\"CREATE\", \"UPDATE\"]\\n      resources:   [\"clusters\"]\\n  validations:\\n    - expression: \"!has(object.spec.topology.classNamespace) || object.spec.topology.classNamespace in params.data\"\\n---\\napiVersion: admissionregistration.k8s.io/v1\\nkind: ValidatingAdmissionPolicyBinding\\nmetadata:\\n  name: \"cluster-class-ref-binding.cluster.x-k8s.io\"\\nspec:\\n  policyName: \"cluster-class-ref.cluster.x-k8s.io\"\\n  validationActions: [Deny]\\n  paramRef:\\n    name: \"allowed-namespaces.cluster-class-ref.cluster.x-k8s.io\"\\n    namespace: \"default\"\\n    parameterNotFoundAction: Deny\\n---\\napiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: \"allowed-namespaces.cluster-class-ref.cluster.x-k8s.io\"\\n  namespace: \"default\"\\ndata:\\n  default: \"\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Management Cluster with Clusterctl and AWS (Bash)\nDESCRIPTION: This Bash snippet sets up all required AWS environment variables and runs commands to provision AWS IAM resources and store credentials in a Kubernetes secret for the management cluster. It enables Ignition bootstrap feature gates and initializes the management cluster by running 'clusterctl init' with AWS infrastructure. Requires 'kubectl', 'clusterawsadm', and the AWS CLI. Inputs are AWS credentials and optional region; output is that the management cluster is ready for workload cluster deployment.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/ignition.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_REGION=us-east-1\\nexport AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE\\nexport AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\\n\\n# Workload clusters need to call the AWS API as part of their normal operation.\\n# The following command creates a CloudFormation stack which provisions the\\n# necessary IAM resources to be used by workload clusters.\\nclusterawsadm bootstrap iam create-cloudformation-stack\\n\\n# The management cluster needs to call the AWS API in order to manage cloud\\n# resources for workload clusters. The following command tells clusterctl to\\n# store the AWS credentials provided before in a Kubernetes secret where they\\n# can be retrieved by the AWS provider running on the management cluster.\\nexport AWS_B64ENCODED_CREDENTIALS=$(clusterawsadm bootstrap credentials encode-as-profile)\\n\\n# Enable the feature gates controlling Ignition bootstrap.\\nexport EXP_KUBEADM_BOOTSTRAP_FORMAT_IGNITION=true # Used by the kubeadm bootstrap provider\\nexport EXP_BOOTSTRAP_FORMAT_IGNITION=true # Used by the AWS provider\\n\\n# Initialize the management cluster.\\nclusterctl init --infrastructure aws\\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Generated Code and Manifests\nDESCRIPTION: Command to verify that all generated code and Kubernetes manifests in the Cluster API project are up-to-date, which is important for pull request validation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/CONTRIBUTING.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncd cluster-api\nmake verify\n```\n\n----------------------------------------\n\nTITLE: Install clusterctl with Homebrew (Bash)\nDESCRIPTION: Installs the `clusterctl` command-line tool using the Homebrew package manager on macOS or Linux. This command fetches and installs the latest available release.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nbrew install clusterctl\n```\n\n----------------------------------------\n\nTITLE: Creating a MachineHealthCheck for KubeadmControlPlane Nodes in Cluster API\nDESCRIPTION: YAML configuration for a MachineHealthCheck that monitors control plane nodes managed by KubeadmControlPlane. This example uses a selector targeting control plane nodes and defines health check conditions with a 5-minute timeout.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/automated-machine-management/healthchecking.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: MachineHealthCheck\nmetadata:\n  name: capi-quickstart-kcp-unhealthy-5m\nspec:\n  clusterName: capi-quickstart\n  maxUnhealthy: 100%\n  selector:\n    matchLabels:\n      cluster.x-k8s.io/control-plane: \"\"\n  unhealthyConditions:\n    - type: Ready\n      status: Unknown\n      timeout: 300s\n    - type: Ready\n      status: \"False\"\n      timeout: 300s\n```\n\n----------------------------------------\n\nTITLE: Setting Cluster Topology Variables (YAML)\nDESCRIPTION: This YAML snippet shows a Cluster resource definition in Cluster API (v1beta1). It illustrates how end-users set specific values for variables defined in the corresponding ClusterClass (including those discovered via external hooks like `http-proxy` or defined inline like `no-proxy`) within the `spec.topology.variables` section. This allows customization of the cluster topology based on the ClusterClass template.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-topology-mutation-hook.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: Cluster\n#metadata \nspec:\n    topology:\n      variables:\n        - name: no-proxy\n          value: \"internal.domain.com\"\n        - name: http-proxy\n          value: http://proxy.example2.com:1234\n```\n\n----------------------------------------\n\nTITLE: Setting up DigitalOcean Credentials for Cluster API\nDESCRIPTION: This script exports the DigitalOcean access token and creates a base64 encoded version for use with Cluster API's DigitalOcean provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nexport DIGITALOCEAN_ACCESS_TOKEN=<your-access-token>\nexport DO_B64ENCODED_CREDENTIALS=\"$(echo -n \"${DIGITALOCEAN_ACCESS_TOKEN}\" | base64 | tr -d '\\n')\"\n\n# Initialize the management cluster\nclusterctl init --infrastructure digitalocean\n```\n\n----------------------------------------\n\nTITLE: Configuring KubeadmConfigTemplate with KubeletConfiguration file\nDESCRIPTION: This example demonstrates configuring worker nodes' kubelet by placing a KubeletConfiguration file on nodes using KubeadmConfigSpec.files and making kubelet use it via kubeletExtraArgs in the joinConfiguration section.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/kubeadm-bootstrap/kubelet-config.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: bootstrap.cluster.x-k8s.io/v1beta1\nkind: KubeadmConfigTemplate\nmetadata:\n  name: cloudinit-default-worker-bootstraptemplate\n  namespace: default\nspec:\n  template:\n    spec:\n      files:\n      # We puts a KubeletConfiguration file on nodes via KubeadmConfigSpec.files\n      # In this example, we directly put the file content in the KubeadmConfigSpec.files.content field.\n      - path: /etc/kubernetes/kubelet/config.yaml\n        owner: \"root:root\"\n        permissions: \"0644\"\n        content: |\n          apiVersion: kubelet.config.k8s.io/v1beta1\n          kind: KubeletConfiguration\n          kubeReserved:\n            cpu: \"1\"\n            memory: \"2Gi\"\n            ephemeral-storage: \"1Gi\"\n          systemReserved:\n            cpu: \"500m\"\n            memory: \"1Gi\"\n            ephemeral-storage: \"1Gi\"\n          evictionHard:\n            memory.available: \"500Mi\"\n            nodefs.available: \"10%\"\n          authentication:\n            anonymous:\n              enabled: false\n            webhook:\n              cacheTTL: 0s\n              enabled: true\n            x509:\n              clientCAFile: /etc/kubernetes/pki/ca.crt\n          authorization:\n            mode: Webhook\n            webhook:\n              cacheAuthorizedTTL: 0s\n              cacheUnauthorizedTTL: 0s\n          cgroupDriver: systemd\n          clusterDNS:\n          - 10.128.0.10\n          clusterDomain: cluster.local\n          containerRuntimeEndpoint: \"\"\n          cpuManagerReconcilePeriod: 0s\n          evictionPressureTransitionPeriod: 0s\n          fileCheckFrequency: 0s\n          healthzBindAddress: 127.0.0.1\n          healthzPort: 10248\n          httpCheckFrequency: 0s\n          imageMinimumGCAge: 0s\n          logging:\n            flushFrequency: 0\n            options:\n              json:\n                infoBufferSize: \"0\"\n            verbosity: 0\n          memorySwap: {}\n          nodeStatusReportFrequency: 0s\n          nodeStatusUpdateFrequency: 0s\n          rotateCertificates: true\n          runtimeRequestTimeout: 0s\n          shutdownGracePeriod: 0s\n          shutdownGracePeriodCriticalPods: 0s\n          staticPodPath: /etc/kubernetes/manifests\n          streamingConnectionIdleTimeout: 0s\n          syncFrequency: 0s\n          volumeStatsAggPeriod: 0s\n      joinConfiguration:\n        nodeRegistration:\n          criSocket: unix:///var/run/containerd/containerd.sock\n          # Here we configure kubelet to use the KubeletConfiguration file we put on nodes via KubeadmConfigSpec.files\n          kubeletExtraArgs:\n            config: \"/etc/kubernetes/kubelet/config.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Loading Local Docker Images into Kind Cluster\nDESCRIPTION: Commands to load locally built Docker images into a kind cluster for use with Cluster API development.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/developers.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkind load docker-image gcr.io/k8s-staging-cluster-api/cluster-api-controller-amd64:dev\nkind load docker-image gcr.io/k8s-staging-cluster-api/kubeadm-bootstrap-controller-amd64:dev\nkind load docker-image gcr.io/k8s-staging-cluster-api/kubeadm-control-plane-controller-amd64:dev\nkind load docker-image gcr.io/k8s-staging-cluster-api/capd-manager-amd64:dev\n```\n\n----------------------------------------\n\nTITLE: Loading clusterctl completions for Zsh\nDESCRIPTION: This command generates the clusterctl completion script for Zsh and adds it to the first directory in the fpath array, enabling completions for each session.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/completion.md#2025-04-22_snippet_5\n\nLANGUAGE: zsh\nCODE:\n```\nclusterctl completion zsh > \"${fpath[1]}/_clusterctl\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom ControlPlaneTemplate Resource in Kubernetes Cluster API (Go)\nDESCRIPTION: This Go code defines the FooControlPlaneTemplate custom resource for Kubernetes Cluster API providers using Go structs and kubebuilder annotations. It creates a root API object, specifies resource metadata, and embeds the ControlPlaneSpec into the template resource for flexible clustering. This implementation requires the 'metav1' and 'clusterv1' packages and is typically used as part of a CRD manifest for provider APIs. Inputs are serialized as JSON and adhere to Cluster API metadata and specification conventions; outputs are managed as Kubernetes CR instances. The snippet presumes the developer uses controller-runtime and kubebuilder for CRD generation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/control-plane.md#2025-04-22_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\n// +kubebuilder:object:root=true\\n// +kubebuilder:resource:path=foocontrolplanetemplates,scope=Namespaced,categories=cluster-api\\n// +kubebuilder:storageversion\\n\\n// FooControlPlaneTemplate is the Schema for the fooclustertemplates API.\\ntype FooControlPlaneTemplate struct {\\n    metav1.TypeMeta   `json:\\\",inline\\\"`\\n    metav1.ObjectMeta `json:\\\"metadata,omitempty\\\"`\\n\\n    Spec FooControlPlaneTemplateSpec `json:\\\"spec,omitempty\\\"`\\n}\\n\\ntype FooControlPlaneTemplateSpec struct {\\n    Template FooControlPlaneTemplateResource `json:\\\"template\\\"`\\n}\\n\\ntype FooControlPlaneTemplateResource struct {\\n    // Standard object's metadata.\\n    // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\\n    // +optional\\n    ObjectMeta clusterv1.ObjectMeta `json:\\\"metadata,omitempty\\\"`\\n    Spec FooControlPlaneSpec `json:\\\"spec\\\"`\\n}\n```\n\n----------------------------------------\n\nTITLE: Making a clusterctl Plugin Executable\nDESCRIPTION: Command to make the plugin script executable using chmod. This is a required step before the plugin can be used with clusterctl.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo chmod +x ./clusterctl-foo\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Features with Environment Variables and clusterctl - YAML\nDESCRIPTION: This snippet demonstrates how to export an environment variable to enable a specific experimental feature in Cluster API before running 'clusterctl init' for cluster bootstrapping, followed by an example clusterctl command. It is prerequisite to have clusterctl installed and properly configured, and the relevant infrastructure provider (here, vsphere) available. Parameters include the feature flag environment variable and the infrastructure name. Inputs: environment variable setting. Output: initialization of cluster API with the feature enabled. Limitations: Only enables features that are supported and built-in to your version of clusterctl.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/experimental-features.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexport EXP_SOME_FEATURE_NAME=true\n\nclusterctl init --infrastructure vsphere\n```\n\n----------------------------------------\n\nTITLE: Configuring KubeadmControlPlaneTemplate with KubeletConfiguration file\nDESCRIPTION: This example shows how to configure kubelet by placing a KubeletConfiguration file on nodes using KubeadmConfigSpec.files and making kubelet use it via kubeletExtraArgs. It sets various configurations like resource reservations and authentication settings.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/kubeadm-bootstrap/kubelet-config.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: controlplane.cluster.x-k8s.io/v1beta1\nkind: KubeadmControlPlaneTemplate\nmetadata:\n  name: cloudinit-control-plane\n  namespace: default\nspec:\n  template:\n    spec:\n      kubeadmConfigSpec:\n        files:\n        # We put a KubeletConfiguration file on nodes via KubeadmConfigSpec.files\n        # In this example, we directly put the file content in the KubeadmConfigSpec.files.content field.\n        - path: /etc/kubernetes/kubelet/config.yaml\n          owner: \"root:root\"\n          permissions: \"0644\"\n          content: |\n            apiVersion: kubelet.config.k8s.io/v1beta1\n            kind: KubeletConfiguration\n            kubeReserved:\n              cpu: \"1\"\n              memory: \"2Gi\"\n              ephemeral-storage: \"1Gi\"\n            systemReserved:\n              cpu: \"500m\"\n              memory: \"1Gi\"\n              ephemeral-storage: \"1Gi\"\n            evictionHard:\n              memory.available: \"500Mi\"\n              nodefs.available: \"10%\"\n            authentication:\n              anonymous:\n                enabled: false\n              webhook:\n                cacheTTL: 0s\n                enabled: true\n              x509:\n                clientCAFile: /etc/kubernetes/pki/ca.crt\n            authorization:\n              mode: Webhook\n              webhook:\n                cacheAuthorizedTTL: 0s\n                cacheUnauthorizedTTL: 0s\n            cgroupDriver: systemd\n            clusterDNS:\n            - 10.128.0.10\n            clusterDomain: cluster.local\n            containerRuntimeEndpoint: \"\"\n            cpuManagerReconcilePeriod: 0s\n            evictionPressureTransitionPeriod: 0s\n            fileCheckFrequency: 0s\n            healthzBindAddress: 127.0.0.1\n            healthzPort: 10248\n            httpCheckFrequency: 0s\n            imageMinimumGCAge: 0s\n            logging:\n              flushFrequency: 0\n              options:\n                json:\n                  infoBufferSize: \"0\"\n              verbosity: 0\n            memorySwap: {}\n            nodeStatusReportFrequency: 0s\n            nodeStatusUpdateFrequency: 0s\n            rotateCertificates: true\n            runtimeRequestTimeout: 0s\n            shutdownGracePeriod: 0s\n            shutdownGracePeriodCriticalPods: 0s\n            staticPodPath: /etc/kubernetes/manifests\n            streamingConnectionIdleTimeout: 0s\n            syncFrequency: 0s\n            volumeStatsAggPeriod: 0s\n        initConfiguration:\n          nodeRegistration:\n            criSocket: unix:///var/run/containerd/containerd.sock\n            # Here we configure kubelet to use the KubeletConfiguration file we put on nodes via KubeadmConfigSpec.files\n            kubeletExtraArgs:\n              config: \"/etc/kubernetes/kubelet/config.yaml\"\n        joinConfiguration:\n          nodeRegistration:\n            criSocket: unix:///var/run/containerd/containerd.sock\n            # Here we configure kubelet to use the KubeletConfiguration file we put on nodes via KubeadmConfigSpec.files\n            kubeletExtraArgs:\n              config: \"/etc/kubernetes/kubelet/config.yaml\"\n```\n\n----------------------------------------\n\nTITLE: KubeadmConfig Example with PreKubeadmCommands\nDESCRIPTION: This snippet shows how to specify commands to be executed before kubeadm init/join using the PreKubeadmCommands field in KubeadmConfig.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/kubeadm-bootstrap/index.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\npreKubeadmCommands:\n  - hostname \"{{ ds.meta_data.hostname }}\"\n  - echo \"{{ ds.meta_data.hostname }}\" >/etc/hostname\n```\n\n----------------------------------------\n\nTITLE: Deleting Management Cluster\nDESCRIPTION: This command deletes the Kind-based management cluster, completing the cleanup process.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_92\n\nLANGUAGE: bash\nCODE:\n```\nkind delete cluster\n```\n\n----------------------------------------\n\nTITLE: Defining BootstrapConfigTemplate Custom Resource (Kubernetes/Go)\nDESCRIPTION: This Go code snippet defines the FooConfigTemplate, FooConfigTemplateSpec, and FooConfigTemplateResource structs, modeling a custom BootstrapConfigTemplate resource in the Kubernetes Cluster API. It utilizes Kubebuilder annotations to generate CRD YAML manifests and ensures that each template references a FooConfigSpec embedded from the BootstrapConfig. Dependencies include the controller-runtime libraries and appropriate generated FooConfigSpec type. Key parameters include template metadata and the nested spec structure, with the output being a valid Kubernetes API Go type suitable for code generation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/bootstrap-config.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:object:root=true\\n// +kubebuilder:resource:path=fooconfigtemplates,scope=Namespaced,categories=cluster-api\\n// +kubebuilder:storageversion\\n\\n// FooConfigTemplate is the Schema for the fooconfigtemplates API.\\ntype FooConfigTemplate struct {\\n    metav1.TypeMeta   `json:\",inline\"`\\n    metav1.ObjectMeta `json:\"metadata,omitempty\"`\\n\\n    Spec FooConfigTemplateSpec `json:\"spec,omitempty\"`\\n}\\n\\ntype FooConfigTemplateSpec struct {\\n    Template FooConfigTemplateResource `json:\"template\"`\\n}\\n\\ntype FooConfigTemplateResource struct {\\n    // Standard object's metadata.\\n    // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\\n    // +optional\\n    ObjectMeta clusterv1.ObjectMeta `json:\"metadata,omitempty\"`\\n    Spec FooConfigSpec `json:\"spec\"`\\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing ArgoCD Console in Bash\nDESCRIPTION: The provided bash commands facilitate accessing the ArgoCD console via port forwarding, requiring a Kubernetes setup with ArgoCD installed. The commands retrieve the initial admin password and set up a secure connection to the ArgoCD server on localhost. Required input includes Kubernetes secret access.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/workload-bootstrap-gitops.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Get the admin password\nkubectl get secrets argocd-initial-admin-secret -n argocd --template=\"{{index .data.password | base64decode}}\"\nkubectl port-forward service/capiargo-argocd-server -n default 8080:443\n# and then open the browser on http://localhost:8080 and accept the certificate\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Workload Cluster Kubeconfig with Kind\nDESCRIPTION: Command to get the kubeconfig for a CAPD workload cluster when using Docker Desktop on macOS, Linux, or Windows.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/developers.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkind get kubeconfig --name capi-quickstart > capi-quickstart.kubeconfig\n```\n\n----------------------------------------\n\nTITLE: Configuring KubeadmConfigTemplate YAML\nDESCRIPTION: Demonstrates the configuration of a KubeadmConfigTemplate for bootstrapping worker nodes. This setup illustrates the use of patch files to alter kubelet configurations via the 'KubeadmConfigSpec.files' in a Kubernetes cluster deployment.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/kubeadm-bootstrap/kubelet-config.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: bootstrap.cluster.x-k8s.io/v1beta1\nkind: KubeadmConfigTemplate\nmetadata:\n  name: kubeadm-config-template-default-worker-bootstraptemplate\n  namespace: default\nspec:\n  template:\n    spec:\n      files:\n      # Here we put a patch file for kubeletconfiguration target in strategic patchtype on nodes via KubeadmConfigSpec.files\n      # The naming convention of the patch file is kubeletconfiguration{suffix}+{patchtype}.json where {suffix} is an string and {patchtype} is one of the following: strategic, merge, json.\n      # {suffix} determines the order of the patch files. The patches are applied in the alpha-numerical order of the {suffix}.\n      - path: /etc/kubernetes/patches/kubeletconfiguration0+strategic.json\n        owner: \"root:root\"\n        permissions: \"0644\"\n        content: |\n          {\n            \"apiVersion\": \"kubelet.config.k8s.io/v1beta1\",\n            \"kind\": \"KubeletConfiguration\",\n            \"kubeReserved\": {\n              \"cpu\": \"1\",\n              \"memory\": \"2Gi\",\n              \"ephemeral-storage\": \"1Gi\",\n            },\n            \"systemReserved\": {\n              \"cpu\": \"500m\",\n              \"memory\": \"1Gi\",\n              \"ephemeral-storage\": \"1Gi\",\n            },\n            \"evictionHard\": {\n              \"memory.available\": \"500Mi\",\n              \"nodefs.available\": \"10%\",\n            },\n          }\n      joinConfiguration:\n        nodeRegistration:\n          criSocket: unix:///var/run/containerd/containerd.sock\n        # Here we specify the directory that contains the patch files\n        patches:\n          directory: /etc/kubernetes/patches\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic clusterctl Plugin in Bash\nDESCRIPTION: A sample bash script that implements a simple clusterctl plugin named 'foo' with version and environment variable handling. The plugin demonstrates basic argument handling and output functionality.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# optional argument handling\nif [[ \"$1\" == \"version\" ]]\nthen\necho \"1.0.0\"\nexit 0\nfi\n\n# optional argument handling\nif [[ \"$1\" == \"example-env-var\" ]]\nthen\n    echo \"$EXAMPLE_ENV_VAR\"\n    exit 0\nfi\n\necho \"I am a plugin named clusterctl-foo\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Version Checking in Clusterctl\nDESCRIPTION: To prevent clusterctl from automatically checking for new versions, set the CLUSTERCTL_DISABLE_VERSIONCHECK environment variable to \"true\". This is useful for environments with restricted internet access or when you want to avoid the update check delay.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nCLUSTERCTL_DISABLE_VERSIONCHECK=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Scaling ControlPlane with kubectl\nDESCRIPTION: This snippet demonstrates how to scale the ControlPlane by adjusting the replicas field in the Cluster's topology using kubectl. Proper control plane scaling ensures sufficient availability and resilience of the Kubernetes API server.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/operate-cluster.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl  patch cluster capi-quickstart --type json --patch '[{\"op\": \"replace\", \"path\": \"/spec/topology/controlPlane/replicas\",  \"value\": 1}]'\n```\n\n----------------------------------------\n\nTITLE: Testing Runtime Extensions via kubectl proxy and curl\nDESCRIPTION: Commands for testing Runtime Extensions using kubectl proxy and curl to send Discovery Requests.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-extensions.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl proxy\ncurl -X 'POST' 'http://127.0.0.1:8001/api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery' \\\n  -d '{\"apiVersion\":\"hooks.runtime.cluster.x-k8s.io/v1alpha1\",\"kind\":\"DiscoveryRequest\"}' | jq\n```\n\n----------------------------------------\n\nTITLE: Filtering logs by cluster name and reconcile ID\nDESCRIPTION: This query filters logs for a specific cluster and reconcile ID, allowing tracking of a single reconciliation loop execution.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/logging.md#2025-04-22_snippet_4\n\nLANGUAGE: logql\nCODE:\n```\n{app=\"capi-controller-manager\"} | json | Cluster_name=\"my-cluster\" reconcileID=\"6f6ad971-bdb6-4fa3-b803-xxxxxxxxxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Forwarding Control Plane Port for In-Memory Cluster Access (Shell)\nDESCRIPTION: This shell script sets environment variables for the target namespace and cluster name, retrieves the control plane endpoint port using `kubectl`, and then forwards this port from the `capim-controller-manager` deployment in the `capim-system` namespace to the local machine. This allows direct interaction with the fake API server of the in-memory cluster. Requires `kubectl` configured for the management cluster and the specified namespace and cluster to exist.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/test/infrastructure/docker/internal/controllers/backends/inmemory/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# NOTE: use namespace and name of the cluster you want to connect to\nexport NAMESPACE=default \nexport CLUSTER_NAME=in-memory-development-11461\n\nexport CONTROL_PLANE_ENDPOINT_PORT=$(k get cluster -n $NAMESPACE $CLUSTER_NAME  -o=jsonpath='{.spec.controlPlaneEndpoint.port}')\n\nkubectl port-forward -n capim-system deployments/capim-controller-manager $CONTROL_PLANE_ENDPOINT_PORT\n```\n\n----------------------------------------\n\nTITLE: KubeadmConfig Example with Custom Users\nDESCRIPTION: This snippet shows how to create additional users on the machine using the Users field in KubeadmConfig. It includes SSH authorized keys and sudo permissions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/kubeadm-bootstrap/index.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nusers:\n  - name: capiuser\n    sshAuthorizedKeys:\n    - '${SSH_AUTHORIZED_KEY}'\n    sudo: ALL=(ALL) NOPASSWD:ALL\n```\n\n----------------------------------------\n\nTITLE: Initializing vcluster Infrastructure Provider\nDESCRIPTION: This command initializes a Kubernetes cluster as a Cluster API management cluster with vcluster as the infrastructure provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl init --infrastructure vcluster\n```\n\n----------------------------------------\n\nTITLE: Defining a VSphereMachineTemplate with IPAM in YAML for Cluster API\nDESCRIPTION: This example shows how to use IPAM in a VSphereMachineTemplate. It demonstrates referencing an IP Pool for network device configuration instead of using DHCP.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220125-ipam-integration.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: infrastructure.cluster.x-k8s.io/v1alpha3\nkind: VSphereMachineTemplate\nmetadata:\n  name: example\n  namespace: vsphere-site1\nspec:\n  template:\n    spec:\n      cloneMode: FullClone\n      numCPUs: 8\n      memoryMiB: 8192\n      diskGiB: 45\n      network:\n        devices:\n        - dhcp4: false\n          fromPool: # reference to the pool\n            group: ipam.cluster.x-k8s.io/v1alpha1\n            kind: IPPool\n            name: testpool\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster Labeling for ArgoCD Bootstrap in YAML\nDESCRIPTION: This YAML snippet provides an example of how to configure cluster metadata with labels `argoCDChart: enabled` and `guestbook: enabled` necessary for bootstrapping a workload cluster with ArgoCD. No dependencies are required other than Cluster API setup commands. This configuration expects a Kubernetes workload cluster manifest with metadata section for labels.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/workload-bootstrap-gitops.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: Cluster\nmetadata:\n  name: my-cluster\n  namespace: default\n  labels:\n    argoCDChart: enabled\n    guestbook: enabled\n\n```\n\n----------------------------------------\n\nTITLE: KubeadmConfig Example with Experimental Retry Join\nDESCRIPTION: This snippet demonstrates how to enable the experimental retry join feature which replaces basic kubeadm commands with a shell script that includes retry logic for join operations.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/kubeadm-bootstrap/index.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nuseExperimentalRetryJoin: true\n```\n\n----------------------------------------\n\nTITLE: Create Kind Config for Docker Provider (Bash)\nDESCRIPTION: Creates a YAML configuration file (`kind-cluster-with-extramounts.yaml`) for `kind`. This configuration enables dual-stack networking (IPv4/IPv6) and mounts the host's Docker socket (`/var/run/docker.sock`) into the control plane node. This is necessary for the Cluster API Docker infrastructure provider (CAPD) to function.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat > kind-cluster-with-extramounts.yaml <<EOF\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnetworking:\n  ipFamily: dual\nnodes:\n- role: control-plane\n  extraMounts:\n    - hostPath: /var/run/docker.sock\n      containerPath: /var/run/docker.sock\nEOF\n```\n\n----------------------------------------\n\nTITLE: Specifying MachineDeployment Custom Naming Strategy in ClusterClass - Kubernetes YAML\nDESCRIPTION: This YAML defines a custom 'namingStrategy' template for MachineDeployment objects within a ClusterClass. The template incorporates the cluster name, machineDeployment topologyName, and a random string, ensuring uniqueness and traceability. Cluster API controller evaluates these variables at runtime; requires matching machine deployment class configuration. Useful for environments requiring distinct MachineDeployment names.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\\nkind: ClusterClass\\nmetadata:\\n  name: docker-clusterclass-v0.1.0\\nspec:\\n  controlPlane:\\n    ...\\n  workers:\\n    machineDeployments:\\n    - class: default-worker\\n      ...\\n      namingStrategy:\\n        template: \"{{ .cluster.name }}-{{ .machineDeployment.topologyName }}-{{ .random }}\"\n```\n\n----------------------------------------\n\nTITLE: KubeadmConfig Example for Additional Control Plane Nodes\nDESCRIPTION: This snippet demonstrates the KubeadmConfig for additional control plane nodes, which use joinConfiguration with the controlPlane field to join an existing cluster as control plane members.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/kubeadm-bootstrap/index.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: KubeadmConfig\napiVersion: bootstrap.cluster.x-k8s.io/v1beta1\nmetadata:\n  name: my-control-plane2-config\nspec:\n  joinConfiguration:\n    nodeRegistration:\n      nodeRegistration: {} # node registration parameters are automatically injected by CAPD according to the kindest/node image in use.\n    controlPlane: {}\n```\n\n----------------------------------------\n\nTITLE: Generating and Applying vcluster Cluster Configuration\nDESCRIPTION: Commands to create a namespace and generate a vcluster configuration with specified parameters, applying it directly to the Kubernetes cluster.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_71\n\nLANGUAGE: bash\nCODE:\n```\nexport CLUSTER_NAME=kind\nexport CLUSTER_NAMESPACE=vcluster\nexport KUBERNETES_VERSION=1.31.2\nexport HELM_VALUES=\"service:\\n  type: NodePort\"\n\nkubectl create namespace ${CLUSTER_NAMESPACE}\nclusterctl generate cluster ${CLUSTER_NAME} \\\n    --infrastructure vcluster \\\n    --kubernetes-version ${KUBERNETES_VERSION} \\\n    --target-namespace ${CLUSTER_NAMESPACE} | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Implementing Version Fields in ControlPlane Status for Cluster API\nDESCRIPTION: Required fields for tracking Kubernetes version in ControlPlane status. The version field represents the minimum Kubernetes version across all control plane machines and is used for upgrade tracking and version skew policy enforcement.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/control-plane.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype FooControlPlaneStatus struct {\n    // version represents the minimum Kubernetes version for the control plane machines\n    // in the cluster.\n    // +optional\n    Version *string `json:\"version,omitempty\"`\n    \n    // See other rules for more details about mandatory/optional fields in ControlPlane status.\n    // Other fields SHOULD be added based on the needs of your provider.\n}\n```\n\n----------------------------------------\n\nTITLE: Example Cosign Verification Output (Text)\nDESCRIPTION: This text block shows the expected output structure after successfully running the `cosign verify` command (piped through `jq`). It confirms the verification checks performed (cosign claims, transparency log, trusted CA) and displays detailed signature information, including identity, image digest, issuer, subject, and transparency log bundle details.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/verify-container-images.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nVerification for registry.k8s.io/cluster-api/cluster-api-controller:v1.5.0 --\nThe following checks were performed on each of these signatures:\n  - The cosign claims were validated\n  - Existence of the claims in the transparency log was verified offline\n  - The code-signing certificate was verified using trusted certificate authority certificates\n[\n  {\n    \"critical\": {\n      \"identity\": {\n        \"docker-reference\": \"registry.k8s.io/cluster-api/cluster-api-controller\"\n      },\n      \"image\": {\n        \"docker-manifest-digest\": \"sha256:f34016d3a494f9544a16137c9bba49d8756c574a0a1baf96257903409ef82f77\"\n      },\n      \"type\": \"cosign container image signature\"\n    },\n    \"optional\": {\n      \"1.3.6.1.4.1.57264.1.1\": \"https://accounts.google.com\",\n      \"Bundle\": {\n        \"SignedEntryTimestamp\": \"MEYCIQDtxr/v3uRl2QByVfYo1oopruADSaH3E4wThpmkibJs8gIhAIe0odbk99na5GBdYGjJ6IwpFzhlTlicgWOrsgxZH8LC\",\n        \"Payload\": {\n          \"body\": \"eyJhcGlWZXJzaW9uIjoiMC4wLjEiLCJraW5kIjoiaGFzaGVkcmVrb3JkIiwic3BlYyI6eyJkYXRhIjp7Imhhc2giOnsiYWxnb3JpdGhtIjoic2hhMjU2IiwidmFsdWUiOiIzMDMzNzY0MTQwZmI2OTE5ZjRmNDg2MDgwMDZjYzY1ODU2M2RkNjE0NWExMzVhMzE5MmQyYTAzNjE1OTRjMTRlIn19LCJzaWduYXR1cmUiOnsiY29udGVudCI6Ik1FUUNJQ3RtcGdHN3RDcXNDYlk0VlpXNyt6Rm5tYWYzdjV4OTEwcWxlWGppdTFvbkFpQS9JUUVSSDErdit1a0hrTURSVnZnN1hPdXdqTTN4REFOdEZyS3NUMHFzaUE9PSIsInB1YmxpY0tleSI6eyJjb250ZW50IjoiTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVTTJha05EUVc1SFowRjNTVUpCWjBsVldqYzNUbGRSV1VacmQwNTVRMk13Y25GWWJIcHlXa3RyYURjMGQwTm5XVWxMYjFwSmVtb3dSVUYzVFhjS1RucEZWazFDVFVkQk1WVkZRMmhOVFdNeWJHNWpNMUoyWTIxVmRWcEhWakpOVWpSM1NFRlpSRlpSVVVSRmVGWjZZVmRrZW1SSE9YbGFVekZ3WW01U2JBcGpiVEZzV2tkc2FHUkhWWGRJYUdOT1RXcE5kMDU2U1RGTlZHTjNUa1JOTlZkb1kwNU5hazEzVG5wSk1VMVVZM2hPUkUwMVYycEJRVTFHYTNkRmQxbElDa3R2V2tsNmFqQkRRVkZaU1V0dldrbDZhakJFUVZGalJGRm5RVVZ4VEdveFJsSmhLM2RZTUVNd0sxYzFTVlZWUW14UmRsWkNWM2xLWTFRcmFWaERjV01LWTA4d1prVmpNV2s0TVUxSFQwRk1lVXB2UXpGNk5TdHVaRGxFUnpaSGNFSmpOV0ZJYXpoU1QxaDBOV2h6U21wa1VVdFBRMEZhUVhkblowZE5UVUUwUndwQk1WVmtSSGRGUWk5M1VVVkJkMGxJWjBSQlZFSm5UbFpJVTFWRlJFUkJTMEpuWjNKQ1owVkdRbEZqUkVGNlFXUkNaMDVXU0ZFMFJVWm5VVlYxTVRoMENqWjVWMWxNVlU5RVR5dEVjek52VVU1RFNsYzNZMUJWZDBoM1dVUldVakJxUWtKbmQwWnZRVlV6T1ZCd2VqRlphMFZhWWpWeFRtcHdTMFpYYVhocE5Ga0tXa1E0ZDFGQldVUldVakJTUVZGSUwwSkVXWGRPU1VWNVlUTktiR0pETVRCamJsWjZaRVZDY2s5SVRYUmpiVlp6V2xjMWJreFlRbmxpTWxGMVlWZEdkQXBNYldSNldsaEtNbUZYVG14WlYwNXFZak5XZFdSRE5XcGlNakIzUzFGWlMwdDNXVUpDUVVkRWRucEJRa0ZSVVdKaFNGSXdZMGhOTmt4NU9XaFpNazUyQ21SWE5UQmplVFZ1WWpJNWJtSkhWWFZaTWpsMFRVTnpSME5wYzBkQlVWRkNaemM0ZDBGUlowVklVWGRpWVVoU01HTklUVFpNZVRsb1dUSk9kbVJYTlRBS1kzazFibUl5T1c1aVIxVjFXVEk1ZEUxSlIwdENaMjl5UW1kRlJVRmtXalZCWjFGRFFraDNSV1ZuUWpSQlNGbEJNMVF3ZDJGellraEZWRXBxUjFJMFl3cHRWMk16UVhGS1MxaHlhbVZRU3pNdmFEUndlV2RET0hBM2J6UkJRVUZIU21wblMxQmlkMEZCUWtGTlFWSjZRa1pCYVVKSmJXeGxTWEFyTm05WlpVWm9DbWRFTTI1Uk5sazBSV2g2U25SVmMxRTRSSEJrWTFGeU5FSk1XRE41ZDBsb1FVdFhkV05tYmxCUk9GaExPWGRZYkVwcVNWQTBZMFpFT0c1blpIazRkV29LYldreGN6RkRTamczTW1zclRVRnZSME5EY1VkVFRUUTVRa0ZOUkVFeVkwRk5SMUZEVFVoaU9YRjBSbGQxT1VGUU1FSXpaR3RKVkVZNGVrazRZVEkxVUFwb2IwbFBVVlJLVWxKeGFsVmlUMkUyVnpOMlRVZEJOWFpKTlZkVVJqQkZjREZwTWtGT2QwbDNSVko0TW5ocWVtWjNjbmRPYmxoUVpEQjRjbmd3WWxoRENtUmpOV0Z4WWxsWlVsRXdMMWhSVVdONFRFVnRkVGwzUnpGRlYydFNNWE01VEdaUGVHZDNVMjRLTFMwdExTMUZUa1FnUTBWU1ZFbEdTVU5CVkVVdExTMHRMUW89In19fX0=\",\n          \"integratedTime\": 1690304684,\n          \"logIndex\": 28719030,\n          \"logID\": \"c0d23d6ad406973f9559f3ba2d1ca01f84147d8ffc5b8445c224f98b9591801d\"\n        }\n      },\n      \"Issuer\": \"https://accounts.google.com\",\n      \"Subject\": \"krel-trust@k8s-releng-prod.iam.gserviceaccount.com\",\n      \"org.kubernetes.kpromo.version\": \"kpromo-v4.0.3-5-ge99897c\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Weekly Updates for Main and Release Branches - Bash\nDESCRIPTION: This snippet gives example bash commands for running the weekly update tool to summarize recent PR merges across active development and previous release branches. Each command targets a specific branch and a designated date window. The output is intended for Slack community updates. Replace the date ranges and branch names as needed for different reporting periods.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/release/role-handbooks/communications/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Main branch changes, which correspond to actively worked on release 1.7\n./bin/weekly --since 2024-01-22 --until 2024-01-28 --branch main\n\n# Previous 2 release branches\n./bin/weekly --since 2024-01-22 --until 2024-01-28 --branch release-1.6\n./bin/weekly --since 2024-01-22 --until 2024-01-28 --branch release-1.5\n```\n\n----------------------------------------\n\nTITLE: KubeadmConfig Example for Worker Nodes\nDESCRIPTION: This snippet shows the KubeadmConfig for worker nodes, which use joinConfiguration without the controlPlane field to join an existing cluster as worker nodes.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/kubeadm-bootstrap/index.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkind: KubeadmConfig\napiVersion: bootstrap.cluster.x-k8s.io/v1beta1\nmetadata:\n  name: my-worker1-config\nspec:\n  joinConfiguration:\n    nodeRegistration:\n      nodeRegistration: {} # node registration parameters are automatically injected by CAPD according to the kindest/node image in use.\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterStatus and Related Structs in Go for Kubernetes Cluster API\nDESCRIPTION: This code snippet defines the ClusterStatus struct and related types for the Kubernetes Cluster API. It includes fields for initialization status, conditions, control plane status, and worker status. The structs provide detailed information about the cluster's current state and provisioning progress.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240916-improve-status-in-CAPI-resources.md#2025-04-22_snippet_6\n\nLANGUAGE: golang\nCODE:\n```\ntype ClusterStatus struct {\n\n    // Initialization provides observations of the Cluster initialization process.\n    // NOTE: fields in this struct are part of the Cluster API contract and are used to orchestrate initial Cluster provisioning.\n    // The value of those fields is never updated after provisioning is completed.\n    // Use conditions to monitor the operational state of the Cluster's BootstrapSecret.\n    // +optional\n    Initialization *ClusterInitializationStatus `json:\"initialization,omitempty\"`\n    \n    // Represents the observations of a Cluster's current state.\n    // +optional\n    // +listType=map\n    // +listMapKey=type\n    // +kubebuilder:validation:MaxItems=32\n    Conditions []metav1.Condition `json:\"conditions,omitempty\"`\n    \n    // ControlPlane groups all the observations about Cluster's ControlPlane current state.\n    // +optional\n    ControlPlane *ClusterControlPlaneStatus `json:\"controlPlane,omitempty\"`\n    \n    // Workers groups all the observations about Cluster's Workers current state.\n    // +optional\n    Workers *WorkersStatus `json:\"workers,omitempty\"`\n    \n    // other fields\n}\n\n// ClusterInitializationStatus provides observations of the Cluster initialization process.\ntype ClusterInitializationStatus struct {\n\n    // InfrastructureProvisioned is true when the infrastructure provider reports that Cluster's infrastructure is fully provisioned.\n    // NOTE: this field is part of the Cluster API contract, and it is used to orchestrate provisioning.\n    // The value of this field is never updated after provisioning is completed.\n    // +optional\n    InfrastructureProvisioned bool `json:\"infrastructureProvisioned\"`\n    \n    // ControlPlaneInitialized denotes when the control plane is functional enough to accept requests.\n    // This information is usually used as a signal for starting all the provisioning operations that depends on\n    // a functional API server, but do not require a full HA control plane to exists, like e.g. join worker Machines,\n    // install core addons like CNI, CPI, CSI etc.\n    // NOTE: this field is part of the Cluster API contract, and it is used to orchestrate provisioning.\n    // The value of this field is never updated after provisioning is completed.\n    // +optional\n    ControlPlaneInitialized bool `json:\"controlPlaneInitialized\"`\n}\n\n// ClusterControlPlaneStatus groups all the observations about control plane current state.\ntype ClusterControlPlaneStatus struct {\n    // Total number of desired control plane machines in this cluster.\n    // +optional\n    DesiredReplicas *int32 `json:\"desiredReplicas,omitempty\"`\n\n    // Total number of control plane machines in this cluster.\n    // +optional\n    Replicas *int32 `json:\"replicas,omitempty\"`\n    \n    // The number of up-to-date control plane machines in this cluster. A machine is considered up-to-date when Machine's UpToDate condition is true.\n    // +optional\n    UpToDateReplicas *int32 `json:\"upToDateReplicas,omitempty\"`\n    \n    // Total number of ready control plane machines in this cluster. A machine is considered ready when Machine's Ready condition is true.\n    // +optional\n    ReadyReplicas *int32 `json:\"readyReplicas,omitempty\"`\n    \n    // Total number of available control plane machines in this cluster. A machine is considered ready when Machine's Available condition is true.\n    // +optional\n    AvailableReplicas *int32 `json:\"availableReplicas,omitempty\"`\n}\n\n// WorkersStatus groups all the observations about workers current state.\ntype WorkersStatus struct {\n    // Total number of desired worker machines in this cluster.\n    // +optional\n    DesiredReplicas *int32 `json:\"desiredReplicas,omitempty\"`\n\n    // Total number of worker machines in this cluster.\n    // +optional\n    Replicas *int32 `json:\"replicas,omitempty\"`\n    \n    // The number of up-to-date worker machines in this cluster. A machine is considered up-to-date when Machine's UpToDate condition is true.\n    // +optional\n    UpToDateReplicas *int32 `json:\"upToDateReplicas,omitempty\"`\n    \n    // Total number of ready worker machines in this cluster. A machine is considered ready when Machine's Ready condition is true.\n    // +optional\n    ReadyReplicas *int32 `json:\"readyReplicas,omitempty\"`\n    \n    // Total number of available worker machines in this cluster. A machine is considered ready when Machine's Available condition is true.\n    // +optional\n    AvailableReplicas *int32 `json:\"availableReplicas,omitempty\"`\n}\n\n// NOTE: `FailureReason`, `FailureMessage` fields won't be there anymore\n```\n\n----------------------------------------\n\nTITLE: KubeadmConfig Example with NTP Configuration\nDESCRIPTION: This snippet demonstrates how to configure NTP settings for the machine using the NTP field in KubeadmConfig.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/kubeadm-bootstrap/index.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nntp:\n  servers:\n    - IP_ADDRESS\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Tilt Settings Configuration for KubeVirt Provider\nDESCRIPTION: Example YAML configuration for tilt-settings.yaml when using the KubeVirt infrastructure provider. Includes provider repository path, CRI path, Kubernetes version, and container disk image template.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nenable_providers:\n- kubevirt\n- kubeadm-bootstrap\n- kubeadm-control-plane\nprovider_repos:\n# Path to a local clone of CAPK (replace with actual path)\n- ../cluster-api-provider-kubevirt\nkustomize_substitutions:\n  # CAPK needs access to the containerd socket (replace with actual path)\n  CRI_PATH: \"/var/run/containerd/containerd.sock\"\n  KUBERNETES_VERSION: \"v1.30.1\"\n  # An example - replace with an appropriate container disk image for the desired k8s version\n  NODE_VM_IMAGE_TEMPLATE: \"quay.io/capk/ubuntu-2204-container-disk:v1.30.1\"\n# Allow deploying CAPK workload clusters from the Tilt UI (optional)\ntemplate_dirs:\n  kubevirt:\n  - ../cluster-api-provider-kubevirt/templates\n```\n\n----------------------------------------\n\nTITLE: Defining Cluster API Provider Resource Types in Golang\nDESCRIPTION: This snippet declares the primary Kubernetes CRD resource struct types for the four provider categories: CoreProvider, BootstrapProvider, ControlPlaneProvider, and InfrastructureProvider. Each struct embeds TypeMeta and ObjectMeta for Kubernetes API compatibility and includes a Spec and Status of shared types (ProviderSpec, ProviderStatus) to ensure uniformity. These resources require dependencies on 'metav1' (Kubernetes API machinery) and shared types defined elsewhere in the codebase. Inputs include standard Kubernetes object metadata and configuration blocks; outputs are CR objects ready for controller reconciliation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20201020-capi-provider-operator.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\n// CoreProvider is the Schema for the CoreProviders API\ntype CoreProvider struct {\n   metav1.TypeMeta   `json:\",inline\"`\n   metav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n   Spec   ProviderSpec   `json:\"spec,omitempty\"`\n   Status ProviderStatus `json:\"status,omitempty\"`\n}\n\n// BootstrapProvider is the Schema for the BootstrapProviders API\ntype BootstrapProvider struct {\n   metav1.TypeMeta   `json:\",inline\"`\n   metav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n   Spec   ProviderSpec   `json:\"spec,omitempty\"`\n   Status ProviderStatus `json:\"status,omitempty\"`\n}\n\n// ControlPlaneProvider is the Schema for the ControlPlaneProviders API\ntype ControlPlaneProvider struct {\n   metav1.TypeMeta   `json:\",inline\"`\n   metav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n   Spec   ProviderSpec   `json:\"spec,omitempty\"`\n   Status ProviderStatus `json:\"status,omitempty\"`\n}\n\n// InfrastructureProvider is the Schema for the InfrastructureProviders API\ntype InfrastructureProvider struct {\n   metav1.TypeMeta   `json:\",inline\"`\n   metav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n   Spec   ProviderSpec   `json:\"spec,omitempty\"`\n   Status ProviderStatus `json:\"status,omitempty\"`\n}\n\n```\n\n----------------------------------------\n\nTITLE: Requeueing Drain Log Entry in Kubernetes\nDESCRIPTION: Illustrates a situation where the drain of a node is incomplete, prompting a requeue of pods that failed eviction. The log details the node, failed pods, and their deletion timestamps, essential for ongoing attempts to drain the node.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/automated-machine-management/machine_deletions.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nI0830 13:29:56.235398      17 machine_controller.go:736] \"Drain not completed yet, requeuing in 20s\" ... Node=\"my-cluster-2-md-0-wxtcg-mtg57-24lvh\" podsFailedEviction=\"test-namespace/nginx-deployment-6886c85ff7-77fpw, test-namespace/nginx-deployment-6886c85ff7-8dq4q, test-namespace/nginx-deployment-6886c85ff7-8gjhf, test-namespace/nginx-deployment-6886c85ff7-jznjw, test-namespace/nginx-deployment-6886c85ff7-l5nj8, ... (5 more)\" podsWithDeletionTimestamp=\"kube-system/calico-kube-controllers-7dc5458bc6-rdjj4, kube-system/coredns-7db6d8ff4d-9cbhn\"\n```\n\n----------------------------------------\n\nTITLE: Node Cordoning Log Entry in Kubernetes\nDESCRIPTION: The log entry shows an example of node cordoning within a Kubernetes environment when managing machine nodes. It reveals the specific node being cordoned with a timestamp. Intended for administrators analyzing cluster node status, it assumes access to machine controller logs.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/automated-machine-management/machine_deletions.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nI0830 12:50:13.961156      17 machine_controller.go:716] \"Cordoning Node\" ... Node=\"my-cluster-md-0-wxtcg-mtg57-k9qvz\"\n```\n\n----------------------------------------\n\nTITLE: Adding a MachineDeployment with kubectl\nDESCRIPTION: This snippet uses kubectl to add a new MachineDeployment to an existing Kubernetes cluster by appending it to the Cluster topology's machineDeployments list. It facilitates extending the cluster's capacity by introducing additional deployment configurations.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/operate-cluster.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl  patch cluster capi-quickstart --type json --patch '[{\"op\": \"add\", \"path\": \"/spec/topology/workers/machineDeployments/-\",  \"value\": {\"name\": \"second-deployment\", \"replicas\": 1, \"class\": \"default-worker\"} }]'\n```\n\n----------------------------------------\n\nTITLE: Generating and Setting Kubeconfig for Workload Cluster Access (Bash)\nDESCRIPTION: These Bash snippets retrieve the kubeconfig for the workload cluster using 'clusterctl get kubeconfig' and set the local KUBECONFIG environment variable to that file. This enables using kubectl and other tools against the workload cluster API. Requires an initialized and deployed workload cluster. Input is the cluster name; output is a new kubeconfig file.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/ignition.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl get kubeconfig ignition-cluster > ./kubeconfig\\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport KUBECONFIG=$(pwd)/kubeconfig\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing RolloutStrategy Struct for KubeadmControlPlane\nDESCRIPTION: Defines the main RolloutStrategy struct used to configure how existing machines are replaced with new ones during updates.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20191017-kubeadm-based-control-plane.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// RolloutStrategy describes how to replace existing machines\n// with new ones.\ntype RolloutStrategy struct {\n  // Type of rollout. Currently the only supported strategy is\n  // \"RollingUpdate\".\n  // Default is RollingUpdate.\n  // +optional\n  Type RolloutStrategyType `json:\"type,omitempty\"`\n\n  // Rolling update config params. Present only if\n  // RolloutStrategyType = RollingUpdate.\n  // +optional\n  RollingUpdate *RollingUpdate `json:\"rollingUpdate,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Virtual Machine Status for KubeVirt\nDESCRIPTION: This command checks the status of virtual machines in a KubeVirt environment. It's used to ensure VMs are running before deploying Calico CNI.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_82\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get vm\n```\n\n----------------------------------------\n\nTITLE: Creating RBAC Permissions for Profile Collection via Kubectl in YAML\nDESCRIPTION: Creates Kubernetes RBAC resources using `kubectl apply`. It defines a `ClusterRole` named `default-pprof` granting GET access to the `/debug/pprof/*` nonResourceURLs, and a `ClusterRoleBinding` named `default-pprof` assigning this role to the `default` ServiceAccount in the `default` namespace. This allows the specified ServiceAccount to access profiling endpoints.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/diagnostics.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncat << EOT | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: default-pprof\nrules:\n- nonResourceURLs:\n  - \"/debug/pprof/*\"\n  verbs:\n  - get\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: default-pprof\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: default-pprof\nsubjects:\n- kind: ServiceAccount\n  name: default\n  namespace: default\nEOT\n```\n\n----------------------------------------\n\nTITLE: Draining Node Log Entry in Kubernetes\nDESCRIPTION: This log entry indicates when the draining process begins for a specified node within a Kubernetes setting. Generated by the machine controller, it includes the timestamp and node identifier, and is useful for tracking the initiation of node draining procedures.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/automated-machine-management/machine_deletions.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nI0830 12:50:13.961156      17 machine_controller.go:716] \"Draining Node\" ... Node=\"my-cluster-md-0-wxtcg-mtg57-k9qvz\"\n```\n\n----------------------------------------\n\nTITLE: Installing Calico CNI on Other Kubernetes Providers\nDESCRIPTION: This command applies the standard Calico manifest to deploy the CNI on Kubernetes clusters for providers other than Azure, vcluster, or KubeVirt.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_86\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --kubeconfig=./capi-quickstart.kubeconfig \\\n  apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml\n```\n\n----------------------------------------\n\nTITLE: Machine Update Sequence Diagram in Mermaid\nDESCRIPTION: A sequence diagram showing the workflow of machine updates in Cluster API. It illustrates the interaction between CAPI components, the machine controller, external updaters, and infrastructure, highlighting the update decision process, notification of changes, and execution of updates by external updaters.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240807-in-place-updates.md#2025-04-22_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\nbox Management Cluster\n    participant apiserver as kube-api server\n    participant capi as CAPI\n    participant mach as Machine Controller\n    participant hook as External updater\n    participant hook1 as Other external updaters\nend\n\nbox Workload Cluster\n    participant infra as Infrastructure\nend\n\ncapi->>apiserver: Decide Update Strategy\ncapi->>apiserver: Mark Machine as pending, update spec\napiserver->>mach: Notify changes\nmach->>hook: Start update\nloop For all External Updaters\n  mach->>hook: call UpdateMachine\n  hook->>infra: Update components\n  alt is pending\n    hook->>mach: try in X secs\n    Note over hook,mach: Retry loop\n  else is done\n    hook->>mach: Done\n  end\n  mach->>hook1: call UpdateMachine\n  hook1->>infra: Update components\n  alt is pending\n    hook1->>mach: try in X secs\n    Note over hook1,mach: Retry loop\n  else is done\n    hook1->>mach: Done\n  end\nend\nmach->>apiserver: Mark Hooks in Machine as Done\nmach->>apiserver: Set UpToDate condition to True\n```\n\n----------------------------------------\n\nTITLE: Generating Docker Provider Cluster Configuration\nDESCRIPTION: Command to generate a development cluster configuration for Docker provider with specified Kubernetes version and machine counts, outputting to a YAML file.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl generate cluster capi-quickstart --flavor development \\\n  --kubernetes-version v1.32.0 \\\n  --control-plane-machine-count=3 \\\n  --worker-machine-count=3 \\\n  > capi-quickstart.yaml\n```\n\n----------------------------------------\n\nTITLE: Adding MachineHealthCheck with Kustomize\nDESCRIPTION: Kustomize configuration for adding a MachineHealthCheck to a workload cluster, combining the base manifest with additional specifications.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/using-kustomize.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\\napiVersion: kustomize.config.k8s.io/v1beta1\\nkind: Kustomization\\nresources:\\n  - ../../base\\n  - workload-mhc.yaml\n```\n\n----------------------------------------\n\nTITLE: Tilt Settings Configuration for AWS Provider\nDESCRIPTION: Example YAML configuration for tilt-settings.yaml when using the AWS infrastructure provider with a local clone of the provider repository.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_registry: gcr.io/your-project-name-here\nprovider_repos:\n- ../cluster-api-provider-aws\nenable_providers:\n- aws\n- kubeadm-bootstrap\n- kubeadm-control-plane\n```\n\n----------------------------------------\n\nTITLE: Defining FooCluster and FooClusterSpec/Status Types in Go for Cluster API\nDESCRIPTION: Definition of the core InfraCluster resource type with kubebuilder annotations. This code defines the FooCluster, FooClusterSpec, and FooClusterStatus types that infrastructure providers must implement for Cluster API compatibility.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/infra-cluster.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:object:root=true\n// +kubebuilder:resource:path=fooclusters,shortName=foocl,scope=Namespaced,categories=cluster-api\n// +kubebuilder:storageversion\n// +kubebuilder:subresource:status\n\n// FooCluster is the Schema for fooclusters.\ntype FooCluster struct {\n    metav1.TypeMeta `json:\",inline\"`\n\tmetav1.ObjectMeta `json:\"metadata,omitempty\"`\n    Spec FooClusterSpec `json:\"spec,omitempty\"`\n    Status FooClusterStatus `json:\"status,omitempty\"`\n}\n\ntype FooClusterSpec struct {\n    // See other rules for more details about mandatory/optional fields in InfraCluster spec.\n    // Other fields SHOULD be added based on the needs of your provider.\n}\n\ntype FooClusterStatus struct {\n    // See other rules for more details about mandatory/optional fields in InfraCluster status.\n    // Other fields SHOULD be added based on the needs of your provider.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FooControlPlane Resource in Go\nDESCRIPTION: Implementation example of a ControlPlane resource with required kubebuilder annotations. The resource includes TypeMeta, ObjectMeta, Spec, and Status fields following the Cluster API conventions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/control-plane.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:object:root=true\n// +kubebuilder:resource:path=foocontrolplanes,shortName=foocp,scope=Namespaced,categories=cluster-api\n// +kubebuilder:storageversion\n// +kubebuilder:subresource:status\n\n// FooControlPlane is the Schema for foocontrolplanes.\ntype FooControlPlane struct {\n    metav1.TypeMeta `json:\",inline\"`\n    metav1.ObjectMeta `json:\"metadata,omitempty\"`\n    Spec FooControlPlaneSpec `json:\"spec,omitempty\"`\n    Status FooControlPlaneStatus `json:\"status,omitempty\"`\n}\n\ntype FooControlPlaneSpec struct {\n    // See other rules for more details about mandatory/optional fields in ControlPlane spec.\n    // Other fields SHOULD be added based on the needs of your provider.\n}\n\ntype FooControlPlaneStatus struct {\n    // See other rules for more details about mandatory/optional fields in ControlPlane status.\n    // Other fields SHOULD be added based on the needs of your provider.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterClass with Variable Overrides for AWS Machines\nDESCRIPTION: Example of defining a ClusterClass with a variable for worker machine type and corresponding patch for AWSMachineTemplate. This allows customizing the instance type for AWS machines.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\nmetadata:\n  name: aws-clusterclass-v0.1.0\nspec:\n  ...\n  variables:\n  - name: workerMachineType\n    required: true\n    schema:\n      openAPIV3Schema:\n        type: string\n        default: t3.large\n  patches:\n  - name: workerMachineType\n    definitions:\n    - selector:\n        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n        kind: AWSMachineTemplate\n        matchResources:\n          machineDeploymentClass:\n            names:\n            - default-worker\n      jsonPatches:\n      - op: add\n        path: /spec/template/spec/instanceType\n        valueFrom:\n          variable: workerMachineType\n---\napiVersion: infrastructure.cluster.x-k8s.io/v1beta1\nkind: AWSMachineTemplate\nmetadata:\n  name: aws-clusterclass-v0.1.0-default-worker\nspec:\n  template:\n    spec:\n      # instanceType: workerMachineType will be set by the patch.\n      iamInstanceProfile: \"nodes.cluster-api-provider-aws.sigs.k8s.io\"\n---\n...\n```\n\n----------------------------------------\n\nTITLE: Listing Initialization Images in Cluster API CLI\nDESCRIPTION: The 'clusterctl init list-images' command lists the container images required for initializing the management cluster in Cluster API.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/additional-commands.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# clusterctl init list-images\n\nLists the container images required for initializing the management cluster.\n```\n\n----------------------------------------\n\nTITLE: Using Builtin Variables for Dynamic Image Names\nDESCRIPTION: Example of using builtin variables to dynamically calculate container image names based on the Kubernetes version specified in MachineDeployment or MachinePool.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\nmetadata:\n  name: docker-clusterclass-v0.1.0\nspec:\n  ...\n  patches:\n  - name: customImage\n    description: \"Sets the container image that is used for running dockerMachines.\"\n    definitions:\n    - selector:\n        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n        kind: DockerMachineTemplate\n        matchResources:\n          machineDeploymentClass:\n            names:\n            - default-worker\n      jsonPatches:\n      - op: add\n        path: /spec/template/spec/customImage\n        valueFrom:\n          template: |\n            kindest/node:{{ .builtin.machineDeployment.version }}\n```\n\n----------------------------------------\n\nTITLE: KubeadmConfig Example with Custom Files\nDESCRIPTION: This snippet shows how to specify additional files to be created on the machine through the KubeadmConfig Files field. Files can be created with inline content or by referencing a secret.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/kubeadm-bootstrap/index.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfiles:\n- contentFrom:\n    secret:\n      key: node-cloud.json\n      name: ${CLUSTER_NAME}-md-0-cloud-json\n  owner: root:root\n  path: /etc/kubernetes/cloud.json\n  permissions: \"0644\"\n- path: /etc/kubernetes/cloud.json\n  owner: \"root:root\"\n  permissions: \"0644\"\n  content: |\n    {\n      \"cloud\": \"CustomCloud\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubeconfig for a Workload Cluster in Bash\nDESCRIPTION: Basic example showing how to get the kubeconfig of a workload cluster named 'foo'. The command prints the kubeconfig to stdout.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/get-kubeconfig.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl get kubeconfig foo\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Infrastructure Provider with Specific Controller Flags in YAML\nDESCRIPTION: This example demonstrates how to install the AWS infrastructure provider with specific controller flags. It creates both the required Secret for AWS credentials and the InfrastructureProvider resource with custom configuration options including metrics address, sync period, and controller-specific concurrency settings.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20201020-capi-provider-operator.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n name: aws-variables\n namespace: capa-system\ntype: Opaque\ndata:\n AWS_REGION: ...\n AWS_ACCESS_KEY_ID: ...\n AWS_SECRET_ACCESS_KEY: ...\n---\napiVersion: management.cluster.x-k8s.io/v1alpha1\nkind: InfrastructureProvider\nmetadata:\n name: aws\n namespace: capa-system\nspec:\n version: v0.6.0\n secretName: aws-variables\n manager:\n   # These top level controller manager flags, supported by all the providers.\n   # These flags come with sensible defaults, thus requiring no or minimal\n   # changes for the most common scenarios.\n   metricsAddress: \":8181\"\n   syncPeriod: 660\n fetchConfig:\n   url: https://github.com/kubernetes-sigs/cluster-api-provider-aws/releases\n deployment:\n   containers:\n   - name: manager\n     args:\n         # These are controller flags that are specific to a provider; usage\n         # is reserved for advanced scenarios only.\n         awscluster-concurrency: 12\n         awsmachine-concurrency: 11\n```\n\n----------------------------------------\n\nTITLE: Deploying Modified Calico CNI on KubeVirt Cluster\nDESCRIPTION: This command applies the modified Calico manifest to deploy the CNI on a KubeVirt-based workload cluster.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_85\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --kubeconfig=./capi-quickstart.kubeconfig create -f calico-workload.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating tilt-provider.yaml for Development\nDESCRIPTION: Configuration for Tilt to enable faster development iterations by watching for file changes and automatically rebuilding and deploying the provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/building-running-and-testing.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nname: mailgun\nconfig:\n  image: controller:latest # change to remote image name if desired\n  label: CAPM\n  live_reload_deps: [\"main.go\", \"go.mod\", \"go.sum\", \"api\", \"controllers\", \"pkg\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Cluster and DockerCluster Infrastructure Objects with YAML\nDESCRIPTION: This snippet demonstrates how to define the initial Cluster object and its corresponding DockerCluster infrastructure object, which are prerequisites before creating individual machines.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/kubeadm-bootstrap/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: DockerCluster\napiVersion: infrastructure.cluster.x-k8s.io/v1beta1\nmetadata:\n  name: my-cluster-docker\n---\nkind: Cluster\napiVersion: cluster.x-k8s.io/v1beta1\nmetadata:\n  name: my-cluster\nspec:\n  infrastructureRef:\n    kind: DockerCluster\n    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n    name: my-cluster-docker\n```\n\n----------------------------------------\n\nTITLE: Markdown Dependency Version Changes\nDESCRIPTION: A markdown-formatted list showing version changes for project dependencies, including Google Cloud packages, GitHub repositories, and Go packages. Each line shows the package name and version transition using the format package: old_version → new_version.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CHANGELOG/v1.7.0-beta.1.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Changed\n- cloud.google.com/go/accessapproval: v1.7.1 → v1.7.4\n- cloud.google.com/go/accesscontextmanager: v1.8.1 → v1.8.4\n- cloud.google.com/go/aiplatform: v1.48.0 → v1.52.0\n[...additional dependencies...]\n```\n\n----------------------------------------\n\nTITLE: Release Statistics Overview\nDESCRIPTION: Statistical summary of changes made in this release including commit counts, breaking changes, features, and bug fixes.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CHANGELOG/v1.6.0.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- 389 new commits merged\n- 5 breaking changes :warning:\n- 15 feature additions ✨\n- 35 bugs fixed 🐛\n```\n\n----------------------------------------\n\nTITLE: Installing Controller-Tools for Cluster API Development\nDESCRIPTION: Command to install Controller-Tools, which is used for building Kubernetes CRDs and tools for controllers in the Cluster API project.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd cluster-api\nmake controller-gen\n```\n\n----------------------------------------\n\nTITLE: Creating Secret and ConfigMap for ClusterResourceSet (Bash)\nDESCRIPTION: These Bash commands use kubectl to create the Kubernetes Secret and ConfigMap resources required by the preceding ClusterResourceSet example. The first command creates a generic Secret named 'cloud-config' from the file 'cloud.conf', importantly setting the type to 'addons.cluster.x-k8s.io/resource-set' which is required for the CRS to recognize it. The second command creates a ConfigMap named 'cloud-provider-openstack' from the file 'cloud-provider-openstack.yaml'.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/cluster-resource-set.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic cloud-config --from-file=cloud.conf --type=addons.cluster.x-k8s.io/resource-set\nkubectl create configmap cloud-provider-openstack --from-file=cloud-provider-openstack.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting up IBM Cloud Credentials for Cluster API\nDESCRIPTION: This script exports the IBM Cloud API key environment variable and initializes the IBM Cloud infrastructure provider using clusterctl.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nexport IBMCLOUD_API_KEY=<you_api_key>\n\n# Finally, initialize the management cluster\nclusterctl init --infrastructure ibmcloud\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Variable Types in ClusterClass\nDESCRIPTION: Example of defining complex variable types (objects, maps, and arrays) in a ClusterClass to enable more sophisticated configuration options.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\nmetadata:\n  name: docker-clusterclass-v0.1.0\nspec:\n  ...\n  variables:\n  - name: httpProxy\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties: \n          # Schema of the url field.\n          url: \n            type: string\n          # Schema of the noProxy field.\n          noProxy:\n            type: string\n  - name: mdConfig\n    schema:\n      openAPIV3Schema:\n        type: object\n        additionalProperties:\n          # Schema of the map values.\n          type: object\n          properties:\n            osImage:\n              type: string\n  - name: dnsServers\n    schema:\n      openAPIV3Schema:\n        type: array\n        items:\n          # Schema of the array items.\n          type: string\n```\n\n----------------------------------------\n\nTITLE: Defining Command-Line Flags for prowjob-gen Tool (txt)\nDESCRIPTION: This snippet lists the command-line flags required to run the `prowjob-gen` tool. The `-config` flag specifies the path to the YAML configuration file, `-output-dir` defines the directory where generated files will be saved, and `-templates-dir` indicates the location of the template files referenced in the configuration. All flags must be provided when executing the tool.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/hack/tools/prowjob-gen/README.md#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n  -config string\n        Path to the config file\n  -output-dir string\n        Path to the directory to create the files in\n  -templates-dir string\n        Path to the directory containing the template files referenced inside the config file\n```\n\n----------------------------------------\n\nTITLE: Installing MetalLB for Load Balancing in KubeVirt Environment\nDESCRIPTION: This script installs MetalLB for load balancing in a kind cluster, which is needed for exposing the workload cluster's API server in a KubeVirt environment.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nMETALLB_VER=$(curl \"https://api.github.com/repos/metallb/metallb/releases/latest\" | jq -r \".tag_name\")\nkubectl apply -f \"https://raw.githubusercontent.com/metallb/metallb/${METALLB_VER}/config/manifests/metallb-native.yaml\"\nkubectl wait pods -n metallb-system -l app=metallb,component=controller --for=condition=Ready --timeout=10m\nkubectl wait pods -n metallb-system -l app=metallb,component=speaker --for=condition=Ready --timeout=2m\n```\n\n----------------------------------------\n\nTITLE: Configuring MicroK8sControlPlane with Addons and Replicas in YAML\nDESCRIPTION: A YAML snippet for defining a MicroK8sControlPlane resource that specifies Kubernetes version, replica count, and MicroK8s addons to be enabled in the control plane nodes.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/microk8s-bootstrap.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: controlplane.cluster.x-k8s.io/v1beta1\nkind: MicroK8sControlPlane\nspec:\n  controlPlaneConfig:\n    initConfiguration:\n      addons:\n      - dns\n      - ingress\n  replicas: 3\n  version: v1.23.0\n  ......\n```\n\n----------------------------------------\n\nTITLE: Changing CAPI Log Level Dynamically using Kubectl Port-Forward and Curl in Bash\nDESCRIPTION: Demonstrates changing the CAPI controller's log level dynamically using command-line tools. First, `kubectl port-forward` exposes the CAPI controller manager's diagnostics port (8443). Second, a ServiceAccount token is created (requires prior RBAC setup). Finally, `curl` sends a PUT request to the `/debug/flags/v` endpoint via the local port-forward, using the token for authentication and sending '8' as data to set the log level to 8. `-k` ignores certificate validation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/diagnostics.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Terminal 1\nkubectl -n capi-system port-forward deployments/capi-controller-manager 8443\n\n# Terminal 2\nTOKEN=$(kubectl create token default)\ncurl \"https://localhost:8443/debug/flags/v\" --header \"Authorization: Bearer $TOKEN\" -X PUT -d '8' -k\n```\n\n----------------------------------------\n\nTITLE: Defining Condition Types and Severity in Golang\nDESCRIPTION: Defines core types for implementing conditions in Cluster API resources, including ConditionType, ConditionSeverity enums and the Condition struct with its fields.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200506-conditions.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\n// ConditionType is a valid value for Condition.Type.\ntype ConditionType string\n\n// ConditionSeverity expresses the severity of a Condition Type failing.\ntype ConditionSeverity string\n\nconst (\n  // ConditionSeverityError specifies that a failure of a condition type\n  // should be viewed as an error.\n  ConditionSeverityError ConditionSeverity = \"Error\"\n\n  // ConditionSeverityWarning specifies that a failure of a condition type\n  // should be viewed as a warning, but that things could still work.\n  ConditionSeverityWarning ConditionSeverity = \"Warning\"\n\n  // ConditionSeverityInfo specifies that a failure of a condition type\n  // should be viewed as purely informational, and that things could still work.\n  ConditionSeverityInfo ConditionSeverity = \"Info\"\n\n  // ConditionSeverityNone should apply only if the condition is in state \"True\".\n  // As ConditionSeverityNone is the default for conditions we use the empty string (coupled with omitempty)\n  ConditionSeverityNone ConditionSeverity = \"\"\n)\n\n// Condition defines an extension to status (i.e. an observation) of a Cluster API resource.\ntype Condition struct {\n   // Type of condition.\n   Type ConditionType `json:\"type\" description:\"type of status condition\"`\n\n   // Status of the condition, one of True, False, Unknown.\n   Status corev1.ConditionStatus `json:\"status\"`\n\n   // Severity with which to treat failures of this type of condition.\n   // When this is not specified, it defaults to Error.\n   // +optional\n   Severity ConditionSeverity `json:\"severity,omitempty\"`\n\n   // LastTransitionTime is the last time the condition transitioned from one status to another.\n   LastTransitionTime metav1.Time `json:\"lastTransitionTime\"`\n\n   // The reason for the condition's last transition.\n   // Reasons should be CamelCase.\n   // +optional\n   Reason string `json:\"reason,omitempty\" description:\"one-word CamelCase reason for the condition's last transition\"`\n\n   // A human readable message indicating details about the transition.\n   // +optional\n   Message string `json:\"message,omitempty\" description:\"human-readable message indicating details about last transition\"`\n}\n\n// Conditions define an extension to status (i.e. an observation) of a Cluster API resource.\ntype Conditions []Condition\n```\n\n----------------------------------------\n\nTITLE: Installing Calico CNI on Azure Kubernetes Cluster\nDESCRIPTION: This snippet installs the official Calico Helm chart on an Azure-based workload cluster. It adds the Calico Helm repository and installs the tigera-operator with custom values.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_80\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add projectcalico https://docs.tigera.io/calico/charts --kubeconfig=./capi-quickstart.kubeconfig && \\\nhelm install calico projectcalico/tigera-operator --kubeconfig=./capi-quickstart.kubeconfig -f https://raw.githubusercontent.com/kubernetes-sigs/cluster-api-provider-azure/main/templates/addons/calico/values.yaml --namespace tigera-operator --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Reconcile Function with NotFound Error Handling\nDESCRIPTION: An improved Reconcile function that handles the case when the requested resource is not found, which is common during deletion.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/controllers-and-reconciliation.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n    var cluster infrav1.MailgunCluster\n    if err := r.Get(ctx, req.NamespacedName, &cluster); err != nil {\n        // \timport apierrors \"k8s.io/apimachinery/pkg/api/errors\"\n        if apierrors.IsNotFound(err) {\n            return ctrl.Result{}, nil\n        }\n        return ctrl.Result{}, err\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Specific Kubernetes Version E2E Tests with Configurations\nDESCRIPTION: Advanced e2e test command for Cluster API with specific Kubernetes version and GINKGO_FOCUS parameter to target specific test scenarios.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd cluster-api\nKUBERNETES_VERSION=v1.19.7 GINKGO_FOCUS=\"Workload cluster creation\" make test-e2e\n```\n\n----------------------------------------\n\nTITLE: Example Cluster Definition for Topology Planning\nDESCRIPTION: A YAML definition of a Cluster resource that references the example ClusterClass and defines the desired cluster topology including controlPlane and worker node configurations.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/alpha-topology-plan.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: Cluster\nmetadata:\n  name: \"example-cluster\"\n  namespace: \"default\"\n  labels:\n    cni: kindnet\nspec:\n  clusterNetwork:\n    services:\n      cidrBlocks: [\"10.128.0.0/12\"]\n    pods:\n      cidrBlocks: [\"192.168.0.0/16\"]\n    serviceDomain: \"cluster.local\"\n  topology:\n    class: example-cluster-class\n    version: v1.21.2\n    controlPlane:\n      metadata: {}\n      replicas: 1\n    workers:\n      machineDeployments:\n      - class: \"default-worker\"\n        name: \"md-0\"\n        replicas: 1\n```\n\n----------------------------------------\n\nTITLE: Adding ControlPlaneRef to Cluster Spec\nDESCRIPTION: Adds a reference field to the Cluster spec for linking to provider-specific control plane resources.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20191017-kubeadm-based-control-plane.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// ControlPlaneRef is an optional reference to a provider-specific resource that holds\n// the details for provisioning the Control Plane for a Cluster.\n// +optional\nControlPlaneRef *corev1.ObjectReference `json:\"controlPlaneRef,omitempty\"`\n```\n\n----------------------------------------\n\nTITLE: Creating tilt-settings.yaml for Cluster API\nDESCRIPTION: Configuration file for Tilt in the Cluster API directory to enable development mode and reference the custom provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/building-running-and-testing.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_registry: \"\" # change if you use a remote image registry\nprovider_repos:\n  # This refers to your provider directory and loads settings\n  # from `tilt-provider.yaml`\n  - ../cluster-api-provider-mailgun\nenable_providers:\n  - mailgun\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenNebula Environment Variables for Cluster API\nDESCRIPTION: Environment variables setup for creating Kubernetes clusters on OpenNebula using Cluster API. Includes API endpoint, credentials, and network configurations.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\nexport ONE_XMLRPC='http://10.2.11.40:2633/RPC2'\nexport ONE_AUTH='oneadmin:opennebula'\nexport MACHINE_TEMPLATE_NAME='capone131'\nexport ROUTER_TEMPLATE_NAME='capone131-vr'\nexport PUBLIC_NETWORK_NAME='service'\nexport PRIVATE_NETWORK_NAME='private'\nexport CLUSTER_NAME='one'\nexport CCM_IMG='ghcr.io/opennebula/cloud-provider-opennebula:latest'\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubelet Authentication in Cluster YAML\nDESCRIPTION: This YAML snippet shows how to configure kubelet authentication in a Cluster resource. It enables kubelet authentication and specifies authorized attestors.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20210222-kubelet-authentication.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  security:\n    kubeletAuthentication: true\n    authorizedAttestors:\n    - contosoCloud\n```\n\n----------------------------------------\n\nTITLE: Generating Kubebuilder Scaffolding\nDESCRIPTION: Uses Kubebuilder to initialize the project with the Cluster API domain. This creates the basic repository layout, including a containerized manager and required external Go libraries.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/initialize-repo-and-api-types.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubebuilder init --domain cluster.x-k8s.io\n```\n\n----------------------------------------\n\nTITLE: Monitoring Cluster Updates with watch\nDESCRIPTION: This snippet runs watch with kubectl to continuously display the state of ControlPlane and MachineDeployments, allowing operators to monitor the live update process of the cluster.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/operate-cluster.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwatch kubectl get kubeadmcontrolplane,machinedeployments\n```\n\n----------------------------------------\n\nTITLE: Download clusterctl for Linux (AMD64) (Bash)\nDESCRIPTION: Downloads the `clusterctl` binary specifically compiled for Linux AMD64 architectures using `curl`. The URL uses a template helper `{{#releaselink ...}}` to fetch the correct asset for version 1.9.x from the specified repository.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L {{#releaselink repo:\"https://github.com/kubernetes-sigs/cluster-api\" gomodule:\"sigs.k8s.io/cluster-api\" asset:\"clusterctl-linux-amd64\" version:\"1.9.x\"}} -o clusterctl\n```\n\n----------------------------------------\n\nTITLE: Defining Machine Spec with ReadinessGates in Cluster API\nDESCRIPTION: Go struct definition for MachineSpec in Cluster API v1beta2, introducing MinReadySeconds for availability tracking and ReadinessGates to extend Machine readiness evaluation. This allows third-party components to add custom conditions to the Machine readiness evaluation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240916-improve-status-in-CAPI-resources.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype MachineSpec struct {\n\n    // MinReadySeconds is the minimum number of seconds for which a Machine should be ready before considering it available.\n    // Defaults to 0 (Machine will be considered available as soon as the Machine is ready)\n    // +optional\n    MinReadySeconds int32 `json:\"minReadySeconds,omitempty\"`\n\n    // If specified, all conditions listed in ReadinessGates will be evaluated for Machine readiness.\n    // A Machine is ready when `BootstrapConfigReady`, `InfrastructureReady`, `NodeHealthy` and `HealthCheckSucceeded` (if present) are \"True\"; \n    // if other conditions are defined in this field, those conditions should be \"True\" as well for the Machine to be ready.\n    //\n    // This field can be used e.g.\n    // - By Cluster API control plane providers to extend the semantic of the Ready condition for the Machine they\n    //   control, like the kubeadm control provider adding ReadinessGates for the APIServerPodHealthy, SchedulerPodHealthy conditions, etc.\n    // - By external controllers, e.g. responsible to install special software/hardware on the Machines\n    //   to include the status of those components into ReadinessGates (by surfacing new conditions on Machines and\n    //   adding them to ReadinessGates).\n    //\n    // +optional\n    // +listType=map\n    // +listMapKey=conditionType\n    ReadinessGates []MachineReadinessGate `json:\"readinessGates,omitempty\"`\n\n    // Other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Designing a New ClusterClass with Topology Plan\nDESCRIPTION: Demonstrates how to preview a Cluster generated from a new ClusterClass design by using the topology plan command with both ClusterClass and Cluster definition files.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/alpha-topology-plan.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl alpha topology plan -f example-cluster-class.yaml -f example-cluster.yaml -o output/\n```\n\n----------------------------------------\n\nTITLE: Preparing and Running E2E Tests with Tilt (Bash)\nDESCRIPTION: Shows the commands to prepare prerequisites (`make tilt-e2e-prerequisites`) and set up a kind cluster managed by Tilt (`make tilt-up`) for running E2E tests. Using Tilt allows reusing an existing management cluster, speeding up test execution, especially when running tests from an IDE with the `-e2e.use-existing-cluster=true` flag.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/testing.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Prereqs for e2e testing with tilt\nmake tilt-e2e-prerequisites\n# Create a kind cluster and start tilt\nmake tilt-up\n```\n\n----------------------------------------\n\nTITLE: Fetching Azure Provider Components from Custom Repository in YAML\nDESCRIPTION: This example shows how to configure an Azure infrastructure provider to fetch components from a custom repository instead of the default one. It specifies a custom URL in the fetchConfig field to point to a non-default GitHub repository.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20201020-capi-provider-operator.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: management.cluster.x-k8s.io/v1alpha1\nkind: InfrastructureProvider\nmetadata:\n name: myazure\n namespace: capz-system\nspec:\n version: v0.4.9\n secretName: azure-variables\n fetchConfig:\n   url: https://github.com/myorg/awesome-azure-provider/releases\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Credentials Secret for Image Pulling\nDESCRIPTION: This command creates a Kubernetes secret with Docker Hub credentials to resolve image pull rate limit issues.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_88\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --kubeconfig=./capi-quickstart.kubeconfig create secret generic docker-creds \\\n    --from-file=.dockerconfigjson=<YOUR DOCKER CONFIG FILE PATH> \\\n    --type=kubernetes.io/dockerconfigjson \\\n    -n kube-system\n```\n\n----------------------------------------\n\nTITLE: JSON 6902 Patch Example for Custom AMI\nDESCRIPTION: A sample JSON 6902 patch used in Kustomize to add custom AMI ID for AWSMachineTemplate configuration.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/using-kustomize.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\\n    { \"op\": \"add\", \"path\": \"/spec/template/spec/ami\", \"value\": \"ami-042db61632f72f145\"}\\n]\n```\n\n----------------------------------------\n\nTITLE: Adding ControlPlaneReady Status Field\nDESCRIPTION: Adds a boolean status field to track control plane readiness in the cluster status.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20191017-kubeadm-based-control-plane.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// ControlPlaneReady defines if the control plane is ready.\n// +optional\nControlPlaneReady bool `json:\"controlPlaneReady,omitempty\"`\n```\n\n----------------------------------------\n\nTITLE: Defining DevMachine with InMemory Backend in YAML\nDESCRIPTION: Example of a DevMachine resource definition using the inMemory backend, equivalent to the InMemoryMachine example.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20250124-From CAPD(docker) to CAPD(dev) .md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: infrastructure.cluster.x-k8s.io/v1beta1\nkind: DevMachine\nmetadata:\n  name: in-memory-control-plane\nspec:\n  backend:\n    inMemory:\n      vm:\n        provisioning:\n          startupDuration: \"10s\"\n          startupJitter: \"0.2\"\n      node:\n        provisioning:\n          startupDuration: \"2s\"\n          startupJitter: \"0.2\"\n      apiServer:\n        provisioning:\n          startupDuration: \"2s\"\n          startupJitter: \"0.2\"\n      etcd:\n        provisioning:\n          startupDuration: \"2s\"\n          startupJitter: \"0.2\"\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Kind Cluster and Development Environment (bash)\nDESCRIPTION: Runs the `clean-kind` make target to remove the kind cluster and other resources specific to the Tilt-based development environment after development or testing is complete. This command should be run after stopping Tilt.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nmake clean-kind\n```\n\n----------------------------------------\n\nTITLE: Scaling MachineDeployment with kubectl\nDESCRIPTION: This snippet shows how to scale a MachineDeployment by altering the replicas count in the Cluster topology. Scaling operations allow operators to adjust the number of worker nodes as required by workload demands.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/operate-cluster.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl  patch cluster capi-quickstart --type json --patch '[{\"op\": \"replace\", \"path\": \"/spec/topology/workers/machineDeployments/0/replicas\",  \"value\": 1}]'\n```\n\n----------------------------------------\n\nTITLE: Setting up GCP Credentials for Cluster API\nDESCRIPTION: This script encodes GCP credentials from a JSON file and exports them as an environment variable for use with the GCP infrastructure provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\n# Create the base64 encoded credentials by catting your credentials json.\n# This command uses your environment variables and encodes\n# them in a value to be stored in a Kubernetes Secret.\nexport GCP_B64ENCODED_CREDENTIALS=$( cat /path/to/gcp-credentials.json | base64 | tr -d '\\n' )\n\n# Finally, initialize the management cluster\nclusterctl init --infrastructure gcp\n```\n\n----------------------------------------\n\nTITLE: Defining HelmReleaseProxy Struct in Go for Cluster API Add-on Management\nDESCRIPTION: This Go struct defines the HelmReleaseProxy custom resource, representing a single Helm release installed on a workload cluster. It includes fields for cluster reference, chart details, and release status.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220712-cluster-api-addon-orchestration.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// HelmReleaseProxySpec defines the desired state of HelmReleaseProxy.\ntype HelmReleaseProxySpec struct {\n  // ClusterRef is a reference to the Cluster to install the Helm release on.\n  ClusterRef corev1.ObjectReference `json:\"clusterRef\"`\n\n  // ChartName is the name of the Helm chart in the repository.\n  ChartName string `json:\"chartName\"`\n\n  // RepoURL is the URL of the Helm chart repository.\n  RepoURL string `json:\"repoURL\"`\n\n  // ReleaseName is the release name of the installed Helm chart. If it is not specified, a\n  // name will be generated.\n  // +optional\n  ReleaseName string `json:\"releaseName,omitempty\"`\n\n  // ReleaseNamespace is the namespace the Helm release will be installed on the referenced \n  // Cluster. If it is not specified, it will be set to the default namespace.\n  // +optional\n  ReleaseNamespace string `json:\"namespace\"`\n\n  // Version is the version of the Helm chart. If it is not specified, the chart will use \n  // and be kept up to date with the latest version.\n  // +optional\n  Version string `json:\"version,omitempty\"`\n\n  // Values is an inline YAML representing the values for the Helm chart. This YAML is the result of the rendered\n  // Go templating with the values from the referenced workload Cluster.\n  // +optional\n  Values string `json:\"values,omitempty\"`\n}\n\n// HelmReleaseProxyStatus defines the observed state of HelmReleaseProxy.\ntype HelmReleaseProxyStatus struct {\n  // Conditions defines current state of the HelmReleaseProxy.\n  // +optional\n  Conditions clusterv1.Conditions `json:\"conditions,omitempty\"`\n\n  // Status is the current status of the Helm release.\n  // +optional\n  Status string `json:\"status,omitempty\"`\n\n  // Revision is the current revision of the Helm release.\n  // +optional\n  Revision int `json:\"revision,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: GeneratePatches Response Schema in YAML\nDESCRIPTION: Example response schema showing patch correlation via UIDs and JSON patch specifications for cluster template modifications.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-topology-mutation-hook.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: hooks.runtime.cluster.x-k8s.io/v1alpha1\nkind: GeneratePatchesResponse\nstatus: Success # or Failure\nmessage: \"error message if status == Failure\"\nitems:\n- uid: 7091de79-e26c-4af5-8be3-071bc4b102c9\n  patchType: JSONPatch\n  patch: <JSON-patch>\n```\n\n----------------------------------------\n\nTITLE: Example Metal3Remediation YAML Configuration\nDESCRIPTION: Sample YAML configuration for a Metal3Remediation resource. This is an instance of the remediation template, created for a specific unhealthy machine, including status information and owner references.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20191030-machine-health-checking.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: remediation.metal3.io/v1alphaX\nkind: Metal3Remediation\nmetadata:\n  name: NAME_OF_UNHEALTHY_MACHINE\n  namespace: NAMESPACE_OF_UNHEALTHY_MACHINE\n  finalizer:\n  - remediation.metal3.io\n  ownerReferences:\n  - apiVersion:cluster.x-k8s.io/v1alphaX\n    kind: Machine\n    name: NAME_OF_UNHEALTHY_MACHINE\n    uid: ...\nspec:\n  strategy: \t\t    escalate\n  deleteAfterRetries:     10\n  powerOnTimeoutSeconds:  600\n  powerOffTimeoutSeconds: 120\nstatus:\n  phase: power-off\n  retryCount: 1\n```\n\n----------------------------------------\n\nTITLE: Setting up Proxmox Credentials and Initializing Provider\nDESCRIPTION: This script exports Proxmox credentials and initializes the Proxmox infrastructure provider with in-cluster IPAM for Cluster API.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\n# The host for the Proxmox cluster\nexport PROXMOX_URL=\"https://pve.example:8006\"\n# The Proxmox token ID to access the remote Proxmox endpoint\nexport PROXMOX_TOKEN='root@pam!capi'\n# The secret associated with the token ID\n# You may want to set this in `$XDG_CONFIG_HOME/cluster-api/clusterctl.yaml` so your password is not in\n# bash history\nexport PROXMOX_SECRET=\"1234-1234-1234-1234\"\n\n\n# Finally, initialize the management cluster\nclusterctl init --infrastructure proxmox --ipam in-cluster\n```\n\n----------------------------------------\n\nTITLE: Using Builtin Variables in ClusterClass Patches\nDESCRIPTION: Example of using builtin variables in ClusterClass patches. This shows how to access the cluster name from a built-in variable to set it in the controller manager's extra arguments.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\nmetadata:\n  name: docker-clusterclass-v0.1.0\nspec:\n  ...\n  patches:\n  - name: clusterName\n    definitions:\n    - selector:\n      ...\n      jsonPatches:\n      - op: add\n        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/controllerManager/extraArgs/cluster-name\n        valueFrom:\n          variable: builtin.cluster.name\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Workload Cluster Size in Bash\nDESCRIPTION: Exports environment variables that define the initial size of a new workload cluster, specifying the number of control plane and worker machines.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\nexport CONTROL_PLANE_MACHINE_COUNT='1'\nexport WORKER_MACHINE_COUNT='1'\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Certificate Secret in YAML for Cluster API\nDESCRIPTION: An example YAML configuration for creating a Secret resource that stores a cluster CA certificate. The certificate must be labeled with the cluster name and follow the specific naming convention expected by Cluster API.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/certs/using-custom-certificates.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: cluster1-ca\n  labels:\n    cluster.x-k8s.io/cluster-name: cluster1\ntype: kubernetes.io/tls\ndata:\n  tls.crt: <base 64 encoded PEM>\n  tls.key: <base 64 encoded PEM>\n```\n\n----------------------------------------\n\nTITLE: Configuring Scale Subresource for ControlPlane CRD in Cluster API\nDESCRIPTION: YAML configuration for the scale subresource in ControlPlane custom resource definition. Defines the paths for label selector, spec replicas, and status replicas required for scale operations.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/control-plane.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nscale:\n  labelSelectorPath: .status.selector\n  specReplicasPath: .spec.replicas\n  statusReplicasPath: .status.replicas\nstatus: {}\n```\n\n----------------------------------------\n\nTITLE: Verifying a CAPI Image Signature using Cosign (Bash)\nDESCRIPTION: This bash command demonstrates how to verify the signature of the `cluster-api-controller` image (version v1.5.0) hosted on `registry.k8s.io`. It uses `cosign verify` with specific certificate identity and OIDC issuer constraints, piping the JSON output to `jq` for pretty-printing. Dependencies include installed `cosign` and `jq` tools.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/verify-container-images.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cosign verify registry.k8s.io/cluster-api/cluster-api-controller:v1.5.0 --certificate-identity krel-trust@k8s-releng-prod.iam.gserviceaccount.com --certificate-oidc-issuer https://accounts.google.com | jq .\n```\n\n----------------------------------------\n\nTITLE: Extending MachineHealthCheckSpec with RemediationTemplate in Go\nDESCRIPTION: Modification to the MachineHealthCheckSpec struct to include an optional RemediationTemplate field of type ObjectReference. This allows specifying a custom remediation template for unhealthy machines.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20191030-machine-health-checking.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype MachineHealthCheckSpec struct {\n    ...\n\n    // +optional\n    RemediationTemplate *ObjectReference `json:\"remediationTemplate,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: YAML frontmatter defining document metadata including authors, reviewers, creation date, and status\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20210526-cluster-class-and-managed-topologies.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: ClusterClass and managed topologies\nauthors:\n  - \"@srm09\"\n  - \"@vincepri\"\n  - \"@fabriziopandini\"\n  - \"@CecileRobertMichon\"\n  - \"@sbueringer\"\nreviewers:\n  - \"@vincepri\"\n  - \"@fabriziopandini\"\n  - \"@CecileRobertMichon\"\n  - \"@enxebre\"\n  - \"@schrej\"\n  - \"@randomvariable\"\ncreation-date: 2021-05-26\nreplaces: https://docs.google.com/document/d/1lwxgBK3Q7zmNkOSFqzTGmrSys_vinkwubwgoyqSRAbI\nstatus: provisional\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Kustomize Variable Substitutions in tilt-settings.yaml (yaml)\nDESCRIPTION: This YAML snippet shows how to configure the `kustomize_substitutions` section within the `tilt-settings.yaml` file. It allows developers to override default values (like namespace, Kubernetes version, machine counts) in cluster templates processed by kustomize during Tilt deployment. Note that all values must be provided as strings.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nkustomize_substitutions:\n  NAMESPACE: \"default\"\n  KUBERNETES_VERSION: \"v1.32.0\"\n  CONTROL_PLANE_MACHINE_COUNT: \"1\"\n  WORKER_MACHINE_COUNT: \"3\"\n# Note: kustomize substitutions expects the values to be strings. This can be achieved by wrapping the values in quotation marks.\n```\n\n----------------------------------------\n\nTITLE: Querying MachineDeployments with kubectl\nDESCRIPTION: This snippet uses kubectl to fetch the current details of MachineDeployments within a Kubernetes cluster. It serves as a preliminary step before scaling operations.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/operate-cluster.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get machinedeployments\n```\n\n----------------------------------------\n\nTITLE: Example IPAddressClaim YAML Resource\nDESCRIPTION: Illustrative example of an IPAddressClaim custom resource used by infrastructure providers to request IP addresses from pools. Shows basic structure and required fields.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220125-ipam-integration.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ipam.cluster.x-k8s.io/v1alpha1\nkind: IPAddressClaim\nmetadata:\n  name: example-claim\n  namespace: default\nspec:\n  poolRef:\n    apiGroup: ipam.metal3.io\n    kind: Metal3IPPool\n    name: example-pool\n```\n\n----------------------------------------\n\nTITLE: Creating Local Repository for Cluster API Development\nDESCRIPTION: Command to run the create-local-repository.py script, which builds provider assets and sets up a local repository for clusterctl.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/developers.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncmd/clusterctl/hack/create-local-repository.py\n```\n\n----------------------------------------\n\nTITLE: Address Surfacing in FooMachineStatus\nDESCRIPTION: This code snippet outlines how machine addresses are managed within FooMachineStatus. It features an optional slice of 'MachineAddress' types, which can include various address types like Hostname and IPs. This is useful for troubleshooting purposes and follows Go conventions for struct definitions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/infra-machine.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype FooMachineStatus struct {\n    // addresses contains the associated addresses for the machine.\n    // +optional\n    Addresses []clusterv1.MachineAddress `json:\"addresses,omitempty\"`\n\n    // See other rules for more details about mandatory/optional fields in InfraMachine status.\n    // Other fields SHOULD be added based on the needs of your provider.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Control Plane Endpoint in Go\nDESCRIPTION: Example of how to implement the controlPlaneEndpoint field in a FooControlPlane struct. This is necessary when the control plane provider is responsible for providing a control plane endpoint for each Cluster.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/control-plane.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype FooControlPlane struct {\n    // controlPlaneEndpoint represents the endpoint used to communicate with the control plane.\n    // +optional\n    ControlPlaneEndpoint APIEndpoint `json:\"controlPlaneEndpoint\"`\n    \n    // See other rules for more details about mandatory/optional fields in ControlPlane spec.\n    // Other fields SHOULD be added based on the needs of your provider.\n}\n\n// APIEndpoint represents a reachable Kubernetes API endpoint.\ntype APIEndpoint struct {\n    // host is the hostname on which the API server is serving.\n    Host string `json:\"host\"`\n    \n    // port is the port on which the API server is serving.\n    Port int32 `json:\"port\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Calico CNI Plugin with Kubectl (Bash)\nDESCRIPTION: This Bash snippet applies the Calico CNI plugin manifest to the workload cluster using 'kubectl apply -f'. Calico is required to provide network connectivity for pods and services in Kubernetes. This step must be performed after the workload cluster is active and accessible. Input is the Calico YAML manifest URL; output is confirmation of resource creation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/ignition.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://docs.projectcalico.org/v3.20/manifests/calico.yaml\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Outscale Environment Variables\nDESCRIPTION: Sets required environment variables for Outscale cloud provider, including disk configurations, keypair name, region, VM type, and image specifications.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_62\n\nLANGUAGE: bash\nCODE:\n```\n# The outscale root disk iops\nexport OSC_IOPS=\"<IOPS>\"\n# The outscale root disk size\nexport OSC_VOLUME_SIZE=\"<VOLUME_SIZE>\"\n# The outscale root disk volumeType\nexport OSC_VOLUME_TYPE=\"<VOLUME_TYPE>\"\n# The outscale key pair\nexport OSC_KEYPAIR_NAME=\"<KEYPAIR_NAME>\"\n# The outscale subregion name\nexport OSC_SUBREGION_NAME=\"<SUBREGION_NAME>\"\n# The outscale vm type\nexport OSC_VM_TYPE=\"<VM_TYPE>\"\n# The outscale image name\nexport OSC_IMAGE_NAME=\"<IMAGE_NAME>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Insecure CAPI Diagnostics via Clusterctl Environment Variables in Bash\nDESCRIPTION: Uses environment variables `CAPI_DIAGNOSTICS_ADDRESS` and `CAPI_INSECURE_DIAGNOSTICS` to instruct `clusterctl init` to configure the CAPI controllers with an insecure diagnostics endpoint at `localhost:8080`. This serves metrics via HTTP and disables pprof/log level endpoints.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/diagnostics.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport CAPI_DIAGNOSTICS_ADDRESS: \"localhost:8080\"\nexport CAPI_INSECURE_DIAGNOSTICS: \"true\"\nclusterctl init ...\n```\n\n----------------------------------------\n\nTITLE: Example BeforeClusterUpgrade Response (YAML)\nDESCRIPTION: This YAML snippet demonstrates an example response payload for the `BeforeClusterUpgrade` hook. It includes the API version, kind, status (Success or Failure), an optional message, and an optional `retryAfterSeconds` field. A Failure status or a retry request blocks the cluster upgrade process.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-lifecycle-hooks.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: hooks.runtime.cluster.x-k8s.io/v1alpha1\nkind: BeforeClusterUpgradeResponse\nstatus: Success # or Failure\nmessage: \"error message if status == Failure\"\nretryAfterSeconds: 10\n```\n\n----------------------------------------\n\nTITLE: KubeadmConfig Example with PostKubeadmCommands\nDESCRIPTION: This snippet demonstrates how to specify commands to be executed after kubeadm init/join using the PostKubeadmCommands field in KubeadmConfig.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/kubeadm-bootstrap/index.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\npostKubeadmCommands:\n  - echo \"success\" >/var/log/my-custom-file.log\n```\n\n----------------------------------------\n\nTITLE: Using ConfigMap as Source for Kubernetes Cluster Template\nDESCRIPTION: This command generates a cluster configuration using a template stored in a Kubernetes ConfigMap named 'my-templates'.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/generate-cluster.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl generate cluster my-cluster --kubernetes-version v1.28.0 \\\n    --from-config-map my-templates > my-cluster.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining InfraCluster Template List Type in Go\nDESCRIPTION: Defines the Go struct for the list type of infrastructure cluster templates. This list resource must be named as <InfraClusterTemplate>List and is required for Kubernetes API compatibility.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/infra-cluster.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:object:root=true\n\n// FooClusterTemplateList contains a list of FooClusterTemplates.\ntype FooClusterTemplateList struct {\n    metav1.TypeMeta `json:\",inline\"`\n    metav1.ListMeta `json:\"metadata,omitempty\"`\n    Items           []FooClusterTemplate `json:\"items\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Effects of ClusterClass Changes with clusterctl Bash\nDESCRIPTION: This bash command demonstrates how to use clusterctl to test the impact of altering a ClusterClass on existing clusters. The tool outputs a summary of affected clusters and classes, which can guide administrators in planning changes without unexpected disruptions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/alpha-topology-plan.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl alpha topology plan -f modified-first-cluster-class.yaml -o output/\n```\n\n----------------------------------------\n\nTITLE: Configuring Air-Gapped Azure Provider Installation\nDESCRIPTION: Example configuration for setting up an Azure Infrastructure Provider in an air-gapped environment using ConfigMaps to store provider components and metadata. The configuration demonstrates how to specify version information and component fetching using label selectors.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20201020-capi-provider-operator.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n labels:\n   provider-components: azure\n name: v0.4.9\n namespace: capz-system\ndata:\n components: |\n # components for v0.4.9 yaml goes here\n metadata: |\n # metadata information goes here\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n labels:\n   provider-components: azure\n name: v0.4.8\n namespace: capz-system\ndata:\n components: |\n # components for v0.4.8 yaml goes here\n metadata: |\n # metadata information goes here\n---\napiVersion: management.cluster.x-k8s.io/v1alpha1\nkind: InfrastructureProvider\nmetadata:\n name: azure\n namespace: capz-system\nspec:\n version: v0.4.9\n secretName: azure-variables\n fetchConfig:\n   selector:\n     matchLabels:\n       provider-components: azure\n```\n\n----------------------------------------\n\nTITLE: Generating KubeVirt Provider Cluster Configuration with LoadBalancer\nDESCRIPTION: Command to generate a cluster configuration for KubeVirt provider with LoadBalancer flavor, specifying Kubernetes version and machine counts.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl generate cluster capi-quickstart \\\n  --infrastructure=\"kubevirt\" \\\n  --flavor lb \\\n  --kubernetes-version ${CAPK_GUEST_K8S_VERSION} \\\n  --control-plane-machine-count=1 \\\n  --worker-machine-count=1 \\\n  > capi-quickstart.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining MachineStatus in Cluster API v1beta2\nDESCRIPTION: This code snippet defines the MachineStatus struct in Go, which is used in the Kubernetes Cluster API. It includes fields for initialization and conditions, representing the machine's operational state. Dependencies include Kubernetes and Cluster API related packages, and the key purpose is to support initial provisioning and status monitoring.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240916-improve-status-in-CAPI-resources.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\ntype MachineStatus struct {\n\n    // Initialization provides observations of the Machine initialization process.\n    // NOTE: Fields in this struct are part of the Cluster API contract and are used to orchestrate initial Machine provisioning.\n    // The value of those fields is never updated after provisioning is completed.\n    // Use conditions to monitor the operational state of the Machine.\n    // +optional\n    Initialization *MachineInitializationStatus `json:\"initialization,omitempty\"`\n    \n    // Conditions represent the observations of a Machine's current state.\n    // +optional\n    // +listType=map\n    // +listMapKey=type\n    // +kubebuilder:validation:MaxItems=32\n    Conditions []metav1.Condition `json:\"conditions,omitempty\"`\n    \n    // Other fields...\n    // NOTE: `FailureReason`, `FailureMessage`, `BootstrapReady`, `InfrastructureReady` fields won't be there anymore\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a MachineDrainRule CRD - Kubernetes - YAML\nDESCRIPTION: This YAML snippet shows the structure of a MachineDrainRule Custom Resource Definition used in the management cluster to define Pod drain behaviors. It takes parameters determining drain behavior (Drain, Skip, WaitCompleted), an optional drain order, and selectors for targeting specific Machines and Pods based on labels and namespaces. Dependencies include a Kubernetes cluster with Cluster API and the MachineDrainRule CRD installed; inputs are label selectors, and outputs are configured rules for draining during Machine deletion. The implementation enables expressive, clustered logic around Pod eviction and ordering.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240930-machine-drain-rules.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\\nkind: MachineDrainRule\\nmetadata:\\n  name: example-rule\\n  namespace: default\\nspec:\\n  drain:\\n    # behavior can be Drain, Skip, or WaitCompleted\\n    behavior: Drain\\n    # order can only be set if behavior == Drain\\n    # Pods with higher order are drained later\\n    order: 100\\n  machines:\\n  - selector:\\n      matchLabels:\\n      matchExpressions:\\n    clusterSelector:\\n      matchLabels:\\n      matchExpressions:\\n  pods:\\n  - selector:\\n      matchLabels:\\n      matchExpressions:\\n    namespaceSelector:\\n      matchLabels:\\n      matchExpressions:\n```\n\n----------------------------------------\n\nTITLE: Defining a ClusterClass for Mixed Worker Types in Cluster API (YAML)\nDESCRIPTION: Defines a ClusterClass named 'mixed' in the 'bar' namespace. It specifies templates for the control plane (KubeadmControlPlaneTemplate, VSphereMachineTemplate), worker machine deployments ('linux-worker' and 'windows-worker' classes with associated KubeadmConfigTemplate and VSphereMachineTemplate), and the overall infrastructure (VSphereClusterTemplate). MachineHealthCheck configurations are included for both the control plane and worker deployments.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20210526-cluster-class-and-managed-topologies.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\nmetadata:\n  name: mixed\n  namespace: bar\nspec:\n  controlPlane:\n    ref:\n      apiVersion: controlplane.cluster.x-k8s.io/v1beta1\n      kind: KubeadmControlPlaneTemplate\n      name: vsphere-prod-cluster-template-kcp\n    machineInfrastructure:\n      ref:\n        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n        kind: VSphereMachineTemplate\n        name: linux-vsphere-template\n    # This will create a MachineHealthCheck for ControlPlane machines.\n    machineHealthCheck:\n      nodeStartupTimeout: 3m\n      maxUnhealthy: 33%\n      unhealthyConditions:\n        - type: Ready\n          status: Unknown\n          timeout: 300s\n        - type: Ready\n          status: \"False\"\n          timeout: 300s\n  workers:\n    machineDeployments:\n    - class: linux-worker\n      template:\n        bootstrap:\n          ref:\n            apiVersion: bootstrap.cluster.x-k8s.io/v1beta1\n            kind: KubeadmConfigTemplate\n            name: existing-boot-ref\n        infrastructure:\n          ref:\n            apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n            kind: VSphereMachineTemplate\n            name: linux-vsphere-template\n      # This will create a health check for each deployment created with the \"linux-worker\" MachineDeploymentClass\n      machineHealthCheck:\n        unhealthyConditions:\n          - type: Ready\n            status: Unknown\n            timeout: 300s\n          - type: Ready\n            status: \"False\"\n            timeout: 300s\n    - class: windows-worker\n      template:\n        bootstrap:\n          ref:\n            apiVersion: bootstrap.cluster.x-k8s.io/v1beta1\n            kind: KubeadmConfigTemplate\n            name: existing-boot-ref-windows\n        infrastructure:\n          ref:\n            apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n            kind: VSphereMachineTemplate\n            name: windows-vsphere-template\n      # This will create a health check for each deployment created with the \"windows-worker\" MachineDeploymentClass\n      machineHealthCheck:\n        unhealthyConditions:\n          - type: Ready\n            status: Unknown\n            timeout: 300s\n          - type: Ready\n            status: \"False\"\n            timeout: 300s\n  infrastructure:\n    ref:\n      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n      kind: VSphereClusterTemplate\n      name: vsphere-prod-cluster-template\n```\n\n----------------------------------------\n\nTITLE: Generating Azure Provider Cluster Configuration\nDESCRIPTION: Command to generate a cluster configuration for Azure provider with specified Kubernetes version and machine counts, outputting to a YAML file. Includes a note about authentication methods.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_73\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl generate cluster capi-quickstart \\\n  --infrastructure azure \\\n  --kubernetes-version v1.32.0 \\\n  --control-plane-machine-count=3 \\\n  --worker-machine-count=3 \\\n  > capi-quickstart.yaml\n\n# Cluster templates authenticate with Workload Identity by default. Modify the AzureClusterIdentity for ServicePrincipal authentication.\n```\n\n----------------------------------------\n\nTITLE: Building Local Artifacts for Cluster API Providers\nDESCRIPTION: Command to build artifacts for CAPI core, kubeadm bootstrap, kubeadm control plane, and Docker infrastructure providers. Uses a specified registry and pull policy.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/developers.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake docker-build REGISTRY=gcr.io/k8s-staging-cluster-api PULL_POLICY=IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: MachineHealthCheck Definition\nDESCRIPTION: Defines a MachineHealthCheck specifying conditions and cluster name. Adjust the `clusterName` field as needed.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/using-kustomize.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1alpha3\\nkind: MachineHealthCheck\\nmetadata:\\n  name: md-0-mhc\\nspec:\\n  clusterName: test\\n  # maxUnhealthy: 40%\\n  nodeStartupTimeout: 10m\\n  selector:\\n    matchLabels:\\n      cluster.x-k8s.io/deployment-name: md-0\\n  unhealthyConditions:\\n  - type: Ready\\n    status: Unknown\\n    timeout: 300s\\n  - type: Ready\\n    status: \"False\"\\n    timeout: 300s\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in Kubernetes Deployment\nDESCRIPTION: This snippet configures a Kubernetes Deployment to include environment variables sourced from a ConfigMap and a Secret. It supports the integration of Mailgun API configuration into a Kubernetes controller using environment variables.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/configure-the-deployment.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: controller-manager\n  namespace: system\nspec:\n  template:\n    spec:\n      containers:\n      - name: manager\n        env:\n        - name: MAILGUN_API_KEY\n          valueFrom:\n            secretKeyRef:\n              name: mailgun-secret\n              key: api_key\n        - name: MAILGUN_DOMAIN\n          valueFrom:\n            configMapKeyRef:\n              name: mailgun-config\n              key: mailgun_domain\n        - name: MAIL_RECIPIENT\n          valueFrom:\n            configMapKeyRef:\n              name: mailgun-config\n              key: mail_recipient\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Control Plane Endpoint in FooClusterSpec\nDESCRIPTION: Code for infrastructure providers that are responsible for providing control plane endpoints. Defines the required APIEndpoint type for specifying host and port information.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/infra-cluster.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype FooClusterSpec struct {\n    // controlPlaneEndpoint represents the endpoint used to communicate with the control plane.\n    // +optional\n    ControlPlaneEndpoint APIEndpoint `json:\"controlPlaneEndpoint\"`\n    \n    // See other rules for more details about mandatory/optional fields in InfraCluster spec.\n    // Other fields SHOULD be added based on the needs of your provider.\n}\n\n// APIEndpoint represents a reachable Kubernetes API endpoint.\ntype APIEndpoint struct {\n    // host is the hostname on which the API server is serving.\n    Host string `json:\"host\"`\n    \n    // port is the port on which the API server is serving.\n    Port int32 `json:\"port\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Machine Phase Provisioned Definition\nDESCRIPTION: Defines the provisioned state when Machine infrastructure has been created and configured.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20190610-machine-states-preboot-bootstrapping.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// MachinePhaseProvisioned is the state when its\n// infrastructure has been created and configured.\nMachinePhaseProvisioned = MachinePhaseType(\"provisioned\")\n```\n\n----------------------------------------\n\nTITLE: Adding clusterctl completion script to bash_completion.d\nDESCRIPTION: This command generates the clusterctl completion script for Bash and adds it to the /usr/local/etc/bash_completion.d directory, making it available system-wide.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/completion.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl completion bash >/usr/local/etc/bash_completion.d/clusterctl\n```\n\n----------------------------------------\n\nTITLE: Creating API Server Etcd Client TLS Secret using kubectl (Bash)\nDESCRIPTION: This command creates a Kubernetes TLS Secret named `$CLUSTER_NAME-apiserver-etcd-client` in the specified `$CLUSTER_NAMESPACE`. It uses the `apiserver-etcd-client.crt` and `apiserver-etcd-client.key` files (expected in the current directory) obtained from the external etcd setup. This Secret provides the necessary credentials for the Kubernetes API server to authenticate with the external etcd cluster.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/external-etcd.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Kubernetes API server etcd client certificate and key\nkubectl create secret tls $CLUSTER_NAME-apiserver-etcd-client \\\n  --cert apiserver-etcd-client.crt \\\n  --key apiserver-etcd-client.key \\\n  --namespace $CLUSTER_NAMESPACE\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker Nodes with MachineDeployment and MicroK8sConfigTemplate in YAML\nDESCRIPTION: A YAML snippet showing the configuration of worker nodes using MachineDeployment and MicroK8sConfigTemplate objects. This defines the worker node properties including the number of replicas and Kubernetes version.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/microk8s-bootstrap.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: MachineDeployment\nmetadata:\n  name: capi-aws-md-0\n  namespace: default\nspec:\n  clusterName: capi-aws\n  replicas: 2\n  selector:\n    matchLabels: null\n  template:\n    spec:\n      clusterName: capi-aws\n      version: v1.23.0     \n      bootstrap:\n        configRef:\n          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1\n          kind: MicroK8sConfigTemplate\n          name: capi-aws-md-0\n......\n---\napiVersion: bootstrap.cluster.x-k8s.io/v1beta1\nkind: MicroK8sConfigTemplate\nmetadata:\n  name: capi-aws-md-0\n  namespace: default\nspec:\n  template:\n    spec: {}\n```\n\n----------------------------------------\n\nTITLE: Deploying Custom Infrastructure Provider\nDESCRIPTION: Commands to install CRDs and deploy the controller for a custom infrastructure provider into the current kubectl context.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/building-running-and-testing.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd cluster-api-provider-mailgun\n\n# Install CRD and controller to current kubectl context\nmake install deploy\n\nkubectl describe -n cluster-api-provider-mailgun-system pod | grep -A 5 Conditions\n```\n\n----------------------------------------\n\nTITLE: Download clusterctl for Linux (ARM64) (Bash)\nDESCRIPTION: Downloads the `clusterctl` binary specifically compiled for Linux ARM64 architectures using `curl`. The URL uses a template helper `{{#releaselink ...}}` to fetch the correct asset for version 1.9.x.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L {{#releaselink repo:\"https://github.com/kubernetes-sigs/cluster-api\" gomodule:\"sigs.k8s.io/cluster-api\" asset:\"clusterctl-linux-arm64\" version:\"1.9.x\"}} -o clusterctl\n```\n\n----------------------------------------\n\nTITLE: Signing a CSR with Cluster CA in Bash\nDESCRIPTION: Signs the Certificate Signing Request using the cluster's CA certificate and key. This creates a valid certificate (admin.crt) that will be trusted by the Kubernetes cluster.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/certs/generate-kubeconfig.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -req -in admin.csr -CA tls.crt -CAkey tls.key -CAcreateserial -out admin.crt -days 5 -sha256\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Overrides in YAML\nDESCRIPTION: These YAML snippets demonstrate how to configure image overrides for air-gapped environments. They show how to set a global repository override, override specific components, and override individual images.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nimages:\n  all:\n    repository: myorg.io/local-repo\n```\n\nLANGUAGE: yaml\nCODE:\n```\nimages:\n  all:\n    repository: myorg.io/local-repo\n  cert-manager:\n    tag: v1.5.3\n```\n\nLANGUAGE: yaml\nCODE:\n```\nimages:\n  all:\n    repository: myorg.io/local-repo\n  cert-manager/cert-manager-cainjector:\n    tag: v1.5.3\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterResourceBinding Object in YAML for Kubernetes Cluster API\nDESCRIPTION: This YAML snippet defines a ClusterResourceBinding object, which is used to track the application of resources from ClusterResourceSets to specific clusters. It includes metadata such as name, namespace, and owner references, as well as a spec section detailing the bindings and resource application status.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200220-cluster-resource-set.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ClusterResourceBinding\nmetadata:\n  name: <cluster-name>\n  namespace: <cluster-namespace>\n  ownerReferences:\n  - apiVersion: cluster.x-k8s.io/v1alpha3\n    kind: Cluster\n    name: <cluster-name>\n    uid: e3a503a8-9be1-4264-8fa2-d536532687f9\n  - apiVersion: addons.cluster.x-k8s.io/v1alpha3\n    blockOwnerDeletion: true\n    controller: true\n    kind: ClusterResourceSet\n    name: crs1\n    uid: 62c77639-92d8-46d2-ba21-a880f62f7719\nspec:\n  bindings:\n  - clusterResourceSetName: crs1\n    resources:\n    - applied: true\n      hash: sha256:a3473f4e92ee5a2277ff37d5c559666d61d24332a497b554e65ae18e82727245\n      kind: Secret\n      lastAppliedTime: \"2020-07-02T05:47:38Z\"\n      name: db-secret\n    - applied: true\n      hash: sha256:c1d0dc7e51bb05945a2f99e6745dc4b1043f8a03f37ad21391fe92353a02066e\n      kind: ConfigMap\n      lastAppliedTime: \"2020-07-02T05:47:39Z\"\n      name: calico-addon\n```\n\n----------------------------------------\n\nTITLE: Visualizing KubeadmControlPlane (KCP) External Update Flow in CAPI (Mermaid)\nDESCRIPTION: This Mermaid sequence diagram depicts the external update workflow for the KubeadmControlPlane (KCP) in Cluster API. It shows the KCP controller deciding the strategy and then, for each machine, marking it as pending and updating its spec. The Machine controller then sets conditions, runs external updaters sequentially, and marks the update hooks as done.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240807-in-place-updates.md#2025-04-22_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\nbox Management Cluster\n    participant Operator\n    participant apiserver as kube-api server\n    participant capi as KCP controller\n    participant mach as Machine Controller\n    participant hook as External updater\nend\n\nOperator->>apiserver: make changes to KCP\napiserver->>capi: Notify changes\napiserver->>Operator: OK\ncapi->>capi: Decide Update Strategy\nloop For all machines\n    capi->>apiserver: Mark Machine as pending, update spec\n    apiserver->>mach: Notify changes\n    mach->>apiserver: Set UpToDate condition to False\n    loop For each External Updater\n        mach->>hook: Run until completion\n    end\n    mach->>apiserver: Mark Hooks in Machine as Done\n    mach->>apiserver: Set UpToDate condition to True\nend\n```\n\n----------------------------------------\n\nTITLE: Restarting a MachineDeployment Rollout in Cluster API\nDESCRIPTION: This command forces an immediate rollout of a MachineDeployment named 'my-md-0'. It replaces existing machines with new ones using the desired rollout strategy.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/alpha-rollout.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl alpha rollout restart machinedeployment/my-md-0\n```\n\n----------------------------------------\n\nTITLE: Creating Pod Security Standard Patches for New ClusterClass Configuration\nDESCRIPTION: This YAML snippet shows how to add patches to a ClusterClass that doesn't have existing extraVolumes and files configurations. It creates the complete configuration structure for Pod Security Admission, with the note that it will replace any existing values.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/security/pod-security-standards.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\nspec:\n  ...\n  patches:\n  - name: podSecurityStandard\n    description: \"Adds an admission configuration for PodSecurity to the kube-apiserver.\"\n    definitions:\n    - selector:\n        apiVersion: controlplane.cluster.x-k8s.io/v1beta1\n        kind: KubeadmControlPlaneTemplate\n        matchResources:\n          controlPlane: true\n      jsonPatches:\n      - op: add\n        path: \"/spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs\"\n        value:\n          admission-control-config-file: \"/etc/kubernetes/kube-apiserver-admission-pss.yaml\"\n      - op: add\n        path: \"/spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes\"\n        value:\n        - name: admission-pss\n          hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml\n          mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml\n          readOnly: true\n          pathType: \"File\"\n      - op: add\n        path: \"/spec/template/spec/kubeadmConfigSpec/files\"\n        valueFrom:\n          template: |\n            - content: |\n                apiVersion: apiserver.config.k8s.io/v1\n                kind: AdmissionConfiguration\n                plugins:\n                - name: PodSecurity\n                  configuration:\n                    apiVersion: pod-security.admission.config.k8s.io/v1{{ if semverCompare \"< v1.25\" .builtin.controlPlane.version }}beta1{{ end }}\n                    kind: PodSecurityConfiguration\n                    defaults:\n                      enforce: \"{{ .podSecurity.enforce }}\"\n                      enforce-version: \"latest\"\n                      audit: \"{{ .podSecurity.audit }}\"\n                      audit-version: \"latest\"\n                      warn: \"{{ .podSecurity.warn }}\"\n                      warn-version: \"latest\"\n                    exemptions:\n                      usernames: []\n                      runtimeClasses: []\n                      namespaces: [kube-system]\n              path: /etc/kubernetes/kube-apiserver-admission-pss.yaml\n    enabledIf: \"{{ .podSecurityStandard.enabled }}\"\n...\n```\n\n----------------------------------------\n\nTITLE: Installing clusterctl with curl on Windows using PowerShell\nDESCRIPTION: Downloads the latest release of clusterctl binary for Windows using curl and adds it to the PATH environment variable.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\ncurl.exe -L {{#releaselink repo:\"https://github.com/kubernetes-sigs/cluster-api\" gomodule:\"sigs.k8s.io/cluster-api\" asset:\"clusterctl-windows-amd64.exe\" version:\"1.9.x\"}} -o clusterctl.exe\n```\n\nLANGUAGE: powershell\nCODE:\n```\nclusterctl.exe version\n```\n\n----------------------------------------\n\nTITLE: Configuring a Cluster API Provider for Tilt Build (yaml)\nDESCRIPTION: This YAML example illustrates the structure of a `tilt-provider.yaml` file (or `tilt-provider.json`). It defines metadata for Tilt, such as the provider name, image name, files/directories to watch for live reloading (`live_reload_deps`), and a label for the Tilt UI (`CAPA`). This file configures how Tilt handles the build and deployment lifecycle for the provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nname: aws\nconfig:\n  image: \"gcr.io/k8s-staging-cluster-api-aws/cluster-api-aws-controller\"\n  live_reload_deps: [\"main.go\", \"go.mod\", \"go.sum\", \"api\", \"cmd\", \"controllers\", \"pkg\"]\n  label: CAPA\n```\n\n----------------------------------------\n\nTITLE: FooMachine Spec with ProviderID\nDESCRIPTION: This code snippet shows how to define the ProviderID within the FooMachineSpec structure. The provider ID is essential to link the InfraMachine resource with the corresponding Kubernetes Node. It includes an optional string field 'ProviderID' as part of the Go struct.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/infra-machine.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype FooMachineSpec struct {\n    // providerID must match the provider ID as seen on the node object corresponding to this machine.\n\t// For Kubernetes Nodes running on the Foo provider, this value is set by the corresponding CPI component \n\t// and it has the format docker:////<vm-name>. \n    // +optional\n    ProviderID *string `json:\"providerID,omitempty\"`\n    \n    // See other rules for more details about mandatory/optional fields in InfraMachine spec.\n    // Other fields SHOULD be added based on the needs of your provider.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Initialization Status for BootstrapConfig in Go\nDESCRIPTION: Implementation of the initialization status for a BootstrapConfig resource. The structure includes the dataSecretCreated field which is part of the Cluster API contract and used to orchestrate initial Machine provisioning.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/bootstrap-config.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype FooConfigStatus struct {\n    // initialization provides observations of the FooConfig initialization process.\n    // NOTE: Fields in this struct are part of the Cluster API contract and are used to orchestrate initial Machine provisioning.\n    // +optional\n    Initialization *FooConfigInitializationStatus `json:\"initialization,omitempty\"`\n    \n    // See other rules for more details about mandatory/optional fields in BootstrapConfig status.\n    // Other fields SHOULD be added based on the needs of your provider.\n}\n\n// FooConfigInitializationStatus provides observations of the FooConfig initialization process.\ntype FooConfigInitializationStatus struct {\n    // dataSecretCreated is true when the Machine's boostrap secret is created.\n    // NOTE: this field is part of the Cluster API contract, and it is used to orchestrate initial Machine provisioning.\n    // +optional\n    DataSecretCreated bool `json:\"dataSecretCreated,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Externally Managed Autoscaler Configuration Example in YAML\nDESCRIPTION: Example YAML configuration for an Infrastructure MachinePool that is managed by an external autoscaler, showing the scaling phase status and providerIDList with more replicas than specified.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/controllers/machine-pool.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: MyMachinePool\napiVersion: infrastructure.cluster.x-k8s.io/v1alpha3\nspec:\n    providerIDList:\n      - cloud:////my-cloud-provider-id-0\n      - cloud:////my-cloud-provider-id-1\n      - cloud:////my-cloud-provider-id-2\n    replicas: 1\nstatus:\n    ready: true\n    phase: Scaling\n    infrastructureMachineKind: InfrastructureMachine\n```\n\n----------------------------------------\n\nTITLE: Sourcing clusterctl completion script in ~/.bash_profile\nDESCRIPTION: This command sources the clusterctl completion script for Bash in the user's ~/.bash_profile, enabling completion for all shell sessions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/completion.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsource <(clusterctl completion bash)\n```\n\n----------------------------------------\n\nTITLE: Creating a Secure Cluster with Custom Pod Security Standards\nDESCRIPTION: This YAML snippet shows how to create a Kubernetes cluster using a ClusterClass with Pod Security Standards enabled. It demonstrates how to customize security levels by setting the enforce mode to 'restricted' for maximum security.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/security/pod-security-standards.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: Cluster\nmetadata:\n  name: \"my-cluster\"\nspec:\n  ...\n  topology:\n    ...\n    class: my-secure-cluster-class\n    variables:\n    - name: podSecurityStandard\n      value: \n        enabled: true\n        enforce: \"restricted\"\n```\n\n----------------------------------------\n\nTITLE: Installing KubeVirt on a Kind Cluster\nDESCRIPTION: This script installs the latest version of KubeVirt on a kind cluster by deploying the required CRDs and the KubeVirt custom resource.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\n# get KubeVirt version\nKV_VER=$(curl \"https://api.github.com/repos/kubevirt/kubevirt/releases/latest\" | jq -r \".tag_name\")\n# deploy required CRDs\nkubectl apply -f \"https://github.com/kubevirt/kubevirt/releases/download/${KV_VER}/kubevirt-operator.yaml\"\n# deploy the KubeVirt custom resource\nkubectl apply -f \"https://github.com/kubevirt/kubevirt/releases/download/${KV_VER}/kubevirt-cr.yaml\"\nkubectl wait -n kubevirt kv kubevirt --for=condition=Available --timeout=10m\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Pre-release Cluster API Versions in Bash\nDESCRIPTION: This command shows how to upgrade to pre-release versions of Cluster API providers. All provider versions must be explicitly stated when using pre-release versions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/upgrade.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl upgrade apply \\\n    --core cluster-api:v1.0.0 \\\n    --bootstrap kubeadm:v1.0.0 \\\n    --control-plane kubeadm:v1.0.0 \\\n    --infrastructure docker:v1.0.0-rc.0\n```\n\n----------------------------------------\n\nTITLE: Conditional Patch Enablement Examples\nDESCRIPTION: Collection of examples showing different ways to conditionally enable patches using hard-coded values, boolean variables, and version comparisons.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n    enabledIf: false\n\n    enabledIf: \"{{ .httpProxyEnabled }}\"\n\n    enabledIf: \"{{ .httpProxy.enabled }}\"\n\n    enabledIf: '{{ semverCompare \"1.21.1\" .builtin.controlPlane.version }}'\n\n    enabledIf: '{{ semverCompare \"^1.22.0\" (coalesce .builtin.controlPlane.version .builtin.machineDeployment.version )}}'\n```\n\n----------------------------------------\n\nTITLE: Upgrading Core Cluster API Components to Pre-release Versions in Bash\nDESCRIPTION: This command demonstrates how to upgrade core Cluster API components to a specific pre-release version. It uses a variable to set the target version for multiple components.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/upgrade.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nTARGET_VERSION=v1.6.0-rc.1\n\nclusterctl upgrade apply \\\n    --bootstrap=kubeadm:${TARGET_VERSION} \\\n    --control-plane=kubeadm:${TARGET_VERSION} \\\n    --core=cluster-api:${TARGET_VERSION}\n```\n\n----------------------------------------\n\nTITLE: Configuring CRD Version Labels in Kustomization for Cluster API Compatibility\nDESCRIPTION: Example kustomization.yaml configuration that shows how to apply version compatibility labels to Custom Resource Definitions. These labels help Cluster API controllers perform automatic conversions for object references by mapping Cluster API contract versions to provider CRD versions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/bootstrap-config.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n- pairs:\n    cluster.x-k8s.io/v1alpha2: v1alpha1\n    cluster.x-k8s.io/v1alpha3: v1alpha2\n    cluster.x-k8s.io/v1beta1: v1beta1\n```\n\n----------------------------------------\n\nTITLE: Undoing a MachineDeployment Rollout in Cluster API\nDESCRIPTION: This command rolls back a MachineDeployment named 'my-md-0' to revision number 3. If the --to-revision flag is omitted, it rolls back to the previous revision. An error is returned if the desired revision doesn't exist.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/alpha-rollout.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl alpha rollout undo machinedeployment/my-md-0 --to-revision=3\n```\n\n----------------------------------------\n\nTITLE: Documenting Kubeadm Types Compatibility\nDESCRIPTION: Markdown documentation explaining why Kubeadm types were copied from kubernetes/kubernetes and the compatibility issues with controller-gen@v0.2. Notes that these types will be adopted from upstream once proper JSON struct tags are implemented.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/bootstrap/kubeadm/types/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Kubeadm types\\n\\nThese types were copied in from `kubernetes/kubernetes`.\\n\\nThe types found in `kubernetes/kubernetes` are incompatible with `controller-gen@v0.2`.\\n\\n`controller-gen@v0.2` requires that all fields of all embedded types have json struct tags and kubeadm types are missing a few.\\n\\nIf the kubeadm types ever escape `kubernetes/kubernetes` then we will adopt those assuming the types do all have json struct tags.\n```\n\n----------------------------------------\n\nTITLE: Rebasing Cluster to Different ClusterClass with clusterctl Bash\nDESCRIPTION: The command is used to assess if a cluster can be successfully rebased to another ClusterClass using clusterctl. It requires an input YAML that depicts the desired state of the cluster pointing to a new ClusterClass. This helps in pre-emptive validation of cluster compatibility.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/alpha-topology-plan.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Rebasing from `example-cluster-class` to `another-cluster-class`.\nclusterctl alpha topology plan -f rebase-example-cluster.yaml -o output/\n```\n\n----------------------------------------\n\nTITLE: Creating RBAC Permissions for Custom ControlPlane API Groups in Kubernetes\nDESCRIPTION: Example ClusterRole definition that grants necessary RBAC permissions for a custom ControlPlane provider to interact with Cluster API controllers. This example shows how to set up permissions for a 'FooControlPlane' resource in the 'controlplane.foo.com' API group with the required aggregation label.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/control-plane.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n    name: capi-foo-controlplane\n    labels:\n      cluster.x-k8s.io/aggregate-to-manager: \"true\"\nrules:\n- apiGroups:\n    - controlplane.foo.com\n  resources:\n    - foocontrolplanes\n  verbs:\n    - create\n    - delete\n    - get\n    - list\n    - patch\n    - update\n    - watch\n- apiGroups:\n    - controlplane.foo.com\n  resources:\n    - foocontrolplanetemplates\n  verbs:\n    - get\n    - list\n    - patch\n    - update\n    - watch\n```\n\n----------------------------------------\n\nTITLE: Initializing VirtInk Management Cluster\nDESCRIPTION: Initializes a Cluster API management cluster using the VirtInk infrastructure provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize the management cluster\nclusterctl init --infrastructure virtink\n```\n\n----------------------------------------\n\nTITLE: Default Kubebuilder Scheme Registration Using Controller-Runtime\nDESCRIPTION: The default scheme registration pattern used by Kubebuilder, which utilizes controller-runtime but introduces an additional dependency to the API package.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/implement-api-types.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport \"sigs.k8s.io/controller-runtime/pkg/scheme\"\n\nvar (\n\t// SchemeBuilder is used to add go types to the GroupVersionKind scheme\n\tSchemeBuilder = &scheme.Builder{GroupVersion: GroupVersion}\n\n\t// AddToScheme adds the types in this group-version to the given scheme.\n\tAddToScheme = SchemeBuilder.AddToScheme\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Resource Capacity via Annotations in YAML\nDESCRIPTION: Example of using annotations on a MachineSet or MachineDeployment to specify resource capacity, including CPU, memory, GPU, and ephemeral disk. This method can be used when infrastructure providers haven't implemented template status updates.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20210310-opt-in-autoscaling-from-zero.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: <MachineSet or MachineDeployment>\nmetadata:\n  annotations:\n      capacity.cluster-autoscaler.kubernetes.io/gpu-count: \"1\"\n      capacity.cluster-autoscaler.kubernetes.io/gpu-type: \"nvidia.com/gpu\"\n      capacity.cluster-autoscaler.kubernetes.io/memory: \"500mb\"\n      capacity.cluster-autoscaler.kubernetes.io/cpu: \"1\"\n      capacity.cluster-autoscaler.kubernetes.io/ephemeral-disk: \"100Gi\"\n```\n\n----------------------------------------\n\nTITLE: Specifying ControlPlane Custom Naming Strategy in ClusterClass - Kubernetes YAML\nDESCRIPTION: This snippet configures a custom naming strategy for ControlPlane objects generated via ClusterClass. The 'namingStrategy.template' allows usage of cluster attributes and random string expansion for unique and RFC1123-compliant names. Requires Cluster API controller to interpret the template, supports the .cluster.name and .random placeholders. Only affects ControlPlane names in the cluster topology.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\\nkind: ClusterClass\\nmetadata:\\n  name: docker-clusterclass-v0.1.0\\nspec:\\n  controlPlane:\\n    ...\\n    namingStrategy:\\n      template: \"{{ .cluster.name }}-{{ .random }}\"\\n  ...\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Scaling Kubernetes Cluster\nDESCRIPTION: This YAML configuration defines a Kubernetes Cluster resource that scales the control plane to three replicas and assigns additional labels to a worker's machine deployment. This setup is specific to the Cluster API and requires no additional dependencies except a management cluster where the class 'example-cluster-class' is registered.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/alpha-topology-plan.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: Cluster\nmetadata:\n  name: \"example-cluster\"\n  namespace: default\n  labels:\n    cni: kindnet\nspec:\n  clusterNetwork:\n    services:\n      cidrBlocks: [\"10.128.0.0/12\"]\n    pods:\n      cidrBlocks: [\"192.168.0.0/16\"]\n    serviceDomain: \"cluster.local\"\n  topology:\n    class: example-cluster-class\n    version: v1.21.2\n    controlPlane:\n      metadata: {}\n      # Scale up the control plane from 1 -> 3.\n      replicas: 3\n    workers:\n      machineDeployments:\n      - class: \"default-worker\"\n        # Apply additional labels.\n        metadata: \n          labels:\n            test-label: md-0-label\n        name: \"md-0\"\n        replicas: 1\n```\n\n----------------------------------------\n\nTITLE: Modifying Calico Manifest for KubeVirt Environment\nDESCRIPTION: This script downloads the Calico manifest and modifies it to prevent conflicts with the management cluster's CNI. It changes CIDR, cluster type, and VXLAN settings.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_84\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://raw.githubusercontent.com/projectcalico/calico/v3.29.1/manifests/calico.yaml -o calico-workload.yaml\n\nsed -i -E 's|^( +)# (- name: CALICO_IPV4POOL_CIDR)$|\\1\\2|g;'\n's|^( +)# (  value: )\"192.168.0.0/16\"|\\1\\2\"10.243.0.0/16\"|g;'\n'/- name: CLUSTER_TYPE/{ n; s/( +value: \").+/\\1k8s\"/g };'\n'/- name: CALICO_IPV4POOL_IPIP/{ n; s/value: \"Always\"/value: \"Never\"/ };'\n'/- name: CALICO_IPV4POOL_VXLAN/{ n; s/value: \"Never\"/value: \"Always\"/};'\n'/# Set Felix endpoint to host default action to ACCEPT./a\\            - name: FELIX_VXLANPORT\\n              value: \"6789\"' \\\ncalico-workload.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Variable Values in Cluster Resource - Kubernetes YAML\nDESCRIPTION: This YAML shows how to instantiate a Cluster resource that provides a concrete value for a ClusterClass variable. The value overrides the default if present in the ClusterClass and is provided via the 'variables' field under 'spec.topology'. Requires a predefined ClusterClass with matching variable definitions. Used at cluster creation or update, key input is the variable name and its desired value.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\\nkind: Cluster\\nmetadata:\\n  name: my-docker-cluster\\nspec:\\n  topology:\\n    ...\\n    variables:\\n    - name: imageRepository\\n      value: my.custom.registry\n```\n\n----------------------------------------\n\nTITLE: Declaring Webhook Tags and Struct for Cluster Admission Controller - Kubebuilder/Controller Runtime - Go\nDESCRIPTION: This snippet showcases how to annotate a Go type with Kubebuilder webhook tags that trigger the code generator to produce Mutating and ValidatingWebhookConfiguration manifests. The code defines the 'Cluster' struct which will act as an admission webhook handler for cluster resources. The tags specify the operations (create, update, delete), webhook paths, mutating/validating behavior, failure policy, match policy, and API group/resource details required for Kubernetes to properly invoke the generated webhook endpoints. These tags depend on Kubebuilder and controller-gen for code generation. The struct 'Cluster' must implement the relevant webhook interfaces from Controller Runtime, and the presence of these tags ensures the webhook server will be scaffolded for resource admission requests.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/webhooks.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// +kubebuilder:webhook:verbs=create;update;delete,path=/validate-cluster-x-k8s-io-v1beta1-cluster,mutating=false,failurePolicy=fail,matchPolicy=Equivalent,groups=cluster.x-k8s.io,resources=clusters,versions=v1beta1,name=validation.cluster.cluster.x-k8s.io,sideEffects=None,admissionReviewVersions=v1;v1beta1\n// +kubebuilder:webhook:verbs=create;update,path=/mutate-cluster-x-k8s-io-v1beta1-cluster,mutating=true,failurePolicy=fail,matchPolicy=Equivalent,groups=cluster.x-k8s.io,resources=clusters,versions=v1beta1,name=default.cluster.cluster.x-k8s.io,sideEffects=None,admissionReviewVersions=v1;v1beta1\n\n// Cluster implements a validating and defaulting webhook for Cluster.\ntype Cluster struct {\n    Client client.Reader\n}\n```\n\n----------------------------------------\n\nTITLE: Deploy Kubernetes Manifests with Makefile\nDESCRIPTION: This bash snippet allows for building and deploying Custom Resource Definitions (CRDs) and Kubernetes manifests using Makefile scripts.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/configure-the-deployment.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake install deploy\n\n```\n\n----------------------------------------\n\nTITLE: Example IPAddress YAML Resource\nDESCRIPTION: Example of an IPAddress resource created by IPAM providers in response to claims. Shows the structure for fulfilling address requests.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220125-ipam-integration.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ipam.cluster.x-k8s.io/v1alpha1\nkind: IPAddress\nmetadata:\n  name: example-address\n  namespace: default\nspec:\n  address: \"192.168.1.100\"\n  prefix: 24\n  gateway: \"192.168.1.1\"\n```\n\n----------------------------------------\n\nTITLE: Applying CNI Plugin to the New Cluster - kubectl - Bash\nDESCRIPTION: This snippet shows how to extract the kubeconfig for a newly created cluster and apply a Container Network Interface (CNI) manifest to it. It uses kubectl to retrieve the kubeconfig secret, decode it, and save it as a new kubeconfig file, which is then used to apply the provided CNI manifest. Dependencies are kubectl, base64 (with -D option), and sufficient RBAC privileges. Inputs include the cluster name ('my-first-cluster') and the path to the CNI manifest file ('MY_CNI'). Outputs are a kubeconfig file for the new cluster and installation of the specified CNI. Limitations: Assumes secret naming convention and base64 tool compatibility.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20191016-clusterctl-redesign.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secret my-first-cluster-kubeconfig -o=jsonpath='{.data.value}' | base64 -D > my-first-cluster.kubeconfig\nkubectl apply --kubeconfig=my-first-cluster.kubeconfig -f MY_CNI\n```\n\n----------------------------------------\n\nTITLE: Querying KubeadmControlPlane Resources with kubectl\nDESCRIPTION: Demonstrates the `kubectl get` command used to list `KubeadmControlPlane` resources within a Kubernetes cluster managed by Cluster API. This command is used as an example to show the standard output format defined by `additionalPrinterColumns`.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get kubeadmcontrolplane\n```\n\n----------------------------------------\n\nTITLE: Generating Cluster API Configuration\nDESCRIPTION: Generates a cluster configuration YAML file using clusterctl with specified Kubernetes version and machine counts.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_75\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl generate cluster capi-quickstart \\\n  --kubernetes-version v1.32.0 \\\n  --control-plane-machine-count=3 \\\n  --worker-machine-count=3 \\\n  > capi-quickstart.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining MachinePoolStatus and MachinePoolInitializationStatus in Golang\nDESCRIPTION: This code snippet defines the Go types for MachinePoolStatus and MachinePoolInitializationStatus structures that will be used in Cluster API v1beta2 after v1beta1 removal. It includes fields for tracking replicas, initialization status, and conditions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240916-improve-status-in-CAPI-resources.md#2025-04-22_snippet_9\n\nLANGUAGE: golang\nCODE:\n```\ntype MachinePoolStatus struct {\n\n    // The number of ready replicas for this MachinePool. A machine is considered ready when Machine's Ready condition is true.\n    // +optional\n    ReadyReplicas *int32 `json:\"readyReplicas,omitempty\"`\n\n    // The number of available replicas for this MachinePool. A machine is considered available when Machine's Available condition is true.\n    // +optional\n    AvailableReplicas *int32 `json:\"availableReplicas,omitempty\"`\n\n    // The number of up-to-date replicas targeted by this MachinePool. A machine is considered available when Machine's  UpToDate condition is true.\n    // +optional\n    UpToDateReplicas *int32 `json:\"upToDateReplicas,omitempty\"`\n\n    // Initialization provides observations of the MachinePool initialization process.\n    // NOTE: Fields in this struct are part of the Cluster API contract and are used to orchestrate initial MachinePool provisioning.\n    // The value of those fields is never updated after provisioning is completed.\n    // Use conditions to monitor the operational state of the MachinePool.\n    // +optional\n    Initialization *MachinePoolInitializationStatus `json:\"initialization,omitempty\"`\n    \n    // Conditions represent the observations of a MachinePool's current state.\n    // +optional\n    // +listType=map\n    // +listMapKey=type\n    // +kubebuilder:validation:MaxItems=32\n    Conditions []metav1.Condition `json:\"conditions,omitempty\"`\n    \n    // Other fields...\n    // NOTE:`FailureReason`, `FailureMessage`, `BootstrapReady`, `InfrastructureReady` fields won't be there anymore\n}\n\n// MachinePoolInitializationStatus provides observations of the MachinePool initialization process.\ntype MachinePoolInitializationStatus struct {\n\n    // BootstrapDataSecretCreated is true when the bootstrap provider reports that the MachinePool's boostrap data secret is created.\n    // NOTE: this field is part of the Cluster API contract, and it is used to orchestrate initial MachinePool provisioning.\n    // The value of this field is never updated after provisioning is completed.\n    // Use conditions to monitor the operational state of the MachinePool's BootstrapSecret.\n    // +optional\n    BootstrapDataSecretCreated bool `json:\"bootstrapDataSecretCreated\"`\n    \n    // InfrastructureProvisioned is true when the infrastructure provider reports that the MachinePool's infrastructure is fully provisioned.\n    // NOTE: this field is part of the Cluster API contract, and it is used to orchestrate initial MachinePool provisioning.\n    // The value of this field is never updated after provisioning is completed.\n    // Use conditions to monitor the operational state of the MachinePool's infrastructure.\n    // +optional\n    InfrastructureProvisioned bool `json:\"infrastructureProvisioned\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Example BeforeClusterCreate Response (YAML)\nDESCRIPTION: This YAML snippet illustrates an example response payload returned by a Runtime Extension for the `BeforeClusterCreate` hook. It specifies the API version, kind, status (Success or Failure), an optional message (especially on Failure), and an optional `retryAfterSeconds` field to indicate when the hook should be called again if it initially fails or needs more time.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-lifecycle-hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: hooks.runtime.cluster.x-k8s.io/v1alpha1\nkind: BeforeClusterCreateResponse\nstatus: Success # or Failure\nmessage: \"error message if status == Failure\"\nretryAfterSeconds: 10\n```\n\n----------------------------------------\n\nTITLE: Creating RBAC ClusterRole for Infrastructure Provider Resources in Cluster API\nDESCRIPTION: Example of a ClusterRole with aggregation label to grant Cluster API controllers full read/write permissions to custom infrastructure provider resources. This allows Cluster API to manage resources in custom API groups.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/infra-machine.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n    name: capi-foo-clusters\n    labels:\n      cluster.x-k8s.io/aggregate-to-manager: \"true\"\nrules:\n- apiGroups:\n    - infrastructure.foo.com\n  resources:\n    - foomachines\n    - foomachinetemplates\n  verbs:\n    - create\n    - delete\n    - get\n    - list\n    - patch\n    - update\n    - watch\n```\n\n----------------------------------------\n\nTITLE: Referencing ClusterClass Across Namespaces in Cluster Resource - Kubernetes YAML\nDESCRIPTION: This YAML shows a Cluster resource configured to reference a ClusterClass located in a potentially different namespace, using the 'class' and 'classNamespace' fields. Ensures unique identification of the ClusterClass across the cluster. Requires both Cluster and ClusterClass definitions and multi-namespace support. May be subject to admission controls as described elsewhere in the guide.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\\nkind: Cluster\\nmetadata:\\n  name: my-docker-cluster\\n  namespace: default\\nspec:\\n  topology:\\n    class: docker-clusterclass-v0.1.0\\n    classNamespace: default\\n    version: v1.22.4\\n    controlPlane:\\n      replicas: 3\\n    workers:\\n      machineDeployments:\\n      - class: default-worker\\n        name: md-0\\n        replicas: 4\\n        failureDomain: region\n```\n\n----------------------------------------\n\nTITLE: Setting Version Labels in Kustomization for CRDs\nDESCRIPTION: Example kustomization.yaml configuration that sets the required Cluster API version labels on Custom Resource Definitions. This allows Cluster API controllers to perform automatic conversions for object references across different versions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/infra-cluster.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n- pairs:\n    cluster.x-k8s.io/v1alpha2: v1alpha1\n    cluster.x-k8s.io/v1alpha3: v1alpha2\n    cluster.x-k8s.io/v1beta1: v1beta1\n```\n\n----------------------------------------\n\nTITLE: Defining Cluster Condition Types in Golang\nDESCRIPTION: Example of defining specific condition types for a Cluster API resource.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200506-conditions.md#2025-04-22_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\n// ConditionTypes for the cluster object \nconst (\n\tClusterInfrastructureReady ConditionType = \"ClusterInfrastructureReady\"\n\t\n\t...\n)\n```\n\n----------------------------------------\n\nTITLE: Patching Cluster Variable Value\nDESCRIPTION: kubectl command to update the etcdImageTag variable value using JSON patch\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/operate-cluster.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl  patch cluster capi-quickstart --type json --patch '[{\"op\": \"replace\", \"path\": \"/spec/topology/variables/1/value\",  \"value\": \"3.5.0\"}]'\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC Permissions for External API Groups in Cluster API\nDESCRIPTION: Example ClusterRole configuration that grants Cluster API controllers the necessary permissions to interact with custom infrastructure resources in a non-standard API group. This is required when your infrastructure provider uses an API group other than the standard 'infrastructure.cluster.x-k8s.io'.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/infra-cluster.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n    name: capi-foo-clusters\n    labels:\n      cluster.x-k8s.io/aggregate-to-manager: \"true\"\nrules:\n- apiGroups:\n    - infrastructure.foo.com\n  resources:\n    - fooclusters\n  verbs:\n    - create\n    - delete\n    - get\n    - list\n    - patch\n    - update\n    - watch\n- apiGroups:\n    - infrastructure.foo.com\n  resources:\n    - fooclustertemplates\n  verbs:\n    - get\n    - list\n    - patch\n    - update\n    - watch\n```\n\n----------------------------------------\n\nTITLE: Configuring Tilt-Settings with Observability for Cluster API Development\nDESCRIPTION: YAML configuration example for setting up a development environment with Promtail, Loki, and Grafana for log analysis. This configuration enables JSON-formatted logs with high verbosity across core and provider components.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/logging.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndeploy_observability:\n  - promtail\n  - loki\n  - grafana\nenable_providers:\n  - docker\n  - kubeadm-bootstrap\n  - kubeadm-control-plane\nextra_args:\n  core:\n    - \"--logging-format=json\"\n    - \"--v=5\"\n  docker:\n    - \"--v=5\"\n    - \"--logging-format=json\"\n  kubeadm-bootstrap:\n    - \"--v=5\"\n    - \"--logging-format=json\"\n  kubeadm-control-plane:\n    - \"--v=5\"\n    - \"--logging-format=json\"\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with Debug Options\nDESCRIPTION: Command to run Cluster API e2e tests with debugging enabled, which provides more verbose output for troubleshooting test failures.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/CONTRIBUTING.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncd cluster-api\nGINKGO_FOCUS=\"Workload cluster creation\" DEBUG=true make test-e2e\n```\n\n----------------------------------------\n\nTITLE: Updating VSphereMachineTemplate Memory Configuration\nDESCRIPTION: YAML diff showing how to update the memory allocation in a VSphereMachineTemplate from 4096MiB to 8192MiB.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240807-in-place-updates.md#2025-04-22_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\napiVersion: infrastructure.cluster.x-k8s.io/v1beta1\nkind: VSphereMachineTemplate\nmetadata:\n-  name: md-1-1\n+  name: md-1-2\nspec:\n  template:\n    spec:\n-     memoryMiB: 4096\n+     memoryMiB: 8192\n```\n\n----------------------------------------\n\nTITLE: Querying MachineDeployment Resources with kubectl\nDESCRIPTION: Demonstrates the `kubectl get` command used to list `MachineDeployment` resources within a Kubernetes cluster managed by Cluster API. This serves as another example illustrating the output format configured via `additionalPrinterColumns`.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get machinedeployment\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository for Cluster API Provider\nDESCRIPTION: Creates a new directory for the Cluster API provider and initializes a Git repository. This is the first step in setting up a new infrastructure provider project.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/initialize-repo-and-api-types.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir cluster-api-provider-mailgun\ncd src/sigs.k8s.io/cluster-api-provider-mailgun\ngit init\n```\n\n----------------------------------------\n\nTITLE: Creating RBAC Permissions for Dynamic Log Level Changes via Kubectl in YAML\nDESCRIPTION: Creates Kubernetes RBAC resources using `kubectl apply`. It defines a `ClusterRole` named `default-loglevel` granting PUT access to the `/debug/flags/v` nonResourceURL, and a `ClusterRoleBinding` named `default-loglevel` assigning this role to the `default` ServiceAccount in the `default` namespace. This allows the specified ServiceAccount to dynamically change the controller's log verbosity.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/diagnostics.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncat << EOT | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: default-loglevel\nrules:\n- nonResourceURLs:\n  - \"/debug/flags/v\"\n  verbs:\n  - put\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: default-loglevel\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: default-loglevel\nsubjects:\n- kind: ServiceAccount\n  name: default\n  namespace: default\nEOT\n```\n\n----------------------------------------\n\nTITLE: Patching Calico Deployment for Image Pulling\nDESCRIPTION: This command patches the Calico kube-controllers deployment to use the Docker credentials secret for pulling images, resolving ErrImagePull issues.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_90\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --kubeconfig=./capi-quickstart.kubeconfig patch deployment \\\n    -n kube-system calico-kube-controllers \\\n    -p '{\"spec\":{\"template\":{\"spec\":{\"imagePullSecrets\":[{\"name\":\"docker-creds\"}]}}}}'\n```\n\n----------------------------------------\n\nTITLE: Defining a ClusterEndpoint CR for External Control Plane (DNS Host)\nDESCRIPTION: Example YAML manifest for the proposed `ClusterEndpoint` Custom Resource Definition (CRD). This instance defines an external control plane endpoint for the cluster 'my-cluster' using a DNS hostname and port. It includes standard Kubernetes metadata and labels associating it with the corresponding Cluster API cluster.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20230407-flexible-managed-k8s-endpoints.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterEndpoint\nmetadata:\n   labels:\n      cluster.x-k8s.io/cluster-name: my-cluster\nspec:\n  cluster: my-cluster\n  host: \"my-cluster-1234567890.region.elb.amazonaws.com\"\n  port: 1234\n  type: ExternalControlPlaneEndpoint\n```\n\n----------------------------------------\n\nTITLE: Planning Cluster Topology Changes with clusterctl Bash\nDESCRIPTION: This bash command utilizes the clusterctl tool to plan changes in a Kubernetes cluster topology. The command analyses the provided YAML configuration to determine how underlying objects, like the control plane and machine deployments, will be affected. To execute this, the modified YAML file and an output directory must be specified.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/alpha-topology-plan.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl alpha topology plan -f modified-example-cluster.yaml -o output/\n```\n\n----------------------------------------\n\nTITLE: ValidateTopology Response Schema in YAML\nDESCRIPTION: Example response schema for topology validation results, indicating success or failure status.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-topology-mutation-hook.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: hooks.runtime.cluster.x-k8s.io/v1alpha1\nkind: ValidateTopologyResponse\nstatus: Success # or Failure\nmessage: \"error message if status == Failure\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Outscale Credentials and Initializing Provider\nDESCRIPTION: This script exports Outscale credentials, creates a namespace and secret for the provider, and initializes the Outscale infrastructure provider for Cluster API.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\nexport OSC_SECRET_KEY=<your-secret-key>\nexport OSC_ACCESS_KEY=<your-access-key>\nexport OSC_REGION=<you-region>\n# Create namespace\nkubectl create namespace cluster-api-provider-outscale-system\n# Create secret\nkubectl create secret generic cluster-api-provider-outscale --from-literal=access_key=${OSC_ACCESS_KEY} --from-literal=secret_key=${OSC_SECRET_KEY} --from-literal=region=${OSC_REGION}  -n cluster-api-provider-outscale-system\n# Initialize the management cluster\nclusterctl init --infrastructure outscale\n```\n\n----------------------------------------\n\nTITLE: Setting Required OpenStack Environment Variables\nDESCRIPTION: Exports essential OpenStack environment variables required for cluster creation, including DNS, availability zones, machine flavors, and network settings.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\n# The list of nameservers for OpenStack Subnet being created.\n# Set this value when you need create a new network/subnet while the access through DNS is required.\nexport OPENSTACK_DNS_NAMESERVERS=<dns nameserver>\n# FailureDomain is the failure domain the machine will be created in.\nexport OPENSTACK_FAILURE_DOMAIN=<availability zone name>\n# The flavor reference for the flavor for your server instance.\nexport OPENSTACK_CONTROL_PLANE_MACHINE_FLAVOR=<flavor>\n# The flavor reference for the flavor for your server instance.\nexport OPENSTACK_NODE_MACHINE_FLAVOR=<flavor>\n# The name of the image to use for your server instance. If the RootVolume is specified, this will be ignored and use rootVolume directly.\nexport OPENSTACK_IMAGE_NAME=<image name>\n# The SSH key pair name\nexport OPENSTACK_SSH_KEY_NAME=<ssh key pair name>\n# The external network\nexport OPENSTACK_EXTERNAL_NETWORK_ID=<external network ID>\n```\n\n----------------------------------------\n\nTITLE: Resuming a MachineDeployment Rollout in Cluster API\nDESCRIPTION: This command resumes a paused MachineDeployment named 'my-md-0'. It allows the resource to be reconciled again. The command is a no-op if the resource is not currently paused.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/alpha-rollout.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl alpha rollout resume machinedeployment/my-md-0\n```\n\n----------------------------------------\n\nTITLE: Initial Generated MailgunCluster API Types in Go\nDESCRIPTION: The shell API types generated by Kubebuilder for a MailgunCluster, showing the basic structure for Spec and Status with placeholder comments for customization.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/implement-api-types.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// MailgunClusterSpec defines the desired state of MailgunCluster\ntype MailgunClusterSpec struct {\n\t// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster\n\t// Important: Run \"make\" to regenerate code after modifying this file\n}\n\n// MailgunClusterStatus defines the observed state of MailgunCluster\ntype MailgunClusterStatus struct {\n\t// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster\n\t// Important: Run \"make\" to regenerate code after modifying this file\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cluster API Unit Tests\nDESCRIPTION: Command to run the unit tests for Cluster API project, which verifies basic functionality without requiring a Kubernetes cluster.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd cluster-api\nmake test\n```\n\n----------------------------------------\n\nTITLE: Sample clusterctl init Output\nDESCRIPTION: Shows an example of the output produced by running the clusterctl init command to initialize a management cluster.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\nFetching providers\nInstalling cert-manager Version=\"v1.11.0\"\nWaiting for cert-manager to be available...\nInstalling Provider=\"cluster-api\" Version=\"v1.0.0\" TargetNamespace=\"capi-system\"\nInstalling Provider=\"bootstrap-kubeadm\" Version=\"v1.0.0\" TargetNamespace=\"capi-kubeadm-bootstrap-system\"\nInstalling Provider=\"control-plane-kubeadm\" Version=\"v1.0.0\" TargetNamespace=\"capi-kubeadm-control-plane-system\"\nInstalling Provider=\"infrastructure-docker\" Version=\"v1.0.0\" TargetNamespace=\"capd-system\"\n\nYour management cluster has been initialized successfully!\n\nYou can now create your first workload cluster by running the following:\n\n  clusterctl generate cluster [name] --kubernetes-version [version] | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Generating Workload Cluster Configuration with Clusterctl (Bash)\nDESCRIPTION: This Bash snippet prepares environment variables for AWS workload cluster configuration using Ignition, then generates a cluster manifest using 'clusterctl generate cluster'. It specifies AWS region, SSH key, S3 bucket for Ignition bootstrap data, and machine types, and outputs the configuration to ignition-cluster.yaml. Requires 'clusterctl', access to the referenced AWS bucket, and a valid SSH key. Inputs are cluster parameters; output is a YAML file defining the workload cluster.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/ignition.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Deploy the workload cluster in the following AWS region.\\nexport AWS_REGION=us-east-1\\n\\n# Authorize the following SSH public key on cluster nodes.\\nexport AWS_SSH_KEY_NAME=my-key\\n\\n# Ignition bootstrap data needs to be stored in an S3 bucket so that nodes can\\n# read them at boot time. Store Ignition bootstrap data in the following bucket.\\nexport AWS_S3_BUCKET_NAME=my-bucket\\n\\n# Set the EC2 machine size for controllers and workers.\\nexport AWS_CONTROL_PLANE_MACHINE_TYPE=t3a.small\\nexport AWS_NODE_MACHINE_TYPE=t3a.small\\n\\nclusterctl generate cluster ignition-cluster \\\\n    --from https://github.com/kubernetes-sigs/cluster-api-provider-aws/blob/main/templates/cluster-template-flatcar.yaml \\\\n    --kubernetes-version v1.28.0 \\\\n    --worker-machine-count 2 \\\\n    > ignition-cluster.yaml\\n\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterAPISigner Interface in Go\nDESCRIPTION: This code snippet defines the ClusterAPISigner interface that infrastructure providers need to implement for node attestation. It includes methods for verifying client and serving attestation data, and retrieving the machine name from a CSR.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20210222-kubelet-authentication.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype ClusterAPISigner interface {\n     VerifyClientAttestationData (csr *certificatesv1beta1.CertificateSigningRequest) err\n     VerifyServingAttestationData (csr *certificatesv1beta1.CertificateSigningRequest) err\n     MachineName (csr *certificatesv1beta1.CertificateSigningRequest) (string, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring vSphere Environment Variables\nDESCRIPTION: Sets required environment variables for vSphere infrastructure provider, including server details, datacenter, datastore, network, and VM configurations.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\n# The vCenter server IP or FQDN\nexport VSPHERE_SERVER=\"10.0.0.1\"\n# The vSphere datacenter to deploy the management cluster on\nexport VSPHERE_DATACENTER=\"SDDC-Datacenter\"\n# The vSphere datastore to deploy the management cluster on\nexport VSPHERE_DATASTORE=\"vsanDatastore\"\n# The VM network to deploy the management cluster on\nexport VSPHERE_NETWORK=\"VM Network\"\n# The vSphere resource pool for your VMs\nexport VSPHERE_RESOURCE_POOL=\"*/Resources\"\n# The VM folder for your VMs. Set to \"\" to use the root vSphere folder\nexport VSPHERE_FOLDER=\"vm\"\n# The VM template to use for your VMs\nexport VSPHERE_TEMPLATE=\"ubuntu-1804-kube-v1.17.3\"\n# The public ssh authorized key on all machines\nexport VSPHERE_SSH_AUTHORIZED_KEY=\"ssh-rsa AAAAB3N...\"\n# The certificate thumbprint for the vCenter server\nexport VSPHERE_TLS_THUMBPRINT=\"97:48:03:8D:78:A9...\"\n# The storage policy to be used (optional). Set to \"\" if not required\nexport VSPHERE_STORAGE_POLICY=\"policy-one\"\n# The IP address used for the control plane endpoint\nexport CONTROL_PLANE_ENDPOINT_IP=\"1.2.3.4\"\n```\n\n----------------------------------------\n\nTITLE: Building Cluster API Controllers\nDESCRIPTION: Command to build the Cluster API controllers, which is a prerequisite step before running or testing the project.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd cluster-api\nmake docker-build\n```\n\n----------------------------------------\n\nTITLE: Modifying ClusterSpec for Infrastructure Reference in Go\nDESCRIPTION: Defines proposed changes to the `ClusterSpec` struct in Cluster API (Go). It removes the `ProviderSpec` field, which previously held provider-specific configuration as a `RawExtension`, and introduces `InfrastructureRef`, an `ObjectReference` pointing to a separate provider-specific resource (CRD) that manages the cluster's infrastructure details. This change facilitates better validation and separation of concerns.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20190709-cluster-spec-crds.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\ntype ClusterSpec struct\n```\n- **To remove**\n    - **ProviderSpec** [optional] _Superseded by InfrastructureRef_\n        - Type: `ProviderSpec`\n        - Description:  Provider-specific serialized configuration to use during cluster creation. It is recommended that providers maintain  their own versioned API types that should be  serialized/deserialized from this field.\n\n- **To add**\n    - **InfrastructureRef**\n        - Type: `*corev1.ObjectReference`\n        - Description: InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.\n```\n\n----------------------------------------\n\nTITLE: Using Alternative Sources for Kubernetes Cluster Templates\nDESCRIPTION: These commands demonstrate how to use different sources for cluster templates, including GitHub, raw URL, local file system, and standard input.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/generate-cluster.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl generate cluster my-cluster --kubernetes-version v1.28.0 \\\n   --from https://github.com/my-org/my-repository/blob/main/my-template.yaml > my-cluster.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl generate cluster my-cluster --kubernetes-version v1.28.0 \\\n   --from https://foo.bar/my-template.yaml > my-cluster.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl generate cluster my-cluster --kubernetes-version v1.28.0 \\\n   --from ~/my-template.yaml > my-cluster.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\ncat ~/my-template.yaml | clusterctl generate cluster my-cluster --kubernetes-version v1.28.0 \\\n    --from - > my-cluster.yaml\n```\n\n----------------------------------------\n\nTITLE: Starting Cluster API Development Environment with Tilt and Kind (bash)\nDESCRIPTION: Executes the `tilt-up` make target to initialize a local Kubernetes cluster using kind and start Tilt. This command sets up the necessary environment for developing and testing Cluster API components, opening both a command-line HUD and a web UI for monitoring.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nmake tilt-up\n```\n\n----------------------------------------\n\nTITLE: Importing Test Logs into Loki using Go Tool (Bash)\nDESCRIPTION: Demonstrates using the `log-push` Go utility (located in `./hack/tools/internal/log-push`) to import Cluster API test logs into a Loki instance for centralized analysis. The `--log-path` argument specifies the log source, accepting a ProwJob URL, a GCS path, or a local directory path (like `./_artifacts`).\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/testing.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./hack/tools/internal/log-push --log-path=<log-path>\n```\n\n----------------------------------------\n\nTITLE: Setting up Huawei Cloud Credentials for Cluster API\nDESCRIPTION: This script base64 encodes Huawei Cloud credentials and exports them as environment variables for use with the Huawei infrastructure provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\n# Please ensure that the values for `CLOUD_SDK_AK` and `CLOUD_SDK_SK` are base64 encoded.\nexport CLOUD_SDK_AK=$( echo $AccessKey | base64 | tr -d '\\n' )\nexport CLOUD_SDK_SK=$( echo $SecretKey | base64 | tr -d '\\n' )\n\n# Finally, initialize the management cluster\nclusterctl init --infrastructure huawei\n```\n\n----------------------------------------\n\nTITLE: Adding Version Labels to CRDs using Kustomization\nDESCRIPTION: Example of how to apply version labels to Custom Resource Definitions using kustomization.yaml. These labels map Cluster API contract versions to Custom Resource Definition versions, enabling automatic conversions for object references.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/control-plane.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n- pairs:\n    cluster.x-k8s.io/v1alpha2: v1alpha1\n    cluster.x-k8s.io/v1alpha3: v1alpha2\n    cluster.x-k8s.io/v1beta1: v1beta1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubeconfig Using a Specific Context in Bash\nDESCRIPTION: Example showing how to get the kubeconfig of a workload cluster named 'foo' while specifying a particular kubeconfig context 'bar'. This is useful when working with multiple clusters or contexts.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/get-kubeconfig.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl get kubeconfig foo --kubeconfig-context bar\n```\n\n----------------------------------------\n\nTITLE: Creating Kind Cluster for Testing\nDESCRIPTION: Commands to create a Kind cluster for testing Cluster API, including a simple approach and a more sophisticated setup option.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/building-running-and-testing.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkind create cluster --name capi-test\n\n# If you want a more sophisticated setup of kind cluster + image registry, try:\n# ---\n# cd cluster-api\n# hack/kind-install-for-capd.sh\n```\n\n----------------------------------------\n\nTITLE: Example BeforeClusterDelete Request (YAML)\nDESCRIPTION: This YAML snippet demonstrates an example request payload for the `BeforeClusterDelete` hook. It contains the API version, kind, optional settings, and the Cluster object being deleted. This hook is triggered after deletion is initiated but before the cluster topology is deleted, allowing extensions to perform cleanup tasks for add-ons.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-lifecycle-hooks.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: hooks.runtime.cluster.x-k8s.io/v1alpha1\nkind: BeforeClusterDeleteRequest\nsettings: <Runtime Extension settings>\ncluster:\n  apiVersion: cluster.x-k8s.io/v1beta1\n  kind: Cluster\n  metadata:\n   name: test-cluster\n   namespace: test-ns\n  spec:\n   ...\n  status:\n   ...\n```\n\n----------------------------------------\n\nTITLE: Regenerating CRD Manifests\nDESCRIPTION: Uses Make to regenerate the CRD manifests after adding the status subresource annotations. This ensures the Kubernetes custom resource definitions include the status subresource configuration.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/initialize-repo-and-api-types.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake manifests\n```\n\n----------------------------------------\n\nTITLE: Extension Change Request Response\nDESCRIPTION: JSON response from the vsphere-vm-memory-update extension indicating supported changes.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240807-in-place-updates.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"changes\": [\"infraMachine.spec.memoryMiB\"]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": null,\n    \"acceptedChanges\": [\"infraMachine.spec.memoryMiB\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FooMachineList in Cluster API Go\nDESCRIPTION: This snippet defines a list resource, FooMachineList, necessary for InfraMachine resource management within Cluster API. It includes key metadata and items fields, conforming to the List pattern in the API. This implementation is structured in Go and utilizes 'metav1' for handling metadata.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/infra-machine.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:object:root=true\n\n// FooMachineList contains a list of foomachines.\ntype FooMachineList struct {\n    metav1.TypeMeta `json:\",inline\"`\n    metav1.ListMeta `json:\"metadata,omitempty\"`\n    Items           []FooMachine `json:\"items\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining KubeadmControlPlaneStatus and KubeadmControlPlaneInitializationStatus in Go\nDESCRIPTION: Go struct definitions for the revised KubeadmControlPlaneStatus and KubeadmControlPlaneInitializationStatus types in v1beta2. The code shows fields for tracking initialization, conditions, and replica states while noting fields that will be removed.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240916-improve-status-in-CAPI-resources.md#2025-04-22_snippet_12\n\nLANGUAGE: golang\nCODE:\n```\ntype KubeadmControlPlaneStatus struct {\n\n    // Initialization provides observations of the ControlPlane initialization process.\n    // NOTE: Fields in this struct are part of the Cluster API contract and are used to orchestrate initial Cluster provisioning.\n    // The value of those fields is never updated after provisioning is completed.\n    // Use conditions to monitor the operational state of the Cluster.\n    // +optional\n    Initialization *KubeadmControlPlaneInitializationStatus `json:\"initialization,omitempty\"`\n    \n    // Conditions represent the observations of a ControlPlane's current state.\n    // +optional\n    // +listType=map\n    // +listMapKey=type\n    // +kubebuilder:validation:MaxItems=32\n    Conditions []metav1.Condition `json:\"conditions,omitempty\"`\n\t\n    // The number of ready replicas for this ControlPlane. A machine is considered ready when Machine's Ready condition is true.\n    // +optional\n    ReadyReplicas *int32 `json:\"readyReplicas,omitempty\"`\n\n    // The number of available replicas for this ControlPlane. A machine is considered available when Machine's Available condition is true.\n    // +optional\n    AvailableReplicas *int32 `json:\"availableReplicas,omitempty\"`\n\n    // The number of up-to-date replicas for this ControlPlane. A machine is considered up-to-date when Machine's UpToDate condition is true.\n    // +optional\n    UpToDateReplicas *int32 `json:\"upToDateReplicas,omitempty\"`\n\t\n    // Other fields...\n    // NOTE: `FailureReason`, `FailureMessage`, `Ready`, `Initialized`, `updatedReplicas` fields won't be there anymore\n}\n\n// KubeadmControlPlaneInitializationStatus provides observations of the ControlPlane initialization process.\ntype KubeadmControlPlaneInitializationStatus struct {\n\t\n    // controlPlaneInitialized is true when the control plane provider reports that the Kubernetes control plane is initialized; \n    // usually a control plane is considered initialized when it can accept requests, no matter if this happens before \n    // the control plane is fully provisioned or not.\n    // NOTE: this field is part of the Cluster API contract, and it is used to orchestrate initial Cluster provisioning.\n    // +optional \n    ControlPlaneInitialized bool `json:\"controlPlaneInitialized\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Building Cluster API Controller with GoReleaser\nDESCRIPTION: Command using GoReleaser to build a specific Cluster API controller. This allows for a standardized build process with proper versioning.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd cluster-api\nmake release-bin\n```\n\n----------------------------------------\n\nTITLE: Modifying ClusterStatus for Infrastructure Readiness in Go\nDESCRIPTION: Defines proposed changes to the `ClusterStatus` struct in Cluster API (Go). It removes the optional `ProviderStatus` field, which held provider-specific status as a `runtime.RawExtension`, and adds the `InfrastructureReady` boolean field. This new field explicitly indicates whether the provider-specific infrastructure referenced by `InfrastructureRef` in the `ClusterSpec` has been successfully provisioned.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20190709-cluster-spec-crds.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\ntype ClusterStatus struct\n```\n- **To remove**\n    - **ProviderStatus** [optional]\n        - Type: `*runtime.RawExtension`\n        - Description:  Provider-specific status. It is recommended that providers maintain their own versioned API types that should be serialized/deserialized from this field.\n\n- **To add**\n    - **InfrastructureReady** [optional]\n       - Type: `bool`\n       - Description: InfrastructureReady indicates the state of the infrastructure provisioning process.\n```\n\n----------------------------------------\n\nTITLE: Implementing Cluster Status with Conditions in Golang\nDESCRIPTION: Shows how to implement conditions in a Cluster API resource status struct using the Conditions type.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200506-conditions.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\n// ClusterStatus represent the status for the Cluster object\ntype ClusterStatus struct {\n    ...\n    // Conditions define a list of readiness conditions for the Cluster object\n    Conditions Conditions `json:\"conditions,omitempty\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Workload Cluster API Server with Kubectl (Bash)\nDESCRIPTION: This Bash snippet uses 'kubectl cluster-info' to verify connectivity to the workload cluster's API server. It checks that the API server and DNS addon are running and accessible. Requires the correct kubeconfig set. No input is required; output confirms cluster readiness.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/ignition.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl cluster-info\\n\n```\n\n----------------------------------------\n\nTITLE: Defining ConfigMap with Multiple Resources in YAML for Kubernetes Cluster API\nDESCRIPTION: This YAML snippet defines a ConfigMap containing multiple resources (secrets and a configmap) for use in a ClusterResourceSet. It demonstrates how multiple resources can be grouped together in a single ConfigMap, which is useful for managing related resources.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200220-cluster-resource-set.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: calico-addon\ndata:\n  calico1.yaml: |-\n     kind: Secret\n     apiVersion: v1\n     metadata:\n      name: calico-secret1\n      namespace: mysecrets\n      ---\n     kind: Secret\n     apiVersion: v1\n     metadata:\n      name: calico-secret2\n      namespace: mysecrets\n  calico2.yaml: |-\n     kind: ConfigMap\n     apiVersion: v1\n     metadata:\n      name: calico-configmap\n      namespace: myconfigmaps\n     data:\n       key: \"original value\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Kind Cluster for CAPD\nDESCRIPTION: Command to create a kind cluster with a local Docker registry and necessary mounts to run the Docker infrastructure provider (CAPD).\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake kind-cluster\n```\n\n----------------------------------------\n\nTITLE: Defining BootstrapConfig Resource in Go for Cluster API\nDESCRIPTION: Definition of a BootstrapConfig resource (FooConfig) using kubebuilder annotations. This structure includes TypeMeta, ObjectMeta, Spec and Status fields required for a Cluster API bootstrap provider implementation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/bootstrap-config.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:object:root=true\n// +kubebuilder:resource:path=fooconfig,scope=Namespaced,categories=cluster-api\n// +kubebuilder:storageversion\n// +kubebuilder:subresource:status\n\n// FooConfig is the Schema for fooconfig.\ntype FooConfig struct {\n    metav1.TypeMeta `json:\",inline\"`\n\tmetav1.ObjectMeta `json:\"metadata,omitempty\"`\n    Spec FooConfigSpec `json:\"spec,omitempty\"`\n    Status FooConfigStatus `json:\"status,omitempty\"`\n}\n\ntype FooConfigSpec struct {\n    // See other rules for more details about mandatory/optional fields in BootstrapConfig spec.\n    // Other fields SHOULD be added based on the needs of your provider.\n}\n\ntype FooConfigStatus struct {\n    // See other rules for more details about mandatory/optional fields in BootstrapConfig status.\n    // Other fields SHOULD be added based on the needs of your provider.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MachineReadinessGate Type in Cluster API\nDESCRIPTION: Go struct definition for MachineReadinessGate type that contains condition types used as readiness gates. This structure enables both built-in Cluster API conditions and custom conditions from third-party controllers to be used in machine readiness evaluation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240916-improve-status-in-CAPI-resources.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// MachineReadinessGate contains the type of a Machine condition to be used as readiness gates.\ntype MachineReadinessGate struct {\n    // ConditionType refers to a condition in the Machine's condition list with matching type.\n    // Note: Both Cluster API conditions or conditions added by 3rd party controllers can be used as readiness gates.\n    ConditionType string `json:\"conditionType\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Cluster with AWS Infrastructure Provider - clusterctl - Bash\nDESCRIPTION: This snippet demonstrates how to initialize a Kubernetes management cluster using the clusterctl tool with the AWS infrastructure provider. The first command installs Cluster API components specified for AWS, and the second command outputs a cluster manifest for 'my-first-cluster' and applies it with kubectl. Dependencies include clusterctl, kubectl, adequate clusterctl configuration, and access to the management Kubernetes cluster. The commands assume pre-requisites are met and an active kubeconfig context.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20191016-clusterctl-redesign.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl init --infrastructure aws\nclusterctl config cluster my-first-cluster | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Version Support Matrix for Kubernetes Clusters\nDESCRIPTION: Defines the supported Kubernetes versions for both management and workload clusters in the Cluster API ecosystem.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CHANGELOG/v1.6.0.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Management Cluster: v1.25.x -> v1.28.x\n- Workload Cluster: v1.23.x -> v1.28.x\n```\n\n----------------------------------------\n\nTITLE: InfrastructureMachine Contract Changes Table\nDESCRIPTION: Markdown table showing the field changes between v1beta1 (CAPI 1.9) and v1beta2 versions for InfrastructureMachine resource, including status fields and conditions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240916-improve-status-in-CAPI-resources.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| v1beta1 (CAPI 1.9)                                                    | v1beta2 (tentative Aug 2025)                                                                                     | v1beta2 after v1beta1 removal (tentative Aug 2026)                                         |\n|-----------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------|\n| `status.ready`, required                                              | `status.ready` (deprecated), one of `status.ready` or `status.initialization.provisioned` required               | (removed)                                                                                  |\n|                                                                       | `status.initialization.provisioned` (new), one of `status.ready` or `status.initialization.provisioned` required | `status.initialization.provisioned`                                                        |\n| `status.conditions[Ready]`, optional with fall back on `status.ready` | `status.conditions[Ready]`, optional with fall back on `status.ready` or `status.initialization.provisioned`     | `status.conditions[Ready]`, optional with fall back on `status.initialization.provisioned` |\n| `status.failureReason`, optional                                      | `status.failureReason` (deprecated), optional                                                                    | (removed)                                                                                  |\n| `status.failureMessage`, optional                                     | `status.failureMessage` (deprecated), optional                                                                   | (removed)                                                                                  |\n| other fields/rules...                                                 | other fields/rules...                                                                                            |                                                                                            |\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Cluster Identity with YQ\nDESCRIPTION: Updates Azure cluster identity configuration in YAML file using yq tool to set service principal and secret details.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_74\n\nLANGUAGE: bash\nCODE:\n```\nyq -i \"with(. | select(.kind == \\\"AzureClusterIdentity\\\"); .spec.type |= \\\"ServicePrincipal\\\" | .spec.clientSecret.name |= \\\"${AZURE_CLUSTER_IDENTITY_SECRET_NAME}\\\" | .spec.clientSecret.namespace |= \\\"${AZURE_CLUSTER_IDENTITY_SECRET_NAMESPACE}\\\")\" capi-quickstart.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating Go API Client Code\nDESCRIPTION: Command to generate client code for the Cluster API's Kubernetes resources, which is needed after API changes and before building the controllers.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/CONTRIBUTING.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncd cluster-api\nmake generate\n```\n\n----------------------------------------\n\nTITLE: Machine Creation for MachinePool in Golang\nDESCRIPTION: Example code demonstrating how to create a Machine resource owned by a MachinePool with the appropriate infrastructure reference.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220209-machinepool-machines.md#2025-04-22_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\nmachine := &clusterv1.Machine{\n\tObjectMeta: metav1.ObjectMeta{\n\t\tName: names.SimpleNameGenerator.GenerateName(fmt.Sprintf(\"%s-\", mp.Name)),\n\t\tOwnerReferences: []metav1.OwnerReference{*metav1.NewControllerRef(mp, mp.GroupVersionKind())},\n\t\tNamespace:       mp.Namespace,\n\t\tLabels:          make(map[string]string),\n\t\tAnnotations:     make(map[string]string),\n\t},\n\tSpec: clusterv1.MachineSpec{\n\t\tClusterName:       mp.Spec.ClusterName,\n\t\tInfrastructureRef: corev1.ObjectReference{\n\t\t\tAPIVersion: infraMachine.GetAPIVersion(),\n\t\t\tKind:       infraMachine.GetKind(),\n\t\t\tName:       infraMachine.GetName(),\n\t\t\tNamespace:  infraMachine.GetNamespace(),\n\t\t},\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster with MicroK8sControlPlane Reference in YAML\nDESCRIPTION: A YAML snippet that shows how to reference a MicroK8sControlPlane in a Cluster definition. This establishes the link between the cluster and its control plane configuration.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/microk8s-bootstrap.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: Cluster\nspec:\n  controlPlaneRef:\n    apiVersion: controlplane.cluster.x-k8s.io/v1beta1\n    kind: MicroK8sControlPlane\n    name: capi-aws-control-plane\n```\n\n----------------------------------------\n\nTITLE: Creating Machine, DockerMachine, and KubeadmConfig Objects for a Control Plane Node\nDESCRIPTION: This example shows how to define a control plane machine with its required bootstrap configuration (KubeadmConfig) and infrastructure object (DockerMachine). These resources work together to create a Kubernetes control plane node.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/kubeadm-bootstrap/index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: KubeadmConfig\napiVersion: bootstrap.cluster.x-k8s.io/v1beta1\nmetadata:\n  name: my-control-plane1-config\nspec:\n  initConfiguration:\n    nodeRegistration: {} # node registration parameters are automatically injected by CAPD according to the kindest/node image in use.\n---\nkind: DockerMachine\napiVersion: infrastructure.cluster.x-k8s.io/v1beta1\nmetadata:\n  name: my-control-plane1-docker\n---\nkind: Machine\napiVersion: cluster.x-k8s.io/v1beta1\nmetadata:\n  name: my-control-plane1\n  labels:\n    cluster.x-k8s.io/cluster-name: my-cluster\n    cluster.x-k8s.io/control-plane: \"true\"\n    set: controlplane\nspec:\n  bootstrap:\n    configRef:\n      kind: KubeadmConfig\n      apiVersion: bootstrap.cluster.x-k8s.io/v1beta1\n      name: my-control-plane1-config\n  infrastructureRef:\n    kind: DockerMachine\n    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n    name: my-control-plane1-docker\n  version: \"v1.19.1\"\n```\n\n----------------------------------------\n\nTITLE: Defining KubeadmControlPlane Status Structure in Golang\nDESCRIPTION: Golang struct definition for KubeadmControlPlaneStatus in v1beta2, showing the updated status fields including readyReplicas, availableReplicas, and upToDateReplicas. This implementation aligns with new K8s API conventions and removes deprecated fields.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240916-improve-status-in-CAPI-resources.md#2025-04-22_snippet_8\n\nLANGUAGE: golang\nCODE:\n```\ntype KubeadmControlPlaneStatus struct {\n\n    // The number of ready replicas for this ControlPlane. A machine is considered ready when Machine's Ready condition is true.\n    // Note: In the v1beta1 API version a Machine was counted as ready when the node hosted on the Machine was ready, thus \n    // generating confusion for users looking at the Machine Ready condition.\n    // +optional\n    ReadyReplicas *int32 `json:\"readyReplicas,omitempty\"`\n\n    // The number of available replicas targeted by this ControlPlane. A machine is considered ready when Machine's Available condition is true.\n    // +optional\n    AvailableReplicas *int32 `json:\"availableReplicas,omitempty\"`\n\t\n    // The number of up-to-date replicas targeted by this ControlPlane. A machine is considered ready when Machine's UpToDate condition is true.\n    // +optional\n    UpToDateReplicas *int32 `json:\"upToDateReplicas,omitempty\"`\n\n    // Represents the observations of a ControlPlane's current state. \n    // +optional\n    // +listType=map\n    // +listMapKey=type\n    // +kubebuilder:validation:MaxItems=32\n    Conditions []metav1.Condition `json:\"conditions,omitempty\"`\n\n    // Other fields...\n    // NOTE: `Ready`, `FailureReason`, `FailureMessage` fields won't be there anymore\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Control Plane Spec with Machine Template in Go\nDESCRIPTION: Defines the structure for a control plane spec that uses Cluster API Machine objects to represent control plane instances. Includes fields for machine template, metadata, infrastructure reference, and node management timeouts.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/control-plane.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype FooControlPlaneSpec struct {\n    MachineTemplate FooControlPlaneMachineTemplate `json:\"machineTemplate\"`\n}\n\ntype FooControlPlaneMachineTemplate struct {\n    ObjectMeta clusterv1.ObjectMeta `json:\"metadata,omitempty\"`\n    InfrastructureRef corev1.ObjectReference `json:\"infrastructureRef\"`\n    NodeDrainTimeout *metav1.Duration `json:\"nodeDrainTimeout,omitempty\"`\n    NodeVolumeDetachTimeout *metav1.Duration `json:\"nodeVolumeDetachTimeout,omitempty\"`\n    NodeDeletionTimeout *metav1.Duration `json:\"nodeDeletionTimeout,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: GCP Credentials Encoding and Configuration\nDESCRIPTION: Commands to encode GCP credentials and example of adding them to tilt-settings.yaml.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nbase64 -i ~/path/to/gcp/credentials.json\n```\n\nLANGUAGE: yaml\nCODE:\n```\nkustomize_substitutions:\n  GCP_B64ENCODED_CREDENTIALS: \"your credentials here\"\n```\n\n----------------------------------------\n\nTITLE: Patching Calico DaemonSet for Image Pulling\nDESCRIPTION: This command patches the Calico DaemonSet to use the Docker credentials secret for pulling images, resolving ErrImagePull issues.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_89\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --kubeconfig=./capi-quickstart.kubeconfig patch daemonset \\\n    -n kube-system calico-node \\\n    -p '{\"spec\":{\"template\":{\"spec\":{\"imagePullSecrets\":[{\"name\":\"docker-creds\"}]}}}}'\n```\n\n----------------------------------------\n\nTITLE: RBAC Annotations for MailgunClusterReconciler\nDESCRIPTION: RBAC role annotations for the MailgunCluster controller, providing access to both the custom resources and Cluster API resources needed for reconciliation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/controllers-and-reconciliation.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:rbac:groups=infrastructure.cluster.x-k8s.io,resources=mailgunclusters,verbs=get;list;watch;create;update;patch;delete\n// +kubebuilder:rbac:groups=infrastructure.cluster.x-k8s.io,resources=mailgunclusters/status,verbs=get;update;patch\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for a clusterctl Plugin\nDESCRIPTION: Examples demonstrating two ways to pass environment variables to a plugin: using export to set the variable before running the command, or setting it inline with the command.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/plugins.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport EXAMPLE_ENV_VAR=example-value\nclusterctl foo example-env-var\n```\n\nLANGUAGE: bash\nCODE:\n```\nEXAMPLE_ENV_VAR=another-example-value clusterctl foo example-env-var\n```\n\n----------------------------------------\n\nTITLE: Creating a Cluster Using a Basic ClusterClass in YAML\nDESCRIPTION: This YAML snippet demonstrates creating a Cluster resource named 'my-docker-cluster' that utilizes the 'docker-clusterclass-v0.1.0' ClusterClass. It configures the cluster's topology, specifying the Kubernetes version ('v1.22.4'), control plane replica count (3) with associated metadata, and defines a MachineDeployment ('md-0') using the 'default-worker' class with 4 replicas, metadata, and a failure domain. This shows how topology overrides customize a cluster instantiated from a ClusterClass.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: Cluster\nmetadata:\n  name: my-docker-cluster\nspec:\n  topology:\n    class: docker-clusterclass-v0.1.0\n    version: v1.22.4\n    controlPlane:\n      replicas: 3\n      metadata:\n        labels:\n          cpLabel: cpLabelValue \n        annotations:\n          cpAnnotation: cpAnnotationValue\n    workers:\n      machineDeployments:\n      - class: default-worker\n        name: md-0\n        replicas: 4\n        metadata:\n          labels:\n            mdLabel: mdLabelValue\n          annotations:\n            mdAnnotation: mdAnnotationValue\n        failureDomain: region\n```\n\n----------------------------------------\n\nTITLE: Machine Phase Failed Definition\nDESCRIPTION: Defines the failed state when system requires user intervention.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20190610-machine-states-preboot-bootstrapping.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// MachinePhaseFailed is the Machine state when the system\n// might require user intervention.\nMachinePhaseFailed = MachinePhaseType(\"failed\")\n```\n\n----------------------------------------\n\nTITLE: Generate Kubernetes Manifests with Kustomize and EnvSubst\nDESCRIPTION: This bash snippet uses kustomize to build Kubernetes configurations and envsubst to replace environment variables. It's used to generate final YAML manifests with environment variables externally set.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/configure-the-deployment.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkustomize build config/default | envsubst\n\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Update - Google Protobuf\nDESCRIPTION: Version update of google.golang.org/protobuf from v1.31.0 to v1.33.0 to address CVE vulnerabilities.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CHANGELOG/v1.6.3.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngoogle.golang.org/protobuf: v1.31.0 → v1.33.0\n```\n\n----------------------------------------\n\nTITLE: KCP Version Update Specification Change\nDESCRIPTION: Diff showing the version update in KubeadmControlPlane specification from v1.30.0 to v1.31.0.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240807-in-place-updates.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\napiVersion: controlplane.cluster.x-k8s.io/v1beta1\nkind: KubeadmControlPlane\nmetadata:\n  name: kcp-1\nspec:\n  replicas: 3\n  rolloutStrategy:\n    type: InPlace\n- version: v1.30.0\n+ version: v1.31.0\n```\n\n----------------------------------------\n\nTITLE: InfraMachinePoolStatus Structure Definition in Golang\nDESCRIPTION: Defines the structure for the InfraMachinePoolStatus type that includes the InfrastructureMachineKind field used to signal MachinePool Machines support.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220209-machinepool-machines.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\ntype InfraMachinePoolStatus struct {\n\t// InfrastructureMachineKind is the kind of the infrastructure resources behind MachinePool Machines.\n\t// +optional\n\tInfrastructureMachineKind string `json:\"infrastructureMachineKind,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Infrastructure Provider\nDESCRIPTION: Example of a clusterctl-settings.json file for the AWS infrastructure provider, specifying how to build provider assets.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/developers.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"infrastructure-aws\",\n  \"config\": {\n    \"componentsFile\": \"infrastructure-components.yaml\",\n    \"nextVersion\": \"v0.5.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HelmChartProxy Struct in Go for Cluster API Add-on Management\nDESCRIPTION: This Go struct defines the HelmChartProxy custom resource, which specifies a Helm chart configuration and selects clusters for add-on installation. It includes fields for chart details, cluster selection, and templated values.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220712-cluster-api-addon-orchestration.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// HelmChartProxySpec defines the desired state of HelmChartProxy.\ntype HelmChartProxySpec struct {\n  // ClusterSelector selects Clusters in the same namespace with a label that matches the specified label selector. The Helm \n  // chart will be installed on all selected Clusters. If a Cluster is no longer selected, the Helm release will be uninstalled.\n  ClusterSelector metav1.LabelSelector `json:\"clusterSelector\"`\n\n  // ChartName is the name of the Helm chart in the repository.\n  ChartName string `json:\"chartName\"`\n\n  // RepoURL is the URL of the Helm chart repository.\n  RepoURL string `json:\"repoURL\"`\n\n  // ReleaseName is the release name of the installed Helm chart. If it is not specified, a\n  // name will be generated.\n  // +optional\n  ReleaseName string `json:\"releaseName,omitempty\"`\n\n  // ReleaseNamespace is the namespace the Helm release will be installed on each selected\n  // Cluster. If it is not specified, it will be set to the default namespace.\n  // +optional\n  ReleaseNamespace string `json:\"namespace,omitempty\"`\n\n  // Version is the version of the Helm chart. If it is not specified, the chart will use \n  // and be kept up to date with the latest version.\n  // +optional\n  Version string `json:\"version,omitempty\"`\n\n  // ValuesTemplate is an inline YAML representing the values for the Helm chart. This YAML supports Go templating to reference\n  // fields from each selected workload Cluster and programatically create and set values.\n  // +optional\n  ValuesTemplate string `json:\"valuesTemplate,omitempty\"`\n}\n\n// HelmChartProxyStatus defines the observed state of HelmChartProxy.\ntype HelmChartProxyStatus struct {\n  // Conditions defines current state of the HelmChartProxy.\n  // +optional\n  Conditions clusterv1.Conditions `json:\"conditions,omitempty\"`\n\n  // MatchingClusters is the list of references to Clusters selected by the ClusterSelector.\n  // +optional\n  MatchingClusters []corev1.ObjectReference `json:\"matchingClusters\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Service Principal Setup for Cluster API\nDESCRIPTION: Bash commands to create and configure an Azure Service Principal for use with Cluster API Azure provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_SUBSCRIPTION_ID=$(az account show --query id --output tsv)\naz account set --subscription $AZURE_SUBSCRIPTION_ID\n```\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_SERVICE_PRINCIPAL_NAME=ServicePrincipalName\n```\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_TENANT_ID=$(az account show --query tenantId --output tsv)\nAZURE_CLIENT_SECRET=$(az ad sp create-for-rbac --name http://$AZURE_SERVICE_PRINCIPAL_NAME --query password --output tsv)\nAZURE_CLIENT_ID=$(az ad sp show --id http://$AZURE_SERVICE_PRINCIPAL_NAME --query appId --output tsv)\n```\n\nLANGUAGE: bash\nCODE:\n```\ncat <<EOF\nkustomize_substitutions:\n   AZURE_SUBSCRIPTION_ID_B64: \"$(echo \"${AZURE_SUBSCRIPTION_ID}\" | tr -d '\\n' | base64 | tr -d '\\n')\"\n   AZURE_TENANT_ID_B64: \"$(echo \"${AZURE_TENANT_ID}\" | tr -d '\\n' | base64 | tr -d '\\n')\"\n   AZURE_CLIENT_SECRET_B64: \"$(echo \"${AZURE_CLIENT_SECRET}\" | tr -d '\\n' | base64 | tr -d '\\n')\"\n   AZURE_CLIENT_ID_B64: \"$(echo \"${AZURE_CLIENT_ID}\" | tr -d '\\n' | base64 | tr -d '\\n')\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: DiscoverVariables Response Schema in YAML\nDESCRIPTION: Example response schema defining variable specifications including types, defaults, and descriptions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-topology-mutation-hook.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: hooks.runtime.cluster.x-k8s.io/v1alpha1\nkind: DiscoverVariablesResponse\nstatus: Success # or Failure\nmessage: \"\"\nvariables:\n  - name: etcdImageTag \n    required: true\n    schema:\n      openAPIV3Schema:\n        type: string\n        default: \"3.5.3-0\" \n        example: \"3.5.3-0\"\n        description: \"etcdImageTag sets the tag for the etcd image.\"\n  - name: preLoadImages\n    required: false\n    schema:\n      openAPIV3Schema:\n        default: []\n        type: array\n        items:\n          type: string\n        description: \"preLoadImages sets the images for the Docker machines to preload.\"\n  - name: podSecurityStandard\n    required: false\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          enabled:\n            type: boolean\n            default: true\n            description: \"enabled enables the patches to enable Pod Security Standard via AdmissionConfiguration.\"\n          enforce:\n            type: string\n            default: \"baseline\"\n            description: \"enforce sets the level for the enforce PodSecurityConfiguration mode. One of privileged, baseline, restricted.\"\n          audit:\n            type: string\n            default: \"restricted\"\n            description: \"audit sets the level for the audit PodSecurityConfiguration mode. One of privileged, baseline, restricted.\"\n          warn:\n            type: string\n            default: \"restricted\"\n            description: \"warn sets the level for the warn PodSecurityConfiguration mode. One of privileged, baseline, restricted.\"\n...\n```\n\n----------------------------------------\n\nTITLE: Tilt Settings Configuration for Docker Provider\nDESCRIPTION: Example YAML configuration for tilt-settings.yaml when using the Docker infrastructure provider. Specifies the default registry and enabled providers.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_registry: gcr.io/your-project-name-here\nenable_providers:\n- docker\n- kubeadm-bootstrap\n- kubeadm-control-plane\n```\n\n----------------------------------------\n\nTITLE: Defining RolloutStrategy Type in Go for Kubernetes Control Plane\nDESCRIPTION: Defines the RolloutStrategy type and constants for controlling how control plane machines are replaced.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20191017-kubeadm-based-control-plane.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype RolloutStrategyType string\n\nconst (\n  // Replace the old control planes by new one using rolling update\n  // i.e. gradually scale up or down the old control planes and scale up or down the new one.\n  RollingUpdateStrategyType RolloutStrategyType = \"RollingUpdate\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring KubeadmConfig for External Etcd (YAML)\nDESCRIPTION: This YAML snippet shows the relevant section within a `KubeadmConfig` resource (API version `bootstrap.cluster.x-k8s.io/v1alpha3`) required to configure a Cluster API workload cluster to use an external etcd. The `clusterConfiguration.etcd.external` field specifies the list of etcd server `endpoints` and the paths (`caFile`, `certFile`, `keyFile`) on the control plane nodes where kubeadm should expect the etcd CA certificate, API server client certificate, and client key respectively. These files are mounted from the Kubernetes Secrets created earlier.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/external-etcd.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: bootstrap.cluster.x-k8s.io/v1alpha3\nkind: KubeadmConfig\nmetadata:\n  name: CLUSTER_NAME-controlplane-0\n  namespace: CLUSTER_NAMESPACE\nspec:\n  ... # initConfiguration goes here\n  clusterConfiguration:\n    etcd:\n      external:\n        endpoints:\n          - https://10.0.0.230:2379\n        caFile: /etc/kubernetes/pki/etcd/ca.crt\n        certFile: /etc/kubernetes/pki/apiserver-etcd-client.crt\n        keyFile: /etc/kubernetes/pki/apiserver-etcd-client.key\n    ... # other clusterConfiguration goes here\n```\n\n----------------------------------------\n\nTITLE: Deleting All Providers in Cluster API\nDESCRIPTION: This command deletes all provider components from the management cluster in a single operation using the --all flag. It still preserves namespaces and CRDs unless additional flags are specified.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/delete.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl delete --all\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Hook Types in Go\nDESCRIPTION: This Go code snippet demonstrates how to define types for Runtime Hooks, including request and response structures. It uses kubebuilder markers for code generation and OpenAPI schema definitions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220221-runtime-SDK.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// BeforeClusterUpgradeRequest is the request of the BeforeClusterUpgrade hook.\n// +k8s:openapi-gen=true\n// +kubebuilder:object:generate=true\n// +kubebuilder:object:root=true\ntype BeforeClusterUpgradeRequest struct {\n\tmetav1.TypeMeta `json:\",inline\"`\n\n\t...\n}\n\n// BeforeClusterUpgradeResponse is the response of the BeforeClusterUpgrade hook.\n// +k8s:openapi-gen=true\n// +kubebuilder:object:generate=true\n// +kubebuilder:object:root=true\ntype BeforeClusterUpgradeResponse struct {\n\tmetav1.TypeMeta `json:\",inline\"`\n\n\t...\n}\n\n// BeforeClusterUpgrade is the hook that will be called after a Cluster.spec.version is upgraded and\n// before the updated version is propagated to the underlying objects.\nfunc BeforeClusterUpgrade(*BeforeClusterUpgradeRequest, *BeforeClusterUpgradeResponse) {}\n```\n\n----------------------------------------\n\nTITLE: Name Modification Example Using Kustomize\nDESCRIPTION: Kustomize configuration to apply namePrefix and nameSuffix transformations to Cluster API manifests.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/using-kustomize.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\\napiVersion: kustomize.config.k8s.io/v1beta1\\nkind: Kustomization\\nresources:\\n  - ../../base\\nconfigurations:\\n  - namereference.yaml\\nnamePrefix: \"blue-\"\\nnameSuffix: \"-dev\"\n```\n\n----------------------------------------\n\nTITLE: Extension API Request/Response Examples\nDESCRIPTION: JSON examples showing the API interactions between controllers and update extensions, including request formats and responses.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240807-in-place-updates.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"changes\": [\"machine.spec.version\", \"bootstrap.spec.clusterConfiguration.kubernetesVersion\"]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": null,\n    \"acceptedChanges\": []\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": null,\n    \"acceptedChanges\": [\"machine.spec.version\", \"bootstrap.spec.clusterConfiguration.kubernetesVersion\"]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": null,\n    \"status\": \"Done\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": null,\n    \"status\": \"InProgress\",\n    \"retryAfterSeconds\": \"5m0s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DOCKER_HOST for Podman Machine on macOS (bash)\nDESCRIPTION: This command exports the `DOCKER_HOST` environment variable on macOS. It dynamically retrieves the correct Unix socket path from the specified Podman machine (replace `<machine>` with the actual name) using `podman machine inspect` and `jq`. This directs tools checking `DOCKER_HOST` to the Podman service running within the macOS VM.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nexport DOCKER_HOST=$(podman machine inspect <machine> | jq -r '.[0].ConnectionInfo.PodmanSocket.Path')\n```\n\n----------------------------------------\n\nTITLE: Defining Controller Runtime Configuration Types in Golang\nDESCRIPTION: Defines the core configuration types for controller runtime including controller manager configuration, metrics, health checks, webhooks, and leader election settings. These types are used to configure the manager specification for Kubernetes controllers.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20201020-capi-provider-operator.md#2025-04-22_snippet_9\n\nLANGUAGE: golang\nCODE:\n```\n// ControllerManagerConfigurationSpec defines the desired state of GenericControllerManagerConfiguration\ntype ControllerManagerConfigurationSpec struct {\n\tSyncPeriod *metav1.Duration `json:\"syncPeriod,omitempty\"`\n\tLeaderElection *configv1alpha1.LeaderElectionConfiguration `json:\"leaderElection,omitempty\"`\n\tCacheNamespace string `json:\"cacheNamespace,omitempty\"`\n\tGracefulShutdownTimeout *metav1.Duration `json:\"gracefulShutDown,omitempty\"`\n\tMetrics ControllerMetrics `json:\"metrics,omitempty\"`\n\tHealth ControllerHealth `json:\"health,omitempty\"`\n\tWebhook ControllerWebhook `json:\"webhook,omitempty\"`\n}\n\n// ControllerMetrics defines the metrics configs\ntype ControllerMetrics struct {\n\tBindAddress string `json:\"bindAddress,omitempty\"`\n}\n\n// ControllerHealth defines the health configs\ntype ControllerHealth struct {\n\tHealthProbeBindAddress string `json:\"healthProbeBindAddress,omitempty\"`\n\tReadinessEndpointName string `json:\"readinessEndpointName,omitempty\"`\n\tLivenessEndpointName string `json:\"livenessEndpointName,omitempty\"`\n}\n\n// ControllerWebhook defines the webhook server for the controller\ntype ControllerWebhook struct {\n\tPort *int `json:\"port,omitempty\"`\n\tHost string `json:\"host,omitempty\"`\n\tCertDir string `json:\"certDir,omitempty\"`\n}\n\n// LeaderElectionConfiguration defines the configuration of leader election\ntype LeaderElectionConfiguration struct {\n\tLeaderElect *bool `json:\"leaderElect\"`\n\tLeaseDuration metav1.Duration `json:\"leaseDuration\"`\n\tRenewDeadline metav1.Duration `json:\"renewDeadline\"`\n\tRetryPeriod metav1.Duration `json:\"retryPeriod\"`\n\tResourceLock string `json:\"resourceLock\"`\n\tResourceName string `json:\"resourceName\"`\n\tResourceNamespace string `json:\"resourceNamespace\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Infrastructure Provider Components in Cluster API\nDESCRIPTION: This command deletes the AWS infrastructure provider components from the management cluster while preserving the namespace and CRDs. It demonstrates the basic usage of the clusterctl delete command with a specific provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/delete.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl delete --infrastructure aws\n```\n\n----------------------------------------\n\nTITLE: Basic MailgunClusterReconciler Structure in Go\nDESCRIPTION: The base structure for a MailgunCluster reconciler generated by Kubebuilder, including the reconcile function stub and RBAC annotations for permission management.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/controllers-and-reconciliation.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// MailgunClusterReconciler reconciles a MailgunCluster object\ntype MailgunClusterReconciler struct {\n\tclient.Client\n\tLog logr.Logger\n}\n\n// +kubebuilder:rbac:groups=infrastructure.cluster.x-k8s.io,resources=mailgunclusters,verbs=get;list;watch;create;update;patch;delete\n// +kubebuilder:rbac:groups=infrastructure.cluster.x-k8s.io,resources=mailgunclusters/status,verbs=get;update;patch\n\nfunc (r *MailgunClusterReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {\n\t_ = context.Background()\n\t_ = r.Log.WithValues(\"mailguncluster\", req.NamespacedName)\n\n\t// your logic here\n\n\treturn ctrl.Result{}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Cluster API with Akamai (Linode) Infrastructure Provider\nDESCRIPTION: Sets up the Linode access token and initializes the management cluster with the Linode infrastructure provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nexport LINODE_TOKEN=<your-access-token>\n\n# Initialize the management cluster\nclusterctl init --infrastructure linode-linode\n```\n\n----------------------------------------\n\nTITLE: Updating Kubeconfig with Signed Certificate in Bash\nDESCRIPTION: Updates the kubectl configuration with the newly signed certificate and private key. The embed-certs flag ensures the certificates are embedded directly in the kubeconfig file.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/certs/generate-kubeconfig.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl config set-credentials cluster-admin --client-certificate=admin.crt --client-key=admin.key --embed-certs=true\n```\n\n----------------------------------------\n\nTITLE: GeneratePatches Request Schema in YAML\nDESCRIPTION: Example request schema for generating patches across an entire Cluster topology. Contains template specifications and variables for holistic cluster management.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-topology-mutation-hook.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: hooks.runtime.cluster.x-k8s.io/v1alpha1\nkind: GeneratePatchesRequest\nsettings: <Runtime Extension settings>\nvariables:\n- name: <variable-name>\n  value: <variable-value>\n  ...\nitems:\n- uid: 7091de79-e26c-4af5-8be3-071bc4b102c9\n  holderReference:\n    apiVersion: cluster.x-k8s.io/v1beta1\n    kind: MachineDeployment\n    namespace: default\n    name: cluster-md1-xyz\n    fieldPath: spec.template.spec.infrastructureRef\n  object:\n    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n    kind: AWSMachineTemplate\n    spec:\n    ...\n  variables:\n  - name: <variable-name>\n    value: <variable-value>\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating RBAC Permissions for Metrics Scraping via Kubectl in YAML\nDESCRIPTION: Creates Kubernetes RBAC resources using `kubectl apply`. It defines a `ClusterRole` named `default-metrics` granting GET access to the `/metrics` nonResourceURL, and a `ClusterRoleBinding` named `default-metrics` assigning this role to the `default` ServiceAccount in the `default` namespace. This allows the specified ServiceAccount to scrape metrics.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/diagnostics.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncat << EOT | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: default-metrics\nrules:\n- nonResourceURLs:\n  - \"/metrics\"\n  verbs:\n  - get\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: default-metrics\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: default-metrics\nsubjects:\n- kind: ServiceAccount\n  name: default\n  namespace: default\nEOT\n```\n\n----------------------------------------\n\nTITLE: Machine Status Updates During Version Change\nDESCRIPTION: Diff examples showing the machine status changes throughout the update process, including annotations and conditions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240807-in-place-updates.md#2025-04-22_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: Machine\nmetadata:\n+ annotations:\n+   runtime.cluster.x-k8s.io/pending-hooks: ExternalUpdate\n  name: kcp-1-hfg374h\nspec:\n- version: v1.30.0\n+ version: v1.31.0\n  bootstrap:\n    configRef:\n      apiVersion: bootstrap.cluster.x-k8s.io/v1beta1\n      kind: KubeadmConfig\n      name: kcp-1-hfg374h-9wc29\n      uid: fc69d363-272a-4b91-aa35-72ccdaa7a427\nstatus:\n  conditions:\n+ - lastTransitionTime: \"2024-12-31T23:50:00Z\"\n+   status: \"False\"\n+   type: UpToDate\n```\n\nLANGUAGE: diff\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: Machine\nmetadata:\n- annotations:\n-   runtime.cluster.x-k8s.io/pending-hooks: ExternalUpdate\n  name: kcp-1-hfg374h\nspec:\n  version: v1.31.0\n  bootstrap:\n    configRef:\n      apiVersion: bootstrap.cluster.x-k8s.io/v1beta1\n      kind: KubeadmConfig\n      name: kcp-1-hfg374h-9wc29\n      uid: fc69d363-272a-4b91-aa35-72ccdaa7a427\nstatus:\n  conditions:\n- - lastTransitionTime: \"2024-12-31T23:50:00Z\"\n-   status: \"False\"\n+ - lastTransitionTime: \"2024-12-31T23:59:59Z\"\n+   status: \"True\"\n    type: UpToDate\n```\n\n----------------------------------------\n\nTITLE: Defining Etcd CA Generic Secret (YAML)\nDESCRIPTION: This YAML manifest defines a Kubernetes Secret named `$CLUSTER_NAME-etcd` in the specified `$CLUSTER_NAMESPACE`. It's an alternative to the `kubectl create secret generic` command for storing the etcd CA certificate. The `data` section contains the base64-encoded etcd CA certificate under the key `tls.crt`. This certificate is used to validate the etcd server certificates.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/external-etcd.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Etcd's CA crt file to validate the generated client certificates\nkind: Secret\napiVersion: v1\nmetadata:\n  name: $CLUSTER_NAME-etcd\n  namespace: $CLUSTER_NAMESPACE\ndata:\n  tls.crt: |\n    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURBRENDQWVpZ0F3SUJBZ0lJRDNrVVczaDIy\n    K013RFFZSktvWklodmNOQVFFTEJRQXdEekVOTUFzR0ExVUUKQXhNRVpYUmpaREFlRncweE9UQTVN\n    ...\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Rebasing Kubernetes Cluster\nDESCRIPTION: This YAML configuration expresses the intention to rebase a Kubernetes cluster to a different ClusterClass by modifying the 'class' specification under topology. It assumes that the new ClusterClass, 'another-cluster-class', is predefined and valid within the management cluster context.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/alpha-topology-plan.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: Cluster\nmetadata:\n  name: \"example-cluster\"\n  namespace: \"default\"\n  labels:\n    cni: kindnet\nspec:\n  clusterNetwork:\n    services:\n      cidrBlocks: [\"10.128.0.0/12\"]\n    pods:\n      cidrBlocks: [\"192.168.0.0/16\"]\n    serviceDomain: \"cluster.local\"\n  topology:\n    # ClusterClass changed from 'example-cluster-class' -> 'another-cluster-class'.\n    class: another-cluster-class\n    version: v1.21.2\n    controlPlane:\n      metadata: {}\n      replicas: 1\n    workers:\n      machineDeployments:\n      - class: \"default-worker\"\n        name: \"md-0\"\n        replicas: 1\n```\n\n----------------------------------------\n\nTITLE: ClusterClass with New API Version\nDESCRIPTION: Example of ClusterClass configuration updated to v1beta2 API version\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/operate-cluster.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\nmetadata:\n  name: quick-start\nspec:\n  infrastructure:\n    ref:\n      apiVersion: infrastructure.cluster.x-k8s.io/v1beta2\n      kind: DockerClusterTemplate\n...\n  patches:\n  - name: lbImageRepository\n    definitions:\n    - selector:\n        apiVersion: infrastructure.cluster.x-k8s.io/v1beta2\n        kind: DockerClusterTemplate\n        matchResources:\n          infrastructureCluster: true\n      jsonPatches:\n      - op: add\n        path: \"/spec/template/spec/loadBalancer/imageRepo\"\n        valueFrom:\n          variable: lbImageRepository\n```\n\n----------------------------------------\n\nTITLE: Regenerating Prow Job Configurations for Cluster API\nDESCRIPTION: This shell script command is used to regenerate the configuration for Prow jobs after making necessary updates to support a new Cluster API release. It requires the 'TEST_INFRA_DIR' environment variable to be set, pointing to the local path of the test-infra repository. The command should be executed from the root directory of the cluster-api repository.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/release/role-handbooks/ci-signal/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nTEST_INFRA_DIR=../../k8s.io/test-infra make generate-test-infra-prowjobs\n```\n\n----------------------------------------\n\nTITLE: KubeadmConfig Example with Mount Points\nDESCRIPTION: This snippet demonstrates how to configure filesystem mount points using the Mounts field in KubeadmConfig.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/kubeadm-bootstrap/index.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nmounts:\n- - LABEL=etcd_disk\n  - /var/lib/etcddisk\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenStack Infrastructure Provider with ORC\nDESCRIPTION: This script installs the OpenStack Resource Controller (ORC) dependency and initializes the OpenStack infrastructure provider for Cluster API.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\n# Install ORC (needed for CAPO >=v0.12)\nkubectl apply -f https://github.com/k-orc/openstack-resource-controller/releases/latest/download/install.yaml\n# Initialize the management cluster\nclusterctl init --infrastructure openstack\n```\n\n----------------------------------------\n\nTITLE: BootstrapConfig Contract Changes Table\nDESCRIPTION: Markdown table detailing the field changes between v1beta1 (CAPI 1.9) and v1beta2 versions for BootstrapConfig resource, including status fields and conditions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240916-improve-status-in-CAPI-resources.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| v1beta1 (CAPI 1.9)                                                    | v1beta2 (tentative Aug 2025)                                                                                                  | v1beta2 after v1beta1 removal (tentative Aug 2026)                                                   |\n|-----------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------|\n| `status.ready`, required                                              | `status.ready` (deprecated), one of `status.ready` or `status.initialization.dataSecretCreated`, required                     | (removed)                                                                                            |\n|                                                                       | `status.initialization.dataSecretCreated` (new), one of `status.ready` or `status.initialization.dataSecretCreated`, required | `status.initialization.dataSecretCreated`, required                                                  |\n| `status.conditions[Ready]`, optional with fall back on `status.ready` | `status.conditions[Ready]`, optional with fall back on `status.ready` or `status.initialization.dataSecretCreated` set        | `status.conditions[Ready]`, optional with fall back on `status.initialization.dataSecretCreated` set |\n| `status.failureReason`, optional                                      | `status.failureReason` (deprecated), optional                                                                                 | (removed)                                                                                            |\n| `status.failureMessage`, optional                                     | `status.failureMessage` (deprecated), optional                                                                                | (removed)                                                                                            |\n| other fields/rules...                                                 | other fields/rules...                                                                                                         |                                                                                                      |\n```\n\n----------------------------------------\n\nTITLE: Configurable Identity Reference Example for Azure\nDESCRIPTION: Example of using complex variables to make identity references configurable in Azure clusters, allowing users to specify both the kind and name of the identity reference.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\nmetadata:\n  name: azure-clusterclass-v0.1.0\nspec:\n  ...\n  variables:\n  - name: clusterIdentityRef\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          kind:\n            type: string\n          name:\n            type: string\n```\n\n----------------------------------------\n\nTITLE: Using Default Fetch Configuration for VSphere Provider in YAML\nDESCRIPTION: This example demonstrates how to use the default fetch configurations by simply specifying standard Cluster API provider names. By using 'vsphere' as the name, the operator automatically fetches the configuration from the default VSphere provider repository.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20201020-capi-provider-operator.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: management.cluster.x-k8s.io/v1alpha1\nkind: InfrastructureProvider\nmetadata:\n name: vsphere\n namespace: capv-system\nspec:\n version: v0.4.9\n secretName: vsphere-variables\n```\n\n----------------------------------------\n\nTITLE: Defining DiskSetup and Mount Structures in Go\nDESCRIPTION: Golang struct definitions for disk setup and mount configuration in KubeadmConfig, including partition tables and filesystem specifications.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200423-etcd-data-disk.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// DiskSetup specifies options for the creation of partition tables and file systems on devices.\n// +optional\nDiskSetup *DiskSetup `json:\"diskSetup,omitempty\"`\n\n// Mounts specifies a list of mount points to be setup.\n// +optional\nMounts []MountPoints `json:\"mounts,omitempty\"`\n\n// DiskSetup defines input for generated disk_setup and fs_setup in cloud-init.\ntype DiskSetup struct {\n    // Partitions specifies the list of the partitions to setup.\n    Partitions  []Partition  `json:\"partitions,omitempty\"`\n    Filesystems []Filesystem `json:\"filesystems,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Create Kind Cluster with Custom Config (Bash)\nDESCRIPTION: Creates a `kind` cluster using a specific configuration file (`kind-config.yaml`). This is used in the KubeVirt setup after creating the configuration file that disables the default CNI and mounts Docker credentials.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkind create cluster --config=kind-config.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing Runtime Hook Catalog in Go\nDESCRIPTION: This Go code snippet shows how to create a catalog for Runtime Hooks and initialize it with different versions of hooks. It demonstrates adding hooks from multiple API versions to the catalog.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220221-runtime-SDK.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar c = catalog.NewCatalog()\n\nfunc init() {\n    v1alpha1.AddToCatalog(c)\n    v1alpha2.AddToCatalog(c)\n    v1alpha3.AddToCatalog(c)\n}\n```\n\n----------------------------------------\n\nTITLE: Scraping CAPI Metrics Securely using Kubectl Port-Forward and Curl in Bash\nDESCRIPTION: Demonstrates scraping CAPI metrics securely using command-line tools. First, `kubectl port-forward` exposes the CAPI controller manager's diagnostics port (8443) to localhost. Second, a temporary ServiceAccount token is created for the `default` account (which needs prior RBAC permissions). Finally, `curl` fetches metrics from the local port-forwarded address using the token for Bearer authentication and `-k` to ignore self-signed certificate verification.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/diagnostics.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Terminal 1\nkubectl -n capi-system port-forward deployments/capi-controller-manager 8443\n\n# Terminal 2\nTOKEN=$(kubectl create token default)\ncurl https://localhost:8443/metrics --header \"Authorization: Bearer $TOKEN\" -k\n```\n\n----------------------------------------\n\nTITLE: Correlating logs across multiple controllers for a specific machine\nDESCRIPTION: This complex query correlates logs from four different CAPI controllers/providers for a specific machine, formatting the output to show the source controller and message for troubleshooting machine provisioning issues.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/logging.md#2025-04-22_snippet_6\n\nLANGUAGE: logql\nCODE:\n```\n{app=~\"capd-controller-manager|capi-kubeadm-bootstrap-controller-manager|capi-kubeadm-control-plane-controller-manager\"} | json | Cluster_name=\"my-cluster\" Machine_name=\"my-cluster-linux-worker-1\" | line_format \"{{.controller}} {{.msg}}\"\n```\n\n----------------------------------------\n\nTITLE: Deploying ArgoCD and Guestbook with Helm Chart Proxies in YAML\nDESCRIPTION: This YAML snippet demonstrates the deployment of ArgoCD and a guestbook application to a Kubernetes cluster using CAAPH HelmChartProxy resources. It requires CAAPH to be set up along with a management cluster. It matches clusters with specific labels for Helm chart installation, pointing to ArgoCD and guestbook repositories, respectively. The configuration waits for job completion and ensures namespace creation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/workload-bootstrap-gitops.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: addons.cluster.x-k8s.io/v1alpha1\nkind: HelmChartProxy\nmetadata:\n  name: argocd\nspec:\n  clusterSelector:\n    matchLabels:\n      argoCDChart: enabled\n  repoURL: https://argoproj.github.io/argo-helm\n  chartName: argo-cd\n  options:\n    waitForJobs: true\n    wait: true\n    timeout: 5m\n    install:\n      createNamespace: true\n---\napiVersion: addons.cluster.x-k8s.io/v1alpha1\nkind: HelmChartProxy\nmetadata:\n  name: argocdguestbook\nspec:\n  clusterSelector:\n    matchLabels:\n      guestbook: enabled\n  repoURL: https://argoproj.github.io/argo-helm\n  chartName: argocd-apps\n  options:\n    waitForJobs: true\n    wait: true\n    timeout: 5m\n    install:\n      createNamespace: true\n  valuesTemplate: |\n    applications:\n      - name: guestbook\n        namespace: argocd\n        finalizers:\n        - resources-finalizer.argocd.argoproj.io\n        project: default\n        sources:\n          - repoURL: https://github.com/argoproj/argocd-example-apps.git\n            path: guestbook\n            targetRevision: HEAD\n        destination:\n          server: https://kubernetes.default.svc\n          namespace: guestbook\n        syncPolicy:\n          automated:\n            prune: false\n            selfHeal: false\n          syncOptions:\n          - CreateNamespace=true\n        revisionHistoryLimit: null\n    ignoreDifferences:\n      - group: apps\n        kind: Deployment\n        jsonPointers:\n        - /spec/replicas\n    info:\n    - name: url\n      value: https://argoproj.github.io/\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Provider Repository Assets in Cluster API\nDESCRIPTION: Shows the file path structure for overriding provider repository assets with local files. This example is for the AWS infrastructure provider version 0.5.2.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/init.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$XDG_CONFIG_HOME/cluster-api/overrides/infrastructure-aws/v0.5.2/infrastructure-components.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing Interruptible Node Labeling in Go for Kubernetes Cluster API\nDESCRIPTION: This code snippet demonstrates how to check if an infrastructure machine is interruptible and set a corresponding label on the Kubernetes node. It uses the util.UnstructuredUnmarshalField function to extract the interruptible status from the infrastructure config.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200330-spot-instances.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Get and set the failure domain from the infrastructure provider.\nvar interruptible bool\nerr = util.UnstructuredUnmarshalField(infraConfig, &interruptible, \"status\", \"interruptible\")\nswitch {\ncase err == util.ErrUnstructuredFieldNotFound: // no-op\ncase err != nil:\n\treturn errors.Wrapf(err, \"failed to get interruptible status from infrastructure provider for Machine %q in namespace %q\", m.Name, m.Namespace)\n}\n\nif !interruptible {\n\treturn nil\n}\n\n// Here goes logic for assigning a label to node\n```\n\n----------------------------------------\n\nTITLE: Initial MailgunClusterReconciler Setup in Go\nDESCRIPTION: Basic initialization of the MailgunClusterReconciler with client and logging configuration.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/controllers-and-reconciliation.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n    if err = (&controllers.MailgunClusterReconciler{\n        Client: mgr.GetClient(),\n        Log:    ctrl.Log.WithName(\"controllers\").WithName(\"MailgunCluster\"),\n    }).SetupWithManager(mgr); err != nil {\n        setupLog.Error(err, \"Unable to create controller\", \"controller\", \"MailgunCluster\")\n        os.Exit(1)\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining BootstrapConfigList Resource in Go for Cluster API\nDESCRIPTION: Definition of a BootstrapConfigList resource that must accompany each BootstrapConfig implementation. This structure contains a list of BootstrapConfig resources.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/bootstrap-config.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:object:root=true\n\n// FooConfigList contains a list of fooconfig.\ntype FooConfigList struct {\n    metav1.TypeMeta `json:\",inline\"`\n    metav1.ListMeta `json:\"metadata,omitempty\"`\n    Items           []FooConfig `json:\"items\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Pod Eviction Detail Logs at Level 4 in Kubernetes\nDESCRIPTION: This log entry at verbosity level 4 provides detailed information about a specific pod's eviction attempt on a given node. It helps system administrators audit and troubleshoot pod eviction issues, requiring access to the drain.go file logs.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/automated-machine-management/machine_deletions.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nI0830 13:29:56.211951      17 drain.go:224] \"Evicting Pod\" ... Node=\"my-cluster-2-md-0-wxtcg-mtg57-24lvh\" Pod=\"test-namespace/nginx-deployment-6886c85ff7-77fpw\"\nI0830 13:29:56.211951      17 drain.go:229] \"Pod eviction successfully triggered\" ... Node=\"my-cluster-2-md-0-wxtcg-mtg57-24lvh\" Pod=\"test-namespace/nginx-deployment-6886c85ff7-77fpw\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Version and Catalog for Runtime Hooks in Go\nDESCRIPTION: This Go code snippet shows how to configure the group version and catalog for Runtime Hooks. It includes setting up the GroupVersion, catalogBuilder, and registering OpenAPI definitions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220221-runtime-SDK.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvar (\n\t// GroupVersion is the group version identifying Runtime Hooks defined in this package\n\t// and their request and response types.\n\tGroupVersion = schema.GroupVersion{Group: \"hooks.runtime.cluster.x-k8s.io\", Version: \"v1alpha1\"}\n\n\t// catalogBuilder is used to add Runtime Hooks and their request and response types\n\t// to a Catalog.\n\tcatalogBuilder = &runtimecatalog.Builder{GroupVersion: GroupVersion}\n\n\t// AddToCatalog adds Runtime Hooks defined in this package and their request and\n\t// response types to a catalog.\n\tAddToCatalog = catalogBuilder.AddToCatalog\n\n\t// localSchemeBuilder provide access to the SchemeBuilder used for managing Runtime Hooks\n\t// and their request and response types defined in this package.\n\t// NOTE: This object is required to allow registration of automatically generated\n\t// conversions func.\n\tlocalSchemeBuilder = catalogBuilder\n)\n\nfunc init() {\n\t// Add Open API definitions for RuntimeHooks request and response types in this package\n\t// NOTE: the GetOpenAPIDefinitions func is automatically generated by openapi-gen.\n\tcatalogBuilder.RegisterOpenAPIDefinitions(GetOpenAPIDefinitions)\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting Etcd Data Disk Using Bash Script\nDESCRIPTION: This bash script mounts an etcd data disk at /var/lib/etcd. It formats the disk if necessary, adds an entry to /etc/fstab, and sets appropriate permissions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200423-etcd-data-disk.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nset -x\nDISK=/dev/sdc\nPARTITION=${DISK}1\nMOUNTPOINT=/var/lib/etcd\nudevadm settle\nmkdir -p $MOUNTPOINT\nif mount | grep $MOUNTPOINT; then\n echo \"disk is already mounted\"\n exit 0\nfi\nif ! grep \"/dev/sdc1\" /etc/fstab; then\n echo \"$PARTITION       $MOUNTPOINT       auto    defaults,nofail       0       2\" >>/etc/fstab\nfi\nif ! ls $PARTITION; then\n /sbin/sgdisk --new 1 $DISK\n /sbin/mkfs.ext4 $PARTITION -L etcd_disk -F -E lazy_itable_init=1,lazy_journal_init=1\nfi\nmount $MOUNTPOINT\n/bin/chown -R etcd:etcd $MOUNTPOINT\n```\n\n----------------------------------------\n\nTITLE: GCP Preemptible Instance Configuration Types\nDESCRIPTION: Golang type definition for GCP Machine specification to support preemptible instances. Includes a boolean flag to enable preemptible instances.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200330-spot-instances.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype GCPMachineSpec struct {\n  ...\n  Preemptible bool `json:\"preemptible\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Completed Drain Log Entry in Kubernetes\nDESCRIPTION: Log entry indicating successful completion of a drain process for a node, specifying the node involved. This is crucial for confirming that node-draining operations have been executed successfully and is logged by the machine controller.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/automated-machine-management/machine_deletions.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nI0830 13:29:56.235398      17 machine_controller.go:727] \"Drain completed, remaining Pods on the Node have been evicted\" ... Node=\"my-cluster-2-md-0-wxtcg-mtg57-24lvh\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Job for Scraping Secure CAPI Metrics in YAML\nDESCRIPTION: Defines a Prometheus scraping job configuration to securely collect metrics from the CAPI diagnostics endpoint. It specifies the HTTPS scheme, uses Bearer token authentication via a service account token file, and provides the CA certificate path. `insecure_skip_verify: true` is necessary as the endpoint uses a self-signed certificate. Requires a ServiceAccount with appropriate RBAC permissions for the `/metrics` path.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/diagnostics.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n    scheme: https\n    authorization:\n      type: Bearer\n      credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n    tls_config:\n      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n      # The diagnostics endpoint is using a self-signed certificate, so we don't verify it.\n      insecure_skip_verify: true\n```\n\n----------------------------------------\n\nTITLE: Querying JSON-formatted logs from capi-controller-manager\nDESCRIPTION: This query returns logs from the capi-controller-manager, parsed as JSON to enable filtering by nested key-value pairs.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/logging.md#2025-04-22_snippet_1\n\nLANGUAGE: logql\nCODE:\n```\n{app=\"capi-controller-manager\"} | json \n```\n\n----------------------------------------\n\nTITLE: Basic Reconcile Function with Object Retrieval\nDESCRIPTION: A simple implementation of the Reconcile function that retrieves the MailgunCluster object based on the request name.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/controllers-and-reconciliation.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (r *MailgunClusterReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {\n\tctx := context.Background()\n\t_ = r.Log.WithValues(\"mailguncluster\", req.NamespacedName)\n\n\tvar cluster infrav1.MailgunCluster\n\tif err := r.Get(ctx, req.NamespacedName, &cluster); err != nil {\n\t\treturn ctrl.Result{}, err\n\t}\n\n\treturn ctrl.Result{}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Runtime Extension with ExtensionConfig in YAML\nDESCRIPTION: This YAML snippet demonstrates how to register a Runtime Extension using the ExtensionConfig custom resource. It includes configuration for the extension's location, namespace selector, and optional settings.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220221-runtime-SDK.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: runtime.cluster.x-k8s.io/v1alpha1\nkind: ExtensionConfig\nmetadata:\n  name: \"my-amazing-extensions\"\nspec:\n  clientConfig:\n    #`url` gives the location of the RuntimeExtension, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.\n    url: \"...\"\n    service:\n      namespace: \"example-namespace\"\n      name: \"example-service\"\n      # `path` is an optional path prefix path which can be sent in any request to this service.\n      path: \"runtime-extensions/\"\n      # If specified, the port on the service that hosts the RuntimeExtension. Default to 443. `port` should be a valid port number (1-65535, inclusive).\n      port: 8082\n    caBundle: \"...\"\n  # NamespaceSelector decides whether to run the webhook on a Cluster based on whether the namespace for that Cluster matches the selector.\n  # If not specified, the WebHook runs for all the namespaces.\n  namespaceSelector: {}\n  # settings is a map[string]string which is sent with each request to a Runtime Extension. These settings can be used by\n  # to modify the behaviour of a Runtime Extension.\n  settings: {}\n```\n\n----------------------------------------\n\nTITLE: Debug Configuration for CAPI Core Controller\nDESCRIPTION: Example debug configuration for Core CAPI Controller with delve debugging, profiler, and metrics.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ndebug:\n  core:\n    continue: false\n    port: 30000\n    profiler_port: 40000\n    metrics_port: 40001\n```\n\n----------------------------------------\n\nTITLE: Initializing Equinix Metal (Packet) Infrastructure Provider\nDESCRIPTION: This script sets the Equinix Metal API key environment variable and initializes the infrastructure provider using clusterctl.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nexport PACKET_API_KEY=\"34ts3g4s5g45gd45dhdh\"\n\nclusterctl init --infrastructure packet\n```\n\n----------------------------------------\n\nTITLE: Declaring Apache License Header in Shell Scripts - Shell\nDESCRIPTION: This code snippet is a license declaration comment for source code files within the Kubernetes Cluster API project. It outlines that the file is licensed under the Apache License, Version 2.0, providing instructions on how to obtain the license and describing usage limitations and warranty disclaimers. No runtime dependencies are required, and the comment is intended to be used as a header in shell scripts or files to explicitly state legal terms for code usage and distribution.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/hack/boilerplate/boilerplate.generatebzl.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Copyright The Kubernetes Authors.\\n#\\n# Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n# you may not use this file except in compliance with the License.\\n# You may obtain a copy of the License at\\n#\\n#     http://www.apache.org/licenses/LICENSE-2.0\\n#\\n# Unless required by applicable law or agreed to in writing, software\\n# distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n# See the License for the specific language governing permissions and\\n# limitations under the License.\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Helper Image Commands in tilt-provider Configuration (dockerfile)\nDESCRIPTION: This Dockerfile snippet demonstrates commands like `RUN wget ...` that can be specified using the `additional_docker_helper_commands` field within a provider's `tilt-provider.yaml`. These commands are executed during the build of a temporary helper image, often used to download tools needed later in the main image build.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_24\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN wget -qO- https://dl.k8s.io/v1.21.2/kubernetes-client-linux-amd64.tar.gz | tar xvz\nRUN wget -qO- https://get.docker.com | sh\n```\n\n----------------------------------------\n\nTITLE: Defining Pod Drain Behavior with Cluster API Labels\nDESCRIPTION: These Kubernetes labels are proposed for use on Pods (or their controllers like Deployments) within workload clusters managed by Cluster API. `cluster.x-k8s.io/drain: skip` prevents the Pod from being drained during node maintenance. `cluster.x-k8s.io/drain: wait-completed` ensures the Pod is drained but waits for its completion with order 0. These labels take precedence over `MachineDrainRules` defined in the management cluster.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240930-machine-drain-rules.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n* `cluster.x-k8s.io/drain: skip`\n* `cluster.x-k8s.io/drain: wait-completed`\n```\n\n----------------------------------------\n\nTITLE: Updating ConfigMap with Modified Resource in YAML for Kubernetes Cluster API\nDESCRIPTION: This YAML snippet shows an updated version of the previous ConfigMap, where one of the resources (calico-configmap) has been modified. This example is used to demonstrate how changes in resource definitions are detected and handled in the ClusterResourceSet reconciliation process.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200220-cluster-resource-set.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: calico-addon\ndata:\n  calico1.yaml: |-\n     kind: Secret\n     apiVersion: v1\n     metadata:\n      name: calico-secret1\n      namespace: mysecrets\n      ---\n     kind: Secret\n     apiVersion: v1\n     metadata:\n      name: calico-secret2\n      namespace: mysecrets\n  calico2.yaml: |-\n     kind: ConfigMap\n     apiVersion: v1\n     metadata:\n      name: calico-configmap\n      namespace: myconfigmaps\n     data:\n       key: \"value that changed\"\n```\n\n----------------------------------------\n\nTITLE: Adding Pod Security Standard Variables to ClusterClass in YAML\nDESCRIPTION: This snippet demonstrates how to add variables for Pod Security Standards configuration to a ClusterClass, allowing for customization of security enforcement levels. It defines parameters for enabling the feature and setting levels for enforce, audit, and warn modes.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/security/pod-security-standards.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\nspec:\n  variables:\n  - name: podSecurityStandard\n    required: false\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties: \n          enabled: \n            type: boolean\n            default: true\n            description: \"enabled enables the patches to enable Pod Security Standard via AdmissionConfiguration.\"\n          enforce:\n            type: string\n            default: \"baseline\"\n            description: \"enforce sets the level for the enforce PodSecurityConfiguration mode. One of privileged, baseline, restricted.\"\n            pattern: \"privileged|baseline|restricted\"\n          audit:\n            type: string\n            default: \"restricted\"\n            description: \"audit sets the level for the audit PodSecurityConfiguration mode. One of privileged, baseline, restricted.\"\n            pattern: \"privileged|baseline|restricted\"\n          warn:\n            type: string\n            default: \"restricted\"\n            description: \"warn sets the level for the warn PodSecurityConfiguration mode. One of privileged, baseline, restricted.\"\n            pattern: \"privileged|baseline|restricted\"\n  ...\n```\n\n----------------------------------------\n\nTITLE: Setting DOCKER_HOST for Podman on Linux (bash)\nDESCRIPTION: This command exports the `DOCKER_HOST` environment variable, pointing it to the user-specific Podman socket path (`/run/user/$(id -u)/podman/podman.sock`). This allows tools originally designed for Docker (which check `DOCKER_HOST`) to communicate with the Podman service via its socket on Linux.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nexport DOCKER_HOST=unix:///run/user/$(id -u)/podman/podman.sock\n```\n\n----------------------------------------\n\nTITLE: Defining BootstrapConfigTemplateList Resource (Kubernetes/Go)\nDESCRIPTION: This Go code snippet defines the FooConfigTemplateList struct, representing a list of FooConfigTemplate resources within the Kubernetes Cluster API. The struct includes standard TypeMeta and ListMeta fields and an Items array containing FooConfigTemplate instances. It leverages Kubebuilder annotations for CRD generation, and requires dependencies such as controller-runtime metav1 API and the previously defined FooConfigTemplate. The output is a Go struct suitable for use as a Kubernetes API resource list type.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/bootstrap-config.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:object:root=true\\n\\n// FooConfigTemplateList contains a list of FooConfigTemplates.\\ntype FooConfigTemplateList struct {\\n    metav1.TypeMeta `json:\",inline\"`\\n    metav1.ListMeta `json:\"metadata,omitempty\"`\\n    Items           []FooConfigTemplate `json:\"items\"`\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Variables in YAML\nDESCRIPTION: This YAML snippet shows how to define variables in the clusterctl configuration file. These variables can be used for substitution when installing providers or creating clusters.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Values for environment variable substitution\nAWS_B64ENCODED_CREDENTIALS: XXXXXXXX\n```\n\n----------------------------------------\n\nTITLE: Filtering logs by cluster name and verbosity level\nDESCRIPTION: This query filters logs from the capi-controller-manager for a specific cluster, showing only entries with log level less than or equal to 2.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/logging.md#2025-04-22_snippet_3\n\nLANGUAGE: logql\nCODE:\n```\n{app=\"capi-controller-manager\"} | json | Cluster_name=\"my-cluster\" | v <= 2\n```\n\n----------------------------------------\n\nTITLE: Example AfterClusterUpgrade Request (YAML)\nDESCRIPTION: This YAML snippet provides an example request payload for the `AfterClusterUpgrade` hook. It includes the API version, kind, optional settings, the Cluster object, and the final Kubernetes version (`kubernetesVersion`). This non-blocking hook is called after the entire cluster (control plane and workers) has been upgraded, suitable for final post-upgrade tasks.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-lifecycle-hooks.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: hooks.runtime.cluster.x-k8s.io/v1alpha1\nkind: AfterClusterUpgradeRequest\nsettings: <Runtime Extension settings>\ncluster:\n  apiVersion: cluster.x-k8s.io/v1beta1\n  kind: Cluster\n  metadata:\n   name: test-cluster\n   namespace: test-ns\n  spec:\n   ...\n  status:\n   ...\nkubernetesVersion: \"v1.22.0\"\n```\n\n----------------------------------------\n\nTITLE: Initializing KubeKey Infrastructure Provider\nDESCRIPTION: This command initializes a Kubernetes cluster as a Cluster API management cluster with KubeKey as the infrastructure provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize the management cluster\nclusterctl init --infrastructure kubekey\n```\n\n----------------------------------------\n\nTITLE: Checking Node Readiness in Workload Cluster with Kubectl (Bash)\nDESCRIPTION: This Bash snippet retrieves the status of all Kubernetes nodes in the workload cluster using 'kubectl get nodes'. It is used to ensure nodes are in the 'Ready' state, signifying a successful cluster setup including networking. Input is implicit from current kubeconfig context; output is a list of cluster nodes and their status.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/ignition.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes\\n\n```\n\n----------------------------------------\n\nTITLE: Required Kustomize Substitutions for E2E Tests\nDESCRIPTION: Required kustomize_substitutions for running E2E tests locally using an existing cluster managed by Tilt.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nkustomize_substitutions:\n  CLUSTER_TOPOLOGY: \"true\"\n  EXP_KUBEADM_BOOTSTRAP_FORMAT_IGNITION: \"true\"\n  EXP_RUNTIME_SDK: \"true\"\n  EXP_MACHINE_SET_PREFLIGHT_CHECKS: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Creating Etcd CA Generic Secret using kubectl (Bash)\nDESCRIPTION: This command creates a generic Kubernetes Secret named `$CLUSTER_NAME-etcd` in the specified `$CLUSTER_NAMESPACE`. It stores the etcd cluster's CA certificate, which must be provided in a file named `tls.crt` (expected in the current directory). This CA certificate is used by components (like the API server) to verify the identity of the etcd servers. The `kubectl create secret generic` command is used because only the certificate (`.crt`) file is needed, not a key.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/external-etcd.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Etcd's CA crt file to validate the generated client certificates\nkubectl create secret generic $CLUSTER_NAME-etcd \\\n  --from-file tls.crt \\\n  --namespace $CLUSTER_NAMESPACE\n```\n\n----------------------------------------\n\nTITLE: Defining an InfobloxIPPool in YAML for Cluster API IPAM\nDESCRIPTION: This snippet demonstrates an IP Pool resource for an Infoblox IPAM provider. It specifies the network view, DNS zone, and network for IP allocation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220125-ipam-integration.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ipam.cluster.x-k8s.io/v1alpha1\nkind: InfobloxIPPool\nmetadata:\n  name: ib-pool\nspec:\n  networkView: \"some-view\"\n  dnsZone: \"test.example.com.\"\n  network: 10.10.10.0/24\n```\n\n----------------------------------------\n\nTITLE: Displaying Provider Repositories in Cluster API CLI\nDESCRIPTION: The 'clusterctl config repositories' command displays the list of providers and their repository configurations. It uses a default list of known providers, which can be customized in the clusterctl.yaml configuration file.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/additional-commands.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# clusterctl config repositories\n\nDisplay the list of providers and their repository configurations.\n\nclusterctl ships with a list of known providers; if necessary, edit\n$XDG_CONFIG_HOME/cluster-api/clusterctl.yaml file to add a new provider or to customize existing ones.\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure CAPI Diagnostics Endpoint in YAML\nDESCRIPTION: Sets the `--diagnostics-address` argument for the CAPI controller manager to `:8443` (or the value of the CAPI_DIAGNOSTICS_ADDRESS environment variable), enabling the secure diagnostics endpoint. This endpoint serves metrics, pprof, and log level controls via HTTPS and requires authentication/authorization.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/diagnostics.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n          args:\n            - \"--diagnostics-address=${CAPI_DIAGNOSTICS_ADDRESS:=:8443}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Kubelet Flags via KubeadmConfigTemplate\nDESCRIPTION: This example demonstrates how to configure kubelet settings on worker nodes through command-line flags using KubeadmConfigSpec.kubeletExtraArgs. It sets resource reservations and eviction thresholds.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/kubeadm-bootstrap/kubelet-config.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: bootstrap.cluster.x-k8s.io/v1beta1\nkind: KubeadmConfigTemplate\nmetadata:\n  name: kubelet-extra-args-default-worker-bootstraptemplate\n  namespace: default\nspec:\n  template:\n    spec:\n      joinConfiguration:\n        nodeRegistration:\n          criSocket: unix:///var/run/containerd/containerd.sock\n          # Set kubelet flags via KubeadmConfigSpec.kubeletExtraArgs\n          kubeletExtraArgs:\n            kube-reserved: cpu=1,memory=2Gi,ephemeral-storage=1Gi\n            system-reserved: cpu=500m,memory=1Gi,ephemeral-storage=1Gi\n            eviction-hard: memory.available<500Mi,nodefs.available<10%\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Design Proposal\nDESCRIPTION: YAML frontmatter defining metadata for the CAPI Provider Operator design proposal, including authors, reviewers, dates, and status.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20201020-capi-provider-operator.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: CAPI Provider Operator\nauthors:\n  - \"@fabriziopandini\"\n  - \"@wfernandes\"\nreviewers:\n  - \"@vincepri\"\n  - \"@ncdc\"\n  - \"@justinsb\"\n  - \"@detiber\"\n  - \"@CecileRobertMichon\"\ncreation-date: 2020-09-14\nlast-updated: 2021-01-20\nstatus: implementable\nsee-also:\nhttps://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20191016-clusterctl-redesign.md\n---\n```\n\n----------------------------------------\n\nTITLE: Setting DOCKER_HOST in Bash\nDESCRIPTION: This script assigns the environment variable DOCKER_HOST to the correct Unix socket path for Docker communication. It depends on the presence of a running Lima machine named 'docker'.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nexport DOCKER_HOST=$(limactl list \"docker\" --format 'unix://{{.Dir}}/sock/docker.sock')\n```\n\n----------------------------------------\n\nTITLE: Enabling Podman Socket on Linux via systemd (bash)\nDESCRIPTION: This command uses `systemctl` to enable and immediately start the `podman.socket` user service on Linux systems with systemd. This makes the Podman API accessible via a Unix socket, which is necessary for tools like Tilt to interact with Podman similarly to Docker.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl --user enable --now podman.socket\n```\n\n----------------------------------------\n\nTITLE: Creating Test Cluster for Cluster API Development\nDESCRIPTION: Command to create a cluster specifically for development and testing purposes using the Cluster API project's own tooling.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd cluster-api\nmake create-cluster\n```\n\n----------------------------------------\n\nTITLE: Defining the ClusterEndpoint Go Structs for Cluster API\nDESCRIPTION: Go language type definitions for the proposed `ClusterEndpoint` CRD within the Cluster API project. It includes the `ClusterEndpointType` enum, the main `ClusterEndpoint` struct embedding standard Kubernetes metadata types, and the `ClusterEndpointSpec` struct detailing the desired state with fields for Host, Port, associated Cluster name, and endpoint Type (with validation).\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20230407-flexible-managed-k8s-endpoints.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// ClusterEndpointType describes the type of cluster endpoint.\ntype ClusterEndpointType string\n\n// ClusterEndpoint represents a reachable Kubernetes API endpoint serving a particular cluster function.\ntype ClusterEndpoint struct {\n  metav1.TypeMeta   `json:\",inline\"`\n\tmetav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n  Spec ClusterEndpointSpec   `json:\"spec,omitempty\"`\n}\n\n// ClusterEndpointSpec defines the desired state of the Cluster endpoint.\ntype ClusterEndpointSpec struct {\n\t// The Host is the DNS record or the IP address that the endpoint is reachable on.\n\tHost string `json:\"host\"`\n\n\t// The port on which the endpoint is serving.\n\tPort int32 `json:\"port\"`\n\n  // Cluster is a reference to the cluster name that this endpoint is reachable on.\n  Cluster string `json:\"cluster\"`\n\n  // Type describes the function that this cluster endpoint serves.\n  // +kubebuilder:validation:Enum=apiserver\n  Type ClusterEndpointType `json:\"type\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Example BeforeClusterUpgrade Request (YAML)\nDESCRIPTION: This YAML snippet provides an example request payload for the `BeforeClusterUpgrade` hook. It includes the API version, kind, optional settings, the Cluster object, the original Kubernetes version (`fromKubernetesVersion`), and the target Kubernetes version (`toKubernetesVersion`). This hook is called after the `spec.topology.version` is updated but before the upgrade propagates to the control plane, allowing pre-upgrade tasks.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-lifecycle-hooks.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: hooks.runtime.cluster.x-k8s.io/v1alpha1\nkind: BeforeClusterUpgradeRequest\nsettings: <Runtime Extension settings>\ncluster:\n  apiVersion: cluster.x-k8s.io/v1beta1\n  kind: Cluster\n  metadata:\n   name: test-cluster\n   namespace: test-ns\n  spec:\n   ...\n  status:\n   ...\nfromKubernetesVersion: \"v1.21.2\"\ntoKubernetesVersion: \"v1.22.0\"\n```\n\n----------------------------------------\n\nTITLE: Checking Virtual Machine Instance Status for KubeVirt\nDESCRIPTION: This command retrieves the status of virtual machine instances in a KubeVirt environment, providing details such as IP addresses and node names.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_83\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get vmi\n```\n\n----------------------------------------\n\nTITLE: Defining GCP Managed Kubernetes Cluster Specification in Go\nDESCRIPTION: This Go snippet defines the GCPManagedClusterSpec struct, intended for use as a pass-through infrastructure cluster object within the Cluster API design. This struct focuses solely on holding the ControlPlaneEndpoint property, aligning with CAPI contracts but delegating the majority of infrastructure and provisioning to the control plane resource. The struct is designed to be used in custom resource definitions watched by CAPI controllers.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220725-managed-kubernetes.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype GCPManagedClusterSpec struct {\n    // ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.\n    // +optional\n    ControlPlaneEndpoint clusterv1.APIEndpoint `json:\"controlPlaneEndpoint\"`\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining GCPManagedControlPlaneSpec in Go for Option 3\nDESCRIPTION: This code snippet defines the GCPManagedControlPlaneSpec struct for Option 3, containing only properties specific to GKE control plane provisioning and management. It excludes general GCP infrastructure properties, focusing on addons, logging, and control plane features.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220725-managed-kubernetes.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype GCPManagedControlPlaneSpec struct {\n    // AddonsConfig defines the addons to enable with the GKE cluster.\n    // +optional\n    AddonsConfig *AddonsConfig `json:\"addonsConfig,omitempty\"`\n\n    // Logging contains the logging configuration for the GKE cluster.\n    // +optional\n    Logging *ControlPlaneLoggingSpec `json:\"logging,omitempty\"`\n\n    // EnableKubernetesAlpha will indicate the kubernetes alpha features are enabled\n    // +optional\n    EnableKubernetesAlpha bool\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Cluster API with Local Artifacts\nDESCRIPTION: Example clusterctl init command generated by create-local-repository.py script, using local artifacts for various Cluster API providers.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/developers.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl init \\\n   --core cluster-api:v0.3.8 \\\n   --bootstrap kubeadm:v0.3.8 \\\n   --control-plane kubeadm:v0.3.8 \\\n   --infrastructure aws:v0.5.0 \\\n   --infrastructure docker:v0.3.8 \\\n   --config $XDG_CONFIG_HOME/cluster-api/dev-repository/config.yaml\n```\n\n----------------------------------------\n\nTITLE: Initializing CloudStack Infrastructure Provider with clusterctl\nDESCRIPTION: This command initializes a Kubernetes cluster as a Cluster API management cluster with CloudStack as the infrastructure provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl init --infrastructure cloudstack\n```\n\n----------------------------------------\n\nTITLE: vSphere Credential Configuration\nDESCRIPTION: Example of configuring vSphere username and password in kustomize_substitutions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nkustomize_substitutions:\n  VSPHERE_USERNAME: \"administrator@vsphere.local\"\n  VSPHERE_PASSWORD: \"Admin123\"\n```\n\n----------------------------------------\n\nTITLE: Testing Runtime Extensions via kubectl create\nDESCRIPTION: Command example for testing Runtime Extensions by sending a Discovery Request using kubectl create --raw command.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-extensions.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create --raw '/api/v1/namespaces/default/services/https:webhook-service:443/proxy/hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery' \\\n  -f <(echo '{\"apiVersion\":\"hooks.runtime.cluster.x-k8s.io/v1alpha1\",\"kind\":\"DiscoveryRequest\"}') | jq\n```\n\n----------------------------------------\n\nTITLE: Creating Cluster and Machine API Types\nDESCRIPTION: Uses Kubebuilder to generate the API types for MailgunCluster and MailgunMachine resources. This creates the necessary Go structs and CRD manifests for these custom resources.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/initialize-repo-and-api-types.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubebuilder create api --group infrastructure --version v1alpha1 --kind MailgunCluster\nkubebuilder create api --group infrastructure --version v1alpha1 --kind MailgunMachine\n```\n\n----------------------------------------\n\nTITLE: Verify clusterctl Installation (Bash)\nDESCRIPTION: Checks the installed version of the `clusterctl` command-line tool to ensure it was installed correctly and is accessible in the system's PATH.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl version\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Pods from Drain Using MachineDrainRule - Kubernetes - YAML\nDESCRIPTION: This YAML example demonstrates how to configure a MachineDrainRule to skip draining for selected Pods with certain labels and namespaces. The 'Skip' behavior ensures matching Pods are not evicted during node draining. It requires the CRD registration, and expects users to specify label selectors in both 'selector' and 'namespaceSelector.' The effect is to prevent graceful termination for these Pods, letting them run until node shutdown, suitable for monitoring or specific application agents.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240930-machine-drain-rules.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\\nkind: MachineDrainRule\\nmetadata:\\n  name: skip-pods\\n  namespace: default\\nspec:\\n  drain:\\n    behavior: Skip\\n  machines:\\n  - selector: {}\\n  pods:\\n   # This selects all Pods with the app label in (example-app1,example-app2) AND in the example-namespace\\n  - selector:\\n      matchExpressions:\\n      - key: app\\n        operator: In\\n        values:\\n        - example-app1\\n        - example-app2\\n    namespaceSelector:\\n      matchLabels:\\n        kubernetes.io/metadata.name: example-namespace\\n  # This additionally selects Pods with the app label == monitoring AND in the monitoring namespace\\n  - selector:\\n      matchExpressions:\\n        - key: app\\n          operator: In\\n          values:\\n            - monitoring\\n    namespaceSelector:\\n      matchLabels:\\n        kubernetes.io/metadata.name: monitoring\n```\n\n----------------------------------------\n\nTITLE: Filtering and formatting logs from the cluster controller\nDESCRIPTION: This query filters logs by cluster, reconcile ID, and controller, then formats the output to show only the message content for improved readability.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/logging.md#2025-04-22_snippet_5\n\nLANGUAGE: logql\nCODE:\n```\n{app=\"capi-controller-manager\"} | json | Cluster_name=\"my-cluster\" reconcileID=\"6f6ad971-bdb6-4fa3-b803-ef81c5c8f9d0\" controller=\"cluster\" | line_format \"{{ .msg }}\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Version in Cluster API CLI\nDESCRIPTION: The 'clusterctl version' command prints the current version of the clusterctl tool.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/additional-commands.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# clusterctl version\n\nPrint clusterctl version.\n```\n\n----------------------------------------\n\nTITLE: Adding Pod Security Standard Patches to Existing ClusterClass Configuration\nDESCRIPTION: This YAML snippet shows how to add patches to a ClusterClass that already has extraVolumes and files configurations. It configures the kube-apiserver to use Pod Security Admission by adding necessary arguments, volumes, and admission configuration files.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/security/pod-security-standards.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\nspec:\n  ...\n  patches:\n  - name: podSecurityStandard\n    description: \"Adds an admission configuration for PodSecurity to the kube-apiserver.\"\n    definitions:\n    - selector:\n        apiVersion: controlplane.cluster.x-k8s.io/v1beta1\n        kind: KubeadmControlPlaneTemplate\n        matchResources:\n          controlPlane: true\n      jsonPatches:\n      - op: add\n        path: \"/spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs\"\n        value:\n          admission-control-config-file: \"/etc/kubernetes/kube-apiserver-admission-pss.yaml\"\n      - op: add\n        path: \"/spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes/-\"\n        value:\n          name: admission-pss\n          hostPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml\n          mountPath: /etc/kubernetes/kube-apiserver-admission-pss.yaml\n          readOnly: true\n          pathType: \"File\"\n      - op: add\n        path: \"/spec/template/spec/kubeadmConfigSpec/files/-\"\n        valueFrom:\n          template: |\n            content: |\n              apiVersion: apiserver.config.k8s.io/v1\n              kind: AdmissionConfiguration\n              plugins:\n              - name: PodSecurity\n                configuration:\n                  apiVersion: pod-security.admission.config.k8s.io/v1{{ if semverCompare \"< v1.25\" .builtin.controlPlane.version }}beta1{{ end }}\n                  kind: PodSecurityConfiguration\n                  defaults:\n                    enforce: \"{{ .podSecurity.enforce }}\"\n                    enforce-version: \"latest\"\n                    audit: \"{{ .podSecurity.audit }}\"\n                    audit-version: \"latest\"\n                    warn: \"{{ .podSecurity.warn }}\"\n                    warn-version: \"latest\"\n                  exemptions:\n                    usernames: []\n                    runtimeClasses: []\n                    namespaces: [kube-system]\n            path: /etc/kubernetes/kube-apiserver-admission-pss.yaml\n    enabledIf: \"{{ .podSecurityStandard.enabled }}\"\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring vcluster Environment Variables\nDESCRIPTION: Sets environment variables for vcluster deployment, including cluster name, namespace, Kubernetes version, and Helm values.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\nexport CLUSTER_NAME=kind\nexport CLUSTER_NAMESPACE=vcluster\nexport KUBERNETES_VERSION=1.23.4\nexport HELM_VALUES=\"service:\\n  type: NodePort\"\n```\n\n----------------------------------------\n\nTITLE: Defining DockerMachineTemplate with Resource Capacity in YAML\nDESCRIPTION: Example of a DockerMachineTemplate manifest in YAML format, showing how to specify resource capacity including memory, CPU, and GPU in the status field.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20210310-opt-in-autoscaling-from-zero.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: infrastructure.cluster.x-k8s.io/v1alpha4\nkind: DockerMachineTemplate\nmetadata:\n  name: workload-md-0\n  namespace: default\nspec:\n  template:\n    spec: {}\nstatus:\n  capacity:\n    memory: 500mb\n    cpu: \"1\"\n    nvidia.com/gpu: \"1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring KubeadmControlPlaneTemplate YAML\nDESCRIPTION: Illustrates the setup of a KubeadmControlPlaneTemplate in a Kubernetes environment to modify the kubelet configuration through strategic patch files. The example specifies the location of patch files and demonstrates how node configurations are adjusted using 'KubeadmConfigSpec.files'.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/kubeadm-bootstrap/kubelet-config.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: controlplane.cluster.x-k8s.io/v1beta1\nkind: KubeadmControlPlaneTemplate\nmetadata:\n  name: kubeadm-config-template-control-plane\n  namespace: default\nspec:\n  template:\n    spec:\n      kubeadmConfigSpec:\n        files:\n        # Here we put a patch file for kubeletconfiguration target in strategic patchtype on nodes via KubeadmConfigSpec.files\n        # The naming convention of the patch file is kubeletconfiguration{suffix}+{patchtype}.json where {suffix} is an string and {patchtype} is one of the following: strategic, merge, json.\n        # {suffix} determines the order of the patch files. The patches are applied in the alpha-numerical order of the {suffix}.\n        - path: /etc/kubernetes/patches/kubeletconfiguration0+strategic.json\n          owner: \"root:root\"\n          permissions: \"0644\"\n          content: |\n            {\n              \"apiVersion\": \"kubelet.config.k8s.io/v1beta1\",\n              \"kind\": \"KubeletConfiguration\",\n              \"kubeReserved\": {\n                \"cpu\": \"1\",\n                \"memory\": \"2Gi\",\n                \"ephemeral-storage\": \"1Gi\",\n              },\n              \"systemReserved\": {\n                \"cpu\": \"500m\",\n                \"memory\": \"1Gi\",\n                \"ephemeral-storage\": \"1Gi\",\n              },\n              \"evictionHard\": {\n                \"memory.available\": \"500Mi\",\n                \"nodefs.available\": \"10%\",\n              },\n            }\n        initConfiguration:\n          nodeRegistration:\n            criSocket: unix:///var/run/containerd/containerd.sock\n          # Here we specify the directory that contains the patch files\n          patches:\n            directory: /etc/kubernetes/patches\n        joinConfiguration:\n          nodeRegistration:\n            criSocket: unix:///var/run/containerd/containerd.sock\n          # Here we specify the directory that contains the patch files\n          patches:\n            directory: /etc/kubernetes/patches\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Workload Cluster Kubeconfig with Clusterctl\nDESCRIPTION: Command to get the kubeconfig for a workload cluster using clusterctl, which may require additional steps for Docker Desktop users.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/developers.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl get kubeconfig capi-quickstart > capi-quickstart.kubeconfig\n```\n\n----------------------------------------\n\nTITLE: Initializing IONOS Cloud Infrastructure Provider\nDESCRIPTION: This command initializes a Kubernetes cluster as a Cluster API management cluster with IONOS Cloud as the infrastructure provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl init --infrastructure ionoscloud-ionoscloud\n```\n\n----------------------------------------\n\nTITLE: Additional Kustomizations Configuration\nDESCRIPTION: Example of configuring additional Kustomization resources to install to the cluster.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nadditional_kustomizations:\n  capv-metrics: ../cluster-api-provider-vsphere/config/metrics\n```\n\n----------------------------------------\n\nTITLE: Optional Patches Configuration in ClusterClass\nDESCRIPTION: Demonstrates how to configure conditional patches using enabledIf templates and variable definitions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\nmetadata:\n  name: docker-clusterclass-v0.1.0\nspec:\n  ...\n  variables:\n  - name: httpProxy\n    schema:\n      openAPIV3Schema:\n        type: string\n  patches:\n  - name: httpProxy\n    enabledIf: \"{{ if .httpProxy }}true{{end}}\"\n    definitions:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining IPAddressClaim struct in Go for Cluster API IPAM\nDESCRIPTION: This Go code defines the IPAddressClaim struct, which is used to request IP addresses from a pool. It includes the specification and status fields for the resource.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220125-ipam-integration.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// IPAddressClaimSpec describes the desired state of an IPAddressClaim\ntype IPAddressClaimSpec struct {\n  // Pool is a reference to the pool from which an IP address should be allocated.\n  Pool LocalObjectReference `json:\"pool,omitempty\"`\n}\n\n// IPAddressClaimStatus contains the status of an IPAddressClaim\ntype IPAddressClaimStatus struct {\n  // Address is a reference to the address that was allocated for this claim.\n  Address LocalObjectReference `json:\"address,omitempty\"`\n\n  // Conditions provide details about the status of the claim.\n\t// +optional\n\tConditions clusterv1.Conditions `json:\"conditions,omitempty\"`\n}\n \n// IPAddressClaim can be used to allocate IPAddresses from an IP Pool.\ntype IPAddressClaim struct {\n  metav1.TypeMeta   `json:\",inline\"`\n  metav1.ObjectMeta `json:\"metadata,omitempty\"`\n  \n  Spec   IPAddressClaimSpec   `json:\"spec,omitempty\"`\n  Status IPAddressClaimStatus `json:\"status,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Gates via Controller Manager Arguments - Plaintext\nDESCRIPTION: This snippet provides the relevant section of a Kubernetes deployment YAML where feature gates are passed as command line arguments to the controller process. Modify the '--feature-gates' argument to enable or disable features by including key=value pairs (e.g., MachinePool=true). Applies after editing a deployment as shown in the previous snippet. Dependencies: Accessible deployment spec for the controller in the cluster, knowledge of available feature gates. Input: YAML spec for container args. Output: Upon updating, the deployment will restart and the controller will use the specified feature gates. Limitation: Changing arguments may require a controller restart.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/experimental-features.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n// Enable/disable available features by modifying Args below.\n    Args:\n      --leader-elect\n      --feature-gates=MachinePool=true,ClusterResourceSet=true\n```\n\n----------------------------------------\n\nTITLE: Applying Workload Cluster Manifest with Kubectl (Bash)\nDESCRIPTION: This Bash snippet applies the generated cluster manifest (ignition-cluster.yaml) by using 'kubectl apply'. It creates the resources necessary for the workload cluster on the management cluster. Requires an initialized management cluster and cluster manifest YAML file as input. There are no outputs on success unless an error occurs.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/ignition.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ignition-cluster.yaml\\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Infrastructure Provider with clusterctl\nDESCRIPTION: This command initializes a Kubernetes cluster as a Cluster API management cluster with Azure as the infrastructure provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl init --infrastructure azure\n```\n\n----------------------------------------\n\nTITLE: Setting Drain Order for Portworx using MachineDrainRule - Kubernetes - YAML\nDESCRIPTION: This YAML defines a MachineDrainRule resource that configures a drain order for Portworx Pods by assigning a drain 'order' value. This ensures such Pods are drained after others, supporting use cases requiring dependent resource shutdown sequencing. The snippet requires the CRD and label selectors to identify targeted Pods. Input parameters include the behavior (Drain) and ordering integer, and output is the controlled pod eviction order during Machine deletion workflows.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240930-machine-drain-rules.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\\nkind: MachineDrainRule\\nmetadata:\\n  name: portworx\\n  namespace: default\\nspec:\\n  drain:\\n    behavior: Drain\\n    order: 100\\n  machines:\\n  - selector: {}\\n  pods:\\n  - selector:\\n      matchLabels:\\n        app: portworx\n```\n\n----------------------------------------\n\nTITLE: Defining InfraMachineTemplate and InfraMachineTemplateList in Go\nDESCRIPTION: This snippet demonstrates how to define the InfraMachineTemplate and InfraMachineTemplateList resources in Go. It includes the necessary struct definitions and Kubernetes API annotations.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/infra-machine.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:object:root=true\n// +kubebuilder:resource:path=foomachinetemplates,scope=Namespaced,categories=cluster-api\n// +kubebuilder:storageversion\n\n// FooMachineTemplate is the Schema for the foomachinetemplates API.\ntype FooMachineTemplate struct {\n    metav1.TypeMeta   `json:\",inline\"`\n    metav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n    Spec FooMachineTemplateSpec `json:\"spec,omitempty\"`\n}\n\ntype FooMachineTemplateSpec struct {\n    Template FooMachineTemplateResource `json:\"template\"`\n}\n\ntype FooMachineTemplateResource struct {\n    // Standard object's metadata.\n    // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n    // +optional\n    ObjectMeta clusterv1.ObjectMeta `json:\"metadata,omitempty\"`\n    Spec FooMachineSpec `json:\"spec\"`\n}\n\n// +kubebuilder:object:root=true\n\n// FooMachineTemplateList contains a list of FooMachineTemplates.\ntype FooMachineTemplateList struct {\n    metav1.TypeMeta `json:\",inline\"`\n    metav1.ListMeta `json:\"metadata,omitempty\"`\n    Items           []FooMachineTemplate `json:\"items\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking a clusterctl Plugin\nDESCRIPTION: Example command showing how to invoke the installed plugin as a clusterctl command. When executed, it runs the plugin code.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/plugins.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl foo\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Extension Discovery Hook in YAML\nDESCRIPTION: This YAML snippet outlines the structure for implementing a discovery hook within runtime extensions. A discovery hook is expected to return the status of implemented extensions and their specific configurations, such as names, API versions, and timeout policies. This struct enables defining various handlers for multiple runtime extensions under the same hook, aiding extensibility and easy management.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220221-runtime-SDK.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nstatus: Success # or Failure\nmessage: \"error message if status == Failure\"\nhandlers: # Info about implemented runtime extensions\n- name: http-proxy     # Unique name identifying the runtime extension\n  requestHook:\n    apiVersion: \"hook.runtime.cluster.x-k8s.io/v1alpha1\"\n    hook: \"generatePatches\"\n  timeoutSeconds: 5    # Default value suggested by the RuntimeExtension developers\n  failurePolicy: Fail  # Default value suggested by the RuntimeExtension developers \n- ...\n```\n\n----------------------------------------\n\nTITLE: Exporting OpenStack Environment Variables from Template\nDESCRIPTION: Downloads and sources a template script to export OpenStack environment variables from a clouds.yaml file.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/kubernetes-sigs/cluster-api-provider-openstack/master/templates/env.rc -O /tmp/env.rc\nsource /tmp/env.rc <path/to/clouds.yaml> <cloud>\n```\n\n----------------------------------------\n\nTITLE: Example BeforeClusterCreate Request (YAML)\nDESCRIPTION: This YAML snippet shows an example request payload sent to a Runtime Extension for the `BeforeClusterCreate` hook. It includes the API version, kind, optional settings, and the full Cluster object definition. This hook is triggered after a Cluster object is created but before its topology objects (InfrastructureCluster, ControlPlane, MachineDeployments, templates) are created.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-lifecycle-hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: hooks.runtime.cluster.x-k8s.io/v1alpha1\nkind: BeforeClusterCreateRequest\nsettings: <Runtime Extension settings>\ncluster:\n  apiVersion: cluster.x-k8s.io/v1beta1\n  kind: Cluster\n  metadata:\n   name: test-cluster\n   namespace: test-ns\n  spec:\n   ...\n  status:\n   ...\n```\n\n----------------------------------------\n\nTITLE: Generating Slack Release Announcement for Cluster API\nDESCRIPTION: This template is used to create a Slack announcement for a new Cluster API release. It includes sections for release highlights and a link to the full changelog.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/release/release-templates.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# X.Y.Z Slack announcement example\n\n:tada: :tada: :tada: \n\nCluster API vX.Y.Z has been released :cluster-api:\n\nThis release was focused on improving existing features and stability of CAPI. \nThere were a total of A commits and B bugs fixed by our awesome contributors! Kudos!\n\n**Some of the hightlights in this release are**:\n- :sparkles: Some feature..\n\nFull list of changes: https://github.com/kubernetes-sigs/cluster-api/releases/tag/vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Expected Pod Conditions Output\nDESCRIPTION: Expected output showing pod conditions when the infrastructure provider is running correctly.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/building-running-and-testing.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nConditions:\n  Type              Status\n  Initialized       True\n  Ready             True\n  ContainersReady   True\n  PodScheduled      True\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Script Function Declaration\nDESCRIPTION: Shell script function declaration in kubeadm-bootstrap-script.sh for handling try-or-die commands in bootstrap process.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CHANGELOG/v1.9.0.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntry-or-die-command\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Arguments for Providers\nDESCRIPTION: Example of configuring extra arguments to pass to provider binaries, such as setting JSON log format for kubeadm-bootstrap.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nextra_args:\n  kubeadm-bootstrap:\n  - --logging-format=json\n```\n\n----------------------------------------\n\nTITLE: Example BeforeClusterDelete Response (YAML)\nDESCRIPTION: This YAML snippet illustrates an example response payload for the `BeforeClusterDelete` hook. It specifies the API version, kind, status (Success or Failure), an optional message, and an optional `retryAfterSeconds` field. A Failure status or retry request blocks the cluster deletion process.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-lifecycle-hooks.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: hooks.runtime.cluster.x-k8s.io/v1alpha1\nkind: BeforeClusterDeleteResponse\nstatus: Success # or Failure\nmessage: \"error message if status == Failure\"\nretryAfterSeconds: 10\n```\n\n----------------------------------------\n\nTITLE: Setting SELinux to Permissive Mode for BuildKit Compatibility (Bash)\nDESCRIPTION: Shows the command `sudo setenforce 0` which sets SELinux to permissive mode. This is recommended as a workaround when running E2E tests or building images on systems where SELinux is enabled in enforcing mode, as Moby BuildKit (used by Cluster API) has known compatibility issues with it.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/testing.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsudo setenforce 0\n```\n\n----------------------------------------\n\nTITLE: Initializing Harvester Infrastructure Provider\nDESCRIPTION: This command initializes a Kubernetes cluster as a Cluster API management cluster with Harvester as the infrastructure provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl init --infrastructure harvester-harvester\n```\n\n----------------------------------------\n\nTITLE: Defining MachineDeployment Status Structure in Golang\nDESCRIPTION: Golang struct definition for MachineDeploymentStatus that includes fields for tracking replica counts and conditions. Includes fields for ready, available, and up-to-date replicas with detailed comments explaining their purpose.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240916-improve-status-in-CAPI-resources.md#2025-04-22_snippet_5\n\nLANGUAGE: golang\nCODE:\n```\ntype MachineDeploymentStatus struct {\n\n    // The number of ready replicas for this MachineDeployment. A machine is considered ready when Machine's Ready condition is true.\n    // +optional\n    ReadyReplicas *int32 `json:\"readyReplicas,omitempty\"`\n\n    // The number of available replicas for this MachineDeployment. A machine is considered available when Machine's Available condition is true.\n    // +optional\n    AvailableReplicas *int32 `json:\"availableReplicas,omitempty\"`\n\n    // The number of up-to-date replicas targeted by this deployment. A machine is considered up-to-date when Machine's UpToDate condition is true.\n    // +optional\n    UpToDateReplicas *int32 `json:\"upToDateReplicas,omitempty\"`\n\n    // Represents the observations of a MachineDeployment's current state.\n    // +optional\n    // +listType=map\n    // +listMapKey=type\n    // +kubebuilder:validation:MaxItems=32\n    Conditions []metav1.Condition `json:\"conditions,omitempty\"`\n\n    // Other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Features in Tilt with kustomize_substitutions - YAML\nDESCRIPTION: This snippet illustrates how to set experimental feature gates for development environments managed with Tilt by specifying them using 'kustomize_substitutions' in YAML. Each feature gate is listed as a key-value pair, with 'true' enabling the feature. This is targeted at developers running local or development clusters with Tilt. Dependencies: Tilt and kustomize-based deployment stack. Input: the YAML dictionary under 'kustomize_substitutions'. Output: Cluster API components receive the feature gates when deployed. Limitation: Applies only to development environments started by Tilt.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/experimental-features.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkustomize_substitutions:\n  CLUSTER_TOPOLOGY: 'true'\n  EXP_RUNTIME_SDK: 'true'\n  EXP_MACHINE_SET_PREFLIGHT_CHECKS: 'true'\n```\n\n----------------------------------------\n\nTITLE: Specifying Node Labels and Taints via Annotations in YAML\nDESCRIPTION: Example of using annotations on a MachineSet or MachineDeployment to specify node labels and taints. This allows users to signal that nodes created from these resources will have specific labels or taints applied.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20210310-opt-in-autoscaling-from-zero.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkind: <MachineSet or MachineDeployment>\nmetadata:\n  annotations:\n    capacity.cluster-autoscaler.kubernetes.io/labels: \"key1=value1,key2=value2\"\n    capacity.cluster-autoscaler.kubernetes.io/taints: \"key1=value1:NoSchedule,key2=value2:NoExecute\"\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterSpec and ClusterAvailabilityGate in Golang for Kubernetes Cluster API\nDESCRIPTION: This code snippet defines the ClusterSpec and ClusterAvailabilityGate structs for the Kubernetes Cluster API. It introduces the AvailabilityGates field to allow third parties to extend the semantics of the Cluster's Available condition.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240916-improve-status-in-CAPI-resources.md#2025-04-22_snippet_7\n\nLANGUAGE: golang\nCODE:\n```\ntype ClusterSpec struct {\n    // AvailabilityGates specifies additional conditions to include when evaluating Cluster availability.\n    // A Cluster is available if:\n    // * Cluster's `RemoteConnectionProbe` and `TopologyReconciled` conditions are true and\n    // * the control plane `Available` condition is true and\n    // * all worker resource's `Available` conditions are true and\n    // * all conditions defined in AvailabilityGates are true as well.\n    // +optional\n    // +listType=map\n    // +listMapKey=conditionType\n    AvailabilityGates []ClusterAvailabilityGate `json:\"availabilityGates,omitempty\"`\n\n    // Other fields...\n}\n\n// ClusterAvailabilityGate contains the type of a Cluster condition to be used as availability gate.\ntype ClusterAvailabilityGate struct {\n    // ConditionType refers to a condition in the Cluster's condition list with matching type.\n    // Note: Both Cluster API conditions or conditions added by 3rd party controllers can be used as availability gates.\n    ConditionType string `json:\"conditionType\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GCPManagedControlPlaneSpec in Go for Option 2\nDESCRIPTION: This code snippet defines the GCPManagedControlPlaneSpec struct for Option 2, representing a GKE control plane. It contains properties specific to the managed Kubernetes control plane including project details, addons configuration, logging, and endpoint information.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220725-managed-kubernetes.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype GCPManagedControlPlaneSpec struct {\n    // Project is the name of the project to deploy the cluster to.\n    Project string `json:\"project\"`\n\n    // AddonsConfig defines the addons to enable with the GKE cluster.\n    // +optional\n    AddonsConfig *AddonsConfig `json:\"addonsConfig,omitempty\"`\n\n    // Logging contains the logging configuration for the GKE cluster.\n    // +optional\n    Logging *ControlPlaneLoggingSpec `json:\"logging,omitempty\"`\n\n    // EnableKubernetesAlpha will indicate the kubernetes alpha features are enabled\n    // +optional\n    EnableKubernetesAlpha bool\n\n    // ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.\n    // +optional\n    ControlPlaneEndpoint clusterv1.APIEndpoint `json:\"controlPlaneEndpoint\"`\n    ....\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Changes - Markdown List\nDESCRIPTION: Lists version changes for various dependencies including Google Cloud packages and GitHub repositories, showing the previous and new versions with comparison links where applicable.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/hack/tools/release/notes/test/golden/v1.5.0.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Changed\n- cloud.google.com/go/accessapproval: v1.5.0 → v1.6.0\n- cloud.google.com/go/accesscontextmanager: v1.4.0 → v1.7.0\n- cloud.google.com/go/aiplatform: v1.27.0 → v1.37.0\n[...additional entries truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Visualizing MachineDeployment External Update Flow in CAPI (Mermaid)\nDESCRIPTION: This Mermaid sequence diagram illustrates the external update process for a Cluster API MachineDeployment (MD). It shows the MD controller deciding the strategy, creating a new MachineSet, and then iterating through machines: marking them pending, updating their spec, moving them to the new set, invoking the Machine controller which runs external updaters, and finally marking the update as complete.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240807-in-place-updates.md#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\nparticipant Operator\n\nbox Management Cluster\n    participant apiserver as kube-api server\n    participant capi as MD controller\n    participant msc as MachineSet Controller\n    participant mach as Machine Controller\n    participant hook as External updater\nend\n\nOperator->>apiserver: make changes to MD\napiserver->>capi: Notify changes\napiserver->>Operator: OK\ncapi->>capi: Decide Update Strategy\ncapi->>apiserver: Create new MachineSet\nloop For all machines\n    capi->>apiserver: Mark as pending, update spec, and move to new Machine Set\n    apiserver->>mach: Notify changes\n    mach->>apiserver: Set UpToDate condition to False\n    loop For all updaters in plan\n        mach->>hook: Run updater\n    end\n    mach->>apiserver: Mark Hooks in Machine as Done\n    mach->>apiserver: Set UpToDate condition to True\nend\n```\n\n----------------------------------------\n\nTITLE: New Dependencies Added\nDESCRIPTION: List of new dependencies added to the project with their respective versions\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CHANGELOG/v1.9.0-beta.0.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ncel.dev/expr: v0.15.0\ndario.cat/mergo: v1.0.1\ngithub.com/antlr4-go/antlr/v4: v4.13.0\ngopkg.in/evanphx/json-patch.v4: v4.12.0\n```\n\n----------------------------------------\n\nTITLE: Initializing vSphere Management Cluster\nDESCRIPTION: Sets vSphere credentials as environment variables and initializes a Cluster API management cluster using the vSphere infrastructure provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\n# The username used to access the remote vSphere endpoint\nexport VSPHERE_USERNAME=\"vi-admin@vsphere.local\"\n# The password used to access the remote vSphere endpoint\n# You may want to set this in `$XDG_CONFIG_HOME/cluster-api/clusterctl.yaml` so your password is not in\n# bash history\nexport VSPHERE_PASSWORD=\"admin!23\"\n\n# Finally, initialize the management cluster\nclusterctl init --infrastructure vsphere\n```\n\n----------------------------------------\n\nTITLE: Example AfterClusterUpgrade Response (YAML)\nDESCRIPTION: This YAML snippet shows an example response payload for the `AfterClusterUpgrade` hook. It includes the API version, kind, status (Success or Failure), and an optional message. As a non-blocking hook, it doesn't support retries.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-lifecycle-hooks.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: hooks.runtime.cluster.x-k8s.io/v1alpha1\nkind: AfterClusterUpgradeResponse\nstatus: Success # or Failure\nmessage: \"error message if status == Failure\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Initialization Status in FooClusterStatus\nDESCRIPTION: Code for reporting infrastructure provisioning status. The FooClusterInitializationStatus is used to indicate when the infrastructure is fully provisioned, which is required for the Cluster API controller to proceed.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/infra-cluster.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype FooClusterStatus struct {\n    // initialization provides observations of the FooCluster initialization process.\n    // NOTE: Fields in this struct are part of the Cluster API contract and are used to orchestrate initial Cluster provisioning.\n    // +optional\n    Initialization *FooClusterInitializationStatus `json:\"initialization,omitempty\"`\n    \n    // See other rules for more details about mandatory/optional fields in InfraCluster status.\n    // Other fields SHOULD be added based on the needs of your provider.\n}\n\n// FooClusterInitializationStatus provides observations of the FooCluster initialization process.\ntype FooClusterInitializationStatus struct {\n\t// provisioned is true when the infrastructure provider reports that the Cluster's infrastructure is fully provisioned.\n\t// NOTE: this field is part of the Cluster API contract, and it is used to orchestrate initial Cluster provisioning.\n\t// +optional\n\tProvisioned bool `json:\"provisioned,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Spot VM Configuration Types\nDESCRIPTION: Golang type definitions for Azure Machine specification to support spot VMs. Includes SpotVMOptions struct for configuring maximum price for spot VMs.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200330-spot-instances.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype SpotVMOptions struct {\n  MaxPrice *string `json:\"maxPrice,omitempty\"`\n}\n\ntype AzureMachineSpec struct {\n  ...\n\n  SpotVMOptions *SpotVMOptions `json:\"spotVMOptions,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: InfraMachinePoolMachine Creation Example in Golang\nDESCRIPTION: Example code showing how to create an InfraMachinePoolMachine resource with proper labels and owner references.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220209-machinepool-machines.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\ninfraMachinePoolMachine := &infrav1.InfraMachinePoolMachine{\n\tObjectMeta: metav1.ObjectMeta{\n\t\tNamespace:   infraMachinePool.Namespace,\n\t\tName:        // ...,\n\t\tLabels:      map[string]string{\n\t\t\tclusterv1.ClusterNameLabel:     cluster.Name,\n\t\t\tclusterv1.MachinePoolNameLabel: format.MustFormatValue(machinePool.Name),\n\t\t},\n\t\tAnnotations: make(map[string]string),\n\t\tOwnerReferences: []metav1.OwnerReference{\n\t\t\t{\n\t\t\t\tAPIVersion: infraMachinePool.APIVersion,\n\t\t\t\tKind:       infraMachinePool.Kind,\n\t\t\t\tName:       infraMachinePool.Name,\n\t\t\t\tUID:        infraMachinePool.UID,\n\t\t\t},\n\t\t},\n\t},\n\tSpec: infrav1.DockerMachineSpec{\n\t\t// ...\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing K0smotron Infrastructure Provider\nDESCRIPTION: This command initializes a Kubernetes cluster as a Cluster API management cluster with K0smotron as the infrastructure provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize the management cluster\nclusterctl init --infrastructure k0sproject-k0smotron\n```\n\n----------------------------------------\n\nTITLE: Overriding Container Image for AWS Infrastructure Provider in YAML\nDESCRIPTION: This example shows how to install the AWS infrastructure provider while overriding the default container image. It specifies a custom container image location while maintaining the standard provider configuration.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20201020-capi-provider-operator.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: management.cluster.x-k8s.io/v1alpha1\nkind: InfrastructureProvider\nmetadata:\n name: aws\n namespace: capa-system\nspec:\n version: v0.6.0\n secretName: aws-variables\n deployment:\n   containers:\n   - name: manager\n     image: gcr.io/myregistry/capa-controller:v0.6.0-foo\n```\n\n----------------------------------------\n\nTITLE: Building clusterctl from Source\nDESCRIPTION: Command to build the clusterctl binary from the root of the local Cluster API repository. The output is saved in the bin/ folder.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/developers.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake clusterctl\n```\n\n----------------------------------------\n\nTITLE: Preparing Prerequisites for IDE E2E Testing (Bash)\nDESCRIPTION: Describes the initial step to prepare for running E2E tests within an IDE by executing the `ci-e2e.sh` script. This ensures all required images (including kind images) are built. The script can be cancelled once it starts the actual test execution (`make test-e2e`). Environment variables like `GINKGO_LABEL_FILTER` should be set according to the desired test suite (e.g., `PR-Blocking`).\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/testing.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Notes:\n# * You can cancel the script as soon as it starts the actual test execution via `make test-e2e`.\n# * If you want to run other tests (e.g. upgrade tests), make sure all required env variables are set (see the Prow Job config).\nGINKGO_LABEL_FILTER=\"PR-Blocking\" ./scripts/ci-e2e.sh\n```\n\n----------------------------------------\n\nTITLE: Defining MachineInitializationStatus in Cluster API\nDESCRIPTION: This snippet declares the MachineInitializationStatus struct used in the Cluster API to track the initialization stages of a machine. It includes fields indicating when bootstrap data secrets and infrastructure are ready. It requires dependencies on Kubernetes metav1 libraries, ensuring smooth provisioning by using state fields.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240916-improve-status-in-CAPI-resources.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\ntype MachineInitializationStatus struct {\n\n    // BootstrapDataSecretCreated is true when the bootstrap provider reports that the Machine's boostrap secret is created.\n    // NOTE: this field is part of the Cluster API contract, and it is used to orchestrate initial Machine provisioning.\n    // The value of this field is never updated after provisioning is completed.\n    // Use conditions to monitor the operational state of the Machine's BootstrapSecret.\n    // +optional\n    BootstrapDataSecretCreated bool `json:\"bootstrapDataSecretCreated\"`\n    \n    // InfrastructureProvisioned is true when the infrastructure provider reports that the Machine's infrastructure is fully provisioned.\n    // NOTE: this field is part of the Cluster API contract, and it is used to orchestrate initial Machine provisioning.\n    // The value of this field is never updated after provisioning is completed.\n    // Use conditions to monitor the operational state of the Machine's infrastructure.\n    // +optional\n    InfrastructureProvisioned bool `json:\"infrastructureProvisioned\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Overrides Folder in YAML\nDESCRIPTION: This YAML snippet shows how to specify a custom location for the overrides directory in the clusterctl configuration file.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\noverridesFolder: /Users/foobar/workspace/dev-releases\n```\n\n----------------------------------------\n\nTITLE: Machine Phase Running Definition\nDESCRIPTION: Defines the running state when Machine has become a Ready Kubernetes Node.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20190610-machine-states-preboot-bootstrapping.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// MachinePhaseRunning is the Machine state when it has\n// become a Kubernetes Node in a Ready state.\nMachinePhaseRunning = MachinePhaseType(\"running\")\n```\n\n----------------------------------------\n\nTITLE: Creating CloudStack Configuration File for Cluster API\nDESCRIPTION: Creates a cloud-config file for CloudStack with API credentials that will be used by the CloudStack infrastructure provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n[Global]\napi-url = <cloudstackApiUrl>\napi-key = <cloudstackApiKey>\nsecret-key = <cloudstackSecretKey>\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Committing API Type Changes\nDESCRIPTION: Shell commands to commit the changes to the API types after implementation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/implement-api-types.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"Added cluster types\"\n```\n\n----------------------------------------\n\nTITLE: Initializing ClusterCache in Go\nDESCRIPTION: Example of initializing the new ClusterCache component, which replaces the deprecated ClusterCacheTracker. The DisabledFor option must be explicitly set to avoid caching ConfigMaps and Secrets.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CHANGELOG/v1.9.0-beta.1.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncache, err := clustercache.New(ctx, client, clustercache.Options{\n    SecretClient: secretClient,\n    UserAgent:    \"my-controller\",\n    DisabledFor:  []client.Object{&corev1.ConfigMap{}, &corev1.Secret{}},\n})\n```\n\n----------------------------------------\n\nTITLE: Listing Required OpenStack Environment Variables with Clusterctl\nDESCRIPTION: Command to list all required OpenStack environment variables needed for cluster creation using the clusterctl tool.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl generate cluster --infrastructure openstack --list-variables capi-quickstart\n```\n\n----------------------------------------\n\nTITLE: Running Linting Checks\nDESCRIPTION: Command to run linting checks on the Cluster API codebase, ensuring code quality and adherence to project standards.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/CONTRIBUTING.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncd cluster-api\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode Syntax Highlighting for Tiltfile (json)\nDESCRIPTION: This JSON snippet shows how to configure the `files.associations` setting in VSCode. By associating the `Tiltfile` filename pattern with the `starlark` language identifier (used by the Bazel extension), developers get syntax highlighting and auto-formatting for Tiltfiles within the editor.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n\"files.associations\": {\n  \"Tiltfile\": \"starlark\",\n},\n```\n\n----------------------------------------\n\nTITLE: Initializing Vultr Management Cluster\nDESCRIPTION: Encodes the Vultr API key and initializes a Cluster API management cluster using the Vultr infrastructure provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\nexport VULTR_API_KEY=\"$(echo -n \"${VULTR_API_KEY}\" | base64 | tr -d '\\n')\"\n\n# initialize the management cluster\nclusterctl init --infrastructure vultr-vultr\n```\n\n----------------------------------------\n\nTITLE: Example AfterControlPlaneInitialized Request (YAML)\nDESCRIPTION: This YAML snippet demonstrates an example request payload for the `AfterControlPlaneInitialized` hook. It contains the API version, kind, optional settings, and the Cluster object. This non-blocking hook is invoked after the Cluster's Control Plane is marked as available for the first time, allowing extensions to perform tasks like component installation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-lifecycle-hooks.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: hooks.runtime.cluster.x-k8s.io/v1alpha1\nkind: AfterControlPlaneInitializedRequest\nsettings: <Runtime Extension settings>\ncluster:\n  apiVersion: cluster.x-k8s.io/v1beta1\n  kind: Cluster\n  metadata:\n   name: test-cluster\n   namespace: test-ns\n  spec:\n   ...\n  status:\n   ...\n```\n\n----------------------------------------\n\nTITLE: Creating clusterctl-settings.json Configuration\nDESCRIPTION: Example of a clusterctl-settings.json file used to specify providers and their repositories for local development.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/developers.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  \"providers\": [\"cluster-api\",\"bootstrap-kubeadm\",\"control-plane-kubeadm\", \"infrastructure-aws\", \"infrastructure-docker\"],\n  \"provider_repos\": [\"../cluster-api-provider-aws\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Editing Controller Manager Deployments for Feature Gates - Plaintext\nDESCRIPTION: This snippet shows how to edit the Kubernetes deployment for the CAPI controller manager (or similar controller managers) using kubectl. The command opens the deployment manifest in your default editor, allowing manual adjustment of the '--feature-gates' argument. Dependencies: kubectl installed and access to management cluster. Parameter: namespace and deployment name. Input: Command to launch an editing session of the deployment spec. Output: Controller manager restarts with newly set feature gates. Limitation: Improper changes may cause controller misconfiguration.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/experimental-features.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nkubectl edit -n capi-system deployment.apps/capi-controller-manager\n```\n\n----------------------------------------\n\nTITLE: Defining FooMachine Resource in Cluster API Go\nDESCRIPTION: This snippet provides a Go implementation for defining a custom InfraMachine resource, FooMachine, which conforms to Cluster API conventions. It outlines the structure of the resource, including metadata, specifications, and status fields. Dependencies include 'metav1' for metadata management.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/infra-machine.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:object:root=true\n// +kubebuilder:resource:path=foomachines,shortName=foom,scope=Namespaced,categories=cluster-api\n// +kubebuilder:storageversion\n// +kubebuilder:subresource:status\n\n// FooMachine is the Schema for foomachines.\ntype FooMachine struct {\n    metav1.TypeMeta `json:\",inline\"`\n\tmetav1.ObjectMeta `json:\"metadata,omitempty\"`\n    Spec FooMachineSpec `json:\"spec,omitempty\"`\n    Status FooMachineStatus `json:\"status,omitempty\"`\n}\n\ntype FooMachineSpec struct {\n    // See other rules for more details about mandatory/optional fields in InfraMachine spec.\n    // Other fields SHOULD be added based on the needs of your provider.\n}\n\ntype FooMachineStatus struct {\n    // See other rules for more details about mandatory/optional fields in InfraMachine status.\n    // Other fields SHOULD be added based on the needs of your provider.\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to a clusterctl Plugin\nDESCRIPTION: Example showing how to pass arguments to a plugin. This command passes the 'version' argument to the foo plugin which returns its version number.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/plugins.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl foo version\n```\n\n----------------------------------------\n\nTITLE: Configuring IBM Cloud Environment Variables for Cluster API\nDESCRIPTION: Environment variables setup for creating Kubernetes clusters on IBM Cloud VPC and PowerVS using Cluster API. Includes region, zone, resource group, and network configurations.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\nexport IBMVPC_REGION=us-south\nexport IBMVPC_ZONE=us-south-1\nexport IBMVPC_RESOURCEGROUP=<your-resource-group-id>\nexport IBMVPC_NAME=ibm-vpc-0\nexport IBMVPC_IMAGE_ID=<you-image-id>\nexport IBMVPC_PROFILE=bx2-4x16\nexport IBMVPC_SSHKEY_ID=<your-sshkey-id>\nexport IBMPOWERVS_SSHKEY_NAME=<your-ssh-key>\nexport IBMPOWERVS_VIP=<internal-ip>\nexport IBMPOWERVS_VIP_EXTERNAL=<external-ip>\nexport IBMPOWERVS_VIP_CIDR=29\nexport IBMPOWERVS_IMAGE_NAME=<your-capi-image-name>\nexport IBMPOWERVS_SERVICE_INSTANCE_ID=<service-instance-id>\nexport IBMPOWERVS_NETWORK_NAME=<your-capi-network-name>\n```\n\n----------------------------------------\n\nTITLE: Running Specific Kubernetes Version E2E Tests\nDESCRIPTION: Command to run end-to-end tests for Cluster API with a specific Kubernetes version (v1.19.7). This tests the actual functionality in a real environment.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd cluster-api\nKUBERNETES_VERSION=v1.19.7 make test-e2e\n```\n\n----------------------------------------\n\nTITLE: Configuring Secrets and ConfigMaps in Kubernetes\nDESCRIPTION: This snippet sets up Kubernetes Secrets and ConfigMaps for storing environment variables used by Kubernetes controllers. It provides a mechanism to pull Mailgun API details into Kubernetes as environment variables.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/configure-the-deployment.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mailgun-config\n  namespace: system\ntype: Opaque\nstringData:\n  api_key: ${MAILGUN_API_KEY}\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mailgun-config\n  namespace: system\ndata:\n  mailgun_domain: ${MAILGUN_DOMAIN}\n  mail_recipient: ${MAILGUN_RECIPIENT}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Tinkerbell IP Environment Variable\nDESCRIPTION: Sets the Tinkerbell IP environment variable required for Tinkerbell infrastructure provider integration.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\nexport TINKERBELL_IP=<hegel ip>\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies with Make Target\nDESCRIPTION: Command using a Make target to install all development dependencies for the Cluster API project at once, simplifying the setup process.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/CONTRIBUTING.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncd cluster-api\nmake install-tools\n```\n\n----------------------------------------\n\nTITLE: Enhanced MailgunClusterReconciler Configuration with Environment Variables\nDESCRIPTION: Extended initialization of the MailgunClusterReconciler including Mailgun configuration from environment variables (MAILGUN_DOMAIN, MAILGUN_API_KEY, MAIL_RECIPIENT) and error handling.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/controllers-and-reconciliation.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n    domain := os.Getenv(\"MAILGUN_DOMAIN\")\n    if domain == \"\" {\n        setupLog.Info(\"missing required env MAILGUN_DOMAIN\")\n        os.Exit(1)\n    }\n    \n    apiKey := os.Getenv(\"MAILGUN_API_KEY\")\n    if apiKey == \"\" {\n        setupLog.Info(\"missing required env MAILGUN_API_KEY\")\n        os.Exit(1)\n    }\n    \n    recipient := os.Getenv(\"MAIL_RECIPIENT\")\n    if recipient == \"\" {\n        setupLog.Info(\"missing required env MAIL_RECIPIENT\")\n        os.Exit(1)\n    }\n    \n    mg := mailgun.NewMailgun(domain, apiKey)\n    \n    if err = (&controllers.MailgunClusterReconciler{\n        Client:    mgr.GetClient(),\n        Log:       ctrl.Log.WithName(\"controllers\").WithName(\"MailgunCluster\"),\n        Mailgun:   mg,\n        Recipient: recipient,\n    }).SetupWithManager(mgr); err != nil {\n        setupLog.Error(err, \"Unable to create controller\", \"controller\", \"MailgunCluster\")\n        os.Exit(1)\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining MachinePool Spec Structure in Go\nDESCRIPTION: Defines the core specification structure for MachinePool resources, containing fields for cluster name, failure domains, replicas, and machine template configuration.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20190919-machinepool-api.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype MachinePoolSpec struct\n```\n\n----------------------------------------\n\nTITLE: Defining an InClusterIPPool in YAML for Cluster API IPAM\nDESCRIPTION: This snippet shows an example of a simple IP Pool resource for an in-cluster IPAM provider. It defines a subnet and an IP range to allocate addresses from.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220125-ipam-integration.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ipam.cluster.x-k8s.io/v1alpha1\nkind: InClusterIPPool\nmetadata:\n  name: some-pool\nspec:\n  pools:\n    - subnet: 10.10.10.0/24\n      start: 10.10.10.100\n      end: 10.10.10.200\n```\n\n----------------------------------------\n\nTITLE: Configuring Harvester Environment Variables for Cluster API\nDESCRIPTION: Environment variables setup for creating Kubernetes clusters on Harvester using Cluster API. Includes configurations for cluster name, machine counts, network settings, and VM specifications.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\nexport CLOUD_CONFIG_KUBECONFIG_B64=\"\"\nexport CLUSTER_NAME=\"<CLUSTER_NAME>\"\nexport CONTROL_PLANE_MACHINE_COUNT=3\nexport HARVESTER_ENDPOINT=\"\"\nexport HARVESTER_KUBECONFIG_B64=\"<HARVESTER_KUBECONFIG_ENCODED_IN_BASE64>\"\nexport NAMESPACE=\"test\"\nexport POD_CIDR=\"10.42.0.0/16\"\nexport SERVICE_CIDR=\"10.43.0.0/16\"\nexport SSH_KEYPAIR=\"default/ssk-key-pair\"\nexport TARGET_HARVESTER_NAMESPACE=\"default\"\nexport VM_DISK_SIZE=\"50Gi\"\nexport VM_IMAGE_NAME=\"default/jammy-server\"\nexport VM_NETWORK=\"default/untagged\"\nexport VM_SSH_USER=\"ubuntu\"\nexport WORKER_MACHINE_COUNT=2\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Directories in YAML\nDESCRIPTION: Example configuration for template_dirs field in tilt-settings.yaml, mapping providers to directories containing cluster templates.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate_dirs:\n  docker:\n  - ./test/infrastructure/docker/templates\n  - <other-template-dir>\n  azure:\n  - <azure-template-dir>\n  aws:\n  - <aws-template-dir>\n  gcp:\n  - <gcp-template-dir>\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON Logs with Human-Readable Timestamps using jq (Bash)\nDESCRIPTION: Provides a bash command pipeline using `cat`, `grep`, and `jq` to process a JSON log file (`manager.log`). It first filters out lines containing \"TLS handshake error\" and then uses `jq` to transform each JSON log line, prepending a human-readable ISO 8601 timestamp (derived from the original `.ts` field) to the string representation of the entire log entry.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/testing.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncat manager.log \\\n | grep -v \"TLS handshake error\" \\\n | jq -r '(.ts / 1000 | todateiso8601) + \" \" + (. | tostring)'\n```\n\n----------------------------------------\n\nTITLE: Running all Cluster API tests\nDESCRIPTION: Make command to execute all unit and integration tests for Cluster API. This installs needed executables and passes their location to tests as environment variables.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/testing.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Implementing FooControlPlaneList in Go\nDESCRIPTION: Implementation of the corresponding list resource for FooControlPlane. As required by the convention, the list resource is named as '<ControlPlane>List' and contains a list of FooControlPlane items.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/control-plane.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:object:root=true\n\n// FooControlPlaneList contains a list of foocontrolplanes.\ntype FooControlPlaneList struct {\n    metav1.TypeMeta `json:\",inline\"`\n    metav1.ListMeta `json:\"metadata,omitempty\"`\n    Items           []FooControlPlane `json:\"items\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Download clusterctl for Linux (PPC64LE) (Bash)\nDESCRIPTION: Downloads the `clusterctl` binary specifically compiled for Linux PPC64LE architectures using `curl`. The URL uses a template helper `{{#releaselink ...}}` to fetch the correct asset for version 1.9.x.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L {{#releaselink repo:\"https://github.com/kubernetes-sigs/cluster-api\" gomodule:\"sigs.k8s.io/cluster-api\" asset:\"clusterctl-linux-ppc64le\" version:\"1.9.x\"}} -o clusterctl\n```\n\n----------------------------------------\n\nTITLE: Installing Conversion-Gen for Cluster API Development\nDESCRIPTION: Command to install Conversion-Gen, a tool required for generating conversion functions between different API versions in Kubernetes projects like Cluster API.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd cluster-api\nmake conversion-gen\n```\n\n----------------------------------------\n\nTITLE: Promoting Images to Production Registry using Bash\nDESCRIPTION: This snippet demonstrates the steps to promote images from the staging repository to the production registry in Kubernetes Cluster API using bash commands. It includes setting environment variables such as the release tag and GitHub token, and the use of Makefile targets for promotion. Prerequisites include a fork of the required repository and configured GitHub SSH or HTTPS setup.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/release/role-handbooks/release-lead/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Export the tag of the release to be cut, e.g.:\nexport RELEASE_TAG=v1.0.1\nexport GITHUB_TOKEN=<your GH token>\nmake promote-images\n```\n\n----------------------------------------\n\nTITLE: Label Kubernetes Nodes Post Bootstrap\nDESCRIPTION: This snippet provides commands to label Kubernetes nodes with roles after the bootstrap process has completed, bypassing default restrictions. Dependencies include a running Kubernetes cluster and 'kubectl'. It labels nodes as 'worker' for Kubernetes versions 1.19 and later, avoiding 'node-role' restrictions during bootstrap.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/troubleshooting.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl label nodes <name> node-role.kubernetes.io/worker=\"\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Kubernetes 1.19 (kubeadm 1.19 sets only the node-role.kubernetes.io/master label)\nkubectl get nodes --no-headers -l '!node-role.kubernetes.io/master' -o jsonpath='{range .items[*]}{.metadata.name}{\"\\n\"}' | xargs -I{} kubectl label node {} node-role.kubernetes.io/worker=''\n# Kubernetes >= 1.20 (kubeadm >= 1.20 sets the node-role.kubernetes.io/control-plane label)\nkubectl get nodes --no-headers -l '!node-role.kubernetes.io/control-plane' -o jsonpath='{range .items[*]}{.metadata.name}{\"\\n\"}' | xargs -I{} kubectl label node {} node-role.kubernetes.io/worker=''\n```\n\n----------------------------------------\n\nTITLE: Implementing Replicas Fields in ControlPlane Spec for Cluster API\nDESCRIPTION: Required fields to implement in the ControlPlane spec for controlling the number of replicas of Kubernetes control plane instances. The Replicas field is a pointer to distinguish between explicit zero and not specified.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/control-plane.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype FooControlPlaneSpec struct {\n    // replicas represent the number of desired replicas.\n    // This is a pointer to distinguish between explicit zero and not specified.\n    // +optional\n    Replicas *int32 `json:\"replicas,omitempty\"`\n    \n    // See other rules for more details about mandatory/optional fields in ControlPlane spec.\n    // Other fields SHOULD be added based on the needs of your provider.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Etcd Data Disk with Cloud-Init\nDESCRIPTION: This cloud-init configuration sets up an etcd data disk. It includes disk partitioning, filesystem creation, and mounting instructions for /var/lib/etcd.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200423-etcd-data-disk.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndisk_setup:\n /dev/sdc:\n   table_type: gpt\n   layout: true\n   overwrite: false\n\nfs_setup:\n- label: etcd_disk\n filesystem: ext4\n device: /dev/sdc1\n extra_opts:\n   - \"-F\"\n   - \"-E\"\n   - \"lazy_itable_init=1,lazy_journal_init=1\"\n\nmounts:\n- - /dev/sdc1\n - /var/lib/etcd\n```\n\n----------------------------------------\n\nTITLE: Defining MachineHealthCheck Target Struct in Go\nDESCRIPTION: Definition of a 'target' struct used in the MachineHealthCheck controller to represent a machine, its associated node, and the MachineHealthCheck resource. This structure is used for processing and remediation decisions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20191030-machine-health-checking.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype target struct {\n  Machine capi.Machine\n  Node    *corev1.Node\n  MHC     capi.MachineHealthCheck\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MachinePool Status Structure in Go\nDESCRIPTION: Defines the status structure for MachinePool resources, tracking node references, replica counts, and operational state information.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20190919-machinepool-api.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype MachinePoolStatus struct\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubeconfig with Namespace Specification in Bash\nDESCRIPTION: Example showing how to get the kubeconfig of a workload cluster named 'foo' in a specific namespace 'bar'. This is useful when clusters are deployed across different namespaces.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/get-kubeconfig.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl get kubeconfig foo --namespace bar\n```\n\n----------------------------------------\n\nTITLE: DigitalOcean Credentials Configuration\nDESCRIPTION: Example of configuring DigitalOcean credentials in kustomize_substitutions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nkustomize_substitutions:\n  DO_B64ENCODED_CREDENTIALS: \"your credentials here\"\n```\n\n----------------------------------------\n\nTITLE: KubeadmConfig Example with Verbosity Setting\nDESCRIPTION: This snippet shows how to set the kubeadm log level verbosity using the Verbosity field in KubeadmConfig.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/kubeadm-bootstrap/index.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nverbosity: 10\n```\n\n----------------------------------------\n\nTITLE: ExtensionConfig Status Update in YAML\nDESCRIPTION: This YAML snippet shows the status update of an ExtensionConfig after the discovery hook is called. It includes details of supported Runtime Extensions, such as unique names, API versions, and failure policies.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220221-runtime-SDK.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: runtime.cluster.x-k8s.io/v1alpha1\nkind: ExtensionConfig\nmetadata:\n  name: \"my-amazing-extensions\"\nspec:\n  ...\nstatus:\n  handlers: ## Details of supported Runtime Extensions\n  - name: \"http-proxy.my-amazing-extensions\" # unique name, computed\n    requestHook:\n      apiVersion: \"hook.runtime.cluster.x-k8s.io/v1alpha1\"\n      hook: \"generatePatches\"\n    timeoutSeconds: 5 # Timeout to be used when calling the extension. Max timeout allowed 10s.   \n    failurePolicy: Fail # FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.\n  - ...\n  conditions:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining IPAddress struct in Go for Cluster API IPAM\nDESCRIPTION: This Go code defines the IPAddress struct, which represents an allocated IP address. It includes the specification fields for the resource.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220125-ipam-integration.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// IPAddressSpec describes an IPAddress\ntype IPAddressSpec struct {\n  // Claim is a reference to the claim this IPAddress was created for.\n  Claim LocalObjectReference `json:\"claim,omitempty\"`\n \n  // Pool is a reference to the pool that this IPAddress was created from.\n  Pool LocalObjectReference `json:\"pool,omitempty\"`\n \n  // Address is the IP address.\n  Address string `json:\"address\"`\n \n  // Prefix is the prefix of the address.\n  Prefix int `json:\"prefix,omitempty\"`\n \n  // Gateway is the network gateway of network the address is from.\n  Gateway string `json:\"gateway,omitempty\"`\n}\n \n// IPAddress is a representation of an IP Address that was allocated from an IP Pool.\ntype IPAddress struct {\n  metav1.TypeMeta   `json:\",inline\"`\n  metav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n  Spec IPAddressSpec `json:\"spec,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Running clusterctl init with specific provider versions\nDESCRIPTION: Command to initialize clusterctl with pinned versions of Kubernetes Cluster API providers to avoid conflicts with image overrides.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/troubleshooting.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl init -b kubeadm:v1.0.2 -c kubeadm:v1.0.2 --core cluster-api:v1.0.2 -i docker:v1.0.2\n```\n\n----------------------------------------\n\nTITLE: Multi-part MIME Document Usage in CAPA\nDESCRIPTION: Example of using multi-part MIME documents for Kubeadm bootstrap token in Cluster API Provider for AWS (CAPA).\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200804-windows-support.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[Linux in CAPA](https://github.com/kubernetes-sigs/cluster-api-provider-aws/blob/28d01d064cc2e5b0286ae23b3be7203f18b00447/controllers/awsmachine_controller.go#L601)\n```\n\n----------------------------------------\n\nTITLE: Implementing Machine Readiness Gates in Control Plane Spec\nDESCRIPTION: Extends the control plane machine template to include readiness gates, allowing for custom conditions to be evaluated when determining machine readiness. This is useful for providers that need to extend the semantic of the Ready condition.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/control-plane.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ntype FooControlPlaneMachineTemplate struct {\n    ReadinessGates []clusterv1.MachineReadinessGate `json:\"readinessGates,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Specific Cluster API Components in Bash\nDESCRIPTION: This command demonstrates how to upgrade specific Cluster API components to explicit versions. It upgrades the core cluster-api and docker infrastructure provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/upgrade.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl upgrade apply \\\n    --core cluster-api:v1.2.4 \\\n    --infrastructure docker:v1.2.4\n```\n\n----------------------------------------\n\nTITLE: Defining Azure DataDisk Structure in Go\nDESCRIPTION: Golang struct definition for Azure-specific data disk configuration, including disk size and logical unit number specifications.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200423-etcd-data-disk.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype DataDisk struct {\n  // NameSuffix is the suffix to be appended to the machine name to generate the disk name.\n  // Each disk name will be in format <machineName>_<nameSuffix>.\n  NameSuffix string `json:\"nameSuffix\"`\n  // DiskSizeGB is the size in GB to assign to the data disk.\n  DiskSizeGB int32 `json:\"diskSizeGB\"`\n  // Lun Specifies the logical unit number of the data disk.\n  Lun int32 `json:\"lun\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Download clusterctl for macOS (ARM64) (Bash)\nDESCRIPTION: Downloads the `clusterctl` binary specifically compiled for macOS ARM64 (Apple Silicon/M1/M2) architectures using `curl`. The URL uses a template helper `{{#releaselink ...}}` to fetch the correct asset for version 1.9.x.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L {{#releaselink repo:\"https://github.com/kubernetes-sigs/cluster-api\" gomodule:\"sigs.k8s.io/cluster-api\" asset:\"clusterctl-darwin-arm64\" version:\"1.9.x\"}} -o clusterctl\n```\n\n----------------------------------------\n\nTITLE: Defining MachinePool Running Phase Constant\nDESCRIPTION: Defines the constant for the Running phase, indicating the MachinePool has become a set of ready Kubernetes Nodes.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20190919-machinepool-api.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// MachinePoolPhaseRunning is the MachinePool state when it has\n// become a set of Kubernetes Nodes in a Ready state.\nMachinePoolPhaseRunning = MachinePoolPhase(\"running\")\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Golang Dependencies\nDESCRIPTION: Commands to install specific Go tools required for Cluster API development, including linters and test frameworks using go install.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/CONTRIBUTING.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncd cluster-api\ngo install sigs.k8s.io/controller-tools/cmd/controller-gen@v0.8.0\ngo install sigs.k8s.io/kustomize/kustomize/v4@v4.5.2\n```\n\n----------------------------------------\n\nTITLE: Implementing FooClusterList for Cluster API\nDESCRIPTION: Definition of the required list resource type for InfraCluster. Every InfraCluster resource must have a corresponding list type named with the pattern <InfraCluster>List.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/infra-cluster.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:object:root=true\n\n// FooClusterList contains a list of fooclusters.\ntype FooClusterList struct {\n    metav1.TypeMeta `json:\",inline\"`\n    metav1.ListMeta `json:\"metadata,omitempty\"`\n    Items           []FooCluster `json:\"items\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Kubelet Flags via KubeadmControlPlaneTemplate\nDESCRIPTION: This example shows how to configure kubelet settings directly through command-line flags using KubeadmConfigSpec.kubeletExtraArgs. It sets resource reservations and eviction thresholds for control plane nodes.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/kubeadm-bootstrap/kubelet-config.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: controlplane.cluster.x-k8s.io/v1beta1\nkind: KubeadmControlPlaneTemplate\nmetadata:\n  name: kubelet-extra-args-control-plane\n  namespace: default\nspec:\n  template:\n    spec:\n      kubeadmConfigSpec:\n        initConfiguration:\n          nodeRegistration:\n            criSocket: unix:///var/run/containerd/containerd.sock\n            # Set kubelet flags via KubeadmConfigSpec.kubeletExtraArgs\n            kubeletExtraArgs:\n              kube-reserved: cpu=1,memory=2Gi,ephemeral-storage=1Gi\n              system-reserved: cpu=500m,memory=1Gi,ephemeral-storage=1Gi\n              eviction-hard: memory.available<500Mi,nodefs.available<10%\n        joinConfiguration:\n          nodeRegistration:\n            criSocket: unix:///var/run/containerd/containerd.sock\n            # Set kubelet flags via KubeadmConfigSpec.kubeletExtraArgs\n            kubeletExtraArgs:\n              kube-reserved: cpu=1,memory=2Gi,ephemeral-storage=1Gi\n              system-reserved: cpu=500m,memory=1Gi,ephemeral-storage=1Gi\n              eviction-hard: memory.available<500Mi,nodefs.available<10%\n```\n\n----------------------------------------\n\nTITLE: Setting Custom MetalLB IP Prefix for KubeVirt\nDESCRIPTION: Command to manually specify the container runtime IP prefix for MetalLB when using KubeVirt with a non-Docker runtime.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport CAPI_METALLB_IP_PREFIX=\"172.20\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Runtime Extensions in Cluster API with Go\nDESCRIPTION: This code snippet illustrates how to invoke registered runtime extensions during the cluster creation phase in Go. By creating hook request and response structures, the code demonstrates calling all extensions with 'CallAllExtensions', which ensures that both new and older versions of extensions are addressed. Key parameters include 'BeforeClusterCreateRequest' and 'BeforeClusterCreateResponse'. The snippet relies on 'runtimehooksv1' for request/response types and emphasizes ensuring compatibility and version handling.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220221-runtime-SDK.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n\t// Call BeforeClusterCreate Runtime Extensions.\n\thookRequest := &runtimehooksv1.BeforeClusterCreateRequest{\n\t\tCluster: *s.Current.Cluster,\n\t}\n\thookResponse := &runtimehooksv1.BeforeClusterCreateResponse{}\n\tif err := r.RuntimeClient.CallAllExtensions(ctx, runtimehooksv1.BeforeClusterCreate, s.Current.Cluster, hookRequest, hookResponse); err != nil {\n\t\treturn ctrl.Result{}, err\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram of KCP Version Update Process\nDESCRIPTION: Mermaid sequence diagram showing the interaction flow between operators, controllers, and extensions during a KCP version update.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240807-in-place-updates.md#2025-04-22_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Operator\n\n    box Management Cluster\n        participant apiserver as kube-api server\n        participant capi as KCP Controller\n        participant mach as Machine Controller\n        participant hook as KCP version <br>update extension\n        participant hook2 as vSphere memory <br>update extension\n    end\n    \n    box Workload Cluster\n        participant machines as Agent in machine\n    end    \n\n    Operator->>+apiserver: Update version field in KCP\n    apiserver->>+capi: Notify changes\n    apiserver->>-Operator: OK\n    loop For 3 KCP Machines\n        capi->>+hook2: Can update [spec.version,<br>clusterConfiguration.kubernetesVersion]?\n        hook2->>capi: I can update []\n        capi->>+hook: Can update [spec.version,<br>clusterConfiguration.kubernetesVersion]?\n        hook->>capi: I can update [spec.version,<br>clusterConfiguration.kubernetesVersion]\n        capi->>capi: Decide Update Strategy\n        capi->>apiserver: Mark Machine as pending, update spec\n        apiserver->>mach: Notify changes\n        mach->>apiserver: Set UpToDate condition to False\n        apiserver->>mach: Notify changes\n        mach->>hook2: Run update in<br> in Machine\n        hook2->>mach: Done\n        mach->>hook: Run update in<br> in Machine\n        hook->>mach: In progress, requeue in 5 min\n        hook->>machines: Update packages and<br>run kubeadm upgrade 1.31\n        machines->>hook: Done\n        mach->>hook2: Run update in<br> in Machine\n        hook2->>mach: Done\n        mach->>hook: Run update in<br> in Machine\n        hook->>mach: Done\n        mach->>apiserver: Mark Hooks in Machine as Done\n        mach->>apiserver: Set UpToDate condition\n    end\n```\n\n----------------------------------------\n\nTITLE: Reporting Control Plane Initialization Status in Go\nDESCRIPTION: Defines the structure for reporting the initialization status of a control plane. Includes a boolean field to indicate when the control plane is initialized and ready to accept requests.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/control-plane.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ntype FooControlPlaneStatus struct {\n    Initialization *FooControlPlaneInitializationStatus `json:\"initialization,omitempty\"`\n}\n\ntype FooControlPlaneInitializationStatus struct {\n\tControlPlaneInitialized bool `json:\"controlPlaneInitialized,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining External Management Annotation in YAML\nDESCRIPTION: Example of using the proposed annotation to mark a resource as externally managed. The annotation 'cluster.x-k8s.io/managed-by' is used with a value indicating the external management system.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20210203-externally-managed-cluster-infrastructure.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  annotations:\n    cluster.x-k8s.io/managed-by: \"<name-of-system>\"\n```\n\n----------------------------------------\n\nTITLE: Machine Phase Provisioning Definition\nDESCRIPTION: Defines the provisioning state when Machine infrastructure is being created.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20190610-machine-states-preboot-bootstrapping.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// MachinePhaseProvisioning is the state when the\n// Machine infrastructure is being created.\nMachinePhaseProvisioning = MachinePhaseType(\"provisioning\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Insecure CAPI Diagnostics Endpoint in YAML\nDESCRIPTION: Sets the `--diagnostics-address` argument to `localhost:8080` and adds the `--insecure-diagnostics` flag for the CAPI controller manager. This configuration serves metrics via HTTP without authentication/authorization. Note that the pprof and log level endpoints are disabled when using insecure diagnostics for security reasons.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/diagnostics.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n          args:\n            - \"--diagnostics-address=localhost:8080\"\n            - \"--insecure-diagnostics\"\n```\n\n----------------------------------------\n\nTITLE: Example CSR with Attestation Data in PEM Format\nDESCRIPTION: This snippet shows an example of how attestation data should be formatted in a Certificate Signing Request (CSR). The data is base64 encoded and enclosed in BEGIN and END ATTESTATION DATA tags.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20210222-kubelet-authentication.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n-----BEGIN ATTESTATION DATA-----\nS25vd2luZyBtZSBBbGFuIFBhcnRyaWRnZSwga25vd2luZyB5b3UgS3ViZXJuZXRlcyBjbHVzdGVyLCBhaGEh\n-----END ATTESTATION DATA-----\n```\n\n----------------------------------------\n\nTITLE: Querying Nodes in an In-Memory Cluster via Kubeconfig (Shell)\nDESCRIPTION: This shell script sets environment variables for the target namespace and cluster name, retrieves the control plane endpoint port, fetches the kubeconfig for the specified in-memory cluster using `clusterctl`, and saves it to `/tmp/kubeconfig`. It then uses `kubectl` with this temporary kubeconfig, targeting the local forwarded port (`127.0.0.1:$CONTROL_PLANE_ENDPOINT_PORT`), to query the nodes within the fake workload cluster. Requires `kubectl`, `clusterctl`, the existence of the specified namespace/cluster, and the port-forwarding established in the previous step.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/test/infrastructure/docker/internal/controllers/backends/inmemory/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# NOTE: use namespace and name of the cluster you want to connect to\nexport NAMESPACE=default \nexport CLUSTER_NAME=in-memory-development-11461\n\nexport CONTROL_PLANE_ENDPOINT_PORT=$(k get cluster -n $NAMESPACE $CLUSTER_NAME  -o=jsonpath='{.spec.controlPlaneEndpoint.port}')\n\nbin/clusterctl get kubeconfig -n $NAMESPACE $CLUSTER_NAME > /tmp/kubeconfig\nkubectl --kubeconfig=/tmp/kubeconfig --server=https://127.0.0.1:$CONTROL_PLANE_ENDPOINT_PORT get nodes\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Module\nDESCRIPTION: Example command to run tests in a specific Cluster API module, showing how to focus testing efforts during development.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/CONTRIBUTING.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncd cluster-api/controllers\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Querying Imported Logs in Loki via logcli (Bash)\nDESCRIPTION: Shows an example command using `logcli` to query logs stored in Loki, specifically targeting logs from the `capi-controller-manager` application within a defined UTC time range (`--from`). This requires `logcli` to be installed and configured to connect to the Loki instance.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/testing.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nlogcli query '{app=\"capi-controller-manager\"}' --timezone=UTC --from=\"2022-02-22T10:00:00Z\"\n```\n\n----------------------------------------\n\nTITLE: Starting Lima with CAPD Configuration in Bash\nDESCRIPTION: This snippet demonstrates creating a Lima machine with specific configurations suitable for Cluster API development with CAPD. It sets fs.inotify parameters and allocates system resources. Dependencies include Lima setup and Docker with CAPD enabled.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nlimactl start template://docker-rootful --name \"docker\" --tty=false \\\n  --set '.provision += {\"mode\":\"system\",\"script\":\"#!/bin/bash\\nset -eux -o pipefail\\ncat << EOF > \\\"/etc/sysctl.d/99-capi.conf\\\"\\nfs.inotify.max_user_watches = 1048576\\nfs.inotify.max_user_instances = 8192\\nEOF\\nsysctl -p \\\"/etc/sysctl.d/99-capi.conf\\\"\"}' \\\n  --set '.mounts[0] = {\"location\": \"~\", \"writable\": true}' \\\n  --memory 12 --cpus 10 --disk 64 \\\n  --vm-type vz --rosetta=true\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Running Pod\nDESCRIPTION: Expected output when checking pod conditions, showing that the pod is properly initialized, ready and scheduled.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/building-running-and-testing.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nConditions:\n  Type              Status\n  Initialized       True\n  Ready             True\n  ContainersReady   True\n  PodScheduled      True\n```\n\n----------------------------------------\n\nTITLE: Defining DockerMachineTemplate with Resource Capacity in Go\nDESCRIPTION: Example implementation of a DockerMachineTemplate struct in Go, including a status field for resource capacity. It demonstrates how to add CPU, memory, and GPU resource information to the template status.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20210310-opt-in-autoscaling-from-zero.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// these constants will be carried in Cluster API, but are repeated here for clarity\nconst (\n    AutoscalerResourceCPU corev1.ResourceName = \"cpu\"\n    AutoscalerResourceMemory corev1.ResourceName = \"memory\"\n)\n\n// DockerMachineTemplateStatus defines the observed state of a DockerMachineTemplate\ntype DockerMachineTemplateStatus struct {\n    Capacity corev1.ResourceList `json:\"capacity,omitempty\"`\n}\n\n// DockerMachineTemplate is the Schema for the dockermachinetemplates API.\ntype DockerMachineTemplate struct {\n    metav1.TypeMeta   `json:\",inline\"`\n    metav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n    Spec DockerMachineTemplateSpec     `json:\"spec,omitempty\"`\n    Status DockerMachineTemplateStatus `json:\"status,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Example AfterControlPlaneUpgrade Response (YAML)\nDESCRIPTION: This YAML snippet illustrates an example response payload for the `AfterControlPlaneUpgrade` hook. It specifies the API version, kind, status (Success or Failure), an optional message, and an optional `retryAfterSeconds` field. A Failure status or retry request blocks the upgrade propagation to worker nodes (MachineDeployments).\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-lifecycle-hooks.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: hooks.runtime.cluster.x-k8s.io/v1alpha1\nkind: AfterControlPlaneUpgradeResponse\nstatus: Success # or Failure\nmessage: \"error message if status == Failure\"\nretryAfterSeconds: 10\n```\n\n----------------------------------------\n\nTITLE: Makefile Update for EnvSubst\nDESCRIPTION: This diff snippet shows an example of how to update a Makefile to use the envsubst tool to substitute environment variables in Kubernetes manifests built by Kustomize.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/configure-the-deployment.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-\\t$(KUSTOMIZE) build config/default | kubectl apply -f -\n+\\t$(KUSTOMIZE) build config/default | envsubst | kubectl apply -f -\n\n```\n\n----------------------------------------\n\nTITLE: Defining MachinePool Provisioned Phase Constant\nDESCRIPTION: Defines the constant for the Provisioned phase, indicating the MachinePool infrastructure has been created and configured.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20190919-machinepool-api.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// MachinePoolPhaseProvisioned is the state when its\n// infrastructure has been created and configured.\nMachinePoolPhaseProvisioned = MachinePoolPhase(\"provisioned\")\n```\n\n----------------------------------------\n\nTITLE: Component Structure Definition for Cluster API Authentication\nDESCRIPTION: Defines the structure and organization of new authentication components including node-attestation-controller, kubelet-authenticator, and kubelet-authenticator-null\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20210222-kubelet-authentication.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n* node-attestation-controller\n  * Code Location: bootstrap/node/attestation/controller\n  * Release Artifact: Embedded controller\n  * Description: Controller for CSR verification and signing\n\n* kubelet-authenticator\n  * Code Location: bootstrap/node/attestation/authenticator\n  * Release Artifact: kubelet-authenticator-<provider>\n  * Description: Controller for CSR verification\n\n* kubelet-authenticator-null\n  * Code Location: bootstrap/node/attestation/null\n  * Release Artifact: None (testing only)\n  * Description: Test validator that approves all CSRs\n```\n\n----------------------------------------\n\nTITLE: Opening Swagger UI for Runtime SDK Schema (JavaScript)\nDESCRIPTION: This JavaScript function `openSwaggerUI` is designed to run in a browser environment. It constructs the absolute URL to the `runtime-sdk-openapi.yaml` file relative to the current document's base URI and then opens the Swagger UI editor (`editor.swagger.io`) in a new window, pre-loading the schema definition for inspection.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-lifecycle-hooks.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// openSwaggerUI calculates the absolute URL of the RuntimeSDK YAML file and opens Swagger UI.\nfunction openSwaggerUI() {\n  var schemaURL = new URL(\"runtime-sdk-openapi.yaml\", document.baseURI).href\n  window.open(\"https://editor.swagger.io/?url=\" + schemaURL)\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding CloudStack Credentials for Kubernetes Secret\nDESCRIPTION: This command base64 encodes the CloudStack configuration file and stores it in an environment variable for use in creating a Kubernetes Secret.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nexport CLOUDSTACK_B64ENCODED_SECRET=`cat cloud-config | base64 | tr -d '\\n'`\n```\n\n----------------------------------------\n\nTITLE: Including Code of Conduct Reference in Markdown using MDBook Syntax\nDESCRIPTION: This snippet uses MDBook's include directive to embed the content of the code-of-conduct.md file located three directories up from the current file. This technique allows for maintaining a single code of conduct file while including it in multiple documentation locations.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/code-of-conduct.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{#include ../../../code-of-conduct.md}}\n```\n\n----------------------------------------\n\nTITLE: Defining MachinePool Pending Phase Constant\nDESCRIPTION: Defines the constant for the Pending phase, representing the initial state of a MachinePool after creation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20190919-machinepool-api.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// MachinePoolPhasePending is the first state a MachinePool is assigned by\n// Cluster API MachinePool controller after being created.\nMachinePoolPhasePending = MachinePoolPhase(\"pending\")\n```\n\n----------------------------------------\n\nTITLE: Defining LocalObjectReference struct in Go for Cluster API IPAM\nDESCRIPTION: This Go code defines the LocalObjectReference struct, which is used to reference local Kubernetes objects in the IPAM implementation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220125-ipam-integration.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype LocalObjectReference struct {\n  Group string\n  Kind string\n  Name string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a List Type for ControlPlaneTemplate Resources in Kubernetes Cluster API (Go)\nDESCRIPTION: This Go snippet defines a Kubernetes API list type (FooControlPlaneTemplateList) for grouping multiple instances of the FooControlPlaneTemplate custom resource. Following Kubernetes API conventions, it provides metadata and an array of FooControlPlaneTemplate items for bulk operations and resource management. Dependencies include the 'metav1' package and a previously defined FooControlPlaneTemplate type. This code is necessary for CRD registration and API list operations, supporting standard CRUD semantics in Kubernetes. The input and output formats follow standard Kubernetes resource lists.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/control-plane.md#2025-04-22_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\n// +kubebuilder:object:root=true\\n\\n// FooControlPlaneTemplateList contains a list of FooControlPlaneTemplates.\\ntype FooControlPlaneTemplateList struct {\\n    metav1.TypeMeta `json:\\\",inline\\\"`\\n    metav1.ListMeta `json:\\\"metadata,omitempty\\\"`\\n    Items           []FooControlPlaneTemplate `json:\\\"items\\\"`\\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying the Cluster API Directory Structure\nDESCRIPTION: A directory tree representation showing the top-level organization of the Cluster API repository. It displays all the main directories including .github, api, bootstrap, cmd, controllers, and other key components.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/repository-layout.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncluster-api\n└───.github\n└───api\n└───bootstrap\n└───cmd\n│   │   clusterctl\n└───config\n└───controllers\n└───controlplane\n└───dev\n└───docs\n└───errors\n└───exp\n└───feature\n└───hack\n└───internal\n└───logos\n└───scripts\n└───test\n└───util\n└───version\n└───webhooks\n└───main.go\n└───Makefile\n```\n\n----------------------------------------\n\nTITLE: JSON Patch Array Handling - Add to Existing Slice\nDESCRIPTION: Example showing how to add elements to an existing array using JSON patches in ClusterClass configuration.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\nmetadata:\n  name: my-clusterclass\nspec:\n  ...\n  patches:\n  - name: add file\n    definitions:\n    - selector:\n        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1\n        kind: KubeadmConfigTemplate\n      jsonPatches:\n      - op: add\n        path: /spec/template/spec/files/-\n        value:\n          content: Some content.\n          path: /some/file\n---\napiVersion: bootstrap.cluster.x-k8s.io/v1beta1\nkind: KubeadmConfigTemplate\nmetadata:\n  name: \"quick-start-default-worker-bootstraptemplate\"\nspec:\n  template:\n    spec:\n      ...\n      files:\n      - content: Some other content\n        path: /some/other/file\n```\n\n----------------------------------------\n\nTITLE: DiscoverVariables Request Schema in YAML\nDESCRIPTION: Example request schema for discovering variable definitions through Runtime hook.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-topology-mutation-hook.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: hooks.runtime.cluster.x-k8s.io/v1alpha1\nkind: DiscoverVariablesRequest\nsettings: <Runtime Extension settings>\n```\n\n----------------------------------------\n\nTITLE: Setting up Runtime Client with Cluster API in Go\nDESCRIPTION: This snippet demonstrates the initialization and setup of a runtime client within a Kubernetes Cluster API environment using Go. It involves creating a catalog, registering hook types, and setting up reconcilers, which are responsible for managing cluster state based on incoming requests. Dependencies include 'runtimecatalog', 'runtimehooksv1', 'runtimeclient', and 'runtimeregistry'. The function 'setupReconcilers' plays a key role in assigning the runtime client to a specific controller for managing cluster topology.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220221-runtime-SDK.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nvar (\n\t// Create a Catalog.\n\tcatalog  = runtimecatalog.New()\n\t...\n)\n\nfunc init() {\n\t...\n\t// Register the RuntimeHook types into the catalog.\n\t_ = runtimehooksv1.AddToCatalog(catalog)\n\t...\n}\n\nfunc setupReconcilers(ctx context.Context, mgr ctrl.Manager) {\n\t... \n\t// Setup the runtime client.\n\truntimeClient = runtimeclient.New(runtimeclient.Options{\n\t\tCatalog:  catalog,\n\t\tRegistry: runtimeregistry.New(),\n\t\tClient:   mgr.GetClient(),\n\t})\n\t...\n\t// Pass the runtime client to a reconciler.\n\tif err := (&controllers.ClusterTopologyReconciler{\n\t\tClient:                    mgr.GetClient(),\n\t\tAPIReader:                 mgr.GetAPIReader(),\n\t\tRuntimeClient:             runtimeClient,\n\t\tWatchFilterValue:          watchFilterValue,\n\t}).SetupWithManager(ctx, mgr, concurrency(clusterTopologyConcurrency)); err != nil {\n\t\tsetupLog.Error(err, \"Unable to create controller\", \"controller\", \"ClusterTopology\")\n\t\tos.Exit(1)\n\t}\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Gates in Tilt Settings for E2E Tests (YAML)\nDESCRIPTION: Provides a YAML configuration snippet for the Tilt settings file to enable specific Cluster API feature gates (`CLUSTER_TOPOLOGY`, `EXP_KUBEADM_BOOTSTRAP_FORMAT_IGNITION`, `EXP_RUNTIME_SDK`) required by some E2E tests. These features are activated using `kustomize_substitutions` when Tilt manages the development environment.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/testing.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nkustomize_substitutions:\n  CLUSTER_TOPOLOGY: \"true\"\n  EXP_KUBEADM_BOOTSTRAP_FORMAT_IGNITION: \"true\"\n  EXP_RUNTIME_SDK: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Implementing GCP Managed Machine Pool Specification in Go\nDESCRIPTION: This code snippet defines a Go struct for GCP Managed Machine Pool specification that works with Node Pools in Google Cloud. It includes fields for location, Kubernetes version, and node count scaling parameters.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220725-managed-kubernetes.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype GCPManagedMachinePoolSpec struct {\n    // Location specifies where the nodes should be created.\n    Location []string `json:\"location\"`\n\n    // The Kubernetes version for the node group.\n    Version string `json:\"version\"`\n\n    // MinNodeCount is the minimum number of nodes for one location.\n    MinNodeCount int `json:\"minNodeCount\"`\n\n    // MaxNodeCount is the maximum number of nodes for one location.\n    MaxNodeCount int `json:\"minNodeCount\"`\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating MachineDeployment Infrastructure Reference\nDESCRIPTION: YAML diff showing the update of infrastructureRef to point to the new VSphereMachineTemplate.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240807-in-place-updates.md#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: MachineDeployment\nmetadata:\n  name: m-cluster-vsphere-gaslor-md-0\nspec:\n  strategy:\n    type: InPlace\n  template:\n    spec:\n      infrastructureRef:\n        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n        kind: VSphereMachineTemplate\n-       name: md-1-1\n+       name: md-1-2\n```\n\n----------------------------------------\n\nTITLE: Filtering logs by cluster name\nDESCRIPTION: This query filters logs from the capi-controller-manager for a specific cluster named 'my-cluster'.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/logging.md#2025-04-22_snippet_2\n\nLANGUAGE: logql\nCODE:\n```\n{app=\"capi-controller-manager\"} | json | Cluster_name=\"my-cluster\"\n```\n\n----------------------------------------\n\nTITLE: Finalized Drain Completion Log in Kubernetes\nDESCRIPTION: This log entry confirms the finalization of the drain process on a cluster node, implying all previously blocked pods have been successfully evicted.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/automated-machine-management/machine_deletions.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nI0830 13:29:56.235398      17 machine_controller.go:702] \"Drain completed\" ... Node=\"my-cluster-2-md-0-wxtcg-mtg57-24lvh\"\n```\n\n----------------------------------------\n\nTITLE: Defining MachinePool Provisioning Phase Constant\nDESCRIPTION: Defines the constant for the Provisioning phase, indicating the MachinePool infrastructure is being created.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20190919-machinepool-api.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// MachinePoolPhaseProvisioning is the state when the\n// MachinePool infrastructure is being created.\nMachinePoolPhaseProvisioning = MachinePoolPhase(\"provisioning\")\n```\n\n----------------------------------------\n\nTITLE: AWS Spot Instance Configuration Types\nDESCRIPTION: Golang type definitions for AWS Machine specification to support spot instances. Includes SpotMarketOptions struct for configuring maximum price for spot instances.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200330-spot-instances.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype SpotMarketOptions struct {\n  MaxPrice *string `json:\"maxPrice,omitempty\"`\n}\n\ntype AWSMachineSpec struct {\n  ...\n\n  SpotMarketOptions *SpotMarketOptions `json:\"spotMarketOptions,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Example ClusterClass Definition for Topology Planning\nDESCRIPTION: A complete example of a ClusterClass YAML definition that includes the ClusterClass itself and all associated templates needed for creating a cluster using Docker infrastructure.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/alpha-topology-plan.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\nmetadata:\n  name: example-cluster-class\n  namespace: default\nspec:\n  controlPlane:\n    ref:\n      apiVersion: controlplane.cluster.x-k8s.io/v1beta1\n      kind: KubeadmControlPlaneTemplate\n      name: example-cluster-control-plane\n      namespace: default\n    machineInfrastructure:\n      ref:\n        kind: DockerMachineTemplate\n        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n        name: \"example-cluster-control-plane\"\n        namespace: default\n  infrastructure:\n    ref:\n      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n      kind: DockerClusterTemplate\n      name: example-cluster\n      namespace: default\n  workers:\n    machineDeployments:\n    - class: \"default-worker\"\n      template:\n        bootstrap:\n          ref:\n            apiVersion: bootstrap.cluster.x-k8s.io/v1beta1\n            kind: KubeadmConfigTemplate\n            name: example-docker-worker-bootstraptemplate\n        infrastructure:\n          ref:\n            apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n            kind: DockerMachineTemplate\n            name: example-docker-worker-machinetemplate\n---\napiVersion: infrastructure.cluster.x-k8s.io/v1beta1\nkind: DockerClusterTemplate\nmetadata:\n  name: example-cluster\n  namespace: default\nspec:\n  template:\n    spec: {}\n---\nkind: KubeadmControlPlaneTemplate\napiVersion: controlplane.cluster.x-k8s.io/v1beta1\nmetadata:\n  name: \"example-cluster-control-plane\"\n  namespace: default\nspec:\n  template:\n    spec:\n      machineTemplate:\n        nodeDrainTimeout: 1s\n      kubeadmConfigSpec:\n        clusterConfiguration:\n          apiServer:\n            certSANs: [ localhost, 127.0.0.1 ]\n        initConfiguration:\n          nodeRegistration: {} # node registration parameters are automatically injected by CAPD according to the kindest/node image in use.\n        joinConfiguration:\n          nodeRegistration: {} # node registration parameters are automatically injected by CAPD according to the kindest/node image in use.\n---\napiVersion: infrastructure.cluster.x-k8s.io/v1beta1\nkind: DockerMachineTemplate\nmetadata:\n  name: \"example-cluster-control-plane\"\n  namespace: default\nspec:\n  template:\n    spec:\n      extraMounts:\n      - containerPath: \"/var/run/docker.sock\"\n        hostPath: \"/var/run/docker.sock\"\n---\napiVersion: infrastructure.cluster.x-k8s.io/v1beta1\nkind: DockerMachineTemplate\nmetadata:\n  name: \"example-docker-worker-machinetemplate\"\n  namespace: default\nspec:\n  template:\n    spec: {}\n---\napiVersion: bootstrap.cluster.x-k8s.io/v1beta1\nkind: KubeadmConfigTemplate\nmetadata:\n  name: \"example-docker-worker-bootstraptemplate\"\n  namespace: default\nspec:\n  template:\n    spec:\n      joinConfiguration:\n        nodeRegistration: {} # node registration parameters are automatically injected by CAPD according to the kindest/node image in use.\n```\n\n----------------------------------------\n\nTITLE: Listing Required Virtink Environment Variables\nDESCRIPTION: Command to list all required Virtink environment variables needed for cluster creation using the clusterctl tool.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl generate cluster --infrastructure virtink --list-variables capi-quickstart\n```\n\n----------------------------------------\n\nTITLE: Enhanced MailgunClusterReconciler Structure\nDESCRIPTION: Extended MailgunClusterReconciler structure that includes Mailgun client and recipient fields for sending emails during reconciliation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/controllers-and-reconciliation.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// MailgunClusterReconciler reconciles a MailgunCluster object\ntype MailgunClusterReconciler struct {\n\tclient.Client\n\tLog       logr.Logger\n\tMailgun   mailgun.Mailgun\n\tRecipient string\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Status Subresource to Cluster Type\nDESCRIPTION: Adds the status subresource annotation to the MailgunCluster type. This enables separate handling of Spec and Status requests for the custom resource, preventing conflicts and allowing separate RBAC rules.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/initialize-repo-and-api-types.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:subresource:status\n// +kubebuilder:object:root=true\n\n// MailgunCluster is the Schema for the mailgunclusters API\ntype MailgunCluster struct {\n```\n\n----------------------------------------\n\nTITLE: non-english-content\nDESCRIPTION: non-english-content\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/release/releases/release-1.8.md#2025-04-22_snippet_0\n\nLANGUAGE: non-english-content\nCODE:\n```\nnon-english-content\n```\n\n----------------------------------------\n\nTITLE: Running PR-Blocking E2E Tests via ci-e2e.sh (Bash)\nDESCRIPTION: Executes the Cluster API end-to-end tests locally using the `ci-e2e.sh` script, mimicking the `pull-cluster-api-e2e-main` Prow job. The `GINKGO_LABEL_FILTER` environment variable restricts the execution to tests labeled `PR-Blocking`. Requires the Cluster API repository checked out and necessary dependencies installed.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/testing.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nGINKGO_LABEL_FILTER=\"PR-Blocking\" ./scripts/ci-e2e.sh\n```\n\n----------------------------------------\n\nTITLE: Committing Initial Scaffolding\nDESCRIPTION: Commits the initial repository scaffolding to Git. This establishes a baseline for further development.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/initialize-repo-and-api-types.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Generate scaffolding.\"\n```\n\n----------------------------------------\n\nTITLE: Example Kubernetes Pod Conditions Output\nDESCRIPTION: Illustrates the typical `.status.conditions` output for a Kubernetes Pod. This example shows a consistent set of conditions (Initialized, Ready, ContainersReady, PodScheduled) all having positive polarity (Status: True), meaning the condition being met is represented by 'True'. This is presented as context for designing Cluster API conditions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200506-conditions.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n Type              Status\n Initialized       True\n Ready             True\n ContainersReady   True\n PodScheduled      True\n```\n\n----------------------------------------\n\nTITLE: Sample kubeadmcontrolplane Resource Status Output (Bash)\nDESCRIPTION: This snippet shows the sample output of a previous 'kubectl get kubeadmcontrolplane' command. It displays the current state of the control plane, including initialization status, available API server, and node version info. There are no inputs; only for reference and verification during the deployment process.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/ignition.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nNAME                             CLUSTER            INITIALIZED   API SERVER AVAILABLE   REPLICAS   READY   UPDATED   UNAVAILABLE   AGE    VERSION\\nignition-cluster-control-plane   ignition-cluster   true                                 1                  1         1             7m7s   v1.22.2\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring IONOS Cloud Environment Variables for Cluster API\nDESCRIPTION: Environment variables setup for creating Kubernetes clusters on IONOS Cloud using Cluster API. Includes authentication token, datacenter settings, and machine configurations.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\nexport IONOS_TOKEN=<your-token>\nexport IONOSCLOUD_DATACENTER_ID=\"<your-datacenter-id>\"\nexport CONTROL_PLANE_ENDPOINT_IP=10.10.10.4\nexport CONTROL_PLANE_ENDPOINT_LOCATION=de/txl\nexport IONOSCLOUD_MACHINE_IMAGE_ID=\"<your-image-id>\"\nexport IONOSCLOUD_MACHINE_SSH_KEYS=\"<your-ssh-key>\"\n```\n\n----------------------------------------\n\nTITLE: Registering Types in the Improved Scheme Pattern\nDESCRIPTION: Example of how to register custom types using the improved scheme registration pattern that avoids controller-runtime dependencies.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/implement-api-types.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n\tobjectTypes = append(objectTypes, &Captain{}, &CaptainList{})\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GCPManagedClusterSpec in Go for Option 3\nDESCRIPTION: This code snippet defines the GCPManagedClusterSpec struct used in Option 3, which manages general GCP infrastructure for the cluster. It includes properties for project configuration, networking, region settings, failure domains, and additional labels for resources.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220725-managed-kubernetes.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype GCPManagedClusterSpec struct {\n    // Project is the name of the project to deploy the cluster to.\n    Project string `json:\"project\"`\n\n    // The GCP Region the cluster lives in.\n    Region string `json:\"region\"`\n\n    // ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.\n    // +optional\n    ControlPlaneEndpoint clusterv1.APIEndpoint `json:\"controlPlaneEndpoint\"`\n\n    // NetworkSpec encapsulates all things related to the GCP network.\n    // +optional\n    Network NetworkSpec `json:\"network\"`\n\n    // FailureDomains is an optional field which is used to assign selected availability zones to a cluster\n    // FailureDomains if empty, defaults to all the zones in the selected region and if specified would override\n    // the default zones.\n    // +optional\n    FailureDomains []string `json:\"failureDomains,omitempty\"`\n\n    // AdditionalLabels is an optional set of tags to add to GCP resources managed by the GCP provider, in addition to the\n    // ones added by default.\n    // +optional\n    AdditionalLabels Labels `json:\"additionalLabels,omitempty\"`\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating bash-completion in ~/.bash_profile\nDESCRIPTION: This line is added to the ~/.bash_profile to evaluate bash-completion. It sources the bash_completion script if it exists in the Homebrew installation directory.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/completion.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[[ -r \"$(brew --prefix)/etc/profile.d/bash_completion.sh\" ]] && . \"$(brew --prefix)/etc/profile.d/bash_completion.sh\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CRD Version Labels in Kustomization for Cluster API\nDESCRIPTION: Example of adding version labels to Custom Resource Definitions in a kustomization.yaml file. These labels map Cluster API contract versions to provider CRD versions, enabling automatic conversions for object references.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/infra-machine.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n- pairs:\n    cluster.x-k8s.io/v1alpha2: v1alpha1\n    cluster.x-k8s.io/v1alpha3: v1alpha2\n    cluster.x-k8s.io/v1beta1: v1beta1\n```\n\n----------------------------------------\n\nTITLE: Generating Weekly PR Updates - Release Tool - Bash\nDESCRIPTION: This snippet shows how to use the compiled release weekly update tool to generate summaries of recent PRs for specific branches over a customizable date range. The '--since' and '--until' parameters define the date window and '--branch' specifies the target branch (such as 'main' or a release branch). Setting the 'GITHUB_TOKEN' environment variable is recommended to increase API quota and reduce rate limiting issues. The tool outputs formatted update content for sharing with the community.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/release/role-handbooks/communications/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bin/weekly --since <YYYY-MM-DD> --until <YYYY-MM-DD> --branch <branch_name>\n```\n\n----------------------------------------\n\nTITLE: Specifying MachinePool Custom Naming Strategy in ClusterClass - Kubernetes YAML\nDESCRIPTION: This YAML snippet specifies a custom naming template for MachinePool objects. The 'namingStrategy.template' references the cluster name, the machinePool topologyName, and a random value. Facilitates consistent and unique naming of MachinePools per namespace. ClusterClass and MachinePool definitions must exist for this setting to take effect. Only relevant for deployments leveraging MachinePools.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\\nkind: ClusterClass\\nmetadata:\\n  name: docker-clusterclass-v0.1.0\\nspec:\\n  controlPlane:\\n    ...\\n  workers:\\n    machinePools:\\n    - class: default-worker\\n      ...\\n      namingStrategy:\\n        template: \"{{ .cluster.name }}-{{ .machinePool.topologyName }}-{{ .random }}\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Go Modules\nDESCRIPTION: Initializes Go modules for the project to manage dependencies. This creates the go.mod file with the specified module path.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/initialize-repo-and-api-types.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo mod init github.com/liztio/cluster-api-provider-mailgun\n```\n\n----------------------------------------\n\nTITLE: Generating Release Notes for Candidate or Beta Releases - Makefile - Bash\nDESCRIPTION: This snippet runs the Makefile target 'release-notes' for generating release notes for a candidate or beta release. Set 'RELEASE_TAG' to the upcoming release tag, and 'PREVIOUS_RELEASE_TAG' to reference the latest pre-release tag for change comparison. If there is no previous pre-release, omit the 'PREVIOUS_RELEASE_TAG'. The command outputs a changelog markdown file with notes for the tag specified.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/release/role-handbooks/communications/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# RELEASE_TAG should be the new desired tag (note: at this point the tag does not yet exist).\n# PREVIOUS_RELEASE_TAG is the previous released tag for determining the changes.\nRELEASE_TAG=v1.7.x-rc.1 PREVIOUS_RELEASE_TAG=tags/v1.7.x-rc.0 make release-notes\n```\n\n----------------------------------------\n\nTITLE: Running the Provider Issue Creation Tool (Make/Shell)\nDESCRIPTION: Executes the `make release-provider-issues-tool` command from the Cluster API project root. This command runs the `provider_issues` Go utility. The behavior (dry run or actual issue creation) depends on the `PROVIDER_ISSUES_DRY_RUN` environment variable. Requires prerequisite environment variables (`GITHUB_ISSUE_OPENER_TOKEN`, `RELEASE_TAG`, `RELEASE_DATE`) to be set.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/hack/tools/release/internal/update_providers/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmake release-provider-issues-tool\n```\n\n----------------------------------------\n\nTITLE: Generating Release Notes for Stable Releases - Makefile - Bash\nDESCRIPTION: This snippet executes the Makefile's 'release-notes' target to generate official release notes for a stable release. Only the 'RELEASE_TAG' parameter needs to be set to the new stable tag (e.g., v1.7.x). The build process produces a markdown changelog file documenting all PRs included in the release, which should be reviewed and added to the repository as described.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/release/role-handbooks/communications/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# RELEASE_TAG should be the new desired tag (note: at this point the tag does not yet exist).\nRELEASE_TAG=v1.7.x make release-notes\n```\n\n----------------------------------------\n\nTITLE: Registering External Patch Extension in Kubernetes\nDESCRIPTION: YAML configuration for registering an external patch extension using the Runtime Extension API. This defines the service configuration for the extension in the capi-extensions namespace.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220330-topology-mutation-hook.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: runtime.cluster.x-k8s.io/v1beta1\nkind: Extension\nmetadata:\n  name: \"my-awesome-patch\"\nspec:\n  clientConfig:\n    service:\n      namespace: \"capi-extensions\"\n      name: \"my-awesome-patch\"\n```\n\n----------------------------------------\n\nTITLE: Variable Value Output Example\nDESCRIPTION: Example output showing the etcdImageTag variable value\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/operate-cluster.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n{\"name\":\"etcdImageTag\",\"value\":\"\"}\n```\n\n----------------------------------------\n\nTITLE: Attempting In-place Machine Upgrades (Pseudocode)\nDESCRIPTION: This pseudocode demonstrates a common cluster upgrade workflow: for each machine, attempt an in-place upgrade and, if that fails, create a new machine and delete the old one. It illustrates how tooling can handle provider limitations in real-world deployments. No external dependencies are required and the snippet abstracts all provider logic, thus making it platform-agnostic. Inputs are a list of machines; outputs are updated/created/deleted machines to match upgrade requirements. Limitations: This is illustrative only and not an implementation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20181121-machine-api.md#2025-04-22_snippet_0\n\nLANGUAGE: pseudo\nCODE:\n```\nfor machine in machines:\n    attempt to upgrade machine in-place\n    if error:\n        create new machine\n        delete old machine\n```\n\n----------------------------------------\n\nTITLE: Visualizing High-Level External Update Flow in CAPI (Mermaid)\nDESCRIPTION: This Mermaid sequence diagram outlines the high-level process for external updates in Cluster API. It shows how operator changes trigger notifications, how CAPI controllers query external updaters about their capabilities, decide on the update strategy, and orchestrate machine updates by marking them pending, setting conditions, running updaters, and marking hooks as done.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240807-in-place-updates.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Operator\n\n    box Management Cluster\n        participant apiserver as kube-api server\n        participant capi as CP/MD controller\n        participant mach as Machine Controller\n        participant hook as External updater\n    end\n\n    Operator->>+apiserver: Make changes to KCP\n    apiserver->>+capi: Notify changes\n    apiserver->>-Operator: OK\n    loop For all External Updaters\n        capi->>+hook: Can update?\n        hook->>capi: Supported changes\n    end\n    capi->>capi: Decide Update Strategy\n    loop For all Machines\n        capi->>apiserver: Mark Machine as pending\n        apiserver->>mach: Notify changes\n        mach->>apiserver: Set UpToDate condition to False\n        loop For all External Updaters\n            mach->>hook: Run updater\n        end\n        mach->>apiserver: Mark Hooks in Machine as Done\n        mach->>apiserver: Set UpToDate condition to True\n    end\n```\n\n----------------------------------------\n\nTITLE: Default Type Registration in Kubebuilder Scheme\nDESCRIPTION: Example of how to register custom types in the default Kubebuilder scheme using the SchemeBuilder.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/implement-api-types.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n\tSchemeBuilder.Register(&Captain{}, &CaptainList{})\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Kustomize for Cluster API Development\nDESCRIPTION: Command to install Kustomize, a Kubernetes configuration transformation tool required for development of Cluster API. This uses the project's Makefile target to install the tool.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd cluster-api\nmake kustomize\n```\n\n----------------------------------------\n\nTITLE: Defining DockerMachine in YAML\nDESCRIPTION: Example of a DockerMachine resource definition with extra mounts configuration.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20250124-From CAPD(docker) to CAPD(dev) .md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: infrastructure.cluster.x-k8s.io/v1beta1\nkind: DockerMachine\nmetadata:\n  name: controlplane\nspec:\n  extraMounts:\n    - containerPath: \"/var/run/docker.sock\"\n      hostPath: \"/var/run/docker.sock\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Cluster API Core Components\nDESCRIPTION: Commands to deploy Cluster API core components to the management cluster using kustomize and envsubst.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/building-running-and-testing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd cluster-api\nmake envsubst\nkustomize build config/default | ./hack/tools/bin/envsubst | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Referencing Containerd URL in Image Builder Configuration\nDESCRIPTION: Example of how to provide URLs for overriding external scripts and binaries during the image building process, which can be used for signing components.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200804-windows-support.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[containerd_url](https://github.com/kubernetes-sigs/image-builder/blob/58a08a1a8241356bab4afb1c6d8d2fbb8ef54bcf/images/capi/packer/config/ansible-args.json)\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental Features for e2e Tests - YAML\nDESCRIPTION: This snippet demonstrates configuring experimental feature flags in a YAML file intended for end-to-end (e2e) test environments (e.g., './test/e2e/config/docker.yaml'). This is useful for automated or CI setups where tests require certain features to be enabled. Dependencies: valid path to a supported e2e config YAML file. Parameters: feature flag keys and their values under the 'variables' map. Input: YAML file. Output: e2e test cluster initialized with features enabled. Limitation: Affects only clusters created via e2e workflow using this configuration.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/experimental-features.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nvariables:\n  CLUSTER_TOPOLOGY: \"true\"\n  EXP_RUNTIME_SDK: \"true\"\n  EXP_MACHINE_SET_PREFLIGHT_CHECKS: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Including External Markdown File Reference\nDESCRIPTION: A markdown file inclusion directive that references the REVIEWING.md file located three directories above the current location using relative path notation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/REVIEWING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{#include ../../../REVIEWING.md}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxmox Environment Variables\nDESCRIPTION: Sets environment variables for Proxmox infrastructure provider, including template VM information, networking details, and node configurations.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\n# The node that hosts the VM template to be used to provision VMs\nexport PROXMOX_SOURCENODE=\"pve\"\n# The template VM ID used for cloning VMs\nexport TEMPLATE_VMID=100\n# The ssh authorized keys used to ssh to the machines.\nexport VM_SSH_KEYS=\"ssh-ed25519 ..., ssh-ed25519 ...\"\n# The IP address used for the control plane endpoint\nexport CONTROL_PLANE_ENDPOINT_IP=10.10.10.4\n# The IP ranges for Cluster nodes\nexport NODE_IP_RANGES=\"[10.10.10.5-10.10.10.50, 10.10.10.55-10.10.10.70]\"\n# The gateway for the machines network-config.\nexport GATEWAY=\"10.10.10.1\"\n# Subnet Mask in CIDR notation for your node IP ranges\nexport IP_PREFIX=24\n# The Proxmox network device for VMs\nexport BRIDGE=\"vmbr1\"\n# The dns nameservers for the machines network-config.\nexport DNS_SERVERS=\"[8.8.8.8,8.8.4.4]\"\n# The Proxmox nodes used for VM deployments\nexport ALLOWED_NODES=\"[pve1,pve2,pve3]\"\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Structure Definition\nDESCRIPTION: Defines the structure for Machine bootstrap configuration including config references and bootstrap data.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20190610-machine-states-preboot-bootstrapping.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Bootstrap struct\n```\n\n----------------------------------------\n\nTITLE: Validating Feature Gate Activation via kubectl describe - Shell\nDESCRIPTION: This snippet uses kubectl to describe a deployment for validating which feature gates are set for a controller manager. The command outputs deployment details including arguments given to the running containers. Dependencies: kubectl available, sufficient RBAC to run 'describe' on deployments in the target namespace. Parameter: namespace and deployment name. Input: kubectl command line. Output: Lists current features enabled on the controller manager. Limitation: Only reports configured state; doesn't confirm feature is active if incorrectly set.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/experimental-features.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe -n capi-system deployment.apps/capi-controller-manager\n```\n\n----------------------------------------\n\nTITLE: Cluster Template YAML Configuration\nDESCRIPTION: YAML configuration example showing disk setup and mount specifications for etcd in a cluster template.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200423-etcd-data-disk.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndiskSetup:\n  partitions:\n    - device: /dev/disk/azure/scsi1/lun0\n      tableType: gpt\n      layout: true\n      overwrite: false\n  filesystems:\n    - label: etcd_disk\n      filesystem: ext4\n      device: /dev/disk/azure/scsi1/lun0\n      extraOpts:\n        - \"-F\"\n        - \"-E\"\n        - \"lazy_itable_init=1,lazy_journal_init=1\"\nmounts:\n  - - etcd_disk\n    - /var/lib/etcd\n```\n\n----------------------------------------\n\nTITLE: Installing bash-completion on macOS\nDESCRIPTION: This command installs the bash-completion framework using Homebrew on macOS, which is required for Bash completion of clusterctl commands.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/completion.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install bash-completion\n```\n\n----------------------------------------\n\nTITLE: Creating Slack Weekly Announcement for Cluster API\nDESCRIPTION: This template is used to create a weekly update announcement on Slack for the Cluster API project. It includes sections for stats, new features, and important upcoming dates.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/release/release-templates.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Weekly announcement template\n\nWeekly update :rotating_light:\nWeek `x` - `yyyy-mm-dd` to `yyyy-mm-dd` (If unsure what week check either Google Calendar or https://vecka.nu/)\nFrom your friendly comms release team\n\nFun stats :wookie_party_time:\n1. X PRs merged for all releases\n1. X PRs merged into 1.X (main)\n1. X bugs fixed\n\nNew Features\n- :sparkles: Some feature..\n- For a full list of all the changes see last weeks closed PRs see : https://github.com/kubernetes-sigs/cluster-api/pulls?q=is%3Apr+closed%3AYYYY-MM-DD..YYYY-MM-DD+is%3Amerged+\n\nImportant upcoming dates :spiral_calendar_pad: (OPTIONAL)\n- vX.X.0-beta.0 released - (Add date here)\n- release-X.X branch created (Begin [Code Freeze]) - (Add date here)\n- vX.X.0 released - (Add date here)\n```\n\n----------------------------------------\n\nTITLE: Provider-driven Machine Update Workflow (Pseudocode)\nDESCRIPTION: This shorter pseudocode illustrates a simplified pattern advocated by the proposal: for each machine, simply update it, allowing the provider to internally choose between in-place upgrade or node replacement. The provider abstraction is a key theme, as this pattern expects controllers to make the reconciliation decision. No dependencies are implied; input is a collection of machines; effect is delegated to the machine provider logic. Limitation: Sample pseudocode, not runnable code.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20181121-machine-api.md#2025-04-22_snippet_1\n\nLANGUAGE: pseudo\nCODE:\n```\nfor machine in machines:\n    update machine\n```\n\n----------------------------------------\n\nTITLE: Executing Provider Issue Creation Tool for Release Notifications\nDESCRIPTION: Instructions for using the 'provider_issues.go' utility to automatically create GitHub issues in Cluster API provider repositories to notify about new beta releases. The tool helps streamline the communication process with provider maintainers.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/release/role-handbooks/communications/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake release-provider-issues-tool\n```\n\n----------------------------------------\n\nTITLE: Setting Dry Run Mode via Environment Variable (Shell)\nDESCRIPTION: Exports the `PROVIDER_ISSUES_DRY_RUN` environment variable. Setting this to `\"true\"` configures the `provider_issues` tool to run in dry-run mode, preventing it from actually creating GitHub issues. Set to `\"false\"` to allow issue creation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/hack/tools/release/internal/update_providers/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport PROVIDER_ISSUES_DRY_RUN=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Creating Experimental DockerMachinePool Resource with Kubebuilder - Bash\nDESCRIPTION: This bash snippet shows how to use Kubebuilder to scaffold a new experimental Kubernetes API resource named DockerMachinePool in the 'infrastructure' group at version 'v1alpha3'. It requires Kubebuilder to be installed in your environment. The command will set up code for the resource with controller logic included, but will not generate Makefiles. Key parameters include --kind for resource name, --group for API group, --version for API version, --controller to create a controller, --resource to generate the API, and --make to disable Makefile creation. The output will be new source files for the DockerMachinePool resource in the current repository.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/test/infrastructure/docker/exp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubebuilder create api --kind DockerMachinePool --group infrastructure --version v1alpha3 \\\n  --controller=true --resource=true --make=false\n```\n\n----------------------------------------\n\nTITLE: Defining MachinePool Deleting Phase Constant\nDESCRIPTION: Defines the constant for the Deleting phase, indicating the MachinePool is being deleted but infrastructure remains.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20190919-machinepool-api.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// MachinePoolPhaseDeleting is the MachinePool state when a delete\n// request has been sent to the API Server,\n// but its infrastructure has not yet been fully deleted.\nMachinePoolPhaseDeleting = MachinePoolPhase(\"deleting\")\n```\n\n----------------------------------------\n\nTITLE: Example Machine Lifecycle Hook Annotations\nDESCRIPTION: Shows practical examples of lifecycle hook annotations for different scenarios including app migration, file backup, and storage detachment operations.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200602-machine-deletion-phase-hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npre-drain.hook.machine.cluster-api.x-k8s.io/migrate-important-app: my-app-migration-controller\n\npre-terminate.hook.machine.cluster-api.x-k8s.io/backup-files: my-backup-controller\n\npre-terminate.hook.machine.cluster-api.x-k8s.io/wait-for-storage-detach: my-custom-storage-detach-controller\n```\n\n----------------------------------------\n\nTITLE: Sample kubectl Cluster-Info Output (Bash)\nDESCRIPTION: This snippet is a reference example of the output from 'kubectl cluster-info', showing the API server endpoint and CoreDNS status for the workload cluster. It helps users verify that their API server and basic network components are available. It is for documentation purposes only.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/ignition.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nKubernetes control plane is running at https://ignition-cluster-apiserver-284992524.us-east-1.elb.amazonaws.com:6443\\nCoreDNS is running at https://ignition-cluster-apiserver-284992524.us-east-1.elb.amazonaws.com:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\\n\\nTo further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.\\n\n```\n\n----------------------------------------\n\nTITLE: ValidateTopology Request Schema in YAML\nDESCRIPTION: Example request schema for validating topology after patch application, including template and variable specifications.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-topology-mutation-hook.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: hooks.runtime.cluster.x-k8s.io/v1alpha1\nkind: ValidateTopologyRequest\nsettings: <Runtime Extension settings>\nvariables:\n- name: <variable-name>\n  value: <variable-value>\n  ...\nitems:\n- holderReference:\n    apiVersion: cluster.x-k8s.io/v1beta1\n    kind: MachineDeployment\n    namespace: default\n    name: cluster-md1-xyz\n    fieldPath: spec.template.spec.infrastructureRef\n  object:\n    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n    kind: AWSMachineTemplate\n    spec:\n    ...\n  variables:\n  - name: <variable-name>\n    value: <variable-value>\n    ...\n```\n\n----------------------------------------\n\nTITLE: Adding Manager Image Commands in tilt-provider Configuration (dockerfile)\nDESCRIPTION: This Dockerfile snippet demonstrates `COPY` commands that can be specified using the `additional_docker_build_commands` field within a provider's `tilt-provider.yaml`. These commands are appended to the Dockerfile used for building the provider's manager image, typically used to copy binaries or configuration files from the helper image or build context.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_25\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY --from=tilt-helper /usr/bin/docker /usr/bin/docker\nCOPY --from=tilt-helper /go/kubernetes/client/bin/kubectl /usr/bin/kubectl\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Metadata for Cluster API Proposal\nDESCRIPTION: YAML code block defining metadata for a Cluster API proposal, including authors, reviewers, dates, status, and related proposals.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/YYYYMMDD-template.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Proposal Template\nauthors:\n  - \"@janedoe\"\nreviewers:\n  - \"@janedoe\"\ncreation-date: yyyy-mm-dd\nlast-updated: yyyy-mm-dd\nstatus: provisional|experimental|implementable|implemented|deferred|rejected|withdrawn|replaced\nsee-also:\n  - \"/docs/proposals/20190101-we-heard-you-like-proposals.md\"\n  - \"/docs/proposals/20190102-everyone-gets-a-proposal.md\"\nreplaces:\n  - \"/docs/proposals/20181231-replaced-proposal.md\"\nsuperseded-by:\n  - \"/docs/proposals/20190104-superceding-proposal.md\"\n---\n```\n\n----------------------------------------\n\nTITLE: Machine Phase Pending Definition\nDESCRIPTION: Defines the initial pending state for a Machine when first created by the controller.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20190610-machine-states-preboot-bootstrapping.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// MachinePhasePending is the first state a Machine is assigned by\n// Cluster API Machine controller after being created.\nMachinePhasePending = MachinePhaseType(\"pending\")\n```\n\n----------------------------------------\n\nTITLE: Machine Spec Structure Definition\nDESCRIPTION: Defines the structure for Machine specifications including bootstrap configuration and infrastructure references.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20190610-machine-states-preboot-bootstrapping.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype MachineSpec struct\n```\n\n----------------------------------------\n\nTITLE: Setting CAPI Release Date via Environment Variable (Shell)\nDESCRIPTION: Exports the `RELEASE_DATE` environment variable. This variable sets the target release date for the specified CAPI version in `YYYY-MM-DD` format. This information is used by the `provider_issues` tool, potentially within the generated issue content. The date should be fetched from the official CAPI release documentation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/hack/tools/release/internal/update_providers/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport RELEASE_DATE=\"2023-11-28\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bootstrap Template YAML using kubectl\nDESCRIPTION: This command fetches the YAML definition of a specific bootstrap template from the Kubernetes API server and writes it to `file.yaml`. Users need to substitute `<BootstrapTemplateType>` with the relevant CRD kind (e.g., `KubeadmConfigTemplate`) and `<name>` with the template's specific name. This exported configuration is used as a starting point for creating a modified bootstrap template.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/updating-machine-templates.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get <BootstrapTemplateType> <name> -o yaml > file.yaml\n```\n\n----------------------------------------\n\nTITLE: Infrastructure Provider Configuration Example in YAML\nDESCRIPTION: Example YAML configuration for an Infrastructure provider in Cluster API, showing the required spec fields including providerIDList and status fields indicating readiness.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/controllers/machine-pool.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: MyMachinePool\napiVersion: infrastructure.cluster.x-k8s.io/v1beta1\nspec:\n    providerIDList:\n      - cloud:////my-cloud-provider-id-0\n      - cloud:////my-cloud-provider-id-1\nstatus:\n    ready: true\n    infrastructureMachineKind: InfrastructureMachine\n```\n\n----------------------------------------\n\nTITLE: Customizing Resource Limits for Kubeadm Control Plane Provider in YAML\nDESCRIPTION: This example demonstrates how to modify the resource limits for the manager pod in a control plane provider deployment. It sets specific CPU and memory limits and requests for the Kubeadm control plane provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20201020-capi-provider-operator.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: management.cluster.x-k8s.io/v1alpha1\nkind: ControlPlaneProvider\nmetadata:\n name: kubeadm\n namespace: capi-kubeadm-control-plane-system\nspec:\n version: v0.3.10\n secretName: capi-variables\n deployment:\n   containers:\n   - name: manager\n     resources:\n       limits:\n         cpu: 100m\n         memory: 30Mi\n       requests:\n         cpu: 100m\n         memory: 20Mi\n```\n\n----------------------------------------\n\nTITLE: KubeadmConfig Example with Disk Setup\nDESCRIPTION: This snippet shows how to configure disk partitioning and filesystem creation using the DiskSetup field in KubeadmConfig.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/bootstrap/kubeadm-bootstrap/index.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndiskSetup:\n  filesystems:\n  - device: /dev/disk/azure/scsi1/lun0\n    extraOpts:\n    - -E\n    - lazy_itable_init=1,lazy_journal_init=1\n    filesystem: ext4\n    label: etcd_disk\n  - device: ephemeral0.1\n    filesystem: ext4\n    label: ephemeral0\n    replaceFS: ntfs\n  partitions:\n  - device: /dev/disk/azure/scsi1/lun0\n    layout: true\n    overwrite: false\n    tableType: gpt\n```\n\n----------------------------------------\n\nTITLE: Adding Resources to Kustomization YAML\nDESCRIPTION: This snippet demonstrates how to specify resources within a Kustomization configuration file. It allows inclusion of additional YAML configuration files necessary for deployment.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/configure-the-deployment.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n- manager.yaml\n- credentials.yaml\n\n```\n\n----------------------------------------\n\nTITLE: Defining Shared ProviderSpec, Status, and Helper Types for Cluster API in Golang\nDESCRIPTION: This snippet defines ProviderSpec and ProviderStatus, which serve as shared configuration and status structures for all provider types. It also introduces auxiliary types such as ManagerSpec, DeploymentSpec, ContainerSpec, ImageMeta, and FetchConfiguration, providing detailed options for provider configuration and deployment. The specification supports extensible deployment, image management, resource tuning, and fetch mechanisms. All types follow Kubernetes API conventions; dependencies include core Kubernetes packages (metav1, corev1, ctrlruntime) and the Cluster API codebase. Structured parameters support declarative management and strong validation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20201020-capi-provider-operator.md#2025-04-22_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\n// ProviderSpec defines the desired state of the Provider.\ntype ProviderSpec struct {\n   // Version indicates the provider version.\n   // +optional\n   Version *string `json:\"version,omitempty\"`\n\n   // Manager defines the properties that can be enabled on the controller manager for the provider.\n   // +optional\n   Manager ManagerSpec `json:\"manager,omitempty\"`\n\n   // Deployment defines the properties that can be enabled on the deployment for the provider.\n   // +optional\n   Deployment *DeploymentSpec `json:\"deployment,omitempty\"`\n\n   // SecretName is the name of the Secret providing the configuration\n   // variables for the current provider instance, like e.g. credentials.\n   // Such configurations will be used when creating or upgrading provider components.\n   // The contents of the secret will be treated as immutable. If changes need\n   // to be made, a new object can be created and the name should be updated.\n   // The contents should be in the form of key:value. This secret must be in\n   // the same namespace as the provider.\n   // +optional\n   SecretName *string `json:\"secretName,omitempty\"`\n\n   // FetchConfig determines how the operator will fetch the components and metadata for the provider.\n   // If nil, the operator will try to fetch components according to default\n   // embedded fetch configuration for the given kind and `ObjectMeta.Name`.\n   // For example, the infrastructure name `aws` will fetch artifacts from\n   // https://github.com/kubernetes-sigs/cluster-api-provider-aws/releases.\n   // +optional\n   FetchConfig *FetchConfiguration `json:\"fetchConfig,omitempty\"`\n\n   // Paused prevents the operator from reconciling the provider. This can be\n   // used when doing an upgrade or move action manually.\n   // +optional\n   Paused bool `json:\"paused,omitempty\"`\n}\n\n// ManagerSpec defines the properties that can be enabled on the controller manager for the provider.\ntype ManagerSpec struct {\n   // ControllerManagerConfigurationSpec defines the desired state of GenericControllerManagerConfiguration.\n   ctrlruntime.ControllerManagerConfigurationSpec `json:\",inline\"`\n\n   // ProfilerAddress defines the bind address to expose the pprof profiler (e.g. localhost:6060).\n   // Default empty, meaning the profiler is disabled.\n   // Controller Manager flag is --profiler-address.\n   // +optional\n   ProfilerAddress *string `json:\"profilerAddress,omitempty\"`\n\n   // MaxConcurrentReconciles is the maximum number of concurrent Reconciles\n   // which can be run. Defaults to 10.\n   // +optional\n   MaxConcurrentReconciles *int `json:\"maxConcurrentReconciles,omitempty\"`\n\n   // Verbosity set the logs verbosity. Defaults to 1.\n   // Controller Manager flag is --verbosity.\n   // +optional\n   Verbosity int `json:\"verbosity,omitempty\"`\n\n   // Debug, if set, will override a set of fields with opinionated values for\n   // a debugging session. (Verbosity=5, ProfilerAddress=localhost:6060)\n   // +optional\n   Debug bool `json:\"debug,omitempty\"`\n\n   // FeatureGates define provider specific feature flags that will be passed\n   // in as container args to the provider's controller manager.\n   // Controller Manager flag is --feature-gates.\n   FeatureGates map[string]bool `json:\"featureGates,omitempty\"`\n}\n\n// DeploymentSpec defines the properties that can be enabled on the Deployment for the provider.\ntype DeploymentSpec struct {\n   // Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.\n   // +optional\n   Replicas *int `json:\"replicas,omitempty\"`\n\n   // NodeSelector is a selector which must be true for the pod to fit on a node.\n   // Selector which must match a node's labels for the pod to be scheduled on that node.\n   // More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n   // +optional\n   NodeSelector map[string]string `json:\"nodeSelector,omitempty\"`\n\n   // If specified, the pod's tolerations.\n   // +optional\n   Tolerations []corev1.Toleration `json:\"tolerations,omitempty\"`\n\n   // If specified, the pod's scheduling constraints\n   // +optional\n   Affinity *corev1.Affinity `json:\"affinity,omitempty\"`\n\n   // List of containers specified in the Deployment\n   // +optional\n   Containers []ContainerSpec `json:\"containers\"`\n}\n\n// ContainerSpec defines the properties available to override for each\n// container in a provider deployment such as Image and Args to the container’s\n// entrypoint.\ntype ContainerSpec struct {\n   // Name of the container. Cannot be updated.\n   Name string `json:\"name\"`\n\n   // Container Image Name\n   // +optional\n   Image *ImageMeta `json:\"image,omitempty\"`\n\n   // Args represents extra provider specific flags that are not encoded as fields in this API.\n   // Explicit controller manager properties defined in the `Provider.ManagerSpec`\n   // will have higher precedence than those defined in `ContainerSpec.Args`.\n   // For example, `ManagerSpec.SyncPeriod` will be used instead of the\n   // container arg `--sync-period` if both are defined.\n   // The same holds for `ManagerSpec.FeatureGates` and `--feature-gates`.\n   // +optional\n   Args map[string]string `json:\"args,omitempty\"`\n\n   // List of environment variables to set in the container.\n   // +optional\n   Env []corev1.EnvVar `json:\"env,omitempty\"`\n\n   // Compute resources required by this container.\n   // +optional\n   Resources *corev1.ResourceRequirements `json:\"resources,omitempty\"`\n}\n\n// ImageMeta allows to customize the image used\ntype ImageMeta struct {\n    // Repository sets the container registry to pull images from.\n    // +optional\n    Repository *string `json:\"repository,omitempty`\n\n    // Name allows to specify a name for the image.\n    // +optional\n    Name *string `json:\"name,omitempty`\n\n    // Tag allows to specify a tag for the image.\n    // +optional\n    Tag *string `json:\"tag,omitempty`\n}\n\n// FetchConfiguration determines the way to fetch the components and metadata for the provider.\ntype FetchConfiguration struct {\n   // URL to be used for fetching the provider’s components and metadata from a remote Github repository.\n   // For example, https://github.com/{owner}/{repository}/releases\n   // The version of the release will be `ProviderSpec.Version` if defined\n   // otherwise the `latest` version will be computed and used.\n   // +optional\n   URL *string `json:\"url,omitempty\"`\n\n   // Selector to be used for fetching provider’s components and metadata from\n   // ConfigMaps stored inside the cluster. Each ConfigMap is expected to contain\n   // components and metadata for a specific version only.\n   // +optional\n   Selector *metav1.LabelSelector `json:\"selector,omitempty\"`\n}\n\n// ProviderStatus defines the observed state of the Provider.\ntype ProviderStatus struct {\n   // Contract will contain the core provider contract that the provider is\n   // abiding by, like e.g. v1alpha3.\n   // +optional\n   Contract *string `json:\"contract,omitempty\"`\n\n   // Conditions define the current service state of the cluster.\n   // +optional\n   Conditions Conditions `json:\"conditions,omitempty\"`\n\n   // ObservedGeneration is the latest generation observed by the controller.\n   // +optional\n   ObservedGeneration int64 `json:\"observedGeneration,omitempty\"`\n}\n\n```\n\n----------------------------------------\n\nTITLE: Template-based Defaulting in JSON Patches\nDESCRIPTION: Shows how to implement defaulting behavior using templates in JSON patch value calculations.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n        valueFrom:\n          template: \"{{ if .vnetName }}{{.vnetName}}{{else}}{{.builtin.cluster.name}}-vnet{{end}}\"\n```\n\n----------------------------------------\n\nTITLE: Extension Response for Unsupported Changes\nDESCRIPTION: JSON response from kcp-version-upgrade extension indicating no supported changes.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240807-in-place-updates.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": null,\n    \"acceptedChanges\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Example Metal3RemediationTemplate YAML Configuration\nDESCRIPTION: Sample YAML configuration for a Metal3RemediationTemplate resource. This template defines specific remediation strategies and timeouts for metal3 infrastructure.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20191030-machine-health-checking.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Metal3RemediationTemplate\napiVersion: remediation.metal3.io/v1alphaX\nmetadata:\n  name: M3_REMEDIATION_GROUP\n  namespace: NAMESPACE_OF_UNHEALTHY_MACHINE\nspec:\n  template:\n    spec:\n      strategy: \t\t    escalate\n      deleteAfterRetries:     10\n      powerOnTimeoutSeconds:  600\n      powerOffTimeoutSeconds: 120\n```\n\n----------------------------------------\n\nTITLE: Additional RBAC Annotation for Cluster API Resources\nDESCRIPTION: Additional RBAC annotation to allow read-only access to Cluster API Cluster resources, which is needed for the MailgunClusterReconciler to function properly.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/controllers-and-reconciliation.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:rbac:groups=cluster.x-k8s.io,resources=clusters;clusters/status,verbs=get;list;watch\n```\n\n----------------------------------------\n\nTITLE: Building images for end-to-end tests\nDESCRIPTION: Make command to build all provider images required for running end-to-end tests. This is a prerequisite step before running e2e tests locally.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/testing.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake docker-build-e2e\n```\n\n----------------------------------------\n\nTITLE: Increasing inotify limits in Docker Desktop VM (MacOS)\nDESCRIPTION: Commands to enter the Docker Desktop VM on MacOS and increase the inotify file watch settings to resolve 'too many open files' errors.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/troubleshooting.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnc -U ~/Library/Containers/com.docker.docker/Data/debug-shell.sock\n```\n\nLANGUAGE: bash\nCODE:\n```\nsysctl fs.inotify.max_user_watches=1048576\nsysctl fs.inotify.max_user_instances=8192\n```\n\nLANGUAGE: bash\nCODE:\n```\nexit\n```\n\n----------------------------------------\n\nTITLE: Email Sending Logic for MailgunCluster\nDESCRIPTION: Implementation of the core business logic for the MailgunCluster reconciler, which sends an email notification when a new cluster is requested.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/controllers-and-reconciliation.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nsubject := fmt.Sprintf(\"[%s] New Cluster %s requested\", mgCluster.Spec.Priority, cluster.Name)\nbody := fmt.Sprint(\"Hello! One cluster please.\\n\\n%s\\n\", mgCluster.Spec.Request)\n\nmsg := mailgun.NewMessage(mgCluster.Spec.Requester, subject, body, r.Recipient)\n_, _, err = r.Mailgun.Send(msg)\nif err != nil {\n    return ctrl.Result{}, err\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Cluster API Manager Status\nDESCRIPTION: Command to verify that the Cluster API manager pod is running properly by checking its conditions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/building-running-and-testing.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe -n capi-system pod | grep -A 5 Conditions\n```\n\n----------------------------------------\n\nTITLE: Querying Control Plane Machines with Label Selector in YAML\nDESCRIPTION: This YAML snippet shows the label selector used to find existing Control Plane Machines. It matches labels for cluster name and control plane designation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20191017-kubeadm-based-control-plane.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nselector:\n  matchLabels:\n    cluster.x-k8s.io/cluster-name: my-cluster\n    cluster.x-k8s.io/control-plane: \"\"\n```\n\n----------------------------------------\n\nTITLE: Create Kind Config for KubeVirt Provider (Bash)\nDESCRIPTION: Creates a YAML configuration file (`kind-config.yaml`) for `kind` tailored for use with the KubeVirt infrastructure provider. It disables the default CNI (kindnet) to allow installation of an alternative like Calico, and mounts the host's Docker configuration file (`<YOUR DOCKER CONFIG FILE PATH>`) into the control plane node to avoid Docker Hub pull rate limits. The user must replace the placeholder path.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncat <<EOF > kind-config.yaml\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnetworking:\n# the default CNI will not be installed\n  disableDefaultCNI: true\nnodes:\n- role: control-plane\n  extraMounts:\n   - containerPath: /var/lib/kubelet/config.json\n     hostPath: <YOUR DOCKER CONFIG FILE PATH>\nEOF\n```\n\n----------------------------------------\n\nTITLE: Adding Patches to Kustomization YAML\nDESCRIPTION: This Kustomize snippet shows how to include patches to a Kubernetes configuration, specifically by referencing YAML files for deployment configurations.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/configure-the-deployment.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n- path: manager_image_patch.yaml\n- path: manager_config.yaml\n\n```\n\n----------------------------------------\n\nTITLE: Free Form Object Variable Definition (Not Recommended)\nDESCRIPTION: Example of defining a free form object variable, which is not recommended due to lack of validation that could lead to problems when those values are used in patches or template creation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nvariables:\n  - name: freeFormObject\n    schema:\n      openAPIV3Schema:\n        type: object\n```\n\n----------------------------------------\n\nTITLE: Executing End-to-End Tests with CAPD Infrastructure - Makefile\nDESCRIPTION: This snippet illustrates the use of the 'make test-e2e' Makefile target to execute CAPI end-to-end (E2E) tests configured to use the CAPD provider. The test runner depends on the setup of the main Cluster API repository and assumes all required test and build dependencies are installed. The 'test-e2e' target triggers the Cluster API's E2E suite with CAPD, but CAPD itself does not provide an independent E2E suite.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/test/infrastructure/docker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake test-e2e\n```\n\n----------------------------------------\n\nTITLE: Example Output of kubectl get machinedeployment\nDESCRIPTION: Shows the expected tabular output when running `kubectl get machinedeployment`. The columns (NAMESPACE, NAME, CLUSTER, REPLICAS, etc.) reflect the `additionalPrinterColumns` configuration for the `MachineDeployment` CRD, providing a standardized view of deployment status.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nNAMESPACE            NAME                      CLUSTER              REPLICAS   READY   UPDATED   UNAVAILABLE   PHASE       AGE     VERSION\nquick-start-d5ufye   quick-start-ntysk0-md-0   quick-start-ntysk0   1                  1         1             ScalingUp   3m28s   v1.23.3\n```\n\n----------------------------------------\n\nTITLE: Configuring Prowjob Generation with YAML\nDESCRIPTION: This YAML snippet demonstrates the structure of the configuration file used by `prowjob-gen`. It uses a top-level `prow_ignored` key to avoid being parsed by Prow itself. The configuration defines branches (e.g., `main`) with specific variables (like `testImage`, `interval`, `kubernetesVersionManagement`), lists templates to be processed (e.g., `test.yaml.tpl`), and provides version mappings for dependencies (`etcd`, `coreDNS`, `k8sRelease`) keyed by Kubernetes versions (e.g., \"1.29\", \"1.30\"). These values are accessible within the Go templates during generation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/hack/tools/prowjob-gen/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprow_ignored:\n  branches:\n    main: # values below the branch here are available in the template \n      testImage: \"gcr.io/k8s-staging-test-infra/kubekins-e2e:v20231208-8b9fd88e88-1.29\"\n      interval: \"2h\"\n      upgradesInterval: \"2h\"\n      kubernetesVersionManagement: \"v1.26.6@sha256:6e2d8b28a5b601defe327b98bd1c2d1930b49e5d8c512e1895099e4504007adb\"\n      kubebuilderEnvtestKubernetesVersion: \"1.26.1\"\n      upgrades:\n      - from: \"1.29\"\n        to: \"1.30\"\n\n  templates:\n  - name: \"test.yaml.tpl\"\n    template: \"test-{{ .branch }}.yaml.tmp\"\n\n  versions:\n    \"1.29\":\n      etcd: \"3.5.10-0\"\n      coreDNS: \"v1.11.1\"\n      k8sRelease: \"stable-1.29\"\n    \"1.30\":\n      etcd: \"3.5.10-0\"\n      coreDNS: \"v1.11.1\"\n      k8sRelease: \"ci/latest-1.30\"\n```\n\n----------------------------------------\n\nTITLE: Make clusterctl Executable on macOS (Bash)\nDESCRIPTION: Makes the downloaded `clusterctl` binary file executable on macOS using the `chmod +x` command.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x ./clusterctl\n```\n\n----------------------------------------\n\nTITLE: Building Weekly Update Release Tool - Makefile - Bash\nDESCRIPTION: This snippet demonstrates how to compile the weekly update tool for generating recent PR summaries. It relies on a Makefile target 'release-weekly-update-tool' and assumes a working Go development environment and Make installed. Running this command produces a binary (./bin/weekly) for later use in automated release updates.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/release/role-handbooks/communications/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake release-weekly-update-tool\n```\n\n----------------------------------------\n\nTITLE: Displaying Kubernetes Version Support in Markdown\nDESCRIPTION: Shows the supported Kubernetes versions for management and workload clusters using a markdown list.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CHANGELOG/v1.8.0.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Management Cluster: v1.27.x -> v1.30.x\n- Workload Cluster: v1.25.x -> v1.30.x\n```\n\n----------------------------------------\n\nTITLE: Installing clusterawsadm on Linux for AWS Provider\nDESCRIPTION: Downloads and installs the clusterawsadm binary on Linux, which is used for managing IAM resources for the AWS provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L {{#releaselink repo:\"https://github.com/kubernetes-sigs/cluster-api-provider-aws\" gomodule:\"sigs.k8s.io/cluster-api-provider-aws\" asset:\"clusterawsadm-linux-amd64\" version:\">=2.0.0\"}} -o clusterawsadm\n\nchmod +x clusterawsadm\n\nsudo mv clusterawsadm /usr/local/bin\n\nclusterawsadm version\n```\n\n----------------------------------------\n\nTITLE: Listing Required VCD Environment Variables\nDESCRIPTION: Command to list all required VMware Cloud Director (VCD) environment variables needed for cluster creation using the clusterctl tool.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl generate cluster --infrastructure vcd --list-variables capi-quickstart\n```\n\n----------------------------------------\n\nTITLE: Initialization Status in FooMachineStatus\nDESCRIPTION: This snippet details how to report the initialization status of an InfraMachine through the 'Initialization' field within FooMachineStatus. The Go struct includes a 'Provisioned' boolean field indicating if the infrastructure is fully provisioned, aligning with Cluster API contracts.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/infra-machine.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype FooMachineStatus struct {\n    // initialization provides observations of the FooMachine initialization process.\n    // NOTE: Fields in this struct are part of the Cluster API contract and are used to orchestrate initial Machine provisioning.\n    // +optional\n    Initialization *FooMachineInitializationStatus `json:\"initialization,omitempty\"`\n    \n    // See other rules for more details about mandatory/optional fields in InfraMachine status.\n    // Other fields SHOULD be added based on the needs of your provider.\n}\n\n// FooMachineInitializationStatus provides observations of the FooMachine initialization process.\ntype FooMachineInitializationStatus struct {\n\t// provisioned is true when the infrastructure provider reports that the Machine's infrastructure is fully provisioned.\n\t// NOTE: this field is part of the Cluster API contract, and it is used to orchestrate initial Machine provisioning.\n\t// +optional\n\tProvisioned bool `json:\"provisioned,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Workload Cluster with Kubectl (Bash)\nDESCRIPTION: This Bash snippet deletes the workload cluster resources using 'kubectl delete cluster'. This cleans up all the Kubernetes and cloud resources provisioned for the workload cluster within AWS. Input is the cluster name; output is the deletion process progress. Proper credentials and permissions are required.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/ignition.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete cluster ignition-cluster\\n\n```\n\n----------------------------------------\n\nTITLE: Future Replica Counter Fields for ControlPlane in v1beta2 Contract\nDESCRIPTION: Preview of the standardized replica counter fields that will be required in the v1beta2 contract (tentatively April 2025). Includes selector and various replica counters to ensure consistent user experience across all API resources.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/control-plane.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype FooControlPlaneStatus struct {\n    // selector is the label selector in string format to avoid introspection\n    // by clients, and is used to provide the CRD-based integration for the\n    // scale subresource and additional integrations for things like kubectl\n    // describe. The string will be in the same format as the query-param syntax.\n    // More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors\n    // +optional\n    Selector string `json:\"selector,omitempty\"`\n    \n    // replicas is the total number of machines targeted by this control plane\n    // (their labels match the selector).\n    // +optional\n    Replicas *int32 `json:\"replicas,omitempty\"`\n\n    // readyReplicas is the number of ready replicas for this ControlPlane. A machine is considered ready when Machine's Ready condition is true.\n    // +optional\n    ReadyReplicas *int32 `json:\"readyReplicas,omitempty\"`\n\n    // availableReplicas is the number of available replicas for this ControlPlane. A machine is considered available when Machine's Available condition is true.\n    // +optional\n    AvailableReplicas *int32 `json:\"availableReplicas,omitempty\"`\n\n    // upToDateReplicas is the number of up-to-date replicas targeted by this ControlPlane. A machine is considered available when Machine's  UpToDate condition is true.\n    // +optional\n    UpToDateReplicas *int32 `json:\"upToDateReplicas,omitempty\"`\n\n    // See other rules for more details about mandatory/optional fields in ControlPlane status.\n    // Other fields SHOULD be added based on the needs of your provider.\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CAPI Release Tag via Environment Variable (Shell)\nDESCRIPTION: Exports the `RELEASE_TAG` environment variable. This variable specifies the target CAPI beta release version (e.g., `v1.7.0-beta.0`) that the `provider_issues` tool will use when creating issues.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/hack/tools/release/internal/update_providers/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport RELEASE_TAG=\"v1.7.0-beta.0\"\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Cluster API Add-On Orchestration Proposal\nDESCRIPTION: YAML frontmatter defining metadata for the Cluster API add-on orchestration proposal document, including authors, reviewers, dates, and status.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220712-cluster-api-addon-orchestration.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Cluster API Add-Ons Orchestration\nauthors:\n  - \"@fabriziopandini\"\n  - \"@jont828\"\n  - \"@jackfrancis\"\nreviewers:\n  - \"@CecileRobertMichon\"\n  - \"@elmiko\"\n  - \"@g-gaston\"\n  - \"@enxebre\"\n  - \"@dlipovetsky\"\n  - \"@sbueringer\"\n  - \"@fabriziopandini\"\n  - \"@g-gaston\"\n  - \"@killianmuldoon\"\ncreation-date: 2022-07-12\nlast-updated: 2022-09-29\nstatus: implementable\nsee-also:\nreplaces:\nsuperseded-by:\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Metrics Configuration for Cluster API in Markdown\nDESCRIPTION: This snippet outlines the process for generating a metrics configuration file for Cluster API custom resources. It mentions the make target 'generate-metrics-config' and the output file '../crd-metrics-config.yaml'.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/config/metrics/templates/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Metrics\n\n**Disclaimer**: This is a temporary workaround. The long-term goal is to generate metric configuration from API type markers.\n\nThe make target `generate-metrics-config` is used to generate a single file which contains the Cluster API specific custom resource configuration for kube-state-metrics.\n\nTo regenerate the file `../crd-metrics-config.yaml`, execute the `make generate-metrics-config` command.\n```\n\n----------------------------------------\n\nTITLE: Markdown TOC Structure\nDESCRIPTION: Auto-generated table of contents for the contributing guidelines document using doctoc.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n```\n\n----------------------------------------\n\nTITLE: Displaying Detailed Release Information in Markdown\nDESCRIPTION: A markdown snippet that uses HTML details tag to create an expandable section containing more detailed information about the release.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CHANGELOG/v1.8.0-beta.1.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<details>\n<summary>More details about the release</summary>\n\n:warning: **BETA RELEASE NOTES** :warning:\n## 👌 Kubernetes version support\n\n- Management Cluster: v1.27.x -> v1.30.x\n- Workload Cluster: v1.25.x -> v1.30.x\n\n[More information about version support can be found here](https://cluster-api.sigs.k8s.io/reference/versions.html)\n\n## Changes since v1.7.0\n## :chart_with_upwards_trend: Overview\n- 285 new commits merged\n- 1 breaking change :warning:\n- 19 feature additions ✨\n- 40 bugs fixed 🐛\n\n## :warning: Breaking Changes\n- ClusterClass: Adjust CC & Cluster controller to block on variable conflicts, deprecate definitionFrom (#10841)\n\n## :sparkles: New Features\n- API: Add support negative polarity conditions (#10550)\n- API: Optimize rbac across controllers (#10552)\n- Bootstrap: Allow CAPBK to generate JoinConfiguration discovery kubeconfig (#10799)\n- CABPK: Add ExtraEnvs and ImagePullSerial to KubeadmConfig (#10846)\n- CABPK: Add kubeadm v1beta4 types (#10709)\n- ClusterCacheTracker: Add QPS & burst options & flags for ClusterCacheTracker (#10880)\n- ClusterClass: Add map key for MD/MP class & topology in ClusterClass & Cluster.spec.topology (#10808)\n- ClusterClass: Add metadata for top-level and nested variables & deprecate previous metadata field (#10778)\n- ClusterClass: Add variable validation to ClusterClass controller, block Cluster reconcile if variables not reconciled (#10812)\n- ClusterClass: Extend ControlPlane/ MD / MP builtin to include metadata (#10837)\n- ClusterClass: Introduce CEL for ClusterClass Variables (#9239)\n- ClusterClass: Support ControlPlane variable overrides (#10682)\n- e2e: Bump Kubernetes version used for testing to v1.30.0-rc.1 (#10384)\n- e2e: Bump Kubernetes version used for testing to v1.31.0-beta.0 (#10922)\n- MachinePool: Set Kubernetes version in machinepool machine Status.Version (#10849)\n- MachineSet: Add remediation strategy support in MachineDeployment (#10712)\n- Runtime SDK/ClusterClass: Extend cluster builtin to include UID (#10822)\n- Runtime SDK/ClusterClass: Fix GetObjectVariableInto util func (#10702)\n- Testing: Support e2e for WSL (#10402)\n\n## :bug: Bug Fixes\n- API: Cluster should be provisoned when cpRef and endpoint is set (#10873)\n- API: Re-add patch for events (#10695)\n- API: When infrastructureRef is nil, set InfrastructureReadyCondition to true (#10909)\n- CAPD: Don't add host ports to exposed ports of containers (#10657)\n- CAPD: Fix nil pointer in dockermachinepool controller (#10876)\n- CAPD: Verify lb config after writing it (#10453)\n- CI: Add for new linters to fix old syntax (#10699)\n- CI: Add tenv linter (#10689)\n- CI: Fix conversion-gen outside of GOPATH (#10502)\n- ClusterClass: Defaulting webhook should check class is set in ClusterClass-based clusters (#10671)\n- ClusterClass: Fix indexing in ClusterClass webhook MHC validation (#10672)\n- ClusterClass: Fix TestServerSideApplyWithDefaulting flakes (#10905)\n- clusterctl: Ensure cert-manager objects get applied before other provider objects (#10469)\n- clusterctl: Fix log in clusterctl move (#10540)\n- clusterctl: Verify that there is a release for the tag (#10220)\n- ClusterResourceSet: Correctly handle concurrent updates to ClusterResourceSetBinding (#10656)\n- ClusterResourceSet: Use separate cache for partial metadata watches on secrets to include all secrets (#10633)\n- Dependency: Use k8s.io/utils/ptr instead of k8s.io/utils/pointer (#10700)\n- e2e: Ensure all ownerRef assertions for some Kind are evaluated (#10590)\n- e2e: Filter cluster-wide objects asserted in ResourceVersion tests to exclude objects of parallel tests (#10560)\n- e2e: Fix kubetest to allow parallel execution on different clusters (#10424)\n- e2e: Kubetest: also gather junit reports in case of errors observed from ginkgo (#10493)\n- KCP: Delete out of date machines with unhealthy control plane component conditions when rolling out KCP (#10196)\n- KCP: Fix some KCP unit test flakes (#10711)\n- Machine: Machine deletion skips waiting for volumes detached for unreachable Nodes (#10662)\n- Machine: Speed up ignoring terminating Pods when draining unreachable Nodes (#10706)\n- MachineHealthCheck: Change MachineHealthCheck.spec.unhealthyConditions to optional (#9774)\n- MachineHealthCheck: Skip publishing the `RemediationRestricted` event when there are no unhealthy target (#10591)\n- MachinePool: Check that replicas pointer is not nil in machinepool controller (#10632)\n- MachineSet: Fix deletion priority to avoid deleting too many machines (#10087)\n- ClusterClass/MachineHealthCheck: Fix default namespace of RemediationTemplate for ClusterClass and Topology (#10843)\n- ClusterClass/MachineSet/MachineDeployment: MD/MS topo reconciler: only add finalizer for owned MD/MS (#10780)\n- KCP/CAPD: KCPTemplate & DockerClusterTemplate webhook: default before immutability check (#10638)\n- Runtime SDK: Topology: use raw input object for patch calculation in WalkTemplates (#10912)\n- Testing: Fix metadata assert failure in clusterclass rollout test (#10840)\n- Testing: Fix race condition in TestPatchHelper test (#10886)\n- util: Check errors for IsNotFound after patching spec and status (#10787)\n- util: Checking cert's keypair for nil before accessing to avoid panics (#10321)\n- util: Patch helper should be able to patch non-spec objects (#10824)\n- util: SSA: recover gvk after scheme.Convert (#10408)\n\n\n```\n\n----------------------------------------\n\nTITLE: Checking Kind Cluster Status\nDESCRIPTION: Command to check the status of the created kind cluster.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl cluster-info --context kind-capi-test\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Clusterctl Alpha Topology Plan Command\nDESCRIPTION: Shows the basic syntax for using the clusterctl alpha topology plan command to generate a plan based on input files and output the results to a specified directory.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/alpha-topology-plan.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl alpha topology plan -f input.yaml -o output/\n```\n\n----------------------------------------\n\nTITLE: Defining User Stories for MachinePool Machine Management\nDESCRIPTION: Table outlining key user stories (Cluster Autoscaler integration, machine remediation, rolling updates) driving the need for individual Machine representation within MachinePools.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220209-machinepool-machines.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n--------------------------------------------\n| ID | Story                               |\n|----|-------------------------------------|\n| U1 | Cluster Autoscaler                  |\n| U2 | MachinePool Machine Remediation     |\n| U3 | MachinePool Machine Rolling Updates |\n--------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Listing Added Dependencies in Markdown Format\nDESCRIPTION: A formatted list of new dependencies added to the Kubernetes Cluster API project, including GitHub repositories with their specific versions or commit hashes.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CHANGELOG/v1.8.0-beta.1.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Added\n- github.com/chromedp/cdproto: [3cf4e6d](https://github.com/chromedp/cdproto/tree/3cf4e6d)\n- github.com/chromedp/chromedp: [v0.9.2](https://github.com/chromedp/chromedp/tree/v0.9.2)\n- github.com/chromedp/sysutil: [v1.0.0](https://github.com/chromedp/sysutil/tree/v1.0.0)\n- github.com/fxamacker/cbor/v2: [v2.6.0](https://github.com/fxamacker/cbor/tree/v2.6.0)\n- github.com/go-task/slim-sprig/v3: [v3.0.0](https://github.com/go-task/slim-sprig/tree/v3.0.0)\n- github.com/gobwas/httphead: [v0.1.0](https://github.com/gobwas/httphead/tree/v0.1.0)\n- github.com/gobwas/pool: [v0.2.1](https://github.com/gobwas/pool/tree/v0.2.1)\n- github.com/gobwas/ws: [v1.2.1](https://github.com/gobwas/ws/tree/v1.2.1)\n- github.com/x448/float16: [v0.8.4](https://github.com/x448/float16/tree/v0.8.4)\n- golang.org/x/telemetry: f48c80b\n- k8s.io/gengo/v2: 51d4e06\n```\n\n----------------------------------------\n\nTITLE: Using Variable Overrides in Cluster Resource for AWS\nDESCRIPTION: Example of using the workerMachineType variable in a Cluster resource, demonstrating how to set cluster-wide values and override them for specific MachineDeployments.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: Cluster\nmetadata:\n  name: my-aws-cluster\nspec:\n  ...\n  topology:\n    class: aws-clusterclass-v0.1.0\n    version: v1.22.0\n    controlPlane:\n      replicas: 3\n    workers:\n      machineDeployments:\n      - class: \"default-worker\"\n        name: \"md-small-workers\"\n        replicas: 3\n        variables:\n          overrides:\n          # Overrides the cluster-wide value with t3.small.\n          - name: workerMachineType\n            value: t3.small\n      # Uses the cluster-wide value t3.large.\n      - class: \"default-worker\"\n        name: \"md-large-workers\"\n        replicas: 3\n    variables:\n    - name: workerMachineType\n      value: t3.large\n```\n\n----------------------------------------\n\nTITLE: New Dependencies List in Markdown\nDESCRIPTION: A markdown formatted list of newly added dependencies with their versions and repository links\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/hack/tools/release/notes/test/golden/v1.5.0.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Added\n- cloud.google.com/go/apigeeregistry: v0.6.0\n- cloud.google.com/go/apikeys: v0.6.0\n- github.com/adrg/xdg: [v0.4.0](https://github.com/adrg/xdg/tree/v0.4.0)\n- github.com/alecthomas/kingpin/v2: [v2.3.1](https://github.com/alecthomas/kingpin/tree/v2.3.1)\n- github.com/golang-jwt/jwt/v4: [v4.4.2](https://github.com/golang-jwt/jwt/tree/v4.4.2)\n- github.com/golangplus/bytes: [v1.0.0](https://github.com/golangplus/bytes/tree/v1.0.0)\n- github.com/golangplus/fmt: [v1.0.0](https://github.com/golangplus/fmt/tree/v1.0.0)\n- github.com/golangplus/testing: [v1.0.0](https://github.com/golangplus/testing/tree/v1.0.0)\n- github.com/google/s2a-go: [v0.1.3](https://github.com/google/s2a-go/tree/v0.1.3)\n- github.com/xhit/go-str2duration: [v1.2.0](https://github.com/xhit/go-str2duration/tree/v1.2.0)\n- sigs.k8s.io/kustomize/cmd/config: v0.11.1\n- sigs.k8s.io/kustomize/kustomize/v5: v5.0.1\n```\n\n----------------------------------------\n\nTITLE: Defining a VSphereMachine with IPAM in YAML for Cluster API\nDESCRIPTION: This snippet shows a VSphereMachine resource generated from a template using IPAM. It includes a reference to an IP Pool and an IPAddressClaim in its status.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220125-ipam-integration.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: infrastructure.cluster.x-k8s.io/v1alpha3\nkind: VSphereMachine\nmetadata:\n  name: example-1\n  namespace: vsphere-site1\nspec:\n  cloneMode: FullClone\n  numCPUs: 8\n  memoryMiB: 8192\n  diskGiB: 45\n  network:\n    devices:\n    - dhcp4: false\n      fromPool: # reference to the pool\n        group: ipam.cluster.x-k8s.io/v1alpha1\n        kind: IPPool\n        name: testpool\n  status:\n  network:\n    devices:\n      - claim:\n          name: example-1-1\n```\n\n----------------------------------------\n\nTITLE: Installing a clusterctl Plugin to PATH\nDESCRIPTION: Command to move the plugin executable to a directory in the system PATH. This makes the plugin available as a clusterctl command.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/plugins.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo mv ./clusterctl-foo /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudbase-init with UserData Support\nDESCRIPTION: Example configuration for cloudbase-init to read UserData containing cloud-init scripts. This is required for infrastructure providers to properly configure Windows nodes.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200804-windows-support.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[cloudbase-init with a metadata service](https://cloudbase-init.readthedocs.io/en/latest/services.html#configuring-available-services) that has support for [UserData](https://cloudbase-init.readthedocs.io/en/latest/userdata.html) ([example](https://cloudbase-init.readthedocs.io/en/latest/tutorial.html#configuration-file))\n```\n\n----------------------------------------\n\nTITLE: Defining InMemoryMachine in YAML\nDESCRIPTION: Example of an InMemoryMachine resource definition with behavior configurations for various components.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20250124-From CAPD(docker) to CAPD(dev) .md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: infrastructure.cluster.x-k8s.io/alpha1\nkind: InMemoryMachine\nmetadata:\n  name: in-memory-control-plane\nspec:\n  behaviour:\n    inMemory:\n      vm:\n        provisioning:\n          startupDuration: \"10s\"\n          startupJitter: \"0.2\"\n      node:\n        provisioning:\n          startupDuration: \"2s\"\n          startupJitter: \"0.2\"\n      apiServer:\n        provisioning:\n          startupDuration: \"2s\"\n          startupJitter: \"0.2\"\n      etcd:\n        provisioning:\n          startupDuration: \"2s\"\n          startupJitter: \"0.2\"\n```\n\n----------------------------------------\n\nTITLE: Updating Go Module Versions in Cluster API\nDESCRIPTION: This section lists Go modules whose versions were updated within the Cluster API project. Each line specifies the module path, followed by the previous version/commit hash and the new version/commit hash, indicating an upgrade.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CHANGELOG/v1.7.0.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- google.golang.org/genproto/googleapis/rpc: e6e6cda → 83a465c\n- google.golang.org/genproto: 007df8e → bbf56f3\n- google.golang.org/protobuf: v1.31.0 → v1.33.0\n- honnef.co/go/tools: v0.0.1-2020.1.4 → v0.0.1-2019.2.3\n- k8s.io/api: v0.28.4 → v0.29.3\n- k8s.io/apiextensions-apiserver: v0.28.4 → v0.29.3\n- k8s.io/apimachinery: v0.28.4 → v0.29.3\n- k8s.io/apiserver: v0.28.4 → v0.29.3\n- k8s.io/cli-runtime: v0.28.4 → v0.29.3\n- k8s.io/client-go: v0.28.4 → v0.29.3\n- k8s.io/cluster-bootstrap: v0.28.4 → v0.29.3\n- k8s.io/code-generator: v0.28.4 → v0.29.3\n- k8s.io/component-base: v0.28.4 → v0.29.3\n- k8s.io/component-helpers: v0.28.4 → v0.29.3\n- k8s.io/gengo: c0856e2 → 9cce18d\n- k8s.io/klog/v2: v2.100.1 → v2.110.1\n- k8s.io/kms: v0.28.4 → v0.29.3\n- k8s.io/kube-openapi: 2695361 → 2dd684a\n- k8s.io/kubectl: v0.28.4 → v0.29.3\n- k8s.io/metrics: v0.28.4 → v0.29.3\n- k8s.io/utils: d93618c → b307cd5\n- sigs.k8s.io/apiserver-network-proxy/konnectivity-client: v0.1.2 → v0.28.0\n- sigs.k8s.io/controller-runtime: v0.16.3 → v0.17.3\n- sigs.k8s.io/structured-merge-diff/v4: v4.2.3 → v4.4.1\n```\n\n----------------------------------------\n\nTITLE: JSON Patch Array Handling - Create New Slice\nDESCRIPTION: Example showing how to create a new array using JSON patches in ClusterClass configuration.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\nmetadata:\n  name: my-clusterclass\nspec:\n  ...\n  patches:\n  - name: add file\n    definitions:\n    - selector:\n        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1\n        kind: KubeadmConfigTemplate\n      jsonPatches:\n      - op: add\n        path: /spec/template/spec/files\n        value:\n        - content: Some content.\n          path: /some/file\n---\napiVersion: bootstrap.cluster.x-k8s.io/v1beta1\nkind: KubeadmConfigTemplate\nmetadata:\n  name: \"quick-start-default-worker-bootstraptemplate\"\nspec:\n  template:\n    spec:\n      ...\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown Table of Contents for Cluster API Documentation\nDESCRIPTION: This code snippet represents a markdown-formatted table of contents for the Cluster API documentation. It includes hierarchical links to various sections and subsections of the documentation.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/SUMMARY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Summary\n\n[Introduction](./introduction.md)\n[Quick Start](./user/quick-start.md)\n[Quick Start Operator](./user/quick-start-operator.md)\n[Concepts](./user/concepts.md)\n[Manifesto](./user/manifesto.md)\n- [Tasks](./tasks/index.md)\n    - [Certificate Management](./tasks/certs/index.md)\n        - [Using Custom Certificates](./tasks/certs/using-custom-certificates.md)\n        - [Generating a Kubeconfig](./tasks/certs/generate-kubeconfig.md)\n        - [Auto Rotate Certificates in KCP](./tasks/certs/auto-rotate-certificates-in-kcp.md)\n    - [Bootstrap](./tasks/bootstrap/index.md)\n        - [Kubeadm based bootstrap](./tasks/bootstrap/kubeadm-bootstrap/index.md)\n            - [Kubelet configuration](./tasks/bootstrap/kubeadm-bootstrap/kubelet-config.md)\n        - [MicroK8s based bootstrap](./tasks/bootstrap/microk8s-bootstrap.md)\n    - [Upgrading management and workload clusters](./tasks/upgrading-clusters.md)\n    - [External etcd](./tasks/external-etcd.md)\n    - [Using kustomize](./tasks/using-kustomize.md)\n    - [Upgrading Cluster API components](./tasks/upgrading-cluster-api-versions.md)\n    - [Control plane management](./tasks/control-plane/index.md)\n        - [Kubeadm based control plane management](./tasks/control-plane/kubeadm-control-plane.md)\n        - [MicroK8s based control plane management](./tasks/control-plane/microk8s-control-plane.md)\n    - [Updating Machine Infrastructure and Bootstrap Templates](tasks/updating-machine-templates.md)\n    - [Workload bootstrap using GitOps](tasks/workload-bootstrap-gitops.md)\n    - [Automated Machine management](./tasks/automated-machine-management/index.md)\n      - [Scaling](./tasks/automated-machine-management/scaling.md)\n      - [Autoscaling](./tasks/automated-machine-management/autoscaling.md)\n      - [Healthchecking](./tasks/automated-machine-management/healthchecking.md)\n      - [Machine deletion process](./tasks/automated-machine-management/machine_deletions.md)\n    - [Experimental Features](./tasks/experimental-features/experimental-features.md)\n        - [MachinePools](./tasks/experimental-features/machine-pools.md)\n        - [MachineSetPreflightChecks](./tasks/experimental-features/machineset-preflight-checks.md)\n        - [ClusterClass](./tasks/experimental-features/cluster-class/index.md)\n            - [Writing a ClusterClass](./tasks/experimental-features/cluster-class/write-clusterclass.md)\n            - [Changing a ClusterClass](./tasks/experimental-features/cluster-class/change-clusterclass.md)\n            - [Operating a managed Cluster](./tasks/experimental-features/cluster-class/operate-cluster.md)\n        - [Runtime SDK](tasks/experimental-features/runtime-sdk/index.md)\n            - [Implementing Runtime Extensions](./tasks/experimental-features/runtime-sdk/implement-extensions.md)\n            - [Implementing Lifecycle Hook Extensions](./tasks/experimental-features/runtime-sdk/implement-lifecycle-hooks.md)\n            - [Implementing Topology Mutation Hook Extensions](./tasks/experimental-features/runtime-sdk/implement-topology-mutation-hook.md)\n            - [Deploying Runtime Extensions](./tasks/experimental-features/runtime-sdk/deploy-runtime-extension.md)\n        - [Ignition Bootstrap configuration](./tasks/experimental-features/ignition.md)\n    - [Running multiple providers](./tasks/multiple-providers.md)\n    - [Verification of Container Images](./tasks/verify-container-images.md)\n    - [Diagnostics](./tasks/diagnostics.md)\n    - [ClusterResourceSet](./tasks/cluster-resource-set.md)\n- [Security Guidelines](./security/index.md)\n    - [Pod Security Standards](./security/pod-security-standards.md)\n- [clusterctl CLI](./clusterctl/overview.md)\n    - [clusterctl Commands](clusterctl/commands/commands.md)\n        - [init](clusterctl/commands/init.md)\n        - [generate cluster](clusterctl/commands/generate-cluster.md)\n        - [generate provider](clusterctl/commands/generate-provider.md)\n        - [generate yaml](clusterctl/commands/generate-yaml.md)\n        - [get kubeconfig](clusterctl/commands/get-kubeconfig.md)\n        - [describe cluster](clusterctl/commands/describe-cluster.md)\n        - [move](./clusterctl/commands/move.md)\n        - [upgrade](clusterctl/commands/upgrade.md)\n        - [delete](clusterctl/commands/delete.md)\n        - [completion](clusterctl/commands/completion.md)\n        - [alpha rollout](clusterctl/commands/alpha-rollout.md)\n        - [alpha topology plan](clusterctl/commands/alpha-topology-plan.md)\n        - [additional commands](clusterctl/commands/additional-commands.md)\n    - [clusterctl Configuration](clusterctl/configuration.md)\n    - [clusterctl for Developers](clusterctl/developers.md)\n    - [clusterctl Extensions with Plugins](clusterctl/plugins.md)\n- [Developer Guide](./developer/getting-started.md)\n    - [Developing \"core\" Cluster API](developer/core/overview.md)\n        - [Rapid iterative development with Tilt](developer/core/tilt.md)\n        - [Repository Layout](developer/core/repository-layout.md)\n        - [Controllers](./developer/core/controllers/overview.md)\n          - [Cluster](./developer/core/controllers/cluster.md)\n          - [ClusterTopology](./developer/core/controllers/cluster-topology.md) \n          - [ClusterResourceSet](./developer/core/controllers/cluster-resource-set.md)\n          - [MachineDeployment](./developer/core/controllers/machine-deployment.md)\n          - [MachineSet](./developer/core/controllers/machine-set.md)  \n          - [Machine](./developer/core/controllers/machine.md)\n          - [MachinePool](./developer/core/controllers/machine-pool.md)\n          - [MachineHealthCheck](./developer/core/controllers/machine-health-check.md)\n        - [Logging](developer/core/logging.md)\n        - [Testing](developer/core/testing.md)\n        - [Developing E2E tests](developer/core/e2e.md)\n        - [Tuning controllers](./developer/core/tuning.md) \n        - [Support multiple instances](./developer/core/support-multiple-instances.md)\n    - [Developing providers](./developer/providers/overview.md)\n        - [Getting started](developer/providers/getting-started/overview.md)\n          - [Naming](developer/providers/getting-started/naming.md)\n          - [Initialize Repo and API types](developer/providers/getting-started/initialize-repo-and-api-types.md)\n          - [Implement API types](developer/providers/getting-started/implement-api-types.md)\n          - [Webhooks](developer/providers/getting-started/webhooks.md)\n          - [Controllers and Reconciliation](developer/providers/getting-started/controllers-and-reconciliation.md)\n          - [Configure the provider manifest](developer/providers/getting-started/configure-the-deployment.md)\n          - [Building, Running, Testing](developer/providers/getting-started/building-running-and-testing.md)\n        - [Provider contracts](developer/providers/contracts/overview.md)\n          - [InfraCluster](./developer/providers/contracts/infra-cluster.md)\n          - [InfraMachine](developer/providers/contracts/infra-machine.md)\n          - [BootstrapConfig](developer/providers/contracts/bootstrap-config.md)\n          - [ControlPlane](developer/providers/contracts/control-plane.md)\n          - [clusterctl](developer/providers/contracts/clusterctl.md)\n          - [IPAM](developer/providers/contracts/ipam.md)\n        - [Best practices](./developer/providers/best-practices.md)\n        - [Security guidelines](./developer/providers/security-guidelines.md)\n        - [Version migration](developer/providers/migrations/overview.md)\n          - [v1.8 to v1.9](./developer/providers/migrations/v1.8-to-v1.9.md)\n          - [v1.9 to v1.10](./developer/providers/migrations/v1.9-to-v1.10.md)\n          - [v1.10 to v1.11](./developer/providers/migrations/v1.10-to-v1.11.md)        \n- [Troubleshooting](./user/troubleshooting.md)\n- [Reference](./reference/reference.md)\n    - [API Reference](./reference/api/reference.md)\n      - [Labels and Annotations](reference/api/labels-and-annotations.md)\n      - [CRD relationships](reference/api/crd-relationships.md)\n      - [Metadata propagation](reference/api/metadata-propagation.md)\n      - [Owner References](reference/api/owner-references.md)\n    - [Glossary](./reference/glossary.md)\n    - [Provider List](./reference/providers.md)\n    - [Ports](./reference/ports.md)\n    - [Code of Conduct](./code-of-conduct.md)\n    - [Contributing](./CONTRIBUTING.md)\n    - [Code Review in Cluster API](./REVIEWING.md)\n    - [Version Support](./reference/versions.md)\n```\n\n----------------------------------------\n\nTITLE: Defining DevMachine with Docker Backend in YAML\nDESCRIPTION: Example of a DevMachine resource definition using the docker backend, equivalent to the DockerMachine example.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20250124-From CAPD(docker) to CAPD(dev) .md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: infrastructure.cluster.x-k8s.io/v1beta1\nkind: DevMachine\nmetadata:\n  name: controlplane\nspec:\n  backend:\n    docker:\n      extraMounts:\n        - containerPath: \"/var/run/docker.sock\"\n          hostPath: \"/var/run/docker.sock\"\n```\n\n----------------------------------------\n\nTITLE: Highlighting Release Features in Markdown\nDESCRIPTION: A markdown snippet that lists the main highlights of the release, including new feature additions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CHANGELOG/v1.8.0-beta.1.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Highlights\n* Add kubeadm v1beta4 types\n* Add support negative polarity conditions\n```\n\n----------------------------------------\n\nTITLE: Building a Specific Cluster API Component\nDESCRIPTION: Command to build a specific component of Cluster API, in this case the Kubeadm control plane component, showing how to focus builds on particular parts of the project.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd cluster-api\ncd controlplane/kubeadm\nmake docker-build\n```\n\n----------------------------------------\n\nTITLE: Defining MachinePool Failed Phase Constant\nDESCRIPTION: Defines the constant for the Failed phase, indicating the MachinePool requires user intervention.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20190919-machinepool-api.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// MachinePoolPhaseFailed is the MachinePool state when the system\n// might require user intervention.\nMachinePoolPhaseFailed = MachinePoolPhase(\"failed\")\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: Metadata configuration for the proposal document, including authors, reviewers, dates and status.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20210310-opt-in-autoscaling-from-zero.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Opt-in Autoscaling from Zero\nauthors:\n  - \"@elmiko\"\nreviewers:\n  - \"@fabriziopandini\"\n  - \"@sbueringer\"\n  - \"@marcelmue\"\n  - \"@alexander-demichev\"\n  - \"@enxebre\"\n  - \"@mrajashree\"\n  - \"@arunmk\"\n  - \"@randomvariable\"\n  - \"@joelspeed\"\ncreation-date: 2021-03-10\nlast-updated: 2024-09-12\nstatus: implementable\n---\n```\n\n----------------------------------------\n\nTITLE: Running Docker Infrastructure Unit Tests via Makefile - Makefile\nDESCRIPTION: This snippet demonstrates how to execute CAPD-related unit tests within a Docker-based development environment using the Makefile command 'make test-docker-infrastructure'. All dependencies for running the tests, including building a Docker image from current local sources, will be handled automatically by this target. It requires GNU Make and Docker to be present, and expects the command to be run from the top-level directory of the Cluster API project. The target is tailored for development and test environments, not production.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/test/infrastructure/docker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake test-docker-infrastructure\n```\n\n----------------------------------------\n\nTITLE: Displaying Beta Release Warning in Markdown\nDESCRIPTION: This snippet uses Markdown syntax to create a collapsible section with a warning about the beta release status and instructions for reporting issues.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CHANGELOG/v1.10.0-beta.0.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n🚨 This is a BETA RELEASE. Use it only for testing purposes. If you find any bugs, file an [issue](https://github.com/kubernetes-sigs/cluster-api/issues/new).\n\n<details>\n<summary>More details about the release</summary>\n\n:warning: **BETA RELEASE NOTES** :warning:\n```\n\n----------------------------------------\n\nTITLE: Example YAML Title Block\nDESCRIPTION: YAML frontmatter block containing metadata about the proposal including authors, reviewers, dates and status.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220411-cluster-api-state-metrics.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Cluster API State Metrics\nauthors:\n  - \"@tobiasgiese\"\n  - \"@chrischdi\"\nreviewers:\n  - \"@johannesfrey\"\n  - \"@enxebre\"\n  - \"@sbueringer\"\n  - \"@apricote\"\n  - \"@fabriziopandini\"\ncreation-date: 2022-03-03\nlast-updated: 2022-09-07\nstatus: experimental\n---\n```\n\n----------------------------------------\n\nTITLE: Declaring Machine Health Condition Types in Cluster API Controller (Go)\nDESCRIPTION: This Go code snippet declares two constants (ConditionHealthCheckSucceeded and ConditionOwnerRemediated) representing custom condition types used by the MachineHealthCheck (MHC) controller. These signify whether MHC health checks have passed and whether remediation by the owner controller has succeeded. The constants are used within controller logic to mark machine status and are dependent on the controller-runtime, Cluster API codebase, and proper struct definitions for custom conditions. Inputs are health check results; outputs are updated machine conditions. The constants are limited to Go-based controllers that implement Cluster API patterns.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20191030-machine-health-checking.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nconst ConditionHealthCheckSucceeded ConditionType = \\\"HealthCheckSucceeded\\\"\\nconst ConditionOwnerRemediated ConditionType = \\\"OwnerRemediated\\\"\\n\n```\n\n----------------------------------------\n\nTITLE: Cluster Variable Change Diff\nDESCRIPTION: Difference showing the variable value change in cluster yaml\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/operate-cluster.md#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n   spec:\n     topology:\n       variables:\n       - name: imageRepository\n         value: registry.k8s.io\n       - name: etcdImageTag\n         value: \"\"\n       - name: coreDNSImageTag\n+        value: \"3.5.0\"\n-        value: \"\"\n\n```\n\n----------------------------------------\n\nTITLE: Removing All Generated Files (bash)\nDESCRIPTION: Executes the `clean` make target to remove all generated artifacts from the project build process. This is necessary, for example, to ensure fresh versions of Helm charts are fetched when using `deploy_observability`.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nmake clean\n```\n\n----------------------------------------\n\nTITLE: Implementing RollingUpdate Configuration Struct\nDESCRIPTION: Defines the RollingUpdate struct that controls the behavior of rolling updates, including MaxSurge parameter for controlling scaling.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20191017-kubeadm-based-control-plane.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// RollingUpdate is used to control the desired behavior of rolling update.\ntype RollingUpdate struct {\n  // The maximum number of control planes that can be scheduled above or under the\n  // desired number of control planes.\n  // Value can be an absolute number 1 or 0.\n  // Defaults to 1.\n  // Example: when this is set to 1, the control plane can be scaled\n  // up immediately when the rolling update starts.\n  // +optional\n  MaxSurge *intstr.IntOrString `json:\"maxSurge,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Issue Triage Process Table in Markdown\nDESCRIPTION: A markdown table that documents the issue triage process in Cluster API, showing the phases, responsible parties, and requirements to move issues forward through the triage workflow.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Phase               | Responsible | What is required to move forward                                                                                                                                                                          |\n|---------------------|-------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Initial triage      | Maintainers | The issue MUST have: <br/> - [priority/*](https://github.com/kubernetes-sigs/cluster-api/labels?q=priority) label<br/>- [kind/*](https://github.com/kubernetes-sigs/cluster-api/labels?q=kind) label<br/> |\n| Triage finalization | Everyone    | There should be consensus on the way forward and enough details for the issue being actionable                                                                                                            |\n| Triage finalization | Maintainers | The issue MUST have: <br/> - `triage/accepted` label<br/> label, plus eventually `help` or `good-first-issue` label                                                                                       |\n| Actionable          | Everyone    | Contributors volunteering time to do the work and reviewers/approvers bandwidth<br/>The issue being fixed                                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Sample kubectl Get Nodes Output (Bash)\nDESCRIPTION: This snippet is example output from 'kubectl get nodes', illustrating node name, status, role, and version. It allows the user to verify expected nodes are present and ready, confirming successful workload cluster deployment. It is not executable; for documentation only.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/ignition.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nNAME                                            STATUS   ROLES                  AGE   VERSION\\nip-10-0-122-154.us-east-1.compute.internal   Ready    control-plane,master   14m   v1.22.2\\nip-10-0-127-59.us-east-1.compute.internal    Ready    <none>                 13m   v1.22.2\\nip-10-0-89-169.us-east-1.compute.internal    Ready    <none>                 13m   v1.22.2\\n\n```\n\n----------------------------------------\n\nTITLE: Variable Values in JSON Patches for ClusterClass\nDESCRIPTION: Demonstrates how to use variable values and templates in ClusterClass JSON patches for configuring etcd image tags and image repositories.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\nmetadata:\n  name: docker-clusterclass-v0.1.0\nspec:\n  ...\n  patches:\n  - name: etcdImageTag\n    definitions:\n    - selector:\n      ...\n      jsonPatches:\n      - op: add\n        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd\n        valueFrom:\n          template: |\n            local:\n              imageTag: {{ .etcdImageTag }}\n  - name: imageRepository\n    definitions:\n    - selector:\n      ...\n      jsonPatches:\n      - op: add\n        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository\n        value: \"my.custom.registry\"\n```\n\n----------------------------------------\n\nTITLE: Generating Email Release Announcement for Cluster API\nDESCRIPTION: This template is used to create an email announcement for a new Cluster API patch release. It includes placeholders for version numbers, commit counts, and bug fixes.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/release/release-templates.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nHello everyone,\n\nCluster API patch version vX.Y.Z has been released!\n\nThis release was focused on improving existing features and stability of CAPI. \nThere were a total of A commits and B bugs fixed by our awesome contributors! Kudos!\n\nBelow is the release note of the vX.Y.Z patch release:\n- https://github.com/kubernetes-sigs/cluster-api/releases/tag/vX.Y.Z\n\nThanks to all our contributors!\n\nBest, \nCAPI Release Team\n```\n\n----------------------------------------\n\nTITLE: Machine Status Structure Definition\nDESCRIPTION: Defines the structure for tracking Machine status including version and readiness states.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20190610-machine-states-preboot-bootstrapping.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype MachineStatus struct\n```\n\n----------------------------------------\n\nTITLE: Displaying Beta Release Warning in Markdown\nDESCRIPTION: A markdown snippet that displays a warning message about the beta release status and instructions for reporting issues.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CHANGELOG/v1.8.0-beta.1.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n🚨 This is a BETA RELEASE. Use it only for testing purposes. If you find any bugs, file an [issue](https://github.com/kubernetes-sigs/cluster-api/issues/new).\n```\n\n----------------------------------------\n\nTITLE: Machine Phase Deleted Definition\nDESCRIPTION: Defines the deleted state when Machine and related infrastructure are deleted and ready for garbage collection.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20190610-machine-states-preboot-bootstrapping.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// MachinePhaseDeleted is the Machine state when the object\n// and the related infrastructure is deleted and\n// ready to be garbage collected by the API Server.\nMachinePhaseDeleted = MachinePhaseType(\"deleted\")\n```\n\n----------------------------------------\n\nTITLE: Fixing Kubeconfig for Docker Desktop Workload Clusters\nDESCRIPTION: Command to modify the kubeconfig to use the correct load balancer port when working with Docker Desktop on macOS or Windows.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/developers.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsed -i -e \"s/server:.*/server: https:\\/\\/$(docker port capi-quickstart-lb 6443/tcp | sed \"s/0.0.0.0/127.0.0.1/\")/g\" ./capi-quickstart.kubeconfig\n```\n\n----------------------------------------\n\nTITLE: Machine Phase Deleting Definition\nDESCRIPTION: Defines the deleting state when a delete request has been sent but infrastructure still exists.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20190610-machine-states-preboot-bootstrapping.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// MachinePhaseDeleting is the Machine state when a delete\n// request has been sent to the API Server,\n// but its infrastructure has not yet been fully deleted.\nMachinePhaseDeleting = MachinePhaseType(\"deleting\")\n```\n\n----------------------------------------\n\nTITLE: Handling Failure Domain in FooMachineStatus\nDESCRIPTION: This snippet defines how failure domains are represented in FooMachine status. Failure domains are key for placing machines in specified zones or environments. The optional 'FailureDomain' string field captures this in the struct. This snippet reflects the handling of failure domains in Cluster API using Go.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/infra-machine.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype FooMachineStatus struct {\n    // failureDomain is the unique identifier of the failure domain where this Machine has been placed in.\n    // For this Foo infrastructure provider, the name is equivalent to the name of one of the available regions.\n    FailureDomain *string `json:\"failureDomain,omitempty\"`\n\n    // See other rules for more details about mandatory/optional fields in InfraMachineStatus.\n    // Other fields SHOULD be added based on the needs of your provider.\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Go Module Dependencies from Cluster API\nDESCRIPTION: This section lists Go modules that were removed as dependencies from the Cluster API project. Each line indicates the module path and the specific version that was removed.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CHANGELOG/v1.7.0.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n- github.com/benbjohnson/clock: [v1.3.0](https://github.com/benbjohnson/clock/tree/v1.3.0)\n- github.com/docker/distribution: [v2.8.3+incompatible](https://github.com/docker/distribution/tree/v2.8.3)\n- github.com/google/martian/v3: [v3.1.0](https://github.com/google/martian/tree/v3.1.0)\n- github.com/minio/highwayhash: [v1.0.2](https://github.com/minio/highwayhash/tree/v1.0.2)\n- github.com/nats-io/jwt/v2: [v2.4.1](https://github.com/nats-io/jwt/tree/v2.4.1)\n- go.opentelemetry.io/otel/exporters/otlp/internal/retry: v1.10.0\n```\n\n----------------------------------------\n\nTITLE: YAML Document Header Structure\nDESCRIPTION: YAML frontmatter defining metadata for the proposal document, including authors, reviewers, status and related documents.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20210210-insulate-users-from-kubeadm-API-changes.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Insulate users from kubeadm API version changes\nauthors:\n- \"@fabriziopandini\"\nreviewers:\n- \"@vincepri\"\ncreation-date: 2021-02-10\nlast-updated: 2021-02-10\nstatus: implementable\nsee-also:\n- \"/docs/proposals/20190610-machine-states-preboot-bootstrapping.md\"\nreplaces:\nsuperseded-by:\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring ClusterClass with External Patches\nDESCRIPTION: YAML configuration showing how to define external and inline patches in a ClusterClass specification. Demonstrates setting up extension references and custom settings.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220330-topology-mutation-hook.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\nmetadata:\n  name: quick-start\nspec:\n  patches:\n  - name: external-patch-1\n    external:\n      generateExtension: \"http-proxy.my-awesome-patch\"\n      discoverVariablesExtension: \"variables.my-awesome-patch\"\n      validateExtension: \"http-proxy-validate.my-awesome-patch\"\n      settings:\n        firstSetting: \"red\"\n        secondSettings: \"blue\"\n  - name: region\n    definitions:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring cert-manager URL in clusterctl config file\nDESCRIPTION: YAML configuration to override the cert-manager repository URL in the clusterctl config file to resolve cert-manager download issues.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/troubleshooting.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncert-manager:\n  url: \"https://github.com/cert-manager/cert-manager/releases/latest/cert-manager.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Apache License and Copyright in Go Source Files - Plaintext\nDESCRIPTION: This snippet specifies the copyright ownership and Apache License, Version 2.0 terms for Kubernetes source code. It must be included in all source files to inform users of copyright rights, distribution limitations, and warranty exclusions. No dependencies or parameters are required; the snippet is purely for legal and informational purposes and should appear at the top of source files.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/exp/hack/boilerplate.go.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/*\nCopyright The Kubernetes Authors.\n\nLicensed under the Apache License, Version 2.0 (the \\\"License\\\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \\\"AS IS\\\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n```\n\n----------------------------------------\n\nTITLE: Configuring MetalLB IP Address Pool for KubeVirt\nDESCRIPTION: This script sets up the IP address pool for MetalLB by detecting the kind network subnet and creating the necessary IPAddressPool and L2Advertisement resources.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nSUBNET=$(docker network inspect -f '{{range .IPAM.Config}}{{if .Gateway}}{{.Subnet}}{{end}}{{end}}' kind)\nPREFIX=$(echo $SUBNET | sed -E 's|^([0-9]+\\.[0-9]+)\\..*$|\\1|g')\n\ncat <<EOF | kubectl apply -f -\napiVersion: metallb.io/v1beta1\nkind: IPAddressPool\nmetadata:\n  name: capi-ip-pool\n  namespace: metallb-system\nspec:\n  addresses:\n  - ${PREFIX}.255.200-${PREFIX}.255.250\n---\napiVersion: metallb.io/v1beta1\nkind: L2Advertisement\nmetadata:\n  name: empty\n  namespace: metallb-system\nEOF\n```\n\n----------------------------------------\n\nTITLE: Retrieving Owner Cluster with Cluster API Helper\nDESCRIPTION: Code to retrieve the owner Cluster object for a MailgunCluster using the Cluster API utility functions, which is necessary for proper reconciliation in the Cluster API context.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/controllers-and-reconciliation.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n    cluster, err := util.GetOwnerCluster(ctx, r.Client, &mg)\n    if err != nil {\n        return ctrl.Result{}, err\n    \n    }\n```\n\n----------------------------------------\n\nTITLE: Example Output of kubectl get kubeadmcontrolplane\nDESCRIPTION: Shows the expected tabular output when running `kubectl get kubeadmcontrolplane`. The columns (NAMESPACE, NAME, INITIALIZED, etc.) correspond to the `additionalPrinterColumns` defined for the `KubeadmControlPlane` CRD, illustrating the structured information presented to users.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nNAMESPACE            NAME                               INITIALIZED   API SERVER AVAILABLE   REPLICAS   READY   UPDATED   UNAVAILABLE   AGE     VERSION\nquick-start-d5ufye   quick-start-ntysk0-control-plane   true          true                   1          1       1                       2m44s   v1.23.3\n```\n\n----------------------------------------\n\nTITLE: Docker Image Verification for Production Registry Pull\nDESCRIPTION: This snippet showcases how to verify that Docker images are available in the production registry of Cluster API by pulling them using their tags. Dependencies include Docker installed and configured to access the Kubernetes production registry.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/release/role-handbooks/release-lead/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull registry.k8s.io/cluster-api/clusterctl:${RELEASE_TAG} &&\ndocker pull registry.k8s.io/cluster-api/cluster-api-controller:${RELEASE_TAG} &&\ndocker pull registry.k8s.io/cluster-api/kubeadm-bootstrap-controller:${RELEASE_TAG} &&\ndocker pull registry.k8s.io/cluster-api/kubeadm-control-plane-controller:${RELEASE_TAG}\n```\n\n----------------------------------------\n\nTITLE: Defining MachineSet Status Structure in Golang\nDESCRIPTION: Golang struct definition for MachineSetStatus that includes ready replicas, available replicas, up-to-date replicas, and conditions. This updated structure removes FailureReason and FailureMessage fields and aligns with new Kubernetes API conventions.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20240916-improve-status-in-CAPI-resources.md#2025-04-22_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\ntype MachineSetStatus struct {\n\n    // The number of ready replicas for this MachineSet. A machine is considered ready when Machine's Ready condition is true.\n    // +optional\n    ReadyReplicas *int32 `json:\"readyReplicas,omitempty\"`\n\t\n    // The number of available replicas for this MachineSet. A machine is considered available when Machine's Available condition is true.\n    // +optional\n    AvailableReplicas *int32 `json:\"availableReplicas,omitempty\"`\n\n    // The number of up-to-date replicas for this MachineSet. A machine is considered up-to-date when Machine's UpToDate condition is true.\n    // +optional\n    UpToDateReplicas *int32 `json:\"upToDateReplicas,omitempty\"`\n\n    // Represents the observations of a MachineSet's current state.\n    // +optional\n    // +listType=map\n    // +listMapKey=type\n    // +kubebuilder:validation:MaxItems=32\n    Conditions []metav1.Condition `json:\"conditions,omitempty\"`\n\n    // Other fields...\n    // NOTE: `FailureReason`, `FailureMessage` fields won't be there anymore\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Version Fields in ControlPlane Spec for Cluster API\nDESCRIPTION: Required fields for controlling Kubernetes version in ControlPlane spec. The version field must be a valid semantic version, and the provider should add the 'v' prefix if not provided by the user.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/contracts/control-plane.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype FooControlPlaneSpec struct {\n    // version defines the desired Kubernetes version for the control plane. \n    // The value must be a valid semantic version; also if the value provided by the user does not start with the v prefix, it\n    // must be added.\n    Version string `json:\"version\"`\n    \n    // See other rules for more details about mandatory/optional fields in ControlPlane spec.\n    // Other fields SHOULD be added based on the needs of your provider.\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Providers\nDESCRIPTION: Commands for installing cloud provider components including Azure and OpenStack configurations.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_79\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --kubeconfig=./capi-quickstart.kubeconfig --repo https://raw.githubusercontent.com/kubernetes-sigs/cloud-provider-azure/master/helm/repo cloud-provider-azure --generate-name --set infra.clusterName=capi-quickstart --set cloudControllerManager.clusterCIDR=\"192.168.0.0/16\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ncat > cloud.conf <<EOF\n[Global]\nauth-url=<your_auth_url>\napplication-credential-id=<your_credential_id>\napplication-credential-secret=<your_credential_secret>\nregion=<your_region>\ndomain-name=<your_domain_name>\nEOF\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --kubeconfig=./capi-quickstart.kubeconfig -n kube-system create secret generic cloud-config --from-file=cloud.conf\n```\n\n----------------------------------------\n\nTITLE: Example AfterControlPlaneInitialized Response (YAML)\nDESCRIPTION: This YAML snippet shows an example response payload for the `AfterControlPlaneInitialized` hook. It includes the API version, kind, status (Success or Failure), and an optional message. Since this hook is non-blocking, it does not include a `retryAfterSeconds` field.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/runtime-sdk/implement-lifecycle-hooks.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: hooks.runtime.cluster.x-k8s.io/v1alpha1\nkind: AfterControlPlaneInitializedResponse\nstatus: Success # or Failure\nmessage: \"error message if status == Failure\"\n```\n\n----------------------------------------\n\nTITLE: Setting Experimental Feature Flags in clusterctl Config File - YAML\nDESCRIPTION: This snippet shows how to configure experimental feature flags in the clusterctl YAML config file for persistent environment variable substitution. This allows enabling features across clusterctl invocations without needing to set shell variables repeatedly. Dependencies: valid clusterctl config file (default at $XDG_CONFIG_HOME/cluster-api/clusterctl.yaml). Parameter: feature gate name(s) with corresponding string value. Input: YAML key-value pairs for feature flags. Output: clusterctl will substitute feature gates from this file. In the presence of both environment variable and config file, the environment variable takes precedence.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/experimental-features.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Values for environment variable substitution\nEXP_SOME_FEATURE_NAME: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Defining GCP Managed Kubernetes Control Plane Specification in Go\nDESCRIPTION: This Go snippet defines the GCPManagedControlPlaneSpec struct, detailing configuration fields necessary for creating a GKE-managed control plane within the Cluster API framework. It requires the Go programming language, relevant type imports, and assumes the use of controller-runtime and CAPI's custom resource definitions. Key properties include project ID, networking, add-on configuration, logging, alpha features toggle, and the API endpoint. The struct is designed to be serialized as part of a Kubernetes CRD and consumed by the provider controllers.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220725-managed-kubernetes.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype GCPManagedControlPlaneSpec struct {\n    // Project is the name of the project to deploy the cluster to.\n    Project string `json:\"project\"`\n\n    // NetworkSpec encapsulates all things related to the GCP network.\n    // +optional\n    Network NetworkSpec `json:\"network\"`\n\n    // AddonsConfig defines the addons to enable with the GKE cluster.\n    // +optional\n    AddonsConfig *AddonsConfig `json:\"addonsConfig,omitempty\"`\n\n    // Logging contains the logging configuration for the GKE cluster.\n    // +optional\n    Logging *ControlPlaneLoggingSpec `json:\"logging,omitempty\"`\n\n    // EnableKubernetesAlpha will indicate the kubernetes alpha features are enabled\n    // +optional\n    EnableKubernetesAlpha bool\n\n    // ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.\n    // +optional\n    ControlPlaneEndpoint clusterv1.APIEndpoint `json:\"controlPlaneEndpoint\"`\n    ....\n}\n\n```\n\n----------------------------------------\n\nTITLE: YamlProcessor Interface Definition\nDESCRIPTION: Interface definition for the YamlProcessor that defines three key methods - ArtifactName for template retrieval, GetVariables for parsing required variables, and Process for generating final manifests.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200511-clusterctl-extensible-template-processing.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype YamlProcessor interface {\n    ArtifactName(flavor string) string\n    GetVariables(data []byte) []string \n    Process(data []byte, variablesGetter VariablesGetter) ([]byte, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cluster API Sequence Diagram in PlantUML-like Syntax\nDESCRIPTION: This code snippet defines a sequence diagram using a syntax similar to PlantUML. It outlines the interactions between various components in the Cluster API ecosystem, including the creation and deletion of infrastructure machines and IP address management.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/images/ipam-integration/sequence.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://sequencediagram.org\n\nparticipant \"Cluster API\" as capi\n\nentity \"Infra Machine\" as machine\n\nparticipant \"Infra Provider\" as infra\n\nentity \"IPAddressClaim\" as claim\nentity \"IPAddress\" as address\n\nparticipant \"IPAM Provider\" as ipam\n\ncapi->*machine: creates\n\nmachine-->(1)infra:\nactivate infra\n\ninfra->machine: reconciles\n\ninfra->*claim: creates claim\n\nclaim-->(1)ipam:\nactivate ipam\nipam->claim: reconcile\nipam->ipam: allocate address\nipam->*address: create\\naddress\nipam->claim: update status\ndeactivate ipam\n\nclaim-->(1)infra: updated status\ninfra->address: fetches\ninfra->infra: create machine\ninfra->machine: update status\ndeactivate infra\n\ncapi->machine: marks for deletion\nmachine-->(1)infra:\nactivate infra\ninfra->machine: reconcile\\ndeletion\ninfra->infra: delete machine\ninfra->claim: marks for deletion\ninfra->machine: remove\\nfinalizer\ndeactivate infra\ndestroyafter machine\n\nclaim-->(1)ipam:\nactivate ipam\nipam->ipam: release address\nipam->address: delete\ndestroy address\nipam->claim: remove finalizer\ndeactivate ipam\ndestroyafter claim\n```\n\n----------------------------------------\n\nTITLE: Defining Lifecycle Hook Annotation Format\nDESCRIPTION: Demonstrates the format for lifecycle hook annotations used to control machine deletion phases. The annotation consists of a lifecycle-point, hook name, and optional owner information.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200602-machine-deletion-phase-hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n<lifecycle-point>.delete.hook.machine.cluster-api.x-k8s.io/<hook-name>: <owner/creator>\n```\n\n----------------------------------------\n\nTITLE: Running error message when envtest executables are missing\nDESCRIPTION: An example error message that appears when the envtest framework is unable to locate required executables. This typically happens when running tests through an IDE without proper configuration.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nE0210 16:11:04.222471  132945 server.go:329] controller-runtime/test-env \"msg\"=\"unable to start the controlplane\" \"error\"=\"fork/exec /usr/local/kubebuilder/bin/etcd: no such file or directory\" \"tries\"=0\n```\n\n----------------------------------------\n\nTITLE: Go Module Initialization Output\nDESCRIPTION: The output from initializing the Go module, confirming that a new go.mod file has been created with the specified module path.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/initialize-repo-and-api-types.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo: creating new go.mod: module github.com/liztio/cluster-api-provider-mailgun\n```\n\n----------------------------------------\n\nTITLE: Registering Runtime Hooks in Go\nDESCRIPTION: This Go code snippet demonstrates how to register Runtime Hooks with metadata such as tags, summary, and description. It uses the catalogBuilder to register the hook.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220221-runtime-SDK.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n    // Register Runtime Hooks defined in this package.\n\tcatalogBuilder.RegisterHook(BeforeClusterUpgrade, &runtimecatalog.HookMeta{\n\t\tTags:        []string{\"Lifecycle Hooks\"},\n\t\tSummary:     \"Called before the Cluster is upgraded.\",\n\t\tDescription: \"This blocking hook is called after the Cluster object has been updated with a new spec.topology.version by the user, and immediately before the new version is propagated to the Control Plane.\",\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Provider Configuration Example in YAML\nDESCRIPTION: Example YAML configuration for a Bootstrap provider in Cluster API, showing the required status fields including ready state and dataSecretName.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/controllers/machine-pool.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: MyBootstrapProviderConfig\napiVersion: bootstrap.cluster.x-k8s.io/v1alpha3\nstatus:\n    ready: true\n    dataSecretName: \"MyBootstrapSecret\"\n```\n\n----------------------------------------\n\nTITLE: Pausing a MachineDeployment Rollout in Cluster API\nDESCRIPTION: This command pauses a MachineDeployment named 'my-md-0'. It sets the Paused field in the resource spec to true. The command is a no-op if the resource is already paused.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/alpha-rollout.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nclusterctl alpha rollout pause machinedeployment/my-md-0\n```\n\n----------------------------------------\n\nTITLE: Enabling Zsh completions\nDESCRIPTION: This command enables Zsh completions by adding the autoload and compinit commands to the user's ~/.zshrc file.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/completion.md#2025-04-22_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\necho \"autoload -U compinit; compinit\" >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Docker Config Path for KubeVirt\nDESCRIPTION: Command to set a custom path to the Docker configuration file for KubeVirt container disk authentication.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport DOCKER_CONFIG_FILE=\"/foo/config.json\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Kind Cluster for KubeVirt\nDESCRIPTION: Command to create a kind cluster for the KubeVirt infrastructure provider (CAPK).\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake kind-cluster-kubevirt\n```\n\n----------------------------------------\n\nTITLE: Table of Contents Structure\nDESCRIPTION: Markdown structure showing the table of contents for the runtime hooks documentation, using doctoc for auto-generation\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20220414-runtime-hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n```\n\n----------------------------------------\n\nTITLE: Installing cert-manager for Cluster API\nDESCRIPTION: Command to install cert-manager, which Cluster API uses to manage certificates for its webhooks.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/building-running-and-testing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/<version>/cert-manager.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Metal3 Environment Variables for Cluster API\nDESCRIPTION: Environment variables setup for Metal3 deployment using Cluster API. Includes Ironic endpoint configurations and authentication settings for API access.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/quick-start.md#2025-04-22_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\nexport DEPLOY_KERNEL_URL=\"http://172.22.0.1:6180/images/ironic-python-agent.kernel\"\nexport DEPLOY_RAMDISK_URL=\"http://172.22.0.1:6180/images/ironic-python-agent.initramfs\"\nexport IRONIC_URL=\"http://172.22.0.1:6385/v1/\"\nexport IRONIC_INSPECTOR_URL=\"http://172.22.0.1:5050/v1/\"\nexport IRONIC_NO_CA_CERT=true\nexport IRONIC_NO_BASIC_AUTH=true\nexport IRONIC_INSPECTOR_NO_BASIC_AUTH=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Type in Kustomization\nDESCRIPTION: YAML configuration to add to kustomization.yaml to identify the provider type with appropriate labels for Cluster API integration.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/providers/getting-started/building-running-and-testing.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n- includeSelectors: true\n  pairs:\n    cluster.x-k8s.io/provider: infrastructure-mailgun\n```\n\n----------------------------------------\n\nTITLE: Pre-Eviction Pod Status Log in Kubernetes\nDESCRIPTION: Displayed before pod evictions, this log entry reveals which pods have yet to be drained from a node. It captures the node's name, pods pending eviction, and those marked for deletion. Intended for administrators managing cluster health and stability.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/automated-machine-management/machine_deletions.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nI0830 12:52:58.739093      17 drain.go:172] \"Drain not completed yet, there are still Pods on the Node that have to be drained\" ... Node=\"my-cluster-md-0-wxtcg-mtg57-ssfg8\" podsToTriggerEviction=\"test-namespace/nginx-deployment-6886c85ff7-4r297, test-namespace/nginx-deployment-6886c85ff7-5gl2h, test-namespace/nginx-deployment-6886c85ff7-64tf9, test-namespace/nginx-deployment-6886c85ff7-9k5gp, test-namespace/nginx-deployment-6886c85ff7-9mdjw, ... (5 more)\" podsWithDeletionTimestamp=\"kube-system/calico-kube-controllers-7dc5458bc6-rdjj4, kube-system/coredns-7db6d8ff4d-9cbhn\"\n```\n\n----------------------------------------\n\nTITLE: Using Complex Variables in ClusterClass Patches\nDESCRIPTION: Examples of using complex variables (objects, maps, arrays) in patches, including accessing specific fields, using templating, and array indexing.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/write-clusterclass.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\nmetadata:\n  name: docker-clusterclass-v0.1.0\nspec:\n  ...\n  jsonPatches:\n  - op: add\n    path: /spec/template/spec/httpProxy/url\n    valueFrom:\n      # Use the url field of the httpProxy variable.\n      variable: httpProxy.url\n  - op: add\n    path: /spec/template/spec/customImage\n    valueFrom:\n      # Use the osImage field of the mdConfig variable for the current MD class.\n      template: \"{{ (index .mdConfig .builtin.machineDeployment.class).osImage }}\"\n  - op: add\n    path: /spec/template/spec/dnsServers\n    valueFrom:\n      # Use the entire dnsServers array.\n      variable: dnsServers\n  - op: add\n    path: /spec/template/spec/dnsServer\n    valueFrom:\n      # Use the first item of the dnsServers array.\n      variable: dnsServers[0]\n```\n\n----------------------------------------\n\nTITLE: ClusterClass with Old API Version\nDESCRIPTION: Example of ClusterClass configuration using v1beta1 API version\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/tasks/experimental-features/cluster-class/operate-cluster.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterClass\nmetadata:\n  name: quick-start\nspec:\n  infrastructure:\n    ref:\n      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n      kind: DockerClusterTemplate\n...\n  patches:\n  - name: lbImageRepository\n    definitions:\n    - selector:\n        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n        kind: DockerClusterTemplate\n        matchResources:\n          infrastructureCluster: true\n      jsonPatches:\n      - op: add\n        path: \"/spec/template/spec/loadBalancer/imageRepository\"\n        valueFrom:\n          variable: lbImageRepository\n```\n\n----------------------------------------\n\nTITLE: AWS Credential Configuration for Tilt\nDESCRIPTION: Example of configuring AWS credentials in kustomize_substitutions for AWS provider.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/tilt.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nkustomize_substitutions:\n  AWS_B64ENCODED_CREDENTIALS: \"your credentials here\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Reconcilers and Indexes for Cluster API envtest in Golang\nDESCRIPTION: This code snippet shows how to set up reconcilers and indexes within the TestMain function for Cluster API envtest. It demonstrates the configuration of a custom reconciler and default indexes.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/developer/core/testing.md#2025-04-22_snippet_14\n\nLANGUAGE: golang\nCODE:\n```\nfunc TestMain(m *testing.M) {\n\t// Setup envtest\n\tsetupReconcilers := func(ctx context.Context, mgr ctrl.Manager) {\n\t\tif err := (&MyReconciler{\n\t\t\tClient:  mgr.GetClient(),\n\t\t\tLog:     log.NullLogger{},\n\t\t}).SetupWithManager(mgr, controller.Options{MaxConcurrentReconciles: 1}); err != nil {\n\t\t\tpanic(fmt.Sprintf(\"Failed to start the MyReconciler: %v\", err))\n\t\t}\n\t}\n\n\tsetupIndexes := func(ctx context.Context, mgr ctrl.Manager) {\n\t\tif err := index.AddDefaultIndexes(ctx, mgr); err != nil {\n\t\tpanic(fmt.Sprintf(\"unable to setup index: %v\", err))\n\t}\n    \n    // Run tests\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Reconcile Labels from MachineDeployment to Machine in YAML\nDESCRIPTION: This YAML snippet demonstrates how to reconcile labels from a MachineDeployment to a Machine object by updating the labels. This highlights the challenge of managing label changes and the lack of a signal to differentiate between user-applied and controller-applied labels.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20221003-In-place-propagation-of-Kubernetes-objects-only-changes.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  a: a \n  b: b\n```\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  a: a\n```\n\n----------------------------------------\n\nTITLE: Accessing Help in Cluster API CLI\nDESCRIPTION: The 'clusterctl help' command provides assistance for any command in the application. Users can get detailed information about a specific command by typing 'clusterctl help [command]'.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/clusterctl/commands/additional-commands.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# clusterctl help\n\nHelp provides help for any command in the application.\nSimply type `clusterctl help [command]` for full details.\n```\n\n----------------------------------------\n\nTITLE: Defining a ClusterEndpoint CR for External Control Plane (IP Host)\nDESCRIPTION: Another example YAML manifest for the `ClusterEndpoint` CRD. This demonstrates defining an external control plane endpoint for 'my-cluster-2' using an IP address instead of a DNS hostname. It showcases the flexibility of the 'host' field within the CRD specification.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20230407-flexible-managed-k8s-endpoints.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.x-k8s.io/v1beta1\nkind: ClusterEndpoint\nmetadata:\n   labels:\n      cluster.x-k8s.io/cluster-name: my-cluster-2\nspec:\n  cluster: my-cluster-2\n  host: \"10.40.85.102\"\n  port: 1234\n  type: ExternalControlPlaneEndpoint\n```\n\n----------------------------------------\n\nTITLE: Example Kubernetes Node Conditions Output\nDESCRIPTION: Displays the `.status.conditions` output for a Kubernetes Node. This example demonstrates a mix of conditions with both negative polarity (MemoryPressure, DiskPressure, PIDPressure - Status: False indicates healthy state) and positive polarity (Ready - Status: True indicates healthy state). This inconsistency across resource types is a key consideration in the proposal.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/proposals/20200506-conditions.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n Type             Status\n MemoryPressure   False\n DiskPressure     False\n PIDPressure      False\n Ready            True\n```\n\n----------------------------------------\n\nTITLE: Increase Inotify Limits on Linux for Docker\nDESCRIPTION: This snippet details how to increase inotify limits on Linux systems to accommodate large numbers of nodes using Docker. It requires sysctl command access. By setting higher limits for inotify watches and instances, the system can handle more simultaneous file system events, which is critical for large Kubernetes deployments.\nSOURCE: https://github.com/kubernetes-sigs/cluster-api/blob/main/docs/book/src/user/troubleshooting.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsysctl fs.inotify.max_user_watches=1048576\nsysctl fs.inotify.max_user_instances=8192\n```"
  }
]