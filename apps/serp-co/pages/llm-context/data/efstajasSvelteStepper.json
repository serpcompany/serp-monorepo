[
  {
    "owner": "efstajas",
    "repo": "svelte-stepper",
    "content": "TITLE: Initializing the Stepper Component with Steps\nDESCRIPTION: Setting up the Stepper component with multiple steps using the makeStep utility. Each step can receive component-specific props that are type-checked automatically.\nSOURCE: https://github.com/efstajas/svelte-stepper/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\">\n  import { Stepper, makeStep } from '@efstajas/svelte-stepper';\n\n  /* ... import your step components here ... */\n\n  const exampleSteps = [\n    makeStep({\n      component: MyFirstStep,\n      props: undefined\n    }),\n    makeStep({\n      component: MySecondStepWithProps,\n      props: {\n        foo: 'bar',\n      },\n    }),\n    makeStep({\n      component: MyFinalStep,\n      props: undefined\n    })\n  ];\n</script>\n\n<Stepper steps={exampleSteps} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Step Component in Svelte Stepper\nDESCRIPTION: Example of a simple step component that uses the stepController to navigate to the next step. The createStepController function provides methods for interacting with the stepper.\nSOURCE: https://github.com/efstajas/svelte-stepper/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\">\n  import { createStepController } from '@efstajas/svelte-stepper';\n\n  const stepController = createStepController();\n</script>\n\n<h1>My first step</h1>\n\n<button on:click={stepController.nextStep}>Next</button>\n```\n\n----------------------------------------\n\nTITLE: Handling Stepper Events for Step Changes and Flow Completion\nDESCRIPTION: Setting up event handlers for the Stepper component to respond to step changes and flow completion. The stepChange event provides detailed information about the navigation.\nSOURCE: https://github.com/efstajas/svelte-stepper/blob/main/README.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<Stepper\n  steps={exampleSteps}\n  on:conclusion={() => {\n    alert('The last step in the flow has called stepController.nextStep()!');\n  }}\n  on:stepChange={(e) => {\n    const { newIndex, of, direction } = e.detail;\n\n    console.log(`Changed to step ${newIndex + 1} of ${of} going ${direction}`);\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Context Sharing Between Steps\nDESCRIPTION: Implementation of the context API to share data between steps using a Svelte writable store. This example defines a typed context that all steps can access and modify.\nSOURCE: https://github.com/efstajas/svelte-stepper/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\" context=\"module\">\n  export interface MyExampleStepperContext {\n    foo: string;\n    bar: number;\n  }\n</script>\n\n<script lang=\"ts\">\n  import { Stepper, makeStep } from '@efstajas/svelte-stepper';\n\n  /* ... import your step components here ... */\n\n  const exampleSteps = [\n    makeStep({\n      component: MyFirstStep,\n      props: undefined\n    }),\n  ];\n\n  const exampleContext: () => Writable<MyExampleStepperContext> = () => writable({\n    foo: 'bar',\n    bar: 42,\n  });\n</script>\n\n<Stepper steps={exampleSteps} context={exampleContext} />\n```\n\n----------------------------------------\n\nTITLE: Accessing and Updating Context Within a Step\nDESCRIPTION: Example of a step component that accesses and modifies the shared context. The context is available as a prop and can be used with Svelte's reactive store syntax.\nSOURCE: https://github.com/efstajas/svelte-stepper/blob/main/README.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\">\n  import { Writable } from 'svelte/store';\n  import { MyExampleStepperContext } from './my-stepper-page.svelte';\n  import { createStepController } from '@efstajas/svelte-stepper';\n\n  const stepController = createStepController();\n\n  export let context: Writable<MyExampleStepperContext>;\n</script>\n\n<h1>My first step</h1>\n\n<p>\n  Foo is {$context.foo} and bar is {$context.bar}.\n</p>\n\n<button on:click={context.update((v) => ({ ...v, bar: v.bar + 1}))}>Increment bar</button>\n\n<button on:click={stepController.nextStep}>Next</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Transition Functions and Parameters\nDESCRIPTION: Advanced configuration for custom step transitions using Svelte's built-in transition functions. Allows setting different transitions for entering and exiting steps with direction-dependent parameters.\nSOURCE: https://github.com/efstajas/svelte-stepper/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<Stepper\n  steps={exampleSteps}\n  defaultTransitionDuration={600}\n  stepOutroTransition={{\n    transitionFn: scale,\n    params: () => ({\n      duration: 600,\n      delay: 0,\n      scale: 1,\n    }),\n  }}\n  stepIntroTransition={{\n    transitionFn: fly,\n    params: (direction) => ({\n      duration: 600,\n      delay: 0,\n      x: direction === 'forward' ? 100 : -100,\n    }),\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Side-Steps for Temporary Flows\nDESCRIPTION: Example of triggering a temporary side-step flow from within a step. Side-steps allow temporarily branching to a different sequence of steps before returning to the main flow.\nSOURCE: https://github.com/efstajas/svelte-stepper/blob/main/README.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\">\n  import { createStepController } from '@efstajas/svelte-stepper';\n\n  import MyFirstSidestepStep from './my-first-sidestep-step.svelte';\n\n  const stepController = createStepController();\n</script>\n\n<h1>Launching a sidestep</h1>\n\n<button on:click={() => stepController.sidestep([\n  makeStep({\n    component: MyFirstSidestepStep,\n    props: undefined\n  }),\n])}>Start sidestep</button>\n```\n\n----------------------------------------\n\nTITLE: Customizing Transition Duration in Svelte Stepper\nDESCRIPTION: Example of adjusting the default transition duration for the stepper. This affects both container height transitions and step entry/exit animations.\nSOURCE: https://github.com/efstajas/svelte-stepper/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<Stepper\n  steps={exampleSteps}\n  defaultTransitionDuration={1000}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Svelte Stepper via NPM or Yarn\nDESCRIPTION: Command line instructions for installing the Svelte Stepper package using either NPM or Yarn package managers.\nSOURCE: https://github.com/efstajas/svelte-stepper/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @efstajas/svelte-stepper\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @efstajas/svelte-stepper\n```"
  }
]