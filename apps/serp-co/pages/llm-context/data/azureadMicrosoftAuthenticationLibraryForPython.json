[
  {
    "owner": "azuread",
    "repo": "microsoft-authentication-library-for-python",
    "content": "TITLE: Creating a PublicClientApplication instance in MSAL Python\nDESCRIPTION: Initialize a PublicClientApplication with client ID and authority URL to authenticate users. This is the first step in the MSAL authentication pattern and should be reused throughout the application lifecycle.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-python/blob/dev/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom msal import PublicClientApplication\napp = PublicClientApplication(\n    \"your_client_id\",\n    authority=\"https://login.microsoftonline.com/Enter_the_Tenant_Name_Here\")\n```\n\n----------------------------------------\n\nTITLE: Acquiring a new token from AAD in MSAL Python\nDESCRIPTION: When no suitable token exists in cache, request a new one from AAD using an appropriate acquisition method. This code handles both the successful token acquisition and error scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-python/blob/dev/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif not result:\n    # So no suitable token exists in cache. Let's get a new one from AAD.\n    result = app.acquire_token_by_one_of_the_actual_method(..., scopes=[\"User.Read\"])\nif \"access_token\" in result:\n    print(result[\"access_token\"])  # Yay!\nelse:\n    print(result.get(\"error\"))\n    print(result.get(\"error_description\"))\n    print(result.get(\"correlation_id\"))  # You may need this when reporting a bug\n```\n\n----------------------------------------\n\nTITLE: Checking cache for existing accounts and silently acquiring tokens in MSAL Python\nDESCRIPTION: Retrieve accounts from cache that the user has previously signed in with, display them for selection, and attempt to silently acquire a token for the chosen account. This demonstrates MSAL's cache utilization capabilities.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-python/blob/dev/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# We now check the cache to see\n# whether we already have some accounts that the end user already used to sign in before.\naccounts = app.get_accounts()\nif accounts:\n    # If so, you could then somehow display these accounts and let end user choose\n    print(\"Pick the account you want to use to proceed:\")\n    for a in accounts:\n        print(a[\"username\"])\n    # Assuming the end user chose this one\n    chosen = accounts[0]\n    # Now let's try to find a token in cache for this account\n    result = app.acquire_token_silent([\"your_scope\"], account=chosen)\n```\n\n----------------------------------------\n\nTITLE: Interactive Token Acquisition with MSAL Python\nDESCRIPTION: Testing the acquire_token_interactive() method with various prompt options to simulate different user interaction scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-python/blob/dev/tests/smoke-test.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult = msal_instance.acquire_token_interactive(scopes, prompt='none')\n```\n\nLANGUAGE: python\nCODE:\n```\nresult = msal_instance.acquire_token_interactive(scopes, prompt='select_account')\n```\n\nLANGUAGE: python\nCODE:\n```\nresult = msal_instance.acquire_token_interactive(scopes, prompt='absent', login_hint='user@contoso.com')\n```\n\n----------------------------------------\n\nTITLE: Silent Token Acquisition with Force Refresh in MSAL Python\nDESCRIPTION: Testing the acquire_token_silently() method with force_refresh=True to obtain a new token instead of using the cached one.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-python/blob/dev/tests/smoke-test.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresult = msal_instance.acquire_token_silent(scopes, account, force_refresh=True)\n```\n\n----------------------------------------\n\nTITLE: Testing Silent Token Acquisition with MSAL Python\nDESCRIPTION: Testing the acquire_token_silent() method with an empty token cache. This should always return an empty result when the cache is empty.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-python/blob/dev/tests/smoke-test.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult = msal_instance.acquire_token_silent(scopes, account)\n```\n\n----------------------------------------\n\nTITLE: Account Removal with MSAL Python\nDESCRIPTION: Testing the remove_account() method to sign out an account from MSAL Python and, if applicable, from the broker. This does not sign out the account from the browser.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-python/blob/dev/tests/smoke-test.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmsal_instance.remove_account(account)\n```\n\n----------------------------------------\n\nTITLE: POP Token Acquisition with MSAL Python\nDESCRIPTION: Testing the acquisition of Proof of Possession (POP) tokens using a hardcoded Signed Http Request (SHR). This is supported via broker.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-python/blob/dev/tests/smoke-test.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresult = msal_instance.acquire_token_interactive(scopes, pop_parameters=shr)\n```\n\n----------------------------------------\n\nTITLE: Resource Owner Password Credential (ROPC) Flow with MSAL Python\nDESCRIPTION: Testing the acquire_token_by_username_password() method for ROPC flow. This is supported by broker on Windows but may fall back to non-broker behavior on Mac.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-python/blob/dev/tests/smoke-test.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresult = msal_instance.acquire_token_by_username_password(username, password, scopes)\n```\n\n----------------------------------------\n\nTITLE: Initializing result variable for token acquisition in MSAL Python\nDESCRIPTION: Set an initial value for the result variable that will store token acquisition results. This is a preparatory step before attempting to acquire tokens.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-python/blob/dev/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult = None  # It is just an initial value. Please follow instructions below.\n```\n\n----------------------------------------\n\nTITLE: SSH Certificate Acquisition with MSAL Python\nDESCRIPTION: Testing the acquisition of SSH certificates through interactive and silent methods. The behavior is similar to non-SSH cert counterparts, but with a different token_type.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-python/blob/dev/tests/smoke-test.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresult = msal_instance.acquire_token_interactive(scopes, ssh_cert=True)\n```\n\nLANGUAGE: python\nCODE:\n```\nresult = msal_instance.acquire_token_silent(scopes, account, ssh_cert=True)\n```\n\n----------------------------------------\n\nTITLE: Running MSAL Python as an Interactive Tool\nDESCRIPTION: The experimental usage of MSAL Python as an interactive tool for testing various authentication scenarios. It allows impersonation of arbitrary apps and testing of most MSAL Python APIs.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-python/blob/dev/tests/smoke-test.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython -m msal\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository for Azure AD Project\nDESCRIPTION: Commands for cloning and setting up the Git repository for an Azure AD project, including adding the upstream remote.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-python/blob/dev/contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:username/project-foo.git\n$ cd project-foo\n$ git remote add upstream git@github.com:AzureAD/project-foo.git\n```\n\n----------------------------------------\n\nTITLE: Rebasing with Upstream Repository\nDESCRIPTION: Commands for syncing local repository with upstream changes using git rebase.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-python/blob/dev/contributing.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git fetch upstream\n$ git rebase upstream/v0.1  # or upstream/master\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch in Git\nDESCRIPTION: Command for creating a new feature branch for development work.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-python/blob/dev/contributing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Pushing Feature Branch to Origin\nDESCRIPTION: Command for pushing local feature branch changes to remote repository.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-python/blob/dev/contributing.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ git push origin my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Example Git Commit Message Format\nDESCRIPTION: Template showing the proper format for Git commit messages, including header line and detailed description.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-python/blob/dev/contributing.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nfix: explaining the commit in one line\n\nBody of commit message is a few lines of text, explaining things\nin more detail, possibly giving some background about the issue\nbeing fixed, etc etc.\n\nThe body of the commit message can be several paragraphs, and\nplease do proper word-wrap and keep columns shorter than about\n72 characters or so. That way `git log` will show things\nnicely even when it is indented.\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information\nDESCRIPTION: Commands for setting up Git user name and email globally.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-python/blob/dev/contributing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git config --global user.name \"J. Random User\"\n$ git config --global user.email \"j.random.user@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Defining Development Dependencies for MSAL Python\nDESCRIPTION: A requirements file that specifies development dependencies for testing the Microsoft Authentication Library for Python. It includes a self-reference for the current package, python-dotenv with version constraints noting Python 3.7 compatibility issues, pytest-benchmark for performance testing, and perf_baseline for baseline performance metrics.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-python/blob/dev/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e .\n\n# python-dotenv 1.0+ no longer supports Python 3.7\npython-dotenv>=0.21,<2\n\npytest-benchmark>=4,<5\nperf_baseline>=0.1,<0.2\n```\n\n----------------------------------------\n\nTITLE: Listing Python package dependencies for Sphinx documentation\nDESCRIPTION: This snippet specifies the required Python packages for building Sphinx documentation. It includes the Furo theme, a package for parameter links in Sphinx, and references another requirements file in the parent directory.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-python/blob/dev/docs/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfuro\nsphinx-paramlinks\n-r ../requirements.txt\n```"
  }
]