[
  {
    "owner": "ej2",
    "repo": "python-quickbooks",
    "content": "TITLE: Configuring and Querying an Invoice for a Shareable Link with QuickBooks API in Python\nDESCRIPTION: This snippet demonstrates setting properties on an Invoice object to enable online credit card payments and assign an email address for sharing purposes. It also shows how to query an invoice with specific parameters, such as including a link, necessitating the 'minorversion' parameter to be at least 36.\nSOURCE: https://github.com/ej2/python-quickbooks/blob/master/README.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ninvoice.AllowOnlineCreditCardPayment = True\ninvoice.BillEmail = EmailAddress()\ninvoice.BillEmail.Address = 'test@email.com'\n\n# Query invoice with share link included; ensure 'minorversion' >= 36\ninvoice = Invoice.get(id, qb=qb_client, params={'include': 'invoiceLink'})\n```\n\n----------------------------------------\n\nTITLE: Voiding an Invoice Using QuickBooks Python SDK\nDESCRIPTION: This snippet illustrates creating an Invoice object, setting its Id property, and calling the 'void' method to void the invoice. It requires passing the QuickBooks client instance to perform the API operation, effectively marking the invoice as canceled.\nSOURCE: https://github.com/ej2/python-quickbooks/blob/master/README.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ninvoice = Invoice()\ninvoice.Id = 7\ninvoice.void(qb=client)\n```\n\n----------------------------------------\n\nTITLE: Serializing and Deserializing QuickBooks Objects to/from JSON in Python\nDESCRIPTION: This code showcases how to convert a QuickBooks object, such as 'Account', to JSON data using 'to_json', and how to instantiate a QuickBooks object from JSON data using 'from_json'. It highlights the JSON serialization/deserialization for data persistence and API communication.\nSOURCE: https://github.com/ej2/python-quickbooks/blob/master/README.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\naccount = Account.get(1, qb=client)\njson_data = account.to_json()\n\n# Loading JSON data into a QuickBooks object\naccount = Account.from_json(\n {\n  \"AccountType\": \"Accounts Receivable\",\n  \"AcctNum\": \"123123\",\n  \"Name\": \"MyJobs\"\n }\n)\naccount.save(qb=client)\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates and DateTimes for QuickBooks in Python\nDESCRIPTION: This snippet demonstrates using helper functions to format date and datetime objects into QuickBooks-compatible string formats, including UTC offset formatting. These helpers ensure date strings meet QuickBooks API requirements for date/time fields.\nSOURCE: https://github.com/ej2/python-quickbooks/blob/master/README.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndate_string = qb_date_format(date(2016, 7, 22))\ndate_time_string = qb_datetime_format(datetime(2016, 7, 22, 10, 35, 00))\ndate_time_with_utc_string = qb_datetime_utc_offset_format(datetime(2016, 7, 22, 10, 35, 00), '-06:00')\n```\n\n----------------------------------------\n\nTITLE: Handling QuickBooks API Errors with Custom Exceptions in Python\nDESCRIPTION: This snippet shows importing 'QuickbooksException' from the SDK's exceptions module and wrapping API calls within a try-except block. The exception object provides detailed error information, such as the message, error code, and additional details, facilitating robust error handling.\nSOURCE: https://github.com/ej2/python-quickbooks/blob/master/README.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom quickbooks.exceptions import QuickbooksException\n\ntry:\n    # perform a QuickBooks API operation\n    pass\nexcept QuickbooksException as e:\n    print(e.message)  # Error message from QBO\n    print(e.error_code)  # Error code\n    print(e.detail)  # Additional info, if available\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for QuickBooks API Access (Bash)\nDESCRIPTION: Exports necessary environment variables (CLIENT_ID, CLIENT_SECRET, COMPANY_ID, REFRESH_TOKEN) obtained from the Intuit Developer portal and OAuth 2.0 Playground. These variables are required for authenticating with the QuickBooks Online API during integration testing. Requires an Intuit Developer account and a configured App.\nSOURCE: https://github.com/ej2/python-quickbooks/blob/master/contributing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport CLIENT_ID=\"<Client ID>\"\nexport CLIENT_SECRET=\"<Client Secret>\" \nexport COMPANY_ID=\"<Realm ID>\"  \nexport REFRESH_TOKEN=\"<Refresh token>\"\n```\n\n----------------------------------------\n\nTITLE: Installing Testing Dependencies with Pip (Bash)\nDESCRIPTION: Installs the required Python packages (pytest, coverage, pytest-cov) using pip. These packages are necessary for running the project's test suite. Assumes pip is installed and accessible in the environment.\nSOURCE: https://github.com/ej2/python-quickbooks/blob/master/contributing.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install pytest coverage pytest-cov\n```\n\n----------------------------------------\n\nTITLE: Running All Tests with Coverage using Pytest (Bash)\nDESCRIPTION: Executes the complete test suite (both unit and integration tests) using pytest and generates a coverage report using pytest-cov. Requires pytest, coverage, and pytest-cov to be installed, and environment variables must be set for integration tests.\nSOURCE: https://github.com/ej2/python-quickbooks/blob/master/contributing.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npytest  --cov\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Coverage using Pytest (Bash)\nDESCRIPTION: Executes only the unit tests located in the `tests/unit` directory using pytest, along with coverage reporting. This isolates tests that do not require QBO API interaction. Requires pytest, coverage, and pytest-cov.\nSOURCE: https://github.com/ej2/python-quickbooks/blob/master/contributing.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/unit --cov\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with Coverage using Pytest (Bash)\nDESCRIPTION: Executes only the integration tests located in the `tests/integration` directory using pytest, along with coverage reporting. These tests interact with the live QBO API and require environment variables to be set. Requires pytest, coverage, pytest-cov, and configured environment variables. *Warning: Modifies data in the connected QBO Sandbox account.*\nSOURCE: https://github.com/ej2/python-quickbooks/blob/master/contributing.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/integration --cov\n```\n\n----------------------------------------\n\nTITLE: Creating an Integration Test Case in Python\nDESCRIPTION: Demonstrates how to create a new integration test class by inheriting from `QuickbooksTestCase`. This base class automatically sets up `self.qb_client` for interacting with the QBO API within test methods, using the configured environment variables. Shows an example of fetching Vendors using the client.\nSOURCE: https://github.com/ej2/python-quickbooks/blob/master/contributing.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom tests.integration.test_base import QuickbooksTestCase\n\nclass SampleTestCase(QuickbooksTestCase):\n  def test_something(self):\n    vendors = Vendor.all(max_results=1, qb=self.qb_client)\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for QuickBooks Integration - Python\nDESCRIPTION: This snippet defines the Python dependencies needed to interact with the QuickBooks API using the Intuit OAuth library. It specifies the required packages and their minimum version numbers to ensure compatibility and proper functionality. The dependencies allow for authorization and making requests to the QuickBooks API.\nSOURCE: https://github.com/ej2/python-quickbooks/blob/master/requirements.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nintuit-oauth==1.2.6\nrequests_oauthlib>=1.3.1\nrequests>=2.31.0\n```"
  }
]