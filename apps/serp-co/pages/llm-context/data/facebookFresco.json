[
  {
    "owner": "facebook",
    "repo": "fresco",
    "content": "TITLE: Loading Images into SimpleDraweeView with Java\nDESCRIPTION: Code example showing how to load an image into a SimpleDraweeView instance by calling the setImageURI method with a URI parameter.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/using-simpledraweeview.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nmSimpleDraweeView.setImageURI(uri);\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced SimpleDraweeView Attributes in XML\nDESCRIPTION: Comprehensive example of all XML attributes supported by SimpleDraweeView, including fade duration, scale types, placeholder images, failure handling, progress indicators, and corner rounding options.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/using-simpledraweeview.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<com.facebook.drawee.view.SimpleDraweeView\n  android:id=\"@+id/my_image_view\"\n  android:layout_width=\"20dp\"\n  android:layout_height=\"20dp\"\n  fresco:fadeDuration=\"300\"\n  fresco:actualImageScaleType=\"focusCrop\"\n  fresco:placeholderImage=\"@color/wait_color\"\n  fresco:placeholderImageScaleType=\"fitCenter\"\n  fresco:failureImage=\"@drawable/error\"\n  fresco:failureImageScaleType=\"centerInside\"\n  fresco:retryImage=\"@drawable/retrying\"\n  fresco:retryImageScaleType=\"centerCrop\"\n  fresco:progressBarImage=\"@drawable/progress_bar\"\n  fresco:progressBarImageScaleType=\"centerInside\"\n  fresco:progressBarAutoRotateInterval=\"1000\"\n  fresco:backgroundImage=\"@color/blue\"\n  fresco:overlayImage=\"@drawable/watermark\"\n  fresco:pressedStateOverlayImage=\"@color/red\"\n  fresco:roundAsCircle=\"false\"\n  fresco:roundedCornerRadius=\"1dp\"\n  fresco:roundTopLeft=\"true\"\n  fresco:roundTopRight=\"false\"\n  fresco:roundBottomLeft=\"false\"\n  fresco:roundBottomRight=\"true\"\n  fresco:roundTopStart=\"false\"\n  fresco:roundTopEnd=\"false\"\n  fresco:roundBottomStart=\"false\"\n  fresco:roundBottomEnd=\"false\"\n  fresco:roundWithOverlayColor=\"@color/corner_color\"\n  fresco:roundingBorderWidth=\"2dp\"\n  fresco:roundingBorderColor=\"@color/border_color\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Creating a Customized ImageRequest Using ImageRequestBuilder in Fresco\nDESCRIPTION: This code demonstrates how to create a complex ImageRequest using ImageRequestBuilder with various configuration options like decode options, auto-rotation, thumbnail previews, request level, progressive rendering, and resize options.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/image-requests.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nUri uri;\n\nImageDecodeOptions decodeOptions = ImageDecodeOptions.newBuilder()\n    .setBackgroundColor(Color.GREEN)\n    .build();\n\nImageRequest request = ImageRequestBuilder\n    .newBuilderWithSource(uri)\n    .setImageDecodeOptions(decodeOptions)\n    .setAutoRotateEnabled(true)\n    .setLocalThumbnailPreviewsEnabled(true)\n    .setLowestPermittedRequestLevel(RequestLevel.FULL_FETCH)\n    .setProgressiveRenderingEnabled(false)\n    .setResizeOptions(new ResizeOptions(width, height))\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic SimpleDraweeView in XML for Android\nDESCRIPTION: The simplest implementation of SimpleDraweeView in an XML layout file. This provides the basic structure for displaying images with Fresco, defining width and height properties.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/using-simpledraweeview.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<com.facebook.drawee.view.SimpleDraweeView\n  android:id=\"@+id/my_image_view\"\n  android:layout_width=\"20dp\"\n  android:layout_height=\"20dp\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Adding Fresco Dependency in Gradle\nDESCRIPTION: This code snippet shows how to include the Fresco library in an Android application using Gradle. It adds the dependency to the dependencies section of the build.gradle file with version 3.6.0.\nSOURCE: https://github.com/facebook/fresco/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'com.facebook.fresco:fresco:3.6.0'\n```\n\n----------------------------------------\n\nTITLE: Advanced Fresco Configuration Using ImagePipelineConfig\nDESCRIPTION: Comprehensive example of configuring Fresco with all available options including cache parameters, executors, and network settings.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/configure-image-pipeline.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nImagePipelineConfig config = ImagePipelineConfig.newBuilder(context)\n    .setBitmapMemoryCacheParamsSupplier(bitmapCacheParamsSupplier)\n    .setCacheKeyFactory(cacheKeyFactory)\n    .setDownsampleEnabled(true)\n    .setEncodedMemoryCacheParamsSupplier(encodedCacheParamsSupplier)\n    .setExecutorSupplier(executorSupplier)\n    .setImageCacheStatsTracker(imageCacheStatsTracker)\n    .setMainDiskCacheConfig(mainDiskCacheConfig)\n    .setMemoryTrimmableRegistry(memoryTrimmableRegistry)\n    .setNetworkFetchProducer(networkFetchProducer)\n    .setPoolFactory(poolFactory)\n    .setProgressiveJpegConfig(progressiveJpegConfig)\n    .setRequestListeners(requestListeners)\n    .setSmallImageDiskCacheConfig(smallImageDiskCacheConfig)\n    .build();\nFresco.initialize(context, config);\n```\n\n----------------------------------------\n\nTITLE: Basic Fresco Gradle Dependencies Configuration\nDESCRIPTION: Adding the core Fresco dependency to the project's build.gradle file for basic functionality\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  // your app's other dependencies\n  implementation 'com.facebook.fresco:fresco:{{site.current_version}}'\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing All Fresco Image Caches in Java\nDESCRIPTION: Code snippet that demonstrates how to clear both memory and disk caches in Fresco. This is useful when you need to free up memory or ensure fresh images are loaded.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/faq.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// clear both memory and disk caches\nFresco.getImagePipeline().clearCaches();\n```\n\n----------------------------------------\n\nTITLE: Fresco Initialization in Application Class\nDESCRIPTION: Java code for initializing Fresco in the Application class onCreate method\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/index.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class MyApplication extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Fresco.initialize(this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Images with Fresco Supported URIs\nDESCRIPTION: Code examples demonstrating various URI formats supported by Fresco for loading images. Includes samples for loading from network, file system, content providers, assets, resources and data URIs. Each URI scheme uses a specific fetch method for loading the image data.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/supported-uris.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttp://, https:// - HttpURLConnection or network layer\nfile:// - FileInputStream\ncontent:// - ContentResolver\nasset:// - AssetManager\nres:///12345 - Resources.openRawResource\ndata:mime/type;base64, - Data URI spec (UTF-8 only)\n```\n\n----------------------------------------\n\nTITLE: Clearing All Caches in Fresco\nDESCRIPTION: Shows how to clear all memory caches, disk caches, or both types of caches in Fresco. This is typically used when the app is backgrounded or needs to free up resources.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/caching.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nImagePipeline imagePipeline = Fresco.getImagePipeline();\nimagePipeline.clearMemoryCaches();\nimagePipeline.clearDiskCaches();\n\n// combines above two lines\nimagePipeline.clearCaches();\n```\n\n----------------------------------------\n\nTITLE: Building DraweeController with Listener\nDESCRIPTION: Example showing how to create a DraweeController with custom options including tap-to-retry, controller listener, and controller reuse optimization.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/using-controllerbuilder.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nControllerListener listener = new BaseControllerListener() {...}\n\nDraweeController controller = Fresco.newDraweeControllerBuilder()\n    .setUri(uri)\n    .setTapToRetryEnabled(true)\n    .setOldController(mSimpleDraweeView.getController())\n    .setControllerListener(listener)\n    .build();\n\nmSimpleDraweeView.setController(controller);\n```\n\n----------------------------------------\n\nTITLE: Checking If Image Is In Memory Cache Using Fresco's ImagePipeline\nDESCRIPTION: Demonstrates how to synchronously check if an image is present in Fresco's bitmap memory cache using the ImagePipeline instance. This operation returns a boolean result indicating cache presence.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/caching.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nImagePipeline imagePipeline = Fresco.getImagePipeline();\nUri uri;\nboolean inMemoryCache = imagePipeline.isInBitmapMemoryCache(uri);\n```\n\n----------------------------------------\n\nTITLE: Programmatically Customizing DraweeHierarchy in Java\nDESCRIPTION: Example of creating and configuring a GenericDraweeHierarchy from code using a builder pattern. This approach allows programmatic setting of all the options that can be defined in XML.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/using-simpledraweeview.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nGenericDraweeHierarchy hierarchy =\n    GenericDraweeHierarchyBuilder.newInstance(getResources())\n        .setActualImageColorFilter(colorFilter)\n        .setActualImageFocusPoint(focusPoint)\n        .setActualImageScaleType(scaleType)\n        .setBackground(background)\n        .setDesiredAspectRatio(desiredAspectRatio)\n        .setFadeDuration(fadeDuration)\n        .setFailureImage(failureImage)\n        .setFailureImageScaleType(scaleType)\n        .setOverlays(overlays)\n        .setPlaceholderImage(placeholderImage)\n        .setPlaceholderImageScaleType(scaleType)\n        .setPressedStateOverlay(overlay)\n        .setProgressBarImage(progressBarImage)\n        .setProgressBarImageScaleType(scaleType)\n        .setRetryImage(retryImage)\n        .setRetryImageScaleType(scaleType)\n        .setRoundingParams(roundingParams)\n        .build();\nmSimpleDraweeView.setHierarchy(hierarchy);\nmSimpleDraweeView.setImageURI(uri);\n```\n\n----------------------------------------\n\nTITLE: Evicting Images from Fresco Caches\nDESCRIPTION: Demonstrates how to evict specific images from Fresco's memory cache, disk cache, or both caches simultaneously using the ImagePipeline instance. This is useful for removing stale or unwanted images.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/caching.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nImagePipeline imagePipeline = Fresco.getImagePipeline();\nUri uri;\nimagePipeline.evictFromMemoryCache(uri);\nimagePipeline.evictFromDiskCache(uri);\n\n// combines above two lines\nimagePipeline.evictFromCache(uri);\n```\n\n----------------------------------------\n\nTITLE: Loading Image with Fresco\nDESCRIPTION: Java code demonstrating how to load and display an image using SimpleDraweeView\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/index.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nUri uri = Uri.parse(\"https://raw.githubusercontent.com/facebook/fresco/main/docs/static/logo.png\");\nSimpleDraweeView draweeView = (SimpleDraweeView) findViewById(R.id.my_image_view);\ndraweeView.setImageURI(uri);\n```\n\n----------------------------------------\n\nTITLE: Automatically Playing Animations with Fresco DraweeController\nDESCRIPTION: Sets up a DraweeController that automatically plays animations when the image comes on-screen and stops when it goes off-screen. This is done by setting the autoPlayAnimations flag to true when building the controller.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/animations.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nUri uri;\nDraweeController controller = Fresco.newDraweeControllerBuilder()\n    .setUri(uri)\n    .setAutoPlayAnimations(true)\n    . // other setters\n    .build();\nmSimpleDraweeView.setController(controller);\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Resizing with ResizeOptions in Fresco\nDESCRIPTION: Shows how to resize an image using ResizeOptions when creating an ImageRequest. This approach resizes the encoded image in memory before decoding, supporting JPEG files with size reduction to the nearest 1/8 of original size.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/resizing.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nImageRequest request = ImageRequestBuilder.newBuilderWithSource(uri)\n    .setResizeOptions(new ResizeOptions(50, 50))\n    .build();\nmSimpleDraweeView.setController(\n    Fresco.newDraweeControllerBuilder()\n        .setOldController(mSimpleDraweeView.getController())\n        .setImageRequest(request)\n        .build());\n```\n\n----------------------------------------\n\nTITLE: Configuring Rounded Corners in XML with SimpleDraweeView\nDESCRIPTION: XML configuration for SimpleDraweeView that demonstrates how to set rounded corners, disable rounding for specific corners, apply overlay color, and configure rounding border properties using Fresco's custom attributes.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/rounded-corners-and-circles.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<com.facebook.drawee.view.SimpleDraweeView\n  ...\n  fresco:roundedCornerRadius=\"5dp\"\n  fresco:roundBottomStart=\"false\"\n  fresco:roundBottomEnd=\"false\"\n  fresco:roundWithOverlayColor=\"@color/blue\"\n  fresco:roundingBorderWidth=\"1dp\"\n  fresco:roundingBorderColor=\"@color/red\"\n>\n```\n\n----------------------------------------\n\nTITLE: Accessing and Controlling Animation State with Fresco Animatable Interface\nDESCRIPTION: Shows how to retrieve the Animatable interface from a SimpleDraweeView's controller and use it to start and stop animations directly. This approach gives fine-grained control over animation playback.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/animations.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nAnimatable animatable = mSimpleDraweeView.getController().getAnimatable();\nif (animatable != null) {\n  animatable.start();\n  // later\n  animatable.stop();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Progressive JPEG Rendering in Fresco (Java)\nDESCRIPTION: This code snippet demonstrates how to build an image request that enables progressive rendering for JPEG images using Fresco. It sets up a DraweeController with the progressive rendering option enabled.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/progressive-jpegs.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nUri uri;\nImageRequest request = ImageRequestBuilder.newBuilderWithSource(uri)\n    .setProgressiveRenderingEnabled(true)\n    .build();\nDraweeController controller = Fresco.newDraweeControllerBuilder()\n    .setImageRequest(request)\n    .setOldController(mSimpleDraweeView.getController())\n    .build();\nmSimpleDraweeView.setController(controller);\n```\n\n----------------------------------------\n\nTITLE: Basic Fresco Initialization in Java\nDESCRIPTION: Simple initialization of Fresco library with default configuration.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/configure-image-pipeline.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nFresco.initialize(context);\n```\n\n----------------------------------------\n\nTITLE: Loading First Available Image from Multiple URIs in Fresco\nDESCRIPTION: Configures Fresco to attempt loading images from multiple URIs in order of preference. The first successfully loaded image (from memory cache, disk cache, or network) will be displayed. This is useful when the same image is available from different sources.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/requesting-multiple-images.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nUri uri1, uri2;\nImageRequest request = ImageRequest.fromUri(uri1);\nImageRequest request2 = ImageRequest.fromUri(uri2);\nImageRequest[] requests = { request1, request2 };\n\nDraweeController controller = Fresco.newDraweeControllerBuilder()\n    .setFirstAvailableImageRequests(requests)\n    .setOldController(mSimpleDraweeView.getController())\n    .build();\nmSimpleDraweeView.setController(controller);\n```\n\n----------------------------------------\n\nTITLE: Fetching Decoded Image with Fresco ImagePipeline in Java\nDESCRIPTION: Demonstrates how to use the ImagePipeline to fetch a decoded image. The method returns a DataSource containing a CloseableReference to a CloseableImage.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/using-image-pipeline.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nImagePipeline imagePipeline = Fresco.getImagePipeline();\nDataSource<CloseableReference<CloseableImage>>\n    dataSource = imagePipeline.fetchDecodedImage(imageRequest, callerContext);\n```\n\n----------------------------------------\n\nTITLE: Fetching Image from Bitmap Cache in Fresco ImagePipeline in Java\nDESCRIPTION: Illustrates how to retrieve an image from the bitmap cache synchronously. It's important to properly manage the CloseableReference and close the DataSource to prevent memory leaks.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/using-image-pipeline.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nDataSource<CloseableReference<CloseableImage>> dataSource =\n    imagePipeline.fetchImageFromBitmapCache(imageRequest, callerContext);\ntry {\n  CloseableReference<CloseableImage> imageReference = dataSource.getResult();\n  if (imageReference != null) {\n    try {\n      // Do something with the image, but do not keep the reference to it!\n      // The image may get recycled as soon as the reference gets closed below.\n      // If you need to keep a reference to the image, read the following sections.\n    } finally {\n      CloseableReference.closeSafely(imageReference);\n    }\n  } else {\n    // cache miss\n    ...\n  }\n} finally {\n  dataSource.close();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Rotation for JPEG Images in Fresco\nDESCRIPTION: Shows how to enable automatic image rotation based on JPEG EXIF metadata. This implementation automatically adjusts the image orientation to match the device's orientation.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/rotation.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal ImageRequest imageRequest = ImageRequestBuilder.newBuilderWithSource(uri)\n    .setRotationOptions(RotationOptions.autoRotate())\n    .build();\nmSimpleDraweeView.setController(\n    Fresco.newDraweeControllerBuilder()\n        .setImageRequest(imageRequest)\n        .build());\n```\n\n----------------------------------------\n\nTITLE: Fetching Encoded Image with Fresco ImagePipeline in Java\nDESCRIPTION: Shows how to fetch an encoded image using the ImagePipeline. This method returns a DataSource containing a CloseableReference to a PooledByteBuffer with the compressed image data.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/using-image-pipeline.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nDataSource<CloseableReference<PooledByteBuffer>>\n    dataSource = imagePipeline.fetchEncodedImage(imageRequest, callerContext);\n```\n\n----------------------------------------\n\nTITLE: Enabling Tap-to-Retry in Fresco Drawee Controller\nDESCRIPTION: Code snippet demonstrating how to enable the tap-to-retry feature when building a custom Controller for a Drawee. This allows the image pipeline to retry loading an image when a user taps on it, with up to four attempts before showing the failure image.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/drawee-branches.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n.setTapToRetryEnabled(true)\n```\n\n----------------------------------------\n\nTITLE: Checking If Image Is In Disk Cache Asynchronously in Fresco\nDESCRIPTION: Shows how to asynchronously check if an image is present in Fresco's disk cache using a DataSource and DataSubscriber pattern. This is necessary since disk operations must be performed off the main thread.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/caching.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nDataSource<Boolean> inDiskCacheSource = imagePipeline.isInDiskCache(uri);\nDataSubscriber<Boolean> subscriber = new BaseDataSubscriber<Boolean>() {\n    @Override\n    protected void onNewResultImpl(DataSource<Boolean> dataSource) {\n      if (!dataSource.isFinished()) {\n        return;\n      }\n      boolean isInCache = dataSource.getResult();\n      // your code here\n    }\n  };\ninDiskCacheSource.subscribe(subscriber, executor);\n```\n\n----------------------------------------\n\nTITLE: Loading Low-Resolution Image Before High-Resolution Image in Fresco\nDESCRIPTION: Sets up a DraweeController to first display a low-resolution image while a high-resolution image loads in the background. This provides a better user experience than showing a placeholder during the entire loading process.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/requesting-multiple-images.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nUri lowResUri, highResUri;\nDraweeController controller = Fresco.newDraweeControllerBuilder()\n    .setLowResImageRequest(ImageRequest.fromUri(lowResUri))\n    .setImageRequest(ImageRequest.fromUri(highResUri))\n    .setOldController(mSimpleDraweeView.getController())\n    .build();\nmSimpleDraweeView.setController(controller);\n```\n\n----------------------------------------\n\nTITLE: Implementing Circular Bitmap Transformation in Java\nDESCRIPTION: Implementation of a BitmapTransformation that converts images to circular shape using native rounding filter, applied immediately after bitmap decoding.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/post-processor.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class CircularBitmapTransformation implements BitmapTransformation {\n\n  @Override\n  public void transform(Bitmap bitmap) {\n    NativeRoundingFilter.toCircle(bitmap);\n  }\n\n  @Override\n  public boolean modifiesTransparency() {\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Animated WebP Images with Fresco (Java)\nDESCRIPTION: This Java code example shows how to load and display an animated WebP image using Fresco. It demonstrates setting up a DraweeController with auto-play animations enabled.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/webp-support.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nDraweeController controller = Fresco.newDraweeControllerBuilder()\n    .setUri(\"http://example.org/somefolder/animated.webp\")\n    .setAutoPlayAnimations(true)\n    .build();\nmSimpleDraweeView.setController(controller);\n```\n\n----------------------------------------\n\nTITLE: Manually Controlling Animations with Fresco ControllerListener\nDESCRIPTION: Implements a ControllerListener to get notified when an image is loaded, allowing manual control of the animation. The onFinalImageSet method receives an Animatable object that can be used to start the animation when the image is ready.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/animations.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nControllerListener controllerListener = new BaseControllerListener<ImageInfo>() {\n    @Override\n    public void onFinalImageSet(\n        String id,\n        @Nullable ImageInfo imageInfo,\n        @Nullable Animatable anim) {\n        if (anim != null) {\n          // app-specific logic to enable animation starting\n          anim.start();\n        }\n    }\n};\n\nUri uri;\nDraweeController controller = Fresco.newDraweeControllerBuilder()\n    .setUri(uri)\n    .setControllerListener(controllerListener)\n    // other setters\n    .build();\nmSimpleDraweeView.setController(controller);\n```\n\n----------------------------------------\n\nTITLE: Prefetching Images to Disk Cache in Fresco\nDESCRIPTION: Demonstrates how to prefetch images to disk cache using Fresco's image pipeline. This method performs network fetch but skips image decoding to reduce CPU usage.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/prefetching.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimagePipeline.prefetchToDiskCache(imageRequest, callerContext);\n```\n\n----------------------------------------\n\nTITLE: Getting Results from a DataSource in Fresco\nDESCRIPTION: This snippet demonstrates how to retrieve a result from a DataSource of CloseableReference<T> using a BaseDataSubscriber. The result is only valid within the scope of the onNewResultImpl callback.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/datasources-datasubscribers.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n    DataSource<CloseableReference<T>> dataSource = ...;\n\n    DataSubscriber<CloseableReference<T>> dataSubscriber =\n        new BaseDataSubscriber<CloseableReference<T>>() {\n          @Override\n          protected void onNewResultImpl(\n              DataSource<CloseableReference<T>> dataSource) {\n            if (!dataSource.isFinished()) {\n              // if we are not interested in the intermediate images,\n              // we can just return here.\n              return;\n            }\n            CloseableReference<T> ref = dataSource.getResult();\n            if (ref != null) {\n              try {\n                // do something with the result\n                T result = ref.get();\n                ...\n              } finally {\n                CloseableReference.closeSafely(ref);\n              }\n            }\n          }\n\n          @Override\n          protected void onFailureImpl(DataSource<CloseableReference<T>> dataSource) {\n            Throwable t = dataSource.getFailureCause();\n            // handle failure\n          }\n        };\n\n    dataSource.subscribe(dataSubscriber, executor);\n```\n\n----------------------------------------\n\nTITLE: Initializing Fresco with OkHttp Network Layer\nDESCRIPTION: Java code to configure the Fresco image pipeline to use OkHttp as the network layer. This replaces the standard initialization procedure and uses OkHttpImagePipelineConfigFactory instead of ImagePipelineConfig.newBuilder.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/using-other-network-layers.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nContext context;\nOkHttpClient okHttpClient; // build on your own\nImagePipelineConfig config = OkHttpImagePipelineConfigFactory\n    .newBuilder(context, okHttpClient)\n    . // other setters\n    . // setNetworkFetcher is already called for you\n    .build();\nFresco.initialize(context, config);\n```\n\n----------------------------------------\n\nTITLE: Displaying Android Notification with Retrieved Bitmap\nDESCRIPTION: Implements the displayNotification method that creates and shows an Android notification with the bitmap retrieved from Fresco as the large icon. It handles null bitmap gracefully in case the image fetch failed.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/images-in-notifications.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate void displayNotification(@Nullable Bitmap bitmap) {\n  final NotificationCompat.Builder notificationBuilder =\n      new NotificationCompat.Builder(getContext())\n          .setSmallIcon(R.drawable.ic_done)\n          .setLargeIcon(bitmap)\n          .setContentTitle(\"Fresco Says Hello\")\n          .setContentText(\"Notification Text ...\");\n\n  final NotificationManager notificationManager =\n      (NotificationManager) getContext().getSystemService(Context.NOTIFICATION_SERVICE);\n\n  notificationManager.notify(NOTIFICATION_ID, notificationBuilder.build());\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing ImageRequest with Postprocessor\nDESCRIPTION: Demonstrates how to create a custom ImageRequest with a postprocessor and set it to a DraweeController for advanced image manipulation.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/using-controllerbuilder.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nUri uri;\nPostprocessor myPostprocessor = new Postprocessor() { ... }\nImageRequest request = ImageRequestBuilder.newBuilderWithSource(uri)\n    .setPostprocessor(myPostprocessor)\n    .build();\n\nDraweeController controller = Fresco.newDraweeControllerBuilder()\n    .setImageRequest(request)\n    .setOldController(mSimpleDraweeView.getController())\n    // other setters as you need\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Adding ControllerListener to DraweeController in Java\nDESCRIPTION: Code showing how to attach a ControllerListener to a DraweeController when loading an image in Fresco.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/listening-to-events.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nDraweeController controller = Fresco.newDraweeControllerBuilder()\n    .setImageRequest(request)\n    .setControllerListener(new MyControllerListener())\n    .build();\nmSimpleDraweeView.setController(controller);\n```\n\n----------------------------------------\n\nTITLE: Implementing Grey-Scale Filter Post-processor in Java\nDESCRIPTION: Implementation of a post-processor that converts bitmaps to greyscale using pixel manipulation. The process method performs in-place modifications of the provided bitmap, calculating luminance values for each pixel.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/post-processor.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class FastGreyScalePostprocessor extends BasePostprocessor {\n\n  @Override\n  public void process(Bitmap bitmap) {\n    final int w = bitmap.getWidth();\n    final int h = bitmap.getHeight();\n    final int[] pixels = new int[w * h];\n\n    bitmap.getPixels(pixels, 0, w, 0, 0, w, h);\n\n    for (int x = 0; x < w; x++) {\n      for (int y = 0; y < h; y++) {\n        final int offset = y * w + x;\n        pixels[offset] = getGreyColor(pixels[offset]);\n      }\n    }\n\n    bitmap.setPixels(pixels, 0, w, 0, 0, w, h);\n  }\n\n  static int getGreyColor(int color) {\n    final int alpha = color & 0xFF000000;\n    final int r = (color >> 16) & 0xFF;\n    final int g = (color >> 8) & 0xFF;\n    final int b = color & 0xFF;\n\n    final int luminance = (int) (0.2126 * r + 0.7152 * g + 0.0722 * b);\n\n    return alpha | luminance << 16 | luminance << 8 | luminance;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Encoded Images with Fresco\nDESCRIPTION: This snippet shows how to fetch an encoded image using the ImagePipeline in Fresco, returning a DataSource containing a CloseableReference to a PooledByteBuffer.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/datasources-datasubscribers.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n    DataSource<CloseableReference<PooledByteBuffer>> dataSource =\n        mImagePipeline.fetchEncodedImage(imageRequest, CALLER_CONTEXT);\n```\n\n----------------------------------------\n\nTITLE: Registering a Global RequestListener in Fresco's Image Pipeline\nDESCRIPTION: Example showing how to register a custom RequestListener during Fresco initialization to monitor all image requests globally.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/listening-to-events.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nfinal Set<RequestListener> listeners = new HashSet<>();\nlisteners.add(new MyRequestLoggingListener());\n\nImagePipelineConfig imagePipelineConfig = ImagePipelineConfig.newBuilder(this)\n  .setRequestListeners(listeners)\n  .build();\n\nFresco.initialize(this, imagePipelineConfig);\n```\n\n----------------------------------------\n\nTITLE: Configuring SimpleDraweeView with Aspect Ratio in XML\nDESCRIPTION: Example of SimpleDraweeView implementation with aspect ratio. This is the only case where wrap_content is supported for layout_height, when a specific aspect ratio is defined.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/using-simpledraweeview.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<com.facebook.drawee.view.SimpleDraweeView\n    android:id=\"@+id/my_image_view\"\n    android:layout_width=\"20dp\"\n    android:layout_height=\"wrap_content\"\n    fresco:viewAspectRatio=\"1.33\"\n    />\n```\n\n----------------------------------------\n\nTITLE: Implementing Scaling Blur Post-processor in Java\nDESCRIPTION: Advanced post-processor implementation that performs efficient blurring by downscaling the image, applying blur, and letting GPU handle upscaling. Uses PlatformBitmapFactory for custom output bitmap creation.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/post-processor.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class ScalingBlurPostprocessor extends FullResolutionBlurPostprocessor {\n\n  private static final int SCALE_RATIO = 4;\n\n  @Override\n  public CloseableReference<Bitmap> process(\n      Bitmap sourceBitmap,\n      PlatformBitmapFactory bitmapFactory) {\n    final CloseableReference<Bitmap> bitmapRef = bitmapFactory.createBitmap(\n        sourceBitmap.getWidth() / SCALE_RATIO,\n        sourceBitmap.getHeight() / SCALE_RATIO);\n\n    try {\n      final Bitmap destBitmap = bitmapRef.get();\n      final Canvas canvas = new Canvas(destBitmap);\n\n      canvas.drawBitmap(\n          sourceBitmap,\n          null,\n          new Rect(0, 0, destBitmap.getWidth(), destBitmap.getHeight()),\n          mPaint);\n\n      NativeBlurFilter.iterativeBoxBlur(destBitmap, BLUR_RADIUS / SCALE_RATIO, BLUR_ITERATIONS);\n\n      return CloseableReference.cloneOrNull(bitmapRef);\n    } finally {\n      CloseableReference.closeSafely(bitmapRef);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing DraweeHierarchy in Java\nDESCRIPTION: Code example showing how to modify an existing DraweeHierarchy without rebuilding it completely. This approach is used for simple modifications to an already configured SimpleDraweeView.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/using-simpledraweeview.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nmSimpleDraweeView.getHierarchy().setPlaceHolderImage(placeholderImage);\n```\n\n----------------------------------------\n\nTITLE: Setting Focus Point for focusCrop ScaleType in Java\nDESCRIPTION: Demonstrates how to programmatically set the focus point for the 'focusCrop' ScaleType in Java. The focus point determines which part of the image should be centered in the view.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/scaletypes.md#2025-04-22_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nPointF focusPoint = new PointF(0f, 0.5f);\nmSimpleDraweeView\n    .getHierarchy()\n    .setActualImageFocusPoint(focusPoint);\n```\n\n----------------------------------------\n\nTITLE: Processing Encoded Images in Fresco\nDESCRIPTION: This snippet demonstrates how to create an InputStream from a PooledByteBuffer to read encoded image data, including examples of checking image format and writing to a file.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/datasources-datasubscribers.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n      InputStream is = new PooledByteBufferInputStream(result);\n      try {\n        // Example: get the image format\n        ImageFormat imageFormat = ImageFormatChecker.getImageFormat(is);\n        // Example: write input stream to a file\n        Files.copy(is, path);\n      } catch (...) {\n        ...\n      } finally {\n        Closeables.closeQuietly(is);\n      }\n```\n\n----------------------------------------\n\nTITLE: Setting ScaleType in XML for Fresco Drawee\nDESCRIPTION: Example of setting the 'focusCrop' ScaleType in XML for a Fresco Drawee. This attribute is specific to Fresco and should be used instead of the Android 'scaleType' attribute.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/scaletypes.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nfresco:actualImageScaleType=\"focusCrop\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Forced Image Rotation in Fresco\nDESCRIPTION: Demonstrates how to force a specific rotation angle (90 degrees) for an image using Fresco's ImageRequestBuilder. This code shows the setup of an ImageRequest with forced rotation options.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/rotation.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfinal ImageRequest imageRequest = ImageRequestBuilder.newBuilderWithSource(uri)\n    .setRotationOptions(RotationOptions.forceRotation(RotationOptions.ROTATE_90))\n    .build();\nmSimpleDraweeView.setController(\n    Fresco.newDraweeControllerBuilder()\n        .setImageRequest(imageRequest)\n        .build());\n```\n\n----------------------------------------\n\nTITLE: Prefetching Images to Bitmap Cache in Fresco\nDESCRIPTION: Shows how to prefetch images directly to bitmap cache in Fresco. This method performs both network fetch and image decoding, using more CPU resources but providing faster image loading.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/prefetching.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimagePipeline.prefetchToBitmapCache(imageRequest, callerContext);\n```\n\n----------------------------------------\n\nTITLE: Configuring Fresco Disk Cache\nDESCRIPTION: Example of creating and configuring disk cache settings using DiskCacheConfig builder pattern.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/configure-image-pipeline.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nDiskCacheConfig diskCacheConfig = DiskCacheConfig.newBuilder()\n   .set....\n   .set....\n   .build()\n\n// when building ImagePipelineConfig\n.setMainDiskCacheConfig(diskCacheConfig)\n```\n\n----------------------------------------\n\nTITLE: Handling Touch Events for Tap-to-Retry in DraweeHolder in Java\nDESCRIPTION: Enables the tap-to-retry functionality in custom views by passing touch events to the DraweeHolder. This allows users to tap the image to retry loading when it fails.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/writing-custom-views.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic boolean onTouchEvent(MotionEvent event) {\n  return mDraweeHolder.onTouchEvent(event) || super.onTouchEvent(event);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Rounded Corners in Java Using RoundingParams Builder\nDESCRIPTION: Java code showing how to create a RoundingParams object and apply it when building a GenericDraweeHierarchy. This approach allows programmatic configuration of rounded corners when initializing a SimpleDraweeView.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/rounded-corners-and-circles.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nRoundingParams roundingParams = RoundingParams.fromCornersRadius(7f);\nmSimpleDraweeView.setHierarchy(new GenericDraweeHierarchyBuilder(getResources())\n        .setRoundingParams(roundingParams)\n        .build());\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ImageDecoder in Java for Fresco\nDESCRIPTION: This snippet shows how to create a custom image decoder by implementing the ImageDecoder interface. The decode method should process the given EncodedImage and return a corresponding CloseableImage.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/03-customizing-image-formats.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomDecoder implements ImageDecoder {\n\n  @Override\n  public CloseableImage decode(\n      EncodedImage encodedImage,\n      int length,\n      QualityInfo qualityInfo,\n      ImageDecodeOptions options) {\n    // Decode the given encodedImage and return a\n    // corresponding (decoded) CloseableImage.\n    CloseableImage closeableImage = ...;\n    return closeableImage;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom DrawableFactory for Fresco\nDESCRIPTION: This code shows how to create a custom DrawableFactory for Fresco. It defines methods to check if the factory supports a specific image type and to create a custom Drawable for that image type.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/03-customizing-image-formats.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic static class CustomDrawableFactory implements DrawableFactory {\n\n  @Override\n  public boolean supportsImageType(CloseableImage image) {\n    // You can either override a built-in format, like `CloseableStaticBitmap`\n    // or your own implementations.\n    return image instanceof CustomCloseableImage;\n  }\n\n  @Nullable\n  @Override\n  public Drawable createDrawable(CloseableImage image) {\n    // Create and return your custom drawable for the given CloseableImage.\n    // It is guaranteed that the `CloseableImage` is an instance of the\n    // declared classes in `supportsImageType` above.\n    CustomCloseableImage myCloseableImage = (CustomCloseableImage) image;\n    Drawable myDrawable = ...; //e.g. new CustomDrawable(myCloseableImage)\n    return myDrawable;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Rounding Parameters After Hierarchy Creation\nDESCRIPTION: Java code demonstrating how to change rounding parameters on an existing DraweeHierarchy. This example shows setting border color and width, as well as configuring the view to display the image as a circle.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/rounded-corners-and-circles.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nint color = getResources().getColor(R.color.red);\nRoundingParams roundingParams = RoundingParams.fromCornersRadius(5f);\nroundingParams.setBorder(color, 1.0f);\nroundingParams.setRoundAsCircle(true);\nmSimpleDraweeView.getHierarchy().setRoundingParams(roundingParams);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom ImageDecoder for Specific Image in Fresco\nDESCRIPTION: This code demonstrates how to set a custom image decoder for a specific image request using Fresco's DraweeControllerBuilder. It allows for local override of the default decoder.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/03-customizing-image-formats.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nImageDecoder customDecoder = ...;\nUri uri = ...;\ndraweeView.setController(\n  Fresco.newDraweeControllerBuilder()\n        .setImageRequest(\n          ImageRequestBuilder.newBuilderWithSource(uri)\n              .setImageDecodeOptions(\n                  ImageDecodeOptions.newBuilder()\n                      .setCustomImageDecoder(customDecoder)\n                      .build())\n              .build())\n        .build());\n```\n\n----------------------------------------\n\nTITLE: Setting Default Progress Bar in Fresco\nDESCRIPTION: Shows how to set a default progress bar using ProgressBarDrawable class. This creates a dark blue rectangle progress indicator along the bottom of the Drawee.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/progress-bars.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n.setProgressBarImage(new ProgressBarDrawable())\n```\n\n----------------------------------------\n\nTITLE: Setting an Image in DraweeHolder with Controller in Java\nDESCRIPTION: Code to load an image into a DraweeHolder using a controller. This demonstrates proper controller recycling by setting the old controller when building a new one.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/writing-custom-views.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nDraweeController controller = Fresco.newDraweeControllerBuilder()\n    .setUri(uri)\n    .setOldController(mDraweeHolder.getController())\n    .build();\nmDraweeHolder.setController(controller);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom FormatChecker for Fresco ImageFormat\nDESCRIPTION: This code implements a custom FormatChecker for detecting a specific image format in Fresco. It checks the header bytes of an image file to determine if it matches the custom format.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/03-customizing-image-formats.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic static class ColorFormatChecker implements ImageFormat.FormatChecker {\n\n  private static final byte[] HEADER = ImageFormatCheckerUtils.asciiBytes(\"my_header\");\n\n  @Override\n  public int getHeaderSize() {\n    return HEADER.length;\n  }\n\n  @Nullable\n  @Override\n  public ImageFormat determineFormat(byte[] headerBytes, int headerSize) {\n    if (headerSize < getHeaderSize()) {\n      return null;\n    }\n    if (ImageFormatCheckerUtils.startsWithPattern(headerBytes, HEADER)) {\n      return CUSTOM_FORMAT;\n    }\n    return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Retry Functionality in Fresco DraweeController\nDESCRIPTION: This Java code demonstrates how to enable the retry functionality in a Fresco DraweeController. It sets up an image request with tap-to-retry enabled, allowing up to four retry attempts before displaying the failure image.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/placeholder-failure-retry.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nmSimpleDraweeView.setController(\n    Fresco.newDraweeControllerBuilder()\n        .setTapToRetryEnabled(true)\n        .setUri(uri)\n        .build());\n```\n\n----------------------------------------\n\nTITLE: Handling Attach/Detach Events in Custom Views with DraweeHolder in Java\nDESCRIPTION: These overridden methods manage the DraweeHolder lifecycle by properly handling view attachment and detachment events. This prevents memory leaks and ensures images are displayed correctly when the view becomes visible.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/writing-custom-views.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nDraweeHolder mDraweeHolder;\n\n@Override\npublic void onDetachedFromWindow() {\n  super.onDetachedFromWindow();\n  mDraweeHolder.onDetach();\n}\n\n@Override\npublic void onStartTemporaryDetach() {\n  super.onStartTemporaryDetach();\n  mDraweeHolder.onDetach();\n}\n\n@Override\npublic void onAttachedToWindow() {\n  super.onAttachedToWindow();\n  mDraweeHolder.onAttach();\n}\n\n@Override\npublic void onFinishTemporaryDetach() {\n  super.onFinishTemporaryDetach();\n  mDraweeHolder.onAttach();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom ImageFormat and Decoder in Fresco\nDESCRIPTION: This snippet demonstrates how to register a custom image format, format checker, and decoder with Fresco during initialization. It uses ImageDecoderConfig to add decoding capability for the custom format.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/03-customizing-image-formats.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nImageFormat myFormat = ...;\nImageFormat.FormatChecker myFormatChecker = ...;\nImageDecoder myDecoder = ...;\nImageDecoderConfig imageDecoderConfig = new ImageDecoderConfig.Builder()\n  .addDecodingCapability(\n    myFormat,\n    myFormatChecker,\n    myDecoder)\n  .build();\n\nImagePipelineConfig config = ImagePipelineConfig.newBuilder()\n  .setImageDecoderConfig(imageDecoderConfig)\n  .build();\n\nFresco.initialize(context, config);\n```\n\n----------------------------------------\n\nTITLE: Using EXIF Thumbnail Previews in Fresco\nDESCRIPTION: Enables local thumbnail previews for JPEG images containing EXIF thumbnails. The DraweeView will first display the embedded thumbnail preview and then show the full image once loaded. This feature only works with local JPEG images.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/requesting-multiple-images.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nUri uri;\nImageRequest request = ImageRequestBuilder.newBuilderWithSource(uri)\n    .setLocalThumbnailPreviewsEnabled(true)\n    .build();\n\nDraweeController controller = Fresco.newDraweeControllerBuilder()\n    .setImageRequest(request)\n    .setOldController(mSimpleDraweeView.getController())\n    .build();\nmSimpleDraweeView.setController(controller);\n```\n\n----------------------------------------\n\nTITLE: Implementing ControllerListener for DraweeView Events in Java\nDESCRIPTION: Example of a custom ControllerListener that responds to various image loading events in a DraweeView, including successful loading, intermediate image sets, and failures.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/listening-to-events.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class MyControllerListener extends new BaseControllerListener<ImageInfo>() {\n\n  @Override\n  public void onFinalImageSet(String id, ImageInfo imageInfo, Animatable animatable) {\n    Log.i(\"DraweeUpdate\", \"Image is fully loaded!\");\n  }\n\n  @Override\n  public void onIntermediateImageSet(String id, ImageInfo imageInfo, Animatable animatable) {\n    Log.i(\"DraweeUpdate\", \"Image is partly loaded! (maybe it's a progressive JPEG?)\");\n    if (imageInfo != null) {\n      int quality = imageInfo.getQualityInfo().getQuality();\n      Log.i(\"DraweeUpdate\", \"Image quality (number scans) is: \" + quality);\n    }\n  }\n\n  @Override\n  public void onFailure(String id, Throwable throwable) {\n    Log.i(\"DraweeUpdate\", \"Image failed to load: \" + throwable.getMessage());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Global Custom DrawableFactory in Fresco\nDESCRIPTION: This snippet demonstrates how to register a custom DrawableFactory globally when initializing Fresco. It uses DraweeConfig to add the custom factory.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/03-customizing-image-formats.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nDrawableFactory myDrawableFactory = ...;\n\nDraweeConfig draweeConfig = DraweeConfig.newBuilder()\n  .addCustomDrawableFactory(myDrawableFactory)\n  .build();\n\nFresco.initialize(this, imagePipelineConfig, draweeConfig);\n```\n\n----------------------------------------\n\nTITLE: Initializing MultiDraweeHolder in Custom View in Java\nDESCRIPTION: Example of creating and initializing a MultiDraweeHolder for managing multiple DraweeHolders in a single custom view. This allows multiple images to be displayed within a single view.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/writing-custom-views.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nMultiDraweeHolder<GenericDraweeHierarchy> mMultiDraweeHolder;\n\nprivate void init() {\n  GenericDraweeHierarchy hierarchy = new GenericDraweeHierarchyBuilder(getResources())\n    .set...\n    .build();\n  mMultiDraweeHolder = new MultiDraweeHolder<GenericDraweeHierarchy>();\n  mMultiDraweeHolder.add(new DraweeHolder<GenericDraweeHierarchy>(hierarchy, context));\n  // repeat for more hierarchies\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Local Custom DrawableFactory for Specific Image in Fresco\nDESCRIPTION: This code shows how to set a custom DrawableFactory for a specific image request using Fresco's DraweeControllerBuilder. It allows for local override of drawable creation.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/03-customizing-image-formats.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nDrawableFactory myDrawableFactory = ...;\nUri uri = ...;\n\nsimpleDraweeView.setController(Fresco.newDraweeControllerBuilder()\n  .setUri(uri)\n  .setCustomDrawableFactory(factory)\n  .build());\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Network Fetcher in Fresco\nDESCRIPTION: Java code to initialize Fresco with a custom network fetcher implementation. This allows for complete control over how the network layer behaves when loading images.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/using-other-network-layers.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nImagePipelineConfig config = ImagePipelineConfig.newBuilder()\n  .setNetworkFetcher(myNetworkFetcher);\n  . // other setters\n  .build();\nFresco.initialize(context, config);\n```\n\n----------------------------------------\n\nTITLE: Creating DraweeHolder in Custom View in Java\nDESCRIPTION: Sample implementation of initializing a DraweeHolder in a custom view. This creates a hierarchy and initializes the holder in the view's initialization method.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/writing-custom-views.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nclass CustomView extends View {\n  DraweeHolder<GenericDraweeHierarchy> mDraweeHolder;\n\n  // constructors following above pattern\n\n  private void init() {\n    GenericDraweeHierarchy hierarchy = new GenericDraweeHierarchyBuilder(getResources())\n      .set...\n      .set...\n      .build();\n    mDraweeHolder = DraweeHolder.create(hierarchy, context);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Proper Handling of CloseableReference Ownership in Java\nDESCRIPTION: Shows how to properly manage a CloseableReference when you are the owner. The example demonstrates using a try-finally block to ensure the reference is closed after use, which is the recommended pattern.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/closeable-references.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nvoid gee() {\n  // We are the caller of `foo` and so\n  // we own the returned reference.\n  CloseableReference<Val> ref = foo();\n  try {\n    // `haa` is a callee and not a caller, and so\n    // it is NOT the owner of this reference, and\n    // it must NOT close it.\n    haa(ref);\n  } finally {\n    // We are not returning the reference to the\n    // caller of this method, so we are still the owner,\n    // and must close it before leaving the scope.\n    ref.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for OkHttp2 in Fresco\nDESCRIPTION: Gradle configuration to include the OkHttp2 network layer for Fresco. This should be added to the dependencies section in the build.gradle file alongside other Fresco dependencies.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/using-other-network-layers.md#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  // your project's other dependencies\n  implementation \"com.facebook.fresco:imagepipeline-okhttp:{{site.current_version}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Fresco Feature Modules Configuration\nDESCRIPTION: Adding additional Fresco modules for GIF, WebP support and Android support library dependencies\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/index.md#2025-04-22_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n\n  // For animated GIF support\n  implementation 'com.facebook.fresco:animated-gif:{{site.current_version}}'\n\n  // For WebP support, including animated WebP\n  implementation 'com.facebook.fresco:animated-webp:{{site.current_version}}'\n  implementation 'com.facebook.fresco:webpsupport:{{site.current_version}}'\n\n  // For WebP support, without animations\n  implementation 'com.facebook.fresco:webpsupport:{{site.current_version}}'\n\n  // Provide the Android support library (you might already have this or a similar dependency)\n  implementation 'com.android.support:support-core-utils:{{site.support_library_version}}'\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Values from CloseableReference in Java\nDESCRIPTION: Demonstrates how to correctly access the value from a CloseableReference without closing the underlying value directly. This snippet emphasizes the rule that you should never close the wrapped value, only the reference.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/closeable-references.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n  CloseableReference<Val> ref = foo();\n\n  Val val = ref.get();\n  // do something with val\n  // ...\n\n  // Do NOT close the value!\n  //// val.close();\n\n  // DO close the reference instead.\n  ref.close();\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Image in SimpleDraweeView (Java)\nDESCRIPTION: This Java code shows how to programmatically set a placeholder image for a SimpleDraweeView. It uses the getHierarchy() method to access the view's hierarchy and set the placeholder image.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/placeholder-failure-retry.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nmSimpleDraweeView.getHierarchy().setPlaceholderImage(placeholderImage);\n```\n\n----------------------------------------\n\nTITLE: Handling CloseableReference as a Callee in Java\nDESCRIPTION: Shows how to properly handle a CloseableReference when you receive it as a parameter and are not the owner. The callee should not close the reference as it's still owned by the caller.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/closeable-references.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nvoid haa(CloseableReference<?> ref) {\n  // We are callee, and not a caller, and so\n  // we must NOT close the reference.\n  // We are guaranteed that the reference won't\n  // become invalid for the duration of this call.\n  Log.println(\"Haa: \" + ref.get());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Progress Bar in Fresco\nDESCRIPTION: Demonstrates how to create a custom progress bar by extending Drawable class and overriding onLevelChange method. The level parameter ranges from 0-10,000 representing download progress.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/progress-bars.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass CustomProgressBar extends Drawable {\n   @Override\n   protected boolean onLevelChange(int level) {\n     // level is on a scale of 0-10,000\n     // where 10,000 means fully downloaded\n\n     // your app's logic to change the drawable's\n     // appearance here based on progress\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Failure Image in SimpleDraweeView (XML)\nDESCRIPTION: This XML snippet demonstrates how to set a failure image for a SimpleDraweeView. The failure image is displayed when the image request fails due to network or image data issues.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/placeholder-failure-retry.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<com.facebook.drawee.view.SimpleDraweeView\n  android:id=\"@+id/my_image_view\"\n  android:layout_width=\"20dp\"\n  android:layout_height=\"20dp\"\n  fresco:failureImage=\"@drawable/my_failure_drawable\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Creating and Returning a CloseableReference in Java\nDESCRIPTION: Demonstrates how to create a CloseableReference that will be owned by the caller. This pattern shows the first rule of CloseableReference usage where the caller becomes responsible for closing the reference.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/closeable-references.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nCloseableReference<Val> foo() {\n  Val val;\n  // We are returning the reference from this method,\n  // so whoever is calling this method is the owner\n  // of the reference and is in charge of closing it.\n  return CloseableReference.of(val);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ScaleType in Java for Fresco\nDESCRIPTION: Example of implementing a custom ScaleType in Java for Fresco. This implementation replicates the 'FIT_CENTER' scale type, demonstrating how to calculate scale and translation for image positioning.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/scaletypes.md#2025-04-22_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic class AbstractScaleType implements ScaleType {\n  @Override\n  public Matrix getTransform(Matrix outTransform, Rect parentRect, int childWidth, int childHeight, float focusX, float focusY) {\n    // calculate scale; we take the smaller of the horizontal and vertical scale factor so that the image always fits\n    final float scaleX = (float) parentRect.width() / (float) childWidth;\n    final float scaleY = (float) parentRect.height() / (float) childHeight;\n    final float scale = Math.min(scaleX, scaleY);\n\n    // calculate translation; we offset by parent bounds, and by half of the empty space\n    // note that the child dimensions need to be adjusted by the scale factor\n    final float dx = parentRect.left + (parentRect.width() - childWidth * scale) * 0.5f;\n    final float dy = parentRect.top + (parentRect.height() - childHeight * scale) * 0.5f;\n\n    // finally, set and return the transform\n    outTransform.setScale(scale, scale);\n    outTransform.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));\n    return outTransform;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Choice for Small Images in Fresco\nDESCRIPTION: Demonstrates how to specify the cache choice when making an image request in Fresco, directing small images to a dedicated cache to prevent them from being evicted by larger images.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/caching.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nImageRequest request = ImageRequestBuilder.newBuilderWithSource(uri)\n    .setCacheChoice(ImageRequest.CacheChoice.SMALL)\n```\n\n----------------------------------------\n\nTITLE: Synchronous Image Loading with Fresco ImagePipeline in Java\nDESCRIPTION: Demonstrates how to load an image synchronously using DataSources.waitForFinalResult(). This method blocks until the image is loaded or an error occurs. Proper resource management is crucial to avoid memory leaks.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/using-image-pipeline.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nDataSource<CloseableReference<CloseableImage>> dataSource =\n    imagePipeline.fetchImageFromBitmapCache(imageRequest, callerContext);\ntry {\n  CloseableReference<CloseableImage> result = DataSources.waitForFinalResult(dataSource);\n  if (result != null) {\n    // Do something with the image, but do not keep the reference to it!\n    // The image may get recycled as soon as the reference gets closed below.\n    // If you need to keep a reference to the image, read the following sections.\n  }\n} finally {\n  dataSource.close();\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding verifyDrawable for DraweeHolder in Java\nDESCRIPTION: Implementation of verifyDrawable to properly handle the DraweeHolder's drawable. This is necessary for correct invalidation and drawing of the Fresco image.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/writing-custom-views.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected boolean verifyDrawable(Drawable who) {\n  if (who == mDraweeHolder.getTopLevelDrawable()) {\n    return true;\n  }\n  // other logic for other Drawables in your view, if any\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling Prefetch Operations in Fresco\nDESCRIPTION: Demonstrates how to cancel ongoing prefetch operations by storing and closing the DataSource reference. Safe to call even after prefetch completion.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/prefetching.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// keep the reference to the returned data source.\nDataSource<Void> prefetchDataSource = imagePipeline.prefetchTo...;\n\n// later on, if/when you need to cancel the prefetch:\nprefetchDataSource.close();\n```\n\n----------------------------------------\n\nTITLE: Setting Failure Image in SimpleDraweeView (Java)\nDESCRIPTION: This Java code shows how to programmatically set a failure image for a SimpleDraweeView. It uses the getHierarchy() method to access the view's hierarchy and set the failure image.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/placeholder-failure-retry.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nmSimpleDraweeView.getHierarchy().setFailureImage(failureImage);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom ImageFormat in Java for Fresco\nDESCRIPTION: This snippet shows how to create a custom ImageFormat object for use with Fresco. The ImageFormat represents a specific image file format.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/03-customizing-image-formats.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate static final ImageFormat CUSTOM_FORMAT = new ImageFormat(\"format name\", \"format file extension\");\n```\n\n----------------------------------------\n\nTITLE: Retaining Results from a DataSource in Fresco\nDESCRIPTION: This snippet shows how to keep the result from a DataSource beyond the callback scope by maintaining a reference to it. It's important to close the reference when it's no longer needed to prevent memory leaks.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/datasources-datasubscribers.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n    DataSource<CloseableReference<T>> dataSource = ...;\n\n    DataSubscriber<CloseableReference<T>> dataSubscriber =\n        new BaseDataSubscriber<CloseableReference<T>>() {\n          @Override\n          protected void onNewResultImpl(\n              DataSource<CloseableReference<T>> dataSource) {\n            if (!dataSource.isFinished()) {\n              // if we are not interested in the intermediate images,\n              // we can just return here.\n              return;\n            }\n            // keep the closeable reference\n            mRef = dataSource.getResult();\n            // do something with the result\n            T result = mRef.get();\n            ...\n          }\n\n          @Override\n          protected void onFailureImpl(DataSource<CloseableReference<T>> dataSource) {\n            Throwable t = dataSource.getFailureCause();\n            // handle failure\n          }\n        };\n\n    dataSource.subscribe(dataSubscriber, executor);\n```\n\n----------------------------------------\n\nTITLE: Setting Retry Image in SimpleDraweeView (Java)\nDESCRIPTION: This Java code demonstrates how to programmatically set a retry image for a SimpleDraweeView. It uses the getHierarchy() method to access the view's hierarchy and set the retry image.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/placeholder-failure-retry.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nsimpleDraweeView.getHierarchy().setRetryImage(retryImage);\n```\n\n----------------------------------------\n\nTITLE: Creating URI for Local File with Fresco's UriUtil in Java\nDESCRIPTION: Code snippet that shows how to create a URI for a local file using Fresco's UriUtil helper class. This is necessary when loading local images into a DraweeView.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/faq.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal File file = new File(\"your/file/path/img.jpg\");\nfinal URI uri = UriUtil.getUriForFile(file);\n```\n\n----------------------------------------\n\nTITLE: Closing References in Fresco\nDESCRIPTION: This snippet demonstrates how to properly close a CloseableReference when it's no longer needed to prevent memory leaks in a Fresco application.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/datasources-datasubscribers.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n    CloseableReference.closeSafely(mRef);\n    mRef = null;\n```\n\n----------------------------------------\n\nTITLE: Adding Animated WebP Support Dependencies in Gradle (Groovy)\nDESCRIPTION: This code snippet demonstrates how to add dependencies for animated WebP support in your Gradle build file, including both the animated-webp and webpsupport libraries.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/webp-support.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  // ... your app's other dependencies\n  implementation 'com.facebook.fresco:animated-webp:{{site.current_version}}'\n  implementation 'com.facebook.fresco:webpsupport:{{site.current_version}}'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating URI for Android Resource with Fresco's UriUtil in Java\nDESCRIPTION: Code snippet that demonstrates how to create URIs for drawable resources using Fresco's UriUtil class. It shows both creating URIs for resources from the current app and from other packages.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/faq.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nfinal int resourceId = R.drawable.my_image;\nfinal URI uri = UriUtil.getUriForResourceId(resourceId);\n\n// alternatively, if it is from another package:\nfinal URI uri = UriUtil.getUriForQualifiedResource(\"com.myapp.plugin\", resourceId);\n```\n\n----------------------------------------\n\nTITLE: Fetching Decoded Images with Fresco\nDESCRIPTION: This snippet shows how to fetch a decoded image using the ImagePipeline in Fresco, returning a DataSource containing a CloseableReference to a CloseableImage.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/datasources-datasubscribers.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nDataSource<CloseableReference<CloseableImage>>\n    dataSource = imagePipeline.fetchDecodedImage(imageRequest, callerContext);\n```\n\n----------------------------------------\n\nTITLE: Android Manifest Configuration for Fresco\nDESCRIPTION: XML configuration for Android manifest including internet permission and application declaration\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/index.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n  <manifest\n    ...\n    >\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <application\n      ...\n      android:label=\"@string/app_name\"\n      android:name=\".MyApplication\"\n      >\n      ...\n    </application>\n    ...\n  </manifest>\n```\n\n----------------------------------------\n\nTITLE: Fresco Layout XML Configuration\nDESCRIPTION: XML layout configuration for SimpleDraweeView including custom namespace and attributes\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/index.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:fresco=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_height=\"match_parent\"\n    android:layout_width=\"match_parent\"\n    >\n\n<com.facebook.drawee.view.SimpleDraweeView\n    android:id=\"@+id/my_image_view\"\n    android:layout_width=\"130dp\"\n    android:layout_height=\"130dp\"\n    fresco:placeholderImage=\"@drawable/my_drawable\"\n    />\n```\n\n----------------------------------------\n\nTITLE: Converting CloseableImage to Bitmap in Fresco\nDESCRIPTION: This snippet demonstrates how to extract a Bitmap from a CloseableImage when using Fresco's image pipeline for decoded images.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/datasources-datasubscribers.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n    CloseableImage image = ref.get();\n    if (image instanceof CloseableBitmap) {\n      // do something with the bitmap\n      Bitmap bitmap = (CloseableBitmap image).getUnderlyingBitmap();\n      ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Image in SimpleDraweeView (XML)\nDESCRIPTION: This XML snippet demonstrates how to set a placeholder image for a SimpleDraweeView. The placeholder image is displayed before the actual image is loaded.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/placeholder-failure-retry.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<com.facebook.drawee.view.SimpleDraweeView\n  android:id=\"@+id/my_image_view\"\n  android:layout_width=\"20dp\"\n  android:layout_height=\"20dp\"\n  fresco:placeholderImage=\"@drawable/my_placeholder_drawable\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Creating an ImageRequest for Image URI in Fresco\nDESCRIPTION: Creates an ImageRequest object with the specified URI to initiate an image loading request in Fresco.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/images-in-notifications.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nImageRequest imageRequest = ImageRequest.fromUri(\"http://example.org/user/42/profile.jpg\"));\n```\n\n----------------------------------------\n\nTITLE: Using BaseBitmapDataSubscriber in Fresco\nDESCRIPTION: This snippet shows how to use the simplified BaseBitmapDataSubscriber to work directly with Bitmaps in Fresco. This approach has limitations and is only suitable for specific use cases.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/datasources-datasubscribers.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\ndataSource.subscribe(new BaseBitmapDataSubscriber() {\n    @Override\n    public void onNewResultImpl(@Nullable Bitmap bitmap) {\n      // You can use the bitmap here, but in limited ways.\n      // No need to do any cleanup.\n    }\n\n    @Override\n    public void onFailureImpl(DataSource dataSource) {\n      // No cleanup required here.\n    }\n  },\n  executor);\n```\n\n----------------------------------------\n\nTITLE: Configuring Verbose Logging for Fresco Debugging in Java\nDESCRIPTION: Code to enable detailed logging in Fresco by adding a RequestLoggingListener to the image pipeline configuration. This setup helps in diagnosing image loading issues by showing detailed information about each stage of the image request.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/troubleshooting.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSet<RequestListener> requestListeners = new HashSet<>();\nrequestListeners.add(new RequestLoggingListener());\nImagePipelineConfig config = ImagePipelineConfig.newBuilder(context)\n   // other setters\n   .setRequestListeners(requestListeners)\n   .build();\nFresco.initialize(context, config);\nFLog.setMinimumLoggingLevel(FLog.VERBOSE);\n```\n\n----------------------------------------\n\nTITLE: Enabling Downsampling in Fresco ImagePipeline Configuration\nDESCRIPTION: Demonstrates how to enable the experimental downsampling feature in Fresco's image pipeline configuration. Downsampling is faster than resizing and supports JPEG, PNG, and static WebP formats.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/resizing.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n   .setDownsampleEnabled(true)\n```\n\n----------------------------------------\n\nTITLE: Implementing Cached Watermark Post-processor in Java\nDESCRIPTION: Extension of WatermarkPostprocessor that implements caching functionality by providing a cache key based on watermark text and count parameters.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/post-processor.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class CachedWatermarkPostprocessor extends WatermarkPostprocessor {\n\n  @Override\n  public CacheKey getPostprocessorCacheKey() {\n    return new SimpleCacheKey(String.format(\n        (Locale) null,\n        \"text=%s,count=%d\",\n        mWatermarkText,\n        mCount));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple APKs for Different CPU Architectures\nDESCRIPTION: Configuration for splitting Android APKs by CPU architecture (ABI). This build.gradle setup creates separate APKs for x86, x86_64, arm64-v8a, and armeabi-v7a, reducing the app size by including only the necessary native libraries.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/proguard.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nandroid {\n  // rest of your app's logic\n  splits {\n    abi {\n        enable true\n        reset()\n        include 'x86', 'x86_64', 'arm64-v8a', 'armeabi-v7a'\n        universalApk false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching a Decoded Image with Fresco's ImagePipeline\nDESCRIPTION: Obtains an ImagePipeline instance and uses it to fetch the decoded image from the previously created ImageRequest, returning a DataSource that will contain the image result.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/images-in-notifications.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nImagePipeline imagePipeline = Fresco.getImagePipeline();\nDataSource<CloseableReference<CloseableImage>> dataSource = imagePipeline.fetchDecodedImage(imageRequest, null);\n```\n\n----------------------------------------\n\nTITLE: Custom Native Library Loader Configuration\nDESCRIPTION: Gradle configuration for excluding default SoLoader and using custom native library loading mechanism\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/index.md#2025-04-22_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  // your app's other dependencies\n  implementation 'com.facebook.fresco:fresco:{{site.current_version}}' {\n    exclude group: 'com.facebook.soloader', module: 'soloader'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Static Supplier Pattern in Fresco\nDESCRIPTION: Example of creating a Supplier implementation that returns a constant value, useful for providing configuration parameters that don't need to change at runtime.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/configure-image-pipeline.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nSupplier<X> xSupplier = new Supplier<X>() {\n  private X mX = new X(xparam1, xparam2...);\n  public X get() {\n    return mX;\n  }\n);\n// when creating image pipeline\n.setXSupplier(xSupplier);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Image Results with BaseBitmapDataSubscriber\nDESCRIPTION: Subscribes to the DataSource using BaseBitmapDataSubscriber to handle the bitmap result or failure, which then calls a method to display the notification with the retrieved bitmap.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/images-in-notifications.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ndataSource.subscribe(\n    new BaseBitmapDataSubscriber() {\n\n      @Override\n      protected void onNewResultImpl(Bitmap bitmap) {\n        displayNotification(bitmap);\n      }\n\n      @Override\n      protected void onFailureImpl(DataSource<CloseableReference<CloseableImage>> dataSource) {\n        // In general, failing to fetch the image should not keep us from displaying the\n        // notification. We proceed without the bitmap.\n        displayNotification(null);\n      }\n    },\n    UiThreadImmediateExecutorService.getInstance());\n}\n```\n\n----------------------------------------\n\nTITLE: Java-only Fresco Gradle Configuration\nDESCRIPTION: Configuring Gradle dependencies for Java-only version of Fresco without native code by excluding specific artifacts\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  // your app's other dependencies\n  implementation('com.facebook.fresco:fresco:{{site.current_version}}') {\n      exclude group: 'com.facebook.soloader', module: 'soloader'\n      exclude group: 'com.facebook.fresco', module: 'soloader'\n      exclude group: 'com.facebook.fresco', module: 'nativeimagefilters'\n      exclude group: 'com.facebook.fresco', module: 'nativeimagetranscoder'\n      exclude group: 'com.facebook.fresco', module: 'memory-type-native'\n      exclude group: 'com.facebook.fresco', module: 'imagepipeline-native'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning CloseableReference in a Class in Java\nDESCRIPTION: Demonstrates how to properly clone and store a CloseableReference within a class. When a class needs to maintain its own reference, it must clone the received reference and be responsible for closing its own copy.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/closeable-references.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nclass MyClass {\n  CloseableReference<Val> myValRef;\n\n  void mmm(CloseableReference<Val> ref) {\n    // Some caller called this method. Caller owns the original\n    // reference and if we want to have our own copy, we must clone it.\n    myValRef = ref.clone();\n  };\n  // caller can now safely close its copy as we made our own clone.\n\n  void close() {\n    // We are in charge of closing our copy, of course.\n    CloseableReference.closeSafely(myValRef);\n  }\n}\n// Now the caller of MyClass must close it!\n```\n\n----------------------------------------\n\nTITLE: Incorrect DraweeView Hierarchy Setting Method (Java)\nDESCRIPTION: Shows the DraweeView.setHierarchy method that should not be reused with the same hierarchy on multiple views, as Drawables in Android cannot be shared among different views.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/gotchas.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nDraweeView.setHierarchy\n```\n\n----------------------------------------\n\nTITLE: Configuring ProGuard for Fresco in Android\nDESCRIPTION: Configuration for enabling ProGuard minification in Android build.gradle file. This enables code shrinking for release builds which helps reduce the app size when using Fresco.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/proguard.md#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nandroid {\n  buildTypes {\n    release {\n      minifyEnabled true\n      proguardFiles getDefaultProguardFile('proguard-android.txt')\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CloseableReference with Asynchronous Operations in Java\nDESCRIPTION: Shows how to properly handle a CloseableReference when used with asynchronous operations. The reference must be cloned before passing to an executor and closed when the operation is complete.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/closeable-references.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nvoid haa(CloseableReference<?> ref) {\n  // Here we make our own copy of the original reference,\n  // so that we can guarantee its validity when the executor\n  // executes our runnable in the future.\n  final CloseableReference<?> refClone = ref.clone();\n  executor.submit(new Runnable() {\n    public void run() {\n      try {\n        Log.println(\"Haa Async: \" + refClone.get());\n      } finally {\n        // We need to close our copy once we are done with it.\n        refClone.close();\n      }\n    }\n  });\n  // caller can now safely close its copy as we made our own clone.\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect DraweeHierarchy Access Method (Java)\nDESCRIPTION: The method getTopLevelDrawable() in DraweeHierarchy should only be used by DraweeViews and not by client code. Using this method directly in application code may lead to bugs and future compatibility issues.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/gotchas.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nDraweeHierarchy.getTopLevelDrawable()\n```\n\n----------------------------------------\n\nTITLE: Drawing DraweeHolder Content in Custom View in Java\nDESCRIPTION: Essential code for rendering the Drawee content in a custom view's onDraw method. This retrieves the drawable from the holder, sets its bounds, and draws it on the canvas.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/writing-custom-views.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nDrawable drawable = mDraweeHolder.getTopLevelDrawable();\ndrawable.setBounds(...);\n...\ndrawable.draw(canvas);\n```\n\n----------------------------------------\n\nTITLE: Opening Local Files for Troubleshooting in Java\nDESCRIPTION: Example code for checking if a local file is accessible by attempting to open it directly with a FileInputStream. This helps diagnose whether file access issues are related to Fresco or to file system permissions.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/troubleshooting.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nFileInputStream fis = new FileInputStream(new File(localUri.getPath()));\n```\n\n----------------------------------------\n\nTITLE: Java-only Fresco Initialization Configuration\nDESCRIPTION: Java code for initializing Fresco without native code support using ImagePipelineConfig\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/index.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nFresco.initialize(\n    applicationContext,\n    ImagePipelineConfig.newBuilder(applicationContext)\n        .setMemoryChunkType(MemoryChunkType.BUFFER_MEMORY)\n        .setImageTranscoderType(ImageTranscoderType.JAVA_TRANSCODER)\n        .experiment().setNativeCodeDisabled(true)\n        .build())\n```\n\n----------------------------------------\n\nTITLE: Setting Drawable Callback for DraweeHolder in Java\nDESCRIPTION: Code to properly set and clear the drawable callback when managing DraweeHolder instances. This ensures proper drawable invalidation and rendering.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/writing-custom-views.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// When a holder is set to the view for the first time,\n// don't forget to set the callback to its top-level drawable:\nmDraweeHolder = ...\nmDraweeHolder.getTopLevelDrawable().setCallback(this);\n\n// In case the old holder is no longer needed,\n// don't forget to clear the callback from its top-level drawable:\nmDraweeHolder.getTopLevelDrawable().setCallback(null);\nmDraweeHolder = ...\n```\n\n----------------------------------------\n\nTITLE: Building Fresco from Command Line on Unix Systems\nDESCRIPTION: This command builds Fresco from source on Unix-like systems using the Gradle wrapper. It should be executed from the root directory of the Fresco project.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/building-from-source.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n./gradlew build\n```\n\n----------------------------------------\n\nTITLE: Opening Fresco Project in Android Studio\nDESCRIPTION: Instructions for opening the Fresco project in Android Studio.\nSOURCE: https://github.com/facebook/fresco/blob/main/samples/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nIn Android Studio, choose `File > Open..`. and select the `fresco` folder.\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Performance Settings\nDESCRIPTION: These settings improve Gradle build performance by enabling the daemon, parallel builds, and on-demand configuration. They should be added to the gradle.properties file for both Windows and Unix systems.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/building-from-source.md#2025-04-22_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\norg.gradle.daemon=true\norg.gradle.parallel=true\norg.gradle.configureondemand=true\n```\n\n----------------------------------------\n\nTITLE: Adding WebP Support Dependencies in Gradle (Groovy)\nDESCRIPTION: This snippet shows how to add the webpsupport library to your Gradle dependencies for supporting all types of non-animated WebP images on older Android versions.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/webp-support.md#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  // ... your app's other dependencies\n  implementation 'com.facebook.fresco:webpsupport:{{site.current_version}}'\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying NDK Path in Android Studio\nDESCRIPTION: Steps to specify the Android NDK location in Android Studio for building Fresco's native code features.\nSOURCE: https://github.com/facebook/fresco/blob/main/samples/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nIn Android Studio, go to `File > Project Structure` and in the dialog set the `Android NDK location`. Android Studio stores the NDK location in to your `local.properties` file.\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle NDK Path for Unix Systems\nDESCRIPTION: This snippet shows how to set the NDK path in the gradle.properties file for Unix-like systems including Mac OS X. This configuration is necessary for building Fresco from source.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/building-from-source.md#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nndk.path=/path/to/android_ndk/r10e\n```\n\n----------------------------------------\n\nTITLE: Cloning Fresco Repository with Git\nDESCRIPTION: This command clones the Fresco repository from GitHub to your local machine. It creates a directory named 'fresco' containing the source code.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/building-from-source.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/facebook/fresco.git\n```\n\n----------------------------------------\n\nTITLE: Running the Fresco Comparison App for Performance Testing\nDESCRIPTION: Command to run the comparison script that benchmarks Fresco against other image loading libraries like Picasso, Universal Image Loader, Volley, and Glide. The script installs and runs controlled tests for various loaders on a connected ARM v7 device.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/sample-apps.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./run_comparison.py -c armeabi-v7a\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for OkHttp3 in Fresco\nDESCRIPTION: Gradle configuration to include the OkHttp3 network layer for Fresco. This should be added to the dependencies section in the build.gradle file alongside other Fresco dependencies.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/using-other-network-layers.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  // your project's other dependencies\n  implementation \"com.facebook.fresco:imagepipeline-okhttp3:{{site.current_version}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle NDK Path for Windows\nDESCRIPTION: This snippet shows how to set the NDK path in the gradle.properties file for Windows systems, with proper escaping of backslashes and colons. This is required for building Fresco from source on Windows.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/building-from-source.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nndk.path=C\\:\\\\path\\\\to\\\\android_ndk\\\\r10e\n```\n\n----------------------------------------\n\nTITLE: Serving Fresco Documentation Locally with Jekyll in Bash\nDESCRIPTION: Command to start Jekyll's local server which will build and serve the Fresco documentation website. Once running, the site will be accessible at http://localhost:4000.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njekyll serve\n```\n\n----------------------------------------\n\nTITLE: Installing Jekyll for Fresco Documentation in Bash\nDESCRIPTION: Command to install Jekyll using Ruby's gem package manager. Jekyll is required to build and serve the Fresco documentation website locally.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngem install jekyll\n```\n\n----------------------------------------\n\nTITLE: Running Fresco Tests with Gradle\nDESCRIPTION: This command executes the test suite for Fresco using Gradle. It should be run from the Fresco project root directory to ensure all tests pass before submitting changes.\nSOURCE: https://github.com/facebook/fresco/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd fresco\n./gradlew test\n```\n\n----------------------------------------\n\nTITLE: Setting Retry Image in SimpleDraweeView (XML)\nDESCRIPTION: This XML snippet shows how to set a retry image for a SimpleDraweeView. The retry image is displayed instead of the failure image when tap-to-retry is enabled.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/placeholder-failure-retry.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<com.facebook.drawee.view.SimpleDraweeView\n  android:id=\"@+id/my_image_view\"\n  android:layout_width=\"20dp\"\n  android:layout_height=\"20dp\"\n  fresco:failureImage=\"@drawable/my_failure_drawable\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Executing GitHub Bot Command for Stack Overflow Redirection\nDESCRIPTION: This command instructs a GitHub bot to respond to an issue, suggesting it be asked on Stack Overflow instead. It adds a comment, applies a label, and closes the issue.\nSOURCE: https://github.com/facebook/fresco/blob/main/bots/IssueCommands.txt#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@facebook-github-bot stack-overflow\ncomment Hey {issue_author} and thanks for posting this! {author} tells me this issue looks like a question that would be best asked on [StackOverflow](http://stackoverflow.com/questions/tagged/fresco). StackOverflow is amazing for Q&A: it has a reputation system, voting, the ability to mark a question as answered. Because of the reputation system it is likely the community will see and answer your question there. This also helps us use the GitHub bug tracker for bugs only. Will close this as this is really a question that should be asked on SO.\nadd-label Stack Overflow\nclose\n```\n\n----------------------------------------\n\nTITLE: Building Fresco Debug Version with Gradle\nDESCRIPTION: This command assembles the debug version of Fresco using Gradle. It should be run from the Fresco project root directory to compile the code and check for build errors.\nSOURCE: https://github.com/facebook/fresco/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd fresco\n./gradlew assembleDebug\n```\n\n----------------------------------------\n\nTITLE: Running XML Conversion Script\nDESCRIPTION: Command to execute the conversion script that compiles and extracts XML resources into the compiled folder.\nSOURCE: https://github.com/facebook/fresco/blob/main/imagepipeline-base/src/test/resources/com/facebook/imageformat/xmls/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./convert.sh\n```\n\n----------------------------------------\n\nTITLE: HTML Video Embed Block\nDESCRIPTION: Embedded YouTube video iframe showing an introductory explanation of Fresco.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"videoBlock\">\n    <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/XLwlGoxrg4M\" title=\"Explain Like I'm 5: Fresco\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Checking Android Home Path in Bash\nDESCRIPTION: Command to verify that the ANDROID_HOME environment variable is properly set in your PATH configuration.\nSOURCE: https://github.com/facebook/fresco/blob/main/imagepipeline-base/src/test/resources/com/facebook/imageformat/xmls/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $ANDROID_HOME\n```\n\n----------------------------------------\n\nTITLE: Markdown Page Front Matter\nDESCRIPTION: YAML front matter defining the page layout, title, and ID for the documentation site.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: home\ntitle: Fresco | An image management library.\nid: home\n---\n```\n\n----------------------------------------\n\nTITLE: Example RequestListener Output for Image Request Tracking in Java\nDESCRIPTION: Sample log output from a RequestListener showing the progression of an image request through various producers in Fresco's pipeline.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/listening-to-events.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nRequestLoggingListener: time 2095589: onRequestSubmit: {requestId: 5, callerContext: null, isPrefetch: false}\n```\n\n----------------------------------------\n\nTITLE: Building Fresco from Command Line on Windows\nDESCRIPTION: This command builds Fresco from source on Windows systems using the Gradle wrapper batch file. It should be executed from the root directory of the Fresco project.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/building-from-source.md#2025-04-22_snippet_5\n\nLANGUAGE: bat\nCODE:\n```\ngradlew.bat build\n```\n\n----------------------------------------\n\nTITLE: Filtering Fresco Logs with ADB in Shell\nDESCRIPTION: ADB command to filter and view Fresco-related logs in the logcat output. This helps developers focus on relevant log entries when debugging image loading issues.\nSOURCE: https://github.com/facebook/fresco/blob/main/docs/_docs/troubleshooting.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nadb logcat -v threadtime | grep -iE 'LoggingListener|AbstractDraweeController|BufferedDiskCache'\n```\n\n----------------------------------------\n\nTITLE: Installing Android SDK Components with sdkmanager\nDESCRIPTION: Example commands for installing Android build tools and platform packages using the sdkmanager utility.\nSOURCE: https://github.com/facebook/fresco/blob/main/imagepipeline-base/src/test/resources/com/facebook/imageformat/xmls/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsdkmanager \"build-tools;34.0.0\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nsdkmanager \"platforms;android-33\"\n```"
  }
]