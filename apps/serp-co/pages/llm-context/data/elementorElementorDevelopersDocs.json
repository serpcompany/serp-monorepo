[
  {
    "owner": "elementor",
    "repo": "elementor-developers-docs",
    "content": "TITLE: Registering Elementor Widgets Plugin\nDESCRIPTION: Main plugin file that registers two custom Elementor widgets. Includes plugin metadata and widget registration hooks.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/getting-started/first-addon.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Elementor Addon\n * Description: Simple hello world widgets for Elementor.\n * Version:     1.0.0\n * Author:      Elementor Developer\n * Author URI:  https://developers.elementor.com/\n * Text Domain: elementor-addon\n *\n * Requires Plugins: elementor\n * Elementor tested up to: 3.25.0\n * Elementor Pro tested up to: 3.25.0\n */\n\nfunction register_hello_world_widget( $widgets_manager ) {\n\n\trequire_once( __DIR__ . '/widgets/hello-world-widget-1.php' );\n\trequire_once( __DIR__ . '/widgets/hello-world-widget-2.php' );\n\n\t$widgets_manager->register( new \\Elementor_Hello_World_Widget_1() );\n\t$widgets_manager->register( new \\Elementor_Hello_World_Widget_2() );\n\n}\nadd_action( 'elementor/widgets/register', 'register_hello_world_widget' );\n```\n\n----------------------------------------\n\nTITLE: Complete Elementor Widget Structure\nDESCRIPTION: Comprehensive widget class structure showing all essential methods required for a functional Elementor widget, including name, title, icon, categories, and rendering methods.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-structure.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tpublic function get_name(): string {}\n\n\tpublic function get_title(): string {}\n\n\tpublic function get_icon(): string {}\n\n\tpublic function get_categories(): array {}\n\n\tpublic function get_keywords(): array {}\n\n\tpublic function get_custom_help_url(): string {}\n\n\tprotected function get_upsale_data(): array {}\n\n\tpublic function get_script_depends(): array {}\n\n\tpublic function get_style_depends(): array {}\n\n\tpublic function has_widget_inner_wrapper(): bool {}\n\n\tprotected function is_dynamic_content(): bool {}\n\n\tprotected function register_controls(): void {}\n\n\tprotected function render(): void {}\n\n\tprotected function content_template(): void {}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Main Plugin File for Elementor Addon\nDESCRIPTION: The main plugin file with required WordPress plugin headers and the initialization function that loads the plugin class. Includes proper dependency handling and Elementor version compatibility declarations.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/addons/addon-example.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Elementor Test Addon\n * Description: Custom Elementor addon.\n * Plugin URI:  https://elementor.com/\n * Version:     1.0.0\n * Author:      Elementor Developer\n * Author URI:  https://developers.elementor.com/\n * Text Domain: elementor-test-addon\n *\n * Requires Plugins: elementor\n * Elementor tested up to: 3.25.0\n * Elementor Pro tested up to: 3.25.0\n */\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\nfunction elementor_test_addon() {\n\n\t// Load plugin file\n\trequire_once( __DIR__ . '/includes/plugin.php' );\n\n\t// Run the plugin\n\t\\Elementor_Test_Addon\\Plugin::instance();\n\n}\nadd_action( 'plugins_loaded', 'elementor_test_addon' );\n```\n\n----------------------------------------\n\nTITLE: Registering Sendy Form Action in Elementor Pro\nDESCRIPTION: This PHP code defines the main plugin file that registers the custom Sendy form action with Elementor Pro. It includes the necessary plugin header information and a function to register the new form action.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-actions/advanced-example.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Elementor Forms Sendy Action\n * Description: Custom addon which adds new subscriber to Sendy after form submission.\n * Plugin URI:  https://elementor.com/\n * Version:     1.0.0\n * Author:      Elementor Developer\n * Author URI:  https://developers.elementor.com/\n * Text Domain: elementor-forms-sendy-action\n *\n * Requires Plugins: elementor\n * Elementor tested up to: 3.25.0\n * Elementor Pro tested up to: 3.25.0\n */\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Add new subscriber to Sendy.\n *\n * @since 1.0.0\n * @param ElementorPro\\Modules\\Forms\\Registrars\\Form_Actions_Registrar $form_actions_registrar\n * @return void\n */\nfunction add_new_sendy_form_action( $form_actions_registrar ) {\n\n\tinclude_once( __DIR__ .  '/form-actions/sendy.php' );\n\n\t$form_actions_registrar->register( new Sendy_Action_After_Submit() );\n\n}\nadd_action( 'elementor_pro/forms/actions/register', 'add_new_sendy_form_action' );\n```\n\n----------------------------------------\n\nTITLE: Basic Hello World Elementor Widget\nDESCRIPTION: Simple widget class that extends Elementor's Widget_Base to display 'Hello World'. Implements basic widget requirements like name, title, icon and render methods.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/getting-started/first-addon.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Hello_World_Widget_1 extends \\Elementor\\Widget_Base {\n\n\tpublic function get_name(): string {\n\t\treturn 'hello_world_widget_1';\n\t}\n\n\tpublic function get_title(): string {\n\t\treturn esc_html__( 'Hello World 1', 'elementor-addon' );\n\t}\n\n\tpublic function get_icon(): string {\n\t\treturn 'eicon-code';\n\t}\n\n\tpublic function get_categories(): array {\n\t\treturn [ 'basic' ];\n\t}\n\n\tpublic function get_keywords(): array {\n\t\treturn [ 'hello', 'world' ];\n\t}\n\n\tprotected function render(): void {\n\t\t?>\n\t\t<p> Hello World </p>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<p> Hello World </p>\n\t\t<?php\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Control Types in Elementor Widget\nDESCRIPTION: Comprehensive example showing how to implement various types of controls including text, number, select, and choose controls within a content section. Each control is configured with specific options, labels, and default values.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-controls.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'title',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t\t'label' => esc_html__( 'Title', 'textdomain' ),\n\t\t\t\t'placeholder' => esc_html__( 'Enter your title', 'textdomain' ),\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'size',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::NUMBER,\n\t\t\t\t'label' => esc_html__( 'Size', 'textdomain' ),\n\t\t\t\t'placeholder' => '0',\n\t\t\t\t'min' => 0,\n\t\t\t\t'max' => 100,\n\t\t\t\t'step' => 1,\n\t\t\t\t'default' => 50,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'open_lightbox',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::SELECT,\n\t\t\t\t'label' => esc_html__( 'Lightbox', 'textdomain' ),\n\t\t\t\t'options' => [\n\t\t\t\t\t'default' => esc_html__( 'Default', 'textdomain' ),\n\t\t\t\t\t'yes' => esc_html__( 'Yes', 'textdomain' ),\n\t\t\t\t\t'no' => esc_html__( 'No', 'textdomain' ),\n\t\t\t\t],\n\t\t\t\t'default' => 'no',\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'alignment',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::CHOOSE,\n\t\t\t\t'label' => esc_html__( 'Alignment', 'textdomain' ),\n\t\t\t\t'options' => [\n\t\t\t\t\t'left' => [\n\t\t\t\t\t\t'title' => esc_html__( 'Left', 'textdomain' ),\n\t\t\t\t\t\t'icon' => 'eicon-text-align-left',\n\t\t\t\t\t],\n\t\t\t\t\t'center' => [\n\t\t\t\t\t\t'title' => esc_html__( 'Center', 'textdomain' ),\n\t\t\t\t\t\t'icon' => 'eicon-text-align-center',\n\t\t\t\t\t],\n\t\t\t\t\t'right' => [\n\t\t\t\t\t\t'title' => esc_html__( 'Right', 'textdomain' ),\n\t\t\t\t\t\t'icon' => 'eicon-text-align-right',\n\t\t\t\t\t],\n\t\t\t\t],\n\t\t\t\t'default' => 'center',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Elementor Addon Constructor with Compatibility Check and Initialization in PHP\nDESCRIPTION: Implementation of constructor, compatibility check method, and initialization method for an Elementor addon. The constructor performs compatibility checks and hooks into Elementor's init action if compatible.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/addons/main-class.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfinal class Plugin {\n\n\t/**\n\t * Constructor\n\t *\n\t * Perform some compatibility checks to make sure basic requirements are meet.\n\t * If all compatibility checks pass, initialize the functionality.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t */\n\tpublic function __construct() {\n\n\t\tif ( $this->is_compatible() ) {\n\t\t\tadd_action( 'elementor/init', [ $this, 'init' ] );\n\t\t}\n\n\t}\n\n\t/**\n\t * Compatibility Checks\n\t *\n\t * Checks whether the site meets the addon requirement.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t */\n\tpublic function is_compatible(): bool {\n\n\t\t// Compatibility checks here...\n\n\t}\n\n\t/**\n\t * Initialize\n\t *\n\t * Load the addons functionality only after Elementor is initialized.\n\t *\n\t * Fired by `elementor/init` action hook.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t */\n\tpublic function init(): void {\n\n\t\t// Addon functionality here...\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Elementor Plugin Initialization\nDESCRIPTION: Full plugin initialization code including header comments, version information, dependencies, and file loading logic using WordPress hooks.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/addons/load.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Elementor Test Addon\n * Description: Custom Elementor addon.\n * Plugin URI:  https://elementor.com/\n * Version:     1.0.0\n * Author:      Elementor Developer\n * Author URI:  https://developers.elementor.com/\n * Text Domain: elementor-test-addon\n *\n * Requires Plugins: elementor\n * Elementor tested up to: 3.25.0\n * Elementor Pro tested up to: 3.25.0\n */\n\nfunction elementor_test_addon() {\n\n\t// Load plugin file\n\trequire_once( __DIR__ . '/includes/widgets-manager.php' );\n\trequire_once( __DIR__ . '/includes/controls-manager.php' );\n\n}\nadd_action( 'plugins_loaded', 'elementor_test_addon' );\n```\n\n----------------------------------------\n\nTITLE: Basic Elementor Addon Class Structure in PHP\nDESCRIPTION: The core structure of a main addon class with essential methods including singleton instance management, constructor, compatibility check, and initialization method.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/addons/main-class.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfinal class Plugin {\n\n\tprivate static $_instance = null;\n\tpublic static function instance() {}\n\n\tpublic function __construct() {}\n\tpublic function is_compatible(): bool {}\n\tpublic function init(): void {}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Elementor oEmbed Widget Class\nDESCRIPTION: Widget class implementation that defines the widget properties, controls, and rendering logic for embedding external content using WordPress oEmbed.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/simple-example.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Elementor oEmbed Widget.\n *\n * Elementor widget that inserts an embbedable content into the page, from any given URL.\n *\n * @since 1.0.0\n */\nclass Elementor_oEmbed_Widget extends \\Elementor\\Widget_Base {\n\n\t/**\n\t * Get widget name.\n\t *\n\t * Retrieve oEmbed widget name.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Widget name.\n\t */\n\tpublic function get_name(): string {\n\t\treturn 'oembed';\n\t}\n\n\t/**\n\t * Get widget title.\n\t *\n\t * Retrieve oEmbed widget title.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Widget title.\n\t */\n\tpublic function get_title(): string {\n\t\treturn esc_html__( 'oEmbed', 'elementor-oembed-widget' );\n\t}\n\n\t/**\n\t * Get widget icon.\n\t *\n\t * Retrieve oEmbed widget icon.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Widget icon.\n\t */\n\tpublic function get_icon(): string {\n\t\treturn 'eicon-code';\n\t}\n\n\t/**\n\t * Get widget categories.\n\t *\n\t * Retrieve the list of categories the oEmbed widget belongs to.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return array Widget categories.\n\t */\n\tpublic function get_categories(): array {\n\t\treturn [ 'general' ];\n\t}\n\n\t/**\n\t * Get widget keywords.\n\t *\n\t * Retrieve the list of keywords the oEmbed widget belongs to.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return array Widget keywords.\n\t */\n\tpublic function get_keywords(): array {\n\t\treturn [ 'oembed', 'url', 'link' ];\n\t}\n\n\t/**\n\t * Get custom help URL.\n\t *\n\t * Retrieve a URL where the user can get more information about the widget.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Widget help URL.\n\t */\n\tpublic function get_custom_help_url(): string {\n\t\treturn 'https://developers.elementor.com/docs/widgets/';\n\t}\n\n\t/**\n\t * Whether the widget requires inner wrapper.\n\t *\n\t * Determine whether to optimize the DOM size.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return bool Whether to optimize the DOM size.\n\t */\n\tpublic function has_widget_inner_wrapper(): bool {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Whether the element returns dynamic content.\n\t *\n\t * Determine whether to cache the element output or not.\n\t *\n\t * @since 1.0.0\n\t * @access protected\n\t * @return bool Whether to cache the element output.\n\t */\n\tprotected function is_dynamic_content(): bool {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Register oEmbed widget controls.\n\t *\n\t * Add input fields to allow the user to customize the widget settings.\n\t *\n\t * @since 1.0.0\n\t * @access protected\n\t */\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'elementor-oembed-widget' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'url',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'URL to embed', 'elementor-oembed-widget' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t\t'input_type' => 'url',\n\t\t\t\t'placeholder' => esc_html__( 'https://your-link.com', 'elementor-oembed-widget' ),\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\t/**\n\t * Render oEmbed widget output on the frontend.\n\t *\n\t * Written in PHP and used to generate the final HTML.\n\t *\n\t * @since 1.0.0\n\t * @access protected\n\t */\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\n\t\tif ( empty( $settings['url'] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$html = wp_oembed_get( $settings['url'] );\n\t\t?>\n\t\t<div class=\"oembed-elementor-widget\">\n\t\t\t<?php echo ( $html ) ? $html : $settings['url']; ?>\n\t\t</div>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Optimized Widget Implementation Example in PHP\nDESCRIPTION: Full example of implementing an optimized widget class with single wrapper.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-inner-wrapper.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tpublic function has_widget_inner_wrapper(): bool {\n\t\treturn false;\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Widgets in Elementor PHP\nDESCRIPTION: Code demonstrating how to register new custom widgets in Elementor using the elementor/widgets/register hook. The function requires widget class files and registers widget instances through the widgets manager.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/add-new-widget.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction register_new_widgets( $widgets_manager ) {\n\n\trequire_once( __DIR__ . '/widgets/widget-1.php' );\n\trequire_once( __DIR__ . '/widgets/widget-2.php' );\n\n\t$widgets_manager->register( new \\Elementor_Widget_1() );\n\t$widgets_manager->register( new \\Elementor_Widget_2() );\n\n}\nadd_action( 'elementor/widgets/register', 'register_new_widgets' );\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Controls for Dynamic Tags in Elementor\nDESCRIPTION: This code snippet demonstrates how to register custom controls for a dynamic tag in Elementor. It shows the implementation of the `register_controls()` method, adding text, number, and select controls to a custom dynamic tag class.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/dynamic-tags/dynamic-tags-controls.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Tag extends \\Elementor\\Core\\DynamicTags\\Tag {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->add_control(\n\t\t\t'text_param',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t\t'label' => esc_html__( 'Text Param', 'textdomain' ),\n\t\t\t\t'placeholder' => esc_html__( 'Enter your title', 'textdomain' ),\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'number_param',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::NUMBER,\n\t\t\t\t'label' => esc_html__( 'Number Param', 'textdomain' ),\n\t\t\t\t'min' => 0,\n\t\t\t\t'max' => 100,\n\t\t\t\t'step' => 1,\n\t\t\t\t'default' => 50,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'select_param',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::SELECT,\n\t\t\t\t'label' => esc_html__( 'Select Param', 'textdomain' ),\n\t\t\t\t'options' => [\n\t\t\t\t\t'default' => esc_html__( 'Default', 'textdomain' ),\n\t\t\t\t\t'yes' => esc_html__( 'Yes', 'textdomain' ),\n\t\t\t\t\t'no' => esc_html__( 'No', 'textdomain' ),\n\t\t\t\t],\n\t\t\t\t'default' => 'no',\n\t\t\t]\n\t\t);\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Elementor Widget with Multiple Inline Editing Controls\nDESCRIPTION: Comprehensive example of an Elementor widget implementing three different types of inline editing controls - text with no toolbar, textarea with basic toolbar, and WYSIWYG with advanced toolbar. Includes control registration and rendering implementation.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/rendering-inline-editing.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'title',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Title', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t\t'default' => esc_html__( 'Title', 'textdomain' ),\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'description',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Description', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXTAREA,\n\t\t\t\t'default' => esc_html__( 'Description', 'textdomain' ),\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'content',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::WYSIWYG,\n\t\t\t\t'default' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\n\t\t$this->add_inline_editing_attributes( 'title', 'none' );\n\t\t$this->add_inline_editing_attributes( 'description', 'basic' );\n\t\t$this->add_inline_editing_attributes( 'content', 'advanced' );\n\t\t?>\n\t\t<h2 <?php $this->print_render_attribute_string( 'title' ); ?>><?php echo $settings['title']; ?></h2>\n\t\t<div <?php $this->print_render_attribute_string( 'description' ); ?>><?php echo $settings['description']; ?></div>\n\t\t<div <?php $this->print_render_attribute_string( 'content' ); ?>><?php echo $settings['content']; ?></div>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<#\n\t\tview.addInlineEditingAttributes( 'title', 'none' );\n\t\tview.addInlineEditingAttributes( 'description', 'basic' );\n\t\tview.addInlineEditingAttributes( 'content', 'advanced' );\n\t\t#>\n\t\t<h2 {{{ view.getRenderAttributeString( 'title' ) }}}>{{{ settings.title }}}</h2>\n\t\t<div {{{ view.getRenderAttributeString( 'description' ) }}}>{{{ settings.description }}}</div>\n\t\t<div {{{ view.getRenderAttributeString( 'content' ) }}}>{{{ settings.content }}}</div>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Elementor List Widget Editor Preview Template\nDESCRIPTION: This method defines how the list widget renders in the Elementor editor using Backbone JavaScript templating. It mirrors the PHP rendering logic but uses JavaScript template syntax for dynamic content generation.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/advanced-example.md#2025-04-20_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * Render list widget output in the editor.\n *\n * Written as a Backbone JavaScript template and used to generate the live preview.\n *\n * @since 1.0.0\n * @access protected\n */\nprotected function content_template(): void {\n\t?>\n\t<#\n\thtml_tag = {\n\t\t'ordered': 'ol',\n\t\t'unordered': 'ul',\n\t\t'other': 'ul',\n\t};\n\tview.addRenderAttribute( 'list', 'class', 'elementor-list-widget' );\n\t#>\n\t<{{{ html_tag[ settings.marker_type ] }}} {{{ view.getRenderAttributeString( 'list' ) }}}>\n\t\t<# _.each( settings.list_items, function( item, index ) {\n\t\t\tconst repeater_setting_key = view.getRepeaterSettingKey( 'text', 'list_items', index );\n\t\t\tview.addRenderAttribute( repeater_setting_key, 'class', 'elementor-list-widget-text' );\n\t\t\tview.addInlineEditingAttributes( repeater_setting_key );\n\t\t\t#>\n\t\t\t<li {{{ view.getRenderAttributeString( repeater_setting_key ) }}}>\n\t\t\t\t<# const title = item.text; #>\n\t\t\t\t<# if ( item.link ) { #>\n\t\t\t\t\t<# view.addRenderAttribute( `link_${index}`, item.link ); #>\n\t\t\t\t\t<a href=\"{{ item.link.url }}\" {{{ view.getRenderAttributeString( `link_${index}` ) }}}>\n\t\t\t\t\t\t{{{title}}}\n\t\t\t\t\t</a>\n\t\t\t\t<# } else { #>\n\t\t\t\t\t{{{title}}}\n\t\t\t\t<# } #>\n\t\t\t</li>\n\t\t<# } ); #>\n\t</{{{ html_tag[ settings.marker_type ] }}}>\n\t<?php\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Textarea Control in Elementor Widget\nDESCRIPTION: Complete example showing how to implement a textarea control in an Elementor widget. Includes control registration, rendering logic, and template handling. The control allows users to input multi-line text with configurable rows, placeholder text, and default values.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-textarea.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'item_description',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Description', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXTAREA,\n\t\t\t\t'rows' => 10,\n\t\t\t\t'default' => esc_html__( 'Default description', 'textdomain' ),\n\t\t\t\t'placeholder' => esc_html__( 'Type your description here', 'textdomain' ),\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\n\t\tif ( empty( $settings['item_description'] ) ) {\n\t\t\treturn;\n\t\t}\n\t\t?>\n\t\t<p class=\"description\">\n\t\t\t<?php echo $settings['item_description']; ?>\n\t\t</p>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<#\n\t\tif ( '' === settings.item_description ) {\n\t\t\treturn;\n\t\t}\n\t\t#>\n\t\t<p class=\"description\">\n\t\t\t{{{ settings.item_description }}}\n\t\t</p>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Elementor Widget Rendering Methods in PHP\nDESCRIPTION: Demonstrates the basic structure of an Elementor widget class with two core rendering methods: render() for frontend output and content_template() for editor preview output.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-rendering.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function render(): void {}\n\n\tprotected function content_template(): void {}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Custom Elementor Form Field Structure in PHP\nDESCRIPTION: This code snippet demonstrates the complete structure of a custom Elementor form field class, including all required methods such as get_type(), get_name(), render(), validation(), and update_controls().\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-fields/field-structure.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Field extends \\ElementorPro\\Modules\\Forms\\Fields\\Field_Base {\n\n\tpublic function get_type(): string {}\n\n\tpublic function get_name(): string {}\n\n\tpublic function get_script_depends(): array {}\n\n\tpublic function get_style_depends(): array {}\n\n\tpublic function render( $item, $item_index, $form ): void {}\n\n\tpublic function validation( $field, $record, $ajax_handler ): void {}\n\n\tpublic function update_controls( $widget ): void {}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Hello World Elementor Widget\nDESCRIPTION: Enhanced widget class that adds controls for customizing text content and styling. Includes both content and style controls with color picker and text input.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/getting-started/first-addon.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Hello_World_Widget_2 extends \\Elementor\\Widget_Base {\n\n\tpublic function get_name(): string {\n\t\treturn 'hello_world_widget_2';\n\t}\n\n\tpublic function get_title(): string {\n\t\treturn esc_html__( 'Hello World 2', 'elementor-addon' );\n\t}\n\n\tpublic function get_icon(): string {\n\t\treturn 'eicon-code';\n\t}\n\n\tpublic function get_categories(): array {\n\t\treturn [ 'basic' ];\n\t}\n\n\tpublic function get_keywords(): array {\n\t\treturn [ 'hello', 'world' ];\n\t}\n\n\tprotected function register_controls(): void {\n\n\t\t// Content Tab Start\n\n\t\t$this->start_controls_section(\n\t\t\t'section_title',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Title', 'elementor-addon' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'title',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Title', 'elementor-addon' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXTAREA,\n\t\t\t\t'default' => esc_html__( 'Hello world', 'elementor-addon' ),\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t\t// Content Tab End\n\n\n\t\t// Style Tab Start\n\n\t\t$this->start_controls_section(\n\t\t\t'section_title_style',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Title', 'elementor-addon' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'title_color',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Text Color', 'elementor-addon' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n\t\t\t\t'selectors' => [\n\t\t\t\t\t'{{WRAPPER}} .hello-world' => 'color: {{VALUE}};',\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t\t// Style Tab End\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\n\t\tif ( empty( $settings['title'] ) ) {\n\t\t\treturn;\n\t\t}\n\t\t?>\n\t\t<p class=\"hello-world\">\n\t\t\t<?php echo $settings['title']; ?>\n\t\t</p>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<#\n\t\tif ( '' === settings.title ) {\n\t\t\treturn;\n\t\t}\n\t\t#>\n\t\t<p class=\"hello-world\">\n\t\t\t{{ settings.title }}\n\t\t</p>\n\t\t<?php\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Widgets in Elementor\nDESCRIPTION: Shows how to register custom widgets in Elementor using the widgets manager. The code demonstrates loading widget files and registering widget classes through the elementor/widgets/register hook.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/addons/initialization.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfinal class Plugin {\n\n\t/**\n\t * Initialize\n\t *\n\t * Load the addons functionality only after Elementor is initialized.\n\t *\n\t * Fired by `elementor/init` action hook.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t */\n\tpublic function init(): void {\n\n\t\tadd_action( 'elementor/widgets/register', [ $this, 'register_widgets' ] );\n\n\t}\n\n\t/**\n\t * Register Widgets\n\t *\n\t * Load widgets files and register new Elementor widgets.\n\t *\n\t * Fired by `elementor/widgets/register` action hook.\n\t *\n\t * @param \\Elementor\\Widgets_Manager $widgets_manager Elementor widgets manager.\n\t */\n\tpublic function register_widgets( $widgets_manager ): void {\n\n\t\trequire_once( __DIR__ . '/includes/widgets/widget-1.php' );\n\t\trequire_once( __DIR__ . '/includes/widgets/widget-2.php' );\n\n\t\t$widgets_manager->register( new \\Widget_1() );\n\t\t$widgets_manager->register( new \\Widget_2() );\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Elementor Data Control\nDESCRIPTION: Example of extending the Base_Data_Control class to create a custom data control in Elementor.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-types.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Control extends \\Elementor\\Base_Data_Control {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sendy Action for Elementor Forms\nDESCRIPTION: This PHP class defines the Sendy action for Elementor forms. It includes methods for setting up the action, registering settings, running the action after form submission, and handling exports. The class interacts with the Sendy API to add new subscribers.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-actions/advanced-example.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Elementor form Sendy action.\n *\n * Custom Elementor form action which adds new subscriber to Sendy after form submission.\n *\n * @since 1.0.0\n */\nclass Sendy_Action_After_Submit extends \\ElementorPro\\Modules\\Forms\\Classes\\Action_Base {\n\n\t/**\n\t * Get action name.\n\t *\n\t * Retrieve Sendy action name.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string\n\t */\n\tpublic function get_name(): string {\n\t\treturn 'sendy';\n\t}\n\n\t/**\n\t * Get action label.\n\t *\n\t * Retrieve Sendy action label.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string\n\t */\n\tpublic function get_label(): string {\n\t\treturn esc_html__( 'Sendy', 'elementor-forms-sendy-action' );\n\t}\n\n\t/**\n\t * Register action controls.\n\t *\n\t * Add input fields to allow the user to customize the action settings.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @param \\Elementor\\Widget_Base $widget\n\t */\n\tpublic function register_settings_section( $widget ): void {\n\n\t\t$widget->start_controls_section(\n\t\t\t'section_sendy',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Sendy', 'elementor-forms-sendy-action' ),\n\t\t\t\t'condition' => [\n\t\t\t\t\t'submit_actions' => $this->get_name(),\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$widget->add_control(\n\t\t\t'sendy_url',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Sendy URL', 'elementor-forms-sendy-action' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t\t'placeholder' => 'https://your_sendy_installation/',\n\t\t\t\t'description' => esc_html__( 'Enter the URL where you have Sendy installed.', 'elementor-forms-sendy-action' ),\n\t\t\t]\n\t\t);\n\n\t\t$widget->add_control(\n\t\t\t'sendy_list',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Sendy List ID', 'elementor-forms-sendy-action' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t\t'description' => esc_html__( 'The list ID you want to subscribe a user to. This encrypted & hashed ID can be found under \"View all lists\" section.', 'elementor-forms-sendy-action' ),\n\t\t\t]\n\t\t);\n\n\t\t$widget->add_control(\n\t\t\t'sendy_email_field',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Email Field ID', 'elementor-forms-sendy-action' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t]\n\t\t);\n\n\t\t$widget->add_control(\n\t\t\t'sendy_name_field',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Name Field ID', 'elementor-forms-sendy-action' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t]\n\t\t);\n\n\t\t$widget->end_controls_section();\n\n\t}\n\n\t/**\n\t * Run action.\n\t *\n\t * Runs the Sendy action after form submission.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @param \\ElementorPro\\Modules\\Forms\\Classes\\Form_Record  $record\n\t * @param \\ElementorPro\\Modules\\Forms\\Classes\\Ajax_Handler $ajax_handler\n\t */\n\tpublic function run( $record, $ajax_handler ): void {\n\n\t\t$settings = $record->get( 'form_settings' );\n\n\t\t//  Make sure that there is a Sendy installation URL.\n\t\tif ( empty( $settings['sendy_url'] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t//  Make sure that there is a Sendy list ID.\n\t\tif ( empty( $settings['sendy_list'] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that there is a Sendy email field ID (required by Sendy to subscribe users).\n\t\tif ( empty( $settings['sendy_email_field'] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get submitted form data.\n\t\t$raw_fields = $record->get( 'fields' );\n\n\t\t// Normalize form data.\n\t\t$fields = [];\n\t\tforeach ( $raw_fields as $id => $field ) {\n\t\t\t$fields[ $id ] = $field['value'];\n\t\t}\n\n\t\t// Make sure the user entered an email (required by Sendy to subscribe users).\n\t\tif ( empty( $fields[ $settings['sendy_email_field'] ] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Request data based on the param list at https://sendy.co/api\n\t\t$sendy_data = [\n\t\t\t'email' => $fields[ $settings['sendy_email_field'] ],\n\t\t\t'list' => $settings['sendy_list'],\n\t\t\t'ipaddress' => \\ElementorPro\\Core\\Utils::get_client_ip(),\n\t\t\t'referrer' => isset( $_POST['referrer'] ) ? $_POST['referrer'] : '',\n\t\t];\n\n\t\t// Add name if field is mapped.\n\t\tif ( empty( $fields[ $settings['sendy_name_field'] ] ) ) {\n\t\t\t$sendy_data['name'] = $fields[ $settings['sendy_name_field'] ];\n\t\t}\n\n\t\t// Send the request.\n\t\twp_remote_post(\n\t\t\t$settings['sendy_url'] . 'subscribe',\n\t\t\t[\n\t\t\t\t'body' => $sendy_data,\n\t\t\t]\n\t\t);\n\n\t}\n\n\t/**\n\t * On export.\n\t *\n\t * Clears Sendy form settings/fields when exporting.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @param array $element\n\t */\n\tpublic function on_export( $element ): array {\n\n\t\tunset(\n\t\t\t$element['sendy_url'],\n\t\t\t$element['sendy_list'],\n\t\t\t$element['sendy_email_field'],\n\t\t\t$element['sendy_name_field']\n\t\t);\n\n\t\treturn $element;\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Elementor List Widget Plugin Structure\nDESCRIPTION: Defines the folder structure for an Elementor widget plugin with a main registration file and a widget-specific file\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/advanced-example.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nelementor-list-widget/\n|\n├─ widgets/\n|  └─ list-widget.php\n|\n└─ elementor-list-widget.php\n```\n\n----------------------------------------\n\nTITLE: Implementing Elementor List Widget Class\nDESCRIPTION: Widget class implementation that extends Elementor's Widget_Base. It defines widget properties, controls, and rendering logic for creating customizable ordered, unordered, and custom list elements.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/advanced-example.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Elementor List Widget.\n *\n * Elementor widget that inserts an embbedable content into the page, from any given URL.\n *\n * @since 1.0.0\n */\nclass Elementor_List_Widget extends \\Elementor\\Widget_Base {\n\n\t/**\n\t * Get widget name.\n\t *\n\t * Retrieve list widget name.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Widget name.\n\t */\n\tpublic function get_name(): string {\n\t\treturn 'list';\n\t}\n\n\t/**\n\t * Get widget title.\n\t *\n\t * Retrieve list widget title.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Widget title.\n\t */\n\tpublic function get_title(): string {\n\t\treturn esc_html__( 'List', 'elementor-list-widget' );\n\t}\n\n\t/**\n\t * Get widget icon.\n\t *\n\t * Retrieve list widget icon.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Widget icon.\n\t */\n\tpublic function get_icon(): string {\n\t\treturn 'eicon-bullet-list';\n\t}\n\n\t/**\n\t * Get widget categories.\n\t *\n\t * Retrieve the list of categories the list widget belongs to.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return array Widget categories.\n\t */\n\tpublic function get_categories(): array {\n\t\treturn [ 'general' ];\n\t}\n\n\t/**\n\t * Get widget keywords.\n\t *\n\t * Retrieve the list of keywords the list widget belongs to.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return array Widget keywords.\n\t */\n\tpublic function get_keywords(): array {\n\t\treturn [ 'list', 'lists', 'ordered', 'unordered' ];\n\t}\n\n\t/**\n\t * Get custom help URL.\n\t *\n\t * Retrieve a URL where the user can get more information about the widget.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Widget help URL.\n\t */\n\tpublic function get_custom_help_url(): string {\n\t\treturn 'https://developers.elementor.com/docs/widgets/';\n\t}\n\n\t/**\n\t * Get widget promotion data.\n\t *\n\t * Retrieve the widget promotion data.\n\t *\n\t * @since 1.0.0\n\t * @access protected\n\t * @return array Widget promotion data.\n\t */\n\tprotected function get_upsale_data(): array {\n\t\treturn [\n\t\t\t'condition' => true,\n\t\t\t'image' => esc_url( ELEMENTOR_ASSETS_URL . 'images/go-pro.svg' ),\n\t\t\t'image_alt' => esc_attr__( 'Upgrade', 'elementor-list-widget' ),\n\t\t\t'title' => esc_html__( 'Promotion heading', 'elementor-list-widget' ),\n\t\t\t'description' => esc_html__( 'Get the premium version of the widget with additional styling capabilities.', 'elementor-list-widget' ),\n\t\t\t'upgrade_url' => esc_url( 'https://example.com/upgrade-to-pro/' ),\n\t\t\t'upgrade_text' => esc_html__( 'Upgrade Now', 'elementor-list-widget' ),\n\t\t];\n\t}\n\n\t/**\n\t * Whether the widget requires inner wrapper.\n\t *\n\t * Determine whether to optimize the DOM size.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return bool Whether to optimize the DOM size.\n\t */\n\tpublic function has_widget_inner_wrapper(): bool {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Whether the element returns dynamic content.\n\t *\n\t * Determine whether to cache the element output or not.\n\t *\n\t * @since 1.0.0\n\t * @access protected\n\t * @return bool Whether to cache the element output.\n\t */\n\tprotected function is_dynamic_content(): bool {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Register list widget controls.\n\t *\n\t * Add input fields to allow the user to customize the widget settings.\n\t *\n\t * @since 1.0.0\n\t * @access protected\n\t */\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'List Content', 'elementor-list-widget' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t/* Start repeater */\n\n\t\t$repeater = new \\Elementor\\Repeater();\n\n\t\t$repeater->add_control(\n\t\t\t'text',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Text', 'elementor-list-widget' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t\t'placeholder' => esc_html__( 'List Item', 'elementor-list-widget' ),\n\t\t\t\t'default' => esc_html__( 'List Item', 'elementor-list-widget' ),\n\t\t\t\t'label_block' => true,\n\t\t\t\t'dynamic' => [\n\t\t\t\t\t'active' => true,\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$repeater->add_control(\n\t\t\t'link',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Link', 'elementor-list-widget' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::URL,\n\t\t\t\t'dynamic' => [\n\t\t\t\t\t'active' => true,\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t/* End repeater */\n\n\t\t$this->add_control(\n\t\t\t'list_items',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'List Items', 'elementor-list-widget' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::REPEATER,\n\t\t\t\t'fields' => $repeater->get_controls(),           /* Use our repeater */\n\t\t\t\t'default' => [\n\t\t\t\t\t[\n\t\t\t\t\t\t'text' => esc_html__( 'List Item #1', 'elementor-list-widget' ),\n\t\t\t\t\t\t'link' => '',\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t'text' => esc_html__( 'List Item #2', 'elementor-list-widget' ),\n\t\t\t\t\t\t'link' => '',\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t'text' => esc_html__( 'List Item #3', 'elementor-list-widget' ),\n\t\t\t\t\t\t'link' => '',\n\t\t\t\t\t],\n\t\t\t\t],\n\t\t\t\t'title_field' => '{{{ text }}}',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t\t$this->start_controls_section(\n\t\t\t'marker_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'List Marker', 'elementor-list-widget' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'marker_type',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Marker Type', 'elementor-list-widget' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::CHOOSE,\n\t\t\t\t'options' => [\n\t\t\t\t\t'ordered' => [\n\t\t\t\t\t\t'title' => esc_html__( 'Ordered List', 'elementor-list-widget' ),\n\t\t\t\t\t\t'icon' => 'eicon-editor-list-ol',\n\t\t\t\t\t],\n\t\t\t\t\t'unordered' => [\n\t\t\t\t\t\t'title' => esc_html__( 'Unordered List', 'elementor-list-widget' ),\n\t\t\t\t\t\t'icon' => 'eicon-editor-list-ul',\n\t\t\t\t\t],\n\t\t\t\t\t'other' => [\n\t\t\t\t\t\t'title' => esc_html__( 'Custom List', 'elementor-list-widget' ),\n\t\t\t\t\t\t'icon' => 'eicon-edit',\n\t\t\t\t\t],\n\t\t\t\t],\n\t\t\t\t'default' => 'ordered',\n\t\t\t\t'toggle' => false,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'marker_content',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Custom Marker', 'elementor-list-widget' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t\t'placeholder' => esc_html__( 'Enter custom marker', 'elementor-list-widget' ),\n\t\t\t\t'default' => '🧡',\n\t\t\t\t'condition' => [\n\t\t\t\t\t'marker_type[value]' => 'other',\n\t\t\t\t],\n\t\t\t\t'selectors' => [\n\t\t\t\t\t'{{WRAPPER}} .elementor-list-widget-text::marker' => 'content: \"{{VALUE}}\";',\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t\t$this->start_controls_section(\n\t\t\t'style_content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'List Style', 'elementor-list-widget' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'title_color',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Color', 'elementor-list-widget' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n\t\t\t\t'selectors' => [\n\t\t\t\t\t'{{WRAPPER}} .elementor-list-widget-text' => 'color: {{VALUE}};',\n\t\t\t\t\t'{{WRAPPER}} .elementor-list-widget-text > a' => 'color: {{VALUE}};',\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->add_group_control(\n\t\t\t\\Elementor\\Group_Control_Typography::get_type(),\n\t\t\t[\n\t\t\t\t'name' => 'icon_typography',\n\t\t\t\t'selector' => '{{WRAPPER}} .elementor-list-widget-text, {{WRAPPER}} .elementor-list-widget-text > a',\n\t\t\t]\n\t\t);\n\n\t\t$this->add_group_control(\n\t\t\t\\Elementor\\Group_Control_Text_Shadow::get_type(),\n\t\t\t[\n\t\t\t\t'name' => 'text_shadow',\n\t\t\t\t'selector' => '{{WRAPPER}} .elementor-list-widget-text',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t\t$this->start_controls_section(\n\t\t\t'style_marker_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Marker Style', 'elementor-list-widget' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'marker_color',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Color', 'elementor-list-widget' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n\t\t\t\t'selectors' => [\n\t\t\t\t\t'{{WRAPPER}} .elementor-list-widget-text::marker' => 'color: {{VALUE}};',\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'marker_spacing',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Spacing', 'elementor-list-widget' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::SLIDER,\n\t\t\t\t'size_units' => [ 'px', 'em', 'rem', 'custom' ],\n\t\t\t\t'range' => [\n\t\t\t\t\t'px' => [\n\t\t\t\t\t\t'min' => 0,\n\t\t\t\t\t\t'max' => 100,\n\t\t\t\t\t],\n\t\t\t\t\t'em' => [\n\t\t\t\t\t\t'min' => 0,\n\t\t\t\t\t\t'max' => 10,\n\t\t\t\t\t],\n\t\t\t\t\t'rem' => [\n\t\t\t\t\t\t'min' => 0,\n\t\t\t\t\t\t'max' => 10,\n\t\t\t\t\t],\n\t\t\t\t],\n\t\t\t\t'default' => [\n\t\t\t\t\t'unit' => 'px',\n\t\t\t\t\t'size' => 40,\n\t\t\t\t],\n\t\t\t\t'selectors' => [\n\t\t\t\t\t// '{{WRAPPER}} .elementor-list-widget' => 'padding-left: {{SIZE}}{{UNIT}};',\n\t\t\t\t\t'{{WRAPPER}} .elementor-list-widget' => 'padding-inline-start: {{SIZE}}{{UNIT}};',\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\t/**\n\t * Render list widget output on the frontend.\n\t *\n\t * Written in PHP and used to generate the final HTML.\n\t *\n\t * @since 1.0.0\n\t * @access protected\n\t */\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\t$html_tag = [\n\t\t\t'ordered' => 'ol',\n\t\t\t'unordered' => 'ul',\n\t\t\t'other' => 'ul',\n\t\t];\n\t\t$this->add_render_attribute( 'list', 'class', 'elementor-list-widget' );\n\t\t?>\n\t\t<<?php echo $html_tag[ $settings['marker_type'] ]; ?> <?php $this->print_render_attribute_string( 'list' ); ?>>\n\t\t\t<?php\n\t\t\tforeach ( $settings['list_items'] as $index => $item ) {\n\n\n```\n\n----------------------------------------\n\nTITLE: Advanced Image Rendering in Elementor Widget\nDESCRIPTION: Shows advanced image rendering implementation using both Control_Media and Group_Control_Image_Size controls. Includes proper image size handling and dynamic preview rendering.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/rendering-media.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'section_content',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'image',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Choose Image', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::MEDIA,\n\t\t\t\t'default' => [\n\t\t\t\t\t'url' => \\Elementor\\Utils::get_placeholder_image_src(),\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->add_group_control(\n\t\t\t\\Elementor\\Group_Control_Image_Size::get_type(),\n\t\t\t[\n\t\t\t\t'name' => 'image',\n\t\t\t\t'default' => 'large',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\techo \\Elementor\\Group_Control_Image_Size::get_attachment_image_html( $settings );\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<#\n\t\tconst image = {\n\t\t\tid: settings.image.id,\n\t\t\turl: settings.image.url,\n\t\t\tsize: settings.image_size,\n\t\t\tdimension: settings.image_custom_dimension,\n\t\t\tmodel: view.getEditModel()\n\t\t};\n\n\t\tconst image_url = elementor.imagesManager.getImageUrl( image );\n\n\t\tif ( '' === image_url ) {\n\t\t\treturn;\n\t\t}\n\t\t#>\n\t\t<img src=\"{{{ image_url }}}\">\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Control in Elementor Widget\nDESCRIPTION: This code demonstrates how to implement a color control in a custom Elementor widget. It shows the registration of controls within a style section, adding a color control that allows users to set text color, and rendering the widget with the selected color applied through selectors.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-color.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'style_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'text_color',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Text Color', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n\t\t\t\t'selectors' => [\n\t\t\t\t\t'{{WRAPPER}} .your-class' => 'color: {{VALUE}}',\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Registration for Elementor List Widget\nDESCRIPTION: Main plugin file that registers the custom list widget with Elementor. It defines plugin metadata and hooks into Elementor's widget registration system.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/advanced-example.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Elementor List Widget\n * Description: List widget for Elementor.\n * Plugin URI:  https://elementor.com/\n * Version:     1.0.0\n * Author:      Elementor Developer\n * Author URI:  https://developers.elementor.com/\n * Text Domain: elementor-list-widget\n *\n * Requires Plugins: elementor\n * Elementor tested up to: 3.25.0\n * Elementor Pro tested up to: 3.25.0\n */\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Register List Widget.\n *\n * Include widget file and register widget class.\n *\n * @since 1.0.0\n * @param \\Elementor\\Widgets_Manager $widgets_manager Elementor widgets manager.\n * @return void\n */\nfunction register_list_widget( $widgets_manager ) {\n\n\trequire_once( __DIR__ . '/widgets/list-widget.php' );\n\n\t$widgets_manager->register( new \\Elementor_List_Widget() );\n\n}\nadd_action( 'elementor/widgets/register', 'register_list_widget' );\n```\n\n----------------------------------------\n\nTITLE: Implementing a Random Number Dynamic Tag Class for Elementor\nDESCRIPTION: Dynamic tag class implementation that extends Elementor's base Tag class. It defines the tag's properties (name, title, group, categories) and renders a random number using PHP's rand() function when the tag is used in Elementor.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/dynamic-tags/simple-example.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Elementor Dynamic Tag - Random Number\n *\n * Elementor dynamic tag that returns a random number.\n *\n * @since 1.0.0\n */\nclass Elementor_Dynamic_Tag_Random_Number extends \\Elementor\\Core\\DynamicTags\\Tag {\n\n\t/**\n\t * Get dynamic tag name.\n\t *\n\t * Retrieve the name of the random number tag.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Dynamic tag name.\n\t */\n\tpublic function get_name(): string {\n\t\treturn 'random-number';\n\t}\n\n\t/**\n\t * Get dynamic tag title.\n\t *\n\t * Returns the title of the random number tag.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Dynamic tag title.\n\t */\n\tpublic function get_title(): string {\n\t\treturn esc_html__( 'Random Number', 'elementor-random-number-dynamic-tag' );\n\t}\n\n\t/**\n\t * Get dynamic tag groups.\n\t *\n\t * Retrieve the list of groups the random number tag belongs to.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return array Dynamic tag groups.\n\t */\n\tpublic function get_group(): array {\n\t\treturn [ 'actions' ];\n\t}\n\n\t/**\n\t * Get dynamic tag categories.\n\t *\n\t * Retrieve the list of categories the random number tag belongs to.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return array Dynamic tag categories.\n\t */\n\tpublic function get_categories(): array {\n\t\treturn [ \\Elementor\\Modules\\DynamicTags\\Module::NUMBER_CATEGORY ];\n\t}\n\n\t/**\n\t * Render tag output on the frontend.\n\t *\n\t * Written in PHP and used to generate the final HTML.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return void\n\t */\n\tpublic function render(): void {\n\t\techo rand();\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Dynamic Tag Group and Server Variable Tag in Elementor\nDESCRIPTION: This is the main plugin file that registers both a custom dynamic tags group and the server variable dynamic tag. It hooks into Elementor's dynamic tags registration system to add the new functionality.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/dynamic-tags/complex-example.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Elementor Server Variable Dynamic Tag\n * Description: Add dynamic tag that returns an server variable.\n * Plugin URI:  https://elementor.com/\n * Version:     1.0.0\n * Author:      Elementor Developer\n * Author URI:  https://developers.elementor.com/\n * Text Domain: elementor-server-variable-dynamic-tag\n *\n * Requires Plugins: elementor\n * Elementor tested up to: 3.25.0\n * Elementor Pro tested up to: 3.25.0\n */\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Register Request Variables Dynamic Tag Group.\n *\n * Register new dynamic tag group for Request Variables.\n *\n * @since 1.0.0\n * @param \\Elementor\\Core\\DynamicTags\\Manager $dynamic_tags_manager Elementor dynamic tags manager.\n * @return void\n */\nfunction register_request_variables_dynamic_tag_group( $dynamic_tags_manager ) {\n\n\t$dynamic_tags_manager->register_group(\n\t\t'request-variables',\n\t\t[\n\t\t\t'title' => esc_html__( 'Request Variables', 'textdomain' )\n\t\t]\n\t);\n\n}\nadd_action( 'elementor/dynamic_tags/register', 'register_request_variables_dynamic_tag_group' );\n\n/**\n * Register Server Variable Dynamic Tag.\n *\n * Include dynamic tag file and register tag class.\n *\n * @since 1.0.0\n * @param \\Elementor\\Core\\DynamicTags\\Manager $dynamic_tags_manager Elementor dynamic tags manager.\n * @return void\n */\nfunction register_server_variable_dynamic_tag( $dynamic_tags_manager ) {\n\n\trequire_once( __DIR__ . '/dynamic-tags/server-variable-dynamic-tag.php' );\n\n\t$dynamic_tags_manager->register( new \\Elementor_Dynamic_Tag_Server_Variable );\n\n}\nadd_action( 'elementor/dynamic_tags/register', 'register_server_variable_dynamic_tag' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Icons Control in Elementor Widget\nDESCRIPTION: Complete example of implementing an Icons control in an Elementor widget, including control registration, rendering logic, and template handling. Shows how to set default icons and recommended options.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-icons.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Icons_Elementor_Test_Control_Widget extends \\Elementor\\Widget_Base {\n\n\tpublic function get_name(): string {\n\t\treturn 'icons_test_widget';\n\t}\n\n\tpublic function get_title(): string {\n\t\treturn esc_html__( 'Icons Test Widget', 'textdomain' );\n\t}\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'section_icon',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Icon', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'icon',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Icon', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::ICONS,\n\t\t\t\t'default' => [\n\t\t\t\t\t'value' => 'fas fa-circle',\n\t\t\t\t\t'library' => 'fa-solid',\n\t\t\t\t],\n\t\t\t\t'recommended' => [\n\t\t\t\t\t'fa-solid' => [\n\t\t\t\t\t\t'circle',\n\t\t\t\t\t\t'dot-circle',\n\t\t\t\t\t\t'square-full',\n\t\t\t\t\t],\n\t\t\t\t\t'fa-regular' => [\n\t\t\t\t\t\t'circle',\n\t\t\t\t\t\t'dot-circle',\n\t\t\t\t\t\t'square-full',\n\t\t\t\t\t],\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\t?>\n\t\t<div class=\"my-icon-wrapper\">\n\t\t\t<?php \\Elementor\\Icons_Manager::render_icon( $settings['icon'], [ 'aria-hidden' => 'true' ] ); ?>\n\t\t</div>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<#\n\t\tconst iconHTML = elementor.helpers.renderIcon( view, settings.selected_icon, { 'aria-hidden': true }, 'i' , 'object' );\n\t\t#>\n\t\t<div class=\"my-icon-wrapper\">\n\t\t\t{{{ iconHTML.value }}}\n\t\t</div>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Singleton Pattern for Elementor Addon in PHP\nDESCRIPTION: Implementation of the singleton design pattern to ensure the main plugin class is instantiated only once. Includes the static instance property and instance method with proper docblocks.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/addons/main-class.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfinal class Plugin {\n\n\t/**\n\t * Instance\n\t *\n\t * @since 1.0.0\n\t * @access private\n\t * @static\n\t * @var \\Elementor_Test_Addon\\Plugin The single instance of the class.\n\t */\n\tprivate static $_instance = null;\n\n\t/**\n\t * Instance\n\t *\n\t * Ensures only one instance of the class is loaded or can be loaded.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @static\n\t * @return \\Elementor_Test_Addon\\Plugin An instance of the class.\n\t */\n\tpublic static function instance() {\n\n\t\tif ( is_null( self::$_instance ) ) {\n\t\t\tself::$_instance = new self();\n\t\t}\n\t\treturn self::$_instance;\n\n\t}\n\n}\n\n\\Plugin::instance();\n```\n\n----------------------------------------\n\nTITLE: Extending Base Control in Elementor\nDESCRIPTION: Basic example of extending the Elementor Base_Control class to create a custom control. This is the foundation for all custom controls in Elementor.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/controls/control-structure.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Control extends \\Elementor\\Base_Control {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Variable Dynamic Tag Class for Elementor\nDESCRIPTION: This class extends Elementor's Tag class to create a custom dynamic tag that displays server variables. It includes methods for defining the tag name, title, group, categories, controls, and rendering functionality. The tag allows users to select from available server variables via a dropdown control.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/dynamic-tags/complex-example.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Elementor Dynamic Tag - Server Variable\n *\n * Elementor dynamic tag that returns a server variable.\n *\n * @since 1.0.0\n */\nclass Elementor_Dynamic_Tag_Server_Variable extends \\Elementor\\Core\\DynamicTags\\Tag {\n\n\t/**\n\t * Get dynamic tag name.\n\t *\n\t * Retrieve the name of the server variable tag.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Dynamic tag name.\n\t */\n\tpublic function get_name(): string {\n\t\treturn 'server-variable';\n\t}\n\n\t/**\n\t * Get dynamic tag title.\n\t *\n\t * Returns the title of the server variable tag.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Dynamic tag title.\n\t */\n\tpublic function get_title(): string {\n\t\treturn esc_html__( 'Server Variable', 'textdomain' );\n\t}\n\n\t/**\n\t * Get dynamic tag groups.\n\t *\n\t * Retrieve the list of groups the server variable tag belongs to.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return array Dynamic tag groups.\n\t */\n\tpublic function get_group(): array {\n\t\treturn [ 'request-variables' ];\n\t}\n\n\t/**\n\t * Get dynamic tag categories.\n\t *\n\t * Retrieve the list of categories the server variable tag belongs to.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return array Dynamic tag categories.\n\t */\n\tpublic function get_categories(): array {\n\t\treturn [ \\Elementor\\Modules\\DynamicTags\\Module::TEXT_CATEGORY ];\n\t}\n\n\t/**\n\t * Register dynamic tag controls.\n\t *\n\t * Add input fields to allow the user to customize the server variable tag settings.\n\t *\n\t * @since 1.0.0\n\t * @access protected\n\t * @return void\n\t */\n\tprotected function register_controls(): void {\n\t\t$variables = [];\n\n\t\tforeach ( array_keys( $_SERVER ) as $variable ) {\n\t\t\t$variables[ $variable ] = ucwords( str_replace( '_', ' ', $variable ) );\n\t\t}\n\n\t\t$this->add_control(\n\t\t\t'user_selected_variable',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::SELECT,\n\t\t\t\t'label' => esc_html__( 'Variable', 'textdomain' ),\n\t\t\t\t'options' => $variables,\n\t\t\t]\n\t\t);\n\t}\n\n\t/**\n\t * Render tag output on the frontend.\n\t *\n\t * Written in PHP and used to generate the final HTML.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return void\n\t */\n\tpublic function render(): void {\n\t\t$user_selected_variable = $this->get_settings( 'user_selected_variable' );\n\n\t\tif ( ! $user_selected_variable ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! isset( $_SERVER[ $user_selected_variable ] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$value = $_SERVER[ $user_selected_variable ];\n\t\techo wp_kses_post( $value );\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Widget with Elementor PHP Class\nDESCRIPTION: Example of an Elementor widget class that demonstrates how to register a text control and render its value. The code shows the complete implementation including control registration, PHP rendering, and JavaScript template rendering for live preview.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/rendering-text.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'section_content',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'title',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Title', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t\t'placeholder' => esc_html__( 'Enter your title', 'textdomain' ),\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\n\t\tif ( empty( $settings['title'] ) ) {\n\t\t\treturn;\n\t\t}\n\t\t?>\n\t\t<h3>\n\t\t\t<?php echo $settings['title']; ?>\n\t\t</h3>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<#\n\t\tif ( '' === settings.title ) {\n\t\t\treturn;\n\t\t}\n\t\t#>\n\t\t<h3>\n\t\t\t{{{ settings.title }}}\n\t\t</h3>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Icon Control in Elementor Widget\nDESCRIPTION: Example of implementing an Icon Control in an Elementor widget. The code demonstrates how to register the control with specific social media icons, render the selected icon in the frontend, and handle the icon display in the editor template.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-icon.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'icon',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Social Icons', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::ICON,\n\t\t\t\t'include' => [\n\t\t\t\t\t'fa fa-facebook',\n\t\t\t\t\t'fa fa-flickr',\n\t\t\t\t\t'fa fa-google-plus',\n\t\t\t\t\t'fa fa-instagram',\n\t\t\t\t\t'fa fa-linkedin',\n\t\t\t\t\t'fa fa-pinterest',\n\t\t\t\t\t'fa fa-reddit',\n\t\t\t\t\t'fa fa-twitch',\n\t\t\t\t\t'fa fa-twitter',\n\t\t\t\t\t'fa fa-vimeo',\n\t\t\t\t\t'fa fa-youtube',\n\t\t\t\t],\n\t\t\t\t'default' => 'fa fa-facebook',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\t?>\n\t\t<i class=\"<?php echo esc_attr( $settings['icon'] ); ?>\" aria-hidden=\"true\"></i>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<i class=\"{{ settings.icon }}\" aria-hidden=\"true\"></i>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Static Widget Implementation with Caching\nDESCRIPTION: Full implementation of an Elementor widget with static content caching enabled. Includes control registration, render method, and content template for a simple title widget.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-output-caching.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function is_dynamic_content(): bool {\n\t\treturn false;\n\t}\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'section_content',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'title',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Title', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t\t'placeholder' => esc_html__( 'Enter your title', 'textdomain' ),\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\n\t\tif ( empty( $settings['title'] ) ) {\n\t\t\treturn;\n\t\t}\n\t\t?>\n\t\t<h3>\n\t\t\t<?php echo $settings['title']; ?>\n\t\t</h3>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<#\n\t\tif ( '' === settings.title ) {\n\t\t\treturn;\n\t\t}\n\t\t#>\n\t\t<h3>\n\t\t\t{{{ settings.title }}}\n\t\t</h3>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Elementor Version Compatibility Headers\nDESCRIPTION: Optional Elementor-specific header comments that specify which versions of Elementor and Elementor Pro the addon has been tested with. Used for compatibility checking.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/addons/plugin-header.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Elementor tested up to: x.x.x\n * Elementor Pro tested up to: x.x.x\n */\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Dynamic Tags in Elementor using PHP\nDESCRIPTION: This PHP function demonstrates how to register new dynamic tags in Elementor. It requires the dynamic tags manager as a parameter, includes necessary files, and registers instances of custom dynamic tag classes.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/dynamic-tags/add-new-dynamic-tag.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction register_new_dynamic_tags( $dynamic_tags_manager ) {\n\n\trequire_once( __DIR__ . '/dynamic-tags/dynamic-tag-1.php' );\n\trequire_once( __DIR__ . '/dynamic-tags/dynamic-tag-2.php' );\n\n\t$dynamic_tags_manager->register( new \\Elementor_Dynamic_Tag_1() );\n\t$dynamic_tags_manager->register( new \\Elementor_Dynamic_Tag_2() );\n\n}\nadd_action( 'elementor/dynamic_tags/register', 'register_new_dynamic_tags' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Data Methods in Elementor Pro (PHP)\nDESCRIPTION: This code snippet demonstrates how to implement the required methods for defining action data in a custom Elementor form action. It includes the get_name() method for specifying the action ID and the get_label() method for setting the user-facing label.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-actions/action-data.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Action extends \\ElementorPro\\Modules\\Forms\\Classes\\Action_Base {\n\n\tpublic function get_name(): string {\n\t\treturn 'action_name';\n\t}\n\n\tpublic function get_label(): string {\n\t\treturn esc_html__( 'My Action Name', 'textdomain' );\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Running a Custom Command in Elementor\nDESCRIPTION: This example demonstrates how to create a custom command, register it with a new component, and run it using the $e.commands API in Elementor.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/js/commands.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Example create and register new command.\n// Important: Available to run in the console does not depends on anything else.\n\nclass ExampleCommand extends $e.modules.CommandBase {\n\tapply( args ) {\n\t\t// Output command args to console.\n\t\tconsole.log( 'ExampleCommand: ', args );\n\n\t\t// Return object as example.\n\t\treturn {\n\t\t\texample: 'result from ExampleCommand',\n\t\t};\n\t}\n}\n\nclass CustomComponent extends $e.modules.ComponentBase {\n\tgetNamespace() {\n\t\treturn 'custom-component';\n\t}\n\n\tdefaultCommands() {\n\t\t// Object of all the component commands.\n\t\treturn {\n\t\t\texample: ( args ) => ( new ExampleCommand( args ) ).run(),\n\t\t};\n\t}\n}\n\n// Register the new component.\n$e.components.register( new CustomComponent() );\n\n// Run's 'example' command from 'custom-component'.\nresult = $e.run( 'custom-component/example', {\n\tproperty: 'value',\n} );\n\n// Output command run result.\nconsole.log( 'e-commands-eg-1-result: ', result );\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Elementor Widget Class\nDESCRIPTION: Initial class declaration extending the Elementor Widget_Base class, which serves as the foundation for creating custom widgets.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-structure.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Repeater Data in PHP\nDESCRIPTION: This code snippet shows how to render the data from the repeater control in PHP using the `render` method. It retrieves the settings, loops through the repeater items, and outputs HTML based on the values set by the user in the Elementor editor. It also handles the case where a link is provided for the item.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/rendering-repeaters.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\n\t\tif ( ! $settings['list'] ) {\n\t\t\treturn;\n\t\t}\n\t\t?>\n\t\t<ul>\n\t\t<?php foreach ( $settings['list'] as $index => $item ) : ?>\n\t\t\t<li>\n\t\t\t<?php\n\t\t\tif ( $item['link']['url'] ) {\n\t\t\t\t?><a href=\"<?php echo esc_url( $item['link']['url'] ); ?>\"><?php echo $item['text']; ?></a><?php\n\t\t\t} else {\n\t\t\t\techo $item['text'];\n\t\t\t}\n\t\t\t?>\n\t\t\t</li>\n\t\t<?php endforeach; ?>\n\t\t</ul>\n\t\t<?php\n\t}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Elementor oEmbed Widget Plugin\nDESCRIPTION: Main plugin file that registers the custom oEmbed widget with Elementor. Includes plugin metadata and widget registration hook.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/simple-example.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Elementor oEmbed Widget\n * Description: Auto embed any embbedable content from external URLs into Elementor.\n * Plugin URI:  https://elementor.com/\n * Version:     1.0.0\n * Author:      Elementor Developer\n * Author URI:  https://developers.elementor.com/\n * Text Domain: elementor-oembed-widget\n *\n * Requires Plugins: elementor\n * Elementor tested up to: 3.25.0\n * Elementor Pro tested up to: 3.25.0\n */\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Register oEmbed Widget.\n *\n * Include widget file and register widget class.\n *\n * @since 1.0.0\n * @param \\Elementor\\Widgets_Manager $widgets_manager Elementor widgets manager.\n * @return void\n */\nfunction register_oembed_widget( $widgets_manager ) {\n\n\trequire_once( __DIR__ . '/widgets/oembed-widget.php' );\n\n\t$widgets_manager->register( new \\Elementor_oEmbed_Widget() );\n\n}\nadd_action( 'elementor/widgets/register', 'register_oembed_widget' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Form Action Structure\nDESCRIPTION: Complete skeleton of a form action class showing all required and optional methods including name getter, label getter, settings registration, action execution, and export handling.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-actions/action-structure.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Action extends \\ElementorPro\\Modules\\Forms\\Classes\\Action_Base {\n\n\tpublic function get_name(): string {}\n\n\tpublic function get_label(): string {}\n\n\tpublic function register_settings_section( $widget ): void {}\n\n\tpublic function run( $record, $ajax_handler ): void {}\n\n\tpublic function on_export( $element ): array {}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Elementor Group Control\nDESCRIPTION: Example of extending the Group_Control_Base class to create a custom group control in Elementor.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-types.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Control extends \\Elementor\\Group_Control_Base {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Stroke Group Control in Elementor Widget\nDESCRIPTION: This snippet demonstrates how to add a Text Stroke Group Control to an Elementor widget. It shows the control registration in the register_controls() method, and how to apply the control in the render() and content_template() methods.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/group-control-text-stroke.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_group_control(\n\t\t\t\\Elementor\\Group_Control_Text_Stroke::get_type(),\n\t\t\t[\n\t\t\t\t'name' => 'text_stroke',\n\t\t\t\t'selector' => '{{WRAPPER}} .your-class',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Compatibility Checks for Elementor Addon in PHP\nDESCRIPTION: This code snippet defines a Plugin class that performs compatibility checks for an Elementor addon. It checks for the presence of Elementor, minimum Elementor version, and minimum PHP version. If any check fails, it displays an admin notice and prevents the addon from running.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/addons/compatibility.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfinal class Plugin {\n\n\t/**\n\t * Minimum Elementor Version\n\t *\n\t * @since 1.0.0\n\t * @var string Minimum Elementor version required to run the addon.\n\t */\n\tconst MINIMUM_ELEMENTOR_VERSION = '3.20.0';\n\n\t/**\n\t * Minimum PHP Version\n\t *\n\t * @since 1.0.0\n\t * @var string Minimum PHP version required to run the addon.\n\t */\n\tconst MINIMUM_PHP_VERSION = '7.4';\n\n\t/**\n\t * Constructor\n\t *\n\t * Perform some compatibility checks to make sure basic requirements are meet.\n\t * If all compatibility checks pass, initialize the functionality.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t */\n\tpublic function __construct() {\n\n\t\tif ( $this->is_compatible() ) {\n\n\t\t\t// Run init process here...\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Compatibility Checks\n\t *\n\t * Checks whether the site meets the addon requirement.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return bool\n\t */\n\tpublic function is_compatible(): bool {\n\n\t\t// Check if Elementor is installed and activated\n\t\tif ( ! did_action( 'elementor/loaded' ) ) {\n\t\t\tadd_action( 'admin_notices', [ $this, 'admin_notice_missing_main_plugin' ] );\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check for required Elementor version\n\t\tif ( ! version_compare( ELEMENTOR_VERSION, self::MINIMUM_ELEMENTOR_VERSION, '>=' ) ) {\n\t\t\tadd_action( 'admin_notices', [ $this, 'admin_notice_minimum_elementor_version' ] );\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check for required PHP version\n\t\tif ( version_compare( PHP_VERSION, self::MINIMUM_PHP_VERSION, '<' ) ) {\n\t\t\tadd_action( 'admin_notices', [ $this, 'admin_notice_minimum_php_version' ] );\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Admin notice\n\t *\n\t * Warning when the site doesn't have Elementor installed or activated.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t */\n\tpublic function admin_notice_missing_main_plugin(): void {\n\n\t\tif ( isset( $_GET['activate'] ) ) unset( $_GET['activate'] );\n\n\t\t$message = sprintf(\n\t\t\t/* translators: 1: Plugin name 2: Elementor */\n\t\t\tesc_html__( '\"%1$s\" requires \"%2$s\" to be installed and activated.', 'elementor-test-addon' ),\n\t\t\t'<strong>' . esc_html__( 'Elementor Test Addon', 'elementor-test-addon' ) . '</strong>',\n\t\t\t'<strong>' . esc_html__( 'Elementor', 'elementor-test-addon' ) . '</strong>'\n\t\t);\n\n\t\tprintf( '<div class=\"notice notice-warning is-dismissible\"><p>%1$s</p></div>', $message );\n\n\t}\n\n\t/**\n\t * Admin notice\n\t *\n\t * Warning when the site doesn't have a minimum required Elementor version.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t */\n\tpublic function admin_notice_minimum_elementor_version(): void {\n\n\t\tif ( isset( $_GET['activate'] ) ) unset( $_GET['activate'] );\n\n\t\t$message = sprintf(\n\t\t\t/* translators: 1: Plugin name 2: Elementor 3: Required Elementor version */\n\t\t\tesc_html__( '\"%1$s\" requires \"%2$s\" version %3$s or greater.', 'elementor-test-addon' ),\n\t\t\t'<strong>' . esc_html__( 'Elementor Test Addon', 'elementor-test-addon' ) . '</strong>',\n\t\t\t'<strong>' . esc_html__( 'Elementor', 'elementor-test-addon' ) . '</strong>',\n\t\t\t self::MINIMUM_ELEMENTOR_VERSION\n\t\t);\n\n\t\tprintf( '<div class=\"notice notice-warning is-dismissible\"><p>%1$s</p></div>', $message );\n\n\t}\n\n\t/**\n\t * Admin notice\n\t *\n\t * Warning when the site doesn't have a minimum required PHP version.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t */\n\tpublic function admin_notice_minimum_php_version(): void {\n\n\t\tif ( isset( $_GET['activate'] ) ) unset( $_GET['activate'] );\n\n\t\t$message = sprintf(\n\t\t\t/* translators: 1: Plugin name 2: PHP 3: Required PHP version */\n\t\t\tesc_html__( '\"%1$s\" requires \"%2$s\" version %3$s or greater.', 'elementor-test-addon' ),\n\t\t\t'<strong>' . esc_html__( 'Elementor Test Addon', 'elementor-test-addon' ) . '</strong>',\n\t\t\t'<strong>' . esc_html__( 'PHP', 'elementor-test-addon' ) . '</strong>',\n\t\t\t self::MINIMUM_PHP_VERSION\n\t\t);\n\n\t\tprintf( '<div class=\"notice notice-warning is-dismissible\"><p>%1$s</p></div>', $message );\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Styled Elementor Widget with Color Control\nDESCRIPTION: A complete example of an Elementor widget that implements both content and style controls. The widget includes a title text control and a color control that styles the title element. It demonstrates proper usage of selectors and control value rendering.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/rendering-style.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'section_content',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'title',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Title', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t\t'placeholder' => esc_html__( 'Enter your title', 'textdomain' ),\n\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t\t$this->start_controls_section(\n\t\t\t'section_style',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'color',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Color', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n\t\t\t\t'default' => '#f00',\n\t\t\t\t'selectors' => [\n\t\t\t\t\t'{{WRAPPER}} h3' => 'color: {{VALUE}}',\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\n\t\tif ( empty( $settings['title'] ) ) {\n\t\t\treturn;\n\t\t}\n\t\t?>\n\t\t<h3>\n\t\t\t<?php echo $settings['title']; ?>\n\t\t</h3>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<#\n\t\tif ( '' === settings.title ) {\n\t\t\treturn;\n\t\t}\n\t\t#>\n\t\t<h3>\n\t\t\t{{{ settings.title }}}\n\t\t</h3>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Form Fields in Elementor Pro\nDESCRIPTION: Function that registers new custom field types with Elementor Pro's form field registrar. It requires the field class files and registers them using the elementor_pro/forms/fields/register action hook.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-fields/add-new-field.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction register_new_form_fields( $form_fields_registrar ) {\n\n\trequire_once( __DIR__ . '/forms/fields/field-1.php' );\n\trequire_once( __DIR__ . '/forms/fields/field-2.php' );\n\n\t$form_fields_registrar->register( new \\Field_1() );\n\t$form_fields_registrar->register( new \\Field_2() );\n\n}\nadd_action( 'elementor_pro/forms/fields/register', 'register_new_form_fields' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Elementor Repeater Control with Repeater Class\nDESCRIPTION: Example showing how to implement a repeater control using the Repeater class. This approach provides more flexibility and cleaner code organization by defining controls separately using the Repeater instance.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-repeater.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$repeater = new \\Elementor\\Repeater();\n\n\t\t$repeater->add_control(\n\t\t\t'list_title',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Title', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t\t'default' => esc_html__( 'List Title' , 'textdomain' ),\n\t\t\t\t'label_block' => true,\n\t\t\t]\n\t\t);\n\n\t\t$repeater->add_control(\n\t\t\t'list_content',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::WYSIWYG,\n\t\t\t\t'default' => esc_html__( 'List Content' , 'textdomain' ),\n\t\t\t\t'show_label' => false,\n\t\t\t]\n\t\t);\n\n\t\t$repeater->add_control(\n\t\t\t'list_color',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Color', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n\t\t\t\t'selectors' => [\n\t\t\t\t\t'{{WRAPPER}} {{CURRENT_ITEM}}' => 'color: {{VALUE}}'\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'list',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Repeater List', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::REPEATER,\n\t\t\t\t'fields' => $repeater->get_controls(),\n\t\t\t\t'default' => [\n\t\t\t\t\t[\n\t\t\t\t\t\t'list_title' => esc_html__( 'Title #1', 'textdomain' ),\n\t\t\t\t\t\t'list_content' => esc_html__( 'Item content. Click the edit button to change this text.', 'textdomain' ),\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t'list_title' => esc_html__( 'Title #2', 'textdomain' ),\n\t\t\t\t\t\t'list_content' => esc_html__( 'Item content. Click the edit button to change this text.', 'textdomain' ),\n\t\t\t\t\t],\n\t\t\t\t],\n\t\t\t\t'title_field' => '{{{ list_title }}}',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Control with Label and Description in Elementor (PHP)\nDESCRIPTION: Demonstrates how to add a basic text control in Elementor with a label and description. It shows the usage of type, label, description, show_label, label_block, and separator arguments.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/labels-description.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'unique-control-name',\n\t[\n\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t'label' => esc_html__( 'Control Label', 'textdomain' ),\n\t\t'description' => esc_html__( 'Short control description.', 'textdomain' ),\n\t\t'show_label' => false,\n\t\t'label_block' => false,\n\t\t'separator' => 'after'\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Form Actions in Elementor Pro using PHP\nDESCRIPTION: This code snippet shows how to register new form actions in Elementor Pro. It hooks into the 'elementor_pro/forms/actions/register' action, requires action class files, and registers instances of custom action classes with the form actions registrar.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-actions/add-new-action.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction register_new_form_actions( $form_actions_registrar ) {\n\n\trequire_once( __DIR__ . '/forms/actions/action-1.php' );\n\trequire_once( __DIR__ . '/forms/actions/action-2.php' );\n\n\t$form_actions_registrar->register( new \\Action_1() );\n\t$form_actions_registrar->register( new \\Action_2() );\n\n}\nadd_action( 'elementor_pro/forms/actions/register', 'register_new_form_actions' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Widget Data Methods in Elementor PHP Widget Class\nDESCRIPTION: Demonstrates the implementation of core widget data methods in an Elementor widget class. These methods define essential widget properties like name, title, icon, categories, keywords, help URL and promotional data that determine how the widget appears and behaves in the Elementor interface.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-data.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tpublic function get_name(): string {\n\t\treturn 'widget_name';\n\t}\n\n\tpublic function get_title(): string {\n\t\treturn esc_html__( 'My Widget Name', 'textdomain' );\n\t}\n\n\tpublic function get_icon(): string {\n\t\treturn 'eicon-code';\n\t}\n\n\tpublic function get_categories(): array {\n\t\treturn [ 'general' ];\n\t}\n\n\tpublic function get_keywords(): array {\n\t\treturn [ 'keyword', 'keyword' ];\n\t}\n\n\tpublic function get_custom_help_url(): string {\n\t\treturn 'https://example.com/widget-name';\n\t}\n\n\tprotected function get_upsale_data(): array {\n\t\treturn [];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Control Template in Elementor PHP\nDESCRIPTION: This code snippet demonstrates how to create a custom control template by extending Elementor's Base_Control class. The content_template() method outputs the HTML structure for the control, utilizing JS templates to dynamically access control data via the 'data' object.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/controls/control-template.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Control extends \\Elementor\\Base_Control {\n\n\tpublic function content_template(): void {\n\t\t$control_uid = $this->get_control_uid();\n\t\t?>\n\n\t\t<div class=\"elementor-control-field\">\n\n\t\t\t<# if ( data.label ) {#>\n\t\t\t\t<label for=\"<?php echo $control_uid; ?>\" class=\"elementor-control-title\">{{{ data.label }}}</label>\n\t\t\t<# } #>\n\n\t\t\t<div class=\"elementor-control-input-wrapper elementor-control-unit-5 elementor-control-dynamic-switcher-wrapper\">\n\t\t\t\t<input id=\"<?php echo $control_uid; ?>\" type=\"{{ data.input_type }}\" class=\"tooltip-target elementor-control-tag-area\" data-tooltip=\"{{ data.title }}\" title=\"{{ data.title }}\" data-setting=\"{{ data.name }}\" placeholder=\"{{ data.placeholder }}\" />\n\t\t\t</div>\n\n\t\t</div>\n\n\t\t<# if ( data.description ) { #>\n\t\t\t<div class=\"elementor-control-field-description\">{{{ data.description }}}</div>\n\t\t<# } #>\n\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Shadow Group Control in Elementor Widget\nDESCRIPTION: This PHP code snippet demonstrates how to add a Text Shadow Group Control to an Elementor widget. It shows the control registration, rendering, and content template implementation.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/group-control-text-shadow.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_group_control(\n\t\t\t\\Elementor\\Group_Control_Text_Shadow::get_type(),\n\t\t\t[\n\t\t\t\t'name' => 'text_shadow',\n\t\t\t\t'selector' => '{{WRAPPER}} .your-class',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Emoji Control Class Implementation for Elementor\nDESCRIPTION: PHP class implementing a custom Elementor control for the Emoji One Area library. It extends Elementor's Base_Data_Control class, registers necessary scripts and styles, and defines the control template.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/controls/complex-example.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Elementor emoji one area control.\n *\n * A control for displaying a textarea with the ability to add emojis.\n *\n * @since 1.0.0\n */\nclass Elementor_EmojiOneArea_Control extends \\Elementor\\Base_Data_Control {\n\n\t/**\n\t * Get emoji one area control type.\n\t *\n\t * Retrieve the control type, in this case `emojionearea`.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Control type.\n\t */\n\tpublic function get_type(): string {\n\t\treturn 'emojionearea';\n\t}\n\n\t/**\n\t * Enqueue emoji one area control scripts and styles.\n\t *\n\t * Used to register and enqueue custom scripts and styles used by the emoji one\n\t * area control.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t */\n\tpublic function enqueue(): void {\n\t\t// Styles\n\t\twp_register_style( 'emojionearea', 'https://cdnjs.cloudflare.com/ajax/libs/emojionearea/3.4.2/emojionearea.css', [], '3.4.2' );\n\t\twp_enqueue_style( 'emojionearea' );\n\n\t\t// Scripts\n\t\twp_register_script( 'emojionearea', 'https://cdnjs.cloudflare.com/ajax/libs/emojionearea/3.4.2/emojionearea.js', [], '3.4.2' );\n\t\twp_register_script( 'emojionearea-control', plugins_url( '/assets/js/emojionearea.js', dirname( __FILE__ ) ), [ 'emojionearea' ], '1.0.0' );\n\t\twp_enqueue_script( 'emojionearea-control' );\n\t}\n\n\t/**\n\t * Get emoji one area control default settings.\n\t *\n\t * Retrieve the default settings of the emoji one area control. Used to return\n\t * the default settings while initializing the emoji one area control.\n\t *\n\t * @since 1.0.0\n\t * @access protected\n\t * @return array Control default settings.\n\t */\n\tprotected function get_default_settings(): array {\n\t\treturn [\n\t\t\t'label_block' => true,\n\t\t\t'rows' => 3,\n\t\t\t'emojionearea_options' => [],\n\t\t];\n\t}\n\n\t/**\n\t * Render emoji one area control output in the editor.\n\t *\n\t * Used to generate the control HTML in the editor using Underscore JS\n\t * template. The variables for the class are available using `data` JS\n\t * object.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t */\n\tpublic function content_template(): void {\n\t\t$control_uid = $this->get_control_uid();\n\t\t?>\n\t\t<div class=\"elementor-control-field\">\n\n\t\t\t<# if ( data.label ) {#>\n\t\t\t<label for=\"<?php echo esc_attr( $control_uid ); ?>\" class=\"elementor-control-title\">{{{ data.label }}}</label>\n\t\t\t<# } #>\n\n\t\t\t<div class=\"elementor-control-input-wrapper\">\n\t\t\t\t<textarea id=\"<?php echo esc_attr( $control_uid ); ?>\" class=\"elementor-control-tag-area\" rows=\"{{ data.rows }}\" data-setting=\"{{ data.name }}\" placeholder=\"{{ data.placeholder }}\"></textarea>\n\t\t\t</div>\n\n\t\t</div>\n\n\t\t<# if ( data.description ) { #>\n\t\t<div class=\"elementor-control-field-description\">{{{ data.description }}}</div>\n\t\t<# } #>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Elementor Widget JavaScript Handler\nDESCRIPTION: Defines a JavaScript handler for the Elementor widget, extending the base handler class. It includes methods to update widget content, initialize the widget, and handle control value changes.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/frontend-available.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Test Widget JS Handler Class\n */\nclass TestWidgetHandler extends elementorModules.frontend.handlers.Base {\n\n\t/**\n\t * Update Test Widget Content\n\t *\n\t * Custom method used by test-widget that inserts the control value using JS.\n\t */\n\tupdateTestWidgetContent() {\n\t\tif ( ! this.contentWrapper ) {\n\t\t\tconst widgetUniqueSelector = `div[data-id=\"${this.getID()}\"] .test-widget`;\n\t\t\tthis.contentWrapper = document.querySelector( widgetUniqueSelector );\n\t\t}\n\n\t\tthis.contentWrapper.innerText = this.getElementSettings( 'some_number' );\n\t}\n\n\t/**\n\t * On Init\n\t *\n\t * Runs when the widget is loaded and initialized in the frontend.\n\t */\n\tonInit() {\n\t\tthis.updateTestWidgetContent();\n\t}\n\n\t/**\n\t * On Element Change\n\t *\n\t * Runs every time a control value is changed by the user in the editor.\n\t *\n\t * @param {string} propertyName - The ID of the control that was changed.\n\t */\n\tonElementChange( propertyName ) {\n\t\tif ( 'some_number' === propertyName ) {\n\t\t\tthis.updateTestWidgetContent();\n\t\t}\n\t}\n\n}\n\n/**\n * Register JS Handler for the Test Widget\n *\n * When Elementor frontend was initiated, and the widget is ready, register the widet\n * JS handler.\n */\nwindow.addEventListener( 'elementor/frontend/init', () => {\n\tconst addHandler = ( $element ) => {\n\t\telementorFrontend.elementsHandler.addHandler( TestWidgetHandler, { $element } );\n\t};\n\n\telementorFrontend.hooks.addAction( 'frontend/element_ready/test_widget.default', addHandler );\n} );\n```\n\n----------------------------------------\n\nTITLE: Phone Number Format Validation in Elementor Forms\nDESCRIPTION: Hook implementation to validate telephone field format ensuring it matches XXX-XXX-XXXX pattern.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/forms.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'elementor_pro/forms/validation/tel', function( $field, $record, $ajax_handler ) {\n\n\tif ( preg_match( '/[0-9]{3}-[0-9]{3}-[0-9]{4}/', $field['value'] ) !== 1 ) {\n\t\t$ajax_handler->add_error( $field['id'], 'Please make sure the phone number is in XXX-XXX-XXXX format, eg: 123-456-7890' );\n\t}\n}, 10, 3 );\n```\n\n----------------------------------------\n\nTITLE: Dynamic Tag Skeleton Structure in PHP for Elementor\nDESCRIPTION: This code snippet provides a skeleton structure for a dynamic tag in Elementor. It includes essential methods such as get_name, get_title, get_group, get_categories, register_controls, and render.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/dynamic-tags/dynamic-tags-structure.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Tag extends \\Elementor\\Core\\DynamicTags\\Tag {\n\n\tpublic function get_name(): string {}\n\n\tpublic function get_title(): string {}\n\n\tpublic function get_group(): array {}\n\n\tpublic function get_categories(): array {}\n\n\tprotected function register_controls(): void {}\n\n\tpublic function render(): void {}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Elementor Repeater Control with Fields Array\nDESCRIPTION: Example showing how to implement a repeater control using a direct fields array configuration. The code demonstrates setting up repeater fields with title, content, and color controls, along with render methods for both PHP and JS templates.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-repeater.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'list',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Repeater List', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::REPEATER,\n\t\t\t\t'fields' => [\n\t\t\t\t\t[\n\t\t\t\t\t\t'name' => 'list_title',\n\t\t\t\t\t\t'label' => esc_html__( 'Title', 'textdomain' ),\n\t\t\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t\t\t\t'default' => esc_html__( 'List Title' , 'textdomain' ),\n\t\t\t\t\t\t'label_block' => true,\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t'name' => 'list_content',\n\t\t\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t\t\t'type' => \\Elementor\\Controls_Manager::WYSIWYG,\n\t\t\t\t\t\t'default' => esc_html__( 'List Content' , 'textdomain' ),\n\t\t\t\t\t\t'show_label' => false,\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t'name' => 'list_color',\n\t\t\t\t\t\t'label' => esc_html__( 'Color', 'textdomain' ),\n\t\t\t\t\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n\t\t\t\t\t\t'selectors' => [\n\t\t\t\t\t\t\t'{{WRAPPER}} {{CURRENT_ITEM}}' => 'color: {{VALUE}}'\n\t\t\t\t\t\t],\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t'default' => [\n\t\t\t\t\t[\n\t\t\t\t\t\t'list_title' => esc_html__( 'Title #1', 'textdomain' ),\n\t\t\t\t\t\t'list_content' => esc_html__( 'Item content. Click the edit button to change this text.', 'textdomain' ),\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t'list_title' => esc_html__( 'Title #2', 'textdomain' ),\n\t\t\t\t\t\t'list_content' => esc_html__( 'Item content. Click the edit button to change this text.', 'textdomain' ),\n\t\t\t\t\t],\n\t\t\t\t],\n\t\t\t\t'title_field' => '{{{ list_title }}}',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Controls to Elementor Pro Form Fields\nDESCRIPTION: This code snippet shows how to add custom controls to a form field in Elementor Pro. It injects new field controls into the form widget's field repeater, with conditions to display them only for specific field types and on the field content tab.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-fields/field-controls.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Field extends \\ElementorPro\\Modules\\Forms\\Fields\\Field_Base {\n\n\tpublic function update_controls( $widget ): void {\n\n\t\t$elementor = \\ElementorPro\\Plugin::elementor();\n\n\t\t$control_data = $elementor->controls_manager->get_control_from_stack( $widget->get_unique_name(), 'form_fields' );\n\n\t\tif ( is_wp_error( $control_data ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$field_controls = [\n\t\t\t'first-control' => [\n\t\t\t\t'name' => 'first-control',\n\t\t\t\t'label' => esc_html__( 'First Control', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t\t'condition' => [\n\t\t\t\t\t'field_type' => $this->get_type(),\n\t\t\t\t],\n\t\t\t\t'tab'          => 'content',\n\t\t\t\t'inner_tab'    => 'form_fields_content_tab',\n\t\t\t\t'tabs_wrapper' => 'form_fields_tabs',\n\t\t\t],\n\t\t\t'second-control' => [\n\t\t\t\t'name' => 'second-control',\n\t\t\t\t'label' => esc_html__( 'Second Control', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t\t'condition' => [\n\t\t\t\t\t'field_type' => $this->get_type(),\n\t\t\t\t],\n\t\t\t\t'tab'          => 'content',\n\t\t\t\t'inner_tab'    => 'form_fields_content_tab',\n\t\t\t\t'tabs_wrapper' => 'form_fields_tabs',\n\t\t\t],\n\t\t];\n\n\t\t$control_data['fields'] = $this->inject_field_controls( $control_data['fields'], $field_controls );\n\n\t\t$widget->update_control( 'form_fields', $control_data );\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering New Elementor Controls in PHP\nDESCRIPTION: This function registers new Elementor controls by hooking into the 'elementor/controls/register' action. It requires the control files, creates new instances of the controls, and registers them with the Elementor controls manager.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/managers/registering-controls.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Register new Elementor controls.\n *\n * @param \\Elementor\\Controls_Manager $controls_manager Elementor controls manager.\n * @return void\n */\nfunction register_new_controls( $controls_manager ) {\n\n\trequire_once( __DIR__ . '/controls/control-1.php' );\n\trequire_once( __DIR__ . '/controls/control-2.php' );\n\n\t$controls_manager->register( new \\Elementor_Control_1() );\n\t$controls_manager->register( new \\Elementor_Control_2() );\n\n}\nadd_action( 'elementor/controls/register', 'register_new_controls' );\n```\n\n----------------------------------------\n\nTITLE: Custom Webhook Integration for Elementor Forms\nDESCRIPTION: Implementation of a custom webhook handler to send form data to external API when a new form record is created.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/forms.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction send_custom_webhook( $record, $handler ) {\n\n\t$form_name = $record->get_form_settings( 'form_name' );\n\n\tif ( 'MY_FORM_NAME' !== $form_name ) {\n\t\treturn;\n\t}\n\n\t$raw_fields = $record->get( 'fields' );\n\t$fields = [];\n\tforeach ( $raw_fields as $id => $field ) {\n\t\t$fields[ $id ] = $field['value'];\n\t}\n\n\twp_remote_post(\n\t\t'https://api.example.com/',\n\t\t[\n\t\t\t'body' => $fields,\n\t\t]\n\t);\n}\nadd_action( 'elementor_pro/forms/new_record', 'send_custom_webhook', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Elementor Form Action Class\nDESCRIPTION: Basic class structure for creating a custom form action by extending the Elementor Pro Action_Base class.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-actions/action-structure.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Action extends \\ElementorPro\\Modules\\Forms\\Classes\\Action_Base {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AI Capabilities for Text-Based Controls in Elementor\nDESCRIPTION: This snippet demonstrates how to add AI capabilities to various text-based controls in Elementor, including Text, Textarea, and WYSIWYG controls. It also shows how to customize AI behavior and disable it for specific controls.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/ai.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'title',\n\t[\n\t\t'label' => esc_html__( 'Title', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t]\n);\n\n$this->add_control(\n\t'description',\n\t[\n\t\t'label' => esc_html__( 'Description', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::TEXTAREA,\n\t]\n);\n\n$this->add_control(\n\t'content',\n\t[\n\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::WYSIWYG,\n\t]\n);\n\n$this->add_control(\n\t'subheading',\n\t[\n\t\t'label' => esc_html__( 'Subheading', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::TEXTAREA,\n\t\t'ai' => [\n\t\t\t'type' => 'text',\n\t\t],\n\t]\n);\n\n$this->add_control(\n\t'title-id',\n\t[\n\t\t'label' => esc_html__( 'Title ID', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t'ai' => [\n\t\t\t'active' => false,\n\t\t],\n\t]\n);\n\n$this->add_control(\n\t'unique-control-name',\n\t[\n\t\t'label' => esc_html__( 'Custom Element', 'textdomain' ),\n\t\t'type' => \\My_Addon::CUSTUM_TEXT_CONTROL,\n\t\t'ai' => [\n\t\t\t'active' => true,\n\t\t\t'type' => 'text',\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation for the Emoji One Area Control\nDESCRIPTION: JavaScript file that initializes the Emoji One Area library and integrates it with Elementor's control system. It handles events like changes and emoji selection to save values back to Elementor.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/controls/complex-example.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener( 'elementor/init', () => {\n\n\tconst emojioneareaItemView = elementor.modules.controls.BaseData.extend({\n\t\tonReady() {\n\t\t\tconst self = this,\n\t\t\t\toptions = _.extend({\n\t\t\t\t\tevents: {\n\t\t\t\t\t\tchange: () => self.saveValue(),\n\t\t\t\t\t\temojibtn_click: () => self.saveValue(),\n\t\t\t\t\t\tkeyup: () => self.saveValue()\n\t\t\t\t\t},\n\t\t\t\t\tpickerPosition: 'bottom',\n\t\t\t\t\tfiltersPosition: 'top',\n\t\t\t\t\tsearchPosition: 'bottom',\n\t\t\t\t\tsaveEmojisAs: 'unicode',\n\t\t\t\t\tinline: false,\n\t\t\t\t}, this.model.get( 'emojionearea_options' ) );\n\n\t\t\tthis.ui.textarea.emojioneArea( options );\n\t\t},\n\t\tsaveValue() {\n\t\t\tthis.setValue(this.ui.textarea[0].emojioneArea.getText());\n\t\t},\n\t\tonBeforeDestroy() {\n\t\t\tthis.saveValue();\n\t\t\tthis.ui.textarea[0].emojioneArea.off();\n\t\t}\n\t});\n\n\telementor.addControlView( 'emojionearea', emojioneareaItemView );\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Registering Local Tel Field Plugin\nDESCRIPTION: Main plugin file that removes the default telephone field and registers a new local telephone field. Handles plugin initialization and field registration.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-fields/simple-example.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Elementor Forms Local Tel Field\n * Description: Custom addon that adds a \"local-tel\" field to Elementor Forms Widget.\n * Plugin URI:  https://elementor.com/\n * Version:     1.0.0\n * Author:      Elementor Developer\n * Author URI:  https://developers.elementor.com/\n * Text Domain: elementor-form-local-tel-field\n *\n * Requires Plugins: elementor\n * Elementor tested up to: 3.25.0\n * Elementor Pro tested up to: 3.25.0\n */\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Remove `tel` field from Elementor form widget.\n *\n * @since 1.0.0\n * @param array $fields Elementor form fields.\n * @return array Updated fields list.\n */\nfunction remove_existing_form_field( $fields ) {\n\n\tunset( $fields['tel'] );\n\n\treturn $fields;\n\n}\nadd_filter( 'elementor_pro/forms/field_types', 'remove_existing_form_field' );\n\n/**\n * Add new `local-tel` field to Elementor form widget.\n *\n * @since 1.0.0\n * @param \\ElementorPro\\Modules\\Forms\\Registrars\\Form_Fields_Registrar $form_fields_registrar\n * @return void\n */\nfunction add_new_form_field( $form_fields_registrar ) {\n\n\trequire_once( __DIR__ . '/form-fields/local-tel.php' );\n\n\t$form_fields_registrar->register( new \\Elementor_Local_Tel_Field() );\n\n}\nadd_action( 'elementor_pro/forms/fields/register', 'add_new_form_field' );\n```\n\n----------------------------------------\n\nTITLE: Registering a Random Number Dynamic Tag Plugin for Elementor\nDESCRIPTION: Main plugin file that registers a custom dynamic tag for Elementor. It defines plugin metadata and hooks into the Elementor dynamic tags registration process to include the custom random number tag.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/dynamic-tags/simple-example.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Elementor Random Number Dynamic Tag\n * Description: Add dynamic tag that returns a random number.\n * Plugin URI:  https://elementor.com/\n * Version:     1.0.0\n * Author:      Elementor Developer\n * Author URI:  https://developers.elementor.com/\n * Text Domain: elementor-random-number-dynamic-tag\n *\n * Requires Plugins: elementor\n * Elementor tested up to: 3.25.0\n * Elementor Pro tested up to: 3.25.0\n */\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Register Random Number Dynamic Tag.\n *\n * Include dynamic tag file and register tag class.\n *\n * @since 1.0.0\n * @param \\Elementor\\Core\\DynamicTags\\Manager $dynamic_tags_manager Elementor dynamic tags manager.\n * @return void\n */\nfunction register_random_number_dynamic_tag( $dynamic_tags_manager ) {\n\n\trequire_once( __DIR__ . '/dynamic-tags/random-number-dynamic-tag.php' );\n\n\t$dynamic_tags_manager->register( new \\Elementor_Dynamic_Tag_Random_Number );\n\n}\nadd_action( 'elementor/dynamic_tags/register', 'register_random_number_dynamic_tag' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Performance Optimization Methods in Elementor Widget\nDESCRIPTION: Sample code showing the two performance optimization methods that can be added to an Elementor widget class. The has_widget_inner_wrapper() method controls DOM optimization, while is_dynamic_content() determines if content should be cached.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-optimization.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tpublic function has_widget_inner_wrapper(): bool {}\n\n\tprotected function is_dynamic_content(): bool {}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Scripts and Styles in Elementor Plugin\nDESCRIPTION: Demonstrates how to register and enqueue frontend scripts and styles in an Elementor addon. Includes methods for registering both internal and external dependencies using WordPress enqueue functions.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/addons/initialization.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfinal class Plugin {\n\n\t/**\n\t * Initialize\n\t *\n\t * Load the addons functionality only after Elementor is initialized.\n\t *\n\t * Fired by `elementor/init` action hook.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t */\n\tpublic function init(): void {\n\t\tadd_action( 'elementor/frontend/after_register_styles', [ $this, 'register_frontend_styles' ] );\n\t\tadd_action( 'elementor/frontend/after_register_scripts', [ $this, 'register_frontend_scripts' ] );\n\n\t\tadd_action( 'elementor/frontend/after_enqueue_styles', [ $this, 'enqueue_frontend_styles' ] );\n\t\tadd_action( 'elementor/frontend/after_enqueue_scripts', [ $this, 'enqueue_frontend_scripts' ] );\n\t}\n\n\tpublic function register_frontend_styles(): void {\n\t\twp_register_style( 'frontend-style-1', plugins_url( 'assets/css/frontend-style-1.css', __FILE__ ) );\n\t\twp_register_style( 'frontend-style-2', plugins_url( 'assets/css/frontend-style-2.css', __FILE__ ), [ 'external-framework' ] );\n\t\twp_register_style( 'external-framework', plugins_url( 'assets/css/libs/external-framework.css', __FILE__ ) );\n\t}\n\n\tpublic function register_frontend_scripts(): void {\n\t\twp_register_script( 'frontend-script-1', plugins_url( 'assets/js/frontend-script-1.js', __FILE__ ) );\n\t\twp_register_script( 'frontend-script-2', plugins_url( 'assets/js/frontend-script-2.js', __FILE__ ), [ 'external-library' ] );\n\t\twp_register_script( 'external-library', plugins_url( 'assets/js/libs/external-library.js', __FILE__ ) );\n\t}\n\n\tpublic function enqueue_frontend_styles(): void {\n\t\twp_enqueue_style( 'frontend-style-1' );\n\t\twp_enqueue_style( 'frontend-style-2' );\n\t}\n\n\tpublic function enqueue_frontend_scripts(): void {\n\t\twp_enqueue_script( 'frontend-script-1' );\n\t\twp_enqueue_script( 'frontend-script-2' );\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Control Methods in Elementor\nDESCRIPTION: Minimal implementation of a custom control with only the required methods: get_type() to define the control's unique identifier and content_template() to render the control's HTML.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/controls/control-structure.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Control extends \\Elementor\\Base_Control {\n\n\tpublic function get_type(): string {}\n\n\tpublic function content_template(): void {}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Controls in Elementor using PHP\nDESCRIPTION: This code demonstrates how to hook into the 'elementor/controls/register' action to register new custom controls in Elementor. It requires control class files, creates instances of those control classes, and registers them with the controls manager.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/controls/add-new-control.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction register_new_controls( $controls_manager ) {\n\n\trequire_once( __DIR__ . '/controls/control-1.php' );\n\trequire_once( __DIR__ . '/controls/control-2.php' );\n\n\t$controls_manager->register( new \\Elementor_Control_1() );\n\t$controls_manager->register( new \\Elementor_Control_2() );\n\n}\nadd_action( 'elementor/controls/register', 'register_new_controls' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Slider Control in Elementor Widget\nDESCRIPTION: Example showing how to implement a slider control in an Elementor widget class, including control registration, rendering, and template definition. The control includes customizable units, ranges, and default values.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-slider.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'width',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Width', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::SLIDER,\n\t\t\t\t'size_units' => [ 'px', '%', 'em', 'rem', 'custom' ],\n\t\t\t\t'range' => [\n\t\t\t\t\t'px' => [\n\t\t\t\t\t\t'min' => 0,\n\t\t\t\t\t\t'max' => 1000,\n\t\t\t\t\t\t'step' => 5,\n\t\t\t\t\t],\n\t\t\t\t\t'%' => [\n\t\t\t\t\t\t'min' => 0,\n\t\t\t\t\t\t'max' => 100,\n\t\t\t\t\t],\n\t\t\t\t],\n\t\t\t\t'default' => [\n\t\t\t\t\t'unit' => '%',\n\t\t\t\t\t'size' => 50,\n\t\t\t\t],\n\t\t\t\t'selectors' => [\n\t\t\t\t\t'{{WRAPPER}} .your-class' => 'width: {{SIZE}}{{UNIT}};',\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Widget Categories in Elementor (PHP)\nDESCRIPTION: This code snippet shows how to register new widget categories in Elementor. It uses the 'elementor/elements/categories_registered' action to add two new categories: 'First Category' and 'Second Category'. Each category is given a name, title, and icon.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/widget-categories.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction add_elementor_widget_categories( $elements_manager ) {\n\n\t$elements_manager->add_category(\n\t\t'first-category',\n\t\t[\n\t\t\t'title' => esc_html__( 'First Category', 'textdomain' ),\n\t\t\t'icon' => 'fa fa-plug',\n\t\t]\n\t);\n\t$elements_manager->add_category(\n\t\t'second-category',\n\t\t[\n\t\t\t'title' => esc_html__( 'Second Category', 'textdomain' ),\n\t\t\t'icon' => 'fa fa-plug',\n\t\t]\n\t);\n\n}\nadd_action( 'elementor/elements/categories_registered', 'add_elementor_widget_categories' );\n```\n\n----------------------------------------\n\nTITLE: Extending Dynamic Tags in PHP for Elementor\nDESCRIPTION: This snippet demonstrates how to extend the Elementor dynamic tags control to create a custom dynamic tag. It inherits methods from the \\Elementor\\Core\\DynamicTags\\Tag class.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/dynamic-tags/dynamic-tags-structure.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Tag extends \\Elementor\\Core\\DynamicTags\\Tag {\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Basic Responsive Control in Elementor (PHP)\nDESCRIPTION: Demonstrates the basic structure for adding a responsive control to an Elementor widget. This example uses a slider control type.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/responsive-control.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->add_responsive_control(\n\t'control-name',\n\t[\n\t\t'label' => esc_html__( 'Spacing', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::SLIDER,\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Complete Legacy Widget Implementation Example in PHP\nDESCRIPTION: Full example of a legacy widget implementation maintaining backward compatibility with styling dependencies.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-inner-wrapper.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tpublic function has_widget_inner_wrapper(): bool {\n\t\treturn true;\n\t}\n\n\tprotected function register_controls(): void {\n\n\t\t$this->add_control(\n\t\t\t'color',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Color', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n\t\t\t\t'selectors' => [\n\t\t\t\t\t'{{WRAPPER}} > .elementor-widget-container h3' => 'color: {{VALUE}};',\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\t}\n\n\tprotected function render(): void {\n\t\t?>\n\t\t<h3>\n\t\t\t...\n\t\t</h3>\n\t\t<?php\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Choose Control in an Elementor Widget\nDESCRIPTION: Example of how to use the Choose Control in an Elementor widget to create a text alignment selector with left, center, and right options. The control is added to the Style tab and includes selectors for CSS application.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-choose.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'style_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'text_align',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Alignment', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::CHOOSE,\n\t\t\t\t'options' => [\n\t\t\t\t\t'left' => [\n\t\t\t\t\t\t'title' => esc_html__( 'Left', 'textdomain' ),\n\t\t\t\t\t\t'icon' => 'eicon-text-align-left',\n\t\t\t\t\t],\n\t\t\t\t\t'center' => [\n\t\t\t\t\t\t'title' => esc_html__( 'Center', 'textdomain' ),\n\t\t\t\t\t\t'icon' => 'eicon-text-align-center',\n\t\t\t\t\t],\n\t\t\t\t\t'right' => [\n\t\t\t\t\t\t'title' => esc_html__( 'Right', 'textdomain' ),\n\t\t\t\t\t\t'icon' => 'eicon-text-align-right',\n\t\t\t\t\t],\n\t\t\t\t],\n\t\t\t\t'default' => 'center',\n\t\t\t\t'toggle' => true,\n\t\t\t\t'selectors' => [\n\t\t\t\t\t'{{WRAPPER}} .your-class' => 'text-align: {{VALUE}};',\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Context Menu in Elementor with JavaScript\nDESCRIPTION: JavaScript implementation that adds custom links to the Elementor context menu. It uses Elementor hooks to filter the context menu groups, adding a new group with two links that open the Elementor website and Developers Documentation in a new tab. The custom group is only added to widget elements.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/simple-example.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener( 'elementor/init', () => {\n\n\telementor.hooks.addFilter( 'elements/context-menu/groups', ( customGroups, elementType ) => {\n\n\t\tconst newGroup = {\n\t\t\tname: 'elementor-links-group',\n\t\t\tactions: [\n\t\t\t\t{\n\t\t\t\t\tname: 'elementor-link',\n\t\t\t\t\ticon: 'eicon-link',\n\t\t\t\t\ttitle: 'Elementor.com',\n\t\t\t\t\tisEnabled: () => true,\n\t\t\t\t\tcallback: () => window.open( 'https://elementor.com/', '_blank' ).focus(),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'elementor-developers-link',\n\t\t\t\t\ticon: 'eicon-link',\n\t\t\t\t\ttitle: 'Developers Docs',\n\t\t\t\t\tisEnabled: () => true,\n\t\t\t\t\tcallback: () => window.open( 'https://developers.elementor.com/', '_blank' ).focus(),\n\t\t\t\t}\n\t\t\t],\n\t\t}\n\n\t\tif ( 'widget' === elementType ) {\n\t\t\tcustomGroups.push( newGroup );\n\t\t}\n\n\t\treturn customGroups;\n\n\t} );\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Theme Condition Structure in PHP for Elementor Pro\nDESCRIPTION: Demonstrates the complete structure of a custom condition class for Elementor Pro's Theme Builder. It includes all necessary methods such as get_type(), get_priority(), get_name(), get_label(), get_all_label(), register_sub_conditions(), and check().\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/theme-conditions/condition-structure.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Condition extends \\ElementorPro\\Modules\\ThemeBuilder\\Conditions\\Condition_Base {\n\n\tpublic static function get_type(): string {}\n\n\tpublic function get_priority(): int {}\n\n\tpublic function get_name(): string {}\n\n\tpublic function get_label(): string {}\n\n\tpublic function get_all_label(): string {}\n\n\tpublic function register_sub_conditions(): void {}\n\n\tpublic function check( $args ): bool {}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Elementor Addon Core Plugin Class\nDESCRIPTION: The main plugin class using the Singleton pattern that handles compatibility checks, initializes the addon, and registers widgets and controls. Includes version requirements and admin notices for dependencies.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/addons/addon-example.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace Elementor_Test_Addon;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Plugin class.\n *\n * The main class that initiates and runs the addon.\n *\n * @since 1.0.0\n */\nfinal class Plugin {\n\n\t/**\n\t * Addon Version\n\t *\n\t * @since 1.0.0\n\t * @var string The addon version.\n\t */\n\tconst VERSION = '1.0.0';\n\n\t/**\n\t * Minimum Elementor Version\n\t *\n\t * @since 1.0.0\n\t * @var string Minimum Elementor version required to run the addon.\n\t */\n\tconst MINIMUM_ELEMENTOR_VERSION = '3.20.0';\n\n\t/**\n\t * Minimum PHP Version\n\t *\n\t * @since 1.0.0\n\t * @var string Minimum PHP version required to run the addon.\n\t */\n\tconst MINIMUM_PHP_VERSION = '7.4';\n\n\t/**\n\t * Instance\n\t *\n\t * @since 1.0.0\n\t * @access private\n\t * @static\n\t * @var \\Elementor_Test_Addon\\Plugin The single instance of the class.\n\t */\n\tprivate static $_instance = null;\n\n\t/**\n\t * Instance\n\t *\n\t * Ensures only one instance of the class is loaded or can be loaded.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @static\n\t * @return \\Elementor_Test_Addon\\Plugin An instance of the class.\n\t */\n\tpublic static function instance() {\n\n\t\tif ( is_null( self::$_instance ) ) {\n\t\t\tself::$_instance = new self();\n\t\t}\n\t\treturn self::$_instance;\n\n\t}\n\n\t/**\n\t * Constructor\n\t *\n\t * Perform some compatibility checks to make sure basic requirements are meet.\n\t * If all compatibility checks pass, initialize the functionality.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t */\n\tpublic function __construct() {\n\n\t\tif ( $this->is_compatible() ) {\n\t\t\tadd_action( 'elementor/init', [ $this, 'init' ] );\n\t\t}\n\n\t}\n\n\t/**\n\t * Compatibility Checks\n\t *\n\t * Checks whether the site meets the addon requirement.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t */\n\tpublic function is_compatible(): void {\n\n\t\t// Check if Elementor installed and activated\n\t\tif ( ! did_action( 'elementor/loaded' ) ) {\n\t\t\tadd_action( 'admin_notices', [ $this, 'admin_notice_missing_main_plugin' ] );\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check for required Elementor version\n\t\tif ( ! version_compare( ELEMENTOR_VERSION, self::MINIMUM_ELEMENTOR_VERSION, '>=' ) ) {\n\t\t\tadd_action( 'admin_notices', [ $this, 'admin_notice_minimum_elementor_version' ] );\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check for required PHP version\n\t\tif ( version_compare( PHP_VERSION, self::MINIMUM_PHP_VERSION, '<' ) ) {\n\t\t\tadd_action( 'admin_notices', [ $this, 'admin_notice_minimum_php_version' ] );\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Admin notice\n\t *\n\t * Warning when the site doesn't have Elementor installed or activated.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t */\n\tpublic function admin_notice_missing_main_plugin(): void {\n\n\t\tif ( isset( $_GET['activate'] ) ) unset( $_GET['activate'] );\n\n\t\t$message = sprintf(\n\t\t\t/* translators: 1: Plugin name 2: Elementor */\n\t\t\tesc_html__( '\"%1$s\" requires \"%2$s\" to be installed and activated.', 'elementor-test-addon' ),\n\t\t\t'<strong>' . esc_html__( 'Elementor Test Addon', 'elementor-test-addon' ) . '</strong>',\n\t\t\t'<strong>' . esc_html__( 'Elementor', 'elementor-test-addon' ) . '</strong>'\n\t\t);\n\n\t\tprintf( '<div class=\"notice notice-warning is-dismissible\"><p>%1$s</p></div>', $message );\n\n\t}\n\n\t/**\n\t * Admin notice\n\t *\n\t * Warning when the site doesn't have a minimum required Elementor version.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t */\n\tpublic function admin_notice_minimum_elementor_version(): void {\n\n\t\tif ( isset( $_GET['activate'] ) ) unset( $_GET['activate'] );\n\n\t\t$message = sprintf(\n\t\t\t/* translators: 1: Plugin name 2: Elementor 3: Required Elementor version */\n\t\t\tesc_html__( '\"%1$s\" requires \"%2$s\" version %3$s or greater.', 'elementor-test-addon' ),\n\t\t\t'<strong>' . esc_html__( 'Elementor Test Addon', 'elementor-test-addon' ) . '</strong>',\n\t\t\t'<strong>' . esc_html__( 'Elementor', 'elementor-test-addon' ) . '</strong>',\n\t\t\t self::MINIMUM_ELEMENTOR_VERSION\n\t\t);\n\n\t\tprintf( '<div class=\"notice notice-warning is-dismissible\"><p>%1$s</p></div>', $message );\n\n\t}\n\n\t/**\n\t * Admin notice\n\t *\n\t * Warning when the site doesn't have a minimum required PHP version.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t */\n\tpublic function admin_notice_minimum_php_version(): void {\n\n\t\tif ( isset( $_GET['activate'] ) ) unset( $_GET['activate'] );\n\n\t\t$message = sprintf(\n\t\t\t/* translators: 1: Plugin name 2: PHP 3: Required PHP version */\n\t\t\tesc_html__( '\"%1$s\" requires \"%2$s\" version %3$s or greater.', 'elementor-test-addon' ),\n\t\t\t'<strong>' . esc_html__( 'Elementor Test Addon', 'elementor-test-addon' ) . '</strong>',\n\t\t\t'<strong>' . esc_html__( 'PHP', 'elementor-test-addon' ) . '</strong>',\n\t\t\t self::MINIMUM_PHP_VERSION\n\t\t);\n\n\t\tprintf( '<div class=\"notice notice-warning is-dismissible\"><p>%1$s</p></div>', $message );\n\n\t}\n\n\t/**\n\t * Initialize\n\t *\n\t * Load the addons functionality only after Elementor is initialized.\n\t *\n\t * Fired by `elementor/init` action hook.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t */\n\tpublic function init(): void {\n\n\t\tadd_action( 'elementor/widgets/register', [ $this, 'register_widgets' ] );\n\t\tadd_action( 'elementor/controls/register', [ $this, 'register_controls' ] );\n\n\t}\n\n\t/**\n\t * Register Widgets\n\t *\n\t * Load widgets files and register new Elementor widgets.\n\t *\n\t * Fired by `elementor/widgets/register` action hook.\n\t *\n\t * @param \\Elementor\\Widgets_Manager $widgets_manager Elementor widgets manager.\n\t */\n\tpublic function register_widgets( $widgets_manager ): void {\n\n\t\trequire_once( __DIR__ . '/includes/widgets/widget-1.php' );\n\t\trequire_once( __DIR__ . '/includes/widgets/widget-2.php' );\n\n\t\t$widgets_manager->register( new Widget_1() );\n\t\t$widgets_manager->register( new Widget_2() );\n\n\t}\n\n\t/**\n\t * Register Controls\n\t *\n\t * Load controls files and register new Elementor controls.\n\t *\n\t * Fired by `elementor/controls/register` action hook.\n\t *\n\t * @param \\Elementor\\Controls_Manager $controls_manager Elementor controls manager.\n\t */\n\tpublic function register_controls( $controls_manager ): void {\n\n\t\trequire_once( __DIR__ . '/includes/controls/control-1.php' );\n\t\trequire_once( __DIR__ . '/includes/controls/control-2.php' );\n\n\t\t$controls_manager->register( new Control_1() );\n\t\t$controls_manager->register( new Control_2() );\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Credit Card Field Class in PHP\nDESCRIPTION: Class implementation for the credit card field type, including field rendering, validation, control customization, and editor preview functionality.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-fields/advanced-example.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Elementor Form Field - Credit Card Number\n *\n * Add a new \"Credit Card Number\" field to Elementor form widget.\n *\n * @since 1.0.0\n */\nclass Elementor_Credit_Card_Number_Field extends \\ElementorPro\\Modules\\Forms\\Fields\\Field_Base {\n\n\t/**\n\t * Get field type.\n\t *\n\t * Retrieve credit card number field unique ID.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Field type.\n\t */\n\tpublic function get_type(): string {\n\t\treturn 'credit-card-number';\n\t}\n\n\t/**\n\t * Get field name.\n\t *\n\t * Retrieve credit card number field label.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Field name.\n\t */\n\tpublic function get_name(): string {\n\t\treturn esc_html__( 'Credit Card Number', 'elementor-form-credit-card-number-field' );\n\t}\n\n\t/**\n\t * Render field output on the frontend.\n\t *\n\t * Written in PHP and used to generate the final HTML.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @param mixed $item\n\t * @param mixed $item_index\n\t * @param mixed $form\n\t * @return void\n\t */\n\tpublic function render( $item, $item_index, $form ): void {\n\t\t$form_id = $form->get_id();\n\n\t\t$form->add_render_attribute(\n\t\t\t'input' . $item_index,\n\t\t\t[\n\t\t\t\t'class' => 'elementor-field-textual',\n\t\t\t\t'for' => $form_id . $item_index,\n\t\t\t\t'type' => 'tel',\n\t\t\t\t'inputmode' => 'numeric',\n\t\t\t\t'maxlength' => '19',\n\t\t\t\t'pattern' => '[0-9]{4}\\s[0-9]{4}\\s[0-9]{4}\\s[0-9]{4}',\n\t\t\t\t'placeholder' => $item['credit-card-placeholder'],\n\t\t\t\t'autocomplete' => 'cc-number',\n\t\t\t]\n\t\t);\n\n\t\techo '<input ' . $form->get_render_attribute_string( 'input' . $item_index ) . '>';\n\t}\n\n\t/**\n\t * Field validation.\n\t *\n\t * Validate credit card number field value to ensure it complies to certain rules.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @param \\ElementorPro\\Modules\\Forms\\Classes\\Field_Base   $field\n\t * @param \\ElementorPro\\Modules\\Forms\\Classes\\Form_Record  $record\n\t * @param \\ElementorPro\\Modules\\Forms\\Classes\\Ajax_Handler $ajax_handler\n\t * @return void\n\t */\n\tpublic function validation( $field, $record, $ajax_handler ): void {\n\t\tif ( empty( $field['value'] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( preg_match( '/^[0-9]{4}\\s[0-9]{4}\\s[0-9]{4}\\s[0-9]{4}$/', $field['value'] ) !== 1 ) {\n\t\t\t$ajax_handler->add_error(\n\t\t\t\t$field['id'],\n\t\t\t\tesc_html__( 'Credit card number must be in \"XXXX XXXX XXXX XXXX\" format.', 'elementor-form-credit-card-number-field' )\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Update form widget controls.\n\t *\n\t * Add input fields to allow the user to customize the credit card number field.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @param \\Elementor\\Widget_Base $widget The form widget instance.\n\t * @return void\n\t */\n\tpublic function update_controls( $widget ): void {\n\t\t$elementor = \\ElementorPro\\Plugin::elementor();\n\n\t\t$control_data = $elementor->controls_manager->get_control_from_stack( $widget->get_unique_name(), 'form_fields' );\n\n\t\tif ( is_wp_error( $control_data ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$field_controls = [\n\t\t\t'credit-card-placeholder' => [\n\t\t\t\t'name' => 'credit-card-placeholder',\n\t\t\t\t'label' => esc_html__( 'Card Placeholder', 'elementor-form-credit-card-number-field' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t\t'default' => 'xxxx xxxx xxxx xxxx',\n\t\t\t\t'dynamic' => [\n\t\t\t\t\t'active' => true,\n\t\t\t\t],\n\t\t\t\t'condition' => [\n\t\t\t\t\t'field_type' => $this->get_type(),\n\t\t\t\t],\n\t\t\t\t'tab'          => 'content',\n\t\t\t\t'inner_tab'    => 'form_fields_content_tab',\n\t\t\t\t'tabs_wrapper' => 'form_fields_tabs',\n\t\t\t],\n\t\t];\n\n\t\t$control_data['fields'] = $this->inject_field_controls( $control_data['fields'], $field_controls );\n\n\t\t$widget->update_control( 'form_fields', $control_data );\n\t}\n\n\t/**\n\t * Field constructor.\n\t *\n\t * Used to add a script to the Elementor editor preview.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return void\n\t */\n\tpublic function __construct() {\n\t\tparent::__construct();\n\t\tadd_action( 'elementor/preview/init', [ $this, 'editor_preview_footer' ] );\n\t}\n\n\t/**\n\t * Elementor editor preview.\n\t *\n\t * Add a script to the footer of the editor preview screen.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return void\n\t */\n\tpublic function editor_preview_footer(): void {\n\t\tadd_action( 'wp_footer', [ $this, 'content_template_script' ] );\n\t}\n\n\t/**\n\t * Content template script.\n\t *\n\t * Add content template alternative, to display the field in Elementor editor.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return void\n\t */\n\tpublic function content_template_script(): void {\n\t\t?>\n\t\t<script>\n\t\tjQuery( document ).ready( () => {\n\n\t\t\telementor.hooks.addFilter(\n\t\t\t\t'elementor_pro/forms/content_template/field/<?php echo $this->get_type(); ?>',\n\t\t\t\tfunction ( inputField, item, i ) {\n\t\t\t\t\tconst fieldType    = 'tel';\n\t\t\t\t\tconst fieldId      = `form_field_${i}`;\n\t\t\t\t\tconst fieldClass   = `elementor-field-textual elementor-field ${item.css_classes}`;\n\t\t\t\t\tconst inputmode    = 'numeric';\n\t\t\t\t\tconst maxlength    = '19';\n\t\t\t\t\tconst pattern      = '[0-9\\s]{19}';\n\t\t\t\t\tconst placeholder  = item['credit-card-placeholder'];\n\t\t\t\t\tconst autocomplete = 'cc-number';\n\n\t\t\t\t\treturn `<input type=\"${fieldType}\" id=\"${fieldId}\" class=\"${fieldClass}\" inputmode=\"${inputmode}\" maxlength=\"${maxlength}\" pattern=\"${pattern}\" placeholder=\"${placeholder}\" autocomplete=\"${autocomplete}\">`;\n\t\t\t\t}, 10, 3\n\t\t\t);\n\n\t\t});\n\t\t</script>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Media Control in Elementor Widget\nDESCRIPTION: Demonstrates how to add and render an image media control in an Elementor widget. Includes examples of different image rendering methods including basic URL output, thumbnail generation, and advanced HTML attribute handling.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-media.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'image',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Choose Image', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::MEDIA,\n\t\t\t\t'default' => [\n\t\t\t\t\t'url' => \\Elementor\\Utils::get_placeholder_image_src(),\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\n\t\tif ( empty( $settings['image']['url'] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get image URL\n\t\techo '<img src=\"' . $settings['image']['url'] . '\">';\n\n\t\t// Get image 'thumbnail' by ID\n\t\techo wp_get_attachment_image( $settings['image']['id'], 'thumbnail' );\n\n\t\t// Get image HTML\n\t\t$this->add_render_attribute( 'image', 'src', $settings['image']['url'] );\n\t\t$this->add_render_attribute( 'image', 'alt', \\Elementor\\Control_Media::get_image_alt( $settings['image'] ) );\n\t\t$this->add_render_attribute( 'image', 'title', \\Elementor\\Control_Media::get_image_title( $settings['image'] ) );\n\t\t$this->add_render_attribute( 'image', 'class', 'my-custom-class' );\n\t\techo \\Elementor\\Group_Control_Image_Size::get_attachment_image_html( $settings, 'thumbnail', 'image' );\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Elementor Addon File Structure\nDESCRIPTION: Shows the minimal required file structure for an Elementor addon, consisting of just the main plugin file.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/addons/file-folder-structure.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nelementor-test-addon/\n|\n└─ elementor-test-addon.php\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Widget Categories in PHP\nDESCRIPTION: Demonstrates how to register new widget categories in Elementor using the elementor/elements/categories_registered action hook. The example shows creating two categories with custom titles and icons.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-categories.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction add_elementor_widget_categories( $elements_manager ) {\n\n\t$elements_manager->add_category(\n\t\t'first-category',\n\t\t[\n\t\t\t'title' => esc_html__( 'First Category', 'textdomain' ),\n\t\t\t'icon' => 'fa fa-plug',\n\t\t]\n\t);\n\t$elements_manager->add_category(\n\t\t'second-category',\n\t\t[\n\t\t\t'title' => esc_html__( 'Second Category', 'textdomain' ),\n\t\t\t'icon' => 'fa fa-plug',\n\t\t]\n\t);\n\n}\nadd_action( 'elementor/elements/categories_registered', 'add_elementor_widget_categories' );\n```\n\n----------------------------------------\n\nTITLE: Registering Controls in Elementor Widget Class\nDESCRIPTION: This snippet demonstrates how to register controls inside the register_controls() method of an Elementor widget class. It shows the basic structure for adding different types of controls within a control section.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/using-controls.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section();\n\n\t\t$this->add_control();\n\n\t\t$this->add_responsive_control();\n\n\t\t$this->add_group_control();\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Widgets in Elementor using PHP\nDESCRIPTION: This PHP function hooks into Elementor's widget registration system to register new custom widgets. It requires the widget class files to be included and then registers each widget with Elementor's widget manager.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/managers/registering-widgets.md#2025-04-20_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * Register new Elementor widgets.\n *\n * @param \\Elementor\\Widgets_Manager $widgets_manager Elementor widgets manager.\n * @return void\n */\nfunction register_new_widgets( $widgets_manager ) {\n\n\trequire_once( __DIR__ . '/widgets/widget-1.php' );\n\trequire_once( __DIR__ . '/widgets/widget-2.php' );\n\n\t$widgets_manager->register( new \\Elementor_Widget_1() );\n\t$widgets_manager->register( new \\Elementor_Widget_2() );\n\n}\nadd_action( 'elementor/widgets/register', 'register_new_widgets' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Time Control in Elementor Widget\nDESCRIPTION: This code demonstrates how to implement the Date Time Control in an Elementor widget. It shows the complete widget class with three key methods: register_controls() to add the date time control, render() to display the output on the frontend, and content_template() for the editor preview.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-date-time.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'due_date',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Due Date', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::DATE_TIME,\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\n\t\tif ( empty( $settings['due_date'] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$due_date = strtotime( $settings['due_date'] );\n\t\t$due_date_in_days = $due_date / DAY_IN_SECONDS;\n\t\t?>\n\t\t<p><?php printf( esc_html__( 'Something will happen in %s days.', 'textdomain' ), $due_date_in_days ); ?></p>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<#\n\t\tif ( '' === settings.due_date ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst due_date = new Date( settings.due_date );\n\t\tconst now_date = new Date();\n\t\tconst due_date_in_days = Math.floor( ( due_date - now_date ) / 86400000 ); // 86400000 milliseconds in one Day.\n\t\t#>\n\t\t<p> Something will happen in {{{ due_date_in_days }}} days. </p>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Currency Control Class for Elementor\nDESCRIPTION: This PHP class extends Elementor's Base_Data_Control to create a custom currency control. It defines the control type, available currencies, default settings, and renders the control's HTML template.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/controls/simple-example.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Elementor currency control.\n *\n * A control for displaying a select field with the ability to choose currencies.\n *\n * @since 1.0.0\n */\nclass Elementor_Currency_Control extends \\Elementor\\Base_Data_Control {\n\n\t/**\n\t * Get currency control type.\n\t *\n\t * Retrieve the control type, in this case `currency`.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Control type.\n\t */\n\tpublic function get_type(): string {\n\t\treturn 'currency';\n\t}\n\n\t/**\n\t * Get currencies.\n\t *\n\t * Retrieve all the available currencies.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @static\n\t * @return array Available currencies.\n\t */\n\tpublic static function get_currencies(): array {\n\t\treturn [\n\t\t\t'USD' => 'USD ($)',\n\t\t\t'EUR' => 'EUR (€)',\n\t\t\t'GBP' => 'GBP (£)',\n\t\t\t'JPY' => 'JPY (¥)',\n\t\t\t'ILS' => 'ILS (₪)',\n\t\t];\n\t}\n\n\t/**\n\t * Get currency control default settings.\n\t *\n\t * Retrieve the default settings of the currency control. Used to return\n\t * the default settings while initializing the currency control.\n\t *\n\t * @since 1.0.0\n\t * @access protected\n\t * @return array Currency control default settings.\n\t */\n\tprotected function get_default_settings(): array {\n\t\treturn [\n\t\t\t'currencies' => self::get_currencies()\n\t\t];\n\t}\n\n\t/**\n\t * Get currency control default value.\n\t *\n\t * Retrieve the default value of the currency control. Used to return the\n\t * default value while initializing the control.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return array Currency control default value.\n\t */\n\tpublic function get_default_value(): string {\n\t\treturn 'EUR';\n\t}\n\n\t/**\n\t * Render currency control output in the editor.\n\t *\n\t * Used to generate the control HTML in the editor using Underscore JS\n\t * template. The variables for the class are available using `data` JS\n\t * object.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t */\n\tpublic function content_template(): void {\n\t\t$control_uid = $this->get_control_uid();\n\t\t?>\n\t\t<div class=\"elementor-control-field\">\n\n\t\t\t<# if ( data.label ) {#>\n\t\t\t<label for=\"<?php echo $control_uid; ?>\" class=\"elementor-control-title\">{{{ data.label }}}</label>\n\t\t\t<# } #>\n\n\t\t\t<div class=\"elementor-control-input-wrapper\">\n\t\t\t\t<select id=\"<?php echo $control_uid; ?>\" data-setting=\"{{ data.name }}\">\n\t\t\t\t\t<option value=\"\"><?php echo esc_html__( 'Select currency', 'elementor-currency-control' ); ?></option>\n\t\t\t\t\t<# _.each( data.currencies, function( currency_label, currency_value ) { #>\n\t\t\t\t\t<option value=\"{{ currency_value }}\">{{{ currency_label }}}</option>\n\t\t\t\t\t<# } ); #>\n\t\t\t\t</select>\n\t\t\t</div>\n\n\t\t</div>\n\n\t\t<# if ( data.description ) { #>\n\t\t<div class=\"elementor-control-field-description\">{{{ data.description }}}</div>\n\t\t<# } #>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Control in Elementor Widget\nDESCRIPTION: This snippet demonstrates how to use the Text Control in an Elementor widget. It shows the registration of the control, rendering the widget output, and creating a JavaScript template.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-text.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'widget_title',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Title', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t\t'default' => esc_html__( 'Default title', 'textdomain' ),\n\t\t\t\t'placeholder' => esc_html__( 'Type your title here', 'textdomain' ),\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\n\t\tif ( empty( $settings['widget_title'] ) ) {\n\t\t\treturn;\n\t\t}\n\t\t?>\n\t\t<h2 class=\"title\">\n\t\t\t<?php echo $settings['widget_title']; ?>\n\t\t</h2>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<#\n\t\tif ( '' === settings.widget_title ) {\n\t\t\treturn;\n\t\t}\n\t\t#>\n\t\t<h2 class=\"title\">\n\t\t\t{{{ settings.widget_title }}}\n\t\t</h2>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Responsive Dimensions Control in Elementor (PHP)\nDESCRIPTION: Demonstrates how to implement a responsive dimensions control in an Elementor widget. This control allows users to set different padding values for various screen sizes.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/responsive-control.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'style_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style Section', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_responsive_control(\n\t\t\t'title_padding',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::DIMENSIONS,\n\t\t\t\t'label' => esc_html__( 'Padding', 'textdomain' ),\n\t\t\t\t'size_units' => [ 'px', '%', 'em', 'rem', 'custom' ],\n\t\t\t\t'selectors' => [\n\t\t\t\t\t'{{WRAPPER}} .widget-title' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Modified WordPress Header Template\nDESCRIPTION: Updated header.php template that implements the Elementor header location hook while maintaining standard WordPress header structure.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/migrating-themes-with-hooks.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<!doctype html>\n<html <?php language_attributes(); ?>>\n<head>\n\t<meta charset=\"<?php bloginfo( 'charset' ); ?>\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\t<link rel=\"profile\" href=\"http://gmpg.org/xfn/11\">\n\t<?php wp_head(); ?>\n</head>\n<body <?php body_class(); ?>>\n\n<?php do_action( 'theme_prefix_header' ); ?>\n```\n\n----------------------------------------\n\nTITLE: Creating Control Tabs Structure in Elementor PHP\nDESCRIPTION: This snippet demonstrates the basic structure for creating control tabs in Elementor. It shows how to start and end control tabs, as well as how to create inner tabs with labels.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-tabs.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->start_controls_tabs(\n\t'style_tabs'\n);\n\n$this->start_controls_tab(\n\t'style_normal_tab',\n\t[\n\t\t'label' => esc_html__( 'Normal', 'textdomain' ),\n\t]\n);\n\n$this->end_controls_tab();\n\n$this->end_controls_tabs();\n```\n\n----------------------------------------\n\nTITLE: Complete Global Style Implementation Example\nDESCRIPTION: Comprehensive example showing how to implement global styles for various elements including headings, sub-headings, and content. Demonstrates both color and typography controls with global style inheritance.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/global-style.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'heading_color',\n\t[\n\t\t'label' => esc_html__( 'Heading Color', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n\t\t'selectors' => [\n\t\t\t'{{WRAPPER}} .heading-class' => 'color: {{VALUE}};',\n\t\t],\n\t\t'global' => [\n\t\t\t'default' => \\Elementor\\Core\\Kits\\Documents\\Tabs\\Global_Colors::COLOR_PRIMARY,\n\t\t],\n\t]\n);\n\n$this->add_control(\n\t'sub_heading_color',\n\t[\n\t\t'label' => esc_html__( 'Sub Heading Color', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n\t\t'selectors' => [\n\t\t\t'{{WRAPPER}} .sub-heading-class' => 'color: {{VALUE}};',\n\t\t],\n\t\t'global' => [\n\t\t\t'default' => \\Elementor\\Core\\Kits\\Documents\\Tabs\\Global_Colors::COLOR_SECONDARY,\n\t\t],\n\t]\n);\n\n$this->add_control(\n\t'content_color',\n\t[\n\t\t'label' => esc_html__( 'Content Color', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n\t\t'selectors' => [\n\t\t\t'{{WRAPPER}} .content-class' => 'color: {{VALUE}};',\n\t\t],\n\t\t'global' => [\n\t\t\t'default' => \\Elementor\\Core\\Kits\\Documents\\Tabs\\Global_Colors::COLOR_TEXT,\n\t\t],\n\t]\n);\n\n$this->add_group_control(\n\t\\Elementor\\Group_Control_Typography::get_type(),\n\t[\n\t\t'name' => 'heading_typography',\n\t\t'selector' => '{{WRAPPER}} .heading-class',\n\t\t'global' => [\n\t\t\t'default' => \\Elementor\\Core\\Kits\\Documents\\Tabs\\Global_Typography::TYPOGRAPHY_PRIMARY,\n\t\t],\n\t]\n);\n\n$this->add_group_control(\n\t\\Elementor\\Group_Control_Typography::get_type(),\n\t[\n\t\t'name' => 'sub_heading_typography',\n\t\t'selector' => '{{WRAPPER}} .sub_heading-class',\n\t\t'global' => [\n\t\t\t'default' => \\Elementor\\Core\\Kits\\Documents\\Tabs\\Global_Typography::TYPOGRAPHY_SECONDARY,\n\t\t],\n\t]\n);\n\n$this->add_group_control(\n\t\\Elementor\\Group_Control_Typography::get_type(),\n\t[\n\t\t'name' => 'content_typography',\n\t\t'selector' => '{{WRAPPER}} .content-class',\n\t\t'global' => [\n\t\t\t'default' => \\Elementor\\Core\\Kits\\Documents\\Tabs\\Global_Typography::TYPOGRAPHY_TEXT,\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Exit Animation Control in Elementor Widget\nDESCRIPTION: Complete example of implementing an exit animation control in an Elementor widget class. Shows how to register the control, render the animation class in both PHP and JavaScript templates, and integrate with Animate.css library.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-exit-animation.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'style_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'exit_animation',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Exit Animation', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::EXIT_ANIMATION,\n\t\t\t\t'prefix_class' => 'animated ',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\t?>\n\t\t<div class=\"<?php echo esc_attr( $settings['exit_animation'] ); ?>\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<div class=\"{{ settings.exit_animation }}\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering All Elementor Core Locations\nDESCRIPTION: Function to register all core Elementor locations by hooking into elementor/theme/register_locations action. Uses register_all_core_location() method.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/registering-locations.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction theme_prefix_register_elementor_locations( $elementor_theme_manager ) {\n\n\t$elementor_theme_manager->register_all_core_location();\n\n}\nadd_action( 'elementor/theme/register_locations', 'theme_prefix_register_elementor_locations' );\n```\n\n----------------------------------------\n\nTITLE: Registering Widget Dependencies in Elementor\nDESCRIPTION: Demonstrates how to register widgets and their dependencies including scripts and styles in the main plugin file.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-dependencies.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Register Elementor test widgets.\n */\nfunction elementor_test_widgets_registration( $widgets_manager ) {\n\n\trequire_once( __DIR__ . '/widgets/test-widget-1.php' );\n\trequire_once( __DIR__ . '/widgets/test-widget-2.php' );\n\n\t$widgets_manager->register( new \\Elementor_Test_Widget_1() );\n\t$widgets_manager->register( new \\Elementor_Test_Widget_2() );\n\n}\nadd_action( 'elementor/widgets/register', 'elementor_test_widgets_registration' );\n\n/**\n * Register scripts and styles for Elementor test widgets.\n */\nfunction elementor_test_widgets_dependencies() {\n\n\t/* Scripts */\n\twp_register_script( 'widget-script-1', plugins_url( 'assets/js/widget-script-1.js', __FILE__ ) );\n\twp_register_script( 'widget-script-2', plugins_url( 'assets/js/widget-script-2.js', __FILE__ ), [ 'external-library' ] );\n\twp_register_script( 'external-library', plugins_url( 'assets/js/libs/external-library.js', __FILE__ ) );\n\n\t/* Styles */\n\twp_register_style( 'widget-style-1', plugins_url( 'assets/css/widget-style-1.css', __FILE__ ) );\n\twp_register_style( 'widget-style-2', plugins_url( 'assets/css/widget-style-2.css', __FILE__ ), [ 'external-framework' ] );\n\twp_register_style( 'external-framework', plugins_url( 'assets/css/libs/external-framework.css', __FILE__ ) );\n\n}\nadd_action( 'wp_enqueue_scripts', 'elementor_test_widgets_dependencies' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Typography Group Control in Elementor Widget\nDESCRIPTION: This snippet demonstrates how to add a Typography Group Control to an Elementor widget. It shows the registration of controls, rendering of the widget, and the content template.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/group-control-typography.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_group_control(\n\t\t\t\\Elementor\\Group_Control_Typography::get_type(),\n\t\t\t[\n\t\t\t\t'name' => 'content_typography',\n\t\t\t\t'selector' => '{{WRAPPER}} .your-class',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Controls to Elementor User Preferences Panel\nDESCRIPTION: This code demonstrates how to add a new custom control to the User Preferences Panel in Elementor. It adds a switcher control called 'Enable Something' to the preferences section using the 'elementor/element/editor-preferences/preferences/before_section_end' hook.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor/user-preferences-panel.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param \\Elementor\\Core\\Settings\\EditorPreferences\\Model $preferences The editor preferences model.\n */\nfunction add_preferences_controls( \\Elementor\\PageSettings\\Page $page ) {\n\t$this->add_control(\n\t\t'something',\n\t\t[\n\t\t\t'label' => esc_html__( 'Enable Something', 'textdomain' ),\n\t\t\t'type' => \\Elementor\\Controls_Manager::SWITCHER,\n\t\t\t'default' => 'yes',\n\t\t]\n\t);\n}\nadd_action( 'elementor/element/editor-preferences/preferences/before_section_end', 'add_preferences_controls' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Control in Elementor Widget\nDESCRIPTION: Example implementation of a custom Elementor widget using the Code Control. The code demonstrates how to register the control, handle the rendered output, and create a content template. The control is configured to handle HTML code with 20 rows of input space.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-code.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'custom_html',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Custom HTML', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::CODE,\n\t\t\t\t'language' => 'html',\n\t\t\t\t'rows' => 20,\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\n\t\tif ( empty( $settings['custom_html'] ) ) {\n\t\t\treturn;\n\t\t}\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t<?php echo $settings['custom_html']; ?>\n\t\t</div>\n\t\t<?php\n\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<#\n\t\tif ( '' === settings.custom_html ) {\n\t\t\treturn;\n\t\t}\n\t\t#>\n\t\t<div class=\"your-class\">\n\t\t\t{{{ settings.custom_html }}}\n\t\t</div>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Menu Anchor Scroll Distance Filter in Elementor\nDESCRIPTION: Example showing how to modify the scroll top distance for menu anchor widgets using both jQuery and PHP implementation.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/js.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\njQuery( function( $ ) {\n\t// Add space for Elementor Menu Anchor link\n\tif ( window.elementorFrontend ) {\n\t\telementorFrontend.hooks.addFilter( 'frontend/handlers/menu_anchor/scroll_top_distance', function( scrollTop ) {\n\t\t\treturn scrollTop - 30;\n\t\t} );\n\t}\n} );\n\nadd_action( 'wp_footer', function() {\n if ( ! defined( 'ELEMENTOR_VERSION' ) ) {\n return;\n }\n\t?>\n\t<script>\n jQuery( function( $ ) {\n // Add space for Elementor Menu Anchor link\n if ( window.elementorFrontend ) {\n elementorFrontend.hooks.addFilter( 'frontend/handlers/menu_anchor/scroll_top_distance', function( scrollTop ) {\n return scrollTop - 30;\n } );\n }\n } );\n\t</script>\n\t<?php\n} );\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Dependencies in Elementor Form Field\nDESCRIPTION: Example showing how to set multiple JavaScript and CSS dependencies for an Elementor form field using the modern dependency methods.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-fields/field-dependencies.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Field extends \\ElementorPro\\Modules\\Forms\\Fields\\Field_Base {\n\n\tpublic function get_script_depends(): array {\n\t\treturn [ 'field-script', 'external-library' ];\n\t}\n\n\tpublic function get_style_depends(): array {\n\t\treturn [ 'field-style', 'external-framework' ];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ACF Average Dynamic Tag Class\nDESCRIPTION: Class implementation for the ACF Average dynamic tag that extends Elementor's base Tag class. Includes methods for tag configuration, controls registration, and average calculation functionality.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/dynamic-tags/advanced-example.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Elementor Dynamic Tag - ACF Average\n *\n * Elementor dynamic tag that returns an ACF average.\n *\n * @since 1.0.0\n */\nclass Elementor_Dynamic_Tag_ACF_Average extends \\Elementor\\Core\\DynamicTags\\Tag {\n\n\t/**\n\t * Get dynamic tag name.\n\t *\n\t * Retrieve the name of the ACF average tag.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Dynamic tag name.\n\t */\n\tpublic function get_name(): string {\n\t\treturn 'acf-average';\n\t}\n\n\t/**\n\t * Get dynamic tag title.\n\t *\n\t * Returns the title of the ACF average tag.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Dynamic tag title.\n\t */\n\tpublic function get_title(): string {\n\t\treturn esc_html__( 'ACF Average', 'elementor-acf-average-dynamic-tag' );\n\t}\n\n\t/**\n\t * Get dynamic tag groups.\n\t *\n\t * Retrieve the list of groups the ACF average tag belongs to.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return array Dynamic tag groups.\n\t */\n\tpublic function get_group(): array {\n\t\treturn [ 'site' ];\n\t}\n\n\t/**\n\t * Get dynamic tag categories.\n\t *\n\t * Retrieve the list of categories the ACF average tag belongs to.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return array Dynamic tag categories.\n\t */\n\tpublic function get_categories(): array {\n\t\treturn [ \\Elementor\\Modules\\DynamicTags\\Module::TEXT_CATEGORY ];\n\t}\n\n\t/**\n\t * Register dynamic tag controls.\n\t *\n\t * Add input fields to allow the user to customize the ACF average tag settings.\n\t *\n\t * @since 1.0.0\n\t * @access protected\n\t * @return void\n\t */\n\tprotected function register_controls(): void {\n\t\t$this->add_control(\n\t\t\t'fields',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Fields', 'elementor-acf-average-dynamic-tag' ),\n\t\t\t\t'type' => 'text',\n\t\t\t]\n\t\t);\n\t}\n\n\t/**\n\t * Render tag output on the frontend.\n\t *\n\t * Written in PHP and used to generate the final HTML.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return void\n\t */\n\tpublic function render(): void {\n\t\t$fields = $this->get_settings( 'fields' );\n\t\t$sum = 0;\n\t\t$count = 0;\n\t\t$value = 0;\n\n\t\t// Make sure that ACF if installed and activated\n\t\tif ( ! function_exists( 'get_field' ) ) {\n\t\t\techo 0;\n\t\t\treturn;\n\t\t}\n\n\t\tforeach ( explode( ',', $fields ) as $index => $field_name ) {\n\t\t\t$field = get_field( $field_name );\n\t\t\tif ( (int) $field > 0 ) {\n\t\t\t\t$sum += (int) $field;\n\t\t\t\t$count++;\n\t\t\t}\n\t\t}\n\n\t\tif ( 0 !== $count ) {\n\t\t\t$value = $sum / $count;\n\t\t}\n\n\t\techo $value;\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WYSIWYG Control in Elementor Widget\nDESCRIPTION: This code demonstrates how to add a WYSIWYG control to an Elementor widget, render its content, and use it in a content template. It includes the control registration, rendering logic, and template usage.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-wysiwyg.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'item_description',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Description', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::WYSIWYG,\n\t\t\t\t'default' => esc_html__( 'Default description', 'textdomain' ),\n\t\t\t\t'placeholder' => esc_html__( 'Type your description here', 'textdomain' ),\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\n\t\tif ( empty( $settings['item_description'] ) ) {\n\t\t\treturn;\n\t\t}\n\t\t?>\n\t\t<div class=\"description\">\n\t\t\t<?php echo $settings['item_description']; ?>\n\t\t</div>\n\t\t<?php\n\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<#\n\t\tif ( '' === settings.item_description ) {\n\t\t\treturn;\n\t\t}\n\t\t#>\n\t\t<div class=\"description\">\n\t\t\t{{{ settings.item_description }}}\n\t\t</div>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Repeater Control in Elementor (PHP)\nDESCRIPTION: This code snippet demonstrates how to register a repeater control within an Elementor widget. The repeater control allows users to add multiple items, each with its own set of fields (text and link in this case). The `register_controls` method is used to define the control.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/rendering-repeaters.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'section_content',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'list',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'List', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::REPEATER,\n\t\t\t\t'fields' => [\n\t\t\t\t\t[\n\t\t\t\t\t\t'name' => 'text',\n\t\t\t\t\t\t'label' => esc_html__( 'Text', 'textdomain' ),\n\t\t\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t\t\t\t'placeholder' => esc_html__( 'List Item', 'textdomain' ),\n\t\t\t\t\t\t'default' => esc_html__( 'List Item', 'textdomain' ),\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t'name' => 'link',\n\t\t\t\t\t\t'label' => esc_html__( 'Link', 'textdomain' ),\n\t\t\t\t\t\t'type' => \\Elementor\\Controls_Manager::URL,\n\t\t\t\t\t\t'placeholder' => esc_html__( 'https://your-link.com', 'textdomain' ),\n\t\t\t\t\t],\n\t\t\t\t],\n\t\t\t\t'default' => [\n\t\t\t\t\t[\n\t\t\t\t\t\t'text' => esc_html__( 'List Item #1', 'textdomain' ),\n\t\t\t\t\t\t'link' => 'https://elementor.com/',\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t'text' => esc_html__( 'List Item #2', 'textdomain' ),\n\t\t\t\t\t\t'link' => 'https://elementor.com/',\n\t\t\t\t\t],\n\t\t\t\t],\n\t\t\t\t'title_field' => '{{{ text }}}',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Group Control in Elementor Widget\nDESCRIPTION: This snippet demonstrates how to add a Background Group Control to an Elementor widget. It shows the registration of the control in the widget's controls section and its usage in the render and content template methods.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/group-control-background.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_group_control(\n\t\t\t\\Elementor\\Group_Control_Background::get_type(),\n\t\t\t[\n\t\t\t\t'name' => 'background',\n\t\t\t\t'types' => [ 'classic', 'gradient', 'video' ],\n\t\t\t\t'selector' => '{{WRAPPER}} .your-class',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering User Role Conditions in Elementor\nDESCRIPTION: Main plugin file that registers the custom user role conditions in Elementor. It hooks into the 'elementor/theme/register_conditions' action to add new conditions.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/theme-conditions/advanced-example.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Elementor User Role Conditions\n * Description: Custom addon that adds user role conditions to Elementor.\n * Plugin URI:  https://elementor.com/\n * Version:     1.0.0\n * Author:      Elementor Developer\n * Author URI:  https://developers.elementor.com/\n * Text Domain: elementor-user-role-conditions\n *\n * Requires Plugins: elementor\n * Elementor tested up to: 3.25.0\n * Elementor Pro tested up to: 3.25.0\n */\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Add user role conditions to Elementor.\n *\n * @since 1.0.0\n * @param \\ElementorPro\\Modules\\ThemeBuilder\\Classes\\Conditions_Manager $conditions_manager An instance of conditions manager.\n * @return void\n */\nfunction add_new_user_role_conditions( $conditions_manager ) {\n\n\trequire_once( __DIR__ . '/theme-conditions/logged-in-user-condition.php' );\n\trequire_once( __DIR__ . '/theme-conditions/user-role-condition.php' );\n\n\t$conditions_manager->get_condition( 'general' )->register_sub_condition( new \\Logged_In_User_Condition() );\n}\nadd_action( 'elementor/theme/register_conditions', 'add_new_user_role_conditions' );\n```\n\n----------------------------------------\n\nTITLE: Adding Upload Handler Component to Elementor Forms\nDESCRIPTION: Hook implementation to add a custom uploads handler component when a form is submitted.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/forms.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'elementor_pro/forms/form_submitted', function( $module ) {\n\t$module->add_component( 'uploads_handler', new Uploads_Handler() );\n} );\n```\n\n----------------------------------------\n\nTITLE: Basic Widget Controls Registration Structure in PHP\nDESCRIPTION: Demonstrates the basic structure for registering controls in an Elementor widget class. Shows the standard pattern of starting a control section, adding controls, and ending the section.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-controls.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section();\n\n\t\t$this->add_control();\n\n\t\t$this->add_control();\n\n\t\t$this->add_control();\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Heading Control in Elementor Widget\nDESCRIPTION: This code demonstrates how to add a heading control to an Elementor widget. The example shows adding a heading labeled 'Additional Options' with a separator before it in the content section of a widget.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-heading.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'more_options',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Additional Options', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::HEADING,\n\t\t\t\t'separator' => 'before',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Dimensions Control in Elementor Widget\nDESCRIPTION: Shows how to add an image dimensions control to an Elementor widget class. Includes setting up the control section, adding the control with custom parameters, and defining default values.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-image-dimensions.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'custom_dimension',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Image Dimension', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::IMAGE_DIMENSIONS,\n\t\t\t\t'description' => esc_html__( 'Crop the original image size to any custom size. Set custom width or height to keep the original size ratio.', 'textdomain' ),\n\t\t\t\t'default' => [\n\t\t\t\t\t'width' => '',\n\t\t\t\t\t'height' => '',\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Control Data in PHP\nDESCRIPTION: Demonstrates how to retrieve all widget control data at once using get_settings_for_display() method, which can provide performance benefits when accessing multiple settings.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-settings.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nprotected function render(): void {\n\t$settings = $this->get_settings_for_display();\n\t?>\n\t<h3 class=\"<?php echo esc_attr( $settings['class'] ); ?>\">\n\t\t<?php echo $settings['title']; ?>\n\t</h3>\n\t<?php\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Enqueueing Custom Scripts for Elementor Preview\nDESCRIPTION: This code snippet demonstrates how to register custom scripts using 'wp_enqueue_scripts' hook and enqueue them for Elementor preview using 'elementor/preview/enqueue_scripts' hook. It registers three scripts, including an external library, and enqueues two of them for the preview.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/scripts-styles/preview-scripts.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction my_plugin_register_preview_scripts() {\n\twp_register_script( 'preview-script-1', plugins_url( 'assets/js/preview-script-1.js', __FILE__ ) );\n\twp_register_script( 'preview-script-2', plugins_url( 'assets/js/preview-script-2.js', __FILE__ ), [ 'external-library' ] );\n\twp_register_script( 'external-library', plugins_url( 'assets/js/libs/external-library.js', __FILE__ ) );\n}\nadd_action( 'wp_enqueue_scripts', 'my_plugin_register_preview_scripts' );\n\nfunction my_plugin_enqueue_preview_scripts() {\n\twp_enqueue_script( 'preview-script-1' );\n\twp_enqueue_script( 'preview-script-2' );\n}\nadd_action( 'elementor/preview/enqueue_scripts', 'my_plugin_enqueue_preview_scripts' );\n```\n\n----------------------------------------\n\nTITLE: Adding a Choose Control to Elementor Widget PHP\nDESCRIPTION: This snippet demonstrates how to implement a choose control in an Elementor widget. It shows how to set up options with icons for each choice and define a default value.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/regular-control.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'alignment',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::CHOOSE,\n\t\t\t\t'label' => esc_html__( 'Alignment', 'textdomain' ),\n\t\t\t\t'options' => [\n\t\t\t\t\t'left' => [\n\t\t\t\t\t\t'title' => esc_html__( 'Left', 'textdomain' ),\n\t\t\t\t\t\t'icon' => 'eicon-text-align-left',\n\t\t\t\t\t],\n\t\t\t\t\t'center' => [\n\t\t\t\t\t\t'title' => esc_html__( 'Center', 'textdomain' ),\n\t\t\t\t\t\t'icon' => 'eicon-text-align-center',\n\t\t\t\t\t],\n\t\t\t\t\t'right' => [\n\t\t\t\t\t\t'title' => esc_html__( 'Right', 'textdomain' ),\n\t\t\t\t\t\t'icon' => 'eicon-text-align-right',\n\t\t\t\t\t],\n\t\t\t\t],\n\t\t\t\t'default' => 'center',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Post Metadata Query Filter in PHP\nDESCRIPTION: Shows how to filter posts based on metadata values in an Elementor portfolio widget. Includes handling of existing meta queries.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/custom-query-filter.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Update the query by specific post meta.\n *\n * @since 1.0.0\n * @param \\WP_Query $query The WordPress query instance.\n */\nfunction my_query_by_post_meta( $query ) {\n\n\t// Get current meta Query\n\t$meta_query = $query->get( 'meta_query' );\n\n\t// If there is no meta query when this filter runs, it should be initialized as an empty array.\n\tif ( ! $meta_query ) {\n\t\t$meta_query = [];\n\t}\n\n\t// Append our meta query\n\t$meta_query[] = [\n\t\t'key' => 'project_type',\n\t\t'value' => [ 'design', 'development' ],\n\t\t'compare' => 'in',\n\t];\n\n\t$query->set( 'meta_query', $meta_query );\n\n}\nadd_action( 'elementor/query/{$query_id}', 'my_query_by_post_meta' );\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Controls in Elementor\nDESCRIPTION: Demonstrates how to register custom controls in Elementor using the controls manager. Shows the process of loading control files and registering control classes through the elementor/controls/register hook.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/addons/initialization.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfinal class Plugin {\n\n\t/**\n\t * Initialize\n\t *\n\t * Load the addons functionality only after Elementor is initialized.\n\t *\n\t * Fired by `elementor/init` action hook.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t */\n\tpublic function init(): void {\n\n\t\tadd_action( 'elementor/controls/register', [ $this, 'register_controls' ] );\n\n\t}\n\n\t/**\n\t * Register Controls\n\t *\n\t * Load controls files and register new Elementor controls.\n\t *\n\t * Fired by `elementor/controls/register` action hook.\n\t *\n\t * @param \\Elementor\\Controls_Manager $controls_manager Elementor controls manager.\n\t */\n\tpublic function register_controls( $controls_manager ): void {\n\n\t\trequire_once( __DIR__ . '/includes/controls/control-1.php' );\n\t\trequire_once( __DIR__ . '/includes/controls/control-2.php' );\n\n\t\t$controls_manager->register( new \\Control_1() );\n\t\t$controls_manager->register( new \\Control_2() );\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Size Control in Elementor Widget\nDESCRIPTION: Complete example showing how to implement image size control in an Elementor widget, including control registration, rendering, and template handling. Demonstrates integration with media controls and image size settings.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/group-control-image-size.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'image',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Choose Image', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::MEDIA,\n\t\t\t\t'default' => [\n\t\t\t\t\t'url' => \\Elementor\\Utils::get_placeholder_image_src(),\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->add_group_control(\n\t\t\t\\Elementor\\Group_Control_Image_Size::get_type(),\n\t\t\t[\n\t\t\t\t'name' => 'thumbnail', // Usage: `{name}_size` and `{name}_custom_dimension`, in this case `thumbnail_size` and `thumbnail_custom_dimension`.\n\t\t\t\t'exclude' => [ 'custom' ],\n\t\t\t\t'include' => [],\n\t\t\t\t'default' => 'large',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\techo \\Elementor\\Group_Control_Image_Size::get_attachment_image_html( $settings, 'thumbnail', 'image' );\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<#\n\t\tconst image = {\n\t\t\tid: settings.image.id,\n\t\t\turl: settings.image.url,\n\t\t\tsize: settings.thumbnail_size,\n\t\t\tdimension: settings.thumbnail_custom_dimension,\n\t\t\tmodel: view.getEditModel()\n\t\t};\n\t\tconst image_url = elementor.imagesManager.getImageUrl( image );\n\t\t#>\n\t\t<img src=\"{{{ image_url }}}\" />\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Border Group Control in Elementor Widget\nDESCRIPTION: This code snippet demonstrates how to use the Border Group Control in a custom Elementor widget. It shows the registration of the control in the widget's controls section and its application in the render and content template methods.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/group-control-border.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_group_control(\n\t\t\t\\Elementor\\Group_Control_Border::get_type(),\n\t\t\t[\n\t\t\t\t'name' => 'border',\n\t\t\t\t'selector' => '{{WRAPPER}} .your-class',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Custom Control After Section Start in PHP\nDESCRIPTION: This snippet shows how to inject a custom control after a section starts for all elements in Elementor. It specifically targets the 'section_background' section of the 'section' element type.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/injecting-controls.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param \\Elementor\\Controls_Stack $element    The element type.\n * @param string                    $section_id Section ID.\n * @param array                     $args       Section arguments.\n */\nfunction inject_custom_control( $element, $section_id, $args ) {\n\n\tif ( 'section' === $element->get_name() && 'section_background' === $section_id ) {\n\n\t\t$element->add_control(\n\t\t\t'custom_control',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::NUMBER,\n\t\t\t\t'label' => esc_html__( 'Custom Control', 'textdomain' ),\n\t\t\t]\n\t\t);\n\n\t}\n\n}\nadd_action( 'elementor/element/after_section_start', 'inject_custom_control', 10, 3 );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Data in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve basic page data such as title, excerpt, author, permalink, and thumbnail using WordPress functions.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor/page-settings-panel.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve page data\n$page_id        = get_the_ID();\n$page_title     = get_the_title();\n$page_excerpt   = get_the_excerpt();\n$page_author    = get_the_author();\n$page_permalink = get_permalink();\n$page_thumbnail = get_the_post_thumbnail();\n```\n\n----------------------------------------\n\nTITLE: Implementing JS Template Rendering for Elementor Form Fields\nDESCRIPTION: A PHP class extending Field_Base that implements a workaround for rendering JavaScript templates in Elementor form fields. The implementation hooks into the editor preview and adds a custom script to handle field rendering using elementor.hooks.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-fields/field-content-template.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Field extends \\ElementorPro\\Modules\\Forms\\Fields\\Field_Base {\n\n\tpublic function __construct() {\n\t\tparent::__construct();\n\t\tadd_action( 'elementor/preview/init', [ $this, 'editor_preview_footer' ] );\n\t}\n\n\tpublic function editor_preview_footer(): void {\n\t\tadd_action( 'wp_footer', [ $this, 'content_template_script' ] );\n\t}\n\n\tpublic function content_template_script(): void {\n\t\t?>\n\t\t<script>\n\t\tjQuery( document ).ready( () => {\n\n\t\t\telementor.hooks.addFilter(\n\t\t\t\t'elementor_pro/forms/content_template/field/<?php echo $this->get_type(); ?>',\n\t\t\t\tfunction ( inputField, item, i ) {\n\t\t\t\t\tconst fieldType  = 'text';\n\t\t\t\t\tconst fieldId    = `form_field_${i}`;\n\t\t\t\t\tconst fieldClass = `elementor-field-textual elementor-field ${item.css_classes}`;\n\t\t\t\t\tconst title      = \"<?php echo esc_html__( 'Some text...', 'textdomain' ); ?>\";\n\n\t\t\t\t\treturn `<input type=\"${fieldType}\" id=\"${fieldId}\" class=\"${fieldClass}\" title=\"${title}\">`;\n\t\t\t\t}, 10, 3\n\t\t\t);\n\n\t\t});\n\t\t</script>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Responsive Choose Control in Elementor (PHP)\nDESCRIPTION: Shows how to add a responsive choose control to an Elementor widget. This control allows users to set different alignment options for desktop and tablet devices.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/responsive-control.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'style_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style Section', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_responsive_control(\n\t\t\t'content_align',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::CHOOSE,\n\t\t\t\t'label' => esc_html__( 'Alignment', 'textdomain' ),\n\t\t\t\t'options' => [\n\t\t\t\t\t'left' => [\n\t\t\t\t\t\t'title' => esc_html__( 'Left', 'textdomain' ),\n\t\t\t\t\t\t'icon' => 'eicon-text-align-left',\n\t\t\t\t\t],\n\t\t\t\t\t'center' => [\n\t\t\t\t\t\t'title' => esc_html__( 'Center', 'textdomain' ),\n\t\t\t\t\t\t'icon' => 'eicon-text-align-center',\n\t\t\t\t\t],\n\t\t\t\t\t'right' => [\n\t\t\t\t\t\t'title' => esc_html__( 'Right', 'textdomain' ),\n\t\t\t\t\t\t'icon' => 'eicon-text-align-right',\n\t\t\t\t\t],\n\t\t\t\t],\n\t\t\t\t'devices' => [ 'desktop', 'tablet' ],\n\t\t\t\t'prefix_class' => 'content-align-%s',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Field Dependencies in Elementor Form Field Class\nDESCRIPTION: Shows how to declare JavaScript and CSS dependencies for an Elementor form field by implementing get_script_depends() and get_style_depends() methods.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-fields/field-dependencies.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Field extends \\ElementorPro\\Modules\\Forms\\Fields\\Field_Base {\n\n\tpublic function get_script_depends(): array {\n\t\treturn [ 'script-handle' ];\n\t}\n\n\tpublic function get_style_depends(): array {\n\t\treturn [ 'style-handle' ];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dimensions Control in an Elementor Widget\nDESCRIPTION: This example demonstrates how to implement the Dimensions Control in an Elementor widget. It shows the creation of a control for margin settings with custom units, default values, and CSS selectors. The example includes the widget registration, control settings, and rendering methods.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-dimensions.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'style_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'margin',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Margin', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::DIMENSIONS,\n\t\t\t\t'size_units' => [ 'px', '%', 'em', 'rem', 'custom' ],\n\t\t\t\t'default' => [\n\t\t\t\t\t'top' => 2,\n\t\t\t\t\t'right' => 0,\n\t\t\t\t\t'bottom' => 2,\n\t\t\t\t\t'left' => 0,\n\t\t\t\t\t'unit' => 'em',\n\t\t\t\t\t'isLinked' => false,\n\t\t\t\t],\n\t\t\t\t'selectors' => [\n\t\t\t\t\t'{{WRAPPER}} .your-class' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Control Section in Elementor (PHP)\nDESCRIPTION: Demonstrates the basic structure for creating a control section in an Elementor widget. It shows how to start and end a control section with a label and tab specification.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-section.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->start_controls_section(\n\t'my_section',\n\t[\n\t\t'label' => esc_html__( 'My Section', 'textdomain' ),\n\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t]\n);\n\n$this->end_controls_section();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Responsive Slider Control in Elementor (PHP)\nDESCRIPTION: Shows how to add a responsive slider control to an Elementor widget. This control allows users to set different spacing values for desktop, tablet, and mobile devices.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/responsive-control.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'style_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style Section', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_responsive_control(\n\t\t\t'space_between',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::SLIDER,\n\t\t\t\t'label' => esc_html__( 'Spacing', 'textdomain' ),\n\t\t\t\t'range' => [\n\t\t\t\t\t'px' => [\n\t\t\t\t\t\t'min' => 0,\n\t\t\t\t\t\t'max' => 100,\n\t\t\t\t\t],\n\t\t\t\t],\n\t\t\t\t'devices' => [ 'desktop', 'tablet', 'mobile' ],\n\t\t\t\t'default' => [\n\t\t\t\t\t'size' => 30,\n\t\t\t\t\t'unit' => 'px',\n\t\t\t\t],\n\t\t\t\t'tablet_default' => [\n\t\t\t\t\t'size' => 20,\n\t\t\t\t\t'unit' => 'px',\n\t\t\t\t],\n\t\t\t\t'mobile_default' => [\n\t\t\t\t\t'size' => 10,\n\t\t\t\t\t'unit' => 'px',\n\t\t\t\t],\n\t\t\t\t'selectors' => [\n\t\t\t\t\t'{{WRAPPER}} .widget-image' => 'margin-bottom: {{SIZE}}{{UNIT}};',\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Currency Control and Widget in Elementor\nDESCRIPTION: This PHP code defines the main plugin file that registers the custom currency control and a test widget with Elementor. It includes necessary hooks and file inclusions.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/controls/simple-example.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Elementor Currency Control\n * Description: Add new Elementor control for currencies selection.\n * Plugin URI:  https://elementor.com/\n * Version:     1.0.0\n * Author:      Elementor Developer\n * Author URI:  https://developers.elementor.com/\n * Text Domain: elementor-currency-control\n *\n * Requires Plugins: elementor\n * Elementor tested up to: 3.25.0\n * Elementor Pro tested up to: 3.25.0\n */\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Register Currency Control.\n *\n * Include control file and register control class.\n *\n * @since 1.0.0\n * @param \\Elementor\\Controls_Manager $controls_manager Elementor controls manager.\n * @return void\n */\nfunction register_currency_control( $controls_manager ) {\n\n\trequire_once( __DIR__ . '/controls/currency.php' );\n\n    $controls_manager->register( new \\Elementor_Currency_Control() );\n\n}\nadd_action( 'elementor/controls/register', 'register_currency_control' );\n\n/**\n * Register Currency Widget.\n *\n * Include widget file and register widget class.\n *\n * @since 1.0.0\n * @param \\Elementor\\Widgets_Manager $widgets_manager Elementor widgets manager.\n * @return void\n */\nfunction register_currency_widget( $widgets_manager ) {\n\n\trequire_once( __DIR__ . '/widgets/currency-widget.php' );\n\n\t$widgets_manager->register( new \\Elementor_Currency_Widget() );\n\n}\nadd_action( 'elementor/widgets/register', 'register_currency_widget' );\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Support to Elementor Control (PHP)\nDESCRIPTION: This snippet demonstrates how to add dynamic tag support to an Elementor control using the 'dynamic' argument. It enables users to replace static content with dynamic data.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/dynamic-content.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'unique-control-name',\n\t[\n\t\t'label' => esc_html__( 'Control Label', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t'dynamic' => [\n\t\t\t'active' => true,\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Conditions in Elementor Controls\nDESCRIPTION: Demonstrates how to create complex nested conditional rules using 'or' and 'and' relations for controlling display logic in Elementor.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/conditional-display.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n'conditions' => [\n\t'relation' => 'or',\n\t'terms' => [\n\t\t[\n\t\t\t'name' => 'video_type',\n\t\t\t'operator' => '===',\n\t\t\t'value' => 'youtube',\n\t\t],\n\t\t[\n\t\t\t'relation' => 'and',\n\t\t\t'terms' => [\n\t\t\t\t[\n\t\t\t\t\t'name' => 'show_image_overlay',\n\t\t\t\t\t'operator' => '===',\n\t\t\t\t\t'value' => 'yes',\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'name' => 'video_type',\n\t\t\t\t\t'operator' => '!==',\n\t\t\t\t\t'value' => 'hosted',\n\t\t\t\t],\n\t\t\t],\n\t\t],\n\t],\n],\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Dynamic Tag Group in Elementor Pro\nDESCRIPTION: This snippet demonstrates how to create a new custom dynamic tag group using the elementor/dynamic_tags/register action hook. It registers a group with a unique identifier and a translatable display title.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/dynamic-tags/dynamic-tags-groups.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Register new dynamic tag group\n *\n * @since 1.0.0\n * @param \\Elementor\\Core\\DynamicTags\\Manager $dynamic_tags_manager Elementor dynamic tags manager.\n * @return void\n */\nfunction register_new_dynamic_tag_group( $dynamic_tags_manager ) {\n\n\t$dynamic_tags_manager->register_group(\n\t\t'group-name',\n\t\t[\n\t\t\t'title' => esc_html__( 'Group Label', 'textdomain' )\n\t\t]\n\t);\n\n}\nadd_action( 'elementor/dynamic_tags/register', 'register_new_dynamic_tag_group' );\n```\n\n----------------------------------------\n\nTITLE: Extending Specific Control Type in Elementor\nDESCRIPTION: Example of extending a specific control type (Base_Data_Control) instead of the generic Base_Control. This approach allows inheriting functionality specific to data controls.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/controls/control-structure.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Control extends \\Elementor\\Base_Data_Control {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Context Menu Group Structure in JavaScript\nDESCRIPTION: Shows the basic structure of a context menu group object in Elementor. Each group has a unique name identifier and an array of actions that will be displayed in the group. Groups are only displayed if they contain at least one action.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/context-menu-groups.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst group = {\n\tname: '',\n\tactions: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Enqueueing Registered Styles in Elementor Control Class in PHP\nDESCRIPTION: This snippet shows how to enqueue the previously registered stylesheets within an Elementor control class. It uses the enqueue() method to ensure the styles are loaded only in the Elementor editor.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/scripts-styles/control-styles.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Control extends \\Elementor\\Base_Control {\n\n\tprotected function enqueue(): void {\n\t\twp_enqueue_style( 'control-style-1' );\n\t\twp_enqueue_style( 'control-style-2' );\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AI Capabilities for Code Controls in Elementor\nDESCRIPTION: This snippet shows how to add AI capabilities to Code controls in Elementor, generating CSS and HTML. It demonstrates how to enable, disable, and override AI settings for code generation.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/ai.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'custom-css',\n\t[\n\t\t'label' => esc_html__( 'Custom CSS', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::CODE,\n\t\t'language' => 'css',\n\t]\n);\n\n$this->add_control(\n\t'custom-html',\n\t[\n\t\t'label' => esc_html__( 'Custom HTML', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::CODE,\n\t\t'language' => 'html',\n\t]\n);\n\n$this->add_control(\n\t'css',\n\t[\n\t\t'label' => esc_html__( 'CSS', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::CODE,\n\t\t'language' => 'css',\n\t\t'ai' => [\n\t\t\t'active' => false,\n\t\t],\n\t]\n);\n\n$this->add_control(\n\t'html',\n\t[\n\t\t'label' => esc_html__( 'HTML', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::CODE,\n\t\t'language' => 'html',\n\t\t'ai' => [\n\t\t\t'language' => 'css',\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Elementor Frontend\nDESCRIPTION: Example demonstrating how to hook into Elementor's frontend initialization.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/js.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nelementorFrontend.hooks.addAction( 'elementor/frontend/init', function() {\n // Do something that is based on the elementorFrontend object.\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecated Action Hook Handler in PHP\nDESCRIPTION: Example showing how to implement the deprecation handler while maintaining backwards compatibility. Uses the dev-tools module to handle deprecation notices and runs both old and new hooks.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/deprecations/deprecated-action-hook.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Elementor\\Plugin;\n\nclass Name {\n\n\tfunction init( $args ): void {\n\t\t// Deprecation handler\n\t\tPlugin::$instance->modules_manager->get_modules( 'dev-tools' )->deprecation->do_deprecated_action(\n\t\t\t'elementor/old/action',\n\t\t\t[ $args ],\n\t\t\t'3.5.0',\n\t\t\t'elementor/new/action'\n\t\t);\n\n\t\t// Run the new hook\n\t\tdo_action( 'elementor/new/action', $args );\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Visual Choice Control in Elementor Widget\nDESCRIPTION: This PHP code snippet demonstrates how to add a Visual Choice Control to an Elementor widget. It sets up a 'Structure' control with various layout options, each represented by an image and title.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-visual-choice.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'style_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'structure',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Structure', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::VISUAL_CHOICE,\n\t\t\t\t'label_block' => true,\n\t\t\t\t'options' => [\n\t\t\t\t\t'grid-3' => [\n\t\t\t\t\t\t'title' => esc_attr__( 'Grid: 3 columns.', 'textdomain' ),\n\t\t\t\t\t\t'image' => plugins_url( 'assets/img/grid-3.svg', __FILE__ ),\n\t\t\t\t\t],\n\t\t\t\t\t'masonry' => [\n\t\t\t\t\t\t'title' => esc_attr__( 'Masonry: arbitrary order', 'textdomain' ),\n\t\t\t\t\t\t'image' => plugins_url( 'assets/img/masonry.svg', __FILE__ ),\n\t\t\t\t\t],\n\t\t\t\t\t'stacked' => [\n\t\t\t\t\t\t'title' => esc_attr__( 'Stacked: Single column.', 'textdomain' ),\n\t\t\t\t\t\t'image' => plugins_url( 'assets/img/stacked.svg', __FILE__ ),\n\t\t\t\t\t],\n\t\t\t\t\t'focus' => [\n\t\t\t\t\t\t'title' => esc_attr__( 'Focus: Text only.', 'textdomain' ),\n\t\t\t\t\t\t'image' => plugins_url( 'assets/img/focus.svg', __FILE__ ),\n\t\t\t\t\t],\n\t\t\t\t\t'grid-2' => [\n\t\t\t\t\t\t'title' => esc_attr__( 'Grid: 2 columns.', 'textdomain' ),\n\t\t\t\t\t\t'image' => plugins_url( 'assets/img/grid2.svg', __FILE__ ),\n\t\t\t\t\t],\n\t\t\t\t\t'stretch' => [\n\t\t\t\t\t\t'title' => esc_attr__( 'Stretch: fit available width.', 'textdomain' ),\n\t\t\t\t\t\t'image' => plugins_url( 'assets/img/stretch.svg', __FILE__ ),\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t'default' => 'masonry',\n\t\t\t\t'columns' => 2,\n\t\t\t\t'prefix_class' => 'some-layout-',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Slider Control in Elementor Widget PHP\nDESCRIPTION: This example shows how to add a slider control to an Elementor widget. It demonstrates setting up size units, range, and default values for the slider.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/regular-control.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'font_size',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::SLIDER,\n\t\t\t\t'label' => esc_html__( 'Size', 'textdomain' ),\n\t\t\t\t'size_units' => [ 'px', 'em', 'rem', 'custom' ],\n\t\t\t\t'range' => [\n\t\t\t\t\t'px' => [\n\t\t\t\t\t\t'min' => 1,\n\t\t\t\t\t\t'max' => 200,\n\t\t\t\t\t],\n\t\t\t\t],\n\t\t\t\t'default' => [\n\t\t\t\t\t'unit' => 'px',\n\t\t\t\t\t'size' => 20,\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Border Group Control Implementation\nDESCRIPTION: Example of implementing border controls in an Elementor widget. Shows how to add controls for border type, width, and color.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/group-control.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'style_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_group_control(\n\t\t\t\\Elementor\\Group_Control_Border::get_type(),\n\t\t\t[\n\t\t\t\t'name' => 'border',\n\t\t\t\t'selector' => '{{WRAPPER}} .wrapper',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Test Widget Implementation for the Custom Emoji Control\nDESCRIPTION: PHP class implementing a test widget that demonstrates the use of the custom Emoji One Area control. It extends Elementor's Widget_Base class and includes the necessary methods for registering and displaying the widget.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/controls/complex-example.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Elementor Test Widget.\n *\n * Elementor widget that uses the emojionearea control.\n *\n * @since 1.0.0\n */\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\t/**\n\t * Get widget name.\n\t *\n\t * Retrieve test widget name.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Widget name.\n\t */\n\tpublic function get_name(): string {\n\t\treturn 'test';\n\t}\n\n\t/**\n\t * Get widget title.\n\t *\n\t * Retrieve test widget title.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Widget title.\n\t */\n\tpublic function get_title(): string {\n\t\treturn esc_html__( 'Test', 'elementor-emojionearea-control' );\n\t}\n\n\t/**\n\t * Get widget icon.\n\t *\n\t * Retrieve test widget icon.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Widget icon.\n\t */\n\tpublic function get_icon(): string {\n\t\treturn 'eicon-code';\n\t}\n\n\t/**\n\t * Get widget categories.\n\t *\n\t * Retrieve the list of categories the test widget belongs to.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return array Widget categories.\n\t */\n\tpublic function get_categories(): array {\n\t\treturn [ 'general' ];\n\t}\n\n\t/**\n\t * Get widget keywords.\n\t *\n\t * Retrieve the list of keywords the test widget belongs to.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return array Widget keywords.\n\t */\n\tpublic function get_keywords(): array {\n\t\treturn [ 'test', 'emoji' ];\n\t}\n\n\t/**\n\t * Get custom help URL.\n\t *\n\t * Retrieve a URL where the user can get more information about the widget.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Widget help URL.\n\t */\n\tpublic function get_custom_help_url(): string {\n\t\treturn 'https://developers.elementor.com/docs/widgets/';\n\t}\n\n\t/**\n\t * Whether the widget requires inner wrapper.\n\t *\n\t * Determine whether to optimize the DOM size.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return bool Whether to optimize the DOM size.\n\t */\n\tpublic function has_widget_inner_wrapper(): bool {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Whether the element returns dynamic content.\n\t *\n\t * Determine whether to cache the element output or not.\n\t *\n\t * @since 1.0.0\n\t * @access protected\n\t * @return bool Whether to cache the element output.\n\t */\n\tprotected function is_dynamic_content(): bool {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Register test widget controls.\n\t *\n\t * Add input fields to allow the user to customize the widget settings.\n\t *\n\t * @since 1.0.0\n\t * @access protected\n\t */\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'elementor-emojionearea-control' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'content',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content with Emoji', 'elementor-emojionearea-control' ),\n\t\t\t\t'type' => 'emojionearea',\n\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\t/**\n\t * Render test widget output on the frontend.\n\t *\n\t * Written in PHP and used to generate the final HTML.\n\t *\n\t * @since 1.0.0\n\t * @access protected\n\t */\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\n\t\tif ( empty( $settings['content'] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\techo $settings['content'];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Control Sections in Multiple Tabs in Elementor Widget (PHP)\nDESCRIPTION: Illustrates how to create control sections in different tabs within an Elementor widget. This example creates two sections in the 'Content' tab and one section in the 'Style' tab.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-section.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control();\n\n\t\t$this->add_control();\n\n\t\t$this->add_control();\n\n\t\t$this->end_controls_section();\n\n\t\t$this->start_controls_section(\n\t\t\t'info_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Info', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control();\n\n\t\t$this->add_control();\n\n\t\t$this->add_control();\n\n\t\t$this->end_controls_section();\n\n\t\t$this->start_controls_section(\n\t\t\t'style_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control();\n\n\t\t$this->add_control();\n\n\t\t$this->add_control();\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating WordPress Post on Elementor Form Submission in PHP\nDESCRIPTION: Example of using the run() method to create a WordPress post (or custom post type) after every Elementor form submission. This utilizes the WordPress wp_insert_post() function.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-actions/action-run.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Action extends \\ElementorPro\\Modules\\Forms\\Classes\\Action_Base {\n\n\tpublic function run( $record, $ajax_handler ): void {\n\n\t\twp_insert_post( /* ... */ );\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Credit Card Field Plugin in PHP\nDESCRIPTION: Main plugin file that registers the credit card number field with Elementor forms. Includes plugin metadata and registration hook.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-fields/advanced-example.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Elementor Forms Credit Card Number Field\n * Description: Custom addon that adds a \"credit-card\" field to Elementor Forms Widget.\n * Plugin URI:  https://elementor.com/\n * Version:     1.0.0\n * Author:      Elementor Developer\n * Author URI:  https://developers.elementor.com/\n * Text Domain: elementor-form-credit-card-number-field\n *\n * Requires Plugins: elementor\n * Elementor tested up to: 3.25.0\n * Elementor Pro tested up to: 3.25.0\n */\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Register `credit-card-number` field-type to Elementor form widget.\n *\n * @since 1.0.0\n * @param \\ElementorPro\\Modules\\Forms\\Registrars\\Form_Fields_Registrar $form_fields_registrar\n * @return void\n */\nfunction add_new_credit_card_number_field( $form_fields_registrar ) {\n\n\trequire_once( __DIR__ . '/form-fields/credit-card-number.php' );\n\n\t$form_fields_registrar->register( new \\Elementor_Credit_Card_Number_Field() );\n\n}\nadd_action( 'elementor_pro/forms/fields/register', 'add_new_credit_card_number_field' );\n```\n\n----------------------------------------\n\nTITLE: Defining Context Menu Action Object in JavaScript\nDESCRIPTION: This snippet demonstrates the structure of an action object for Elementor's context menu. It includes properties for name, icon, title, shortcut, and methods for checking if the action is enabled and the callback function.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/context-menu-actions.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst action = {\n\tname: 'action-id',\n\ticon: 'eicon-code',\n\ttitle: 'Action Label',\n\tshortcut: '',\n\tisEnabled: () => true,\n\tcallback: () => {},\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Text Control in Elementor Widget PHP\nDESCRIPTION: This example shows how to add a text control to an Elementor widget. It includes setting a label and placeholder for the control within the widget's register_controls() method.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/regular-control.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'title',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t\t'label' => esc_html__( 'Title', 'textdomain' ),\n\t\t\t\t'placeholder' => esc_html__( 'Enter your title', 'textdomain' ),\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Widget for Currency Control in Elementor\nDESCRIPTION: This PHP class defines a custom Elementor widget that utilizes the newly created currency control. It sets up the widget properties, registers controls, and renders the widget output.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/controls/simple-example.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Elementor Currency Widget.\n *\n * Elementor widget that uses the currency control.\n *\n * @since 1.0.0\n */\nclass Elementor_Currency_Widget extends \\Elementor\\Widget_Base {\n\n\t/**\n\t * Get widget name.\n\t *\n\t * Retrieve currency widget name.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Widget name.\n\t */\n\tpublic function get_name(): string {\n\t\treturn 'currency';\n\t}\n\n\t/**\n\t * Get widget title.\n\t *\n\t * Retrieve currency widget title.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Widget title.\n\t */\n\tpublic function get_title(): string {\n\t\treturn esc_html__( 'Currency', 'elementor-currency-control' );\n\t}\n\n\t/**\n\t * Get widget icon.\n\t *\n\t * Retrieve currency widget icon.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Widget icon.\n\t */\n\tpublic function get_icon(): string {\n\t\treturn 'eicon-cart-medium';\n\t}\n\n\t/**\n\t * Get widget categories.\n\t *\n\t * Retrieve the list of categories the currency widget belongs to.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return array Widget categories.\n\t */\n\tpublic function get_categories(): array {\n\t\treturn [ 'general' ];\n\t}\n\n\t/**\n\t * Get widget keywords.\n\t *\n\t * Retrieve the list of keywords the currency widget belongs to.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return array Widget keywords.\n\t */\n\tpublic function get_keywords(): array {\n\t\treturn [ 'currency', 'currencies' ];\n\t}\n\n\t/**\n\t * Get custom help URL.\n\t *\n\t * Retrieve a URL where the user can get more information about the widget.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Widget help URL.\n\t */\n\tpublic function get_custom_help_url(): string {\n\t\treturn 'https://developers.elementor.com/docs/widgets/';\n\t}\n\n\t/**\n\t * Whether the widget requires inner wrapper.\n\t *\n\t * Determine whether to optimize the DOM size.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return bool Whether to optimize the DOM size.\n\t */\n\tpublic function has_widget_inner_wrapper(): bool {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Whether the element returns dynamic content.\n\t *\n\t * Determine whether to cache the element output or not.\n\t *\n\t * @since 1.0.0\n\t * @access protected\n\t * @return bool Whether to cache the element output.\n\t */\n\tprotected function is_dynamic_content(): bool {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Register currency widget controls.\n\t *\n\t * Add input fields to allow the user to customize the widget settings.\n\t *\n\t * @since 1.0.0\n\t * @access protected\n\t */\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'elementor-currency-control' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'price',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Price', 'elementor-currency-control' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::NUMBER,\n\t\t\t\t'default' => 100,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'price_currency',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Currency', 'elementor-currency-control' ),\n\t\t\t\t'type' => 'currency',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\t/**\n\t * Render currency widget output on the frontend.\n\t *\n\t * Written in PHP and used to generate the final HTML.\n\t *\n\t * @since 1.0.0\n\t * @access protected\n\t */\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\n\t\tif ( empty( $settings['price_currency'] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\techo $settings['price_currency'] . ' ' . $settings['price'];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Page Settings Action to Section Context Menu\nDESCRIPTION: Adds a new action that opens the page settings panel when triggered from the section context menu. The action is added to the 'custom-section-actions' group.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/add-new-action.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nelementor.hooks.addFilter( 'elements/context-menu/groups', ( customGroups, elementType ) => {\n\n\tconst newAction = {\n\t\tname: 'page-settings',\n\t\ticon: 'eicon-cog',\n\t\ttitle: 'Page Settings',\n\t\tisEnabled: () => true,\n\t\tcallback: () => $e.run( 'panel/page-settings/settings' ),\n\t};\n\n\tif ( 'section' === elementType ) {\n\t\tcustomGroups.forEach( ( group ) => {\n\t\t\tif ( 'custom-section-actions' === group.name ) {\n\t\t\t\tgroup.actions.push( newAction );\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn customGroups;\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Comment Count Ordering Query Filter in PHP\nDESCRIPTION: Demonstrates how to order posts by comment count in an Elementor posts widget using query modification.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/custom-query-filter.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Order the posts in the query by comment count.\n *\n * @since 1.0.0\n * @param \\WP_Query $query The WordPress query instance.\n */\nfunction my_query_by_different_order( $query ) {\n\t$query->set( 'orderby', 'comment_count' );\n}\nadd_action( 'elementor/query/{$query_id}', 'my_query_by_different_order' );\n```\n\n----------------------------------------\n\nTITLE: Registering Scripts Before Elementor Frontend Scripts\nDESCRIPTION: Example showing how to register and enqueue custom frontend scripts before Elementor loads its own frontend scripts. Uses WordPress wp_register_script() and wp_enqueue_script() functions with Elementor's before_register_scripts and before_enqueue_scripts hooks.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/scripts-styles/frontend-scripts.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction my_plugin_register_frontend_scripts() {\n\twp_register_script( 'frontend-script-1', plugins_url( 'assets/js/frontend-script-1.js', __FILE__ ) );\n\twp_register_script( 'frontend-script-2', plugins_url( 'assets/js/frontend-script-2.js', __FILE__ ), [ 'external-library' ] );\n\twp_register_script( 'external-library', plugins_url( 'assets/js/libs/external-library.js', __FILE__ ) );\n}\nadd_action( 'elementor/frontend/before_register_scripts', 'my_plugin_register_frontend_scripts' );\n\nfunction my_plugin_enqueue_frontend_scripts() {\n\twp_enqueue_script( 'frontend-script-1' );\n\twp_enqueue_script( 'frontend-script-2' );\n}\nadd_action( 'elementor/frontend/before_enqueue_scripts', 'my_plugin_enqueue_frontend_scripts' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Hover Animation in Elementor Widget\nDESCRIPTION: Complete example of implementing a hover animation control in an Elementor widget. Shows how to register the control, apply the animation class in render(), and handle the animation in the JavaScript template.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-hover-animation.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'style_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'hover_animation',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Hover Animation', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::HOVER_ANIMATION,\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\n\t\t$elementClass = 'container';\n\n\t\tif ( $settings['hover_animation'] ) {\n\t\t\t$elementClass .= ' elementor-animation-' . $settings['hover_animation'];\n\t\t}\n\n\t\t$this->add_render_attribute( 'wrapper', 'class', $elementClass );\n\t\t?>\n\t\t<div <?php $this->print_render_attribute_string( 'wrapper' ); ?>>\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<#\n\t\tconst elementClass = 'container';\n\n\t\tif ( '' !== settings.hover_animation ) {\n\t\t\telementClass += ' elementor-animation-' + settings.hover_animation;\n\t\t}\n\n\t\tview.addRenderAttribute( 'wrapper', { 'class': elementClass } );\n\t\t#>\n\t\t<div {{{ view.getRenderAttributeString( 'wrapper' ) }}}>\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Elementor ACF Average Dynamic Tag Plugin\nDESCRIPTION: Main plugin file that registers a new dynamic tag group and the ACF Average dynamic tag. Includes plugin metadata and registration hooks.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/dynamic-tags/advanced-example.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Elementor ACF Average Dynamic Tag\n * Description: Add dynamic tag that returns an ACF average.\n * Plugin URI:  https://elementor.com/\n * Version:     1.0.0\n * Author:      Elementor Developer\n * Author URI:  https://developers.elementor.com/\n * Text Domain: elementor-acf-average-dynamic-tag\n *\n * Requires Plugins: elementor\n * Elementor tested up to: 3.25.0\n * Elementor Pro tested up to: 3.25.0\n */\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Register New Dynamic Tag Group.\n *\n * Register new site group for site-related tags.\n *\n * @since 1.0.0\n * @param \\Elementor\\Core\\DynamicTags\\Manager $dynamic_tags_manager Elementor dynamic tags manager.\n * @return void\n */\nfunction register_site_dynamic_tag_group( $dynamic_tags_manager ) {\n\n\t$dynamic_tags_manager->register_group(\n\t\t'site',\n\t\t[\n\t\t\t'title' => esc_html__( 'Site', 'elementor-acf-average-dynamic-tag' )\n\t\t]\n\t);\n\n}\nadd_action( 'elementor/dynamic_tags/register', 'register_site_dynamic_tag_group' );\n\n/**\n * Register ACF Average Dynamic Tag.\n *\n * Include dynamic tag file and register tag class.\n *\n * @since 1.0.0\n * @param \\Elementor\\Core\\DynamicTags\\Manager $dynamic_tags_manager Elementor dynamic tags manager.\n * @return void\n */\nfunction register_acf_average_dynamic_tag( $dynamic_tags_manager ) {\n\n\trequire_once( __DIR__ . '/dynamic-tags/acf-average-dynamic-tag.php' );\n\n\t$dynamic_tags_manager->register( new \\Elementor_Dynamic_Tag_ACF_Average );\n\n}\nadd_action( 'elementor/dynamic_tags/register', 'register_acf_average_dynamic_tag' );\n```\n\n----------------------------------------\n\nTITLE: Complex Page Structure with Multiple Widgets\nDESCRIPTION: Example of a complete page structure containing multiple widgets (heading, image, and button) nested within a container element. Demonstrates real-world usage of widget settings and nested elements.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/widget-element.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"About Page\",\n\t\"type\": \"page\",\n\t\"version\": \"0.4\",\n\t\"page_settings\": [],\n\t\"content\": [\n\t\t{\n\t\t\t\"id\": \"6af611eb\",\n\t\t\t\"elType\": \"container\",\n\t\t\t\"isInner\": false,\n\t\t\t\"settings\": [],\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"6a637978\",\n\t\t\t\t\t\"elType\": \"widget\",\n\t\t\t\t\t\"widgetType\": \"heading\",\n\t\t\t\t\t\"isInner\": false,\n\t\t\t\t\t\"settings\": {\n\t\t\t\t\t\t\"title\": \"Add Your Heading Text Here\",\n\t\t\t\t\t\t\"align\": \"center\"\n\t\t\t\t\t},\n\t\t\t\t\t\"elements\": []\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"687dba89\",\n\t\t\t\t\t\"elType\": \"widget\",\n\t\t\t\t\t\"widgetType\": \"image\",\n\t\t\t\t\t\"isInner\": false,\n\t\t\t\t\t\"settings\": {\n\t\t\t\t\t\t\"_padding\": {\n\t\t\t\t\t\t\t\"unit\": \"px\",\n\t\t\t\t\t\t\t\"top\": \"100\",\n\t\t\t\t\t\t\t\"right\": \"0\",\n\t\t\t\t\t\t\t\"bottom\": \"100\",\n\t\t\t\t\t\t\t\"left\": \"0\",\n\t\t\t\t\t\t\t\"isLinked\": false\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"elements\": []\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"6f58bb5\",\n\t\t\t\t\t\"elType\": \"widget\",\n\t\t\t\t\t\"widgetType\": \"button\",\n\t\t\t\t\t\"isInner\": false,\n\t\t\t\t\t\"settings\": {\n\t\t\t\t\t\t\"text\": \"Click Me\",\n\t\t\t\t\t\t\"button_text_color\": \"#000000\",\n\t\t\t\t\t\t\"background_color\": \"#E7DFF5\"\n\t\t\t\t\t},\n\t\t\t\t\t\"elements\": []\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Elementor Widget Class in PHP\nDESCRIPTION: Defines an Elementor widget class with methods for widget name, title, script dependencies, controls registration, and rendering. It includes a control with 'frontend_available' set to true.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/frontend-available.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\t/**\n\t * Get widget name.\n\t *\n\t * Retrieve test widget name.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Widget name.\n\t */\n\tpublic function get_name(): string {\n\t\treturn 'test_widget';\n\t}\n\n\t/**\n\t * Get widget title.\n\t *\n\t * Retrieve test widget title.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Widget title.\n\t */\n\tpublic function get_title(): string {\n\t\treturn esc_html__( 'Test Widget', 'textdomain' );\n\t}\n\n\t/**\n\t * Get script dependencies.\n\t *\n\t * Retrieve the list of script dependencies the element requires.\n\t *\n\t * @since 1.9.0\n\t * @access public\n\t * @return array Element scripts dependencies.\n\t */\n\tpublic function get_script_depends(): array {\n\t\treturn [ 'test-widget-handler' ];\n\t}\n\n\t/**\n\t * Register widget controls.\n\t *\n\t * Add input fields to allow the user to customize the widget settings.\n\t *\n\t * @since 1.0.0\n\t * @access protected\n\t */\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'some_number',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Some Number', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::NUMBER,\n\t\t\t\t'default' => 100,\n\t\t\t\t'frontend_available' => true,\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\t/**\n\t * Render widget output on the frontend.\n\t *\n\t * Written in PHP and used to generate the final HTML.\n\t *\n\t * @since 1.0.0\n\t * @access protected\n\t */\n\tprotected function render(): void {\n\t\t?>\n\t\t<div class=\"test-widget\"></div>\n\t\t<?php\n\t}\n\n\t/**\n\t * Render widget output in the editor.\n\t *\n\t * Written as a Backbone JavaScript template and used to generate the live preview.\n\t *\n\t * @since 1.0.0\n\t * @access protected\n\t */\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<div class=\"test-widget\"></div>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Repeater Data in JavaScript Template\nDESCRIPTION: This code snippet shows how to render the repeater control's data using a JavaScript template in Elementor. The `content_template` method is used to define the template, which utilizes Underscore.js syntax to iterate through the repeater items and generate the HTML output.  It also handles conditional rendering based on whether a link is provided.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/rendering-repeaters.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<#\n\t\tif ( ! settings.list.length ) {\n\t\t\treturn;\n\t\t}\n\t\t#>\n\t\t<ul>\n\t\t<# _.each( settings.list, function( item, index ) { #>\n\t\t\t<li>\n\t\t\t<# if ( item.link && item.link.url ) { #>\n\t\t\t\t<a href=\"{{{ item.link.url }}}\">{{{ item.text }}}</a>\n\t\t\t<# } else { #>\n\t\t\t\t{{{ item.text }}}\n\t\t\t<# } #>\n\t\t\t</li>\n\t\t<# } ); #>\n\t\t</ul>\n\t\t<?php\n\t}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Elements in Elementor (PHP)\nDESCRIPTION: This code snippet demonstrates the standard way to register new component elements in Elementor. It uses an action hook to access the component manager, imports the necessary classes, and registers them using the manager's registration method.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/managers/index.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction register_something( $some_manager ) {\n\n\trequire_once( __DIR__ . '/something/something-1.php' );\n\trequire_once( __DIR__ . '/something/something-2.php' );\n\n\t$some_manager->register( new \\Elementor_Something_1() );\n\t$some_manager->register( new \\Elementor_Something_2() );\n\n}\nadd_action( 'elementor/something/register', 'register_something' );\n```\n\n----------------------------------------\n\nTITLE: Adding Widget Group to Elementor Context Menu\nDESCRIPTION: Example of adding a new group with two custom actions to the widget context menu. The group includes actions with icons, titles, and callback functions that are triggered when clicking on widgets in the preview.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/add-new-group.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nelementor.hooks.addFilter( 'elements/context-menu/groups', ( customGroups, elementType ) => {\n\n\tconst newGroup = {\n\t\tname: 'custom-widget-actions',\n\t\tactions: [\n\t\t\t{\n\t\t\t\tname: 'widget-action-1',\n\t\t\t\ticon: 'eicon-alert',\n\t\t\t\ttitle: 'Widget Action 1',\n\t\t\t\tisEnabled: () => true,\n\t\t\t\tcallback: () => console.log( 'Test 1' ),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'widget-action-2',\n\t\t\t\ticon: 'eicon-alert',\n\t\t\t\ttitle: 'Widget Action 2',\n\t\t\t\tisEnabled: () => true,\n\t\t\t\tcallback: () => console.log( 'Test 2' ),\n\t\t\t}\n        ],\n\t}\n\n\tif ( 'widget' === elementType ) {\n\t\tcustomGroups.push( newGroup );\n\t}\n\n\treturn customGroups;\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Adding Specific Controls to Custom Action in Elementor Pro\nDESCRIPTION: Shows how to add specific controls (API Key and App ID) to a custom action. It includes creating a dedicated section for the custom action and using conditional display to show the section only when the action is selected.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-actions/action-controls.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Action extends \\ElementorPro\\Modules\\Forms\\Classes\\Action_Base {\n\n\tpublic function register_settings_section( $widget ): void {\n\n\t\t$widget->start_controls_section(\n\t\t\t'custom_action_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Custom Action', 'textdomain' ),\n\t\t\t\t'condition' => [\n\t\t\t\t\t'submit_actions' => $this->get_name(),\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$widget->add_control(\n\t\t\t'custom_action_api_key',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'API Key', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t]\n\t\t);\n\n\t\t$widget->add_control(\n\t\t\t'custom_action_app_id',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'App ID', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t]\n\t\t);\n\n\t\t$widget->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Help URL in Elementor Widget\nDESCRIPTION: Shows how to add a custom help URL to an Elementor widget by extending the Widget_Base class and implementing the get_custom_help_url method. The help link appears below all sections in the widget panel.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-promotions.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tpublic function get_custom_help_url(): string {\n\t\treturn 'https://example.com/widget-name';\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Console Log Action to Column Context Menu\nDESCRIPTION: Implements a new action that logs text to the browser console when triggered from the column context menu. The action is added to the 'custom-column-actions' group.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/add-new-action.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nelementor.hooks.addFilter( 'elements/context-menu/groups', ( customGroups, elementType ) => {\n\n\tconst newAction = {\n\t\tname: 'log',\n\t\ticon: 'eicon-code',\n\t\ttitle: 'Some Console Log',\n\t\tisEnabled: () => true,\n\t\tcallback: () => console.log( 'some text...' ),\n\t};\n\n\tif ( 'column' === elementType ) {\n\t\tcustomGroups.forEach( ( group ) => {\n\t\t\tif ( 'custom-column-actions' === group.name ) {\n\t\t\t\tgroup.actions.push( newAction );\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn customGroups;\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Controls to Elementor Page Settings in PHP\nDESCRIPTION: This function demonstrates how to add a new color control to the style tab of Elementor's Page Settings Panel. It uses the 'elementor/documents/register_controls' action hook to inject the new control.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor/page-settings-panel.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Register additional document controls.\n *\n * @param \\Elementor\\Core\\DocumentTypes\\PageBase $document The PageBase document instance.\n */\nfunction register_document_controls( $document ) {\n\n    if ( ! $document instanceof \\Elementor\\Core\\DocumentTypes\\PageBase || ! $document::get_property( 'has_elements' ) ) {\n        return;\n    }\n\n    $document->start_controls_section(\n        'test_section',\n        [\n            'label' => esc_html__( 'Test Section', 'textdomain' ),\n            'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n        ]\n    );\n\n\t$document->add_control(\n\t\t'test_color',\n\t\t[\n\t\t\t'label' => esc_html__( 'Test Color', 'textdomain' ),\n\t\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n\t\t\t'selectors' => [\n\t\t\t\t'{{WRAPPER}}' => 'background-color: {{VALUE}}',\n\t\t\t],\n\t\t]\n\t);\n\n    $document->end_controls_section();\n}\nadd_action( 'elementor/documents/register_controls', 'register_document_controls' );\n```\n\n----------------------------------------\n\nTITLE: Registering and Enqueuing Editor Scripts After Elementor Scripts\nDESCRIPTION: This snippet demonstrates how to register custom scripts and enqueue them after Elementor's scripts are loaded. It uses the 'wp_enqueue_scripts' hook for registration and 'elementor/editor/after_enqueue_scripts' for enqueuing.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/scripts-styles/editor-scripts.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction my_plugin_register_editor_scripts() {\n\twp_register_script( 'editor-script-1', plugins_url( 'assets/js/editor-script-1.js', __FILE__ ) );\n\twp_register_script( 'editor-script-2', plugins_url( 'assets/js/editor-script-2.js', __FILE__ ), [ 'external-library' ] );\n\twp_register_script( 'external-library', plugins_url( 'assets/js/libs/external-library.js', __FILE__ ) );\n}\nadd_action( 'wp_enqueue_scripts', 'my_plugin_register_editor_scripts' );\n\nfunction my_plugin_enqueue_editor_scripts() {\n\twp_enqueue_script( 'editor-script-1' );\n\twp_enqueue_script( 'editor-script-2' );\n}\nadd_action( 'elementor/editor/after_enqueue_scripts', 'my_plugin_enqueue_editor_scripts' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Box Shadow Control in Elementor Widget\nDESCRIPTION: Demonstrates how to integrate a box shadow group control in an Elementor widget. The example shows the complete widget class implementation including control registration, render method, and content template.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/group-control-box-shadow.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_group_control(\n\t\t\t\\Elementor\\Group_Control_Box_Shadow::get_type(),\n\t\t\t[\n\t\t\t\t'name' => 'box_shadow',\n\t\t\t\t'selector' => '{{WRAPPER}} .your-class',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Values Check with 'in' Operator in Advanced Conditions\nDESCRIPTION: Shows how to check against multiple values using the 'in' operator in advanced conditions, useful for checking if a value matches any in a set of values.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/conditional-display.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n'conditions' => [\n\t'terms' => [\n\t\t[\n\t\t\t'name' => 'background_type',\n\t\t\t'operator' => 'in',\n\t\t\t'value' => [ 'classic', 'gradient', 'video', 'slideshow' ],\n\t\t],\n\t],\n],\n```\n\n----------------------------------------\n\nTITLE: Defining Widget Dependencies in PHP\nDESCRIPTION: Shows how to define script and style dependencies in an Elementor widget class by implementing get_script_depends() and get_style_depends() methods.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-dependencies.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tpublic function get_script_depends(): array {\n\t\treturn [ 'script-handle' ];\n\t}\n\n\tpublic function get_style_depends(): array {\n\t\treturn [ 'style-handle' ];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Concrete Example of UI Hook Implementation in Elementor\nDESCRIPTION: This snippet shows a concrete implementation of a UI hook in Elementor. It demonstrates how to create a FooterSaverRefreshMenu hook that runs after the 'document/elements/settings' command.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/js/hooks.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport HookUIAfter from 'elementor-api/modules/hooks/ui/after';\n\nexport class FooterSaverRefreshMenu extends HookUIAfter {\n\tgetCommand() {\n\t\treturn 'document/elements/settings';\n\t}\n\n\tgetId() {\n\t\treturn 'footer-save-refresh-menu--document/elements/settings';\n\t}\n\n\tgetContainerType() {\n\t\treturn 'document';\n\t}\n\n\tgetConditions( args ) {\n\t\treturn args.settings && 'undefined' !== typeof args.settings.post_status;\n\t}\n\n\tapply( args ) {\n\t\tconst { footerSaver } = $e.components.get( 'document/save' );\n\n\t\tfooterSaver.setMenuItems( args.container.document );\n\n\t\tfooterSaver.refreshWpPreview();\n\t}\n}\n\nexport default FooterSaverRefreshMenu;\n```\n\n----------------------------------------\n\nTITLE: Registering Elementor Theme Locations in functions.php\nDESCRIPTION: Function to register all core Elementor theme locations by hooking into the 'elementor/theme/register_locations' action.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/migrating-themes-with-functions.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction theme_prefix_register_elementor_locations( $elementor_theme_manager ) {\n\n\t$elementor_theme_manager->register_all_core_location();\n\n}\nadd_action( 'elementor/theme/register_locations', 'theme_prefix_register_elementor_locations' );\n```\n\n----------------------------------------\n\nTITLE: Registering New Conditions in Elementor Pro\nDESCRIPTION: This PHP code snippet demonstrates how to register new conditions in Elementor Pro. It hooks into the 'elementor/theme/register_conditions' action and uses the conditions manager to register new condition instances.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/theme-conditions/add-new-condition.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction register_new_theme_conditions( $conditions_manager  ) {\n\n\trequire_once( __DIR__ . '/theme-conditions/condition-1.php' );\n\trequire_once( __DIR__ . '/theme-conditions/condition-2.php' );\n\n\t$conditions_manager->get_condition( 'general' )->register_sub_condition( new \\Condition_1() );\n\t$conditions_manager->get_condition( 'general' )->register_sub_condition( new \\Condition_2() );\n\n}\nadd_action( 'elementor/theme/register_conditions', 'register_new_theme_conditions' );\n```\n\n----------------------------------------\n\nTITLE: Conditional Display for Repeater Inner Fields\nDESCRIPTION: Demonstrates how to conditionally display fields inside a repeater control based on another field within the same repeater.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/conditional-display.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'list',\n\t[\n\t\t'label' => esc_html__( 'Repeater List', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::REPEATER,\n\t\t'fields' => [\n\t\t\t[\n\t\t\t\t'name' => 'display_content',\n\t\t\t\t'label' => esc_html__( 'Display Content', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::SWITCHER,\n\t\t\t\t'label_on' => esc_html__( 'Yes', 'textdomain' ),\n\t\t\t\t'label_off' => esc_html__( 'No', 'textdomain' ),\n\t\t\t\t'return_value' => 'yes',\n\t\t\t\t'default' => 'yes',\n\t\t\t],\n\t\t\t[\n\t\t\t\t'name' => 'list_title',\n\t\t\t\t'label' => esc_html__( 'Title', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t],\n\t\t\t[\n\t\t\t\t'name' => 'list_content',\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::WYSIWYG,\n\t\t\t\t'condition' => [\n\t\t\t\t\t'display_content' => 'yes',\n\t\t\t\t],\n\t\t\t],\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Registering and Enqueuing Editor Styles Before Elementor Styles in PHP\nDESCRIPTION: This snippet shows how to register and enqueue custom stylesheets before Elementor styles are registered and enqueued. It uses the 'elementor/editor/before_register_styles' and 'elementor/editor/before_enqueue_styles' action hooks.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/scripts-styles/editor-styles.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction my_plugin_register_editor_styles() {\n\twp_register_style( 'editor-style-1', plugins_url( 'assets/css/editor-style-1.css', __FILE__ ) );\n\twp_register_style( 'editor-style-2', plugins_url( 'assets/css/editor-style-2.css', __FILE__ ), [ 'external-framework' ] );\n\twp_register_style( 'external-framework', plugins_url( 'assets/css/libs/external-framework.css', __FILE__ ) );\n}\nadd_action( 'elementor/editor/before_register_styles', 'my_plugin_register_editor_styles' );\n\nfunction my_plugin_enqueue_editor_styles() {\n\twp_enqueue_style( 'editor-style-1' );\n\twp_enqueue_style( 'editor-style-2' );\n}\nadd_action( 'elementor/editor/before_enqueue_styles', 'my_plugin_enqueue_editor_styles' );\n```\n\n----------------------------------------\n\nTITLE: Implementing the enqueue() Method in Elementor Custom Controls\nDESCRIPTION: This example shows how to implement the enqueue() method in a custom Elementor control class to register and load external CSS and JavaScript files. The method registers and enqueues both style and script files from the plugin's assets directory.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/controls/control-enqueue.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Control extends \\Elementor\\Base_Control {\n\n\tprotected function enqueue(): void {\n\n\t\t// Styles\n\t\twp_register_style( 'control-style', plugins_url( 'assets/css/control-style.css', __FILE__ ) );\n\t\twp_enqueue_style( 'control-style' );\n\n\t\t// Scripts\n\t\twp_register_script( 'control-script', plugins_url( 'assets/js/control-script.js', __FILE__ ) );\n\t\twp_enqueue_script( 'control-script' );\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Typography Schemes to Global Typography in Elementor\nDESCRIPTION: This code demonstrates how to replace deprecated Typography schemes with the new Global Typography system in Elementor 3.0+. The example shows conversion of typography controls for headings, subheadings, text, and accent elements.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/deprecations/complex-example.md#2025-04-20_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n$this->add_group_control(\n\t\\Elementor\\Group_Control_Typography::get_type(),\n\t[\n\t\t'name' => 'heading_typography',\n-\t\t'scheme' => \\Elementor\\Core\\Schemes\\Typography::TYPOGRAPHY_1,\n+\t\t'global' => [\n+\t\t\t'default' => \\Elementor\\Core\\Kits\\Documents\\Tabs\\Global_Typography::TYPOGRAPHY_PRIMARY,\n+\t\t],\n\t\t'selector' => '{{WRAPPER}} .heading-class',\n\t]\n);\n\n$this->add_group_control(\n\t\\Elementor\\Group_Control_Typography::get_type(),\n\t[\n\t\t'name' => 'subheading_typography',\n-\t\t'scheme' => \\Elementor\\Core\\Schemes\\Typography::TYPOGRAPHY_2,\n+\t\t'global' => [\n+\t\t\t'default' => \\Elementor\\Core\\Kits\\Documents\\Tabs\\Global_Typography::TYPOGRAPHY_SECONDARY,\n+\t\t],\n\t\t'selector' => '{{WRAPPER}} .subheading-class',\n\t]\n);\n\n$this->add_group_control(\n\t\\Elementor\\Group_Control_Typography::get_type(),\n\t[\n\t\t'name' => 'text_typography',\n-\t\t'scheme' => \\Elementor\\Core\\Schemes\\Typography::TYPOGRAPHY_3,\n+\t\t'global' => [\n+\t\t\t'default' => \\Elementor\\Core\\Kits\\Documents\\Tabs\\Global_Typography::TYPOGRAPHY_TEXT,\n+\t\t],\n\t\t'selector' => '{{WRAPPER}} .text-class',\n\t]\n);\n\n$this->add_group_control(\n\t\\Elementor\\Group_Control_Typography::get_type(),\n\t[\n\t\t'name' => 'accent_typography',\n-\t\t'scheme' => \\Elementor\\Core\\Schemes\\Typography::TYPOGRAPHY_4,\n+\t\t'global' => [\n+\t\t\t'default' => \\Elementor\\Core\\Kits\\Documents\\Tabs\\Global_Typography::TYPOGRAPHY_ACCENT,\n+\t\t],\n\t\t'selector' => '{{WRAPPER}} .accent-class',\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sidebar Location in PHP\nDESCRIPTION: Advanced implementation showing how to add custom Elementor locations for single post content and sidebar, with fallbacks to default templates.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/displaying-locations.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php get_header(); ?>\n\n<div id=\"primary\" class=\"content-area\">\n\n\t<main id=\"main\" class=\"site-main\" role=\"main\">\n\t\t<?php\n\t\t// Elementor `single` location\n\t\tif ( ! function_exists( 'elementor_theme_do_location' ) || ! elementor_theme_do_location( 'single' ) ) {\n\t\t\tget_template_part( 'template-parts/single' );\n\t\t}\n\t\t?>\n\t</main>\n\n\t<aside id=\"secondary\" class=\"sidebar\" role=\"complementary\">\n\t\t<?php\n\t\t// Elementor `main-sidebar` location\n\t\tif ( ! function_exists( 'elementor_theme_do_location' ) || ! elementor_theme_do_location( 'main-sidebar' ) ) {\n\t\t\tget_sidebar( 'main' );\n\t\t}\n\t\t?>\n\t</aside>\n\n</div>\n\n<?php get_footer(); ?>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Scripts for Elementor Controls in PHP\nDESCRIPTION: This snippet demonstrates how to register custom scripts for Elementor controls using the wp_register_script() function. It registers multiple scripts, including an external library dependency.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/scripts-styles/control-scripts.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction my_plugin_register_control_scripts() {\n\twp_register_script( 'control-script-1', plugins_url( 'assets/js/control-script-1.js', __FILE__ ) );\n\twp_register_script( 'control-script-2', plugins_url( 'assets/js/control-script-2.js', __FILE__ ), [ 'external-library' ] );\n\twp_register_script( 'external-library', plugins_url( 'assets/js/libs/external-library.js', __FILE__ ) );\n}\nadd_action( 'wp_enqueue_scripts', 'my_plugin_register_control_scripts' );\n```\n\n----------------------------------------\n\nTITLE: Rendering Field Attributes using Elementor's Method\nDESCRIPTION: Implementation showing how to properly add field attributes using Elementor's add_render_attribute() method instead of hardcoding HTML attributes.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-fields/field-render.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Field extends \\ElementorPro\\Modules\\Forms\\Fields\\Field_Base {\n\n\tpublic function render( $item, $item_index, $form ): void {\n\t\t$form->add_render_attribute(\n\t\t\t'input' . $item_index,\n\t\t\t[\n\t\t\t\t'type'        => 'text',\n\t\t\t\t'class'       => 'elementor-test-field',\n\t\t\t\t'placeholder' => esc_html__( 'Some placeholder', 'textdomain' ),\n\t\t\t]\n\t\t);\n\n\t\techo '<input ' . $form->get_render_attribute_string( 'input' . $item_index ) . '>';\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Elements Sub-Component Implementation\nDESCRIPTION: Shows the implementation of an elements sub-component with namespace definition.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/js/components.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class Component extends $e.modules.ComponentBase {\n    getNamespace() {\n        return 'elements';\n    }\n}\n\nexport default class Component;\n```\n\n----------------------------------------\n\nTITLE: Typography Group Control Implementation\nDESCRIPTION: Example of implementing typography controls in an Elementor widget. Shows how to add controls for font properties like size, family, weight, and styling.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/group-control.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'style_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_group_control(\n\t\t\t\\Elementor\\Group_Control_Typography::get_type(),\n\t\t\t[\n\t\t\t\t'name' => 'title_typography',\n\t\t\t\t'selector' => '{{WRAPPER}} .title',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Controls in Elementor Widget\nDESCRIPTION: This code snippet demonstrates how to add Select controls to an Elementor widget. It includes examples of a simple select control for border style and a grouped select control for custom animations.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-select.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'style_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'border_style',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Border Style', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::SELECT,\n\t\t\t\t'default' => 'solid',\n\t\t\t\t'options' => [\n\t\t\t\t\t'' => esc_html__( 'Default', 'textdomain' ),\n\t\t\t\t\t'none' => esc_html__( 'None', 'textdomain' ),\n\t\t\t\t\t'solid'  => esc_html__( 'Solid', 'textdomain' ),\n\t\t\t\t\t'dashed' => esc_html__( 'Dashed', 'textdomain' ),\n\t\t\t\t\t'dotted' => esc_html__( 'Dotted', 'textdomain' ),\n\t\t\t\t\t'double' => esc_html__( 'Double', 'textdomain' ),\n\t\t\t\t],\n\t\t\t\t'selectors' => [\n\t\t\t\t\t'{{WRAPPER}} .your-class' => 'border-style: {{VALUE}};',\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'custom_animation',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Animation', 'textdomain' ),\n\t\t\t\t'type' => Controls_Manager::SELECT,\n\t\t\t\t'groups' => [\n\t\t\t\t\t[\n\t\t\t\t\t\t'label' => esc_html__( 'None', 'textdomain' ),\n\t\t\t\t\t\t'options' => [\n\t\t\t\t\t\t\t'' => esc_html__( 'None', 'textdomain' ),\n\t\t\t\t\t\t],\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t'label' => esc_html__( 'Slide', 'textdomain' ),\n\t\t\t\t\t\t'options' => [\n\t\t\t\t\t\t\t'slide-from-right' => esc_html__( 'Slide In Right', 'textdomain' ),\n\t\t\t\t\t\t\t'slide-from-left' => esc_html__( 'Slide In Left', 'textdomain' ),\n\t\t\t\t\t\t\t'slide-from-top' => esc_html__( 'Slide In Up', 'textdomain' ),\n\t\t\t\t\t\t\t'slide-from-bottom' => esc_html__( 'Slide In Down', 'textdomain' ),\n\t\t\t\t\t\t],\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t'label' => esc_html__( 'Zoom', 'textdomain' ),\n\t\t\t\t\t\t'options' => [\n\t\t\t\t\t\t\t'grow' => esc_html__( 'Grow', 'textdomain' ),\n\t\t\t\t\t\t\t'shrink' => esc_html__( 'Shrink', 'textdomain' ),\n\t\t\t\t\t\t\t'zoom-in' => esc_html__( 'Zoom In', 'textdomain' ),\n\t\t\t\t\t\t\t'zoom-out' => esc_html__( 'Zoom Out', 'textdomain' ),\n\t\t\t\t\t\t],\n\t\t\t\t\t],\n\t\t\t\t],\n\t\t\t\t'prefix_class' => 'custom-animation-',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n```\n\n----------------------------------------\n\nTITLE: Implementing Core Data Methods for Elementor Dynamic Tags\nDESCRIPTION: This snippet demonstrates how to implement the four required data methods for an Elementor dynamic tag. These methods define the tag's unique ID, display title, group association, and control categories.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/dynamic-tags/dynamic-tags-data.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Tag extends \\Elementor\\Core\\DynamicTags\\Tag {\n\n\tpublic function get_name(): string {\n\t\treturn 'tag-name';\n\t}\n\n\tpublic function get_title(): string {\n\t\treturn esc_html__( 'Dynamic Tag Name', 'textdomain' );\n\t}\n\n\tpublic function get_group(): array {\n\t\treturn [ 'group-name' ];\n\t}\n\n\tpublic function get_categories(): array {\n\t\treturn [ \\Elementor\\Modules\\DynamicTags\\Module::TEXT_CATEGORY ];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Elementor Theme Locations in functions.php\nDESCRIPTION: Registers Elementor theme locations for header, footer, single, and archive templates. Also defines corresponding action hooks and template loading functions for each location.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/migrating-themes-with-hooks.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Register Elementor locations\nfunction theme_prefix_register_elementor_locations( $elementor_theme_manager ) {\n\t$elementor_theme_manager->register_location(\n\t\t'header',\n\t\t[\n\t\t\t'hook' => 'theme_prefix_header',\n\t\t\t'remove_hooks' => [ 'theme_prefix_print_elementor_header' ],\n\t\t]\n\t);\n\t$elementor_theme_manager->register_location(\n\t\t'footer',\n\t\t[\n\t\t\t'hook' => 'theme_prefix_footer',\n\t\t\t'remove_hooks' => [ 'theme_prefix_print_elementor_footer' ],\n\t\t]\n\t);\n\t$elementor_theme_manager->register_location(\n\t\t'single',\n\t\t[\n\t\t\t'hook' => 'theme_prefix_single',\n\t\t\t'remove_hooks' => [ 'theme_prefix_print_elementor_single' ],\n\t\t]\n\t);\n\t$elementor_theme_manager->register_location(\n\t\t'archive',\n\t\t[\n\t\t\t'hook' => 'theme_prefix_archive',\n\t\t\t'remove_hooks' => [ 'theme_prefix_print_elementor_archive' ],\n\t\t]\n\t);\n}\nadd_action( 'elementor/theme/register_locations', 'theme_prefix_register_elementor_locations' );\n\n// Theme header\nfunction theme_prefix_print_elementor_header() {\n\tget_template_part( 'templates-parts/header' );\n}\nadd_action( 'theme_prefix_header', 'theme_prefix_print_elementor_header' );\n\n// Theme footer\nfunction theme_prefix_print_elementor_footer() {\n\tget_template_part( 'templates-parts/footer' );\n}\nadd_action( 'theme_prefix_footer', 'theme_prefix_print_elementor_footer' );\n\n// Single page\nfunction theme_prefix_print_elementor_single() {\n\tget_template_part( 'templates-parts/single' );\n}\nadd_action( 'theme_prefix_single', 'theme_prefix_print_elementor_single' );\n\n// Archive page\nfunction theme_prefix_print_elementor_archive() {\n\tget_template_part( 'templates-parts/archive' );\n}\nadd_action( 'theme_prefix_archive', 'theme_prefix_print_elementor_archive' );\n```\n\n----------------------------------------\n\nTITLE: Basic Field Validation in Elementor Forms\nDESCRIPTION: Implementation of basic field validation method that checks if a number is positive. The validation method runs when the form is submitted and adds error messages using the ajax handler if validation fails.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-fields/field-validation.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Field extends \\ElementorPro\\Modules\\Forms\\Fields\\Field_Base {\n\n\tpublic function validation( $field, $record, $ajax_handler ): void {\n\n\t\tif ( empty( $field['value'] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( (int) $field['value'] > 0 ) {\n\t\t\t$ajax_handler->add_error(\n\t\t\t\t$field['id'],\n\t\t\t\tesc_html__( 'The field must contain a positive number.', 'textdomain' )\n\t\t\t);\n\t\t}\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Elementor Frontend Content for Membership Restriction in PHP\nDESCRIPTION: This code snippet demonstrates how to use the 'elementor/frontend/the_content' action hook to check if content is restricted by a membership plugin. If the content is not allowed, it displays a 'Forbidden' message instead of the original content.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/frontend-content.md#2025-04-20_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * Check whether the content is restricted by a membership\n * plugin. If it does, show a restriction text.\n *\n * Otherwise, display the page content.\n *\n * @since 1.0.0\n * @param string $content The content.\n */\nfunction restrict_content_check( $content ) {\n\n\tif ( ! membership_plugin_is_content_allowed() ) {\n\t\t$content = esc_html__( 'Forbidden', 'textdomain' );\n\t\treturn;\n\t}\n\n\treturn $content;\n\n}\nadd_action( 'elementor/frontend/the_content', 'restrict_content_check' );\n```\n\n----------------------------------------\n\nTITLE: Enqueueing Registered Scripts in Elementor Control Class in PHP\nDESCRIPTION: This snippet shows how to enqueue the previously registered scripts within an Elementor control class. The enqueue() method is used to ensure the scripts are only loaded in the Elementor editor.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/scripts-styles/control-scripts.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Control extends \\Elementor\\Base_Control {\n\n\tprotected function enqueue(): void {\n\t\twp_enqueue_script( 'control-script-1' );\n\t\twp_enqueue_script( 'control-script-2' );\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Section Group to Elementor Context Menu\nDESCRIPTION: Implementation of adding a new group to the section context menu. The group structure is defined but actions are left empty for custom implementation.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/add-new-group.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nelementor.hooks.addFilter( 'elements/context-menu/groups', ( customGroups, elementType ) => {\n\n\tconst newGroup = {\n\t\tname: 'custom-section-actions',\n\t\tactions: [\n\t\t\t/* Actions */\n\t\t],\n\t}\n\n\tif ( 'section' === elementType ) {\n\t\tcustomGroups.push( newGroup );\n\t}\n\n\treturn customGroups;\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing Elementor Header Location in header.php\nDESCRIPTION: Header template implementation with Elementor header location support, including HTML doctype, meta tags, and fallback to default template part.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/migrating-themes-with-functions.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<!doctype html>\n<html <?php language_attributes(); ?>>\n<head>\n\t<meta charset=\"<?php bloginfo( 'charset' ); ?>\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\t<link rel=\"profile\" href=\"http://gmpg.org/xfn/11\">\n\t<?php wp_head(); ?>\n</head>\n<body <?php body_class(); ?>>\n\n<?php\n// Elementor `header` location\nif ( ! function_exists( 'elementor_theme_do_location' ) || ! elementor_theme_do_location( 'header' ) ) {\n\tget_template_part( 'template-parts/header' );\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Image Rendering in Elementor Widget\nDESCRIPTION: Demonstrates basic image rendering in an Elementor widget using Control_Media. Shows how to add a media control and render images using both direct URL output and WordPress attachment functions.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/rendering-media.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'section_content',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'image',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Choose Image', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::MEDIA,\n\t\t\t\t'default' => [\n\t\t\t\t\t'url' => \\Elementor\\Utils::get_placeholder_image_src(),\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\n\t\t// Get image url\n\t\techo '<img src=\"' . esc_url( $settings['image']['url'] ) . '\" alt=\"\">';\n\n\t\t// Get image by id\n\t\techo wp_get_attachment_image( $settings['image']['id'], 'thumbnail' );\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<img src=\"{{{ settings.image.url }}}\">\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Controls and Excluding from Export in Elementor Pro\nDESCRIPTION: Example of registering a new section with two controls (API Key and App ID) and then excluding them from the exported data using the on_export() method.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-actions/action-on-export.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Action extends \\ElementorPro\\Modules\\Forms\\Classes\\Action_Base {\n\n\tpublic function register_settings_section( $widget ): void {\n\n\t\t$widget->start_controls_section(\n\t\t\t'custom_action_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Custom Action', 'textdomain' ),\n\t\t\t\t'condition' => [\n\t\t\t\t\t'submit_actions' => $this->get_name(),\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$widget->add_control(\n\t\t\t'custom_action_api_key',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'API Key', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t]\n\t\t);\n\n\t\t$widget->add_control(\n\t\t\t'custom_action_app_id',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'App ID', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t]\n\t\t);\n\n\t\t$widget->end_controls_section();\n\n\t}\n\n\tpublic function on_export( $element ): array {\n\n\t\tunset(\n\t\t\t$element['custom_action_api_key'],\n\t\t\t$element['custom_action_app_id'],\n\t\t);\n\n\t\treturn $element;\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Elementor List Widget Items in PHP\nDESCRIPTION: This code handles the rendering of individual list items, including support for linked items. It processes each item from the repeater field, adding render attributes and inline editing capabilities.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/advanced-example.md#2025-04-20_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$repeater_setting_key = $this->get_repeater_setting_key( 'text', 'list_items', $index );\n$this->add_render_attribute( $repeater_setting_key, 'class', 'elementor-list-widget-text' );\n$this->add_inline_editing_attributes( $repeater_setting_key );\n?>\n<li <?php $this->print_render_attribute_string( $repeater_setting_key ); ?>>\n\t<?php\n\t$title = $settings['list_items'][$index]['text'];\n\n\tif ( ! empty( $item['link']['url'] ) ) {\n\t\t$this->add_link_attributes( \"link_{$index}\", $item['link'] );\n\t\t$linked_title = sprintf( '<a %1$s>%2$s</a>', $this->get_render_attribute_string( \"link_{$index}\" ), $title );\n\t\techo $linked_title;\n\t} else {\n\t\techo $title;\n\t}\n\t?>\n</li>\n<?php\n}\n?>\n</<?php echo $html_tag[ $settings['marker_type'] ]; ?>>\n<?php\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Control in Elementor Widget\nDESCRIPTION: This snippet demonstrates how to add a Button Control to an Elementor widget. It creates a 'Delete Content' button in the Style tab that triggers a custom event when clicked.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-button.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'style_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'delete_content',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Delete Content', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::BUTTON,\n\t\t\t\t'separator' => 'before',\n\t\t\t\t'button_type' => 'success',\n\t\t\t\t'text' => esc_html__( 'Delete', 'textdomain' ),\n\t\t\t\t'event' => 'namespace:editor:delete',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Number Control in Elementor Widget (PHP)\nDESCRIPTION: This snippet demonstrates how to add a Number Control to an Elementor widget, including setting up the control, rendering the output, and creating a JavaScript template. It shows how to set min/max values, step increments, and default values for the control.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-number.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'price',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Price', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::NUMBER,\n\t\t\t\t'min' => 5,\n\t\t\t\t'max' => 100,\n\t\t\t\t'step' => 5,\n\t\t\t\t'default' => 10,\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\n\t\tif ( empty( $settings['price'] ) ) {\n\t\t\treturn;\n\t\t}\n\t\t?>\n\t\t<span class=\"price\">\n\t\t\t<?php echo $settings['price']; ?>\n\t\t</span>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<#\n\t\tif ( '' === settings.price ) {\n\t\t\treturn;\n\t\t}\n\t\t#>\n\t\t<span class=\"price\">\n\t\t\t{{{ settings.price }}}\n\t\t</span>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Request on Elementor Form Submission in PHP\nDESCRIPTION: Example of using the run() method to send an HTTP POST request every time an Elementor form is submitted. This uses the WordPress wp_remote_post() function.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-actions/action-run.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Action extends \\ElementorPro\\Modules\\Forms\\Classes\\Action_Base {\n\n\tpublic function run( $record, $ajax_handler ): void {\n\n\t\twp_remote_post( /* ... */ )\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Dynamic Tag Rendering in PHP\nDESCRIPTION: Demonstrates the basic implementation of the render() method in a dynamic tag class. This example outputs a random number using PHP's rand() function.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/dynamic-tags/dynamic-tags-rendering.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Tag extends \\Elementor\\Core\\DynamicTags\\Tag {\n\n\tpublic function render(): void {\n\n\t\techo rand();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Field Validation with Custom Controls\nDESCRIPTION: Extended validation implementation that includes both basic number validation and custom minimum value validation using field controls. Shows how to access and validate against custom control values.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-fields/field-validation.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Field extends \\ElementorPro\\Modules\\Forms\\Fields\\Field_Base {\n\n\tpublic function validation( $field, $record, $ajax_handler ): void {\n\n\t\tif ( empty( $field['value'] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( (int) $field['value'] > 0 ) {\n\t\t\t$ajax_handler->add_error(\n\t\t\t\t$field['id'],\n\t\t\t\tesc_html__( 'The field must contain a positive number.', 'textdomain' )\n\t\t\t);\n\t\t}\n\n\t\tif ( ( ! empty( $field['minimum'] ) ) && ( (int) $field['value'] > $field['minimum'] ) ) {\n\t\t\t$ajax_handler->add_error(\n                $field['id'],\n                sprintf( esc_html__( 'The field must be greater than %s.', 'elementor-pro' ), $field['minimum'] )\n            );\n\t\t}\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Display for Entire Repeater Control\nDESCRIPTION: Shows how to conditionally display an entire repeater control based on a switcher control value in Elementor.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/conditional-display.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'display_list',\n\t[\n\t\t'label' => esc_html__( 'Display List', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::SWITCHER,\n\t\t'label_on' => esc_html__( 'Yes', 'textdomain' ),\n\t\t'label_off' => esc_html__( 'No', 'textdomain' ),\n\t\t'return_value' => 'yes',\n\t\t'default' => 'yes',\n\t]\n);\n\n$this->add_control(\n\t'list',\n\t[\n\t\t'label' => esc_html__( 'Repeater List', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::REPEATER,\n\t\t'fields' => [\n\t\t\t[\n\t\t\t\t'name' => 'list_title',\n\t\t\t\t'label' => esc_html__( 'Title', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t],\n\t\t\t[\n\t\t\t\t'name' => 'list_content',\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::WYSIWYG,\n\t\t\t],\n\t\t],\n\t\t'condition' => [\n\t\t\t'display_list' => 'yes',\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Extending Default Control Settings in Elementor using get_default_settings()\nDESCRIPTION: This example demonstrates how to create a custom Elementor control class that overrides the default settings and adds new custom settings. The method returns an array with modified defaults for existing settings (label_block, separator) and adds new custom settings.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/controls/control-settings.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Control extends \\Elementor\\Base_Control {\n\n\tprotected function get_default_settings(): array {\n\n\t\treturn [\n\t\t\t'label_block' => true,\n\t\t\t'separator' => 'after',\n\t\t\t'new_settings_value' => '',\n\t\t\t'new_multiple_values' => [],\n\t\t];\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Elementor Locations in index.php\nDESCRIPTION: Main template file handling archive, single, and 404 Elementor locations with conditional logic and fallbacks.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/migrating-themes-with-functions.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nget_header();\n\nif ( is_archive() || is_home() || is_search() ) {\n\t// Elementor `archive` location\n\tif ( ! function_exists( 'elementor_theme_do_location' ) || ! elementor_theme_do_location( 'archive' ) ) {\n\t\tget_template_part( 'template-parts/archive' );\n\t}\n} elseif ( is_singular() ) {\n\t// Elementor `single` location\n\tif ( ! function_exists( 'elementor_theme_do_location' ) || ! elementor_theme_do_location( 'single' ) ) {\n\t\tget_template_part( 'template-parts/single' );\n\t}\n} else {\n\t// Elementor `404` location\n\tif ( ! function_exists( 'elementor_theme_do_location' ) || ! elementor_theme_do_location( 'single' ) ) {\n\t\tget_template_part( 'template-parts/404' );\n\t}\n}\n\nget_footer();\n```\n\n----------------------------------------\n\nTITLE: Basic Inline Editing Implementation in PHP\nDESCRIPTION: Demonstrates the basic structure for adding inline editing support to an Elementor widget. Shows implementation in both render() and content_template() methods using the add_inline_editing_attributes() function.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/rendering-inline-editing.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function render(): void {\n\t\t$this->add_inline_editing_attributes( 'text', 'advanced' );\n\t\techo '<div ' . $this->get_render_attribute_string( 'text' ) . '>' . $this->get_settings( 'text' ) . '</div>';\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<# view.addInlineEditingAttributes( 'text', 'advanced' ); #>\n\t\t<div {{{ view.getRenderAttributeString( 'text' ) }}}>{{{ settings.text }}}</div>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Control Tabs with Normal and Hover States in Elementor Widget\nDESCRIPTION: This example shows a more comprehensive implementation of control tabs within an Elementor widget. It creates a style section with two tabs for 'Normal' and 'Hover' states, each containing multiple controls.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-tabs.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'style_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style Section', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->start_controls_tabs(\n\t\t\t'style_tabs'\n\t\t);\n\n\t\t$this->start_controls_tab(\n\t\t\t'style_normal_tab',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Normal', 'textdomain' ),\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control();\n\n\t\t$this->add_control();\n\n\t\t$this->add_control();\n\n\t\t$this->end_controls_tab();\n\n\t\t$this->start_controls_tab(\n\t\t\t'style_hover_tab',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Hover', 'textdomain' ),\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control();\n\n\t\t$this->add_control();\n\n\t\t$this->add_control();\n\n\t\t$this->end_controls_tab();\n\n\t\t$this->end_controls_tabs();\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Ticket ID Field in Elementor Pro Form\nDESCRIPTION: This snippet shows how to validate a Ticket ID field in an Elementor Pro form. It checks if the Ticket ID matches the format XXX-XXXX using a regular expression and adds an error message if it doesn't match.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/form-validation.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction elementor_form_validation( $record, $ajax_handler ) {\n\t$fields = $record->get_field( [\n\t\t'id' => 'ticket_id',\n\t] );\n\n\tif ( empty( $fields ) ) {\n\t\treturn;\n\t}\n\n\t$field = current( $fields );\n\n\tif ( 1 !== preg_match( '/^\\w{3}-\\w{4}$/', $field['value'] ) ) {\n\t\t$ajax_handler->add_error( $field['id'], esc_html__( 'Invalid Ticket ID, it must be in XXX-XXXX format.', 'textdomain' ) );\n\t}\n}\nadd_action( 'elementor_pro/forms/validation', 'elementor_form_validation', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Registering and Enqueuing Styles After Elementor Frontend Styles\nDESCRIPTION: Example showing how to register and enqueue custom stylesheets after Elementor's frontend styles are loaded. Uses 'elementor/frontend/after_register_styles' and 'elementor/frontend/after_enqueue_styles' hooks to register multiple stylesheets including an external framework dependency.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/scripts-styles/frontend-styles.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction my_plugin_register_frontend_stylesheets() {\n\twp_register_style( 'frontend-style-1', plugins_url( 'assets/css/frontend-style-1.css', __FILE__ ) );\n\twp_register_style( 'frontend-style-2', plugins_url( 'assets/css/frontend-style-2.css', __FILE__ ), [ 'external-framework' ] );\n\twp_register_style( 'external-framework', plugins_url( 'assets/css/libs/external-framework.css', __FILE__ ) );\n}\nadd_action( 'elementor/frontend/after_register_styles', 'my_plugin_register_frontend_stylesheets' );\n\nfunction my_plugin_enqueue_frontend_stylesheets() {\n\twp_enqueue_style( 'frontend-style-1' );\n\twp_enqueue_style( 'frontend-style-2' );\n}\nadd_action( 'elementor/frontend/after_enqueue_styles', 'my_plugin_enqueue_frontend_stylesheets' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Font Control in Elementor Widget\nDESCRIPTION: This code snippet demonstrates how to implement the Font Control in a custom Elementor widget. The control allows selection of a font family from Google Fonts and applies it to elements with the 'your-class' CSS class. The example includes the full widget structure with register_controls, render, and content_template methods.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-font.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'style_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'font_family',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Font Family', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::FONT,\n\t\t\t\t'default' => \"'Open Sans', sans-serif\",\n\t\t\t\t'selectors' => [\n\t\t\t\t\t'{{WRAPPER}} .your-class' => 'font-family: {{VALUE}}',\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\t?>\n\t\t<h2 class=\"your-class\">\n\t\t\t...\n\t\t</h2>\n\t\t<?php\n\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<h2 class=\"your-class\">\n\t\t\t...\n\t\t</h2>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Dynamic Controls in Elementor (PHP)\nDESCRIPTION: This comprehensive example shows how to add dynamic support to various types of Elementor controls, including text, textarea, number, URL, and media controls. Each control is configured with the 'dynamic' argument to enable dynamic tag functionality.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/dynamic-content.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'heading',\n\t[\n\t\t'label' => esc_html__( 'Heading', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t'placeholder' => esc_html__( 'Enter your heading', 'textdomain' ),\n\t\t'label_block' => true,\n\t\t'dynamic' => [\n\t\t\t'active' => true,\n\t\t],\n\t]\n);\n\n$this->add_control(\n\t'content',\n\t[\n\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::TEXTAREA,\n\t\t'placeholder' => esc_html__( 'Enter your content', 'textdomain' ),\n\t\t'dynamic' => [\n\t\t\t'active' => true,\n\t\t],\n\t]\n);\n\n$this->add_control(\n\t'count',\n\t[\n\t\t'label' => esc_html__( 'Count', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::NUMBER,\n\t\t'default' => 0,\n\t\t'min' => 0,\n\t\t'max' => 100,\n\t\t'step' => 1,\n\t\t'dynamic' => [\n\t\t\t'active' => true,\n\t\t],\n\t]\n);\n\n$this->add_control(\n\t'url',\n\t[\n\t\t'label' => esc_html__( 'Link', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::URL,\n\t\t'placeholder' => esc_html__( 'https://your-link.com', 'textdomain' ),\n\t\t'dynamic' => [\n\t\t\t'active' => true,\n\t\t],\n\t]\n);\n\n$this->add_control(\n\t'image',\n\t[\n\t\t'label' => esc_html__( 'Choose Image', 'elementor' ),\n\t\t'type' => \\Elementor\\Controls_Manager::MEDIA,\n\t\t'default' => [\n\t\t\t'url' => \\Elementor\\Utils::get_placeholder_image_src(),\n\t\t],\n\t\t'dynamic' => [\n\t\t\t'active' => true,\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Switcher Control in Elementor Widget (PHP)\nDESCRIPTION: This snippet demonstrates how to add a Switcher Control to an Elementor widget. It shows the control registration, rendering logic, and content template implementation.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-switcher.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'show_title',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Show Title', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::SWITCHER,\n\t\t\t\t'label_on' => esc_html__( 'Show', 'textdomain' ),\n\t\t\t\t'label_off' => esc_html__( 'Hide', 'textdomain' ),\n\t\t\t\t'return_value' => 'yes',\n\t\t\t\t'default' => 'yes',\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'title',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Title', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t\t'default' => esc_html__( 'Default title', 'textdomain' ),\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\tif ( 'yes' === $settings['show_title'] ) {\n\t\t\techo '<h2>' . $settings['title'] . '</h2>';\n\t\t}\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<# if ( 'yes' === settings.show_title ) { #>\n\t\t\t<h2>{{{ settings.title }}}</h2>\n\t\t<# } #>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Field with Control Data\nDESCRIPTION: Example showing how to retrieve and use data from field controls when rendering a custom textarea field, including rows and columns from user settings.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-fields/field-render.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Field extends \\ElementorPro\\Modules\\Forms\\Fields\\Field_Base {\n\n\tpublic function render( $item, $item_index, $form ): void {\n\t\t$form->add_render_attribute(\n\t\t\t'textarea' . $item_index,\n\t\t\t[\n\t\t\t\t'class' => 'elementor-test-field',\n\t\t\t\t'rows'  => $item['textarea-rows'],\n\t\t\t\t'cols'  => $item['textarea-cols'],\n\t\t\t]\n\t\t);\n\n\t\techo '<textarea ' . $form->get_render_attribute_string( 'textarea' . $item_index ) . '></textarea>';\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Unregistering Dynamic Tags in Elementor\nDESCRIPTION: This code demonstrates how to unregister existing dynamic tags in Elementor by hooking into the 'elementor/dynamic_tags/register' action and using the unregister() method. The function takes the dynamic tags manager as a parameter and unregisters specific tags by passing their names to the unregister() method.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/dynamic-tags/remove-dynamic-tags.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction unregister_dynamic_tags( $dynamic_tags_manager ) {\n\n\t$dynamic_tags_manager->unregister( 'dynamic-tag-1' );\n\t$dynamic_tags_manager->unregister( 'dynamic-tag-2' );\n\n}\nadd_action( 'elementor/dynamic_tags/register', 'unregister_dynamic_tags' );\n```\n\n----------------------------------------\n\nTITLE: Using and Overriding Control Default Values in Elementor Widget\nDESCRIPTION: This code shows how to use a custom control in an Elementor widget with both default and custom values. The first control uses the default value 'Europe' while the second control overrides it with 'North America'.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/controls/control-values.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'section_content',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t// Control default value will be used, i.e. 'Europe'\n\t\t$this->add_control(\n\t\t\t'continent_1',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Continent 1', 'textdomain' ),\n\t\t\t\t'type' => 'continents-control',\n\t\t\t]\n\t\t);\n\n\t\t// Custom default value will be used, i.e. 'North America'\n\t\t$this->add_control(\n\t\t\t'continent_2',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Continent 2', 'textdomain' ),\n\t\t\t\t'type' => 'continents-control',\n\t\t\t\t'default' => 'North America',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Containers Structure\nDESCRIPTION: Example demonstrating nested container elements, showing how containers can be placed inside other containers.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/page-content.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"Test Page\",\n\t\"type\": \"page\",\n\t\"version\": \"0.4\",\n\t\"page_settings\": [],\n\t\"content\": [\n\t\t{\n\t\t\t\"id\": \"458aabdc\",\n\t\t\t\"elType\": \"container\",\n\t\t\t\"isInner\": false,\n\t\t\t\"settings\": [],\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"46ef0576\",\n\t\t\t\t\t\"elType\": \"container\",\n\t\t\t\t\t\"isInner\": false,\n\t\t\t\t\t\"settings\": [],\n\t\t\t\t\t\"elements\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"4a59f2e3\",\n\t\t\t\t\t\t\t\"elType\": \"container\",\n\t\t\t\t\t\t\t\"isInner\": false,\n\t\t\t\t\t\t\t\"settings\": [],\n\t\t\t\t\t\t\t\"elements\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Number Control to Elementor Widget PHP\nDESCRIPTION: This snippet demonstrates how to implement a number control in an Elementor widget. It includes settings for minimum, maximum, step values, and a default value.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/regular-control.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'size',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::NUMBER,\n\t\t\t\t'label' => esc_html__( 'Size', 'textdomain' ),\n\t\t\t\t'placeholder' => '0',\n\t\t\t\t'min' => 0,\n\t\t\t\t'max' => 100,\n\t\t\t\t'step' => 1,\n\t\t\t\t'default' => 50,\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Gallery Control in an Elementor Widget\nDESCRIPTION: Demonstrates how to register a Gallery Control in a custom Elementor widget, render the selected images in PHP, and implement the JavaScript template for live preview. The control allows users to select multiple images which can be displayed within the widget.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-gallery.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'gallery',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Add Images', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::GALLERY,\n\t\t\t\t'show_label' => false,\n\t\t\t\t'default' => [],\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\tforeach ( $settings['gallery'] as $image ) {\n\t\t\techo '<img src=\"' . esc_attr( $image['url'] ) . '\">';\n\t\t}\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<# _.each( settings.gallery, function( image ) { #>\n\t\t\t<img src=\"{{ image.url }}\">\n\t\t<# }); #>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Custom Control Before Section Start in PHP\nDESCRIPTION: This snippet demonstrates how to inject a custom control before a section starts for all elements in Elementor. It specifically targets the 'section_background' section of the 'section' element type.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/injecting-controls.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param \\Elementor\\Controls_Stack $element    The element type.\n * @param string                    $section_id Section ID.\n * @param array                     $args       Section arguments.\n */\nfunction inject_custom_control( $element, $section_id, $args ) {\n\n\tif ( 'section' === $element->get_name() && 'section_background' === $section_id ) {\n\n\t\t$element->start_controls_section(\n\t\t\t'custom_section',\n\t\t\t[\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t\t'label' => esc_html__( 'Custom Section', 'textdomain' ),\n\t\t\t]\n\t\t);\n\n\t\t$element->add_control(\n\t\t\t'custom_control',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::NUMBER,\n\t\t\t\t'label' => esc_html__( 'Custom Control', 'textdomain' ),\n\t\t\t]\n\t\t);\n\n\t\t$element->end_controls_section();\n\n\t}\n\n}\nadd_action( 'elementor/element/before_section_start', 'inject_custom_control', 10, 3 );\n```\n\n----------------------------------------\n\nTITLE: Setting Frontend Available Control in Elementor PHP\nDESCRIPTION: Demonstrates how to add a control to an Elementor widget with the 'frontend_available' argument set to true, making the control value accessible in the frontend.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/frontend-available.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'unique-control-name',\n\t[\n\t\t'label' => esc_html__( 'Control Label', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::NUMBER,\n\t\t'default' => 100,\n\t\t'frontend_available' => true,\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Scripts After Elementor Frontend Scripts\nDESCRIPTION: Example showing how to register and enqueue custom frontend scripts after Elementor loads its own frontend scripts. Uses WordPress wp_register_script() and wp_enqueue_script() functions with Elementor's after_register_scripts and after_enqueue_scripts hooks.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/scripts-styles/frontend-scripts.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction my_plugin_register_frontend_scripts() {\n\twp_register_script( 'frontend-script-1', plugins_url( 'assets/js/frontend-script-1.js', __FILE__ ) );\n\twp_register_script( 'frontend-script-2', plugins_url( 'assets/js/frontend-script-2.js', __FILE__ ), [ 'external-library' ] );\n\twp_register_script( 'external-library', plugins_url( 'assets/js/libs/external-library.js', __FILE__ ) );\n}\nadd_action( 'elementor/frontend/after_register_scripts', 'my_plugin_register_frontend_scripts' );\n\nfunction my_plugin_enqueue_frontend_scripts() {\n\twp_enqueue_script( 'frontend-script-1' );\n\twp_enqueue_script( 'frontend-script-2' );\n}\nadd_action( 'elementor/frontend/after_enqueue_scripts', 'my_plugin_enqueue_frontend_scripts' );\n```\n\n----------------------------------------\n\nTITLE: Custom Ping Action Class Implementation\nDESCRIPTION: Implementation of the custom ping action class that extends Elementor's Action_Base. Handles the actual ping functionality and defines required action properties.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-actions/simple-example.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Elementor form ping action.\n *\n * Custom Elementor form action which will ping an external server.\n *\n * @since 1.0.0\n */\nclass Ping_Action_After_Submit extends \\ElementorPro\\Modules\\Forms\\Classes\\Action_Base {\n\n\t/**\n\t * Get action name.\n\t *\n\t * Retrieve ping action name.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string\n\t */\n\tpublic function get_name(): string {\n\t\treturn 'ping';\n\t}\n\n\t/**\n\t * Get action label.\n\t *\n\t * Retrieve ping action label.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string\n\t */\n\tpublic function get_label(): string {\n\t\treturn esc_html__( 'Ping', 'elementor-forms-ping-action' );\n\t}\n\n\t/**\n\t * Run action.\n\t *\n\t * Ping an external server after form submission.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @param \\ElementorPro\\Modules\\Forms\\Classes\\Form_Record  $record\n\t * @param \\ElementorPro\\Modules\\Forms\\Classes\\Ajax_Handler $ajax_handler\n\t */\n\tpublic function run( $record, $ajax_handler ): void {\n\n\t\twp_remote_post(\n\t\t\t'https://api.example.com/',\n\t\t\t[\n\t\t\t\t'method' => 'GET',\n\t\t\t\t'headers' => [\n\t\t\t\t\t'Content-Type' => 'application/json',\n\t\t\t\t],\n\t\t\t\t'body' => wp_json_encode([\n\t\t\t\t\t'site' => get_home_url(),\n\t\t\t\t\t'action' => 'Form submitted',\n\t\t\t\t]),\n\t\t\t\t'httpversion' => '1.0',\n\t\t\t\t'timeout' => 60,\n\t\t\t]\n\t\t);\n\n\t}\n\n\t/**\n\t * Register action controls.\n\t *\n\t * Ping action has no input fields to the form widget.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @param \\Elementor\\Widget_Base $widget\n\t */\n\tpublic function register_settings_section( $widget ): void {}\n\n\t/**\n\t * On export.\n\t *\n\t * Ping action has no fields to clear when exporting.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @param array $element\n\t */\n\tpublic function on_export( $element ): array {}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Elementor Element Attribute Modification\nDESCRIPTION: PHP function that adds custom classes and data attributes to Elementor elements based on element settings using the elementor/frontend/before_render hook.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/render-frontend-elements.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Add a custom class and a data attribute to all the elements\n * containing a specific setting defined through the element control.\n *\n * @since 1.0.0\n * @param \\Elementor\\Element_Base $element The element instance.\n */\nfunction add_attributes_to_elements( $element ) {\n\n\tif ( ! $element->get_settings( 'my-custom-setting' ) ) {\n\t\treturn;\n\t}\n\n\t$element->add_render_attribute(\n\t\t'_wrapper',\n\t\t[\n\t\t\t'class' => 'my-custom-class',\n\t\t\t'data-my-custom-value' => 'my-custom-data-value',\n\t\t]\n\t);\n\n}\nadd_action( 'elementor/frontend/before_render', 'add_attributes_to_elements' );\n```\n\n----------------------------------------\n\nTITLE: Implementing CSS Filter Group Control in Elementor Widget\nDESCRIPTION: This snippet demonstrates how to add a CSS Filter Group Control to an Elementor widget. It includes the control registration, rendering, and content template methods.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/group-control-css-filter.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_group_control(\n\t\t\t\\Elementor\\Group_Control_Css_Filter::get_type(),\n\t\t\t[\n\t\t\t\t'name' => 'custom_css_filters',\n\t\t\t\t'selector' => '{{WRAPPER}} .your-class',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<div class=\"your-class\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Stylesheets for Elementor Controls in PHP\nDESCRIPTION: This snippet demonstrates how to register custom stylesheets for Elementor controls using the wp_register_style() function. It registers three stylesheets, including an external framework, and hooks the function to the wp_enqueue_scripts action.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/scripts-styles/control-styles.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction my_plugin_register_control_styles() {\n\twp_register_style( 'control-style-1', plugins_url( 'assets/css/control-style-1.css', __FILE__ ) );\n\twp_register_style( 'control-style-2', plugins_url( 'assets/css/control-style-2.css', __FILE__ ), [ 'external-framework' ] );\n\twp_register_style( 'external-framework', plugins_url( 'assets/css/libs/external-framework.css', __FILE__ ) );\n}\nadd_action( 'wp_enqueue_scripts', 'my_plugin_register_control_styles' );\n```\n\n----------------------------------------\n\nTITLE: Creating a New Finder Category Class in PHP for Elementor\nDESCRIPTION: This code snippet demonstrates how to create a new Finder category class in Elementor. It includes methods for setting the category ID, title, and defining category items with their properties such as title, icon, URL, and keywords.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/finder/add-new-finder-items.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass New_Finder_Category extends \\Elementor\\Core\\Common\\Modules\\Finder\\Base_Category {\n\n\tpublic function get_id(): string {\n\t\treturn 'my-category-name';\n\t}\n\n\tpublic function get_title(): string {\n\t\treturn esc_html__( 'Category Label', 'textdomain' );\n\t}\n\n\tpublic function get_category_items( array $options = [] ): array {\n\t\treturn [\n\t\t\t'elementor-website' => [\n\t\t\t\t'title' => esc_html__( 'Elementor', 'textdomain' ),\n\t\t\t\t'icon' => 'elementor',\n\t\t\t\t'url' => 'https://elementor.com/',\n\t\t\t\t'keywords' => [ 'elementor', 'website' ],\n\t\t\t],\n\t\t\t'wordpress-website' => [\n\t\t\t\t'title' => esc_html__( 'WordPress', 'textdomain' ),\n\t\t\t\t'icon' => 'wordpress',\n\t\t\t\t'url' => 'https://wordpress.org/',\n\t\t\t\t'keywords' => [ 'wordpress', 'website' ],\n\t\t\t],\n\t\t];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Enqueuing Styles Before Elementor Frontend Styles\nDESCRIPTION: Example showing how to register and enqueue custom stylesheets before Elementor's frontend styles are loaded. Uses 'elementor/frontend/before_register_styles' and 'elementor/frontend/before_enqueue_styles' hooks to register multiple stylesheets including an external framework dependency.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/scripts-styles/frontend-styles.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction my_plugin_register_frontend_styles() {\n\twp_register_style( 'frontend-style-1', plugins_url( 'assets/css/frontend-style-1.css', __FILE__ ) );\n\twp_register_style( 'frontend-style-2', plugins_url( 'assets/css/frontend-style-2.css', __FILE__ ), [ 'external-framework' ] );\n\twp_register_style( 'external-framework', plugins_url( 'assets/css/libs/external-framework.css', __FILE__ ) );\n}\nadd_action( 'elementor/frontend/before_register_styles', 'my_plugin_register_frontend_styles' );\n\nfunction my_plugin_enqueue_frontend_styles() {\n\twp_enqueue_style( 'frontend-style-1' );\n\twp_enqueue_style( 'frontend-style-2' );\n}\nadd_action( 'elementor/frontend/before_enqueue_styles', 'my_plugin_enqueue_frontend_styles' );\n```\n\n----------------------------------------\n\nTITLE: Elementor Page with Nested Containers\nDESCRIPTION: Illustrates a page structure with nested container elements, showing how containers can be hierarchically organized within other containers.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/general-elements.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"Test Page\",\n\t\"type\": \"page\",\n\t\"version\": \"0.4\",\n\t\"page_settings\": [],\n\t\"content\": [\n\t\t{\n\t\t\t\"id\": \"458aabdc\",\n\t\t\t\"elType\": \"container\",\n\t\t\t\"isInner\": false,\n\t\t\t\"settings\": [],\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"46ef0576\",\n\t\t\t\t\t\"elType\": \"container\",\n\t\t\t\t\t\"isInner\": false,\n\t\t\t\t\t\"settings\": [],\n\t\t\t\t\t\"elements\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"4a59f2e3\",\n\t\t\t\t\t\t\t\"elType\": \"container\",\n\t\t\t\t\t\t\t\"isInner\": false,\n\t\t\t\t\t\t\t\"settings\": [],\n\t\t\t\t\t\t\t\"elements\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Tag Rendering with Control Settings in PHP\nDESCRIPTION: Shows how to access and use dynamic tag control settings within the render method. Demonstrates retrieving multiple parameters using get_settings() and combining them in the output.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/dynamic-tags/dynamic-tags-rendering.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Tag extends \\Elementor\\Core\\DynamicTags\\Tag {\n\n\tpublic function render(): void {\n\t\t$param1 = $this->get_settings( 'text_param' );\n\t\t$param2 = $this->get_settings( 'number_param' );\n\t\t$param3 = $this->get_settings( 'select_param' );\n\n\t\techo \"{$param1} {$param2} {$param3}\";\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Main Plugin Registration PHP File\nDESCRIPTION: Main plugin file that registers the custom ping action with Elementor forms. Includes plugin metadata and hooks into Elementor's form action registration.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-actions/simple-example.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Elementor Forms Ping Action\n * Description: Custom addon which will ping an external server.\n * Plugin URI:  https://elementor.com/\n * Version:     1.0.0\n * Author:      Elementor Developer\n * Author URI:  https://developers.elementor.com/\n * Text Domain: elementor-forms-ping-action\n *\n * Requires Plugins: elementor\n * Elementor tested up to: 3.25.0\n * Elementor Pro tested up to: 3.25.0\n */\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Add new form action after form submission.\n *\n * @since 1.0.0\n * @param ElementorPro\\Modules\\Forms\\Registrars\\Form_Actions_Registrar $form_actions_registrar\n * @return void\n */\nfunction add_new_ping_action( $form_actions_registrar ) {\n\n\tinclude_once( __DIR__ .  '/form-actions/ping.php' );\n\n\t$form_actions_registrar->register( new \\Ping_Action_After_Submit() );\n\n}\nadd_action( 'elementor_pro/forms/actions/register', 'add_new_ping_action' );\n```\n\n----------------------------------------\n\nTITLE: Registering a New Finder Category in PHP for Elementor\nDESCRIPTION: This code snippet shows how to register a new Finder category with Elementor. It uses the 'elementor/finder/register' action hook to add the custom category class to the Finder categories manager.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/finder/add-new-finder-items.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction register_new_finder_category( $finder_categories_manager ) {\n\n\t$finder_categories_manager->register( new New_Finder_Category() );\n\n};\nadd_action( 'elementor/finder/register', 'register_new_finder_category' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Logged-In User Condition in Elementor\nDESCRIPTION: Defines a custom condition class for logged-in users. It extends Elementor's Condition_Base class and implements methods for condition type, name, label, and validation.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/theme-conditions/advanced-example.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Elementor Logged-In User Condition.\n *\n * Add a logged-in user condition to Elementor.\n *\n * @since 1.0.0\n */\nclass Logged_In_User_Condition extends \\ElementorPro\\Modules\\ThemeBuilder\\Conditions\\Condition_Base {\n\n\t/**\n\t * Get condition group type.\n\t *\n\t * Retrieve logged-in user condition group type.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string\n\t */\n\tpublic static function get_type(): string {\n\t\treturn 'general';\n\t}\n\n\t/**\n\t * Get condition name.\n\t *\n\t * Retrieve logged-in user condition unique ID.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string\n\t */\n\tpublic function get_name(): string {\n\t\treturn 'logged_in_user';\n\t}\n\n\t/**\n\t * Get condition label.\n\t *\n\t * Retrieve logged-in user condition label.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string\n\t */\n\tpublic function get_label(): string {\n\t\treturn esc_html__( 'Logged-in User', 'elementor-user-role-conditions' );\n\t}\n\n\t/**\n\t * Get condition all label.\n\t *\n\t * Retrieve logged-in user condition 'All' label.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string\n\t */\n\tpublic function get_all_label(): string {\n\t\treturn esc_html__( 'Any user role', 'elementor-user-role-conditions' );\n\t}\n\n\t/**\n\t * Register sub-conditions.\n\t *\n\t * Add sub-conditions based on user role.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return void\n\t */\n\tpublic function register_sub_conditions(): void {\n\t\tglobal $wp_roles;\n\n\t\tif ( ! isset( $wp_roles ) ) {\n\t\t\t$wp_roles = new \\WP_Roles();\n\t\t}\n\n\t\t$user_roles_list = $wp_roles->get_names();\n\n\t\tforeach ( $user_roles_list as $role ) {\n\t\t\t$this->register_sub_condition( new \\User_Role_Condition( $role ) );\n\t\t}\n\t}\n\n\t/**\n\t * Check condition.\n\t *\n\t * Validate logged-in user condition to ensure it complies to certain rules.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return bool\n\t */\n\tpublic function check( $args ): bool {\n\t\treturn is_user_logged_in();\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Widget Script Dependencies in Elementor\nDESCRIPTION: Shows how to declare script dependencies within an Elementor widget class using the get_script_depends() method. This tells Elementor which scripts to load when the widget is used.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/scripts-styles/widget-scripts.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tpublic function get_script_depends(): array {\n\t\treturn [ 'widget-script-1', 'widget-script-2' ];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Controls Section with Tab Specification in PHP\nDESCRIPTION: This snippet demonstrates how to start a controls section and assign it to a specific tab (in this case, the Style tab) when creating Elementor widgets.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor/elementor-tabs.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->start_controls_section(\n\t'style_section',\n\t[\n\t\t'label' => esc_html__( 'Style Section', 'textdomain' ),\n\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Popover Toggle Control in Elementor Widget\nDESCRIPTION: This snippet demonstrates how to add a Popover Toggle Control to an Elementor widget. It includes setting up the control with custom labels and a default value, as well as starting and ending the popover section.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-popover-toggle.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'style_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'border_popover_toggle',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Border', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::POPOVER_TOGGLE,\n\t\t\t\t'label_off' => esc_html__( 'Default', 'textdomain' ),\n\t\t\t\t'label_on' => esc_html__( 'Custom', 'textdomain' ),\n\t\t\t\t'return_value' => 'yes',\n\t\t\t\t'default' => 'yes',\n\t\t\t]\n\t\t);\n\n\t\t$this->start_popover();\n\n\t\t$this->add_control();\n\n\t\t$this->add_control();\n\n\t\t$this->add_control();\n\n\t\t$this->end_popover();\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Box Shadow Control in Elementor Widget\nDESCRIPTION: Example of how to implement the Box Shadow control in an Elementor widget by extending the Widget_Base class and registering the control with appropriate selectors.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-box-shadow.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'style_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'custom_box_shadow',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Box Shadow', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::BOX_SHADOW,\n\t\t\t\t'selectors' => [\n\t\t\t\t\t'{{SELECTOR}}' => 'box-shadow: {{HORIZONTAL}}px {{VERTICAL}}px {{BLUR}}px {{SPREAD}}px {{COLOR}};',\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning a Widget to a Category in Elementor (PHP)\nDESCRIPTION: This snippet demonstrates how to assign an Elementor widget to a specific category by overriding the get_categories() method in a custom widget class. In this example, the widget is assigned to the 'basic' category.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/widget-categories.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tpublic function get_categories(): array {\n\t\treturn [ 'basic' ];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Logging User Activity on Elementor Save\nDESCRIPTION: Example of logging user activity when Elementor data is saved. The function captures the post ID and editor data to create an activity log entry using a hypothetical logging function.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/save-editor-data.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Log user activity when the user saves Elementor data.\n *\n * @since 1.0.0\n * @param int   $post_id     The ID of the post.\n * @param array $editor_data The editor data.\n */\nfunction log_saved_elementor_data( $post_id, $editor_data ) {\n\n\t// Interact with your activity log plugin\n\tinsert_activity_log_data(\n\t\t[\n\t\t\t'action' => 'saved',\n\t\t\t'object_type' => 'Elementor Data',\n\t\t\t'object_id' => $post_id,\n\t\t\t'object_name' => get_the_title( $post_id ),\n\t\t]\n\t);\n\n}\nadd_action( 'elementor/editor/after_save', 'log_saved_elementor_data', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Component Example in JavaScript\nDESCRIPTION: Demonstrates how to create and register a new component with a custom command. The example shows component creation, command definition, registration, and execution.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/js/components.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomComponent extends $e.modules.ComponentBase {\n\tgetNamespace() {\n\t\treturn 'custom-component';\n\t}\n\t\n\tdefaultCommands() {\n\t\t// Object of all the component commands.\n\t\treturn {\n\t\t\t// 'example' command.   \n\t\t\texample: ( args ) => {\n\t\t\t\t// Output command args to console.\n\t\t\t\tconsole.log( 'ExampleCommand: ', args );\n\t\t\n\t\t\t\t// Return object as example.\n\t\t\t\treturn {\n\t\t\t\t\texample: 'result from ExampleCommand',\n\t\t\t\t};\n\t\t\t},\n\t\t};\n\t}\n\t}\n\t\n\t// Register the new component.\n\t$e.components.register( new CustomComponent() );\n\t\n\t// Runs 'example' command from 'custom-component'.\n\tresult = $e.run( 'custom-component/example', {\n\tproperty: 'value',\n\t} );\n\t\n\t// Output command run result.\n\tconsole.log( 'e-components-eg-1-result: ', result );\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Icon to a Tab with CSS\nDESCRIPTION: This CSS snippet shows how to add a custom icon above a tab label in the Elementor panel by targeting the specific tab control and using the eicons font family.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor/elementor-tabs.md#2025-04-20_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.elementor-panel .elementor-tab-control-new-tab a:before,\n.elementor-panel .elementor-tab-control-new-tab span:before {\n\tfont-family: eicons;\n\tcontent: '\\e942';\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Widget Styles in PHP for Elementor\nDESCRIPTION: This snippet demonstrates how to register custom stylesheets for Elementor widgets using the wp_register_style() function. It shows how to register multiple styles and set dependencies between them.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/scripts-styles/widget-styles.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction my_plugin_register_widget_styles() {\n\twp_register_style( 'widget-style-1', plugins_url( 'assets/css/widget-style-1.css', __FILE__ ) );\n\twp_register_style( 'widget-style-2', plugins_url( 'assets/css/widget-style-2.css', __FILE__ ), [ 'external-framework' ] );\n\twp_register_style( 'external-framework', plugins_url( 'assets/css/libs/external-framework.css', __FILE__ ) );\n}\nadd_action( 'wp_enqueue_scripts', 'my_plugin_register_widget_styles' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Tel Field Class\nDESCRIPTION: Field implementation class that defines the local telephone field behavior, including validation, rendering, and editor preview functionality. Requires specific format (123-456-7890) for phone numbers.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-fields/simple-example.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Elementor Form Field - Local Tel\n *\n * Add a new \"Local Tel\" field to Elementor form widget.\n *\n * @since 1.0.0\n */\nclass Elementor_Local_Tel_Field extends \\ElementorPro\\Modules\\Forms\\Fields\\Field_Base {\n\n\t/**\n\t * Get field type.\n\t *\n\t * Retrieve local-tel field unique ID.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Field type.\n\t */\n\tpublic function get_type(): string {\n\t\treturn 'local-tel';\n\t}\n\n\t/**\n\t * Get field name.\n\t *\n\t * Retrieve local-tel field label.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Field name.\n\t */\n\tpublic function get_name(): string {\n\t\treturn esc_html__( 'Local Tel', 'elementor-form-local-tel-field' );\n\t}\n\n\t/**\n\t * Render field output on the frontend.\n\t *\n\t * Written in PHP and used to generate the final HTML.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @param mixed $item\n\t * @param mixed $item_index\n\t * @param mixed $form\n\t * @return void\n\t */\n\tpublic function render( $item, $item_index, $form ): void {\n\t\t$form->add_render_attribute(\n\t\t\t'input' . $item_index,\n\t\t\t[\n\t\t\t\t'size' => '1',\n\t\t\t\t'class' => 'elementor-field-textual',\n\t\t\t\t'pattern' => '[0-9]{3}-[0-9]{3}-[0-9]{4}',\n\t\t\t\t'title' => esc_html__( 'Format: 123-456-7890', 'elementor-form-local-tel-field' ),\n\t\t\t]\n\t\t);\n\n\t\techo '<input ' . $form->get_render_attribute_string( 'input' . $item_index ) . '>';\n\t}\n\n\t/**\n\t * Field validation.\n\t *\n\t * Validate local-tel field value to ensure it complies to certain rules.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @param \\ElementorPro\\Modules\\Forms\\Classes\\Field_Base   $field\n\t * @param \\ElementorPro\\Modules\\Forms\\Classes\\Form_Record  $record\n\t * @param \\ElementorPro\\Modules\\Forms\\Classes\\Ajax_Handler $ajax_handler\n\t * @return void\n\t */\n\tpublic function validation( $field, $record, $ajax_handler ): void {\n\t\tif ( empty( $field['value'] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( preg_match( '/^[0-9]{3}-[0-9]{3}-[0-9]{4}$/', $field['value'] ) !== 1 ) {\n\t\t\t$ajax_handler->add_error(\n\t\t\t\t$field['id'],\n\t\t\t\tesc_html__( 'Phone number must be in \"123-456-7890\" format.', 'elementor-form-local-tel-field' )\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Field constructor.\n\t *\n\t * Used to add a script to the Elementor editor preview.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return void\n\t */\n\tpublic function __construct() {\n\t\tparent::__construct();\n\t\tadd_action( 'elementor/preview/init', [ $this, 'editor_preview_footer' ] );\n\t}\n\n\t/**\n\t * Elementor editor preview.\n\t *\n\t * Add a script to the footer of the editor preview screen.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return void\n\t */\n\tpublic function editor_preview_footer(): void {\n\t\tadd_action( 'wp_footer', [ $this, 'content_template_script' ] );\n\t}\n\n\t/**\n\t * Content template script.\n\t *\n\t * Add content template alternative, to display the field in Elementor editor.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return void\n\t */\n\tpublic function content_template_script(): void {\n\t\t?>\n\t\t<script>\n\t\tjQuery( document ).ready( () => {\n\n\t\t\telementor.hooks.addFilter(\n\t\t\t\t'elementor_pro/forms/content_template/field/<?php echo $this->get_type(); ?>',\n\t\t\t\tfunction ( inputField, item, i ) {\n\t\t\t\t\tconst fieldId    = `form_field_${i}`;\n\t\t\t\t\tconst fieldClass = `elementor-field-textual elementor-field ${item.css_classes}`;\n\t\t\t\t\tconst size       = '1';\n\t\t\t\t\tconst pattern    = '[0-9]{3}-[0-9]{3}-[0-9]{4}';\n\t\t\t\t\tconst title      = \"<?php echo esc_html__( 'Format: 123-456-7890', 'elementor-forms-local-tel-field' ); ?>\";\n\n\t\t\t\t\treturn `<input id=\"${fieldId}\" class=\"${fieldClass}\" size=\"${size}\" pattern=\"${pattern}\" title=\"${title}\">`;\n\t\t\t\t}, 10, 3\n\t\t\t);\n\n\t\t});\n\t\t</script>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Heading Controls Before Section Start in PHP\nDESCRIPTION: This snippet demonstrates how to inject custom controls specifically for the 'heading' element type before the 'section_title' section starts in Elementor.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/injecting-controls.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param \\Elementor\\Controls_Stack $element The element type.\n * @param array                     $args    Section arguments.\n */\nfunction inject_heading_controls( $element, $args ) {\n\n\t$element->start_controls_section(\n\t\t'custom_section',\n\t\t[\n\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t'label' => esc_html__( 'Custom Section', 'textdomain' ),\n\t\t]\n\t);\n\n\t$element->add_control(\n\t\t'custom_control',\n\t\t[\n\t\t\t'type' => \\Elementor\\Controls_Manager::NUMBER,\n\t\t\t'label' => esc_html__( 'Custom Control', 'textdomain' ),\n\t\t]\n\t);\n\n\t$element->end_controls_section();\n\n}\nadd_action( 'elementor/element/heading/section_title/before_section_start', 'inject_heading_controls', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Validating Custom Ticket ID Format in Elementor Forms\nDESCRIPTION: Hook implementation to validate a ticket ID field ensuring it matches the XXX-XXXX format using regex pattern matching.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/forms.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'elementor_pro/forms/validation', function ( $record, $ajax_handler ) {\n\t$fields = $record->get_field( [\n\t\t'id' => 'ticket_id',\n\t] );\n\n\tif ( empty( $fields ) ) {\n\t\treturn;\n\t}\n\n\t$field = current( $fields );\n\n\tif ( 1 !== preg_match( '/^\\w{3}-\\w{4}$/', $field['value'] ) ) {\n\t\t$ajax_handler->add_error( $field['id'], 'Invalid Ticket ID, it must be in the format XXX-XXXX' );\n\t}\n}, 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Rendering Elementor Widget with Select Control\nDESCRIPTION: This code snippet shows how to render the Elementor widget that uses the Select control. It retrieves the settings and applies them to the widget's HTML structure.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-select.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected function render(): void {\n\t$settings = $this->get_settings_for_display();\n\t?>\n\t<div class=\"your-class\">\n\t\t...\n\t</div>\n\t<?php\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Divider Control in Elementor Widget (PHP)\nDESCRIPTION: This code snippet demonstrates how to add a Divider Control to an Elementor widget. The control is added within the register_controls() method of a custom widget class that extends Elementor's Widget_Base.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-divider.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'hr',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::DIVIDER,\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Sub-Conditions in Elementor Pro\nDESCRIPTION: This PHP code snippet shows how to register sub-conditions in Elementor Pro using the conditions manager. It demonstrates registering a main condition and its associated sub-conditions.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/theme-conditions/add-new-condition.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction register_new_theme_conditions( $conditions_manager  ) {\n\n\trequire_once( __DIR__ . '/theme-conditions/main-condition.php' );\n\trequire_once( __DIR__ . '/theme-conditions/sub-condition-1.php' );\n\trequire_once( __DIR__ . '/theme-conditions/sub-condition-2.php' );\n\n\t$conditions_manager\n\t\t->get_condition( 'general' )\n\t\t->register_sub_condition( new \\Main_Condition() );\n\n\t$conditions_manager\n\t\t->get_condition( 'main_condition_name' )\n\t\t->register_sub_condition( new \\Sub_Condition_1() );\n\n\t$conditions_manager\n\t\t->get_condition( 'main_condition_name' )\n\t\t->register_sub_condition( new \\Sub_Condition_2() );\n\n}\nadd_action( 'elementor/theme/register_conditions', 'register_new_theme_conditions' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Entrance Animation Control in an Elementor Widget\nDESCRIPTION: A complete example showing how to implement the Animation control in an Elementor widget. The code demonstrates registering the control in the style section, and applying the animation class in both PHP render and JS template methods.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-animation.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'style_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'entrance_animation',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Entrance Animation', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::ANIMATION,\n\t\t\t\t'prefix_class' => 'animated ',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\t?>\n\t\t<div class=\"<?php echo esc_attr( $settings['entrance_animation'] ); ?>\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<div class=\"{{ settings.entrance_animation }}\">\n\t\t\t...\n\t\t</div>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Widget to Category in PHP\nDESCRIPTION: Example of how to override the get_categories() method in a widget class to assign it to a specific category. The method returns an array containing the category name.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-categories.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tpublic function get_categories(): array {\n\t\treturn [ 'basic' ];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Upload Field from Elementor Form Widget using PHP Filter\nDESCRIPTION: A PHP function that hooks into 'elementor_pro/forms/field_types' filter to remove the file upload field from Elementor form widgets. This is useful for enhancing security by preventing users from adding file upload capabilities to forms.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-fields/remove-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Remove `upload` field from Elementor Form Widget.\n *\n * @param array $fields Elementor form fields.\n * @return array Updated fields list.\n */\nfunction remove_elementor_form_field( $fields ) {\n\n\tunset( $fields['upload'] );\n\n\treturn $fields;\n\n}\nadd_filter( 'elementor_pro/forms/field_types', 'remove_elementor_form_field' );\n```\n\n----------------------------------------\n\nTITLE: Folder Structure for Elementor Addon\nDESCRIPTION: The recommended folder structure for organizing an Elementor addon, with separate directories for the main plugin file, includes folder, and subdirectories for widgets and controls.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/addons/addon-example.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nelementor-test-addon/\n|\n├─ includes/\n|  |\n|  ├─ controls/\n|  |  ├─ control-1.php\n|  |  └─ control-2.php\n|  |\n|  ├─ widgets/\n|  |  ├─ widget-1.php\n|  |  └─ widget-2.php\n|  |\n|  └─ plugin.php\n|\n└─ elementor-test-addon.php\n```\n\n----------------------------------------\n\nTITLE: Checking Experiment Status with Elementor CLI in Bash\nDESCRIPTION: This command allows users to check the status of an Elementor experimental feature. It requires the experiment name as an argument and returns whether the feature is active or inactive.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/experiments-status.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor experiments status <experiment-name>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Elementor Finder Categories in PHP\nDESCRIPTION: This function registers new Elementor Finder categories by hooking into the 'elementor/finder/register' action. It requires the custom category files and registers instances of the new category classes with the Finder categories manager.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/managers/registering-finder-categories.md#2025-04-20_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * Register new Elementor finder categories.\n *\n * @param \\Elementor\\Core\\Common\\Modules\\Finder\\Categories_Manager $finder_categories_manager Elementor finder categories manager.\n * @return void\n */\nfunction register_new_finder_categories( $finder_categories_manager ) {\n\n\trequire_once( __DIR__ . '/finder/finder-1.php' );\n\trequire_once( __DIR__ . '/finder/finder-2.php' );\n\n\t$finder_categories_manager->register( new \\Elementor_Finder_Category_1() );\n\t$finder_categories_manager->register( new \\Elementor_Finder_Category_2() );\n\n}\nadd_action( 'elementor/finder/register', 'register_new_finder_categories' );\n```\n\n----------------------------------------\n\nTITLE: Registering Elementor Form Fields and Dependencies\nDESCRIPTION: Demonstrates how to register custom form fields and their associated JavaScript and CSS dependencies in Elementor, including file registration using WordPress functions.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-fields/field-dependencies.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Register Elementor form fields.\n */\nfunction elementor_test_field_registration( $form_fields_registrar ) {\n\n\trequire_once( __DIR__ . '/forms/fields/field-1.php' );\n\trequire_once( __DIR__ . '/forms/fields/field-2.php' );\n\n\t$form_fields_registrar->register( new \\Elementor_Test_Field_1() );\n\t$form_fields_registrar->register( new \\Elementor_Test_Field_2() );\n\n}\nadd_action( 'elementor_pro/forms/fields/register', 'elementor_test_field_registration' );\n\n/**\n * Register scripts and styles for Elementor form fields.\n */\nfunction elementor_test_field_dependencies() {\n\n\t/* Scripts */\n\twp_register_script( 'field-script', plugins_url( 'assets/js/field-script.js', __FILE__ ) );\n\twp_register_script( 'external-library', plugins_url( 'assets/js/libs/external-library.js', __FILE__ ) );\n\n\t/* Styles */\n\twp_register_style( 'field-style', plugins_url( 'assets/css/field-style.css', __FILE__ ) );\n\twp_register_style( 'external-framework', plugins_url( 'assets/css/libs/external-framework.css', __FILE__ ) );\n\n}\nadd_action( 'wp_enqueue_scripts', 'elementor_test_field_dependencies' );\n```\n\n----------------------------------------\n\nTITLE: Registering and Enqueuing Custom Preview Styles in Elementor\nDESCRIPTION: This code example shows how to register custom CSS files using wp_register_style() and then enqueue them specifically for Elementor preview using the elementor/preview/enqueue_styles action hook. The code demonstrates handling both direct stylesheet dependencies and external framework dependencies.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/scripts-styles/preview-styles.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction my_plugin_register_preview_styles() {\n\twp_register_style( 'preview-style-1', plugins_url( 'assets/css/preview-style-1.css', __FILE__ ) );\n\twp_register_style( 'preview-style-2', plugins_url( 'assets/css/preview-style-2.css', __FILE__ ), [ 'external-framework' ] );\n\twp_register_style( 'external-framework', plugins_url( 'assets/css/libs/external-framework.css', __FILE__ ) );\n}\nadd_action( 'wp_enqueue_scripts', 'my_plugin_register_preview_styles' );\n\nfunction my_plugin_enqueue_preview_styles() {\n\twp_enqueue_style( 'preview-style-1' );\n\twp_enqueue_style( 'preview-style-2' );\n}\nadd_action( 'elementor/preview/enqueue_styles', 'my_plugin_enqueue_preview_styles' );\n```\n\n----------------------------------------\n\nTITLE: Sending Email on Elementor Form Submission in PHP\nDESCRIPTION: Example of using the run() method to send an email each time an Elementor form is submitted. This utilizes the WordPress wp_mail() function.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-actions/action-run.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Action extends \\ElementorPro\\Modules\\Forms\\Classes\\Action_Base {\n\n\tpublic function run( $record, $ajax_handler ): void {\n\n\t\twp_mail( /* ... */ );\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Elementor Condition Class in PHP\nDESCRIPTION: Example class showing how to implement basic condition data methods in Elementor Pro. The class extends Condition_Base and implements required methods to define the condition name and label.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/theme-conditions/condition-data.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Condition extends \\ElementorPro\\Modules\\ThemeBuilder\\Conditions\\Condition_Base {\n\n\tpublic function get_name(): string {\n\t\treturn 'condition_name';\n\t}\n\n\tpublic function get_label(): string {\n\t\treturn esc_html__( 'My Condition Name', 'textdomain' );\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Raw HTML Control in Elementor Widget\nDESCRIPTION: Example of registering a Raw HTML control within an Elementor widget class. The control displays an important message in the widget panel with custom styling.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-raw-html.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'important_note',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Important Note', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::RAW_HTML,\n\t\t\t\t'raw' => esc_html__( 'A very important message to show in the panel.', 'textdomain' ),\n\t\t\t\t'content_classes' => 'your-class',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Data Commands in an Elementor Component\nDESCRIPTION: This snippet illustrates how to import and register data commands within an Elementor component.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/js/commands.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as commandsData from './commands-data/';\n\nexport class Component extends $e.modules.ComponentBase {\n\tgetNamespace() {\n\t\treturn 'component-name';\n\t}\n\n\tdefaultData() {\n\t\treturn this.importCommands( commandsData );\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logged-In User Condition Class\nDESCRIPTION: Custom condition class that extends Elementor's Condition_Base to implement the logged-in user check functionality. Includes methods for type, name, label, and condition validation.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/theme-conditions/simple-example.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Elementor Logged-In User Condition.\n *\n * Add a logged-in user condition to Elementor.\n *\n * @since 1.0.0\n */\nclass Logged_In_User_Condition extends \\ElementorPro\\Modules\\ThemeBuilder\\Conditions\\Condition_Base {\n\n\t/**\n\t * Get condition group type.\n\t *\n\t * Retrieve logged-in user condition group type.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string\n\t */\n\tpublic static function get_type(): string {\n\t\treturn 'general';\n\t}\n\n\t/**\n\t * Get condition name.\n\t *\n\t * Retrieve logged-in user condition unique ID.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string\n\t */\n\tpublic function get_name(): string {\n\t\treturn 'logged_in_user';\n\t}\n\n\t/**\n\t * Get condition label.\n\t *\n\t * Retrieve logged-in user condition label.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string\n\t */\n\tpublic function get_label(): string {\n\t\treturn esc_html__( 'Logged-in user', 'elementor-logged-in-user-condition' );\n\t}\n\n\t/**\n\t * Check condition.\n\t *\n\t * Validate logged-in user condition to ensure it complies with certain rules.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return bool\n\t */\n\tpublic function check( $args ): bool {\n\t\treturn is_user_logged_in();\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Post Types Query Filter in PHP\nDESCRIPTION: Demonstrates how to modify a query to include multiple custom post types in an Elementor posts widget.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/custom-query-filter.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Update the query to use specific post types.\n *\n * @since 1.0.0\n * @param \\WP_Query $query The WordPress query instance.\n */\nfunction my_query_by_post_types( $query ) {\n\t$query->set( 'post_type', [ 'custom-post-type1', 'custom-post-type2' ] );\n}\nadd_action( 'elementor/query/{$query_id}', 'my_query_by_post_types' );\n```\n\n----------------------------------------\n\nTITLE: Post Status Query Filter in PHP\nDESCRIPTION: Shows how to filter posts by specific post statuses in an Elementor posts widget. Includes caution about displaying private data.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/custom-query-filter.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Update the query to use specific post statuses.\n *\n * @since 1.0.0\n * @param \\WP_Query $query The WordPress query instance.\n */\nfunction my_query_by_post_status( $query ) {\n\t$query->set( 'post_status', [ 'future', 'draft'] );\n}\nadd_action( 'elementor/query/{$query_id}', 'my_query_by_post_status' );\n```\n\n----------------------------------------\n\nTITLE: Single Component Elementor Addon Structure\nDESCRIPTION: Demonstrates the recommended folder structure for a simple Elementor addon with basic assets and widgets folders.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/addons/file-folder-structure.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nelementor-test-addon/\n|\n├─ assets/\n|\n├─ widgets/\n|\n└─ elementor-test-addon.php\n```\n\n----------------------------------------\n\nTITLE: Activating Elementor Experiments via CLI (Bash)\nDESCRIPTION: This command activates a specified Elementor experiment using the WordPress CLI. It requires the experiment name as an argument. The example demonstrates activating the 'container' experiment.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/experiments-activate.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor experiments activate <experiment-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor experiments activate container\n```\n\n----------------------------------------\n\nTITLE: Using Element Wrapper for Scoped Styling in PHP and CSS\nDESCRIPTION: Demonstrates how to use the {{WRAPPER}} variable for scoped styling and shows the resulting CSS output.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/selectors.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'selectors' => [\n\t'{{WRAPPER}} .widget-container' => 'color: red;',\n],\n```\n\nLANGUAGE: css\nCODE:\n```\n.elementor-123 .elementor-element.elementor-element-1a2b3c4 .widget-container {\n\tcolor: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Value Condition in Elementor Control\nDESCRIPTION: Demonstrates how to set a conditional display that depends on a set of values from another control, using logical OR operator between the values.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/conditional-display.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'unique-control-name',\n\t[\n\t\t'label' => esc_html__( 'Control Label', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t'condition' => [\n\t\t\t'dependent-control-name' => [ 'value-1', 'value-2' ],\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Clearing Cache on Elementor Save\nDESCRIPTION: Example of clearing cache when Elementor data is saved for published posts. The function checks the post status and triggers a cache clearing operation using a hypothetical caching function.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/save-editor-data.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Clear old cache when the user saves new Elementor data.\n *\n * @since 1.0.0\n * @param int   $post_id     The ID of the post.\n * @param array $editor_data The editor data.\n */\nfunction clear_cache_when_updating_elementor( $post_id, $data ) {\n\n\tif ( get_post_status( $post_id ) != 'publish' ) {\n\t\treturn;\n\t}\n\n\t// Interact with your caching plugin\n\tclear_old_cache_data_for_your_post( $post_id );\n\n}\nadd_action( 'elementor/editor/after_save', 'clear_cache_when_updating_elementor', 10 , 2 );\n```\n\n----------------------------------------\n\nTITLE: Registering Elementor PageSpeed Plugin in PHP\nDESCRIPTION: Main plugin file that registers the addon and enqueues the required JavaScript file in the Elementor editor. Includes plugin metadata and script registration using WordPress functions.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/advanced-example.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Elementor PageSpeed Context Menu\n * Description: Add PageSpeed to Elementor context menu.\n * Plugin URI:  https://elementor.com/\n * Version:     1.0.0\n * Author:      Elementor Developer\n * Author URI:  https://developers.elementor.com/\n * Text Domain: elementor-page-speed-context-menu\n *\n * Requires Plugins: elementor\n * Elementor tested up to: 3.25.0\n * Elementor Pro tested up to: 3.25.0\n */\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\nfunction elementor_page_speed_context_menu_scripts() {\n\n\twp_enqueue_script(\n\t\t'elementor-page-speed-context-menu',\n\t\tplugins_url( 'assets/js/page-speed-context-menu.js', __FILE__ ),\n\t\t[],\n\t\t'1.0.0',\n\t\tfalse\n\t);\n\n}\nadd_action( 'elementor/editor/after_enqueue_scripts', 'elementor_page_speed_context_menu_scripts' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Sub-Conditions in Elementor Pro Theme Builder\nDESCRIPTION: Example class demonstrating how to implement sub-conditions in an Elementor condition class. The class extends Condition_Base and implements two required methods: get_all_label() for displaying the condition label, and register_sub_conditions() for registering child conditions.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/theme-conditions/sub-conditions.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Condition extends \\ElementorPro\\Modules\\ThemeBuilder\\Conditions\\Condition_Base {\n\n\tpublic function get_all_label(): string {\n\t\treturn esc_html__( 'All Items', 'textdomain' );\n\t}\n\n\tpublic function register_sub_conditions(): void {\n\t\t$this->register_sub_condition( new Elementor_Test_Sub_Condition_1(); );\n\t\t$this->register_sub_condition( new Elementor_Test_Sub_Condition_2(); );\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Select Control with Selectors Dictionary in PHP\nDESCRIPTION: Demonstrates how to update a Select control for border style to use direct CSS selectors while maintaining backward compatibility using selectors_dictionary in Elementor.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/selectors-dictionary.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'border_style',\n\t[\n\t\t'label' => esc_html__( 'Border Style', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::SELECT,\n\t\t'options' => [\n\t\t\t'' => esc_html__( 'Default', 'textdomain' ),\n\t\t\t'1' => esc_html__( 'None', 'textdomain' ),\n\t\t\t'2' => esc_html__( 'Solid', 'textdomain' ),\n\t\t\t'3' => esc_html__( 'Double', 'textdomain' ),\n\t\t\t'4' => esc_html__( 'Dotted', 'textdomain' ),\n\t\t\t'5' => esc_html__( 'Dashed', 'textdomain' ),\n\t\t],\n\t\t'selectors_dictionary' => [\n\t\t\t'1' => 'none',\n\t\t\t'2' => 'solid',\n\t\t\t'3' => 'double',\n\t\t\t'4' => 'dotted',\n\t\t\t'5' => 'dashed',\n\t\t],\n\t\t'selectors' => [\n\t\t\t'{{WRAPPER}}' => 'border-style: {{VALUE}};',\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a UI Hook in Elementor\nDESCRIPTION: This snippet provides a template for implementing a UI hook in Elementor. It includes methods for specifying the command, ID, container type, conditions, and application logic for the hook.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/js/hooks.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport HookUIAfter from 'elementor-api/modules/hooks/{TYPE}/after';\n\nexport class {FILE_NAME_CAMEL_CASE} extends HookUIAfter {\n\tgetCommand() {\n\t\treturn '{COMMAND}';\n\t}\n\n\tgetId() {\n\t\treturn '{FILE_NAME_WITHOUT_JS}--{COMMAND}';\n\t}\n\n\tgetContainerType() {\n\t\treturn '{CONTAINER_TYPE}';\n\t}\n\n\tgetConditions( args ) {\n\t\treturn args.settings && 'undefined' !== typeof args.settings.post_status;\n\t}\n\n\tapply( args ) {\n\t\tconst { footerSaver } = $e.components.get( 'document/save' );\n\n\t\tfooterSaver.setMenuItems( args.container.document );\n\n\t\tfooterSaver.refreshWpPreview();\n\t}\n}\n\nexport default {FILE_NAME_CAMEL_CASE};\n```\n\n----------------------------------------\n\nTITLE: Importing Internal Commands in an Elementor Component\nDESCRIPTION: This example demonstrates how to import and register internal commands within an Elementor component.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/js/commands.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as commandsInternal from './commands-internal/';\n\nexport class Component extends $e.modules.ComponentBase {\n\tgetNamespace() {\n\t\treturn 'component-name';\n\t}\n\n\tdefaultCommandsInternal() {\n\t\treturn this.importCommands( commandsInternal );\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing WordPress Plugin Hook Handler\nDESCRIPTION: Basic function setup to load plugin functionality using WordPress plugins_loaded hook. This ensures the plugin loads after Elementor is initialized.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/addons/load.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction elementor_test_addon() {\n\n\t// your code here\n\n}\nadd_action( 'plugins_loaded', 'elementor_test_addon' );\n```\n\n----------------------------------------\n\nTITLE: Implementing User Role Condition in Elementor\nDESCRIPTION: Defines a custom condition class for specific user roles. It extends Elementor's Condition_Base class and implements methods for condition type, name, label, and validation based on user roles.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/theme-conditions/advanced-example.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Elementor User Role Conditions.\n *\n * Add a user role conditions to Elementor.\n *\n * @since 1.0.0\n */\nclass User_Role_Condition extends \\ElementorPro\\Modules\\ThemeBuilder\\Conditions\\Condition_Base {\n\n\t/**\n\t * Condition constructor.\n\t *\n\t * Initialize user role condition.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string\n\t */\n\tpublic function __construct( $user_role ) {\n\t\tparent::__construct();\n\n\t\t$this->user_role = $user_role;\n\t}\n\n\t/**\n\t * Get condition group type.\n\t *\n\t * Retrieve user role condition group type.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string\n\t */\n\tpublic static function get_type(): string {\n\t\treturn 'logged_in_user';\n\t}\n\n\t/**\n\t * Get condition name.\n\t *\n\t * Retrieve user role condition unique ID.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string\n\t */\n\tpublic function get_name(): string {\n\t\treturn strtolower( $this->user_role . '_role' );\n\t}\n\n\t/**\n\t * Get condition label.\n\t *\n\t * Retrieve user role condition label.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string\n\t */\n\tpublic function get_label(): string {\n\t\t/* translators: %s: User role label. */\n\t\treturn sprintf( esc_html__( '%s role', 'elementor-user-role-conditions' ), $this->user_role );\n\t}\n\n\t/**\n\t * Check condition.\n\t *\n\t * Validate user role condition to ensure it complies to certain rules.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return bool\n\t */\n\tpublic function check( $args ): bool {\n\t\t$current_user = wp_get_current_user();\n\t\t$site_roles = (array) $current_user->roles;\n\t\treturn in_array( $this->user_role, $site_roles );\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WordPress Header Comments in Elementor Addon\nDESCRIPTION: Basic WordPress header comment implementation for an Elementor addon plugin. Includes essential fields like plugin name, description, version, author details, and dependencies.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/addons/plugin-header.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name:      Elementor Test Addon\n * Description:      Custom Elementor addon.\n * Plugin URI:       https://elementor.com/\n * Version:          1.0.0\n * Author:           Elementor Developer\n * Author URI:       https://developers.elementor.com/\n * Text Domain:      elementor-test-addon\n * Requires Plugins: elementor\n */\n```\n\n----------------------------------------\n\nTITLE: Running Elementor System Info CLI Command\nDESCRIPTION: The command to display the system information in JSON format using WP-CLI. This helps developers and support engineers debug issues by providing complete website configuration details.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/system-info.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor system-info\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Elementor Library via WP-CLI\nDESCRIPTION: This command disconnects a site from the Elementor library using WP-CLI. It accepts an optional --user parameter to specify which WordPress user to disconnect. The user can be identified by their user ID, login name, or email address.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/library-disconnect.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor library disconnect [--user]\n```\n\n----------------------------------------\n\nTITLE: Basic Control Popover Structure in PHP\nDESCRIPTION: Basic implementation of a control popover in Elementor showing the essential structure with popover toggle control and start/end methods. The popover toggle control includes basic configuration options for labels and return values.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-popovers.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'popover-toggle',\n\t[\n\t\t'type' => \\Elementor\\Controls_Manager::POPOVER_TOGGLE,\n\t\t'label' => esc_html__( 'Box', 'textdomain' ),\n\t\t'label_off' => esc_html__( 'Default', 'textdomain' ),\n\t\t'label_on' => esc_html__( 'Custom', 'textdomain' ),\n\t\t'return_value' => 'yes',\n\t]\n);\n\n$this->start_popover();\n\n$this->end_popover();\n```\n\n----------------------------------------\n\nTITLE: Basic Elementor Template Structure in JSON\nDESCRIPTION: The basic JSON structure for Elementor templates showing core properties including title, type, version, page settings and content arrays.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/general-structure.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"Template Title\",\n\t\"type\": \"page\",\n\t\"version\": \"0.4\",\n\t\"page_settings\": [],\n\t\"content\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Content Caching in Elementor Widget\nDESCRIPTION: Basic implementation of a widget class that enables output caching by declaring static content. Used for widgets that return the same content for all users.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-output-caching.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function is_dynamic_content(): bool {\n\t\treturn false;\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Widget Action from Context Menu in Elementor\nDESCRIPTION: This snippet demonstrates how to remove a 'widget-action' from the 'custom-widget-actions' group in the widget context menu. It uses the 'elements/context-menu/groups' filter hook to find and remove the target action by name.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/remove-action.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nelementor.hooks.addFilter( 'elements/context-menu/groups', ( customGroups, elementType ) => {\n\n\tif ( 'widget' === elementType ) {\n\t\tcustomGroups.forEach( ( group ) => {\n\t\t\tif ( 'custom-widget-actions' === group.name ) {\n\t\t\t\tconst actionIndex = group.actions.findIndex( ( action ) => 'widget-action' === action.name );\n\t\t\t\tif ( actionIndex > -1 ) {\n\t\t\t\t\tgroup.actions.splice( actionIndex, 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn customGroups;\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Main Document Component Implementation\nDESCRIPTION: Demonstrates the implementation of a main document component with sub-component registration.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/js/components.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as components from './';\n\nexport default class Component extends $e.modules.ComponentBase {\n    getNamespace() {\n        return 'document';\n    }\n    \n    registerAPI() {\n        // Register sub components.\n        Object.values( components ).forEach( ( ComponentClass ) =>\n            $e.components.register( new ComponentClass )\n        );\n    \n        super.registerAPI();\n    }\n}\n\nexport default class Component;\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS Rule to Elementor Element\nDESCRIPTION: This function adds a simple CSS rule to the generated CSS files for Elementor elements. It demonstrates how to use the 'elementor/element/parse_css' hook to add a fixed width and height to a custom selector.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/parse-element-css.md#2025-04-20_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * Add custom CSS rule.\n *\n * @since 1.0.0\n * @param \\Elementor\\Core\\Files\\CSS\\Post $post_css_file The post CSS file instance.\n * @param \\Elementor\\Element_Base        $element       The element instance.\n */\nfunction add_custom_css_rule_to_the_css_file( $post_css_file, $element ) {\n\n\t$post_css_file->get_stylesheet()->add_rules(\n\t\t'.my-selector',\n\t\t[\n\t\t\t'width' => '50px',\n\t\t\t'height' => '50px',\n\t\t]\n\t);\n\n}\nadd_action(\t'elementor/element/parse_css', 'add_custom_css_rule_to_the_css_file', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Multiple Dependent Controls in Elementor\nDESCRIPTION: An enhanced border controls example with multiple dependencies. The color and width controls appear only when the switcher is on AND a border style is selected, using both equality and inequality checks.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/conditional-display.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'border',\n\t[\n\t\t'label' => esc_html__( 'Border', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::SWITCHER,\n\t]\n);\n\n$this->add_control(\n\t'border_style',\n\t[\n\t\t'label' => esc_html__( 'Border Style', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::SELECT,\n\t\t'options' => [\n\t\t\t'' => esc_html__( 'None', 'textdomain' ),\n\t\t\t'solid' => esc_html__( 'Solid', 'textdomain' ),\n\t\t\t'double' => esc_html__( 'Double', 'textdomain' ),\n\t\t\t'dotted' => esc_html__( 'Dotted', 'textdomain' ),\n\t\t\t'dashed' => esc_html__( 'Dashed', 'textdomain' ),\n\t\t\t'groove' => esc_html__( 'Groove', 'textdomain' ),\n\t\t],\n\t\t'selectors' => [\n\t\t\t'{{WRAPPER}} .inner_class' => 'border-style: {{VALUE}}',\n\t\t],\n\t\t'condition' => [\n\t\t\t'border' => 'yes',\n\t\t],\n\n\t]\n);\n\n$this->add_control(\n\t'border_color',\n\t[\n\t\t'label' => esc_html__( 'Border Color', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n\t\t'default' => '',\n\t\t'selectors' => [\n\t\t\t'{{WRAPPER}} .inner_class' => 'border-color: {{VALUE}}',\n\t\t],\n\t\t'condition' => [\n\t\t\t'border' => 'yes',\n\t\t\t'border_style!' => '',\n\t\t],\n\t]\n);\n\n$this->add_responsive_control(\n\t'border_width',\n\t[\n\t\t'label' => esc_html__( 'Border Width', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::DIMENSIONS,\n\t\t'selectors' => [\n\t\t\t'{{WRAPPER}} .inner_class' => 'border-width: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',\n\t\t],\n\t\t'condition' => [\n\t\t\t'border' => 'yes',\n\t\t\t'border_style!' => '',\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Elementor Init Hook in PHP\nDESCRIPTION: This code snippet demonstrates how to use the 'elementor/init' action hook in PHP. It shows a basic structure for adding a custom function to be executed when Elementor is fully loaded.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/elementor-init.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction my_plugin() {\n\n\t// ...\n\n}\nadd_action( 'elementor/init', 'my_plugin' );\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Custom Data Control in Elementor\nDESCRIPTION: This code demonstrates how to create a custom data control for Elementor and set a default value for it. The custom control represents continents with 'Europe' set as the default value.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/controls/control-values.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Control extends \\Elementor\\Base_Data_Control {\n\n\tpublic function get_type(): string {\n\t\treturn 'continents-control';\n\t}\n\n\tprotected function get_default_settings(): array {\n\t\treturn [\n\t\t\t'continents' => [ 'Asia', 'Africa', 'Europe', 'North America', 'South America', 'Australia/Oceania', 'Antarctica', ]\n\t\t];\n\t}\n\n\tpublic function get_default_value(): string {\n\t\treturn 'Europe';\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Enqueuing a Custom Script for Elementor Context Menus\nDESCRIPTION: The main PHP plugin file that defines plugin metadata and handles script enqueuing in the Elementor editor. It registers a JavaScript file that will modify the context menu and enqueues it only in the Elementor editor using the 'elementor/editor/after_enqueue_scripts' hook.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/simple-example.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Elementor Context Menus\n * Description: Custom context menus for Elementor page builder.\n * Plugin URI:  https://elementor.com/\n * Version:     1.0.0\n * Author:      Elementor Developer\n * Author URI:  https://developers.elementor.com/\n * Text Domain: elementor-context-menus\n *\n * Requires Plugins: elementor\n * Elementor tested up to: 3.25.0\n * Elementor Pro tested up to: 3.25.0\n */\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\nfunction elementor_context_menus_scripts() {\n\n\twp_enqueue_script(\n\t\t'elementor-context-menus',\n\t\tplugins_url( 'assets/js/context-menus.js', __FILE__ ),\n\t\t[],\n\t\t'1.0.0',\n\t\tfalse\n\t);\n\n}\nadd_action( 'elementor/editor/after_enqueue_scripts', 'elementor_context_menus_scripts' );\n```\n\n----------------------------------------\n\nTITLE: Flushing and Regenerating CSS Files in Elementor\nDESCRIPTION: This command flushes the CSS files for all Elementor pages and then recreates new CSS files based on the most recent settings in the database.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/flush-css.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor flush-css --regenerate\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Elementor Experiments Deactivation Command\nDESCRIPTION: A practical example showing how to deactivate the 'container' experiment in Elementor using the WordPress CLI command. This demonstrates the proper syntax with an actual experiment name.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/experiments-deactivate.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor experiments deactivate container\n```\n\n----------------------------------------\n\nTITLE: Implementing Notice Control in Elementor Widget\nDESCRIPTION: Example of adding a notice control to an Elementor widget. The code demonstrates setting up a dismissible warning notice with a custom heading and content within a widget's control section.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-notice.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'custom_panel_notice',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::NOTICE,\n\t\t\t\t'notice_type' => 'warning',\n\t\t\t\t'dismissible' => true,\n\t\t\t\t'heading' => esc_html__( 'Custom Notice', 'textdomain' ),\n\t\t\t\t'content' => esc_html__( 'Lorem ipsum dolor sit amet consectetur adipisicing elit.', 'textdomain' ),\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Elementor Page with Widget Elements\nDESCRIPTION: Demonstrates a page structure containing a container with three different widget types (heading, image, and button), showing how widget elements store their specific settings and properties.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/general-elements.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"About Page\",\n\t\"type\": \"page\",\n\t\"version\": \"0.4\",\n\t\"page_settings\": [],\n\t\"content\": [\n\t\t{\n\t\t\t\"id\": \"6af611eb\",\n\t\t\t\"elType\": \"container\",\n\t\t\t\"isInner\": false,\n\t\t\t\"settings\": [],\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"6a637978\",\n\t\t\t\t\t\"elType\": \"widget\",\n\t\t\t\t\t\"widgetType\": \"heading\",\n\t\t\t\t\t\"isInner\": false,\n\t\t\t\t\t\"settings\": {\n\t\t\t\t\t\t\"title\": \"Add Your Heading Text Here\",\n\t\t\t\t\t\t\"align\": \"center\"\n\t\t\t\t\t},\n\t\t\t\t\t\"elements\": []\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"687dba89\",\n\t\t\t\t\t\"elType\": \"widget\",\n\t\t\t\t\t\"widgetType\": \"image\",\n\t\t\t\t\t\"isInner\": false,\n\t\t\t\t\t\"settings\": {\n\t\t\t\t\t\t\"_padding\": {\n\t\t\t\t\t\t\t\"unit\": \"px\",\n\t\t\t\t\t\t\t\"top\": \"100\",\n\t\t\t\t\t\t\t\"right\": \"0\",\n\t\t\t\t\t\t\t\"bottom\": \"100\",\n\t\t\t\t\t\t\t\"left\": \"0\",\n\t\t\t\t\t\t\t\"isLinked\": false\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"elements\": []\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"6f58bb5\",\n\t\t\t\t\t\"elType\": \"widget\",\n\t\t\t\t\t\"widgetType\": \"button\",\n\t\t\t\t\t\"isInner\": false,\n\t\t\t\t\t\"settings\": {\n\t\t\t\t\t\t\"text\": \"Click Me\",\n\t\t\t\t\t\t\"button_text_color\": \"#000000\",\n\t\t\t\t\t\t\"background_color\": \"#E7DFF5\"\n\t\t\t\t\t},\n\t\t\t\t\t\"elements\": []\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Unregistering Elementor Controls using PHP\nDESCRIPTION: This code snippet demonstrates how to unregister existing Elementor controls. It hooks into the 'elementor/controls/register' action and uses the Controls_Manager to unregister specific controls by their IDs.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/managers/unregistering-controls.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Unregister Elementor controls.\n *\n * @param \\Elementor\\Controls_Manager $controls_manager Elementor controls manager.\n * @return void\n */\nfunction unregister_controls( $controls_manager ) {\n\n\t$controls_manager->unregister( 'control-1' );\n\t$controls_manager->unregister( 'control-2' );\n\n}\nadd_action( 'elementor/controls/register', 'unregister_controls' );\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Title in Elementor PHP Widget\nDESCRIPTION: Shows how to implement the get_title() method to set a translatable widget title that appears in the Elementor editor interface. Uses WordPress internationalization functions.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-information.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tpublic function get_title(): string {\n\t\treturn esc_html__( 'My Widget Name', 'textdomain' );\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Heading Widget Content in Elementor using PHP\nDESCRIPTION: This PHP function filters heading widgets and modifies their content by adding an external link icon when applicable. It uses the 'elementor/widget/render_content' filter hook to intercept and modify the widget's HTML output.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/render-widget-content.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Filters heading widgets and change their content.\n *\n * @since 1.0.0\n * @param string                 $widget_content The widget HTML output.\n * @param \\Elementor\\Widget_Base $widget         The widget instance.\n * @return string The changed widget content.\n */\nfunction change_heading_widget_content( $widget_content, $widget ) {\n\n\tif ( 'heading' === $widget->get_name() ) {\n\t\t$settings = $widget->get_settings();\n\n\t\tif ( ! empty( $settings['link']['is_external'] ) ) {\n\t\t\t$widget_content .= '<i class=\"fa fa-external-link\" aria-hidden=\"true\"></i>';\n\t\t}\n\t}\n\n\treturn $widget_content;\n\n}\nadd_filter( 'elementor/widget/render_content', 'change_heading_widget_content', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Widget Scripts in WordPress\nDESCRIPTION: Demonstrates how to register JavaScript files for Elementor widgets using wp_register_script(). Shows registration of both standalone scripts and those with external dependencies.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/scripts-styles/widget-scripts.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction my_plugin_register_widget_scripts() {\n\twp_register_script( 'widget-script-1', plugins_url( 'assets/js/widget-script-1.js', __FILE__ ) );\n\twp_register_script( 'widget-script-2', plugins_url( 'assets/js/widget-script-2.js', __FILE__ ), [ 'external-library' ] );\n\twp_register_script( 'external-library', plugins_url( 'assets/js/libs/external-library.js', __FILE__ ) );\n}\nadd_action( 'wp_enqueue_scripts', 'my_plugin_register_widget_scripts' );\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Control Section in Elementor Widget (PHP)\nDESCRIPTION: Shows how to create a single control section within an Elementor widget class. The section is added to the 'Content' tab and includes placeholders for adding controls.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-section.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control();\n\n\t\t$this->add_control();\n\n\t\t$this->add_control();\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Tab to Elementor Panel in PHP\nDESCRIPTION: This code shows how to create a custom tab in Elementor by using the add_tab() method with the elementor/init hook.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor/elementor-tabs.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction add_panel_tab() {\n\t\\Elementor\\Controls_Manager::add_tab(\n\t\t'new-tab',\n\t\tesc_html__( 'New Tab', 'textdomain' )\n\t);\n}\nadd_action( 'elementor/init', 'add_panel_tab' );\n```\n\n----------------------------------------\n\nTITLE: Disabling Page Title Display in Hello Elementor Theme using PHP Filter\nDESCRIPTION: Code snippet demonstrating how to prevent the Hello Elementor theme from displaying the h1 page title by adding a filter hook that returns false. This should be implemented in the child theme's functions.php file.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hello-elementor-theme/hello_elementor_page_title.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'hello_elementor_page_title', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Adding Column Group to Elementor Context Menu\nDESCRIPTION: Implementation of adding a new group to the column context menu. The group structure is defined but actions are left empty for custom implementation.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/add-new-group.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nelementor.hooks.addFilter( 'elements/context-menu/groups', ( customGroups, elementType ) => {\n\n\tconst newGroup = {\n\t\tname: 'custom-column-actions',\n\t\tactions: [\n\t\t\t/* Actions */\n\t\t],\n\t}\n\n\tif ( 'column' === elementType ) {\n\t\tcustomGroups.push( newGroup );\n\t}\n\n\treturn customGroups;\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Flushing CSS Files Across a WordPress Multisite Network\nDESCRIPTION: This command flushes the CSS files for all Elementor pages across all sites in a WordPress multisite network.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/flush-css.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor flush-css --network\n```\n\n----------------------------------------\n\nTITLE: Changing Default Elementor Panel using PHP Filter\nDESCRIPTION: PHP function that modifies the Elementor configuration to set the page settings panel as the default panel when the editor loads. Uses the 'elementor/document/config' filter to override the default panel route.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor/default-panel.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction change_default_elementor_panel( $config ) {\n\n\t$config = array_replace_recursive(\n\t\t$config,\n\t\t[\n\t\t\t'panel' => [\n\t\t\t\t'default_route' => 'panel/page-settings/settings'\n\t\t\t]\n\t\t]\n\t);\n\n\treturn $config;\n\n}\nadd_filter( 'elementor/document/config', 'change_default_elementor_panel' );\n```\n\n----------------------------------------\n\nTITLE: Implementing AI Capabilities for Media Controls in Elementor\nDESCRIPTION: This snippet demonstrates how to add AI capabilities to Media controls in Elementor, enabling AI-generated images for various categories such as background, 3D, photographic, handmade, and digital art.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/ai.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'background-image',\n\t[\n\t\t'label' => esc_html__( 'Choose Image', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::MEDIA,\n\t\t'ai' => [\n\t\t\t'active' => true,\n\t\t],\n\n\t]\n);\n\n$this->add_control(\n\t'background-image',\n\t[\n\t\t'label' => esc_html__( 'Choose Image', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::MEDIA,\n\t\t'dynamic' => [\n\t\t\t'active' => true,\n\t\t],\n\t\t'ai' => [\n\t\t\t'category' => 'background',\n\t\t],\n\n\t]\n);\n\n$this->add_control(\n\t'3d-cover-image',\n\t[\n\t\t'label' => esc_html__( 'Choose Image', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::MEDIA,\n\t\t'dynamic' => [\n\t\t\t'active' => true,\n\t\t],\n\t\t'ai' => [\n\t\t\t'category' => '3d',\n\t\t],\n\n\t]\n);\n\n$this->add_control(\n\t'photo',\n\t[\n\t\t'label' => esc_html__( 'Choose Image', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::MEDIA,\n\t\t'dynamic' => [\n\t\t\t'active' => true,\n\t\t],\n\t\t'ai' => [\n\t\t\t'category' => 'photographic',\n\t\t],\n\n\t]\n);\n\n$this->add_control(\n\t'drawings',\n\t[\n\t\t'label' => esc_html__( 'Choose Image', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::MEDIA,\n\t\t'dynamic' => [\n\t\t\t'active' => true,\n\t\t],\n\t\t'ai' => [\n\t\t\t'category' => 'handmade',\n\t\t],\n\n\t]\n);\n\n$this->add_control(\n\t'art-image',\n\t[\n\t\t'label' => esc_html__( 'Choose Image', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::MEDIA,\n\t\t'dynamic' => [\n\t\t\t'active' => true,\n\t\t],\n\t\t'ai' => [\n\t\t\t'category' => 'digital-art',\n\t\t],\n\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Shape Dividers in Theme\nDESCRIPTION: Example code for adding custom shape dividers when implementing in a WordPress theme. Uses get_stylesheet_directory functions for file paths.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/shapes.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Add additional shape dividers to Elementor.\n *\n * @since 1.0.0\n * @param array $additional_shapes Additional Elementor shape dividers.\n */\nfunction custom_elementor_shape_dividers( $additional_shapes ) {\n\n\t$additional_shapes['shape-divider-1'] = [\n\t\t'title'        => esc_html__( 'Shape divider 1', 'textdomain' ),\n\t\t'url'          => get_stylesheet_directory_uri() . '/assets/shapes/shape-1.svg',\n\t\t'path'         => get_stylesheet_directory() . '/assets/shapes/shape-1.svg',\n\t\t'height_only'  => true,\n\t];\n\n\t$additional_shapes['shape-divider-2'] = [\n\t\t'title'        => esc_html__( 'Shape divider 2', 'textdomain' ),\n\t\t'url'          => get_stylesheet_directory_uri() . '/assets/shapes/shape-2.svg',\n\t\t'path'         => get_stylesheet_directory() . '/assets/shapes/shape-2.svg',\n\t\t'has_flip'     => true,\n\t\t'has_negative' => true,\n\t\t'height_only'  => true,\n\t];\n\n\treturn $additional_shapes;\n\n}\nadd_filter( 'elementor/shapes/additional_shapes', 'custom_elementor_shape_dividers' );\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Unused Elementor Widgets\nDESCRIPTION: This code snippet shows how to remove multiple unused Elementor widgets using a foreach loop. It defines an array of widget names to unregister and iterates through them, unregistering each one. The list of widgets is commented out and can be customized as needed.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/managers/unregistering-widgets.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Unregister multiple unused widgets.\n *\n * @param \\Elementor\\Widgets_Manager $widgets_manager Elementor widgets manager.\n * @return void\n */\nfunction remove_unused_widgets( $widgets_manager ) {\n\n\t$widgets_to_unregister = [\n\t\t// 'common',\n\t\t// 'inner-section',\n\t\t// 'heading',\n\t\t// 'image',\n\t\t// 'text-editor',\n\t\t// 'video',\n\t\t// 'button',\n\t\t// 'divider',\n\t\t// 'spacer',\n\t\t// 'image-box',\n\t\t// 'google_maps',\n\t\t// 'icon',\n\t\t// 'icon-box',\n\t\t// 'star-rating',\n\t\t// 'image-carousel',\n\t\t// 'image-gallery',\n\t\t// 'icon-list',\n\t\t// 'counter',\n\t\t// 'progress',\n\t\t// 'testimonial',\n\t\t// 'tabs',\n\t\t// 'accordion',\n\t\t// 'toggle',\n\t\t// 'social-icons',\n\t\t// 'alert',\n\t\t// 'audio',\n\t\t// 'shortcode',\n\t\t// 'html',\n\t\t// 'menu-anchor',\n\t\t// 'sidebar',\n\t\t// 'read-more',\n\t];\n\n\tforeach ( $widgets_to_unregister as $widget ) {\n\t\t$widgets_manager->unregister( $widget );\n\t}\n\n}\nadd_action( 'elementor/widgets/register', 'remove_unused_widgets' );\n```\n\n----------------------------------------\n\nTITLE: Defining Widget Icon in Elementor PHP Widget\nDESCRIPTION: Demonstrates implementation of the get_icon() method to set a widget icon using Elementor or FontAwesome icon classes. The icon appears in the editor's elements and navigator panels.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-information.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tpublic function get_icon(): string {\n\t\treturn 'eicon-code';\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Widget Inner Wrapper Configuration in PHP\nDESCRIPTION: PHP method to use single wrapper element for optimized DOM structure.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-inner-wrapper.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function has_widget_inner_wrapper(): bool {\n\treturn false;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Media Control in Elementor Widget\nDESCRIPTION: Shows how to implement a video media control in an Elementor widget for self-hosted videos. Includes control registration and rendering of the video element.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-media.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'video',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Choose Video File', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::MEDIA,\n\t\t\t\t'media_types' => [ 'video' ],\n\t\t\t\t'default' => [\n\t\t\t\t\t'url' => \\Elementor\\Utils::get_placeholder_image_src(),\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\t$video_url = $settings['video']['url'];\n\n\t\tif ( empty( $video_url ) ) {\n\t\t\treturn;\n\t\t}\n\t\t?>\n\t\t<video src=\"<?php echo esc_attr( $video_url ); ?>\" class=\"elementor-video\"></video>\n\t\t<?php\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Control Sections in Elementor Widget (PHP)\nDESCRIPTION: Demonstrates how to create multiple control sections within the same tab in an Elementor widget. This example creates two sections ('Content' and 'Info') under the 'Content' tab.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-section.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control();\n\n\t\t$this->add_control();\n\n\t\t$this->add_control();\n\n\t\t$this->end_controls_section();\n\n\t\t$this->start_controls_section(\n\t\t\t'info_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Info', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control();\n\n\t\t$this->add_control();\n\n\t\t$this->add_control();\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a New Item to Elementor Finder's 'Create' Category in PHP\nDESCRIPTION: This code snippet demonstrates how to use the 'elementor/finder/categories' filter hook to add a new 'theme-template' item to the 'create' category in Elementor's Finder. It includes the item's title, icon, URL, and keywords for search functionality.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/finder/add-items-to-existing-category.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function add_new_finder_items( array $categories ) {\n\n\t$categories['create']['items']['theme-template'] = [\n\t\t'title' => esc_html__( 'Add New Theme Template', 'textdomain' ),\n\t\t'icon' => 'plus-circle-o',\n\t\t'url' => $this->get_admin_templates_url() . '#add_new',\n\t\t'keywords' => [ 'template', 'theme', 'new', 'create' ],\n\t];\n\treturn $categories;\n\n}\nadd_filter( 'elementor/finder/categories', 'add_new_finder_items' );\n```\n\n----------------------------------------\n\nTITLE: Setting Control Label in Elementor (PHP)\nDESCRIPTION: Shows how to set a label for an Elementor control. The label is a string that helps users understand what the control represents.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/labels-description.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'unique-control-name',\n\t[\n\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t'label' => esc_html__( 'Control Label', 'textdomain' ),\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Removing Custom Widget Group from Elementor Context Menu\nDESCRIPTION: This code removes the 'custom-widget-actions' group from the widgets context menu in Elementor. It uses the 'elements/context-menu/groups' filter hook to find and splice out the specific group.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/remove-group.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nelementor.hooks.addFilter( 'elements/context-menu/groups', ( customGroups, elementType ) => {\n\n\tif ( 'widget' === elementType ) {\n\t\tconst groupIndex = customGroups.findIndex( ( group ) => 'custom-widget-actions' === group.name );\n\t\tif ( groupIndex > -1 ) {\n\t\t\tcustomGroups.splice( groupIndex, 1 );\n\t\t}\n\t}\n\n\treturn customGroups;\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Executing Elementor CLI Flush CSS Command\nDESCRIPTION: The basic command to flush CSS files for all Elementor pages. This command deletes the old CSS files but does not create new ones.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/flush-css.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor flush-css\n```\n\n----------------------------------------\n\nTITLE: Updating Deprecated Filter Hooks in Addon Code\nDESCRIPTION: This diff snippet demonstrates how addon developers should update their code to use the new filter hook instead of the deprecated one.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/deprecations/deprecated-filter-hook.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction hook_callback() {\n\t/* ... */\n}\n- add_filter( 'elementor/old/filter', 'hook_callback' );\n+ add_filter( 'elementor/new/filter', 'hook_callback' );\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Element Type Ready Events\nDESCRIPTION: Examples showing how to handle ready events for specific element types and skins.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/js.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// For a widget without a skin (skin = default)\nelementorFrontend.hooks.addAction( 'frontend/element_ready/image.default', function( $scope ) {\n\tif ( $scope.find( 'a' ) ){\n\t\t$scope.find( 'a' ).lightbox();\n\t}\n} );\n\n// For a widget with a skin named `satellite`\nelementorFrontend.hooks.addAction( 'frontend/element_ready/google-maps.satellite', function( $scope ) {\n\tvar $iframe = $scope.find( 'iframe' );\n\tvar $iframeUrl = $iframe.attr( 'src' );\n\t$iframe.attr( 'src', $iframeUrl + '&maptype=satellite' );\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Field Data Methods in Elementor Pro Form Field\nDESCRIPTION: Implementation of required methods for defining a custom form field in Elementor Pro. The code shows how to set up the field type identifier and display name through get_type() and get_name() methods.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-fields/field-data.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Field extends \\ElementorPro\\Modules\\Forms\\Fields\\Field_Base {\n\n\tpublic function get_type(): string {\n\t\treturn 'field_id';\n\t}\n\n\tpublic function get_name(): string {\n\t\treturn esc_html__( 'My Field Label', 'textdomain' );\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Google Fonts Loading in Elementor Frontend\nDESCRIPTION: Code snippet that demonstrates how to use the elementor/frontend/print_google_fonts filter hook to prevent Elementor from loading Google fonts on the frontend. This is achieved by adding a filter that returns false.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/print-google-fonts.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Prevent Elementor from loading Google Fonts in the frontend.\n *\n * @since 1.0.0\n */\nadd_filter( 'elementor/frontend/print_google_fonts', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Implementing a Select Control in Elementor Widget PHP\nDESCRIPTION: This example shows how to add a select control to an Elementor widget. It demonstrates setting up options for the select field and defining a default value.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/regular-control.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'open_lightbox',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::SELECT,\n\t\t\t\t'label' => esc_html__( 'Lightbox', 'textdomain' ),\n\t\t\t\t'options' => [\n\t\t\t\t\t'default' => esc_html__( 'Default', 'textdomain' ),\n\t\t\t\t\t'yes' => esc_html__( 'Yes', 'textdomain' ),\n\t\t\t\t\t'no' => esc_html__( 'No', 'textdomain' ),\n\t\t\t\t],\n\t\t\t\t'default' => 'no',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Container with Multiple Widgets\nDESCRIPTION: Example showing a container with three different widgets (heading, image, and button) with their respective settings.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/page-content.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"About Page\",\n\t\"type\": \"page\",\n\t\"version\": \"0.4\",\n\t\"page_settings\": [],\n\t\"content\": [\n\t\t{\n\t\t\t\"id\": \"6af611eb\",\n\t\t\t\"elType\": \"container\",\n\t\t\t\"isInner\": false,\n\t\t\t\"settings\": [],\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"6a637978\",\n\t\t\t\t\t\"elType\": \"widget\",\n\t\t\t\t\t\"widgetType\": \"heading\",\n\t\t\t\t\t\"isInner\": false,\n\t\t\t\t\t\"settings\": {\n\t\t\t\t\t\t\"title\": \"Add Your Heading Text Here\",\n\t\t\t\t\t\t\"align\": \"center\"\n\t\t\t\t\t},\n\t\t\t\t\t\"elements\": []\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"687dba89\",\n\t\t\t\t\t\"elType\": \"widget\",\n\t\t\t\t\t\"widgetType\": \"image\",\n\t\t\t\t\t\"isInner\": false,\n\t\t\t\t\t\"settings\": {\n\t\t\t\t\t\t\"_padding\": {\n\t\t\t\t\t\t\t\"unit\": \"px\",\n\t\t\t\t\t\t\t\"top\": \"100\",\n\t\t\t\t\t\t\t\"right\": \"0\",\n\t\t\t\t\t\t\t\"bottom\": \"100\",\n\t\t\t\t\t\t\t\"left\": \"0\",\n\t\t\t\t\t\t\t\"isLinked\": false\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"elements\": []\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"6f58bb5\",\n\t\t\t\t\t\"elType\": \"widget\",\n\t\t\t\t\t\"widgetType\": \"button\",\n\t\t\t\t\t\"isInner\": false,\n\t\t\t\t\t\"settings\": {\n\t\t\t\t\t\t\"text\": \"Click Me\",\n\t\t\t\t\t\t\"button_text_color\": \"#000000\",\n\t\t\t\t\t\t\"background_color\": \"#E7DFF5\"\n\t\t\t\t\t},\n\t\t\t\t\t\"elements\": []\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Heading Controls After Section Start in PHP\nDESCRIPTION: This snippet shows how to inject a custom control specifically for the 'heading' element type after the 'section_title' section starts in Elementor.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/injecting-controls.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param \\Elementor\\Controls_Stack $element The element type.\n * @param array                     $args    Section arguments.\n */\nfunction inject_heading_controls( $element, $args ) {\n\n\t$element->add_control(\n\t\t'custom_control',\n\t\t[\n\t\t\t'type' => \\Elementor\\Controls_Manager::NUMBER,\n\t\t\t'label' => esc_html__( 'Custom Control', 'textdomain' ),\n\t\t]\n\t);\n\n}\nadd_action( 'elementor/element/heading/section_title/before_section_start', 'inject_heading_controls', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Control in Elementor Widget\nDESCRIPTION: This code snippet demonstrates how to add an Alert Control to an Elementor widget. The example creates a warning alert with a heading, content text, and a link. Alert controls are useful for displaying important information to users in the Elementor panel.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-alert.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'custom_panel_alert',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::ALERT,\n\t\t\t\t'alert_type' => 'warning',\n\t\t\t\t'heading' => esc_html__( 'Custom Alert', 'textdomain' ),\n\t\t\t\t'content' => esc_html__( 'Lorem ipsum dolor sit amet consectetur adipisicing elit.', 'textdomain' ) . ' <a href=\"\">' . esc_html__( 'Learn more', 'textdomain' ) . '</a>',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Hooks in Elementor Component\nDESCRIPTION: This code snippet shows how to import hooks and use them in an Elementor component. It demonstrates the implementation of the defaultHooks method to import and use hooks.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/js/hooks.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as hooks from './hooks/';\n\nexport class Component extends $e.modules.ComponentBase {\n    getNamespace() {\n        return 'component-name';\n    }\n\n    defaultHooks() {\n        return this.importHooks( hooks );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Action Icon in Section Group of Elementor Context Menu\nDESCRIPTION: This snippet demonstrates how to change the icon of a specific action within a group in the section context menu. It uses the 'elements/context-menu/groups' filter to update the icon of the 'section-action-1' action in the 'custom-section-actions' group.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/update-group.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nelementor.hooks.addFilter( 'elements/context-menu/groups', ( customGroups, elementType ) => {\n\n\tif ( 'section' === elementType ) {\n\t\tcustomGroups.forEach( ( group ) => {\n\t\t\tif ( 'custom-section-actions' === group.name ) {\n\t\t\t\tgroup.actions.forEach( ( action ) => {\n\t\t\t\t\tif ( 'section-action-1' === action.name ) {\n\t\t\t\t\t\taction.icon = 'eicon-code';\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn customGroups;\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Properties of a Section Action in Elementor Context Menu\nDESCRIPTION: Comprehensively updates a column action by modifying multiple properties including the icon ('eicon-alert'), title ('Hellooo'), and callback function to display an alert message.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/update-action.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nelementor.hooks.addFilter( 'elements/context-menu/groups', ( customGroups, elementType ) => {\n\n\tif ( 'column' === elementType ) {\n\t\tcustomGroups.forEach( ( group ) => {\n\t\t\tif ( 'custom-column-actions' === group.name ) {\n\t\t\t\tgroup.actions.forEach( ( action ) => {\n\t\t\t\t\tif ( 'column-action' === action.name ) {\n\t\t\t\t\t\taction.icon = 'eicon-alert';\n\t\t\t\t\t\taction.title = 'Hellooo';\n\t\t\t\t\t\taction.callback = () => alert( 'bla bla' );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn customGroups;\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Exporting Elementor Kit Using CLI Command\nDESCRIPTION: The basic command syntax for exporting Elementor kits. It requires a file path parameter and offers an optional include parameter to specify which data types to export.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/kit-export.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor kit export <file-path> [--include]\n```\n\n----------------------------------------\n\nTITLE: Setting Local Plugin Placeholder Image in Elementor\nDESCRIPTION: Filter hook implementation to change Elementor's default placeholder image to a local image from the plugin directory. Uses plugins_url() to generate the correct path to the image file.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/placeholder-image.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Change the default Elementor placeholder image.\n *\n * Use an image located in the plugin assets files.\n *\n * @since 1.0.0\n */\nfunction custom_elementor_placeholder_image() {\n\treturn plugins_url( 'assets/images/placeholder.png', __FILE__ );\n}\nadd_filter( 'elementor/utils/get_placeholder_image_src', 'custom_elementor_placeholder_image' );\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Widget Editor Panel Events\nDESCRIPTION: Example showing how to handle editor panel opening for a specific widget type.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/js.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nelementor.hooks.addAction( 'panel/open_editor/widget/slider', function( panel, model, view ) {\n   var $element = view.$el.find( '.elementor-selector' );\n\n   if ( $element.length ) {\n   \t$element.click( function() {\n   \t  alert( 'Some Message' );\n   \t} );\n   }\n} );\n```\n\n----------------------------------------\n\nTITLE: Basic Field Rendering in Elementor Forms\nDESCRIPTION: Basic implementation of the render() method for a custom Elementor form field. Demonstrates how to output a simple text input field.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-fields/field-render.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Field extends \\ElementorPro\\Modules\\Forms\\Fields\\Field_Base {\n\n\tpublic function render( $item, $item_index, $form ): void {\n\n\t\techo '<input type=\"text\" class=\"elementor-test-field\" title=\"Some text...\">';\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Conditions with Operator in Elementor\nDESCRIPTION: Shows how to use the advanced 'conditions' argument with the operator rule inside the term array, replacing the simple condition argument with more flexibility.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/conditional-display.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n'conditions' => [\n\t'terms' => [\n\t\t[\n\t\t\t'name' => 'control-name',\n\t\t\t'operator' => '!==',\n\t\t\t'value' => 'control-value',\n\t\t],\n\t],\n],\n```\n\n----------------------------------------\n\nTITLE: Return Value Structure for Elementor Gallery Control\nDESCRIPTION: Shows the structure of the data returned by the Gallery Control, which is an array of image objects containing the image ID and URL for each selected image.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-gallery.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\n\t[\n\t\t'id' => 0,\n\t\t'url' => ''\n\t],\n\t[\n\t\t'id' => 0,\n\t\t'url' => ''\n\t],\n]\n```\n\n----------------------------------------\n\nTITLE: Page with Multiple Empty Containers\nDESCRIPTION: Shows how multiple container elements are structured within a page, demonstrating the page-level properties and empty containers.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/container-element.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"Sample Page\",\n\t\"type\": \"page\",\n\t\"version\": \"0.4\",\n\t\"page_settings\": [],\n\t\"content\": [\n\t\t{\n\t\t\t\"id\": \"6af611eb\",\n\t\t\t\"elType\": \"container\",\n\t\t\t\"isInner\": false,\n\t\t\t\"settings\": [],\n\t\t\t\"elements\": []\n\t\t},\n\t\t{\n\t\t\t\"id\": \"7fb170b9\",\n\t\t\t\"elType\": \"container\",\n\t\t\t\"isInner\": false,\n\t\t\t\"settings\": [],\n\t\t\t\"elements\": []\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Controls for Custom Field in Elementor Pro Forms\nDESCRIPTION: This snippet demonstrates the basic structure for registering controls in a custom form field class by implementing the update_controls() method.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-fields/field-controls.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Field extends \\ElementorPro\\Modules\\Forms\\Fields\\Field_Base {\n\n\tpublic function update_controls( $widget ): void {\n\n\t\t/* ... */\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Styles to Multiple CSS Selectors in PHP\nDESCRIPTION: Demonstrates how to apply styles to multiple CSS selectors using a single control.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/selectors.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'text-color',\n\t[\n\t\t'label' => esc_html__( 'Color', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n\t\t'selectors' => [\n\t\t\t'{{WRAPPER}} .custom-container .heading, {{WRAPPER}} .custom-container .content' => 'color: {{VALUE}};',\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Widget Name Method in Elementor PHP Widget\nDESCRIPTION: Demonstrates how to set a unique identifier for an Elementor widget using the get_name() method. The name should contain only lowercase letters and underscores.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-information.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tpublic function get_name(): string {\n\t\treturn 'widget_name';\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Column Action from Context Menu in Elementor\nDESCRIPTION: This snippet shows how to remove a 'column-action' from the 'custom-column-actions' group in the column context menu. It filters the context menu groups, locates the specific action by name, and removes it from the group's actions array.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/remove-action.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nelementor.hooks.addFilter( 'elements/context-menu/groups', ( customGroups, elementType ) => {\n\n\tif ( 'column' === elementType ) {\n\t\tcustomGroups.forEach( ( group ) => {\n\t\t\tif ( 'custom-column-actions' === group.name ) {\n\t\t\t\tconst actionIndex = group.actions.findIndex( ( action ) => 'column-action' === action.name );\n\t\t\t\tif ( actionIndex > -1 ) {\n\t\t\t\t\tgroup.actions.splice( actionIndex, 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn customGroups;\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Finder Category Class in PHP\nDESCRIPTION: Demonstrates how to create a new finder category class by extending the Elementor base category class.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/finder/finder-structure.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass New_Finder_Category extends \\Elementor\\Core\\Common\\Modules\\Finder\\Base_Category {\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Elementor Library Sync in Bash\nDESCRIPTION: The standard command to synchronize the local template library with Elementor's cloud library, without any additional options.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/library-sync.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor library sync\n```\n\n----------------------------------------\n\nTITLE: Setting External URL Placeholder Image in Elementor\nDESCRIPTION: Filter hook implementation to change Elementor's default placeholder image to an external URL image. Uses the elementor/utils/get_placeholder_image_src filter to specify a custom image URL.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/placeholder-image.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Change the default Elementor placeholder image.\n *\n * Use an image located in an external URL.\n *\n * @since 1.0.0\n */\nfunction custom_elementor_placeholder_image() {\n\treturn 'https://developers.elementor.com/path/to/placeholder.png';\n}\nadd_filter( 'elementor/utils/get_placeholder_image_src', 'custom_elementor_placeholder_image' );\n```\n\n----------------------------------------\n\nTITLE: Basic Custom Query Filter Implementation in PHP\nDESCRIPTION: Base template for implementing a custom query filter callback function in Elementor. Shows the basic structure for modifying WP_Query objects.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/custom-query-filter.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Update the posts widget or portfolio widget query.\n *\n * @since 1.0.0\n * @param \\WP_Query $query The WordPress query instance.\n */\nfunction custom_query_callback( $query ) {\n\t// Modify the posts query here\n}\nadd_action( 'elementor/query/{$query_id}', 'custom_query_callback' );\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Rule with Unique Elementor Selector\nDESCRIPTION: This function demonstrates how to add a CSS rule with a unique Elementor selector. It uses theme configuration functions to get dynamic values for width and height, and applies them to the element's unique selector.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/parse-element-css.md#2025-04-20_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * parse element CSS.\n *\n * @since 1.0.0\n * @param \\Elementor\\Core\\Files\\CSS\\Post $post_css_file The post CSS file instance.\n * @param \\Elementor\\Element_Base        $element       The element instance.\n */\nfunction add_custom_rules_to_css_file( $post_css_file, $element ) {\n\n\t$item_width = some_get_theme_config_function( 'item_width' );\n\t$item_height = some_get_theme_config_function( 'item_height' );\n\n\t$post_css_file->get_stylesheet()->add_rules(\n\t\t$element->get_unique_selector(),\n\t\t[\n\t\t\t'width' => $item_width . 'px',\n\t\t\t'height' => $item_height . 'px',\n\t\t]\n\t);\n\n}\nadd_action(\t'elementor/element/parse_css', 'add_custom_rules_to_css_file', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Implementing Hidden Control in Elementor Widget\nDESCRIPTION: This PHP example demonstrates how to add a hidden control to an Elementor widget, including registering the control and using its value in both PHP render and JavaScript template functions.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-hidden.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'view',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'View', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::HIDDEN,\n\t\t\t\t'default' => 'traditional',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\t?>\n\t\t<!-- <?php echo $settings['view']; ?> -->\t\t\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<!-- {{{ settings.view }}} -->\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Return Value Structure for Image Size Control\nDESCRIPTION: Demonstrates the array structure returned by the image size control containing size and custom dimension values.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/group-control-image-size.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\n\t'{name}_size' => '',\n\t'{name}_custom_dimension' => '',\n]\n```\n\n----------------------------------------\n\nTITLE: Setting a Dynamic Tag Group in Elementor\nDESCRIPTION: This snippet shows how to assign a dynamic tag to a specific group by implementing the get_group() method in a custom tag class. The method returns an array containing the group identifier.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/dynamic-tags/dynamic-tags-groups.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Tag extends \\Elementor\\Core\\DynamicTags\\Tag {\n\n\tpublic function get_group(): array {\n\t\treturn [ 'action' ];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Archive Location in PHP\nDESCRIPTION: Basic implementation of an Elementor archive location in archive.php. Shows how to display the archive location between header and footer.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/displaying-locations.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nget_header();\n\n// Elementor `archive` location\nelementor_theme_do_location( 'archive' );\n\nget_footer();\n```\n\n----------------------------------------\n\nTITLE: Registering and Enqueuing Editor Styles After Elementor Styles in PHP\nDESCRIPTION: This snippet demonstrates how to register and enqueue custom stylesheets after Elementor styles are registered and enqueued. It uses the 'elementor/editor/after_register_styles' and 'elementor/editor/after_enqueue_styles' action hooks.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/scripts-styles/editor-styles.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction my_plugin_register_editor_styles() {\n\twp_register_style( 'editor-style-1', plugins_url( 'assets/css/editor-style-1.css', __FILE__ ) );\n\twp_register_style( 'editor-style-2', plugins_url( 'assets/css/editor-style-2.css', __FILE__ ), [ 'external-framework' ] );\n\twp_register_style( 'external-framework', plugins_url( 'assets/css/libs/external-framework.css', __FILE__ ) );\n}\nadd_action( 'elementor/editor/after_register_styles', 'my_plugin_register_editor_styles' );\n\nfunction my_plugin_enqueue_editor_styles() {\n\twp_enqueue_style( 'editor-style-1' );\n\twp_enqueue_style( 'editor-style-2' );\n}\nadd_action( 'elementor/editor/after_enqueue_styles', 'my_plugin_enqueue_editor_styles' );\n```\n\n----------------------------------------\n\nTITLE: Using Elementor Swiper Asset Dependencies\nDESCRIPTION: Demonstrates how to use Elementor's built-in Swiper library in a custom widget.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-dependencies.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tpublic function get_style_depends(): array {\n\t\treturn [ 'swiper', 'widget-custom-style' ];\n\t}\n\n\tpublic function get_script_depends(): array {\n\t\treturn [ 'swiper', 'widget-custom-script' ];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Preferences Data in Elementor\nDESCRIPTION: This code shows how to retrieve saved user preferences data from WordPress user metadata. It gets the value of a custom preference named 'something' for the current user.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor/user-preferences-panel.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$something = get_user_meta( get_current_user_id(), 'something', true );\n```\n\n----------------------------------------\n\nTITLE: Implementing Finder Category Methods in PHP\nDESCRIPTION: Shows the required methods for a finder category class including get_id(), get_title(), get_category_items(), and is_dynamic(). These methods define the category's unique identifier, display title, item list, and dynamic loading behavior.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/finder/finder-structure.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass New_Finder_Category extends \\Elementor\\Core\\Common\\Modules\\Finder\\Base_Category {\n\n\tpublic function get_id(): string {}\n\n\tpublic function get_title(): string {}\n\n\tpublic function get_category_items(): array {}\n\n\tpublic function is_dynamic(): bool {}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Disconnecting Elementor Library for Admin User\nDESCRIPTION: This example demonstrates how to use the Elementor library disconnect command to disconnect the WordPress admin user from the Elementor library. It specifies the user by their login name 'admin'.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/library-disconnect.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor library disconnect --user=admin\n```\n\n----------------------------------------\n\nTITLE: Conditional Skip Link URL Modification in Hello Elementor Theme (PHP)\nDESCRIPTION: This snippet shows how to use the 'hello_elementor_skip_link_url' filter hook to set different skip link URLs based on the WordPress template hierarchy. It checks for 404, page, post, and default conditions.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hello-elementor-theme/hello_elementor_skip_link_url.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction custom_hello_elementor_skip_link_url() {\n\tif ( is_404() ) {\n\t\treturn '#404-content';\n\t} else if ( is_page() ) {\n\t\treturn '#page-content';\n\t} else if ( is_post() ) {\n\t\treturn '#post-content';\n\t} else {\n\t\treturn '#main-content';\n\t} \n}\nadd_filter( 'hello_elementor_skip_link_url', 'custom_hello_elementor_skip_link_url' );\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Elementor Location\nDESCRIPTION: Function to register a new custom location 'main-sidebar' with specific configuration options including label, multiple instances support, and content editing restrictions.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/registering-locations.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction theme_prefix_register_elementor_locations( $elementor_theme_manager ) {\n\n\t$elementor_theme_manager->register_location(\n\t\t'main-sidebar',\n\t\t[\n\t\t\t'label' => esc_html__( 'Main Sidebar', 'theme-name' ),\n\t\t\t'multiple' => true,\n\t\t\t'edit_in_content' => false,\n\t\t]\n\t);\n\n}\nadd_action( 'elementor/theme/register_locations', 'theme_prefix_register_elementor_locations' );\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Skin to Google Maps Widget in Elementor\nDESCRIPTION: This PHP function demonstrates how to add a custom dark skin to the Google Maps widget in Elementor. It uses the 'elementor/widget/google_maps/skins_init' action hook to register the new skin.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/widget-skins.md#2025-04-20_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * Add dark skin for \"Google Maps\" widget.\n *\n * @since 1.0.0\n * @param \\Elementor\\Widget_Base $widget The widget instance.\n */\nfunction dark_skin_for_google_maps_widget( $widget ) {\n\n\t$widget->add_skin( new \\MySkins\\Skin_Dark_Map( $widget ) );\n\n}\nadd_action( 'elementor/widget/google_maps/skins_init', 'dark_skin_for_google_maps_widget' );\n```\n\n----------------------------------------\n\nTITLE: Shape Divider Configuration Structure\nDESCRIPTION: The array structure for defining a new shape divider in Elementor, including all available parameters and their types.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/shapes.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'shape-divider-id' => [\n\t'title'        => (string) Shape divider label.\n\t'url'          => (string) Shape divider file URI.\n\t'path'         => (string) Shape divider file path.\n\t'has_flip'     => (bool)   Whether to allow to flip the shape vertically. Default is false.\n\t'height_only'  => (bool)   Whether to allow to set width & height or only height. Default is false.\n\t'has_negative' => (bool)   Whether the shape divider has a negative variation. Default is false.\n]\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Selectors for Non-Group Controls in PHP\nDESCRIPTION: Demonstrates how to use the 'selectors' argument in non-group controls to specify CSS selectors and properties.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/selectors.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'unique-control-name',\n\t[\n\t\t'label' => esc_html__( 'Control Label', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n\t\t'selectors' => [\n\t\t\t'{{WRAPPER}} .css-selector' => 'css-property: {{VALUE}};',\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Category Dynamic Tag in PHP\nDESCRIPTION: Example showing how to create a dynamic tag class that returns a single category type (TEXT_CATEGORY) through the get_categories() method.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/dynamic-tags/dynamic-tags-categories.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Tag extends \\Elementor\\Core\\DynamicTags\\Tag {\n\n\tpublic function get_categories(): array {\n\t\treturn [ \\Elementor\\Modules\\DynamicTags\\Module::TEXT_CATEGORY ];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PDF Media Control in Elementor Widget\nDESCRIPTION: Demonstrates how to add a PDF file media control in an Elementor widget. Includes control setup for PDF file type and rendering as a downloadable link.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-media.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'pdf',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Choose PDF', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::MEDIA,\n\t\t\t\t'media_types' => [ 'application/pdf' ],\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\t$pdf_url = $settings['pdf']['url'];\n\n\t\tif ( ! empty( $pdf_url ) ) {\n\t\t\treturn;\n\t\t}\n\t\t?>\n\t\t<a download href=\"<?php echo esc_attr( $pdf_url ); ?>\">\n\t\t\t<?php echo esc_html__( 'Download PDF', 'textdomain' ); ?>\n\t\t</a>\n\t\t<?php\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Deprecation in PHP\nDESCRIPTION: Example showing how to properly deprecate a function by creating a new method while maintaining backward compatibility with the old one. Includes the deprecation notice using Plugin::$instance->modules_manager->get_modules( 'dev-tools' )->deprecation->deprecated_function().\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/deprecations/deprecated-function.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Elementor\\Plugin;\n\nclass Items {\n\n\tfunction register( $item_instance ): void {\n\t\t/* ... */\n\t}\n\n\tfunction add_item( $item_instance ): void {\n\t\t// Deprecation handler\n\t\tPlugin::$instance->modules_manager->get_modules( 'dev-tools' )->deprecation->deprecated_function(\n\t\t\t'add_item()',\n\t\t\t'3.5.0',\n\t\t\t'register()'\n\t\t);\n\n\t\t// Backwards compatibility\n\t\t$this->register( $item_instance );\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple CSS Properties in a Single Selector in PHP\nDESCRIPTION: Shows how to apply multiple CSS properties to a single selector using the 'selectors' argument.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/selectors.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'text-color',\n\t[\n\t\t'label' => esc_html__( 'Color', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n\t\t'selectors' => [\n\t\t\t'{{WRAPPER}} .custom-container' => 'color: {{VALUE}}; border-color: {{VALUE}}; outline-color: {{VALUE}};',\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Clearing Cache for WooCommerce Product Updates in Elementor Hosting\nDESCRIPTION: This PHP function adds a custom URL to the cache clearing list when a WooCommerce product is updated. It demonstrates how to use the 'elementor/hosting/page_cache/woocommerce_product_changed_urls' filter hook to maintain cache consistency for dynamic content.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hosting/page-cache-changed-urls.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param array\n * @param int\n * @return array\n */\nfunction custom_clear_cache_on_woccomerce_update( $urls, $product_id ) {\n\tif ( ( ! is_array( $urls ) ) || empty( $urls ) ) {\n\t\t$urls = [];\n\t}\n\n\t$url[] = site_url('/my-path');\n\n\treturn $urls;\n}\nadd_filter( 'elementor/hosting/page_cache/woocommerce_product_changed_urls', 'custom_clear_cache_on_woccomerce_update', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Registering Elementor Finder Social Media Plugin\nDESCRIPTION: Main plugin file that registers the custom finder category with Elementor. Includes plugin metadata and hooks into the elementor/finder/register action.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/finder/simple-example.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Elementor Finder Social Media\n * Description: Custom Social Media links in Elementor Finder.\n * Plugin URI:  https://elementor.com/\n * Version:     1.0.0\n * Author:      Elementor Developer\n * Author URI:  https://developers.elementor.com/\n * Text Domain: elementor-finder-social-media\n *\n * Requires Plugins: elementor\n * Elementor tested up to: 3.25.0\n * Elementor Pro tested up to: 3.25.0\n */\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Add custom Finder categories.\n *\n * Include finder file and register the class.\n *\n * @since 1.0.0\n * @param \\Elementor\\Core\\Common\\Modules\\Finder\\Categories_Manager $finder_categories_manager.\n * @return void\n */\nfunction elementor_finder_social_media( $finder_categories_manager ) {\n\n\trequire_once( __DIR__ . '/finder/social-media.php' );\n\n\t$finder_categories_manager->register( new Elementor_Finder_Social_Media() );\n\n};\nadd_action( 'elementor/finder/register', 'elementor_finder_social_media' );\n```\n\n----------------------------------------\n\nTITLE: Clearing Theme Builder Conditions in Elementor Pro using CLI\nDESCRIPTION: This command clears the cached conditions for the Elementor Pro theme-builder. When executed, it triggers a regeneration process of the conditions that determine where site part templates are applied.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/theme-builder-clear-conditions.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor-pro theme-builder clear-conditions\n```\n\n----------------------------------------\n\nTITLE: Modifying Skip Link URL in Hello Elementor Theme (PHP)\nDESCRIPTION: This snippet demonstrates how to use the 'hello_elementor_skip_link_url' filter hook to change the skip link URL to '#main'. It should be added to the functions.php file of a child theme.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hello-elementor-theme/hello_elementor_skip_link_url.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction custom_hello_elementor_skip_link_url() {\n\treturn '#main';\n}\nadd_filter( 'hello_elementor_skip_link_url', 'custom_hello_elementor_skip_link_url' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Elementor Single Location in single.php\nDESCRIPTION: Single post template implementation with Elementor single location support and fallback.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/migrating-themes-with-functions.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nget_header();\n\n// Elementor `single` location\nif ( ! function_exists( 'elementor_theme_do_location' ) || ! elementor_theme_do_location( 'single' ) ) {\n\tget_template_part( 'template-parts/single' );\n}\n\nget_footer();\n```\n\n----------------------------------------\n\nTITLE: Extending Elementor Multi Value Control\nDESCRIPTION: Example of extending the Control_Base_Multiple class to create a custom multi-value control in Elementor.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-types.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Control extends \\Elementor\\Control_Base_Multiple {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Selector for Group Controls in PHP\nDESCRIPTION: Shows how to use the 'selector' argument in group controls to specify CSS selectors for styling.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/selectors.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->add_group_control(\n\t\\Elementor\\Group_Control_Background::get_type(),\n\t[\n\t\t'name' => 'background',\n\t\t'selector' => '{{WRAPPER}} .css-selector',\n\t]\n);\n\n$this->add_group_control(\n\t\\Elementor\\Group_Control_Background::get_type(),\n\t[\n\t\t'name' => 'background_hover',\n\t\t'selector' => '{{WRAPPER}}:hover .css-selector',\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Control Data in PHP\nDESCRIPTION: Shows how to retrieve data from a single widget control using the get_settings_for_display() method in PHP rendering context.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-settings.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nprotected function render(): void {\n\t?>\n\t<h3>\n\t\t<?php echo $this->get_settings_for_display( 'title' ); ?>\n\t</h3>\n\t<?php\n}\n```\n\n----------------------------------------\n\nTITLE: Purging All Cache Using Elementor Hosting Action Hook\nDESCRIPTION: Example of how to trigger a complete cache purge for the entire domain using Elementor's hosting action hook. This action clears all CDN cache across the domain, though the effect may not be immediate.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hosting/page-cache-purge-everything.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Purge all the cache.\n */\ndo_action( 'elementor/hosting/page_cache/purge_everything' );\n```\n\n----------------------------------------\n\nTITLE: Basic Global Style Control Structure in PHP\nDESCRIPTION: Basic structure for adding a control with global style support in Elementor. Shows the minimal required configuration for enabling global styles.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/global-style.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'unique-control-name',\n\t[\n\t\t'label' => esc_html__( 'Control Label', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n\t\t'global' => [\n\t\t\t// ...\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Front Page Condition Check in PHP\nDESCRIPTION: Implementation of check() method to determine if the current page is the front page using WordPress is_front_page() function.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/theme-conditions/condition-check.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Condition extends \\ElementorPro\\Modules\\ThemeBuilder\\Conditions\\Condition_Base {\n\n\tpublic function check( $args ): bool {\n\t\treturn is_front_page();\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Element ID for Unique Styling in PHP and CSS\nDESCRIPTION: Shows how to use the {{ID}} variable for unique element styling and the resulting CSS output. Note: This method is discouraged for external developers.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/selectors.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'selectors' => [\n\t'#elementor-element-{{ID}}' => 'color: red;',\n],\n```\n\nLANGUAGE: css\nCODE:\n```\n#elementor-element-1a2b3c4 {\n\tcolor: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Before and After Specific Elementor Widgets\nDESCRIPTION: PHP functions that add div elements specifically before and after widget elements using the elementor/frontend/widget/before_render and elementor/frontend/widget/after_render hooks.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/render-frontend-elements.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Add `<div>` before all the widgets in the page.\n *\n * @since 1.0.0\n * @param \\Elementor\\Element_Base $element The element instance.\n */\nfunction add_div_before_all_the_widget( $element ) {\n\t?>\n\t<div class=\"before-widget\">Text before widget</div>\n\t<?php\n}\nadd_action( 'elementor/frontend/widget/before_render', 'add_div_before_all_the_widget' );\n\n/**\n * Add `<div>` after all the widgets in the page.\n *\n * @since 1.0.0\n * @param \\Elementor\\Element_Base $element The element instance.\n */\nfunction add_div_after_all_the_widget( $element ) {\n\t?>\n\t<div class=\"after-widget\">Text after widget</div>\n\t<?php\n}\nadd_action( 'elementor/frontend/widget/after_render', 'add_div_after_all_the_widget' );\n```\n\n----------------------------------------\n\nTITLE: Main Plugin Registration - PHP\nDESCRIPTION: Main plugin file that registers the custom Elementor Finder category for WordPress settings. Includes plugin metadata and hooks into the elementor/finder/register action.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/finder/advanced-example.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Elementor Finder WordPress Settings\n * Description: Custom WordPress settings links in Elementor Finder.\n * Plugin URI:  https://elementor.com/\n * Version:     1.0.0\n * Author:      Elementor Developer\n * Author URI:  https://developers.elementor.com/\n * Text Domain: elementor-finder-wordpress-settings\n *\n * Requires Plugins: elementor\n * Elementor tested up to: 3.25.0\n * Elementor Pro tested up to: 3.25.0\n */\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Add custom Finder categories.\n *\n * Include finder file and register the class.\n *\n * @since 1.0.0\n * @param \\Elementor\\Core\\Common\\Modules\\Finder\\Categories_Manager $finder_categories_manager.\n * @return void\n */\nfunction elementor_finder_wordpress_settings( $finder_categories_manager ) {\n\n\trequire_once( __DIR__ . '/finder/wordpress-settings.php' );\n\n\t$finder_categories_manager->register( new Elementor_Finder_WordPress_Settings() );\n\n};\nadd_action( 'elementor/finder/register', 'elementor_finder_wordpress_settings' );\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Elementor Pro License Deactivation Command\nDESCRIPTION: Example showing how to run the license deactivation command in WP-CLI. This command will remove the Elementor Pro license activation from the current WordPress site.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/license-deactivate.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor-pro license deactivate\n```\n\n----------------------------------------\n\nTITLE: Removing Custom Column Group from Elementor Context Menu\nDESCRIPTION: This code removes the 'custom-column-actions' group from the columns context menu in Elementor. It uses the same filter hook as the widget example but checks for the 'column' element type.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/remove-group.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nelementor.hooks.addFilter( 'elements/context-menu/groups', ( customGroups, elementType ) => {\n\n\tif ( 'column' === elementType ) {\n\t\tconst groupIndex = customGroups.findIndex( ( group ) => 'custom-column-actions' === group.name );\n\t\tif ( groupIndex > -1 ) {\n\t\t\tcustomGroups.splice( groupIndex, 1 );\n\t\t}\n\t}\n\n\treturn customGroups;\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Theme Condition Class in PHP for Elementor Pro\nDESCRIPTION: Creates a basic class that extends Elementor Pro's Condition_Base class. This is the foundation for creating custom conditions in Elementor's Theme Builder.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/theme-conditions/condition-structure.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Condition extends \\ElementorPro\\Modules\\ThemeBuilder\\Conditions\\Condition_Base {\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Elementor Finder Categories using PHP\nDESCRIPTION: This code snippet demonstrates how to use the 'elementor/finder/categories' filter hook to remove specific categories from the Elementor Finder. In this example, it removes the 'edit' category by unsetting it from the categories array.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/finder/remove-finder-categories.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction remove_elementor_finder_category( array $categories ) {\n\n\tunset( $categories['edit'] );\n\treturn $categories;\n\n}\nadd_filter( 'elementor/finder/categories', 'remove_elementor_finder_category' );\n```\n\n----------------------------------------\n\nTITLE: Removing Post Item from Elementor Finder Create Category\nDESCRIPTION: Function that removes the 'post' item from the 'create' category in Elementor Finder using the elementor/finder/categories filter hook. The function receives an array of categories, unsets the specific item, and returns the modified array.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/finder/remove-finder-items.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction remove_elementor_finder_item( array $categories ) {\n\n\tunset( $categories['create']['items']['post'] );\n\treturn $categories;\n\n}\nadd_filter( 'elementor/finder/categories', 'remove_elementor_finder_item' );\n```\n\n----------------------------------------\n\nTITLE: Renaming Widget Group in Elementor Context Menu\nDESCRIPTION: This snippet demonstrates how to rename an existing group in the widget context menu. It uses the 'elements/context-menu/groups' filter to change the name of the 'custom-widget-actions' group to 'new-name'.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/update-group.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nelementor.hooks.addFilter( 'elements/context-menu/groups', ( customGroups, elementType ) => {\n\n\tif ( 'widget' === elementType ) {\n\t\tcustomGroups.forEach( ( group ) => {\n\t\t\tif ( 'custom-widget-actions' === group.name ) {\n\t\t\t\tgroup.name = 'new-name';\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn customGroups;\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Basic Condition Check Implementation in PHP\nDESCRIPTION: Basic implementation of the check() method in a custom Elementor condition class that extends Condition_Base. Returns true by default.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/theme-conditions/condition-check.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Condition extends \\ElementorPro\\Modules\\ThemeBuilder\\Conditions\\Condition_Base {\n\n\tpublic function check( $args ): bool {\n\t\treturn true;\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'elementor/loaded' Action Hook in PHP\nDESCRIPTION: This snippet demonstrates how to use the 'elementor/loaded' action hook in Elementor. It defines a function 'my_plugin' and attaches it to the hook, which will be executed when Elementor is loaded, before all components are initialized.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/elementor-loaded.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction my_plugin() {\n\n\t// ...\n\n}\nadd_action( 'elementor/loaded', 'my_plugin' );\n```\n\n----------------------------------------\n\nTITLE: Defining Condition Group Type and Priority in PHP for Elementor Pro\nDESCRIPTION: This code snippet demonstrates how to create a custom condition class in Elementor Pro. It defines the condition group type and sets its priority within the group.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/theme-conditions/condition-group-type.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Condition extends \\ElementorPro\\Modules\\ThemeBuilder\\Conditions\\Condition_Base {\n\n\tpublic static function get_type(): string {\n\t\treturn 'condition_type';\n\t}\n\n\tpublic static function get_priority(): int {\n\t\treturn 40;\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Control with Selectors Dictionary in PHP\nDESCRIPTION: Demonstrates how to add a control with a selectors_dictionary argument to replace old values with new ones in Elementor.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/selectors-dictionary.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'text-align',\n\t[\n\t\t'label' => esc_html__( 'Control Label', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::SELECT,\n\t\t'selectors_dictionary' => [\n\t\t\t'old-value-1' => 'new-value-1',\n\t\t\t'old-value-2' => 'new-value-2',\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Numeric Comparison in Advanced Conditions\nDESCRIPTION: Demonstrates how to use numeric comparison operators in advanced conditions, making it easier to implement conditions based on numeric values.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/conditional-display.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n'conditions' => [\n\t'terms' => [\n\t\t[\n\t\t\t'name' => 'spacing',\n\t\t\t'operator' => '>=',\n\t\t\t'value' => 0,\n\t\t],\n\t],\n],\n```\n\n----------------------------------------\n\nTITLE: Listing Available Finder Categories in Markdown\nDESCRIPTION: This code snippet lists the default categories available in Elementor's Finder, including their internal keys and brief descriptions of what links they provide.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/finder/finder-categories.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* **Create** (_`create`_) – Provides links related to creating new posts/pages/templates etc.\n* **Edit** (_`edit`_) – Provides links related to editing posts/pages/templates etc.\n* **General** (_`general`_) – Provides general links related to Elementor.\n* **Settings** (_`settings`_) – Provides links related to Elementor's settings.\n* **Tools** (_`tools`_) – Provides links related to Elementor's tools.\n* **Site** (_`site`_) – Provides links related to the site.\n```\n\n----------------------------------------\n\nTITLE: Using the Replace URLs Command in Elementor CLI\nDESCRIPTION: The basic syntax for the Elementor replace-urls CLI command, which requires old and new URL arguments and has an optional force flag to suppress error messages.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/replace-urls.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor replace-urls <old> <new> [--force]\n```\n\n----------------------------------------\n\nTITLE: Multiple Conditions with Advanced Syntax\nDESCRIPTION: Shows how to use multiple conditions with the advanced syntax, which provides the same functionality as multiple conditions with the simple syntax.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/conditional-display.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n'conditions' => [\n    'terms' => [\n        [\n            'name' => 'border',\n            'operator' => '===',\n            'value' => 'yes',\n        ],\n        [\n            'name' => 'border_style',\n            'operator' => '!==',\n            'value' => '',\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Page with Settings in Elementor\nDESCRIPTION: This snippet demonstrates the JSON structure for a page that has settings in Elementor. The 'page_settings' field is an object containing key-value pairs of settings.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/page-settings.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"Template Title\",\n\t\"type\": \"page\",\n\t\"version\": \"0.4\",\n\t\"page_settings\": {\n\t\t\"key\": \"value\",\n\t\t\"key\": \"value\"\n\t},\n\t\"content\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Custom Fonts font-display Property in Elementor Pro (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to use the 'elementor_pro/custom_fonts/font_display' filter hook to change the font-display property for custom fonts in Elementor Pro. It sets the font-display value to 'swap', but this can be adjusted as needed.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/font-display.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Control how font files are loaded and displayed by the browser.\n * Set the `font-display` property to `swap`.\n *\n * @since 1.0.0\n */\nfunction update_font_display() {\n\n\treturn 'swap'; // Or any other value.\n\n}\nadd_filter( 'elementor_pro/custom_fonts/font_display', 'update_font_display' );\n```\n\n----------------------------------------\n\nTITLE: Removing Custom Section Group from Elementor Context Menu\nDESCRIPTION: This code removes the 'custom-section-actions' group from the section context menu in Elementor. It follows the same pattern as the previous examples but checks for the 'section' element type.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/remove-group.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nelementor.hooks.addFilter( 'elements/context-menu/groups', ( customGroups, elementType ) => {\n\n\tif ( 'section' === elementType ) {\n\t\tconst groupIndex = customGroups.findIndex( ( group ) => 'custom-section-actions' === group.name );\n\t\tif ( groupIndex > -1 ) {\n\t\t\tcustomGroups.splice( groupIndex, 1 );\n\t\t}\n\t}\n\n\treturn customGroups;\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Adding Premium Promotion to Elementor Widget\nDESCRIPTION: Demonstrates how to implement a promotional section for premium features in an Elementor widget. The method returns an array containing promotional content including conditions, images, text, and upgrade URLs.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-promotions.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function get_upsale_data(): array {\n\t\treturn [\n\t\t\t'condition' => ! \\Elementor\\Utils::has_pro(),\n\t\t\t'image' => esc_url( ELEMENTOR_ASSETS_URL . 'images/go-pro.svg' ),\n\t\t\t'image_alt' => esc_attr__( 'Upgrade', 'textdomain' ),\n\t\t\t'title' => esc_html__( 'Promotion heading', 'textdomain' ),\n\t\t\t'description' => esc_html__( 'Get the premium version of the widget and grow your website capabilities.', 'textdomain' ),\n\t\t\t'upgrade_url' => esc_url( 'https://example.com/upgrade-to-pro/' ),\n\t\t\t'upgrade_text' => esc_html__( 'Upgrade Now', 'textdomain' ),\n\t\t];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Editor Panel Open Events\nDESCRIPTION: Example showing how to handle editor panel opening for specific element types.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/js.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nelementor.hooks.addAction( 'panel/open_editor/widget', function( panel, model, view ) {\n\tif ( 'section' !== model.elType && 'column' !== model.elType ) {\n\t\treturn;\n\t}\n   var $element = view.$el.find( '.elementor-selector' );\n\n   if ( $element.length ) {\n   \t$element.click( function() {\n   \t  alert( 'Some Message' );\n   \t} );\n   }\n} );\n```\n\n----------------------------------------\n\nTITLE: Defining Namespace and Plugin Class in Separate File\nDESCRIPTION: Example of defining a namespace and a plugin class in a separate file (includes/plugin.php) to be loaded by the main plugin file.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/addons/namespaces.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Elementor_Test_Addon;\n\nfinal class Plugin {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Elementor Logged-In User Condition Plugin\nDESCRIPTION: Main plugin file that registers the custom logged-in user condition with Elementor's condition manager. Includes plugin metadata and hooks into Elementor's theme registration system.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/theme-conditions/simple-example.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Elementor Logged-In User Condition\n * Description: Custom addon that adds a logged-in user condition to Elementor.\n * Plugin URI:  https://elementor.com/\n * Version:     1.0.0\n * Author:      Elementor Developer\n * Author URI:  https://developers.elementor.com/\n * Text Domain: elementor-logged-in-user-condition\n *\n * Requires Plugins: elementor\n * Elementor tested up to: 3.25.0\n * Elementor Pro tested up to: 3.25.0\n */\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Add a logged-in user condition to Elementor.\n *\n * @since 1.0.0\n * @param \\ElementorPro\\Modules\\ThemeBuilder\\Classes\\Conditions_Manager $conditions_manager An instance of conditions manager.\n * @return void\n */\nfunction add_new_logged_in_user_condition( $conditions_manager ) {\n\n\trequire_once( __DIR__ . '/theme-conditions/logged-in-user-condition.php' );\n\n\t$conditions_manager->get_condition( 'general' )->register_sub_condition( new \\Logged_In_User_Condition() );\n\n}\nadd_action( 'elementor/theme/register_conditions', 'add_new_logged_in_user_condition' );\n```\n\n----------------------------------------\n\nTITLE: Updated Choose Control with Selectors Dictionary in PHP\nDESCRIPTION: Demonstrates how to update a Choose control for text alignment to use logical CSS properties while maintaining backward compatibility using selectors_dictionary in Elementor.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/selectors-dictionary.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'text-align',\n\t[\n\t\t'label' => esc_html__( 'Alignment', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::CHOOSE,\n\t\t'default' => 'center',\n\t\t'options' => [\n\t\t\t'end' => [\n\t\t\t\t'title' => esc_html__( 'End', 'textdomain' ),\n\t\t\t\t'icon' => 'eicon-text-align-' . ( is_rtl() ? 'right' : 'left' ),\n\t\t\t],\n\t\t\t'center' => [\n\t\t\t\t'title' => esc_html__( 'Center', 'textdomain' ),\n\t\t\t\t'icon' => 'eicon-text-align-center',\n\t\t\t],\n\t\t\t'start' => [\n\t\t\t\t'title' => esc_html__( 'Start', 'textdomain' ),\n\t\t\t\t'icon' => 'eicon-text-align-' . ( is_rtl() ? 'left' : 'right' ),\n\t\t\t],\n\t\t],\n\t\t'selectors_dictionary' => [\n\t\t\t'left' => is_rtl() ? 'end' : 'start',\n\t\t\t'right' => is_rtl() ? 'start' : 'end',\n\t\t],\n\t\t'selectors' => [\n\t\t\t'{{WRAPPER}} .some-class' => 'text-align: {{VALUE}};',\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Categories in Control Settings\nDESCRIPTION: Example showing how to implement dynamic tag support in a control class by defining categories in the get_default_settings() method.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/dynamic-tags/dynamic-tags-categories.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Control extends \\Elementor\\Base_Control {\n\n\tpublic function get_type(): string {}\n\n\tpublic function content_template(): void {}\n\n\tprotected function get_default_settings(): array {\n\n\t\treturn [\n\t\t\t'show_label' => true,\n\t\t\t'label_block' => true,\n\t\t\t'separator' => 'after',\n\t\t\t'dynamic' => [\n\t\t\t\t'active' => true,\n\t\t\t\t'categories' => [\n\t\t\t\t\t\\Elementor\\Modules\\DynamicTags\\Module::TEXT_CATEGORY,\n\t\t\t\t\t\\Elementor\\Modules\\DynamicTags\\Module::NUMBER_CATEGORY\n\t\t\t\t],\n\t\t\t],\n\t\t];\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing run() Method for Elementor Form Action in PHP\nDESCRIPTION: Basic structure for implementing the run() method in a custom Elementor form action class. This method is executed when a form is submitted and receives form record and ajax handler instances as parameters.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-actions/action-run.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Action extends \\ElementorPro\\Modules\\Forms\\Classes\\Action_Base {\n\n\tpublic function run( $record, $ajax_handler ): void {\n\n\t\t// ...\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing URLs with Error Suppression in Elementor\nDESCRIPTION: Example of using the replace-urls command with the --force flag to change URLs while suppressing any error messages that might occur during the process.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/replace-urls.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor replace-urls http://elementor.com https://elementor.com --force\n```\n\n----------------------------------------\n\nTITLE: Updating Widget Registration in Elementor 3.5\nDESCRIPTION: This diff shows the changes required when registering widgets in Elementor 3.5. The changes include replacing the register_widget_type() method with register() and updating the action hook from 'elementor/widgets/widgets_registered' to 'elementor/widgets/register'.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/deprecations/advanced-example.md#2025-04-20_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nfunction register_new_widgets( $widgets_manager ) {\n\n\trequire_once( __DIR__ . '/widgets/widget-1.php' );\n\trequire_once( __DIR__ . '/widgets/widget-2.php' );\n\n-\t$widgets_manager->register_widget_type( new \\Elementor_Widget_1() );\n-\t$widgets_manager->register_widget_type( new \\Elementor_Widget_2() );\n+\t$widgets_manager->register( new \\Elementor_Widget_1() );\n+\t$widgets_manager->register( new \\Elementor_Widget_2() );\n\n}\n- add_action( 'elementor/widgets/widgets_registered', 'register_new_widgets' );\n+ add_action( 'elementor/widgets/register', 'register_new_widgets' );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Widget Settings in JS Templates\nDESCRIPTION: Demonstrates how to access widget control data in JavaScript templates using the settings variable. Shows usage of double and triple curly brackets for escaped and unescaped values respectively.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-settings.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nprotected function content_template(): void {\n\t?>\n\t<h3 class=\"{{ settings.class }}\">{{{ settings.title }}}</h3>\n\t<?php\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Categories Dynamic Tag in PHP\nDESCRIPTION: Example demonstrating how to create a dynamic tag class that returns multiple category types (URL, TEXT, and NUMBER) through the get_categories() method.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/dynamic-tags/dynamic-tags-categories.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Tag extends \\Elementor\\Core\\DynamicTags\\Tag {\n\n\tpublic function get_categories(): array {\n\t\treturn [\n\t\t\t\\Elementor\\Modules\\DynamicTags\\Module::URL_CATEGORY,\n\t\t\t\\Elementor\\Modules\\DynamicTags\\Module::TEXT_CATEGORY,\n\t\t\t\\Elementor\\Modules\\DynamicTags\\Module::NUMBER_CATEGORY\n\t\t];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Column Action Label in Elementor Context Menu\nDESCRIPTION: Changes the title of a specific column action in the Elementor context menu by filtering the context menu groups and setting the title property to 'New Label'.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/update-action.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nelementor.hooks.addFilter( 'elements/context-menu/groups', ( customGroups, elementType ) => {\n\n\tif ( 'column' === elementType ) {\n\t\tcustomGroups.forEach( ( group ) => {\n\t\t\tif ( 'custom-column-actions' === group.name ) {\n\t\t\t\tgroup.actions.forEach( ( action ) => {\n\t\t\t\t\tif ( 'column-action' === action.name ) {\n\t\t\t\t\t\taction.title = 'New Label';\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn customGroups;\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Configuring Label Block for Elementor Control (PHP)\nDESCRIPTION: Demonstrates how to set the label_block argument to true, which stacks the label and input field vertically instead of side-by-side.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/labels-description.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'unique-control-name',\n\t[\n\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t'label' => esc_html__( 'Control Label', 'textdomain' ),\n\t\t'label_block' => true,\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Migrating Color Schemes to Global Colors in Elementor\nDESCRIPTION: This code demonstrates how to replace deprecated Color schemes with the new Global Colors system in Elementor 3.0+. The example shows conversion of color controls for headings, subheadings, text, and accent elements.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/deprecations/complex-example.md#2025-04-20_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n$this->add_control(\n\t'heading_color',\n\t[\n\t\t'label' => esc_html__( 'Heading Color', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n-\t\t'scheme' => [\n-\t\t\t'type' => \\Elementor\\Core\\Schemes\\Color::get_type(),\n-\t\t\t'value' => \\Elementor\\Core\\Schemes\\Color::COLOR_1,\n-\t\t],\n+\t\t'global' => [\n+\t\t\t'default' => \\Elementor\\Core\\Kits\\Documents\\Tabs\\Global_Colors::COLOR_PRIMARY,\n+\t\t],\n\t\t'selectors' => [\n\t\t\t'{{WRAPPER}} .heading-class' => 'color: {{VALUE}};',\n\t\t],\n\t]\n);\n\n$this->add_control(\n\t'subheading_color',\n\t[\n\t\t'label' => esc_html__( 'Subheading Color', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n-\t\t'scheme' => [\n-\t\t\t'type' => \\Elementor\\Core\\Schemes\\Color::get_type(),\n-\t\t\t'value' => \\Elementor\\Core\\Schemes\\Color::COLOR_2,\n-\t\t],\n+\t\t'global' => [\n+\t\t\t'default' => \\Elementor\\Core\\Kits\\Documents\\Tabs\\Global_Colors::COLOR_SECONDARY,\n+\t\t],\n\t\t'selectors' => [\n\t\t\t'{{WRAPPER}} .subheading-class' => 'color: {{VALUE}};',\n\t\t],\n\t]\n);\n\n$this->add_control(\n\t'text_color',\n\t[\n\t\t'label' => esc_html__( 'Text Color', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n-\t\t'scheme' => [\n-\t\t\t'type' => \\Elementor\\Core\\Schemes\\Color::get_type(),\n-\t\t\t'value' => \\Elementor\\Core\\Schemes\\Color::COLOR_3,\n-\t\t],\n+\t\t'global' => [\n+\t\t\t'default' => \\Elementor\\Core\\Kits\\Documents\\Tabs\\Global_Colors::COLOR_TEXT,\n+\t\t],\n\t\t'selectors' => [\n\t\t\t'{{WRAPPER}} .text-class' => 'color: {{VALUE}};',\n\t\t],\n\t]\n);\n\n$this->add_control(\n\t'accent_color',\n\t[\n\t\t'label' => esc_html__( 'Accent Color', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n-\t\t'scheme' => [\n-\t\t\t'type' => \\Elementor\\Core\\Schemes\\Color::get_type(),\n-\t\t\t'value' => \\Elementor\\Core\\Schemes\\Color::COLOR_4,\n-\t\t],\n+\t\t'global' => [\n+\t\t\t'default' => \\Elementor\\Core\\Kits\\Documents\\Tabs\\Global_Colors::COLOR_ACCENT,\n+\t\t],\n\t\t'selectors' => [\n\t\t\t'{{WRAPPER}} .accent-class' => 'color: {{VALUE}};',\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Elementor Archive Location in search.php\nDESCRIPTION: Search results template implementation with Elementor archive location support and fallback.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/migrating-themes-with-functions.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nget_header();\n\n// Elementor `archive` location\nif ( ! function_exists( 'elementor_theme_do_location' ) || ! elementor_theme_do_location( 'archive' ) ) {\n\tget_template_part( 'template-parts/search' );\n}\n\nget_footer();\n```\n\n----------------------------------------\n\nTITLE: Removing Section Action from Context Menu in Elementor\nDESCRIPTION: This snippet illustrates how to remove a 'section-action' from the 'custom-section-actions' group in the section context menu. It uses the same pattern as the previous examples to find and remove the specific action from its group.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/remove-action.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nelementor.hooks.addFilter( 'elements/context-menu/groups', ( customGroups, elementType ) => {\n\n\tif ( 'section' === elementType ) {\n\t\tcustomGroups.forEach( ( group ) => {\n\t\t\tif ( 'custom-section-actions' === group.name ) {\n\t\t\t\tconst actionIndex = group.actions.findIndex( ( action ) => 'section-action' === action.name );\n\t\t\t\tif ( actionIndex > -1 ) {\n\t\t\t\t\tgroup.actions.splice( actionIndex, 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn customGroups;\n\n} );\n```\n\n----------------------------------------\n\nTITLE: PHP Render Attribute Implementation\nDESCRIPTION: Demonstrates how to add and render HTML attributes in PHP using add_render_attribute() and get_render_attribute_string() methods. Shows handling of multiple attributes including arrays for classes and dynamic settings.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/rendering-html-attribute.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nprotected function render(): void {\n\t$settings = $this->get_settings_for_display();\n\n\t$this->add_render_attribute(\n\t\t'wrapper',\n\t\t[\n\t\t\t'id' => 'custom-widget-id',\n\t\t\t'class' => [ 'custom-widget-wrapper-class', $settings['custom_class'] ],\n\t\t\t'role' => $settings['role'],\n\t\t\t'aria-label' => $settings['name'],\n\t\t]\n\t);\n\n\t$this->add_render_attribute(\n\t\t'inner',\n\t\t[\n\t\t\t'class' => 'custom-widget-inner-class',\n\t\t\t'data-custom' => 'custom-widget-information',\n\t\t]\n\t);\n\t?>\n\t<div <?php echo $this->get_render_attribute_string( 'wrapper' ); ?>>\n\t\t<div <?php $this->print_render_attribute_string( 'inner' ); ?>>\n\t\t\t...\n\t\t</div>\n\t</div>\n\t<?php\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Shadow Control in Elementor Widget\nDESCRIPTION: Demonstrates how to implement a Text Shadow control within an Elementor widget class, including selector configuration for applying the shadow effect to elements.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-text-shadow.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'custom_text_shadow',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Text Shadow', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT_SHADOW,\n\t\t\t\t'selectors' => [\n\t\t\t\t\t'{{SELECTOR}}' => 'text-shadow: {{HORIZONTAL}}px {{VERTICAL}}px {{BLUR}}px {{COLOR}};',\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Unregistering Specific Elementor Widgets\nDESCRIPTION: This code snippet demonstrates how to unregister specific Elementor widgets by hooking into the 'elementor/widgets/register' action and using the widgets manager. It unregisters two example widgets named 'widget-1' and 'widget-2'.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/managers/unregistering-widgets.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Unregister Elementor widgets.\n *\n * @param \\Elementor\\Widgets_Manager $widgets_manager Elementor widgets manager.\n * @return void\n */\nfunction unregister_widgets( $widgets_manager ) {\n\n\t$widgets_manager->unregister( 'widget-1' );\n\t$widgets_manager->unregister( 'widget-2' );\n\n}\nadd_action( 'elementor/widgets/register', 'unregister_widgets' );\n```\n\n----------------------------------------\n\nTITLE: Elementor Plugin Structure for Custom Control\nDESCRIPTION: Folder structure for the Elementor emoji control addon, showing the organization of assets, controls, widgets, and the main plugin file.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/controls/complex-example.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nelementor-emojionearea-control/\n|\n├─ assets/js/\n|  └─ emojionearea.js\n|\n├─ controls/\n|  └─ emojionearea.php\n|\n├─ widgets/\n|  └─ test-widget.php\n|\n└─ elementor-emojionearea-control.php\n```\n\n----------------------------------------\n\nTITLE: Code Update Example for Addon Developers\nDESCRIPTION: Diff showing how addon developers should update their code to remove deprecated ID arguments from register() calls.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/deprecations/deprecated-argument.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction register_new_items( $items_manager ) {\n\n\trequire_once( __DIR__ . '/items/item-1.php' );\n\trequire_once( __DIR__ . '/items/item-2.php' );\n\n-\t$items_manager->register( new \\My_Item_1(), 'item-1' );\n-\t$items_manager->register( new \\My_Item_1(), 'item-2' );\n+\t$items_manager->register( new \\My_Item_1() );\n+\t$items_manager->register( new \\My_Item_2() );\n\n}\nadd_action( 'items/register', 'register_new_items' );\n```\n\n----------------------------------------\n\nTITLE: Extending Elementor UI Control\nDESCRIPTION: Example of extending the Base_UI_Control class to create a custom UI control in Elementor.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-types.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Control extends \\Elementor\\Base_UI_Control {\n}\n```\n\n----------------------------------------\n\nTITLE: Elementor Widget Content Template with Select Control\nDESCRIPTION: This code snippet demonstrates the content template for an Elementor widget that uses the Select control. It defines the basic HTML structure of the widget.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-select.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected function content_template(): void {\n\t?>\n\t<div class=\"your-class\">\n\t\t...\n\t</div>\n\t<?php\n}\n```\n\n----------------------------------------\n\nTITLE: WordPress Settings Finder Category Implementation - PHP\nDESCRIPTION: Class that implements the WordPress settings category for Elementor Finder. Defines category ID, title and provides an array of navigable WordPress settings items with their respective URLs and metadata.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/finder/advanced-example.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Elementor Finder - WordPress Settings\n *\n * Provides searchable items related to WordPress settings.\n */\nclass Elementor_Finder_WordPress_Settings extends \\Elementor\\Core\\Common\\Modules\\Finder\\Base_Category {\n\n\t/**\n\t * Get finder category id.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Finder category id.\n\t */\n\tpublic function get_id(): string {\n\t\treturn 'wordpress-settings';\n\t}\n\n\t/**\n\t * Get finder category title.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Finder category title.\n\t */\n\tpublic function get_title(): string {\n\t\treturn esc_html__( 'WordPress Settings', 'elementor-finder-wordpress-settings' );\n\t}\n\n\t/**\n\t * Get finder category items.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @param array $options\n\t * @return array An array of category items.\n\t */\n\tpublic function get_category_items( array $options = [] ): array {\n\t\treturn [\n\t\t\t'general' => [\n\t\t\t\t'title' => esc_html__( 'General', 'elementor-finder-wordpress-settings' ),\n\t\t\t\t'icon' => 'wordpress',\n\t\t\t\t'url' => admin_url( 'options-general.php' ),\n\t\t\t\t'keywords' => [ 'wordpress', 'dashboard', 'general', 'settings' ],\n\t\t\t],\n\t\t\t'writing' => [\n\t\t\t\t'title' => esc_html__( 'Writing', 'elementor-finder-wordpress-settings' ),\n\t\t\t\t'icon' => 'edit',\n\t\t\t\t'url' => admin_url( 'options-writing.php' ),\n\t\t\t\t'keywords' => [ 'wordpress', 'dashboard', 'writing', 'settings' ],\n\t\t\t],\n\t\t\t'reading' => [\n\t\t\t\t'title' => esc_html__( 'Reading', 'elementor-finder-wordpress-settings' ),\n\t\t\t\t'icon' => 'post-content',\n\t\t\t\t'url' => admin_url( 'options-reading.php' ),\n\t\t\t\t'keywords' => [ 'wordpress', 'dashboard', 'reading', 'settings' ],\n\t\t\t],\n\t\t\t'discussion' => [\n\t\t\t\t'title' => esc_html__( 'Discussion', 'elementor-finder-wordpress-settings' ),\n\t\t\t\t'icon' => 'comments',\n\t\t\t\t'url' => admin_url( 'options-discussion.php' ),\n\t\t\t\t'keywords' => [ 'wordpress', 'dashboard', 'discussion', 'settings' ],\n\t\t\t],\n\t\t\t'media' => [\n\t\t\t\t'title' => esc_html__( 'Media', 'elementor-finder-wordpress-settings' ),\n\t\t\t\t'icon' => 'image',\n\t\t\t\t'url' => admin_url( 'options-media.php' ),\n\t\t\t\t'keywords' => [ 'wordpress', 'dashboard', 'media', 'settings' ],\n\t\t\t],\n\t\t\t'permalink' => [\n\t\t\t\t'title' => esc_html__( 'Permalink', 'elementor-finder-wordpress-settings' ),\n\t\t\t\t'icon' => 'editor-link',\n\t\t\t\t'url' => admin_url( 'options-permalink.php' ),\n\t\t\t\t'keywords' => [ 'wordpress', 'dashboard', 'permalink', 'settings' ],\n\t\t\t],\n\t\t];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Original Select Control for Border Style in PHP\nDESCRIPTION: Shows the original implementation of a Select control for border style using prefix classes in Elementor.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/selectors-dictionary.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'border_style',\n\t[\n\t\t'label' => esc_html__( 'Border Style', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::SELECT,\n\t\t'options' => [\n\t\t\t'' => esc_html__( 'Default', 'textdomain' ),\n\t\t\t'1' => esc_html__( 'None', 'textdomain' ),\n\t\t\t'2' => esc_html__( 'Solid', 'textdomain' ),\n\t\t\t'3' => esc_html__( 'Double', 'textdomain' ),\n\t\t\t'4' => esc_html__( 'Dotted', 'textdomain' ),\n\t\t\t'5' => esc_html__( 'Dashed', 'textdomain' ),\n\t\t],\n\t\t'prefix_class' => 'border-style-',\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling Post Type Support in Hello Elementor Theme\nDESCRIPTION: Example of using the hello_elementor_post_type_support filter hook to disable post type features in a child theme. This should be added to the functions.php file of the child theme.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hello-elementor-theme/hello_elementor_post_type_support.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'hello_elementor_post_type_support', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Deprecating Filter Hook with Elementor's Deprecation Handler in PHP\nDESCRIPTION: This snippet demonstrates how to use Elementor's deprecation handler to deprecate the old filter hook while introducing a new one. It includes both the deprecation process and the new filter implementation.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/deprecations/deprecated-filter-hook.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Elementor\\Plugin;\n\nclass Name {\n\n\tfunction init( $args ): void {\n\t\t// Deprecation handler\n\t\tPlugin::$instance->modules_manager->get_modules( 'dev-tools' )->deprecation->apply_deprecated_filter(\n\t\t\t'elementor/old/filter',\n\t\t\t[ $args ],\n\t\t\t'3.5.0',\n\t\t\t'elementor/new/filter'\n\t\t);\n\n\t\t// Run the new filter\n\t\t$value = apply_filters( 'elementor/new/filter', $value, $args );\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Actions from Column Group in Elementor Context Menu\nDESCRIPTION: This snippet shows how to remove all actions from a specific group in the column context menu. It uses the 'elements/context-menu/groups' filter to empty the actions object of the 'custom-column-actions' group.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/update-group.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nelementor.hooks.addFilter( 'elements/context-menu/groups', ( customGroups, elementType ) => {\n\n\tif ( 'column' === elementType ) {\n\t\tcustomGroups.forEach( ( group ) => {\n\t\t\tif ( 'custom-column-actions' === group.name ) {\n\t\t\t\tgroup.actions = {};\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn customGroups;\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Conditions in Elementor Control\nDESCRIPTION: Shows how to set multiple conditions for a control using logical AND operator, where all conditions must be met to display the control.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/conditional-display.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'unique-control-name',\n\t[\n\t\t'label' => esc_html__( 'Control Label', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t'condition' => [\n\t\t\t'dependent-control-1-name' => 'dependent-control-1-value',\n\t\t\t'dependent-control-2-name' => 'dependent-control-2-value',\n\t\t\t'dependent-control-3-name' => 'dependent-control-3-value',\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Using Elementor Frontend Scripts\nDESCRIPTION: Shows how to declare elementor-frontend as a dependency for using Elementor JS methods.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-dependencies.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tpublic function get_script_depends(): array {\n\t\treturn [ 'elementor-frontend', 'widget-custom-script' ];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Unregistering Multiple Elementor Widgets using PHP\nDESCRIPTION: Function that hooks into 'elementor/widgets/register' action to unregister existing widgets from Elementor. The function accepts the widgets manager as a parameter and uses the unregister() method to remove specified widgets.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/remove-widgets.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction unregister_widgets( $widgets_manager ) {\n\n\t$widgets_manager->unregister( 'widget-1' );\n\t$widgets_manager->unregister( 'widget-2' );\n\n}\nadd_action( 'elementor/widgets/register', 'unregister_widgets' );\n```\n\n----------------------------------------\n\nTITLE: Removing Description Meta Tag in PHP\nDESCRIPTION: PHP code snippet that demonstrates how to remove the default description meta tag functionality from Hello Elementor theme. This is useful when using external SEO plugins to avoid duplicate meta tags.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hello-elementor-theme/hello_elementor_add_description_meta_tag.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction remove_hello_elementor_description_meta_tag() {\n\tremove_action( 'wp_head', 'hello_elementor_add_description_meta_tag' );\n}\nadd_action( 'after_setup_theme', 'remove_hello_elementor_description_meta_tag' );\n```\n\n----------------------------------------\n\nTITLE: Final Action Hook Implementation in PHP\nDESCRIPTION: The final code implementation after eight major versions, showing only the new action hook without deprecation handling.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/deprecations/deprecated-action-hook.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Name {\n\n\tfunction init( $args ): void {\n\t\tdo_action( 'elementor/new/action', $args );\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Return Value Structure of Dimensions Control in Elementor\nDESCRIPTION: This code snippet shows the array structure returned by the Dimensions Control. It includes properties for top, right, bottom, left dimensions, the selected CSS unit, and whether the dimensions are linked together.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-dimensions.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\n\t'top' => '',\n\t'right' => '',\n\t'bottom' => '',\n\t'left' => '',\n\t'unit' => '',\n\t'isLinked' => '',\n]\n```\n\n----------------------------------------\n\nTITLE: Hiding Control Label in Elementor (PHP)\nDESCRIPTION: Shows how to hide the label of an Elementor control by setting show_label to false. Note that the label is only visually hidden for accessibility reasons.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/labels-description.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'unique-control-name',\n\t[\n\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t'label' => esc_html__( 'Control Label', 'textdomain' ),\n\t\t'show_label' => false,\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Complete Control Popover Implementation in Elementor Widget\nDESCRIPTION: Extended example showing how to implement control popovers within an Elementor widget class. Demonstrates the full structure including section creation, popover toggle, and multiple controls within the popover.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-popovers.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'style_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style Section', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'popover-toggle',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Box', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::POPOVER_TOGGLE,\n\t\t\t\t'label_off' => esc_html__( 'Default', 'textdomain' ),\n\t\t\t\t'label_on' => esc_html__( 'Custom', 'textdomain' ),\n\t\t\t\t'return_value' => 'yes',\n\t\t\t]\n\t\t);\n\n\t\t$this->start_popover();\n\n\t\t$this->add_control();\n\n\t\t$this->add_control();\n\n\t\t$this->add_control();\n\n\t\t$this->end_popover();\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing on_export() Method in Elementor Pro Action Class\nDESCRIPTION: Basic implementation of the on_export() method in an Elementor Pro action class. This method is used to exclude action data when exporting.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-actions/action-on-export.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Action extends \\ElementorPro\\Modules\\Forms\\Classes\\Action_Base {\n\n\tpublic function on_export( $element ): array {\n\n\t\treturn $element;\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Hooks in JavaScript for Elementor Components\nDESCRIPTION: This snippet demonstrates how to export multiple hooks from different parts of an Elementor component. It shows the structure for organizing and exporting UI and data hooks.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/js/hooks.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\nexport { FooterSaverRefreshMenu } from './ui/document/elements/settings/footer-saver-refresh-menu';\nexport { UpdateButton } from './ui/document/save/set-is-modifed/update-button';\nexport { BypassImport } from './data/document/elements/import/bypass-import';\nexport { SaveExtras } from './data/document/save/save/save-extras';\n```\n\n----------------------------------------\n\nTITLE: Implementing Elementor 404 Location in 404.php\nDESCRIPTION: 404 error page template implementation with Elementor single location support and fallback.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/migrating-themes-with-functions.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nget_header();\n\n// Elementor `single` location\nif ( ! function_exists( 'elementor_theme_do_location' ) || ! elementor_theme_do_location( 'single' ) ) {\n\tget_template_part( 'template-parts/404' );\n}\n\nget_footer();\n```\n\n----------------------------------------\n\nTITLE: Return Value Structure for Icons Control\nDESCRIPTION: Shows the expected return value structure for the Icons control, containing the icon value and library name as array elements.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-icons.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\n\t'value' => '',\n\t'library' => '',\n]\n```\n\n----------------------------------------\n\nTITLE: Inequality Check in Elementor Conditions\nDESCRIPTION: Demonstrates how to use inequality check in conditions to display a control only if the dependent control does not equal a certain value, by adding ! suffix to the control name.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/conditional-display.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'condition' => [\n\t'control-name!' => 'control-value',\n],\n```\n\n----------------------------------------\n\nTITLE: Importing Commands in an Elementor Component\nDESCRIPTION: This snippet shows how to import and register commands within an Elementor component using the importCommands method.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/js/commands.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as commands from './commands/';\n\nexport class Component extends $e.modules.ComponentBase {\n    getNamespace() {\n        return 'component-name';\n    }\n\n    defaultCommands() {\n        return this.importCommands( commands );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Control Registration in Elementor 3.5\nDESCRIPTION: This diff demonstrates the changes needed when registering controls in Elementor 3.5. The changes include replacing register_control() with register(), removing the control name argument, and updating the action hook from 'elementor/controls/controls_registered' to 'elementor/controls/register'.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/deprecations/advanced-example.md#2025-04-20_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nfunction register_new_controls( $controls_manager ) {\n\n\trequire_once( __DIR__ . '/controls/control-1.php' );\n\trequire_once( __DIR__ . '/controls/control-2.php' );\n\n-\t$controls_manager->register_control( 'control-name', new \\Elementor_Control_1() );\n-\t$controls_manager->register_control( 'control-name', new \\Elementor_Control_2() );\n+\t$controls_manager->register( new \\Elementor_Control_1() );\n+\t$controls_manager->register( new \\Elementor_Control_2() );\n\n}\n- add_action( 'elementor/controls/controls_registered', 'register_new_controls' );\n+ add_action( 'elementor/controls/register', 'register_new_controls' );\n```\n\n----------------------------------------\n\nTITLE: Disabling Skip Link in Hello Elementor Theme using PHP\nDESCRIPTION: This code snippet demonstrates how to use the 'hello_elementor_enable_skip_link' filter hook to disable the 'Skip to content' link in the Hello Elementor Theme. It should be added to the functions.php file of a child theme.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hello-elementor-theme/hello_elementor_enable_skip_link.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'hello_elementor_enable_skip_link', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Basic Group Control Structure in PHP\nDESCRIPTION: Basic structure for adding group controls in Elementor widgets. Shows the fundamental method call with required parameters.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/group-control.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->add_group_control(\n\tGroup_Control_Class::get_type(),\n\t[\n\t\t'name' => 'control_name',\n\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Return Value Structure for Image Dimensions Control\nDESCRIPTION: Demonstrates the array structure returned by the image dimensions control containing width and height values.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-image-dimensions.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\n\t'width' => '',\n\t'height' => '',\n]\n```\n\n----------------------------------------\n\nTITLE: Optimized Widget Markup Structure in HTML\nDESCRIPTION: Shows the optimized widget markup with a single wrapper div element for better performance.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-inner-wrapper.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"elementor-widget elementor-widget-{widget-name}\">\n\t...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Markdown Structure for Elementor Controls Documentation\nDESCRIPTION: The main documentation structure for Elementor Editor Controls, including badges, descriptions, and navigation links to different control types and arguments.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Elementor Editor Controls\n\n<Badge type=\"tip\" vertical=\"top\" text=\"Elementor Core\" /> <Badge type=\"warning\" vertical=\"top\" text=\"Advanced\" />\n\nElementor Editor Controls are **input fields** and **UI elements** that are used to construct an interface. Controls allow users to customize available panel settings and change the design in the preview.\n\nElementor includes a wide range of controls out-of-the-box. They are used in widgets and editor panels to collect user data and generate custom output based on the user selections.\n\n<img :src=\"$withBase('/assets/img/elementor-controls.png')\" alt=\"Elementor Controls\" style=\"float: right; width: 300px; margin-left: 20px; margin-bottom: 20px;\">\n\n## What I Need to Know?\n\nThere are three main topics you need to learn to master Elementor controls:\n\n* [Using Control](#using-controls)\n* [Control Types](#control-types)\n* [Control Arguments](#control-arguments)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Post Type Support in WordPress\nDESCRIPTION: Demonstrates how to add support for specific features to custom post types using WordPress native functions. Shows adding support for comments and excerpt features.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hello-elementor-theme/hello_elementor_post_type_support.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_post_type_support( 'my_post_type', 'comments' );\nadd_post_type_support( 'my_post_type', 'excerpt' );\n```\n\n----------------------------------------\n\nTITLE: Box Shadow Control Return Value Structure in Elementor\nDESCRIPTION: Shows the array structure returned by the Box Shadow control, containing horizontal, vertical, blur, spread, and color values.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-box-shadow.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\n\t'horizontal' => 0,\n\t'vertical' => 0,\n\t'blur' => 10,\n\t'spread' => 0,\n\t'color' => 'rgba(0,0,0,0.5)',\n]\n```\n\n----------------------------------------\n\nTITLE: Elementor Control Inheritance Structure\nDESCRIPTION: Hierarchical structure showing the inheritance pattern of Elementor controls from the Base_Control class.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-types.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nBase_Control\n|\n├─ Base_Data_Control\n|  ├─ ...\n|  └─ ...\n|\n├─ Control_Base_Multiple\n|  ├─ ...\n|  └─ ...\n|\n├─ Control_Base_Units\n|  ├─ ...\n|  └─ ...\n|\n├─ Base_UI_Control\n|  ├─ ...\n|  └─ ...\n|\n└─ Group_Control_Base\n   ├─ ...\n   └─ ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Page Cache Control in Elementor Hosting with PHP\nDESCRIPTION: This PHP function uses the 'elementor/hosting/page_cache/allow_page_cache' filter to conditionally allow or disallow page caching. It checks if caching is already disallowed, and if not, it calls a custom function 'is_my_special_page()' to determine whether to cache the current page.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hosting/page-cache-allow-page-cache.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param bool Whether to allow page cache.\n * @return bool\n */\nfunction custom_page_cache( $allow ) {\n\tif ( ! $allow ) {\n\t\treturn $allow;\n\t}\n\n\treturn is_my_special_page();\n}\nadd_filter( 'elementor/hosting/page_cache/allow_page_cache', 'custom_page_cache', 20 );\n```\n\n----------------------------------------\n\nTITLE: Updating Widget Action Icon in Elementor Context Menu\nDESCRIPTION: Modifies the icon for a specific widget action in the Elementor context menu by filtering the context menu groups and updating the icon property to 'eicon-code'.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/update-action.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nelementor.hooks.addFilter( 'elements/context-menu/groups', ( customGroups, elementType ) => {\n\n\tif ( 'widget' === elementType ) {\n\t\tcustomGroups.forEach( ( group ) => {\n\t\t\tif ( 'custom-widget-actions' === group.name ) {\n\t\t\t\tgroup.actions.forEach( ( action ) => {\n\t\t\t\t\tif ( 'widget-action' === action.name ) {\n\t\t\t\t\t\taction.icon = 'eicon-code';\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn customGroups;\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Handling Widget Ready Event\nDESCRIPTION: Example showing how to execute code when any Elementor widget becomes ready.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/js.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nelementorFrontend.hooks.addAction( 'frontend/element_ready/widget', function( $scope ) {\n\tif ( $scope.data( 'shake' ) ){\n\t\t$scope.shake();\n\t}\n} );\n```\n\n----------------------------------------\n\nTITLE: Original Action Hook Implementation in PHP\nDESCRIPTION: Example of the original code using the old action hook naming convention.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/deprecations/deprecated-action-hook.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Name {\n\n\tfunction init( $args ): void {\n\t\tdo_action( 'elementor/old/action', $args );\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: WordPress Archive Template Structure\nDESCRIPTION: Simple archive.php template file that includes header, archive template part, and footer.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/original-theme.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nget_header();\n\nget_template_part( 'template-parts/archive' );\n\nget_footer();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Elementor Page Settings in PHP\nDESCRIPTION: This code snippet shows how to retrieve custom page settings data from Elementor's page settings manager, specifically accessing a custom control named 'test_color'.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor/page-settings-panel.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve the page settings manager\n$page_settings_manager = \\Elementor\\Core\\Settings\\Manager::get_settings_managers( 'page' );\n\n// Retrieve the settings model for the current page\n$page_settings_model = $page_settings_manager->get_model( $page_id );\n\n// Retrieve data from a custom control\n$test_color = $page_settings_model->get_settings( 'test_color' );\n\necho $test_color; // Possible output: '#9b0a46'\n```\n\n----------------------------------------\n\nTITLE: Border Controls with Conditional Display in Elementor\nDESCRIPTION: A comprehensive example showing how to implement conditional display for border controls. The border style, color, and width controls are only displayed when the 'border' switcher is turned on.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/conditional-display.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'border',\n\t[\n\t\t'label' => esc_html__( 'Border', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::SWITCHER,\n\t]\n);\n\n$this->add_control(\n\t'border_style',\n\t[\n\t\t'label' => esc_html__( 'Border Style', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::SELECT,\n\t\t'options' => [\n\t\t\t'' => esc_html__( 'None', 'textdomain' ),\n\t\t\t'solid' => esc_html__( 'Solid', 'textdomain' ),\n\t\t\t'double' => esc_html__( 'Double', 'textdomain' ),\n\t\t\t'dotted' => esc_html__( 'Dotted', 'textdomain' ),\n\t\t\t'dashed' => esc_html__( 'Dashed', 'textdomain' ),\n\t\t\t'groove' => esc_html__( 'Groove', 'textdomain' ),\n\t\t],\n\t\t'selectors' => [\n\t\t\t'{{WRAPPER}} .inner_class' => 'border-style: {{VALUE}}',\n\t\t],\n\t\t'condition' => [\n\t\t\t'border' => 'yes',\n\t\t],\n\n\t]\n);\n\n$this->add_control(\n\t'border_color',\n\t[\n\t\t'label' => esc_html__( 'Border Color', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n\t\t'default' => '',\n\t\t'selectors' => [\n\t\t\t'{{WRAPPER}} .inner_class' => 'border-color: {{VALUE}}',\n\t\t],\n\t\t'condition' => [\n\t\t\t'border' => 'yes',\n\t\t],\n\t]\n);\n\n$this->add_responsive_control(\n\t'border_width',\n\t[\n\t\t'label' => esc_html__( 'Border Width', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::DIMENSIONS,\n\t\t'selectors' => [\n\t\t\t'{{WRAPPER}} .inner_class' => 'border-width: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',\n\t\t],\n\t\t'condition' => [\n\t\t\t'border' => 'yes',\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Modified WordPress Archive Template\nDESCRIPTION: Simplified archive.php template that implements the Elementor archive location hook between header and footer.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/migrating-themes-with-hooks.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nget_header();\n\ndo_action( 'theme_prefix_archive' );\n\nget_footer();\n```\n\n----------------------------------------\n\nTITLE: Registering and Enqueuing Editor Scripts Before Elementor Scripts\nDESCRIPTION: This snippet shows how to register custom scripts and enqueue them before Elementor's scripts are loaded. It uses the 'wp_enqueue_scripts' hook for registration and 'elementor/editor/before_enqueue_scripts' for enqueuing.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/scripts-styles/editor-scripts.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction my_plugin_register_editor_scripts() {\n\twp_register_script( 'editor-script-1', plugins_url( 'assets/js/editor-script-1.js', __FILE__ ) );\n\twp_register_script( 'editor-script-2', plugins_url( 'assets/js/editor-script-2.js', __FILE__ ), [ 'external-library' ] );\n\twp_register_script( 'external-library', plugins_url( 'assets/js/libs/external-library.js', __FILE__ ) );\n}\nadd_action( 'wp_enqueue_scripts', 'my_plugin_register_editor_scripts' );\n\nfunction my_plugin_enqueue_editor_scripts() {\n\twp_enqueue_script( 'editor-script-1' );\n\twp_enqueue_script( 'editor-script-2' );\n}\nadd_action( 'elementor/editor/before_enqueue_scripts', 'my_plugin_enqueue_editor_scripts' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Elementor Archive Location in archive.php\nDESCRIPTION: Archive template implementation with Elementor archive location support and fallback.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/migrating-themes-with-functions.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nget_header();\n\n// Elementor `archive` location\nif ( ! function_exists( 'elementor_theme_do_location' ) || ! elementor_theme_do_location( 'archive' ) ) {\n\tget_template_part( 'template-parts/archive' );\n}\n\nget_footer();\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Before and After All Elementor Elements\nDESCRIPTION: PHP functions that add div elements before and after all Elementor elements using the elementor/frontend/before_render and elementor/frontend/after_render hooks.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/render-frontend-elements.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Add `<div>` before all the elements in the page.\n *\n * @since 1.0.0\n * @param \\Elementor\\Element_Base $element The element instance.\n */\nfunction add_div_before_all_elements( $element ) {\n\t?>\n\t<div class=\"before-element\">Text before element</div>\n\t<?php\n}\nadd_action( 'elementor/frontend/before_render', 'add_div_before_all_elements' );\n\n/**\n * Add `<div>` after all the elements in the page.\n *\n * @since 1.0.0\n * @param \\Elementor\\Element_Base $element The element instance.\n */\nfunction add_div_after_all_elements( $element ) {\n\t?>\n\t<div class=\"after-element\">Text after element</div>\n\t<?php\n}\nadd_action( 'elementor/frontend/after_render', 'add_div_after_all_elements' );\n```\n\n----------------------------------------\n\nTITLE: Transitional Implementation with Deprecation Handler\nDESCRIPTION: Updated implementation that includes deprecation handling while supporting both old and new argument patterns.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/deprecations/deprecated-argument.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Elementor\\Plugin;\n\nclass Items_Manager {\n\n\tprivate $items;\n\n\tfunction register( $instance, $id = null ): void {\n\t\tif ( $id ) {\n\t\t\t// TODO: Remove this in the future.\n\t\t\tPlugin::instance()->modules_manager->get_modules( 'dev-tools' )->deprecation->deprecated_argument(\n\t\t\t\t'$id',\n\t\t\t\t'3.5.0'\n\t\t\t);\n\t\t} else {\n\t\t\t// TODO: Leave this in the future.\n\t\t\t$id = $instance->get_id();\n\t\t}\n\n\t\t$this->items[ $id ] = $instance;\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Widget Inner Wrapper Configuration in PHP\nDESCRIPTION: PHP method to retain both wrapper elements for legacy widget compatibility.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-inner-wrapper.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function has_widget_inner_wrapper(): bool {\n\treturn true;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Shape Dividers in Plugin\nDESCRIPTION: Example code for adding custom shape dividers when implementing in a WordPress plugin. Uses plugins_url and plugin_dir_path functions for file paths.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/shapes.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Add additional shape dividers to Elementor.\n *\n * @since 1.0.0\n * @param array $additional_shapes Additional Elementor shape dividers.\n */\nfunction custom_elementor_shape_dividers( $additional_shapes ) {\n\n\t$additional_shapes['shape-divider-1'] = [\n\t\t'title'        => esc_html__( 'Shape divider 1', 'textdomain' ),\n\t\t'url'          => plugins_url( __FILE__ ) . 'assets/shapes/shape-1.svg',\n\t\t'path'         => plugin_dir_path( __FILE__ ) . 'assets/shapes/shape-1.svg',\n\t\t'height_only'  => true,\n\t];\n\n\t$additional_shapes['shape-divider-2'] = [\n\t\t'title'        => esc_html__( 'Shape divider 2', 'textdomain' ),\n\t\t'url'          => plugins_url( __FILE__ ) . 'assets/shapes/shape-2.svg',\n\t\t'path'         => plugin_dir_path( __FILE__ ) . 'assets/shapes/shape-2.svg',\n\t\t'has_flip'     => true,\n\t\t'has_negative' => true,\n\t\t'height_only'  => true,\n\t];\n\n\treturn $additional_shapes;\n\n}\nadd_filter( 'elementor/shapes/additional_shapes', 'custom_elementor_shape_dividers' );\n```\n\n----------------------------------------\n\nTITLE: Basic Elementor Element JSON Structure\nDESCRIPTION: Demonstrates the fundamental JSON structure for any Elementor element, showing the core properties like id, element type, inner status, settings, and nested elements.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/general-elements.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"id\": \"12345678\",\n\t\"elType\": \"element\",\n\t\"isInner\": false,\n\t\"settings\": [],\n\t\"elements\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Navigation Menus in WordPress\nDESCRIPTION: This code snippet shows how to register custom navigation menus in WordPress using the register_nav_menus() function. It demonstrates registering three different menus: header, footer, and mobile.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hello-elementor-theme/hello_elementor_register_menus.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nregister_nav_menus( [ 'my-header-menu' => esc_html__( 'Header Menu', 'textdomain' ) ] );\nregister_nav_menus( [ 'my-footer-menu' => esc_html__( 'Footer Menu', 'textdomain' ) ] );\nregister_nav_menus( [ 'my-mobile-menu' => esc_html__( 'Mobile Menu', 'textdomain' ) ] );\n```\n\n----------------------------------------\n\nTITLE: Elementor 404 Page Template Example\nDESCRIPTION: Example of a 404 error page template with custom background color settings.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/general-structure.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"404 Page\",\n\t\"type\": \"error-404\",\n\t\"version\": \"0.4\",\n\t\"page_settings\": {\n\t\t\"content_wrapper_html_tag\": \"main\",\n\t\t\"background_background\": \"classic\",\n\t\t\"background_color\": \"#333333\"\n\t},\n\t\"content\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Elementor Form Field Class in PHP\nDESCRIPTION: This snippet shows the basic structure for creating a custom form field class in Elementor Pro by extending the Field_Base class.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-fields/field-structure.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Field extends \\ElementorPro\\Modules\\Forms\\Fields\\Field_Base {\n}\n```\n\n----------------------------------------\n\nTITLE: Equality Check in Elementor Conditions\nDESCRIPTION: A simple example showing how to use equality check in conditions to display a control only if the dependent control equals a certain value.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/conditional-display.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'condition' => [\n\t'control-name' => 'control-value',\n],\n```\n\n----------------------------------------\n\nTITLE: Example of Importing Templates from a Directory\nDESCRIPTION: A practical example showing how to import all template JSON files from a specific directory into the Elementor library. All templates in the specified directory will be processed and added to the library.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/library-import-dir.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor library import-dir path/to/custom-templates/\n```\n\n----------------------------------------\n\nTITLE: Handling Global Element Ready Event\nDESCRIPTION: Example showing how to execute code when any Elementor element becomes ready.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/js.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nelementorFrontend.hooks.addAction( 'frontend/element_ready/global', function( $scope ) {\n\tif ( $scope.data( 'shake' ) ){\n\t\t$scope.shake();\n\t}\n} );\n```\n\n----------------------------------------\n\nTITLE: Legacy Dependency Declaration for Elementor < 3.28\nDESCRIPTION: Shows the backwards-compatible way of declaring dependencies using class properties for Elementor versions prior to 3.28.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-fields/field-dependencies.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Field extends \\ElementorPro\\Modules\\Forms\\Fields\\Field_Base {\n\n\tpublic $depended_scripts = [ 'script-handle' ];\n\n\tpublic $depended_styles = [ 'style-handle' ];\n\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting LTR and RTL Websites with CSS Selectors in PHP\nDESCRIPTION: Shows how to specify different selector values based on writing direction (LTR or RTL) for multilingual support.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/selectors.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'gap-size',\n\t[\n\t\t'label' => esc_html__( 'Gap', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::NUMBER,\n\t\t'selectors' => [\n\t\t\t'body:not(.rtl) {{WRAPPER}} .custom-container' => 'padding-left: {{VALUE}}',\n\t\t\t'body.rtl {{WRAPPER}} .custom-container' => 'padding-right: {{VALUE}}',\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Elementor Footer Template Example\nDESCRIPTION: Example of a footer template with basic page settings and a container element structure.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/general-structure.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"Site Footer\",\n\t\"type\": \"footer\",\n\t\"version\": \"0.4\",\n\t\"page_settings\": {\n\t\t\"content_wrapper_html_tag\": \"footer\"\n\t},\n\t\"content\": [\n\t\t{\n\t\t\t\"id\": \"1aebaeaa\",\n\t\t\t\"elType\": \"container\",\n\t\t\t\"isInner\": false,\n\t\t\t\"settings\": [],\n\t\t\t\"elements\": []\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Sub-Components in Document Index\nDESCRIPTION: Shows how to export sub-components from a document index file.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/js/components.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport { default as ElementsComponent } from './elements/component.js';\n```\n\n----------------------------------------\n\nTITLE: Traditional Section-Column Structure\nDESCRIPTION: Example of the classic Elementor structure using sections and columns, containing an image widget.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/page-content.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"Sample Page\",\n\t\"type\": \"page\",\n\t\"version\": \"0.4\",\n\t\"page_settings\": [],\n\t\"content\": [\n\t\t{\n\t\t\t\"id\": \"123ab956\",\n\t\t\t\"elType\": \"section\",\n\t\t\t\"isInner\": false,\n\t\t\t\"settings\": [],\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"1d4a679a\",\n\t\t\t\t\t\"elType\": \"column\",\n\t\t\t\t\t\"isInner\": false,\n\t\t\t\t\t\"settings\": [],\n\t\t\t\t\t\"elements\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"1d4a679a\",\n\t\t\t\t\t\t\t\"elType\": \"widget\",\n\t\t\t\t\t\t\t\"widgetType\": \"image\",\n\t\t\t\t\t\t\t\"isInner\": false,\n\t\t\t\t\t\t\t\"settings\": [],\n\t\t\t\t\t\t\t\"elements\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Widget Element JSON Structure\nDESCRIPTION: Basic structure of an Elementor widget element showing core properties including ID, element type, widget type, and container arrays for settings and nested elements.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/widget-element.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"id\": \"12345678\",\n\t\"elType\": \"widget\",\n\t\"widgetType\": \"heading\",\n\t\"isInner\": false,\n\t\"settings\": [],\n\t\"elements\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing style.min.css Enqueuing in Hello Elementor Theme (PHP)\nDESCRIPTION: This code snippet demonstrates how to use the 'hello_elementor_enqueue_style' filter hook to prevent the Hello Elementor Theme from loading the default style.min.css stylesheet. It should be added to the functions.php file of a child theme.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hello-elementor-theme/hello_elementor_enqueue_style.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'hello_elementor_enqueue_style', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Defining Namespace Structure in Elementor\nDESCRIPTION: Example of Elementor's namespace structure showing how related functionality is grouped into sub-namespaces.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/addons/namespaces.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\Elementor\\\n\\Elementor\\Core\n\\Elementor\\Core\\Editor\n\\Elementor\\Core\\Breakpoints\n\\Elementor\\Core\\Files\n```\n\n----------------------------------------\n\nTITLE: Basic Container Element Structure in JSON\nDESCRIPTION: Demonstrates the basic JSON structure of a container element with its core properties including ID, element type, inner status, settings, and elements array.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/container-element.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"id\": \"12345678\",\n\t\"elType\": \"container\",\n\t\"isInner\": false,\n\t\"settings\": [],\n\t\"elements\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single-Value Condition in Elementor Control\nDESCRIPTION: Shows how to set a conditional display that depends on an exact value from another control. The highlighted code shows the condition argument that enables this functionality.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/conditional-display.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'unique-control-name',\n\t[\n\t\t'label' => esc_html__( 'Control Label', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t'condition' => [\n\t\t\t'dependent-control-name' => 'exact-value',\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Viewport Content Filter Hook Implementation in PHP\nDESCRIPTION: Example of implementing the 'hello_elementor_viewport_content' filter hook to customize the viewport content attributes with specific width, height, and user-scalable settings.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hello-elementor-theme/hello_elementor_viewport_content.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction custom_hello_elementor_viewport_content() {\n\treturn 'width=100vw, height=100vh, user-scalable=no';\n}\nadd_filter( 'hello_elementor_viewport_content', 'custom_hello_elementor_viewport_content' );\n```\n\n----------------------------------------\n\nTITLE: JSON Example of Empty Page in Elementor\nDESCRIPTION: This snippet shows an example of an empty page in Elementor with no settings. The 'page_settings' field is an empty array, and there's no content.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/page-settings.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"About Page\",\n\t\"type\": \"page\",\n\t\"version\": \"0.4\",\n\t\"page_settings\": [],\n\t\"content\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Finder Hooks in Markdown\nDESCRIPTION: This code snippet lists and briefly describes the two hooks available for developers to customize Elementor's Finder categories.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/finder/finder-categories.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* `elementor/finder/register` action - Used to register new finder categories.\n* `elementor/finder/categories` filter - Used to modify the finder categories array.\n```\n\n----------------------------------------\n\nTITLE: Implementing PageSpeed Context Menu in JavaScript\nDESCRIPTION: JavaScript implementation that adds a Google PageSpeed testing option to Elementor's context menu for widgets, columns, and sections. Includes URL generation and context menu hook integration.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/advanced-example.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener( 'elementor/init', () => {\n\n\tconst currentPageURL = elementor.documents.currentDocument.config.urls.permalink;\n\n\tconst pageSpeedURL = `https://developers.google.com/speed/pagespeed/insights/?url=${currentPageURL}&tab=desktop`;\n\n\tconst elTypes = [ 'widget', 'column', 'section' ];\n\n\t// Google PageSpeed action object\n\tconst newAction = {\n\t\tname: 'google-page-speed',\n\t\ticon: 'eicon-wrench',\n\t\ttitle: 'Google PageSpeed',\n\t\tisEnabled: () => true,\n\t\tcallback: () => window.open( pageSpeedURL, '_blank' ).focus(),\n\t};\n\n\t// Add \"Google PageSpeed\" action to widget/column/section context menus.\n\telTypes.forEach( ( elType ) => {\n\n\t\telementor.hooks.addFilter( `elements/${elType}/contextMenuGroups`, ( groups, view ) => {\n\n\t\t\tgroups.forEach( ( group ) => {\n\t\t\t\tif ( 'general' === group.name ) {\n\t\t\t\t\tgroup.actions.push( newAction );\n\t\t\t\t}\n\t\t\t} );\n\t\n\t\t\treturn groups;\n\t\n\t\t} );\n\n\t} );\n\n} );\n```\n\n----------------------------------------\n\nTITLE: SSL Connection Check in PHP\nDESCRIPTION: Implementation of check() method to verify if the current page was accessed via SSL by checking the HTTPS server variable.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/theme-conditions/condition-check.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Condition extends \\ElementorPro\\Modules\\ThemeBuilder\\Conditions\\Condition_Base {\n\n\tpublic function check( $args ): bool {\n\t\treturn empty( $_SERVER['HTTPS'] );\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Modified WordPress Footer Template\nDESCRIPTION: Updated footer.php template that implements the Elementor footer location hook while maintaining standard WordPress footer structure.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/migrating-themes-with-hooks.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php do_action( 'theme_prefix_footer' ); ?>\n\n<?php wp_footer(); ?>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Registering WooCommerce Theme Features\nDESCRIPTION: Code to enable WooCommerce support and various product gallery features using WordPress native add_theme_support() function. This enables core WooCommerce functionality along with zoom, lightbox, and slider features for product galleries.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hello-elementor-theme/hello_elementor_add_woocommerce_support.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_theme_support( 'woocommerce' );\nadd_theme_support( 'wc-product-gallery-zoom' );\nadd_theme_support( 'wc-product-gallery-lightbox' );\nadd_theme_support( 'wc-product-gallery-slider' );\n```\n\n----------------------------------------\n\nTITLE: Elementor Popup Template Example\nDESCRIPTION: Example of a mobile navigation popup template with specific popup settings including animations, overlay, and scroll behavior.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/general-structure.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"Mobile Navigation Popup\",\n\t\"type\": \"popup\",\n\t\"version\": \"0.4\",\n\t\"page_settings\": {\n\t\t\"width\": {\n\t\t\t\"unit\": \"px\",\n\t\t\t\"size\": 600,\n\t\t\t\"sizes\": []\n\t\t},\n\t\t\"entrance_animation\": \"fadeIn\",\n\t\t\"exit_animation\": \"fadeIn\",\n\t\t\"overlay_background_color\": \"#000000AA\",\n\t\t\"prevent_scroll\": \"yes\"\n\t},\n\t\"content\": [\n\t\t{\n\t\t\t\"id\": \"c647ac2\",\n\t\t\t\"elType\": \"container\",\n\t\t\t\"isInner\": false,\n\t\t\t\"settings\": {\n\t\t\t\t\"padding\": {\n\t\t\t\t\t\"unit\": \"px\",\n\t\t\t\t\t\"top\": \"20\",\n\t\t\t\t\t\"right\": \"20\",\n\t\t\t\t\t\"bottom\": \"20\",\n\t\t\t\t\t\"left\": \"20\",\n\t\t\t\t\t\"isLinked\": true\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"elements\": []\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Specific Elementor Data Types\nDESCRIPTION: Example command that exports only selected data types (site settings and content) to a specified ZIP file using the include parameter.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/kit-export.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor kit export path/to/export-file-name.zip --include=site-settings,content\n```\n\n----------------------------------------\n\nTITLE: Implementing Select2 Control in Elementor Widget PHP Class\nDESCRIPTION: This snippet demonstrates how to add a Select2 control to an Elementor widget, render the selected values, and create a JavaScript template for live preview. It includes registering the control, setting its options, and handling both PHP rendering and JavaScript template rendering.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-select2.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'list',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Show Elements', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::SELECT2,\n\t\t\t\t'label_block' => true,\n\t\t\t\t'multiple' => true,\n\t\t\t\t'options' => [\n\t\t\t\t\t'title'  => esc_html__( 'Title', 'textdomain' ),\n\t\t\t\t\t'description' => esc_html__( 'Description', 'textdomain' ),\n\t\t\t\t\t'button' => esc_html__( 'Button', 'textdomain' ),\n\t\t\t\t],\n\t\t\t\t'default' => [ 'title', 'description' ],\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\t\tif ( $settings['list'] ) {\n\t\t\techo '<ul>';\n\t\t\tforeach ( $settings['list'] as $item ) {\n\t\t\t\techo '<li>' . $item . '</li>';\n\t\t\t}\n\t\t\techo '</ul>';\n\t\t}\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<# if ( settings.list.length ) { #>\n\t\t\t<ul>\n\t\t\t<# _.each( settings.list, function( item ) { #>\n\t\t\t\t<li>{{{ item }}}</li>\n\t\t\t<# } ) #>\n\t\t\t</ul>\n\t\t<# } #>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Developer Documentation Homepage\nDESCRIPTION: HTML markup defining the structure of the Elementor developer documentation homepage. Contains sections for hero content, getting started guides, internals documentation, and component references.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/index.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<section id=\"home-hero\">\n  <h1>Elementor Developers Docs</h1>\n  <p>Learn how to extend Elementor core to create your own Addons. Here you will find detailed documentation, handy code snippers and full code examples.</p>\n</section>\n\n<section id=\"home-get-started\" class=\"home-content\">\n  <div>\n    <h2>Get Started</h2>\n    <p>Learn how to extend Elementor core to create your own Addons. Here you will find detailed documentation, handy code snippers and full code examples.</p>\n  </div>\n  <div>\n    <ul>\n      <li><a href=\"./getting-started/\">Getting Started</a></li>\n      <li><a href=\"./getting-started/first-addon/\">Your First Addon</a></li>\n      <li><a href=\"./addons/\">Building Addons</a></li>\n    </ul>\n  </div>\n</section>\n\n<section id=\"home-internals\" class=\"home-content\">\n  <div>\n    <h2>Elementor Internals</h2>\n    <p>Elementor has underlying technology, which we call the internals. Learn the concepts you should understand when developing your Elementor addons.</p>\n  </div>\n  <div>\n    <ul>\n      <li><a href=\"./editor/\">The Editor</a></li>\n      <li><a href=\"./editor-controls/\">Editor Controls</a></li>\n      <li><a href=\"./data-structure/\">Data Structure</a></li>\n      <li><a href=\"./managers/\">Managers</a></li>\n      <li><a href=\"./scripts-styles/\">Scripts &amp; Styles</a></li>\n      <li><a href=\"./hooks/\">Hooks</a></li>\n      <li><a href=\"./deprecations/\">Deprecations</a></li>\n      <li><a href=\"./cli/\">CLI</a></li>\n    </ul>\n  </div>\n</section>\n\n<section id=\"home-components\" class=\"home-content\">\n  <div>\n    <h2>Elementor Components</h2>\n    <p>Elementor contains numerous components developers can modify to extend Elementor's capabilities. This section contains a list of components currently covered by this documentation.</p>\n  </div>\n  <div>\n    <ul>\n      <li><a href=\"./widgets/\">Widgets</a></li>\n      <li><a href=\"./controls/\">Controls</a></li>\n      <li><a href=\"./dynamic-tags/\">Dynamic Tags</a></li>\n      <li><a href=\"./form-actions/\">Form Actions</a></li>\n      <li><a href=\"./form-fields/\">Form Fields</a></li>\n      <li><a href=\"./theme-conditions/\">Theme Conditions</a></li>\n      <li><a href=\"./themes/\">Theme Locations</a></li>\n      <li><a href=\"./context-menu/\">Context Menu</a></li>\n      <li><a href=\"./finder/\">Finder</a></li>\n    </ul>\n  </div>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Elementor Page with Empty Containers\nDESCRIPTION: Shows the JSON structure of a page containing two empty container elements, demonstrating the basic page structure and container implementation.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/general-elements.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"Sample Page\",\n\t\"type\": \"page\",\n\t\"version\": \"0.4\",\n\t\"page_settings\": [],\n\t\"content\": [\n\t\t{\n\t\t\t\"id\": \"6af611eb\",\n\t\t\t\"elType\": \"container\",\n\t\t\t\"isInner\": false,\n\t\t\t\"settings\": [],\n\t\t\t\"elements\": []\n\t\t},\n\t\t{\n\t\t\t\"id\": \"7fb170b9\",\n\t\t\t\"elType\": \"container\",\n\t\t\t\"isInner\": false,\n\t\t\t\"settings\": [],\n\t\t\t\"elements\": []\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Unregistering Existing Controls in Elementor\nDESCRIPTION: This function demonstrates how to unregister existing controls in Elementor by hooking into the 'elementor/controls/register' action and using the unregister() method. Multiple controls can be unregistered by passing their names to the method.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/controls/remove-controls.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction unregister_controls( $controls_manager ) {\n\n\t$controls_manager->unregister( 'control-1' );\n\t$controls_manager->unregister( 'control-2' );\n\n}\nadd_action( 'elementor/controls/register', 'unregister_controls' );\n```\n\n----------------------------------------\n\nTITLE: Adding Custom WordPress Theme Features\nDESCRIPTION: Example demonstrating how to register custom theme features using WordPress's native add_theme_support() function, specifically enabling title tag and post thumbnails support.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hello-elementor-theme/hello_elementor_add_theme_support.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_theme_support( 'title-tag' );\nadd_theme_support( 'post-thumbnails' );\n```\n\n----------------------------------------\n\nTITLE: Multiple Containers Structure\nDESCRIPTION: Example showing a page with two empty containers at the root level.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/page-content.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"Sample Page\",\n\t\"type\": \"page\",\n\t\"version\": \"0.4\",\n\t\"page_settings\": [],\n\t\"content\": [\n\t\t{\n\t\t\t\"id\": \"6af611eb\",\n\t\t\t\"elType\": \"container\",\n\t\t\t\"isInner\": false,\n\t\t\t\"settings\": [],\n\t\t\t\"elements\": []\n\t\t},\n\t\t{\n\t\t\t\"id\": \"7fb170b9\",\n\t\t\t\"elType\": \"container\",\n\t\t\t\"isInner\": false,\n\t\t\t\"settings\": [],\n\t\t\t\"elements\": []\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Final Implementation without Deprecated Argument\nDESCRIPTION: Final version of the Items_Manager class after removal of deprecated ID parameter, using only the instance method.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/deprecations/deprecated-argument.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Items_Manager {\n\n\tprivate $items;\n\n\tfunction register( $instance ): void {\n\t\t$id = $instance->get_id();\n\t\t$this->items[ $id ] = $instance;\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Widget Implementation Without Caching\nDESCRIPTION: Implementation of an Elementor widget with dynamic content that changes based on user login status. Shows why caching should be avoided for dynamic content.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-output-caching.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'section_content',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'title',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Title', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t\t'placeholder' => esc_html__( 'Enter your title', 'textdomain' ),\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n\tprotected function render(): void {\n\t\t$settings = $this->get_settings_for_display();\n\n\t\tif ( empty( $settings['title'] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( is_user_logged_in() ) {\n\t\t\t$greeting = esc_html__( 'Hi logged in user!', 'textdomain' ) . ' ';\n\t\t}\n\t\t?>\n\t\t<h3>\n\t\t\t<?php echo $greeting . $settings['title']; ?>\n\t\t</h3>\n\t\t<?php\n\t}\n\n\tprotected function content_template(): void {\n\t\t?>\n\t\t<#\n\t\tif ( '' === settings.title ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( document.body.classList.contains( 'logged-in' ) ) {\n\t\t\tgreeting = 'Hi logged in user! ';\n\t\t}\n\t\t#>\n\t\t<h3>\n\t\t\t{{{ greeting + settings.title }}}\n\t\t</h3>\n\t\t<?php\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: WordPress Footer Template Structure\nDESCRIPTION: Minimal footer.php template file that includes the footer template part and closes HTML body and document tags.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/original-theme.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php get_template_part( 'template-parts/footer' ); ?>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Updating Deprecated Widget Methods in Elementor\nDESCRIPTION: This diff demonstrates how to update widget code by removing the deprecated underscore prefix from protected methods. The changes affect register_controls(), render(), and content_template() methods which should no longer use the underscore prefix according to current Elementor standards.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/deprecations/simple-example.md#2025-04-20_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tpublic function get_name(): string {}\n\n\tpublic function get_title(): string {}\n\n\tpublic function get_icon(): string {}\n\n\tpublic function get_categories(): array {}\n\n-\tprotected function _register_controls(): void {}\n+\tprotected function register_controls(): void {}\n\n-\tprotected function _render(): void {}\n+\tprotected function render(): void {}\n\n-\tprotected function _content_template(): void {}\n+\tprotected function content_template(): void {}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Theme Features Registration in Hello Elementor\nDESCRIPTION: Code example showing how to prevent Hello Elementor theme from registering its default theme features using a filter hook in the child theme's functions.php file.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hello-elementor-theme/hello_elementor_add_theme_support.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'hello_elementor_add_theme_support', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Page with Nested Containers\nDESCRIPTION: Illustrates how containers can be nested within other containers, showing multiple levels of nesting in the elements array.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/container-element.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"Test Page\",\n\t\"type\": \"page\",\n\t\"version\": \"0.4\",\n\t\"page_settings\": [],\n\t\"content\": [\n\t\t{\n\t\t\t\"id\": \"458aabdc\",\n\t\t\t\"elType\": \"container\",\n\t\t\t\"isInner\": false,\n\t\t\t\"settings\": [],\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"46ef0576\",\n\t\t\t\t\t\"elType\": \"container\",\n\t\t\t\t\t\"isInner\": false,\n\t\t\t\t\t\"settings\": [],\n\t\t\t\t\t\"elements\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"4a59f2e3\",\n\t\t\t\t\t\t\t\"elType\": \"container\",\n\t\t\t\t\t\t\t\"isInner\": false,\n\t\t\t\t\t\t\t\"settings\": [],\n\t\t\t\t\t\t\t\"elements\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Kit Import Example\nDESCRIPTION: Simple example of importing a complete kit file without any additional parameters.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/kit-import.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor kit import path/to/elementor-kit.zip\n```\n\n----------------------------------------\n\nTITLE: Elementor Form Actions Documentation Structure\nDESCRIPTION: Markdown documentation outlining the structure and functionality of Elementor Pro form actions, including default actions and links to implementation guides.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-actions/index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Elementor Form Actions\n\n<Badge type=\"tip\" vertical=\"top\" text=\"Elementor Pro\" /> <Badge type=\"warning\" vertical=\"top\" text=\"Advanced\" />\n\nForm actions are tasks taken after a visitor has submitted data. An action can send the form data by email, redirect it to a different page, or send the data to an external marketing service - the possibilities are endless.\n\nElementor Pro provides a set of tools to add your own custom actions.\n\n<img :src=\"$withBase('/assets/img/elementor-form-actions.png')\" alt=\"Elementor Form Actions\" style=\"float: right; width: 300px; margin-left: 20px; margin-bottom: 20px;\">\n```\n\n----------------------------------------\n\nTITLE: Elementor Header Template Example\nDESCRIPTION: Example of a header template with custom page settings including HTML tag and background properties, plus a container element.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/general-structure.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"Site Header\",\n\t\"type\": \"header\",\n\t\"version\": \"0.4\",\n\t\"page_settings\": {\n\t\t\"content_wrapper_html_tag\": \"header\",\n\t\t\"background_background\": \"classic\",\n\t\t\"background_color\": \"#000000\"\n\t},\n\t\"content\": [\n\t\t{\n\t\t\t\"id\": \"3130e2cf\",\n\t\t\t\"elType\": \"container\",\n\t\t\t\"isInner\": false,\n\t\t\t\"settings\": [],\n\t\t\t\"elements\": []\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Dynamic Tags in Elementor PHP\nDESCRIPTION: Code example showing how to register new dynamic tags in Elementor by hooking into the 'elementor/dynamic_tags/register' action and using the dynamic tags manager. The function requires dynamic tag class files and registers new instances with the manager.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/managers/registering-dynamic-tags.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Register new Elementor dynamic tags.\n *\n * @param \\Elementor\\Core\\DynamicTags\\Manager $dynamic_tags_manager Elementor dynamic tags manager.\n * @return void\n */\nfunction register_new_dynamic_tags( $dynamic_tags_manager ) {\n\n\trequire_once( __DIR__ . '/dynamic-tags/dynamic-tag-1.php' );\n\trequire_once( __DIR__ . '/dynamic-tags/dynamic-tag-2.php' );\n\n\t$dynamic_tags_manager->register( new \\Elementor_Dynamic_Tag_1() );\n\t$dynamic_tags_manager->register( new \\Elementor_Dynamic_Tag_2() );\n\n}\nadd_action( 'elementor/dynamic_tags/register', 'register_new_dynamic_tags' );\n```\n\n----------------------------------------\n\nTITLE: WordPress Single Post Template Structure\nDESCRIPTION: Basic single.php template file for individual post/page display that includes header, single template part, and footer.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/original-theme.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nget_header();\n\nget_template_part( 'template-parts/single' );\n\nget_footer();\n```\n\n----------------------------------------\n\nTITLE: Extending Elementor Unit Control\nDESCRIPTION: Example of extending the Control_Base_Units class to create a custom unit-based control in Elementor.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-types.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Control extends \\Elementor\\Control_Base_Units {\n}\n```\n\n----------------------------------------\n\nTITLE: Deactivating Elementor Experiments via WordPress CLI\nDESCRIPTION: This command allows developers to deactivate Elementor experimental features through the WordPress command line interface. It requires the experiment name as a parameter and disables the specified experimental feature without accessing the admin panel.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/experiments-deactivate.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor experiments deactivate <experiment-name>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Media Control in Elementor Widget PHP\nDESCRIPTION: This example shows how to add a media control to an Elementor widget. It demonstrates setting up an image selection control with a default placeholder image.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/regular-control.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'image',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::MEDIA,\n\t\t\t\t'label' => esc_html__( 'Choose Image', 'textdomain' ),\n\t\t\t\t'default' => [\n\t\t\t\t\t'url' => \\Elementor\\Utils::get_placeholder_image_src(),\n\t\t\t\t]\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Code to Use New Function in PHP\nDESCRIPTION: A diff example showing how addon developers should update their code to use the new method instead of the deprecated one.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/deprecations/deprecated-function.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass MyItem extends Items {\n\n-\tprotected function add_item(): void {\n+\tprotected function register(): void {\n\t\t/* ... */\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Deprecated Notice Control in Elementor Widget (PHP)\nDESCRIPTION: This snippet demonstrates how to add a deprecated notice control to an Elementor widget using the regular add_control() method. It sets various parameters like widget name, deprecation version, and replacement widget.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-deprecated-notice.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'deprecated_notice',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::DEPRECATED_NOTICE,\n\t\t\t\t'widget' => 'your-old-widget',\n\t\t\t\t'since' => '3.10.0',\n\t\t\t\t'last' => '3.20.0',\n\t\t\t\t'plugin' => 'Your Great Plugin',\n\t\t\t\t'replacement' => 'your-new-widget',\n\t\t\t\t'content_classes' => 'your-class',\n\t\t\t]\n\t\t);\n\n\t\t// Register the rest of the controls as usual.\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: WordPress Header Template Structure\nDESCRIPTION: Basic header.php template file that includes HTML doctype, meta tags, WordPress head functions, and template part inclusion for the header content.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/original-theme.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<!doctype html>\n<html <?php language_attributes(); ?>>\n<head>\n\t<meta charset=\"<?php bloginfo( 'charset' ); ?>\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\t<link rel=\"profile\" href=\"http://gmpg.org/xfn/11\">\n\t<?php wp_head(); ?>\n</head>\n<body <?php body_class(); ?>>\n\n<?php get_template_part( 'template-parts/header' ); ?>\n```\n\n----------------------------------------\n\nTITLE: WordPress Index Template Router\nDESCRIPTION: Main index.php template router that handles different content types using conditional logic to load appropriate template parts.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/original-theme.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nget_header();\n\nif ( is_archive() || is_home() || is_search() ) {\n\tget_template_part( 'template-parts/archive' );\n} elseif ( is_singular() ) {\n\tget_template_part( 'template-parts/single' );\n} else {\n\tget_template_part( 'template-parts/404' );\n}\n\nget_footer();\n```\n\n----------------------------------------\n\nTITLE: Empty Page Content Structure in Elementor\nDESCRIPTION: Basic JSON structure for a page with no content, showing the minimal required fields including title, type, version, and empty content array.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/page-content.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"Template Title\",\n\t\"type\": \"page\",\n\t\"version\": \"0.4\",\n\t\"page_settings\": [],\n\t\"content\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Page Content Structure with Container\nDESCRIPTION: JSON structure showing a page with a single empty container element, demonstrating the basic element structure with ID, type, and settings.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/page-content.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"Template Title\",\n\t\"type\": \"page\",\n\t\"version\": \"0.4\",\n\t\"page_settings\": [],\n\t\"content\": [\n\t\t{\n\t\t\t\"id\": \"6af611eb\",\n\t\t\t\"elType\": \"container\",\n\t\t\t\"isInner\": false,\n\t\t\t\"settings\": [],\n\t\t\t\"elements\": []\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Unregistering Elementor Finder Categories using PHP\nDESCRIPTION: Function that hooks into 'elementor/finder/register' to remove specific finder categories from Elementor. It accepts the finder categories manager as a parameter and uses the unregister() method to remove categories by their names.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/managers/unregistering-finder-categories.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Unregister Elementor finder categories.\n *\n * @param \\Elementor\\Core\\Common\\Modules\\Finder\\Categories_Manager $finder_categories_manager Elementor finder categories manager.\n * @return void\n */\nfunction unregister_finder_categories( $finder_categories_manager ) {\n\n\t$finder_categories_manager->unregister( 'finder-category-1' );\n\t$finder_categories_manager->unregister( 'finder-category-2' );\n\n}\nadd_action( 'elementor/finder/register', 'unregister_finder_categories' );\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Menu Registration in Hello Elementor Theme\nDESCRIPTION: This code snippet demonstrates how to use a filter hook to prevent the Hello Elementor Theme from registering its default navigation menus. It should be added to a child theme's functions.php file.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hello-elementor-theme/hello_elementor_register_menus.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'hello_elementor_register_menus', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Validating and Rendering Telephone Field in Elementor Pro Form\nDESCRIPTION: This snippet demonstrates how to validate and render a telephone field in an Elementor Pro form. It validates the phone number format (XXX-XXX-XXXX) using a regular expression and customizes the field rendering with a specific pattern and title attribute.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/form-validation.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction elementor_form_tel_field_validation( $field, $record, $ajax_handler ) {\n\t// Remove native validation\n\t$forms_module = \\ElementorPro\\Plugin::instance()->modules_manager->get_modules( 'forms' );\n\tremove_action( 'elementor_pro/forms/validation/tel', [ $forms_module->fields_registrar->get( 'tel' ), 'validation' ], 10, 3 );\n\n\t// Run your own validation, ex:\n\tif ( empty( $field['value'] ) ) {\n\t\treturn;\n\t}\n\n\t// Match this format XXX-XXX-XXXX, e.g. 123-456-7890\n\tif ( preg_match( '/[0-9]{3}(-?)[0-9]{3}(-?)[0-9]{4}/', $field['value'] ) !== 1 ) {\n\t\t$ajax_handler->add_error( $field['id'], esc_html__( 'Please make sure the phone number is in XXX-XXX-XXXX format, eg: 123-456-7890', 'textdomain' ) );\n\t}\n}\nadd_action( 'elementor_pro/forms/validation/tel', 'elementor_form_tel_field_validation', 10, 3 );\n\nfunction elementor_form_tel_field_rendering( $item, $item_index, $form ) {\n\t// Remove native render\n\t$forms_module = \\ElementorPro\\Plugin::instance()->modules_manager->get_modules( 'forms' );\n\tremove_action( 'elementor_pro/forms/render_field/tel', [ $forms_module->fields_registrar->get( 'tel' ), 'field_render' ], 10, 3 );\n\n\t// Add custom render ex:\n\t$form->add_render_attribute( 'input' . $item_index, 'class', 'elementor-field-textual' );\n\t$form->add_render_attribute( 'input' . $item_index, 'pattern', '[0-9]{3}(-?)[0-9]{3}(-?)[0-9]{4}' );\n\t$form->add_render_attribute( 'input' . $item_index, 'title', esc_html__( 'Number should be in this format xxx-xxx-xxxx.', 'textdomain' ) );\n\n\techo '<input size=\"1\" ' . $form->get_render_attribute_string( 'input' . $item_index ) . '>';\n}\nadd_action( 'elementor_pro/forms/render_field/tel', 'elementor_form_tel_field_rendering', 9, 3 );\n```\n\n----------------------------------------\n\nTITLE: Network-wide Elementor Library Sync in Bash\nDESCRIPTION: Command to synchronize the template library across all sites in a WordPress multisite network, ensuring all sites have the latest templates from Elementor's cloud.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/library-sync.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor library sync --network\n```\n\n----------------------------------------\n\nTITLE: Registering Specific Elementor Locations\nDESCRIPTION: Function to register specific Elementor locations (header and footer) while leaving others commented out. Demonstrates selective location registration.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/registering-locations.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction theme_prefix_register_elementor_locations( $elementor_theme_manager ) {\n\n\t$elementor_theme_manager->register_location( 'header' );\n\t$elementor_theme_manager->register_location( 'footer' );\n\t// $elementor_theme_manager->register_location( 'single' );\n\t// $elementor_theme_manager->register_location( 'archive' );\n\n}\nadd_action( 'elementor/theme/register_locations', 'theme_prefix_register_elementor_locations' );\n```\n\n----------------------------------------\n\nTITLE: Return Value Structure for Text Shadow Control\nDESCRIPTION: Defines the default return value structure for the Text Shadow control, containing horizontal and vertical offsets, blur radius, and shadow color.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-text-shadow.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\n\t'horizontal' => 0,\n\t'vertical' => 0,\n\t'blur' => 10,\n\t'color' => 'rgba(0,0,0,0.3)',\n];\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated Notice Method in Elementor Widget (PHP)\nDESCRIPTION: This snippet shows an alternative way to add a deprecated notice to an Elementor widget using the deprecated_notice() method. It provides a more concise approach to display deprecation warnings.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-deprecated-notice.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->deprecated_notice(\n\t\t\t'Your Great Plugin',\n\t\t\t'3.10.0',\n\t\t\t'3.20.0',\n\t\t\t'your-new-widget'\n\t\t);\n\n\t\t// Register the rest of the controls as usual.\n\n\t\t$this->end_controls_section();\n\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: WordPress 404 Template Structure\nDESCRIPTION: Simple 404.php template file for handling not found errors that includes header, 404 template part, and footer.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/original-theme.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nget_header();\n\nget_template_part( 'template-parts/404' );\n\nget_footer();\n```\n\n----------------------------------------\n\nTITLE: Configuring Elementor Pro License Key for Composer\nDESCRIPTION: This Bash command configures Composer to use an Elementor Pro license key for authentication when installing Elementor Pro.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/composer.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer config --global --auth http-basic.composer.elementor.com token <license-key>\n```\n\n----------------------------------------\n\nTITLE: Container with Custom Settings\nDESCRIPTION: Demonstrates a container element with custom styling settings including height, content position, and HTML tag specifications.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/container-element.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"Test Page\",\n\t\"type\": \"page\",\n\t\"version\": \"0.4\",\n\t\"page_settings\": [],\n\t\"content\": [\n\t\t{\n\t\t\t\"id\": \"458aabdc\",\n\t\t\t\"elType\": \"container\",\n\t\t\t\"isInner\": false,\n\t\t\t\"settings\": {\n\t\t\t\t\"height\": \"min-height\",\n\t\t\t\t\"custom_height\": {\n\t\t\t\t\t\"unit\": \"vh\",\n\t\t\t\t\t\"size\": 70,\n\t\t\t\t\t\"sizes\": []\n\t\t\t\t},\n\t\t\t\t\"content_position\": \"middle\",\n\t\t\t\t\"html_tag\": \"section\"\n\t\t\t},\n\t\t\t\"elements\": []\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Example of Styled Page in Elementor\nDESCRIPTION: This snippet provides an example of a styled page in Elementor. The 'page_settings' object includes various styling settings such as background, margin, padding, and scroll snap.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/page-settings.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"Template Title\",\n\t\"type\": \"page\",\n\t\"version\": \"0.4\",\n\t\"page_settings\": {\n\t\t\"background_background\": \"classic\",\n\t\t\"background_color\": \"#FFFFFF\",\n\t\t\"margin\": {\n\t\t\t\"unit\": \"px\",\n\t\t\t\"top\": \"0\",\n\t\t\t\"right\": \"0\",\n\t\t\t\"bottom\": \"0\",\n\t\t\t\"left\": \"0\",\n\t\t\t\"isLinked\": true\n\t\t},\n\t\t\"padding\": {\n\t\t\t\"unit\": \"px\",\n\t\t\t\"top\": \"0\",\n\t\t\t\"right\": \"10\",\n\t\t\t\"bottom\": \"0\",\n\t\t\t\"left\": \"10\",\n\t\t\t\"isLinked\": false\n\t\t},\n\t\t\"scroll_snap\": \"yes\"\n\t},\n\t\"content\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Adding External Link Action to Widget Context Menu\nDESCRIPTION: Creates a new action that adds an external link to Elementor website in the widget context menu. The action is added to the 'custom-widget-actions' group and opens the Elementor website in a new tab.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/context-menu/add-new-action.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nelementor.hooks.addFilter( 'elements/context-menu/groups', ( customGroups, elementType ) => {\n\n\tconst newAction = {\n\t\tname: 'elementor-link',\n\t\ticon: 'eicon-alert',\n\t\ttitle: 'Elementor Link',\n\t\tisEnabled: () => true,\n\t\tcallback: () => window.open( 'https://elementor.com/', '_blank' ).focus(),\n\t};\n\n\tif ( 'widget' === elementType ) {\n\t\tcustomGroups.forEach( ( group ) => {\n\t\t\tif ( 'custom-widget-actions' === group.name ) {\n\t\t\t\tgroup.actions.push( newAction );\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn customGroups;\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Unfiltered Files Import Example\nDESCRIPTION: Example showing how to enable unfiltered files upload during the import process.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/kit-import.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor kit import path/to/elementor-kit.zip --unfilteredFilesUpload=enable\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Dependencies - Widget 2\nDESCRIPTION: Shows how to set custom script and style dependencies for the second test widget.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-dependencies.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget_2 extends \\Elementor\\Widget_Base {\n\n\tpublic function get_script_depends(): array {\n\t\treturn [ 'widget-script-1', 'widget-script-2' ];\n\t}\n\n\tpublic function get_style_depends(): array {\n\t\treturn [ 'widget-style-1', 'widget-style-2' ];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Override Conditions Import Example\nDESCRIPTION: Example demonstrating how to override conditions for specific template IDs during import.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/kit-import.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor kit import path/to/elementor-kit.zip --overrideConditions=3478,4520\n```\n\n----------------------------------------\n\nTITLE: Implementing Archive Location with Fallback in PHP\nDESCRIPTION: Implementation of an Elementor archive location with fallback to default theme template if no Elementor template is assigned.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/displaying-locations.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nget_header();\n\n// Elementor `archive` location\nif ( ! function_exists( 'elementor_theme_do_location' ) || ! elementor_theme_do_location( 'archive' ) ) {\n\tget_template_part( 'template-parts/archive' );\n}\n\nget_footer();\n```\n\n----------------------------------------\n\nTITLE: Configuring Elementor Pro Repository in composer.json\nDESCRIPTION: This JSON snippet shows how to register the Elementor Pro repository in the composer.json file. It's necessary for installing Elementor Pro via Composer.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/composer.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"repositories\": [\n\t\t{\n\t\t\t\"type\": \"composer\",\n\t\t\t\"url\": \"https://composer.elementor.com\",\n\t\t\t\"only\": [\n\t\t\t\t\"elementor/elementor-pro\"\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Elementor Pro License via WP-CLI\nDESCRIPTION: This command activates an Elementor Pro license using WP-CLI. It requires a valid license key as an argument. The command should be run in the WordPress installation directory.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/license-activate.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor-pro license activate <license-key>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Elementor Library Connect Command in Bash\nDESCRIPTION: This example demonstrates how to use the 'wp elementor library connect' command with specific user and token values. It connects the WordPress 'admin' user to the Elementor library using a provided token.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/library-connect.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor library connect --user=admin --token=xxx\n```\n\n----------------------------------------\n\nTITLE: Modified WordPress Single Post Template\nDESCRIPTION: Simplified single.php template that implements the Elementor single post location hook between header and footer.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/migrating-themes-with-hooks.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nget_header();\n\ndo_action( 'theme_prefix_single' );\n\nget_footer();\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Page with No Settings in Elementor\nDESCRIPTION: This snippet shows the JSON structure for a page that has no settings in Elementor. The 'page_settings' field is an empty array.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/page-settings.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"Template Title\",\n\t\"type\": \"page\",\n\t\"version\": \"0.4\",\n\t\"page_settings\": [],\n\t\"content\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting All Elementor Site Data\nDESCRIPTION: Example command that exports all site data (content, templates, and site settings) to a specified ZIP file.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/kit-export.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor kit export path/to/export-file-name.zip\n```\n\n----------------------------------------\n\nTITLE: Example Plugin Directory Structure\nDESCRIPTION: Directory structure example showing recommended file organization for an Elementor addon plugin.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/addons/load.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nelementor-test-addon/\n|\n├─ includes/\n|  |\n|  ├─ controls/\n|  ├─ widgets/\n|  |\n|  ├─ controls-manager.php\n|  └─ widgets-manager.php\n|\n└─ elementor-test-addon.php\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Dependencies - Widget 1\nDESCRIPTION: Shows how to set external library and framework dependencies for the first test widget.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-dependencies.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget_1 extends \\Elementor\\Widget_Base {\n\n\tpublic function get_script_depends(): array {\n\t\treturn [ 'external-library' ];\n\t}\n\n\tpublic function get_style_depends(): array {\n\t\treturn [ 'external-framework' ];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Elementor Pro License Activation Command\nDESCRIPTION: This example demonstrates how to use the license activation command with a placeholder license key. Replace 'XXX' with your actual Elementor Pro license key when running the command.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/license-activate.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor-pro license activate XXX\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Media Finder Category\nDESCRIPTION: Class definition for the social media finder category. Extends the Elementor Base_Category class to provide searchable social media links with icons and keywords.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/finder/simple-example.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Elementor Finder - Social Media\n *\n * Provides searchable items to social media websites.\n */\nclass Elementor_Finder_Social_Media extends \\Elementor\\Core\\Common\\Modules\\Finder\\Base_Category {\n\n\t/**\n\t * Get finder category id.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Finder category id.\n\t */\n\tpublic function get_id(): string {\n\t\treturn 'social-media';\n\t}\n\n\t/**\n\t * Get finder category title.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @return string Finder category title.\n\t */\n\tpublic function get_title(): string {\n\t\treturn esc_html__( 'Social Media Websites', 'elementor-finder-social-media' );\n\t}\n\n\t/**\n\t * Get finder category items.\n\t *\n\t * @since 1.0.0\n\t * @access public\n\t * @param array $options\n\t * @return array An array of category items.\n\t */\n\tpublic function get_category_items( array $options = [] ): array {\n\t\treturn [\n\t\t\t'facebook' => [\n\t\t\t\t'title' => esc_html__( 'Facebook', 'elementor-finder-social-media' ),\n\t\t\t\t'icon' => 'facebook',\n\t\t\t\t'url' => 'https://facebook.com/',\n\t\t\t\t'keywords' => [ 'facebook', 'social', 'media' ],\n\t\t\t],\n\t\t\t'twitter' => [\n\t\t\t\t'title' => esc_html__( 'Twitter', 'elementor-finder-social-media' ),\n\t\t\t\t'icon' => 'twitter',\n\t\t\t\t'url' => 'https://twitter.com/',\n\t\t\t\t'keywords' => [ 'twitter', 'social', 'media' ],\n\t\t\t],\n\t\t\t'pinterest' => [\n\t\t\t\t'title' => esc_html__( 'Pinterest', 'elementor-finder-social-media' ),\n\t\t\t\t'icon' => 'pinterest',\n\t\t\t\t'url' => 'https://www.pinterest.com/',\n\t\t\t\t'keywords' => [ 'pinterest', 'social', 'media' ],\n\t\t\t],\n\t\t];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Original Filter Hook Implementation in PHP\nDESCRIPTION: This snippet shows the original implementation of a filter hook named 'elementor/old/filter' before deprecation.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/deprecations/deprecated-filter-hook.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Name {\n\n\tfunction init( $args ): void {\n\t\t$value = apply_filters( 'elementor/old/filter', $value, $args );\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WordPress Packagist Repository in composer.json\nDESCRIPTION: This JSON snippet shows how to register the WordPress Packagist repository in the composer.json file. It's necessary for installing WordPress plugins and themes via Composer.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/composer.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"repositories\": [\n\t\t{\n\t\t\t\"type\": \"composer\",\n\t\t\t\"url\": \"https://wpackagist.org\",\n\t\t\t\"only\": [\n\t\t\t\t\"wpackagist-plugin/*\",\n\t\t\t\t\"wpackagist-theme/*\"\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Elementor Library Import Command\nDESCRIPTION: The basic command structure for importing Elementor templates using CLI. Requires a file path argument and accepts an optional returnType parameter.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/library-import.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor library import <file-path> [--returnType]\n```\n\n----------------------------------------\n\nTITLE: Connecting to Elementor Library via CLI in Bash\nDESCRIPTION: This command connects a WordPress site to the Elementor library using a specified user and connection token. It requires a WordPress user (ID, login name, or email) and an Elementor connection token.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/library-connect.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor library connect [--user] [--token]\n```\n\n----------------------------------------\n\nTITLE: Transforming Unit Control Values to CSS in PHP\nDESCRIPTION: Demonstrates how to use values from a Slider Control (Unit Control) in CSS selectors.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/selectors.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n'selectors' => [\n\t'{{WRAPPER}} .widget-container' => 'width: {{SIZE}}{{UNIT}};',\n],\n```\n\n----------------------------------------\n\nTITLE: Slider Control Return Value Structure\nDESCRIPTION: Demonstrates the array structure returned by the slider control, containing unit and size values.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/control-slider.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\n\t'unit' => '',\n\t'size' => '',\n]\n```\n\n----------------------------------------\n\nTITLE: Import Elementor Template with Return Type\nDESCRIPTION: Example of importing an Elementor template with the returnType parameter set to ids to return the imported items' IDs.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/library-import.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor library import path/to/elementor-12345-2022-03-04.json --returnType=ids\n```\n\n----------------------------------------\n\nTITLE: Activating Elementor Pro License\nDESCRIPTION: This Bash command uses the Elementor CLI to activate the Elementor Pro license after installation.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/composer.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor-pro license activate <license-key>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Render Attribute Implementation\nDESCRIPTION: Shows how to implement HTML attribute rendering in JavaScript context using addRenderAttribute() and getRenderAttributeString() methods within the content_template() function.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/rendering-html-attribute.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nprotected function content_template(): void {\n\t?>\n\t<#\n\tview.addRenderAttribute(\n\t\t'wrapper',\n\t\t{\n\t\t\t'id': 'custom-widget-id',\n\t\t\t'class': [ 'elementor-tab-title', settings.custom_class ],\n\t\t\t'role': settings.role,\n\t\t\t'aria-label': settings.name,\n\t\t}\n\t);\n\tview.addRenderAttribute(\n\t\t'inner',\n\t\t{\n\t\t\t'class': 'custom-widget-inner-class',\n\t\t\t'data-custom': 'custom-widget-information',\n\t\t}\n\t);\n\t#>\n\t<div {{{ view.getRenderAttributeString( 'wrapper' ) }}}>\n\t\t<div {{{ view.getRenderAttributeString( 'inner' ) }}}>\n\t\t\t...\n\t\t</div>\n\t</div>\n\t<?php\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Elementor Plugin via Composer\nDESCRIPTION: These Bash commands demonstrate how to install Elementor plugin using Composer. The first command installs the latest version, while the second allows installing a specific version.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/composer.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require wpackagist-plugin/elementor\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require wpackagist-plugin/elementor:3.25.0\n```\n\n----------------------------------------\n\nTITLE: Unregistering Dynamic Tags in Elementor PHP\nDESCRIPTION: PHP function that hooks into elementor/dynamic_tags/register to unregister specific dynamic tags using the dynamic tags manager. The function accepts the manager instance as a parameter and uses the unregister() method to remove tags by their names.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/managers/unregistering-dynamic-tags.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Unregister Elementor dynamic tags.\n *\n * @param \\Elementor\\Core\\DynamicTags\\Manager $dynamic_tags_manager Elementor dynamic tags manager.\n * @return void\n */\nfunction unregister_dynamic_tags( $dynamic_tags_manager ) {\n\n\t$dynamic_tags_manager->unregister( 'dynamic-tag-1' );\n\t$dynamic_tags_manager->unregister( 'dynamic-tag-2' );\n\n}\nadd_action( 'elementor/dynamic_tags/register', 'unregister_dynamic_tags' );\n```\n\n----------------------------------------\n\nTITLE: Original Function Example in PHP\nDESCRIPTION: Example of an original class with a method that needs to be deprecated in future versions.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/deprecations/deprecated-function.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Items {\n\n\tfunction add_item( $item_instance ): void {\n\t\t/* ... */\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Selective Content Import Example\nDESCRIPTION: Example showing how to import specific content types using the --include parameter.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/kit-import.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor kit import path/to/elementor-kit.zip --include=site-settings,content\n```\n\n----------------------------------------\n\nTITLE: Basic Kit Import Command Structure in Bash\nDESCRIPTION: The basic command structure for importing an Elementor kit, showing all possible parameters including file path, include options, condition overrides, and source type specification.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/kit-import.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor kit import <file-path> [--include] [--overrideConditions] [--sourceType]\n```\n\n----------------------------------------\n\nTITLE: Import Elementor Template Example\nDESCRIPTION: Example of importing a specific Elementor template JSON file using the CLI command.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/library-import.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor library import path/to/elementor-12345-2022-03-04.json\n```\n\n----------------------------------------\n\nTITLE: Using Values from Multiple Controls for CSS Properties in PHP\nDESCRIPTION: Demonstrates how to use values from multiple controls to set a single CSS property like aspect-ratio.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/selectors.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'aspect-ratio-width',\n\t[\n\t\t'label' => esc_html__( 'Aspect Ratio Width', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::NUMBER,\n\t]\n);\n\n$this->add_control(\n\t'aspect-ratio-height',\n\t[\n\t\t'label' => esc_html__( 'Aspect Ratio Height', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::NUMBER,\n\t\t'selectors' => [\n\t\t\t'{{WRAPPER}} .custom-container img' => 'aspect-ratio: {{aspect-ratio-width.VALUE}} / {{aspect-ratio-height.VALUE}};'\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Widget Structure\nDESCRIPTION: Shows the basic HTML structure of a widget with common attributes like id, class, role, and aria-label.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/rendering-html-attribute.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"\" class=\"\" role=\"\" aria-label=\"\"> ... </div>\n```\n\n----------------------------------------\n\nTITLE: Forced Elementor Library Sync in Bash\nDESCRIPTION: Command to force synchronization with Elementor's cloud library even when the system detects that the local library is already up to date.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/library-sync.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor library sync --force\n```\n\n----------------------------------------\n\nTITLE: Original Items Manager Registration Method\nDESCRIPTION: Initial implementation of the Items_Manager class with the register method requiring an ID parameter.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/deprecations/deprecated-argument.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Items_Manager {\n\n\tprivate $items;\n\n\tfunction register( $instance, $id = null ): void {\n\t\t$this->items[ $id ] = $instance;\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Elementor Footer Location in footer.php\nDESCRIPTION: Footer template implementation with Elementor footer location support and fallback to default template part.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/themes/migrating-themes-with-functions.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Elementor `footer` location\nif ( ! function_exists( 'elementor_theme_do_location' ) || ! elementor_theme_do_location( 'footer' ) ) {\n\tget_template_part( 'template-parts/footer' );\n}\n\nwp_footer();\n?>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Custom Installers\nDESCRIPTION: These Bash commands configure Composer to use custom installers, allowing Elementor Pro to be installed in the wp-content/plugins folder instead of the vendor folder.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/composer.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer config --no-plugins allow-plugins.composer/installers true\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require composer/installers\n```\n\n----------------------------------------\n\nTITLE: Adding Description to Elementor Control (PHP)\nDESCRIPTION: Demonstrates how to add a description to an Elementor control. The description appears below the field, providing additional information about the control.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/labels-description.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'unique-control-name',\n\t[\n\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t'label' => esc_html__( 'Control Label', 'textdomain' ),\n\t\t'description' => esc_html__( 'Short control description.', 'textdomain' ),\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Using the Elementor Library Import-Dir Command\nDESCRIPTION: The command syntax for importing multiple Elementor templates from a directory at once. It requires specifying the path to the directory containing the template JSON files.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/library-import-dir.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor library import-dir <dir-path>\n```\n\n----------------------------------------\n\nTITLE: Basic Elementor Library Sync Command in Bash\nDESCRIPTION: The basic command structure for syncing the Elementor template library from the cloud. It accepts optional flags for forcing the sync or applying it across a network of sites.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/library-sync.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor library sync [--force] [--network]\n```\n\n----------------------------------------\n\nTITLE: Final Code After Deprecation Cycle in PHP\nDESCRIPTION: The code after eight major versions where the deprecated function has been completely removed, leaving only the new function.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/deprecations/deprecated-function.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Items {\n\n\tfunction register( $item_instance ): void {\n\t\t/* ... */\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Basic Regular Control in Elementor PHP\nDESCRIPTION: This snippet demonstrates the basic structure for adding a regular control to an Elementor widget. It shows how to use the add_control() method with a control name and settings array.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/regular-control.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'control-name',\n\t[\n\t\t'label' => esc_html__( 'Heading', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Checking if a Term Contains a Value\nDESCRIPTION: Demonstrates how to check if a term contains a specific value using the 'contains' operator in advanced conditions, useful for substring matching.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/conditional-display.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n'conditions' => [\n\t'terms' => [\n\t\t[\n\t\t\t'name' => 'heading',\n\t\t\t'operator' => 'contains',\n\t\t\t'value' => 'elementor',\n\t\t],\n\t],\n],\n```\n\n----------------------------------------\n\nTITLE: Activating Elementor and Elementor Pro on Multisite Network\nDESCRIPTION: These Bash commands demonstrate how to activate Elementor and Elementor Pro plugins, and activate the Elementor Pro license across a multisite network using WP-CLI.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/composer.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nwp plugin activate elementor --network\n```\n\nLANGUAGE: bash\nCODE:\n```\nwp plugin activate elementor-pro --network\n```\n\nLANGUAGE: bash\nCODE:\n```\nwp site list --field=url | xargs -n1 -I % wp --url=% elementor-pro license activate <license-key>\n```\n\n----------------------------------------\n\nTITLE: Updating Action Hook Usage in PHP\nDESCRIPTION: Diff showing how addon developers should update their code to use the new action hook naming convention.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/deprecations/deprecated-action-hook.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction hook_callback() {\n\t/* ... */\n}\n- add_action( 'elementor/old/action', 'hook_callback' );\n+ add_action( 'elementor/new/action', 'hook_callback' );\n```\n\n----------------------------------------\n\nTITLE: Disabling Theme Stylesheet Loading in Hello Elementor\nDESCRIPTION: Code snippet demonstrates how to prevent the Hello Elementor theme from loading its default theme.min.css stylesheet using the hello_elementor_enqueue_theme_style filter hook. This should be implemented in a child theme's functions.php file.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hello-elementor-theme/hello_elementor_enqueue_theme_style.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'hello_elementor_enqueue_theme_style', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Installing Elementor Pro via Composer\nDESCRIPTION: These Bash commands demonstrate how to install Elementor Pro using Composer. The first command installs the latest version, while the second allows installing a specific version.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/composer.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require elementor/elementor-pro\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require elementor/elementor-pro:3.25.0\n```\n\n----------------------------------------\n\nTITLE: Loading Namespaced Functionality in Main Plugin File\nDESCRIPTION: Example of how to load namespaced functionality from a separate file in the main plugin file, which cannot contain namespaces due to WordPress limitations.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/addons/namespaces.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Elementor Test Addon\n * Description: Custom Elementor addon.\n * Plugin URI:  https://elementor.com/\n * Version:     1.0.0\n * Author:      Elementor Developer\n * Author URI:  https://developers.elementor.com/\n * Text Domain: elementor-test-addon\n *\n * Requires Plugins: elementor\n * Elementor tested up to: 3.25.0\n * Elementor Pro tested up to: 3.25.0\n */\n\nfunction elementor_test_addon() {\n\n\t// Load plugin file\n\trequire_once( __DIR__ . '/includes/plugin.php' );\n\n\t// Run the plugin\n\t\\Elementor_Test_Addon\\Plugin::instance();\n\n}\nadd_action( 'plugins_loaded', 'elementor_test_addon' );\n```\n\n----------------------------------------\n\nTITLE: Default Viewport Meta Tag Implementation in HTML\nDESCRIPTION: The default viewport meta tag implementation that sets the viewport width to device-width with initial scale of 1.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hello-elementor-theme/hello_elementor_viewport_content.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```\n\n----------------------------------------\n\nTITLE: Modifying Content Width using PHP Filter Hook in Hello Elementor Theme\nDESCRIPTION: Demonstrates how to use the hello_elementor_content_width filter hook to change the default content width from 800px to 1024px. This code should be added to the functions.php file of a child theme.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hello-elementor-theme/hello_elementor_content_width.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction custom_hello_elementor_content_width() {\n\treturn 1024;\n}\nadd_filter( 'hello_elementor_content_width', 'custom_hello_elementor_content_width' );\n```\n\n----------------------------------------\n\nTITLE: Displaying Hello Elementor Theme Badges in Markdown\nDESCRIPTION: This snippet shows how to display badges for the Hello Elementor Theme using Markdown syntax. It includes a tip badge and a warning badge with custom text and positioning.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hello-elementor-theme/index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Badge type=\"tip\" vertical=\"top\" text=\"Hello Elementor Theme\" /> <Badge type=\"warning\" vertical=\"top\" text=\"Basic\" />\n```\n\n----------------------------------------\n\nTITLE: 404 Page Condition Check in PHP\nDESCRIPTION: Implementation of check() method to determine if the current page is a 404 error page using WordPress is_404() function.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/theme-conditions/condition-check.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Condition extends \\ElementorPro\\Modules\\ThemeBuilder\\Conditions\\Condition_Base {\n\n\tpublic function check( $args ): bool {\n\t\treturn is_404();\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Browser Type Detection in PHP\nDESCRIPTION: Implementation of check() method to detect the user's browser type using PHP's get_browser() function, specifically checking for Firefox.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/theme-conditions/condition-check.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Condition extends \\ElementorPro\\Modules\\ThemeBuilder\\Conditions\\Condition_Base {\n\n\tpublic function check( $args ): bool {\n\t\t$browser = get_browser(null, true);\n\t\t$is_firefox = ( $browser['browser'] === 'Firefox' );\n\t\treturn $is_firefox;\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Elementor and Elementor Pro Plugins\nDESCRIPTION: These Bash commands use WP-CLI to activate the Elementor and Elementor Pro plugins after installation.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/composer.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwp plugin activate elementor\n```\n\nLANGUAGE: bash\nCODE:\n```\nwp plugin activate elementor-pro\n```\n\n----------------------------------------\n\nTITLE: Final Implementation After Deprecation Period in PHP\nDESCRIPTION: This snippet shows the final implementation after the deprecation period (eight major versions), where only the new filter hook is used.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/deprecations/deprecated-filter-hook.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Name {\n\n\tfunction init( $args ): void {\n\t\t$value = apply_filters( 'elementor/new/filter', $value, $args );\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Deactivating Elementor Pro License via Command Line\nDESCRIPTION: Command for deactivating an Elementor Pro license from the command line using WP-CLI. This command frees up a license activation that can then be used on another site.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/license-deactivate.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor-pro license deactivate\n```\n\n----------------------------------------\n\nTITLE: Advanced Group Control Fields Configuration\nDESCRIPTION: Advanced example showing how to customize inner controls using fields_options. Demonstrates setting custom labels and default values for border controls.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/group-control.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls() {\n\n\t\t$this->start_controls_section(\n\t\t\t'style_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Style', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_STYLE,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_group_control(\n\t\t\t\\Elementor\\Group_Control_Border::get_type(),\n\t\t\t[\n\t\t\t\t'name' => 'box_border',\n\t\t\t\t'label' => esc_html__( 'Box Border', 'textdomain' ),\n\t\t\t\t'fields_options' => [\n\t\t\t\t\t'border' => [\n\t\t\t\t\t\t'label' => esc_html__( 'Box Border Type', 'textdomain' ),\n\t\t\t\t\t\t'default' => 'solid',\n\t\t\t\t\t],\n\t\t\t\t\t'width' => [\n\t\t\t\t\t\t'label' => esc_html__( 'Box Border Width', 'textdomain' ),\n\t\t\t\t\t\t'default' => [\n\t\t\t\t\t\t\t'top' => '1',\n\t\t\t\t\t\t\t'right' => '2',\n\t\t\t\t\t\t\t'bottom' => '3',\n\t\t\t\t\t\t\t'left' => '4',\n\t\t\t\t\t\t\t'isLinked' => false,\n\t\t\t\t\t\t],\n\t\t\t\t\t],\n\t\t\t\t\t'color' => [\n\t\t\t\t\t\t'label' => esc_html__( 'Box Border Color', 'textdomain' ),\n\t\t\t\t\t\t'default' => '#D4D4D4',\n\t\t\t\t\t],\n\t\t\t\t],\n\t\t\t\t'selector' => '{{WRAPPER}} .some-box',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing HTTP with HTTPS in Elementor URLs\nDESCRIPTION: Example of using the replace-urls command to change all URLs from HTTP to HTTPS protocol for an Elementor site.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/replace-urls.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor replace-urls http://elementor.com https://elementor.com\n```\n\n----------------------------------------\n\nTITLE: Preventing Elementor Theme Location Registration in PHP\nDESCRIPTION: This code snippet demonstrates how to use the 'hello_elementor_register_elementor_locations' filter hook to prevent the Hello Elementor theme from registering Elementor theme locations. It should be added to the functions.php file of a child theme.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hello-elementor-theme/hello_elementor_register_elementor_locations.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'hello_elementor_register_elementor_locations', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Displaying Elementor Core Badge in Markdown\nDESCRIPTION: This code snippet shows how to display a 'tip' badge for Elementor Core in Markdown format. It uses the Badge component with specific attributes.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor/index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Badge type=\"tip\" vertical=\"top\" text=\"Elementor Core\" />\n```\n\n----------------------------------------\n\nTITLE: Embed Page Condition Check in PHP\nDESCRIPTION: Implementation of check() method to determine if the current page is an embed page using WordPress is_embed() function.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/theme-conditions/condition-check.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Condition extends \\ElementorPro\\Modules\\ThemeBuilder\\Conditions\\Condition_Base {\n\n\tpublic function check( $args ): bool {\n\t\treturn is_embed();\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Term Relations with OR Operator\nDESCRIPTION: Demonstrates how to use the OR logical operator in term relations with the advanced conditions, allowing more flexibility in condition combinations.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/conditional-display.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n'conditions' => [\n\t'relation' => 'or',\n\t'terms' => [\n\t\t[\n\t\t\t'name' => 'background',\n\t\t\t'operator' => '!==',\n\t\t\t'value' => '',\n\t\t],\n\t\t[\n\t\t\t'name' => 'border',\n\t\t\t'operator' => '!==',\n\t\t\t'value' => '',\n\t\t],\n\t],\n],\n```\n\n----------------------------------------\n\nTITLE: Multi Component Elementor Addon Structure\nDESCRIPTION: Shows the complete recommended folder structure for complex Elementor addons, including organized asset directories and component-specific folders.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/addons/file-folder-structure.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nelementor-test-addon/\n|\n├─ assets/\n|  ├─ images/\n|  ├─ css/\n|  └─ js/\n|\n├─ includes/\n|  ├─ controls/\n|  ├─ dynamic-tags/\n|  ├─ finder/\n|  └─ widgets/\n|\n└─ elementor-test-addon.php\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Control Methods in Elementor\nDESCRIPTION: Comprehensive implementation of a custom control with additional methods for default settings, default values, and resource enqueueing, providing more customization options.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/controls/control-structure.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Control extends \\Elementor\\Base_Control {\n\n\tpublic function get_type(): string {}\n\n\tprotected function get_default_settings(): array {}\n\n\tpublic function get_default_value(): string {}\n\n\tpublic function content_template(): void {}\n\n\tpublic function enqueue(): void {}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Checking Container Experiment Status in Elementor CLI\nDESCRIPTION: This example demonstrates how to check the status of the 'container' experiment using the Elementor CLI. The command will return whether the 'container' experiment is active or inactive.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/cli/experiments-status.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwp elementor experiments status container\n```\n\n----------------------------------------\n\nTITLE: Disabling WooCommerce Support in Hello Elementor Theme\nDESCRIPTION: Code to prevent the theme from registering WooCommerce features using a filter hook. This should be added to the child theme's functions.php file.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hello-elementor-theme/hello_elementor_add_woocommerce_support.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'hello_elementor_add_woocommerce_support', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Invalid Cross-Level Conditional Display Example\nDESCRIPTION: Shows an unsupported implementation where inner repeater controls try to depend on main level controls, which is not allowed in Elementor.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/conditional-display.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'display_content',\n\t[\n\t\t'label' => esc_html__( 'Display Content', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::SWITCHER,\n\t\t'label_on' => esc_html__( 'Yes', 'textdomain' ),\n\t\t'label_off' => esc_html__( 'No', 'textdomain' ),\n\t\t'return_value' => 'yes',\n\t\t'default' => 'yes',\n\t]\n);\n\n$this->add_control(\n\t'list',\n\t[\n\t\t'label' => esc_html__( 'Repeater List', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::REPEATER,\n\t\t'fields' => [\n\t\t\t[\n\t\t\t\t'name' => 'list_title',\n\t\t\t\t'label' => esc_html__( 'Title', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::TEXT,\n\t\t\t],\n\t\t\t[\n\t\t\t\t'name' => 'list_content',\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::WYSIWYG,\n\t\t\t\t'condition' => [\n\t\t\t\t\t'display_content' => 'yes',\n\t\t\t\t],\n\t\t\t],\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Main Plugin Registration for Elementor Emoji Control\nDESCRIPTION: Main plugin file that registers the custom EmojiOneArea control and test widget with Elementor. It hooks into Elementor's control and widget registration hooks to add the custom components.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/controls/complex-example.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Elementor Emoji One Area Control\n * Description: Add emojis to the content using Elementor Emoji One Area control.\n * Plugin URI:  https://elementor.com/\n * Version:     1.0.0\n * Author:      Elementor Developer\n * Author URI:  https://developers.elementor.com/\n * Text Domain: elementor-emojionearea-control\n *\n * Requires Plugins: elementor\n * Elementor tested up to: 3.25.0\n * Elementor Pro tested up to: 3.25.0\n */\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Register Emoji One Area Control.\n *\n * Include control file and register control class.\n *\n * @since 1.0.0\n * @param \\Elementor\\Controls_Manager $controls_manager Elementor controls manager.\n * @return void\n */\nfunction register_emojionearea_control( $controls_manager ) {\n\n\trequire_once( __DIR__ . '/controls/emojionearea.php' );\n\n    $controls_manager->register( new \\Elementor_EmojiOneArea_Control() );\n\n}\nadd_action( 'elementor/controls/register', 'register_emojionearea_control' );\n\n/**\n * Register Test Widget.\n *\n * Include widget file and register widget class.\n *\n * @since 1.0.0\n * @param \\Elementor\\Widgets_Manager $widgets_manager Elementor widgets manager.\n * @return void\n */\nfunction register_test_widget( $widgets_manager ) {\n\n\trequire_once( __DIR__ . '/widgets/test-widget.php' );\n\n\t$widgets_manager->register( new \\Elementor_Test_Widget() );\n\n}\nadd_action( 'elementor/widgets/register', 'register_test_widget' );\n```\n\n----------------------------------------\n\nTITLE: Modified Viewport Meta Tag Result in HTML\nDESCRIPTION: The resulting viewport meta tag HTML after applying the custom filter hook modifications.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hello-elementor-theme/hello_elementor_viewport_content.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"viewport\" content=\"width=100vw, height=100vh, user-scalable=no\">\n```\n\n----------------------------------------\n\nTITLE: Transforming Dimensions Control Values to CSS in PHP\nDESCRIPTION: Shows how to use values from a Dimensions Control in CSS selectors for margin properties.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/selectors.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n'selectors' => [\n\t'{{WRAPPER}} .widget-container' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',\n],\n```\n\n----------------------------------------\n\nTITLE: Setting CSS Dependencies in Elementor Widget Class\nDESCRIPTION: This code snippet shows how to set CSS dependencies for an Elementor widget by implementing the get_style_depends() method in the widget class. It returns an array of registered style handles.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/scripts-styles/widget-styles.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tpublic function get_style_depends(): array {\n\t\treturn [ 'widget-style-1', 'widget-style-2' ];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic Warning Badge in Markdown\nDESCRIPTION: This code snippet demonstrates how to display a 'warning' badge with 'Basic' text in Markdown format. It uses the Badge component with specific attributes.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor/index.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Badge type=\"warning\" vertical=\"top\" text=\"Basic\" />\n```\n\n----------------------------------------\n\nTITLE: Adding a Color Control to Elementor Widget PHP\nDESCRIPTION: This snippet demonstrates how to implement a color control in an Elementor widget. It shows how to set a label and default color value for the control.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/regular-control.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Widget extends \\Elementor\\Widget_Base {\n\n\tprotected function register_controls(): void {\n\n\t\t$this->start_controls_section(\n\t\t\t'content_section',\n\t\t\t[\n\t\t\t\t'label' => esc_html__( 'Content', 'textdomain' ),\n\t\t\t\t'tab' => \\Elementor\\Controls_Manager::TAB_CONTENT,\n\t\t\t]\n\t\t);\n\n\t\t$this->add_control(\n\t\t\t'text_color',\n\t\t\t[\n\t\t\t\t'type' => \\Elementor\\Controls_Manager::COLOR,\n\t\t\t\t'label' => esc_html__( 'Text Color', 'textdomain' ),\n\t\t\t\t'default' => '#fefefe',\n\t\t\t]\n\t\t);\n\n\t\t$this->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Unoptimized Widget Markup Structure in HTML\nDESCRIPTION: Shows the default unoptimized widget markup with two wrapper div elements used by Elementor.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-inner-wrapper.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"elementor-widget elementor-widget-{widget-name}\">\n\t<div class=\"elementor-widget-container\">\n\t\t...\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Feature-Based Widget Inner Wrapper Configuration in PHP\nDESCRIPTION: PHP method to determine wrapper structure based on feature activation status.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/widgets/widget-inner-wrapper.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function has_widget_inner_wrapper(): bool {\n\treturn ! \\Elementor\\Plugin::$instance->experiments->is_feature_active( 'e_optimized_markup' );\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown File Structure\nDESCRIPTION: Basic markdown structure of the documentation page showing headers, badges, and content organization.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/getting-started/usage.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# The Docs Website\n\n<Badge type=\"tip\" vertical=\"top\" text=\"Elementor Core\" /> <Badge type=\"warning\" vertical=\"top\" text=\"Basic\" />\n```\n\n----------------------------------------\n\nTITLE: Registering Controls for Custom Action in Elementor Pro\nDESCRIPTION: Demonstrates the basic structure for registering controls in a custom action class. The register_settings_section() method is used to add controls to the form widget.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/form-actions/action-controls.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Elementor_Test_Action extends \\ElementorPro\\Modules\\Forms\\Classes\\Action_Base {\n\n\tprotected function register_settings_section( $widget ): void {\n\n\t\t$widget->start_controls_section();\n\n\t\t$widget->add_control();\n\n\t\t$widget->add_control();\n\n\t\t$widget->add_control();\n\n\t\t$widget->end_controls_section();\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Elementor Widget and Dependencies in PHP\nDESCRIPTION: Shows how to register an Elementor widget and its JavaScript dependencies. This includes registering the widget class and enqueueing the necessary scripts.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/frontend-available.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Register Elementor test widget.\n *\n * Include widget file and register widget class.\n *\n * @since 1.0.0\n * @param \\Elementor\\Widgets_Manager $widgets_manager Elementor widgets manager.\n * @return void\n */\nfunction elementor_test_widget_registration( $widgets_manager ) {\n\n\trequire_once( __DIR__ . '/widgets/test-widget.php' );\n\n\t$widgets_manager->register( new \\Elementor_Test_Widget() );\n\n}\nadd_action( 'elementor/widgets/register', 'elementor_test_widget_registration' );\n\n/**\n * Register Elementor test widget dependencies.\n *\n * Registers all the scripts and styles to be enqueued later.\n *\n * @since 1.0.0\n * @return void\n */\nfunction elementor_test_widget_dependencies() {\n\n\twp_register_script(\n\t\t'test-widget-handler',\n\t\tplugins_url( 'js/test-widget.js', __FILE__ ),\n\t\t[ 'elementor-frontend' ] // Dependent on 'elementor-frontend' script.\n\t);\n\n}\nadd_action( 'wp_enqueue_scripts', 'elementor_test_widget_dependencies' );\n```\n\n----------------------------------------\n\nTITLE: Original Choose Control for Text Alignment in PHP\nDESCRIPTION: Shows the original implementation of a Choose control for text alignment using physical CSS properties in Elementor.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/editor-controls/selectors-dictionary.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->add_control(\n\t'text-align',\n\t[\n\t\t'label' => esc_html__( 'Alignment', 'textdomain' ),\n\t\t'type' => \\Elementor\\Controls_Manager::CHOOSE,\n\t\t'default' => 'center',\n\t\t'options' => [\n\t\t\t'left' => [\n\t\t\t\t'title' => esc_html__( 'Left', 'textdomain' ),\n\t\t\t\t'icon' => 'eicon-text-align-left',\n\t\t\t],\n\t\t\t'center' => [\n\t\t\t\t'title' => esc_html__( 'Center', 'textdomain' ),\n\t\t\t\t'icon' => 'eicon-text-align-center',\n\t\t\t],\n\t\t\t'right' => [\n\t\t\t\t'title' => esc_html__( 'Right', 'textdomain' ),\n\t\t\t\t'icon' => 'eicon-text-align-right',\n\t\t\t],\n\t\t],\n\t\t'selectors' => [\n\t\t\t'{{WRAPPER}} .some-class' => 'text-align: {{VALUE}};',\n\t\t],\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Validating Email Field in Elementor Pro Form\nDESCRIPTION: This snippet demonstrates how to validate an email field in an Elementor Pro form. It checks if the email is in a valid format using the is_email() function and adds an error message if it's not.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hooks/form-validation.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction elementor_form_email_field_validation( $field, $record, $ajax_handler ) {\n\t// Validate email format\n\tif ( ! is_email( $field['value'] ) ) {\n\t\t$ajax_handler->add_error( $field['id'], esc_html__( 'Invalid email address, it must be in xx@xx.xx format.', 'textdomain' ) );\n\t\treturn;\n\t}\n\n\t// Do your validation here.\n}\nadd_action( 'elementor_pro/forms/validation/email', 'elementor_form_email_field_validation', 10, 3 );\n```\n\n----------------------------------------\n\nTITLE: Setting WordPress Debug Mode for Tracking Deprecations in PHP\nDESCRIPTION: This example shows how to enable WordPress debug mode by adding constants to the wp-config.php file. When WP_DEBUG or ELEMENTOR_DEBUG is set to true, soft deprecated code will show PHP notices/warnings, and hard deprecated code will trigger PHP errors.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/deprecations/index.md#2025-04-20_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nWP_DEBUG = true\n```\n\n----------------------------------------\n\nTITLE: HTML Description Meta Tag Structure\nDESCRIPTION: Shows the HTML structure of the description meta tag that is automatically added by the Hello Elementor theme to improve SEO. This tag is added to the head section on singular pages with excerpts.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/hello-elementor-theme/hello_elementor_add_description_meta_tag.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"description\" content=\"...\" />\n```\n\n----------------------------------------\n\nTITLE: Markdown Header with Badges\nDESCRIPTION: Header section defining global styles documentation with badges indicating it's part of Elementor Core and is an advanced topic.\nSOURCE: https://github.com/elementor/elementor-developers-docs/blob/master/src/data-structure/global-styles.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Global Styles\n\n<Badge type=\"tip\" vertical=\"top\" text=\"Elementor Core\" /> <Badge type=\"warning\" vertical=\"top\" text=\"Advanced\" />\n\nWIP\n```"
  }
]