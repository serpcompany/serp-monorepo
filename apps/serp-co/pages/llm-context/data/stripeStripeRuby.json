[
  {
    "owner": "stripe",
    "repo": "stripe-ruby",
    "content": "TITLE: Basic Stripe API Usage\nDESCRIPTION: Basic examples of configuring the API key and performing customer operations.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/README.md#2025-04-20_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'stripe'\nStripe.api_key = 'sk_test_...'\n\n# list customers\nStripe::Customer.list()\n\n# retrieve single customer\nStripe::Customer.retrieve('cus_123456789')\n```\n\n----------------------------------------\n\nTITLE: Per-request Configuration Examples\nDESCRIPTION: Examples of making API requests with per-request configuration for keys, accounts and API versions.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/README.md#2025-04-20_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"stripe\"\n\nStripe::Customer.list(\n  {},\n  {\n    api_key: 'sk_test_...',\n    stripe_account: 'acct_...',\n    stripe_version: '2018-02-28',\n  }\n)\n\nStripe::Customer.retrieve(\n  'cus_123456789',\n  {\n    api_key: 'sk_test_...',\n    stripe_account: 'acct_...',\n    stripe_version: '2018-02-28',\n  }\n)\n\nStripe::Customer.retrieve(\n  {\n    id: 'cus_123456789',\n    expand: %w(balance_transaction)\n  },\n  {\n    stripe_version: '2018-02-28',\n    api_key: 'sk_test_...',\n  }\n)\n\nStripe::Customer.capture(\n  'cus_123456789',\n  {},\n  {\n    stripe_version: '2018-02-28',\n    api_key: 'sk_test_...',\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Stripe Ruby Gem\nDESCRIPTION: Commands for installing the Stripe gem either directly or building from source.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngem install stripe\n\ngem build stripe.gemspec\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundler for Stripe\nDESCRIPTION: Example Gemfile configuration showing secure HTTPS source and Stripe gem inclusion.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nsource 'https://rubygems.org'\n\ngem 'rails'\ngem 'stripe'\n```\n\n----------------------------------------\n\nTITLE: Accessing Resource Properties\nDESCRIPTION: Examples showing different ways to access Stripe resource properties using indexers and accessors.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/README.md#2025-04-20_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ncustomer = Stripe::Customer.retrieve('cus_123456789')\nputs customer['id']\nputs customer.id\n\ncustomer = Stripe::Customer.retrieve('cus_123456789')\nputs customer['unknown'] # nil\nputs customer.unknown # raises NoMethodError\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Objects\nDESCRIPTION: Example showing how to access response metadata like status codes and headers.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/README.md#2025-04-20_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ncustomer = Stripe::Customer.retrieve('cus_123456789')\n\nprint(customer.last_response.http_status) # to retrieve status code\nprint(customer.last_response.http_headers) # to retrieve headers\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Requests with Stripe Ruby SDK\nDESCRIPTION: Demonstrates how to send custom requests to undocumented or beta APIs using the raw_request method on StripeClient. This method allows bypassing the library's predefined method definitions and specifying request details directly.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/README.md#2025-04-20_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Stripe::StripeClient.new(...)\nresp = client.raw_request(:post, \"/v1/beta_endpoint\", {param: 123}, {stripe_version: \"2022-11-15; feature_beta=v3\"})\n\n# (Optional) resp is a StripeResponse. You can use `Stripe.deserialize` to get a StripeObject.\ndeserialized_resp = client.deserialize(resp.http_body)\n```\n\n----------------------------------------\n\nTITLE: Adding Beta Version Header in Stripe Ruby SDK\nDESCRIPTION: Shows how to add a beta version header to Stripe API requests using the Stripe.add_beta_version method. This is necessary when using beta features that require a specific Stripe-Version header.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/README.md#2025-04-20_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nStripe.add_beta_version(\"feature_beta\", \"v3\")\n```\n\n----------------------------------------\n\nTITLE: Instrumentation Example\nDESCRIPTION: Example of using Stripe's instrumentation hooks to monitor API requests.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/README.md#2025-04-20_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nStripe::Instrumentation.subscribe(:request_end) do |request_event|\n  # Filter out high-cardinality ids from `path`\n  path_parts = request_event.path.split(\"/\").drop(2)\n  resource = path_parts.map { |part| part.match?(/\\A[a-z_]+\\z/) ? part : \":id\" }.join(\"/\")\n\n  tags = {\n    method: request_event.method,\n    resource: resource,\n    code: request_event.http_status,\n    retries: request_event.num_retries\n  }\n  StatsD.distribution('stripe_request', request_event.duration, tags: tags)\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Beta Version of Stripe Ruby SDK\nDESCRIPTION: Demonstrates how to install a specific beta version of the Stripe Ruby SDK using the gem install command. This is useful for testing beta features before they reach the stable phase.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/README.md#2025-04-20_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ngem install stripe -v 7.1.0.pre.beta.2\n```\n\n----------------------------------------\n\nTITLE: Searching Stripe Resources in Ruby\nDESCRIPTION: Adds support for the `search` method on various Stripe resources including Charge, Customer, Invoice, PaymentIntent, Price, Product, and Subscription. This allows performing searches on these resources.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_20\n\nLANGUAGE: Ruby\nCODE:\n```\nCharge.search\nCustomer.search\nInvoice.search\nPaymentIntent.search\nPrice.search\nProduct.search\nSubscription.search\n```\n\n----------------------------------------\n\nTITLE: Incrementing PaymentIntent Authorization in Ruby\nDESCRIPTION: Adds support for the `increment_authorization` method on the PaymentIntent resource. This allows incrementing the authorization amount on a PaymentIntent.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: Ruby\nCODE:\n```\nPaymentIntent.increment_authorization\n```\n\n----------------------------------------\n\nTITLE: Expiring Checkout Session in Ruby\nDESCRIPTION: Adds support for the `expire` method on the Checkout.Session resource. This allows manually expiring a Checkout Session.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_24\n\nLANGUAGE: Ruby\nCODE:\n```\nCheckout::Session.expire\n```\n\n----------------------------------------\n\nTITLE: Verifying Microdeposits for PaymentIntent in Ruby\nDESCRIPTION: Adds support for the `verify_microdeposits` method on the PaymentIntent resource. This allows verifying microdeposits for a PaymentIntent.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_22\n\nLANGUAGE: Ruby\nCODE:\n```\nPaymentIntent.verify_microdeposits\n```\n\n----------------------------------------\n\nTITLE: Verifying Microdeposits for SetupIntent in Ruby\nDESCRIPTION: Adds support for the `verify_microdeposits` method on the SetupIntent resource. This allows verifying microdeposits for a SetupIntent.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_23\n\nLANGUAGE: Ruby\nCODE:\n```\nSetupIntent.verify_microdeposits\n```\n\n----------------------------------------\n\nTITLE: Listing Customer Payment Methods in Ruby\nDESCRIPTION: Adds support for the `list_payment_methods` method on the Customer resource. This allows retrieving a list of payment methods for a customer.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_25\n\nLANGUAGE: Ruby\nCODE:\n```\nCustomer.list_payment_methods\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer Payment Method in Ruby\nDESCRIPTION: Adds support for the `retrieve_payment_method` method on the Customer resource. This allows retrieving a specific payment method for a customer.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\nCustomer.retrieve_payment_method\n```\n\n----------------------------------------\n\nTITLE: Canceling Refund in Ruby\nDESCRIPTION: Adds support for the `cancel` method on the Refund resource. This allows canceling a refund.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\nRefund.cancel\n```\n\n----------------------------------------\n\nTITLE: Applying Customer Balance to PaymentIntent in Ruby\nDESCRIPTION: Adds support for the `apply_customer_balance` method on the PaymentIntent resource. This allows applying a customer's cash balance to a PaymentIntent.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nPaymentIntent.apply_customer_balance\n```\n\n----------------------------------------\n\nTITLE: Canceling Terminal Reader Action in Ruby\nDESCRIPTION: Adds support for the `cancel_action` method on the Terminal.Reader resource. This allows canceling an ongoing action on a terminal reader.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: Ruby\nCODE:\n```\nTerminal::Reader.cancel_action\n```\n\n----------------------------------------\n\nTITLE: Processing PaymentIntent on Terminal Reader in Ruby\nDESCRIPTION: Adds support for the `process_payment_intent` method on the Terminal.Reader resource. This allows processing a PaymentIntent on a terminal reader.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_17\n\nLANGUAGE: Ruby\nCODE:\n```\nTerminal::Reader.process_payment_intent\n```\n\n----------------------------------------\n\nTITLE: Processing SetupIntent on Terminal Reader in Ruby\nDESCRIPTION: Adds support for the `process_setup_intent` method on the Terminal.Reader resource. This allows processing a SetupIntent on a terminal reader.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_18\n\nLANGUAGE: Ruby\nCODE:\n```\nTerminal::Reader.process_setup_intent\n```\n\n----------------------------------------\n\nTITLE: Listing Computed Upfront Line Items for Quote in Ruby\nDESCRIPTION: Adds support for the `list_computed_upfront_line_items` method on the Quote resource. This allows retrieving a list of computed upfront line items for a quote.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_26\n\nLANGUAGE: Ruby\nCODE:\n```\nQuote.list_computed_upfront_line_items\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Cash Balance in Ruby\nDESCRIPTION: Adds support for the `fund_cash_balance` test helper method on the Customer resource. This allows testing of funding a customer's cash balance.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\nCustomer.fund_cash_balance\n```\n\n----------------------------------------\n\nTITLE: Expiring Refund in Ruby Test Environment\nDESCRIPTION: Adds support for the `expire` test helper method on the Refund resource. This allows simulating the expiration of a refund in test mode.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\nRefund.expire\n```\n\n----------------------------------------\n\nTITLE: Setting Terminal Reader Display in Ruby\nDESCRIPTION: Adds support for the `set_reader_display` method on the Terminal.Reader resource. This allows setting the display on a terminal reader.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_19\n\nLANGUAGE: Ruby\nCODE:\n```\nTerminal::Reader.set_reader_display\n```\n\n----------------------------------------\n\nTITLE: Initializing Stripe API Version Configuration in Ruby\nDESCRIPTION: Example showing how to set the API version when initializing the Stripe Ruby SDK. This change was part of v9.0.0 which pins the API version by default.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'stripe'\nStripe.api_key = \"sk_test_...\"\nStripe.api_version = '2020-08-27'\n```\n\n----------------------------------------\n\nTITLE: Updated Balance Retrieve Method Call in Ruby\nDESCRIPTION: Shows the correct way to call the Balance retrieve method with both params and opts arguments after breaking changes in v13.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nparams = { expand: [\"available\"] }\nopts = { stripe_account: \"acct_123\" }\n\n# ❌ No longer works\nStripe::Balance.retrieve(opts)\n\n# ✅ Correct way to call retrieve method\nStripe::Balance.retrieve(params, opts)\n```\n\n----------------------------------------\n\nTITLE: APIResource Request Migration in Ruby\nDESCRIPTION: Demonstrates how to migrate from the deprecated APIResource.request to using StripeClient#raw_request.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# Instead of\nStripe::APIResource.request(:get, \"/v1/endpoint\", params, opts)\n\n# do\nclient = Stripe::StripeClient.new(...)\nresp = client.raw_request(:get, \"/v1/endpoint\", params: params, opts: opts)\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Hash Map Response Fields in Ruby\nDESCRIPTION: Example showing how to access metadata fields with valid and invalid variable names using hash map accessor syntax\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nc = client.v1.customers.retrieve(\"cus_123\")\nc.metadata[\"invalid-variable-name!\"]\nc.metadata[\"valid_key_name_works_too\"]\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Response Example\nDESCRIPTION: Example showing how to retrieve raw API response data from a Stripe resource object using the last_response property\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nlast_response\n```\n\n----------------------------------------\n\nTITLE: Request Instrumentation Example\nDESCRIPTION: Added in version 5.9.0, shows usage of request instrumentation callback functionality.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_28\n\nLANGUAGE: Ruby\nCODE:\n```\nlist_usage_record_summaries\n```\n\n----------------------------------------\n\nTITLE: Example Webhook Signature Computation Method Change\nDESCRIPTION: From version 5.19.0, exposes the Stripe::Webhook.compute_signature method publicly for computing webhook signatures.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_27\n\nLANGUAGE: Ruby\nCODE:\n```\nStripe::Webhook.compute_signature\n```\n\n----------------------------------------\n\nTITLE: Running Stripe Mock for Testing\nDESCRIPTION: Shows the command to install and run stripe-mock, which is required for the test suite. This tool simulates the Stripe API for testing purposes.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/README.md#2025-04-20_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ngo install github.com/stripe/stripe-mock@latest\nstripe-mock\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Stripe Ruby SDK\nDESCRIPTION: Demonstrates various commands for running tests in the Stripe Ruby SDK project, including running all tests, a single test suite, or a specific test.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/README.md#2025-04-20_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\njust test\n# or: bundle exec rake test\n\nbundle exec ruby -Ilib/ test/stripe/util_test.rb\n\nbundle exec ruby -Ilib/ test/stripe/util_test.rb -n /should.convert.names.to.symbols/\n```\n\n----------------------------------------\n\nTITLE: Running Linter for Stripe Ruby SDK\nDESCRIPTION: Shows the command to run the linter (RuboCop) on the Stripe Ruby SDK project, which helps maintain code quality and consistency.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/README.md#2025-04-20_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\njust lint\n# or: bundle exec rubocop\n```\n\n----------------------------------------\n\nTITLE: Updating CA Certificates for Stripe Ruby SDK\nDESCRIPTION: Demonstrates the command to update the bundled CA certificates in the Stripe Ruby SDK project, which are sourced from the Mozilla cURL release.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/README.md#2025-04-20_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\njust update-certs\n# or: bundle exec rake update_certs\n```\n\n----------------------------------------\n\nTITLE: Running Examples with RUBYLIB in stripe-ruby\nDESCRIPTION: Command for running examples by setting the RUBYLIB environment variable to include the library path. This ensures the example can find the required stripe-ruby library files.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/examples/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nRUBYLIB=../lib ruby your_example.rb\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Webhook Handler Example in stripe-ruby\nDESCRIPTION: Example of running a specific webhook handler example file from the examples directory with the correct RUBYLIB path.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/examples/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRUBYLIB=../lib ruby thinevent_webhook_handler.rb\n```\n\n----------------------------------------\n\nTITLE: APIResource Execute Request Parameter Changes in Ruby\nDESCRIPTION: Shows the updated parameter structure for APIResource.execute_resource_request including the new base_address parameter.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nAPIResource.execute_resource_request(method, url, params = {}, opts = {}, usage = [])\n# is now, with base_address being one of [:api, :files, :connect, :meter_events]\nAPIResource.execute_resource_request(method, url, base_address = :api, params = {}, opts = {}, usage = [])\n```\n\n----------------------------------------\n\nTITLE: APIRequestor Execute Request Changes in Ruby\nDESCRIPTION: Demonstrates the changes to the execute_request method parameters and return values in the APIRequestor class.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# Before\nobj, api_key = StripeClient.execute_request(method, path, api_base: nil,\n                                            api_key: nil, headers: {}, params: {}, usage: [])\n\n# is now, with base_address being one of [:api, :files, :connect, :meter_events]\n\nobj, opts = APIRequestor.execute_request(method, path, base_address,\n                                        params: {}, opts: {}, usage: [])\nputs(opts) # will output {api_key: \"sk_test_123\", stripe_account: \"acct_123\"}\n```\n\n----------------------------------------\n\nTITLE: Tax ID Resource URL Update\nDESCRIPTION: New path format for TaxId resource operations, changing from customer-scoped to top-level endpoint\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\n\"/v1/tax_ids/{id}\"\n```\n\n----------------------------------------\n\nTITLE: Prior Customer-Scoped Tax ID Path\nDESCRIPTION: Previous format of TaxId resource URL that was customer-scoped\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\n\"/v1/customers/{customer}/tax_ids/{id}\"\n```\n\n----------------------------------------\n\nTITLE: Legacy Subscription Delete Method Example in Ruby\nDESCRIPTION: Deprecated method for deleting a Stripe subscription, showing both the old and new approach as part of v8.0.0 changes.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# before\nStripe::Subscription::delete(\"sub_12345\")\n\n# after\nStripe::Subscription::cancel(\"sub_12345\")\n```\n\n----------------------------------------\n\nTITLE: Refund Update Pattern in Ruby\nDESCRIPTION: Example showing the deprecated save() method versus the recommended static update() method for modifying Stripe refunds as of v8.0.0.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# before\nrefund = Stripe::Refund.retrieve(\"re_123\")\nrefund.description = \"Refund description\"\nrefund.save\n\n# after\nStripe::Refund.update(\"re_123\", description: \"Refund description\")\n```\n\n----------------------------------------\n\nTITLE: Connection Settings Configuration\nDESCRIPTION: Fix from version 5.7.1 correcting the misnamed connection_base= setter to be named connect_base=.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#2025-04-20_snippet_29\n\nLANGUAGE: Ruby\nCODE:\n```\nconnect_base=\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom OpenAPI Specification and Fixtures for Stripe Ruby SDK Testing\nDESCRIPTION: This snippet outlines the process of using custom OpenAPI specification and fixtures files for testing the Stripe Ruby SDK. It specifies the required file names, format, and explains how the test suite uses these files to start a stripe-mock process on a random port.\nSOURCE: https://github.com/stripe/stripe-ruby/blob/master/test/openapi/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Using custom OpenAPI specification and fixtures files\n\nYou can place custom OpenAPI specification and fixtures files in this\ndirectory. The files must be in JSON format, and must be named `spec3.json`\nand `fixtures3.json` respectively.\n\nIf those files are present, the test suite will start its own stripe-mock\nprocess on a random available port. In order for this to work, `stripe-mock`\nmust be on the `PATH` in the environment used to run the test suite.\n```"
  }
]