[
  {
    "owner": "railwayapp",
    "repo": "docs",
    "content": "TITLE: Dockerfile Configuration for FastAPI Deployment\nDESCRIPTION: Dockerfile configuration for deploying a FastAPI application on Railway. It uses Python 3 Alpine as the base image, sets up the working directory, installs dependencies from requirements.txt, and configures the Hypercorn server to run the FastAPI application.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/fastapi.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use the Python 3 alpine official image\n# https://hub.docker.com/_/python\nFROM python:3-alpine\n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Copy local code to the container image.\nCOPY . .\n\n# Install project dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Run the web service on container startup.\nCMD [\"hypercorn\", \"main:app\", \"--bind\", \"::\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing FastAPI Application with MongoDB Connection\nDESCRIPTION: A Python FastAPI application that connects to a MongoDB replica set, providing endpoints for health checks, data insertion, and retrieval. Uses motor as the async MongoDB driver and includes random string generation for test data.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/deploy-and-monitor-mongo.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, HTTPException\nfrom motor.motor_asyncio import AsyncIOMotorClient\nimport os\nfrom typing import List, Dict\nimport random\nimport string\n\napp = FastAPI()\n\nprint(os.getenv(\"MONGO_URI\"))\n\n# MongoDB client (motor)\nclient = AsyncIOMotorClient(os.getenv(\"MONGO_URI\"))\ndb = client[os.getenv(\"DATABASE_NAME\")]\ncollection = db[os.getenv(\"COLLECTION_NAME\")]\n\ndef generate_random_string(length=8):\n    letters = string.ascii_lowercase\n    print(\"generated random string\")\n    return ''.join(random.choice(letters) for i in range(length))\n\n@app.get(\"/\")\nasync def set_item():\n    random_key = generate_random_string()\n    random_value = generate_random_string()\n    print(\"sending to Mongo\")\n    result = await collection.update_one(\n        {\"key\": random_key}, {\"$set\": {\"value\": random_value}}, upsert=True\n    )\n    print(result)\n    if result.upserted_id or result.modified_count:\n        return {\"status\": \"success\", \"key\": random_key, \"value\": random_value}\n    raise HTTPException(status_code=500, detail=\"Failed to set item\")\n\n@app.get(\"/get\", response_model=List[Dict[str, str]])\nasync def get_all_items():\n    cursor = collection.find({})\n    print(\"retrieving from Mongo\")\n    items = await cursor.to_list(length=None)\n    for item in items:\n        item['_id'] = str(item['_id'])\n    return items\n\n@app.get(\"/health\")\nasync def healthcheck():\n    print(\"starting healthcheck, pulling from mongo\")\n    cursor = collection.aggregate([{'$sample': {'size': 1}}])\n    random_doc = await cursor.to_list(length=1)\n    \n    if random_doc:\n        print(\"healthcheck successful\")\n        return {\"status\": \"success\", \"document\": random_doc[0]}\n    else:\n        print(\"No documents found\")\n        raise HTTPException(status_code=500, detail=\"No documents found in the collection\")\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for Railway Post-Deployment Workflow\nDESCRIPTION: This YAML configuration sets up a GitHub Action that triggers when a deployment succeeds on Railway. It includes debugging output and conditional execution for production environment deployments.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/github-post-deploy-actions.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Post-Deployment Actions\n\non:\n  deployment_status:\n    states: [success]\n\njobs:\n  post-deploy:\n    runs-on: ubuntu-latest\n    if: github.event.deployment_status.state == 'success'\n    steps:\n      - name: Debug - Print github.event object\n        run: |\n          echo \"github.event context:\"\n          echo '${{ toJSON(github.event) }}'\n          \n      # Only run if this is a production environment deployment that succeeded\n      - name: Run post-deploy actions\n        if: github.event.deployment.environment == 'production'\n        run: |\n          echo \"Production deployment succeeded\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Railway CLI\nDESCRIPTION: Command to log in to your Railway account through the CLI. Opens a browser for authentication.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/cli.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrailway login\n```\n\n----------------------------------------\n\nTITLE: Configuring Railway Deployment Using JSON\nDESCRIPTION: A JSON configuration example for Railway deployments with the same functionality as the TOML example. It includes a schema reference for editor autocomplete and defines build and deploy settings with various deployment options.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/config-as-code.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://railway.com/railway.schema.json\",\n  \"build\": {\n    \"builder\": \"nixpacks\",\n    \"buildCommand\": \"echo building!\"\n    },\n  \"deploy\": {\n    \"preDeployCommand\": [\"npm run db:migrate\"],\n    \"startCommand\": \"echo starting!\",\n    \"healthcheckPath\": \"/\",\n    \"healthcheckTimeout\": 100,\n    \"restartPolicyType\": \"never\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Railway Project\nDESCRIPTION: Command to create a new Railway project directly from the command line. Prompts for project name and team selection.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/cli.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrailway init\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Sentinel Cluster in Node.js using ioredis\nDESCRIPTION: This code snippet illustrates how to connect to a Redis High Availability cluster via Sentinel using the ioredis library in a Node.js application. It references an example from the Railway template repository.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/redis.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Reference to example code at https://github.com/railwayapp-templates/redis-ha-sentinel/blob/main/exampleApps/node/server.js#L4\n```\n\n----------------------------------------\n\nTITLE: Fetching Project Details with GraphQL\nDESCRIPTION: This query retrieves all personal projects along with their associated services, plugins, and environments. It provides a comprehensive overview of the user's Railway projects and their components.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/manage-projects.md#2025-04-11_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery me {\n  me {\n    projects {\n      edges {\n        node {\n          id\n          name\n          services {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n          plugins {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n          environments {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Route with Database Integration\nDESCRIPTION: JavaScript code for setting up an Express route that queries a Postgres database and renders the result.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/express.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst pgp = require('pg-promise')();\nconst db = pgp('postgres://username:password@127.0.0.1:5432/expresshelloworld_dev');\nconst router = express.Router();\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n  db.one(\"SELECT NOW()\")\n    .then(function (data) {\n      // Render the page only after receiving the data\n      res.render('index', { title: 'Hello World, Railway!', timeFromDB: data.now });\n    })\n    .catch(function (error) {\n      console.error(\"ERROR:\", error);\n      // If there's an error, send a 500 response and do not call res.render\n      res.status(500).send(\"Error querying the database\");\n    });\n});\n\nmodule.exports = router;\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Railway PR Environments\nDESCRIPTION: This YAML configuration creates a GitHub Actions workflow that automatically manages Railway environments for pull requests. It creates a new environment when a PR is opened (based on an existing environment) and deletes the environment when the PR is closed. The workflow injects custom environment variables into specified services.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/github-pr-environment-actions.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# NOTE\n# if you have 2fa on your account, the pr close part of the action will hang (due to 2fa not being supported non-interactively)\n\nname: Manage PR environments (Railway)\n\non:\n  pull_request:\n    types: [opened, closed]\n\nenv:\n    RAILWAY_API_TOKEN: \"\" # get this in account settings (make sure this is NOT a project token), and scope it to your account (not a workspace)\n    SERVICE_ID: \"\" # service ID to inject database variable into\n    ENV_NAME: \"\" # the environment variable name to inject (e.g DATABASE_URL)\n    ENV_VALUE: \"\" # the value to inject\n    DUPLICATE_FROM_ID: \"\" # railway environment to duplicate from\n    LINK_PROJECT_ID: \"\" # project ID\n    # TEAM_ID: \"\" if you are linking to a project in team, uncomment this\n\njobs:\n    pr_opened:\n        if: github.event.action == 'opened'\n        runs-on: ubuntu-latest\n        container: ghcr.io/railwayapp/cli:latest\n        steps:\n        - name: Link to project\n          run: railway link --project ${{ env.LINK_PROJECT_ID }} --environment ${{ env.DUPLICATE_FROM_ID }} # --team ${{ env.TEAM_ID }} # uncomment this if you are linking to a team project  \n        - name: Create Railway Environment for PR\n          run: railway environment new pr-${{ github.event.pull_request.number }} --copy ${{ env.DUPLICATE_FROM_ID }} --service-variable ${{ env.SERVICE_ID }} \"${{ env.ENV_NAME }}=${{ env.ENV_VALUE }}\"\n\n    pr_closed:\n        if: github.event.action == 'closed'\n        runs-on: ubuntu-latest\n        container: ghcr.io/railwayapp/cli:latest\n        steps:\n        - name: Link to project\n          run: railway link --project ${{ env.LINK_PROJECT_ID }} --environment ${{ env.DUPLICATE_FROM_ID }} # --team ${{ env.TEAM_ID }} # uncomment this if you are linking to a team project       \n        - name: Delete Railway Environment for PR\n          run: railway environment delete pr-${{ github.event.pull_request.number }} || true\n```\n\n----------------------------------------\n\nTITLE: Initializing a Railway Project via CLI\nDESCRIPTION: Command to initialize a new Railway project in the current directory using the Railway CLI. This sets up the configuration needed to deploy the application to Railway.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/axum.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrailway init\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for Fastify Deployment on Railway\nDESCRIPTION: This Dockerfile sets up a Node.js 18 Alpine environment for a Fastify application. It copies the application code, installs dependencies, and specifies the startup command. Railway automatically detects and uses this Dockerfile for building and deploying the application.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/fastify.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Use the Node.js 18 alpine official image\n# https://hub.docker.com/_/node\nFROM node:18-alpine\n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Copy local code to the container image.\nCOPY . .\n\n# Install project dependencies\nRUN npm ci\n\n# Run the web service on container startup.\nCMD [\"npm\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenTelemetry-Instrumented Dice Rolling Library in JavaScript\nDESCRIPTION: Dice library with OpenTelemetry instrumentation that tracks dice rolls as spans. The implementation creates spans for both individual dice rolls and the overall dice-rolling operation, and attaches roll results as span attributes for observability.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/deploy-an-otel-collector-stack.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Otel Docs Reference - https://opentelemetry.io/docs/languages/js/instrumentation/\nconst { trace } = require('@opentelemetry/api');\n\n// obtain a trace\nconst tracer = trace.getTracer('dice-lib');\n\nfunction rollOnce(i, min, max) {\n  // start a span\n  return tracer.startActiveSpan(`rollOnce:${i}`, (span) => {\n    const result = Math.floor(Math.random() * (max - min) + min);\n\n    // Add an attribute to the span\n    span.setAttribute('dicelib.rolled', result.toString());\n\n    // end the span\n    span.end();\n    return result;\n  });\n}\n  \nfunction rollTheDice(rolls, min, max) {\n  // Create a span. A span must be closed.\n  return tracer.startActiveSpan('rollTheDice', (parentSpan) => {\n    const result = [];\n    for (let i = 0; i < rolls; i++) {\n      result.push(rollOnce(i, min, max));\n    }\n    // Be sure to end the span!\n    parentSpan.end();\n    return result;\n  });\n}\n\nmodule.exports = { rollTheDice };\n```\n\n----------------------------------------\n\nTITLE: Basic Axum Web Server Implementation in Rust\nDESCRIPTION: A simple Axum web server implementation that listens on a configurable port (defaulting to 3000) and responds with 'Hello World' at the root endpoint. It uses environment variables for port configuration to work well in cloud deployments.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/axum.md#2025-04-11_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse axum:{\n    routing::get,\n    Router,\n};\n\n#[tokio::main]\nasync fn main() {\n    // build our application with a single route\n    let app = Router::new().route(\"/\", get(root));\n\n    // Get the port number from the environment, default to 3000\n    let port: u16 = std::env::var(\"PORT\")\n        .unwrap_or_else(|_| \"3000\".to_string()) // Get the port as a string or default to \"3000\"\n        .parse() // Parse the port string into a u16\n        .expect(\"Failed to parse PORT\");\n\n    // Create a socket address (IPv6 binding)\n    let address = SocketAddr::from(([0, 0, 0, 0, 0, 0, 0, 0], port));\n    let listener = tokio::net::TcpListener::bind(&address).await.unwrap();\n\n    // Run the app with hyper, listening on the specified address\n    axum::serve(listener, app).await.unwrap();\n}\n\n// basic handler that responds with a static string\nasync fn root() -> &'static str {\n    \"Hello World, from Axum!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Service with GitHub Repository via GraphQL\nDESCRIPTION: This GraphQL mutation creates a new service in Railway with a specified GitHub repository. It requires a project ID and the repository source, returning the ID of the newly created service.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/manage-services.md#2025-04-11_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation serviceCreate {\n  serviceCreate(\n    input: {\n      projectId: \"8df3b1d6-2317-4400-b267-56c4a42eed06\"\n      source: { repo: \"railwayapp-templates/django\" }\n    }\n  ) {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Template Syntax for Variables in Railway\nDESCRIPTION: Railway's templating syntax for referencing variables from different namespaces. The syntax allows referencing variables from shared or service-specific contexts using the ${{NAMESPACE.VAR}} format.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/variables.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n${{NAMESPACE.VAR}}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Rocket Web Server in Rust\nDESCRIPTION: Rust code that creates a simple Rocket web server with a root route that returns a 'Hello world' message. The code defines the routing and server configuration for handling HTTP requests.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/rocket.md#2025-04-11_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[macro_use] \nextern crate rocket;\n\n#[get(\"/\")]\nfn index() -> &'static str {\n    \"Hello world, Rocket!\"\n}\n\n#[launch]\nfn rocket() -> _ {\n    rocket::build().mount(\"/\", routes![index])\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Files in Django Settings\nDESCRIPTION: Code to set up static file handling in Django, defining the URL path, root directory, and additional directories for static files.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/django.md#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nSTATIC_URL = 'static/'\n\nSTATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]\n```\n\n----------------------------------------\n\nTITLE: Setting Watch Patterns in Railway JSON\nDESCRIPTION: Defines patterns to conditionally trigger deployments based on file changes.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/config-as-code.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://railway.com/railway.schema.json\",\n  \"build\": {\n    \"watchPatterns\": [\"src/**\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for Express Application Deployment on Railway\nDESCRIPTION: This Dockerfile sets up a Node.js environment for an Express application. It uses the official Node LTS image, copies the application code, installs dependencies, and specifies the command to start the app. This configuration allows Railway to automatically build and deploy the application.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/express.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Use the Node official image\n# https://hub.docker.com/_/node\nFROM node:lts\n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Copy local code to the container image\nCOPY . ./\n\n# Install packages\nRUN npm ci\n\n# Serve the app\nCMD [\"npm\", \"run\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Custom Start Command for OpenTelemetry Instrumentation in Node.js\nDESCRIPTION: Railway custom start command that wraps the Express application with OpenTelemetry instrumentation. It uses the Node.js --require flag to load the instrumentation code before starting the main application.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/deploy-an-otel-collector-stack.md#2025-04-11_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nnode --require ./instrumentation.js app.js\n```\n\n----------------------------------------\n\nTITLE: Using Build-time Variables in Dockerfile\nDESCRIPTION: Example showing how to use Railway environment variables during Docker build process using ARG command\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/dockerfiles.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Specify the variable you need\nARG RAILWAY_SERVICE_NAME\n# Use the varible\nRUN echo $RAILWAY_SERVICE_NAME\n```\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node\n\nARG RAILWAY_ENVIRONMENT\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry NodeSDK for Telemetry Collection in JavaScript\nDESCRIPTION: Sets up the OpenTelemetry Node SDK to instrument an application automatically. It configures trace and metric exporters pointing to the OTLP endpoint, defines service metadata, and includes automatic instrumentations for Node.js. This wraps the application to capture telemetry data.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/deploy-an-otel-collector-stack.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Otel Docs Reference - https://opentelemetry.io/docs/languages/js/instrumentation\nconst { NodeSDK } = require('@opentelemetry/sdk-node');\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-proto');\nconst { Resource } = require('@opentelemetry/resources')\nconst { SEMRESATTRS_SERVICE_NAME, SEMRESATTRS_SERVICE_VERSION, } = require('@opentelemetry/semantic-conventions')\nconst { OTLPMetricExporter } = require('@opentelemetry/exporter-metrics-otlp-proto');\nconst { PeriodicExportingMetricReader } = require('@opentelemetry/sdk-metrics');\n\n\nconst sdk = new NodeSDK({\n  resource: new Resource({\n    [SEMRESATTRS_SERVICE_NAME]: 'dice-server',\n    [SEMRESATTRS_SERVICE_VERSION]: '0.1.0',\n  }),\n  traceExporter: new OTLPTraceExporter({\n    url: `http://${process.env.OTEL_EXPORTER_OTLP_ENDPOINT}/v1/traces`\n  }),\n  metricReader: new PeriodicExportingMetricReader({\n    exporter: new OTLPMetricExporter({\n        url: `http://${process.env.OTEL_EXPORTER_OTLP_ENDPOINT}/v1/metrics`\n      }),\n  }),\n  instrumentations: [getNodeAutoInstrumentations()],\n});\n\nsdk.start();\n```\n\n----------------------------------------\n\nTITLE: Explaining Crontab Expression Structure\nDESCRIPTION: This snippet illustrates the structure of a crontab expression, showing how each field corresponds to a different unit of time (minute, hour, day of month, month, and day of week).\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cron-jobs.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n* * * * *\n│ │ │ │ │\n│ │ │ │ └─────────── Day of the week (0 - 6)\n│ │ │ └───────────── Month (1 - 12)\n│ │ └─────────────── Day of the month (1 - 31)\n│ └───────────────── Hour (0 - 23)\n└─────────────────── Minute (0 - 59)\n```\n\n----------------------------------------\n\nTITLE: Docker Multi-Stage Build for Optimized Rust Deployment\nDESCRIPTION: A multi-stage Dockerfile for building and running a Rust Axum application efficiently. It uses cargo-chef to cache dependencies, build the application in release mode, and create a minimal production image.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/axum.md#2025-04-11_snippet_6\n\nLANGUAGE: docker\nCODE:\n```\nFROM lukemathwalker/cargo-chef:latest-rust-1 AS chef\n\n# Create and change to the app directory.\nWORKDIR /app\n\nFROM chef AS planner\nCOPY . ./\nRUN cargo chef prepare --recipe-path recipe.json\n\nFROM chef AS builder \nCOPY --from=planner /app/recipe.json recipe.json\n\n# Build dependencies - this is the caching Docker layer!\nRUN cargo chef cook --release --recipe-path recipe.json\n\n# Build application\nCOPY . ./\nRUN cargo build --release\n\nCMD [\"./target/release/helloworld\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Spring Boot REST Controller in Java\nDESCRIPTION: This code defines a basic Spring Boot application with a REST controller that responds with 'Hello world from Java Spring Boot!' when the root endpoint is accessed. The class is annotated with @SpringBootApplication and @RestController, and includes a method mapped to the root URL using @GetMapping.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/spring-boot.md#2025-04-11_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.railwayguide.helloworld;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@SpringBootApplication\n@RestController\npublic class HelloworldApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(HelloworldApplication.class, args);\n\t}\n\n\t@GetMapping(\"/\")\n    public String hello() {\n      return String.format(\"Hello world from Java Spring Boot!\");\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the SolidJS Development Server\nDESCRIPTION: Command to start the Vite development server that runs the SolidJS application locally for testing at http://localhost:3000.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/solid.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Example Webhook Payload Structure in JSON\nDESCRIPTION: This JSON structure represents the payload that will be sent to the specified webhook URL when a deployment status changes or an alert is triggered. It includes details about the project, environment, and deployment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/webhooks.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"DEPLOY\",\n  \"timestamp\": \"2025-02-01T00:00:00.000Z\",\n  \"project\": {\n    \"id\": \"[project ID]\",\n    \"name\": \"[project name]\",\n    \"description\": \"...\",\n    \"createdAt\": \"2025-02-01T00:00:00.000Z\"\n  },\n  \"environment\": {\n    \"id\": \"[environment ID]\",\n    \"name\": \"[environment name]\"\n  },\n  \"deployment\": {\n    \"id\": \"[deploy ID]\",\n    \"creator\": {\n      \"id\": \"[user id]\",\n      \"name\": \"...\",\n      \"avatar\": \"...\"\n    },\n    \"meta\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Flask Application\nDESCRIPTION: Python code for a basic Flask application that returns a 'Hello world' message when accessed.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/flask.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom flask import Flask\n\napp = Flask(__name__)\n\n\n@app.route('/')\ndef hello():\n    return 'Hello world, welcome to Railway!'\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for Beego App Deployment on Railway\nDESCRIPTION: A Dockerfile configuration for deploying a Beego application on Railway. It uses the official Golang 1.22 image, sets up the working directory, copies the application code, downloads dependencies, builds the app, and configures the entrypoint.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/beego.md#2025-04-11_snippet_5\n\nLANGUAGE: docker\nCODE:\n```\n# Use the Go 1.22 official image\n# https://hub.docker.com/_/golang\nFROM golang:1.22\n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Copy local code to the container image.\nCOPY . ./\n\n# Install project dependencies\nRUN go mod download\n\n# Build the app\nRUN go build -o app\n   \n# Run the service on container startup.\nENTRYPOINT [\"./app\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Express Server with Dice Rolling API in JavaScript\nDESCRIPTION: Creates an Express.js server that exposes a /rolldice endpoint which accepts a 'rolls' query parameter. The server validates the input and returns an array of random dice rolls. The app relies on a separate dice.js module for the actual dice-rolling functionality.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/deploy-an-otel-collector-stack.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// app.js //\nconst express = require('express');\nconst { rollTheDice } = require('./dice.js');\n\nconst PORT = parseInt(process.env.PORT || '8080');\nconst app = express();\n\napp.get('/rolldice', (req, res) => {\n  const rolls = req.query.rolls ? parseInt(req.query.rolls.toString()) : NaN;\n  if (isNaN(rolls)) {\n    res\n      .status(400)\n      .send(\"Request parameter 'rolls' is missing or not a number.\");\n    return;\n  }\n  res.send(JSON.stringify(rollTheDice(rolls, 1, 6)));\n});\n\napp.listen(PORT, () => {\n  console.log(`Listening for requests on http://localhost:${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Dependencies\nDESCRIPTION: Command to install all required dependencies for the Vue application.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/vue.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Custom Nixpacks Build Configuration\nDESCRIPTION: Example of a custom nixpacks.toml configuration file that explicitly specifies Python as the provider and defines the start command for a Python application.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/nixpacks-was-unable-to-generate-a-build-plan.md#2025-04-11_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nproviders = [\"python\"] # Tell Nixpacks to use the Python build plan\n\n[start]\ncmd = \"python web.py\" # Tell Nixpacks to start your web.py file\n```\n\n----------------------------------------\n\nTITLE: Modifying PostgreSQL Configuration with SQL Commands\nDESCRIPTION: This SQL snippet demonstrates how to modify PostgreSQL configuration settings using ALTER SYSTEM commands. It adjusts various performance-related parameters and reloads the configuration.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/postgresql.md#2025-04-11_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER SYSTEM SET shared_buffers = '2GB';\nALTER SYSTEM SET effective_cache_size = '6GB';\nALTER SYSTEM SET maintenance_work_mem = '512MB';\nALTER SYSTEM SET work_mem = '32MB';\nALTER SYSTEM SET max_worker_processes = '8';\nALTER SYSTEM SET max_parallel_workers_per_gather = '4';\nALTER SYSTEM SET max_parallel_workers = '8';\n\n-- Reload the configuration to save the changes\nSELECT pg_reload_conf();\n```\n\n----------------------------------------\n\nTITLE: Python MySQL Connection Example\nDESCRIPTION: Example code showing how to connect to MySQL cluster using environment variables from the MySQL Router service.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/mysql.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMYSQL_ROUTER_HOST\nMYSQL_ROUTER_PORT\nMYSQL_USER\nMYSQL_PASSWORD\nMYSQL_DB\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Hosts in Django Settings\nDESCRIPTION: Code to set the ALLOWED_HOSTS setting in Django to accept requests from any host/domain. This is used for deployment environments where the domain might vary.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/django.md#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nALLOWED_HOSTS = [\"*\"]\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest Active Deployment with GraphQL\nDESCRIPTION: This query retrieves the latest active deployment for a specific service in a given environment. It returns the deployment's ID and static URL, limiting results to just one deployment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/manage-deployments.md#2025-04-11_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery deployments {\n  deployments(\n    first: 1\n    input: {\n      projectId: \"8df3b1d6-2317-4400-b267-56c4a42eed06\"\n      environmentId: \"9fb4baf0-809a-40ec-af32-751f50890802\"\n      serviceId: \"4bd252dc-c4ac-4c2e-a52f-051804292035\"\n    }\n  ) {\n    edges {\n      node {\n        id\n        staticUrl\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for SolidJS App Deployment\nDESCRIPTION: A multi-stage Dockerfile that builds a SolidJS application and serves it using Caddy. The first stage builds the app with Node.js, and the second stage uses Caddy to serve the built files.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/solid.md#2025-04-11_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use the Node alpine official image\n# https://hub.docker.com/_/node\nFROM node:lts-alpine AS build\n\n# Set config\nENV NPM_CONFIG_UPDATE_NOTIFIER=false\nENV NPM_CONFIG_FUND=false\n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Copy the files to the container image\nCOPY package*.json ./\n\n# Install packages\nRUN npm ci\n\n# Copy local code to the container image.\nCOPY . ./\n\n# Build the app.\nRUN npm run build\n\n# Use the Caddy image\nFROM caddy\n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Copy Caddyfile to the container image.\nCOPY Caddyfile ./\n\n# Copy local code to the container image.\nRUN caddy fmt Caddyfile --overwrite\n\n# Copy files to the container image.\nCOPY --from=build /app/dist ./dist\n\n# Use Caddy to run/serve the app\nCMD [\"caddy\", \"run\", \"--config\", \"Caddyfile\", \"--adapter\", \"caddyfile\"]\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Configuration for NextJS in Railway\nDESCRIPTION: Environment variables to configure OpenTelemetry in a NextJS application. Includes options for connecting to an Otel collector in the same Railway project using private networking or to a collector in another project using public endpoints. Also shows a debug configuration option.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/deploy-an-otel-collector-stack.md#2025-04-11_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nOTEL_EXPORTER_OTLP_ENDPOINT=http://${{otel-collector.RAILWAY_PRIVATE_DOMAIN}}:4318\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nOTEL_EXPORTER_OTLP_ENDPOINT=https://<PUBLIC DOMAIN OF THE COLLECTOR IN RAILWAY>\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nOTEL_LOG_LEVEL=debug\n```\n\n----------------------------------------\n\nTITLE: Running Commands with Railway Environment Variables\nDESCRIPTION: Command to run a local command with the same environment variables as your Railway project.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/cli.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrailway run <cmd>\n```\n\n----------------------------------------\n\nTITLE: Installing Sails Globally with npm\nDESCRIPTION: This command installs the Sails framework globally on your system using npm.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/sails.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install sails -g\n```\n\n----------------------------------------\n\nTITLE: Running Commands with Railway Environment (CLI)\nDESCRIPTION: This command allows running local commands using variables from the active Railway environment. It also injects environment variables associated with installed databases in the project.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_17\n\nLANGUAGE: txt\nCODE:\n```\n~ railway run --help\nRun a local command using variables from the active environment\n\nUsage: railway run [OPTIONS] [ARGS]...\n\nArguments:\n  [ARGS]...  Args to pass to the command\n\nOptions:\n  -s, --service <SERVICE>          Service to pull variables from (defaults to linked service)\n  -e, --environment <ENVIRONMENT>  Environment to pull variables from (defaults to linked environment)\n      --json                       Output in JSON format\n  -h, --help                       Print help\n  -V, --version                    Print version\n```\n\n----------------------------------------\n\nTITLE: Vue App Dockerfile Configuration\nDESCRIPTION: Dockerfile configuration for building and serving a Vue application using Node.js and Caddy server.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/vue.md#2025-04-11_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use the Node alpine official image\n# https://hub.docker.com/_/node\nFROM node:lts-alpine AS build\n\n# Set config\nENV NPM_CONFIG_UPDATE_NOTIFIER=false\nENV NPM_CONFIG_FUND=false\n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Copy the files to the container image\nCOPY package*.json ./\n\n# Install packages\nRUN npm ci\n\n# Copy local code to the container image.\nCOPY . ./\n\n# Build the app.\nRUN npm run build\n\n# Use the Caddy image\nFROM caddy\n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Copy Caddyfile to the container image.\nCOPY Caddyfile ./\n\n# Copy local code to the container image.\nRUN caddy fmt Caddyfile --overwrite\n\n# Copy files to the container image.\nCOPY --from=build /app/dist ./dist\n\n# Use Caddy to run/serve the app\nCMD [\"caddy\", \"run\", \"--config\", \"Caddyfile\", \"--adapter\", \"caddyfile\"]\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis with ioredis using dual stack lookup\nDESCRIPTION: This snippet demonstrates how to modify your Redis connection configuration in ioredis to enable dual stack lookup by setting the family parameter to 0, allowing both IPv4 and IPv6 resolution.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/enotfound-redis-railway-internal.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Redis from 'ioredis';\n\nconst redis = new Redis(process.env.REDIS_URL + '?family=0');\n\nconst ping = await redis.ping();\n```\n\n----------------------------------------\n\nTITLE: Adding Rocket Framework as a Dependency\nDESCRIPTION: Command to add the Rocket web framework as a dependency to a Rust project using Cargo.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/rocket.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo add rocket\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database in Django Settings\nDESCRIPTION: Code to configure Django to use PostgreSQL instead of SQLite, with environment variables for database connection parameters and default values for local development.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/django.md#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\n\n# Set default values for the environment variables if they're not already set\nos.environ.setdefault(\"PGDATABASE\", \"liftoff_dev\")\nos.environ.setdefault(\"PGUSER\", \"username\")\nos.environ.setdefault(\"PGPASSWORD\", \"\")\nos.environ.setdefault(\"PGHOST\", \"localhost\")\nos.environ.setdefault(\"PGPORT\", \"5432\")\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.environ[\"PGDATABASE\"],\n        'USER': os.environ[\"PGUSER\"],\n        'PASSWORD': os.environ[\"PGPASSWORD\"],\n        'HOST': os.environ[\"PGHOST\"],\n        'PORT': os.environ[\"PGPORT\"],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Building and Running a Rust Rocket Application\nDESCRIPTION: Multi-stage Dockerfile that uses cargo-chef for dependency caching, builds a Rust application in release mode, and configures the container to run the compiled binary.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/rocket.md#2025-04-11_snippet_7\n\nLANGUAGE: docker\nCODE:\n```\nFROM lukemathwalker/cargo-chef:latest-rust-1 AS chef\n\n# Create and change to the app directory.\nWORKDIR /app\n\nFROM chef AS planner\nCOPY . ./\nRUN cargo chef prepare --recipe-path recipe.json\n\nFROM chef AS builder \nCOPY --from=planner /app/recipe.json recipe.json\n\n# Build dependencies - this is the caching Docker layer!\nRUN cargo chef cook --release --recipe-path recipe.json\n\n# Build application\nCOPY . ./\nRUN cargo build --release\n\nCMD [\"./target/release/helloworld\"]\n```\n\n----------------------------------------\n\nTITLE: Caddy Server Configuration\nDESCRIPTION: Caddyfile configuration for serving the Vue application with proper routing and security settings.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/vue.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# global options\n{\n    admin off # theres no need for the admin api in railway's environment\n    persist_config off # storage isn't persistent anyway\n    auto_https off # railway handles https for us, this would cause issues if left enabled\n    # runtime logs\n    log {\n        format json # set runtime log format to json mode \n    }\n    # server options\n    servers {\n        trusted_proxies static private_ranges 100.0.0.0/8 # trust railway's proxy\n    }\n}\n\n# site block, listens on the $PORT environment variable, automatically assigned by railway\n:{$PORT:3000} {\n    # access logs\n    log {\n        format json # set access log format to json mode\n    }\n\n    # health check for railway\n    rewrite /health /*\n\n    # serve from the 'dist' folder (Vite builds into the 'dist' folder)\n    root * dist\n\n    # enable gzipping responses\n    encode gzip\n\n    # serve files from 'dist'\n    file_server\n\n    # if path doesn't exist, redirect it to 'index.html' for client side routing\n    try_files {path} /index.html\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Directory to Railway Project (CLI)\nDESCRIPTION: This command deploys a directory to the Railway project. It allows specifying the service, environment, and various deployment options. If no path is provided, the top linked directory is deployed using the currently selected environment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_23\n\nLANGUAGE: txt\nCODE:\n```\n~ railway up --help\nUpload and deploy project from the current directory\n\nUsage: railway up [OPTIONS] [PATH]\n\nArguments:\n  [PATH]\n\nOptions:\n  -d, --detach                     Don't attach to the log stream\n  -c, --ci                         Only stream build logs and exit after it's done\n  -s, --service <SERVICE>          Service to deploy to (defaults to linked service)\n  -e, --environment <ENVIRONMENT>  Environment to deploy to (defaults to linked environment)\n      --no-gitignore               Don't ignore paths from .gitignore\n      --verbose                    Verbose output\n      --json                       Output in JSON format\n  -h, --help                       Print help\n  -V, --version                    Print version\n```\n\n----------------------------------------\n\nTITLE: Viewing and Setting Environment Variables (CLI)\nDESCRIPTION: This command displays and sets environment variables for the Railway project. It allows viewing variables in table or KV format, setting new variables, and specifying the service and environment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_24\n\nLANGUAGE: txt\nCODE:\n```\n~ railway variables --help\nShow variables for active environment\n\nUsage: railway variables [OPTIONS]\n\nOptions:\n  -s, --service <SERVICE>          The service to show/set variables for\n  -e, --environment <ENVIRONMENT>  The environment to show/set variables for\n  -k, --kv                         Show variables in KV format\n      --set <SET>                  The \"{key}={value}\" environment variable pair to set the service variables. Example:\n                                      railway variables --set \"MY_SPECIAL_ENV_VAR=1\" --set \"BACKEND_PORT=3000\"\n      --json                       Output in JSON format\n  -h, --help                       Print help (see a summary with '-h')\n  -V, --version                    Print version\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Package with Nixpacks in TOML\nDESCRIPTION: This TOML configuration snippet demonstrates how to install a specific package (wget) using Nixpacks in the setup phase of the build process.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/build-configuration.md#2025-04-11_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[phases.setup]\n    aptPkgs = ['wget']\n```\n\n----------------------------------------\n\nTITLE: Configuring Deployment with Nixpacks\nDESCRIPTION: TOML configuration for Nixpacks, specifying the build and start commands for Railway deployment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/phoenix-distillery.md#2025-04-11_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n# nixpacks.toml\n[variables]\nMIX_ENV = 'prod'\n\n[phases.setup]\nnixPkgs = ['...', 'erlang']\n\n[phases.install]\ncmds = [\n  'mix local.hex --force',\n  'mix local.rebar --force',\n  'mix deps.get --only prod'\n]\n\n[phases.build]\ncmds = [\n  'mix compile',\n  'mkdir -p _build/prod/rel/helloworld_distillery/releases/RELEASES',\n  'mix do phx.digest, distillery.release --env=prod',\n]\n\n[start]\ncmd = \"mix ecto.setup && _build/prod/rel/helloworld_distillery/bin/helloworld_distillery foreground\"\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Nuxt App Deployment\nDESCRIPTION: Dockerfile configuration for deploying a Nuxt app to Railway. This includes steps for building and serving the app using Node.js Alpine image.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/nuxt.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Use the Node alpine official image\n# https://hub.docker.com/_/node\nFROM node:lts-alpine AS build\n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Copy the files to the container image\nCOPY package*.json ./\n\n# Install packages\nRUN npm ci\n\n# Copy local code to the container image.\nCOPY . ./\n\n# Build the app.\nRUN npm run build\n\n# Copy files to the container image.\nCOPY --from=build /app ./\n\n# Serve the app\nCMD [\"npm\", \"run\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json with start script for SvelteKit production deployment\nDESCRIPTION: Package.json configuration for a SvelteKit application with necessary scripts for development, building, and production deployment. The start script executes the built application for production environments.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/sveltekit.md#2025-04-11_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{\n\t\"name\": \"svelteapp\",\n\t\"version\": \"0.0.1\",\n\t\"type\": \"module\",\n\t\"scripts\": {\n\t\t\"dev\": \"vite dev\",\n\t\t\"build\": \"vite build\",\n\t\t\"start\": \"node build/index.js\",\n\t\t\"preview\": \"vite preview\",\n\t\t\"check\": \"svelte-kit sync && svelte-check --tsconfig ./tsconfig.json\",\n\t\t\"check:watch\": \"svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch\",\n\t\t\"format\": \"prettier --write .\",\n\t\t\"lint\": \"prettier --check . && eslint .\"\n\t},\n\t\"devDependencies\": {\n\t\t\"@fontsource/fira-mono\": \"^5.0.0\",\n\t\t\"@neoconfetti/svelte\": \"^2.0.0\",\n\t\t\"@sveltejs/adapter-auto\": \"^3.0.0\",\n\t\t\"@sveltejs/adapter-node\": \"^5.2.9\",\n\t\t\"@sveltejs/kit\": \"^2.0.0\",\n\t\t\"@sveltejs/vite-plugin-svelte\": \"^4.0.0\",\n\t\t\"@types/eslint\": \"^9.6.0\",\n\t\t\"autoprefixer\": \"^10.4.20\",\n\t\t\"eslint\": \"^9.7.0\",\n\t\t\"eslint-config-prettier\": \"^9.1.0\",\n\t\t\"eslint-plugin-svelte\": \"^2.36.0\",\n\t\t\"globals\": \"^15.0.0\",\n\t\t\"prettier\": \"^3.3.2\",\n\t\t\"prettier-plugin-svelte\": \"^3.2.6\",\n\t\t\"prettier-plugin-tailwindcss\": \"^0.6.5\",\n\t\t\"svelte\": \"^5.0.0\",\n\t\t\"svelte-check\": \"^4.0.0\",\n\t\t\"tailwindcss\": \"^3.4.9\",\n\t\t\"typescript\": \"^5.0.0\",\n\t\t\"typescript-eslint\": \"^8.0.0\",\n\t\t\"vite\": \"^5.0.3\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Environment Variable for Railway\nDESCRIPTION: Environment variable that connects the Express app to the OpenTelemetry Collector in Railway. It uses the private domain of the collector service to establish the connection endpoint for sending telemetry data.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/deploy-an-otel-collector-stack.md#2025-04-11_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nOTEL_EXPORTER_OTLP_ENDPOINT=${{OpenTelemetry Collector.RAILWAY_PRIVATE_DOMAIN}}:4318\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Gin Application Deployment\nDESCRIPTION: Dockerfile configuration for building and deploying a Gin application on Railway. Uses golang:1.23-alpine as the base image, sets up the working directory, copies application files, installs dependencies, builds the app, and defines the entry point.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/gin.md#2025-04-11_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\n# Use the Go 1.23 alpine official image\n# https://hub.docker.com/_/golang\nFROM golang:1.23-alpine\n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Copy go mod and sum files\nCOPY go.mod go.sum ./\n\n# Copy local code to the container image.\nCOPY . ./\n\n# Install project dependencies\nRUN go mod download\n\n# Build the app\nRUN go build -o app\n   \n# Run the service on container startup.\nENTRYPOINT [\"./app\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Express App with Datadog Integration in Railway\nDESCRIPTION: This JavaScript code sets up an Express app with Datadog tracing, StatsD metrics, and Winston logging. It configures routes that increment counters and log access.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/set-up-a-datadog-agent.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ** it is important to import the tracer before anything else **\nconst tracer = require('dd-trace').init();\n\nconst express = require('express');\nconst app = express();\n\nconst StatsD = require('hot-shots');\nconst { createLogger, format, transports } = require('winston');\nrequire('winston-syslog').Syslog;\nconst port = process.env.PORT || 3000;\n\n// Configure the StatsD client\nconst statsdClient = new StatsD({\n  host: process.env.DD_AGENT_HOST,\n  port: process.env.DD_AGENT_STATSD_PORT,\n  protocol: 'udp',\n  cacheDns: true,\n  udpSocketOptions: {\n    type: 'udp6',\n    reuseAddr: true,\n    ipv6Only: true,\n  },\n});\n\n// Configure Winston logger\nconst logger = createLogger({\n  level: 'info',\n  exitOnError: false,\n  format: format.json(),\n  transports: [\n    new transports.Syslog({\n      host: process.env.DD_AGENT_HOST,\n      port: process.env.DD_AGENT_SYSLOG_PORT,\n      protocol: 'udp6',\n      format: format.json(),\n      app_name: 'node-app',\n    }),\n  ],\n});\n\napp.get('/', (req, res) => {\n  // Increment a counter for the root path\n  statsdClient.increment('data_dog_example.homepage.hits');\n  statsdClient.gauge('data_dog_example.homepage.hits', 124);\n\n  // forward logs from root path\n  logger.info('Root route was accessed');\n\n  res.send('Hello World!');\n});\n\napp.get('/test', (req, res) => {\n  // Increment a counter for the test path\n  statsdClient.increment('data_dog_example.testpage.hits');\n\n  // forward logs from test path\n  logger.info('Test route was accessed');\n\n  res.send('This is the test endpoint!');\n});\n\napp.listen(port, () => {\n  console.log(`Example app listening at port ${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Express App with OpenTelemetry\nDESCRIPTION: Installs the required npm packages for creating an Express app with OpenTelemetry instrumentation.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/deploy-an-otel-collector-stack.md#2025-04-11_snippet_3\n\nLANGUAGE: npm\nCODE:\n```\nnpm i express @opentelemetry/api @opentelemetry/auto-instrumentations-node @opentelemetry/exporter-metrics-otlp-proto @opentelemetry/exporter-trace-otlp-proto @opentelemetry/resources @opentelemetry/sdk-metrics @opentelemetry/sdk-node @opentelemetry/semantic-conventions\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Spring Boot Application Deployment\nDESCRIPTION: Dockerfile for containerizing a Spring Boot application. It uses Eclipse Temurin Alpine as the base image, copies the application code, builds it with Maven, and sets up the command to run the generated JAR file.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/spring-boot.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Use the Eclipse temurin alpine official image\n# https://hub.docker.com/_/eclipse-temurin\nFROM eclipse-temurin:21-jdk-alpine\n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Copy local code to the container image.\nCOPY . ./\n\n# Build the app.\nRUN ./mvnw -DoutputFile=target/mvn-dependency-list.log -B -DskipTests clean dependency:list install\n\n# Run the app by dynamically finding the JAR file in the target directory\nCMD [\"sh\", \"-c\", \"java -jar target/*.jar\"]\n```\n\n----------------------------------------\n\nTITLE: Structuring a Shared Monorepo in JavaScript\nDESCRIPTION: This snippet shows the directory structure of a shared monorepo in JavaScript, which contains multiple components sharing a common root directory. It includes a package.json in the root and separate directories for backend, common, and frontend components.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/monorepo.md#2025-04-11_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n├── package.json\n└── packages\n    ├── backend\n    │   └── index.js\n    ├── common\n    │   └── index.js\n    └── frontend\n        └── index.jsx\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for NestJS Application\nDESCRIPTION: Docker configuration for building and deploying a NestJS application. Uses the official Node LTS image as base, sets up the working directory, copies application code, installs dependencies, and configures the production start command.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/nest.md#2025-04-11_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use the Node official image\n# https://hub.docker.com/_/node\nFROM node:lts\n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Copy local code to the container image\nCOPY . ./\n\n# Install packages\nRUN npm ci\n\n# Serve the app\nCMD [\"npm\", \"run\", \"start:prod\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Flask Application\nDESCRIPTION: Dockerfile configuration for containerizing the Flask application, including dependency installation and startup command.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/flask.md#2025-04-11_snippet_9\n\nLANGUAGE: docker\nCODE:\n```\n# Use the Python 3 official image\n# https://hub.docker.com/_/python\nFROM python:3\n\n# Run in unbuffered mode\nENV PYTHONUNBUFFERED=1 \n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Copy local code to the container image.\nCOPY . ./\n\n# Install project dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Run the web service on container startup.\nCMD [\"gunicorn\", \"main:app\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for SvelteKit deployment on Railway\nDESCRIPTION: Dockerfile configuration for deploying a SvelteKit application. It uses a Node.js Alpine image, sets up the application directory, installs dependencies, builds the app, and configures the start command.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/sveltekit.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Use the Node alpine official image\n# https://hub.docker.com/_/node\nFROM node:lts-alpine\n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Copy the files to the container image\nCOPY package*.json ./\n\n# Install packages\nRUN npm ci\n\n# Copy local code to the container image.\nCOPY . ./\n\n# Build the app.\nRUN npm run build\n\n# Serve the app\nCMD [\"npm\", \"run\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: GitHub Workflow Push Trigger Configuration\nDESCRIPTION: Example configuration for GitHub Actions workflow trigger that specifies when to run the workflow on push events to the main branch\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/github-autodeploys.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\non:\n  push:\n    branches:\n      - main\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Clojure Luminus Application\nDESCRIPTION: Dockerfile configuration for building and running a Clojure Luminus application in a container. It uses the official Clojure image, copies the application code, builds a standalone JAR file, and defines how to run the application.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/luminus.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Use the Clojure official image\n# https://hub.docker.com/_/clojure\nFROM clojure:temurin-23-lein-bookworm\n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Copy local code to the container image.\nCOPY . ./\n\n# Build the app.\nRUN lein uberjar\n\n# Run the app by dynamically finding the standalone JAR file in the target/uberjar directory\nCMD [\"sh\", \"-c\", \"java -jar $(find target/uberjar -name '*.jar' ! -name '*SNAPSHOT*')\"]\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Node.js\nDESCRIPTION: This snippet demonstrates how to access environment variables in a Node.js application running on Railway.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/variables.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.env.VARIABLE_NAME;\n```\n\n----------------------------------------\n\nTITLE: Creating a SQL Table in Railway's Database Interface\nDESCRIPTION: This snippet demonstrates the structure for creating a table in Railway's SQL database interface. It includes fields for column name, type, default value, and constraints.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/database-view.md#2025-04-11_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE table_name (\n  column_name type default_value constraints\n);\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Deploying a Remix Application\nDESCRIPTION: Dockerfile configuration for deploying a Remix application to Railway. This uses Node.js Alpine as the base image, installs dependencies, builds the app, and specifies the start command.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/remix.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Use the Node alpine official image\n# https://hub.docker.com/_/node\nFROM node:lts-alpine\n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Copy the files to the container image\nCOPY package*.json ./\n\n# Install packages\nRUN npm ci\n\n# Copy local code to the container image.\nCOPY . ./\n\n# Build the app.\nRUN npm run build\n\n# Serve the app\nCMD [\"npm\", \"run\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-region Deployment in Railway JSON\nDESCRIPTION: Sets up horizontal scaling across multiple regions with specific replica counts.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/config-as-code.md#2025-04-11_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://railway.com/railway.schema.json\",\n  \"deploy\": {\n    \"multiRegionConfig\": {\n      \"us-west2\": {\n        \"numReplicas\": 2\n      },\n      \"us-east4-eqdc4a\": {\n        \"numReplicas\": 2\n      },\n      \"europe-west4-drams3a\": {\n        \"numReplicas\": 2\n      },\n      \"asia-southeast1-eqsg3a\": {\n        \"numReplicas\": 2\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS CloudFront Distribution Stack with TypeScript\nDESCRIPTION: TypeScript code that defines a CloudFront distribution with a custom cache policy, pointing to a Railway-provided domain as the origin.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/add-a-cdn-using-cloudfront.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as cdk from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\n\nexport class CloudfrontCdkStack extends cdk.Stack {\nconstructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    // Replace with the Domain provided by Railway\n    const origin = new origins.HttpOrigin('RAILWAY PROVIDED DOMAIN');\n\n    // Custom Cache Policy\n    const cachePolicy = new cloudfront.CachePolicy(this, 'CustomCachePolicy', {\n        cachePolicyName: 'CustomCachePolicy',\n        minTtl: cdk.Duration.seconds(0),\n        maxTtl: cdk.Duration.seconds(86400),\n        defaultTtl: cdk.Duration.seconds(60),\n        cookieBehavior: cloudfront.CacheCookieBehavior.all(),\n        queryStringBehavior: cloudfront.CacheQueryStringBehavior.all(),\n        headerBehavior: cloudfront.CacheHeaderBehavior.allowList(\n            'CloudFront-Viewer-Country',\n            'CloudFront-Is-Mobile-Viewer'\n        ),\n    });\n\n    // CloudFront distribution\n    const distribution = new cloudfront.Distribution(this, 'Distribution', {\n    defaultBehavior: {\n        origin,\n        cachePolicy: cachePolicy,\n        viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n        allowedMethods: cloudfront.AllowedMethods.ALLOW_ALL,\n    },\n    });\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Variables with Template Syntax in Railway\nDESCRIPTION: Example of how to combine and reference variables in Railway to construct complex configuration values. This demonstrates chaining multiple variables together and combining them with static text.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/variables.md#2025-04-11_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nDOMAIN=${{shared.DOMAIN}}\nGRAPHQL_PATH=/v1/gql\nGRAPHQL_ENDPOINT=https://${{DOMAIN}}/${{GRAPHQL_PATH}}\n```\n\n----------------------------------------\n\nTITLE: Serving a Create React App Application\nDESCRIPTION: Command to serve a static Create React App build using the 'serve' package. The --single flag enables SPA routing, and --listen sets the port from environment variables.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/no-start-command-could-be-found.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nserve --single --listen $PORT build\n```\n\n----------------------------------------\n\nTITLE: Deploying Phoenix App to Railway with CLI\nDESCRIPTION: Command to deploy the Phoenix application to Railway. This scans, compresses, and uploads the application files and starts the deployment process.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/phoenix.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Deleting a Railway Project with GraphQL Mutation\nDESCRIPTION: This mutation deletes a specific project identified by its ID. It's a destructive action that permanently removes the project from the user's account. The mutation requires the project's unique identifier as an input.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/manage-projects.md#2025-04-11_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation projectDelete {\n  projectDelete(id: \"5e594338-0faa-415f-b2a7-2b5f2d4ec11a\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Phoenix Application\nDESCRIPTION: Command to generate a new Phoenix application named 'helloworld'. This creates a project structure with optional dependencies including Ecto, Phoenix live view, and HTML/CSS components.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/phoenix.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmix phx.new helloworld\n```\n\n----------------------------------------\n\nTITLE: Starting a Next.js Application\nDESCRIPTION: Command to start a Next.js application in production mode. The --port flag ensures that Next.js listens on the correct port as specified by Railway's environment variable.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/no-start-command-could-be-found.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx next start --port $PORT\n```\n\n----------------------------------------\n\nTITLE: Caddyfile Configuration for SolidJS App\nDESCRIPTION: Configuration file for Caddy server to serve a SolidJS application. It disables features not needed in Railway's environment, configures logging, and sets up path handling for client-side routing.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/solid.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n{\n    # global options\n    admin off # theres no need for the admin api in railway's environment\n    persist_config off # storage isn't persistent anyway\n    auto_https off # railway handles https for us, this would cause issues if left enabled\n    # runtime logs\n    log {\n        format json # set runtime log format to json mode \n    }\n    # server options\n    servers {\n        trusted_proxies static private_ranges 100.0.0.0/8 # trust railway's proxy\n    }\n}\n\n# site block, listens on the $PORT environment variable, automatically assigned by railway\n:{$PORT:3000} {\n    # access logs\n    log {\n        format json # set access log format to json mode\n    }\n\n    # health check for railway\n    rewrite /health /*\n\n    # serve from the 'dist' folder (Vite builds into the 'dist' folder)\n    root * dist\n\n    # enable gzipping responses\n    encode gzip\n\n    # serve files from 'dist'\n    file_server\n\n    # if path doesn't exist, redirect it to 'index.html' for client side routing\n    try_files {path} /index.html\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flask Framework\nDESCRIPTION: Command to install the Flask framework using pip package manager.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/flask.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install flask\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js with Custom Port\nDESCRIPTION: Launches a Next.js application with the correct port configuration using environment variable.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/application-failed-to-respond.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnext start --port ${PORT-3000}\n```\n\n----------------------------------------\n\nTITLE: Setting Root User Permissions for Volumes in Railway\nDESCRIPTION: This environment variable configuration ensures volumes can be properly accessed when running an image with a non-root user. It sets the user ID to root (0) for proper volume permissions.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/volumes.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nRAILWAY_RUN_UID=0\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway Plugin for Database Migrations\nDESCRIPTION: Configuration to add and enable the Flyway plugin for database migrations in the project/plugin.sbt and build.sbt files.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/play.md#2025-04-11_snippet_5\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"io.github.davidmweber\" % \"flyway-sbt\" % \"7.4.0\")\n```\n\nLANGUAGE: scala\nCODE:\n```\nname := \"\"\"helloworld\"\"\"\norganization := \"com.railwayguide\"\nversion := \"1.0-SNAPSHOT\"\nexecutableScriptName := \"main\"\n\nlazy val root = (project in file(\".\")).enablePlugins(PlayScala).enablePlugins(FlywayPlugin)\n\nscalaVersion := \"2.13.15\"\n\nlibraryDependencies += guice\nlibraryDependencies += \"org.scalatestplus.play\" %% \"scalatestplus-play\" % \"7.0.1\" % Test\nlibraryDependencies += \"org.postgresql\" % \"postgresql\" % \"42.7.4\" // Latest version\n\nflywayUrl := \"jdbc:postgresql://127.0.0.1:5432/scala_play?user=<username>\"  # Replace with correct credentials\nflywayLocations := Seq(\"filesystem:src/main/resources/db/migration\")\n```\n\n----------------------------------------\n\nTITLE: Running Railway CLI with Project Token\nDESCRIPTION: This snippet demonstrates how to use a project token to run the Railway CLI. The token is set as an environment variable, allowing the CLI to access all environment variables associated with a specific project and environment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/integrations.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nRAILWAY_TOKEN=XXXX railway run\n```\n\n----------------------------------------\n\nTITLE: Installing Railway CLI via Homebrew on macOS\nDESCRIPTION: Command to install the Railway CLI using Homebrew package manager on macOS systems.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/cli.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install railway\n```\n\n----------------------------------------\n\nTITLE: Starting MongoDB with IPv6 and Binding to All Interfaces\nDESCRIPTION: This command starts a MongoDB instance with IPv6 enabled and binds it to all network interfaces, allowing communication over Railway's Private Network.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/mongodb.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmongod --ipv6 --bind_ip ::,0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Web Server Port\nDESCRIPTION: Example of configuring a Node.js web server to use Railway's provided PORT environment variable, with a fallback to port 3000.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/public-networking.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// node web server\nconst port = process.env.PORT || 3000;\n\napp.listen(port, () => {\n  console.log(`App listening on port: ${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: MongoDB Exporter Start Command Configuration\nDESCRIPTION: Start command for the MongoDB exporter service that enables debug-level logging and collects all available metrics from MongoDB instances. This command initiates the exporter with specific logging and collection parameters.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/deploy-and-monitor-mongo.md#2025-04-11_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n/mongodb_exporter --log.level=\"debug\" --collect-all\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis with bullmq using dual stack lookup\nDESCRIPTION: This snippet shows how to configure bullmq to connect to Redis with dual stack lookup enabled by setting the family option to 0 in the connection object, which helps resolve hostname issues.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/enotfound-redis-railway-internal.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Queue } from \"bullmq\";\n\nconst redisURL = new URL(process.env.REDIS_URL);\n\nconst queue = new Queue(\"Queue\", {\n    connection: {\n        family: 0,\n        host: redisURL.hostname,\n        port: redisURL.port,\n        username: redisURL.username,\n        password: redisURL.password\n    }\n});\n\nconst jobs = await queue.getJobs();\n\nconsole.log(jobs);\n```\n\n----------------------------------------\n\nTITLE: Deploying from GitLab Container Registry\nDESCRIPTION: An example showing the format for specifying a GitLab Container Registry image path when deploying a service on Railway.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/services.md#2025-04-11_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nregistry.gitlab.com/gitlab-cicd15/django-project\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Control Headers in Fastify Route\nDESCRIPTION: Code snippet showing how to set cache-control headers in a Fastify route response to enable CDN caching. The cache control directive sets a 60-second max age and requires revalidation.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/add-a-cdn-using-cloudfront.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nreply.headers({\n    'cache-control': 'must-revalidate, max-age=60'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Node/Express Server for IPv6 Listening\nDESCRIPTION: Set up an Express.js server to listen on both IPv4 and IPv6 by binding to '::'.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/private-networking.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst port = process.env.PORT || 3000;\n\napp.listen(port, '::', () => {\n    console.log(`Server listening on [::]${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Railway CLI Help Command Reference (CLI)\nDESCRIPTION: This command provides a comprehensive list of all available Railway CLI commands and their brief descriptions. It includes options for JSON output and version information.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_28\n\nLANGUAGE: txt\nCODE:\n```\n~ railway help\nInteract with Railway via CLI\n\nUsage: railway [OPTIONS] <COMMAND>\n\nCommands:\n  add          Add a service to your project\n  completion   Generate completion script\n  connect      Connect to a database's shell (psql for Postgres, mongosh for MongoDB, etc.)\n  deploy       Provisions a template into your project\n  domain       Generates a domain for a service if there is not a railway provided domain\n  docs         Open Railway Documentation in default browser\n  down         Remove the most recent deployment\n  environment  Change the active environment\n  init         Create a new project\n  link         Associate existing project with current directory, may specify projectId as an argument\n  list         List all projects in your Railway account\n  login        Login to your Railway account\n  logout       Logout of your Railway account\n  logs         View a deploy's logs\n  open         Open your project dashboard\n  run          Run a local command using variables from the active environment\n  service      Link a service to the current project\n  shell        Open a local subshell with Railway variables available\n  status       Show information about the current project\n  unlink       Disassociate project from current directory\n  up           Upload and deploy project from the current directory\n  variables    Show variables for active environment\n  whoami       Get the current logged in user\n  volume       Manage project volumes\n  redeploy     Redeploy the latest deployment of a service\n  help         Print this message or the help of the given subcommand(s)\n\nOptions:\n      --json     Output in JSON format\n  -h, --help     Print help\n  -V, --version  Print version\n```\n\n----------------------------------------\n\nTITLE: Deploying a SvelteKit application to Railway using the CLI\nDESCRIPTION: Command to deploy a SvelteKit application to Railway. This uploads the application files, triggers the build process, and deploys the application to Railway's infrastructure.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/sveltekit.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Linking Service to Current Project (CLI)\nDESCRIPTION: This command links a service to the current Railway project. It allows specifying the service to link and provides options for JSON output and help information.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_18\n\nLANGUAGE: txt\nCODE:\n```\n~ railway service --help\nLink a service to the current project\n\nUsage: railway service [OPTIONS] [SERVICE]\n\nArguments:\n  [SERVICE]  The service to link\n\nOptions:\n      --json     Output in JSON format\n  -h, --help     Print help\n  -V, --version  Print version\n```\n\n----------------------------------------\n\nTITLE: Structuring an Isolated Monorepo in JavaScript and Python\nDESCRIPTION: This snippet demonstrates the directory structure of an isolated monorepo containing a JavaScript frontend and a Python backend. Each component is completely isolated in its own directory.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/monorepo.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── frontend/\n│   ├── index.js\n│   └── ...\n└── backend/\n    ├── server.py\n    └── ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Go HTTP Server\nDESCRIPTION: Sets up a Go HTTP server with proper port configuration using environment variables.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/application-failed-to-respond.md#2025-04-11_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  // ...\n  // Use `PORT` provided in environment or default to 3000\n  port := cmp.Or(os.Getenv(\"PORT\"), 3000)\n\n  log.Fatal(http.ListenAndServe((\":\" + port), handler))\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Exporter Environment Variables in Railway\nDESCRIPTION: Environment variables configuration for the Percona MongoDB exporter service that connects to MongoDB replica set nodes and exposes metrics for Prometheus collection. These variables specify connection details for the MongoDB instances.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/deploy-and-monitor-mongo.md#2025-04-11_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nMONGO_HOSTS=${{mongo1.RAILWAY_PRIVATE_DOMAIN}}:27017,${{mongo2.RAILWAY_PRIVATE_DOMAIN}}:27017,${{mongo3.RAILWAY_PRIVATE_DOMAIN}}:27017\nREPLICA_SET_NAME=${{ mongo1.REPLICA_SET_NAME }}\nMONGODB_URI_SINGLE=mongodb://${{mongo1.RAILWAY_PRIVATE_DOMAIN}}:27017\nMONGODB_URI=mongodb://${{MONGO_HOSTS}}/?replicaSet=${{REPLICA_SET_NAME}}\nPORT=9216\nRAILWAY_BETA_ENABLE_RUNTIME_V2=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Beego Application with Postgres Database\nDESCRIPTION: Main application code showing Postgres database configuration, user model definition, and data seeding functionality.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/beego.md#2025-04-11_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t_ \"helloworld/routers\"\n\n\t_ \"github.com/lib/pq\"\n\n\t\"github.com/beego/beego/v2/client/orm\"\n\tbeego \"github.com/beego/beego/v2/server/web\"\n)\n\n// Users -\ntype Users struct {\n\tID        int    `orm:\"column(id)\"`\n\tFirstName string `orm:\"column(first_name)\"`\n\tLastName  string `orm:\"column(last_name)\"`\n}\n\nfunc init() {\n\t// set default database\n\torm.RegisterDriver(\"postgres\", orm.DRPostgres)\n\n\t// set default database\n\torm.RegisterDataBase(\"default\", \"postgres\", \"postgres://unicodeveloper:@localhost/helloworld_dev?sslmode=disable\")\n\n\t// register model\n\torm.RegisterModel(new(Users))\n\n\t// create table\n\torm.RunSyncdb(\"default\", false, true)\n}\n\nfunc main() {\n\to := orm.NewOrm()\n\n\t// Create a slice of Users to insert\n\tusers := []Users{\n\t\t{FirstName: \"John\", LastName: \"Doe\"},\n\t\t{FirstName: \"Jane\", LastName: \"Doe\"},\n\t\t{FirstName: \"Railway\", LastName: \"Deploy Beego\"},\n\t}\n\n\t// Iterate over the slice and insert each user\n\tfor _, user := range users {\n\t\tid, err := o.Insert(&user)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Failed to insert user %s %s: %v\\n\", user.FirstName, user.LastName, err)\n\t\t} else {\n\t\t\tfmt.Printf(\"Inserted user ID: %d, Name: %s %s\\n\", id, user.FirstName, user.LastName)\n\t\t}\n\t}\n\n\tbeego.Run()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring bullmq for IPv6 Support\nDESCRIPTION: Initialize a bullmq client with IPv6 support by specifying 'family: 0' in the connection object.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/private-networking.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Queue } from \"bullmq\";\n\nconst redisURL = new URL(process.env.REDIS_URL);\n\nconst queue = new Queue(\"Queue\", {\n    connection: {\n        family: 0,\n        host: redisURL.hostname,\n        port: redisURL.port,\n        username: redisURL.username,\n        password: redisURL.password\n    }\n});\n\nconst jobs = await queue.getJobs();\n\nconsole.log(jobs);\n```\n\n----------------------------------------\n\nTITLE: Configuring Ecto Repo for Runtime Environment\nDESCRIPTION: Elixir code snippet for configuring the Ecto Repo to use runtime environment variables.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/phoenix-distillery.md#2025-04-11_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule HelloworldDistillery.Repo do\n  use Ecto.Repo,\n    otp_app: :helloworld_distillery,\n    adapter: Ecto.Adapters.Postgres,\n    pool_size: 10\n  def init(_type, config) do\n    {:ok, Keyword.put(config, :url, System.get_env(\"DATABASE_URL\"))}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding sbt-native-packager Plugin\nDESCRIPTION: Configuration to add and enable the sbt-native-packager plugin for packaging the application for deployment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/play.md#2025-04-11_snippet_12\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"com.github.sbt\" % \"sbt-native-packager\" % \"x.x.x\")\n```\n\nLANGUAGE: scala\nCODE:\n```\nname := \"\"\"helloworld\"\"\"\norganization := \"com.railwayguide\"\n\nversion := \"1.0-SNAPSHOT\"\n\nexecutableScriptName := \"main\"\n\nlazy val root = (project in file(\".\")).enablePlugins(PlayScala).enablePlugins(JavaAppPackaging).enablePlugins(FlywayPlugin)\n\nscalaVersion := \"2.13.15\"\n\nlibraryDependencies += guice\nlibraryDependencies += \"org.scalatestplus.play\" %% \"scalatestplus-play\" % \"7.0.1\" % Test\nlibraryDependencies += \"org.postgresql\" % \"postgresql\" % \"42.7.4\" // Always use the latest stable version\n\nflywayUrl := sys.env.getOrElse(\"DATABASE_URL\", \"jdbc:postgresql://127.0.0.1:5432/scala_play?user=username\")\n\nflywayLocations := Seq(\"filesystem:src/main/resources/db/migration\")\n```\n\n----------------------------------------\n\nTITLE: Examples of Structured Logs in JSON Format\nDESCRIPTION: These examples demonstrate different formats of structured logs in JSON, including minimal, error, and custom attribute logs.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/logs.md#2025-04-11_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n{\"message\":\"A minimal structured log\"}\n```\n\nLANGUAGE: text\nCODE:\n```\n{\"level\":\"error\",\"message\":\"Something bad happened\"}\n```\n\nLANGUAGE: text\nCODE:\n```\n{\"message\":\"New purchase!\",\"productId\":123,\"userId\":456}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Dockerfile Start Commands\nDESCRIPTION: This command demonstrates how to properly use environment variables in a start command for services deployed from a Dockerfile or image. It wraps the command in a shell to support variable expansion, which is not supported in exec form commands.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/build-and-start-commands.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n/bin/sh -c \"exec python main.py --port $PORT\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Endpoint for Production\nDESCRIPTION: Elixir code snippet for configuring the Phoenix endpoint in the prod.exs file for production deployment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/phoenix-distillery.md#2025-04-11_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :helloworld_distillery, HelloworldDistilleryWeb.Endpoint,\n  cache_static_manifest: \"priv/static/cache_manifest.json\",\n  server: true,\n  root: \".\",\n  version: Application.spec(:phoenix_distillery, :vsn)\n```\n\n----------------------------------------\n\nTITLE: Making API Requests with Project Token\nDESCRIPTION: Example of making an authenticated GraphQL request using a project token in the Project-Access-Token header. This command retrieves the project ID and environment ID associated with the token.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/public-api.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://backboard.railway.com/graphql/v2 \\\n  --header 'Project-Access-Token: <PROJECT_TOKEN_GOES_HERE>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\"query\":\"query { projectToken { projectId environmentId } }\"}'\n```\n\n----------------------------------------\n\nTITLE: Deploying Django App to Railway with CLI\nDESCRIPTION: Command to deploy the Django application to Railway, which scans, compresses, and uploads the app files to the platform.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/django.md#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Detecting Render Configuration in YAML\nDESCRIPTION: Railway automatically detects a 'render.yaml' file in your repository and provisions corresponding services, including databases, web services, crons, and workers. This YAML configuration is used to set up the project structure on Railway.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/migration/migrate-from-render.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrender.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection\nDESCRIPTION: TypeORM configuration in app.module.ts for connecting to PostgreSQL database with hardcoded credentials.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/nest.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      host: 'localhost',\n      port: 5432,\n      username: 'username',\n      password: 'password',\n      database: 'nestjshelloworld_dev',\n      entities: [],\n      synchronize: true,\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: Updated TypeORM configuration using environment variables for database connection in app.module.ts.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/nest.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      host: process.env.DB_HOST,\n      port: 5432,\n      username: process.env.DB_USERNAME,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_DATABASE,\n      entities: [],\n      synchronize: true,\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fastify Server with Route Caching Controls\nDESCRIPTION: JavaScript code for a Fastify server with three routes demonstrating different caching behaviors: static content, dynamic content with timestamps, and content with a manually set ETag.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/add-a-cdn-using-cloudfront.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Fastify = require('fastify');\nconst fastifyEtag = require('@fastify/etag');\n\nconst fastify = Fastify();\nfastify.register(fastifyEtag);\n\n\nfastify.get('/dynamic', async (request, reply) => {\n    console.log('Received request on dynamic route');\n\n    const staticContent = {\n        message: 'This is some dynamic content',\n        timestamp: new Date().toISOString(),\n    };\n\n    reply.type('application/json');\n    reply.headers({\n        'cache-control': 'must-revalidate, max-age=60'\n    });\n\n    reply.send(staticContent);\n});\n\nfastify.get('/static', async (request, reply) => {\n    console.log('Received request on static route');\n\n    const staticContent = {\n        message: 'This is some static content',\n    };\n\n    reply.type('application/json');\n    reply.headers({\n        'cache-control': 'must-revalidate, max-age=60'\n    });\n\n    reply.send(staticContent);\n});\n\nfastify.get('/staticEtag', async (request, reply) => {\n    console.log('Received request on staticEtag route');\n\n    const staticContent = {\n        message: 'This will serve a static etag',\n    };\n\n    reply.type('application/json');\n    \n    reply.headers({\n        'cache-control': 'must-revalidate, max-age=60'\n    });\n\n    reply.header('etag', '\"foobar\"');\n    reply.send(staticContent);\n});\n\nconst start = async () => {\n    try {\n        await fastify.listen({ port: Number(process.env.PORT) || 3000, host: '0.0.0.0' });\n        console.log(`Server is running at PORT:${Number(process.env.PORT) || 3000}`);\n    } catch (err) {\n        fastify.log.error(err);\n        process.exit(1);\n    }\n};\n\nstart();\n```\n\n----------------------------------------\n\nTITLE: Railway CLI Commands for Deployment\nDESCRIPTION: Command for linking a local application to Railway and deploying it. The railway link command associates the local project with the remote service, while railway up -d deploys the code to the linked service.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/deploy-an-otel-collector-stack.md#2025-04-11_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nrailway link\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nrailway up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Overrides in Railway JSON\nDESCRIPTION: Defines environment-specific configuration overrides for different deployment stages.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/config-as-code.md#2025-04-11_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://railway.com/railway.schema.json\",\n  \"environments\": {\n    \"staging\": {\n      \"deploy\": {\n        \"startCommand\": \"npm run staging\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying from Quay.io Container Registry\nDESCRIPTION: An example showing the format for specifying a Quay.io Container Registry image path when deploying a service on Railway.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/services.md#2025-04-11_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nquay.io/username/repo:tag\n```\n\n----------------------------------------\n\nTITLE: Setting Frontend Variable for Backend Host in Railway\nDESCRIPTION: This snippet shows how to set the VITE_BACKEND_HOST variable for the frontend service, referencing the backend's public domain.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/deploying-a-monorepo.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nVITE_BACKEND_HOST=${{Backend.RAILWAY_PUBLIC_DOMAIN}}\n```\n\n----------------------------------------\n\nTITLE: Deploying to Railway with CLI\nDESCRIPTION: Command to deploy a Spring Boot application to Railway using the CLI. This will scan, compress, and upload your application files to Railway for deployment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/spring-boot.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs for HTTP Errors Excluding a Specific Service\nDESCRIPTION: This example shows how to filter logs to find 404 or 503 errors that are not from a specific service using boolean operators.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/logs.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n(404 OR 503) AND -@service:123\n```\n\n----------------------------------------\n\nTITLE: Setting Backend Variable for Allowed Origins in Railway\nDESCRIPTION: This snippet demonstrates how to set the ALLOWED_ORIGINS variable for the backend service, referencing the frontend's public domain.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/deploying-a-monorepo.md#2025-04-11_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nALLOWED_ORIGINS=${{Frontend.RAILWAY_PUBLIC_DOMAIN}}\n```\n\n----------------------------------------\n\nTITLE: Defining Dockerfile for Datadog Agent in Railway\nDESCRIPTION: This Dockerfile sets up the Datadog agent with environment variables for logs, APM, and DogStatsD. It copies configuration files and exposes necessary ports.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/set-up-a-datadog-agent.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM datadog/agent:7\n\n# Set environment variables\nENV DD_LOGS_ENABLED=true\nENV DD_APM_ENABLED=true\nENV DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true\nENV DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true\nENV DD_APM_NON_LOCAL_TRAFFIC=true\nENV DD_BIND_HOST=::1\n\n# Reference Variables defined in Railway\nARG DD_API_KEY\nARG DD_HOSTNAME\nARG DD_SITE\n\n# Copy datadog.yaml into the container\nCOPY datadog.yaml /etc/datadog-agent/datadog.yaml\n\n# Copy syslog configuration file\nCOPY syslog.yaml /etc/datadog-agent/conf.d/syslog.d/\n\n# DogStatsD port, APM port, and the syslog port\nEXPOSE 8125/udp\nEXPOSE 8126\nEXPOSE 514/udp\n```\n\n----------------------------------------\n\nTITLE: Adding WhiteNoise Middleware in Django Settings\nDESCRIPTION: Code to configure the WhiteNoise middleware in Django for serving static files in production, positioned right after the security middleware.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/django.md#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Cron Script for Laravel Scheduled Tasks on Railway\nDESCRIPTION: A bash script that runs the Laravel scheduler every minute. This script is used in the Cron Service to execute scheduled tasks defined in the Laravel application.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/laravel.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n# Make sure this file has executable permissions, run `chmod +x run-cron.sh`\n\n# This block of code runs the Laravel scheduler every minute\nwhile [ true ]\n    do\n        echo \"Running the scheduler...\"\n        php artisan schedule:run --verbose --no-interaction &\n        sleep 60\n    done\n```\n\n----------------------------------------\n\nTITLE: Configuring Rails Routes\nDESCRIPTION: Route configuration including health check, PWA files, and root path definition\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/rails.md#2025-04-11_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n    get \"hello_world/index\"\n    get \"up\" => \"rails/health#show\", as: :rails_health_check\n    get \"service-worker\" => \"rails/pwa#service_worker\", as: :pwa_service_worker\n    get \"manifest\" => \"rails/pwa#manifest\", as: :pwa_manifest\n    root \"hello_world#index\"\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Nixpacks Plan in Railway JSON\nDESCRIPTION: Defines a complete Nixpacks build plan with custom providers and phases.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/config-as-code.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://railway.com/railway.schema.json\",\n  \"build\": {\n    \"nixpacksPlan\": {\n      \"providers\": [\"python\", \"node\"],\n      \"phases\": {\n        \"install\": {\n          \"dependsOn\": [\"setup\"],\n          \"cmds\": [\"npm ci\"]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upserting Variables with GraphQL Mutation\nDESCRIPTION: This mutation creates or updates a variable for a specific service within an environment. It requires the project ID, environment ID, service ID, variable name and value. The serviceId can be omitted to create a shared variable.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/manage-variables.md#2025-04-11_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation variableUpsert {\n  variableUpsert(\n    input: {\n      projectId: \"8df3b1d6-2317-4400-b267-56c4a42eed06\"\n      environmentId: \"9fb4baf0-809a-40ec-af32-751f50890802\"\n      serviceId: \"4bd252dc-c4ac-4c2e-a52f-051804292035\"\n      name: \"NEW_VARIABLE\"\n      value: \"SECRET_VALUE\"\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Worker Script for Laravel Queue Processing on Railway\nDESCRIPTION: A bash script that runs the Laravel queue worker to process background jobs. This script is used in the Worker Service to continuously process jobs from the queue.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/laravel.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n# Make sure this file has executable permissions, run `chmod +x run-worker.sh`\n\n# This command runs the queue worker. \n# An alternative is to use the php artisan queue:listen command\nphp artisan queue:work\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Express App in Railway\nDESCRIPTION: These environment variables are required for the Express app service in Railway, including the Datadog agent host and ports for StatsD, Syslog, and tracing.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/set-up-a-datadog-agent.md#2025-04-11_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nDD_AGENT_HOST=${{datadog-agent.DD_HOSTNAME}}\nDD_AGENT_STATSD_PORT=8125\nDD_AGENT_SYSLOG_PORT=514\nDD_TRACE_AGENT_PORT=8126\n```\n\n----------------------------------------\n\nTITLE: Configuring hot-shots StatsD Client for IPv6\nDESCRIPTION: Initialize a StatsD client using hot-shots with IPv6 support by specifying UDP socket options.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/private-networking.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst StatsD = require('hot-shots');\n\nconst statsdClient = new StatsD({\n  host: process.env.AGENT_HOST,\n  port: process.env.AGENT_PORT,\n  protocol: 'udp',\n  cacheDns: true,\n  udpSocketOptions: {\n    type: 'udp6',\n    reuseAddr: true,\n    ipv6Only: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis locally using the public URL\nDESCRIPTION: This snippet demonstrates how to connect to a Redis database from a local environment by using the public URL instead of the private network, avoiding the ENOTFOUND error.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/enotfound-redis-railway-internal.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Redis from 'ioredis';\n\nconst redis = new Redis(process.env.REDIS_PUBLIC_URL);\n\nconst ping = await redis.ping();\n```\n\n----------------------------------------\n\nTITLE: Running Celery Worker for Background Processing in Django\nDESCRIPTION: Custom start command for the Worker Service to run Celery workers with Django. This processes background tasks from the queue with a concurrency of 3 parallel workers. The 'liftoff' should be replaced with your Django app name.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/django.md#2025-04-11_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncelery -A liftoff worker -l info --concurrency=3\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL in application.conf\nDESCRIPTION: Configuration settings for PostgreSQL database connection in the application.conf file.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/play.md#2025-04-11_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\n# Default database configuration using PostgreSQL\ndb.default.driver = org.postgresql.Driver\ndb.default.url = \"jdbc:postgresql://username:password@127.0.0.1:5432/scala_play\"  # Replace with correct credentials\n```\n\n----------------------------------------\n\nTITLE: Modifying Sails Socket Configuration\nDESCRIPTION: This JavaScript code snippet modifies the Sails socket configuration to reject all connection attempts, which is added to the 'config/env/production.js' file.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/sails.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeConnect: function(handshake, proceed) {\n    // Send back `true` to allow the socket to connect.\n    // (Or send back `false` to reject the attempt.)\n    return proceed(undefined, false);\n},\n```\n\n----------------------------------------\n\nTITLE: Executing Query with Project Token in cURL\nDESCRIPTION: A cURL command example for executing a GraphQL query using a project token. This query returns the project ID and environment ID associated with the project token.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/public-api.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://backboard.railway.com/graphql/v2 \\\n  --header 'Project-Access-Token: <PROJECT_TOKEN_GOES_HERE>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\"query\":\"query { projectToken { projectId environmentId } }\"}'\n```\n\n----------------------------------------\n\nTITLE: Adding Service ID Filter to Railway Post-Deployment Workflow\nDESCRIPTION: This YAML snippet shows how to modify the post-deployment condition to only trigger for specific services. It filters based on both environment and service ID for more granular control.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/github-post-deploy-actions.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nif: github.event.deployment.environment == 'production' && github.event.deployment.payload.serviceId == '<service-id>'\n```\n\n----------------------------------------\n\nTITLE: Configuring Railway Deployment Using TOML\nDESCRIPTION: A TOML configuration example for Railway deployments that defines build and deploy settings. It specifies the builder type, build command, pre-deployment commands, start command, and various deployment health and restart options.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/config-as-code.md#2025-04-11_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[build]\nbuilder = \"nixpacks\"\nbuildCommand = \"echo building!\"\n\n[deploy]\npreDeployCommand = [\"npm run db:migrate\"]\nstartCommand = \"echo starting!\"\nhealthcheckPath = \"/\"\nhealthcheckTimeout = 100\nrestartPolicyType = \"never\"\n\n\n\n\n\n--\n```\n\n----------------------------------------\n\nTITLE: Implementing Railway Deploy Button in HTML\nDESCRIPTION: HTML implementation of the Deploy on Railway button, using an anchor tag with an embedded image. Links to a specific template deployment page.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/publish-and-share.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://railway.com/new/template/ZweBXA\"><img src=\"https://railway.com/button.svg\" alt=\"Deploy on Railway\" /></a>\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs for Errors in a Specific Service\nDESCRIPTION: This snippet demonstrates how to filter logs to find errors for a specific service using Railway's custom filter syntax.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/logs.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nerror AND @service:123\n```\n\n----------------------------------------\n\nTITLE: Defining Structured Log Type in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for structured logs in Railway, including required and optional fields.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/logs.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype StructuredLog = {\n  // (required) The content of the log\n  msg: string;\n\n  // Severity of the log\n  level: \"debug\" | \"info\" | \"warn\" | \"error\";\n\n  // Custom attributes (query via @name:value)\n  [string]: string | number | boolean | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Operations for Widget Filters\nDESCRIPTION: Demonstrates how to combine filter expressions using boolean operators for more complex filtering rules\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/observability.md#2025-04-11_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAND   # Combine conditions with AND\nOR    # Combine conditions with OR\n-     # Negation operator\n```\n\n----------------------------------------\n\nTITLE: Running Angular App Locally\nDESCRIPTION: Command to start the Angular application locally for development purposes.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/angular.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Nixpacks for Clojure Luminus Deployment\nDESCRIPTION: Configuration for nixpacks.toml that defines how to start the Clojure application in Railway. It includes a command that first runs database migrations and then starts the application using the built JAR file.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/luminus.md#2025-04-11_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n# nixpacks.toml\n\n[start]\ncmd = \"java -jar $(find ./target -name '*.jar' ! -name '*SNAPSHOT*') migrate && java -jar $(find ./target -name '*.jar' ! -name '*SNAPSHOT*')\"\n```\n\n----------------------------------------\n\nTITLE: Generating Secrets with Template Variable Functions in Railway\nDESCRIPTION: Examples of using the secret() template variable function to generate random secrets, including Base64, Hex, and UUIDv4 strings.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/create.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `openssl rand -base64 16` → `${{secret(22, \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/\")}}==`\n- `openssl rand -base64 32` → `${{secret(43, \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/\")}}=`\n- `openssl rand -base64 64` → `${{secret(86, \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/\")}}==`\n- `openssl rand -hex 16` → `${{secret(32, \"abcdef0123456789\")}}`\n- `openssl rand -hex 32` → `${{secret(64, \"abcdef0123456789\")}}`\n- `openssl rand -hex 64` → `${{secret(128, \"abcdef0123456789\")}}`\n\nOr even generate a UUIDv4 string -\n\n`${{secret(8, \"0123456789abcdef\")}}-${{secret(4, \"0123456789abcdef\")}}-4${{secret(3, \"0123456789abcdef\")}}-${{secret(1, \"89ab\")}}${{secret(3, \"0123456789abcdef\")}}-${{secret(12, \"0123456789abcdef\")}}`\n```\n\n----------------------------------------\n\nTITLE: Unlinking Railway Project from Directory (CLI)\nDESCRIPTION: This command disconnects the current directory from the Railway project. It provides options for unlinking a service, JSON output, and help information. After unlinking, 'railway link' needs to be run again to use Railway in the directory.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_22\n\nLANGUAGE: txt\nCODE:\n```\n~ Disassociate project from current directory\n\nUsage: railway unlink [OPTIONS]\n\nOptions:\n  -s, --service  Unlink a service\n      --json     Output in JSON format\n  -h, --help     Print help\n  -V, --version  Print version\n```\n\n----------------------------------------\n\nTITLE: Starting Phoenix Server Locally\nDESCRIPTION: Command to start the Phoenix application server locally for development. By default, it will listen on port 4000.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/phoenix.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmix phx.server\n```\n\n----------------------------------------\n\nTITLE: Configuring Builder in Railway JSON\nDESCRIPTION: Specifies the builder type for Railway deployments, supporting either NIXPACKS or DOCKERFILE options.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/config-as-code.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://railway.com/railway.schema.json\",\n  \"build\": {\n    \"builder\": \"NIXPACKS\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs Using a Custom Attribute\nDESCRIPTION: This snippet illustrates how to filter logs using a custom attribute with Railway's filter syntax.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/logs.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n@fullName:\"first last\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Nixpacks for Railway Deployment\nDESCRIPTION: TOML configuration for Nixpacks, specifying the command to start the Gunicorn server for the Flask app.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/flask.md#2025-04-11_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n# nixpacks.toml\n\n[start]\ncmd = \"gunicorn main:app\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Railway Project and User Status (CLI)\nDESCRIPTION: This command displays information about the current Railway project and user status. It provides options for JSON output and help information.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_21\n\nLANGUAGE: txt\nCODE:\n```\n~ railway status --help\nShow information about the current project\n\nUsage: railway status [OPTIONS]\n\nOptions:\n      --json     Output in JSON format\n  -h, --help     Print help\n  -V, --version  Print version\n```\n\n----------------------------------------\n\nTITLE: Restarting a Deployment with GraphQL\nDESCRIPTION: This mutation restarts a deployment using its unique identifier. It's a simple way to trigger a deployment restart through the Railway API.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/manage-deployments.md#2025-04-11_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation deploymentRestart {\n  deploymentRestart(id: \"9d5b1306-e22e-4357-9b3f-cc3b97ed8240\")\n}\n```\n\n----------------------------------------\n\nTITLE: Railway CLI Deployment Commands\nDESCRIPTION: Commands for initializing and deploying an Astro application using the Railway CLI.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/astro.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrailway init\n```\n\nLANGUAGE: bash\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Astro Configuration with SSR\nDESCRIPTION: Configuration file for Astro with server-side rendering enabled using the Node adapter.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/astro.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\nimport { defineConfig } from 'astro/config';\nimport mdx from '@astrojs/mdx';\n\nimport sitemap from '@astrojs/sitemap';\n\nimport node from '@astrojs/node';\n\n// https://astro.build/config\nexport default defineConfig({\n  site: 'https://example.com',\n  integrations: [mdx(), sitemap()],\n  output: 'server',\n\n  adapter: node({\n    mode: 'standalone',\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying from GitHub Container Registry\nDESCRIPTION: An example showing the format for specifying a GitHub Container Registry image path when deploying a service on Railway.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/services.md#2025-04-11_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nghcr.io/railwayapp-templates/postgres-ssl:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Nixpacks Config Path in Railway JSON\nDESCRIPTION: Specifies the location of a custom Nixpacks configuration file.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/config-as-code.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://railway.com/railway.schema.json\",\n  \"build\": {\n    \"nixpacksConfigPath\": \"backend_nixpacks.toml\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database URL in Beego Configuration\nDESCRIPTION: Configuration snippet showing how to set up database URL environment variable in app.conf.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/beego.md#2025-04-11_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ndb_url = ${DATABASE_URL}\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit with Node adapter in svelte.config.js\nDESCRIPTION: Configuration file for SvelteKit that uses the Node adapter for production builds. The adapter processes the built app to generate output optimized for Node.js environments.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/sveltekit.md#2025-04-11_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport adapter from '@sveltejs/adapter-node';\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\t// Consult https://svelte.dev/docs/kit/integrations\n\t// for more information about preprocessors\n\tpreprocess: vitePreprocess(),\n\n\tkit: {\n\t\t// adapter-auto only supports some environments, see https://svelte.dev/docs/kit/adapter-auto for a list.\n\t\t// If your environment is not supported, or you settled on a specific environment, switch out the adapter.\n\t\t// See https://svelte.dev/docs/kit/adapters for more information about adapters.\n\t\tadapter: adapter()\n\t}\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Deploying from Docker Hub\nDESCRIPTION: An example showing the format for specifying a Docker Hub image path when deploying a service on Railway.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/services.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbitnami/redis\n```\n\n----------------------------------------\n\nTITLE: Railway GraphQL API Endpoint\nDESCRIPTION: The base URL endpoint for Railway's public GraphQL API.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/public-api.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://backboard.railway.com/graphql/v2\n```\n\n----------------------------------------\n\nTITLE: SSH Connection to Railway Project/Service (CLI)\nDESCRIPTION: This command enables SSH connection to a Railway project or service. It allows specifying the project, service, environment, and deployment instance. It also provides options for executing commands and JSON output.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_20\n\nLANGUAGE: txt\nCODE:\n```\n~ railway ssh --help\nConnect to a service via SSH\n\nUsage: railway ssh [OPTIONS] [COMMAND]...\n\nArguments:\n  [COMMAND]...  Command to execute instead of starting an interactive shell\n\nOptions:\n  -p, --project <PROJECT>\n          Project to connect to (defaults to linked project)\n  -s, --service <SERVICE>\n          Service to connect to (defaults to linked service)\n  -e, --environment <ENVIRONMENT>\n          Environment to connect to (defaults to linked environment)\n  -d, --deployment-instance <deployment-instance-id>\n          Deployment instance ID to connect to (defaults to first active instance)\n      --json\n          Output in JSON format\n  -h, --help\n          Print help\n  -V, --version\n          Print version\n```\n\n----------------------------------------\n\nTITLE: Creating a New Scala Play App\nDESCRIPTION: Command to create a new Scala Play app using sbt. This initializes a new project based on the playframework/play-scala-seed.g8 template.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/play.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsbt new\n```\n\n----------------------------------------\n\nTITLE: Creating Subshell with Railway Variables (CLI)\nDESCRIPTION: This command opens a subshell (based on $SHELL) with all variables from the project, environment, and service loaded and accessible. It allows specifying the service and provides options for JSON output and help information.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_19\n\nLANGUAGE: txt\nCODE:\n```\n~ railway shell --help\nOpen a subshell with Railway variables available\n\nUsage: railway shell [OPTIONS]\n\nOptions:\n  -s, --service <SERVICE>  Service to pull variables from (defaults to linked service)\n      --json               Output in JSON format\n  -h, --help               Print help\n  -V, --version            Print version\n```\n\n----------------------------------------\n\nTITLE: Exporting PostgreSQL Database from Fly.io\nDESCRIPTION: Commands to connect to a Fly.io PostgreSQL instance and export the database using pg_dump. This creates a backup file that can be imported into Railway.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/migration/migrate-from-fly.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly postgres connect -a <postgres-app-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\npg_dump -Fc --no-acl --no-owner -h localhost -p 5432 -U <your-db-username> -d <your-db-name> -f flyio_db_backup.dump\n```\n\n----------------------------------------\n\nTITLE: Configuring Watch Paths with Gitignore Syntax\nDESCRIPTION: These gitignore-style patterns show how to configure watch paths to trigger deployments based on file changes. Examples include matching TypeScript files, Go files, and excluding Markdown files.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/build-configuration.md#2025-04-11_snippet_1\n\nLANGUAGE: gitignore\nCODE:\n```\n# Match all TypeScript files under src/\n/src/**/*.ts\n```\n\nLANGUAGE: gitignore\nCODE:\n```\n# Match Go files in the root, but not in subdirectories\n/*.go\n```\n\nLANGUAGE: gitignore\nCODE:\n```\n# Ignore all Markdown files\n**\n!/*.md\n```\n\n----------------------------------------\n\nTITLE: Using Project Token with Railway CLI\nDESCRIPTION: Command showing how to use a Project Token for authentication by setting the RAILWAY_TOKEN environment variable before running a command.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/cli.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nRAILWAY_TOKEN=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX railway up\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json for Railway Deployment\nDESCRIPTION: Configuration required in package.json for deploying a Nuxt app to Railway. This includes adding a start script and listing dependencies.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/nuxt.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"nuxt-app\",\n    \"private\": true,\n    \"type\": \"module\",\n    \"scripts\": {\n        \"build\": \"nuxt build\",\n        \"dev\": \"nuxt dev\",\n        \"start\": \"node .output/server/index.mjs\",\n        \"generate\": \"nuxt generate\",\n        \"preview\": \"nuxt preview\",\n        \"postinstall\": \"nuxt prepare\"\n    },\n    \"dependencies\": {\n        \"nuxt\": \"^3.13.0\",\n        \"vue\": \"latest\",\n        \"vue-router\": \"latest\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Gunicorn Server with IPv6 Support\nDESCRIPTION: Update the Gunicorn start command to bind to both IPv4 and IPv6 using the '--bind' flag.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/private-networking.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngunicorn app:app --bind [::]:${PORT-3000}\n```\n\n----------------------------------------\n\nTITLE: Setting Pre-deploy Command in Railway JSON\nDESCRIPTION: Specifies commands to run before starting the container.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/config-as-code.md#2025-04-11_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://railway.com/railway.schema.json\",\n  \"deploy\": {\n    \"preDeployCommand\": [\"npm run db:migrate\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Python Dependencies for FastAPI MongoDB Application\nDESCRIPTION: Required Python package dependencies for the FastAPI application including the web framework, ASGI server, and MongoDB async driver.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/deploy-and-monitor-mongo.md#2025-04-11_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nfastapi\nuvicorn\nmotor\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS CloudFront Distribution\nDESCRIPTION: Commands to bootstrap the AWS CDK environment and deploy the CloudFront distribution.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/add-a-cdn-using-cloudfront.md#2025-04-11_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ncdk bootstrap\ncdk deploy\n```\n\n----------------------------------------\n\nTITLE: Setting Railway Environment Variables for Rocket\nDESCRIPTION: Command to set the ROCKET_ADDRESS environment variable to '0.0.0.0' in Railway, allowing the Rocket app to accept external connections.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/rocket.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrailway variables --set \"ROCKET_ADDRESS=0.0.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Starting Hypercorn Server with IPv6 Support\nDESCRIPTION: Update the Hypercorn start command to bind to both IPv4 and IPv6 using the '--bind' flag.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/private-networking.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhypercorn app:app --bind [::]:${PORT-3000}\n```\n\n----------------------------------------\n\nTITLE: Configuring Start Command in Railway JSON\nDESCRIPTION: Defines the command to run when starting the container.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/config-as-code.md#2025-04-11_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://railway.com/railway.schema.json\",\n  \"deploy\": {\n    \"startCommand\": \"node index.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nixpacks for Phoenix Deployment\nDESCRIPTION: Nixpacks configuration file for deploying a Phoenix application on Railway. Defines environment variables, dependencies, build phases, and startup commands including database setup.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/phoenix.md#2025-04-11_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n# nixpacks.toml\n[variables]\nMIX_ENV = 'prod'\n\n[phases.setup]\nnixPkgs = ['...', 'erlang']\n\n[phases.install]\ncmds = [\n  'mix local.hex --force',\n  'mix local.rebar --force',\n  'mix deps.get --only prod'\n]\n\n[phases.build]\ncmds = [\n  'mix compile',\n  'mix assets.deploy'\n]\n\n[start]\ncmd = \"mix ecto.setup && mix phx.server\"\n```\n\n----------------------------------------\n\nTITLE: Adding Distillery Dependency\nDESCRIPTION: Elixir code snippet showing how to add Distillery as a dependency in the mix.exs file.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/phoenix-distillery.md#2025-04-11_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefp deps do\n  [ ...,\n   {:distillery, \"~> 2.1\"},\n    ...,\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Starting Uvicorn Server with IPv6 Support\nDESCRIPTION: Update the Uvicorn start command to bind to IPv6 using the '--host' flag.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/private-networking.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nuvicorn app:app --host :: --port ${PORT-3000}\n```\n\n----------------------------------------\n\nTITLE: Setting Restart Policy Type in Railway JSON\nDESCRIPTION: Defines how to handle deployment crashes with different restart policies.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/config-as-code.md#2025-04-11_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://railway.com/railway.schema.json\",\n  \"deploy\": {\n    \"restartPolicyType\": \"ALWAYS\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cheshire JSON Library to Clojure Project Dependencies\nDESCRIPTION: Snippet showing how to add the Cheshire JSON encoding/decoding library to the project.clj dependencies list. Cheshire is needed for handling JSON data in the Clojure application.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/luminus.md#2025-04-11_snippet_2\n\nLANGUAGE: clojure\nCODE:\n```\n...\n[cheshire \"5.10.0\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Healthcheck Path in Railway JSON\nDESCRIPTION: Configures the health check endpoint for deployment monitoring.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/config-as-code.md#2025-04-11_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://railway.com/railway.schema.json\",\n  \"deploy\": {\n    \"healthcheckPath\": \"/health\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sidekiq and Sidekiq-cron in Rails Application\nDESCRIPTION: Commands to add Sidekiq and Sidekiq-cron gems to a Rails application using Bundler. These gems enable background job processing and scheduled job functionality.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/rails.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbundle add sidekiq\nbundle add sidekiq-cron\n```\n\n----------------------------------------\n\nTITLE: Starting a Ruby on Rails Application\nDESCRIPTION: Command to start a Ruby on Rails application server in production mode. The -b and -p flags ensure Rails listens on the correct host and port.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/no-start-command-could-be-found.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbundle exec rails server -b 0.0.0.0 -p $PORT\n```\n\n----------------------------------------\n\nTITLE: Configuring Restart Policy Max Retries in Railway JSON\nDESCRIPTION: Sets the maximum number of restart attempts for the deployment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/config-as-code.md#2025-04-11_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://railway.com/railway.schema.json\",\n  \"deploy\": {\n    \"restartPolicyType\": \"ALWAYS\",\n    \"restartPolicyMaxRetries\": 5\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variable for Database URL\nDESCRIPTION: JavaScript code snippet showing how to use an environment variable for the database connection string.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/express.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = pgp(process.env.DATABASE_URL);\n```\n\n----------------------------------------\n\nTITLE: Setting PORT Environment Variable for OpenTelemetry Collector\nDESCRIPTION: Sets the port for the collector's debugging UI, allowing access from a browser.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/deploy-an-otel-collector-stack.md#2025-04-11_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nPORT=55679\n```\n\n----------------------------------------\n\nTITLE: Starting a FastAPI Application\nDESCRIPTION: Command to start a FastAPI application using uvicorn server. The --host and --port flags ensure the application is accessible on the correct host and port.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/no-start-command-could-be-found.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuvicorn main:app --host 0.0.0.0 --port $PORT\n```\n\n----------------------------------------\n\nTITLE: Starting a Django Application\nDESCRIPTION: Command to start a Django application using the gunicorn WSGI server. This points to the wsgi.py file in your Django project directory.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/no-start-command-could-be-found.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngunicorn myproject.wsgi\n```\n\n----------------------------------------\n\nTITLE: Deploying a Project with the Railway CLI\nDESCRIPTION: Deploys the current project to Railway using the CLI. This command scans project files, compresses them, and uploads them to Railway's backend for deployment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/quick-start.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Installing Database Dependencies\nDESCRIPTION: Command to install TypeORM, PostgreSQL, and related dependencies for database integration.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/nest.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @nestjs/typeorm typeorm pg\n```\n\n----------------------------------------\n\nTITLE: Running Scala Play App Locally\nDESCRIPTION: Command to build the project, install dependencies, and start the embedded Pekko HTTP server for local development.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/play.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsbt run\n```\n\n----------------------------------------\n\nTITLE: Modifying App Service\nDESCRIPTION: Updated app.service.ts file to return a custom welcome message.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/nest.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World, Welcome to Railway!';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Flask Application\nDESCRIPTION: Command to start a Flask application using the gunicorn WSGI server. This assumes main.py contains the Flask app variable named 'app'.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/no-start-command-could-be-found.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngunicorn main:app\n```\n\n----------------------------------------\n\nTITLE: Configuring Nest.js Server Port and Host\nDESCRIPTION: Configures a Nest.js application to listen on the correct port (from environment variable) and host (0.0.0.0) for Railway deployment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/application-failed-to-respond.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst port = process.env.PORT || 3000;\n\nasync function bootstrap() {\n  // ...\n  await app.listen(port, \"0.0.0.0\");\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Railway Project via CLI\nDESCRIPTION: Command to initialize a new Railway project using the Railway CLI in the Angular app directory.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/angular.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrailway init\n```\n\n----------------------------------------\n\nTITLE: Managing Subscription Steps in HTML/Markdown\nDESCRIPTION: Step-by-step instructions in HTML/Markdown format for switching from a prepaid credit-based plan to an auto-renewing Hobby plan subscription. The instructions detail the process of canceling the current plan, waiting for credits to be exhausted, and signing up for the auto-renewing subscription model.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/pricing/faqs.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p><span style={{color: \"var(--tw-prose-counters)\"}}>1.</span> Cancel your current plan.</p>\n\n    - Head over to the <a href=\"https://railway.com/workspace/billing\" target=\"_blank\">Billing page</a> of your workspace.\n    - Click on **Manage Subscription**.\n    - Click on **Cancel Plan**.\n\n<p><span style={{color: \"var(--tw-prose-counters)\"}}>2.</span> Wait until you exhaust your remaining credits.</p>\n\n<p><span style={{color: \"var(--tw-prose-counters)\"}}>3.</span> Sign up for the auto-renewing Hobby plan.</p>\n\n        - Head over to the <a href=\"https://railway.com/workspace/plans\" target=\"_blank\">Plans page</a>.\n        - Click **Deploy with Hobby**.\n        - Enter your billing information.\n        - Click on **Subscribe to Hobby Plan**.\n\n        You are now on the auto-renewing subscription model.\n```\n\n----------------------------------------\n\nTITLE: Executing Python Script with Environment Variable in Docker\nDESCRIPTION: Example of wrapping a Python start command in a shell for Docker deployments to support environment variable expansion.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/start-command.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n/bin/sh -c \"exec python main.py --port $PORT\"\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Astro Deployment\nDESCRIPTION: Dockerfile configuration for containerizing and deploying an Astro application on Railway.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/astro.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Use the Node alpine official image\n# https://hub.docker.com/_/node\nFROM node:lts-alpine\n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Copy the files to the container image\nCOPY package*.json ./\n\n# Install packages\nRUN npm ci\n\n# Copy local code to the container image.\nCOPY . ./\n\n# Build the app.\nRUN npm run build\n\n# Serve the app\nCMD [\"npm\", \"run\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Redeploying Latest Service Version (CLI)\nDESCRIPTION: This command redeploys the currently deployed version of a Railway service. It allows specifying the service and provides options for skipping confirmation and JSON output.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_27\n\nLANGUAGE: txt\nCODE:\n```\n~ railway redeploy --help\nRedeploy the latest deployment of a service\n\nUsage: railway redeploy [OPTIONS]\n\nOptions:\n  -s, --service <SERVICE>  The service ID/name to redeploy from\n  -y, --yes                Skip confirmation dialog\n      --json               Output in JSON format\n  -h, --help               Print help\n  -V, --version            Print version\n```\n\n----------------------------------------\n\nTITLE: Metrics Timeline Image Component - Markdown/JSX\nDESCRIPTION: React/JSX image component showing the metrics timeline with deployment indicators and commit information.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/metrics.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Image src=\"https://res.cloudinary.com/railway/image/upload/v1645223703/docs/usage-commit_fkvbqj.png\"\nalt=\"Screenshot of Metric Timeseries Commit Information\"\nlayout=\"responsive\"\nwidth={904} height={726} quality={80} />\n```\n\n----------------------------------------\n\nTITLE: Generating Requirements File for Python Dependencies\nDESCRIPTION: Command to create a requirements.txt file listing all Python dependencies in the virtual environment, used for deployment to ensure consistency.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/django.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npip freeze > requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Filtering Syntax Examples for Railway Dashboard Widgets\nDESCRIPTION: Examples of filtering syntax used to select and filter data in Railway dashboard widgets, including keyword matching, key-value pairs, and boolean operations\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/observability.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<keyword>          # Filter by exact text\n\"key phrase\"       # Filter by exact phrase\n@key:value         # Filter by key/value pair\n@attribute:value   # Filter by custom attribute\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for the Flask project.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/flask.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv env\nsource env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Deploying Angular App via Railway CLI\nDESCRIPTION: Command to deploy the Angular application to Railway using the Railway CLI.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/angular.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Clojure Luminus\nDESCRIPTION: Configuration snippet for the dev-config.edn file that sets up the PostgreSQL database connection URL for local development. The URL includes placeholders for username, password, and database name.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/luminus.md#2025-04-11_snippet_1\n\nLANGUAGE: clojure\nCODE:\n```\n :database-url \"postgresql://username:password@127.0.0.1:5432/helloworld_dev\"\n```\n\n----------------------------------------\n\nTITLE: Deploying to Railway\nDESCRIPTION: Command to deploy the application to Railway\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/rails.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Configuring Node/Nest Server for IPv6 Listening\nDESCRIPTION: Configure a Nest.js application to listen on both IPv4 and IPv6 by binding to '::'.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/private-networking.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst port = process.env.PORT || 3000;\n\nasync function bootstrap() {\n  await app.listen(port, '::');\n}\n```\n\n----------------------------------------\n\nTITLE: Monorepo Directory Structure Example\nDESCRIPTION: Example showing a typical monorepo directory structure that can cause Nixpacks build plan generation to fail due to ambiguous deployment target.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/nixpacks-was-unable-to-generate-a-build-plan.md#2025-04-11_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nThe contents of the app directory are:\n\n/frontend\n/backend\n```\n\n----------------------------------------\n\nTITLE: Setting PORT Environment Variable for Zipkin Service\nDESCRIPTION: Configures the port for serving the Zipkin UI, enabling access from a browser.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/deploy-an-otel-collector-stack.md#2025-04-11_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nPORT=9411\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Block - Template Deployment\nDESCRIPTION: Markdown content defining the structure and process for deploying Railway templates, including deployment flow, repository management, and template updates.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/deploy.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Deploy a Template\ndescription: Learn how to deploy Railway templates.\n---\n\nTemplates allow you to deploy a fully configured project that is automatically\nconnected to infrastructure.\n\nYou can find featured templates on our <a href=\"https://railway.com/templates\" target=\"_blank\">template marketplace</a>.\n\n## Template Deployment Flow\n\nTo deploy a template -\n\n- Find a template from the marketplace and click `Deploy Now`\n- If necessary, configure the required variables, and click `Deploy`\n- Upon deploy, you will be taken to your new project containing the template service(s)\n  - Services are deployed directly from the defined source in the template configuration\n  - After deploy, you can find the service source by going to the service's settings tab\n  - Should you need to make changes to the source code, you will need to [eject from the template repo](#eject-from-template-repository) to create your own copy.  See next section for more detail.\n\n*Note:  You can also deploy templates into existing projects, by clicking `+ New` from your project canvas and selecting `Template`.*\n\n## Eject from Template Repository\n\n<Banner variant=\"info\">\nAs of March 2024, the default behavior for deploying templates, is to attach to and deploy directly from the template repository.  Therefore, you will not automatically get a copy of the repository on deploy.  Follow the steps below to create a repository for yourself.\n</Banner>\n\nBy default, services deployed from a template are attached to and deployed directly from the template repository.  In some cases, you may want to have your own copy of the template repository.  \n\nFollow these steps to eject from the template repository and create a mirror in your own GitHub account.\n\n1. In the [service settings](/overview/the-basics#service-settings), under Source, find the **Upstream Repo** setting\n2. Click the `Eject` button\n3. Select the appropriate GitHub organization to create the new repository\n4. Click `Eject service`\n\n## Updatable Templates\n\nWhen you deploy any services from a template based on a GitHub repo, every time you visit the project in Railway, we will check to see if the project it is based on has been updated by its creator.\n\nIf it has received an upstream update, we will create a branch on the GitHub repo that was created when deploying the template, allowing for you to test it out within a PR deploy.\n\nIf you are happy with the changes, you can merge the pull request, and we will automatically deploy it to your production environment.\n\nIf you're curious, you can read more about how we built updatable templates in this <a href=\"https://blog.railway.com/p/updatable-starters\" target=\"_blank\">blog post</a>\n\n*Note: This feature only works for services based on GitHub repositories.  At this time, we do not have a mechanism to check for updates to Docker images from which services may be sourced.*\n```\n\n----------------------------------------\n\nTITLE: Building Distillery Release\nDESCRIPTION: Command to build the Distillery release for production deployment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/phoenix-distillery.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run deploy --prefix assets && MIX_ENV=prod mix do phx.digest, distillery.release --env=prod\n```\n\n----------------------------------------\n\nTITLE: Creating New Rails Application with PostgreSQL\nDESCRIPTION: Command to generate a new Rails application with PostgreSQL database configuration\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/rails.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrails new blog --database=postgresql\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Fiber for IPv6 Listening\nDESCRIPTION: Set up a Go Fiber application to listen on both IPv4 and IPv6 by setting the Network field to 'tcp'.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/private-networking.md#2025-04-11_snippet_13\n\nLANGUAGE: go\nCODE:\n```\napp := fiber.New(fiber.Config{\n    Network:       \"tcp\",\n    ServerHeader:  \"Fiber\",\n    AppName: \"Test App v1.0.1\",\n})\n```\n\n----------------------------------------\n\nTITLE: Setting PORT Environment Variable for Jaeger Service\nDESCRIPTION: Configures the port for serving the Jaeger UI, allowing access from a browser.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/deploy-an-otel-collector-stack.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPORT=16686\n```\n\n----------------------------------------\n\nTITLE: Installing Required Django Production Dependencies\nDESCRIPTION: Command to install Gunicorn (web server), WhiteNoise (static file serving), and psycopg (PostgreSQL adapter) for a production-ready Django application.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/django.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install gunicorn whitenoise psycopg[binary,pool]\n```\n\n----------------------------------------\n\nTITLE: Updating Pug Template to Display Database Time\nDESCRIPTION: Pug template code to display the time retrieved from the database on the index page.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/express.md#2025-04-11_snippet_4\n\nLANGUAGE: pug\nCODE:\n```\nextends layout\n\nblock content\n  h1= title\n  p Welcome to #{title}\n  p This is the time retrieved from the database:\n  p #{timeFromDB}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Django Project\nDESCRIPTION: Command to initialize a new Django project named 'liftoff' using the django-admin utility.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/django.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndjango-admin startproject liftoff\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Custom Server for IPv6\nDESCRIPTION: Set the 'hostname' option to '::' when creating a custom Next.js server to support IPv6.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/private-networking.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst port = process.env.PORT || 3000;\n\nconst app = next({\n  // ...\n  hostname: '::',\n  port: port\n});\n```\n\n----------------------------------------\n\nTITLE: Viewing Current Authenticated User (CLI)\nDESCRIPTION: This command displays information about the user currently authenticated with Railway. It provides options for JSON output and help information.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_25\n\nLANGUAGE: txt\nCODE:\n```\n~ railway whoami --help\nGet the current logged in user\n\nUsage: railway whoami [OPTIONS]\n\nOptions:\n      --json     Output in JSON format\n  -h, --help     Print help\n  -V, --version  Print version\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Hosts for Railway Deployment\nDESCRIPTION: Configuration in application.conf to allow Railway-provided domains for secure access to the deployed application.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/play.md#2025-04-11_snippet_11\n\nLANGUAGE: scala\nCODE:\n```\nplay.filters.hosts.allowed=[\".up.railway.app\"]\n```\n\n----------------------------------------\n\nTITLE: Linking to a Railway Project\nDESCRIPTION: Command to associate a project and environment with your current directory. Prompts for team, project, and environment selection.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/cli.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrailway link\n```\n\n----------------------------------------\n\nTITLE: Installing Django via pip\nDESCRIPTION: Command to install the Django framework in your Python environment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/django.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install django\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Server with IPv6 Support\nDESCRIPTION: Update the Next.js start command to bind to both IPv4 and IPv6 using the '--hostname' flag.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/private-networking.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnext start --hostname :: --port ${PORT-3000}\n```\n\n----------------------------------------\n\nTITLE: Initializing Railway Project\nDESCRIPTION: Command to initialize a new Railway project using the Railway CLI. This creates a new project and provides a link to view it in the browser.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/nuxt.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrailway init\n```\n\n----------------------------------------\n\nTITLE: Running Next.js App Locally with Railway Environment\nDESCRIPTION: Command to start your Next.js application locally with all the environment variables from your Railway project. This ensures development/production parity.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/migration/migrate-from-vercel.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrailway run\n```\n\n----------------------------------------\n\nTITLE: Creating Database for Phoenix Application\nDESCRIPTION: Command to create a database for the Phoenix application based on the configuration in config/dev.exs. Uses Ecto to set up the database.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/phoenix.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmix ecto.create\n```\n\n----------------------------------------\n\nTITLE: Configuring ioredis for IPv6 Support\nDESCRIPTION: Initialize a Redis client using ioredis with IPv6 support by specifying 'family=0' in the connection string.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/private-networking.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport Redis from 'ioredis';\n\nconst redis = new Redis(process.env.REDIS_URL + '?family=0');\n\nconst ping = await redis.ping();\n```\n\n----------------------------------------\n\nTITLE: Deploying Clojure App to Railway with CLI\nDESCRIPTION: Command to deploy the Clojure Luminus application to Railway. This uploads the application code, builds it according to configured settings (nixpacks.toml), and deploys it as a service.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/luminus.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Running Celery Beat for Scheduled Tasks in Django\nDESCRIPTION: Custom start command for the Cron Service to run Celery Beat scheduler with Django. This handles scheduled tasks with a concurrency of 3 parallel processes. The 'liftoff' should be replaced with your Django app name.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/django.md#2025-04-11_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncelery -A liftoff beat -l info --concurrency=3\n```\n\n----------------------------------------\n\nTITLE: Deploying to Railway via CLI\nDESCRIPTION: Command to deploy your application to Railway. This scans, compresses, and uploads your application files, then starts the deployment process with real-time logs.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/solid.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Creating Express App with Express Generator\nDESCRIPTION: Uses npx to run express-generator and create a new Express app with Pug as the view engine.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/express.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx express-generator --view=pug\n```\n\n----------------------------------------\n\nTITLE: Making Internal API Requests Using Private Networking\nDESCRIPTION: Example of making an HTTP request to another service within the private network using the internal DNS name and port.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/private-networking.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/fetch-secret', async (req, res) => {\n    axios.get('http://api.railway.internal:3000/secret')\n    .then(response => {\n        res.json(response.data);\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Setting PR Environment Overrides in Railway JSON\nDESCRIPTION: Configures deployment settings specifically for pull request environments.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/config-as-code.md#2025-04-11_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://railway.com/railway.schema.json\",\n  \"environments\": {\n    \"pr\": {\n      \"deploy\": {\n        \"startCommand\": \"npm run pr\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Nuxt App via Railway CLI\nDESCRIPTION: Command to deploy the Nuxt app to Railway using the Railway CLI. This uploads the app files and provides real-time deployment logs.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/nuxt.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Creating a New Remix App with NPX\nDESCRIPTION: Command to create a new Remix application using NPX. This requires Node.js to be installed on your machine.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/remix.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-remix@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Web Server Port\nDESCRIPTION: Example of configuring a Python web server to use Railway's provided PORT environment variable, with a fallback to port 5000.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/public-networking.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# python web server\nif __name__ == '__main__':\n    app.run(debug=True, port=os.getenv(\"PORT\", default=5000))\n```\n\n----------------------------------------\n\nTITLE: Deploying a Remix App to Railway with CLI\nDESCRIPTION: Command to deploy your Remix application to Railway using the CLI. This uploads your app's files and starts the deployment process.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/remix.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Configuring Syslog for Datadog Agent in Railway\nDESCRIPTION: This YAML file configures the Datadog agent to listen for syslogs on UDP port 514, setting the service name and source.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/set-up-a-datadog-agent.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlogs:\n  - type: udp\n    port: 514\n    service: \"node-app\"\n    source: syslog\n```\n\n----------------------------------------\n\nTITLE: Railway CLI Deployment\nDESCRIPTION: Command to deploy the Vue application to Railway using the CLI.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/vue.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Creating New Beego Application with Bee Tool\nDESCRIPTION: Commands to create a new Beego application and install dependencies using the Bee tool.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/beego.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbee new helloworld\ncd helloworld\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Fetching Variables for a Service with GraphQL\nDESCRIPTION: This query fetches all variables for a specific service in a specified environment. The response returns variables in a key/value object format. The serviceId parameter can be omitted to fetch shared variables for the environment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/manage-variables.md#2025-04-11_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery variables {\n  variables(\n    projectId: \"8df3b1d6-2317-4400-b267-56c4a42eed06\"\n    environmentId: \"9fb4baf0-809a-40ec-af32-751f50890802\"\n    serviceId: \"4bd252dc-c4ac-4c2e-a52f-051804292035\"\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Code to Railway\nDESCRIPTION: Pushes the local code into a service in Railway. The -d flag indicates deployment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/migrate-from-heroku.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrailway up -d\n```\n\n----------------------------------------\n\nTITLE: Creating a New Sails Application\nDESCRIPTION: This command creates a new Sails application named 'workapp' using the Sails CLI.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/sails.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsails new workapp\n```\n\n----------------------------------------\n\nTITLE: Updated Database Initialization with Environment Variables\nDESCRIPTION: Modified init function to use database URL from environment configuration.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/beego.md#2025-04-11_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n\t// set default database\n\torm.RegisterDriver(\"postgres\", orm.DRPostgres)\n\n\t// set default database\n\tdbURL, err := beego.AppConfig.String(\"db_url\")\n\tif err != nil {\n\t\tlog.Fatal(\"Error getting database URL: \", err)\n\t}\n\n\torm.RegisterDataBase(\"default\", \"postgres\", dbURL)\n\n\t// register model\n\torm.RegisterModel(new(Users))\n\n\t// create table\n\torm.RunSyncdb(\"default\", false, true)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Railway CLI via Shell Script\nDESCRIPTION: Command to install the Railway CLI using a shell script on macOS, Linux, or Windows via WSL.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/cli.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbash <(curl -fsSL cli.new)\n```\n\n----------------------------------------\n\nTITLE: Deploying a Project to Railway via CLI\nDESCRIPTION: Command to deploy the current project to Railway using the CLI. This uploads the application code, builds it, and deploys it to Railway's infrastructure.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/axum.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Initializing Distillery Release\nDESCRIPTION: Command to initialize the Distillery release configuration.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/phoenix-distillery.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmix distillery.init\n```\n\n----------------------------------------\n\nTITLE: Installing Postgres Client for Node.js\nDESCRIPTION: npm command to install the pg-promise package for PostgreSQL integration.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/express.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i pg-promise\n```\n\n----------------------------------------\n\nTITLE: Setting Database URL for Deployment\nDESCRIPTION: Configuration in application.conf to set the database URL from an environment variable for flexible deployment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/play.md#2025-04-11_snippet_10\n\nLANGUAGE: scala\nCODE:\n```\ndb.default.url=\"jdbc:${?DATABASE_URL}\"\n```\n\n----------------------------------------\n\nTITLE: Unsupported Language Example (Nim)\nDESCRIPTION: Example showing a project structure using Nim, an unsupported language in Nixpacks.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/nixpacks-was-unable-to-generate-a-build-plan.md#2025-04-11_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nThe contents of the app directory are:\n\nmain.nim\nnimble.nimble\n```\n\n----------------------------------------\n\nTITLE: Railway Domain Command Usage\nDESCRIPTION: Command for managing custom domains and generating Railway-provided domains for services.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\n~ railway domain --help\nAdd a custom domain or generate a railway provided domain for a service\n\nUsage: railway domain [OPTIONS] [DOMAIN]\n\nArguments:\n  [DOMAIN]  Optionally, specify a custom domain to use. If not specified, a domain will be generated\n\nOptions:\n  -p, --port <PORT>        The port to connect to the domain\n  -s, --service <SERVICE>  The name of the service to generate the domain for\n      --json               Output in JSON format\n  -h, --help               Print help (see more with '--help')\n  -V, --version            Print version\n```\n\n----------------------------------------\n\nTITLE: Adding Axum and Tokio Dependencies to Rust Project\nDESCRIPTION: Commands to add the Axum web framework and Tokio async runtime (with full features) as dependencies to a Rust project. These are the core dependencies needed for an Axum web application.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/axum.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo add axum\ncargo add tokio --features full\n```\n\n----------------------------------------\n\nTITLE: Importing the os Module in Django Settings\nDESCRIPTION: Code to add the os module import to the Django settings file, necessary for environment variable handling and file path operations.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/django.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom pathlib import Path\n```\n\n----------------------------------------\n\nTITLE: Creating Database for Phoenix App\nDESCRIPTION: Command to create the database for the Phoenix application using Ecto.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/phoenix-distillery.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmix ecto.create\n```\n\n----------------------------------------\n\nTITLE: Setting Dockerfile Path in Railway JSON\nDESCRIPTION: Specifies the location of a non-standard Dockerfile for the build process.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/config-as-code.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://railway.com/railway.schema.json\",\n  \"build\": {\n    \"dockerfilePath\": \"Dockerfile.backend\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening the Railway Project Canvas in Browser\nDESCRIPTION: Opens the Railway Project Canvas in the default web browser. This command launches the browser and navigates to the project's canvas page on the Railway dashboard.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/quick-start.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrailway open\n```\n\n----------------------------------------\n\nTITLE: Adding Node SSR Adapter\nDESCRIPTION: Command to add the Node adapter for enabling server-side rendering in Astro.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/astro.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx astro add node\n```\n\n----------------------------------------\n\nTITLE: Setting LOG_CHANNEL Environment Variable for Laravel on Railway\nDESCRIPTION: A command to set the LOG_CHANNEL environment variable to 'errorlog' for Laravel applications deployed on Railway. This ensures that logs appear in Railway's console due to the ephemeral filesystem.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/laravel.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrailway variables --set \"LOG_CHANNEL=errorlog\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Scala Application via CLI\nDESCRIPTION: Command to deploy the Scala application to Railway. This uploads the app files and initiates the deployment process.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/play.md#2025-04-11_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Railway Docs Command Usage\nDESCRIPTION: Simple command to open Railway documentation in the default browser.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\n~ railway docs --help\nOpen Railway Documentation in default browser\n\nUsage: railway docs [OPTIONS]\n\nOptions:\n      --json     Output in JSON format\n  -h, --help     Print help\n  -V, --version  Print version\n```\n\n----------------------------------------\n\nTITLE: Installing Gunicorn Web Server\nDESCRIPTION: Command to install Gunicorn, a production-ready web server for Python applications.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/flask.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install gunicorn\n```\n\n----------------------------------------\n\nTITLE: Starting a Node.js Application\nDESCRIPTION: Basic command to start a Node.js application where main.js is the entry point file. This could be substituted with other common entry points like index.js, server.js, or app.js.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/no-start-command-could-be-found.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode main.js\n```\n\n----------------------------------------\n\nTITLE: Railway CLI Project Initialization\nDESCRIPTION: Command to initialize a new Railway project in the Vue app directory.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/vue.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrailway init\n```\n\n----------------------------------------\n\nTITLE: Making HTTPS POST Request with curl\nDESCRIPTION: Example of how to properly make a POST request to a Railway-hosted service using HTTPS to avoid the 405 Method Not Allowed error. The command explicitly uses the HTTPS protocol to prevent automatic redirection from HTTP to HTTPS.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/405-method-not-allowed.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://your-app.railway.app/api\n```\n\n----------------------------------------\n\nTITLE: Starting Rails Server Locally\nDESCRIPTION: Command to start the Rails development server\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/rails.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails server\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Adapter for Sails\nDESCRIPTION: This command installs the PostgreSQL adapter for Sails and saves it as a dependency in the project.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/sails.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install sails-postgresql --save\n```\n\n----------------------------------------\n\nTITLE: Using Reference Variables for Internal Service Communication\nDESCRIPTION: Demonstrate how to use Railway reference variables to dynamically set the internal service URL and port for communication.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/private-networking.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/fetch-secret', async (req, res) => {\n    axios.get(`${process.env.BACKEND_URL}/secret`)\n    .then(response => {\n        res.json(response.data);\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Running Beego Application Locally\nDESCRIPTION: Command to start the Beego application in development mode using the Bee tool.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/beego.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbee run\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Fastify Server\nDESCRIPTION: Commands to initialize an npm project and install the required packages for a Fastify server with ETag support.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/add-a-cdn-using-cloudfront.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnpm init -y\nnpm i fastify @fastify/etag\n```\n\n----------------------------------------\n\nTITLE: Deploying Local Directory Using Railway CLI\nDESCRIPTION: A step-by-step guide showing the CLI commands needed to deploy a local directory to a Railway service. This includes linking to the project and deploying the directory contents.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/services.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrailway link\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Starting NestJS Application Locally\nDESCRIPTION: Command to start the NestJS application in development mode.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/nest.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for SolidJS App\nDESCRIPTION: Command to install all required dependencies for the SolidJS application as defined in the package.json file.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/solid.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running a Rust Application Locally\nDESCRIPTION: Command to compile and run a Rust application locally, which will install dependencies and launch the server on localhost:8000.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/rocket.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS CDK Project for CloudFront\nDESCRIPTION: Commands to initialize a new AWS CDK project for CloudFront and install the required dependencies.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/add-a-cdn-using-cloudfront.md#2025-04-11_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ncdk init app --language typescript\nnpm install @aws-cdk/aws-cloudfront @aws-cdk aws-cloudfront-origins @aws-cdk/core\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Migration File\nDESCRIPTION: SQL script to create the employees table as part of the database migration process.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/play.md#2025-04-11_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE employee (\n  id VARCHAR(20) PRIMARY KEY,\n  first_name VARCHAR(30),\n  last_name VARCHAR(30),\n  email VARCHAR(30),\n  admin BOOLEAN\n);\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot Application Locally with Maven Wrapper\nDESCRIPTION: Command to run a Spring Boot application locally using the Maven wrapper script. This executes the spring-boot:run goal which compiles the application and runs it in an embedded container.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/spring-boot.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./mvnw spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Clojure Project\nDESCRIPTION: Command to download and install all dependencies specified in the project.clj file. This ensures that all required libraries, including the newly added Cheshire, are available in the project.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/luminus.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nlein deps\n```\n\n----------------------------------------\n\nTITLE: Generating Requirements File\nDESCRIPTION: Command to create a requirements.txt file listing all Python dependencies for the project.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/flask.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip freeze > requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Adding PostgreSQL Driver Dependency\nDESCRIPTION: Addition to build.sbt file to include the PostgreSQL JDBC driver as a project dependency.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/play.md#2025-04-11_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nlibraryDependencies += \"org.postgresql\" % \"postgresql\" % \"42.7.4\" // Always use the latest stable version\n```\n\n----------------------------------------\n\nTITLE: Running Nuxt App Locally\nDESCRIPTION: Command to start the Nuxt development server locally. This runs the app on http://localhost:3000.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/nuxt.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Adding PostgreSQL Database to Railway Project\nDESCRIPTION: CLI command to add a PostgreSQL database service to a Railway project. This will provision a new managed database that can be used by the Clojure application.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/luminus.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrailway add -d postgres\n```\n\n----------------------------------------\n\nTITLE: Running a Remix App in Development Mode\nDESCRIPTION: Command to start the Vite development server for a Remix application on localhost:5173.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/remix.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Flask App with Gunicorn\nDESCRIPTION: Command to serve the Flask application using Gunicorn web server.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/flask.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngunicorn main:app\n```\n\n----------------------------------------\n\nTITLE: Updating Project Dependencies\nDESCRIPTION: Command to download the PostgreSQL driver and update any dependencies for the project.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/play.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsbt update\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Datadog Agent in Railway\nDESCRIPTION: These environment variables are required for the Datadog agent service in Railway, including the API key, hostname, and site.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/set-up-a-datadog-agent.md#2025-04-11_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nDD_API_KEY=<YOUR_API_KEY>\nDD_HOSTNAME=${{RAILWAY_PRIVATE_DOMAIN}}\nDD_SITE=<YOUR_DATADOG_SITE>\n```\n\n----------------------------------------\n\nTITLE: Starting Astro Development Server\nDESCRIPTION: Command to start the Astro development server locally.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/astro.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Railway Project with CLI\nDESCRIPTION: Command to initialize a Railway project for the Phoenix application. This creates a new project linked to your Railway account.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/phoenix.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrailway init\n```\n\n----------------------------------------\n\nTITLE: Metrics Page Image Component - Markdown/JSX\nDESCRIPTION: React/JSX image component for displaying the main metrics page screenshot, showing resource usage graphs and metrics interface.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/metrics.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Image src=\"https://res.cloudinary.com/railway/image/upload/v1645223702/docs/metrics_angr0b.png\"\nalt=\"Screenshot of Metrics Page\"\nlayout=\"intrinsic\"\nwidth={1576} height={1100} quality={80} />\n```\n\n----------------------------------------\n\nTITLE: Linking Local Environment to Railway Project\nDESCRIPTION: Command to connect your local development environment to your Railway project. This enables access to project resources and environment variables locally.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/migration/migrate-from-vercel.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrailway link\n```\n\n----------------------------------------\n\nTITLE: Starting a Nuxt.js Application\nDESCRIPTION: Command to start a Nuxt.js application in production mode using its built-in Nitro server. This targets the server output generated during the build process.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/no-start-command-could-be-found.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode .output/server/index.mjs\n```\n\n----------------------------------------\n\nTITLE: Creating a New Angular App\nDESCRIPTION: Command to create a new Angular application using the Angular CLI. This sets up a new project with the name 'gratitudeapp'.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/angular.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng new gratitudeapp\n```\n\n----------------------------------------\n\nTITLE: Initializing a Railway Project with CLI\nDESCRIPTION: Command to initialize a new Railway project in your Django application directory using the Railway CLI.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/django.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrailway init\n```\n\n----------------------------------------\n\nTITLE: Adding Postgres Database Service via CLI\nDESCRIPTION: Command to add a Postgres database service to the Railway project. This creates a new database instance for the application.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/play.md#2025-04-11_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrailway add -d postgres\n```\n\n----------------------------------------\n\nTITLE: Executing Query with Account Token in cURL\nDESCRIPTION: A cURL command example for executing a GraphQL query to fetch user details using an account token. This query returns the authenticated user's name and email address.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/public-api.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://backboard.railway.com/graphql/v2 \\\n  --header 'Authorization: Bearer <API_TOKEN_GOES_HERE>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\"query\":\"query { me { name email } }\"}'\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nuxt App\nDESCRIPTION: Command to create a new Nuxt app using npx. This initializes a new Nuxt project in a directory named 'helloworld'.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/nuxt.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest init helloworld\n```\n\n----------------------------------------\n\nTITLE: Initializing a Railway project using the CLI\nDESCRIPTION: Command to initialize a new Railway project from an existing SvelteKit application directory. This creates a new project on Railway and links the local directory to it.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/sveltekit.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrailway init\n```\n\n----------------------------------------\n\nTITLE: Initializing Railway Project via CLI\nDESCRIPTION: Command to initialize a new Railway project in the Luminus app directory. This creates a new project and provides a link to view it in the browser.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/play.md#2025-04-11_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrailway init\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rust Binary Project with Cargo\nDESCRIPTION: Command to create a new binary-based Cargo project in a 'helloworld' directory. This is the first step in setting up a new Rust Axum application.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/axum.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo new helloworld --bin\n```\n\n----------------------------------------\n\nTITLE: Creating Hello World View Template\nDESCRIPTION: Simple ERB template for the Hello World page\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/rails.md#2025-04-11_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n<h1>Hello World</h1>\n\n<p> This is a Rails app running on Railway</p>\n```\n\n----------------------------------------\n\nTITLE: Initializing a Railway Project with CLI\nDESCRIPTION: Uses the Railway CLI to create a new empty project on Railway. This command initializes a new project with the name provided, which will be used for any subsequent commands.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/quick-start.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrailway init\n```\n\n----------------------------------------\n\nTITLE: Initializing a Railway Project via CLI\nDESCRIPTION: Command to initialize a new Railway project in your current directory. This starts the interactive setup process for creating a new Railway project linked to your application.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/solid.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrailway init\n```\n\n----------------------------------------\n\nTITLE: Initializing Railway Project via CLI\nDESCRIPTION: Command to initialize a new Railway project in your Phoenix application directory\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/phoenix-distillery.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrailway init\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Angular App Deployment\nDESCRIPTION: Dockerfile configuration for building and serving an Angular application on Railway. It uses a Node.js Alpine image, installs dependencies, builds the app, and sets up the start command.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/angular.md#2025-04-11_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use the Node alpine official image\n# https://hub.docker.com/_/node\nFROM node:lts-alpine\n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Copy the files to the container image\nCOPY package*.json ./\n\n# Install packages\nRUN npm ci\n\n# Copy local code to the container image.\nCOPY . ./\n\n# Build the app.\nRUN npm run build\n\n# Serve the app\nCMD [\"npm\", \"run\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a New Luminus App with Postgres and Immutant Server in Clojure\nDESCRIPTION: Command to generate a new Luminus application with PostgreSQL database support and the production-ready Immutant web server. This creates a complete application structure in a directory named 'helloworld'.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/luminus.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlein new luminus helloworld +postgres +immutant\n```\n\n----------------------------------------\n\nTITLE: Initializing a Railway Project with CLI\nDESCRIPTION: Command to initialize a new Railway project from your local Spring Boot application directory. This creates a new project in Railway and links your local directory to it.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/spring-boot.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrailway init\n```\n\n----------------------------------------\n\nTITLE: Deploying Application to Railway via CLI\nDESCRIPTION: Command to deploy your Phoenix application to Railway, which scans, compresses and uploads your app files\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/phoenix-distillery.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Logging in to Railway CLI\nDESCRIPTION: Authenticates the Railway CLI with your Railway account. This command opens a browser to complete the authentication process.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/migrate-from-heroku.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrailway login\n```\n\n----------------------------------------\n\nTITLE: MySQL Environment Variables\nDESCRIPTION: Environment variables available for connecting to standalone MySQL instance from another service.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/mysql.md#2025-04-11_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nMYSQLHOST\nMYSQLPORT\nMYSQLUSER\nMYSQLPASSWORD\nMYSQLDATABASE\nMYSQL_URL\n```\n\n----------------------------------------\n\nTITLE: Railway Login Command Usage\nDESCRIPTION: Command for logging into Railway account with support for browserless login.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_13\n\nLANGUAGE: txt\nCODE:\n```\n~ railway login --help\nLogin to your Railway account\n\nUsage: railway login [OPTIONS]\n\nOptions:\n  -b, --browserless  Browserless login\n      --json         Output in JSON format\n  -h, --help         Print help\n  -V, --version      Print version\n```\n\n----------------------------------------\n\nTITLE: Deploying Sails App Using Railway CLI\nDESCRIPTION: This command deploys the Sails application to Railway using the Railway CLI.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/sails.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Initializing a Railway Project with CLI\nDESCRIPTION: Command to initialize a new Railway project from within a local Clojure Luminus application directory. This is the first step in deploying an app via the Railway CLI.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/luminus.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrailway init\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics and Logs for FastAPI Python Application\nDESCRIPTION: This Python code sets up logging and metrics collection for a FastAPI application using DataDog. It configures SysLog for logging and StatsD for metrics, and includes example routes that demonstrate how to use these features.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/set-up-a-datadog-agent.md#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport logging.handlers\nfrom fastapi import FastAPI\nfrom datadog import initialize, statsd, DogStatsd\nimport logging\nimport random\nimport os\nimport json_log_formatter\n\n## Configuration for sending logs\nformatter = json_log_formatter.JSONFormatter()\n\njson_handler = logging.handlers.SysLogHandler(address=(os.getenv(\"DD_AGENT\"), os.getenv(\"DD_AGENT_SYSLOG_PORT\")))\njson_handler.setFormatter(formatter)\n\nlogger = logging.getLogger('python-app')\nlogger.addHandler(json_handler)\nlogger.setLevel(logging.INFO)\n\n\n# Configuration for sending metrics\nconfig = {\n    \"api_key\": os.getenv(\"DD_API_KEY\"),\n    \"statsd_host\": os.getenv(\"DD_AGENT_HOST\"),\n    \"statsd_port\": os.getenv(\"DD_AGENT_STATSD_PORT\"),\n    \"statsd_constant_tags\": [\"env:prod\"],\n}\n\ninitialize(**config)\n\napp = FastAPI()\n\n# Use DogStatsd client for more custom metrics\ndog_statsd = DogStatsd()\n\n@app.get(\"/\")\nasync def root():\n    # Increment a simple counter\n    statsd.increment('example_app.page.views')\n\n    # Record a random gauge value\n    gauge_value = random.uniform(1, 100)\n    statsd.gauge('example_app.random_value', gauge_value)\n\n    # Log a message\n    logger.info(f\"Page viewed, gauge value: {gauge_value}\")\n\n    # Custom metric using DogStatsd\n    dog_statsd.histogram('example_app.response_time', random.uniform(50, 300))\n\n    return {\"message\": \"Hello World\"}\n\n# Additional route for testing\n@app.get(\"/test\")\nasync def test():\n    # Custom metrics and logging\n    statsd.increment('example_app.test.endpoint.hits')\n    test_value = random.randint(1, 10)\n    dog_statsd.gauge('example_app.test.value', test_value)\n    logger.info(f\"Test endpoint hit, value: {test_value}\")\n\n    return {\"test_value\": test_value}\n```\n\n----------------------------------------\n\nTITLE: Installing SvelteKit Node adapter for deployment\nDESCRIPTION: Command to install the SvelteKit Node adapter as a development dependency. This adapter is required to prepare the SvelteKit application for deployment on Node.js environments like Railway.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/sveltekit.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @sveltejs/adapter-node\n```\n\n----------------------------------------\n\nTITLE: Starting Vue Development Server\nDESCRIPTION: Command to start the Vite development server for local Vue app development.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/vue.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Generating a Public URL for Railway Service\nDESCRIPTION: CLI command to generate a public domain for accessing the deployed Clojure Luminus application. This creates a permanent URL endpoint for the application service.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/luminus.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrailway domain\n```\n\n----------------------------------------\n\nTITLE: Creating a New Phoenix Application\nDESCRIPTION: Command to create a new Phoenix application named 'helloworld_distillery'.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/phoenix-distillery.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmix phx.new helloworld_distillery\n```\n\n----------------------------------------\n\nTITLE: Configuring Node/Express Server Port and Host\nDESCRIPTION: Sets up an Express server to listen on the correct port (from environment variable) and host (0.0.0.0) for Railway deployment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/application-failed-to-respond.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst port = process.env.PORT || 3000;\n\napp.listen(port, \"0.0.0.0\", function () {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Rails Controller\nDESCRIPTION: Command to create a new HelloWorld controller with an index action\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/rails.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrails g controller HelloWorld index\n```\n\n----------------------------------------\n\nTITLE: Creating Flask Project Directory\nDESCRIPTION: Commands to create a new project directory for a Flask application and navigate into it.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/flask.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir flaskproject\ncd flaskproject\n```\n\n----------------------------------------\n\nTITLE: Railway Add Command Usage\nDESCRIPTION: Add service command allows adding databases and services to a Railway project with options for specifying database type, service name, repo linking, and environment variables.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n~ railway add --help\nAdd a service to your project\n\nUsage: railway add [OPTIONS]\n\nOptions:\n  -d, --database <DATABASE>\n          The name of the database to add\n\n          [possible values: postgres, mysql, redis, mongo]\n\n  -s, --service [<SERVICE>]\n          The name of the service to create (leave blank for randomly generated)\n\n  -r, --repo <REPO>\n          The repo to link to the service\n\n  -i, --image <IMAGE>\n          The docker image to link to the service\n\n  -v, --variables <VARIABLES>\n          The \"{key}={value}\" environment variable pair to set the service variables. Example:\n\n          railway add --service --variables \"MY_SPECIAL_ENV_VAR=1\" --variables \"BACKEND_PORT=3000\"\n\n      --json\n          Output in JSON format\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -V, --version\n          Print version\n```\n\n----------------------------------------\n\nTITLE: Assigning a Domain to Railway Service\nDESCRIPTION: Assigns a domain to the deployed service, making it accessible over the internet.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/migrate-from-heroku.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrailway domain\n```\n\n----------------------------------------\n\nTITLE: Creating a new SvelteKit application with Vite\nDESCRIPTION: Command to create a new SvelteKit application using Vite. This initializes a new project with the SvelteKit demo template and allows configuration of TypeScript, linting, and styling options.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/sveltekit.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx sv create svelteapp\n```\n\n----------------------------------------\n\nTITLE: Adding a MongoDB Database in Railway\nDESCRIPTION: This snippet illustrates the process of adding a new MongoDB database in Railway's interface. It's done by clicking the plus icon next to the top dropdown in the Collections View.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/database-view.md#2025-04-11_snippet_1\n\nLANGUAGE: mongodb\nCODE:\n```\nuse new_database_name\ndb.createCollection(\"new_collection_name\")\n```\n\n----------------------------------------\n\nTITLE: Railway Deploy Command Usage\nDESCRIPTION: Command for deploying templates to Railway projects with options for template specification and variable configuration.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\nrailway deploy --help\nProvisions a template into your project\n\nUsage: railway deploy [OPTIONS]\n\nOptions:\n  -t, --template <TEMPLATE>  The code of the template to deploy\n  -v, --variable <VARIABLE>  The \"{key}={value}\" environment variable pair to set the template variables\n          To specify the variable for a single service prefix it with \"{service}.\" Example:\n          bash railway deploy -t postgres -v \"MY_SPECIAL_ENV_VAR=1\" -v \"Backend.Port=3000\"\n\n      --json                 Output in JSON format\n  -h, --help                 Print help (see a summary with '-h')\n  -V, --version              Print version\n```\n\n----------------------------------------\n\nTITLE: Installing Phoenix Application Generator\nDESCRIPTION: Command to install the Phoenix application generator using mix.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/phoenix-distillery.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmix archive.install hex phx_new\n```\n\n----------------------------------------\n\nTITLE: Making API Requests with Personal or Team Token\nDESCRIPTION: Example of making an authenticated GraphQL request using the Authorization header with a personal or team token. This command retrieves the user's name and email information.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/public-api.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://backboard.railway.com/graphql/v2 \\\n  --header 'Authorization: Bearer <API_TOKEN_GOES_HERE>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\"query\":\"query { me { name email } }\"}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment for Django\nDESCRIPTION: Command to create a virtual environment for isolating Python dependencies for your Django project.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/django.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv env\n```\n\n----------------------------------------\n\nTITLE: Opening Railway Project in Browser\nDESCRIPTION: Opens the Railway project in the default web browser, allowing access to the project canvas for further configuration.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/migrate-from-heroku.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrailway open\n```\n\n----------------------------------------\n\nTITLE: Railway Environment Command Usage\nDESCRIPTION: Commands for managing Railway environments including creation, deletion, and linking.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_7\n\nLANGUAGE: txt\nCODE:\n```\n~ railway [env]ironment --help\nCreate, delete or link an environment\n\nUsage: railway environment [OPTIONS] [ENVIRONMENT] [COMMAND]\n\nCommands:\n  new     Create a new environment\n  delete  Delete an environment [aliases: remove, rm]\n  help    Print this message or the help of the given subcommand(s)\n\nArguments:\n  [ENVIRONMENT]  The environment to link to\n\nOptions:\n      --json     Output in JSON format\n  -h, --help     Print help\n  -V, --version  Print version\n```\n\n----------------------------------------\n\nTITLE: Accessing the Railway GraphQL API Endpoint\nDESCRIPTION: The URL endpoint for the Railway public GraphQL API. Use this endpoint to send all your GraphQL queries and mutations.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/public-api.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://backboard.railway.com/graphql/v2\n```\n\n----------------------------------------\n\nTITLE: Setting Cron Schedule in Railway JSON\nDESCRIPTION: Configures the cron schedule for automated service execution.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/config-as-code.md#2025-04-11_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://railway.com/railway.schema.json\",\n  \"deploy\": {\n    \"cronSchedule\": \"*/15 * * * *\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Railway Environment Delete Command Usage\nDESCRIPTION: Command for deleting environments with confirmation dialog option.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_9\n\nLANGUAGE: txt\nCODE:\n```\n~ railway [env]ironment delete --help\nDelete an environment\n\nUsage: railway environment delete [OPTIONS] [ENVIRONMENT]\n\nArguments:\n  [ENVIRONMENT]  The environment to delete\n\nOptions:\n  -y, --yes      Skip confirmation dialog\n      --json     Output in JSON format\n  -h, --help     Print help\n  -V, --version  Print version\n```\n\n----------------------------------------\n\nTITLE: Adding JSON Schema Reference to Railway Configuration\nDESCRIPTION: A simple JSON snippet that shows how to include the Railway JSON schema reference in your railway.json file. This enables editor autocomplete and documentation in supporting editors like VSCode.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/config-as-code.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://railway.com/railway.schema.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Provider in Nixpacks TOML\nDESCRIPTION: Defines build providers in a Nixpacks configuration file.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/config-as-code.md#2025-04-11_snippet_18\n\nLANGUAGE: toml\nCODE:\n```\nproviders = [\"...\", \"python\"]\n```\n\n----------------------------------------\n\nTITLE: Railway Init Command Usage\nDESCRIPTION: Command for creating new Railway projects from the CLI with project naming option.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_10\n\nLANGUAGE: txt\nCODE:\n```\n~ railway init --help\nCreate a new project\n\nUsage: railway init [OPTIONS]\n\nOptions:\n  -n, --name <NAME>  Project name\n      --json         Output in JSON format\n  -h, --help         Print help\n  -V, --version      Print version\n```\n\n----------------------------------------\n\nTITLE: Generating Public URL for Scala App via CLI\nDESCRIPTION: Command to generate a public URL for the deployed Scala application, making it accessible on the internet.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/play.md#2025-04-11_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nrailway domain\n```\n\n----------------------------------------\n\nTITLE: Custom Install Command with Nixpacks Plan\nDESCRIPTION: Configures a custom installation command using Nixpacks plan configuration.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/config-as-code.md#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://railway.com/railway.schema.json\",\n  \"build\": {\n    \"nixpacksPlan\": {\n      \"phases\": {\n        \"install\": {\n          \"dependsOn\": [\"setup\"],\n          \"cmds\": [\"npm install --legacy-peer-deps\"]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Railway List Command Usage\nDESCRIPTION: Command for listing all projects in a Railway account.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_12\n\nLANGUAGE: txt\nCODE:\n```\n~ railway list --help\nList all projects in your Railway account\n\nUsage: railway list [OPTIONS]\n\nOptions:\n      --json     Output in JSON format\n  -h, --help     Print help\n  -V, --version  Print version\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Secret for Deployment\nDESCRIPTION: Configuration in application.conf to set the application secret from an environment variable for secure deployment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/play.md#2025-04-11_snippet_9\n\nLANGUAGE: scala\nCODE:\n```\nplay.http.secret.key=${?APPLICATION_SECRET}\n```\n\n----------------------------------------\n\nTITLE: Configuring Release Environment\nDESCRIPTION: Elixir code snippet for configuring the release environment in the rel/config.exs file.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/phoenix-distillery.md#2025-04-11_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\nenvironment :prod do\n  set include_erts: true\n  set include_src: false\n  set cookie: :\"Jo2*~U0C1x!*E}!o}W*(mx=pzd[XWG[bW)T~_Kjy3eJuEJ;M&!eqj7AUR1*9Vw]!\"\n  set config_providers: [\n    {Distillery.Releases.Config.Providers.Elixir, [\"${RELEASE_ROOT_DIR}/etc/config.exs\"]}\n  ]\n  set overlays: [\n    {:copy, \"rel/config/config.exs\", \"etc/config.exs\"}\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Railway Dockerfile Detection Message\nDESCRIPTION: The log message that Railway displays when it successfully detects and uses a Dockerfile during the service build process.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/dockerfiles.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n==========================\nUsing detected Dockerfile!\n==========================\n```\n\n----------------------------------------\n\nTITLE: Railway Logout Command Usage\nDESCRIPTION: Command for logging out of Railway account.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_14\n\nLANGUAGE: txt\nCODE:\n```\n~ railway logout --help\nLogout of your Railway account\n\nUsage: railway logout [OPTIONS]\n\nOptions:\n      --json     Output in JSON format\n  -h, --help     Print help\n  -V, --version  Print version\n```\n\n----------------------------------------\n\nTITLE: Connecting to Postgres Database via Private Network in Bash\nDESCRIPTION: This code snippet shows the connection string format for connecting to a Postgres database service over Railway's private network. It assumes the database is listening on port 5432.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/build-a-database-service.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npostgresql://postgres:password@postgres.railway.internal:5432/railway\n```\n\n----------------------------------------\n\nTITLE: Railway Dockerfile Detection Message\nDESCRIPTION: Shell output showing Railway's automatic Dockerfile detection during build process\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/dockerfiles.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n==========================\nUsing detected Dockerfile!\n==========================\n```\n\n----------------------------------------\n\nTITLE: Railway Open Command Usage\nDESCRIPTION: Command for opening Railway project dashboard in default browser.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_16\n\nLANGUAGE: txt\nCODE:\n```\n~ railway open --help\nOpen your project dashboard\n\nUsage: railway open [OPTIONS]\n\nOptions:\n      --json     Output in JSON format\n  -h, --help     Print help\n  -V, --version  Print version\n```\n\n----------------------------------------\n\nTITLE: Starting Gunicorn Server\nDESCRIPTION: Launches a Gunicorn server which automatically handles correct port and host configuration.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/application-failed-to-respond.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngunicorn main:app\n```\n\n----------------------------------------\n\nTITLE: Configuring Uvicorn Web Server\nDESCRIPTION: Procfile configuration for running the FastAPI application using Uvicorn web server, with dynamic port binding for Railway deployment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/deploy-and-monitor-mongo.md#2025-04-11_snippet_1\n\nLANGUAGE: procfile\nCODE:\n```\nweb: uvicorn main:app --host 0.0.0.0 --port ${PORT:-5000}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Dockerfile Path\nDESCRIPTION: Examples of setting RAILWAY_DOCKERFILE_PATH variable to specify custom Dockerfile locations\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/dockerfiles.md#2025-04-11_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nRAILWAY_DOCKERFILE_PATH=Dockerfile.origin\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nRAILWAY_DOCKERFILE_PATH=/build/Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Running Flask Application Locally\nDESCRIPTION: Command to run the Flask application using the flask command-line interface.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/flask.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflask --app helloworld run\n```\n\n----------------------------------------\n\nTITLE: Installing Phoenix Application Generator\nDESCRIPTION: Command to install the Phoenix application generator using Hex package manager. This is required to create new Phoenix applications.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/phoenix.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmix archive.install hex phx_new\n```\n\n----------------------------------------\n\nTITLE: Python Cache Mount Example\nDESCRIPTION: Specific example of cache mount configuration for Python pip cache directory\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/dockerfiles.md#2025-04-11_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n--mount=type=cache,id=s/<service id>-/root/cache/pip,target=/root/.cache/pip\n```\n\n----------------------------------------\n\nTITLE: Running a Rust Application Locally with Cargo\nDESCRIPTION: Command to build and run a Rust application locally using Cargo. This compiles the project and starts the server, making it accessible at http://localhost:3000.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/axum.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Railway Completion Command Usage\nDESCRIPTION: Generate shell completion scripts for various shells including bash, elvish, fish, powershell, and zsh.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n~ railway completion --help\nGenerate completion script\n\nUsage: railway completion [OPTIONS] <SHELL>\n\nArguments:\n  <SHELL>  [possible values: bash, elvish, fish, powershell, zsh]\n\nOptions:\n      --json     Output in JSON format\n  -h, --help     Print help\n  -V, --version  Print version\n```\n\n----------------------------------------\n\nTITLE: Railway Logs Command Usage\nDESCRIPTION: Command for viewing deployment and build logs.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_15\n\nLANGUAGE: txt\nCODE:\n```\n~ railway logs --help\nView the most-recent deploy's logs\n\nUsage: railway logs [OPTIONS]\n\nOptions:\n  -d, --deployment  Show deployment logs\n  -b, --build       Show build logs\n      --json        Output in JSON format\n  -h, --help        Print help\n  -V, --version     Print version\n```\n\n----------------------------------------\n\nTITLE: Running a SvelteKit application in development mode\nDESCRIPTION: Command to start the Vite development server for a SvelteKit application, which provides hot module replacement and serves the application locally on port 5173.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/sveltekit.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Exit Status Code Example\nDESCRIPTION: Demonstrates the exit status code requirement for pre-deploy commands, where 0 indicates success and non-zero indicates failure.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/pre-deploy-command.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n0\n```\n\n----------------------------------------\n\nTITLE: Railway Link Command Usage\nDESCRIPTION: Command for connecting to existing Railway projects with options for environment, project, service, and team specification.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_11\n\nLANGUAGE: txt\nCODE:\n```\n~ railway link --help\nAssociate existing project with current directory, may specify projectId as an argument\n\nUsage: railway link [OPTIONS]\n\nOptions:\n  -e, --environment <ENVIRONMENT>  Environment to link to\n  -p, --project <PROJECT>          Project to link to\n  -s, --service <SERVICE>          The service to link to\n  -t, --team <TEAM>                The team to link to. Use \"personal\" for your personal account\n      --json                       Output in JSON format\n  -h, --help                       Print help\n  -V, --version                    Print version\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rust Project with Cargo\nDESCRIPTION: Command to create a new binary-based Cargo project in a 'helloworld' directory using the Rust package manager.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/rocket.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo new helloworld --bin\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Scala Play Application\nDESCRIPTION: Dockerfile configuration for building and running a Scala Play application on Railway. It uses the sbtscala/scala-sbt base image, copies the app code, builds it, and specifies the run command.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/play.md#2025-04-11_snippet_17\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use the Scala sbt official image\n# https://hub.docker.com/r/sbtscala/scala-sbt/tags\nFROM sbtscala/scala-sbt:eclipse-temurin-21.0.5_11_1.10.5_3.5.2\n\n# Create and change to the app directory.\nWORKDIR /app\n\n# Copy local code to the container image.\nCOPY . ./\n\n# Build the app.\nRUN sbt stage\n\n# Run the app\nCMD [\"./target/universal/stage/bin/main\"]\n```\n\n----------------------------------------\n\nTITLE: Railway Environment New Command Usage\nDESCRIPTION: Command for creating new environments with options for duplication and variable assignment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_8\n\nLANGUAGE: txt\nCODE:\n```\n~ railway [env]ironment new --help\nCreate a new environment\n\nUsage: railway environment new [OPTIONS] [NAME]\n\nArguments:\n  [NAME]\n          The name of the environment to create\n\nOptions:\n  -d, --duplicate <DUPLICATE>\n          The name of the environment to duplicate\n\n          [aliases: copy]\n          [short aliases: c]\n\n  -v, --service-variable <SERVICE> <VARIABLE>\n          Variables to assign in the new environment\n\n          Note: This will only work if the environment is being duplicated, and that the service specified is present in the original environment\n\n          Examples:\n\n          railway environment new foo --duplicate bar --service-variable <service name/service uuid> BACKEND_PORT=3000\n\n      --json\n          Output in JSON format\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -V, --version\n          Print version\n```\n\n----------------------------------------\n\nTITLE: Initializing a Railway Project with CLI\nDESCRIPTION: Command to initialize a new Railway project in the current directory using the Railway CLI tool.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/rocket.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrailway init\n```\n\n----------------------------------------\n\nTITLE: Activating the Python Virtual Environment\nDESCRIPTION: Command to activate the virtual environment in Unix-based systems. For Windows, a different command is noted in the surrounding text.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/django.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsource env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Railway Down Command Usage\nDESCRIPTION: Command for removing the most recent deployment with confirmation dialog option.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\n~ railway down --help\nRemove the most recent deployment\n\nUsage: railway down [OPTIONS]\n\nOptions:\n  -y, --yes      Skip confirmation dialog\n      --json     Output in JSON format\n  -h, --help     Print help\n  -V, --version  Print version\n```\n\n----------------------------------------\n\nTITLE: Deploying an Application to Railway with CLI\nDESCRIPTION: Command to deploy the current application to Railway using the CLI, which scans, compresses, and uploads the app files.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/rocket.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Command in Railway JSON\nDESCRIPTION: Specifies the build command for the Nixpacks builder.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/config-as-code.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://railway.com/railway.schema.json\",\n  \"build\": {\n    \"buildCommand\": \"yarn run build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Railway Project\nDESCRIPTION: Initializes a new project in Railway. This command prompts you to define a name for your service.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/migrate-from-heroku.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrailway init\n```\n\n----------------------------------------\n\nTITLE: Railway Connect Command Usage\nDESCRIPTION: Command for connecting to database shells with support for different database types and environment specification.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n~ railway connect --help\nConnect to a database's shell (psql for Postgres, mongosh for MongoDB, etc.)\n\nUsage: railway connect [OPTIONS] [SERVICE_NAME]\n\nArguments:\n  [SERVICE_NAME]  The name of the database to connect to\n\nOptions:\n  -e, --environment <ENVIRONMENT>  Environment to pull variables from (defaults to linked environment)\n      --json                       Output in JSON format\n  -h, --help                       Print help\n  -V, --version                    Print version\n```\n\n----------------------------------------\n\nTITLE: Initializing a Railway Project with CLI\nDESCRIPTION: Command to initialize a new Railway project from your Remix application directory. This requires the Railway CLI to be installed and authenticated.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/remix.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrailway init\n```\n\n----------------------------------------\n\nTITLE: Creating Build Script for Laravel App Service on Railway\nDESCRIPTION: A bash script that prepares a Laravel application for deployment on Railway. It builds assets, clears cache, and optimizes the application by caching configurations, events, routes, and views.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/laravel.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n# Make sure this file has executable permissions, run `chmod +x build-app.sh`\n\n# Exit the script if any command fails\nset -e\n\n# Build assets using NPM\nnpm run build\n\n# Clear cache\nphp artisan optimize:clear\n\n# Cache the various components of the Laravel application\nphp artisan config:cache\nphp artisan event:cache\nphp artisan route:cache\nphp artisan view:cache\n```\n\n----------------------------------------\n\nTITLE: Logging Out from Railway CLI\nDESCRIPTION: Command to log out from your Railway account in the CLI.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/cli.md#2025-04-11_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nrailway logout\n```\n\n----------------------------------------\n\nTITLE: Creating a New SolidJS App with degit\nDESCRIPTION: Command to initialize a new SolidJS application from a template using npx degit. This creates a basic SolidJS project structure in a directory named 'solidjsapp'.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/solid.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit solidjs/templates/js solidjsapp\n```\n\n----------------------------------------\n\nTITLE: Managing Project Volumes (CLI)\nDESCRIPTION: This command provides options to manage Railway project volumes, including listing, adding, deleting, updating, attaching, and detaching volumes. It allows specifying the service and environment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/cli-api.md#2025-04-11_snippet_26\n\nLANGUAGE: txt\nCODE:\n```\n~ railway volume --help\nManage project volumes\n\nUsage: railway volume [OPTIONS] <COMMAND>\n\nCommands:\n  list    List volumes\n  add     Add a new volume\n  delete  Delete a volume\n  update  Update a volume\n  detach  Detach a volume from a service\n  attach  Attach a volume to a service\n  help    Print this message or the help of the given subcommand(s)\n\nOptions:\n  -s, --service <SERVICE>          Service ID\n  -e, --environment <ENVIRONMENT>  Environment ID\n      --json                       Output in JSON format\n  -h, --help                       Print help\n  -V, --version                    Print version\n```\n\n----------------------------------------\n\nTITLE: Adding Database Services to Railway Project\nDESCRIPTION: Command to provision database services for a Railway project. Prompts selection of one or more databases.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/cli.md#2025-04-11_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nrailway add\n```\n\n----------------------------------------\n\nTITLE: Installing Railway CLI via npm\nDESCRIPTION: Command to install the Railway CLI globally using npm package manager. Requires Node.js version 16 or higher.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/cli.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g @railway/cli\n```\n\n----------------------------------------\n\nTITLE: Starting Uvicorn Server with Custom Configuration\nDESCRIPTION: Configures Uvicorn server with specific host and port settings for Railway deployment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/application-failed-to-respond.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuvicorn main:app --host 0.0.0.0 --port $PORT\n```\n\n----------------------------------------\n\nTITLE: Deploying Railway Project in Detached Mode\nDESCRIPTION: Command to deploy the linked project directory and return immediately after uploading without waiting for build completion.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/cli.md#2025-04-11_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nrailway up --detach\n```\n\n----------------------------------------\n\nTITLE: Installing Railway CLI via Scoop on Windows\nDESCRIPTION: Command to install the Railway CLI using Scoop package manager on Windows, which installs a native Windows binary.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/cli.md#2025-04-11_snippet_3\n\nLANGUAGE: ps1\nCODE:\n```\nscoop install railway\n```\n\n----------------------------------------\n\nTITLE: Setting Nixpacks Version in Railway JSON\nDESCRIPTION: Specifies the version of Nixpacks to use for the build process.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/config-as-code.md#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://railway.com/railway.schema.json\",\n  \"build\": {\n    \"nixpacksVersion\": \"1.29.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Railway Environment\nDESCRIPTION: Command to change the linked environment for your Railway project. By default, the CLI links to the production environment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/cli.md#2025-04-11_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrailway environment\n```\n\n----------------------------------------\n\nTITLE: Linking to a Railway Service\nDESCRIPTION: Command to associate a specific service within a project with your current directory.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/cli.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrailway service\n```\n\n----------------------------------------\n\nTITLE: Serving a Vite Application\nDESCRIPTION: Command to serve a static Vite application build using the 'serve' package. The --single flag enables SPA routing, and --listen sets the port from environment variables.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/no-start-command-could-be-found.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nserve --single --listen $PORT dist\n```\n\n----------------------------------------\n\nTITLE: Opening Shell with Railway Environment Variables\nDESCRIPTION: Command to open a new local shell with Railway environment variables loaded, similar to railway run but opens a new shell.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/cli.md#2025-04-11_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrailway shell\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Project with Railway Environment Variables\nDESCRIPTION: Example of running a Node.js project locally with the same environment variables as your Railway project.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/cli.md#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrailway run npm start\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations\nDESCRIPTION: Command to execute Flyway migrations and apply changes to the PostgreSQL database.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/play.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsbt flywayMigrate\n```\n\n----------------------------------------\n\nTITLE: Using Account Token with Railway CLI\nDESCRIPTION: Command showing how to use an Account Token for authentication by setting the RAILWAY_API_TOKEN environment variable before running a command.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/cli.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nRAILWAY_API_TOKEN=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX railway whoami\n```\n\n----------------------------------------\n\nTITLE: Deploying Railway Project\nDESCRIPTION: Command to deploy the linked project directory, showing build logs during the process.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/cli.md#2025-04-11_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Setting GraphiQL Headers for Authentication\nDESCRIPTION: Example JSON for setting the Authorization header in the GraphiQL playground. This allows authenticated API testing in Railway's GraphiQL interface.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/public-api.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"Authorization\": \"Bearer <API_TOKEN_GOES_HERE>\"}\n```\n\n----------------------------------------\n\nTITLE: Browserless Authentication with Railway CLI\nDESCRIPTION: Command to authenticate with Railway CLI using a Pairing Code, useful for environments without browser access like SSH sessions.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/cli.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrailway login --browserless\n```\n\n----------------------------------------\n\nTITLE: Creating Vue App with Vite\nDESCRIPTION: Command to create a new Vue application using Vite as the build tool.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/vue.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vue@latest\n```\n\n----------------------------------------\n\nTITLE: Modifying Angular Start Script\nDESCRIPTION: Updated scripts section in package.json to correctly define build and start commands for production deployment on Railway.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/angular.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"scripts\": {\n    \"ng\": \"ng\",\n    \"dev\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\",\n    \"start\": \"node dist/gratitudeapp/server/server.mjs\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Updating DataDog Agent's syslog.yaml Configuration\nDESCRIPTION: This configuration update for the DataDog agent's syslog.yaml file allows it to accept data from both the existing Node.js app and the new Python service. It specifies different UDP ports for each service.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/set-up-a-datadog-agent.md#2025-04-11_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nlogs:\n  - type: udp\n    port: 514\n    service: \"node-app\"\n    source: syslog\n  - type: udp\n    port: 515\n    service: \"python-app\"\n    source: syslog\n```\n\n----------------------------------------\n\nTITLE: Railway CLI Commands for Deployment\nDESCRIPTION: Commands to initialize, deploy, create a domain, and open a Railway project using the Railway CLI.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/add-a-cdn-using-cloudfront.md#2025-04-11_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nrailway init\nrailway up -d\nrailway domain\nrailway open\n```\n\n----------------------------------------\n\nTITLE: Documentation Structure Comment in JSX\nDESCRIPTION: JSX comment block defining the documentation structure and guidelines for adding new error pages. It outlines the required sections including error description, causes, and solutions with framework-specific subsections.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{/**\\nThe subpages of this page hold descriptions and solutions to common errors users may face\\nwhen deploying to Railway.\\n\\nWhen adding a new page, please keep in mind that content on those pages\\nshould be as detailed as possible, and link out to relevant docs when necessary.\\nWe want to be consistent and complete. When in doubt, try to stick to this formula:\\n\\n        - Error as page title\\n        - ## What This Error Means - A description of what the error means. Give users some context (add a screenshot if applicable)\\n        - ## Why This Error Can Occur - Explain why this error can occur.\\n        - ## Solution - How to solve the error. Solutions may have sections\\n          underneath it for language/framework/stack-specific solutions, e.g.:\\n            - Python\\n            - Go\\n            - ...\\n**/}\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog Agent to Use HTTP for Logs in Railway\nDESCRIPTION: This YAML file instructs the Datadog agent to send logs to Datadog over HTTP instead of the default TCP.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/set-up-a-datadog-agent.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlogs_config:\n  force_use_http: true\n```\n\n----------------------------------------\n\nTITLE: Cache Mount Configuration Format\nDESCRIPTION: Format specification for implementing cache mounts in Railway Dockerfiles\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/dockerfiles.md#2025-04-11_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n--mount=type=cache,id=s/<service id>-<target path>,target=<target path>\n```\n\n----------------------------------------\n\nTITLE: Disabling Build Layer Caching with Environment Variable\nDESCRIPTION: This environment variable setting demonstrates how to disable build layer caching in Railway, which can be useful in certain scenarios where caching is not desired.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/build-configuration.md#2025-04-11_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nNO_CACHE=1\n```\n\n----------------------------------------\n\nTITLE: Setting Authorization Header in GraphiQL\nDESCRIPTION: JSON format for setting the authorization header in the GraphiQL playground. This header is required to authenticate your requests when using the GraphiQL interface.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/public-api.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\"Authorization\": \"Bearer <API_TOKEN_GOES_HERE>\"}\n```\n\n----------------------------------------\n\nTITLE: Initializing Railway Project\nDESCRIPTION: Command to initialize a new Railway project in the current directory\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/rails.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrailway init\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CDK Entry Point for CloudFront Distribution\nDESCRIPTION: TypeScript code for the AWS CDK entry point file that imports and initializes the CloudFront stack with the appropriate environment variables.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/add-a-cdn-using-cloudfront.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n#!/usr/bin/env node\nimport 'source-map-support/register';\nimport * as cdk from '@aws-cdk/core';\nimport { CloudfrontCdkStack } from '../lib/cloudfront-stack';\n\nconst app = new cdk.App();\nnew CloudfrontCdkStack(app, 'CloudfrontCdkStack', {\nenv: {\n    account: process.env.CDK_DEFAULT_ACCOUNT,\n    region: process.env.CDK_DEFAULT_REGION,\n},\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Query with Team Token in cURL\nDESCRIPTION: A cURL command example for executing a GraphQL query to fetch team details using a team token. This query returns the team name and ID for the specified team.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/public-api.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://backboard.railway.com/graphql/v2 \\\n  --header 'Team-Access-Token: <TEAM_TOKEN_GOES_HERE>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\"query\":\"query { team(id: \\\"<TEAM_ID_GOES_HERE>\\\") { name id } }\"}'\n```\n\n----------------------------------------\n\nTITLE: Creating New Astro Application\nDESCRIPTION: Command to create a new Astro application using npm create command.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/astro.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create astro@latest\n```\n\n----------------------------------------\n\nTITLE: Starting Express App Locally\nDESCRIPTION: Command to start the Express app locally using npm.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/express.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Server URL in Grafana\nDESCRIPTION: URL configuration for connecting Grafana to the Prometheus data source. This URL points to the Prometheus server's internal Railway endpoint from which Grafana will retrieve metrics data for visualization.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/deploy-and-monitor-mongo.md#2025-04-11_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://railway-prometheus.railway.internal:9090\n```\n\n----------------------------------------\n\nTITLE: Deploying from Microsoft Container Registry\nDESCRIPTION: An example showing the format for specifying a Microsoft Container Registry image path when deploying a service on Railway.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/services.md#2025-04-11_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nmcr.microsoft.com/dotnet/aspire-dashboard\n```\n\n----------------------------------------\n\nTITLE: Adding MongoDB Scrape Job to Prometheus Configuration\nDESCRIPTION: Prometheus configuration snippet to add a scrape job for collecting metrics from the MongoDB exporter service. This job defines the target endpoint where Prometheus will fetch MongoDB metrics data.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/tutorials/deploy-and-monitor-mongo.md#2025-04-11_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n- job_name: 'mongodb'\n    static_configs:\n    - targets: ['mongo-exporter.railway.internal:9216']\n```\n\n----------------------------------------\n\nTITLE: Importing PostgreSQL Database to Railway\nDESCRIPTION: Command to restore a PostgreSQL database dump to a Railway database using pg_restore. This imports the previously exported data from Fly.io into the new Railway database.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/migration/migrate-from-fly.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npg_restore -U <username> -h <host> -p <port> -W -F t -d <db_name> <dump_file_name>\n```\n\n----------------------------------------\n\nTITLE: Implementing Railway Deploy Button in Markdown\nDESCRIPTION: Code snippet showing how to add a Deploy on Railway button to a Markdown document. The button links to a specific template and includes the Railway button image.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/publish-and-share.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/ZweBXA)\n```\n\n----------------------------------------\n\nTITLE: Installing Railway CLI for Local Development\nDESCRIPTION: Command to install the Railway CLI globally using npm. This tool enables local development with production parity by connecting your local environment to your Railway project.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/migration/migrate-from-vercel.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g @railway/cli\n```\n\n----------------------------------------\n\nTITLE: Rendering Deploy on Railway Button in Markdown\nDESCRIPTION: Markdown code that renders a 'Deploy on Railway' button linking to Railway's template deployment page for The Boring JavaScript Stack.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/sails.md#2025-04-11_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/ia84_3)\n```\n\n----------------------------------------\n\nTITLE: Starting MongoDB Container with IPv6 Support\nDESCRIPTION: Configure the MongoDB Docker container to listen on IPv6 by updating the start command.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/private-networking.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker-entrypoint.sh mongod --ipv6 --bind_ip ::,0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Modifying Scala Play View\nDESCRIPTION: Update to the index.scala.html file to add a new heading for the Railway deployment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/play.md#2025-04-11_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\n@()\n\n@main(\"Welcome to Play\") {\n  <h1>Welcome to Play!</h1>\n  <h1>Hello World, Railway!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message for Cloudflare Proxy Configuration\nDESCRIPTION: Common error message displayed when Cloudflare proxying is not properly configured with Railway\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/public-networking.md#2025-04-11_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nERR_TOO_MANY_REDIRECTS\n```\n\n----------------------------------------\n\nTITLE: Creating New NestJS Application\nDESCRIPTION: Command to create a new NestJS application named 'helloworld' using the NestJS CLI.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/nest.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnest new helloworld\n```\n\n----------------------------------------\n\nTITLE: Interactive Application Button Component (Markdown/HTML)\nDESCRIPTION: A TallyButton component implementation that creates an interactive 'Apply Now' button with emoji animation and auto-close functionality for the Conductor Program application.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/community/the-conductor-program.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<TallyButton data-tally-open=\"nP2qqd\" data-tally-width=\"700\" data-tally-emoji-text=\"👋\" data-tally-emoji-animation=\"wave\" data-tally-auto-close=\"2000\">Apply Now</TallyButton>\n```\n\n----------------------------------------\n\nTITLE: Running Railway Documentation Development Server\nDESCRIPTION: Commands to start the development server for the Railway documentation project using either npm or yarn. The server will be accessible at localhost:3001.\nSOURCE: https://github.com/railwayapp/docs/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Healthcheck Timeout in Railway JSON\nDESCRIPTION: Sets the timeout duration for health check operations.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/config-as-code.md#2025-04-11_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://railway.com/railway.schema.json\",\n  \"deploy\": {\n    \"healthcheckPath\": \"/health\",\n    \"healthcheckTimeout\": 300\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Configuration\nDESCRIPTION: Package.json configuration for Astro application with modified start script for production deployment.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/guides/astro.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"name\": \"astroblog\",\n    \"type\": \"module\",\n    \"version\": \"0.0.1\",\n    \"scripts\": {\n        \"dev\": \"astro dev\",\n        \"start\": \"node ./dist/server/entry.mjs\",\n        \"build\": \"astro check && astro build\",\n        \"preview\": \"astro preview\",\n        \"astro\": \"astro\"\n    },\n    \"dependencies\": {\n        \"@astrojs/check\": \"^0.9.4\",\n        \"@astrojs/mdx\": \"^3.1.8\",\n        \"@astrojs/node\": \"^8.3.4\",\n        \"@astrojs/rss\": \"^4.0.9\",\n        \"@astrojs/sitemap\": \"^3.2.1\",\n        \"astro\": \"^4.16.6\",\n        \"typescript\": \"^5.6.3\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Python Project Structure Example\nDESCRIPTION: Example of a Python project structure that might not be automatically recognized by Nixpacks despite using a supported language.\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/errors/nixpacks-was-unable-to-generate-a-build-plan.md#2025-04-11_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nThe contents of the app directory are:\n\nweb.py\nrequirements.txt\n```\n\n----------------------------------------\n\nTITLE: Basic Logging Output Example in JavaScript\nDESCRIPTION: Example showing how Railway captures standard output logging from applications\nSOURCE: https://github.com/railwayapp/docs/blob/main/src/docs/reference/logging.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(...)\n```"
  }
]