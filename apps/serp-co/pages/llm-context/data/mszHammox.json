[
  {
    "owner": "msz",
    "repo": "hammox",
    "content": "TITLE: Basic ExUnit Test Setup\nDESCRIPTION: Initial test setup without mocking, showing the need for test isolation.\nSOURCE: https://github.com/msz/hammox/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule StatsTest do\n  use ExUnit.Case, async: true\n\n  test \"count_users/0 returns correct user count\" do\n    assert 2 == Stats.count_users()\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Database Behavior Interface\nDESCRIPTION: Example of defining a behavior contract with typespec for a database interface.\nSOURCE: https://github.com/msz/hammox/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Database do\n  @callback get_users() :: [binary()]\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Stats Module with Database Dependency\nDESCRIPTION: Example module that uses the Database behavior to count users, demonstrating dependency injection.\nSOURCE: https://github.com/msz/hammox/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Stats do\n  def count_users(database \\\\ RealDatabase) do\n    length(database.get_users())\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Mox-Based Test Implementation\nDESCRIPTION: Example of using Mox to create and use a mock database in tests.\nSOURCE: https://github.com/msz/hammox/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule StatsTest do\n  use ExUnit.Case, async: true\n  import Mox\n\n  test \"count_users/0 returns correct user count\" do\n    defmock(DatabaseMock, for: Database)\n    expect(DatabaseMock, :get_users, fn ->\n      [\"joe\", \"jim\"]\n    end)\n\n    assert 2 == Stats.count_users(DatabaseMock)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Real Implementation with Hammox Protection\nDESCRIPTION: Example of using Hammox.protect to verify a real implementation against its behavior contract.\nSOURCE: https://github.com/msz/hammox/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule RealDatabaseTest do\n  use ExUnit.Case, async: true\n\n  test \"get_users/0 returns list of users\" do\n    get_users_0 = Hammox.protect({RealDatabase, :get_users, 0}, Database)\n    assert {:ok, [\"real-jim\", \"real-joe\"]} == get_users_0.()\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setup-Based Hammox Protection Example\nDESCRIPTION: Shows how to use Hammox protection with ExUnit's setup_all hook for better test organization.\nSOURCE: https://github.com/msz/hammox/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule RealDatabaseTest do\n  use ExUnit.Case, async: true\n\n  setup_all do\n    %{get_users_0: Hammox.protect({RealDatabase, :get_users, 0}, Database)}\n  end\n\n  test \"get_users/0 returns list of users\", %{get_users_0: get_users_0} do\n    assert {:ok, [\"real-jim\", \"real-joe\"]} == get_users_0.()\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Simplified Hammox Protection Setup\nDESCRIPTION: Demonstrates the simplified version of Hammox protection setup for multiple callbacks.\nSOURCE: https://github.com/msz/hammox/blob/master/README.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule RealDatabaseTest do\n  use ExUnit.Case, async: true\n\n  setup_all do\n    Hammox.protect(RealDatabase, Database)\n  end\n\n  test \"get_users/0 returns list of users\", %{get_users_0: get_users_0} do\n    assert {:ok, [\"real-jim\", \"real-joe\"]} == get_users_0.()\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Macro-Based Hammox Protection\nDESCRIPTION: Shows how to use Hammox.Protect macro for more concise test implementations.\nSOURCE: https://github.com/msz/hammox/blob/master/README.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule RealDatabaseTest do\n  use ExUnit.Case, async: true\n  use Hammox.Protect, module: RealDatabase, behaviour: Database\n\n  test \"get_users/0 returns list of users\" do\n    assert {:ok, [\"real-jim\", \"real-joe\"]} == get_users()\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updated Database Behavior with Error Handling\nDESCRIPTION: Enhanced version of the Database behavior adding error handling with ok/error tuples.\nSOURCE: https://github.com/msz/hammox/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Database do\n  @callback get_users() :: {:ok, [binary()]} | {:error, term()}\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Telemetry Configuration in Hammox\nDESCRIPTION: Configuration snippet to enable telemetry reporting in Hammox application.\nSOURCE: https://github.com/msz/hammox/blob/master/guides/Telemetry.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :hammox,\n  enable_telemetry?: true\n```\n\n----------------------------------------\n\nTITLE: Building and Attaching Telemetry Events in Hammox\nDESCRIPTION: Example code demonstrating how to build event lists and attach telemetry handlers for start, stop, and exception events in Hammox.\nSOURCE: https://github.com/msz/hammox/blob/master/guides/Telemetry.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndef build_events(event_atom) do\n  event_list = [\n    :expect,\n    :allow,\n    :run_expect,\n    :check_call,\n    :match_args,\n    :match_return_value,\n    :fetch_typespecs,\n    :cache_put,\n    :stub,\n    :verify_on_exit!\n  ]\n\n  Enum.map(event_list, fn event ->\n    [:hammox, event, event_atom]\n  end)\nend\n\n... other appplication.ex code here\n\nstart_events = build_events(:start)\n\n:ok =\n  :telemetry.attach_many(\n    \"hammox-start\",\n    start_events,\n    &handle_event/4,\n    nil\n  )\n\nstop_events = .build_events(:stop)\n\n:ok =\n  :telemetry.attach_many(\n    \"hammox-stop\",\n    stop_events,\n    &handle_event/4,\n    nil\n  )\n\nexception_events = .build_events(:exception)\n\n:ok =\n  :telemetry.attach_many(\n    \"hammox-exception\",\n    exception_events,\n    &handle_event/4,\n    nil\n  )\n```\n\n----------------------------------------\n\nTITLE: Implementing Telemetry Event Handlers in Hammox\nDESCRIPTION: Example implementation of telemetry event handlers for Hammox, including tracing and error handling functionality using Spandex Tracer.\nSOURCE: https://github.com/msz/hammox/blob/master/guides/Telemetry.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule HammoxTelemetryHandler do\n  alias Spandex.Tracer\n  ...\n  def handle_event([:hammox, :expect, :start], measurements, metadata, _config)\n      when is_map(measurements) do\n    mock_name = Map.get(metadata, :mock)\n\n    func_name = Map.get(metadata, :name)\n\n    expect_count =\n      Map.get(metadata, :count)\n      |> to_string\n\n    tags =\n      []\n      |> tags_put(:mock, mock_name)\n      |> tags_put(:func_name, func_name)\n      |> tags_put(:expect_count, expect_count)\n\n    system_time = get_time(measurements, :system_time)\n\n    if Tracer.current_trace_id() do\n      span_string =\n        \"#{mock_name}.#{func_name}\"\n        |> String.trim_leading(\"Elixir.\")\n\n      span_string = \"expect #{span_string}\"\n      _span_context = Tracer.start_span(span_string, service: :hammox, tags: tags)\n      Tracer.update_span(start: system_time)\n    end\n  end\n\n  def handle_event([:hammox, :expect, :stop], measurements, _metadata, _config) do\n    handle_exception(measurements)\n  end\n\n  def handle_event([:hammox, :expect, :exception], measurements, _metadata, _config) do\n    handle_exception(measurements)\n  end\n\n  defp handle_exception(measurements) do\n    error_message = \"Exception occurred during hammox execution\"\n    Logger.error(error_message)\n\n    if Tracer.current_trace_id() do\n      current_span = Tracer.current_span([])\n      Tracer.update_span_with_error(error_message, current_span)\n    end\n\n    handle_stop(measurements)\n  end\n\n  defp handle_stop(measurements, tags \\\\ []) do\n    duration_time = get_time(measurements, :duration)\n\n    case Tracer.current_span([]) do\n      %{start: start_time} ->\n        completion_time = start_time + duration_time\n\n        Tracer.update_span(tags: tags, completion_time: completion_time)\n        Tracer.finish_span()\n\n      _no_current_span ->\n        :ok\n    end\n  end\n\n  defp get_time(log_entry, key) do\n    log_entry\n    |> Map.get(key)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Hammox Dependency in mix.exs\nDESCRIPTION: Configuration to add Hammox as a test dependency in an Elixir project's mix.exs file.\nSOURCE: https://github.com/msz/hammox/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps do\n  [\n    {:hammox, \"~> 0.7\", only: :test}\n  ]\nend\n```"
  }
]