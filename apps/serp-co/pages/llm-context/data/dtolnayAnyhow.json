[
  {
    "owner": "dtolnay",
    "repo": "anyhow",
    "content": "TITLE: Basic Error Handling with Anyhow\nDESCRIPTION: Example of using Result<T, anyhow::Error> for basic error handling, demonstrating error propagation with the ? operator.\nSOURCE: https://github.com/dtolnay/anyhow/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse anyhow::Result;\n\nfn get_cluster_info() -> Result<ClusterMap> {\n    let config = std::fs::read_to_string(\"cluster.json\")?\n    let map: ClusterMap = serde_json::from_str(&config)?\n    Ok(map)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Context to Errors\nDESCRIPTION: Demonstrates how to add context to errors using context() and with_context() methods for better error debugging.\nSOURCE: https://github.com/dtolnay/anyhow/blob/master/README.md#2025-04-17_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse anyhow::{Context, Result};\n\nfn main() -> Result<()> {\n    ...\n    it.detach().context(\"Failed to detach the important thing\")?\n\n    let content = std::fs::read(path)\n        .with_context(|| format!(\"Failed to read instrs from {}\", path))?\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Type Definition\nDESCRIPTION: Example of defining custom error types using thiserror with Anyhow compatibility.\nSOURCE: https://github.com/dtolnay/anyhow/blob/master/README.md#2025-04-17_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum FormatError {\n    #[error(\"Invalid header (expected {expected:?}, got {found:?}\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"Missing attribute: {0}\")]\n    MissingAttribute(String),\n}\n```\n\n----------------------------------------\n\nTITLE: Error Type Downcasting Example\nDESCRIPTION: Shows how to downcast errors to specific types for handling specific error cases.\nSOURCE: https://github.com/dtolnay/anyhow/blob/master/README.md#2025-04-17_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nmatch root_cause.downcast_ref::<DataStoreError>() {\n    Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n    None => Err(error),\n}\n```\n\n----------------------------------------\n\nTITLE: One-off Error Creation\nDESCRIPTION: Shows how to create one-off error messages using anyhow! and bail! macros.\nSOURCE: https://github.com/dtolnay/anyhow/blob/master/README.md#2025-04-17_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nreturn Err(anyhow!(\"Missing attribute: {}\", missing));\n\n// Or using bail! macro\nbail!(\"Missing attribute: {}\", missing);\n```\n\n----------------------------------------\n\nTITLE: Installing Anyhow via Cargo.toml\nDESCRIPTION: Dependency configuration for adding Anyhow to a Rust project. Requires rustc 1.39+.\nSOURCE: https://github.com/dtolnay/anyhow/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nanyhow = \"1.0\"\n```\n\n----------------------------------------\n\nTITLE: No-std Configuration\nDESCRIPTION: Cargo configuration for using Anyhow in no_std environments.\nSOURCE: https://github.com/dtolnay/anyhow/blob/master/README.md#2025-04-17_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nanyhow = { version = \"1.0\", default-features = false }\n```"
  }
]