[
  {
    "owner": "supabase",
    "repo": "supabase-swift",
    "content": "TITLE: Initializing Supabase Client with Custom Options in Swift\nDESCRIPTION: This snippet shows how to create a Supabase client with custom options, including database schema, authentication settings, and global headers. It demonstrates the flexibility in configuring the client.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet client = SupabaseClient(\n    supabaseURL: URL(string: \"https://xyzcompany.supabase.co\")!, \n    supabaseKey: \"public-anon-key\",\n    options: SupabaseClientOptions(\n        db: .init(\n            schema: \"public\"\n        ),\n        auth: .init(\n            storage: MyCustomLocalStorage(),\n            flowType: .pkce\n        ),\n        global: .init(\n            headers: [\"x-my-custom-header\": \"my-app-name\"],\n            session: URLSession.myCustomSession\n        )\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in Swift\nDESCRIPTION: This code demonstrates how to create a single Supabase client instance for interacting with the database. It requires the Supabase URL and public anonymous key.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n/// Create a single supabase client for interacting with your database\nlet client = SupabaseClient(supabaseURL: URL(string: \"https://xyzcompany.supabase.co\")!, supabaseKey: \"public-anon-key\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Database Schema for User Profiles with Supabase SQL\nDESCRIPTION: SQL script for creating a user profiles table with proper relations to auth.users, setting up row level security policies, configuring Realtime publication, and establishing storage buckets for avatar images. This schema enables secure user management with proper permissions.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Examples/UserManagement/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Create a table for public \"profiles\"\ncreate table profiles (\n  id uuid references auth.users not null,\n  updated_at timestamp with time zone,\n  username text unique,\n  avatar_url text,\n  website text,\n\n  primary key (id),\n  unique(username),\n  constraint username_length check (char_length(username) >= 3)\n);\n\nalter table profiles enable row level security;\n\ncreate policy \"Public profiles are viewable by everyone.\"\n  on profiles for select\n  using ( true );\n\ncreate policy \"Users can insert their own profile.\"\n  on profiles for insert\n  with check ( auth.uid() = id );\n\ncreate policy \"Users can update own profile.\"\n  on profiles for update\n  using ( auth.uid() = id );\n\n-- Set up Realtime!\nbegin;\n  drop publication if exists supabase_realtime;\n  create publication supabase_realtime;\ncommit;\nalter publication supabase_realtime add table profiles;\n\n-- Set up Storage!\ninsert into storage.buckets (id, name)\nvalues ('avatars', 'avatars');\n\ncreate policy \"Avatar images are publicly accessible.\"\n  on storage.objects for select\n  using ( bucket_id = 'avatars' );\n\ncreate policy \"Anyone can upload an avatar.\"\n  on storage.objects for insert\n  with check ( bucket_id = 'avatars' );\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Swift Client using Swift Package Manager\nDESCRIPTION: This snippet shows how to add the Supabase Swift client library as a dependency in a Swift package. It specifies the GitHub repository URL and version requirement.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet package = Package(\n    ...\n    dependencies: [\n        ...\n        .package(\n            url: \"https://github.com/supabase/supabase-swift.git\",\n            from: \"2.0.0\"\n        ),\n    ],\n    targets: [\n        .target(\n            name: \"YourTargetName\",\n            dependencies: [\n                .product(name: \"Supabase\", package: \"supabase-swift\") // Add as a dependency\n            ]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Listening for Postgres Changes with RealtimeV2 in Swift\nDESCRIPTION: Code examples showing how to observe Postgres changes including insertions, updates, and deletions. Each change type can be handled separately with typed decoding of records.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/docs/migrations/RealtimeV2 Migration Guide.md#2025-04-18_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet channel = await supabase.realtimeV2.channel(\"public:messages\")\n\nfor await insertion in channel.postgresChange(InsertAction.self, table: \"messages\") {\n    let insertedMessage = try insertion.decodeRecord(as: Message.self)\n}\n\nfor await update in channel.postgresChange(UpdateAction.self, table: \"messages\") {\n    let updateMessage = try update.decodeRecord(as: Message.self)\n    let oldMessage = try update.decodeOldRecord(as: Message.self)\n}\n\nfor await deletion in channel.postgresChange(DeleteAction.self, table: \"messages\") {\n    struct Payload: Decodable {\n        let id: UUID\n    }\n\n    let payload = try deletion.decodeOldRecord(as: Payload.self)\n    let deletedMessageID = payload.id\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Presence with RealtimeV2 in Swift\nDESCRIPTION: Examples demonstrating how to track user presence state using dictionaries or Codable structs. This allows real-time awareness of other users in the same channel.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/docs/migrations/RealtimeV2 Migration Guide.md#2025-04-18_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet channel = await supabase.realtimeV2.channel(\"room\")\n\nawait channel.track(state: [\"user_id\": \"abc_123\"])\n```\n\n----------------------------------------\n\nTITLE: Observing RealtimeV2 Socket Connection Status in Swift\nDESCRIPTION: Code example showing how to observe socket connection status changes using the statusChange property. This allows tracking when the connection is disconnected, connecting, or connected.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/docs/migrations/RealtimeV2 Migration Guide.md#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfor await status in supabase.realtimeV2.statusChange {\n    // status: disconnected, connecting, or connected\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Presence with Codable in RealtimeV2\nDESCRIPTION: Example showing how to track presence using a Codable struct instead of a dictionary, providing type safety when working with presence data.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/docs/migrations/RealtimeV2 Migration Guide.md#2025-04-18_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nstruct UserPresence: Codable {\n    let userId: String\n}\n\nawait channel.track(UserPresence(userId: \"abc_123\"))\n```\n\n----------------------------------------\n\nTITLE: Listening for All Postgres Changes with RealtimeV2 in Swift\nDESCRIPTION: Example showing how to listen for all types of database changes (insert, update, delete) using a single callback with AnyAction.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/docs/migrations/RealtimeV2 Migration Guide.md#2025-04-18_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nfor change in channel.postgresChange(AnyAction.self, table: \"messages\") {\n    // change: enum with insert, update, and delete cases.\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Broadcast Messages in RealtimeV2\nDESCRIPTION: Example showing how to listen for broadcast messages of a specific event type and decode them into strongly-typed objects.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/docs/migrations/RealtimeV2 Migration Guide.md#2025-04-18_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nfor await event in channel.broadcastStream(event: \"PING\") {\n    let message = try event.decode(as: PingEventMessage.self)\n}\n```\n\n----------------------------------------\n\nTITLE: Observing RealtimeV2 Channel Subscription Status in Swift\nDESCRIPTION: Example demonstrating how to observe channel subscription status changes. The status can be unsubscribed, subscribing, subscribed, or unsubscribing.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/docs/migrations/RealtimeV2 Migration Guide.md#2025-04-18_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet channel = await supabase.realtimeV2.channel(\"public:messages\")\n\nTask {\n    for status in await channel.statusChange {\n        // status: unsubscribed, subscribing subscribed, or unsubscribing.\n    }\n}\n\nawait channel.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Listening for Presence Changes in RealtimeV2\nDESCRIPTION: Example demonstrating how to observe presence state changes to detect when users join or leave a channel. Changes are decoded into strongly-typed objects.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/docs/migrations/RealtimeV2 Migration Guide.md#2025-04-18_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nfor await presence in channel.presenceChange() {\n    let joins = try presence.decodeJoins(as: UserPresence.self) // joins is [UserPresence]\n    let leaves = try presence.decodeLeaves(as: UserPresence.self) // leaves is [UserPresence]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase with PostgREST Filter Operators using cURL\nDESCRIPTION: This cURL command demonstrates how to query the Supabase API using PostgREST's filter operators. It includes headers for content type and client information, along with numerous query parameters showcasing different operators like equality (eq), inequality (neq), greater than (gt), less than (lt), pattern matching (like), and full-text search (fts).\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.test-all-filters-and-count.txt#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/todos?column=eq.Some%20value&column=neq.Some%20value&column=gt.Some%20value&column=gte.Some%20value&column=lt.Some%20value&column=lte.Some%20value&column=like.Some%20value&column=ilike.Some%20value&column=is.Some%20value&column=in.Some%20value&column=cs.Some%20value&column=cd.Some%20value&column=sl.Some%20value&column=sr.Some%20value&column=nxl.Some%20value&column=nxr.Some%20value&column=adj.Some%20value&column=ov.Some%20value&column=fts.Some%20value&column=plfts.Some%20value&column=phfts.Some%20value&column=wfts.Some%20value&select=*\"\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Messages with RealtimeV2 in Swift\nDESCRIPTION: Example showing how to broadcast a message to all clients subscribed to a channel using a dictionary payload.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/docs/migrations/RealtimeV2 Migration Guide.md#2025-04-18_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nawait channel.broadcast(event: \"PING\", message: [\"timestamp\": .double(Date.now.timeIntervalSince1970)])\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Codable Messages with RealtimeV2\nDESCRIPTION: Example demonstrating how to broadcast a message using a Codable struct instead of a dictionary, providing type safety for the message payload.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/docs/migrations/RealtimeV2 Migration Guide.md#2025-04-18_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nstruct PingEventMessage: Codable {\n    let timestamp: TimeInterval\n}\n\ntry await channel.broadcast(event: \"PING\", message: PingEventMessage(timestamp: Date.now.timeIntervalSince1970))\n```\n\n----------------------------------------\n\nTITLE: Creating OTP Authentication with Supabase Auth API using cURL\nDESCRIPTION: This cURL command sends a POST request to Supabase's Auth API to create a user and generate a one-time password. It includes required headers like API key, content type, client info, and API version. The JSON payload contains user creation details, custom data, email address, and security metadata with a captcha token.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testSignInWithOTPUsingEmail.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"create_user\\\":true,\\\"data\\\":{\\\"custom_key\\\":\\\"custom_value\\\"},\\\"email\\\":\\\"example@mail.com\\\",\\\"gotrue_meta_security\\\":{\\\"captcha_token\\\":\\\"dummy-captcha\\\"}}\" \\\n\t\"http://localhost:54321/auth/v1/otp?redirect_to=https://supabase.com\"\n```\n\n----------------------------------------\n\nTITLE: Untracking Presence in RealtimeV2\nDESCRIPTION: Code showing how to untrack presence when it's no longer needed, removing the client from the presence tracking system.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/docs/migrations/RealtimeV2 Migration Guide.md#2025-04-18_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nawait channel.untrack()\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase REST API with cURL Headers and Filters\nDESCRIPTION: Makes a GET request to Supabase REST API with JSON headers and complex query filters. The request includes client info headers and filters messages based on public status or recipient ID while selecting all fields and related messages.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.test-or-filter-with-referenced-table.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/users?messages.or=(public.eq.true,recipient_id.eq.1)&select=*,messages(*)\"\n```\n\n----------------------------------------\n\nTITLE: Making a Sign-Up API Request with curl to Supabase Auth\nDESCRIPTION: This curl command sends a POST request to the Supabase Auth signup endpoint. It includes required headers like API key and content type, along with a JSON payload containing user credentials, custom data, and security tokens. The request also includes an optional redirect URL parameter.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testSignUpWithEmailAndPassword.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"data\\\":{\\\"custom_key\\\":\\\"custom_value\\\"},\\\"email\\\":\\\"example@mail.com\\\",\\\"gotrue_meta_security\\\":{\\\"captcha_token\\\":\\\"dummy-captcha\\\"},\\\"password\\\":\\\"the.pass\\\"}\" \\\n\t\"http://localhost:54321/auth/v1/signup?redirect_to=https://supabase.com\"\n```\n\n----------------------------------------\n\nTITLE: Verifying MFA Factor with Supabase API using cURL\nDESCRIPTION: This cURL command sends a POST request to verify a multi-factor authentication factor. It includes necessary headers such as API key, authorization token, and content type. The payload contains the challenge ID, verification code, and factor ID.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testMFAVerify.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Authorization: Bearer accesstoken\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"challenge_id\\\":\\\"123\\\",\\\"code\\\":\\\"123456\\\",\\\"factor_id\\\":\\\"123\\\"}\" \\\n\t\"http://localhost:54321/auth/v1/factors/123/verify\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating User with Supabase Auth API using cURL\nDESCRIPTION: This cURL command authenticates a user with Supabase's Auth API using email and password. It sends a POST request to the authentication endpoint with required headers including API key, content type, client info, and API version. The request body includes user credentials and optional CAPTCHA token for security.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testSignInWithEmailAndPassword.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"email\\\":\\\"example@mail.com\\\",\\\"gotrue_meta_security\\\":{\\\"captcha_token\\\":\\\"dummy-captcha\\\"},\\\"password\\\":\\\"the.pass\\\"}\" \\\n\t\"http://localhost:54321/auth/v1/token?grant_type=password\"\n```\n\n----------------------------------------\n\nTITLE: Creating MFA Factor with Supabase Authentication API using cURL\nDESCRIPTION: This cURL command sends a POST request to create a new TOTP (Time-based One-Time Password) factor for multi-factor authentication. It includes required headers such as API key, authorization token, and content type, as well as a JSON payload with factor details.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testMFAEnrollTotp.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Authorization: Bearer accesstoken\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"factor_type\\\":\\\"totp\\\",\\\"friendly_name\\\":\\\"test\\\",\\\"issuer\\\":\\\"supabase.com\\\"}\" \\\n\t\"http://localhost:54321/auth/v1/factors\"\n```\n\n----------------------------------------\n\nTITLE: Executing Logout API Request with cURL for Supabase Authentication\nDESCRIPTION: A cURL command that performs a POST request to the Supabase Auth API logout endpoint. It includes the required headers for authentication (Apikey and Bearer token), client information, API version, and sets the scope to global for a complete logout across all devices.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testSignOut.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Authorization: Bearer accesstoken\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t\"http://localhost:54321/auth/v1/logout?scope=global\"\n```\n\n----------------------------------------\n\nTITLE: Making Authentication Request to Supabase with cURL\nDESCRIPTION: Demonstrates how to make a POST request to Supabase's authentication endpoint using cURL. The request includes necessary headers like API key, client info, and API version, along with a JSON payload containing access token, security metadata, ID token, nonce, and provider information.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testSignInWithIdToken.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"access_token\\\":\\\"access-token\\\",\\\"gotrue_meta_security\\\":{\\\"captcha_token\\\":\\\"captcha-token\\\"},\\\"id_token\\\":\\\"id-token\\\",\\\"nonce\\\":\\\"nonce\\\",\\\"provider\\\":\\\"apple\\\"}\" \\\n\t\"http://localhost:54321/auth/v1/token?grant_type=id_token\"\n```\n\n----------------------------------------\n\nTITLE: Refreshing Supabase Auth Token using cURL\nDESCRIPTION: This cURL command sends a POST request to refresh an authentication token using the Supabase Auth API. It includes custom headers for API key, content type, client info, and API version. The request body contains the refresh token, and the endpoint specifies the grant type as 'refresh_token'.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testRefreshSession.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"refresh_token\\\":\\\"refresh-token\\\"}\" \\\n\t\"http://localhost:54321/auth/v1/token?grant_type=refresh_token\"\n```\n\n----------------------------------------\n\nTITLE: Making RPC Request to Supabase API with cURL\nDESCRIPTION: Makes an HTTP request to Supabase's RPC endpoint 'get_array_element' with array and index parameters. Uses Swift client headers for identification and JSON content type specification.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.rpc-call-with-get-and-params.txt#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/rpc/get_array_element?array=%7B37,420,64%7D&index=2\"\n```\n\n----------------------------------------\n\nTITLE: Password Recovery Request with cURL to Supabase Auth API\nDESCRIPTION: Sends a POST request to Supabase's auth recovery endpoint with required headers including API key, content type, client info, and API version. The request includes email and captcha token in the JSON payload, with an optional redirect URL parameter.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testResetPasswordForEmail.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"email\\\":\\\"example@mail.com\\\",\\\"gotrue_meta_security\\\":{\\\"captcha_token\\\":\\\"captcha-token\\\"}}\" \\\n\t\"http://localhost:54321/auth/v1/recover?redirect_to=https://supabase.com\"\n```\n\n----------------------------------------\n\nTITLE: Initiating SSO Authentication with Supabase API using cURL\nDESCRIPTION: This cURL command sends a POST request to initiate Single Sign-On (SSO) authentication with Supabase. It includes custom headers for API key, content type, client info, and API version, along with a JSON payload containing SSO-related data.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testSignInWithSSOUsingProviderId.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"gotrue_meta_security\\\":{\\\"captcha_token\\\":\\\"captcha-token\\\"},\\\"provider_id\\\":\\\"E621E1F8-C36C-495A-93FC-0C247A3E6E5F\\\",\\\"redirect_to\\\":\\\"https:\\/\\/supabase.com\\\"}\" \\\n\t\"http://localhost:54321/auth/v1/sso\"\n```\n\n----------------------------------------\n\nTITLE: Updating User Information with Supabase Auth API using cURL\nDESCRIPTION: A cURL command that sends a PUT request to update user information in Supabase. The request includes authentication headers, custom data, and various user fields like email, password and phone number.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testUpdateUser.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request PUT \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Authorization: Bearer accesstoken\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"data\\\":{\\\"custom_key\\\":\\\"custom_value\\\"},\\\"email\\\":\\\"example@mail.com\\\",\\\"email_change_token\\\":\\\"123456\\\",\\\"nonce\\\":\\\"abcdef\\\",\\\"password\\\":\\\"another.pass\\\",\\\"phone\\\":\\\"+1 202-918-2132\\\"}\" \\\n\t\"http://localhost:54321/auth/v1/user\"\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Factor with Supabase Auth API using cURL\nDESCRIPTION: POST request to create a new phone authentication factor with Supabase Auth API. Includes required headers for authentication, API versioning, and client information. The payload specifies factor type, friendly name, and phone number.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testMFAEnrollPhone.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Authorization: Bearer accesstoken\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"factor_type\\\":\\\"phone\\\",\\\"friendly_name\\\":\\\"test\\\",\\\"phone\\\":\\\"+1 202-918-2132\\\"}\" \\\n\t\"http://localhost:54321/auth/v1/factors\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Magic Link Authentication with Supabase API using cURL\nDESCRIPTION: This cURL command makes a POST request to Supabase's authentication verification endpoint. It sends user email, captcha token, and magic link token to verify a user's identity. The request includes necessary headers for authentication and content type specification.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testVerifyOTPUsingEmail.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"email\\\":\\\"example@mail.com\\\",\\\"gotrue_meta_security\\\":{\\\"captcha_token\\\":\\\"captcha-token\\\"},\\\"token\\\":\\\"123456\\\",\\\"type\\\":\\\"magiclink\\\"}\" \\\n\t\"http://localhost:54321/auth/v1/verify?redirect_to=https://supabase.com\"\n```\n\n----------------------------------------\n\nTITLE: Refreshing Supabase Authentication Token using cURL\nDESCRIPTION: This cURL command sends a POST request to the Supabase authentication endpoint to refresh a token. It includes custom headers for API key, content type, client info, and API version. The request body contains a refresh token, and the endpoint is configured for the refresh_token grant type.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testSetSessionWithAExpiredToken.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"refresh_token\\\":\\\"dummy-refresh-token\\\"}\" \\\n\t\"http://localhost:54321/auth/v1/token?grant_type=refresh_token\"\n```\n\n----------------------------------------\n\nTITLE: Fetching User Data with Supabase Auth API using cURL\nDESCRIPTION: Makes an authenticated HTTP GET request to the Supabase Auth API user endpoint. Includes required headers for authentication (API key and bearer token) and client identification.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testSessionFromURL.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Authorization: bearer accesstoken\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t\"http://localhost:54321/auth/v1/user\"\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to Supabase RPC Endpoint using cURL\nDESCRIPTION: This cURL command sends a POST request to a Supabase RPC endpoint. It sets the appropriate headers for JSON content and includes client information. The request body contains a JSON object with a key-value pair.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.call-rpc.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t--data \"{\\\"KEY\\\":\\\"VALUE\\\"}\" \\\n\t\"https://example.supabase.co/rpc/test_fcn\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Supabase Function with cURL in Shell\nDESCRIPTION: This cURL command sends a POST request to invoke a Supabase function named 'hello-world'. It includes the required headers for authentication and client information. The function is called on the localhost server at port 5432.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/FunctionsTests/__Snapshots__/RequestTests/testInvokeWithDefaultOptions.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"apikey: supabase.anon.key\" \\\n\t--header \"x-client-info: functions-swift/x.y.z\" \\\n\t\"http://localhost:5432/functions/v1/hello-world\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Supabase Function with cURL in Shell\nDESCRIPTION: This cURL command sends a POST request to invoke a Supabase function named 'hello-world'. It includes necessary headers such as the API key, client info, and region. The function is called on the local development server.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/FunctionsTests/__Snapshots__/RequestTests/testInvokeWithCustomRegion.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"apikey: supabase.anon.key\" \\\n\t--header \"x-client-info: functions-swift/x.y.z\" \\\n\t--header \"x-region: ap-northeast-1\" \\\n\t\"http://localhost:5432/functions/v1/hello-world\"\n```\n\n----------------------------------------\n\nTITLE: Calling Supabase Edge Function with cURL\nDESCRIPTION: This cURL command makes a POST request to a Supabase Edge Function named 'hello-world'. It includes the required headers for authentication (apikey), content type, and client information, along with a JSON payload containing a name parameter.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/FunctionsTests/__Snapshots__/RequestTests/testInvokeWithBody.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"apikey: supabase.anon.key\" \\\n\t--header \"x-client-info: functions-swift/x.y.z\" \\\n\t--data \"{\\\"name\\\":\\\"Supabase\\\"}\" \\\n\t\"http://localhost:5432/functions/v1/hello-world\"\n```\n\n----------------------------------------\n\nTITLE: POST Request to Supabase Function Endpoint\nDESCRIPTION: Makes an authenticated POST request to a Supabase Function endpoint. Includes required headers for authentication (apikey), client identification (x-client-info), and custom headers.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/FunctionsTests/__Snapshots__/RequestTests/testInvokeWithCustomHeader.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"apikey: supabase.anon.key\" \\\n\t--header \"x-client-info: functions-swift/x.y.z\" \\\n\t--header \"x-custom-key: custom value\" \\\n\t\"http://localhost:5432/functions/v1/hello-world\"\n```\n\n----------------------------------------\n\nTITLE: Making PATCH Request to Supabase Function Using cURL\nDESCRIPTION: This curl command demonstrates how to make a PATCH request to a Supabase serverless function endpoint. It includes the required 'apikey' header for authentication and 'x-client-info' for client identification. The example targets a function named 'hello-world' on localhost.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/FunctionsTests/__Snapshots__/RequestTests/testInvokeWithCustomMethod.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request PATCH \\\n\t--header \"apikey: supabase.anon.key\" \\\n\t--header \"x-client-info: functions-swift/x.y.z\" \\\n\t\"http://localhost:5432/functions/v1/hello-world\"\n```\n\n----------------------------------------\n\nTITLE: Verify Phone Number with Supabase Auth API using cURL\nDESCRIPTION: Makes a POST request to verify a phone number through Supabase Auth API. Includes required headers like API key, content type, client info, and API version. Sends JSON payload with captcha token, phone number, verification code, and verification type.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testVerifyOTPUsingPhone.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"gotrue_meta_security\\\":{\\\"captcha_token\\\":\\\"captcha-token\\\"},\\\"phone\\\":\\\"+1 202-918-2132\\\",\\\"token\\\":\\\"123456\\\",\\\"type\\\":\\\"sms\\\"}\" \\\n\t\"http://localhost:54321/auth/v1/verify\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Storage Bucket with Supabase API using curl\nDESCRIPTION: This curl command creates a new public storage bucket in Supabase. It sends a POST request with JSON data containing bucket configuration including the bucket ID, name, and public access setting. The request includes the Content-Type header and client information.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/StorageTests/__Snapshots__/StorageBucketAPITests/StorageBucketAPITests-testCreateBucket.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: storage-swift/2.24.4\" \\\n\t--data \"{\\\"public\\\":true,\\\"id\\\":\\\"newbucket\\\",\\\"name\\\":\\\"newbucket\\\"}\" \\\n\t\"http://example.com/bucket\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Supabase Auth API using curl\nDESCRIPTION: This curl command shows how to authenticate with the Supabase Auth API for user identity authorization. It includes the required headers like API key, authorization token, client info, and API version, along with query parameters for provider, redirect URL, scopes, and HTTP redirect settings.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testGetLinkIdentityURL.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Authorization: Bearer accesstoken\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t\"http://localhost:54321/auth/v1/user/identities/authorize?extra_key=extra_value&provider=github&redirect_to=https://supabase.com&scopes=user:email&skip_http_redirect=true\"\n```\n\n----------------------------------------\n\nTITLE: Sending OTP Request to Supabase Auth API using cURL\nDESCRIPTION: Makes a POST request to Supabase's auth endpoint to initiate SMS-based OTP authentication. Includes required headers like API key and client info, along with JSON payload containing phone number and custom data.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testSignInWithOTPUsingPhone.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"channel\\\":\\\"sms\\\",\\\"create_user\\\":true,\\\"data\\\":{\\\"custom_key\\\":\\\"custom_value\\\"},\\\"gotrue_meta_security\\\":{\\\"captcha_token\\\":\\\"dummy-captcha\\\"},\\\"phone\\\":\\\"+1 202-918-2132\\\"}\" \\\n\t\"http://localhost:54321/auth/v1/otp\"\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase API with cURL\nDESCRIPTION: This snippet demonstrates how to make a GET request to the Supabase API using cURL. It sets proper headers including Accept, Content-Type, and a custom X-Client-Info header. The request retrieves todos with IDs 1, 2, and 3 and selects all fields.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.test-in-filter.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/todos?id=in.(1,2,3)&select=*\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Supabase API using cURL\nDESCRIPTION: This cURL command sends a POST request to authenticate with the Supabase API. It includes headers for API key, content type, client info, and API version. The request body contains the password, phone number, and a captcha token for security.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testSignInWithPhoneAndPassword.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"gotrue_meta_security\\\":{\\\"captcha_token\\\":\\\"dummy-captcha\\\"},\\\"password\\\":\\\"the.pass\\\",\\\"phone\\\":\\\"+1 202-918-2132\\\"}\" \\\n\t\"http://localhost:54321/auth/v1/token?grant_type=password\"\n```\n\n----------------------------------------\n\nTITLE: Sending WhatsApp Factor Challenge Request with cURL in Supabase Authentication API\nDESCRIPTION: This cURL command sends a POST request to challenge a specific authentication factor (ID 123) using the WhatsApp channel. The request includes necessary authentication headers (API key and bearer token) along with Supabase-specific metadata headers and JSON payload specifying the challenge channel.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testMFAChallengePhone.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Authorization: Bearer accesstoken\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"channel\\\":\\\"whatsapp\\\"}\" \\\n\t\"http://localhost:54321/auth/v1/factors/123/challenge\"\n```\n\n----------------------------------------\n\nTITLE: Making SMS Signup API Request to Supabase Auth with curl\nDESCRIPTION: This curl command performs a user signup request to Supabase Auth API using SMS authentication. It includes necessary headers such as API key, content type, client info, and API version, along with a JSON payload containing phone number, password, and additional custom data.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testSignUpWithPhoneAndPassword.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"channel\\\":\\\"sms\\\",\\\"data\\\":{\\\"custom_key\\\":\\\"custom_value\\\"},\\\"gotrue_meta_security\\\":{\\\"captcha_token\\\":\\\"dummy-captcha\\\"},\\\"password\\\":\\\"the.pass\\\",\\\"phone\\\":\\\"+1 202-918-2132\\\"}\" \\\n\t\"http://localhost:54321/auth/v1/signup\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple User Records with cURL in Supabase\nDESCRIPTION: This cURL command performs a POST request to insert multiple user records into a Supabase database. It includes necessary headers for JSON handling, conflict resolution preferences, and client identification. The request sends user email data and specifies conflict handling based on username.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.select-after-bulk-upsert.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"Prefer: resolution=merge-duplicates,return=representation\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t--data \"[{\\\"email\\\":\\\"johndoe@supabase.io\\\"},{\\\"email\\\":\\\"johndoe2@supabase.io\\\"}]\" \\\n\t\"https://example.supabase.co/users?columns=email&on_conflict=username&select=*\"\n```\n\n----------------------------------------\n\nTITLE: Deleting a User via Supabase Auth API using cURL\nDESCRIPTION: This cURL command sends a DELETE request to the Supabase authentication service to remove a user. It includes necessary headers such as API key, content type, client info, and API version. The request body specifies whether to perform a soft delete.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testDeleteUser.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--request DELETE \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"should_soft_delete\\\":false}\" \\\n\t\"http://localhost:54321/auth/v1/admin/users/E621E1F8-C36C-495A-93FC-0C247A3E6E5F\"\n```\n\n----------------------------------------\n\nTITLE: Resending Phone Number Change Verification with Supabase Auth API using cURL\nDESCRIPTION: This command sends a POST request to the Supabase Auth API to resend a verification message for a phone number change. It includes authentication headers, client information, and API version, along with a JSON payload containing the phone number and security metadata.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testResendPhone.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"gotrue_meta_security\\\":{\\\"captcha_token\\\":\\\"captcha-token\\\"},\\\"phone\\\":\\\"+1 202-918-2132\\\",\\\"type\\\":\\\"phone_change\\\"}\" \\\n\t\"http://localhost:54321/auth/v1/resend\"\n```\n\n----------------------------------------\n\nTITLE: Sending Email Change Request to Supabase Auth API\nDESCRIPTION: Shows how to make a POST request to the Supabase Auth API to resend an email change verification. Includes required headers like API key, content type, client info, and API version, along with JSON payload containing email and security metadata.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testResendEmail.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"email\\\":\\\"example@mail.com\\\",\\\"gotrue_meta_security\\\":{\\\"captcha_token\\\":\\\"captcha-token\\\"},\\\"type\\\":\\\"email_change\\\"}\" \\\n\t\"http://localhost:54321/auth/v1/resend?redirect_to=https://supabase.com\"\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase Users by Email Domain using cURL\nDESCRIPTION: This cURL command sends a GET request to a Supabase endpoint to retrieve user data. It filters users by email domains (supabase.io and supabase.com) and selects all fields. The request includes custom headers for content type and client information.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.likeAnyOf.txt#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/users?email=like(any).%7B%25@supabase.io,%25@supabase.com%7D&select=*\"\n```\n\n----------------------------------------\n\nTITLE: Reauthenticating with Supabase Auth API using cURL\nDESCRIPTION: This cURL command sends a request to the Supabase authentication service to reauthenticate a user. It includes necessary headers such as API key, access token, client info, and API version.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testReauthenticate.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Authorization: Bearer accesstoken\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t\"http://localhost:54321/auth/v1/reauthenticate\"\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase API for Users with Specific Email Domains using cURL\nDESCRIPTION: This cURL command sends a GET request to the Supabase API to retrieve user data. It filters users whose email addresses end with either @supabase.io or @supabase.com. The request includes custom headers for Accept, Content-Type, and Client Info.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.likeAllOf.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/users?email=like(all).%7B%25@supabase.io,%25@supabase.com%7D&select=*\"\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase Auth API using cURL in Bash\nDESCRIPTION: This curl command sends a GET request to the Supabase Auth API to retrieve user information. It includes required headers for authentication and API versioning. The command uses a dummy API key and a JWT token for authorization.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testSetSessionWithAFutureExpirationDate.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjo0ODUyMTYzNTkzLCJzdWIiOiJmMzNkM2VjOS1hMmVlLTQ3YzQtODBlMS01YmQ5MTlmM2Q4YjgiLCJlbWFpbCI6ImhpQGJpbmFyeXNjcmFwaW5nLmNvIiwicGhvbmUiOiIiLCJhcHBfbWV0YWRhdGEiOnsicHJvdmlkZXIiOiJlbWFpbCIsInByb3ZpZGVycyI6WyJlbWFpbCJdfSwidXNlcl9tZXRhZGF0YSI6e30sInJvbGUiOiJhdXRoZW50aWNhdGVkIn0.UiEhoahP9GNrBKw_OHBWyqYudtoIlZGkrjs7Qa8hU7I\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t\"http://localhost:54321/auth/v1/user\"\n```\n\n----------------------------------------\n\nTITLE: Creating TOTP Authentication Factor with Supabase API using cURL\nDESCRIPTION: This cURL command sends a POST request to create a new TOTP authentication factor. It includes necessary headers such as API key, authorization token, and content type. The request body specifies the factor type, friendly name, and issuer.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testMFAEnrollLegacy.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Authorization: Bearer accesstoken\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"factor_type\\\":\\\"totp\\\",\\\"friendly_name\\\":\\\"test\\\",\\\"issuer\\\":\\\"supabase.com\\\"}\" \\\n\t\"http://localhost:54321/auth/v1/factors\"\n```\n\n----------------------------------------\n\nTITLE: Making SSO Authentication Request to Supabase with curl\nDESCRIPTION: A curl command that sends a POST request to initiate Single Sign-On (SSO) authentication with Supabase. The request includes required headers like API key, content type, client info, and API version, along with a JSON payload containing domain, security metadata, and redirect URL.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testSignInWithSSOUsingDomain.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"domain\\\":\\\"supabase.com\\\",\\\"gotrue_meta_security\\\":{\\\"captcha_token\\\":\\\"captcha-token\\\"},\\\"redirect_to\\\":\\\"https:\\/\\/supabase.com\\\"}\" \\\n\t\"http://localhost:54321/auth/v1/sso\"\n```\n\n----------------------------------------\n\nTITLE: Supabase Auth Signup Request with cURL\nDESCRIPTION: Makes a POST request to the Supabase Auth signup endpoint with custom headers including API key, client info, and API version. Includes a JSON payload with custom data and captcha token for security.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testSignInAnonymously.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"data\\\":{\\\"custom_key\\\":\\\"custom_value\\\"},\\\"gotrue_meta_security\\\":{\\\"captcha_token\\\":\\\"captcha-token\\\"}}\" \\\n\t\"http://localhost:54321/auth/v1/signup\"\n```\n\n----------------------------------------\n\nTITLE: Executing Logout Request with Supabase Auth API using cURL\nDESCRIPTION: This curl command demonstrates how to make a POST request to the Supabase authentication logout endpoint. It includes required headers such as the API key, authorization token, client information, and API version. The request targets the \"others\" scope for logout.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testSignOutWithOthersScope.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Authorization: Bearer accesstoken\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t\"http://localhost:54321/auth/v1/logout?scope=others\"\n```\n\n----------------------------------------\n\nTITLE: Making RPC Request to Supabase with Curl\nDESCRIPTION: This curl command makes a request to a Supabase RPC endpoint named 'sum'. It sets proper headers including Accept and Content-Type as JSON, and includes the X-Client-Info header to identify the client library version.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.rpc-call-with-get.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/rpc/sum\"\n```\n\n----------------------------------------\n\nTITLE: Sending Authentication Verification Request to Supabase API using cURL\nDESCRIPTION: This cURL command sends a POST request to verify a token with the Supabase authentication API. It includes custom headers for API key, content type, client info, and API version. The request body contains a token hash and type for verification.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testVerifyOTPUsingTokenHash.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t--data \"{\\\"token_hash\\\":\\\"abc-def\\\",\\\"type\\\":\\\"email\\\"}\" \\\n\t\"http://localhost:54321/auth/v1/verify\"\n```\n\n----------------------------------------\n\nTITLE: Making POST Request to Supabase API using curl\nDESCRIPTION: This curl command sends a POST request to create a new user in Supabase. It includes the necessary headers for JSON handling, merge preference, and client identification, along with a JSON payload containing the user's email.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.test-upsert-not-ignoring-duplicates.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"Prefer: resolution=merge-duplicates,return=representation\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t--data \"{\\\"email\\\":\\\"johndoe@supabase.io\\\"}\" \\\n\t\"https://example.supabase.co/users\"\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request to Challenge an MFA Factor using cURL\nDESCRIPTION: This cURL command sends a POST request to challenge a specific MFA factor (identified by '123') in the Supabase Authentication API. It includes required headers for authentication, API versioning, and client information.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testMFAChallenge.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Authorization: Bearer accesstoken\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t\"http://localhost:54321/auth/v1/factors/123/challenge\"\n```\n\n----------------------------------------\n\nTITLE: Deleting a User Identity with cURL in Supabase Auth API\nDESCRIPTION: A cURL command that sends a DELETE request to remove a specific user identity from Supabase. The request includes authentication headers (API key and Bearer token), client information, and the API version. The request targets a specific identity by its UUID.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testUnlinkIdentity.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request DELETE \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Authorization: Bearer accesstoken\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t\"http://localhost:54321/auth/v1/user/identities/E621E1F8-C36C-495A-93FC-0C247A3E6E5F\"\n```\n\n----------------------------------------\n\nTITLE: Deleting MFA Factor with Supabase Authentication API using curl\nDESCRIPTION: This curl command demonstrates how to delete a multi-factor authentication factor from Supabase. It includes the required headers for authentication (API key and bearer token), client information, API version, and targets a specific factor ID (123).\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testMFAUnenroll.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request DELETE \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Authorization: Bearer accesstoken\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t\"http://localhost:54321/auth/v1/factors/123\"\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase Users with cURL\nDESCRIPTION: Makes a GET request to Supabase API to query users with email matching pattern. Includes required headers for content type, accept and client info. Uses URL parameters for filtering and selecting fields.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.select-all-users-where-email-ends-with-supabase-co.txt#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/users?email=like.%25@supabase.co&select=*\"\n```\n\n----------------------------------------\n\nTITLE: Making POST Request to Supabase Users Endpoint with cURL\nDESCRIPTION: Sends a POST request to create a new user in Supabase. Includes required headers for content type, client info, and JSON payload with user email.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.insert-new-user.txt#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t--data \"{\\\"email\\\":\\\"johndoe@supabase.io\\\"}\" \\\n\t\"https://example.supabase.co/users\"\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase API with cURL\nDESCRIPTION: This cURL command sends a GET request to the Supabase API to fetch user data. It includes custom headers for content type and client information, and uses query parameters to filter results by creation date and select all columns.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.filter-using-Date.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/users?created_at=gt.1970-01-01T00:00:00.000Z&select=*\"\n```\n\n----------------------------------------\n\nTITLE: POST Request to Supabase Users Endpoint Using cURL\nDESCRIPTION: This cURL command demonstrates how to make a POST request to add a user to a Supabase database. The request includes necessary headers for JSON formatting, return preferences, and client information. It sends user email data and requests specific fields to be returned in the response.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.select-after-an-insert.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"Prefer: return=representation\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t--data \"{\\\"email\\\":\\\"johndoe@supabase.io\\\"}\" \\\n\t\"https://example.supabase.co/users?select=id,email\"\n```\n\n----------------------------------------\n\nTITLE: Making a cURL Request to Supabase API\nDESCRIPTION: Example cURL command that makes a GET request to a Supabase endpoint to retrieve user data. The request includes required headers for content type and client information, along with URL parameters for filtering and selecting data.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.containedBy-using-array.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/users?id=cd.%7Ba,b,c%7D&select=*\"\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to Supabase API using cURL\nDESCRIPTION: This cURL command sends a POST request to add multiple users to a Supabase 'users' table. It includes custom headers for content type and client info, and sends JSON data in the request body. The response will include the email and username columns.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.bulk-insert-users.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t--data \"[{\\\"email\\\":\\\"johndoe@supabase.io\\\"},{\\\"email\\\":\\\"johndoe2@supabase.io\\\",\\\"username\\\":\\\"johndoe2\\\"}]\" \\\n\t\"https://example.supabase.co/users?columns=email,username\"\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase Users with cURL\nDESCRIPTION: Makes a GET request to Supabase's users endpoint with custom headers and query parameters. Includes Accept and Content-Type headers for JSON, client info header, and filters users based on a phone number condition.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.filter-starting-with-non-alphanumeric.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/users?select=*&to=eq.+16505555555\"\n```\n\n----------------------------------------\n\nTITLE: Inserting User Data with cURL to Supabase REST API\nDESCRIPTION: This cURL command sends a POST request to insert multiple user records into a Supabase database. It includes custom headers for content type, preference settings for handling duplicates, and client information. The request body contains JSON data with email and username fields.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.bulk-upsert.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"Prefer: resolution=merge-duplicates,return=representation\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t--data \"[{\\\"email\\\":\\\"johndoe@supabase.io\\\"},{\\\"email\\\":\\\"johndoe2@supabase.io\\\",\\\"username\\\":\\\"johndoe2\\\"}]\" \\\n\t\"https://example.supabase.co/users?columns=email,username\"\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Request to Supabase API with curl\nDESCRIPTION: This snippet demonstrates how to use curl to make an HTTP GET request to a Supabase API endpoint. It includes required headers like Accept, Content-Type, and X-Client-Info, along with URL parameters for filtering users by name and other criteria.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.test-contains-filter-with-array.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/users?name=cs.%7Bis:online,faction:red%7D&select=*\"\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to Supabase API using cURL\nDESCRIPTION: This cURL command sends a POST request to insert a new user into the Supabase database. It sets necessary headers including content type, preference for handling duplicates, and client info. The request body includes the user's email in JSON format.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.test-upsert-ignoring-duplicates.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"Prefer: resolution=ignore-duplicates,return=representation\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t--data \"{\\\"email\\\":\\\"johndoe@supabase.io\\\"}\" \\\n\t\"https://example.supabase.co/users\"\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase API with cURL and Swift Headers\nDESCRIPTION: This cURL command sends a GET request to the Supabase API to fetch user data. It includes custom headers for JSON content type and Swift client information. The URL is encoded to handle special characters in the query parameters.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.query-with-character.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/users?id=eq.Cig%C3%A1nyka-%C3%A9r%20(0+400%20cskm)%20v%C3%ADzrajzi%20%C3%A1llom%C3%A1s&select=*\"\n```\n\n----------------------------------------\n\nTITLE: Making POST Request to Supabase RPC Endpoint with curl\nDESCRIPTION: This curl command makes a POST request to a Supabase RPC endpoint named 'test_fcn' with a query parameter 'id=eq.1'. It includes required headers for JSON content type, acceptance, and client information identifying the request as coming from the postgrest-swift library.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.call-rpc-with-filter.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/rpc/test_fcn?id=eq.1\"\n```\n\n----------------------------------------\n\nTITLE: Performing User Logout with Supabase Auth API using curl\nDESCRIPTION: This command sends a POST request to the Supabase Auth API logout endpoint. It includes required headers such as API key, bearer token for authorization, client info, and API version. The 'scope=local' parameter indicates a local logout.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/AuthTests/__Snapshots__/RequestsTests/testSignOutWithLocalScope.1.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Apikey: dummy.api.key\" \\\n\t--header \"Authorization: Bearer accesstoken\" \\\n\t--header \"X-Client-Info: gotrue-swift/x.y.z\" \\\n\t--header \"X-Supabase-Api-Version: 2024-01-01\" \\\n\t\"http://localhost:54321/auth/v1/logout?scope=local\"\n```\n\n----------------------------------------\n\nTITLE: Making POST Request to Supabase RPC Endpoint using cURL\nDESCRIPTION: This cURL command sends a POST request to a Supabase RPC endpoint. It sets the appropriate headers for JSON content and includes a custom X-Client-Info header for the postgrest-swift client. The command is structured for easy readability with each option on a new line.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.call-rpc-without-parameter.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/rpc/test_fcn\"\n```\n\n----------------------------------------\n\nTITLE: Making a HEAD Request to Supabase RPC Endpoint with cURL\nDESCRIPTION: This command demonstrates how to make a HEAD request to a Supabase RPC endpoint using cURL. It includes the necessary headers for content type, accept type, and client information, which are required for proper communication with the Supabase API.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.rpc-call-with-head.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--head \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/rpc/sum\"\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase API with cURL and Headers\nDESCRIPTION: A cURL command that demonstrates how to make an HTTP request to a Supabase endpoint. It includes required headers like Accept and Content-Type, as well as the X-Client-Info header specific to postgrest-swift. The example shows how to query the 'users' table with filter parameters.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.containedBy-using-json.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/users?select=*&userMetadata=cd.%7B%22age%22:18%7D\"\n```\n\n----------------------------------------\n\nTITLE: Query Supabase Users with cURL\nDESCRIPTION: Makes a GET request to Supabase API to fetch users within an age range. Includes required headers for content type, accept type, and client information. Uses URL-encoded query parameters for age range filtering.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.containedBy-using-range.txt#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/users?age=cd.%5B10,20%5D&select=*\"\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase Users with Email Filter using cURL\nDESCRIPTION: Makes a GET request to Supabase API to fetch users with email addresses ending in @supabase.io or @supabase.com. Includes required headers for JSON content and client identification.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.iLikeAnyOf.txt#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/users?email=ilike(any).%7B%25@supabase.io,%25@supabase.com%7D&select=*\"\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase Users with Email Filter using cURL\nDESCRIPTION: This cURL command makes a GET request to a Supabase endpoint to retrieve user data. It filters users by email addresses ending with @supabase.io or @supabase.com and selects all fields. The request includes custom headers for JSON content type and client information.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.iLikeAllOf.txt#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/users?email=ilike(all).%7B%25@supabase.io,%25@supabase.com%7D&select=*\"\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase API for Users with Null Emails using cURL\nDESCRIPTION: This cURL command sends a GET request to the Supabase API to retrieve users with null email addresses. It includes required headers for JSON content type and client identification, and uses URL parameters to filter the results.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.query-if-nil-value.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/users?email=is.NULL&select=*\"\n```\n\n----------------------------------------\n\nTITLE: Making GET Request to Supabase Storage API using cURL\nDESCRIPTION: This cURL command sends a GET request to the Supabase storage API. It includes headers for accepting JSON, specifying the storage profile, setting the content type, and identifying the client. The request fetches all objects from the storage.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.query-non-default-schema.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Accept-Profile: storage\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/objects?select=*\"\n```\n\n----------------------------------------\n\nTITLE: Making a Filtered GET Request to Supabase API using cURL\nDESCRIPTION: This cURL command demonstrates how to query a Supabase 'tasks' endpoint with custom headers, ordering by 'received_at' in ascending order (with nulls last), filtering for entries after a specific timestamp, and selecting all fields.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.query-with-timestampz.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/tasks?order=received_at.asc.nullslast&received_at=gt.2023-03-23T15:50:30.511743+00:00&select=*\"\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase API with cURL\nDESCRIPTION: Makes a GET request to retrieve user data from Supabase, filtering by postcode and selecting only the name field. Includes required headers for content type, accept type, and client information.\nSOURCE: https://github.com/supabase/supabase-swift/blob/main/Tests/PostgRESTTests/__Snapshots__/BuildURLRequestTests/testBuildRequest.test-contains-filter-with-dictionary.txt#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl \\\n\t--header \"Accept: application/json\" \\\n\t--header \"Content-Type: application/json\" \\\n\t--header \"X-Client-Info: postgrest-swift/x.y.z\" \\\n\t\"https://example.supabase.co/users?address=cs.%7B%22postcode%22:90210%7D&select=name\"\n```"
  }
]