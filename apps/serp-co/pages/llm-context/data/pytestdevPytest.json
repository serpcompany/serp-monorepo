[
  {
    "owner": "pytest-dev",
    "repo": "pytest",
    "content": "TITLE: Checking Pytest Version\nDESCRIPTION: This command checks the installed version of pytest. It's useful to verify that pytest is installed correctly and to know the version number for compatibility or debugging purposes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest --version\npytest 8.3.5\n```\n\n----------------------------------------\n\nTITLE: Asserting expected exceptions using pytest.raises\nDESCRIPTION: This snippet demonstrates how to use `pytest.raises` as a context manager to assert that a specific exception is raised within a block of code.  It checks if a `ZeroDivisionError` is raised when dividing 1 by 0. The `pytest.raises` function is used to handle expected exceptions and verify their occurrence.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\ndef test_zero_division():\n    with pytest.raises(ZeroDivisionError):\n        1 / 0\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command upgrades the pytest package to the latest version available on PyPI using pip. It ensures that the existing pytest installation is replaced with the newest release.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-6.2.5.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Safe Pytest Fixture Structure Example\nDESCRIPTION: This example demonstrates a safe and well-structured pytest fixture setup for testing a website login scenario. It uses separate fixtures for each state-changing action (admin client, user creation, browser driver), each with its own teardown code, to ensure proper cleanup even if exceptions occur. This promotes test isolation and prevents resource leaks.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom uuid import uuid4\nfrom urllib.parse import urljoin\n\nfrom selenium.webdriver import Chrome\nimport pytest\n\nfrom src.utils.pages import LoginPage, LandingPage\nfrom src.utils import AdminApiClient\nfrom src.utils.data_types import User\n\n\n@pytest.fixture\ndef admin_client(base_url, admin_credentials):\n    return AdminApiClient(base_url, **admin_credentials)\n\n\n@pytest.fixture\ndef user(admin_client):\n    _user = User(name=\"Susan\", username=f\"testuser-{uuid4()}\", password=\"P4$$word\")\n    admin_client.create_user(_user)\n    yield _user\n    admin_client.delete_user(_user)\n\n\n@pytest.fixture\ndef driver():\n    _driver = Chrome()\n    yield _driver\n    _driver.quit()\n\n\n@pytest.fixture\ndef login(driver, base_url, user):\n    driver.get(urljoin(base_url, \"/login\"))\n    page = LoginPage(driver)\n    page.login(user)\n\n\n@pytest.fixture\ndef landing_page(driver, login):\n    return LandingPage(driver)\n\n\ndef test_name_on_landing_page_after_login(landing_page, user):\n    assert landing_page.header == f\"Welcome, {user.name}!\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command upgrades the pytest package to the latest version (3.3.2 in this case) using the pip package installer. It ensures you have the newest bug fixes and features.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.3.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Parametrizing Test Functions with @pytest.mark.parametrize (Python)\nDESCRIPTION: This snippet demonstrates how to use the `@pytest.mark.parametrize` decorator to parametrize a test function with multiple sets of input and expected output values. The `test_eval` function will be executed three times, each time with a different `test_input` and `expected` value.  Dependencies: pytest.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/parametrize.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\n@pytest.mark.parametrize(\"test_input,expected\", [(\"3+5\", 8), (\"2+4\", 6), (\"6*9\", 42)])\ndef test_eval(test_input, expected):\n    assert eval(test_input) == expected\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Fixtures with usefixtures\nDESCRIPTION: This code shows how to apply multiple fixtures to a test function using the `usefixtures` marker. In this example, both `cleandir` and `anotherfixture` will be executed before the `test` function.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.usefixtures(\"cleandir\", \"anotherfixture\")\ndef test(): ...\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This code snippet shows how to upgrade pytest to the latest version using the pip package manager. It's a straightforward command to update the package from PyPI.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.1.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Overriding Fixture in Folder conftest.py\nDESCRIPTION: This code demonstrates how to override a fixture at the folder level using a `conftest.py` file. The `username` fixture is defined in the root `conftest.py` and then overridden in the `subfolder/conftest.py`.  The overridden fixture uses the original fixture's value.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n@pytest.fixture\ndef username():\n    return 'username'\n```\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n@pytest.fixture\ndef username(username):\n    return 'overridden-' + username\n```\n\n----------------------------------------\n\nTITLE: Mocking API Response with Monkeypatch in pytest\nDESCRIPTION: This snippet illustrates how to mock an API response using monkeypatch and a custom class. It defines a MockResponse class with a json() method that returns a predefined dictionary. The monkeypatch.setattr method is then used to replace the requests.get function with a mock_get function that returns an instance of the MockResponse class, allowing tests to avoid actual API calls.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# contents of test_app.py, a simple test for our API retrieval\n# import requests for the purposes of monkeypatching\nimport requests\n\n# our app.py that includes the get_json() function\n# this is the previous code block example\nimport app\n\n\n# custom class to be the mock return value\n# will override the requests.Response returned from requests.get\nclass MockResponse:\n    # mock json() method always returns a specific testing dictionary\n    @staticmethod\n    def json():\n        return {\"mock_key\": \"mock_response\"}\n\n\ndef test_get_json(monkeypatch):\n    # Any arguments may be passed and mock_get() will always return our\n    # mocked object, which only has the .json() method.\n    def mock_get(*args, **kwargs):\n        return MockResponse()\n\n    # apply the monkeypatch for requests.get to mock_get\n    monkeypatch.setattr(requests, \"get\", mock_get)\n\n    # app.get_json, which contains requests.get, uses the monkeypatch\n    result = app.get_json(\"https://fakeurl\")\n    assert result[\"mock_key\"] == \"mock_response\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This snippet shows how to upgrade pytest to the latest version (in this case, 6.2.3) using the pip package manager. The command `pip install --upgrade pytest` will upgrade the existing pytest installation to the newest available version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-6.2.3.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Pytest Configuration in pyproject.toml\nDESCRIPTION: This example shows how to configure pytest using a `pyproject.toml` file.  The configuration is placed within the `tool.pytest.ini_options` table.  This is a TOML-based alternative to `pytest.ini`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/customize.rst#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n# pyproject.toml\n[tool.pytest.ini_options]\nminversion = \"6.0\"\naddopts = \"-ra -q\"\ntestpaths = [\n    \"tests\",\n    \"integration\",\n]\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command is used to upgrade the pytest package to the latest version using pip, the Python package installer. This ensures that you have the most recent bug fixes and features.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.1.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Asserting with the assert statement in Pytest\nDESCRIPTION: This snippet demonstrates a basic assertion using the Python `assert` statement within a Pytest test function. It defines a function `f` that returns 3, and a test function `test_function` that asserts whether `f()` returns 4. This example shows how Pytest provides detailed failure information when an assertion fails.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef f():\n    return 3\n\n\ndef test_function():\n    assert f() == 4\n```\n\n----------------------------------------\n\nTITLE: Modular Fixture Design in Pytest\nDESCRIPTION: This example demonstrates how to create modular pytest fixtures by using one fixture within another. The `app` fixture depends on the `smtp_connection` fixture. This approach allows for better organization and reuse of fixture logic.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n# content of test_appsetup.py\n\nimport pytest\n\n\nclass App:\n    def __init__(self, smtp_connection):\n        self.smtp_connection = smtp_connection\n\n\n@pytest.fixture(scope=\"module\")\ndef app(smtp_connection):\n    return App(smtp_connection)\n\n\ndef test_smtp_connection_exists(app):\n    assert app.smtp_connection\n```\n\n----------------------------------------\n\nTITLE: Deferring Setup of Parametrized Resources\nDESCRIPTION: This snippet demonstrates how to defer the setup of expensive resources until the actual test is run. It uses `pytest_generate_tests` to parametrize the `test_db_initialized` function with different database objects (`d1`, `d2`) and then implements a fixture (`db`) to create the database object based on the parameter value using `request.param`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\ndef test_db_initialized(db):\n    # a dummy test\n    if db.__class__.__name__ == \"DB2\":\n        pytest.fail(\"deliberately failing for demo purposes\")\n```\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\ndef pytest_generate_tests(metafunc):\n    if \"db\" in metafunc.fixturenames:\n        metafunc.parametrize(\"db\", [\"d1\", \"d2\"], indirect=True)\n\n\nclass DB1:\n    \"one database object\"\n\n\nclass DB2:\n    \"alternative database object\"\n\n\n@pytest.fixture\ndef db(request):\n    if request.param == \"d1\":\n        return DB1()\n    elif request.param == \"d2\":\n        return DB2()\n    else:\n        raise ValueError(\"invalid internal test config\")\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This code snippet provides the command to upgrade pytest to the latest version using pip. It uses the `--upgrade` flag to ensure the existing version is updated.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.6.3.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Testing Exception Raising in Python\nDESCRIPTION: This Python code demonstrates how to test if a function raises a specific exception using `pytest.raises`. It defines a function `f` that raises `SystemExit` and a test function `test_mytest` that asserts that `f()` raises `SystemExit` using a context manager.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# content of test_sysexit.py\nimport pytest\n\n\ndef f():\n    raise SystemExit(1)\n\n\ndef test_mytest():\n    with pytest.raises(SystemExit):\n        f()\n```\n\n----------------------------------------\n\nTITLE: TOML Configuration for pytest Import Mode\nDESCRIPTION: This code snippet configures pytest to use the `importlib` import mode. Adding this to the `pyproject.toml` file allows pytest to discover test modules without modifying `sys.path`, avoiding common pitfalls associated with the default `prepend` mode. It's recommended for new projects.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/goodpractices.rst#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tool.pytest.ini_options]\naddopts = [\n    \"--import-mode=importlib\",\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Pytest using pip\nDESCRIPTION: This command installs or upgrades pytest using pip, the Python package installer. The -U flag ensures that pytest is upgraded to the latest version if it's already installed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: End-to-End Login Test Structure with Pytest Fixtures (Python)\nDESCRIPTION: This code demonstrates structuring end-to-end tests with pytest fixtures. It shows how to define fixtures for common tasks like creating an admin client, a user, a Selenium driver, and logging in. Fixtures are used to manage dependencies and ensure that the necessary setup is done before each test, reducing code duplication and improving test maintainability.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n# contents of tests/end_to_end/test_login.py\nfrom uuid import uuid4\nfrom urllib.parse import urljoin\n\nfrom selenium.webdriver import Chrome\nimport pytest\n\nfrom src.utils.pages import LoginPage, LandingPage\nfrom src.utils import AdminApiClient\nfrom src.utils.data_types import User\n\n\n@pytest.fixture(scope=\"class\")\ndef admin_client(base_url, admin_credentials):\n    return AdminApiClient(base_url, **admin_credentials)\n\n\n@pytest.fixture(scope=\"class\")\ndef user(admin_client):\n    _user = User(name=\"Susan\", username=f\"testuser-{uuid4()}\", password=\"P4$$word\")\n    admin_client.create_user(_user)\n    yield _user\n    admin_client.delete_user(_user)\n\n\n@pytest.fixture(scope=\"class\")\ndef driver():\n    _driver = Chrome()\n    yield _driver\n    _driver.quit()\n\n\n@pytest.fixture(scope=\"class\")\ndef landing_page(driver, login):\n    return LandingPage(driver)\n\n\nclass TestLandingPageSuccess:\n    @pytest.fixture(scope=\"class\", autouse=True)\n    def login(self, driver, base_url, user):\n        driver.get(urljoin(base_url, \"/login\"))\n        page = LoginPage(driver)\n        page.login(user)\n\n    def test_name_in_header(self, landing_page, user):\n        assert landing_page.header == f\"Welcome, {user.name}!\"\n\n    def test_sign_out_button(self, landing_page):\n        assert landing_page.sign_out_button.is_displayed()\n\n    def test_profile_link(self, landing_page, user):\n        profile_href = urljoin(base_url, f\"/profile?id={user.profile_id}\")\n        assert landing_page.profile_link.get_attribute(\"href\") == profile_href\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest with Pip\nDESCRIPTION: This command upgrades the pytest package to the latest version available on PyPI using the pip package installer. It ensures that you have the most recent version of pytest with all the latest features and bug fixes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.1.0.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Custom Assertion Explanation with pytest_assertrepr_compare\nDESCRIPTION: This demonstrates how to provide a custom explanation for failed assertions by implementing the pytest_assertrepr_compare hook in a conftest.py file. It compares instances of a custom class Foo and provides a detailed message showing differences in the 'val' attribute.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# content of conftest.py\nfrom test_foocompare import Foo\n\n\ndef pytest_assertrepr_compare(op, left, right):\n    if isinstance(left, Foo) and isinstance(right, Foo) and op == \"==\":\n        return [\n            \"Comparing Foo instances:\",\n            f\"   vals: {left.val} != {right.val}\",\n        ]\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest via pip\nDESCRIPTION: This snippet shows the command to upgrade pytest to the latest version using the pip package manager. It uses the `--upgrade` flag to ensure the existing pytest installation is updated.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.6.4.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Customizing log format and date format in pytest.ini\nDESCRIPTION: This snippet demonstrates how to customize the log and date format using the `pytest.ini` file. It defines the `log_format` and `log_date_format` options within the `[pytest]` section to globally configure the log message format.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nlog_format = %(asctime)s %(levelname)s %(message)s\nlog_date_format = %Y-%m-%d %H:%M:%S\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest via pip\nDESCRIPTION: This command is used to upgrade the pytest package to the latest version using the pip package installer. It ensures that pytest is updated to the newest release, including bug fixes and improvements.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.2.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Test with Parameter\nDESCRIPTION: This snippet defines a simple test function `test_compute` that asserts that the input parameter `param1` is less than 4.  It's used as a base for demonstrating how to parametrize tests with different input values controlled by command-line arguments.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef test_compute(param1):\n    assert param1 < 4\n```\n\n----------------------------------------\n\nTITLE: Testing for Specific Warnings with pytest.warns (Python)\nDESCRIPTION: This code snippet demonstrates how to use `pytest.warns` to assert that a specific warning type is raised within a test.  The test will fail if the expected warning is not raised.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport warnings\n\nimport pytest\n\n\ndef test_warning():\n    with pytest.warns(UserWarning):\n        warnings.warn(\"my warning\", UserWarning)\n```\n\n----------------------------------------\n\nTITLE: Requiring Plugins in Pytest\nDESCRIPTION: This snippet shows how to specify required plugins for pytest to run, using the `required_plugins` option in the `pytest.ini` file. If any of the specified plugins are not installed, pytest will exit with an error. Version specifiers can also be included to enforce specific plugin versions.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_49\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nrequired_plugins = pytest-django>=3.0.0,<4.0.0 pytest-html pytest-xdist>=1.0.0\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This snippet demonstrates how to upgrade pytest to the latest version using pip, the Python package installer. This command ensures that the user has the newest bug fixes and features available in the pytest framework.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.3.3.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Setting log level using the caplog fixture (Python)\nDESCRIPTION: This snippet demonstrates how to use the `caplog` fixture to set the log level for captured log messages inside a test function. The `caplog.set_level()` method is used to set the level to `logging.INFO`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef test_foo(caplog):\n    caplog.set_level(logging.INFO)\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest with Pip\nDESCRIPTION: This snippet shows how to upgrade pytest to the latest version using pip, the Python package installer. It uses the `--upgrade` flag to ensure that any existing pytest installation is updated.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.6.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Configure pyproject.toml for pip-installable plugin\nDESCRIPTION: This example shows how to configure a pyproject.toml file to make a plugin installable. It defines the [project.entry-points.pytest11] section to expose the plugin module to pytest.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_plugins.rst#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"myproject\"\nclassifiers = [\n    \"Framework :: Pytest\",\n]\n\n[project.entry-points.pytest11]\nmyproject = \"myproject.pluginmodule\"\n```\n\n----------------------------------------\n\nTITLE: Installing or Upgrading pytest using pip\nDESCRIPTION: This command demonstrates how to install or upgrade pytest using the pip package manager. The `-U` flag ensures that pytest and its dependencies are upgraded to the latest available versions.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.2.0.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Setting Log File Format in Pytest\nDESCRIPTION: This snippet demonstrates setting the format of log messages written to a file in pytest using the `log_file_format` option within the `pytest.ini` file. It allows for customizing the structure and content of log entries in the file. The format string uses standard logging format specifiers.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_37\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nlog_file_format = %(asctime)s %(levelname)s %(message)s\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using the pip package installer. It ensures that any existing pytest installation is updated to the newest version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-6.0.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Pytest Autouse Fixture Multiple Scopes\nDESCRIPTION: This example shows the impact of autouse fixtures in multiple scopes. An autouse fixture will execute for every test that can reach it, even if the test doesn't request it. However, a non-autouse fixture requested by an autouse fixture only becomes effectively autouse within the autouse fixture's context.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/fixtures.rst#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n# content of test_fixtures_order_autouse_multiple_scopes.py\nimport pytest\n\n@pytest.fixture(autouse=True)\ndef c1():\n    print(\"\\nFixture c1\")\n\nclass TestClassWithoutC1Request:\n    def test_no_c1(self):\n        print(\"\\nTest without c1\")\n        assert True\n\n\nclass TestClassWithC1Request:\n    def test_with_c1(self, c1):\n        print(\"\\nTest with c1\")\n        assert True\n```\n\n----------------------------------------\n\nTITLE: Accessing exception information with pytest.raises\nDESCRIPTION: This snippet shows how to access exception information using `pytest.raises`. The exception info is stored in the `excinfo` variable, which can be used to verify details about the exception.  Here, it checks if the error message contains \"maximum recursion\" when a recursive function causes a `RuntimeError`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef test_recursion_depth():\n    with pytest.raises(RuntimeError) as excinfo:\n\n        def f():\n            f()\n\n        f()\n    assert \"maximum recursion\" in str(excinfo.value)\n```\n\n----------------------------------------\n\nTITLE: Overriding Fixture in Test Module\nDESCRIPTION: This demonstrates how to override a fixture at the test module level. Each module (`test_something.py`, `test_something_else.py`) overrides the `username` fixture defined in the root `conftest.py`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n@pytest.fixture\ndef username(username):\n    return 'overridden-' + username\n```\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n@pytest.fixture\ndef username(username):\n    return 'overridden-else-' + username\n```\n\n----------------------------------------\n\nTITLE: Installing or upgrading pytest with pip\nDESCRIPTION: This command is used to install or upgrade pytest using the pip package installer. The -U flag ensures that pytest and its dependencies are upgraded to the latest available versions.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.3.5.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: TOML Configuration for pytest Pythonpath\nDESCRIPTION: This code snippet adds the `src` directory to the `pythonpath` configuration variable in `pyproject.toml`. This allows pytest to find and import the application code when running tests without an editable install and using the `src` layout. It provides a permanent solution for extending Python's search path.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/goodpractices.rst#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[tool.pytest.ini_options]\npythonpath = \"src\"\n```\n\n----------------------------------------\n\nTITLE: Testing Bad Login Credentials with Pytest Fixtures (Python)\nDESCRIPTION: This code snippet demonstrates testing scenarios with bad login credentials using pytest fixtures. It defines a `faux_user` fixture to simulate a user with incorrect credentials and uses `pytest.raises` to assert that the `LoginPage` raises a `BadCredentialsException` when attempting to log in with the invalid user.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nclass TestLandingPageBadCredentials:\n    @pytest.fixture(scope=\"class\")\n    def faux_user(self, user):\n        _user = deepcopy(user)\n        _user.password = \"badpass\"\n        return _user\n\n    def test_raises_bad_credentials_exception(self, login_page, faux_user):\n        with pytest.raises(BadCredentialsException):\n            login_page.login(faux_user)\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest using Pip\nDESCRIPTION: This code snippet demonstrates how to upgrade pytest to the latest version using pip, the Python package installer. This ensures the user has the newest features and bug fixes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.6.7.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Parametrizing Fixtures (Python)\nDESCRIPTION: This example shows how to parametrize a fixture using the `params` argument of the `@pytest.fixture` decorator. This causes the fixture to be called multiple times, once for each parameter value, and all tests depending on the fixture will be executed for each parameter set. The `request.param` attribute provides access to the current parameter value within the fixture.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n# content of conftest.py\nimport smtplib\n\nimport pytest\n\n\n@pytest.fixture(scope=\"module\", params=[\"smtp.gmail.com\", \"mail.python.org\"])\ndef smtp_connection(request):\n    smtp_connection = smtplib.SMTP(request.param, 587, timeout=5)\n    yield smtp_connection\n    print(f\"finalizing {smtp_connection}\")\n    smtp_connection.close()\n```\n\n----------------------------------------\n\nTITLE: Pytest Fixture for Temporary Directory\nDESCRIPTION: This fixture creates a temporary directory, changes the current working directory to it, and restores the original working directory after the test. It uses the `tempfile` module to create the temporary directory and `os` module to manage the current working directory.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport tempfile\n\nimport pytest\n\n\n@pytest.fixture\ndef cleandir():\n    with tempfile.TemporaryDirectory() as newpath:\n        old_cwd = os.getcwd()\n        os.chdir(newpath)\n        yield\n        os.chdir(old_cwd)\n```\n\n----------------------------------------\n\nTITLE: Accessing Captured Output (Python)\nDESCRIPTION: This Python code demonstrates how to use the capsys fixture in pytest to access and assert against captured stdout and stderr output.  It uses the readouterr() method to retrieve the captured output.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-stdout-stderr.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef test_myoutput(capsys):  # or use \"capfd\" for fd-level\n    print(\"hello\")\n    sys.stderr.write(\"world\\n\")\n    captured = capsys.readouterr()\n    assert captured.out == \"hello\\n\"\n    assert captured.err == \"world\\n\"\n    print(\"next\")\n    captured = capsys.readouterr()\n    assert captured.out == \"next\\n\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command demonstrates how to upgrade the pytest package to the latest version using the pip package installer. The -U flag ensures that pytest and its dependencies are upgraded if a previous version is already installed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.6.3.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Configuring Warning Filters in pytest.ini\nDESCRIPTION: This snippet shows how to configure warning filters in the `pytest.ini` file. It configures pytest to treat all warnings as errors, ignore UserWarning, and ignore DeprecationWarning matching the specified regex.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nfilterwarnings =\n    error\n    ignore::UserWarning\n    ignore:function ham\\(\\) is deprecated:DeprecationWarning\n```\n\n----------------------------------------\n\nTITLE: Example of Command Line Usage for Rootdir Determination\nDESCRIPTION: This demonstrates an example command used to trigger rootdir determination. It uses the command `pytest path/to/testdir path/other/` to find the common ancestor.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/customize.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\npytest path/to/testdir path/other/\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This snippet provides the command to upgrade the pytest package to the latest version using the pip package installer. It ensures that the latest bug fixes and features are installed. The command is `pip install --upgrade pytest`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.6.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Skipping on a missing import\nDESCRIPTION: Shows how to skip tests if a required import is missing using `pytest.importorskip`. If the module cannot be imported, the test is skipped.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndocutils = pytest.importorskip(\"docutils\")\n```\n\nLANGUAGE: python\nCODE:\n```\ndocutils = pytest.importorskip(\"docutils\", minversion=\"0.3\")\n```\n\n----------------------------------------\n\nTITLE: Skipping tests if an import is missing\nDESCRIPTION: Shows how to skip all tests in a module if a specific import is missing using `pytest.importorskip`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npexpect = pytest.importorskip(\"pexpect\")\n```\n\n----------------------------------------\n\nTITLE: Running Tests in a Module - Bash\nDESCRIPTION: This command executes all tests within the specified module file. It's a simple way to focus testing on a specific part of the codebase.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest test_mod.py\n```\n\n----------------------------------------\n\nTITLE: Conditionally skipping tests\nDESCRIPTION: Demonstrates how to use `pytest.mark.skipif` to conditionally skip tests based on a condition. The example skips the test if the Python version is less than 3.10.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\n\n@pytest.mark.skipif(sys.version_info < (3, 10), reason=\"requires python3.10 or higher\")\ndef test_function(): ...\n```\n\n----------------------------------------\n\nTITLE: Writing a Pytest Test Function with Assertions\nDESCRIPTION: This snippet defines a test function `test_answer()` using pytest. It asserts that calling `inc(3)` returns 5.  This showcases pytest's simple assertion style and auto-discovery of test functions.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/index.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef test_answer():\n    assert inc(3) == 5\n```\n\n----------------------------------------\n\nTITLE: Parametrizing all Tests in a Module with pytestmark (Python)\nDESCRIPTION: This code demonstrates how to use the `pytestmark` global variable to parametrize all tests within a module. All test methods in the `TestClass` will be executed with each combination of `n` and `expected` specified in the `parametrize` marker. Dependencies: pytest.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/parametrize.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\npytestmark = pytest.mark.parametrize(\"n,expected\", [(1, 2), (3, 4)])\n\n\nclass TestClass:\n    def test_simple_case(self, n, expected):\n        assert n + 1 == expected\n\n    def test_weird_simple_case(self, n, expected):\n        assert (n * 1) + 1 == expected\n```\n\n----------------------------------------\n\nTITLE: Applying Marks Globally with pytestmark (Single Mark)\nDESCRIPTION: This code shows how to apply a single pytest mark to all test functions and methods within a module by setting the `pytestmark` global variable. It requires importing the pytest module first.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\npytestmark = pytest.mark.webtest\n```\n\n----------------------------------------\n\nTITLE: Assert with message\nDESCRIPTION: This snippet shows how to add a message to an assertion. If the assertion fails, the message will be printed along with the assertion introspection in the traceback. This can be helpful for providing more context about why the assertion failed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nassert a % 2 == 0, \"value was odd, should be even\"\n```\n\n----------------------------------------\n\nTITLE: Pytest Requesting Multiple Fixtures\nDESCRIPTION: This example demonstrates how tests and fixtures can request multiple fixtures at once. The `order` fixture depends on both `first_entry` and `second_entry`, and the `test_string` function depends on both `order` and `expected_list`. This showcases how to combine multiple fixtures to provide the necessary context for a test.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# contents of test_append.py\nimport pytest\n\n\n# Arrange\n@pytest.fixture\ndef first_entry():\n    return \"a\"\n\n\n# Arrange\n@pytest.fixture\ndef second_entry():\n    return 2\n\n\n# Arrange\n@pytest.fixture\ndef order(first_entry, second_entry):\n    return [first_entry, second_entry]\n\n\n# Arrange\n@pytest.fixture\ndef expected_list():\n    return [\"a\", 2, 3.0]\n\n\ndef test_string(order, expected_list):\n    # Act\n    order.append(3.0)\n\n    # Assert\n    assert order == expected_list\n```\n\n----------------------------------------\n\nTITLE: Example email module classes\nDESCRIPTION: This code defines a simple email module with classes for `MailAdminClient`, `MailUser`, and `Email`. These classes are used in the subsequent example to demonstrate fixture teardown using the `yield` keyword.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# content of emaillib.py\nclass MailAdminClient:\n    def create_user(self):\n        return MailUser()\n\n    def delete_user(self, user):\n        # do some cleanup\n        pass\n\n\nclass MailUser:\n    def __init__(self):\n        self.inbox = []\n\n    def send_email(self, email, other):\n        other.inbox.append(email)\n\n    def clear_mailbox(self):\n        self.inbox.clear()\n\n\nclass Email:\n    def __init__(self, subject, body):\n        self.subject = subject\n        self.body = body\n```\n\n----------------------------------------\n\nTITLE: Parametrized Test with Conditional Raising in Pytest\nDESCRIPTION: This Python code demonstrates using `pytest.mark.parametrize` to define a set of parameterized tests. It shows how to use `pytest.raises` and `contextlib.nullcontext` to write tests that conditionally raise exceptions based on the input parameters. The `test_division` function tests division, expecting a `ZeroDivisionError` for a zero input and a specific result for other inputs.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom contextlib import nullcontext\n\nimport pytest\n\n\n@pytest.mark.parametrize(\n    \"example_input,expectation\",\n    [\n        (3, nullcontext(2)),\n        (2, nullcontext(3)),\n        (1, nullcontext(6)),\n        (0, pytest.raises(ZeroDivisionError)),\n    ],\n)\ndef test_division(example_input, expectation):\n    \"\"\"Test how much I know division.\"\"\"\n    with expectation as e:\n        assert (6 / example_input) == e\n```\n\n----------------------------------------\n\nTITLE: Basic pytest_generate_tests Example - conftest.py (Python)\nDESCRIPTION: This snippet configures pytest to add a command-line option `--stringinput` and uses `pytest_generate_tests` to parametrize the `stringinput` fixture based on the values provided via the command line. Dependencies: pytest.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/parametrize.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_addoption(parser):\n    parser.addoption(\n        \"--stringinput\",\n        action=\"append\",\n        default=[],\n        help=\"list of stringinputs to pass to test functions\",\n    )\n\n\ndef pytest_generate_tests(metafunc):\n    if \"stringinput\" in metafunc.fixturenames:\n        metafunc.parametrize(\"stringinput\", metafunc.config.getoption(\"stringinput\"))\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest via pip\nDESCRIPTION: This snippet shows how to upgrade the pytest package using pip, the Python package installer. This command will fetch the latest version of pytest and install it, replacing the existing version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.1.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Setting Test Paths in Pytest\nDESCRIPTION: This snippet demonstrates how to define the directories to be searched for tests when no specific paths are provided on the command line, using the `testpaths` option in the `pytest.ini` file. This can speed up test collection and prevent unintended tests from being run. Paths are relative to the root directory.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_50\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\ntestpaths = testing doc\n```\n\n----------------------------------------\n\nTITLE: Configuring pytest hooks using hookimpl decorator (Recommended)\nDESCRIPTION: This snippet demonstrates the recommended method of configuring pytest hooks using the `@pytest.hookimpl` decorator, replacing the deprecated marker-based approach. This provides a more explicit and maintainable way to configure hook behavior.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@pytest.hookimpl(tryfirst=True)\ndef pytest_runtest_call(): ...\n```\n\n----------------------------------------\n\nTITLE: Using addfinalizer with Pytest Fixtures\nDESCRIPTION: This snippet demonstrates how to use the `addfinalizer` method in a pytest fixture to ensure cleanup actions are performed after the fixture is used. The `receiving_user` and `email` fixtures create resources and then register finalizers to delete the user and clear the mailbox respectively. This ensures resources are cleaned up even if the test fails.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# content of test_emaillib.py\nfrom emaillib import Email, MailAdminClient\n\nimport pytest\n\n\n@pytest.fixture\ndef mail_admin():\n    return MailAdminClient()\n\n\n@pytest.fixture\ndef sending_user(mail_admin):\n    user = mail_admin.create_user()\n    yield user\n    mail_admin.delete_user(user)\n\n\n@pytest.fixture\ndef receiving_user(mail_admin, request):\n    user = mail_admin.create_user()\n\n    def delete_user():\n        mail_admin.delete_user(user)\n\n    request.addfinalizer(delete_user)\n    return user\n\n\n@pytest.fixture\ndef email(sending_user, receiving_user, request):\n    _email = Email(subject=\"Hey!\", body=\"How's it going?\")\n    sending_user.send_email(_email, receiving_user)\n\n    def empty_mailbox():\n        receiving_user.clear_mailbox()\n\n    request.addfinalizer(empty_mailbox)\n    return _email\n\n\n\ndef test_email_received(receiving_user, email):\n    assert email in receiving_user.inbox\n```\n\n----------------------------------------\n\nTITLE: Simple Test Example in pytest\nDESCRIPTION: This code snippet demonstrates a simple test case using the pytest framework. It defines a function `inc(x)` that increments a number, and a test function `test_answer()` that asserts the result of `inc(3)` equals 5 (which will fail).\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/README.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef inc(x):\n    return x + 1\n\n\ndef test_answer():\n    assert inc(3) == 5\n```\n\n----------------------------------------\n\nTITLE: Print Statement Debugging (Python)\nDESCRIPTION: This Python code demonstrates using print statements for debugging within pytest tests. The setup_function prints before each test and pytest captures the output, showing only the output for failing tests by default.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-stdout-stderr.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# content of test_module.py\n\n\n    def setup_function(function):\n        print(\"setting up\", function)\n\n\n    def test_func1():\n        assert True\n\n\n    def test_func2():\n        assert False\n```\n\n----------------------------------------\n\nTITLE: Yield fixtures for email testing\nDESCRIPTION: This code shows how to use `yield` fixtures to set up and tear down resources for email testing.  The `sending_user` and `receiving_user` fixtures create and delete mail users, ensuring that resources are cleaned up after each test.  Note how the teardown code appears after the `yield` statement.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# content of test_emaillib.py\nfrom emaillib import Email, MailAdminClient\n\nimport pytest\n\n\n@pytest.fixture\ndef mail_admin():\n    return MailAdminClient()\n\n\n@pytest.fixture\ndef sending_user(mail_admin):\n    user = mail_admin.create_user()\n    yield user\n    mail_admin.delete_user(user)\n\n\n@pytest.fixture\ndef receiving_user(mail_admin):\n    user = mail_admin.create_user()\n    yield user\n    user.clear_mailbox()\n    mail_admin.delete_user(user)\n\n\ndef test_email_received(sending_user, receiving_user):\n    email = Email(subject=\"Hey!\", body=\"How's it going?\")\n    sending_user.send_email(email, receiving_user)\n    assert email in receiving_user.inbox\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using pip, the Python package installer. The `-U` flag ensures that pytest and its dependencies are updated to the newest available versions.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.7.2.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Monkeypatching Environment Variables (Set and Assert) - Python\nDESCRIPTION: This test function uses `monkeypatch.setenv` to set the `USER` environment variable to \"TestingUser\" and then asserts that the `get_os_user_lower` function returns \"testinguser\". It demonstrates how to temporarily modify environment variables during testing.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\ndef test_upper_to_lower(monkeypatch):\n    \"\"\"Set the USER env var to assert the behavior.\"\"\"\n    monkeypatch.setenv(\"USER\", \"TestingUser\")\n    assert get_os_user_lower() == \"testinguser\"\n```\n\n----------------------------------------\n\nTITLE: Indirect Parametrization on Specific Arguments with pytest\nDESCRIPTION: This example showcases how to apply indirect parametrization to specific fixture arguments.  The `indirect` parameter accepts a list of fixture names to which indirect parametrization should be applied, allowing some fixtures to be parametrized while others are not.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# content of test_indirect_list.py\n\nimport pytest\n\n\n@pytest.fixture(scope=\"function\")\ndef x(request):\n    return request.param * 3\n\n\n@pytest.fixture(scope=\"function\")\ndef y(request):\n    return request.param * 2\n\n\n@pytest.mark.parametrize(\"x, y\", [(\"a\", \"b\")], indirect=[\"x\"])\ndef test_indirect(x, y):\n    assert x == \"aaa\"\n    assert y == \"b\"\n```\n\n----------------------------------------\n\nTITLE: Parametrizing Test Methods via Class Config with pytest\nDESCRIPTION: This snippet demonstrates parametrizing test methods through a per-class configuration.  The `pytest_generate_tests` hook function is used to read parameter sets from a class-level `params` dictionary, allowing for flexible configuration of test inputs.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# content of ./test_parametrize.py\nimport pytest\n\n\ndef pytest_generate_tests(metafunc):\n    # called once per each test function\n    funcarglist = metafunc.cls.params[metafunc.function.__name__]\n    argnames = sorted(funcarglist[0])\n    metafunc.parametrize(\n        argnames, [[funcargs[name] for name in argnames] for funcargs in funcarglist]\n    )\n\n\nclass TestClass:\n    # a map specifying multiple argument sets for a test method\n    params = {\n        \"test_equals\": [dict(a=1, b=2), dict(a=3, b=3)],\n        \"test_zerodivision\": [dict(a=1, b=0)],\n    }\n\n    def test_equals(self, a, b):\n        assert a == b\n\n    def test_zerodivision(self, a, b):\n        with pytest.raises(ZeroDivisionError):\n            a / b\n```\n\n----------------------------------------\n\nTITLE: Disabling Plugin Autoloading using Command Line\nDESCRIPTION: This snippet shows how to disable pytest plugin autoloading using the `--disable-plugin-autoload` command-line option. In combination with `-p`, you can specify the exact plugins to use for a pytest run, ignoring any other discoverable plugins.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/plugins.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npytest --disable-plugin-autoload -p NAME,NAME2\n```\n\n----------------------------------------\n\nTITLE: Multiple Custom Markers\nDESCRIPTION: Shows how to apply multiple custom markers to a test function and the order in which they are accessed. The marker closest to the function is iterated over first.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.timeout(10, \"slow\", method=\"thread\")\n@pytest.mark.slow\ndef test_function(): ...\n```\n\n----------------------------------------\n\nTITLE: Defining a simple fixture in conftest.py\nDESCRIPTION: This snippet demonstrates how to define a simple fixture in a conftest.py file.  The fixture 'order' initializes an empty list. Fixtures defined in `conftest.py` are automatically available to all tests in the directory and subdirectories without needing explicit imports.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/fixtures.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n@pytest.fixture\ndef order():\n    return []\n```\n\n----------------------------------------\n\nTITLE: Marking Individual Test Instances within Parametrize (Python)\nDESCRIPTION: This snippet demonstrates how to mark individual test instances within `parametrize`, using `pytest.param` and `marks`. In this example, one set of parameters is marked with `pytest.mark.xfail`, indicating that it is expected to fail. Dependencies: pytest.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/parametrize.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\n@pytest.mark.parametrize(\n    \"test_input,expected\",\n    [(\"3+5\", 8), (\"2+4\", 6), pytest.param(\"6*9\", 42, marks=pytest.mark.xfail)],\n)\ndef test_eval(test_input, expected):\n    assert eval(test_input) == expected\n```\n\n----------------------------------------\n\nTITLE: Selecting Tests by Node ID - Pytest Command\nDESCRIPTION: Demonstrates how to select tests using their node ID, which includes the module, class, and method names. This allows running specific tests based on their location in the test suite hierarchy.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_4\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -v test_server.py::TestClass::test_method\n```\n\n----------------------------------------\n\nTITLE: Installing pytest via pip\nDESCRIPTION: This command demonstrates how to upgrade to the latest version of pytest using pip, the Python package installer.  It ensures you have the newest features and bug fixes.  The `-U` flag tells pip to upgrade an existing package to the newest available version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.6.0.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Skipping during test execution\nDESCRIPTION: Shows how to skip a test imperatively during execution using `pytest.skip(reason)`. This is useful when the skip condition can only be evaluated at runtime.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef test_function():\n    if not valid_config():\n        pytest.skip(\"unsupported configuration\")\n```\n\n----------------------------------------\n\nTITLE: Pytest Autouse Fixtures\nDESCRIPTION: This example demonstrates the use of autouse fixtures. The `append_first` fixture is marked as `autouse=True`, meaning it will be automatically requested by all tests in the module. This simplifies test setup by automatically applying common configurations.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# contents of test_append.py\nimport pytest\n\n\n@pytest.fixture\ndef first_entry():\n    return \"a\"\n\n\n@pytest.fixture\ndef order(first_entry):\n    return []\n\n\n@pytest.fixture(autouse=True)\ndef append_first(order, first_entry):\n    return order.append(first_entry)\n\n\ndef test_string_only(order, first_entry):\n    assert order == [first_entry]\n\n\ndef test_string_and_int(order, first_entry):\n    order.append(2)\n    assert order == [first_entry, 2]\n```\n\n----------------------------------------\n\nTITLE: Pytest Fixtures Requesting Other Fixtures\nDESCRIPTION: This example demonstrates how fixtures can depend on other fixtures. The `order` fixture depends on the `first_entry` fixture, and the `test_string` function depends on the `order` fixture. This shows how to chain fixtures together to create complex test setups.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# contents of test_append.py\nimport pytest\n\n\n# Arrange\n@pytest.fixture\ndef first_entry():\n    return \"a\"\n\n\n# Arrange\n@pytest.fixture\ndef order(first_entry):\n    return [first_entry]\n\n\ndef test_string(order):\n    # Act\n    order.append(\"b\")\n\n    # Assert\n    assert order == [\"a\", \"b\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Marks and IDs for Parameterized Tests with pytest\nDESCRIPTION: This code snippet illustrates how to set marks and test IDs for individual parameterized tests using `pytest.param`.  This allows for fine-grained control over test execution and reporting, enabling selective test runs and improved test identification.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# content of test_pytest_param_example.py\nimport pytest\n\n\n@pytest.mark.parametrize(\n    \"test_input,expected\",\n    [\n        (\"3+5\", 8),\n        pytest.param(\"1+7\", 8, marks=pytest.mark.basic),\n        pytest.param(\"2+4\", 6, marks=pytest.mark.basic, id=\"basic_2+4\"),\n        pytest.param(\n            \"6*9\", 42, marks=[pytest.mark.basic, pytest.mark.xfail], id=\"basic_6*9\"\n        ),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Running pytest with -rs -q flags\nDESCRIPTION: Shows the command to run pytest with the -rs and -q flags. `-rs` reports reasons for skips and xfails. `-q` provides less verbose output.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#_snippet_13\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -rs -q multipython.py\n```\n\n----------------------------------------\n\nTITLE: Ignoring Files with collect_ignore_glob in conftest.py\nDESCRIPTION: This snippet shows how to use `collect_ignore_glob` in a `conftest.py` file to ignore files based on Unix shell-style wildcards. It demonstrates how to exclude files ending with `*_py2.py` when running with a Python 3 interpreter, in addition to excluding `setup.py`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# content of conftest.py\nimport sys\n\ncollect_ignore = [\"setup.py\"]\nif sys.version_info[0] > 2:\n    collect_ignore_glob = [\"*_py2.py\"]\n```\n\n----------------------------------------\n\nTITLE: Installing or upgrading Pytest using pip\nDESCRIPTION: This command uses pip to install or upgrade to the latest version of pytest. The -U flag ensures that pytest is upgraded to the newest available version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.1.3.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Ignoring Files with collect_ignore_glob in pytest\nDESCRIPTION: This code snippet shows how to use the `collect_ignore_glob` global variable in a `conftest.py` file to exclude files or directories from test collection by pytest, using Unix shell-style wildcards. It defines a list of glob patterns for files to be ignored.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ncollect_ignore_glob = [\"*_ignore.py\"]\n```\n\n----------------------------------------\n\nTITLE: Calling Pytest from Python Code with Arguments - Python\nDESCRIPTION: This code snippet demonstrates how to invoke pytest directly from Python code with specific arguments. It allows specifying options and arguments explicitly.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nretcode = pytest.main([\"-x\", \"mytestdir\"])\n```\n\n----------------------------------------\n\nTITLE: Using caplog as a context manager\nDESCRIPTION: This snippet demonstrates how to use the `caplog` fixture as a context manager to temporarily change the log level within a `with` block. The log level is restored automatically after the block exits.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef test_bar(caplog):\n    with caplog.at_level(logging.INFO):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Setting Log CLI Format in Pytest\nDESCRIPTION: This snippet demonstrates how to configure the format of live logging messages in pytest using the `log_cli_format` option within the `pytest.ini` file. This allows for customization of the log output displayed during test execution. The format string uses standard logging format specifiers.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_32\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nlog_cli_format = %(asctime)s %(levelname)s %(message)s\n```\n\n----------------------------------------\n\nTITLE: Define and Request Fixture in Pytest\nDESCRIPTION: This example demonstrates how to define a simple fixture using the `@pytest.fixture` decorator and how to request it in a test function by including it as an argument. The fixture returns a list of `Fruit` objects, which is then used by the `test_fruit_salad` function to create and assert properties of a `FruitSalad` object.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\nclass Fruit:\n    def __init__(self, name):\n        self.name = name\n        self.cubed = False\n\n    def cube(self):\n        self.cubed = True\n\n\nclass FruitSalad:\n    def __init__(self, *fruit_bowl):\n        self.fruit = fruit_bowl\n        self._cube_fruit()\n\n    def _cube_fruit(self):\n        for fruit in self.fruit:\n            fruit.cube()\n\n\n# Arrange\n@pytest.fixture\ndef fruit_bowl():\n    return [Fruit(\"apple\"), Fruit(\"banana\")]\n\n\ndef test_fruit_salad(fruit_bowl):\n    # Act\n    fruit_salad = FruitSalad(*fruit_bowl)\n\n    # Assert\n    assert all(fruit.cubed for fruit in fruit_salad.fruit)\n```\n\n----------------------------------------\n\nTITLE: Setting Log CLI Level in Pytest\nDESCRIPTION: This snippet shows how to set the minimum log level for live logging in pytest using the `log_cli_level` option in the `pytest.ini` file. Only log messages with a level equal to or higher than the configured level will be displayed during test execution. This helps to filter out less important log messages.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_33\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nlog_cli_level = INFO\n```\n\n----------------------------------------\n\nTITLE: Installing and Uninstalling pytest Plugins with pip\nDESCRIPTION: These commands demonstrate how to install and uninstall pytest plugins using the pip package manager. The install command adds a plugin to the pytest environment, while the uninstall command removes it. Replace `pytest-NAME` with the actual plugin name.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/plugins.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pytest-NAME\npip uninstall pytest-NAME\n```\n\n----------------------------------------\n\nTITLE: Running pytest with -v flag\nDESCRIPTION: Shows the command to run pytest with the -v flag for verbose output.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#_snippet_11\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -v test_indirect_list.py\n```\n\n----------------------------------------\n\nTITLE: Applying a Filter to all Tests in a Module\nDESCRIPTION: This snippet demonstrates how to apply a warning filter to all tests in a module by setting the `pytestmark` variable.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# turns all warnings into errors for this module\npytestmark = pytest.mark.filterwarnings(\"error\")\n```\n\n----------------------------------------\n\nTITLE: Pytest Modular Fixture Output\nDESCRIPTION: This snippet illustrates the output of running the test using modular fixtures. It demonstrates that the test runs twice due to the parametrization of the `smtp_connection` fixture, and that the `app` fixture correctly receives the `smtp_connection` instance.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_39\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -v test_appsetup.py\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y -- $PYTHON_PREFIX/bin/python\ncachedir: .pytest_cache\nrootdir: /home/sweet/project\ncollecting ... collected 2 items\n\ntest_appsetup.py::test_smtp_connection_exists[smtp.gmail.com] PASSED [ 50%]\ntest_appsetup.py::test_smtp_connection_exists[mail.python.org] PASSED [100%]\n\n============================ 2 passed in 0.12s =============================\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Markers in pytest.ini\nDESCRIPTION: This snippet demonstrates how to register custom markers in a pytest.ini file. The markers are defined under the 'markers' option within the '[pytest]' section. Each marker is listed with an optional description after the colon.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/mark.rst#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nmarkers =\n    slow: marks tests as slow (deselect with '-m \"not slow\"')\n    serial\n```\n\n----------------------------------------\n\nTITLE: XFail with condition\nDESCRIPTION: Demonstrates how to specify a condition for `xfail` using `pytest.mark.xfail`. The test is expected to fail only if the condition is true.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.xfail(sys.platform == \"win32\", reason=\"bug in a 3rd party library\")\ndef test_function(): ...\n```\n\n----------------------------------------\n\nTITLE: Parametrizing Test Functions with @pytest.mark.parametrize on a Class (Python)\nDESCRIPTION: This snippet shows how to apply the `@pytest.mark.parametrize` decorator to a class.  The `TestClass` contains two test methods, and each method will be executed for each combination of `n` and `expected` values specified in the `parametrize` decorator. Dependencies: pytest.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/parametrize.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\n@pytest.mark.parametrize(\"n,expected\", [(1, 2), (3, 4)])\nclass TestClass:\n    def test_simple_case(self, n, expected):\n        assert n + 1 == expected\n\n    def test_weird_simple_case(self, n, expected):\n        assert (n * 1) + 1 == expected\n```\n\n----------------------------------------\n\nTITLE: Configuring Warning Filters in pyproject.toml\nDESCRIPTION: This snippet shows how to configure warning filters in the `pyproject.toml` file using the `tool.pytest.ini_options` section. The example is equivalent to the pytest.ini configuration above.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[tool.pytest.ini_options]\nfilterwarnings = [\n    \"error\",\n    \"ignore::UserWarning\",\n    # note the use of single quote below to denote \"raw\" strings in TOML\n    'ignore:function ham\\(\\) is deprecated:DeprecationWarning',\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Log File Path in Pytest\nDESCRIPTION: This snippet configures pytest to write log messages to a file using the `log_file` option in the `pytest.ini` file. The path is relative to the current working directory. This enables persistent storage of log messages for later analysis.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_35\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nlog_file = logs/pytest-logs.txt\n```\n\n----------------------------------------\n\nTITLE: Pytest Module Example\nDESCRIPTION: This example demonstrates how pytest fixtures can be parametrized to execute test functions multiple times with different input values. The test will fail due to a forced assertion error for demonstration purposes. It highlights how pytest handles multiple fixture instances.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_33\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -q test_module.py\nFFFF                                                                 [100%]\n================================= FAILURES =================================\n________________________ test_ehlo[smtp.gmail.com] _________________________\n\nsmtp_connection = <smtplib.SMTP object at 0xdeadbeef0004>\n\n    def test_ehlo(smtp_connection):\n        response, msg = smtp_connection.ehlo()\n        assert response == 250\n        assert b\"smtp.gmail.com\" in msg\n>       assert 0  # for demo purposes\nE       assert 0\n\ntest_module.py:7: AssertionError\n________________________ test_noop[smtp.gmail.com] _________________________\n\nsmtp_connection = <smtplib.SMTP object at 0xdeadbeef0004>\n\n    def test_noop(smtp_connection):\n        response, msg = smtp_connection.noop()\n        assert response == 250\n>       assert 0  # for demo purposes\nE       assert 0\n\ntest_module.py:13: AssertionError\n________________________ test_ehlo[mail.python.org] ________________________\n\nsmtp_connection = <smtplib.SMTP object at 0xdeadbeef0005>\n\n    def test_ehlo(smtp_connection):\n        response, msg = smtp_connection.ehlo()\n        assert response == 250\n>       assert b\"smtp.gmail.com\" in msg\nE       AssertionError: assert b'smtp.gmail.com' in b'mail.python.org\\nPIPELINING\\nSIZE 51200000\\nETRN\\nSTARTTLS\\nAUTH DIGEST-MD5 NTLM CRAM-MD5\\nENHANCEDSTATUSCODES\\n8BITMIME\\nDSN\\nSMTPUTF8\\nCHUNKING'\n\ntest_module.py:6: AssertionError\n-------------------------- Captured stdout setup ---------------------------\nfinalizing <smtplib.SMTP object at 0xdeadbeef0004>\n________________________ test_noop[mail.python.org] ________________________\n\nsmtp_connection = <smtplib.SMTP object at 0xdeadbeef0005>\n\n    def test_noop(smtp_connection):\n        response, msg = smtp_connection.noop()\n        assert response == 250\n>       assert 0  # for demo purposes\nE       assert 0\n\ntest_module.py:13: AssertionError\n------------------------- Captured stdout teardown -------------------------\nfinalizing <smtplib.SMTP object at 0xdeadbeef0005>\n========================= short test summary info ==========================\nFAILED test_module.py::test_ehlo[smtp.gmail.com] - assert 0\nFAILED test_module.py::test_noop[smtp.gmail.com] - assert 0\nFAILED test_module.py::test_ehlo[mail.python.org] - AssertionError: asser...\nFAILED test_module.py::test_noop[mail.python.org] - assert 0\n4 failed in 0.12s\n```\n\n----------------------------------------\n\nTITLE: Globally Disabling HTTP Requests in pytest\nDESCRIPTION: This code demonstrates how to globally disable HTTP requests in all tests using an autouse fixture and the monkeypatch fixture. By deleting the requests.sessions.Session.request method, any attempts to make HTTP requests within tests will fail. This can be useful for preventing accidental network access during testing. The fixture uses monkeypatch.delattr to remove the request method.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# contents of conftest.py\nimport pytest\n\n\n@pytest.fixture(autouse=True)\ndef no_requests(monkeypatch):\n    \"\"\"Remove requests.sessions.Session.request for all tests.\"\"\"\n    monkeypatch.delattr(\"requests.sessions.Session.request\")\n```\n\n----------------------------------------\n\nTITLE: Pytest Addopts Configuration\nDESCRIPTION: Shows how to configure command-line arguments that are automatically added to the pytest execution. This is done by setting the `addopts` option in the `pytest.ini` file. For example, setting `--maxfail=2 -rf` will exit after 2 failures and report failure information.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\n# content of pytest.ini\n[pytest]\naddopts = --maxfail=2 -rf  # exit after 2 failures, report fail info\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Markers in pytest\nDESCRIPTION: Explains how to register custom markers in pytest plugins to avoid warnings and make them appear in pytest's help text. The `pytest_configure` hook is used to add markers using `config.addinivalue_line`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_plugins.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_configure(config):\n    config.addinivalue_line(\"markers\", \"cool_marker: this one is for cool tests.\")\n    config.addinivalue_line(\n        \"markers\", \"mark_with(arg, arg2): this marker takes arguments.\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Selecting Tests by Name Using -k - Pytest Command\nDESCRIPTION: Shows how to use the ``-k`` option to select tests based on substring matching of their names. The expression is case-insensitive.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_7\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -v -k http  # running with the above defined example module\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Test Method - Bash\nDESCRIPTION: This command executes a specific test method within a class. The module filename, class name, and method name are separated by ::.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/test_mod.py::TestClass::test_method\n```\n\n----------------------------------------\n\nTITLE: Marking a Test as Expected Failure with RaisesGroup\nDESCRIPTION: This snippet demonstrates using pytest.mark.xfail with RaisesGroup to check if a test fails by raising an ExceptionGroup containing a specific exception type. It defines a function `f` that raises an ExceptionGroup containing an IndexError, and `test_f` is marked with `@pytest.mark.xfail(raises=RaisesGroup(IndexError))`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef f():\n    raise ExceptionGroup(\"\", [IndexError()])\n\n\n@pytest.mark.xfail(raises=RaisesGroup(IndexError))\ndef test_f():\n    f()\n```\n\n----------------------------------------\n\nTITLE: Overriding Parametrized with Non-Parametrized Fixture\nDESCRIPTION: This demonstrates how to override a parametrized fixture with a non-parametrized one and vice-versa.  The `parametrized_username` fixture is overridden with a non-parametrized version in the test module, and conversely, the `non_parametrized_username` fixture is overridden with a parametrized version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n@pytest.fixture(params=['one', 'two', 'three'])\ndef parametrized_username(request):\n    return request.param\n\n@pytest.fixture\ndef non_parametrized_username(request):\n    return 'username'\n```\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n@pytest.fixture\ndef parametrized_username():\n    return 'overridden-username'\n\n@pytest.fixture(params=['one', 'two', 'three'])\ndef non_parametrized_username(request):\n    return request.param\n```\n\n----------------------------------------\n\nTITLE: Setting log level for a specific logger with caplog\nDESCRIPTION: This snippet shows how to set the log level for a specific logger using the `caplog` fixture. The `logger` argument in `caplog.set_level()` specifies the name of the logger to configure.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef test_foo(caplog):\n    caplog.set_level(logging.CRITICAL, logger=\"root.baz\")\n```\n\n----------------------------------------\n\nTITLE: Creating Stash Keys for pytest Plugins in Python\nDESCRIPTION: This snippet shows how to create stash keys for storing data in pytest plugins using `pytest.StashKey`. Stash keys provide a type-safe and conflict-free way to associate data with pytest items (e.g., tests) across different hook implementations. These keys should be defined at the top level of the plugin to make them accessible throughout the plugin's code.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_hook_functions.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbeen_there_key = pytest.StashKey[bool]()\ndone_that_key = pytest.StashKey[str]()\n```\n\n----------------------------------------\n\nTITLE: Accessing Test Context with Fixture Request (Python)\nDESCRIPTION: This example shows how to access the requesting test context using the `request` object within a fixture. It retrieves an optional `smtpserver` attribute from the test module and uses it to configure the `smtp_connection` fixture. This allows tests to customize fixture behavior by defining module-level variables.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n# content of conftest.py\nimport smtplib\n\nimport pytest\n\n\n@pytest.fixture(scope=\"module\")\ndef smtp_connection(request):\n    server = getattr(request.module, \"smtpserver\", \"smtp.gmail.com\")\n    smtp_connection = smtplib.SMTP(server, 587, timeout=5)\n    yield smtp_connection\n    print(f\"finalizing {smtp_connection} ({server})\")\n    smtp_connection.close()\n```\n\n----------------------------------------\n\nTITLE: Pytest Ini: Multiple Glob Patterns\nDESCRIPTION: This ini file configures pytest to discover test files matching multiple glob patterns. `python_files` is set to include files starting with `test_` or `example_`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n# Example 2: have pytest look for files with \"test\" and \"example\"\n# content of pytest.ini\n[pytest]\npython_files = test_*.py example_*.py\n```\n\n----------------------------------------\n\nTITLE: Defining a fixture using the @pytest.fixture decorator\nDESCRIPTION: This code snippet demonstrates the basic syntax for defining a fixture using the `@pytest.fixture` decorator.  The name of the function becomes the name of the fixture that can be requested as a function argument in tests. It replaced the older `pytest_funcarg__` prefix method.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/funcarg_compare.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n    @pytest.fixture()\n    def db(request): ...\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Markers in Pytest\nDESCRIPTION: This snippet demonstrates how to add custom markers to the whitelist of allowed markers when using `--strict-markers` in pytest. This configuration is done within the `pytest.ini` file using the `markers` option. Custom markers can be used to categorize and select specific tests.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_41\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\naddopts = --strict-markers\nmarkers =\n    slow\n    serial\n```\n\n----------------------------------------\n\nTITLE: Configuring pytest logging with ini file\nDESCRIPTION: This code snippet shows how to configure pytest logging behavior by setting the `log_cli` to `true` and `log_level` to `NOTSET` in the `pytest` section of an `ini` file. This configuration restores the logging behavior of pytest version 3.3, enabling verbose logging output to the console.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#_snippet_17\n\nLANGUAGE: INI\nCODE:\n```\n[pytest]\nlog_cli=true\nlog_level=NOTSET\n```\n\n----------------------------------------\n\nTITLE: Customizing Python Class Discovery in Pytest\nDESCRIPTION: This snippet demonstrates how to customize which classes are considered for test collection by using the `python_classes` option within the `pytest.ini` file. It allows defining glob-style patterns to match class names. This example shows how to collect tests from classes ending with `Suite`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_44\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\npython_classes = *Suite\n```\n\n----------------------------------------\n\nTITLE: Customizing log colors using pytest_configure hook\nDESCRIPTION: This snippet shows how to customize log colors for existing and custom log levels using the `pytest_configure` hook. It accesses the `logging-plugin` and modifies the color scheme.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    logging_plugin = config.pluginmanager.get_plugin(\"logging-plugin\")\n\n    # Change color on existing log level\n    logging_plugin.log_cli_handler.formatter.add_color_level(logging.INFO, \"cyan\")\n\n    # Add color to a custom log level (a custom log level `SPAM` is already set up)\n    logging_plugin.log_cli_handler.formatter.add_color_level(logging.SPAM, \"blue\")\n```\n\n----------------------------------------\n\nTITLE: Using autouse pytest fixtures with unittest\nDESCRIPTION: This Python code demonstrates the use of an 'autouse' pytest fixture within a unittest.TestCase class. The 'initdir' fixture is automatically applied to all test methods in the class, changing the current directory to a temporary directory provided by pytest's 'tmp_path' fixture and creating a 'samplefile.ini' file.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/unittest.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# content of test_unittest_cleandir.py\nimport unittest\n\nimport pytest\n\n\nclass MyTest(unittest.TestCase):\n    @pytest.fixture(autouse=True)\n    def initdir(self, tmp_path, monkeypatch):\n        monkeypatch.chdir(tmp_path)  # change to pytest-provided temporary directory\n        tmp_path.joinpath(\"samplefile.ini\").write_text(\"# testdata\", encoding=\"utf-8\")\n\n    def test_method(self):\n        with open(\"samplefile.ini\", encoding=\"utf-8\") as f:\n            s = f.read()\n        assert \"testdata\" in s\n```\n\n----------------------------------------\n\nTITLE: Pytest Configuration in pytest.ini or .pytest.ini\nDESCRIPTION: This snippet demonstrates a `pytest.ini` configuration file, which is the preferred way to configure pytest.  It sets the minimum pytest version, adds command-line options, and specifies test paths. `pytest.ini` files take precedence, even if empty.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/customize.rst#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# pytest.ini or .pytest.ini\n[pytest]\nminversion = 6.0\naddopts = -ra -q\ntestpaths =\n    tests\n    integration\n```\n\n----------------------------------------\n\nTITLE: Asserting exception details with pytest.RaisesExc\nDESCRIPTION: This snippet demonstrates the use of `pytest.RaisesExc` within `pytest.RaisesGroup` to specify more details about the contained exception, like its message.  It checks if the `ValueError` has the message \"foo\".\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef test_raises_exc():\n    with pytest.RaisesGroup(pytest.RaisesExc(ValueError, match=\"foo\")):\n        raise ExceptionGroup(\"\", (ValueError(\"foo\")))\n```\n\n----------------------------------------\n\nTITLE: Enabling the pytester Plugin in pytest\nDESCRIPTION: Demonstrates how to enable the `pytester` plugin, which is used for testing pytest plugins.  The plugin can be enabled by adding `pytest_plugins = [\"pytester\"]` to a `conftest.py` file or by using the `-p pytester` command line option. Requires a `conftest.py` file in the testing directory.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_plugins.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# content of conftest.py\n\npytest_plugins = [\"pytester\"]\n```\n\n----------------------------------------\n\nTITLE: Disabling Test ID Escaping (INI)\nDESCRIPTION: This snippet shows how to disable test ID escaping for unicode strings in `pytest.ini`.  This allows unicode strings to be displayed as-is in the terminal, but may cause issues depending on the OS and installed plugins. Dependencies: pytest.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/parametrize.rst#_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\ndisable_test_id_escaping_and_forfeit_all_rights_to_community_support = True\n```\n\n----------------------------------------\n\nTITLE: Reading Markers with pytest_runtest_setup Hook\nDESCRIPTION: This code shows how to use the `pytest_runtest_setup` hook in `conftest.py` to read and print the arguments and keyword arguments of a specific marker ('glob' in this case) applied to a test item. It uses `item.iter_markers` to iterate through the markers and `mark.args` and `mark.kwargs` to access their values. The output is flushed to ensure it is visible during the test run.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# content of conftest.py\nimport sys\n\n\ndef pytest_runtest_setup(item):\n    for mark in item.iter_markers(name=\"glob\"):\n        print(f\"glob args={mark.args} kwargs={mark.kwargs}\")\n        sys.stdout.flush()\n```\n\n----------------------------------------\n\nTITLE: Running Tests by Keyword Expressions - Bash\nDESCRIPTION: This command filters tests based on a string expression that matches test names, class names, or function names. It enables selective execution of tests based on keywords.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npytest -k 'MyClass and not method'\n```\n\n----------------------------------------\n\nTITLE: Hook Function Ordering Example in Python\nDESCRIPTION: This snippet demonstrates how to influence the order of hook function execution using `tryfirst=True`, `trylast=True`, and `wrapper=True`.  Plugin 1 executes as early as possible, Plugin 2 executes as late as possible, and Plugin 3 wraps the others.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_hook_functions.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Plugin 1\n@pytest.hookimpl(tryfirst=True)\ndef pytest_collection_modifyitems(items):\n    # will execute as early as possible\n    ...\n\n\n# Plugin 2\n@pytest.hookimpl(trylast=True)\ndef pytest_collection_modifyitems(items):\n    # will execute as late as possible\n    ...\n\n\n# Plugin 3\n@pytest.hookimpl(wrapper=True)\ndef pytest_collection_modifyitems(items):\n    # will execute even before the tryfirst one above!\n    try:\n        return (yield)\n    finally:\n        # will execute after all non-wrappers executed\n        ...\n```\n\n----------------------------------------\n\nTITLE: Sharing skipif markers between modules\nDESCRIPTION: Shows how to define a `skipif` marker in one module and reuse it in another. This promotes code reusability and consistency across test suites.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# content of test_mymodule.py\nimport mymodule\n\nminversion = pytest.mark.skipif(\n    mymodule.__versioninfo__ < (1, 1), reason=\"at least mymodule-1.1 required\"\n)\n\n\n@minversion\ndef test_function(): ...\n```\n\nLANGUAGE: python\nCODE:\n```\n# test_myothermodule.py\nfrom test_mymodule import minversion\n\n\n@minversion\ndef test_anotherfunction(): ...\n```\n\n----------------------------------------\n\nTITLE: Marking Class Level Tests with pytest.mark (Python)\nDESCRIPTION: This snippet demonstrates how to apply a marker to all test methods within a class using the `@pytest.mark` decorator.  This is equivalent to applying the same decorator to each test function individually.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\n@pytest.mark.webtest\nclass TestClass:\n    def test_startup(self):\n        pass\n\n    def test_startup_and_more(self):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Ensuring Only Specific Warnings are Issued (Python)\nDESCRIPTION: This snippet uses the `recwarn` fixture to verify that only specific warnings are issued during a test. It checks the number of warnings and their types.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef test_warning(recwarn):\n    ...\n    assert len(recwarn) == 1\n    user_warning = recwarn.pop(UserWarning)\n    assert issubclass(user_warning.category, UserWarning)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Level Attribute for Fixture (Python)\nDESCRIPTION: This snippet demonstrates how to define a module-level attribute (`smtpserver`) that is then accessed by the `smtp_connection` fixture in `conftest.py`.  The fixture uses the `request.module` to retrieve this attribute, allowing tests to specify custom configuration for the fixture.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n# content of test_anothersmtp.py\n\nsmtpserver = \"mail.python.org\"  # will be read by smtp fixture\n\n\ndef test_showhelo(smtp_connection):\n    assert 0, smtp_connection.helo()\n```\n\n----------------------------------------\n\nTITLE: Accessing Another Plugin by Name in pytest\nDESCRIPTION: Demonstrates how a pytest plugin can access code from another plugin using the plugin manager. The `get_plugin` method of the plugin manager is used to obtain a reference to the target plugin by its name. Requires the `config` object from pytest.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_plugins.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nplugin = config.pluginmanager.get_plugin(\"name_of_plugin\")\n```\n\n----------------------------------------\n\nTITLE: Overriding Fixture with Test Parametrization\nDESCRIPTION: This demonstrates how to override a fixture's value directly within a test function using the `parametrize` marker. The `username` fixture is overridden with a specific value for each test function that uses the marker.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n@pytest.fixture\ndef username():\n    return 'username'\n\n@pytest.fixture\ndef other_username(username):\n    return 'other-' + username\n```\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n@pytest.mark.parametrize('username', ['directly-overridden-username'])\ndef test_username(username):\n    assert username == 'directly-overridden-username'\n\n@pytest.mark.parametrize('username', ['directly-overridden-username-other'])\ndef test_username_other(other_username):\n    assert other_username == 'other-directly-overridden-username-other'\n```\n\n----------------------------------------\n\nTITLE: Skipping a test function\nDESCRIPTION: Demonstrates how to skip a test function using the `pytest.mark.skip` decorator with a reason. This decorator prevents the test from being executed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.skip(reason=\"no way of currently testing this\")\ndef test_the_unknown(): ...\n```\n\n----------------------------------------\n\nTITLE: Using Injected Items in Doctests\nDESCRIPTION: This doctest shows the usage of an item injected into the doctest namespace using the `doctest_namespace` fixture.  In this case, it uses `np.arange` which was provided by the `add_np` fixture.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# content of numpy.py\ndef arange():\n    \"\"\"\n    >>> a = np.arange(10)\n    >>> len(a)\n    10\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Deprecated Node Access in Text\nDESCRIPTION: This snippet illustrates the deprecation warning issued when accessing internal classes through Node instances. Users should import pytest and access the objects using the pytest module.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_33\n\nLANGUAGE: text\nCODE:\n```\nusage of Function.Module is deprecated, please use pytest.Module instead\n```\n\n----------------------------------------\n\nTITLE: Defining a simple pytest fixture\nDESCRIPTION: This code defines a simple pytest fixture using the `@pytest.fixture` decorator. The fixture creates a `Fruit` object named 'apple' and returns it.  A second fixture uses the first and returns a list containing the first.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/fixtures.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\nclass Fruit:\n    def __init__(self, name):\n        self.name = name\n\n    def __eq__(self, other):\n        return self.name == other.name\n\n\n@pytest.fixture\ndef my_fruit():\n    return Fruit(\"apple\")\n\n\n@pytest.fixture\ndef fruit_basket(my_fruit):\n    return [Fruit(\"banana\"), my_fruit]\n\n\n\ndef test_my_fruit_in_basket(my_fruit, fruit_basket):\n    assert my_fruit in fruit_basket\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level in Pytest\nDESCRIPTION: This example configures the minimum log level for pytest's logging capture using the `log_level` option in the `pytest.ini` file. Log messages with a level below this setting will be ignored. This can be an integer value or a log level name like INFO or DEBUG.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_40\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nlog_level = INFO\n```\n\n----------------------------------------\n\nTITLE: Parametrizing Tests with xfail and skipif in pytest\nDESCRIPTION: This snippet demonstrates how to use `pytest.mark.parametrize` to create multiple test instances and then use `pytest.mark.xfail` and `pytest.mark.skipif` to conditionally mark some of these instances as expected to fail or to skip them altogether, based on specific conditions like Python version or known bugs.  This allows fine-grained control over test execution based on parameters and environmental factors.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\nimport pytest\n\n\n@pytest.mark.parametrize(\n    (\"n\", \"expected\"),\n    [\n        (1, 2),\n        pytest.param(1, 0, marks=pytest.mark.xfail),\n        pytest.param(1, 3, marks=pytest.mark.xfail(reason=\"some bug\")),\n        (2, 3),\n        (3, 4),\n        (4, 5),\n        pytest.param(\n            10, 11, marks=pytest.mark.skipif(sys.version_info >= (3, 0), reason=\"py2k\")\n        ),\n    ],\n)\ndef test_increment(n, expected):\n    assert n + 1 == expected\n```\n\n----------------------------------------\n\nTITLE: Caching Fixture State in pytest\nDESCRIPTION: This code defines a pytest fixture that uses the pytest config.cache object to persist a value (42) between pytest invocations. If the value is not found in the cache, it performs an expensive computation and stores the result in the cache.  The test_function asserts that the cached value is 23, which will always fail.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/cache.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\ndef expensive_computation():\n    print(\"running expensive computation...\")\n\n\n@pytest.fixture\ndef mydata(pytestconfig):\n    val = pytestconfig.cache.get(\"example/value\", None)\n    if val is None:\n        expensive_computation()\n        val = 42\n        pytestconfig.cache.set(\"example/value\", val)\n    return val\n\n\ndef test_function(mydata):\n    assert mydata == 23\n```\n\n----------------------------------------\n\nTITLE: Function-Level Teardown\nDESCRIPTION: Defines teardown_function to execute after each test function in a module.  Used to clean up resources created in setup_function. The optional function parameter gives access to the test function being executed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/xunit_setup.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef teardown_function(function):\n    \"\"\"teardown any state that was previously setup with a setup_function\n    call.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Capturing Output with capsysbinary\nDESCRIPTION: This example demonstrates how to use the `capsysbinary` fixture to capture byte streams written to standard output.  The `readouterr()` method retrieves captured output which is then asserted against expected output.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/builtin.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef test_output(capsysbinary):\n    print(\"hello\")\n    captured = capsysbinary.readouterr()\n    assert captured.out == b\"hello\\n\"\n```\n\n----------------------------------------\n\nTITLE: Second pytest run with caching fixture\nDESCRIPTION: Example output from the second run of `pytest -q` with the caching fixture.  Note that the `running expensive computation...` output is not present, which signifies that the cached value was used. \nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/cache.rst#_snippet_7\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -q\nF                                                                    [100%]\n================================= FAILURES =================================\n______________________________ test_function _______________________________\n\nmydata = 42\n\n    def test_function(mydata):\n>       assert mydata == 23\nE       assert 42 == 23\n\ntest_caching.py:19: AssertionError\n========================= short test summary info ==========================\nFAILED test_caching.py::test_function - assert 42 == 23\n1 failed in 0.12s\n```\n\n----------------------------------------\n\nTITLE: Capturing Warnings in Pytest with Python\nDESCRIPTION: This snippet demonstrates how pytest automatically captures warnings during test execution. The `api_v1` function emits a UserWarning, which pytest captures and displays at the end of the test session. The test asserts that the function returns the expected value.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport warnings\n\n\ndef api_v1():\n    warnings.warn(UserWarning(\"api v1, should use functions from v2\"))\n    return 1\n\n\ndef test_one():\n    assert api_v1() == 1\n```\n\n----------------------------------------\n\nTITLE: Defining module-scoped fixture in conftest.py\nDESCRIPTION: This code defines a module-scoped fixture named `smtp_connection` in a `conftest.py` file.  The fixture creates an SMTP connection using `smtplib` and returns the connection object. Because it is in `conftest.py`, it will be available to all test modules in the same directory.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# content of conftest.py\nimport smtplib\n\nimport pytest\n\n\n@pytest.fixture(scope=\"module\")\ndef smtp_connection():\n    return smtplib.SMTP(\"smtp.gmail.com\", 587, timeout=5)\n```\n\n----------------------------------------\n\nTITLE: Pytest Fixture Requesting Multiple Times (Caching)\nDESCRIPTION: This example demonstrates that fixtures are only executed once per test, even if they are requested multiple times. The `append_first` fixture appends `first_entry` to `order`. Because `order` is requested in both `append_first` and `test_string_only`, and fixtures are cached, the assertion in `test_string_only` passes because it sees the changes made by `append_first`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# contents of test_append.py\nimport pytest\n\n\n# Arrange\n@pytest.fixture\ndef first_entry():\n    return \"a\"\n\n\n# Arrange\n@pytest.fixture\ndef order():\n    return []\n\n\n# Act\n@pytest.fixture\ndef append_first(order, first_entry):\n    return order.append(first_entry)\n\n\ndef test_string_only(append_first, order, first_entry):\n    # Assert\n    assert order == [first_entry]\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Failure Messages for Missing Warnings (Python)\nDESCRIPTION: This snippet shows how to create custom failure messages using `pytest.warns` and `pytest.fail` when a warning is expected but not issued. It checks if any warnings were recorded and fails the test with a custom message if not.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef test():\n    with pytest.warns(Warning) as record:\n        f()\n        if not record:\n            pytest.fail(\"Expected a warning!\")\n```\n\n----------------------------------------\n\nTITLE: Marking a test as xfail during execution\nDESCRIPTION: Shows how to mark a test as `XFAIL` imperatively during test execution using `pytest.xfail(reason)`. This is useful when the xfail condition can only be evaluated at runtime.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef test_function():\n    if not valid_config():\n        pytest.xfail(\"failing configuration (but should work)\")\n```\n\nLANGUAGE: python\nCODE:\n```\ndef test_function2():\n    import slow_module\n\n    if slow_module.slow_function():\n        pytest.xfail(\"slow_module taking too long\")\n```\n\n----------------------------------------\n\nTITLE: Context manager for exception handling\nDESCRIPTION: Illustrates how to use `py.test.raises` as a context manager to assert that a specific exception is raised within a block of code. Allows extra checks on excinfo.value, excinfo.type, and excinfo.traceback.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_71\n\nLANGUAGE: python\nCODE:\n```\nwith py.test.raises(ZeroDivisionError):\n    x = 0\n    1 / x\n\nwith py.test.raises(RuntimeError) as excinfo:\n    call_something()\n\n# you may do extra checks on excinfo.value|type|traceback here\n```\n\n----------------------------------------\n\nTITLE: Filtering Warnings in Tests\nDESCRIPTION: Demonstrates how to use the filterwarnings mark to ignore specific warnings in a test function based on a warning specification string. The string is composed of contents of the tuple (action, message, category, module, lineno), separated by \":\".\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.filterwarnings(\"ignore:.*usage will be deprecated.*:DeprecationWarning\")\ndef test_foo(): ...\n```\n\n----------------------------------------\n\nTITLE: Recording Warnings with the recwarn Fixture (Python)\nDESCRIPTION: This snippet demonstrates how to use the `recwarn` fixture to record all warnings raised during a test function. It shows how to access the recorded warnings, check their type, message, filename, and line number.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport warnings\n\n\ndef test_hello(recwarn):\n    warnings.warn(\"hello\", UserWarning)\n    assert len(recwarn) == 1\n    w = recwarn.pop(UserWarning)\n    assert issubclass(w.category, UserWarning)\n    assert str(w.message) == \"hello\"\n    assert w.filename\n    assert w.lineno\n```\n\n----------------------------------------\n\nTITLE: Setting PYTHONPATH for src Layout\nDESCRIPTION: This command demonstrates how to extend Python's search path using the `PYTHONPATH` environment variable when using the `src` layout and not using an editable install. This allows tests to be executed against the local copy of the code. It's an ad-hoc method for adding `src` to the path.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/goodpractices.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPYTHONPATH=src pytest\n```\n\n----------------------------------------\n\nTITLE: Capturing Output with capsys\nDESCRIPTION: This demonstrates the usage of `capsys` for capturing text written to standard output. The captured output is accessed via the `readouterr()` method, and then asserted for expected string content.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/builtin.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef test_output(capsys):\n    print(\"hello\")\n    captured = capsys.readouterr()\n    assert captured.out == \"hello\\n\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Warnings with @pytest.mark.filterwarnings\nDESCRIPTION: This snippet demonstrates how to use the `@pytest.mark.filterwarnings` mark to add warning filters to specific test items. In this example, the `test_one` function ignores warnings that include the text \"api v1\".\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport warnings\n\n\ndef api_v1():\n    warnings.warn(UserWarning(\"api v1, should use functions from v2\"))\n    return 1\n\n\n@pytest.mark.filterwarnings(\"ignore:api v1\")\ndef test_one():\n    assert api_v1() == 1\n```\n\n----------------------------------------\n\nTITLE: Disabling internal logging feature via pytest.ini\nDESCRIPTION: This snippet demonstrates how to disable the internal logging feature by adding `addopts=-p no:logging` to the `pytest.ini` file. This is necessary if you need to use the `pytest-catchlog` plugin, which conflicts with the internal logging feature.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\n    addopts=-p no:logging\n```\n\n----------------------------------------\n\nTITLE: yield tests replaced by parametrize\nDESCRIPTION: This code snippet shows the recommended replacement for `yield` tests using `pytest.mark.parametrize`.  This improves the readability and maintainability of tests by explicitly defining test case parameters.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.parametrize(\"x, y\", [(2, 4), (3, 9)])\ndef test_squared(x, y):\n    assert x**x == y\n```\n\n----------------------------------------\n\nTITLE: Testing a pytest Plugin with pytester\nDESCRIPTION: Demonstrates how to test a pytest plugin using the `pytester` fixture. It creates temporary `conftest.py` and test files, runs the tests, and asserts the outcomes. Requires the `pytester` plugin and the `pytest` package.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_plugins.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef test_hello(pytester):\n    \"\"\"Make sure that our plugin works.\"\"\"\n\n    # create a temporary conftest.py file\n    pytester.makeconftest(\n        \"\"\"\n        import pytest\n\n        @pytest.fixture(params=[\n            \"Brianna\",\n            \"Andreas\",\n            \"Floris\",\n        ])\n        def name(request):\n            return request.param\n        \"\"\"\n    )\n\n    # create a temporary pytest test file\n    pytester.makepyfile(\n        \"\"\"\n        def test_hello_default(hello):\n            assert hello() == \"Hello World!\"\n\n        def test_hello_name(hello, name):\n            assert hello(name) == \"Hello {0}!\".format(name)\n        \"\"\"\n    )\n\n    # run all tests with pytest\n    result = pytester.runpytest()\n\n    # check that all 4 tests passed\n    result.assert_outcomes(passed=4)\n```\n\n----------------------------------------\n\nTITLE: Running unittest tests with pytest and showing tracebacks\nDESCRIPTION: This command runs the 'test_unittest_db.py' test file using pytest. The output demonstrates how pytest displays tracebacks when assertions fail, showing the values associated with the shared 'self.db' instance provided by the fixture.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/unittest.rst#_snippet_3\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest test_unittest_db.py\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncollected 2 items\n\ntest_unittest_db.py FF                                               [100%]\n\n================================= FAILURES =================================\n___________________________ MyTest.test_method1 ____________________________\n\nself = <test_unittest_db.MyTest testMethod=test_method1>\n\n    def test_method1(self):\n        assert hasattr(self, \"db\")\n>       assert 0, self.db  # fail for demo purposes\nE       AssertionError: <conftest.db_class.<locals>.DummyDB object at 0xdeadbeef0001>\nE       assert 0\n\ntest_unittest_db.py:11: AssertionError\n___________________________ MyTest.test_method2 ____________________________\n\nself = <test_unittest_db.MyTest testMethod=test_method2>\n\n    def test_method2(self):\n>       assert 0, self.db  # fail for demo purposes\nE       AssertionError: <conftest.db_class.<locals>.DummyDB object at 0xdeadbeef0001>\nE       assert 0\n\ntest_unittest_db.py:14: AssertionError\n========================= short test summary info ==========================\nFAILED test_unittest_db.py::MyTest::test_method1 - AssertionError: <conft...\nFAILED test_unittest_db.py::MyTest::test_method2 - AssertionError: <conft...\n============================ 2 failed in 0.12s =============================\n```\n\n----------------------------------------\n\nTITLE: Setting log level for a specific logger in context manager\nDESCRIPTION: This snippet shows how to use `caplog` as a context manager and set the log level for a specific logger. This is useful for temporarily adjusting the log level for a particular part of the test.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef test_bar(caplog):\n    with caplog.at_level(logging.CRITICAL, logger=\"root.baz\"):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Using pytester.copy_example to Test Plugins\nDESCRIPTION: Shows how to use `pytester.copy_example` to copy example files to the `pytester`'s isolated environment before running pytest.  This is especially useful for longer tests and/or longer `conftest.py` files. Also shows a placeholder test to demonstrate the `copy_example` usage.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_plugins.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# content of test_example.py\n\n\ndef test_plugin(pytester):\n    pytester.copy_example(\"test_example.py\")\n    pytester.runpytest(\"-k\", \"test_example\")\n\n\ndef test_example():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Installing Package in Editable Mode with pip\nDESCRIPTION: This command installs the package in editable mode using pip. This allows changes in the source code to be immediately reflected without needing to reinstall the package. It is useful for development as it enables you to modify both tests and application code and rerun tests easily.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/goodpractices.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Defining Acceptance Test Options in conftest.py with pytest\nDESCRIPTION: This code defines a command-line option `-A` for running acceptance tests.  It also defines a fixture `accept` which is an instance of `AcceptFixture`. If the `-A` option is not specified, the test will be skipped. The `AcceptFixture` manages a temporary directory for test execution and provides a `run` method to execute commands in that directory.  Dependencies include `pytest` and `subprocess`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/attic.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_option(parser):\n    group = parser.getgroup(\"myproject\")\n    group.addoption(\n        \"-A\", dest=\"acceptance\", action=\"store_true\", help=\"run (slow) acceptance tests\"\n    )\n\n\ndef pytest_funcarg__accept(request):\n    return AcceptFixture(request)\n\n\nclass AcceptFixture:\n    def __init__(self, request):\n        if not request.config.getoption(\"acceptance\"):\n            pytest.skip(\"specify -A to run acceptance tests\")\n        self.tmpdir = request.config.mktemp(request.function.__name__, numbered=True)\n\n    def run(self, *cmd):\n        \"\"\"called by test code to execute an acceptance test.\"\"\"\n        self.tmpdir.chdir()\n        return subprocess.check_output(cmd).decode()\n```\n\n----------------------------------------\n\nTITLE: Running All Tests in a Class - Bash\nDESCRIPTION: This command runs all test methods within a specified test class. The module filename is relative to the working directory and the class name is specified after the module with :: as a separator.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/test_mod.py::TestClass\n```\n\n----------------------------------------\n\nTITLE: Record Test Suite Properties\nDESCRIPTION: This demonstrates how to add custom properties to the root `<testsuite>` tag in the JUnit XML report using the `record_testsuite_property` fixture. This allows recording global information about the test suite, such as the architecture and storage type.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/builtin.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef test_foo(record_testsuite_property):\n    record_testsuite_property(\"ARCH\", \"PPC\")\n    record_testsuite_property(\"STORAGE_TYPE\", \"CEPH\")\n```\n\n----------------------------------------\n\nTITLE: Using pytest.warns with a Function or Code String (Python)\nDESCRIPTION: This snippet demonstrates using `pytest.warns` to test for warnings raised by a function call or a code string. It allows testing for expected warnings when executing a specific piece of code.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\npytest.warns(expected_warning, func, *args, **kwargs)\npytest.warns(expected_warning, \"func(*args, **kwargs)\")\n```\n\n----------------------------------------\n\nTITLE: Pytest Fault Handler Timeout Configuration\nDESCRIPTION: Configures pytest to dump the tracebacks of all threads if a test takes longer than a specified time to run. The timeout value is set using the `faulthandler_timeout` option in the `pytest.ini` file.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\n# content of pytest.ini\n[pytest]\nfaulthandler_timeout=5\n```\n\n----------------------------------------\n\nTITLE: Ignoring Files with collect_ignore in pytest\nDESCRIPTION: This code snippet shows how to use the `collect_ignore` global variable in a `conftest.py` file to exclude specific files or directories from test collection by pytest. It defines a list of paths to be ignored during test discovery.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncollect_ignore = [\"setup.py\"]\n```\n\n----------------------------------------\n\nTITLE: Customizing Python Function Discovery in Pytest\nDESCRIPTION: This snippet demonstrates how to customize which functions and methods are considered tests by using the `python_functions` option in the `pytest.ini` file.  It uses glob-style patterns to match function and method names. This example collects functions and methods that end in `_test`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_47\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\npython_functions = *_test\n```\n\n----------------------------------------\n\nTITLE: Define a Function with Type Hints\nDESCRIPTION: This example demonstrates a function `get_caption` that uses type hints to specify the expected types of its input parameters and return value. It highlights how a type checker can identify potential issues (returning None) that might be missed by test coverage alone. This example will throw an error with a type checker because the function might return None.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/types.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef get_caption(target: int, items: list[tuple[int, str]]) -> str:\n    for value, caption in items:\n        if value == target:\n            return caption\n```\n\n----------------------------------------\n\nTITLE: Running Pytest to Collect Doctests\nDESCRIPTION: This command invokes pytest to run the tests, including the doctests found in the specified files (e.g., `test_example.txt`). It displays the test session information and the results of the tests.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#_snippet_2\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncollected 1 item\n\ntest_example.txt .                                                   [100%]\n\n============================ 1 passed in 0.12s =============================\n```\n\n----------------------------------------\n\nTITLE: Customizing log format and date format with pytest CLI\nDESCRIPTION: This snippet demonstrates how to customize the log and date format using command-line options. It passes specific formatting options to the pytest command to control the appearance of log messages.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npytest --log-format=\"%(asctime)s %(levelname)s %(message)s\" \\\n            --log-date-format=\"%Y-%m-%d %H:%M:%S\"\n```\n\n----------------------------------------\n\nTITLE: Pytest Collect Imported Tests Configuration\nDESCRIPTION: Configures pytest to either collect or ignore classes/functions imported into test files. Setting `collect_imported_tests = false` ensures that pytest only collects tests defined directly within the test file, ignoring any imported from other modules.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\ncollect_imported_tests = false\n```\n\n----------------------------------------\n\nTITLE: Stacking Parametrize Decorators (Python)\nDESCRIPTION: This example shows how to stack `@pytest.mark.parametrize` decorators to get all combinations of multiple parametrized arguments. The test will run with all combinations of x and y values. Dependencies: pytest.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/parametrize.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\n@pytest.mark.parametrize(\"x\", [0, 1])\n@pytest.mark.parametrize(\"y\", [2, 3])\ndef test_foo(x, y):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Recommended List Passing to pytest.main in Python\nDESCRIPTION: This example shows the recommended way to pass command-line arguments to pytest.main() using a list instead of a string.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\npytest.main([\"-v\", \"-s\"])\n```\n\n----------------------------------------\n\nTITLE: Monkeypatching Dictionaries (Set Items) - Python\nDESCRIPTION: This test function uses `monkeypatch.setitem` to modify the values of the `DEFAULT_CONFIG` dictionary for the duration of the test. It sets the `user` and `database` keys to \"test_user\" and \"test_db\" respectively, then asserts that the `create_connection_string` function returns the expected string.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport app\n\n\ndef test_connection(monkeypatch):\n    # Patch the values of DEFAULT_CONFIG to specific\n    # testing values only for this test.\n    monkeypatch.setitem(app.DEFAULT_CONFIG, \"user\", \"test_user\")\n    monkeypatch.setitem(app.DEFAULT_CONFIG, \"database\", \"test_db\")\n\n    # expected result based on the mocks\n    expected = \"User Id=test_user; Location=test_db;\"\n\n    # the test uses the monkeypatched dictionary settings\n    result = app.create_connection_string()\n    assert result == expected\n```\n\n----------------------------------------\n\nTITLE: Customizing Test Collection with pytest.ini\nDESCRIPTION: This snippet demonstrates how to instruct pytest to discover tests from every Python file within a project by setting `python_files` to `*.py` in the `pytest.ini` configuration file.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n# content of pytest.ini\n[pytest]\npython_files = *.py\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command upgrades the pytest package to the latest version (7.1.3 in this context) using the pip package installer. It ensures that you have the newest bug fixes and features.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.1.3.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Test File Using Custom Marker (Python)\nDESCRIPTION: This snippet shows an example test file that uses the custom marker defined in the previous snippet. It marks a test function to run only in the 'stage1' environment.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\n@pytest.mark.env(\"stage1\")\ndef test_basic_db_operation():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Accessing Exception Info (Python)\nDESCRIPTION: This Python code snippet demonstrates how to access exception information after a test failure using `sys.last_traceback`, `sys.last_value`, and `sys.last_type`. These attributes store the exception information allowing for post-mortem debugging.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/failures.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nsys.last_traceback.tb_lineno\nsys.last_value\n```\n\n----------------------------------------\n\nTITLE: Mocking API Response with Monkeypatch in pytest\nDESCRIPTION: This snippet illustrates how to mock an API response using monkeypatch and a custom class. It defines a MockResponse class with a json() method that returns a predefined dictionary. The monkeypatch.setattr method is then used to replace the requests.get function with a mock_get function that returns an instance of the MockResponse class, allowing tests to avoid actual API calls.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# contents of app.py, a simple API retrieval example\nimport requests\n\n\ndef get_json(url):\n    \"\"\"Takes a URL, and returns the JSON.\"\"\"\n    r = requests.get(url)\n    return r.json()\n```\n\n----------------------------------------\n\nTITLE: Activating pytester plugin in conftest.py\nDESCRIPTION: To use the `pytester` fixture, you need to explicitly activate the `pytester` plugin in your topmost `conftest.py` file. This makes the fixture available for use in your tests.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npytest_plugins = \"pytester\"\n```\n\n----------------------------------------\n\nTITLE: Raising ValueError with pytest.raises\nDESCRIPTION: This code demonstrates the alternate form of pytest.raises for verifying that a specific exception is raised when calling a function with certain arguments.  It calls the function `func` with x=-1 and asserts that it raises a ValueError.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef func(x):\n    if x <= 0:\n        raise ValueError(\"x needs to be larger than zero\")\n\n\npytest.raises(ValueError, func, x=-1)\n```\n\n----------------------------------------\n\nTITLE: Pytest Collect Imported Tests Example Code\nDESCRIPTION: Illustrates a scenario where a class `Testament` is defined in `src/domain.py` and imported in `tests/test_testament.py`. When `collect_imported_tests` is set to `true` (default), pytest will collect the `Testament` class even if it is imported. Setting it to `false` prevents this.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# contents of src/domain.py\nclass Testament: ...\n\n\n# contents of tests/test_testament.py\nfrom domain import Testament\n\n\n\ndef test_testament(): ...\n```\n\n----------------------------------------\n\nTITLE: Suppressing Warnings (Python)\nDESCRIPTION: This snippet demonstrates how to suppress warnings using `warnings.catch_warnings` and `warnings.simplefilter`. All warnings will be ignored within the context manager.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nwith warnings.catch_warnings():\n    warnings.simplefilter(\"ignore\")\n    ...\n```\n\n----------------------------------------\n\nTITLE: Pytest Session Fixture: Call Method Before Tests (Python)\nDESCRIPTION: This pytest fixture, scoped to the session and set to run automatically, iterates through all collected test items. For each item, it checks if the parent class defines a 'callme' method and calls it. This allows executing custom logic before any tests are run within a pytest session.\n\nDependencies: pytest\nInput: request object from pytest\nOutput: Side effects of calling the 'callme' methods of test classes. No return value.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/special.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef callattr_ahead_of_alltests(request):\n    print(\"callattr_ahead_of_alltests called\")\n    seen = {None}\n    session = request.node\n    for item in session.items:\n        cls = item.getparent(pytest.Class)\n        if cls not in seen:\n            if hasattr(cls.obj, \"callme\"):\n                cls.obj.callme()\n            seen.add(cls)\n```\n\n----------------------------------------\n\nTITLE: Running Pytest with Ignore Option\nDESCRIPTION: This pytest command demonstrates how to use the `--ignore` option to exclude specific test modules and directories from the test collection process. This is useful for focusing tests on particular parts of the codebase or temporarily excluding failing tests.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#_snippet_1\n\nLANGUAGE: pytest\nCODE:\n```\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-5.x.y, py-1.x.y, pluggy-0.x.y\nrootdir: $REGENDOC_TMPDIR, inifile:\ncollected 5 items\n\ntests/example/test_example_01.py .                                   [ 20%]\ntests/example/test_example_02.py .                                   [ 40%]\ntests/example/test_example_03.py .                                   [ 60%]\ntests/foobar/test_foobar_01.py .                                     [ 80%]\ntests/foobar/test_foobar_02.py .                                     [100%]\n\n========================= 5 passed in 0.02 seconds =========================\n```\n\n----------------------------------------\n\nTITLE: Requiring Plugins in a Test Module or conftest.py\nDESCRIPTION: This code snippet shows how to require specific plugins within a test module or a `conftest.py` file using the `pytest_plugins` variable. This ensures that the listed plugins are loaded when the test module or conftest file is processed by pytest. The plugins should be specified as a tuple of strings.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/plugins.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npytest_plugins = (\"myapp.testsupport.myplugin\",)\n```\n\n----------------------------------------\n\nTITLE: Using smtp_connection fixture in test_module.py\nDESCRIPTION: This code demonstrates how to use the `smtp_connection` fixture defined in `conftest.py` within a test module. The `test_ehlo` and `test_noop` functions accept the fixture as an argument, and pytest automatically injects the fixture's return value into the test functions.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# content of test_module.py\n\n\ndef test_ehlo(smtp_connection):\n    response, msg = smtp_connection.ehlo()\n    assert response == 250\n    assert b\"smtp.gmail.com\" in msg\n    assert 0  # for demo purposes\n\n\ndef test_noop(smtp_connection):\n    response, msg = smtp_connection.noop()\n    assert response == 250\n    assert 0  # for demo purposes\n```\n\n----------------------------------------\n\nTITLE: Skipping all tests in a class\nDESCRIPTION: Illustrates how to skip all test methods within a class using the `skipif` marker.  This is useful for skipping a group of tests based on a shared condition, such as the operating system.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.skipif(sys.platform == \"win32\", reason=\"does not run on windows\")\nclass TestPosixCalls:\n    def test_function(self):\n        \"will not be setup or run under 'win32' platform\"\n```\n\n----------------------------------------\n\nTITLE: Registering Markers Programmatically\nDESCRIPTION: This snippet shows how to register new markers programmatically using the pytest_configure hook. It adds a marker named 'env(name)' with a description to the configuration.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/mark.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_configure(config):\n    config.addinivalue_line(\n        \"markers\", \"env(name): mark test to run only on named environment\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Finding Out What Is Collected in Pytest\nDESCRIPTION: This pytest command demonstrates how to use the `--collect-only` option to display the test collection tree without actually running the tests.  It provides valuable insight into how pytest is interpreting and organizing the tests within a project.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#_snippet_11\n\nLANGUAGE: pytest\nCODE:\n```\n. $ pytest --collect-only pythoncollection.py\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\nconfigfile: pytest.ini\ncollected 3 items\n\n<Dir pythoncollection.rst-207>\n  <Dir CWD>\n    <Module pythoncollection.py>\n      <Function test_function>\n      <Class TestClass>\n        <Function test_method>\n        <Function test_anothermethod>\n\n======================== 3 tests collected in 0.12s ========================\n```\n\n----------------------------------------\n\nTITLE: Manual Fixture Request Example\nDESCRIPTION: This example demonstrates how fixtures can depend on other fixtures by calling them manually. The `first_entry` fixture defines the initial value, and the `order` fixture creates a list containing that value. The `test_string` function then appends another value to the list and asserts the result. This is the equivalent of the previous example but done manually.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef first_entry():\n    return \"a\"\n\n\ndef order(first_entry):\n    return [first_entry]\n\n\ndef test_string(order):\n    # Act\n    order.append(\"b\")\n\n    # Assert\n    assert order == [\"a\", \"b\"]\n\n\nentry = first_entry()\nthe_list = order(first_entry=entry)\ntest_string(order=the_list)\n```\n\n----------------------------------------\n\nTITLE: Reusable Pytest Fixtures\nDESCRIPTION: This example shows how the same fixtures can be reused across multiple tests, ensuring that each test gets its own fresh copy of the fixture data.  Each test independently modifies the `order` list, demonstrating that each test receives a new instance of the fixture.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# contents of test_append.py\nimport pytest\n\n\n# Arrange\n@pytest.fixture\ndef first_entry():\n    return \"a\"\n\n\n# Arrange\n@pytest.fixture\ndef order(first_entry):\n    return [first_entry]\n\n\ndef test_string(order):\n    # Act\n    order.append(\"b\")\n\n    # Assert\n    assert order == [\"a\", \"b\"]\n\n\ndef test_int(order):\n    # Act\n    order.append(2)\n\n    # Assert\n    assert order == [\"a\", 2]\n```\n\n----------------------------------------\n\nTITLE: Running Pytest with Continue on Failure\nDESCRIPTION: This command configures pytest to continue running doctests even after encountering a failure. It combines the `--doctest-modules` option with `--doctest-continue-on-failure`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npytest --doctest-modules --doctest-continue-on-failure\n```\n\n----------------------------------------\n\nTITLE: Recommended Injection via pytest_configure in Python\nDESCRIPTION: Demonstrates the recommended approach for plugin authors to inject their names into pytest's namespace, typically during pytest_configure.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\ndef pytest_configure():\n    pytest.my_symbol = MySymbol()\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Fixtures Using Markers (Python)\nDESCRIPTION: This example demonstrates how to use pytest markers to pass data to fixtures. The `fixt` fixture accesses the `fixt_data` marker on the test function using `request.node.get_closest_marker` and retrieves the marker's arguments. This allows tests to provide specific data to the fixture for configuration or customization.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\n@pytest.fixture\ndef fixt(request):\n    marker = request.node.get_closest_marker(\"fixt_data\")\n    if marker is None:\n        # Handle missing marker in some way...\n        data = None\n    else:\n        data = marker.args[0]\n\n    # Do something with the data\n    return data\n\n\n@pytest.mark.fixt_data(42)\ndef test_fixt(fixt):\n    assert fixt == 42\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest via pip\nDESCRIPTION: This snippet shows how to upgrade pytest to the latest version using pip. The command uninstalls the previous version and installs the newest one.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.4.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Setting the truncation limit for assertion messages\nDESCRIPTION: This snippet demonstrates how to configure the maximum number of characters to truncate assertion message contents using the `truncation_limit_chars` option in the `pytest.ini` file. Setting the value to ``0`` disables the character limit for truncation.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_53\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\ntruncation_limit_chars = 640\n```\n\n----------------------------------------\n\nTITLE: Using Fixture with usefixtures Marker\nDESCRIPTION: This example demonstrates how to use the `usefixtures` marker to apply the `cleandir` fixture to a class. The `cleandir` fixture will be executed before each test method in the `TestDirectoryInit` class, ensuring that each test starts with an empty current working directory.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nimport pytest\n\n\n@pytest.mark.usefixtures(\"cleandir\")\nclass TestDirectoryInit:\n    def test_cwd_starts_empty(self):\n        assert os.listdir(os.getcwd()) == []\n        with open(\"myfile\", \"w\", encoding=\"utf-8\") as f:\n            f.write(\"hello\")\n\n    def test_cwd_again_starts_empty(self):\n        assert os.listdir(os.getcwd()) == []\n```\n\n----------------------------------------\n\nTITLE: Function-Level Setup\nDESCRIPTION: Defines setup_function to execute before each test function in a module. The optional function parameter gives access to the test function being executed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/xunit_setup.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef setup_function(function):\n    \"\"\"setup any state tied to the execution of the given function.\n    Invoked for every test function in the module.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Monkeypatching Attributes with Context - Python\nDESCRIPTION: Demonstrates how to use `monkeypatch.context` as a context manager to temporarily set an attribute and then revert it to its original value. This is useful for isolating tests and preventing unintended side effects.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef test_partial(monkeypatch):\n    with monkeypatch.context() as m:\n        m.setattr(functools, \"partial\", 3)\n        assert functools.partial == 3\n```\n\n----------------------------------------\n\nTITLE: Changing Naming Conventions in pytest.ini\nDESCRIPTION: This configuration snippet shows how to customize naming conventions in pytest by setting `python_files`, `python_classes`, and `python_functions` options within the `pytest.ini` file. This allows pytest to recognize tests based on prefixes other than the default 'test'.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n# content of pytest.ini\n# Example 1: have pytest look for \"check\" instead of \"test\"\n[pytest]\npython_files = check_*.py\npython_classes = Check\npython_functions = *_check\n```\n\n----------------------------------------\n\nTITLE: Selecting Tests Excluding Markers - Pytest Command\nDESCRIPTION: Demonstrates how to exclude tests using the ``-m`` option in pytest, using the ``not`` operator to run all tests except those marked with a specific marker (e.g., ``webtest``).\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_2\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -v -m \"not webtest\"\n```\n\n----------------------------------------\n\nTITLE: with_setup replaced with pytest fixture\nDESCRIPTION: This code snippet shows the recommended replacement for `with_setup` decorator using a pytest fixture. This demonstrates how to define setup and teardown logic within a fixture.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\ndef setup_some_resource(): ...\n\n\ndef teardown_some_resource(): ...\n\n\n@pytest.fixture\ndef some_resource():\n    setup_some_resource()\n    yield\n    teardown_some_resource()\n\n\ndef test_foo(some_resource): ...\n```\n\n----------------------------------------\n\nTITLE: Ensuring Code Triggers DeprecationWarning\nDESCRIPTION: This snippet demonstrates how to use `pytest.deprecated_call` to check that a certain function call triggers a DeprecationWarning or PendingDeprecationWarning.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\ndef test_myfunction_deprecated():\n    with pytest.deprecated_call():\n        myfunction(17)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pytest with pytest.ini\nDESCRIPTION: This shows how to configure pytest using a `pytest.ini` file.  In this case, it adds the `--doctest-modules` option, making pytest collect doctests from docstrings by default.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n# content of pytest.ini\n[pytest]\naddopts = --doctest-modules\n```\n\n----------------------------------------\n\nTITLE: Accessing log records and text from caplog\nDESCRIPTION: This snippet demonstrates how to access the log records and the final log text captured by the `caplog` fixture. It iterates through the `caplog.records` to assert on the contents of log messages and checks for specific strings in `caplog.text`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef test_baz(caplog):\n    func_under_test()\n    for record in caplog.records:\n        assert record.levelname != \"CRITICAL\"\n    assert \"wally\" not in caplog.text\n```\n\n----------------------------------------\n\nTITLE: Pytest Console Output Style Configuration\nDESCRIPTION: Demonstrates how to configure the console output style of pytest during test execution. This is done by setting the `console_output_style` option in the `pytest.ini` file. Available styles include `classic`, `progress`, `progress-even-when-capture-no`, `count`, and `times`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\n# content of pytest.ini\n[pytest]\nconsole_output_style = classic\n```\n\n----------------------------------------\n\nTITLE: Skipping tests based on module version\nDESCRIPTION: Demonstrates how to skip a test function based on a module's version string using the `@pytest.mark.skipif` decorator.  The expression is evaluated and if true, the test will be skipped, providing meaningful information during test run summarization.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_70\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nimport mymodule\n@pytest.mark.skipif(\"mymodule.__version__[0] == \\\"1\\\"\")\ndef test_function():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Pytest Addopts Example Execution\nDESCRIPTION: Demonstrates how the `addopts` configuration translates to an actual pytest command execution. This snippet shows that running `pytest test_hello.py` with the configured `addopts` is equivalent to running `pytest --maxfail=2 -rf test_hello.py`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npytest --maxfail=2 -rf test_hello.py\n```\n\n----------------------------------------\n\nTITLE: Mocking API Response with pytest Fixture\nDESCRIPTION: This snippet demonstrates how to use a pytest fixture in conjunction with monkeypatch to mock an API response. It creates a fixture named mock_response that uses monkeypatch.setattr to replace requests.get with a function that returns a MockResponse. Tests can then use the mock_response fixture to automatically apply the mock without directly using monkeypatch.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# contents of test_app.py, a simple test for our API retrieval\nimport pytest\nimport requests\n\n# app.py that includes the get_json() function\nimport app\n\n\n# custom class to be the mock return value of requests.get()\nclass MockResponse:\n    @staticmethod\n    def json():\n        return {\"mock_key\": \"mock_response\"}\n\n\n# monkeypatched requests.get moved to a fixture\n@pytest.fixture\ndef mock_response(monkeypatch):\n    \"\"\"Requests.get() mocked to return {'mock_key':'mock_response'}.\"\"\"\n\n    def mock_get(*args, **kwargs):\n        return MockResponse()\n\n    monkeypatch.setattr(requests, \"get\", mock_get)\n\n\n# notice our test uses the custom fixture instead of monkeypatch directly\ndef test_get_json(mock_response):\n    result = app.get_json(\"https://fakeurl\")\n    assert result[\"mock_key\"] == \"mock_response\"\n```\n\n----------------------------------------\n\nTITLE: Logging Error Propagation Python\nDESCRIPTION: This snippet explains that pytest now propagates errors encountered while formatting log messages, likely causing tests to fail. Previously, these errors were printed to stderr without failing the test.  The behavior can be suppressed by setting `logging.raiseExceptions = False`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_47\n\n\n\n----------------------------------------\n\nTITLE: Parametrizing Optional Imports with pytest\nDESCRIPTION: This example demonstrates how to handle optional implementations or imports in tests. The `pytest.importorskip` function is used to skip tests if a module is not available, allowing tests to adapt to different environments.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# content of conftest.py\n\nimport pytest\n\n\n@pytest.fixture(scope=\"session\")\ndef basemod(request):\n    return pytest.importorskip(\"base\")\n\n\n@pytest.fixture(scope=\"session\", params=[\"opt1\", \"opt2\"])\ndef optmod(request):\n    return pytest.importorskip(request.param)\n```\n\nLANGUAGE: python\nCODE:\n```\n# content of base.py\ndef func1():\n    return 1\n```\n\nLANGUAGE: python\nCODE:\n```\n# content of opt1.py\ndef func1():\n    return 1.0001\n```\n\nLANGUAGE: python\nCODE:\n```\n# content of test_module.py\n\n\ndef test_func1(basemod, optmod):\n    assert round(basemod.func1(), 3) == round(optmod.func1(), 3)\n```\n\n----------------------------------------\n\nTITLE: Indirect Parametrization with pytest\nDESCRIPTION: This code demonstrates indirect parametrization, where a fixture receives the values before they are passed to the test. The `indirect=True` parameter is used to achieve this, allowing for more expensive setup at test runtime within the fixture.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\n@pytest.fixture\ndef fixt(request):\n    return request.param * 3\n\n\n@pytest.mark.parametrize(\"fixt\", [\"a\", \"b\"], indirect=True)\ndef test_indirect(fixt):\n    assert len(fixt) == 3\n```\n\n----------------------------------------\n\nTITLE: Running pytest without options\nDESCRIPTION: This snippet demonstrates how to run pytest without any specific logging options. It shows the default behavior of pytest, which captures log messages of level WARNING or above and displays them in a dedicated section for failed tests.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Storing Data in pytest Item Stash in Python\nDESCRIPTION: This snippet demonstrates how to store data in the `item.stash` during the `pytest_runtest_setup` hook.  The data is associated with specific stash keys. Type hints for the `item` parameter ensure correct type checking. Using stashes is a recommended way to store and retrieve data on pytest items.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_hook_functions.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_runtest_setup(item: pytest.Item) -> None:\n    item.stash[been_there_key] = True\n    item.stash[done_that_key] = \"no\"\n```\n\n----------------------------------------\n\nTITLE: Applying Fixtures to All Test Functions in Pytest\nDESCRIPTION: This configuration allows a list of fixtures to be automatically applied to all test functions, equivalent to using the `@pytest.mark.usefixtures` marker on each test function. This provides a convenient way to globally apply common test setup or teardown logic.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_55\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nusefixtures =\n    clean_db\n```\n\n----------------------------------------\n\nTITLE: Dynamic fixture scope determination\nDESCRIPTION: This example demonstrates how to dynamically determine the scope of a fixture based on command-line arguments. The `determine_scope` function checks for a `--keep-containers` option and returns either \"session\" or \"function\" accordingly. The `docker_container` fixture then uses this function to set its scope.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef determine_scope(fixture_name, config):\n    if config.getoption(\"--keep-containers\", None):\n        return \"session\"\n    return \"function\"\n\n\n@pytest.fixture(scope=determine_scope)\ndef docker_container():\n    yield spawn_container()\n```\n\n----------------------------------------\n\nTITLE: Overriding Fixtures in test_something_else.py - Python\nDESCRIPTION: This snippet demonstrates how to override fixtures within a specific test module (`test_something_else.py`). It shows both a parametrized fixture being overridden with a non-parametrized one, and a non-parametrized fixture being overridden with a parametrized version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_52\n\nLANGUAGE: python\nCODE:\n```\ndef test_username(parametrized_username):\n    assert parametrized_username in ['one', 'two', 'three']\n\ndef test_username(non_parametrized_username):\n    assert non_parametrized_username == 'username'\n```\n\n----------------------------------------\n\nTITLE: Capturing Output with capfd\nDESCRIPTION: This example showcases using `capfd` fixture to capture text written to file descriptors 1 and 2, usually stdout and stderr. `os.system` is used to generate output and the `readouterr()` method retrieves captured text, which is then asserted.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/builtin.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef test_system_echo(capfd):\n    os.system('echo \"hello\"')\n    captured = capfd.readouterr()\n    assert captured.out == \"hello\\n\"\n```\n\n----------------------------------------\n\nTITLE: Test requiring a fixture\nDESCRIPTION: Example of a test function requesting a fixture, by declaring it as an argument name. The `capsys` fixture is used to capture stdout/stderr.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef test_output(capsys):\n    print(\"hello\")\n    out, err = capsys.readouterr()\n    assert out == \"hello\\n\"\n```\n\n----------------------------------------\n\nTITLE: Add ignore-glob parameter to exclude test modules - Python\nDESCRIPTION: Adds the ``--ignore-glob`` parameter to exclude test-modules with Unix shell-style wildcards. Also adds the ``collect_ignore_glob`` for ``conftest.py`` to exclude test-modules with Unix shell-style wildcards. This functionality enhances the ability to filter test files during collection based on glob patterns defined in either command line or configuration files.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_62\n\n\n\n----------------------------------------\n\nTITLE: Using Pytest Fixtures in Doctests\nDESCRIPTION: This code snippet shows how to use pytest fixtures within a doctest. The `getfixture` helper is used to access the fixture named `tmp_path`, enabling the doctest to interact with the fixture.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n# content of example.rst\n>>> tmp = getfixture('tmp_path')\n>>> ...\n```\n\n----------------------------------------\n\nTITLE: Listing Active Plugins with pytest\nDESCRIPTION: This command is used to display a list of all active plugins in the pytest environment.  The output includes the names of the activated plugins and any loaded `conftest.py` files, providing insight into the currently active testing environment. This is useful for debugging plugin conflicts or verifying plugin activation.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/plugins.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npytest --trace-config\n```\n\n----------------------------------------\n\nTITLE: Monkeypatching Path.home in pytest\nDESCRIPTION: This code snippet demonstrates how to use the monkeypatch fixture to replace the Path.home function with a mock function that returns a specific path for testing purposes. This avoids dependency on the running user's home directory during testing. The monkeypatch.setattr method is used to replace the Path.home attribute with the mockreturn function.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# contents of test_module.py with source code and the test\nfrom pathlib import Path\n\n\ndef getssh():\n    \"\"\"Simple function to return expanded homedir ssh path.\"\"\"\n    return Path.home() / \".ssh\"\n\n\ndef test_getssh(monkeypatch):\n    # mocked return function to replace Path.home\n    # always return '/abc'\n    def mockreturn():\n        return Path(\"/abc\")\n\n    # Application of the monkeypatch to replace Path.home\n    # with the behavior of mockreturn defined above.\n    monkeypatch.setattr(Path, \"home\", mockreturn)\n\n    # Calling getssh() will use mockreturn in place of Path.home\n    # for this test with the monkeypatch.\n    x = getssh()\n    assert x == Path(\"/abc/.ssh\")\n```\n\n----------------------------------------\n\nTITLE: Show extra info on xfailed, xpassed, and skipped tests\nDESCRIPTION: Command line option to show extra info on xfailed, xpassed, and skipped tests\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\npytest -rxXs  # show extra info on xfailed, xpassed, and skipped tests\n```\n\n----------------------------------------\n\nTITLE: Pytest Collection with Custom Naming Conventions\nDESCRIPTION: This pytest output demonstrates the result of running pytest with customized naming conventions as configured in the `pytest.ini` file. Pytest successfully collects and lists test functions and classes based on these custom rules, as shown in the output of the `--collect-only` option.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#_snippet_7\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest --collect-only\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\nconfigfile: pytest.ini\ncollected 2 items\n\n<Dir pythoncollection.rst-207>\n  <Module check_myapp.py>\n    <Class CheckMyApp>\n      <Function simple_check>\n      <Function complex_check>\n\n======================== 2 tests collected in 0.12s ========================\n```\n\n----------------------------------------\n\nTITLE: Pytest Filter Warnings Configuration\nDESCRIPTION: Demonstrates how to configure warning filters and actions for matched warnings. This is configured using the `filterwarnings` option in the `pytest.ini` file, allowing users to ignore, error, or modify the behavior of specific warnings.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\n# content of pytest.ini\n[pytest]\nfilterwarnings =\n    error\n    ignore::DeprecationWarning\n```\n\n----------------------------------------\n\nTITLE: Running a Pytest test\nDESCRIPTION: This snippet shows the execution of a pytest test using the `-q` flag for quiet mode. It demonstrates that the test `test_emaillib.py` passed successfully.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_18\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -q test_emaillib.py\n.                                                                    [100%]\n1 passed in 0.12s\n```\n\n----------------------------------------\n\nTITLE: Cloning and Branching Git Repository\nDESCRIPTION: These commands demonstrate how to clone a forked pytest repository, fetch tags from the upstream repository, and create a new branch for bug fixes or feature implementations.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:YOUR_GITHUB_USERNAME/pytest.git\n$ cd pytest\n$ git fetch --tags https://github.com/pytest-dev/pytest\n# now, create your own branch off \"main\":\n\n    $ git checkout -b your-bugfix-branch-name main\n```\n\n----------------------------------------\n\nTITLE: Using Hooks in pytest_addoption in Python\nDESCRIPTION: This example demonstrates how to use hooks within `pytest_addoption` to modify command-line options. It shows how one plugin can use a hook defined in another to determine the default value of a command-line option.  `firstresult=True` ensures only one plugin defines the default.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_hook_functions.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# contents of hooks.py\n\n\n# Use firstresult=True because we only want one plugin to define this\n# default value\n@hookspec(firstresult=True)\ndef pytest_config_file_default_value():\n    \"\"\"Return the default value for the config file command line option.\"\"\"\n```\n\nLANGUAGE: python\nCODE:\n```\n# contents of myplugin.py\n\n\ndef pytest_addhooks(pluginmanager):\n    \"\"\"This example assumes the hooks are grouped in the 'hooks' module.\"\"\"\n    from . import hooks\n\n    pluginmanager.add_hookspecs(hooks)\n\n\ndef pytest_addoption(parser, pluginmanager):\n    default_value = pluginmanager.hook.pytest_config_file_default_value()\n    parser.addoption(\n        \"--config-file\",\n        help=\"Config file to use, defaults to %(default)s\",\n        default=default_value,\n    )\n```\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_config_file_default_value():\n    return \"config.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from pytest Item Stash in Python\nDESCRIPTION: This snippet illustrates how to retrieve data from the `item.stash` during the `pytest_runtest_teardown` hook.  It retrieves values using the previously defined stash keys.  This allows plugins to access and modify data stored on the test item across different hooks.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_hook_functions.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_runtest_teardown(item: pytest.Item) -> None:\n    if not item.stash[been_there_key]:\n        print(\"Oh?\")\n    item.stash[done_that_key] = \"yes!\"\n```\n\n----------------------------------------\n\nTITLE: Patching with MonkeyPatch.context in pytest\nDESCRIPTION: This snippet shows how to use MonkeyPatch.context to limit patching to a specific scope. This is useful when patching standard library or third-party functions used by pytest itself, as it prevents breaking pytest's internals. The context manager ensures that the patch is only active within the specified block.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport functools\n```\n\n----------------------------------------\n\nTITLE: Calling Pytest with Additional Plugins - Python\nDESCRIPTION: This code shows how to invoke pytest from Python code and add a custom plugin to the test run. It demonstrates a plugin that prints a message at the end of the session.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# content of myinvoke.py\nimport sys\n\nimport pytest\n\n\nclass MyPlugin:\n    def pytest_sessionfinish(self):\n        print(\"*** test run reporting finishing\")\n\n\nif __name__ == \"__main__\":\n    sys.exit(pytest.main([\"-qq\"], plugins=[MyPlugin()]))\n```\n\n----------------------------------------\n\nTITLE: Retrieving OS User (Example Code) - Python\nDESCRIPTION: This code snippet defines a function `get_os_user_lower` that retrieves the value of the `USER` environment variable, converts it to lowercase, and returns it. If the `USER` environment variable is not set, it raises an `OSError`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\n\ndef get_os_user_lower():\n    \"\"\"Simple retrieval function.\n    Returns lowercase USER or raises OSError.\"\"\"\n    username = os.getenv(\"USER\")\n\n    if username is None:\n        raise OSError(\"USER environment is not set.\")\n\n    return username.lower()\n```\n\n----------------------------------------\n\nTITLE: Selecting Tests by Marker Keyword Arguments - Pytest Command\nDESCRIPTION: Shows how to restrict a test run to tests matching a marker with specific keyword arguments (e.g., ``device(serial='123')``). This allows for fine-grained test selection based on marker attributes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_3\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -v -m \"device(serial='123')\"\n```\n\n----------------------------------------\n\nTITLE: Example pytest output showing fixture usage\nDESCRIPTION: This snippet shows example pytest output demonstrating how pytest displays the value of injected fixtures in tracebacks. The `smtp_connection` object is visible in the traceback for both failing tests, indicating that the same instance is being shared between tests.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_11\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest test_module.py\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncollected 2 items\n\ntest_module.py FF                                                    [100%]\n\n================================= FAILURES =================================\n________________________________ test_ehlo _________________________________\n\nsmtp_connection = <smtplib.SMTP object at 0xdeadbeef0001>\n\n    def test_ehlo(smtp_connection):\n        response, msg = smtp_connection.ehlo()\n        assert response == 250\n        assert b\"smtp.gmail.com\" in msg\n>       assert 0  # for demo purposes\nE       assert 0\n\ntest_module.py:7: AssertionError\n________________________________ test_noop _________________________________\n\nsmtp_connection = <smtplib.SMTP object at 0xdeadbeef0001>\n\n    def test_noop(smtp_connection):\n        response, msg = smtp_connection.noop()\n        assert response == 250\n>       assert 0  # for demo purposes\nE       assert 0\n\ntest_module.py:13: AssertionError\n========================= short test summary info ==========================\nFAILED test_module.py::test_ehlo - assert 0\nFAILED test_module.py::test_noop - assert 0\n============================ 2 failed in 0.12s =============================\n```\n\n----------------------------------------\n\nTITLE: pytest: Early-Load Plugins via Entry-Point Name\nDESCRIPTION: The `-p` option can now be used to early-load plugins also by entry-point name, instead of just by module name. This allows loading external plugins like `pytest-cov` directly from the command line. Improves command-line usage and simplifies plugin loading.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\npytest -p pytest_cov\n```\n\n----------------------------------------\n\nTITLE: Custom Marks Usage\nDESCRIPTION: Illustrates how to create and use custom marks with arguments and keyword arguments.  Demonstrates how the `mark` object stores arguments and keyword arguments which can be later accessed by fixtures or hooks.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.timeout(10, \"slow\", method=\"thread\")\ndef test_function(): ...\n```\n\nLANGUAGE: python\nCODE:\n```\nmark.args == (10, \"slow\")\nmark.kwargs == {\"method\": \"thread\"}\n```\n\n----------------------------------------\n\nTITLE: Monkeypatching Dictionaries with Fixtures - Python\nDESCRIPTION: This example demonstrates using pytest fixtures to define reusable monkeypatch configurations for dictionary modifications. Each fixture modifies `app.DEFAULT_CONFIG` using `monkeypatch.setitem` or `monkeypatch.delitem`.  Tests use these fixtures to setup specific mock dictionary states.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n# app.py with the connection string function\nimport app\n\n\n# all of the mocks are moved into separated fixtures\n@pytest.fixture\ndef mock_test_user(monkeypatch):\n    \"\"\"Set the DEFAULT_CONFIG user to test_user.\"\"\"\n    monkeypatch.setitem(app.DEFAULT_CONFIG, \"user\", \"test_user\")\n\n\n@pytest.fixture\ndef mock_test_database(monkeypatch):\n    \"\"\"Set the DEFAULT_CONFIG database to test_db.\"\"\"\n    monkeypatch.setitem(app.DEFAULT_CONFIG, \"database\", \"test_db\")\n\n\n@pytest.fixture\ndef mock_missing_default_user(monkeypatch):\n    \"\"\"Remove the user key from DEFAULT_CONFIG\"\"\"\n    monkeypatch.delitem(app.DEFAULT_CONFIG, \"user\", raising=False)\n\n\n# tests reference only the fixture mocks that are needed\ndef test_connection(mock_test_user, mock_test_database):\n    expected = \"User Id=test_user; Location=test_db;\"\n\n    result = app.create_connection_string()\n    assert result == expected\n\n\ndef test_missing_user(mock_missing_default_user):\n    with pytest.raises(KeyError):\n        _ = app.create_connection_string()\n```\n\n----------------------------------------\n\nTITLE: Class-Level Setup\nDESCRIPTION: Defines setup_class as a class method, which is called once before any test methods in the class are executed.  The cls parameter is the class itself.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/xunit_setup.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef setup_class(cls):\n    \"\"\"setup any state specific to the execution of the given class (which\n    usually contains tests).\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining pytest_runtest_setup Hook in conftest.py\nDESCRIPTION: This example demonstrates how to implement the pytest_runtest_setup hook in a conftest.py file. The hook will be called for tests within the 'a' subdirectory, allowing directory-specific setup logic.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_plugins.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_runtest_setup(item):\n    # called for running each test in 'a' directory\n    print(\"setting up\", item)\n```\n\n----------------------------------------\n\nTITLE: Asserting expected exception groups with match and check parameters\nDESCRIPTION: This snippet demonstrates how to use `pytest.RaisesGroup` with the `match` and `check` parameters. The `match` parameter checks against the group message, while the `check` parameter takes a callable to perform arbitrary checks on the group.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef test_raisesgroup_match_and_check():\n    with pytest.RaisesGroup(BaseException, match=\"my group msg\"):\n        raise BaseExceptionGroup(\"my group msg\", [KeyboardInterrupt()])\n    with pytest.RaisesGroup(\n        Exception, check=lambda eg: isinstance(eg.__cause__, ValueError)\n    ):\n        raise ExceptionGroup(\"\", [TypeError()]) from ValueError()\n```\n\n----------------------------------------\n\nTITLE: Configuring junit_family in pytest.ini for legacy xunit1\nDESCRIPTION: This snippet demonstrates how to configure the `junit_family` option in `pytest.ini` to use the `legacy` (xunit1) format. This should only be used if existing tooling doesn't support the `xunit2` format.  It ensures continued compatibility with older systems.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\njunit_family=legacy\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Marker and Command Line Option (Python)\nDESCRIPTION: This snippet demonstrates how to add a custom marker and a corresponding command-line option to control test runs based on named environments. It involves using pytest hooks such as `pytest_addoption`, `pytest_configure`, and `pytest_runtest_setup`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\ndef pytest_addoption(parser):\n    parser.addoption(\n        \"-E\",\n        action=\"store\",\n        metavar=\"NAME\",\n        help=\"only run tests matching the environment NAME.\",\n    )\n\n\ndef pytest_configure(config):\n    # register an additional marker\n    config.addinivalue_line(\n        \"markers\", \"env(name): mark test to run only on named environment\"\n    )\n\n\ndef pytest_runtest_setup(item):\n    envnames = [mark.args[0] for mark in item.iter_markers(name=\"env\")]\n    if envnames:\n        if item.config.getoption(\"-E\") not in envnames:\n            pytest.skip(f\"test requires env in {envnames!r}\")\n```\n\n----------------------------------------\n\nTITLE: Running unittest tests with autouse fixtures\nDESCRIPTION: This command executes the 'test_unittest_cleandir.py' file using pytest. The output shows a single passing test, which indicates that the 'initdir' fixture was automatically executed before the 'test_method', setting up the test environment as expected.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/unittest.rst#_snippet_5\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -q test_unittest_cleandir.py\n.                                                                    [100%]\n1 passed in 0.12s\n```\n\n----------------------------------------\n\nTITLE: Listing Registered Markers - Pytest Command\nDESCRIPTION: Demonstrates how to use the ``--markers`` option to list all registered markers for a test suite, including custom markers defined in ``pytest.ini`` and built-in markers.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_11\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest --markers\n```\n\n----------------------------------------\n\nTITLE: Unknown Key Warning in Config INI Files Python\nDESCRIPTION: This snippet indicates that a warning is now shown when an unknown key is read from a config INI file. The `--strict-config` flag has been added to treat these warnings as errors, allowing stricter configuration validation.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_39\n\n\n\n----------------------------------------\n\nTITLE: --import-mode=importlib Option Python\nDESCRIPTION: This snippet introduces the `--import-mode=importlib` option, which uses `importlib` to import test modules. This approach avoids modifying `sys.path` and `sys.modules`, addressing drawbacks of the traditional import method. Users are encouraged to try this mode and provide feedback.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_41\n\n\n\n----------------------------------------\n\nTITLE: Automatically Adding Markers Based on Test Names\nDESCRIPTION: This example shows how to automatically add markers to tests based on their names using the `pytest_collection_modifyitems` hook. The hook iterates through the collected test items and adds 'interface' or 'event' markers if the test's node ID contains the corresponding string. This allows for selective test execution using the `-m` option.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# content of test_module.py\n\n\ndef test_interface_simple():\n    assert 0\n\n\ndef test_interface_complex():\n    assert 0\n\n\ndef test_event_simple():\n    assert 0\n\n\ndef test_something_else():\n    assert 0\n```\n\n----------------------------------------\n\nTITLE: Pytest JUnit Family Configuration\nDESCRIPTION: Configures the format of the generated JUnit XML file.  The `junit_family` option can be set to `xunit1` (or `legacy`) for xunit 1.0 compatible output, or `xunit2` (the default) for xunit 2.0 style output.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\njunit_family = xunit2\n```\n\n----------------------------------------\n\nTITLE: Mapping argparse errors to pytest UsageError\nDESCRIPTION: Maps usage errors from argparse to pytest's ``UsageError``. This integration allows pytest to handle command-line argument parsing errors in a consistent manner, providing users with clear and informative error messages when incorrect command-line arguments are used.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_63\n\n\n\n----------------------------------------\n\nTITLE: Pytest Result Output\nDESCRIPTION: This is the output from running pytest on the module shown above.  It shows how pytest captures the standard output from setup functions and prints it only for failed tests.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-stdout-stderr.rst#_snippet_2\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncollected 2 items\n\ntest_module.py .F                                                    [100%]\n\n================================= FAILURES =================================\n________________________________ test_func2 ________________________________\n\n    def test_func2():\n>       assert False\nE       assert False\n\ntest_module.py:12: AssertionError\n-------------------------- Captured stdout setup ---------------------------\nsetting up <function test_func2 at 0xdeadbeef0001>\n========================= short test summary info ==========================\nFAILED test_module.py::test_func2 - assert False\n======================= 1 failed, 1 passed in 0.12s ========================\n```\n\n----------------------------------------\n\nTITLE: Testing with pytester fixture (assertion)\nDESCRIPTION: This Python code defines a test function `test_true_assertion` that utilizes the `pytester` fixture to create a test file, run pytest, and assert that the test passes. It demonstrates black-box testing of pytest plugins or pytest itself.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef test_true_assertion(pytester):\n    pytester.makepyfile(\n        \"\"\"\n        def test_foo():\n            assert True\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    result.assert_outcomes(failed=0, passed=1)\n```\n\n----------------------------------------\n\nTITLE: Combining scoping and parametrization with @pytest.fixture\nDESCRIPTION: This code snippet demonstrates how to combine scoping (e.g., session) and parametrization using the `@pytest.fixture` decorator.  The fixture will be invoked multiple times (based on the `params` list), and the scope determines the lifetime of the resource created by each invocation. It allows you to manage resources with specific scopes and configurations.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/funcarg_compare.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n    @pytest.fixture(scope=\"session\", params=[\"mysql\", \"pg\"])\n    def db(request):\n        if request.param == \"mysql\":\n            db = MySQL()\n        elif request.param == \"pg\":\n            db = PG()\n        request.addfinalizer(db.destroy)  # destroy when session is finished\n        return db\n```\n\n----------------------------------------\n\nTITLE: Permanently Activating Argcomplete for Pytest\nDESCRIPTION: This command registers argcomplete specifically for pytest and adds the necessary configuration to the user's .bashrc file. This makes tab completion available for pytest in every new bash session.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/bash-completion.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nregister-python-argcomplete pytest >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Inline Type Annotations Support Python\nDESCRIPTION: This snippet announces the inclusion of inline type annotations in pytest, exposing them to user programs. It encourages users to report any incorrect type errors encountered while using type checkers like mypy.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_36\n\n\n\n----------------------------------------\n\nTITLE: Declaring a new hook function in Python\nDESCRIPTION: This code snippet shows how to declare a new hook function called `pytest_my_hook`.  The name should start with `pytest_` to be recognized by pytest. This example defines the hook, and shows how to register the hooks with the pluginmanager.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_hook_functions.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_my_hook(config):\n    \"\"\"\n    Receives the pytest config and does things with it\n    \"\"\"\n```\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_addhooks(pluginmanager):\n    \"\"\"This example assumes the hooks are grouped in the 'sample_hook' module.\"\"\"\n    from my_app.tests import sample_hook\n\n    pluginmanager.add_hookspecs(sample_hook)\n```\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture()\ndef my_fixture(pytestconfig):\n    # call the hook called \"pytest_my_hook\"\n    # 'result' will be a list of return values from all registered functions.\n    result = pytestconfig.hook.pytest_my_hook(config=pytestconfig)\n```\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_my_hook(config):\n    \"\"\"\n    Print all active hooks to the screen.\n    \"\"\"\n    print(config.hook)\n```\n\n----------------------------------------\n\nTITLE: Implementing a pytest Plugin with a Fixture\nDESCRIPTION: Shows an example of a pytest plugin that provides a fixture named `hello`. This fixture returns a function that generates a greeting string based on an optional input name, defaulting to 'World' if no name is provided. Requires the `pytest` package.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_plugins.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\ndef pytest_addoption(parser):\n    group = parser.getgroup(\"helloworld\")\n    group.addoption(\n        \"--name\",\n        action=\"store\",\n        dest=\"name\",\n        default=\"World\",\n        help='Default \"name\" for hello().',\n    )\n\n\n@pytest.fixture\ndef hello(request):\n    name = request.config.getoption(\"name\")\n\n    def _hello(name=None):\n        if not name:\n            name = request.config.getoption(\"name\")\n        return f\"Hello {name}!\"\n\n    return _hello\n```\n\n----------------------------------------\n\nTITLE: Disabling Plugin Autoloading in pytest.ini\nDESCRIPTION: This snippet demonstrates how to disable pytest plugin autoloading via the `pytest.ini` configuration file using the `addopts` setting and the `--disable-plugin-autoload` command-line option, used in conjunction with the `-p` option to explicitly enable specific plugins.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/plugins.rst#_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\naddopts = --disable-plugin-autoload -p NAME,NAME2\n```\n\n----------------------------------------\n\nTITLE: Running specific tests with tox and pytest options\nDESCRIPTION: This command runs tests on Python 3.9 and passes options to pytest, such as entering the pdb debugger on failure. It enables focused testing with specific configurations.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ tox -e py39 -- --pdb\n```\n\n----------------------------------------\n\nTITLE: Registering External Fixtures with pytest_plugins - Python\nDESCRIPTION: This snippet shows how to register fixtures from an external module (`mylibrary.fixtures`) using the `pytest_plugins` variable in a `conftest.py` file. This allows tests within the `app/tests` directory to access fixtures defined in the external module.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_53\n\nLANGUAGE: python\nCODE:\n```\npytest_plugins = \"mylibrary.fixtures\"\n```\n\n----------------------------------------\n\nTITLE: Setting the tmp_path retention policy\nDESCRIPTION: This snippet demonstrates how to set the policy for retaining temporary directories created by the `tmp_path` fixture using the `tmp_path_retention_policy` option in the `pytest.ini` file. The policy can be set to `all`, `failed`, or `none` to retain directories for all tests, only failed tests, or no tests, respectively.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_52\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\ntmp_path_retention_policy = all\n```\n\n----------------------------------------\n\nTITLE: Marking Platform-Specific Tests\nDESCRIPTION: This code defines a pytest plugin in `conftest.py` that allows marking tests for specific platforms (darwin, linux, win32). It uses the `pytest_runtest_setup` hook to check if the current platform matches any of the supported platforms specified by the test's markers. If there's a platform marker and the current platform doesn't match, the test is skipped.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# content of conftest.py\n#\nimport sys\n\nimport pytest\n\nALL = set(\"darwin linux win32\".split())\n\n\ndef pytest_runtest_setup(item):\n    supported_platforms = ALL.intersection(mark.name for mark in item.iter_markers())\n    plat = sys.platform\n    if supported_platforms and plat not in supported_platforms:\n        pytest.skip(f\"cannot run on platform {plat}\")\n```\n\n----------------------------------------\n\nTITLE: Testing with pytester fixture (stdout match)\nDESCRIPTION: This Python code defines a test function `test_true_assertion` that uses the `pytester` fixture to create a test file, run pytest, and assert that the standard output matches specific glob-like expressions. It enables verification based on terminal output.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef test_true_assertion(pytester):\n    pytester.makepyfile(\n        \"\"\"\n        def test_foo():\n            assert False\n        \"\"\"\n    )\n    result = pytester.runpytest()\n    result.stdout.fnmatch_lines([\"*assert False*\", \"*1 failed*\"])\n```\n\n----------------------------------------\n\nTITLE: Parametrized pytest fixtures for context generation\nDESCRIPTION: This snippet defines pytest fixtures for generating different contexts for testing a cookiecutter project. It uses parametrization to create variations of extra context and combines them with a default context.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/proposals/parametrize_with_fixtures.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\n@pytest.fixture\ndef default_context():\n    return {\"extra_context\": {}}\n\n\n@pytest.fixture(\n    params=[\n        {\"author\": \"alice\"},\n        {\"project_slug\": \"helloworld\"},\n        {\"author\": \"bob\", \"project_slug\": \"foobar\"},\n    ]\n)\ndef extra_context(request):\n    return {\"extra_context\": request.param}\n\n\n@pytest.fixture(params=[\"default\", \"extra\"])\ndef context(request):\n    if request.param == \"default\":\n        return request.getfuncargvalue(\"default_context\")\n    else:\n        return request.getfuncargvalue(\"extra_context\")\n\n\ndef test_generate_project(cookies, context):\n    \"\"\"Call the cookiecutter API to generate a new project from a\n    template.\n    \"\"\"\n    result = cookies.bake(extra_context=context)\n\n    assert result.exit_code == 0\n    assert result.exception is None\n    assert result.project.isdir()\n```\n\n----------------------------------------\n\nTITLE: Running Class Instance Sharing Tests with Pytest\nDESCRIPTION: This command runs the test functions in `TestClassDemoInstance` within `test_class_demo.py`, filtered using the `-k` option. The output shows that `test_two` fails because each test has a new instance of the class and the attribute 'value' is not shared.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#_snippet_9\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -k TestClassDemoInstance -q\n.F                                                                   [100%]\n================================= FAILURES =================================\n______________________ TestClassDemoInstance.test_two ______________________\n\nself = <test_class_demo.TestClassDemoInstance object at 0xdeadbeef0002>\n\n    def test_two(self):\n>       assert self.value == 1\nE       assert 0 == 1\nE        +  where 0 = <test_class_demo.TestClassDemoInstance object at 0xdeadbeef0002>.value\n\ntest_class_demo.py:9: AssertionError\n========================= short test summary info ==========================\nFAILED test_class_demo.py::TestClassDemoInstance::test_two - assert 0 == 1\n1 failed, 1 passed in 0.12s\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest via pip\nDESCRIPTION: This command is used to upgrade the pytest package to the latest version using the pip package installer. It ensures that you have the most recent version of pytest installed on your system, incorporating the latest features and bug fixes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.0.0.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Pytest Configuration in tox.ini\nDESCRIPTION: This snippet illustrates how to include pytest configuration in a `tox.ini` file.  The configuration is placed within a `[pytest]` section. This allows pytest settings to be managed alongside tox environment configurations.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/customize.rst#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n# tox.ini\n[pytest]\nminversion = 6.0\naddopts = -ra -q\ntestpaths =\n    tests\n    integration\n```\n\n----------------------------------------\n\nTITLE: Returning Non-None from test - Corrected\nDESCRIPTION: This code snippet shows the corrected way to assert the result of a test function by using `assert` instead of `return`. This is the recommended approach in pytest to ensure that tests properly check for expected outcomes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.parametrize(\n    [\"a\", \"b\", \"result\"],\n    [\n        [1, 2, 5],\n        [2, 3, 8],\n        [5, 3, 18],\n    ],\n)\ndef test_foo(a, b, result):\n    assert foo(a, b) == result\n```\n\n----------------------------------------\n\nTITLE: Using --pyargs option with pytest\nDESCRIPTION: This bash command demonstrates how to use the `--pyargs` option to have pytest interpret command line arguments as Python package names, deriving their file system path and running the test.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npytest --pyargs unittest2.test.test_skipping -q\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Test Function - Bash\nDESCRIPTION: This command runs a specific test function within a module. The module filename is relative to the working directory and the function name is specified after the module with :: as a separator.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/test_mod.py::test_func\n```\n\n----------------------------------------\n\nTITLE: pytest --last-failed examples\nDESCRIPTION: This demonstrates use of pytest --last-failed with configuration of --last-failed-no-failures as either 'all' or 'none'\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/cache.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npytest --last-failed --last-failed-no-failures all    # runs the full test suite (default behavior)\npytest --last-failed --last-failed-no-failures none   # runs no tests and exits successfully\n```\n\n----------------------------------------\n\nTITLE: Simple Fixture Request Example\nDESCRIPTION: This example demonstrates a basic test case with a fixture, showcasing how the fixture's return value is passed to the test function. The example manually calls the functions to mimic what pytest does internally.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef fruit_bowl():\n    return [Fruit(\"apple\"), Fruit(\"banana\")]\n\n\ndef test_fruit_salad(fruit_bowl):\n    # Act\n    fruit_salad = FruitSalad(*fruit_bowl)\n\n    # Assert\n    assert all(fruit.cubed for fruit in fruit_salad.fruit)\n\n\n# Arrange\nbowl = fruit_bowl()\ntest_fruit_salad(fruit_bowl=bowl)\n```\n\n----------------------------------------\n\nTITLE: Running Pytest with Output Capture\nDESCRIPTION: This snippet shows how to run a pytest test and capture the standard output using the `-s` flag. The output demonstrates the execution order of test and fixture finalizers, showing which print statements are executed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_20\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -s test_finalizers.py\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncollected 1 item\n\ntest_finalizers.py test_bar\n.after_yield_2\nafter_yield_1\n\n\n============================ 1 passed in 0.12s =============================\n```\n\n----------------------------------------\n\nTITLE: XFail strict mode\nDESCRIPTION: Shows how to enable strict mode for `xfail` using the `strict=True` parameter in `pytest.mark.xfail`. In strict mode, unexpected passes (XPASS) will cause the test suite to fail.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.xfail(strict=True)\ndef test_function(): ...\n```\n\n----------------------------------------\n\nTITLE: Disabling PytestDeprecationWarning as Errors\nDESCRIPTION: Illustrates how to temporarily disable the treatment of PytestDeprecationWarning as errors by adding a configuration option to the pytest.ini file. This workaround is intended for pytest versions 6.0.X and will not work in subsequent releases.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nfilterwarnings =\n    ignore::pytest.PytestDeprecationWarning\n```\n\n----------------------------------------\n\nTITLE: Pytest Mark Example Output\nDESCRIPTION: This snippet illustrates the output of running the test with a marked fixture. It showcases that one test case (`test_data[2]`) is skipped due to the `pytest.mark.skip` applied to its corresponding fixture value, while the other test cases pass.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_37\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest test_fixture_marks.py -v\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y -- $PYTHON_PREFIX/bin/python\ncachedir: .pytest_cache\nrootdir: /home/sweet/project\ncollecting ... collected 3 items\n\ntest_fixture_marks.py::test_data[0] PASSED                           [ 33%]\ntest_fixture_marks.py::test_data[1] PASSED                           [ 66%]\ntest_fixture_marks.py::test_data[2] SKIPPED (unconditional skip)     [100%]\n\n======================= 2 passed, 1 skipped in 0.12s =======================\n```\n\n----------------------------------------\n\nTITLE: Ensuring At Least One of Several Warnings is Issued (Python)\nDESCRIPTION: This snippet shows how to use `pytest.warns` to ensure that at least one of the specified warning types is issued during the execution of a code block.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef test_warning():\n    with pytest.warns((RuntimeWarning, UserWarning)):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Excluding Directories from Test Discovery in Pytest\nDESCRIPTION: This snippet demonstrates how to exclude specific directories from test collection using the `norecursedirs` option in the `pytest.ini` file. This allows you to prevent pytest from traversing into certain directories during test discovery, improving performance and avoiding unwanted tests.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_43\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nnorecursedirs = .svn _build tmp*\n```\n\n----------------------------------------\n\nTITLE: Simple YAML Test Specification\nDESCRIPTION: This is a simple YAML test specification file. It defines two test cases: 'hello' and 'ok'. The 'hello' test case asserts that 'some' equals 'other', which will fail. The 'ok' test case asserts that 'sub1' equals 'sub1', which will pass.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/nonpython.rst#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhello:\n    some: other\nok:\n    sub1: sub1\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest using pip\nDESCRIPTION: This command is used to upgrade the pytest package to the latest version using the pip package installer. It ensures that the user has the most recent bug fixes and improvements.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.4.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Assertion example with mock objects\nDESCRIPTION: This code snippet demonstrates a common mistake made by new users when using mock objects in pytest. It shows the incorrect way of asserting that a method has been called with specific arguments, and then shows the correct way. The warning introduced in pytest 4.1.0 is triggered by the incorrect assertion.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nassert mocked_object.assert_called_with(3, 4, 5, key=\"value\")\n```\n\nLANGUAGE: python\nCODE:\n```\nmocked_object.assert_called_with(3, 4, 5, key=\"value\")\n```\n\n----------------------------------------\n\nTITLE: Enforcing Strict Markers in pytest.ini\nDESCRIPTION: This snippet shows how to enforce strict marker validation by adding '--strict-markers' to the 'addopts' option in the pytest.ini file. It also includes example marker registrations.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/mark.rst#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\naddopts = --strict-markers\nmarkers =\n    slow: marks tests as slow (deselect with '-m \"not slow\"')\n    serial\n```\n\n----------------------------------------\n\nTITLE: Disable/Configure Pytest Capture (bash)\nDESCRIPTION: These pytest commands disable capturing, capture using sys.stdout/stderr, capture using file descriptors, or combine sys capturing with passthrough to actual sys.stdout/stderr.  They show how to control pytest's output capturing mechanisms from the command line.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-stdout-stderr.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest -s                  # disable all capturing\npytest --capture=sys       # replace sys.stdout/stderr with in-mem files\npytest --capture=fd        # also point filedescriptors 1 and 2 to temp file\npytest --capture=tee-sys   # combines 'sys' and '-s', capturing sys.stdout/stderr\n                           # and passing it along to the actual sys.stdout/stderr\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests with Configuration Values in Pytest (Boolean Condition)\nDESCRIPTION: This snippet demonstrates skipping tests based on a configuration value using a boolean condition within `@pytest.mark.skipif`. This is the preferred approach, using `pytest.config.getvalue(\"db\")` and providing a `reason` for the skip. Note this pattern may not work in `conftest.py` due to argument parsing order.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/historical-notes.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.skipif(not pytest.config.getvalue(\"db\"), reason=\"--db was not specified\")\ndef test_function():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Fixture errors example\nDESCRIPTION: This example demonstrates how pytest handles errors in fixtures. If an earlier fixture raises an exception, pytest stops executing subsequent fixtures for that test and marks the test as having an error. The example shows a chain of fixtures and how an error in `append_first` would prevent `append_second` and `append_third` from running.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/fixtures.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\n@pytest.fixture\ndef order():\n    return []\n\n\n@pytest.fixture\ndef append_first(order):\n    order.append(1)\n\n\n@pytest.fixture\ndef append_second(order, append_first):\n    order.extend([2])\n\n\n@pytest.fixture(autouse=True)\ndef append_third(order, append_second):\n    order += [3]\n\n\ndef test_order(order):\n    assert order == [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This code snippet demonstrates how to upgrade to the latest version of pytest using the pip package manager. The command `pip install --upgrade pytest` will update the existing pytest installation to the newest version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.0.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Parametrized Test with Failures in pytest\nDESCRIPTION: This code defines a parametrized test function that fails for specific input values (17 and 25). It demonstrates how to create failing tests that can be used with pytest's --lf/--ff options for re-running failures. The pytest.fail function is used to explicitly mark the test as failed when the condition is met.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/cache.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\n@pytest.mark.parametrize(\"i\", range(50))\ndef test_num(i):\n    if i in (17, 25):\n        pytest.fail(\"bad luck\")\n```\n\n----------------------------------------\n\nTITLE: Skipping all tests in a module (pytestmark)\nDESCRIPTION: Demonstrates how to skip all tests in a module by setting the `pytestmark` global variable. This is used to skip all tests based on certain conditions like the OS.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# test_module.py\npytestmark = pytest.mark.skipif(...)\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Temporary Directory Fixture\nDESCRIPTION: This command executes the `test_needsfiles` function in `test_tmp_path.py`. The output shows the created temporary directory path and the assertion failure. The key is that pytest automatically creates and manages the `tmp_path` fixture.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#_snippet_11\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -q test_tmp_path.py\nF                                                                    [100%]\n================================= FAILURES =================================\n_____________________________ test_needsfiles ______________________________\n\ntmp_path = PosixPath('PYTEST_TMPDIR/test_needsfiles0')\n\n    def test_needsfiles(tmp_path):\n        print(tmp_path)\n>       assert 0\nE       assert 0\n\ntest_tmp_path.py:3: AssertionError\n--------------------------- Captured stdout call ---------------------------\nPYTEST_TMPDIR/test_needsfiles0\n========================= short test summary info ==========================\nFAILED test_tmp_path.py::test_needsfiles - assert 0\n1 failed in 0.12s\n```\n\n----------------------------------------\n\nTITLE: Recording Warnings with pytest.warns (Python)\nDESCRIPTION: This snippet shows how to use `pytest.warns` to record warnings without asserting anything about their type. It defaults to a generic Warning and allows capturing multiple warnings of different types.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nwith pytest.warns() as record:\n    warnings.warn(\"user\", UserWarning)\n    warnings.warn(\"runtime\", RuntimeWarning)\n\nassert len(record) == 2\nassert str(record[0].message) == \"user\"\nassert str(record[1].message) == \"runtime\"\n```\n\n----------------------------------------\n\nTITLE: Adding colors to custom log levels on CLI log in Pytest (Python)\nDESCRIPTION: This code snippet demonstrates how to add colors to custom log levels on the command-line interface (CLI) log in pytest using the `pytest_configure` hook. It retrieves the logging plugin, accesses the CLI handler's formatter, and adds color levels for specified log levels.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nlogging_plugin = config.pluginmanager.get_plugin('logging-plugin')\nlogging_plugin.log_cli_handler.formatter.add_color_level(logging.INFO, 'cyan')\nlogging_plugin.log_cli_handler.formatter.add_color_level(logging.SPAM, 'blue')\n```\n\n----------------------------------------\n\nTITLE: Defining a fixture in a subpackage's conftest.py\nDESCRIPTION: This snippet shows how to define a fixture in a conftest.py file within a subpackage. The fixture 'mid' appends 'mid subpackage' to the 'order' list.  Fixtures defined in subpackage conftest.py files extend the fixtures available in parent directories.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/fixtures.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n@pytest.fixture\ndef mid(order):\n    order.append(\"mid subpackage\")\n```\n\n----------------------------------------\n\nTITLE: Typed Fixture Definition\nDESCRIPTION: This snippet shows how to define a pytest fixture with a type hint for its return value. The `sample_fixture` is defined to return an integer.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/types.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\n@pytest.fixture\ndef sample_fixture() -> int:\n    return 38\n```\n\n----------------------------------------\n\nTITLE: Os.dup() Function Assumption Python\nDESCRIPTION: This snippet indicates a breaking change where the `os.dup()` function is now assumed to exist. The code no longer checks if `os.dup()` is available.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Asserting expected exception groups with pytest.RaisesGroup\nDESCRIPTION: This snippet demonstrates how to use `pytest.RaisesGroup` to assert that an `ExceptionGroup` is raised with specific exceptions. It showcases checking for `ValueError` and combinations of `ValueError` and `TypeError` within the raised `ExceptionGroup`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef test_exception_in_group():\n    with pytest.RaisesGroup(ValueError):\n        raise ExceptionGroup(\"group msg\", [ValueError(\"value msg\")])\n    with pytest.RaisesGroup(ValueError, TypeError):\n        raise ExceptionGroup(\"msg\", [ValueError(\"foo\"), TypeError(\"bar\")])\n```\n\n----------------------------------------\n\nTITLE: Calling Pytest from Python Code - Python\nDESCRIPTION: This code snippet demonstrates how to invoke pytest directly from Python code. It provides a way to run tests programmatically and obtain the exit code.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nretcode = pytest.main()\n```\n\n----------------------------------------\n\nTITLE: Pytest Command with Marker\nDESCRIPTION: This command shows how to run pytest with verbose mode and a specific marker, selecting only tests marked with 'basic'. It demonstrates how to filter and execute tests based on custom markers.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#_snippet_15\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -v -m basic\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest using pip\nDESCRIPTION: This snippet shows how to upgrade pytest to the latest version using pip. It's a simple one-line command to execute in the terminal. It requires pip to be installed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.3.1.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Using fixtures defined in different conftest.py files\nDESCRIPTION: This snippet shows how to use fixtures defined in different conftest.py files within a subpackage. The fixture 'innermost' appends 'innermost subpackage' to the 'order' list after 'mid' has already modified it. The `test_order` asserts the final state of the list after applying modifications in different scopes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/fixtures.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n@pytest.fixture\ndef innermost(order, mid):\n    order.append(\"innermost subpackage\")\n\ndef test_order(order, top):\n    assert order == [\"mid subpackage\", \"innermost subpackage\", \"top\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Directory Recursion in pytest.ini\nDESCRIPTION: This configuration snippet for a `pytest.ini` file shows how to set the `norecursedirs` option to prevent pytest from recursively searching specific directories during test collection. This helps to avoid unnecessary test discovery in directories like `.svn`, `_build`, or those starting with `tmp`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# content of pytest.ini\n[pytest]\nnorecursedirs = .svn _build tmp*\n```\n\n----------------------------------------\n\nTITLE: Show pytest cache with glob filter\nDESCRIPTION: Demonstrates using pytest --cache-show with a glob filter, only showing the cache contents matching the glob.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/cache.rst#_snippet_9\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest --cache-show example/*\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncachedir: /home/sweet/project/.pytest_cache\n----------------------- cache values for 'example/*' -----------------------\nexample/value contains:\n  42\n```\n\n----------------------------------------\n\nTITLE: Dynamically apply a marker to a test invocation\nDESCRIPTION: Shows how to dynamically apply a marker (e.g., xfail) to a test invocation based on conditions within a funcarg factory.  This example applies an xfail marker if a factory provides parameters to a test expected to fail.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_72\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_funcarg__arg(request):\n    request.applymarker(py.test.mark.xfail(reason=\"flaky config\"))\n    ...\n\ndef test_function(arg):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Ensuring No Warnings are Emitted (Python)\nDESCRIPTION: This code demonstrates how to use `warnings.catch_warnings` and `warnings.simplefilter` to ensure that no warnings are emitted during a test. Any warning raised will be treated as an error, causing the test to fail.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef test_warning():\n    with warnings.catch_warnings():\n        warnings.simplefilter(\"error\")\n        ...\n```\n\n----------------------------------------\n\nTITLE: Clearing captured log records with caplog\nDESCRIPTION: This snippet demonstrates how to use the `caplog.clear()` method to reset the captured log records in a test. This can be useful to isolate logging within specific parts of a test function.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef test_something_with_clearing_records(caplog):\n    some_method_that_creates_log_records()\n    caplog.clear()\n    your_test_method()\n    assert [\"Foo\"] == [rec.message for rec in caplog.records]\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This code snippet shows how to upgrade pytest to the latest version using pip. It uses the 'pip install --upgrade' command followed by the package name 'pytest'.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-6.2.4.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Ignoring DeprecationWarning with Regular Expression\nDESCRIPTION: This snippet shows how to ignore specific deprecation warnings in code that you have no control over. This example ignores all warnings of type DeprecationWarning where the start of the message matches the regular expression \".*U.*mode is deprecated\".\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nfilterwarnings =\n    ignore:.*U.*mode is deprecated:DeprecationWarning\n```\n\n----------------------------------------\n\nTITLE: Skipping Doctests Based on External Conditions\nDESCRIPTION: This example demonstrates how to skip a doctest based on external conditions using `pytest.skip`. In this case, the doctest is skipped if the system is running Windows.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n>>> import sys, pytest\n>>> if sys.platform.startswith('win'):\n...     pytest.skip('this doctest does not work on Windows')\n... \n>>> import fcntl\n>>> ...\n```\n\n----------------------------------------\n\nTITLE: Setting Log File Level in Pytest\nDESCRIPTION: This snippet configures the minimum log level for messages written to the log file using the `log_file_level` option in the `pytest.ini` file. Only messages with a level at or above the configured level will be written to the file, helping to filter out less important information.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_38\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nlog_file_level = INFO\n```\n\n----------------------------------------\n\nTITLE: Applying Marks Globally with pytestmark (List of Marks)\nDESCRIPTION: This code shows how to apply multiple pytest marks to all test functions and methods within a module by setting the `pytestmark` global variable to a list of marks. It requires importing the pytest module first.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\npytestmark = [pytest.mark.integration, pytest.mark.slow]\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest via pip\nDESCRIPTION: This command upgrades the installed version of pytest using pip. It uses the `--upgrade` flag to ensure that the latest version is installed, replacing the existing one.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.3.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Alternative Fixture Definition with name parameter in Python\nDESCRIPTION: An alternative method is shown to create a fixture which calls the original function together with the ``name`` parameter to address minimal changes to the code.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ndef cell():\n    return ...\n\n\n@pytest.fixture(name=\"cell\")\ndef cell_fixture():\n    return cell()\n```\n\n----------------------------------------\n\nTITLE: Method-Level Teardown\nDESCRIPTION: Defines teardown_method to execute after each test method in a class.  Used to clean up resources created in setup_method. The optional method parameter gives access to the test method being executed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/xunit_setup.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef teardown_method(self, method):\n    \"\"\"teardown any state that was previously setup with a setup_method\n    call.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Custom Class for Assertion Comparison\nDESCRIPTION: This code defines a simple class `Foo` with an `__eq__` method used in the custom assertion explanation example. The class compares the `val` attributes of two `Foo` instances.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# content of test_foocompare.py\nclass Foo:\n    def __init__(self, val):\n        self.val = val\n\n    def __eq__(self, other):\n        return self.val == other.val\n\n\ndef test_compare():\n    f1 = Foo(1)\n    f2 = Foo(2)\n    assert f1 == f2\n```\n\n----------------------------------------\n\nTITLE: pytest output with customized log format\nDESCRIPTION: This snippet shows the output of pytest when custom log and date formats are used. The log messages are formatted according to the specified formats.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#_snippet_3\n\nLANGUAGE: pytest\nCODE:\n```\n----------------------- Captured stdlog call ----------------------\n2010-04-10 14:48:44 WARNING text going to logger\n----------------------- Captured stdout call ----------------------\ntext going to stdout\n----------------------- Captured stderr call ----------------------\ntext going to stderr\n==================== 2 failed in 0.02 seconds =====================\n```\n\n----------------------------------------\n\nTITLE: Parametrizing a fixture using @pytest.fixture(params=...)\nDESCRIPTION: This code snippet demonstrates how to parametrize a fixture using the `params` argument of the `@pytest.fixture` decorator. This allows running tests multiple times with different sets of values. The `request.param` attribute is used to access the current parameter value within the fixture function. This replaces the older, more complex parametrization methods.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/funcarg_compare.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n    @pytest.fixture(params=[\"mysql\", \"pg\"])\n    def db(request): ...  # use request.param\n```\n\n----------------------------------------\n\nTITLE: Specifying Doctest Glob Pattern in Bash\nDESCRIPTION: This command allows you to specify a glob pattern for doctest files. By default, pytest looks for files matching `test*.txt`. This example shows how to change the pattern to include `*.rst` files.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest --doctest-glob=\"*.rst\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command upgrades the pytest package to the latest version (5.3.5 in this case) using pip, the Python package installer. It ensures that any existing pytest installation is replaced with the newer version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.3.5.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Enabling Doctest Options Inline in RST\nDESCRIPTION: This example shows how to enable doctest options inline within an RST file using a comment. The `+IGNORE_EXCEPTION_DETAIL` option is used to ignore lengthy exception stack traces.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#_snippet_8\n\nLANGUAGE: rst\nCODE:\n```\n>>> something_that_raises()  # doctest: +IGNORE_EXCEPTION_DETAIL\nTraceback (most recent call last):\nValueError: ...\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Pytest Version\nDESCRIPTION: This snippet demonstrates how to specify the minimum required pytest version using the `minversion` option within the `pytest.ini` file.  If the installed pytest version is older than the specified version, pytest will exit with an error.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_42\n\nLANGUAGE: ini\nCODE:\n```\n# content of pytest.ini\n[pytest]\nminversion = 3.0  # will fail if we run with pytest-2.8\n```\n\n----------------------------------------\n\nTITLE: Parametrizing with Custom IDs\nDESCRIPTION: This snippet demonstrates how to parametrize tests with custom IDs.  It defines a test function `test_timedistance_v0`, `test_timedistance_v1`, `test_timedistance_v2`, `test_timedistance_v3` and parametrizes it with a list of tuples.  The `ids` parameter is used to specify custom IDs for each test case. It showcase generating test IDs from a list of strings, function, and pytest.param.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timedelta\n\nimport pytest\n\ntestdata = [\n    (datetime(2001, 12, 12), datetime(2001, 12, 11), timedelta(1)),\n    (datetime(2001, 12, 11), datetime(2001, 12, 12), timedelta(-1)),\n]\n\n\n@pytest.mark.parametrize(\"a,b,expected\", testdata)\ndef test_timedistance_v0(a, b, expected):\n    diff = a - b\n    assert diff == expected\n\n\n@pytest.mark.parametrize(\"a,b,expected\", testdata, ids=[\"forward\", \"backward\"])\ndef test_timedistance_v1(a, b, expected):\n    diff = a - b\n    assert diff == expected\n\n\ndef idfn(val):\n    if isinstance(val, (datetime,)):\n        # note this wouldn't show any hours/minutes/seconds\n        return val.strftime(\"%Y%m%d\")\n\n\n@pytest.mark.parametrize(\"a,b,expected\", testdata, ids=idfn)\ndef test_timedistance_v2(a, b, expected):\n    diff = a - b\n    assert diff == expected\n\n\n@pytest.mark.parametrize(\n    \"a,b,expected\",\n    [\n        pytest.param(\n            datetime(2001, 12, 12), datetime(2001, 12, 11), timedelta(1), id=\"forward\"\n        ),\n        pytest.param(\n            datetime(2001, 12, 11), datetime(2001, 12, 12), timedelta(-1), id=\"backward\"\n        ),\n    ],\n)\ndef test_timedistance_v3(a, b, expected):\n    diff = a - b\n    assert diff == expected\n```\n\n----------------------------------------\n\nTITLE: Running tests with tox\nDESCRIPTION: This command uses the 'tox' tool to execute tests against Python 3.9 and performs linting checks for coding style. It validates the project's functionality and coding standards.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ tox -e linting,py39\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command upgrades the existing pytest installation to the latest version available on PyPI using the pip package manager. It ensures that users have the newest bug fixes and features.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.1.3.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Customizing Test Collection with conftest.py\nDESCRIPTION: This code snippet shows how to use a `conftest.py` file to dynamically define files to be ignored during test collection. It uses `collect_ignore` to exclude `setup.py` and, conditionally based on the Python version, `pkg/module_py2.py`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# content of conftest.py\nimport sys\n\ncollect_ignore = [\"setup.py\"]\nif sys.version_info[0] > 2:\n    collect_ignore.append(\"pkg/module_py2.py\")\n```\n\n----------------------------------------\n\nTITLE: Deprecated Direct Fixture Calling in Python\nDESCRIPTION: Calling fixture functions directly is deprecated. This example shows the deprecated way of calling a fixture and how it breaks the fixture resolution model.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef cell():\n    return ...\n\n\n@pytest.fixture\ndef full_cell():\n    cell = cell()\n    cell.make_full()\n    return cell\n```\n\n----------------------------------------\n\nTITLE: Conditionally skipping all tests in a module\nDESCRIPTION: Demonstrates how to conditionally skip all tests in a module based on a condition using `pytestmark` and `pytest.mark.skipif`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npytestmark = pytest.mark.skipif(sys.platform == \"win32\", reason=\"tests for linux only\")\n```\n\n----------------------------------------\n\nTITLE: Debugging with PDB on failures (Bash)\nDESCRIPTION: These commands show how to invoke the Python debugger (pdb) on test failures. The `--pdb` option drops into the pdb prompt on every failure, while combining it with `-x` or `--maxfail` limits debugging to the first few failures.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/failures.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest --pdb\npytest -x --pdb   # drop to PDB on first failure, then end test session\npytest --pdb --maxfail=3  # drop to PDB for first three failures\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command upgrades the pytest package to the latest version available on PyPI using the pip package manager. It ensures that you have the most recent bug fixes and improvements.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.9.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Pytest: Keeping Duplicate Paths with --keep-duplicates\nDESCRIPTION: This pytest command demonstrates how to use the `--keep-duplicates` option to collect duplicate tests when the same path is specified multiple times in the command line. This is useful in certain niche cases where you need to ensure tests are run for each specified instance of a file.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#_snippet_3\n\nLANGUAGE: pytest\nCODE:\n```\npytest --keep-duplicates path_a path_a\n\n...\ncollected 2 items\n...\n```\n\n----------------------------------------\n\nTITLE: Displaying Pytest Command-Line Help\nDESCRIPTION: This command displays all available command-line flags and options for pytest. It is a useful tool for discovering and understanding the various ways to configure and control pytest's behavior.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_59\n\nLANGUAGE: text\nCODE:\n```\n$ pytest --help\n```\n\n----------------------------------------\n\nTITLE: XFail with reason\nDESCRIPTION: Shows how to provide a reason for an expected failure using the `reason` parameter in `pytest.mark.xfail`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.xfail(reason=\"known parser issue\")\ndef test_function(): ...\n```\n\n----------------------------------------\n\nTITLE: Defining session-scoped fixture\nDESCRIPTION: This code shows how to define a session-scoped fixture. Fixtures with session scope are created only once per test session and are shared across all tests that request them. The returned fixture value is shared for all tests requesting it.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture(scope=\"session\")\ndef smtp_connection():\n    # the returned fixture value will be shared for\n    # all tests requesting it\n    ...\n```\n\n----------------------------------------\n\nTITLE: Customizing Python File Discovery (Multiline) in Pytest\nDESCRIPTION: This snippet shows an alternative way to define the `python_files` configuration option in `pytest.ini`, using multiple lines for better readability when specifying several patterns. Each pattern is placed on a separate line under the `python_files` setting. This achieves the same result as the single-line example.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_46\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\npython_files =\n    test_*.py\n    check_*.py\n    example_*.py\n```\n\n----------------------------------------\n\nTITLE: Set Comparison Assertion Example\nDESCRIPTION: This code demonstrates how pytest provides context-sensitive information for failed set comparisons. It defines a test function `test_set_comparison` that asserts that two sets, `set1` and `set2`, are equal.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# content of test_assert2.py\ndef test_set_comparison():\n    set1 = set(\"1308\")\n    set2 = set(\"8035\")\n    assert set1 == set2\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command upgrades pytest to the latest version available on PyPI using pip. It ensures that any existing pytest installation is replaced with the new version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.1.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Pytest Empty Parameter Set Mark Configuration\nDESCRIPTION: Shows how to configure the action pytest should take when encountering empty parameter sets in parameterization. Options include `skip`, `xfail`, and `fail_at_collect`. This is done via the `empty_parameter_set_mark` setting in the `pytest.ini` file.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\n# content of pytest.ini\n[pytest]\nempty_parameter_set_mark = xfail\n```\n\n----------------------------------------\n\nTITLE: Setting usefixtures in pytest.ini\nDESCRIPTION: This shows how to configure pytest to automatically use the specified fixtures for all tests in the project by defining `usefixtures` in the `pytest.ini` file.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_45\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nusefixtures = cleandir\n```\n\n----------------------------------------\n\nTITLE: raises/warns Context Manager\nDESCRIPTION: Shows how to replace the deprecated string argument form of `pytest.raises` and `pytest.warns` with the context manager form, using `exec` when necessary for syntax errors.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\npytest.raises(ZeroDivisionError, \"1 / 0\")\npytest.raises(SyntaxError, \"a $ b\")\n\npytest.warns(DeprecationWarning, \"my_function()\")\npytest.warns(SyntaxWarning, \"assert(1, 2)\")\n```\n\nLANGUAGE: python\nCODE:\n```\nwith pytest.raises(ZeroDivisionError):\n    1 / 0\nwith pytest.raises(SyntaxError):\n    exec(\"a $ b\")  # exec is required for invalid syntax\n\nwith pytest.warns(DeprecationWarning):\n    my_function()\nwith pytest.warns(SyntaxWarning):\n    exec(\"assert(1, 2)\")  # exec is used to avoid a top-level warning\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This snippet shows how to upgrade the pytest package using pip. It uses the `pip install --upgrade pytest` command.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.2.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest with pip\nDESCRIPTION: This snippet provides the command to upgrade pytest to the latest version using pip. It uses the `--upgrade` flag to ensure the existing version is replaced.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.6.5.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Disabling Capture Temporarily (Python)\nDESCRIPTION: This Python code shows how to temporarily disable output capturing within a test function using the capsys.disabled() context manager.  Output within the \"with\" block will be printed directly to sys.stdout.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-stdout-stderr.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef test_disabling_capturing(capsys):\n    print(\"this output is captured\")\n    with capsys.disabled():\n        print(\"output not captured, going directly to sys.stdout\")\n    print(\"this output is also captured\")\n```\n\n----------------------------------------\n\nTITLE: pytest output for email tests\nDESCRIPTION: The pytest command and result indicates that the test passed successfully. This output confirms the fixtures setup and teardown processes are correctly configured.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_16\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -q test_emaillib.py\n.                                                                    [100%]\n1 passed in 0.12s\n```\n\n----------------------------------------\n\nTITLE: Marking Test Functions with Custom Metadata - Python\nDESCRIPTION: This snippet shows how to mark test functions with custom metadata using ``pytest.mark``. This allows grouping and filtering tests based on characteristics like 'webtest' or device-specific information like 'serial'.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# content of test_server.py\n\nimport pytest\n\n\n@pytest.mark.webtest\ndef test_send_http():\n    pass  # perform some webtest test for your app\n\n\n@pytest.mark.device(serial=\"123\")\ndef test_something_quick():\n    pass\n\n\n@pytest.mark.device(serial=\"abc\")\ndef test_another():\n    pass\n\n\nclass TestClass:\n    def test_method(self):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Disabling Plugin Autoloading using Environment Variables\nDESCRIPTION: This snippet demonstrates how to disable automatic plugin loading using the `PYTEST_DISABLE_PLUGIN_AUTOLOAD` environment variable.  When set to `1`, pytest will not automatically load plugins, requiring explicit specification via `-p` or `PYTEST_PLUGINS`. The `PYTEST_PLUGINS` variable is also demonstrated to specify specific plugins to load.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/plugins.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport PYTEST_DISABLE_PLUGIN_AUTOLOAD=1\nexport PYTEST_PLUGINS=NAME,NAME2\npytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This snippet provides the command to upgrade the pytest package to the latest version using pip.  It ensures that the user is using the most current version with bug fixes and improvements.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.6.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Pytest Autouse Fixture Order\nDESCRIPTION: This demonstrates how autouse fixtures affect the execution order. Autouse fixtures are executed before other fixtures within their scope. If fixture `a` is autouse and requests fixture `b`, then `b` effectively becomes an autouse fixture for tests that `a` applies to.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/fixtures.rst#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n# content of test_fixtures_order_autouse.py\nimport pytest\n\n@pytest.fixture(autouse=True)\ndef a(b):\n    print(\"\\nAutouse fixture a\")\n    return \"a\"\n\n@pytest.fixture()\ndef b(c):\n    print(\"\\nFixture b\")\n    return \"b\"\n\n@pytest.fixture()\ndef c():\n    print(\"\\nFixture c\")\n    return \"c\"\n\n\ndef test_order(a):\n    print(\"\\nTest function\")\n    assert True\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest using pip\nDESCRIPTION: This snippet demonstrates how to upgrade the pytest package to the latest version using the pip package installer. The command ensures that the existing pytest installation is updated to the newest available version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.6.8.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Matching exception messages with pytest.raises\nDESCRIPTION: This snippet shows how to use the `match` parameter of `pytest.raises` to check if the exception message matches a regular expression. It checks whether the raised `ValueError` contains \"123\" in its message using regular expression matching.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\ndef myfunc():\n    raise ValueError(\"Exception 123 raised\")\n\n\ndef test_match():\n    with pytest.raises(ValueError, match=r\".* 123 .*\" ):\n        myfunc()\n```\n\n----------------------------------------\n\nTITLE: Custom Test Collection with conftest.py (Python)\nDESCRIPTION: This conftest.py file defines a custom test collection process for YAML files. It includes a YamlFile class that inherits from pytest.File and a YamlItem class that inherits from pytest.Item, allowing pytest to recognize and execute YAML test specifications.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/nonpython.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nimport yaml\n\n\nclass YamlFile(pytest.File):\n    def collect(self):\n        raw = yaml.safe_load(open(self.fspath))\n        for name, spec in sorted(raw.items()):\n            yield YamlItem.from_parent(self, name=name, spec=spec)\n\n\nclass YamlItem(pytest.Item):\n    def __init__(self, *, spec, **kwargs):\n        super().__init__(**kwargs)\n        self.spec = spec\n\n    def runtest(self):\n        for name, value in sorted(self.spec.items()):\n            assert name == value\n\n    def repr_failure(self, excinfo, style=None):\n        if excinfo.errisinstance(AssertionError):\n            return f\"usecase execution failed\\n   spec failed: {self.spec}\\n   no further details known at this point.\"\n        return super().repr_failure(excinfo, style=style)\n\n    def reportinfo(self):\n        return self.fspath, 0, f\"usecase: {self.name}\"\n```\n\n----------------------------------------\n\nTITLE: Custom Directory Collector Plugin in conftest.py\nDESCRIPTION: This plugin customizes pytest collection by reading a `manifest.json` file within directories. It defines a `ManifestDirectory` class that inherits from `pytest.Directory` and overrides the `collect` method to include only files listed in the manifest. The `pytest_collect_directory` hook instantiates this custom collector when a `manifest.json` file is present.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/customdirectory.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport pytest\nfrom pathlib import Path\n\n\nclass ManifestDirectory(pytest.Directory):\n    def collect(self):\n        manifest_path = Path(self.fspath) / \"manifest.json\"\n        with open(manifest_path) as f:\n            manifest = json.load(f)\n\n        for filename in manifest[\"files\"]:\n            fspath = self.fspath.join(filename)\n            if fspath.ext == \".py\":\n                yield pytest.Module.from_parent(self, name=filename, fspath=fspath)\n            else:\n                yield pytest.File.from_parent(self, name=filename, fspath=fspath)\n\n\n\ndef pytest_collect_directory(path, parent):\n    manifest_path = Path(path) / \"manifest.json\"\n    if manifest_path.exists():\n        return ManifestDirectory.from_parent(parent, path=path)\n```\n\n----------------------------------------\n\nTITLE: pytest_markeval_namespace Hook Example Python\nDESCRIPTION: Illustrates how to use the `pytest_markeval_namespace` hook to add custom variables to the evaluation context of skipif/xfail/xpass markers in pytest. This allows for more dynamic control over test execution based on custom conditions.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_markeval_namespace():\n    return {\"color\": \"red\"}\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using pip, the Python package installer. It ensures that the existing version of pytest is replaced with the new one.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.6.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Directory Manifest File\nDESCRIPTION: This JSON file (`manifest.json`) specifies the files to be collected by pytest within its directory. The `files` key contains a list of filenames that should be included during the collection process.  Files not listed in this manifest will be excluded.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/customdirectory.rst#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"files\": [\n        \"test_first.py\",\n        \"test_second.py\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fixture as Factory (Python)\nDESCRIPTION: This example shows the \"factory as fixture\" pattern, where a fixture returns a function (a factory) instead of data directly. This allows the test to generate multiple instances of the fixture's data with potentially different parameters, useful when the fixture result is needed multiple times in a single test.  The first example shows a simple factory, and the second shows a factory that also manages resources.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef make_customer_record():\n    def _make_customer_record(name):\n        return {\"name\": name, \"orders\": []}\n\n    return _make_customer_record\n\n\n\ndef test_customer_records(make_customer_record):\n    customer_1 = make_customer_record(\"Lisa\")\n    customer_2 = make_customer_record(\"Mike\")\n    customer_3 = make_customer_record(\"Meredith\")\n```\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef make_customer_record():\n    created_records = []\n\n    def _make_customer_record(name):\n        record = models.Customer(name=name, orders=[])\n        created_records.append(record)\n        return record\n\n    yield _make_customer_record\n\n    for record in created_records:\n        record.destroy()\n\n\ndef test_customer_records(make_customer_record):\n    customer_1 = make_customer_record(\"Lisa\")\n    customer_2 = make_customer_record(\"Mike\")\n    customer_3 = make_customer_record(\"Meredith\")\n```\n\n----------------------------------------\n\nTITLE: pytest cleanup Usage and options\nDESCRIPTION: This demonstrates how to use py.cleanup to remove temporary files, build directories, and empty directories. The example showcases various options for specifying extensions, removing standard directories, and performing dry runs.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_76\n\nLANGUAGE: bash\nCODE:\n```\npy.cleanup     # remove \"*.pyc\" and \"*$py.class\" (jython) files\npy.cleanup -e .swp -e .cache # also remove files with these extensions\npy.cleanup -s  # remove \"build\" and \"dist\" directory next to setup.py files\npy.cleanup -d  # also remove empty directories\npy.cleanup -a  # synonym for \"-s -d -e 'pip-log.txt'\"\npy.cleanup -n  # dry run, only show what would be removed\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using the pip package manager.  It ensures that the newest version is installed, replacing any older versions currently present. The `--upgrade` flag is crucial for updating to the latest release.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.8.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Marking Modules with pytestmark (Python)\nDESCRIPTION: This snippet shows how to apply markers at the module level using the `pytestmark` global variable. It demonstrates how to apply single and multiple markers to all tests in the module.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\npytestmark = pytest.mark.webtest\n```\n\nLANGUAGE: python\nCODE:\n```\npytestmark = [pytest.mark.webtest, pytest.mark.slowtest]\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This snippet demonstrates how to upgrade the pytest package to the latest version using pip, the Python package installer. It ensures that the user has the latest bug fixes and improvements.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.0.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Imperatively mark tests as expected to fail in pytest\nDESCRIPTION: This snippet shows how to use the py.test.xfail(reason) helper to imperatively mark a test as expected to fail.  This is useful for parametrized tests where certain configurations are expected-to-fail.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_73\n\nLANGUAGE: python\nCODE:\n```\npy.test.xfail(reason)\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This code snippet demonstrates how to upgrade the pytest package using pip, the Python package installer. It ensures that the latest version is installed from PyPI.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.2.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Defining a session-scoped fixture using @pytest.fixture\nDESCRIPTION: This code snippet demonstrates how to define a session-scoped fixture using the `@pytest.fixture` decorator in pytest. This is the recommended approach for managing resources with a specific scope, such as session, module, or function.  It simplifies resource creation and destruction management, replacing the older `request.cached_setup()` approach.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/funcarg_compare.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    @pytest.fixture(scope=\"session\")\n    def db(request):\n        # factory will only be invoked once per session -\n        db = DataBase()\n        request.addfinalizer(db.destroy)  # destroy when session is finished\n        return db\n```\n\n----------------------------------------\n\nTITLE: Unittest Integration with Callme Method (Python)\nDESCRIPTION: This code defines a unittest test class, `SomeTest`, with a `callme` classmethod and a test method. Like the pytest test classes, the `callme` method is designed to be called by the session fixture. This demonstrates how to integrate unittest test classes with the pytest session fixture approach.\n\nDependencies: unittest\nInput: None\nOutput: None. Prints to stdout when 'callme' is called.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/special.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport unittest\n\n\nclass SomeTest(unittest.TestCase):\n    @classmethod\n    def callme(self):\n        print(\"SomeTest callme called\")\n\n    def test_unit1(self):\n        print(\"test_unit1 method called\")\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command upgrades the installed version of pytest using pip, the Python package installer. It ensures the latest bug fixes and improvements are applied.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.6.6.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Pytest native setup_method/teardown_method\nDESCRIPTION: This code snippet illustrates the correct way to define setup and teardown methods in pytest using `setup_method` and `teardown_method`. These methods are natively supported by pytest.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass Test:\n    def setup_method(self):\n        self.resource = make_resource()\n\n    def teardown_method(self):\n        self.resource.close()\n\n    def test_foo(self): ...\n\n    def test_bar(self): ...\n```\n\n----------------------------------------\n\nTITLE: Stopping after failures in Pytest (Bash)\nDESCRIPTION: These commands demonstrate how to stop the pytest test session after the first failure or after a specified number of failures.  `-x` stops after the first failure, while `--maxfail=N` stops after N failures.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/failures.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest -x           # stop after first failure\npytest --maxfail=2  # stop after two failures\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest using pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using pip. It assumes that pip is installed and configured correctly. This will install the newest version of pytest available on PyPI.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.0.4.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Capturing and Inspecting Warnings with pytest.warns (Python)\nDESCRIPTION: This code shows how to capture warnings raised within a `pytest.warns` context and access information about the warnings, such as the message and type. The code checks the length of the captured warnings list and accesses individual warning messages.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nwith pytest.warns(RuntimeWarning) as record:\n    warnings.warn(\"another warning\", RuntimeWarning)\n\n# check that only one warning was raised\nassert len(record) == 1\n# check that the message matches\nassert record[0].message.args[0] == \"another warning\"\n```\n\n----------------------------------------\n\nTITLE: Pytest Fixture Order by Scope\nDESCRIPTION: This example demonstrates how pytest executes fixtures based on their scope. Higher-scoped fixtures (e.g., session) are executed before lower-scoped fixtures (e.g., function or class). The test will pass because the larger scoped fixtures are executing first.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/fixtures.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n# content of test_fixtures_order_scope.py\nimport pytest\n\n@pytest.fixture(scope=\"session\")\ndef session_fixture():\n    print(\"\\nSession fixture\")\n\n@pytest.fixture(scope=\"module\")\ndef module_fixture():\n    print(\"\\nModule fixture\")\n\n@pytest.fixture(scope=\"class\")\ndef class_fixture():\n    print(\"\\nClass fixture\")\n\n@pytest.fixture(scope=\"function\")\ndef function_fixture():\n    print(\"\\nFunction fixture\")\n\nclass TestOrder:\n    def test_order(self, function_fixture, class_fixture, module_fixture, session_fixture):\n        print(\"\\nTest function\")\n        assert True\n```\n\n----------------------------------------\n\nTITLE: Pytest Log Auto Indent Configuration\nDESCRIPTION: Configures automatic indentation of multiline log messages using the `log_auto_indent` option. It can be set to `True`, `False`, or a positive integer for the number of spaces to indent.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_29\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nlog_auto_indent = False\n```\n\n----------------------------------------\n\nTITLE: Running Class-Based Tests with Pytest\nDESCRIPTION: This command runs the tests defined within the `TestClass` in `test_class.py`. Pytest discovers and executes the tests within the class. The output shows the results of each test, including any failures and associated error messages.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#_snippet_7\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -q test_class.py\n.F                                                                   [100%]\n================================= FAILURES =================================\n____________________________ TestClass.test_two ____________________________\n\nself = <test_class.TestClass object at 0xdeadbeef0001>\n\n    def test_two(self):\n        x = \"hello\"\n>       assert hasattr(x, \"check\")\nE       AssertionError: assert False\nE        +  where False = hasattr('hello', 'check')\n\ntest_class.py:8: AssertionError\n========================= short test summary info ==========================\nFAILED test_class.py::TestClass::test_two - AssertionError: assert False\n1 failed, 1 passed in 0.12s\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest with pip\nDESCRIPTION: This command upgrades the pytest package to the latest version (3.9.3 in this case) using the pip package installer. It ensures that any existing pytest installation is updated to the newest release.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.9.3.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest via pip\nDESCRIPTION: This snippet shows how to upgrade pytest to the latest version using pip, the Python package installer. This ensures you have the most recent features and bug fixes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.6.0.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: pytest output with captured logs\nDESCRIPTION: This snippet shows the standard output of pytest with captured logs, stdout and stderr for a failed test. It displays the module, line number, log level, and message for each captured log message.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#_snippet_1\n\nLANGUAGE: pytest\nCODE:\n```\n----------------------- Captured stdlog call ----------------------\ntest_reporting.py    26 WARNING  text going to logger\n----------------------- Captured stdout call ----------------------\ntext going to stdout\n----------------------- Captured stderr call ----------------------\ntext going to stderr\n==================== 2 failed in 0.02 seconds =====================\n```\n\n----------------------------------------\n\nTITLE: Unconditionally skipping all tests in a module\nDESCRIPTION: Shows how to unconditionally skip all tests in a module using `pytestmark`. This is useful when all tests are still under development.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npytestmark = pytest.mark.skip(\"all tests still WIP\")\n```\n\n----------------------------------------\n\nTITLE: Installing Pytest with pip\nDESCRIPTION: This command is used to install or upgrade Pytest using the pip package installer. The -U flag ensures that Pytest is upgraded to the latest version if it is already installed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.0.0.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests Based on Module Version in pytest\nDESCRIPTION: This snippet demonstrates how to skip a test function based on the version of a module using the `@pytest.mark.skipif` decorator. The expression `mymodule.__version__[0] == \"1\"` checks if the module's version string starts with '1', and skips the test if it does. Using a string allows for reporting why the test was skipped.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.0.2.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport pytest\nimport mymodule\n@pytest.mark.skipif(\"mymodule.__version__[0] == \\\"1\\\"\")\ndef test_function():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Selecting Tests by Class Node ID - Pytest Command\nDESCRIPTION: Shows how to select all tests within a class using the class's node ID. This will run all test methods defined in the specified class.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_5\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -v test_server.py::TestClass\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest with pip\nDESCRIPTION: This command upgrades the pytest package to the latest version (3.5.1 in this case) using pip, the Python package installer. It ensures that any existing pytest installation is replaced with the new version. The `--upgrade` flag is crucial for updating to the latest version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.5.1.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Configure junit duration report\nDESCRIPTION: This code snippet shows how to configure the junit duration report to only include the test call durations, excluding the setup and teardown times. This is done by adding the `junit_duration_report = call` line to the `pytest.ini` file.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_67\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\njunit_duration_report = call\n```\n\n----------------------------------------\n\nTITLE: Using pytest fixtures in unittest.TestCase (test_unittest_db.py)\nDESCRIPTION: This Python code shows how to use a pytest fixture ('db_class') within a unittest.TestCase class. The @pytest.mark.usefixtures decorator ensures that the 'db_class' fixture is called once per class, making the 'db' attribute available to the test methods.  The test methods deliberately fail to demonstrate the shared fixture instance.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/unittest.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# content of test_unittest_db.py\n\nimport unittest\n\nimport pytest\n\n\n@pytest.mark.usefixtures(\"db_class\")\nclass MyTest(unittest.TestCase):\n    def test_method1(self):\n        assert hasattr(self, \"db\")\n        assert 0, self.db  # fail for demo purposes\n\n    def test_method2(self):\n        assert 0, self.db  # fail for demo purposes\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest with pip\nDESCRIPTION: This command upgrades the installed version of pytest to the latest available version (5.3.4 in this case) using the pip package manager.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.3.4.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Running Pytest with Doctest Modules\nDESCRIPTION: This command tells pytest to collect doctests from docstrings in Python modules. It will execute the doctests found within the docstrings and report the test results.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest --doctest-modules\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncollected 2 items\n\nmymodule.py .                                                        [ 50%]\ntest_example.txt .                                                   [100%]\n\n============================ 2 passed in 0.12s =============================\n```\n\n----------------------------------------\n\nTITLE: Invoking Pytest from Python interpreter\nDESCRIPTION: This command shows how to invoke Pytest directly from the Python interpreter. It uses the -m flag to run the pytest module as a script.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.0.0.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npython -m pytest\n```\n\n----------------------------------------\n\nTITLE: Monkeypatching Dictionaries (Delete Items) - Python\nDESCRIPTION: This test function uses `monkeypatch.delitem` to remove the `user` key from the `DEFAULT_CONFIG` dictionary.  `raising=False` prevents an exception if the key does not exist. It then asserts that calling `create_connection_string` raises a `KeyError` because the `user` key is missing.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n# app.py with the connection string function\nimport app\n\n\ndef test_missing_user(monkeypatch):\n    # patch the DEFAULT_CONFIG t be missing the 'user' key\n    monkeypatch.delitem(app.DEFAULT_CONFIG, \"user\", raising=False)\n\n    # Key error expected because a config is not passed, and the\n    # default is now missing the 'user' entry.\n    with pytest.raises(KeyError):\n        _ = app.create_connection_string()\n```\n\n----------------------------------------\n\nTITLE: Marking a test as expected to fail\nDESCRIPTION: Illustrates how to mark a test function as expected to fail using the `pytest.mark.xfail` decorator.  The test will still run, but failures will be reported as expected failures (XFAIL).\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.xfail\ndef test_function(): ...\n```\n\n----------------------------------------\n\nTITLE: JUnit XML output for Jenkins - Python\nDESCRIPTION: Improves ``--junitxml`` to emit XML compatible with Jenkins xUnit. ``junit_family`` INI option accepts ``legacy|xunit1``, which produces old style output, and ``xunit2`` that conforms more strictly to the xunit-plugin schema. Enables better integration with Jenkins CI for test result reporting.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_64\n\n\n\n----------------------------------------\n\nTITLE: Passing Callables to Custom Markers (Python)\nDESCRIPTION: This snippet demonstrates how to pass a callable as an argument to a custom marker using `pytest.mark.MARKER_NAME.with_args`.  This is necessary when the single positional argument to the marker is a callable itself.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\n\ndef pytest_runtest_setup(item):\n    for marker in item.iter_markers(name=\"my_marker\"):\n        print(marker)\n        sys.stdout.flush()\n```\n\n----------------------------------------\n\nTITLE: Displaying Available Fixtures - Bash\nDESCRIPTION: This command displays the available built-in function arguments (fixtures) that can be used in tests. It provides information about the available fixtures within the pytest environment.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npytest --fixtures\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest with pip\nDESCRIPTION: This command demonstrates how to upgrade pytest to the latest version using pip, the Python package installer. It ensures that the user receives the bug fixes and improvements included in the new release.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.2.4.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Enforcing Strict Xfail Behavior in Pytest\nDESCRIPTION: When set to `True`, this configuration causes tests marked with `@pytest.mark.xfail` that unexpectedly succeed to fail the test suite. This helps ensure that tests marked as expected to fail are indeed failing as intended.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_58\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nxfail_strict = True\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest with pip\nDESCRIPTION: This snippet provides the command to upgrade pytest to the latest version using pip, the Python package installer.  It ensures users are running the most recent version of the testing framework.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.2.0.rst#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Running GitHub Workflow (Major Release) - GitHub CLI\nDESCRIPTION: This snippet uses the GitHub CLI (`gh`) to trigger the `prepare-release-pr.yml` workflow with inputs tailored for a major release. It specifies the branch, major release flag (set to 'yes'), and prerelease value (empty string).\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/RELEASING.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngh workflow run prepare-release-pr.yml -f branch=8.0.x -f major=yes -f prerelease=\n```\n\n----------------------------------------\n\nTITLE: Displaying Pytest Version - Bash\nDESCRIPTION: This command shows the version of pytest installed and where it was imported from. It is useful for verifying the pytest installation.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npytest --version\n```\n\n----------------------------------------\n\nTITLE: pytest.hookspec Usage\nDESCRIPTION: Highlights the recommended usage of pytest.hookspec for configuring hook specifications, replacing older methods that involved attributes or marks. It suggests using this function for defining and registering hook specifications within pytest.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npytest.hookspec\n```\n\n----------------------------------------\n\nTITLE: Installing or Upgrading pytest with pip\nDESCRIPTION: Provides instructions for installing or upgrading pytest using the `pip` package manager. The `-U` flag ensures that pytest and its dependencies are upgraded to the latest versions.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.3.3.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Typed Parameterized Test\nDESCRIPTION: This code shows how to use `@pytest.mark.parametrize` with type hints to define a parameterized test. The `input_value` and `expected_output` parameters are explicitly typed as integers.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/types.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.parametrize(\"input_value, expected_output\", [(1, 2), (5, 6), (10, 11)])\ndef test_increment(input_value: int, expected_output: int) -> None:\n    assert input_value + 1 == expected_output\n```\n\n----------------------------------------\n\nTITLE: Integrating with Testscenarios\nDESCRIPTION: This snippet demonstrates how to integrate with `testscenarios`, an add-on for the unittest framework. It uses `pytest_generate_tests` to parametrize tests based on scenarios defined in a class.  It utilizes Metafunc.parametrize to achieve the desired parametrization.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_generate_tests(metafunc):\n    idlist = []\n    argvalues = []\n    for scenario in metafunc.cls.scenarios:\n        idlist.append(scenario[0])\n        items = scenario[1].items()\n        argnames = [x[0] for x in items]\n        argvalues.append([x[1] for x in items])\n    metafunc.parametrize(argnames, argvalues, ids=idlist, scope=\"class\")\n\n\nscenario1 = (\"basic\", {\"attribute\": \"value\"})\nscenario2 = (\"advanced\", {\"attribute\": \"value2\"})\n\n\nclass TestSampleWithScenarios:\n    scenarios = [scenario1, scenario2]\n\n    def test_demo1(self, attribute):\n        assert isinstance(attribute, str)\n\n    def test_demo2(self, attribute):\n        assert isinstance(attribute, str)\n```\n\n----------------------------------------\n\nTITLE: Running Tests from Packages - Bash\nDESCRIPTION: This command imports a package and uses its filesystem location to discover and run tests. It utilizes the `--pyargs` flag followed by the package name.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npytest --pyargs pkg.testing\n```\n\n----------------------------------------\n\nTITLE: Selecting Tests Using Markers - Pytest Command\nDESCRIPTION: Demonstrates how to select tests using the ``-m`` option in pytest, allowing you to run tests marked with specific markers (e.g., ``webtest``) or exclude tests with markers by using the ``not`` operator.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_1\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -v -m webtest\n```\n\n----------------------------------------\n\nTITLE: Pytest Collect-Only Output\nDESCRIPTION: This snippet displays the output of `pytest --collect-only`, showcasing how pytest generates test IDs for parametrized fixtures. It includes custom IDs defined in the previous example, as well as automatically generated IDs for other fixtures. The output shows collected test cases along with their ids\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_35\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest --collect-only\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncollected 12 items\n\n<Dir fixtures.rst-227>\n  <Module test_anothersmtp.py>\n    <Function test_showhelo[smtp.gmail.com]>\n    <Function test_showhelo[mail.python.org]>\n  <Module test_emaillib.py>\n    <Function test_email_received>\n  <Module test_finalizers.py>\n    <Function test_bar>\n  <Module test_ids.py>\n    <Function test_a[spam]>\n    <Function test_a[ham]>\n    <Function test_b[eggs]>\n    <Function test_b[1]>\n  <Module test_module.py>\n    <Function test_ehlo[smtp.gmail.com]>\n    <Function test_noop[smtp.gmail.com]>\n    <Function test_ehlo[mail.python.org]>\n    <Function test_noop[mail.python.org]>\n\n======================= 12 tests collected in 0.12s ========================\n```\n\n----------------------------------------\n\nTITLE: Project Layout: Tests Outside Application Code\nDESCRIPTION: This demonstrates a common project layout where tests are placed in a separate directory outside the application code. This layout helps to isolate tests from the application logic. It allows running tests against installed versions or local copies using editable installs.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/goodpractices.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\npyproject.toml\nsrc/\n    mypkg/\n        __init__.py\n        app.py\n        view.py\ntests/\n    test_app.py\n    test_view.py\n    ...\n```\n\n----------------------------------------\n\nTITLE: Hook Wrapper Implementation in Python\nDESCRIPTION: This code snippet defines a hook wrapper using `@pytest.hookimpl(wrapper=True)`. It shows how to execute code before and after the wrapped hook using `yield`. The wrapper can modify the result or handle exceptions raised by the wrapped hook.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_hook_functions.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\n@pytest.hookimpl(wrapper=True)\ndef pytest_pyfunc_call(pyfuncitem):\n    do_something_before_next_hook_executes()\n\n    # If the outcome is an exception, will raise the exception.\n    res = yield\n\n    new_res = post_process_result(res)\n\n    # Override the return value to the plugin system.\n    return new_res\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This code snippet shows the command to upgrade pytest to the latest version using pip. It ensures that the user has the newest version of the library with all the bug fixes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.1.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Globally Activating Argcomplete for Python Applications\nDESCRIPTION: This command globally activates argcomplete for all Python applications that support it. It needs to be run with sudo to modify system-wide configurations.  This allows tab completion to work across different python scripts.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/bash-completion.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo activate-global-python-argcomplete\n```\n\n----------------------------------------\n\nTITLE: Running Tests with tox\nDESCRIPTION: This command uses tox to run tests in specific environments (linting and py39). This ensures code quality and compatibility with different Python versions.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntox -e linting,py39\n```\n\n----------------------------------------\n\nTITLE: Installing or Upgrading pytest with easy_install\nDESCRIPTION: Provides instructions for installing or upgrading pytest using the `easy_install` tool. The `-U` flag ensures that pytest and its dependencies are upgraded to the latest versions.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.3.3.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\neasy_install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Markers in pyproject.toml\nDESCRIPTION: This snippet demonstrates how to register custom markers in a pyproject.toml file. The markers are defined as a list of strings under tool.pytest.ini_options.markers.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/mark.rst#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.pytest.ini_options]\nmarkers = [\n    \"slow: marks tests as slow (deselect with '-m \\\"not slow\\\"\")\",\n    \"serial\",\n]\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using pip. It ensures that the installed pytest is updated to the newest release, as mentioned in the announcement.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.0.0.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Asserting Warning Messages with pytest.warns (Pycon)\nDESCRIPTION: This set of snippets shows how to use the `match` keyword argument of `pytest.warns` to assert that a warning's message matches a given text or regular expression. It also demonstrates how to escape special regex characters when matching literal strings.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_12\n\nLANGUAGE: pycon\nCODE:\n```\n>>> with warns(UserWarning, match=\"must be 0 or None\"):\n...     warnings.warn(\"value must be 0 or None\", UserWarning)\n... \n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> with warns(UserWarning, match=r\"must be \\d+$\"):\n...     warnings.warn(\"value must be 42\", UserWarning)\n... \n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> with warns(UserWarning, match=r\"must be \\d+$\"):\n...     warnings.warn(\"this is not here\", UserWarning)\n... \nTraceback (most recent call last):\n  ...\nFailed: DID NOT WARN. No warnings of type ...UserWarning... were emitted...\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> with warns(UserWarning, match=re.escape(\"issue with foo() func\")):\n...     warnings.warn(\"issue with foo() func\")\n... \n```\n\n----------------------------------------\n\nTITLE: Demonstrate fixed pytest.approx equality check\nDESCRIPTION: This code snippet demonstrates the corrected behavior of pytest.approx where it now correctly returns True when comparing a list of numpy.bool_ values to a list of Python bool values. This fix restores the expected behavior.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/changelog/13047.bugfix.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> [np.True_, np.True_] == pytest.approx([True, True])\nTrue\n```\n\n----------------------------------------\n\nTITLE: Pytest Failure Assertion Example\nDESCRIPTION: This snippet demonstrates a failing assertion in a pytest test. It shows the expected vs actual values, providing context for debugging.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n=================================== FAILURES ===================================\n_____________________________________ test _____________________________________\n\n    def test():\n>       assert Help().fun() == 2\nE       assert 1 == 2\nE        +  where 1 = <bound method Help.fun of <example.Help instance at 0x256a830>>()\nE        +    where <bound method Help.fun of <example.Help instance at 0x256a830>> = <example.Help instance at 0x256a830>.fun\nE        +      where <example.Help instance at 0x256a830> = Help()\n\nexample.py:7: AssertionError\n=========================== 1 failed in 0.03 seconds ===========================\n```\n\n----------------------------------------\n\nTITLE: pytest.hookimpl Usage\nDESCRIPTION: Highlights the recommended usage of pytest.hookimpl for configuring hook implementations, replacing older methods that involved attributes or marks. It suggests using this function for defining and registering hook implementations within pytest.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npytest.hookimpl\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command shows how to upgrade to the latest version of pytest using pip, the Python package installer.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.4.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This snippet provides the command to upgrade pytest to the latest version using pip, the Python package installer.  It ensures you are using the most recent version of pytest.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.3.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Example Platform-Specific Tests\nDESCRIPTION: This code defines a test module `test_plat.py` with tests marked for specific platforms (darwin, linux, win32) and a test that runs on all platforms. These markers are then used in conjunction with the `conftest.py` plugin (defined above) to determine which tests should be executed on a particular platform.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# content of test_plat.py\n\nimport pytest\n\n\n@pytest.mark.darwin\ndef test_if_apple_is_evil():\n    pass\n\n\n@pytest.mark.linux\ndef test_if_linux_works():\n    pass\n\n\n@pytest.mark.win32\ndef test_if_win32_crashes():\n    pass\n\n\ndef test_runs_everywhere():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Help Text Newline Preservation Python\nDESCRIPTION: This snippet mentions that explicit newlines in help texts of command-line options are now preserved, allowing plugins to have better control over the help displayed to users.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_48\n\n\n\n----------------------------------------\n\nTITLE: Skipping Single Checks Inside a Doctest\nDESCRIPTION: This code demonstrates how to skip a single check inside a doctest using the standard `doctest.SKIP` directive. The first check (calling `random.random()`) will be skipped, but the second check (1 + 1) will be executed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef test_random(y):\n    \"\"\"\n    >>> random.random()  # doctest: +SKIP\n    0.156231223\n\n    >>> 1 + 1\n    2\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Handling Simple Issue Lists in Jinja2\nDESCRIPTION: This snippet handles cases where only a simple list of issues needs to be displayed without detailed descriptions.  It sorts and joins the issues into a comma-separated string.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/changelog/_template.rst#_snippet_3\n\nLANGUAGE: Jinja2\nCODE:\n```\n{% else %}\n- {{ sections[section][category]['']|sort|join(', ') }}\n\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Failing Test Demo for CI\nDESCRIPTION: This code snippet defines a simple failing test case using pytest. It is designed to demonstrate the behavior of pytest in a CI environment, specifically how it handles the short test summary info. The `pytest.fail` call deliberately causes the test to fail, producing a long error message that is truncated locally but displayed in full in CI.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/ci.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\ndef test_db_initialized():\n    pytest.fail(\n        \"deliberately failing for demo purpose, Lorem ipsum dolor sit amet, \"\n        \"consectetur adipiscing elit. Cras facilisis, massa in suscipit \"\n        \"dignissim, mauris lacus molestie nisi, quis varius metus nulla ut ipsum.\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command upgrades pytest to the latest version using the pip package installer.  It ensures that the user is running the most recent version of the pytest library.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-6.2.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Writing a Simple Test in Python\nDESCRIPTION: This Python code defines a simple function `func` that adds 1 to its input and a test function `test_answer` that asserts if `func(3)` equals 5. This serves as a basic example of a test case in pytest.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# content of test_sample.py\ndef func(x):\n    return x + 1\n\n\ndef test_answer():\n    assert func(3) == 5\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple Tests by Node ID - Pytest Command\nDESCRIPTION: Demonstrates how to select multiple tests by specifying their node IDs. This allows running a combination of individual tests and entire classes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_6\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -v test_server.py::TestClass test_server.py::test_send_http\n```\n\n----------------------------------------\n\nTITLE: Pytest Test Classes with Callme Method (Python)\nDESCRIPTION: This code defines two pytest test classes, `TestHello` and `TestOther`, each with a `callme` classmethod and test methods. The `callme` methods are intended to be called by the session fixture demonstrated in the first snippet, allowing for pre-test setup or actions.\n\nDependencies: pytest\nInput: None\nOutput: None. Prints to stdout when 'callme' is called.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/special.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass TestHello:\n    @classmethod\n    def callme(cls):\n        print(\"callme called!\")\n\n    def test_method1(self):\n        print(\"test_method1 called\")\n\n    def test_method2(self):\n        print(\"test_method2 called\")\n\n\nclass TestOther:\n    @classmethod\n    def callme(cls):\n        print(\"callme other called\")\n\n    def test_other(self):\n        print(\"test other\")\n```\n\n----------------------------------------\n\nTITLE: Accessing pytest Version Tuple\nDESCRIPTION: Shows how to access the current pytest version as a tuple. For pre-releases, the last component will be a string with the prerelease version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import pytest\n>>> pytest.version_tuple\n(7, 0, 0)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> import pytest\n>>> pytest.version_tuple\n(7, 0, '0rc1')\n```\n\n----------------------------------------\n\nTITLE: Installing or Upgrading pytest using easy_install\nDESCRIPTION: This command shows how to install or upgrade pytest using the easy_install tool. The `-U` flag updates pytest to the latest version if it's already installed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.2.0.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neasy_install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This code snippet shows how to upgrade pytest to the latest version using the pip package installer. This is a standard command-line instruction for updating Python packages.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.3.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest via pip\nDESCRIPTION: This snippet shows the command to upgrade pytest using pip. It uses the -U flag to upgrade to the latest version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.1.0.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: pytest test session example\nDESCRIPTION: Demonstrates the output of a pytest test session. This example includes the platform, pytest version, root directory, and config file, collected items, and test execution results. Requires a pytest project with passing tests and a `pytest.ini` file.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_plugins.rst#_snippet_14\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\nconfigfile: pytest.ini\ncollected 2 items\n\ntest_example.py ..                                                   [100%]\n\n============================ 2 passed in 0.12s =============================\n```\n\n----------------------------------------\n\nTITLE: Reading Arguments from File - Bash\nDESCRIPTION: This command instructs pytest to read command-line arguments from the specified file. The file contains one argument per line and is specified with the `@` prefix.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npytest @tests_to_run.txt\n```\n\n----------------------------------------\n\nTITLE: Registering Plugins with pytest_plugins (Tuple)\nDESCRIPTION: This snippet demonstrates how to register multiple pytest plugins by defining the `pytest_plugins` global variable as a tuple of strings in a test module or `conftest.py` file. This registers multiple plugins at once.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\npytest_plugins = (\"myapp.testsupport.tools\", \"myapp.testsupport.regression\")\n```\n\n----------------------------------------\n\nTITLE: Installing/Upgrading Pytest with easy_install\nDESCRIPTION: This snippet demonstrates how to install or upgrade pytest using the easy_install tool. The `-U` flag ensures that pytest is upgraded to the newest version if it's already installed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.1.2.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neasy_install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest via pip\nDESCRIPTION: This snippet shows the command used to upgrade pytest to the latest version (or the specified version if provided) using pip, the Python package installer.  It uses the -U flag to upgrade the package to the newest available version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.2.0.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Required_plugins Configuration Option Python\nDESCRIPTION: This snippet introduces the `required_plugins` configuration option, which allows specifying a list of required plugins (including version information) for pytest to run.  An error is raised if any required plugins are not found.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_42\n\n\n\n----------------------------------------\n\nTITLE: Capture Output logs in Failing Tests pytest\nDESCRIPTION: Captured logs that are output for each failing test are formatted using the ColoredLevelFormatter. Improves the readability and debugging experience by providing colored log output for failing tests.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_61\n\n\n\n----------------------------------------\n\nTITLE: Pytest Fixture Order by Dependencies\nDESCRIPTION: This example illustrates fixture execution order based on dependencies. When a fixture requests another, the requested fixture is executed first. Fixture `a` requests fixture `b`, so fixture `b` executes before `a`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/fixtures.rst#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# content of test_fixtures_order_dependencies.py\nimport pytest\n\n@pytest.fixture()\ndef a(b):\n    print(\"\\nFixture a\")\n    return \"a\"\n\n@pytest.fixture()\ndef b(c):\n    print(\"\\nFixture b\")\n    return \"b\"\n\n@pytest.fixture()\ndef c():\n    print(\"\\nFixture c\")\n    return \"c\"\n\n@pytest.fixture()\ndef d(e):\n    print(\"\\nFixture d\")\n    return \"d\"\n\n@pytest.fixture()\ndef e(f):\n    print(\"\\nFixture e\")\n    return \"e\"\n\n@pytest.fixture()\ndef f():\n    print(\"\\nFixture f\")\n    return \"f\"\n\n@pytest.fixture()\ndef g(c, f):\n    print(\"\\nFixture g\")\n    return \"g\"\n\n\n\ndef test_order(a, d, g):\n    print(\"\\nTest function\")\n    assert True\n```\n\n----------------------------------------\n\nTITLE: Selecting Tests with 'or' Using -k - Pytest Command\nDESCRIPTION: Shows how to select tests based on names using the ``-k`` option and the ``or`` operator, allowing selection of tests matching either of the specified substrings.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_9\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -k \"http or quick\" -v\n```\n\n----------------------------------------\n\nTITLE: Running unittest tests with pytest\nDESCRIPTION: This command runs unittest-style test suites using pytest.  It collects unittest.TestCase subclasses and their test methods from files named test_*.py or *_test.py.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/unittest.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest tests\n```\n\n----------------------------------------\n\nTITLE: Assert Approximation Example (Correct)\nDESCRIPTION: Demonstrates the correct way to use pytest.approx.  The actual value should be compared against the approximate expected value using the == operator.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nassert actual == pytest.approx(expected)\n```\n\n----------------------------------------\n\nTITLE: Excluding Tests by Name Using -k - Pytest Command\nDESCRIPTION: Demonstrates how to exclude tests based on their name using the ``-k`` option and the ``not`` operator.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_8\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -k \"not send_http\" -v\n```\n\n----------------------------------------\n\nTITLE: _pytest._code.source Changes Python\nDESCRIPTION: This snippet details changes to the internal `_pytest._code.source`, impacting plugin authors.  It outlines the removal of several arguments, methods, and functions within the module, including `deindent`, multiple argument support, `Source.isparseable()`, `Source.putaround()`, `Source.compile()`, and `_pytest._code.compile()`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_32\n\n\n\n----------------------------------------\n\nTITLE: pytest.raises with message Parameter\nDESCRIPTION: Illustrates the removal of the `message` parameter in `pytest.raises` and provides an alternative using `pytest.fail` to achieve the same result.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nwith pytest.raises(TimeoutError, message=\"Client got unexpected message\"):\n    wait_for(websocket.recv(), 0.5)\n```\n\nLANGUAGE: python\nCODE:\n```\nwith pytest.raises(TimeoutError):\n    wait_for(websocket.recv(), 0.5)\n    pytest.fail(\"Client got unexpected message\")\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This snippet provides the command to upgrade the pytest package to the latest version using pip. This command will fetch the newest version from PyPI and install it, replacing the existing version. It requires pip to be installed and configured correctly in the system.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.4.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command upgrades the pytest package to the latest version (8.2.2 in this case) using the pip package installer. It assumes that pip is already installed and configured in the user's environment. No specific dependencies are mentioned, but a working Python environment with pip is essential.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.2.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Using fixtures with plugin fixtures\nDESCRIPTION: This code shows how to use fixtures defined within a test file alongside fixtures provided by plugins ('a_fix'). The 'inner' fixture depends on 'mid', 'a_fix', and 'order'. It appends 'inner subpackage' to the order list, demonstrating how fixtures from different sources can be combined. The final assert verifies the expected execution order considering the autouse fixture and the plugin fixtures.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/fixtures.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n@pytest.fixture\ndef inner(order, mid, a_fix):\n    order.append(\"inner subpackage\")\n\ndef test_order(order, inner):\n    assert order == [\"b_fix\", \"mid subpackage\", \"a_fix\", \"inner subpackage\"]\n```\n\n----------------------------------------\n\nTITLE: Pytest Log CLI Configuration\nDESCRIPTION: Enables or disables log display during the test run, also known as live logging, using the `log_cli` option. The default is `False`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_30\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nlog_cli = True\n```\n\n----------------------------------------\n\nTITLE: Pyproject.toml Configuration Example TOML\nDESCRIPTION: This snippet demonstrates how to use `pyproject.toml` files for pytest configuration.  The configuration options are placed under the `[tool.pytest.ini_options]` table. The example shows how to set `minversion`, `addopts`, and `testpaths`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_35\n\nLANGUAGE: toml\nCODE:\n```\n# pyproject.toml\n[tool.pytest.ini_options]\nminversion = \"6.0\"\naddopts = \"-ra -q\"\ntestpaths = [\n    \"tests\",\n    \"integration\",\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Doctest Option Flags in pytest.ini\nDESCRIPTION: This `pytest.ini` configuration demonstrates setting doctest option flags. It enables `NORMALIZE_WHITESPACE` and `IGNORE_EXCEPTION_DETAIL` to make the doctest tests more robust.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\ndoctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL\n```\n\n----------------------------------------\n\nTITLE: Another Pytest run\nDESCRIPTION: This snippet shows the execution of a pytest test using the `-q` flag for quiet mode. It demonstrates that the test `test_emaillib.py` passed successfully.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_24\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -q test_emaillib.py\n.                                                                    [100%]\n1 passed in 0.12s\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This code snippet demonstrates how to upgrade the pytest package to the latest version using the pip package manager. It uses the `--upgrade` flag to ensure that any existing version of pytest is replaced with the new version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.2.5.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: pytest.raises Usage\nDESCRIPTION: This snippet documents the improvement of `pytest.raises`.  Passing an empty tuple previously resulted in a confusing error message. Now, it raises immediately with a more informative message.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\npytest.raises\n```\n\n----------------------------------------\n\nTITLE: Setting Assertion Message Truncation Limit in Pytest\nDESCRIPTION: This configuration value controls the maximum number of lines to truncate in assertion message contents. Setting the value to 0 disables the lines limit. This prevents large data comparisons from overloading the console output.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_54\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\ntruncation_limit_lines = 8\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Python Function for Testing\nDESCRIPTION: This snippet defines a simple Python function `inc(x)` which increments its input by one. It's a basic example to illustrate how to write testable code.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/index.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef inc(x):\n    return x + 1\n```\n\n----------------------------------------\n\nTITLE: Using a fixture in a test\nDESCRIPTION: This snippet shows how to use the 'order' fixture (defined in conftest.py) and another fixture 'top' in a test function. It asserts the expected state of the 'order' list after the fixtures have been used. `top` appends 'top' to the `order`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/fixtures.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n@pytest.fixture\ndef innermost(order):\n    order.append(\"innermost top\")\n\ndef test_order(order, top):\n    assert order == [\"innermost top\", \"top\"]\n```\n\n----------------------------------------\n\nTITLE: Defining a class-scoped pytest fixture (conftest.py)\nDESCRIPTION: This Python code defines a pytest fixture named 'db_class' with class scope. It creates a DummyDB class, instantiates it, and sets it as a class attribute 'db' on the test context, allowing access from unittest.TestCase methods. The fixture uses the 'request' object to access the test context.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/unittest.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# content of conftest.py\n\n# we define a fixture function below and it will be \"used\" by\n# referencing its name from tests\n\nimport pytest\n\n\n@pytest.fixture(scope=\"class\")\ndef db_class(request):\n    class DummyDB:\n        pass\n\n    # set a class attribute on the invoking test context\n    request.cls.db = DummyDB()\n```\n\n----------------------------------------\n\nTITLE: record_xml_property to record_property\nDESCRIPTION: Explains the renaming of the `record_xml_property` fixture to `record_property` and demonstrates the change.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ndef test_foo(record_xml_property): ...\n```\n\nLANGUAGE: python\nCODE:\n```\ndef test_foo(record_property): ...\n```\n\n----------------------------------------\n\nTITLE: Show pytest cache\nDESCRIPTION: Demonstrates using pytest --cache-show to show the content of the pytest cache, which includes lastfailed, nodeids, stepwise, and example/value.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/cache.rst#_snippet_8\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest --cache-show\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncachedir: /home/sweet/project/.pytest_cache\n--------------------------- cache values for '*' ---------------------------\ncache/lastfailed contains:\n  {'test_caching.py::test_function': True}\ncache/nodeids contains:\n  ['test_caching.py::test_function']\ncache/stepwise contains:\n  []\nexample/value contains:\n  42\n\n========================== no tests ran in 0.12s ===========================\n```\n\n----------------------------------------\n\nTITLE: Setup.py Dummy File\nDESCRIPTION: This snippet shows a dummy `setup.py` file that will raise an exception if imported. This is intended to test how pytest handles files that should be ignored during test collection, preventing them from being executed as part of the test discovery process.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# content of setup.py\n0 / 0  # will raise exception if imported\n```\n\n----------------------------------------\n\nTITLE: Pytest Traceback Example\nDESCRIPTION: This code block demonstrates a failure traceback produced by pytest, showcasing the improved code segment highlighting thanks to partial PEP 657 support. The traceback points to the exact lines of code where the error occurred, in this case, an AttributeError related to accessing a non-existent attribute 'x' on a 'NoneType' object.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/changelog/10224.improvement.rst#_snippet_0\n\nLANGUAGE: pytest\nCODE:\n```\n================================= FAILURES =================================\n_______________________ test_gets_correct_tracebacks _______________________\n\ntest_tracebacks.py:12: in test_gets_correct_tracebacks\n    assert manhattan_distance(p1, p2) == 1\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\ntest_tracebacks.py:6: in manhattan_distance\n    return abs(point_1.x - point_2.x) + abs(point_1.y - point_2.y)\n                           ^^^^^^^^^\nE   AttributeError: 'NoneType' object has no attribute 'x'\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using pip, the Python package installer.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.3.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This snippet demonstrates how to upgrade pytest to the latest version (8.0.2 in this case) using pip, the Python package installer. It ensures that the user has the newest features and bug fixes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.0.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Using Custom Marker with Callable Argument (Python)\nDESCRIPTION: This code defines a test function marked with a custom marker that takes a callable as an argument.  The `pytest.mark.my_marker.with_args` method is used to pass the `hello_world` function as an argument to the marker.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\ndef hello_world(*args, **kwargs):\n    return \"Hello World\"\n\n\n@pytest.mark.my_marker.with_args(hello_world)\ndef test_with_args():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Running unittest package tests with pytest\nDESCRIPTION: This command shows how to run the tests of an installed unittest package using pytest. The --pyargs option tells pytest to find tests by interpreting the given argument as a python package.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.0.0.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npy.test --pyargs unittest\n```\n\n----------------------------------------\n\nTITLE: Installing or Upgrading pytest with pip\nDESCRIPTION: This snippet shows how to install or upgrade pytest using the pip package manager.  It uses the `-U` flag to ensure that pytest and its dependencies are upgraded to the latest version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.3.1.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Deprecated yield tests\nDESCRIPTION: This code snippet demonstrates the deprecated `yield` test style. Pytest no longer supports yield tests, which users should migrate away from. The example uses `yield` to create multiple test cases.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef check(x, y):\n    assert x**x == y\n\n\ndef test_squared():\n    yield check, 2, 4\n    yield check, 3, 9\n```\n\n----------------------------------------\n\nTITLE: Reading Markers Set From Multiple Places\nDESCRIPTION: This code shows how to read markers that have been applied multiple times to a test function in pytest. The `pytest_runtest_setup` hook is used to iterate through all 'glob' markers applied to the test item and print their arguments and keyword arguments. This allows plugins to inspect and react to markers set at different levels (module, class, function).\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# content of test_mark_three_times.py\nimport pytest\n\npytestmark = pytest.mark.glob(\"module\", x=1)\n\n\n@pytest.mark.glob(\"class\", x=2)\nclass TestClass:\n    @pytest.mark.glob(\"function\", x=3)\n    def test_something(self):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Defining a Mixin Class for Abstract Test Handling in Python\nDESCRIPTION: This Python code defines a mixin class `NotATest` that utilizes the `__init_subclass__` method to automatically set the `__test__` attribute for subclasses. This ensures that subclasses of abstract test classes are automatically recognized as tests by Pytest.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# Mixin to handle abstract test classes\nclass NotATest:\n    def __init_subclass__(cls):\n        cls.__test__ = NotATest not in cls.__bases__\n\n\n# Abstract test class\nclass AbstractTest(NotATest):\n    pass\n\n\n# Subclass that will be collected as a test\nclass RealTest(AbstractTest):\n    def test_example(self):\n        assert 1 + 1 == 2\n```\n\n----------------------------------------\n\nTITLE: Grouping Tests in a Class (Python)\nDESCRIPTION: This Python code defines a class `TestClass` containing two test methods, `test_one` and `test_two`. Pytest automatically discovers and runs these test methods. The code showcases how to group related tests together within a class.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# content of test_class.py\nclass TestClass:\n    def test_one(self):\n        x = \"this\"\n        assert \"h\" in x\n\n    def test_two(self):\n        x = \"hello\"\n        assert hasattr(x, \"check\")\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This snippet shows the command to upgrade pytest to the latest version using pip. It requires pip to be installed and configured correctly. The command updates the pytest package to the newest available version on PyPI.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.4.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Pytest_warning_recorded Hook Introduction Python\nDESCRIPTION: This snippet introduces the new `pytest_warning_recorded` hook as a replacement for the deprecated `pytest_warning_captured` hook. The new hook provides information about warnings captured by the internal pytest warnings plugin.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_37\n\n\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command is used to upgrade the pytest package to the latest version using the pip package manager.  It ensures that the installed version of pytest is updated to the newest available release.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.4.3.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Adding int and float ini options in pytest\nDESCRIPTION: This code snippet demonstrates how to add integer and float type configuration options to pytest using the `parser.addini` method within the `pytest_addoption` hook. It defines two ini options, `int_value` of type integer and `float_value` of type float, with default values and help messages. These options can then be configured in a `pytest.ini` file.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/changelog/11381.improvement.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_addoption(parser):\n    parser.addini(\"int_value\", type=\"int\", default=2, help=\"my int value\")\n    parser.addini(\"float_value\", type=\"float\", default=4.2, help=\"my float value\")\n```\n\n----------------------------------------\n\nTITLE: Parametrizing with Command Line Options\nDESCRIPTION: This snippet shows how to add a command-line option (`--all`) to control the range of parameters used in a test. The `pytest_addoption` function adds the option, and the `pytest_generate_tests` function uses the option to determine the end of the range for parametrization. It parametrizes the `test_compute` function based on the `--all` command-line option.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_addoption(parser):\n    parser.addoption(\"--all\", action=\"store_true\", help=\"run all combinations\")\n\n\ndef pytest_generate_tests(metafunc):\n    if \"param1\" in metafunc.fixturenames:\n        if metafunc.config.getoption(\"all\"):\n            end = 5\n        else:\n            end = 2\n        metafunc.parametrize(\"param1\", range(end))\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest with pip\nDESCRIPTION: This snippet shows how to upgrade to the latest version of pytest using the pip package installer. It uses the `--upgrade` flag to ensure that the existing installation is replaced.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.4.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest via pip\nDESCRIPTION: This command is used to upgrade the pytest package to the latest version using pip. It ensures that the user has the most recent bug fixes and features.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.8.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Typed Test Function with Fixture\nDESCRIPTION: This example demonstrates how to use a typed fixture within a test function. The test function `test_sample_fixture` receives the `sample_fixture` and asserts that its value is 38. The type hint `sample_fixture: int` indicates that the fixture's return type is an integer.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/types.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef test_sample_fixture(sample_fixture: int) -> None:\n    assert sample_fixture == 38\n```\n\n----------------------------------------\n\nTITLE: Config.warn Replacement\nDESCRIPTION: Shows how to replace `Config.warn` with calls to the standard `warnings.warn` function.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nconfig.warn(\"C1\", \"some warning\")\n```\n\nLANGUAGE: python\nCODE:\n```\nwarnings.warn(pytest.PytestWarning(\"some warning\"))\n```\n\n----------------------------------------\n\nTITLE: Executing Pytest and Viewing Test Results\nDESCRIPTION: This snippet shows how to execute pytest from the command line. It demonstrates the output format, including the test session summary, failure details, and overall test execution time. It shows the error that `inc(3)` returns `4` which is not equal to `5`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/index.rst#_snippet_2\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncollected 1 item\n\ntest_sample.py F                                                     [100%]\n\n================================= FAILURES =================================\n_______________________________ test_answer ________________________________\n\n    def test_answer():\n>       assert inc(3) == 5\nE       assert 4 == 5\nE        +  where 4 = inc(3)\n\ntest_sample.py:6: AssertionError\n========================= short test summary info ==========================\nFAILED test_sample.py::test_answer - assert 4 == 5\n============================ 1 failed in 0.12s =============================\n```\n\n----------------------------------------\n\nTITLE: Pytest Verbose Mode Example\nDESCRIPTION: This shows an example of running pytest in verbose mode (`-v`) with output capturing enabled (`-s`) on a test module. The output demonstrates how pytest executes parameterized tests and fixture setup/teardown.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_51\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -v -s test_module.py\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y -- $PYTHON_PREFIX/bin/python\ncachedir: .pytest_cache\nrootdir: /home/sweet/project\ncollecting ... collected 8 items\n\ntest_module.py::test_0[1]   SETUP otherarg 1\n  RUN test0 with otherarg 1\nPASSED  TEARDOWN otherarg 1\n\ntest_module.py::test_0[2]   SETUP otherarg 2\n  RUN test0 with otherarg 2\nPASSED  TEARDOWN otherarg 2\n\ntest_module.py::test_1[mod1]   SETUP modarg mod1\n  RUN test1 with modarg mod1\nPASSED\ntest_module.py::test_2[mod1-1]   SETUP otherarg 1\n  RUN test2 with otherarg 1 and modarg mod1\nPASSED  TEARDOWN otherarg 1\n\ntest_module.py::test_2[mod1-2]   SETUP otherarg 2\n  RUN test2 with otherarg 2 and modarg mod1\nPASSED  TEARDOWN otherarg 2\n\ntest_module.py::test_1[mod2]   TEARDOWN modarg mod1\n  SETUP modarg mod2\n  RUN test1 with modarg mod2\nPASSED\ntest_module.py::test_2[mod2-1]   SETUP otherarg 1\n  RUN test2 with otherarg 1 and modarg mod2\nPASSED  TEARDOWN otherarg 1\n\ntest_module.py::test_2[mod2-2]   SETUP otherarg 2\n  RUN test2 with otherarg 2 and modarg mod2\nPASSED  TEARDOWN otherarg 2\n  TEARDOWN modarg mod2\n\n\n============================ 8 passed in 0.12s =============================\n```\n\n----------------------------------------\n\nTITLE: Typed Fixture Receiving Another Fixture\nDESCRIPTION: This snippet illustrates how to define a fixture that receives another fixture as a parameter and uses type hints. The `mock_env_user` fixture receives `monkeypatch` of type `pytest.MonkeyPatch` and sets an environment variable.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/types.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef mock_env_user(monkeypatch: pytest.MonkeyPatch) -> None:\n    monkeypatch.setenv(\"USER\", \"TestingUser\")\n```\n\n----------------------------------------\n\nTITLE: Junit XML Exception Cause\nDESCRIPTION: This snippet demonstrates the change in the format of the JUnit XML output to include the exception cause in the message attribute for failures during setup and teardown. It shows the difference between the old and new formats.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_50\n\nLANGUAGE: xml\nCODE:\n```\n<error message=\"failed on setup with &quot;ValueError: Some error during setup&quot;\">\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command is used to upgrade the pytest package to the latest version using the pip package installer. The -U flag ensures that pip upgrades the package to the newest available version, along with any dependencies.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.3.0.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: First pytest run with caching fixture\nDESCRIPTION: Example output from the first run of `pytest -q` with the caching fixture.  The important thing to note is the `running expensive computation...` output which signifies that this part of the code was run.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/cache.rst#_snippet_6\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -q\nF                                                                    [100%]\n================================= FAILURES =================================\n______________________________ test_function _______________________________\n\nmydata = 42\n\n    def test_function(mydata):\n>       assert mydata == 23\nE       assert 42 == 23\n\ntest_caching.py:19: AssertionError\n-------------------------- Captured stdout setup ---------------------------\nrunning expensive computation...\n========================= short test summary info ==========================\nFAILED test_caching.py::test_function - assert 42 == 23\n1 failed in 0.12s\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This snippet shows how to upgrade pytest to the latest version using the pip package manager. This command will fetch and install the newest version of pytest from the Python Package Index (PyPI).\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-6.2.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This snippet shows how to upgrade pytest to the latest version using pip. It ensures you have the latest bug fixes and features. This is the standard method for installing or upgrading python packages.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.5.0.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Configuring int and float values in pytest.ini\nDESCRIPTION: This code snippet shows how to configure the integer and float configuration options defined using `parser.addini` in a `pytest.ini` file.  The `int_value` and `float_value` are set to 3 and 5.4 respectively, overriding the default values defined in the `pytest_addoption` hook.  Pytest will parse these values according to their specified types.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/changelog/11381.improvement.rst#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nint_value = 3\nfloat_value = 5.4\n```\n\n----------------------------------------\n\nTITLE: Manual Reusable Fixtures Example\nDESCRIPTION: This example demonstrates how fixtures are reused by manually invoking the fixture functions for each test case. Each test function gets its own independent state from the fixtures.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef first_entry():\n    return \"a\"\n\n\ndef order(first_entry):\n    return [first_entry]\n\n\ndef test_string(order):\n    # Act\n    order.append(\"b\")\n\n    # Assert\n    assert order == [\"a\", \"b\"]\n\n\ndef test_int(order):\n    # Act\n    order.append(2)\n\n    # Assert\n    assert order == [\"a\", 2]\n\n\nentry = first_entry()\nthe_list = order(first_entry=entry)\ntest_string(order=the_list)\n\nentry = first_entry()\nthe_list = order(first_entry=entry)\ntest_int(order=the_list)\n```\n\n----------------------------------------\n\nTITLE: Running a Simple Test with Pytest\nDESCRIPTION: This command executes pytest, which automatically discovers and runs the test defined in `test_sample.py`. The output shows the test session starting, test results (failure in this case), and a summary of the test run.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#_snippet_3\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncollected 1 item\n\ntest_sample.py F                                                     [100%]\n\n================================= FAILURES =================================\n_______________________________ test_answer ________________________________\n\n    def test_answer():\n>       assert func(3) == 5\nE       assert 4 == 5\nE        +  where 4 = func(3)\n\ntest_sample.py:6: AssertionError\n========================= short test summary info ==========================\nFAILED test_sample.py::test_answer - assert 4 == 5\n============================ 1 failed in 0.12s =============================\n```\n\n----------------------------------------\n\nTITLE: Install project in development mode using pip\nDESCRIPTION: This command installs the project in editable mode using pip. This creates a symlink in site-packages, allowing changes to the code to be reflected without reinstalling.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/existingtestsuite.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd <repository>\npip install -e .  # Environment dependent alternatives include\n                      # 'python setup.py develop' and 'conda develop'\n```\n\n----------------------------------------\n\nTITLE: Parametrized Fixture Overwriting (Bug Fix)\nDESCRIPTION: Demonstrates how to overwrite a parametrized fixture while still reusing the super fixture value. This example fixes a bug where an error occurred in such scenarios.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# conftest.py\nimport pytest\n\n\n@pytest.fixture(params=[1, 2])\ndef foo(request):\n    return request.param\n\n\n# test_foo.py\nimport pytest\n\n\n@pytest.fixture\ndef foo(foo):\n    return foo * 2\n```\n\n----------------------------------------\n\nTITLE: -m and -k Options Expression Evaluation Update Python\nDESCRIPTION: This snippet outlines a breaking change where expressions given to the `-m` and `-k` options are no longer evaluated using Python's `eval()`. Only `or`, `and`, `not`, parentheses, and identifiers for matching are supported.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_27\n\n\n\n----------------------------------------\n\nTITLE: Using RaisesGroup.matches and RaisesExc.matches for exception matching\nDESCRIPTION: This snippet demonstrates the use of `RaisesGroup.matches` and `RaisesExc.matches` outside of the context manager to check `__context__` or `__cause__`. It demonstrates how to use these methods to perform matching outside the context manager and access the `fail_reason` for debugging.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef test_matches():\n    exc = ValueError()\n    exc_group = ExceptionGroup(\"\", [exc])\n    if RaisesGroup(ValueError).matches(exc_group):\n        ...\n    # helpful error is available in `.fail_reason` if it fails to match\n    r = RaisesExc(ValueError)\n    assert r.matches(exc), r.fail_reason\n```\n\n----------------------------------------\n\nTITLE: Early Loading Plugins - Bash\nDESCRIPTION: This command early-loads a plugin module at invocation time. The plugin name can be a full module dotted name or an entry-point name.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npytest -p mypluginmodule\n```\n\n----------------------------------------\n\nTITLE: Test File Example (test_third.py)\nDESCRIPTION: A third basic test file, intended to be excluded by the manifest file. It contains a single test function, `test_3`, which asserts that `1 == 1`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/customdirectory.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef test_3():\n    assert 1 == 1\n```\n\n----------------------------------------\n\nTITLE: Installing pytest 8.0.0rc2 using pip\nDESCRIPTION: This command upgrades pytest to version 8.0.0rc2 using pip, the Python package installer. It allows users to test the prerelease version of pytest and report any issues or regressions.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.0.0rc2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pytest==8.0.0rc2\n```\n\n----------------------------------------\n\nTITLE: Pytest Collection with Conftest.py (Python 3)\nDESCRIPTION: This pytest output shows test collection results when running pytest with a Python 3 interpreter and a `conftest.py` file that excludes both `setup.py` and `pkg/module_py2.py`. The output confirms that no tests are collected, demonstrating that pytest correctly filters out the specified files based on the Python version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#_snippet_17\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest --collect-only\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\nconfigfile: pytest.ini\ncollected 0 items\n\n======================= no tests collected in 0.12s ========================\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest via pip\nDESCRIPTION: This snippet demonstrates how to upgrade pytest to the latest version using pip, the Python package installer. This ensures that you have the most recent features and bug fixes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.7.0.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command upgrades the installed version of pytest to the latest version available on PyPI. It uses the pip package installer, which is a standard tool for installing and managing Python packages.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.0.3.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Project Layout: Test Modules as Packages\nDESCRIPTION: This code snippet shows a project layout where test modules with the same name are placed in different subfolders under the tests directory, each with an `__init__.py` file. This turns the subfolders into packages, allowing pytest to load the modules with unique names.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/goodpractices.rst#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\npyproject.toml\nmypkg/\n    ...\ntests/\n    __init__.py\n    foo/\n        __init__.py\n        test_view.py\n    bar/\n        __init__.py\n        test_view.py\n```\n\n----------------------------------------\n\nTITLE: Accessing logs from different test stages using get_records\nDESCRIPTION: This snippet demonstrates how to use `caplog.get_records(when)` to access logs from different stages of the test (setup, call, teardown).  It shows how to inspect logs for WARNING messages during setup and call phases within the teardown of a fixture.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef window(caplog):\n    window = create_window()\n    yield window\n    for when in (\"setup\", \"call\"):\n        messages = [\n            x.message for x in caplog.get_records(when) if x.levelno == logging.WARNING\n        ]\n        if messages:\n            pytest.fail(f\"warning messages encountered during testing: {messages}\")\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Annotated Marker Expressions - Bash\nDESCRIPTION: This command runs tests decorated with annotated markers and checks if the keyword argument matches the provided value. Uses the `-m` flag followed by the marker name with the argument value.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npytest -m \"slow(phase=1)\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a per-session Database object with pytest_funcarg__\nDESCRIPTION: This code snippet demonstrates how to implement a per-session Database object using the older `pytest_funcarg__` mechanism in pytest. It uses `request.cached_setup()` to manage caching of resources.  It defines a `Database` class and a `pytest_funcarg__db` function which creates and destroys database instances, ensuring only one instance exists per session.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/funcarg_compare.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    # content of conftest.py\n    class Database:\n        def __init__(self):\n            print(\"database instance created\")\n\n        def destroy(self):\n            print(\"database instance destroyed\")\n\n\n    def pytest_funcarg__db(request):\n        return request.cached_setup(\n            setup=DataBase, teardown=lambda db: db.destroy, scope=\"session\"\n        )\n```\n\n----------------------------------------\n\nTITLE: Pytest Failure Assertion Example 2\nDESCRIPTION: Another example of a failing assertion in a pytest test. Demonstrates a scenario where a test fails, highlighting the difference between expected and actual values. This helps in identifying the root cause of test failures.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n=================================== FAILURES ===================================\n_____________________________________ test _____________________________________\n\n    def test():\n>       assert Help().fun() == 2\nE       assert 1 == 2\nE        +  where 1 = fun()\nE        +    where fun = <test_local.Help object at 0x1074be230>.fun\nE        +      where <test_local.Help object at 0x1074be230> = Help()\n\ntest_local.py:13: AssertionError\n=========================== 1 failed in 0.03 seconds ===========================\n```\n\n----------------------------------------\n\nTITLE: Node Constructor With kwargs Recommendation\nDESCRIPTION: This code snippet shows the recommended way to define a custom node constructor by including **kwargs. This approach avoids hard-coding arguments and makes the code compatible with future pytest versions.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass CustomItem(pytest.Item):\n    def __init__(self, *, additional_arg, **kwargs):\n        super().__init__(**kwargs)\n        self.additional_arg = additional_arg\n```\n\n----------------------------------------\n\nTITLE: Finalizer Execution Order with addfinalizer\nDESCRIPTION: This example demonstrates the execution order of finalizers when using `request.addfinalizer`. The `fix_w_finalizers` fixture registers two finalizers using `partial`, which print messages. The output shows that the finalizers are executed in the reverse order they were added (first-in-last-out).\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# content of test_finalizers.py\nfrom functools import partial\nimport pytest\n\n\n@pytest.fixture\ndef fix_w_finalizers(request):\n    request.addfinalizer(partial(print, \"finalizer_2\"))\n    request.addfinalizer(partial(print, \"finalizer_1\"))\n\n\ndef test_bar(fix_w_finalizers):\n    print(\"test_bar\")\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command upgrades pytest to the latest version using pip. It ensures that the installed version is updated to the newest release available on PyPI.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.0.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Python Test Module with Custom Naming\nDESCRIPTION: This python code shows an example test module that uses a naming convention customized to work with the pytest configuration specified in the previous snippet. The `check_myapp.py` file contains a class `CheckMyApp` with methods that end in `_check`, adhering to the custom naming rules.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# content of check_myapp.py\nclass CheckMyApp:\n    def simple_check(self):\n        pass\n\n    def complex_check(self):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using pip, the Python package installer.  It ensures that the user has the most recent bug fixes and improvements. The `--upgrade` flag is crucial for updating an existing installation.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.1.2.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Pytest Execution with Warnings Display\nDESCRIPTION: This snippet shows the pytest output when running a test that emits a UserWarning. The output includes a warnings summary that details the location and message of the warning.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_1\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest test_show_warnings.py\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncollected 1 item\n\ntest_show_warnings.py .                                              [100%]\n\n============================= warnings summary =============================\ntest_show_warnings.py::test_one\n  /home/sweet/project/test_show_warnings.py:5: UserWarning: api v1, should use functions from v2\n    warnings.warn(UserWarning(\"api v1, should use functions from v2\"))\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================= 1 passed, 1 warning in 0.12s =======================\n```\n\n----------------------------------------\n\nTITLE: Project Layout: Tests as Part of Application Code\nDESCRIPTION: This code shows an alternative project layout where test directories are inlined into the application package. This layout is useful when there is a direct relation between tests and application modules. Tests can be discovered using the `--pyargs` option.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/goodpractices.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\npyproject.toml\n[src/]mypkg/\n    __init__.py\n    app.py\n    view.py\n    tests/\n        __init__.py\n        test_app.py\n        test_view.py\n        ...\n```\n\n----------------------------------------\n\nTITLE: Customizing Fixture IDs in Pytest\nDESCRIPTION: This example shows how to customize the string representation (ID) of parametrized fixture values using the `ids` keyword argument. The `ids` can be a list of strings or a function that returns a string for each fixture value. This allows for more descriptive test names.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n# content of test_ids.py\nimport pytest\n\n\n@pytest.fixture(params=[0, 1], ids=[\"spam\", \"ham\"])\ndef a(request):\n    return request.param\n\n\ndef test_a(a):\n    pass\n\n\ndef idfn(fixture_value):\n    if fixture_value == 0:\n        return \"eggs\"\n    else:\n        return None\n\n\n@pytest.fixture(params=[0, 1], ids=idfn)\ndef b(request):\n    return request.param\n\n\ndef test_b(b):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Installing or Upgrading pytest\nDESCRIPTION: Demonstrates how to install or upgrade pytest using either pip or easy_install. The -U flag ensures that pytest and its dependencies are upgraded to the latest versions.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.3.4.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest # or\neasy_install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Monkeypatching Environment Variables (Delete and Assert) - Python\nDESCRIPTION: This test function uses `monkeypatch.delenv` to remove the `USER` environment variable. `raising=False` prevents an error if the variable is not already set. It then asserts that `get_os_user_lower` raises an `OSError` when the environment variable is missing.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\ndef test_raise_exception(monkeypatch):\n    \"\"\"Remove the USER env var and assert OSError is raised.\"\"\"\n    monkeypatch.delenv(\"USER\", raising=False)\n\n    with pytest.raises(OSError):\n        _ = get_os_user_lower()\n```\n\n----------------------------------------\n\nTITLE: Capturing Bytes from File Descriptors with capfdbinary\nDESCRIPTION: This snippet shows how to capture byte streams written to file descriptors 1 and 2 using the `capfdbinary` fixture. The example uses `os.system` to generate output and asserts that the captured byte stream matches the expected byte output.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/builtin.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef test_system_echo(capfdbinary):\n    os.system('echo \"hello\"')\n    captured = capfdbinary.readouterr()\n    assert captured.out == b\"hello\\n\"\n```\n\n----------------------------------------\n\nTITLE: Installing pytest with pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using pip, the Python package installer. The `-U` flag ensures that pytest and its dependencies are upgraded to their newest available versions.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.9.0.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using the pip package installer. It ensures that you have the most recent bug fixes and features.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.0.7.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This snippet shows how to upgrade to the latest version of pytest using pip. It uses the `pip install --upgrade pytest` command.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.1.3.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Deactivating Plugins in pytest.ini\nDESCRIPTION: This configuration shows how to deactivate a plugin by name within a `pytest.ini` file.  By adding the `-p no:NAME` option to the `addopts` setting, the specified plugin will be disabled for all pytest runs in that project. Replace `NAME` with the name of the plugin to disable.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/plugins.rst#_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\naddopts = -p no:NAME\n```\n\n----------------------------------------\n\nTITLE: Defining a combined fixture in pytest\nDESCRIPTION: This snippet showcases a proposed solution to define a new fixture by combining existing ones in pytest. The pytest.define_combined_fixture function would dynamically create a fixture that yields values from the specified fixtures.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/proposals/parametrize_with_fixtures.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npytest.define_combined_fixture(\n    name=\"context\", fixtures=[\"default_context\", \"extra_context\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using pip. It ensures that you have the newest features and bug fixes available.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.2.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Parametrizing pytest fixtures using fixture_request\nDESCRIPTION: This snippet demonstrates an alternative approach using a helper function named pytest.fixture_request to yield all parameters marked as a fixture. This allows parametrizing a fixture with values from other fixtures.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/proposals/parametrize_with_fixtures.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture(\n    params=[\n        pytest.fixture_request(\"default_context\"),\n        pytest.fixture_request(\"extra_context\"),\n    ]\n)\ndef context(request):\n    \"\"\"Returns all values for ``default_context``, one-by-one before it\n    does the same for ``extra_context``.\n\n    request.param:\n        - {}\n        - {'author': 'alice'}\n        - {'project_slug': 'helloworld'}\n        - {'author': 'bob', 'project_slug': 'foobar'}\n    \"\"\"\n    return request.param\n```\n\n----------------------------------------\n\nTITLE: Installing pytest via pip\nDESCRIPTION: This command updates the pytest package to the latest version using pip, the Python package installer. It ensures that users have the most recent features and bug fixes available in the pytest library.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.0.0.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Dynamic Marker Addition with pytest_collection_modifyitems\nDESCRIPTION: This code shows how to implement the `pytest_collection_modifyitems` hook in `conftest.py` to dynamically add markers to test items based on their node IDs. It checks if the node ID contains 'interface' or 'event' and adds the corresponding marker if it does. This provides a flexible way to categorize and select tests based on naming conventions.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# content of conftest.py\n\nimport pytest\n\n\ndef pytest_collection_modifyitems(items):\n    for item in items:\n        if \"interface\" in item.nodeid:\n            item.add_marker(pytest.mark.interface)\n        elif \"event\" in item.nodeid:\n            item.add_marker(pytest.mark.event)\n```\n\n----------------------------------------\n\nTITLE: Loading Plugins with PYTEST_PLUGINS (Bash)\nDESCRIPTION: This code snippet shows how to load specific pytest plugins using the `PYTEST_PLUGINS` environment variable in a bash shell. It provides a comma-separated list of module names to be loaded as plugins.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nexport PYTEST_PLUGINS=mymodule.plugin,xdist\n```\n\n----------------------------------------\n\nTITLE: Running Tests by Marker Expressions - Bash\nDESCRIPTION: This command runs tests decorated with a specific marker.  It uses the `-m` flag followed by the marker name or expression. For annotated markers, the keyword arguments can be specified within quotes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npytest -m slow\n```\n\n----------------------------------------\n\nTITLE: Creating a virtual environment and installing pytest in editable mode\nDESCRIPTION: These commands create a Python virtual environment, activate it, and install pytest in editable mode with the 'dev' extra. This setup allows for local development and testing of pytest changes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 -m venv .venv\n$ source .venv/bin/activate  # Linux\n$ .venv/Scripts/activate.bat  # Windows\n$ pip install -e \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Accessing pytest Version Constant\nDESCRIPTION: Shows how to access the current pytest version as a string.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import pytest\n>>> pytest.__version__\n'7.0.0'\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command is used to upgrade the installed version of pytest to the latest version available on PyPI.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-6.1.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Testing for exceptions returned as part of an ExceptionGroup\nDESCRIPTION: This snippet shows how to use the `excinfo.group_contains()` method to test for exceptions returned as part of an `ExceptionGroup`. It verifies the presence of a `RuntimeError` with a matching message and the absence of a `TypeError` within the raised `ExceptionGroup`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef test_exception_in_group():\n    with pytest.raises(ExceptionGroup) as excinfo:\n        raise ExceptionGroup(\n            \"Group message\",\n            [\n                RuntimeError(\"Exception 123 raised\"),\n            ],\n        )\n    assert excinfo.group_contains(RuntimeError, match=r\".* 123 .*\")\n    assert not excinfo.group_contains(TypeError)\n```\n\n----------------------------------------\n\nTITLE: Test Function with 100% Coverage but Missing Bug\nDESCRIPTION: This test case for the function `get_caption` achieves 100% code coverage but fails to catch a potential bug where the function might return `None`. The code illustrates the value of typing in catching errors that coverage alone might miss.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/types.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef test_get_caption() -> None:\n    assert get_caption(10, [(1, \"foo\"), (10, \"bar\")]) == \"bar\"\n```\n\n----------------------------------------\n\nTITLE: TOML Configuration for Build System\nDESCRIPTION: This code snippet shows the configuration for the build system in a `pyproject.toml` file. It specifies the build system requirements and the build backend, which are necessary for building and packaging the Python project. It uses `hatchling` as the build backend and requires it to be installed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/goodpractices.rst#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"PACKAGENAME\"\nversion = \"PACKAGEVERSION\"\n```\n\n----------------------------------------\n\nTITLE: Testing exception in group at a given depth\nDESCRIPTION: This snippet demonstrates the usage of the `depth` keyword parameter within the `excinfo.group_contains()` method. It asserts the presence of a `RuntimeError` only at the top level of the `ExceptionGroup` and not within nested groups.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef test_exception_in_group_at_given_depth():\n    with pytest.raises(ExceptionGroup) as excinfo:\n        raise ExceptionGroup(\n            \"Group message\",\n            [\n                RuntimeError(),\n                ExceptionGroup(\n                    \"Nested group\",\n                    [\n                        TypeError(),\n                    ],\n                ),\n            ],\n        )\n    assert excinfo.group_contains(RuntimeError, depth=1)\n```\n\n----------------------------------------\n\nTITLE: Marking Fixture Parameters in Pytest\nDESCRIPTION: This example demonstrates how to apply marks to individual values within a parametrized fixture using `pytest.param`. In this case, the third value in the `data_set` fixture is marked to be skipped, showcasing how to selectively skip or apply other marks based on the fixture value.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n# content of test_fixture_marks.py\nimport pytest\n\n\n@pytest.fixture(params=[0, 1, pytest.param(2, marks=pytest.mark.skip)])\ndef data_set(request):\n    return request.param\n\n\ndef test_data(data_set):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Monkeypatch Setting Attribute (Python)\nDESCRIPTION: This snippet demonstrates the new monkeypatch.setattr() variant, which allows for a shorter way to patch attributes, functions, or classes of a module. It replaces the \"get\" function in the \"requests\" module with \"myfunc\".\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.4.0.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmonkeypatch.setattr(\"requests.get\", myfunc)\n```\n\n----------------------------------------\n\nTITLE: Installing tox\nDESCRIPTION: This command installs tox, a tool used to run tests in isolated virtual environments. Tox simplifies testing by automatically setting up the necessary environments.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install tox\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This snippet shows the command to upgrade the pytest package to the latest version using pip. This command will fetch the newest available version of pytest from PyPI and install it, replacing the older version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.2.4.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Installing pytest via pip\nDESCRIPTION: This command is used to upgrade pytest to the latest version using pip, the Python package installer.  The -U flag ensures that pytest and its dependencies are upgraded to the newest versions available.  Requires pip to be installed and configured to access the Python Package Index (PyPI).\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.8.3.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Running pytest with --pyargs\nDESCRIPTION: This command runs pytest with the `--pyargs` option to discover and collect tests from a specified package. Pytest will locate where the package is installed and run the tests within that package. This is commonly used when tests are part of the application code.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/goodpractices.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npytest --pyargs mypkg\n```\n\n----------------------------------------\n\nTITLE: Treating UserWarning as Error with Pytest\nDESCRIPTION: This snippet demonstrates how to use the `-W` flag to treat UserWarning as an error in pytest.  When the test is run, the UserWarning causes the test to fail.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_2\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -q test_show_warnings.py -W error::UserWarning\nF                                                                    [100%]\n================================= FAILURES =================================\n_________________________________ test_one _________________________________\n\n    def test_one():\n>       assert api_v1() == 1\n\ntest_show_warnings.py:10:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def api_v1():\n>       warnings.warn(UserWarning(\"api v1, should use functions from v2\"))\nE       UserWarning: api v1, should use functions from v2\n\ntest_show_warnings.py:5: UserWarning\n========================= short test summary info ==========================\nFAILED test_show_warnings.py::test_one - UserWarning: api v1, should use ...\n1 failed in 0.12s\n```\n\n----------------------------------------\n\nTITLE: cached_setup Replacement\nDESCRIPTION: Demonstrates how to replace `request.cached_setup` with standard fixture mechanisms for setup and teardown.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef db_session():\n    return request.cached_setup(\n        setup=Session.create, teardown=lambda session: session.close(), scope=\"module\"\n    )\n```\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture(scope=\"module\")\ndef db_session():\n    session = Session.create()\n    yield session\n    session.close()\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using pip. It ensures that the existing installation is replaced with the newest release.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.4.4.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Example of a Pytest Warning (Python)\nDESCRIPTION: This is an example of code that would cause a PytestCollectionWarning during test collection due to the presence of an __init__ constructor in a test class.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# content of test_pytest_warnings.py\nclass Test:\n    def __init__(self):\n        pass\n\n    def test_foo(self):\n        assert 1 == 1\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip (Python)\nDESCRIPTION: This snippet provides the command to upgrade pytest to the latest version using pip. It's a standard way to update Python packages.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.1.1.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Installing Argcomplete with Pip\nDESCRIPTION: This command installs the argcomplete library using pip. Argcomplete provides tab completion functionality for command-line tools, including pytest. Version 0.5.7 or higher is recommended.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/bash-completion.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo pip install 'argcomplete>=0.5.7'\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Warning Filters with Decorators\nDESCRIPTION: This snippet demonstrates how to apply multiple warning filters using separate decorators.  The order is important; filters are evaluated in reverse order.  In this case, \"ignore:api v1\" takes precedence over \"error\".\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Ignore \"api v1\" warnings, but fail on all other warnings\n@pytest.mark.filterwarnings(\"ignore:api v1\")\n@pytest.mark.filterwarnings(\"error\")\ndef test_one():\n    assert api_v1() == 1\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This snippet shows how to upgrade pytest to the latest version using pip. This command ensures that the existing version of pytest is replaced with the newest one available on PyPI.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.9.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Disabling Plugins - Bash\nDESCRIPTION: This command disables the loading of a specific plugin at invocation time using the `no:` prefix with the plugin name.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npytest -p no:doctest\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using pip. It ensures that the existing pytest installation is replaced with the newest release available on PyPI.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-6.1.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Marking a Test as Expected Failure with Raises\nDESCRIPTION: This snippet shows how to use pytest.mark.xfail with the raises parameter to mark a test as an expected failure that raises a specific exception (IndexError).  It defines a function `f` that raises an IndexError and decorates the `test_f` test function with `@pytest.mark.xfail(raises=IndexError)`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef f():\n    raise IndexError()\n\n\n@pytest.mark.xfail(raises=IndexError)\ndef test_f():\n    f()\n```\n\n----------------------------------------\n\nTITLE: Requesting Temporary Directory Fixture in Python\nDESCRIPTION: This Python code defines a test function `test_needsfiles` that requests the `tmp_path` fixture. Pytest will automatically create a unique temporary directory for each test invocation and pass its path to the test function as the `tmp_path` argument.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# content of test_tmp_path.py\ndef test_needsfiles(tmp_path):\n    print(tmp_path)\n    assert 0\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest via pip\nDESCRIPTION: This command is used to upgrade the pytest package to the latest version from the Python Package Index (PyPI). It uses the pip package installer with the -U flag, which stands for --upgrade, ensuring pytest is updated to the newest available version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.1.0.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Basic pytest_generate_tests Example - Test Function (Python)\nDESCRIPTION: This snippet shows a simple test function `test_valid_string` that takes a `stringinput` fixture as input and asserts that it is an alphabetic string. This function is used in conjunction with `pytest_generate_tests` to dynamically parametrize tests.  Dependencies: pytest.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/parametrize.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef test_valid_string(stringinput):\n    assert stringinput.isalpha()\n```\n\n----------------------------------------\n\nTITLE: Setting the number of tmp_path retention count\nDESCRIPTION: This snippet demonstrates how to define the number of test sessions to keep temporary directories using the `tmp_path_retention_count` option in the `pytest.ini` file. This option works together with `tmp_path_retention_policy` to define how temporary directories are retained after test execution.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_51\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\ntmp_path_retention_count = 3\n```\n\n----------------------------------------\n\nTITLE: Fixture requiring another fixture\nDESCRIPTION: Example of a fixture requiring another fixture. `db_session` depends on `tmp_path` fixture.  This is achieved by declaring the dependency as an argument in the fixture function.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef db_session(tmp_path):\n    fn = tmp_path / \"db.file\"\n    return connect(fn)\n```\n\n----------------------------------------\n\nTITLE: Modifying pytest.raises Assertion\nDESCRIPTION: The following python code showcases the change needed to make an assertion within a `pytest.raises` block to accommodate the change to exception handling, where the `str` representation of an `ExceptionInfo` object now matches its `repr`.  Instead of asserting directly against the `ExceptionInfo` object, it asserts against the `.value` attribute, which contains the actual exception instance.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nwith pytest.raises(SomeException) as e:\n    ...\nassert \"some message\" in str(e.value)\n```\n\n----------------------------------------\n\nTITLE: Disabling Warnings Capture in pytest.ini (INI)\nDESCRIPTION: This snippet shows how to disable the automatic warning capture feature in pytest by adding an `addopts` option to the `pytest.ini` configuration file. This is useful when a test suite already handles warnings and the default capture behavior is disruptive. It prevents warnings from being displayed at the end of the test session.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_69\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\naddopts = -p no:warnings\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using the pip package installer.  The -U flag ensures that pytest and its dependencies are upgraded to the newest available versions.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.8.5.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest using pip\nDESCRIPTION: This snippet shows the command to upgrade pytest to the latest version using pip. This command will install the latest version of pytest available on PyPI.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.4.3.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Running pytest with --ff\nDESCRIPTION: This shows the output from running pytest with the ``--ff`` flag, which runs failed tests first, then runs the rest of the tests.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/cache.rst#_snippet_3\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest --ff\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncollected 50 items\nrun-last-failure: rerun previous 2 failures first\n\ntest_50.py FF................................................        [100%]\n\n================================= FAILURES =================================\n_______________________________ test_num[17] _______________________________\n\ni = 17\n\n    @pytest.mark.parametrize(\"i\", range(50))\n    def test_num(i):\n        if i in (17, 25):\n>           pytest.fail(\"bad luck\")\nE           Failed: bad luck\n\ntest_50.py:7: Failed\n_______________________________ test_num[25] _______________________________\n\ni = 25\n\n    @pytest.mark.parametrize(\"i\", range(50))\n    def test_num(i):\n        if i in (17, 25):\n>           pytest.fail(\"bad luck\")\nE           Failed: bad luck\n\ntest_50.py:7: Failed\n========================= short test summary info ==========================\nFAILED test_50.py::test_num[17] - Failed: bad luck\nFAILED test_50.py::test_num[25] - Failed: bad luck\n======================= 2 failed, 48 passed in 0.12s =======================\n```\n\n----------------------------------------\n\nTITLE: Module-Level Setup\nDESCRIPTION: Defines setup_module to execute before all tests in a module. The optional module parameter gives access to the module object.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/xunit_setup.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef setup_module(module):\n    \"\"\"setup any state specific to the execution of the given module.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Log Format in Pytest\nDESCRIPTION: This snippet shows how to configure the overall format of captured logging messages in pytest using the `log_format` option in the `pytest.ini` file. This applies to all captured log messages, regardless of the output destination. The format string is a standard Python logging format string.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_39\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nlog_format = %(asctime)s %(levelname)s %(message)s\n```\n\n----------------------------------------\n\nTITLE: Running Test with Quiet Mode in Pytest\nDESCRIPTION: This command executes pytest with the `-q` or `--quiet` flag, which reduces the verbosity of the output. It's useful for simplifying the output and focusing on the essential test results.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#_snippet_5\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -q test_sysexit.py\n.                                                                    [100%]\n1 passed in 0.12s\n```\n\n----------------------------------------\n\nTITLE: Pytest Configuration in setup.cfg\nDESCRIPTION: This example shows how to configure pytest within a `setup.cfg` file.  The configuration resides in the `[tool:pytest]` section. While supported, using `setup.cfg` is not recommended for complex configurations due to potential parsing issues.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/customize.rst#_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# setup.cfg\n[tool:pytest]\nminversion = 6.0\naddopts = -ra -q\ntestpaths =\n    tests\n    integration\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest with pip (Python)\nDESCRIPTION: This code snippet demonstrates how to upgrade the pytest package to the latest version using pip, the Python package installer. It ensures that you have the most recent bug fixes and improvements.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-6.0.2.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Deactivating a pytest Plugin by Name\nDESCRIPTION: This command demonstrates how to deactivate a pytest plugin by specifying its name using the `-p no:NAME` option. This prevents the plugin from being loaded or activated, effectively disabling its functionality.  Replace `NAME` with the actual plugin name.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/plugins.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest -p no:NAME\n```\n\n----------------------------------------\n\nTITLE: Pytest JUnit Duration Report Configuration\nDESCRIPTION: Configures how duration times are reported in the JUnit XML report. The `junit_duration_report` option accepts values `total` (default) to include setup, call, and teardown times, or `call` to include only call times.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\njunit_duration_report = call\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest via pip\nDESCRIPTION: This snippet shows how to upgrade pytest to the latest version using pip, the Python package installer. The command installs or upgrades pytest to the newest available release. Requires pip to be installed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.8.4.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Pytest Finalizer Execution Order\nDESCRIPTION: This example illustrates the execution order of finalizers in pytest when using yield fixtures. The `fix_w_yield1` and `fix_w_yield2` fixtures define teardown logic using `yield`. The output shows that the finalizer for `fix_w_yield2` (the right-most fixture) runs before `fix_w_yield1`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# content of test_finalizers.py\nimport pytest\n\n\ndef test_bar(fix_w_yield1, fix_w_yield2):\n    print(\"test_bar\")\n\n\n@pytest.fixture\ndef fix_w_yield1():\n    yield\n    print(\"after_yield_1\")\n\n\n@pytest.fixture\ndef fix_w_yield2():\n    yield\n    print(\"after_yield_2\")\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest using pip\nDESCRIPTION: This command upgrades the pytest package to the latest version (3.7.2 in this case) using pip, the Python package installer. It ensures that you have the newest bug fixes and features.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.7.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Pytest JUnit Logging Configuration\nDESCRIPTION: Configures if captured output should be written to the JUnit XML file. Valid values for the `junit_logging` option are `log`, `system-out`, `system-err`, `out-err`, `all`, and `no` (default).\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\njunit_logging = system-out\n```\n\n----------------------------------------\n\nTITLE: Dropping to PDB at test start (Bash)\nDESCRIPTION: The following command shows how to use the `--trace` option in pytest to drop into the Python debugger (pdb) at the start of every test. This can be useful for stepping through test execution from the beginning.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/failures.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest --trace\n```\n\n----------------------------------------\n\nTITLE: Adding to the Python Path in Pytest\nDESCRIPTION: This snippet demonstrates how to add directories to the Python search path using the `pythonpath` option in the `pytest.ini` file. This allows pytest to find modules that are not in the standard Python path. Paths are relative to the rootdir.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_48\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\npythonpath = src1 src2\n```\n\n----------------------------------------\n\nTITLE: Extending xfail mechanism in pytest\nDESCRIPTION: This snippet showcases extensions to the xfail mechanism with `@py.test.mark.xfail`.  The `run=False` argument skips the test, while `reason=\"...\"` adds a reason to xfail summaries. `--runxfail` ignores xfail markers on the command line.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_75\n\nLANGUAGE: python\nCODE:\n```\n@py.test.mark.xfail(run=False)\n@py.test.mark.xfail(reason=\"...\")\n```\n\n----------------------------------------\n\nTITLE: Running YAML Tests with Pytest\nDESCRIPTION: This command shows how to run the YAML tests using pytest. It specifies the YAML file to execute, and pytest uses the custom collection logic defined in conftest.py to find and run the tests.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/nonpython.rst#_snippet_2\n\nLANGUAGE: pytest\nCODE:\n```\npytest test_simple.yaml\n```\n\n----------------------------------------\n\nTITLE: Bytes Comparison Assertion Message Improvement in Python\nDESCRIPTION: This snippet demonstrates how the assertion message for byte string comparisons was improved to show the actual ASCII representation instead of the byte numeric value, making it more user-friendly for debugging. It showcases the change in the assertion output when comparing byte strings and highlights the improved readability.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_57\n\nLANGUAGE: python\nCODE:\n```\ndef test():\n    >       assert b'spam' == b'eggs'\n    E       AssertionError: assert b'spam' == b'eggs'\n    E         At index 0 diff: 115 != 101\n    E         Use -v to get the full diff\n```\n\nLANGUAGE: python\nCODE:\n```\ndef test():\n    >       assert b'spam' == b'eggs'\n    E       AssertionError: assert b'spam' == b'eggs'\n    E         At index 0 diff: b's' != b'e'\n    E         Use -v to get the full diff\n```\n\n----------------------------------------\n\nTITLE: Ignore RemovedInPytest4Warning in pytest.ini (INI)\nDESCRIPTION: This snippet demonstrates how to temporarily suppress `RemovedInPytest4Warning` errors in pytest 4.0.x by adding a `filterwarnings` option to the `pytest.ini` configuration file. This is a stop-gap measure and will not work in pytest 4.1.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_68\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nfilterwarnings =\n    ignore::pytest.RemovedInPytest4Warning\n```\n\n----------------------------------------\n\nTITLE: Wrapping Async Fixture in Synchronous Fixture (Deprecated)\nDESCRIPTION: This code shows the deprecated way of handling synchronous tests depending on asynchronous fixtures, and the suggested replacement using a synchronous fixture wrapper. This resolves issues related to unawaited coroutines and unpredictable behavior when using async fixtures in synchronous tests.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport pytest\n\n\n@pytest.fixture\nasync def unawaited_fixture():\n    return 1\n\n\ndef test_foo(unawaited_fixture):\n    assert 1 == asyncio.run(unawaited_fixture)\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest using pip\nDESCRIPTION: This snippet demonstrates how to upgrade an existing pytest installation to the latest version (in this case, 3.7.4) using pip, the Python package installer. It uses the `--upgrade` flag to ensure that the existing version is replaced.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.7.4.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Injecting into doctest_namespace\nDESCRIPTION: This shows how to inject objects into the namespace used by doctests. It utilizes the `doctest_namespace` fixture with `autouse=True` to add the `numpy` module to the namespace as `np`, making it accessible within doctest examples.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/builtin.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture(autouse=True)\ndef add_np(doctest_namespace):\n    doctest_namespace[\"np\"] = numpy\n```\n\n----------------------------------------\n\nTITLE: Pytest Collection with Conftest.py (Python 2)\nDESCRIPTION: This pytest output illustrates test collection results when running pytest with a Python 2 interpreter and a `conftest.py` file that excludes `setup.py`. It confirms that only the `pkg/module_py2.py` module is collected, demonstrating the intended filtering behavior.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#_snippet_16\n\nLANGUAGE: pytest\nCODE:\n```\n#$ pytest --collect-only\n====== test session starts ======\nplatform linux2 -- Python 2.7.10, pytest-2.9.1, py-1.4.31, pluggy-0.3.1\nrootdir: $REGENDOC_TMPDIR, inifile: pytest.ini\ncollected 1 items\n<Module 'pkg/module_py2.py'>\n  <Function 'test_only_on_python2'>\n\n====== 1 tests found in 0.04 seconds ======\n```\n\n----------------------------------------\n\nTITLE: Defining a fixture using the pytest_funcarg__ prefix (deprecated)\nDESCRIPTION: This code snippet shows the older, deprecated way of defining a fixture using the `pytest_funcarg__` prefix. While still functional, it is recommended to use the `@pytest.fixture` decorator for better scoping and parametrization capabilities.  This approach does not allow direct scoping and parametrization.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/funcarg_compare.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n    def pytest_funcarg__db(request): ...\n```\n\n----------------------------------------\n\nTITLE: -k Option Deprecation Python\nDESCRIPTION: This snippet describes the deprecation of the special `-k '-expr'` and `-k 'expr:'` syntax. The alternative to `-k '-expr'` is `-k 'not expr'`, and users of `-k 'expr:'` are asked to open an issue.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_33\n\n\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command upgrades the pytest package using pip, the Python package installer. It ensures that the latest version of pytest is installed, including bug fixes and new features.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.3.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command is used to upgrade the pytest package to the latest version (7.0.1 in this case) using the pip package installer.  It ensures that the existing pytest installation is updated with the newest release from the PyPI repository.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.0.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Profiling Test Execution Duration - Bash\nDESCRIPTION: This command displays the slowest test durations. It limits the output to the specified number of tests (10 in this example) and considers only tests that exceed the specified minimum duration (1.0s in this example).\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npytest --durations=10 --durations-min=1.0\n```\n\n----------------------------------------\n\nTITLE: Module Level usefixtures\nDESCRIPTION: This code snippet shows how to use the `pytestmark` variable to apply a fixture to all tests in a module. In this case, the `cleandir` fixture will be used by every test in the module.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_44\n\nLANGUAGE: python\nCODE:\n```\npytestmark = pytest.mark.usefixtures(\"cleandir\")\n```\n\n----------------------------------------\n\nTITLE: Clearing Pytest Cache\nDESCRIPTION: This snippet shows how to clear the pytest cache using the `--cache-clear` option. This removes all cached data and is recommended for CI environments to ensure isolation and correctness.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/cache.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npytest --cache-clear\n```\n\n----------------------------------------\n\nTITLE: Configuration Files Search Order\nDESCRIPTION: This demonstrates the order in which configuration files will be checked for to determine the rootdir.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/customize.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n# first look for pytest.ini files\npath/pytest.ini\npath/pyproject.toml  # must contain a [tool.pytest.ini_options] table to match\npath/tox.ini         # must contain [pytest] section to match\npath/setup.cfg       # must contain [tool:pytest] section to match\npytest.ini\n... # all the way up to the root\n\n# now look for setup.py\npath/setup.py\nsetup.py\n... # all the way up to the root\n```\n\n----------------------------------------\n\nTITLE: Pytest Run with addfinalizer order confirmation\nDESCRIPTION: This snippet shows how to run a pytest test and capture the standard output using the `-s` flag. The output demonstrates the execution order of test and fixture finalizers created by `addfinalizer`, confirming the first-in-last-out order.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_22\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -s test_finalizers.py\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncollected 1 item\n\ntest_finalizers.py test_bar\n.finalizer_1\nfinalizer_2\n\n\n============================ 1 passed in 0.12s =============================\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest with pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using the pip package installer. It ensures that any existing pytest installation is updated to the newest available version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.4.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Registering Plugins with pytest_plugins (String)\nDESCRIPTION: This snippet demonstrates how to register a pytest plugin by defining the `pytest_plugins` global variable as a string in a test module or `conftest.py` file. This makes the specified plugin available to pytest.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npytest_plugins = \"myapp.testsupport.myplugin\"\n```\n\n----------------------------------------\n\nTITLE: Running pytest from root directory\nDESCRIPTION: Demonstrates how to run pytest from the root directory of a project.  This will trigger test discovery in the specified directory. Requires pytest to be installed and configured. The test files under root/ will be executed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/pythonpath.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest root/\n```\n\n----------------------------------------\n\nTITLE: Verbose Test Execution with Pytest\nDESCRIPTION: This command runs pytest in verbose mode, showing more detailed information about the test execution. This includes the test names, status, and location. It's useful for debugging and understanding the test process.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/nonpython.rst#_snippet_3\n\nLANGUAGE: pytest\nCODE:\n```\npytest -v\n```\n\n----------------------------------------\n\nTITLE: Class-Level Teardown\nDESCRIPTION: Defines teardown_class as a class method, which is called once after all test methods in the class have been executed. Cleans up resources created in setup_class.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/xunit_setup.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef teardown_class(cls):\n    \"\"\"teardown any state that was previously setup with a call to\n    setup_class.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Interactive Pytest Help\nDESCRIPTION: This example shows how to access Pytest's help documentation interactively within a Python prompt. It imports the `pytest` module and then calls the `help()` function with `pytest` as an argument.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/builtin.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\nhelp(pytest)\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information - Bash\nDESCRIPTION: This command displays help information on command line options and configuration file options. It is used to explore the available options and configurations within pytest.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npytest -h | --help\n```\n\n----------------------------------------\n\nTITLE: Injecting Items into Doctest Namespace\nDESCRIPTION: This fixture injects the `numpy` module into the doctest namespace, making it accessible within the doctests as `np`.  The `autouse=True` makes sure this fixture is automatically used by all doctests.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# content of conftest.py\nimport pytest\nimport numpy\n\n\n@pytest.fixture(autouse=True)\ndef add_np(doctest_namespace):\n    doctest_namespace[\"np\"] = numpy\n```\n\n----------------------------------------\n\nTITLE: Deprecated nose setup/teardown methods\nDESCRIPTION: This code snippet demonstrates the deprecated `setup` and `teardown` methods used in nose tests. Pytest natively uses `setup_method` and `teardown_method` instead.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass Test:\n    def setup(self):\n        self.resource = make_resource()\n\n    def teardown(self):\n        self.resource.close()\n\n    def test_foo(self): ...\n\n    def test_bar(self): ...\n```\n\n----------------------------------------\n\nTITLE: Running pytest to Show Fails\nDESCRIPTION: This shows example pytest output when the test_50.py file from above is run. The output demonstrates two failures, and the details of the failures.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/cache.rst#_snippet_1\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -q\n.................F.......F........................                   [100%]\n================================= FAILURES =================================\n_______________________________ test_num[17] _______________________________\n\ni = 17\n\n    @pytest.mark.parametrize(\"i\", range(50))\n    def test_num(i):\n        if i in (17, 25):\n>           pytest.fail(\"bad luck\")\nE           Failed: bad luck\n\ntest_50.py:7: Failed\n_______________________________ test_num[25] _______________________________\n\ni = 25\n\n    @pytest.mark.parametrize(\"i\", range(50))\n    def test_num(i):\n        if i in (17, 25):\n>           pytest.fail(\"bad luck\")\nE           Failed: bad luck\n\ntest_50.py:7: Failed\n========================= short test summary info ==========================\nFAILED test_50.py::test_num[17] - Failed: bad luck\nFAILED test_50.py::test_num[25] - Failed: bad luck\n2 failed, 48 passed in 0.12s\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest via pip\nDESCRIPTION: This command upgrades the pytest package to the latest version (3.2.1 in this case) using the pip package installer. It ensures that any existing pytest installation is replaced with the newer version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.2.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Import and Use Class in Test Module (test_testament.py)\nDESCRIPTION: This snippet demonstrates importing the `Testament` class from `domain.py` into the `test_testament.py` module and defining a test function. By default, pytest would collect the imported `Testament` class as if it were a test, which is often undesirable. This behavior can be prevented by using the `collect_imported_tests` configuration option.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/changelog/12749.feature.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom domain import Testament\n\n\ndef test_testament(): ...\n```\n\n----------------------------------------\n\nTITLE: Run xfail tests\nDESCRIPTION: Command line option to run xfail tests\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\npytest --runxfail\n```\n\n----------------------------------------\n\nTITLE: XFail without execution\nDESCRIPTION: Demonstrates how to mark a test as `xfail` and prevent it from being executed using the `run=False` parameter in `pytest.mark.xfail`. This is useful for tests that cause interpreter crashes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.xfail(run=False)\ndef test_function(): ...\n```\n\n----------------------------------------\n\nTITLE: Skip Test Example Python\nDESCRIPTION: Shows an example test function that uses `pytest.mark.skipif` with a condition evaluated using the `pytest_markeval_namespace` hook. The test is skipped if the 'color' variable is 'blue', demonstrating conditional test skipping based on custom variables.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.skipif(\"color == 'blue'\", reason=\"Color is not red\")\ndef test_func():\n    assert False\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This snippet shows how to upgrade the pytest package to the latest version using pip, the Python package installer. It uses the `--upgrade` flag to ensure that the existing version is replaced.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.0.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Using ExceptionGroup with pytest.raises in Python\nDESCRIPTION: Illustrates how to utilize `ExceptionGroup[Exception]` with `pytest.raises` within a `with` statement to preserve full typing on the `ExceptionInfo` object, allowing for type-safe exception handling in pytest.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/changelog/13115.improvement.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nwith pytest.raises(ExceptionGroup[Exception]) as exc_info:\n    some_function()\n```\n\n----------------------------------------\n\nTITLE: Module Scoped Parametrized Fixture\nDESCRIPTION: This example demonstrates the use of a module-scoped parametrized fixture. The fixture `modarg` is parametrized with two values, 'mod1' and 'mod2'.  This illustrates how pytest manages fixture instances and their finalization based on scope and parametrization.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n# content of test_module.py\nimport pytest\n\n\n@pytest.fixture(scope=\"module\", params=[\"mod1\", \"mod2\"])\ndef modarg(request):\n    param = request.param\n```\n\n----------------------------------------\n\nTITLE: Setting Doctest Encoding in pytest.ini\nDESCRIPTION: This configuration in `pytest.ini` specifies the encoding to be used for doctest files. Here, the encoding is set to `latin1`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n# content of pytest.ini\n[pytest]\ndoctest_encoding = latin1\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command is used to upgrade the pytest package to the latest version using the pip package installer.  The `-U` flag ensures that pytest and its dependencies are upgraded to the newest available versions.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.7.1.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Register Assertion Rewriting for a Module\nDESCRIPTION: This code demonstrates how to use pytest.register_assert_rewrite to enable assertion rewriting for a specific module within a pytest plugin package.  It's placed in the __init__.py file.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_plugins.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\npytest.register_assert_rewrite(\"pytest_foo.helper\")\n```\n\n----------------------------------------\n\nTITLE: Improved Test Duration Measurement Python\nDESCRIPTION: This snippet describes improved precision in test duration measurement. The `<CallInfo>.duration` attribute, created using `time.perf_counter()`, is now used to fill the `<TestReport>.duration` attribute, making it more accurate.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_44\n\n\n\n----------------------------------------\n\nTITLE: pytest.approx Example (Previous Output)\nDESCRIPTION: This example demonstrates the previous output format of `pytest.approx` using scientific notation for the tolerance.  It shows how the tolerance of 1 is represented as 1.0e+00.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/changelog/6985.improvement.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n>>> pytest.approx(42, abs=1)\n42 ± 1.0e+00\n```\n\n----------------------------------------\n\nTITLE: Configuration file example - xfail_strict\nDESCRIPTION: Shows how to configure the default value of the `strict` parameter for `xfail` using the `xfail_strict` ini option in the `pytest.ini` file.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nxfail_strict=true\n```\n\n----------------------------------------\n\nTITLE: Recommended Fixture Request in Python\nDESCRIPTION: This example shows the recommended way to use fixtures by requesting them directly in dependent fixtures, resolving the fixture resolution model issue.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef cell():\n    return ...\n\n\n@pytest.fixture\ndef full_cell(cell):\n    cell.make_full()\n    return cell\n```\n\n----------------------------------------\n\nTITLE: Enable/Disable JUnit Log Passing Tests in pytest\nDESCRIPTION: This snippet describes the addition of the `junit_log_passing_tests` ini option which allows users to control whether passing test output is logged in the JUnit XML file. This feature gives users more control over the verbosity of their JUnit reports.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_59\n\n\n\n----------------------------------------\n\nTITLE: Method-Level Setup\nDESCRIPTION: Defines setup_method to execute before each test method in a class. The optional method parameter gives access to the test method being executed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/xunit_setup.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef setup_method(self, method):\n    \"\"\"setup any state tied to the execution of the given method in a\n    class.  setup_method is invoked for every test method of a class.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Python File Discovery in Pytest\nDESCRIPTION: This snippet shows how to customize which Python files are considered as test modules using the `python_files` option in the `pytest.ini` file.  Glob-style patterns can be used to match filenames, allowing flexible control over test module discovery. The example shows multiple patterns separated by spaces.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_45\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\npython_files = test_*.py check_*.py example_*.py\n```\n\n----------------------------------------\n\nTITLE: Installing or upgrading pytest with easy_install\nDESCRIPTION: This command installs or upgrades pytest using the easy_install tool. The -U flag instructs easy_install to upgrade pytest and its dependencies if they are already installed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.3.5.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neasy_install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Defining an autouse fixture\nDESCRIPTION: This snippet demonstrates defining an autouse fixture in a subpackage's conftest.py file. The `autouse=True` means the 'mid' fixture will be automatically executed for every test in that scope (the subpackage). It appends \"mid subpackage\" to the order list, and also depends on the fixture 'b_fix' provided by a plugin.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/fixtures.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n@pytest.fixture(autouse=True)\ndef mid(order, b_fix):\n    order.append(\"mid subpackage\")\n```\n\n----------------------------------------\n\nTITLE: Configuring pytester Example Directory in pytest.ini\nDESCRIPTION: Demonstrates how to configure the `pytester_example_dir` option in the `pytest.ini` file to tell pytest where to look for example files used with `pytester.copy_example`.  This allows for abstracting test logic into separate files. Requires a `pytest.ini` file.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_plugins.rst#_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\npytester_example_dir = .\n```\n\n----------------------------------------\n\nTITLE: Deprecated Returning Non-None from test\nDESCRIPTION: This code snippet illustrates the deprecated behavior of returning a non-None value from a test function, which triggers a PytestReturnNotNoneWarning. It demonstrates a common mistake where beginners expect a boolean return value to influence the test outcome.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.parametrize(\n    [\"a\", \"b\", \"result\"],\n    [\n        [1, 2, 5],\n        [2, 3, 8],\n        [5, 3, 18],\n    ],\n)\ndef test_foo(a, b, result):\n    return foo(a, b) == result\n```\n\n----------------------------------------\n\nTITLE: Pytest Disable Test ID Escaping Configuration\nDESCRIPTION: Demonstrates how to disable the default escaping of non-ASCII characters in unicode strings used for parametrization in pytest.  This option, `disable_test_id_escaping_and_forfeit_all_rights_to_community_support`, should be used with caution due to potential side effects.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\ndisable_test_id_escaping_and_forfeit_all_rights_to_community_support = True\n```\n\n----------------------------------------\n\nTITLE: Disabling Warnings Capture with pytest.ini\nDESCRIPTION: This snippet shows how to disable the warnings plugin entirely in your `pytest.ini` file. This is useful if your test suite handles warnings using an external system.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\naddopts = -p no:warnings\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command is used to upgrade the pytest package to the latest version (4.6.9 in this case) using the pip package installer. It fetches the newest version from PyPI and installs it, replacing the previous version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.6.9.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Disabling specific loggers via pytest CLI\nDESCRIPTION: This snippet demonstrates how to disable specific loggers using the `--log-disable` option in the command line. It disables the loggers named 'main' and 'testing'.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npytest --log-disable=main --log-disable=testing\n```\n\n----------------------------------------\n\nTITLE: Generating Section Headings in Jinja2\nDESCRIPTION: This snippet generates section headings with an underline based on the section name length. It dynamically adjusts the underline character after the first section.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/changelog/_template.rst#_snippet_0\n\nLANGUAGE: Jinja2\nCODE:\n```\n{% for section in sections %}\n{% set underline = \"-\" %}\n{% if section %}\n{{section}}\n{{ underline * section|length }}{% set underline = \"~\" %}\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Pytest_warning_captured Hook Deprecation Python\nDESCRIPTION: This snippet indicates the deprecation of the `pytest_warning_captured` hook in favor of the `pytest_warning_recorded` hook. This change encourages users to migrate to the newer hook for capturing warning information.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_34\n\n\n\n----------------------------------------\n\nTITLE: Marking Individual Tests with parametrize (Python)\nDESCRIPTION: This code shows how to apply markers to individual test instances when using the `@pytest.mark.parametrize` decorator.  The 'foo' mark applies to all tests, while 'bar' is specific to the second test case.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\n@pytest.mark.foo\n@pytest.mark.parametrize(\n    (\"n\", \"expected\"), [(1, 2), pytest.param(1, 3, marks=pytest.mark.bar), (2, 3)]\n)\ndef test_increment(n, expected):\n    assert n + 1 == expected\n```\n\n----------------------------------------\n\nTITLE: Running pytest with -q flag\nDESCRIPTION: Shows the command to run pytest with the -q flag, used for a quiet test run, displaying less output.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#_snippet_10\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -q test_backends.py\n```\n\n----------------------------------------\n\nTITLE: Configuring junit_family in pytest.ini for xunit2\nDESCRIPTION: This snippet shows how to configure the `junit_family` option in `pytest.ini` to use the `xunit2` format.  This is recommended for modern tools that support this format. Users should update their configuration to utilize the new format for better compatibility.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\njunit_family=xunit2\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Parametrization of a Test - Bash\nDESCRIPTION: This command runs a specific parametrization of a test function. The module, function name, and parameters are specified with :: and [] respectively.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/test_mod.py::test_func[x1,y2]\n```\n\n----------------------------------------\n\nTITLE: Deprecated msg= in pytest.fail/skip/exit\nDESCRIPTION: This code snippet shows the deprecated use of `msg` in `pytest.fail`, `pytest.skip`, and `pytest.exit`. The keyword argument `reason` should be used instead.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef test_fail_example():\n    # old\n    pytest.fail(msg=\"foo\")\n    # new\n    pytest.fail(reason=\"bar\")\n\n\ndef test_skip_example():\n    # old\n    pytest.skip(msg=\"foo\")\n    # new\n    pytest.skip(reason=\"bar\")\n\n\ndef test_exit_example():\n    # old\n    pytest.exit(msg=\"foo\")\n    # new\n    pytest.exit(reason=\"bar\")\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using pip, the Python package installer. It ensures that the user has the newest features and bug fixes available in the pytest library. This snippet is a standard command-line instruction for managing Python packages.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-6.0.0rc1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: TerminalWriter Class Changes Python\nDESCRIPTION: This snippet describes breaking changes related to the replacement of the `py` library's `TerminalWriter` class with pytest's own implementation. The changes include output flushing behavior, removal of Windows console support, removal of `bytes` writing support, and removal of several methods and arguments.  Plugins using the old class need to adapt to the new API.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_28\n\n\n\n----------------------------------------\n\nTITLE: Asserting on log records with record_tuples\nDESCRIPTION: This snippet uses `caplog.record_tuples` to verify that specific messages have been logged with a given logger name, severity, and message.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef test_foo(caplog):\n    logging.getLogger().info(\"boo %s\", \"arg\")\n\n    assert caplog.record_tuples == [(\"root\", logging.INFO, \"boo arg\")]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Class Instance Sharing Issues (Python)\nDESCRIPTION: This code illustrates a common pitfall when using class attributes in test classes: each test gets a new instance, preventing undesirable state sharing. This is shown with `TestClassDemoInstance`, where `test_two` fails because `value` is not carried over from `test_one`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# content of test_class_demo.py\nclass TestClassDemoInstance:\n    value = 0\n\n    def test_one(self):\n        self.value = 1\n        assert self.value == 1\n\n    def test_two(self):\n        assert self.value == 1\n```\n\n----------------------------------------\n\nTITLE: Setting Verbosity Level for Test Cases in Pytest\nDESCRIPTION: This configuration sets a verbosity level specifically for test case execution output, overriding the application-wide verbosity level set via the `-v` command-line option. A value of \"auto\" explicitly uses the global verbosity level.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_57\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nverbosity_test_cases = 2\n```\n\n----------------------------------------\n\nTITLE: Specify a Plugin Module using pytest_plugins\nDESCRIPTION: This shows how to declare a single plugin module using the pytest_plugins variable.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_plugins.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npytest_plugins = \"myapp.testsupport.myplugin\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest using Pip\nDESCRIPTION: This command upgrades pytest to the latest version using the pip package installer. It ensures that users have the most recent features and bug fixes available.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.6.0.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: pytest.warns Usage\nDESCRIPTION: This snippet relates to enhancements in warning matching using `pytest.warns`.  It enables multi-line display of warnings and improves the comparison process.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npytest.warns\n```\n\n----------------------------------------\n\nTITLE: Setting Log Date Format in Pytest\nDESCRIPTION: This example configures the date format for logging in pytest using the `log_date_format` option within the `pytest.ini` file. The format string should be compatible with `time.strftime`. This allows for consistent and readable date formatting in log messages.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_34\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nlog_date_format = %Y-%m-%d %H:%M:%S\n```\n\n----------------------------------------\n\nTITLE: UnboundLocalError fix in _pytest.terminal in Python\nDESCRIPTION: This snippet addresses an `UnboundLocalError` in `_pytest.terminal.pytest_report_teststatus()` that occurred when plugins returned report objects in an unconventional state. The fix sets the initial value of the `letter` variable before the if-block cascade to ensure it always has a value, preventing the error.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nFix ``UnboundLocalError: local variable 'letter' referenced before\n  assignment`` in ``_pytest.terminal.pytest_report_teststatus()``\n  when plugins return report objects in an unconventional state.\n\n  This was making ``pytest_report_teststatus()`` skip\n  entering if-block branches that declare the ``letter`` variable.\n\n  The fix was to set the initial value of the ``letter`` before\n  the if-block cascade so that it always has a value.\n```\n\n----------------------------------------\n\nTITLE: Preventing Class Discovery with __test__ Attribute\nDESCRIPTION: This Python code snippet shows how to prevent pytest from discovering classes as tests by setting the `__test__` attribute to `False`.  This attribute is checked during the test collection process, and any class with `__test__ = False` will be ignored.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# Will not be discovered as a test\nclass TestClass:\n    __test__ = False\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using pip. It ensures that the user has the newest bug fixes and features available in the 5.1.2 release.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.1.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Doctest Text File Example\nDESCRIPTION: This is an example of a doctest text file. It contains a simple interaction with the Python interpreter, where a variable is assigned a value and then the value is printed. Pytest will execute these examples and verify the output.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# content of test_example.txt\n\nhello this is a doctest\n>>> x = 3\n>>> x\n3\n```\n\n----------------------------------------\n\nTITLE: Disabling Bytecode Writing\nDESCRIPTION: This snippet demonstrates how to disable the creation of .pyc files by setting sys.dont_write_bytecode to True.  This is typically added to the top of a conftest.py file to prevent caching rewritten modules.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\nsys.dont_write_bytecode = True\n```\n\n----------------------------------------\n\nTITLE: Assert Outcomes Usage Example Python\nDESCRIPTION: This code demonstrates how to update test assertions to use the plural form when checking test outcomes with `assert_outcomes()`.  It shows the change required after the `parseoutcomes()` API was updated to consistently return plural forms for nouns.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nresult = testdir.runpytest()\nresult.assert_outcomes(error=1)\n```\n\nLANGUAGE: python\nCODE:\n```\nresult = testdir.runpytest()\nresult.assert_outcomes(errors=1)\n```\n\n----------------------------------------\n\nTITLE: Metafunc.addcall Replacement\nDESCRIPTION: Illustrates how to replace `Metafunc.addcall` with `pytest.Metafunc.parametrize` for parameterizing tests.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_generate_tests(metafunc):\n    metafunc.addcall({\"i\": 1}, id=\"1\")\n    metafunc.addcall({\"i\": 2}, id=\"2\")\n```\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_generate_tests(metafunc):\n    metafunc.parametrize(\"i\", [1, 2], ids=[\"1\", \"2\"])\n```\n\n----------------------------------------\n\nTITLE: Require/Load Plugins in a Test Module or conftest.py\nDESCRIPTION: This snippet illustrates how to load additional plugins within a test module or conftest.py using the pytest_plugins global variable. It takes a list of plugin names or a single module path as input.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_plugins.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npytest_plugins = [\"name1\", \"name2\"]\n```\n\n----------------------------------------\n\nTITLE: Writing a Simple Acceptance Test with pytest\nDESCRIPTION: This code defines a simple acceptance test function `test_some_acceptance_aspect` that uses the `accept` fixture.  It creates a subdirectory within the temporary directory managed by the `accept` fixture and then executes the `ls -la` command.  The test asserts that the name of the subdirectory is present in the output of the command.  It depends on the `AcceptFixture` defined in `conftest.py`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/attic.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef test_some_acceptance_aspect(accept):\n    accept.tmpdir.mkdir(\"somesub\")\n    result = accept.run(\"ls\", \"-la\")\n    assert \"somesub\" in result\n```\n\n----------------------------------------\n\nTITLE: Implementing pytest_cmdline_preparse Hook (Deprecated)\nDESCRIPTION: This snippet demonstrates the deprecated `pytest_cmdline_preparse` hook and its replacement with `pytest_load_initial_conftests`.  It shows the function signature change and the updated arguments. Users should migrate to the new hook to avoid issues in future versions.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_cmdline_preparse(config: Config, args: List[str]) -> None: ...\n\n\n# becomes:\n\n\ndef pytest_load_initial_conftests(\n    early_config: Config, parser: Parser, args: List[str]\n) -> None: ...\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using pip, the Python package installer. It ensures that the user obtains the newest bug fixes and features.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.3.1.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Doctest in a Python Docstring\nDESCRIPTION: This code snippet shows a doctest embedded within a docstring of a Python function. The doctest tests that calling the function `something()` returns the value 42.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# content of mymodule.py\ndef something():\n    \"\"\"a doctest in a docstring\n    >>> something()\n    42\n    \"\"\"\n    return 42\n```\n\n----------------------------------------\n\nTITLE: Monkeypatching Environment Variables in Fixtures - Python\nDESCRIPTION: This example shows how to use `monkeypatch` within pytest fixtures to set up mock environment variables for tests.  `mock_env_user` sets the `USER` environment variable, and `mock_env_missing` removes it. Tests then reference these fixtures.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\n@pytest.fixture\ndef mock_env_user(monkeypatch):\n    monkeypatch.setenv(\"USER\", \"TestingUser\")\n\n\n@pytest.fixture\ndef mock_env_missing(monkeypatch):\n    monkeypatch.delenv(\"USER\", raising=False)\n\n\n# notice the tests reference the fixtures for mocks\ndef test_upper_to_lower(mock_env_user):\n    assert get_os_user_lower() == \"testinguser\"\n\n\ndef test_raise_exception(mock_env_missing):\n    with pytest.raises(OSError):\n        _ = get_os_user_lower()\n```\n\n----------------------------------------\n\nTITLE: Pytest JUnit Suite Name Configuration\nDESCRIPTION: Configures the name of the root test suite XML item in the JUnit report using the `junit_suite_name` option.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_28\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\njunit_suite_name = my_suite\n```\n\n----------------------------------------\n\nTITLE: One-Time Activation of Argcomplete for Pytest\nDESCRIPTION: This command activates argcomplete for pytest for the current bash session only. It uses eval to execute the output of register-python-argcomplete, setting up the necessary environment variables.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/bash-completion.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\neval \"$(register-python-argcomplete pytest)\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest via pip\nDESCRIPTION: This command upgrades the pytest package to the latest version available on PyPI using pip. It ensures that all dependencies are met during the upgrade process.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.6.3.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Pytest_doctest_prepare_content Hook Removal Python\nDESCRIPTION: This snippet documents the removal of the `pytest_doctest_prepare_content` hook specification, which hasn't been triggered by pytest for at least 10 years. This is a breaking change for plugins that might have been using or relying on this hook.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_31\n\n\n\n----------------------------------------\n\nTITLE: Marking Parametrized Values in Pytest (Old Syntax)\nDESCRIPTION: This snippet illustrates the deprecated syntax for marking individual values within `@pytest.mark.parametrize`. The old syntax is shown for historical purposes and should be updated to use the `pytest.param` function. This approach was used in pytest versions prior to 3.1.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/historical-notes.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\n@pytest.mark.parametrize(\n    \"test_input,expected\", [(\"3+5\", 8), (\"2+4\", 6), pytest.mark.xfail((\"6*9\", 42))]\n)\ndef test_eval(test_input, expected):\n    assert eval(test_input) == expected\n```\n\n----------------------------------------\n\nTITLE: Recursive Rich Comparison for Dataclasses/Attrs Classes Python\nDESCRIPTION: This snippet indicates that rich comparison for dataclasses and `attrs`-classes is now recursive, providing more in-depth comparison capabilities.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_45\n\n\n\n----------------------------------------\n\nTITLE: Collecting Tests Only with Pytest\nDESCRIPTION: This command uses the `--collect-only` option to instruct pytest to only collect the tests and display the test collection tree without executing them. This is helpful for verifying that pytest is correctly identifying and organizing the tests.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/nonpython.rst#_snippet_4\n\nLANGUAGE: pytest\nCODE:\n```\npytest --collect-only\n```\n\n----------------------------------------\n\nTITLE: Implementing pytest_collection_modifyitems hook function in Python\nDESCRIPTION: This code snippet demonstrates a possible implementation of the `pytest_collection_modifyitems` hook function. It receives the `config` (pytest config object) and `items` (list of collected test items) as arguments. The `session` argument is not passed in because it's not listed in the function signature, which allows for future compatibility.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_hook_functions.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_collection_modifyitems(config, items):\n    # called after collection is completed\n    # you can modify the ``items`` list\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring pytest hooks using markers (Deprecated)\nDESCRIPTION: This snippet demonstrates the deprecated method of configuring pytest hooks using markers like `@pytest.mark.tryfirst`, and shows the recommended approach using the `@pytest.hookimpl` decorator. This change promotes a clearer API for pytest plugin development.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.tryfirst\ndef pytest_runtest_call(): ...\n\n\n# or\ndef pytest_runtest_call(): ...\n\n\npytest_runtest_call.tryfirst = True\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest via pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using pip. It ensures that you have the newest features and bug fixes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.2.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Wrapping Async Fixture in Synchronous Fixture (Recommended)\nDESCRIPTION: This code shows the recommended way of handling synchronous tests depending on asynchronous fixtures using a synchronous fixture wrapper. This approach prevents unawaited coroutine warnings and ensures predictable behavior when using async fixtures in synchronous tests.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport pytest\n\n\n@pytest.fixture\ndef unawaited_fixture():\n    async def inner_fixture():\n        return 1\n\n    return inner_fixture()\n\n\ndef test_foo(unawaited_fixture):\n    assert 1 == asyncio.run(unawaited_fixture)\n```\n\n----------------------------------------\n\nTITLE: Example Python Module for Python 2\nDESCRIPTION: This Python module (`pkg/module_py2.py`) is designed to be used only in Python 2 environments. The `test_only_on_python2` function includes an exception handling block that is valid in Python 2 but not in Python 3.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# content of pkg/module_py2.py\ndef test_only_on_python2():\n    try:\n        assert 0\n    except Exception, e:\n        pass\n```\n\n----------------------------------------\n\nTITLE: Disabling captured content reporting on failed tests\nDESCRIPTION: This snippet demonstrates how to completely disable reporting of captured content (stdout, stderr and logs) on failed tests using the `--show-capture=no` option.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/logging.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npytest --show-capture=no\n```\n\n----------------------------------------\n\nTITLE: Executing Doctest with Pytest\nDESCRIPTION: This snippet demonstrates a doctest example that can be executed using pytest. It contains an expression `1 + 1` and its expected output `2`. Pytest will automatically discover and execute this doctest.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/testing/freeze/tests/test_doctest.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> 1 + 1\n2\n```\n\n----------------------------------------\n\nTITLE: Deferring pytest-xdist Hook Implementation in Python\nDESCRIPTION: This snippet demonstrates how to defer the implementation of a pytest-xdist hook function to a separate plugin. It checks if the xdist plugin is installed and registers a DeferPlugin instance conditionally. This approach avoids validation failures if the xdist plugin is not present and allows for conditional hook installation.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_hook_functions.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# contents of myplugin.py\n\n\nclass DeferPlugin:\n    \"\"\"Simple plugin to defer pytest-xdist hook functions.\"\"\"\n\n    def pytest_testnodedown(self, node, error):\n        \"\"\"standard xdist hook function.\"\"\"\n\n\ndef pytest_configure(config):\n    if config.pluginmanager.hasplugin(\"xdist\"):\n        config.pluginmanager.register(DeferPlugin())\n```\n\n----------------------------------------\n\nTITLE: Asserting Absence of Text with pytest.LineMatcher in Python\nDESCRIPTION: Illustrates how to assert that a specific text is not present in a captured output using pytest's LineMatcher. It displays the previous idiom using the 'in' operator to check for the absence of text within the result.  The LineMatcher's new functions will provide better output on failure.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nresult = testdir.runpytest()\nassert text in result.stdout.str()\n```\n\n----------------------------------------\n\nTITLE: Pytest Autouse Fixture Temporary Effects\nDESCRIPTION: This example demonstrates the temporary effect of autouse fixtures. If one autouse fixture requests a non-autouse fixture, that does not mean the non-autouse fixture becomes an autouse fixture for all contexts that it can apply to. It effectively becomes an autouse fixture only for the contexts the real autouse fixture can apply to.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/fixtures.rst#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n# content of test_fixtures_order_autouse_temp_effects.py\nimport pytest\n\n@pytest.fixture()\ndef c1():\n    print(\"\\nFixture c1\")\n    return \"c1\"\n\n@pytest.fixture()\ndef c2():\n    print(\"\\nFixture c2\")\n    return \"c2\"\n\n@pytest.fixture(autouse=True)\ndef c3(c2):\n    print(\"\\nFixture c3\")\n    return \"c3\"\n\nclass TestClassWithAutouse:\n    def test_req(self, c1):\n        print(\"\\nTest requiring c1\")\n        assert True\n\n    def test_no_req(self):\n        print(\"\\nTest not requiring c1\")\n        assert True\n\nclass TestClassWithoutAutouse:\n    def test_no_c2(self):\n        print(\"\\nTest without c2\")\n        assert True\n```\n\n----------------------------------------\n\nTITLE: -k Option Directory Matching Update Python\nDESCRIPTION: This snippet describes a breaking change for the `-k` option, which now no longer matches against directory names outside the test session root.  Additionally, `pytest.Package.name` now only contains the directory name containing `__init__.py`, improving consistency with other nodes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_26\n\n\n\n----------------------------------------\n\nTITLE: Cherry-picking a commit for backporting\nDESCRIPTION: This command cherry-picks a specific revision (commit) into the current branch, adding a reference to the original commit with the `-x` option. It is used in the process of backporting bug fixes to older releases.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngit cherry-pick -x -m1 REVISION\n```\n\n----------------------------------------\n\nTITLE: Configuration File Example (pytest.ini)\nDESCRIPTION: This code snippet shows how to configure pytest to ignore PytestRemovedIn8Warning warnings, converting them back to warnings instead of errors. This is a temporary workaround before upgrading to pytest 8.1.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nfilterwarnings =\n    ignore::pytest.PytestRemovedIn8Warning\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command demonstrates how to upgrade pytest to the latest version using pip, the Python package installer. The `--upgrade` flag ensures that any existing version is replaced with the newest available version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.7.3.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Ignoring Pytest Deprecation Warnings in pytest.ini\nDESCRIPTION: This code snippet demonstrates how to temporarily suppress `PytestDeprecationWarning` errors by configuring the `filterwarnings` option in the `pytest.ini` file. This allows users to continue using deprecated features in pytest 5.0.X series before they are completely removed in pytest 5.1. It is important to remove this configuration before upgrading to pytest 5.1.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_55\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nfilterwarnings =\n    ignore::pytest.PytestDeprecationWarning\n```\n\n----------------------------------------\n\nTITLE: Test Failure Longrepr Attribute Update Python\nDESCRIPTION: This snippet describes a breaking change where `TestReport.longrepr` is now always an instance of `ReprExceptionInfo`. Previously, it was a `str` under specific failure conditions. This ensures consistent type handling for test failure representations.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Node Constructor Without kwargs Deprecation\nDESCRIPTION: This code snippet demonstrates the deprecated way of defining a custom node constructor and the recommended way to include **kwargs to avoid conflicts with pytest's internal arguments.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass CustomItem(pytest.Item):\n    def __init__(self, name, parent, additional_arg):\n        super().__init__(name, parent)\n        self.additional_arg = additional_arg\n```\n\n----------------------------------------\n\nTITLE: Parametrization Example (Python)\nDESCRIPTION: This snippet demonstrates the simplified pytest.mark.parametrize() signature, enabling the use of a CSV-separated string to specify argnames. This simplifies parametrization and makes it more readable. Both shown forms are valid.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.4.0.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npytest.mark.parametrize(\"input,expected\",  [(1,2), (2,3)])\n```\n\nLANGUAGE: python\nCODE:\n```\npytest.mark.parametrize((\"input\", \"expected\"), ...)\n```\n\n----------------------------------------\n\nTITLE: Explicitly checking for None\nDESCRIPTION: This code snippet demonstrates the correct way to explicitly check if a variable is None in pytest. This assertion will not trigger the warning introduced in pytest 4.1.0, because it explicitly checks for None.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_66\n\nLANGUAGE: python\nCODE:\n```\nassert variable is None\n```\n\n----------------------------------------\n\nTITLE: XFail with specific exception\nDESCRIPTION: Illustrates how to specify the expected exception type using the `raises` parameter in `pytest.mark.xfail`. If a different exception occurs, the test is considered a regular failure.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.xfail(raises=RuntimeError)\ndef test_function(): ...\n```\n\n----------------------------------------\n\nTITLE: Print Pytest Command Line Options and Config File Settings\nDESCRIPTION: This command prints all available command-line options and configuration file settings registered by installed pytest plugins. It's useful for understanding the available configuration options.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/customize.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest -h   # prints options _and_ config file settings\n```\n\n----------------------------------------\n\nTITLE: Creating a maintenance branch (Major Release) - Git\nDESCRIPTION: This snippet demonstrates how to create a new maintenance branch for a major release (e.g., 8.0.x). It fetches the latest changes from the upstream repository, creates a new branch based on the main branch, and then pushes the new branch to the upstream repository.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/RELEASING.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\ngit branch 8.0.x upstream/main\ngit push upstream 8.0.x\n```\n\n----------------------------------------\n\nTITLE: pytest.ExceptionInfo.match Usage\nDESCRIPTION: This snippet relates to enhancements in exception matching through `pytest.ExceptionInfo.match`, as returned by `pytest.raises`.  The enhancements improve the comparison process during exception verification.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\npytest.ExceptionInfo.match\n```\n\n----------------------------------------\n\nTITLE: Marks in pytest.mark.parametrize\nDESCRIPTION: Demonstrates how to update code that applies marks directly to values in `pytest.mark.parametrize` to use `pytest.param` instead.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.parametrize(\n    \"a, b\",\n    [\n        (3, 9),\n        pytest.mark.xfail(reason=\"flaky\")(6, 36),\n        (10, 100),\n        (20, 200),\n        (40, 400),\n        (50, 500),\n    ],\n)\ndef test_foo(a, b): ...\n```\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.parametrize(\n    \"a, b\",\n    [\n        (3, 9),\n        pytest.param(6, 36, marks=pytest.mark.xfail(reason=\"flaky\")),\n        (10, 100),\n        (20, 200),\n        (40, 400),\n        (50, 500),\n    ],\n)\ndef test_foo(a, b): ...\n```\n\n----------------------------------------\n\nTITLE: Checking for exact exception type with pytest.raises\nDESCRIPTION: This snippet demonstrates how to check for a specific exception type using the `excinfo.type` attribute. It raises a `NotImplementedError` but asserts that `RuntimeError` is raised, showcasing that `pytest.raises` matches subclasses, and how to specifically check the exact type.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef test_foo_not_implemented():\n    def foo():\n        raise NotImplementedError\n\n    with pytest.raises(RuntimeError) as excinfo:\n        foo()\n    assert excinfo.type is RuntimeError\n```\n\n----------------------------------------\n\nTITLE: Importing ExitCode from Pytest\nDESCRIPTION: This code snippet demonstrates how to import the ExitCode enum from the pytest library.  It allows access to the different exit codes pytest can return after test execution.  This is part of the public API.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/exit-codes.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest import ExitCode\n```\n\n----------------------------------------\n\nTITLE: Deprecated nose.tools.with_setup decorator\nDESCRIPTION: This code snippet shows the deprecated `with_setup` decorator from `nose.tools`.  This must be ported to a pytest style.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom nose.tools import with_setup\n\n\ndef setup_some_resource(): ...\n\n\ndef teardown_some_resource(): ...\n\n\n@with_setup(setup_some_resource, teardown_some_resource)\ndef test_foo(): ...\n```\n\n----------------------------------------\n\nTITLE: Installing pytest using pip\nDESCRIPTION: This command upgrades pytest to the latest version using the pip package manager. It ensures that the installed pytest version is up-to-date with the most recent features and bug fixes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.9.2.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Customizing Doctest Output Format in Bash\nDESCRIPTION: These commands configure pytest to use different output formats for doctest failures, utilizing options such as `none`, `udiff`, `cdiff`, `ndiff`, and `only_first_failure`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/doctest.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npytest --doctest-modules --doctest-report none\npytest --doctest-modules --doctest-report udiff\npytest --doctest-modules --doctest-report cdiff\npytest --doctest-modules --doctest-report ndiff\npytest --doctest-modules --doctest-report only_first_failure\n```\n\n----------------------------------------\n\nTITLE: Pytest Log CLI Date Format Configuration\nDESCRIPTION: Sets a time.strftime-compatible string for formatting dates in live logging using the `log_cli_date_format` option.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nlog_cli_date_format = %Y-%m-%d %H:%M:%S\n```\n\n----------------------------------------\n\nTITLE: Tagging Release Cherry-Pick Merge Commit - Git\nDESCRIPTION: This snippet shows how to tag the release cherry-pick merge commit in the main branch with a dev tag for the next feature release.  It checks out the main branch, pulls the latest changes, creates the tag and pushes to upstream.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/RELEASING.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\ngit pull\ngit tag MAJOR.{MINOR+1}.0.dev0\ngit push upstream MAJOR.{MINOR+1}.0.dev0\n```\n\n----------------------------------------\n\nTITLE: pytest Renaming Rules\nDESCRIPTION: Illustrates the renaming rules for accessing pytest functionalities from the old `py.test` namespace to the new `pytest` module. It covers renaming of core objects, collection classes, and the command-line entry point.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/naming20.rst#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\npy.test.XYZ          -> pytest.XYZ\npy.test.collect.XYZ  -> pytest.XYZ\npy.test.cmdline.main -> pytest.main\n```\n\n----------------------------------------\n\nTITLE: Example Arguments File - Text\nDESCRIPTION: This is an example of the contents of a file containing arguments for pytest, with each argument on a new line. It shows how to specify module files, specific test functions (with parametrization), and markers.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\ntests/test_file.py\ntests/test_mod.py::test_func[x1,y2]\ntests/test_mod.py::TestClass\n-m slow\n```\n\n----------------------------------------\n\nTITLE: Configuring --pyargs permanently with addopts\nDESCRIPTION: This snippet shows how to use the `addopts` option in `pytest.ini` to make the `--pyargs` option permanent, allowing pytest to interpret command-line arguments as package names.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n# content of pytest.ini\n[pytest]\naddopts = --pyargs\n```\n\n----------------------------------------\n\nTITLE: Running GitHub Workflow (Minor Release) - GitHub CLI\nDESCRIPTION: This snippet uses the GitHub CLI (`gh`) to trigger the `prepare-release-pr.yml` workflow with specific inputs for a minor release. It sets the branch, major release, and prerelease parameters. This automates the creation of a release pull request.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/RELEASING.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngh workflow run prepare-release-pr.yml -f branch=7.1.x -f major=no -f prerelease=\n```\n\n----------------------------------------\n\nTITLE: Accessing Marker Information with get_closest_marker in Pytest\nDESCRIPTION: This snippet demonstrates how to use `Node.get_closest_marker(name)` to retrieve marker information when marks overwrite each other, focusing on retrieving a single, relevant marker from a test item in pytest. It replaces the deprecated `item.get_marker(name)` function.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/historical-notes.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# replace this:\nmarker = item.get_marker(\"log_level\")\nif marker:\n    level = marker.args[0]\n\n# by this:\nmarker = item.get_closest_marker(\"log_level\")\nif marker:\n    level = marker.args[0]\n```\n\n----------------------------------------\n\nTITLE: Asserting exception group structure with flatten_subgroups and allow_unwrapped\nDESCRIPTION: This snippet demonstrates the use of `flatten_subgroups` and `allow_unwrapped` parameters in `pytest.RaisesGroup`. These parameters control how the structure of nested exception groups is handled during assertion.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/assert.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef test_structure():\n    with pytest.RaisesGroup(pytest.RaisesGroup(ValueError)):\n        raise ExceptionGroup(\"\", (ExceptionGroup(\"\", (ValueError(),)),))\n    with pytest.RaisesGroup(ValueError, flatten_subgroups=True):\n        raise ExceptionGroup(\"1st group\", [ExceptionGroup(\"2nd group\", [ValueError()])])\n    with pytest.RaisesGroup(ValueError, allow_unwrapped=True):\n        raise ValueError\n```\n\n----------------------------------------\n\nTITLE: Example Function with Docstring (Python)\nDESCRIPTION: This is an example Python function demonstrating the Sphinx docstring format. It shows how to document parameters, return values, and raised exceptions, including type hints and version added information.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef my_function(arg: ArgType) -> Foo:\n    \"\"\"Do important stuff.\n\n    More detailed info here, in separate paragraphs from the subject line.\n    Use proper sentences -- start sentences with capital letters and end\n    with periods.\n\n    Can include annotated documentation:\n\n    :param short_arg: An argument which determines stuff.\n    :param long_arg:\n        A long explanation which spans multiple lines, overflows\n        like this.\n    :returns: The result.\n    :raises ValueError:\n        Detailed information when this can happen.\n\n    .. versionadded:: 6.0\n\n    Including types into the annotations above is not necessary when\n    type-hinting is being used (as in this example).\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip (Python)\nDESCRIPTION: This command upgrades the pytest package to the latest version using pip, the Python package installer. The -U flag ensures that pytest and its dependencies are upgraded to the newest available versions.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.9.1.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Generating Docs, Changelog, and Announcements - Tox\nDESCRIPTION: This snippet shows how to use `tox` to generate the documentation, changelog, and announcements for a new release. It requires the `MAJOR.MINOR.PATCH` version as an argument.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/RELEASING.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntox -e release -- MAJOR.MINOR.PATCH\n```\n\n----------------------------------------\n\nTITLE: Creating a maintenance branch (Minor Release) - Git\nDESCRIPTION: This snippet shows how to create a maintenance branch for a new minor release (e.g., 7.1.x) from the main branch. It fetches the latest changes from the upstream repository, creates a new branch based on the main branch, and pushes the new branch to the upstream repository.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/RELEASING.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\ngit branch 7.1.x upstream/main\ngit push upstream 7.1.x\n```\n\n----------------------------------------\n\nTITLE: Listing Pytest Fixtures\nDESCRIPTION: This command shows the available fixtures in pytest, including built-in and custom fixtures. Adding the `-v` option includes fixtures with leading underscores.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/getting-started.rst#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npytest --fixtures   # shows builtin and custom fixtures\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Repository and Fetching Tags\nDESCRIPTION: These commands set the main pytest repository as the upstream and fetch the tags.  This ensures you have all the tags for testing locally.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git remote add upstream https://github.com/pytest-dev/pytest\n$ git fetch upstream --tags\n```\n\n----------------------------------------\n\nTITLE: Ignoring Paths During Pytest Test Collection\nDESCRIPTION: This snippet demonstrates a directory structure used to illustrate how to ignore specific test directories and modules during pytest collection using the --ignore option. The example provides a clear representation of the file organization, which is useful for understanding the effect of ignore rules.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntests/\n|-- example\n|   |-- test_example_01.py\n|   |-- test_example_02.py\n|   '-- test_example_03.py\n|-- foobar\n|   |-- test_foobar_01.py\n|   |-- test_foobar_02.py\n|   '-- test_foobar_03.py\n'-- hello\n    '-- world\n        |-- test_world_01.py\n        |-- test_world_02.py\n        '-- test_world_03.py\n```\n\n----------------------------------------\n\nTITLE: Running Tests in a Directory - Bash\nDESCRIPTION: This command runs all tests found within the specified directory and its subdirectories. It is useful for testing a group of related modules.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest testing/\n```\n\n----------------------------------------\n\nTITLE: Installing Pytest with easy_install\nDESCRIPTION: This command is used to install or upgrade Pytest using the easy_install package installer. The -U flag ensures that Pytest is upgraded to the latest version if it is already installed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.0.0.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neasy_install -U pytest\n```\n\n----------------------------------------\n\nTITLE: FixtureDef Cached Result Check Replacement (Python)\nDESCRIPTION: Recommends replacing checks for the 'cached_result' attribute of 'FixtureDef' with an explicit check for 'None'.  This is necessary because the attribute is now set to 'None' instead of being deleted when the result is unavailable. Suggests setting the attribute to None instead of deleting it.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_51\n\nLANGUAGE: Python\nCODE:\n```\nfixturedef.cached_result is not None\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This snippet shows how to upgrade the pytest package to the latest version using the pip package manager. It ensures that any existing version of pytest is replaced with the newer version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.4.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Installing pytest 7.0.0rc1 using pip\nDESCRIPTION: This command installs the pytest 7.0.0rc1 prerelease version using pip. It ensures users are using the specific release candidate for testing purposes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-7.0.0rc1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pytest==7.0.0rc1\n```\n\n----------------------------------------\n\nTITLE: Running pytest directly after editable install\nDESCRIPTION: This command runs pytest directly on a specified test module (testing/test_config.py) within a virtual environment. It's used for executing tests after installing pytest in editable mode.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest testing/test_config.py\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip (Python)\nDESCRIPTION: This snippet demonstrates how to upgrade pytest to the latest version using the pip package installer. It uses the `-U` flag to upgrade the package if it is already installed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.8.6.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Defining Test Method with Positional-Only and Keyword-Only Parameters in Python\nDESCRIPTION: This code snippet demonstrates how to define a test method within a class in Python, using positional-only and keyword-only parameters. The `self` parameter is marked as positional-only using the `/` syntax, and the `fixture` parameter is marked as keyword-only using the `*` syntax. This syntax previously caused an error in pytest but is now correctly handled.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/changelog/13377.bugfix.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass TestClass:\n\n    def test_method(self, /, *, fixture): ...\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests with Configuration Values in Pytest (String Condition)\nDESCRIPTION: This snippet shows how to skip tests based on a configuration value using a string condition within `@pytest.mark.skipif`. The configuration value is accessed via `config.getvalue('db')`.  Note this pattern may not work in `conftest.py` due to argument parsing order.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/historical-notes.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.skipif(\"not config.getvalue('db')\")\ndef test_function(): ...\n```\n\n----------------------------------------\n\nTITLE: Setting Log File Date Format in Pytest\nDESCRIPTION: This snippet shows how to customize the date format specifically for log files in pytest, using the `log_file_date_format` option in the `pytest.ini` file. This provides independent control over the date format used in log files versus other logging outputs.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_36\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nlog_file_date_format = %Y-%m-%d %H:%M:%S\n```\n\n----------------------------------------\n\nTITLE: pytest_funcarg__ Prefix Replacement\nDESCRIPTION: Shows how to migrate from using the `pytest_funcarg__` prefix for defining fixtures to using the `@pytest.fixture` decorator.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_funcarg__data():\n    return SomeData()\n```\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef data():\n    return SomeData()\n```\n\n----------------------------------------\n\nTITLE: Decorating a pytest funcarg in a Test Module\nDESCRIPTION: This code demonstrates how to decorate a funcarg (`accept`) within a specific test module. The `pytest_funcarg__accept` function in the test module overrides the one defined in `conftest.py`.  It first retrieves the value of the original `accept` fixture using `request.getfuncargvalue`. It then creates a subdirectory named `special` within the temporary directory managed by the original `accept` fixture and returns the modified fixture. This allows for module-specific customization of fixtures. Dependencies include pytest.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/attic.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_funcarg__accept(request):\n    # call the next factory (living in our conftest.py)\n    arg = request.getfuncargvalue(\"accept\")\n    # create a special layout in our tempdir\n    arg.tmpdir.mkdir(\"special\")\n    return arg\n\n\nclass TestSpecialAcceptance:\n    def test_sometest(self, accept):\n        assert accept.tmpdir.join(\"special\").check()\n```\n\n----------------------------------------\n\nTITLE: Running pytest from root directory\nDESCRIPTION: Demonstrates how to run pytest from the root directory of a project.  This will trigger test discovery in the specified directory. Requires pytest to be installed and configured. The test files under root/ will be executed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/explanation/pythonpath.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest root/\n```\n\n----------------------------------------\n\nTITLE: Testdir.run().parseoutcomes() Return Value Update Python\nDESCRIPTION: This snippet describes a breaking change where `Testdir.run().parseoutcomes()` now consistently returns parsed nouns in plural form. This ensures that the API always returns plural forms, requiring updates to existing test assertions that relied on singular forms.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Collection Tree Structure (New)\nDESCRIPTION: Example showing the new collection tree structure after the changes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n<Session>\n  <Dir myroot>\n    <Dir top>\n      <Dir aaa>\n        <Module test_aaa.py>\n          <Function test_it>\n      <Module test_a.py>\n        <Function test_it>\n      <Package test_b>\n        <Module test_b.py>\n          <Function test_it>\n      <Module test_c.py>\n        <Function test_it>\n      <Package zzz>\n        <Module test_zzz.py>\n          <Function test_it>\n```\n\n----------------------------------------\n\nTITLE: Demonstrate broken pytest.approx equality check\nDESCRIPTION: This code snippet demonstrates the issue where pytest.approx incorrectly returns False when comparing a list of numpy.bool_ values to a list of Python bool values. This behavior was present in pytest versions 8.3.4 and 8.3.5.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/changelog/13047.bugfix.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> from pytest import approx\n>>> [np.True_, np.True_] == pytest.approx([True, True])\nFalse\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest via pip\nDESCRIPTION: This command is used to upgrade pytest to the latest version using the pip package installer.  The `-U` flag ensures that pip upgrades the package if it's already installed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.3.0.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoints with pytest.set_trace() in Python\nDESCRIPTION: This code snippet demonstrates how to set a breakpoint in pytest versions prior to 2.4 using the `pytest.set_trace()` method.  This invokes the PDB debugger and allows tracing the execution of the test function.  It requires the pytest module to be imported.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/historical-notes.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\ndef test_function():\n    ...\n    pytest.set_trace()  # invoke PDB debugger and tracing\n```\n\n----------------------------------------\n\nTITLE: Ignoring PytestRemovedIn7Warning\nDESCRIPTION: Shows how to temporarily ignore PytestRemovedIn7Warning warnings by adding a filterwarnings rule to the pytest.ini file. This provides a stopgap measure before addressing the deprecated features. Note that this will stop working in pytest 7.1.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nfilterwarnings =\n    ignore::pytest.PytestRemovedIn7Warning\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using the pip package installer. It ensures the user has the most recent bug fixes and features.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.8.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Defining exclusion behavior using pytest_ignore_collect\nDESCRIPTION: This snippet demonstrates how to use the `pytest_ignore_collect` hook to define exclusion behavior for directories during test collection. This allows you to prevent collection tries of tests in symlinked directories.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_74\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_ignore_collect(path):\n    return path.check(link=1)\n```\n\n----------------------------------------\n\nTITLE: Running pytest with --lf\nDESCRIPTION: This code shows example pytest output when the tests are run with the ``--lf`` flag, demonstrating that only the previously failed tests are executed. The number of collected items is 2.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/cache.rst#_snippet_2\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest --lf\n=========================== test session starts ============================\nplatform linux -- Python 3.x.y, pytest-8.x.y, pluggy-1.x.y\nrootdir: /home/sweet/project\ncollected 2 items\nrun-last-failure: rerun previous 2 failures\n\ntest_50.py FF                                                        [100%]\n\n================================= FAILURES =================================\n_______________________________ test_num[17] _______________________________\n\ni = 17\n\n    @pytest.mark.parametrize(\"i\", range(50))\n    def test_num(i):\n        if i in (17, 25):\n>           pytest.fail(\"bad luck\")\nE           Failed: bad luck\n\ntest_50.py:7: Failed\n_______________________________ test_num[25] _______________________________\n\ni = 25\n\n    @pytest.mark.parametrize(\"i\", range(50))\n    def test_num(i):\n        if i in (17, 25):\n>           pytest.fail(\"bad luck\")\nE           Failed: bad luck\n\ntest_50.py:7: Failed\n========================= short test summary info ==========================\nFAILED test_50.py::test_num[17] - Failed: bad luck\nFAILED test_50.py::test_num[25] - Failed: bad luck\n============================ 2 failed in 0.12s =============================\n```\n\n----------------------------------------\n\nTITLE: Creating a backport branch\nDESCRIPTION: This command creates a new branch named `backport-XXXX` (where XXXX is the PR number) from the `origin/1.2.x` branch. It's the first step in manually backporting a bug fix to a previous release.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout origin/1.2.x -b backport-XXXX\n```\n\n----------------------------------------\n\nTITLE: Deprecated usefixtures on fixture functions\nDESCRIPTION: This code snippet shows the deprecated way of applying marks, in this case a `usefixtures` mark, on a fixture function.  This has no effect and will produce a warning.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.usefixtures(\"clean_database\")\n@pytest.fixture\ndef user() -> User: ...\n```\n\n----------------------------------------\n\nTITLE: Collection Tree Structure (Old)\nDESCRIPTION: Example showing the old collection tree structure before the changes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n<Session>\n  <Module top/test_a.py>\n    <Function test_it>\n  <Module top/test_c.py>\n    <Function test_it>\n  <Module top/aaa/test_aaa.py>\n    <Function test_it>\n  <Package test_b>\n    <Module test_b.py>\n      <Function test_it>\n  <Package zzz>\n    <Module test_zzz.py>\n      <Function test_it>\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This snippet shows how to upgrade pytest to the latest version using pip. It uses the `pip install --upgrade pytest` command.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.2.3.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command upgrades the pytest package to the latest version available on PyPI using the pip package manager. It ensures that any existing version of pytest is replaced with the newest one.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.2.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Conditional Message for No Changes in Jinja2\nDESCRIPTION: This snippet displays a message indicating no significant changes if the current section or category has no content.  It provides a fallback when there are no specific issue details to report.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/changelog/_template.rst#_snippet_4\n\nLANGUAGE: Jinja2\nCODE:\n```\n{% if sections[section][category]|length == 0 %}\n\nNo significant changes.\n\n\n{% else %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Installing pytest from PyPI using pip\nDESCRIPTION: This command upgrades pytest to the latest version from the Python Package Index (PyPI) using the pip package installer. The -U flag ensures that pytest and its dependencies are upgraded if already installed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.6.2.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: BrokenPipeError Suppression Python\nDESCRIPTION: This snippet mentions that the `pytest` command now suppresses the `BrokenPipeError` message that is printed to stderr when the output is piped to a program that closes the pipe.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_43\n\n\n\n----------------------------------------\n\nTITLE: Git Clean Command\nDESCRIPTION: This command cleans up the untracked changelog draft file in the development environment after refactoring the change log draft preview integration.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ git clean -x -i -- doc/en/_changelog_towncrier_draft.rst\n```\n\n----------------------------------------\n\nTITLE: Example of a Pytest Warning (Pytest)\nDESCRIPTION: This shows the pytest output when the code from the previous snippet is executed, demonstrating the PytestCollectionWarning.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/capture-warnings.rst#_snippet_23\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest test_pytest_warnings.py -q\n\n============================= warnings summary =============================\ntest_pytest_warnings.py:1\n  /home/sweet/project/test_pytest_warnings.py:1: PytestCollectionWarning: cannot collect test class 'Test' because it has a __init__ constructor (from: test_pytest_warnings.py)\n    class Test:\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n1 warning in 0.12s\n```\n\n----------------------------------------\n\nTITLE: Example test_sub.py\nDESCRIPTION: A simple test file, located in the 'a' subdirectory, demonstrating a basic test function that will utilize the setup defined in the conftest.py of the same directory.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_plugins.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef test_sub():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command upgrades pytest to the latest version using the pip package installer. The -U flag ensures that pip upgrades the package if it's already installed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.5.2.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Pytest: Keeping Duplicate Paths\nDESCRIPTION: This snippet shows the default behavior of pytest, which ignores duplicate paths specified in the command line. Demonstrates that by default, pytest only collects tests once, even if the same path is specified multiple times.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/pythoncollection.rst#_snippet_2\n\nLANGUAGE: pytest\nCODE:\n```\npytest path_a path_a\n\n...\ncollected 1 item\n...\n```\n\n----------------------------------------\n\nTITLE: Filesystem Tree Example\nDESCRIPTION: Example showing the file system tree structure for collection tree changes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nmyroot/\n    pytest.ini\n    top/\n    ├── aaa\n    │   └── test_aaa.py\n    ├── test_a.py\n    ├── test_b\n    │   ├── __init__.py\n    │   └── test_b.py\n    ├── test_c.py\n    └── zzz\n        ├── __init__.py\n        └── test_zzz.py\n```\n\n----------------------------------------\n\nTITLE: Calling Pytest via Python Interpreter - Text\nDESCRIPTION: This command invokes pytest through the Python interpreter.  It adds the current directory to `sys.path` and is nearly equivalent to using the command-line script directly.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\npython -m pytest [...]\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest with pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using pip, the Python package installer.  The -U flag ensures that pytest and its dependencies are upgraded to the newest available versions. This requires pip to be installed and configured correctly in the system.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.5.0.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using pip. It ensures that the installed pytest is updated to the newest release.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.0.5.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Cherry-picking Release Changes - Git\nDESCRIPTION: This snippet describes the git commands to cherry-pick the CHANGELOG and announce files to the `main` branch. It fetches the upstream, creates a new branch, cherry-picks the necessary commits, and then prepares it for a pull request.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/RELEASING.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\ngit checkout upstream/main -b cherry-pick-release\ngit cherry-pick -x -m1 upstream/MAJOR.MINOR.x\n```\n\n----------------------------------------\n\nTITLE: --code-highlight Command Line Option Python\nDESCRIPTION: This snippet mentions the addition of the `--code-highlight` command line option, which enables or disables code highlighting in terminal output.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_40\n\n\n\n----------------------------------------\n\nTITLE: Listing Pytest Fixtures\nDESCRIPTION: This command is used to list all available Pytest fixtures, including those with leading underscores, providing insight into the testing environment.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/builtin.rst#_snippet_0\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest  --fixtures -v\n```\n\n----------------------------------------\n\nTITLE: Define a Class in a Module (domain.py)\nDESCRIPTION: This snippet defines a simple class `Testament` in the `domain.py` module. This class is intended to represent a domain object, not a test class. It serves as an example of a class that might be unintentionally collected as a test when imported into a test module.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/changelog/12749.feature.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Testament: ...\n```\n\n----------------------------------------\n\nTITLE: Installing or upgrading Pytest using easy_install\nDESCRIPTION: This command uses easy_install to install or upgrade to the latest version of pytest. The -U flag ensures that pytest is upgraded to the newest available version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.1.3.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neasy_install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Example test_flat.py\nDESCRIPTION: A simple test file located in the root directory, used to demonstrate which tests are affected by the conftest.py in the subdirectory 'a'.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/writing_plugins.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef test_flat():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Build Documentation Locally (Bash)\nDESCRIPTION: This command builds the pytest documentation locally using tox. It creates the documentation in the doc/en/_build/html directory.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ tox -e docs\n```\n\n----------------------------------------\n\nTITLE: Generating Category Headings in Jinja2\nDESCRIPTION: This snippet generates category headings with underlines using data from definitions. It iterates through categories present in the current section and outputs the name with an underline.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/changelog/_template.rst#_snippet_1\n\nLANGUAGE: Jinja2\nCODE:\n```\n{% for category, val in definitions.items() if category in sections[section] %}\n\n{{ definitions[category]['name'] }}\n{{ underline * definitions[category]['name']|length }}\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip (Python)\nDESCRIPTION: This command updates the pytest package to the latest version using the pip package installer. The -U flag ensures that pytest and its dependencies are upgraded.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.6.1.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Installing or Upgrading pytest\nDESCRIPTION: This command is used to install or upgrade pytest to the latest version using pip, the Python package installer. The -U flag ensures that any existing version is upgraded.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.7.0.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This snippet shows how to upgrade pytest to the latest version using pip. It uses the `pip install --upgrade pytest` command.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.1.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Asserting Absence of Matches with pytest.LineMatcher in Python\nDESCRIPTION: Demonstrates how to assert that a captured text does not match a given pattern using pytest's LineMatcher.  It showcases the usage of no_fnmatch_line and no_re_match_line to verify the absence of specific patterns in the output. This provides a more readable and maintainable way of asserting negative matches compared to using re.match or the 'in' operator.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nresult = testdir.runpytest()\nassert re.match(pat, result.stdout.str()) is None\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Markers with iter_markers in Pytest\nDESCRIPTION: This snippet shows how to iterate over marks using `Node.iter_markers(name)` when marks compose in an additive manner, enabling handling of multiple marks individually from a test item in pytest. This approach replaces using the deprecated `item.get_marker(name)` function.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/historical-notes.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# replace this\nskipif = item.get_marker(\"skipif\")\nif skipif:\n    for condition in skipif.args:\n        # eval condition\n        ...\n\n# by this:\nfor skipif in item.iter_markers(\"skipif\"):\n    condition = skipif.args[0]\n    # eval condition\n```\n\n----------------------------------------\n\nTITLE: Running pytest with -rs flag\nDESCRIPTION: Shows the command to run pytest with the -rs flag, used for showing the reasons for skipped and xfailed tests.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#_snippet_14\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -rs test_module.py\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using the pip package installer. It ensures that the user has the newest features and bug fixes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.3.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Invoking Pytest from Python program\nDESCRIPTION: This snippet shows how to invoke Pytest from within a Python program. It imports the pytest module and calls the main() function with a list of arguments and plugins.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.0.0.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pytest ; pytest.main(arglist, pluginlist)\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This snippet shows how to upgrade pytest to the latest version using the pip package manager. The command `pip install --upgrade pytest` will download and install the newest version, replacing the existing installation.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.6.4.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Triggering Deploy Job - GitHub CLI\nDESCRIPTION: This snippet shows how to trigger the `deploy.yml` GitHub Actions workflow using the GitHub CLI (`gh`).  It requires the `VERSION` and release branch as arguments and the repository. It requires approval from `pytest-dev/core` to publish to PyPI.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/RELEASING.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngh workflow run deploy.yml -R pytest-dev/pytest --ref=release-{VERSION} -f version={VERSION}\n```\n\n----------------------------------------\n\nTITLE: Incorrect usefixtures in fixture function\nDESCRIPTION: This code demonstrates the incorrect usage of `usefixtures` marker in a fixture function. It is important to note that this does not work as expected and will result in a deprecation warning.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_46\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.usefixtures(\"my_other_fixture\")\n@pytest.fixture\ndef my_fixture_that_sadly_wont_use_my_other_fixture(): ...\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest via pip\nDESCRIPTION: This snippet shows how to upgrade pytest to the latest version using pip. It uses the `--upgrade` flag to ensure that the existing version is replaced with the newest one. This is a standard way to update Python packages.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.3.4.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Setting Verbosity Level for Assertions in Pytest\nDESCRIPTION: This configuration value sets a verbosity level specifically for assertion-related output, overriding the application-wide verbosity level set via the `-v` command-line option. A value of \"auto\" explicitly uses the global verbosity level.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_56\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nverbosity_assertions = 2\n```\n\n----------------------------------------\n\nTITLE: Marking Class Level Tests Using pytestmark (Python)\nDESCRIPTION: This snippet illustrates a legacy method of applying markers to a test class by setting the `pytestmark` attribute on the class.  This achieves the same effect as using the `@pytest.mark` decorator on the class itself, but is older.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\nclass TestClass:\n    pytestmark = pytest.mark.webtest\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This snippet shows how to upgrade to the latest version of pytest using pip, the Python package installer. It ensures the latest version is installed by using the -U flag.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/scripts/release.minor.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using pip. It ensures that you have the newest features and bug fixes. Execute this command in your terminal or command prompt.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.0.6.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Running GitHub Workflow (Release Candidate) - GitHub CLI\nDESCRIPTION: This snippet uses the GitHub CLI (`gh`) to trigger the `prepare-release-pr.yml` workflow for a release candidate.  It defines the branch, sets `major` to `yes` and specifies a prerelease version (`rc1`).\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/RELEASING.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngh workflow run prepare-release-pr.yml -f branch=8.0.x -f major=yes -f prerelease=rc1\n```\n\n----------------------------------------\n\nTITLE: pytest Project Dependencies\nDESCRIPTION: This snippet defines the required dependencies for the pytest project, including minimum versions for packages such as pluggy, pygments-pytest, and sphinx. These dependencies are necessary for the project to function correctly.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/requirements.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\npluggy>=1.5.0\npygments-pytest>=2.3.0\nsphinx-removed-in>=0.2.0\nsphinx>=7\nsphinxcontrib-trio\nsphinxcontrib-svg2pdfconverter\nfuro\nsphinxcontrib-towncrier\nsphinx-issues\n```\n\n----------------------------------------\n\nTITLE: Pytest Output with Plugin - Pytest\nDESCRIPTION: This is an example of the output of pytest when invoked with a custom plugin.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/usage.rst#_snippet_22\n\nLANGUAGE: pytest\nCODE:\n```\n$ python myinvoke.py\n*** test run reporting finishing\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This snippet provides the command to upgrade to the latest version of pytest using the pip package manager. It ensures that the user has the latest bug fixes and features.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.2.3.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Running pytest with -q flag\nDESCRIPTION: Shows the command to run pytest with the -q flag, used for a quiet test run, displaying less output.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/parametrize.rst#_snippet_12\n\nLANGUAGE: pytest\nCODE:\n```\n$ pytest -q\n```\n\n----------------------------------------\n\nTITLE: Email Announcement Template\nDESCRIPTION: This section describes the email announcement that needs to be sent to the specified mailing lists. The email should include the contents from the release announcement file, located at `doc/en/announce/release-<VERSION>.rst`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/RELEASING.rst#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\ndoc/en/announce/release-<VERSION>.rst\n```\n\n----------------------------------------\n\nTITLE: Unsafe Pytest Fixture Example\nDESCRIPTION: This example presents a compact but less maintainable and potentially unsafe pytest fixture. The `setup` fixture performs multiple state-changing actions, but if any of them raise an exception, the teardown code will not run, leading to resource leaks. It's a demonstration of what *not* to do.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/fixtures.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# content of test_emaillib.py\nfrom emaillib import Email, MailAdminClient\n\nimport pytest\n\n\n@pytest.fixture\ndef setup():\n    mail_admin = MailAdminClient()\n    sending_user = mail_admin.create_user()\n    receiving_user = mail_admin.create_user()\n    email = Email(subject=\"Hey!\", body=\"How's it going?\")\n    sending_user.send_email(email, receiving_user)\n    yield receiving_user, email\n    receiving_user.clear_mailbox()\n    mail_admin.delete_user(sending_user)\n    mail_admin.delete_user(receiving_user)\n\n\ndef test_email_received(setup):\n    receiving_user, email = setup\n    assert email in receiving_user.inbox\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest using pip\nDESCRIPTION: This command upgrades the pytest package to the latest version using pip, the Python package installer. The -U flag ensures that pip upgrades the package and its dependencies.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-8.3.0.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Symlink Resolution Change in Conftest Files Python\nDESCRIPTION: This snippet documents a breaking change related to symlink resolution during test collection.  Symlinks are no longer resolved when matching `conftest.py` files with test file paths, reverting a previous bug fix due to unforeseen consequences on certain platforms. Users who relied on this feature need to create symlinks for the entire test tree.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command upgrades the pytest package to the latest version available on PyPI using pip. It ensures that the existing pytest installation is updated with the new release.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.0.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Pytest.Function.__init__ Args Parameter Removal Python\nDESCRIPTION: This snippet indicates the removal of the unused `args` parameter from `pytest.Function.__init__`, marking a breaking change for any code relying on that parameter.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_30\n\n\n\n----------------------------------------\n\nTITLE: Deprecated pytest_namespace hook in Python\nDESCRIPTION: The pytest_namespace hook is deprecated. This example illustrates the old way of usage.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nclass MySymbol: ...\n\n\ndef pytest_namespace():\n    return {\"my_symbol\": MySymbol()}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pytest with ini-files\nDESCRIPTION: This snippet illustrates how to configure Pytest using ini-style configuration files (setup.cfg or tox.ini). The 'norecursedirs' option specifies directories to exclude from test collection, and 'addopts' specifies default command-line options.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.0.0.rst#_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nnorecursedirs = .hg data*  # don't ever recurse in such dirs\naddopts = -x --pyargs      # add these command line options by default\n```\n\n----------------------------------------\n\nTITLE: Node Construction via from_parent (Python)\nDESCRIPTION: Deprecates using direct constructors for 'Nodes'. Instead, recommends using the 'Node.from_parent' method for construction to enforce more controlled creation/configuration patterns.  Subclasses are expected to use `super().from_parent` if they intend to expand the creation of `Nodes`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_52\n\nLANGUAGE: Python\nCODE:\n```\nNode.from_parent\n```\n\nLANGUAGE: Python\nCODE:\n```\nsuper().from_parent\n```\n\n----------------------------------------\n\nTITLE: Installing or Upgrading pytest (Python)\nDESCRIPTION: This snippet shows how to install or upgrade pytest using pip or easy_install.  It is assumed that either pip or setuptools is already installed on the system.  The -U flag ensures that pytest is upgraded to the latest version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.4.0.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install -U pytest # or\neasy_install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Test File Example (test_second.py)\nDESCRIPTION: Another basic test file demonstrating a simple pytest test function. It contains a single test function, `test_2`, which asserts that `1 == 1`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/customdirectory.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef test_2():\n    assert 1 == 1\n```\n\n----------------------------------------\n\nTITLE: Displaying Issue Details in Jinja2\nDESCRIPTION: This snippet displays issue details, linking to GitHub issues. It sorts issues by value and formats them with their corresponding text descriptions.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/changelog/_template.rst#_snippet_2\n\nLANGUAGE: Jinja2\nCODE:\n```\n{% if definitions[category]['showcontent'] %}\n{% for text, values in sections[section][category]|dictsort(by='value') %}\n{% set issue_joiner = joiner(', ') %}\n- {% for value in values|sort %}{{ issue_joiner() }}`{{ value }} <https://github.com/pytest-dev/pytest/issues/{{ value[1:] }}>`_{% endfor %}: {{ text }}\n\n\n{% endfor %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Installing or Upgrading pytest with easy_install\nDESCRIPTION: This snippet shows how to install or upgrade pytest using the easy_install package manager. It uses the `-U` flag to ensure that pytest and its dependencies are upgraded to the latest version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.3.1.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\neasy_install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Committing and pushing changes with Git\nDESCRIPTION: These commands commit changes with a specified message and push them to a remote repository. They are used for submitting local changes to the pytest project.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit -a -m \"<commit message>\"\n$ git push -u\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This snippet shows the command to upgrade pytest to the latest version using pip. It uses the `--upgrade` flag to ensure that the existing pytest installation is updated.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.3.3.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Test File Example (test_first.py)\nDESCRIPTION: A basic test file demonstrating a simple pytest test function. It contains a single test function, `test_1`, which asserts that `1 == 1`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/customdirectory.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef test_1():\n    assert 1 == 1\n```\n\n----------------------------------------\n\nTITLE: Ignoring setup/teardown failures in pytest_runtest_logreport hook\nDESCRIPTION: This code snippet demonstrates how to ignore setup/teardown failures within the `pytest_runtest_logreport` hook. It checks if the `rep.when` attribute is not equal to 'call', and if so, returns early, preventing the hook from processing the failure.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.2.0.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nif rep.when != 'call': return\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest via pip\nDESCRIPTION: This command is used to upgrade the pytest package to the latest version using pip, the Python package installer. The -U flag ensures that pip upgrades the package to the newest available version.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-6.2.0.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command upgrades the pytest package using pip. It ensures that the latest version of pytest is installed, replacing any older versions.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-5.2.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest with Pip\nDESCRIPTION: This command upgrades the pytest package to the latest version (4.4.2 in this case) using the pip package installer. It ensures that the current pytest installation is replaced with the newest available version from PyPI.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-4.4.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pytest using pip\nDESCRIPTION: This command upgrades the installed version of pytest to the latest available version, which in this case is 3.10.1. It utilizes the pip package installer to download and install the updated package from PyPI.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.10.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: pytest.approx Example (Current Output)\nDESCRIPTION: This example demonstrates the improved output format of `pytest.approx`, which uses a decimal representation for the tolerance instead of scientific notation.  It shows how the tolerance of 1 is represented as 1.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/changelog/6985.improvement.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n>>> pytest.approx(42, abs=1)\n42 ± 1\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License Text\nDESCRIPTION: This code snippet presents the full text of the MIT License. It outlines the permissions, conditions, and limitations associated with the use, modification, and distribution of the pytest software. It's presented as plain text.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/license.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThe MIT License (MIT)\n\nCopyright (c) 2004 Holger Krekel and others\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Upgrading pytest with pip\nDESCRIPTION: This command is used to upgrade the pytest package to the latest version available on PyPI using the pip package installer.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-3.7.1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pytest\n```\n\n----------------------------------------\n\nTITLE: Installing and Enabling pre-commit Hooks\nDESCRIPTION: These commands install the pre-commit framework and enable it for the pytest repository. This ensures that code style and formatting are consistent by running checks before each commit.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install --user pre-commit\n$ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Closing Pull Request Message Template (Text)\nDESCRIPTION: This text provides a template message to use when closing a pull request due to inactivity. It expresses gratitude for the contributor's work, explains the reason for closing the PR (queue management), and encourages the contributor to reopen it when they are ready to continue.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#_snippet_17\n\nLANGUAGE: Text\nCODE:\n```\nHi <contributor>,\n\nFirst of all, we would like to thank you for your time and effort on working on this, the pytest team deeply appreciates it.\n\nWe noticed it has been awhile since you have updated this PR, however. pytest is a high activity project, with many issues/PRs being opened daily, so it is hard for us maintainers to track which PRs are ready for merging, for review, or need more attention.\n\nSo for those reasons we, think it is best to close the PR for now, but with the only intention to clean up our queue, it is by no means a rejection of your changes. We still encourage you to re-open this PR (it is just a click of a button away) when you are ready to get back to it.\n\nAgain we appreciate your time for working on this, and hope you might get back to this at a later time!\n\n<bye>\n```\n\n----------------------------------------\n\nTITLE: Installing/Upgrading Pytest with pip\nDESCRIPTION: This snippet shows how to install or upgrade pytest using the pip package manager. It uses the `-U` flag to upgrade to the latest version if pytest is already installed.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/announce/release-2.1.2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pytest\n```\n\n----------------------------------------\n\nTITLE: Registering Markers in pytest.ini - INI\nDESCRIPTION: This snippet demonstrates how to register custom markers in the ``pytest.ini`` file. This allows defining custom markers that can be used to categorize and select tests, preventing warnings when using unregistered markers.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/example/markers.rst#_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n# content of pytest.ini\n[pytest]\nmarkers =\n    webtest: mark a test as a webtest.\n    slow: mark test as slow.\n```\n\n----------------------------------------\n\nTITLE: Module-Level Teardown\nDESCRIPTION: Defines teardown_module to execute after all tests in a module. Used to clean up resources created in setup_module. The optional module parameter gives access to the module object.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/xunit_setup.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef teardown_module(module):\n    \"\"\"teardown any state that was previously setup with a setup_module\n    method.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Node Construction using from_parent\nDESCRIPTION: Demonstrates how to construct nodes using the `from_parent` named constructor, which is the recommended approach from pytest 6.0 onwards. It shows how to check for the existence of `from_parent` to maintain compatibility with older pytest versions.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_pycollect_makeitem(collector, name, obj):\n    if hasattr(MyItem, \"from_parent\"):\n        item = MyItem.from_parent(collector, name=\"foo\")\n        item.obj = 42\n        return item\n    else:\n        return MyItem(name=\"foo\", parent=collector, obj=42)\n```\n\n----------------------------------------\n\nTITLE: New Command-Line Flags Python\nDESCRIPTION: This snippet lists two new command-line flags: `--no-header` to disable the initial header, and `--no-summary` to disable the final test summary. These flags provide more control over the output displayed during test execution.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_38\n\n\n\n----------------------------------------\n\nTITLE: Using pytest.raises as a Context Manager\nDESCRIPTION: Illustrates the usage of pytest.raises as a context manager for type checking, particularly when combined with nullcontext. It ensures type checkers correctly identify the returned object as a 'ContextManager' rather than a generic 'object'.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npytest.raises(...) if ... else nullcontext()\n```\n\n----------------------------------------\n\nTITLE: Skipping an entire module\nDESCRIPTION: Illustrates how to skip an entire module using `pytest.skip(reason, allow_module_level=True)`.  The code checks the OS and skips the module when it's not Windows.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/skipping.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\nimport pytest\n\nif not sys.platform.startswith(\"win\"):\n    pytest.skip(\"skipping windows-only tests\", allow_module_level=True)\n```\n\n----------------------------------------\n\nTITLE: Assert Approximation Example (Incorrect)\nDESCRIPTION: Demonstrates the incorrect way to use pytest.approx in a boolean context, which will now raise an error.  The correct usage involves comparing the actual value against the result of pytest.approx(expected).\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nassert pytest.approx(actual, expected)\n```\n\n----------------------------------------\n\nTITLE: Item.catch_log_handler Attributes Removal Python\nDESCRIPTION: This snippet documents a breaking change where the `item.catch_log_handler` and `item.catch_log_handlers` attributes have been removed, as they were internal and not meant for public use.  The deprecated `--no-print-logs` option and `log_print` ini option were also removed; users should use `--show-capture` instead.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_29\n\n\n\n----------------------------------------\n\nTITLE: FixtureLookupError Exception Exposure Python\nDESCRIPTION: This snippet exposes the `pytest.FixtureLookupError` exception, which is raised by `request.getfixturevalue()` when a fixture with the given name cannot be returned.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_46\n\n\n\n----------------------------------------\n\nTITLE: Running tests in a specific module with tox\nDESCRIPTION: This command uses tox to execute tests in a particular test module (testing/test_config.py) using Python 3.9.  It allows for targeted testing of specific parts of the codebase.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ tox -e py39 -- testing/test_config.py\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests with String Conditions in Pytest\nDESCRIPTION: This snippet demonstrates using string conditions in `@pytest.mark.skipif` to skip tests based on evaluating a string expression. This syntax, while still supported, is less preferred than boolean conditions for better encapsulation and cross-module marker importing. The example uses `sys.version_info`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/historical-notes.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\n\n@pytest.mark.skipif(\"sys.version_info >= (3,3)\")\ndef test_function(): ...\n```\n\n----------------------------------------\n\nTITLE: Using fixture_request with pytest.mark.parametrize\nDESCRIPTION: This snippet shows how to use the pytest.fixture_request helper function in combination with pytest.mark.parametrize. This allows parametrizing a test with values from different fixtures and associated expected response codes.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/proposals/parametrize_with_fixtures.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.parametrize(\n    \"context, expected_response_code\",\n    [\n        (pytest.fixture_request(\"default_context\"), 0),\n        (pytest.fixture_request(\"extra_context\"), 0),\n    ],\n)\ndef test_generate_project(cookies, context, exit_code):\n    \"\"\"Call the cookiecutter API to generate a new project from a\n    template.\n    \"\"\"\n    result = cookies.bake(extra_context=context)\n\n    assert result.exit_code == exit_code\n```\n\n----------------------------------------\n\nTITLE: Junit XML Exception Cause\nDESCRIPTION: This snippet demonstrates the change in the format of the JUnit XML output to include the exception cause in the message attribute for failures during setup and teardown. It shows the difference between the old and new formats.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/changelog.rst#_snippet_49\n\nLANGUAGE: xml\nCODE:\n```\n<error message=\"test setup failure\">\n```\n\n----------------------------------------\n\nTITLE: Pytest JUnit Log Passing Tests Configuration\nDESCRIPTION: Configures whether captured output should be written to the JUnit XML file for passing tests when `junit_logging` is not set to `no`.  The `junit_log_passing_tests` option defaults to `True`.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/reference/reference.rst#_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\njunit_log_passing_tests = False\n```\n\n----------------------------------------\n\nTITLE: Deprecated String Passing to pytest.main in Python\nDESCRIPTION: Passing a command-line string to pytest.main() is deprecated in favor of passing a list of arguments. This example demonstrates the deprecated method and the recommended alternative using a list.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/deprecations.rst#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\npytest.main(\"-v -s\")\n```\n\n----------------------------------------\n\nTITLE: Connection String Example (Example Code) - Python\nDESCRIPTION: This code defines a `DEFAULT_CONFIG` dictionary and a `create_connection_string` function. The function creates a connection string using values from the provided `config` dictionary or the `DEFAULT_CONFIG` if no config is provided.\nSOURCE: https://github.com/pytest-dev/pytest/blob/main/doc/en/how-to/monkeypatch.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_CONFIG = {\"user\": \"user1\", \"database\": \"db1\"}\n\n\ndef create_connection_string(config=None):\n    \"\"\"Creates a connection string from input or defaults.\"\"\"\n    config = config or DEFAULT_CONFIG\n    return f\"User Id={config['user']}; Location={config['database']};\"\n```"
  }
]