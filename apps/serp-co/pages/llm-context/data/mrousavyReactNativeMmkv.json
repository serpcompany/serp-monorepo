[
  {
    "owner": "mrousavy",
    "repo": "react-native-mmkv",
    "content": "TITLE: Setting Values in MMKV Storage using JavaScript\nDESCRIPTION: Demonstrates how to set string, number, and boolean values in MMKV storage.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstorage.set('user.name', 'Marc')\nstorage.set('user.age', 21)\nstorage.set('is-mmkv-fast-asf', true)\n```\n\n----------------------------------------\n\nTITLE: Creating Default MMKV Instance in JavaScript\nDESCRIPTION: Creates a new instance of MMKV storage using the default storage ID. It's recommended to reuse this instance throughout the app.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MMKV } from 'react-native-mmkv'\n\nexport const storage = new MMKV()\n```\n\n----------------------------------------\n\nTITLE: Getting Values from MMKV Storage in JavaScript\nDESCRIPTION: Shows how to retrieve string, number, and boolean values from MMKV storage.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst username = storage.getString('user.name') // 'Marc'\nconst age = storage.getNumber('user.age') // 21\nconst isMmkvFastAsf = storage.getBoolean('is-mmkv-fast-asf') // true\n```\n\n----------------------------------------\n\nTITLE: Managing Keys in MMKV Storage using JavaScript\nDESCRIPTION: Shows how to check for key existence, get all keys, delete specific keys, and clear all keys in MMKV storage.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/README.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst hasUsername = storage.contains('user.name')\n\nconst keys = storage.getAllKeys() // ['user.name', 'user.age', 'is-mmkv-fast-asf']\n\nstorage.delete('user.name')\n\nstorage.clearAll()\n```\n\n----------------------------------------\n\nTITLE: Using MMKV Hooks in React Native\nDESCRIPTION: Demonstrates the use of MMKV hooks for managing state in React components.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/README.md#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst [username, setUsername] = useMMKVString('user.name')\nconst [age, setAge] = useMMKVNumber('user.age')\nconst [isMmkvFastAsf, setIsMmkvFastAf] = useMMKVBoolean('is-mmkv-fast-asf')\n```\n\n----------------------------------------\n\nTITLE: Using Individual Keys with MMKV Hooks in React Native\nDESCRIPTION: Demonstrates how to use useMMKVString, useMMKVNumber, useMMKVBoolean, and useMMKVBuffer hooks to reactively handle individual keys in MMKV storage.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/docs/HOOKS.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  const [username, setUsername] = useMMKVString(\"user.name\")\n  const [age, setAge] = useMMKVNumber(\"user.age\")\n  const [isPremiumUser, setIsPremiumUser] = useMMKVBoolean(\"user.isPremium\")\n  const [privateKey, setPrivateKey] = useMMKVBuffer(\"user.privateKey\")\n}\n```\n\n----------------------------------------\n\nTITLE: Storing and Retrieving Objects in MMKV using JavaScript\nDESCRIPTION: Demonstrates how to serialize and deserialize objects for storage in MMKV.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/README.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = {\n  username: 'Marc',\n  age: 21\n}\n\n// Serialize the object into a JSON string\nstorage.set('user', JSON.stringify(user))\n\n// Deserialize the JSON string into an object\nconst jsonUser = storage.getString('user') // { 'username': 'Marc', 'age': 21 }\nconst userObject = JSON.parse(jsonUser)\n```\n\n----------------------------------------\n\nTITLE: Storing and Retrieving Buffers in MMKV using JavaScript\nDESCRIPTION: Demonstrates how to store and retrieve ArrayBuffer data in MMKV storage.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/README.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst buffer = new ArrayBuffer(3)\nconst dataWriter = new Uint8Array(buffer)\ndataWriter[0] = 1\ndataWriter[1] = 100\ndataWriter[2] = 255\nstorage.set('someToken', buffer)\n\nconst buffer = storage.getBuffer('someToken')\nconsole.log(buffer) // [1, 100, 255]\n```\n\n----------------------------------------\n\nTITLE: Creating Customized MMKV Instance in JavaScript\nDESCRIPTION: Creates a new MMKV storage instance with custom configuration options, including ID, path, encryption key, and mode.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MMKV, Mode } from 'react-native-mmkv'\n\nexport const storage = new MMKV({\n  id: `user-${userId}-storage`,\n  path: `${USER_DIRECTORY}/storage`,\n  encryptionKey: 'hunter2',\n  mode: Mode.MULTI_PROCESS,\n  readOnly: false\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Objects with MMKV Hook in React Native\nDESCRIPTION: Demonstrates using useMMKVObject hook to store and retrieve complex objects in MMKV storage. It requires defining the object type for proper type inference.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/docs/HOOKS.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype User = {\n  id: string\n  username: string\n  age: number\n}\n\nfunction App() {\n  const [user, setUser] = useMMKVObject<User>(\"user\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using MMKV Instance Hook in React Native\nDESCRIPTION: Shows how to use the useMMKV hook to get an MMKV instance and use it within a component. The instance can be used to set values directly.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/docs/HOOKS.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  const storage = useMMKV()\n  // ...\n  const onLogin = useCallback((username) => {\n    storage.set(\"user.name\", \"Marc\")\n  }, [storage])\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Value Change Listener in MMKV\nDESCRIPTION: Creates an MMKV storage instance and adds a listener that triggers when any key's value changes. The listener logs the changed key and its new value to the console.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/docs/LISTENERS.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst storage = new MMKV()\n\nconst listener = storage.addOnValueChangedListener((changedKey) => {\n  const newValue = storage.getString(changedKey)\n  console.log(`\"${changedKey}\" new value: ${newValue}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Removing an MMKV Listener in a React Component\nDESCRIPTION: Demonstrates how to properly clean up an MMKV listener in a React component when it's no longer needed. The example shows removing the listener during a logout process within a useCallback hook.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/docs/LISTENERS.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction SettingsScreen() {\n  // ...\n\n  const onLogout = useCallback(() => {\n    // ...\n    listener.remove()\n  }, [])\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting and Decrypting MMKV Storage in JavaScript\nDESCRIPTION: Shows how to encrypt all data with a private key and remove encryption in MMKV storage.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/README.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// encrypt all data with a private key\nstorage.recrypt('hunter2')\n\n// remove encryption\nstorage.recrypt(undefined)\n```\n\n----------------------------------------\n\nTITLE: Managing MMKV Storage Size in JavaScript\nDESCRIPTION: Shows how to get the size of MMKV storage and trim unused keys and clear memory cache when needed.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/README.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst size = storage.size\nif (size >= 4096) {\n  // clean unused keys and clear memory cache\n  storage.trim()\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing a Key with MMKV Hook in React Native\nDESCRIPTION: Shows how to clear a key in MMKV storage using the setter function returned by useMMKVString hook. Setting the value to undefined clears the key.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/docs/HOOKS.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  const [username, setUsername] = useMMKVString(\"user.name\")\n  // ...\n  const onLogout = useCallback(() => {\n    setUsername(undefined)\n  }, [])\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom MMKV Instances with Hooks in React Native\nDESCRIPTION: Demonstrates how to use custom MMKV instances with hooks. It shows creating a global storage and a user-specific storage, then using useMMKVString with the custom instance.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/docs/HOOKS.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  const globalStorage = useMMKV()\n  const userStorage = useMMKV({ id: `${userId}.storage` })\n\n  const [username, setUsername] = useMMKVString(\"user.name\", userStorage)\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Value Changes with MMKV Hook in React Native\nDESCRIPTION: Shows how to use the useMMKVListener hook to listen for value changes in MMKV storage. It logs a message whenever any value changes.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/docs/HOOKS.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  useMMKVListener((key) => {\n    console.log(`Value for \"${key}\" changed!`)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Value Changes on Specific MMKV Instance in React Native\nDESCRIPTION: Demonstrates using useMMKVListener with a specific MMKV instance. It creates a user-specific storage and listens for changes only in that instance.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/docs/HOOKS.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  const storage = useMMKV({ id: `${userId}.storage` })\n\n  useMMKVListener((key) => {\n    console.log(`Value for \"${key}\" changed in user storage!`)\n  }, storage)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Redux-Persist Storage Wrapper for MMKV in TypeScript\nDESCRIPTION: This code snippet creates a storage object that implements the Storage interface from redux-persist using MMKV. It provides methods for setting, getting, and removing items from storage, allowing seamless integration of MMKV with redux-persist for state management in React Native applications.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/docs/WRAPPER_REDUX.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Storage } from 'redux-persist'\nimport { MMKV } from \"react-native-mmkv\"\n\nconst storage = new MMKV()\n\nexport const reduxStorage: Storage = {\n  setItem: (key, value) => {\n    storage.set(key, value)\n    return Promise.resolve(true)\n  },\n  getItem: (key) => {\n    const value = storage.getString(key)\n    return Promise.resolve(value)\n  },\n  removeItem: (key) => {\n    storage.delete(key)\n    return Promise.resolve()\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Recoil Atom Persistence Function with MMKV in React Native\nDESCRIPTION: This code creates a persistAtom function that serves as a Recoil effects handler. It retrieves values from MMKV storage during initialization and saves values back to storage when they change. The function handles reset operations by deleting the corresponding key from storage.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/docs/WRAPPER_RECOIL.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst persistAtom = (key) => ({ setSelf, onSet }) => {\n  setSelf(() => {\n    let data = storage.getString(key);\n    if (data != null){\n      return JSON.parse(data);\n    } else {\n      return new DefaultValue();\n    }\n  });\n\n  onSet((newValue, _, isReset) => {\n    if (isReset) {\n      storage.delete(key);\n    } else {\n      storage.set(key, JSON.stringify(newValue));\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MMKV as Storage Provider for mobx-persist-store in TypeScript\nDESCRIPTION: This snippet shows how to create a storage adapter for mobx-persist-store using MMKV. It implements the required storage interface methods (setItem, getItem, removeItem) using equivalent MMKV methods to enable persistent state management with mobx.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/docs/WRAPPER_MOBX.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configurePersistable } from 'mobx-persist-store'\nimport { MMKV } from \"react-native-mmkv\"\n\nconst storage = new MMKV()\n\nconfigurePersistable({\n  storage: {\n    setItem: (key, data) => storage.set(key, data),\n    getItem: (key) => storage.getString(key),\n    removeItem: (key) => storage.delete(key),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing MMKV Storage Adapter for MobX-Persist in TypeScript\nDESCRIPTION: Creates a storage adapter that implements the required interface for mobx-persist using MMKV as the underlying storage mechanism. The adapter provides methods for clearing, setting, getting, and removing items, with all operations returning Promises for compatibility.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/docs/WRAPPER_MOBXPERSIST.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { create } from \"mobx-persist\"\nimport { MMKV } from \"react-native-mmkv\"\n\nconst storage = new MMKV()\n\nconst mmkvStorage = {\n  clear: () => {\n    storage.clearAll()\n    return Promise.resolve()\n  },\n  setItem: (key, value) => {\n    storage.set(key, value)\n    return Promise.resolve(true)\n  },\n  getItem: (key) => {\n    const value = storage.getString(key)\n    return Promise.resolve(value)\n  },\n  removeItem: (key) => {\n    storage.delete(key)\n    return Promise.resolve()\n  },\n}\n\nconst hydrate = create({\n  storage: mmkvStorage,\n  jsonify: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing atomWithMMKV for Jotai with React Native MMKV\nDESCRIPTION: A complete implementation of a custom atomWithMMKV function that connects Jotai's atomWithStorage to React Native MMKV. It provides handlers for getting, setting, removing, and subscribing to changes in MMKV storage values, allowing for persistent atoms across app restarts.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/docs/WRAPPER_JOTAI.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { atomWithStorage, createJSONStorage } from 'jotai/utils';\nimport { MMKV } from 'react-native-mmkv';\n\nconst storage = new MMKV();\n\nfunction getItem(key: string): string | null {\n  const value = storage.getString(key)\n  return value ? value : null\n}\n\nfunction setItem(key: string, value: string): void {\n  storage.set(key, value)\n}\n\nfunction removeItem(key: string): void {\n  storage.delete(key);\n}\n\nfunction subscribe(\n  key: string,\n  callback: (value: string | null) => void\n): () => void {\n  const listener = (changedKey: string) => {\n    if (changedKey === key) {\n      callback(getItem(key))\n    }\n  }\n\n  const { remove } = storage.addOnValueChangedListener(listener)\n\n  return () => {\n    remove()\n  }\n}\n\nexport const atomWithMMKV = <T>(key: string, initialValue: T) =>\n  atomWithStorage<T>(\n    key,\n    initialValue,\n    createJSONStorage<T>(() => ({\n      getItem,\n      setItem,\n      removeItem,\n      subscribe,\n    })),\n    { getOnInit: true }\n  );\n```\n\n----------------------------------------\n\nTITLE: Using atomWithMMKV to Create Persistent Jotai Atoms\nDESCRIPTION: A simple example showing how to use the atomWithMMKV function to create a persistent atom. The atom's state will be preserved across app restarts using MMKV storage.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/docs/WRAPPER_JOTAI.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst myAtom = atomWithMMKV('my-atom-key', 'value');\n```\n\n----------------------------------------\n\nTITLE: Creating a StateStorage implementation with MMKV for Zustand Persist-Middleware\nDESCRIPTION: This snippet shows how to create a StateStorage object for zustand's persist middleware using react-native-mmkv. It implements the three required methods: setItem, getItem, and removeItem that allow zustand to store, retrieve, and delete persisted state.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/docs/WRAPPER_ZUSTAND_PERSIST_MIDDLEWARE.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StateStorage } from 'zustand/middleware'\nimport { MMKV } from 'react-native-mmkv'\n\nconst storage = new MMKV()\n\nconst zustandStorage: StateStorage = {\n  setItem: (name, value) => {\n    return storage.set(name, value)\n  },\n  getItem: (name) => {\n    const value = storage.getString(name)\n    return value ?? null\n  },\n  removeItem: (name) => {\n    return storage.delete(name)\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an MMKV Storage Adapter for React Query\nDESCRIPTION: TypeScript implementation that creates a storage adapter for MMKV that conforms to the interface expected by React Query's storage persister. This adapter maps MMKV methods to the standard storage API methods (setItem, getItem, removeItem).\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/docs/WRAPPER_REACT_QUERY.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSyncStoragePersister } from '@tanstack/query-sync-storage-persister'\nimport { MMKV } from \"react-native-mmkv\"\n\nconst storage = new MMKV();\n\nconst clientStorage = {\n  setItem: (key, value) => {\n    storage.set(key, value);\n  },\n  getItem: (key) => {\n    const value = storage.getString(key);\n    return value === undefined ? null : value;\n  },\n  removeItem: (key) => {\n    storage.delete(key);\n  },\n};\n\nexport const clientPersister = createSyncStoragePersister({ storage: clientStorage });\n```\n\n----------------------------------------\n\nTITLE: Implementing PersistQueryClientProvider with MMKV in React Native\nDESCRIPTION: TSX code that shows how to use the created clientPersister in a React Native application's root component. This component wraps the application with PersistQueryClientProvider to enable persistence of query data.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/docs/WRAPPER_REACT_QUERY.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PersistQueryClientProvider } from '@tanstack/react-query-persist-client'\n\nconst App = () => {\n  return (\n    <PersistQueryClientProvider persistOptions={{ persister: clientPersister }}>\n      {...}\n    </PersistQueryClientProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating MMKV Storage and Migration Utility in TypeScript\nDESCRIPTION: A TypeScript module that initializes MMKV storage and provides a migration function to transfer data from AsyncStorage. The migration function handles data type preservation (especially for booleans) and cleans up the original AsyncStorage data after successful migration.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/docs/MIGRATE_FROM_ASYNC_STORAGE.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport {MMKV} from 'react-native-mmkv';\n\nexport const storage = new MMKV();\n\n// TODO: Remove `hasMigratedFromAsyncStorage` after a while (when everyone has migrated)\nexport const hasMigratedFromAsyncStorage = storage.getBoolean(\n  'hasMigratedFromAsyncStorage',\n);\n\n// TODO: Remove `hasMigratedFromAsyncStorage` after a while (when everyone has migrated)\nexport async function migrateFromAsyncStorage(): Promise<void> {\n  console.log('Migrating from AsyncStorage -> MMKV...');\n  const start = global.performance.now();\n\n  const keys = await AsyncStorage.getAllKeys();\n\n  for (const key of keys) {\n    try {\n      const value = await AsyncStorage.getItem(key);\n\n      if (value != null) {\n        if (['true', 'false'].includes(value)) {\n          storage.set(key, value === 'true');\n        } else {\n          storage.set(key, value);\n        }\n\n        AsyncStorage.removeItem(key);\n      }\n    } catch (error) {\n      console.error(\n        `Failed to migrate key \"${key}\" from AsyncStorage to MMKV!`,\n        error,\n      );\n      throw error;\n    }\n  }\n\n  storage.set('hasMigratedFromAsyncStorage', true);\n\n  const end = global.performance.now();\n  console.log(`Migrated from AsyncStorage -> MMKV in ${end - start}ms!`);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncStorage to MMKV Migration in React Native App Component\nDESCRIPTION: A React Native App component that triggers the AsyncStorage to MMKV migration process after interactions are completed. The component shows a loading indicator during migration and handles migration completion state.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/docs/MIGRATE_FROM_ASYNC_STORAGE.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n...\nimport { hasMigratedFromAsyncStorage, migrateFromAsyncStorage } from './storage';\n...\n\nexport default function App() {\n  // TODO: Remove `hasMigratedFromAsyncStorage` after a while (when everyone has migrated)\n  const [hasMigrated, setHasMigrated] = useState(hasMigratedFromAsyncStorage);\n\n  ...\n\n  useEffect(() => {\n    if (!hasMigratedFromAsyncStorage) {\n      InteractionManager.runAfterInteractions(async () => {\n        try {\n          await migrateFromAsyncStorage()\n          setHasMigrated(true)\n        } catch (e) {\n          // TODO: fall back to AsyncStorage? Wipe storage clean and use MMKV? Crash app?\n        }\n      });\n    }\n  }, []);\n\n  if (!hasMigrated) {\n    // show loading indicator while app is migrating storage...\n    return (\n      <View style={{ justifyContent: 'center', alignItems: 'center' }}>\n        <ActivityIndicator color=\"black\" />\n      </View>\n    );\n  }\n\n  return (\n    <YourAppsCode />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for React Native MMKV Native Module\nDESCRIPTION: Complete CMake configuration that sets up the build environment for the react-native-mmkv native module. It defines the project, sets C++ standard to 17, specifies source files, includes header search paths, and links against required dependencies including MMKV core, Android logging, JNI, and React Native generated code.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/package/android/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.9.0)\nproject(ReactNativeMmkv)\n\nset(CMAKE_VERBOSE_MAKEFILE ON)\nset(CMAKE_CXX_STANDARD 17)\n\n# Compile sources\nadd_library(\n        react-native-mmkv\n        SHARED\n        src/main/cpp/AndroidLogger.cpp\n        ../cpp/MmkvHostObject.cpp\n        ../cpp/NativeMmkvModule.cpp\n)\n\n# Add headers search paths\ntarget_include_directories(react-native-mmkv PUBLIC ../MMKV/Core)\ntarget_include_directories(react-native-mmkv PUBLIC ../cpp)\n\n# Add MMKV core dependency\nadd_subdirectory(../MMKV/Core core)\n\n# Add android/log dependency\nfind_library(log-lib log)\n\ntarget_link_libraries(\n        react-native-mmkv\n        core                        # <-- MMKV core\n        ${log-lib}                  # <-- Logcat logger\n        android                     # <-- Android JNI core\n        react_codegen_RNMmkvSpec    # <-- Generated Specs from CodeGen\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Native MMKV\nDESCRIPTION: Command to install required dependencies for the project using Yarn package manager.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Starting the Metro Packager for React Native MMKV Example\nDESCRIPTION: Command to start the Metro packager for the example app in the project.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn example start\n```\n\n----------------------------------------\n\nTITLE: Running React Native MMKV Example on Android\nDESCRIPTION: Command to run the example app on Android platform.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn example android\n```\n\n----------------------------------------\n\nTITLE: Running React Native MMKV Example on iOS\nDESCRIPTION: Command to run the example app on iOS platform.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/CONTRIBUTING.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn example ios\n```\n\n----------------------------------------\n\nTITLE: Verifying New Architecture in React Native MMKV\nDESCRIPTION: Metro log output indicating that the app is running with the new architecture, showing Fabric and Concurrent Root enabled.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/CONTRIBUTING.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nRunning \"MmkvExample\" with {\"fabric\":true,\"initialProps\":{\"concurrentRoot\":true},\"rootTag\":1}\n```\n\n----------------------------------------\n\nTITLE: Type Checking React Native MMKV Project\nDESCRIPTION: Command to run TypeScript type checking on the project files.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/CONTRIBUTING.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn typecheck\n```\n\n----------------------------------------\n\nTITLE: Linting React Native MMKV Project\nDESCRIPTION: Command to run ESLint for code linting on the project files.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/CONTRIBUTING.md#2025-04-20_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Fixing Formatting Errors in React Native MMKV\nDESCRIPTION: Command to automatically fix formatting errors using ESLint.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/CONTRIBUTING.md#2025-04-20_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nyarn lint --fix\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for React Native MMKV\nDESCRIPTION: Command to execute unit tests for the project using Jest.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/CONTRIBUTING.md#2025-04-20_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Publishing New Versions of React Native MMKV\nDESCRIPTION: Command to publish new versions of the project using release-it tool.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/CONTRIBUTING.md#2025-04-20_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nyarn release\n```\n\n----------------------------------------\n\nTITLE: Starting Metro Server in React Native\nDESCRIPTION: Commands to start the Metro JavaScript bundler that ships with React Native. This is the first step in running a React Native application and should be executed from the root of your project.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/package/example/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm start\n\n# OR using Yarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Running Android Application in React Native\nDESCRIPTION: Commands to start your React Native application on an Android device or emulator. These commands should be run in a separate terminal window after Metro Bundler is already running.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/package/example/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm run android\n\n# OR using Yarn\nyarn android\n```\n\n----------------------------------------\n\nTITLE: Running iOS Application in React Native\nDESCRIPTION: Commands to start your React Native application on an iOS simulator. These commands should be run in a separate terminal window after Metro Bundler is already running.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/package/example/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm run ios\n\n# OR using Yarn\nyarn ios\n```\n\n----------------------------------------\n\nTITLE: Installing React Query Persistence Packages\nDESCRIPTION: Command to install required React Query persistence packages using yarn. These packages enable integration of storage persistence with React Query.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/docs/WRAPPER_REACT_QUERY.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @tanstack/query-sync-storage-persister @tanstack/react-query-persist-client\n```\n\n----------------------------------------\n\nTITLE: Referencing README in Markdown\nDESCRIPTION: A markdown link to the project's README.md file on GitHub, which contains comprehensive information about the react-native-mmkv package.\nSOURCE: https://github.com/mrousavy/react-native-mmkv/blob/main/package/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[README.md](https://github.com/mrousavy/react-native-mmkv)\n```"
  }
]