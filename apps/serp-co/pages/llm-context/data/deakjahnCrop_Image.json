[
  {
    "owner": "deakjahn",
    "repo": "crop_image",
    "content": "TITLE: Initializing and Customizing CropImage Widget in Dart\nDESCRIPTION: This snippet demonstrates how to initialize and customize the CropImage widget. It shows various properties that can be set, including the controller, image source, grid colors, sizes, and event handling.\nSOURCE: https://github.com/deakjahn/crop_image/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal controller = CropController(\n  /// If not specified, [aspectRatio] will not be enforced.\n  aspectRatio: 1,\n  /// Specify in percentages (1 means full width and height). Defaults to the full image.\n  defaultCrop: Rect.fromLTRB(0.1, 0.1, 0.9, 0.9),\n);\n\nCropImage(\n  /// Only needed if you expect to make use of its functionality like setting initial values of\n  /// [aspectRatio] and [defaultCrop].\n  controller: controller,\n  /// The image to be cropped. Use [Image.file] or [Image.network] or any other [Image].\n  image: Image.asset('...'),\n  /// The crop grid color of the outer lines. Defaults to 70% white.\n  gridColor: Colors.white,\n  /// The crop grid color of the inner lines. Defaults to [gridColor].\n  gridInnerColor: Colors.white,\n  /// The crop grid color of the corner lines. Defaults to [gridColor].\n  gridCornerColor: Colors.white,\n  /// The size of the corner of the crop grid. Defaults to 25.\n  gridCornerSize: 50,\n  /// Whether to display the corners. Defaults to true.\n  showCorners: true,\n  /// The width of the crop grid thin lines. Defaults to 2.\n  gridThinWidth: 3,\n  /// The width of the crop grid thick lines. Defaults to 5.\n  gridThickWidth: 6,\n  /// The crop grid scrim (outside area overlay) color. Defaults to 54% black.\n  scrimColor: Colors.grey.withOpacity(0.5),\n  /// True: Always show third lines of the crop grid.\n  /// False: third lines are only displayed while the user manipulates the grid (default).\n  alwaysShowThirdLines: true,\n  /// Event called when the user changes the crop rectangle.\n  /// The passed [Rect] is normalized between 0 and 1.\n  onCrop: (rect) => print(rect),\n  /// The minimum pixel size the crop rectangle can be shrunk to. Defaults to 100.\n  minimumImageSize: 50,\n  /// The maximum pixel size the crop rectangle can be grown to. Defaults to infinity.\n  /// You can constrain the crop rectangle to a fixed size by setting\n  /// both [minimumImageSize] and [maximumImageSize] to the same value (the width) and using\n  /// the [aspectRatio] of the controller to force the other dimension (width / height).\n  /// Doing so disables the display of the corners.\n  maximumImageSize: 2000;\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Crop Results in Dart\nDESCRIPTION: This code shows how to retrieve the final crop rectangle in both relative (percentage) and pixel coordinates. It also demonstrates how to get the cropped bitmap and image using convenience functions provided by the CropController.\nSOURCE: https://github.com/deakjahn/crop_image/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nRect finalCropRelative = controller.crop;\nRect finalCropPixels = controller.cropSize;\n\nui.Image bitmap = await controller.croppedBitmap();\nImage image = await controller.croppedImage();\n```\n\n----------------------------------------\n\nTITLE: Saving Cropped Image to File in Dart\nDESCRIPTION: This snippet demonstrates how to save a cropped ui.Image to a file. It converts the image to PNG format bytes and writes them to a file. This process is not specific to the crop_image package but is a general Flutter operation.\nSOURCE: https://github.com/deakjahn/crop_image/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\ndata = await bitmap.toByteData(format: ImageByteFormat.png);\nbytes = data!.buffer.asUint8List();\nfile.writeAsBytes(bytes, flush);\n```\n\n----------------------------------------\n\nTITLE: Setting Up CropController with Initial Values in Dart\nDESCRIPTION: This snippet shows how to set up a CropController with initial values for aspect ratio and default crop area. It's useful for pre-configuring the crop area before displaying it to the user.\nSOURCE: https://github.com/deakjahn/crop_image/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal controller = CropController(\n  aspectRatio: 16.0 / 9.0,\n  defaultCrop: Rect.fromLTRB(0.05, 0.05, 0.95, 0.95),\n);\n```\n\n----------------------------------------\n\nTITLE: Programmatically Changing CropController Properties in Dart\nDESCRIPTION: This code demonstrates how to programmatically change the aspect ratio and crop rectangle of a CropController after it has been initialized. This allows for dynamic adjustment of the crop area.\nSOURCE: https://github.com/deakjahn/crop_image/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ncontroller.aspectRatio = 16.0 / 9.0;\ncontroller.crop = Rect.fromLTRB(0.05, 0.05, 0.95, 0.95);\n```\n\n----------------------------------------\n\nTITLE: Setting Rotation of Crop Rectangle in Dart\nDESCRIPTION: This snippet shows how to set the rotation of the crop rectangle to a specific orientation using the CropRotation enum. It also demonstrates how to rotate the crop area left or right.\nSOURCE: https://github.com/deakjahn/crop_image/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\ncontroller.rotation = CropRotation.right;\n\ncontroller.rotateLeft();\ncontroller.rotateRight();\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Detailed version history tracking changes from initial release 1.0.0 through version 1.0.16, including bug fixes, feature implementations, and documentation updates.\nSOURCE: https://github.com/deakjahn/crop_image/blob/master/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## [1.0.16] - 2025-02-26\n\n* Implement [#54](https://github.com/deakjahn/crop_image/issues/54).\n\n## [1.0.15] - 2024-11-08\n## [1.0.14] - 2024-11-08\n\n* Pub.dev screenshot\n* Funding\n\n## [1.0.13] - 2024-06-05\n\n* Implement [#53](https://github.com/deakjahn/crop_image/pull/53).\n\n## [1.0.12] - 2024-02-06\n\n* Add `maximumImageSize`. Implement [#39](https://github.com/deakjahn/crop_image/issues/39).\n* Implement [#43](https://github.com/deakjahn/crop_image/issues/43).\n\n## [1.0.11] - 2023-08-27\n\n* Implement [#35](https://github.com/deakjahn/crop_image/issues/35).\n\n## [1.0.10] - 2023-06-09\n\n* Implement [#27](https://github.com/deakjahn/crop_image/pull/27).\n\n## [1.0.9] - 2023-06-02\n\n* Fix [#26](https://github.com/deakjahn/crop_image/issues/26).\n\n## [1.0.8] - 2023-05-17\n\n* Revert to broader Flutter version range\n\n## [1.0.7] - 2023-05-17\n\n* Version upgrades (SDK 3)\n \n## [1.0.6] - 2023-05-01\n\n* Implement [#25](https://github.com/deakjahn/crop_image/pull/25).\n\n## [1.0.5] - 2023-04-15\n\n* Fix [#23](https://github.com/deakjahn/crop_image/issues/23).\n\n## [1.0.4] - 2023-03-08\n\n* Implement [#16](https://github.com/deakjahn/crop_image/pull/16).\n* Implement [#17](https://github.com/deakjahn/crop_image/pull/17).\n* Implement [#19](https://github.com/deakjahn/crop_image/pull/19).\n\n## [1.0.3] - 2022-09-17\n\n* Fix [#7](https://github.com/deakjahn/crop_image/issues/7).\n* Test [#12](https://github.com/deakjahn/crop_image/issues/12).\n\n## [1.0.2] - 2022-03-05\n\n* Implement [#5](https://github.com/deakjahn/crop_image/pull/5).\n\n## [1.0.1] - 2021-05-24\n\n* Documentation changes.\n\n## [1.0.0] - 2021-05-24\n\n* Initial release.\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Flutter Application Build in CMake\nDESCRIPTION: This CMake configuration defines the build process for a Windows Flutter application. It sets up the project, creates an executable with required source files, applies standard settings, and links Flutter libraries. It also configures include directories and dependencies.\nSOURCE: https://github.com/deakjahn/crop_image/blob/master/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter and Application Build in CMake\nDESCRIPTION: This section sets up the build rules for the Flutter library, the application, and its plugins. It includes the necessary subdirectories and generated plugin build rules.\nSOURCE: https://github.com/deakjahn/crop_image/blob/master/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter Tool Backend\nDESCRIPTION: Configures the Flutter tool backend with custom commands for generating necessary files and dependencies.\nSOURCE: https://github.com/deakjahn/crop_image/blob/master/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Flutter Application\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required version, and configures basic project properties. It also sets up build types and compiler flags for different configurations.\nSOURCE: https://github.com/deakjahn/crop_image/blob/master/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(example LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Configure build options.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter App Wrapper Library\nDESCRIPTION: Creates and configures the static library for Flutter app wrapper with necessary dependencies and include directories.\nSOURCE: https://github.com/deakjahn/crop_image/blob/master/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function in CMake\nDESCRIPTION: This function applies standard compilation settings to a given target. It sets C++17 as the standard, enables warnings, and defines preprocessing macros for exception handling and debug mode.\nSOURCE: https://github.com/deakjahn/crop_image/blob/master/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Plugin Wrapper Library\nDESCRIPTION: Creates and configures the static library for Flutter plugin wrapper with necessary compiler settings and dependencies.\nSOURCE: https://github.com/deakjahn/crop_image/blob/master/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers\nDESCRIPTION: Sets up the Flutter library paths, headers, and creates an interface library target for Flutter integration.\nSOURCE: https://github.com/deakjahn/crop_image/blob/master/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules for Flutter Application in CMake\nDESCRIPTION: This snippet sets up the installation rules for the Flutter application. It defines the installation directories, copies necessary files and libraries, and sets up the Flutter assets directory.\nSOURCE: https://github.com/deakjahn/crop_image/blob/master/example/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting up CPP Wrapper Sources\nDESCRIPTION: Defines and configures the C++ wrapper source files for core, plugin, and app components.\nSOURCE: https://github.com/deakjahn/crop_image/blob/master/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Example Header\nDESCRIPTION: Basic markdown header for a crop image example project.\nSOURCE: https://github.com/deakjahn/crop_image/blob/master/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Crop Image Example\n```"
  }
]