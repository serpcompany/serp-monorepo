[
  {
    "owner": "pocketbase",
    "repo": "pocketbase",
    "content": "TITLE: Implementing Basic PocketBase Server with Custom Route in Go\nDESCRIPTION: Demonstrates how to create a minimal PocketBase server implementation with a custom 'hello world' route. Includes initialization of the PocketBase app and event binding for server customization.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/pocketbase/pocketbase\"\n    \"github.com/pocketbase/pocketbase/core\"\n)\n\nfunc main() {\n    app := pocketbase.New()\n\n    app.OnServe().BindFunc(func(se *core.ServeEvent) error {\n        // registers new \"GET /hello\" route\n        se.Router.GET(\"/hello\", func(re *core.RequestEvent) error {\n            return re.String(200, \"Hello world!\")\n        })\n\n        return se.Next()\n    })\n\n    if err := app.Start(); err != nil {\n        log.Fatal(err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using PocketBase Update Command in Shell\nDESCRIPTION: Examples of using the new self-update command to update a PocketBase executable. This command allows updating PocketBase to the latest version with automatic backup capability.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_16_22.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n./pocketbase update\n```\n\n----------------------------------------\n\nTITLE: Querying Records with Excerpt Field Modifier in JavaScript\nDESCRIPTION: Demonstrates how to use the new ':excerpt' field modifier when querying records. This modifier returns a short plain text version of any string value, which can be used to minimize downloaded JSON data for large text fields.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_16_22.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait pb.collection(\"example\").getList(1, 20, {\n  \"fields\": \"*,description:excerpt(100)\"\n})\n```\n\n----------------------------------------\n\nTITLE: Realtime Subscription with Query Parameters in JavaScript SDK\nDESCRIPTION: Demonstrates how to use the new expand, filter, fields and custom query parameters with realtime subscriptions in JavaScript SDK v0.20.0+. This allows for more specific data filtering during live updates.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_16_22.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// JS SDK v0.20.0\npb.collection(\"example\").subscribe(\"*\", (e) => {\n  ...\n}, {\n  expand: \"someRelField\",\n  filter: \"status = 'active'\",\n  fields: \"id,expand.someRelField.*:excerpt(100)\",\n})\n```\n\n----------------------------------------\n\nTITLE: Programmatic Backup Creation in Go\nDESCRIPTION: Shows how to programmatically create a backup of the PocketBase data directory. This snippet demonstrates using the App.CreateBackup method to generate a backup archive.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_16_22.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\napp.CreateBackup(\"backup.zip\")\n```\n\n----------------------------------------\n\nTITLE: PocketBase Admin Management Commands in Shell\nDESCRIPTION: Examples of using the new admin command to create, update, or delete administrator accounts from the command line. This is useful for scripting and automation of admin management tasks.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_16_22.md#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n// creates new admin account\n./pocketbase admin create test@example.com 123456890\n\n// changes the password of an existing admin account\n./pocketbase admin update test@example.com 0987654321\n\n// deletes single admin account (if exists)\n./pocketbase admin delete test@example.com\n```\n\n----------------------------------------\n\nTITLE: Programmatic API Server Initialization in Go\nDESCRIPTION: Shows how to start the PocketBase API server programmatically using the apis.Serve helper. This allows for more flexibility when integrating PocketBase within a larger application.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_16_22.md#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\napis.Serve(app, options)\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Multiple File Fields in PocketBase v0.23\nDESCRIPTION: Demonstrates the new behavior for uploading files to multiple file fields in PocketBase v0.23+. Shows how to replace, prepend, or append files to an existing collection using the new syntax with '+' prefix or suffix.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\"documents\": [file1, file2]  // => [file1_name, file2_name]\n\"+documents\": [file1, file2] // => [file1_name, file2_name, old1_name, old2_name]\n\"documents+\": [file1, file2] // => [old1_name, old2_name, file1_name, file2_name]\n```\n\n----------------------------------------\n\nTITLE: Querying Records with Fields Parameter Example in JavaScript\nDESCRIPTION: Demonstrates how to use the fields parameter to limit returned API fields in a PocketBase query. This helps reduce response payload size by selecting only needed fields from records and expanded relations.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_16_22.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// original: {\"id\": \"RECORD_ID\", \"name\": \"abc\", \"description\": \"...something very big...\", \"items\": [\"id1\", \"id2\"], \"expand\": {\"items\": [{\"id\": \"id1\", \"name\": \"test1\"}, {\"id\": \"id2\", \"name\": \"test2\"}]}}\n// output:   {\"name\": \"abc\", \"expand\": {\"items\": [{\"name\": \"test1\"}, {\"name\": \"test2\"}]}}\nconst result = await pb.collection(\"example\").getOne(\"RECORD_ID\", {\n  expand: \"items\",\n  fields: \"name,expand.items.name\",\n})\n```\n\n----------------------------------------\n\nTITLE: Programmatic Backup Restoration in Go\nDESCRIPTION: Demonstrates how to restore a PocketBase backup programmatically. Note that this feature is experimental and currently works only on UNIX systems as it relies on execve.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_16_22.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\napp.RestoreBackup(\"backup.zip\")\n```\n\n----------------------------------------\n\nTITLE: Registering JavaScript VM Plugin in Go\nDESCRIPTION: Code snippet showing how to register the JavaScript VM plugin for custom Go builds of PocketBase. This allows enabling JavaScript app hooks for dynamic scripting.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_16_22.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\njsvm.MustRegister(app core.App, config jsvm.Config{})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Field Modifiers in JavaScript\nDESCRIPTION: Shows how to use the new '+' and '-' body field modifiers for number, files, select and relation fields. These modifiers allow for incrementing/decrementing numbers and adding/removing items from arrays.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_8_15.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // oldValue + 2\n  \"someNumber+\": 2,\n\n  // oldValue + [\"id1\", \"id2\"] - [\"id3\"]\n  \"someRelation+\": [\"id1\", \"id2\"],\n  \"someRelation-\": [\"id3\"],\n\n  // delete single file by its name (file fields supports only the \"-\" modifier!)\n  \"someFile-\": \"filename.png\",\n}\n```\n\n----------------------------------------\n\nTITLE: Realtime Subscription with Query Parameters in Dart SDK\nDESCRIPTION: Shows how to implement realtime subscriptions with expand, filter, and fields parameters in Dart SDK v0.17.0+. This enables filtered realtime data syncing with specific field selection.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_16_22.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Dart SDK v0.17.0\npb.collection(\"example\").subscribe(\"*\", (e) {\n    ...\n  },\n  expand: \"someRelField\",\n  filter: \"status = 'active'\",\n  fields: \"id,expand.someRelField.*:excerpt(100)\",\n)\n```\n\n----------------------------------------\n\nTITLE: Using DateTime Constructor with Timezone in JavaScript\nDESCRIPTION: Example of using the JSVM DateTime constructor with a timezone identifier to handle daylight saving time nuances.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// the same as with CET offset: new DateTime(\"2025-10-26 03:00:00 +01:00\")\nnew DateTime(\"2025-10-26 03:00:00\", \"Europe/Amsterdam\") // 2025-10-26 02:00:00.000Z\n\n// the same as with CEST offset: new DateTime(\"2025-10-26 01:00:00 +02:00\")\nnew DateTime(\"2025-10-26 01:00:00\", \"Europe/Amsterdam\") // 2025-10-25 23:00:00.000Z\n```\n\n----------------------------------------\n\nTITLE: Using JSVM Security Helpers (JavaScript)\nDESCRIPTION: Example of using the new JSVM helper crypto primitives under the $security namespace.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_16_22.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n$security.md5(text)\n$security.sha256(text)\n$security.sha512(text)\n```\n\n----------------------------------------\n\nTITLE: Using Placeholders in Dao.FindRecordsByFilter (Go)\nDESCRIPTION: Example of using the new placeholder params argument in Dao.FindRecordsByFilter to safely handle untrusted user input.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_16_22.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\napp.Dao().FindRecordsByFilter(\"articles\", \"status={:status} && author={:author}\", \"-created\", 10, 0, dbx.Params{\n  \"status\": status,\n  \"author\": author,\n})\n```\n\n----------------------------------------\n\nTITLE: Using HMAC and String Comparison in JSVM\nDESCRIPTION: Demonstrates the use of newly exposed crypto primitives in the JSVM $security namespace. This includes HMAC with SHA256 and SHA512, as well as constant-time string comparison.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_16_22.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// HMAC with SHA256\n$security.hs256(\"hello\", \"secret\")\n\n// HMAC with SHA512\n$security.hs512(\"hello\", \"secret\")\n\n// compare 2 strings with a constant time\n$security.equal(hash1, hash2)\n```\n\n----------------------------------------\n\nTITLE: Using DAO Record Helpers in Go\nDESCRIPTION: Examples of using new DAO helper methods in PocketBase for finding records by filter, checking record access, and creating a DAO without hooks.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_16_22.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\napp.Dao().FindRecordsByFilter(\"posts\", \"title ~ 'lorem ipsum' && visible = true\", \"-created\", 10)\napp.Dao().FindFirstRecordByFilter(\"posts\", \"slug='test' && active=true\")\napp.Dao().CanAccessRecord(record, requestInfo, rule)\napp.Dao().WithoutHooks()\n```\n\n----------------------------------------\n\nTITLE: Using the New Logger Implementation in Go\nDESCRIPTION: Demonstrates the usage of the new app.Logger() which implements standard log/slog interfaces in Go 1.21. This example shows how to log info messages with structured data.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_16_22.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n// Go: https://pocketbase.io/docs/go-logging/\napp.Logger().Info(\"Example message\", \"total\", 123, \"details\", \"lorem ipsum...\")\n```\n\n----------------------------------------\n\nTITLE: Using the New Logger Implementation in JavaScript\nDESCRIPTION: Shows how to use the new logger functionality in JavaScript with PocketBase. The logger supports structured logging with a similar API to the Go implementation.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_16_22.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// JS: https://pocketbase.io/docs/js-logging/\n$app.logger().info(\"Example message\", \"total\", 123, \"details\", \"lorem ipsum...\")\n```\n\n----------------------------------------\n\nTITLE: Using :each Modifier for Multi-select Fields in JavaScript\nDESCRIPTION: Demonstrates the use of the :each modifier for multi-select request data and collection fields, allowing conditions to be applied to each item in the array.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_8_15.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// check if all selected rows has \"pb_\" prefix\nroles:each ~ 'pb_%'\n```\n\n----------------------------------------\n\nTITLE: Using Record Helper Functions in Go\nDESCRIPTION: Code sample showing the new auth collection Record helper methods that replace previous User-related functionality. These methods manage username, email, verification, tokens, and password handling.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_8_15.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *Record) Username() string\nfunc (m *Record) SetUsername(username string) error\nfunc (m *Record) Email() string\nfunc (m *Record) SetEmail(email string) error\nfunc (m *Record) EmailVisibility() bool\nfunc (m *Record) SetEmailVisibility(visible bool) error\nfunc (m *Record) IgnoreEmailVisibility(state bool)\nfunc (m *Record) Verified() bool\nfunc (m *Record) SetVerified(verified bool) error\nfunc (m *Record) TokenKey() string\nfunc (m *Record) SetTokenKey(key string) error\nfunc (m *Record) RefreshTokenKey() error\nfunc (m *Record) LastResetSentAt() types.DateTime\nfunc (m *Record) SetLastResetSentAt(dateTime types.DateTime) error\nfunc (m *Record) LastVerificationSentAt() types.DateTime\nfunc (m *Record) SetLastVerificationSentAt(dateTime types.DateTime) error\nfunc (m *Record) ValidatePassword(password string) bool\nfunc (m *Record) SetPassword(password string) error\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Record Fields in Go\nDESCRIPTION: Methods for accessing and controlling serialization of unknown/custom fields in Record models. These helpers allow developers to handle custom data that isn't part of the standard Record schema.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_8_15.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *Record) UnknownData() map[string]any\nfunc (m *Record) WithUnknownData(state bool)\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Match Conditions in JavaScript\nDESCRIPTION: Demonstrates how to use multi-match/match-all request data and collection multi-valued fields conditions. The '?' prefix is used for 'at least one of' type conditions.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_8_15.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// for each someRelA.someRelB record require the \"status\" field to be \"active\"\nsomeRelA.someRelB.status = \"active\"\n\n// OR for \"at least one of\" condition\nsomeRelA.someRelB.status ?= \"active\"\n```\n\n----------------------------------------\n\nTITLE: PocketBase Error Response Structure in v0.23\nDESCRIPTION: Shows the updated error response structure in PocketBase v0.23 where the top-level 'code' key has been renamed to 'status' for consistency with the Go APIs, while the error field key remains 'code'.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"status\": 400, // <-- old: \"code\"\n    \"message\": \"Failed to create record.\",\n    \"data\": {\n        \"title\": {\n            \"code\": \"validation_required\",\n            \"message\": \"Missing required value.\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: New Auth Methods Response Structure in PocketBase v0.23\nDESCRIPTION: Demonstrates the updated response structure from the 'GET /api/collections/{collection}/auth-methods' endpoint, which includes new fields for MFA, OTP, password, and OAuth2 configurations while maintaining backward compatibility.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"mfa\": {\n        \"duration\": 100,\n        \"enabled\": true\n    },\n    \"otp\": {\n        \"duration\": 0,\n        \"enabled\": false\n    },\n    \"password\": {\n        \"enabled\": true,\n        \"identityFields\": [\"email\", \"username\"]\n    },\n    \"oauth2\": {\n        \"enabled\": true,\n        \"providers\": [{\"name\": \"gitlab\", ...}, {\"name\": \"google\", ...}]\n    },\n    // old fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Request Data Relation Fields in JavaScript\nDESCRIPTION: Shows how to query @request.data.someRelField.* relation fields, allowing access to related record fields in API rules.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_8_15.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// example submitted data: {\"someRel\": \"REL_RECORD_ID\"}\n@request.data.someRel.status = \"active\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Expanded Relations in Go\nDESCRIPTION: Helper methods to retrieve casted single or multiple expand relations from already loaded 'expand' Record data in PocketBase.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_16_22.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nrecord.ExpandedOne(rel)\nrecord.ExpandedAll(rel)\n```\n\n----------------------------------------\n\nTITLE: Using PocketBase Tagged Event Hooks in Go\nDESCRIPTION: Example of using the new tagged event hooks feature in PocketBase that allows registering event handlers for specific collections by name or ID.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_8_15.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\napp.OnRecordBeforeCreateRequest(\"articles\").Add(func(e *core.RecordCreateEvent) error {\n  // called only on \"articles\" record creation\n  log.Println(e.Record)\n  return nil\n})\n```\n\n----------------------------------------\n\nTITLE: Using Raw Template Function in JSVM\nDESCRIPTION: Shows how to use the new global 'raw' template function in JSVM templates to output raw/verbatim HTML content. This is useful when you need to include unescaped HTML in your template output.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_16_22.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{{.description|raw}}\n```\n\n----------------------------------------\n\nTITLE: Serving PocketBase with Custom Domain (Shell)\nDESCRIPTION: Example of how to serve PocketBase with a custom domain name using the simplified 'serve' command.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_16_22.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n./pocketbase serve yourdomain.com\n```\n\n----------------------------------------\n\nTITLE: Applying :length Modifier to Arrayable Fields in JavaScript\nDESCRIPTION: Shows how to use the :length modifier for arrayable request data and collection fields (select, file, relation) to check the length of the array.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_8_15.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// example submitted data: {\"someSelectField\": [\"val1\", \"val2\"]}\n@request.data.someSelectField:length = 2\n\n// check existing record field length\nsomeSelectField:length = 2\n```\n\n----------------------------------------\n\nTITLE: Updating Mailer Message Structure in Go\nDESCRIPTION: Example showing how to migrate from the old mailer.Message structure to the new one which changed To, Cc, and Bcc fields to use []mail.Address type for consistency and to allow multiple recipients with optional names.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_8_15.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmessage := &mailer.Message{\n  ...\n\n  // (old) To: mail.Address{Address: \"to@example.com\"}\n  To: []mail.Address{{Address: \"to@example.com\", Name: \"Some optional name\"}},\n\n  // (old) Cc: []string{\"cc@example.com\"}\n  Cc: []mail.Address{{Address: \"cc@example.com\", Name: \"Some optional name\"}},\n\n  // (old) Bcc: []string{\"bcc@example.com\"}\n  Bcc: []mail.Address{{Address: \"bcc@example.com\", Name: \"Some optional name\"}},\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Development Server for PocketBase UI in Shell\nDESCRIPTION: This code snippet demonstrates how to install dependencies, start a development server with hot reload, and generate a production-ready bundle for the PocketBase Superuser dashboard UI. It uses npm commands for package management and build processes.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# install dependencies\nnpm install\n\n# start a dev server with hot reload at localhost:3000\nnpm run dev\n\n# or generate production ready bundle in dist/ directory\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Using :isset Modifier for Static Request Data Fields in JavaScript\nDESCRIPTION: Demonstrates the use of the :isset modifier for static request data fields, which can be used to prevent changing specific fields.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_8_15.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// prevent changing the \"role\" field\n@request.data.role:isset = false\n```\n\n----------------------------------------\n\nTITLE: Setting up and running the PocketBase Admin UI\nDESCRIPTION: Command to start the development server for the Admin UI after installing dependencies, allowing frontend changes to be immediately visible.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Updating ApiScenario for Create API Rule Failure Test in Go\nDESCRIPTION: Example of updating a Go test scenario for checking a Create API rule failure, reflecting changes in the event firing order.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntests.ApiScenario{\n    Name:   \"Example test that checks a Create API rule failure\"\n    Method: http.MethodPost,\n    URL:    \"/api/collections/example/records\",\n    ...\n    // old:\n    ExpectedEvents:  map[string]int{\n        \"*\":                     0,\n        \"OnRecordCreateRequest\": 1,\n    },\n    // new:\n    ExpectedEvents:  map[string]int{\"*\": 0},\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the PocketBase repository for contribution\nDESCRIPTION: Command to clone your forked PocketBase repository to your local machine for development purposes.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your_username/pocketbase.git\n```\n\n----------------------------------------\n\nTITLE: Running the PocketBase Go server during development\nDESCRIPTION: Commands to navigate to the example implementation and run the PocketBase server for testing Go code changes.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo run main.go serve\n```\n\n----------------------------------------\n\nTITLE: Running Go tests for PocketBase\nDESCRIPTION: Commands to run the Go tests in the PocketBase project, including using the standard test command or the Makefile shortcut.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngo test ./...\n\n# or using the Makefile\nmake test\n```\n\n----------------------------------------\n\nTITLE: Accessing Original Filename in Filesystem\nDESCRIPTION: Example showing how to access the original uploaded filename stored in file metadata.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_8_15.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfs, _ := app.NewFilesystem()\ndefer fs.Close()\n\nattrs, _ := fs.Attributes(fikeKey)\nattrs.Metadata[\"original_name\"]\n```\n\n----------------------------------------\n\nTITLE: Migration Registration in Go\nDESCRIPTION: Example of registering migrations in PocketBase application with support for JavaScript migrations.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_8_15.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nmigrationsDir := \"\" // default to \"pb_migrations\" (for js) and \"migrations\" (for go)\n\n// load js files if you want to allow loading external JavaScript migrations\njsvm.MustRegisterMigrations(app, &jsvm.MigrationsOptions{\n    Dir: migrationsDir,\n})\n\n// register the `migrate` command\nmigratecmd.MustRegister(app, app.RootCmd, &migratecmd.Options{\n    TemplateLang: migratecmd.TemplateLangJS, // or migratecmd.TemplateLangGo (default)\n    Dir:          migrationsDir,\n    Automigrate:  true,\n})\n```\n\n----------------------------------------\n\nTITLE: Running Go linter on PocketBase codebase\nDESCRIPTION: Commands to run the golangci-lint linter on the PocketBase Go code, either directly or using the Makefile shortcut.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngolangci-lint run -c ./golangci.yml ./...\n\n# or using the Makefile\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Installing Latest JavaScript SDK for PocketBase\nDESCRIPTION: Command to install the latest version of the PocketBase JavaScript SDK via npm. Users should check the JavaScript SDK changelog for specific changes.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_8_15.md#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nnpm install pocketbase@latest --save\n```\n\n----------------------------------------\n\nTITLE: Adding Event Hooks in Go\nDESCRIPTION: Lists new event hooks added to PocketBase for various operations including bootstrap, API errors, realtime connections, and user authentication flows.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_8_15.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\napp.OnBeforeBootstrap()\napp.OnAfterBootstrap()\napp.OnBeforeApiError()\napp.OnAfterApiError()\napp.OnRealtimeDisconnectRequest()\napp.OnRealtimeBeforeMessageSend()\napp.OnRealtimeAfterMessageSend()\napp.OnRecordBeforeRequestPasswordResetRequest()\napp.OnRecordAfterRequestPasswordResetRequest()\napp.OnRecordBeforeConfirmPasswordResetRequest()\napp.OnRecordAfterConfirmPasswordResetRequest()\napp.OnRecordBeforeRequestVerificationRequest()\napp.OnRecordAfterRequestVerificationRequest()\napp.OnRecordBeforeConfirmVerificationRequest()\napp.OnRecordAfterConfirmVerificationRequest()\napp.OnRecordBeforeRequestEmailChangeRequest()\napp.OnRecordAfterRequestEmailChangeRequest()\napp.OnRecordBeforeConfirmEmailChangeRequest()\napp.OnRecordAfterConfirmEmailChangeRequest()\n```\n\n----------------------------------------\n\nTITLE: Installing Dart SDK for PocketBase\nDESCRIPTION: Commands to install the PocketBase Dart SDK version 0.5.0 or above using either dart pub or flutter pub. Users should reference the Dart SDK changelog for specific changes.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_8_15.md#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ndart pub add pocketbase:^0.5.0\n# or with Flutter:\nflutter pub add pocketbase:^0.5.0\n```\n\n----------------------------------------\n\nTITLE: Pinning AWS SDK Go v2 Versions in go.mod\nDESCRIPTION: Specifies the versions of AWS SDK Go v2 dependencies to use in the go.mod file to maintain compatibility with non-AWS S3 providers. Includes instructions for cleaning the module cache and tidying dependencies.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// go.mod\ngithub.com/aws/aws-sdk-go-v2 v1.36.1\ngithub.com/aws/aws-sdk-go-v2/config v1.28.10\ngithub.com/aws/aws-sdk-go-v2/credentials v1.17.51\ngithub.com/aws/aws-sdk-go-v2/feature/s3/manager v1.17.48\ngithub.com/aws/aws-sdk-go-v2/service/s3 v1.72.2\n\n// after that run\ngo clean -modcache && go mod tidy\n```\n\n----------------------------------------\n\nTITLE: Version Update Log Entry Example\nDESCRIPTION: Example of how version changes are documented in the changelog, showing the format used to document backported changes, improvements, and fixes.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_16_22.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## v0.22.34\n\n- (_Backported from v0.26.6_) Allow OIDC `email_verified` to be int or boolean string since some OIDC providers like AWS Cognito has non-standard userinfo response ([#6657](https://github.com/pocketbase/pocketbase/pull/6657)).\n```\n\n----------------------------------------\n\nTITLE: PocketBase Changelog Entry v0.23.0\nDESCRIPTION: Major release notes detailing significant changes including API breaking changes, new features, and upgrade requirements.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## v0.23.0\n\n> [!NOTE]\n> You don't have to upgrade to PocketBase v0.23.0 if you are not planning further developing\n> your existing app and/or are satisfied with the v0.22.x features set.\n\n> [!CAUTION]\n> This release introduces many Go/JSVM and Web APIs breaking changes!\n```\n\n----------------------------------------\n\nTITLE: JavaScript Migration Example\nDESCRIPTION: Sample JavaScript migration file showing collection name update with up and down migration handlers.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_8_15.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmigrate((db) => {\n    // up\n    const dao = new Dao(db)\n    const collection = dao.findCollectionByNameOrId(\"lngf8rb3dqu86r3\")\n    collection.name = \"posts_new\"\n    return dao.saveCollection(collection)\n}, (db) => {\n    // down\n    const dao = new Dao(db)\n    const collection = dao.findCollectionByNameOrId(\"lngf8rb3dqu86r3\")\n    collection.name = \"posts_old\"\n    return dao.saveCollection(collection)\n})\n```\n\n----------------------------------------\n\nTITLE: PocketBase Changelog Entry v0.23.12\nDESCRIPTION: Release notes documenting warning logs for mismatched SQLite versions and body size limit middleware changes.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## v0.23.12\n\n- Added warning logs in case of mismatched `modernc.org/sqlite` and `modernc.org/libc` versions (#6136).\n\n- Skipped the default body size limit middleware for the backup upload endpoint (#6152).\n```\n\n----------------------------------------\n\nTITLE: PocketBase Changelog Entry v0.23.11\nDESCRIPTION: Release notes documenting security update for golang.org/x/net package.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## v0.23.11\n\n- Upgraded `golang.org/x/net` to 0.33.0 to fix [CVE-2024-45338].\n```\n\n----------------------------------------\n\nTITLE: Deprecated Components in PocketBase v0.9+\nDESCRIPTION: The list of components that are marked as deprecated and will be removed in PocketBase v0.9+. This includes EmailAuth settings, EmailAuthConfig, user-specific field types and options.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_8_15.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\ncore.Settings.EmailAuth{}\ncore.EmailAuthConfig{}\nschema.FieldTypeUser\nschema.UserOptions{}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Code Example\nDESCRIPTION: Example of JavaScript code migration showing the transition from String.fromCharCode to toString helper function for handling multi-byte characters.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_16_22.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndecodeURIComponent(escape(String.fromCharCode(...bytes))) -> toString(bytes)\n```\n\n----------------------------------------\n\nTITLE: Updating JsonArray Type in Go\nDESCRIPTION: Change to types.JsonArray to support specifying a generic type.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_8_15.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nChanged `types.JsonArray` to support specifying a generic type, aka. `types.JsonArray[T]`.\nIf you have previously used `types.JsonArray`, you'll have to update it to `types.JsonArray[any]`.\n```\n\n----------------------------------------\n\nTITLE: Renaming Dao Functions in Go\nDESCRIPTION: Renaming of two Dao functions for consistency with other Dao table related helpers.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_8_15.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nRenamed `daos.GetTableColumns()` to `daos.TableColumns()` for consistency with the other Dao table related helpers.\n\nRenamed `daos.GetTableInfo()` to `daos.TableInfo()` for consistency with the other Dao table related helpers.\n```\n\n----------------------------------------\n\nTITLE: Updating Record Model in Go\nDESCRIPTION: Code snippet for triggering related Record model realtime subscription events on custom model struct save.\nSOURCE: https://github.com/pocketbase/pocketbase/blob/master/CHANGELOG_8_15.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nTrigger the related `Record` model realtime subscription events on [custom model struct](https://pocketbase.io/docs/custom-models/) save\n```"
  }
]