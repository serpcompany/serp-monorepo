[
  {
    "owner": "hasnayeen",
    "repo": "filav4",
    "content": "TITLE: Generating a Slug from a Title - Filament (Preventing Overwrite)\nDESCRIPTION: This snippet expands on the previous example by preventing overwriting a manually customized slug. It injects the `$old` parameter to access the old title value and the `$get()` utility to retrieve the current slug value before modification. It then compares the current slug with the slug generated from the old title to determine if the user has manually modified it. If not, it updates the slug based on the new title.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_82\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Utilities\\Get;\nuse Filament\\Schemas\\Components\\Utilities\\Set;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Support\\Str;\n\nTextInput::make('title')\n    ->live(onBlur: true)\n    ->afterStateUpdated(function (Get $get, Set $set, ?string $old, ?string $state) {\n        if (($get('slug') ?? '') !== Str::slug($old)) {\n            return;\n        }\n    \n        $set('slug', Str::slug($state));\n    })\n    \nTextInput::make('slug')\n```\n\n----------------------------------------\n\nTITLE: Generating a Slug from a Title - Filament (Live)\nDESCRIPTION: This snippet demonstrates how to generate a slug from a title field in a Filament form using the `afterStateUpdated()` method. It utilizes the `live(onBlur: true)` method to rerender the schema when the title field changes, and the `Str::slug()` method to generate the slug. The slug field is then updated using the `$set()` function.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_81\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Utilities\\Set;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Support\\Str;\n\nTextInput::make('title')\n    ->live(onBlur: true)\n    ->afterStateUpdated(fn (Set $set, ?string $state) => $set('slug', Str::slug($state)))\n    \nTextInput::make('slug')\n```\n\n----------------------------------------\n\nTITLE: Installing Filament Panel Builder\nDESCRIPTION: This command installs the Filament Panel Builder package using Composer. The Panel Builder is the foundation of Filament, allowing you to quickly build Laravel admin panels, customer-facing apps, and SaaS platforms. It requires Composer to be installed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require filament/filament\n```\n\n----------------------------------------\n\nTITLE: Customizing Redirect After Creation in Filament (PHP)\nDESCRIPTION: This code shows how to override the default redirect behavior after a record is successfully created in Filament using the `getRedirectUrl()` method.  It returns a string representing the URL to which the user should be redirected. This allows for control over the navigation flow after a successful creation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected function getRedirectUrl(): string\n{\n    return $this->getResource()::getUrl('index');\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Filament Importer Class\nDESCRIPTION: This code snippet shows how to use the `make:filament-importer` Artisan command to generate a new importer class for a specific model (e.g., Product). This command creates a file in the `app/Filament/Imports` directory that can be customized to define the import logic.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-importer Product\n```\n\n----------------------------------------\n\nTITLE: Generating Filament Resource with Form and Table\nDESCRIPTION: This command creates a Filament resource for the `Customer` model and automatically generates the form and table based on the model's database columns. It is a quick way to scaffold the UI based on database schema.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-resource Customer --generate\n```\n\n----------------------------------------\n\nTITLE: Conditionally Making a Field Required\nDESCRIPTION: This code demonstrates how to make a field required based on the value of another field. The 'vat_number' field is required only when the 'company_name' field is filled.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_80\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Utilities\\Get;\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('company_name')\n    ->live(onBlur: true)\n    \nTextInput::make('vat_number')\n    ->required(fn (Get $get): bool => filled($get('company_name')))\n```\n\n----------------------------------------\n\nTITLE: Building a Form Schema with Filament - PHP\nDESCRIPTION: This code snippet demonstrates how to build a form schema using Filament's form components. It uses components like TextInput, Select, and Checkbox within Section and Grid layout components to define the structure and behavior of the UI. The example showcases how to organize form fields into sections and arrange them using a grid layout.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/01-overview.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Checkbox;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Infolists\\Components\\TextEntry;\nuse Filament\\Schemas\\Components\\Section;\n\n$schema\n    ->components([\n        Grid::make(2)\n            ->schema([\n                Section::make('Details')\n                    ->schema([\n                        TextInput::make('name'),\n                        Select::make('position')\n                            ->options([\n                                'developer' => 'Developer',\n                                'designer' => 'Designer',\n                            ]),\n                        Checkbox::make('is_admin'),\n                    ]),\n                Section::make('Auditing')\n                    ->schema([\n                        TextEntry::make('created_at')\n                            ->dateTime(),\n                        TextEntry::make('updated_at')\n                            ->dateTime(),\n                    ]),\n            ]),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Registering Filter Tabs\nDESCRIPTION: This snippet demonstrates how to register tabs above a table in FilamentPHP to filter records based on predefined conditions. It shows how to add a `getTabs()` method to the List page class and return an array of `Tab` objects, using Eloquent queries to scope the data for each tab. Each tab filters records based on the 'active' status.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/02-listing-records.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Tabs\\Tab;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\npublic function getTabs(): array\n{\n    return [\n        'all' => Tab::make(),\n        'active' => Tab::make()\n            ->modifyQueryUsing(fn (Builder $query) => $query->where('active', true)),\n        'inactive' => Tab::make()\n            ->modifyQueryUsing(fn (Builder $query) => $query->where('active', false)),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Select options with a function in Filament\nDESCRIPTION: This code snippet shows how to dynamically populate the options of a Select component in Filament using a function. The function queries the User model and returns an array of user names keyed by their IDs. It requires the App\\Models\\User model and the Filament\\Forms\\Components\\Select component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_52\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\User;\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\TextInput;\n\nSelect::make('user_id')\n    ->options(function (): array {\n        return User::query()->pluck('name', 'id')->all();\n    })\n```\n\n----------------------------------------\n\nTITLE: Modal content footer - Filament Actions (PHP)\nDESCRIPTION: This snippet demonstrates how to add custom content below the form within a Filament Action modal by using the `modalContentFooter()` method and passing a Blade view. Requires Filament Actions and a corresponding Blade view file.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Actions\\Action;\n\nAction::make('advance')\n    ->action(fn (Post $record) => $record->advance())\n    ->modalContentFooter(view('filament.pages.actions.advance'))\n```\n\n----------------------------------------\n\nTITLE: Modifying Form Data Before Creation in Filament (PHP)\nDESCRIPTION: This code snippet demonstrates how to modify form data before it's saved to the database using the `mutateFormDataBeforeCreate()` method in a Filament Create page class. It accepts an array `$data` representing the form data, modifies it (in this case, setting the `user_id`), and returns the modified array.  This allows for preprocessing and enrichment of the data before persistence.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprotected function mutateFormDataBeforeCreate(array $data): array\n{\n    $data['user_id'] = auth()->id();\n\n    return $data;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Enum Labels with HasLabel in PHP\nDESCRIPTION: This code snippet demonstrates how to implement the `HasLabel` interface in a PHP enum to transform enum instances into textual labels.  The `getLabel()` method is used to define how the label is derived from the enum case. The example shows how to return the enum name directly or use a `match` statement for custom labels. It depends on the `Filament\\Support\\Contracts\\HasLabel` interface.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/03-enums.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Contracts\\HasLabel;\n\nenum Status: string implements HasLabel\n{\n    case Draft = 'draft';\n    case Reviewing = 'reviewing';\n    case Published = 'published';\n    case Rejected = 'rejected';\n    \n    public function getLabel(): ?string\n    {\n        return $this->name;\n        \n        // or\n    \n        return match ($this) {\n            self::Draft => 'Draft',\n            self::Reviewing => 'Reviewing',\n            self::Published => 'Published',\n            self::Rejected => 'Rejected',\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Filament for Production (Artisan Command)\nDESCRIPTION: This command optimizes Filament for production by caching Filament components and Blade icons.  It should be included in the deployment script to significantly improve performance of Filament panels.  It requires `php` and the Filament package.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/13-deployment.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan filament:optimize\n```\n\n----------------------------------------\n\nTITLE: Authorizing Filament Actions (PHP)\nDESCRIPTION: This code snippet shows how to conditionally display or hide actions based on user authorization using the `visible()` or `hidden()` methods.  This ensures that only users with the appropriate permissions can execute certain actions.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('edit')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n    ->visible(auth()->user()->can('update', $this->post))\n\nAction::make('edit')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n    ->hidden(! auth()->user()->can('update', $this->post))\n```\n\n----------------------------------------\n\nTITLE: Customizing Data (Filament Replicate Action, PHP)\nDESCRIPTION: Demonstrates how to customize the data before it's filled into the form during replication. It uses the `mutateRecordDataUsing()` method with a closure that modifies the `$data` array before returning it. This example sets the 'user_id' to the authenticated user's ID.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/08-replicate.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\ReplicateAction;\n\nReplicateAction::make()\n    ->mutateRecordDataUsing(function (array $data): array {\n        $data['user_id'] = auth()->id();\n\n        return $data;\n    })\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding a Field\nDESCRIPTION: This snippet shows how to conditionally hide a field based on the value of another field using the `hidden()` method and the `$get` utility. The 'company_name' field is hidden when the 'is_company' checkbox is not checked.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_78\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Utilities\\Get;\nuse Filament\\Forms\\Components\\Checkbox;\nuse Filament\\Forms\\Components\\TextInput;\n\nCheckbox::make('is_company')\n    ->live()\n\nTextInput::make('company_name')\n    ->hidden(fn (Get $get): bool => ! $get('is_company'))\n```\n\n----------------------------------------\n\nTITLE: Creating Tenant Scope Middleware - PHP\nDESCRIPTION: This code snippet demonstrates how to create a middleware class to apply additional tenant scoping to Eloquent models within a Filament panel. It uses `Author::addGlobalScope` to scope queries to the current tenant based on the relationship established with `Filament::getTenant()`. The middleware ensures that all queries for `Author` models are automatically filtered by tenant.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nphp artisan make:middleware ApplyTenantScopes\n```\n\n----------------------------------------\n\nTITLE: Implementing QueryBuilder filter in Filament Table (PHP)\nDESCRIPTION: This code snippet demonstrates how to add a QueryBuilder filter to a Filament table. It defines various constraints such as Text, Boolean, Number, Select, Date, and Relationship constraints, to allow users to filter table data based on these constraints.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder;\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\BooleanConstraint;\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\DateConstraint;\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\NumberConstraint;\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\RelationshipConstraint;\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\RelationshipConstraint\\Operators\\IsRelatedToOperator;\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\SelectConstraint;\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\TextConstraint;\n\nQueryBuilder::make()\n    ->constraints([\n        TextConstraint::make('name'),\n        BooleanConstraint::make('is_visible'),\n        NumberConstraint::make('stock'),\n        SelectConstraint::make('status')\n            ->options([\n                'draft' => 'Draft',\n                'reviewing' => 'Reviewing',\n                'published' => 'Published',\n            ])\n            ->multiple(),\n        DateConstraint::make('created_at'),\n        RelationshipConstraint::make('categories')\n            ->multiple()\n            ->selectable(\n                IsRelatedToOperator::make()\n                    ->titleAttribute('name')\n                    ->searchable()\n                    ->multiple(),\n            ),\n        NumberConstraint::make('reviewsRating')\n            ->relationship('reviews', 'rating')\n            ->integer(),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Customizing Eloquent Query - PHP\nDESCRIPTION: This code snippet demonstrates customizing the Eloquent query for a Filament resource using the `getEloquentQuery()` method.  It adds a `where` clause to filter the results.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\npublic static function getEloquentQuery(): Builder\n{\n    return parent::getEloquentQuery()->where('is_active', true);\n}\n```\n\n----------------------------------------\n\nTITLE: Using a wizard\nDESCRIPTION: This code demonstrates how to transform the creation process into a multi-step wizard by defining a `steps()` array and passing `Step` objects. Each step defines a schema for its respective form fields. Dependencies include `Filament\\Actions\\CreateAction`, `Filament\\Forms\\Components\\MarkdownEditor`, `Filament\\Forms\\Components\\TextInput`, `Filament\\Forms\\Components\\Toggle`, and `Filament\\Schemas\\Components\\Wizard\\Step`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/04-create.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\CreateAction;\nuse Filament\\Forms\\Components\\MarkdownEditor;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Components\\Toggle;\nuse Filament\\Schemas\\Components\\Wizard\\Step;\n\nCreateAction::make()\n    ->steps([\n        Step::make('Name')\n            ->description('Give the category a unique name')\n            ->schema([\n                TextInput::make('name')\n                    ->required()\n                    ->live()\n                    ->afterStateUpdated(fn ($state, callable $set) => $set('slug', Str::slug($state))),\n                TextInput::make('slug')\n                    ->disabled()\n                    ->required()\n                    ->unique(Category::class, 'slug'),\n            ])\n            ->columns(2),\n        Step::make('Description')\n            ->description('Add some extra details')\n            ->schema([\n                MarkdownEditor::make('description'),\n            ]),\n        Step::make('Visibility')\n            ->description('Control who can view it')\n            ->schema([\n                Toggle::make('is_visible')\n                    ->label('Visible to customers.')\n                    ->default(true),\n            ]),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to Authenticated Routes in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to apply middleware specifically to authenticated routes within a Filament panel using the `authMiddleware()` method. Middleware is run on the initial page load, but not on subsequent Livewire AJAX requests unless `isPersistent: true` is passed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/05-panel-configuration.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->authMiddleware([\n            // ...\n        ]);\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->authMiddleware([\n            // ...\n        ], isPersistent: true);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Line Chart Widget - PHP\nDESCRIPTION: This code snippet demonstrates how to create a simple line chart widget in Filament using PHP. It defines the widget's heading, data, and chart type. The `getData()` method returns an array of datasets and labels for the chart.  This example uses hardcoded data but can be adapted to fetch data from a database or other source.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/03-charts.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Filament\\Widgets;\n\nuse Filament\\Widgets\\ChartWidget;\n\nclass BlogPostsChart extends ChartWidget\n{\n    protected ?string $heading = 'Blog Posts';\n\n    protected function getData(): array\n    {\n        return [\n            'datasets' => [\n                [\n                    'label' => 'Blog posts created',\n                    'data' => [0, 10, 5, 2, 21, 32, 45, 74, 65, 45, 77, 89],\n                ],\n            ],\n            'labels' => ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        ];\n    }\n\n    protected function getType(): string\n    {\n        return 'line';\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Saving data to a HasOne relationship using Fieldset\nDESCRIPTION: This snippet demonstrates how to use the `relationship()` method on a `Fieldset` component to automatically load and save data from a `HasOne`, `BelongsTo` or `MorphOne` Eloquent relationship. The `title`, `description`, and `image` fields are loaded from the `metadata` relationship and saved back to it upon form submission. If the `metadata` record doesn't exist, it will be automatically created.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_90\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\nuse Filament\\Forms\\Components\\Textarea;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Fieldset;\n\nFieldset::make('Metadata')\n    ->relationship('metadata')\n    ->schema([\n        TextInput::make('title'),\n        Textarea::make('description'),\n        FileUpload::make('image'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Changing the Panel Path in Filament (PHP)\nDESCRIPTION: This code snippet demonstrates how to change the path of a Filament panel using the `path()` method. It allows you to customize the URL where the panel is accessible. You can set it to an empty string to make the app accessible without a prefix.  Ensure the route isn't defined elsewhere.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/05-panel-configuration.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->path('app');\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->path('');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Export Formats for Filament Export Action\nDESCRIPTION: This code snippet demonstrates how to configure the export formats (CSV and XLSX) using the `formats()` method on the Filament `ExportAction`. It uses the `ExportFormat` enum to specify the desired formats.  You can choose one or more formats.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Exports\\ProductExporter;\nuse Filament\\Actions\\ExportAction;\nuse Filament\\Actions\\Exports\\Enums\\ExportFormat;\n\nExportAction::make()\n    ->exporter(ProductExporter::class)\n    ->formats([\n        ExportFormat::Csv,\n    ])\n    // or\n    ->formats([\n        ExportFormat::Xlsx,\n    ])\n    // or\n    ->formats([\n        ExportFormat::Xlsx,\n        ExportFormat::Csv,\n    ])\n```\n\n----------------------------------------\n\nTITLE: Creating a Confirmation Action in Filament (PHP)\nDESCRIPTION: This code snippet demonstrates how to create an action in Filament that requires user confirmation before execution. It utilizes the `Action::make()` method to define the action, `requiresConfirmation()` to enable confirmation, and `action()` to specify the operation to be performed after confirmation, which in this case, is deleting a client.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('delete')\n    ->requiresConfirmation()\n    ->action(fn () => $this->client->delete())\n```\n\n----------------------------------------\n\nTITLE: Implementing HasTenants Interface - PHP\nDESCRIPTION: This code shows how to implement the `HasTenants` interface on the `User` model. This is necessary for Filament to understand which tenants a user belongs to. It requires a `teams()` relationship to be defined on the `User` model and the existence of the `App\\Models\\Team` model.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Filament\\Models\\Contracts\\FilamentUser;\nuse Filament\\Models\\Contracts\\HasTenants;\nuse Filament\\Panel;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Support\\Collection;\n\nclass User extends Authenticatable implements FilamentUser, HasTenants\n{\n    // ...\n\n    public function teams(): BelongsToMany\n    {\n        return $this->belongsToMany(Team::class);\n    }\n\n    public function getTenants(Panel $panel): Collection\n    {\n        return $this->teams;\n    }\n\n    public function canAccessTenant(Model $tenant): bool\n    {\n        return $this->teams()->whereKey($tenant)->exists();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the File Name for Filament Export Action\nDESCRIPTION: This code snippet demonstrates how to customize the file name of an exported file using the `fileName()` method on the Filament `ExportAction`. An instance of the `Export` model is passed to the closure, from which data can be extracted.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\ExportAction;\nuse Filament\\Actions\\Exports\\Models\\Export;\n\nExportAction::make()\n    ->exporter(ProductExporter::class)\n    ->fileName(fn (Export $export): string => \"products-{$export->getKey()}.csv\")\n```\n\n----------------------------------------\n\nTITLE: Importing Relationships - Filament PHP\nDESCRIPTION: This snippet shows how to import a `BelongsTo` relationship using the `relationship()` method.  The CSV column 'author' will be mapped to the 'author_id' column in the database, assuming the CSV contains the primary keys of authors.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('author')\n    ->relationship()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Action to Filament Form (PHP)\nDESCRIPTION: This code adds a custom action button next to the default \"Create\" button in a Filament form.  It overrides the `getFormActions` method to include a new `Action` named 'close' that triggers the `createAndClose` method. Depends on defining `createAndClose` method separately.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Resources\\Pages\\CreateRecord;\n\nclass CreateUser extends CreateRecord\n{\n    // ...\n\n    protected function getFormActions(): array\n    {\n        return [\n            ...parent::getFormActions(),\n            Action::make('close')->action('createAndClose'),\n        ];\n    }\n\n    public function createAndClose(): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Pagination Options in Filament\nDESCRIPTION: This snippet shows how to customize the pagination options for a Filament table using the `paginated()` method. This allows you to specify the number of records per page that the user can choose from.  The code sets the available options to 10, 25, 50, 100, and 'all'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->paginated([10, 25, 50, 100, 'all']);\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Across Multiple Columns in Filament (PHP)\nDESCRIPTION: This snippet illustrates how to override the `getGloballySearchableAttributes()` method to define which columns are searched during a global search.  \"Dot notation\" is used to specify columns inside relationships.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/09-global-search.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic static function getGloballySearchableAttributes(): array\n{\n    return ['title', 'slug', 'author.name', 'category.name'];\n}\n```\n\n----------------------------------------\n\nTITLE: Counting with Query Scope (PHP)\nDESCRIPTION: This code demonstrates how to count records based on a condition, using a query scope with the `Count` summarizer. It counts published posts (where 'is_published' is true). It imports the `Builder` class from `Illuminate\\Database\\Query`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\nuse Filament\\Tables\\Columns\\Summarizers\\Count;\nuse Illuminate\\Database\\Query\\Builder;\n\nIconColumn::make('is_published')\n    ->boolean()\n    ->summarize(\n        Count::make()->query(fn (Builder $query) => $query->where('is_published', true)),\n    )\n```\n\n----------------------------------------\n\nTITLE: Accessing Selected Records in Row Action\nDESCRIPTION: This snippet demonstrates how to access selected table rows within a row action. The `selectable()` method is used to enable row selection. The `accessSelectedRecords()` method allows access to the selected records, which are then available in the action's callback function as the `$selectedRecords` parameter.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/04-actions.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Tables\\Table;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Illuminate\\Database\\Eloquent\\Model;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->selectable()\n        ->actions([\n            Action::make('copyToSelected')\n                ->accessSelectedRecords()\n                ->action(function (Model $record, Collection $selectedRecords) {\n                    $selectedRecords->each(\n                        fn (Model $selectedRecord) => $selectedRecord->update([\n                            'is_active' => $record->is_active,\n                        ]),\n                    );\n                }),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table Columns in Filament\nDESCRIPTION: This snippet demonstrates how to define columns in a Filament table using the `$table->columns()` method. It includes examples of using `TextColumn` and `IconColumn` to display data from Eloquent models. The code sets up a table with columns for 'title', 'slug', and 'is_featured'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->columns([\n            TextColumn::make('title'),\n            TextColumn::make('slug'),\n            IconColumn::make('is_featured')\n                ->boolean(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Tenant Name in Filament (HasName Contract)\nDESCRIPTION: This snippet demonstrates how to implement the `HasName` contract in a Filament tenant model to customize the display name of the tenant. It overrides the `getFilamentName()` method to return a custom string based on the tenant's attributes (name and subscription plan).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Filament\\Models\\Contracts\\HasName;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Team extends Model implements HasName\n{\n    // ...\n\n    public function getFilamentName(): string\n    {\n        return \"{$this->name} {$this->subscription_plan}\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Relationship Import Resolution - Filament PHP\nDESCRIPTION: This snippet shows how to customize the relationship import resolution by passing a column name to the `resolveUsing` option. This allows you to find a related record using a different column other than the primary key, such as the 'email' column.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('author')\n    ->relationship(resolveUsing: 'email')\n```\n\n----------------------------------------\n\nTITLE: Creating a Redirect Action in Filament (PHP)\nDESCRIPTION: This code creates a simple action that redirects the user to a specific URL when clicked. It defines the action using `Action::make()` and specifies the target URL using the `url()` method, which accepts a function to dynamically generate the URL based on the current post's ID.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('edit')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n```\n\n----------------------------------------\n\nTITLE: Adding Nested Validation Rules - PHP\nDESCRIPTION: Applies validation rules to each individual tag within the TagsInput component. The `nestedRecursiveRules()` method accepts an array of validation rules.  These rules are applied to each tag when the form is submitted.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/14-tags-input.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TagsInput;\n\nTagsInput::make('tags')\n    ->nestedRecursiveRules([\n        'min:3',\n        'max:255',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Initializing KeyValue Field in Filament\nDESCRIPTION: This snippet demonstrates how to create a basic KeyValue form field in Filament using the `KeyValue::make()` method. The field is named 'meta', suggesting it's used for storing metadata.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/16-key-value.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n```\n\n----------------------------------------\n\nTITLE: Halting Record Creation in Filament (PHP)\nDESCRIPTION: This code shows how to halt the record creation process using `$this->halt()` within a lifecycle hook. In this example, it checks if the user has an active subscription and, if not, sends a notification and halts the creation, preventing the record from being saved.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Notifications\\Notification;\n\nprotected function beforeCreate(): void\n{\n    if (! auth()->user()->team->subscribed()) {\n        Notification::make()\n            ->warning()\n            ->title('You don\\'t have an active subscription!')\n            ->body('Choose a plan to continue.')\n            ->persistent()\n            ->actions([\n                Action::make('subscribe')\n                    ->button()\n                    ->url(route('subscribe'), shouldOpenInNewTab: true),\n            ])\n            ->send();\n    \n        $this->halt();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Fields based on Select Option - Filament\nDESCRIPTION: This snippet shows how to render a different set of fields based on the value of a select field. It uses the `schema()` method of a layout component (`Grid`) and a function that utilizes the `$get()` utility to access the value of the 'type' field. The `afterStateUpdated()` method is used to initialize the new fields in the dynamic schema. A unique key is assigned to the dynamic field.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_85\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Grid;\nuse Filament\\Schemas\\Components\\Utilities\\Get;\n\nSelect::make('type')\n    ->options([\n        'employee' => 'Employee',\n        'freelancer' => 'Freelancer',\n    ])\n    ->live()\n    ->afterStateUpdated(fn (Select $component) => $component\n        ->getContainer()\n        ->getComponent('dynamicTypeFields')\n        ->getChildSchema()\n        ->fill())\n    \nGrid::make(2)\n    ->schema(fn (Get $get): array => match ($get('type')) {\n        'employee' => [\n            TextInput::make('employee_number')\n                ->required(),\n            FileUpload::make('badge')\n                ->image()\n                ->required(),\n        ],\n        'freelancer' => [\n            TextInput::make('hourly_rate')\n                ->numeric()\n                ->required()\n                ->prefix('€'),\n            FileUpload::make('contract')\n                ->required(),\n        ],\n        default => [],\n    })\n    ->key('dynamicTypeFields')\n```\n\n----------------------------------------\n\nTITLE: Authorization - Controlling Page Access (PHP)\nDESCRIPTION: This code shows how to control access to a Filament settings page by defining a `canAccess()` method. This method should return `true` if the user is authorized to access the page and `false` otherwise. It often relies on authentication and user roles.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-settings-plugin/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic static function canAccess(): bool\n{\n    return auth()->user()->isAdmin();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Action in Filament (PHP)\nDESCRIPTION: This snippet shows how to create an action in Filament that collects extra information from the user using a form. It defines a form with a text input for the subject and a rich text editor for the body. The `action()` method then processes the form data to send an email to the client.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Forms\\Components\\RichEditor;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Support\\Facades\\Mail;\n\nAction::make('sendEmail')\n    ->form([\n        TextInput::make('subject')->required(),\n        RichEditor::make('body')->required(),\n    ])\n    ->action(function (array $data) {\n        Mail::to($this->client)\n            ->send(new GenericEmail(\n                subject: $data['subject'],\n                body: $data['body'],\n            ));\n    })\n```\n\n----------------------------------------\n\nTITLE: Conditionally Disabling a Toggle Field in Filament\nDESCRIPTION: This code demonstrates how to conditionally disable a toggle field based on a boolean value, such as a feature flag, using the `disabled()` method. This allows for dynamic control over the field's disabled state.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('is_admin')\n    ->disabled(! FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Customizing Relationship Resolution with Function - Filament PHP\nDESCRIPTION: This snippet illustrates how to customize the resolution process by passing a function to `resolveUsing`. The function receives the column's state and returns a record to associate with the relationship. The function allows for complex logic to find the related Author model.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Author;\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('author')\n    ->relationship(resolveUsing: function (string $state): ?Author {\n        return Author::query()\n            ->where('email', $state)\n            ->orWhere('username', $state)\n            ->first();\n    })\n```\n\n----------------------------------------\n\nTITLE: Formatting Column State - PHP\nDESCRIPTION: This snippet shows how to format the displayed text of a TextColumn without modifying the underlying data. The `formatStateUsing()` method accepts a function that transforms the column's state into a user-friendly format, such as translating status values.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('status')\n    ->formatStateUsing(fn (string $state): string => __(\"statuses.{$state}\"))\n```\n\n----------------------------------------\n\nTITLE: Validating Each Item in an Array - Filament PHP\nDESCRIPTION: This snippet demonstrates how to validate each item in the array after splitting the column values into an array using the `multiple()` method and casting them to the desired data type. It uses `nestedRecursiveRules()` to apply validation rules to each item in the array, specifically ensuring that each is an integer between 1 and 5.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('customer_ratings')\n    ->multiple(',')\n    ->integer()\n    ->rules(['array'])\n    ->nestedRecursiveRules(['integer', 'min:1', 'max:5'])\n```\n\n----------------------------------------\n\nTITLE: Dependant Select Options - Filament\nDESCRIPTION: This snippet demonstrates how to dynamically update the options of a select field based on the value of another field in a Filament form. It uses the `options()` method with a function that utilizes the `$get()` utility to access the value of the 'category' field and returns an array of options based on that value using a `match` statement.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_83\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Utilities\\Get;\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('category')\n    ->options([\n        'web' => 'Web development',\n        'mobile' => 'Mobile development',\n        'design' => 'Design',\n    ])\n    ->live()\n\nSelect::make('sub_category')\n    ->options(fn (Get $get): array => match ($get('category')) {\n        'web' => [\n            'frontend_web' => 'Frontend development',\n            'backend_web' => 'Backend development',\n        ],\n        'mobile' => [\n            'ios_mobile' => 'iOS development',\n            'android_mobile' => 'Android development',\n        ],\n        'design' => [\n            'app_design' => 'Panel design',\n            'marketing_website_design' => 'Marketing website design',\n        ],\n        default => [],\n    })\n```\n\n----------------------------------------\n\nTITLE: Registering Tenant Middleware - PHP\nDESCRIPTION: This code snippet shows how to register the `ApplyTenantScopes` middleware within a Filament panel configuration. It uses the `tenantMiddleware` method to apply the middleware to all tenant-aware routes. The `isPersistent: true` argument ensures that the middleware is also executed for Livewire AJAX requests, maintaining tenant scoping across all panel interactions.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantMiddleware(\n            [ApplyTenantScopes::class],\n            isPersistent: true\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Form Components in Filament\nDESCRIPTION: This code snippet shows how to define form components within a Filament form schema, including text input fields for `name` and `email`. It specifies that these fields are required.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Schema;\n\npublic static function configure(Schema $schema): Schema\n{\n    return $schema\n        ->components([\n            TextInput::make('name')->required(),\n            TextInput::make('email')->email()->required(),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Soft Deletes to Table - PHP\nDESCRIPTION: This code snippet demonstrates how to modify the `table()` method of a Filament resource to include filters and actions for soft-deleted records. It adds a `TrashedFilter`, `DeleteAction`, `ForceDeleteAction`, and `RestoreAction` to the table.  It also modifies the Eloquent query to exclude soft deletes by default.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/06-deleting-records.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables;\nuse Filament\\Tables\\Table;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\SoftDeletingScope;\n\npublic static function table(Table $table): Table\n{\n    return $table\n        ->columns([\n            // ...\n        ])\n        ->filters([\n            Tables\\Filters\\TrashedFilter::make(),\n            // ...\n        ])\n        ->actions([\n            // You may add these actions to your table if you're using a simple\n            // resource, or you just want to be able to delete records without\n            // leaving the table.\n            \\Filament\\Actions\\DeleteAction::make(),\n            \\Filament\\Actions\\ForceDeleteAction::make(),\n            \\Filament\\Actions\\RestoreAction::make(),\n            // ...\n        ])\n        ->bulkActions([\n            \\Filament\\Actions\\BulkActionGroup::make([\n                \\Filament\\Actions\\DeleteBulkAction::make(),\n                \\Filament\\Actions\\ForceDeleteBulkAction::make(),\n                \\Filament\\Actions\\RestoreBulkAction::make(),\n                // ...\n            ]),\n        ]);\n}\n\npublic static function getEloquentQuery(): Builder\n{\n    return parent::getEloquentQuery()\n        ->withoutGlobalScopes([\n            SoftDeletingScope::class,\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Validating a Text Input Field in Filament\nDESCRIPTION: This snippet demonstrates how to add validation rules to a text input field using methods like `required()` and `maxLength()`. This approach allows for both frontend and backend validation. It also enables IDE autocompletion for the validation methods.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\DateTimePicker;\nuse Filament\\Forms\\Components\\RichEditor;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Section;\n\nTextInput::make('name')\n    ->required()\n    ->maxLength(255)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Field with Artisan\nDESCRIPTION: Shows the Artisan command used to generate a custom Filament form field class and its corresponding Blade view. This sets up the basic structure for creating reusable form fields.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/20-custom-fields.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-form-field LocationPicker\n```\n\n----------------------------------------\n\nTITLE: Updating State with JavaScript afterStateUpdatedJs\nDESCRIPTION: This example demonstrates updating the 'email' field's state using JavaScript with `afterStateUpdatedJs()`.  It avoids a network request by directly manipulating the frontend state, making it more efficient than a traditional `afterStateUpdated` call.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_77\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Utilities\\Set;\n\n// Old name input that is `live()`, so it makes a network request and render each time it is updated.\nTextInput::make('name')\n    ->live()\n    ->afterStateUpdated(fn (Set $set, ?string $state) => $set('email', ((string) str($state)->replace(' ', '.')->lower()) . '@example.com'))\n\n// New name input that uses `afterStateUpdatedJs()` to set the state of the email field and doesn't make a network request.\nTextInput::make('name')\n    ->afterStateUpdatedJs(<<<'JS'\n        $set('email', ($state ?? '').replace(' ', '.').toLowerCase() + '@example.com')\n        JS)\n    \nTextInput::make('email')\n    ->label('Email address')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n$set('email', ($state ?? '').replace(' ', '.').toLowerCase() + '@example.com')\n```\n\n----------------------------------------\n\nTITLE: Fully Collapsible Sidebar on Desktop\nDESCRIPTION: This code snippet demonstrates how to fully collapse the sidebar on desktop, hiding the navigation icons, using the `sidebarFullyCollapsibleOnDesktop()` method within the Filament Panel configuration. Requires the Filament Panel class. The expected result is that collapsing the sidebar hides all icons and navigation text.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->sidebarFullyCollapsibleOnDesktop();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a SelectColumn in Filament Table (PHP)\nDESCRIPTION: This code demonstrates how to create a basic `SelectColumn` within a Filament table. It defines the column's data source (`status`) and provides a set of options for the select field (`draft`, `reviewing`, `published`). The `make()` method creates a new instance of the SelectColumn.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/06-select.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\SelectColumn;\n\nSelectColumn::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Customizing Filament Page Content with Schema (PHP)\nDESCRIPTION: This code shows how to customize the content of a Filament page using a schema.  It overrides the `content()` method and returns a schema containing the form content component. It uses the `$this->getFormContentComponent()` method to render the default form.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Schema;\n\npublic function content(Schema $schema): Schema\n{\n    return $schema\n        ->components([\n            $this->getFormContentComponent(), // This method returns a component to display the form that is defined in this resource\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Import Options - PHP\nDESCRIPTION: This snippet shows how to access the data passed in the import options inside the importer class by using `$this->options`. It uses a conditional to update an existing product based on the 'updateExisting' option. Dependencies: App\\Models\\Product.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Product;\n\npublic function resolveRecord(): ?Product\n{\n    if ($this->options['updateExisting'] ?? false) {\n        return Product::firstOrNew([\n            'sku' => $this->data['sku'],\n        ]);\n    }\n\n    return new Product();\n}\n```\n\n----------------------------------------\n\nTITLE: Making a field reactive in Filament\nDESCRIPTION: This code snippet demonstrates how to make a Select field reactive using the `live()` method. This will cause the schema to re-render when the field's value changes, allowing for dynamic updates to other fields.  Requires Filament\\Forms\\Components\\Select.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_64\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n    ->live()\n```\n\n----------------------------------------\n\nTITLE: Injecting the Current Livewire Component Instance - PHP\nDESCRIPTION: This code snippet demonstrates how to inject the current Livewire component instance into a schema using the `$livewire` parameter. This allows access to the Livewire component, enabling components to interact with the Livewire component's properties and methods.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/01-overview.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\n\nfunction (Component $livewire) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Page Content with Blade\nDESCRIPTION: This snippet shows how to customize the FilamentPHP List page by overriding the `$view` property to use a custom Blade view.  It includes example Blade content and explains how the default page content can be included in the custom view.  This provides maximum flexibility for page customization.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/02-listing-records.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nprotected string $view = 'filament.resources.users.pages.list-users';\n```\n\n----------------------------------------\n\nTITLE: Conditional Redirect After Creation in Filament (PHP)\nDESCRIPTION: This snippet demonstrates customizing the redirect after record creation based on the presence of a previous URL. If a previous URL exists (`$this->previousUrl`), the user is redirected there; otherwise, they are redirected to the index page of the resource.  This provides a more context-aware navigation experience.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprotected function getRedirectUrl(): string\n{\n    return $this->previousUrl ?? $this->getResource()::getUrl('index');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Hooks in Filament (PHP)\nDESCRIPTION: This code demonstrates the structure for implementing lifecycle hooks in Filament Create pages. By defining protected methods like `beforeFill()`, `afterFill()`, `beforeValidate()`, `afterValidate()`, `beforeCreate()`, and `afterCreate()`, you can inject custom logic at various stages of the creation process.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\Pages\\CreateRecord;\n\nclass CreateUser extends CreateRecord\n{\n    // ...\n\n    protected function beforeFill(): void\n    {\n        // Runs before the form fields are populated with their default values.\n    }\n\n    protected function afterFill(): void\n    {\n        // Runs after the form fields are populated with their default values.\n    }\n\n    protected function beforeValidate(): void\n    {\n        // Runs before the form fields are validated when the form is submitted.\n    }\n\n    protected function afterValidate(): void\n    {\n        // Runs after the form fields are validated when the form is submitted.\n    }\n\n    protected function beforeCreate(): void\n    {\n        // Runs before the form fields are saved to the database.\n    }\n\n    protected function afterCreate(): void\n    {\n        // Runs after the form fields are saved to the database.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tenant Model - PHP\nDESCRIPTION: This code snippet demonstrates how to configure the tenant model in Filament.  This tells Filament which model represents a tenant (e.g., a Team or Organization).  It requires the `App\\Models\\Team` model to exist.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\Team;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenant(Team::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wizard Interface in Filament (PHP)\nDESCRIPTION: This code demonstrates how to transform the record creation process into a multistep wizard using the `HasWizard` trait. It defines the `getSteps()` method to return an array of `Step` objects, each representing a step in the wizard with its own schema (form fields).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Resources\\Categories\\CategoryResource;\nuse Filament\\Resources\\Pages\\CreateRecord;\n\nclass CreateCategory extends CreateRecord\n{\n    use CreateRecord\\Concerns\\HasWizard;\n    \n    protected static string $resource = CategoryResource::class;\n\n    protected function getSteps(): array\n    {\n        return [\n            // ...\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Multiple Example CSV Rows - PHP\nDESCRIPTION: This snippet shows how to add multiple example rows to the CSV using the `examples()` method, which accepts an array of example values. Dependencies: Filament\\Actions\\Imports\\ImportColumn.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('sku')\n    ->examples(['ABC123', 'DEF456'])\n```\n\n----------------------------------------\n\nTITLE: Creating Observer for One-to-Many Tenancy - PHP\nDESCRIPTION: This code snippet shows how to create an Eloquent observer to automatically set the `team_id` when a new record is created. This, coupled with a global scope, provides a basic multi-tenancy implementation for one-to-many relationships. It requires the `team_id` column on the model's table and assumes a user's `team_id` property is accessible via `auth()->user()`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass PostObserver\n{\n    public function creating(Post $post): void\n    {\n        if (auth()->hasUser()) {\n            $post->team_id = auth()->user()->team_id;\n            // or with a `team` relationship defined:\n            $post->team()->associate(auth()->user()->team);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Relationships for Search Details in Filament (PHP)\nDESCRIPTION: This snippet shows how to eager-load relationships to improve performance when displaying details in global search results.  The `getGlobalSearchEloquentQuery()` method is overridden to include the desired relationships using the `with()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/09-global-search.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic static function getGlobalSearchEloquentQuery(): Builder\n{\n    return parent::getGlobalSearchEloquentQuery()->with(['author', 'category']);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Number Constraint in Filament QueryBuilder (PHP)\nDESCRIPTION: This snippet shows how to create a NumberConstraint for Filament's QueryBuilder to filter numeric columns. It demonstrates filtering both a direct column and a column in a related table via the `relationship()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\NumberConstraint;\n\nNumberConstraint::make('stock') // Filter the `stock` column\n\nNumberConstraint::make('ordersItemCount')\n    ->relationship(name: 'orders', titleAttribute: 'item_count') // Filter the `item_count` column on the `orders` relationship\n```\n\n----------------------------------------\n\nTITLE: Rendering Child Schema in Blade View (Blade)\nDESCRIPTION: This snippet shows how to render a child schema within a Blade view that's part of a Filament schema. The `$getChildSchema()` function is used to output the schema components defined as children of the view component, allowing for dynamic and nested form structures.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/07-custom-components.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    {{ $getChildSchema() }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing the plugin via Composer\nDESCRIPTION: Installs the Filament Spatie Tags plugin using Composer. This command adds the plugin as a dependency to your Laravel project.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-tags-plugin/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/spatie-laravel-tags-plugin:\"^3.2\" -W\n```\n\n----------------------------------------\n\nTITLE: Creating a Toggle Column in Filament - PHP\nDESCRIPTION: This code snippet demonstrates how to create a simple toggle column in a Filament table. It uses the `ToggleColumn::make()` method to create a toggle for the `is_admin` field in the database.  When toggled, it will update the `is_admin` field in the corresponding database record.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/07-toggle.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\ToggleColumn;\n\nToggleColumn::make('is_admin')\n```\n\n----------------------------------------\n\nTITLE: Auto-hashing Password Field - Filament (Hashing)\nDESCRIPTION: This snippet extends the previous example by adding a dehydration function to hash the password when the form is submitted. It uses the `dehydrateStateUsing()` method and the `Hash::make()` function to hash the password.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_87\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Support\\Facades\\Hash;\n\nTextInput::make('password')\n    ->password()\n    ->dehydrateStateUsing(fn (string $state): string => Hash::make($state))\n```\n\n----------------------------------------\n\nTITLE: Implementing FilamentUser Contract\nDESCRIPTION: This code snippet demonstrates how to implement the `FilamentUser` contract in the `App\\Models\\User` model.  It overrides the `canAccessPanel()` method to determine if a user has access to the Filament panel based on their email domain and email verification status. This is crucial for restricting Filament access in production environments.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/01-overview.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Filament\\Models\\Contracts\\FilamentUser;\nuse Filament\\Panel;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\nclass User extends Authenticatable implements FilamentUser\n{\n    // ...\n\n    public function canAccessPanel(Panel $panel): bool\n    {\n        return str_ends_with($this->email, '@yourdomain.com') && $this->hasVerifiedEmail();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Text Input Field in Filament\nDESCRIPTION: This code snippet demonstrates how to create a text input field in Filament using the `TextInput::make()` method. The `make()` method accepts a unique name for the field, which often corresponds to an attribute on an Eloquent model. The field is then added to the form's schema.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n```\n\n----------------------------------------\n\nTITLE: Setting Another Field's State with Updated Hooks\nDESCRIPTION: This example shows how to set another field's state and trigger its `afterStateUpdated()` method by passing `shouldCallUpdatedHooks: true` to the `$set()` function. This allows cascading updates between fields.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_71\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Utilities\\Set;\n\nfunction (Set $set) {\n    $set('title', 'Blog Post', shouldCallUpdatedHooks: true);\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Builder Blocks with Schema\nDESCRIPTION: This code snippet demonstrates how to define a Filament Builder component with multiple blocks, each with its own schema. It shows how to use different input types like TextInput, Select, Textarea, and FileUpload within the schema. The resulting data structure is a JSON array where each entry corresponds to a selected block and its associated data.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\nuse Filament\\Forms\\Components\\Builder\\Block;\nuse Filament\\Forms\\Components\\FileUpload;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Textarea;\nuse Filament\\Forms\\Components\\TextInput;\n\nBuilder::make('content')\n    ->blocks([\n        Block::make('heading')\n            ->schema([\n                TextInput::make('content')\n                    ->label('Heading')\n                    ->required(),\n                Select::make('level')\n                    ->options([\n                        'h1' => 'Heading 1',\n                        'h2' => 'Heading 2',\n                        'h3' => 'Heading 3',\n                        'h4' => 'Heading 4',\n                        'h5' => 'Heading 5',\n                        'h6' => 'Heading 6',\n                    ])\n                    ->required(),\n            ])\n            ->columns(2),\n        Block::make('paragraph')\n            ->schema([\n                Textarea::make('content')\n                    ->label('Paragraph')\n                    ->required(),\n            ]),\n        Block::make('image')\n            ->schema([\n                FileUpload::make('url')\n                    ->label('Image')\n                    ->image()\n                    ->required(),\n                TextInput::make('alt')\n                    ->label('Alt text')\n                    ->required(),\n            ]),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Conditionally Showing a Field\nDESCRIPTION: This demonstrates conditionally showing a field using the `visible()` method based on the value of another field. The 'company_name' field is visible only when the 'is_company' checkbox is checked.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_79\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Utilities\\Get;\nuse Filament\\Forms\\Components\\Checkbox;\nuse Filament\\Forms\\Components\\TextInput;\n\nCheckbox::make('is_company')\n    ->live()\n    \nTextInput::make('company_name')\n    ->visible(fn (Get $get): bool => $get('is_company'))\n```\n\n----------------------------------------\n\nTITLE: Registering Global Search Key Bindings in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to configure keyboard shortcuts for opening the global search field using the `globalSearchKeyBindings()` method in the Filament configuration.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/09-global-search.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->globalSearchKeyBindings(['command+k', 'ctrl+k']);\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Soft Deletable Records with TrashedFilter in Filament, PHP\nDESCRIPTION: Demonstrates the use of the `TrashedFilter`, a built-in ternary filter for filtering soft-deleted records in Filament tables. This simplifies the process of displaying or excluding soft-deleted records from the table.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/03-ternary.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\TrashedFilter;\n\nTrashedFilter::make()\n```\n\n----------------------------------------\n\nTITLE: Filtering Relationship with IsRelatedToOperator in Filament\nDESCRIPTION: This code snippet demonstrates how to create a relationship constraint in Filament to filter data based on a related record. It uses the `IsRelatedToOperator` to configure the \"Is / Contains\" and \"Is not / Does not contain\" operators, allowing users to filter records by selecting related records from a searchable list.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\RelationshipConstraint;\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\RelationshipConstraint\\Operators\\IsRelatedToOperator;\n\nRelationshipConstraint::make('creator') // Filter the `creator` relationship\n    ->selectable(\n        IsRelatedToOperator::make()\n            ->titleAttribute('name')\n            ->searchable()\n            ->multiple(),\n    )\n```\n\n----------------------------------------\n\nTITLE: Saving data to a HasOne relationship using Group\nDESCRIPTION: This snippet shows how to use the `relationship()` method on a `Group` component to save data to an Eloquent relationship. The `name` and `email` fields are loaded from the `customer` relationship and saved upon form submission. The name and email are set as required fields.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_91\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Group;\n\nGroup::make()\n    ->relationship('customer')\n    ->schema([\n        TextInput::make('name')\n            ->label('Customer')\n            ->required(),\n        TextInput::make('email')\n            ->label('Email address')\n            ->email()\n            ->required(),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Testing Resource Creation - PHP\nDESCRIPTION: This snippet tests the creation of a new resource.  It fills the form with data using `fillForm()`, calls the `create` action, asserts that a notification is displayed, asserts that the user is redirected, and verifies that the record exists in the database.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/02-testing-resources.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Resources\\Users\\Pages\\CreateUser;\nuse App\\Models\\User;\nuse function Pest\\Laravel\\assertDatabaseHas;\n\nit('can create a user', function () {\n    $newUserData = User::factory()->make();\n\n    livewire(CreateUser::class)\n        ->fillForm([\n            'name' => $newUserData->name,\n            'email' => $newUserData->email,\n        ])\n        ->call('create')\n        ->assertNotified()\n        ->assertRedirect();\n\n    assertDatabaseHas(User::class, [\n        'name' => $newUserData->name,\n        'email' => $newUserData->email,\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Redirecting after creation\nDESCRIPTION: This code demonstrates how to set up a custom redirect after successful form submission using the `successRedirectUrl()` method.  It can either redirect to a static route or a dynamic route using the created record. Dependencies include `Filament\\Actions\\CreateAction` and potentially `Illuminate\\Database\\Eloquent\\Model`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/04-create.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\CreateAction;\n\nCreateAction::make()\n    ->successRedirectUrl(route('posts.list'))\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\CreateAction;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nCreateAction::make()\n    ->successRedirectUrl(fn (Model $record): string => route('posts.edit', [\n        'post' => $record,\n    ]))\n```\n\n----------------------------------------\n\nTITLE: Inline Label on Section - PHP\nDESCRIPTION: This demonstrates how to apply inline labels to all fields within a Filament Section component using `inlineLabel()` on the Section. This simplifies applying inline labels across multiple fields at once.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Section;\n\nSection::make('Details')\n    ->inlineLabel()\n    ->schema([\n        TextInput::make('name'),\n        TextInput::make('email')\n            ->label('Email address'),\n        TextInput::make('phone')\n            ->label('Phone number'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Pages - Filament PHP\nDESCRIPTION: This code snippet illustrates how to define the pages associated with a Filament resource. The `getPages()` method returns an array that maps route segments to specific Filament page classes, such as `ListCustomers` and `EditCustomer`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\npublic static function getPages(): array\n{\n    return [\n        'index' => ListCustomers::route('/'),\n        'edit' => EditCustomer::route('/{record}/edit'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-hashing Password Field - Filament (Preventing Empty Overwrite)\nDESCRIPTION: This snippet prevents overwriting an existing password if the password field is empty. It uses the `dehydrated()` method with the `filled()` helper to prevent dehydration if the field is null or an empty string.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_88\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Support\\Facades\\Hash;\n\nTextInput::make('password')\n    ->password()\n    ->dehydrateStateUsing(fn (string $state): string => Hash::make($state))\n    ->dehydrated(fn (?string $state): bool => filled($state))\n```\n\n----------------------------------------\n\nTITLE: Rendering a Schema in a Filament Modal\nDESCRIPTION: This code shows how to render a schema in a Filament modal, allowing you to create a custom UI with various components. It uses the `schema()` method to define the layout and components within the modal. The example shows using `Grid`, `Section`, `TextInput`, `Select`, `Checkbox`, and `TextEntry` components.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Forms\\Components\\Checkbox;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Infolists\\Components\\TextEntry;\nuse Filament\\Schemas\\Components\\Section;\n\nAction::make('viewUser')\n    ->schema([\n        Grid::make(2)\n            ->schema([\n                Section::make('Details')\n                    ->schema([\n                        TextInput::make('name'),\n                        Select::make('position')\n                            ->options([\n                                'developer' => 'Developer',\n                                'designer' => 'Designer',\n                            ]),\n                        Checkbox::make('is_admin'),\n                    ]),\n                Section::make('Auditing')\n                    ->schema([\n                        TextEntry::make('created_at')\n                            ->dateTime(),\n                        TextEntry::make('updated_at')\n                            ->dateTime(),\n                    ]),\n            ]),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Basic Delete Action in Filament (PHP)\nDESCRIPTION: This code snippet demonstrates the most basic implementation of the delete action in Filament. It uses the `DeleteAction::make()` method to create a delete action that, when triggered, prompts the user for confirmation before deleting a record.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/07-delete.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\DeleteAction;\n\nDeleteAction::make()\n```\n\n----------------------------------------\n\nTITLE: Defining Export Columns in Exporter\nDESCRIPTION: This PHP code defines the columns to be exported using the `ExportColumn` class. Each column represents a field from the model to be included in the export.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\npublic static function getColumns(): array\n{\n    return [\n        ExportColumn::make('name'),\n        ExportColumn::make('sku')\n            ->label('SKU'),\n        ExportColumn::make('price'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Summarizing and Grouping Rows in Filament Table (PHP)\nDESCRIPTION: This code snippet illustrates how to use summaries in conjunction with row grouping in a Filament table. It displays the sum of 'views_count' and 'likes_count' for each group defined by 'category', hiding the individual rows and showing only the group summaries. Requires Filament Tables.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Sum;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->columns([\n            TextColumn::make('views_count')\n                ->summarize(Sum::make()),\n            TextColumn::make('likes_count')\n                ->summarize(Sum::make()),\n        ])\n        ->defaultGroup('category')\n        ->groupsOnly();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table Components in Filament\nDESCRIPTION: This code shows how to define components in Filament table schema, including columns, filters, actions, and bulk actions.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\BulkActionGroup;\nuse Filament\\Actions\\DeleteBulkAction;\nuse Filament\\Actions\\EditAction;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Tables\\Filters\\Filter;\nuse Filament\\Tables\\Table;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\npublic static function configure(Table $table): Table\n{\n    return $table\n        ->columns([\n            TextColumn::make('name'),\n            TextColumn::make('email'),\n            // ...\n        ])\n        ->filters([\n            Filter::make('verified')\n                ->query(fn (Builder $query): Builder => $query->whereNotNull('email_verified_at')),\n            // ...\n        ])\n        ->actions([\n            EditAction::make(),\n        ])\n        ->bulkActions([\n            BulkActionGroup::make([\n                DeleteBulkAction::make(),\n            ]),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Filament Form in Livewire\nDESCRIPTION: This PHP code demonstrates how to create a Livewire component with a Filament form. It includes implementing the `HasSchemas` interface, using the `InteractsWithSchemas` trait, defining a public property for the form data, adding a `form()` method to configure the form's schema and state path, initializing the form in `mount()`, and defining a method to handle the form submission.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-form.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Filament\\Forms\\Components\\MarkdownEditor;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Concerns\\InteractsWithSchemas;\nuse Filament\\Schemas\\Contracts\\HasSchemas;\nuse Illuminate\\Contracts\\View\\View;\nuse Livewire\\Component;\n\nclass CreatePost extends Component implements HasSchemas\n{\n    use InteractsWithSchemas;\n    \n    public ?array $data = [];\n    \n    public function mount(): void\n    {\n        $this->form->fill();\n    }\n    \n    public function form(Schema $schema): Schema\n    {\n        return $schema\n            ->components([\n                TextInput::make('title')\n                    ->required(),\n                MarkdownEditor::make('content'),\n                // ...\n            ])\n            ->statePath('data');\n    }\n    \n    public function create(): void\n    {\n        dd($this->form->getState());\n    }\n    \n    public function render(): View\n    {\n        return view('livewire.create-post');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting after saving in Filament (PHP)\nDESCRIPTION: This code shows how to redirect the user after the form is successfully submitted using the `successRedirectUrl()` method. The first example redirects to a static route. The second redirects dynamically based on the updated record.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/05-edit.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\EditAction;\n\nEditAction::make()\n    ->successRedirectUrl(route('posts.list'))\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\EditAction;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nEditAction::make()\n    ->successRedirectUrl(fn (Model $record): string => route('posts.view', [\n        'post' => $record,\n    ]))\n```\n\n----------------------------------------\n\nTITLE: Validate TextInput Length - PHP\nDESCRIPTION: This code snippet shows how to limit the length of a TextInput field using the `minLength()` and `maxLength()` methods. These methods add both frontend and backend validation, ensuring that the input adheres to the specified length constraints.  `minLength(2)` enforces a minimum length of 2 characters, and `maxLength(255)` enforces a maximum length of 255 characters.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/02-text-input.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->minLength(2)\n    ->maxLength(255)\n```\n\n----------------------------------------\n\nTITLE: Enabling Authentication Features\nDESCRIPTION: This code snippet demonstrates how to enable various authentication features within a Filament panel.  The `login()`, `registration()`, `passwordReset()`, `emailVerification()`, `emailChangeVerification()`, and `profile()` methods enable the respective features for the panel.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/01-overview.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->login()\n        ->registration()\n        ->passwordReset()\n        ->emailVerification()\n        ->emailChangeVerification()\n        ->profile();\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Block Usage - Filament Builder (PHP)\nDESCRIPTION: This snippet shows how to limit the number of times a specific block can be used in the builder using the `maxItems()` method on the `Block` class. Setting `maxItems(1)` restricts the 'heading' block to be used only once.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder\\Block;\n\nBlock::make('heading')\n    ->schema([\n        // ...\n    ])\n    ->maxItems(1)\n```\n\n----------------------------------------\n\nTITLE: Adding Confirmation to Filament Action\nDESCRIPTION: This code demonstrates how to require confirmation before executing a Filament action, which is useful for destructive operations like deleting records. The `requiresConfirmation()` method adds a modal that asks the user to confirm the action before it proceeds.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Actions\\Action;\n\nAction::make('delete')\n    ->action(fn (Post $record) => $record->delete())\n    ->requiresConfirmation()\n```\n\n----------------------------------------\n\nTITLE: Previewing Blocks\nDESCRIPTION: This code demonstrates how to enable block previews using the `blockPreviews()` method. It also shows how to define a preview Blade view for a specific block using the `preview()` method. The block's data is passed to the preview view, allowing for a read-only rendering of the block's content.  Optionally, a boolean can be passed to `blockPreviews()` to toggle the feature.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\nuse Filament\\Forms\\Components\\Builder\\Block;\nuse Filament\\Forms\\Components\\TextInput;\n\nBuilder::make('content')\n    ->blockPreviews()\n    ->blocks([\n        Block::make('heading')\n            ->schema([\n                TextInput::make('text')\n                    ->placeholder('Default heading'),\n            ])\n            ->preview('filament.content.block-previews.heading'),\n    ])\n\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->blockPreviews(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Setting a Field's Label in Filament\nDESCRIPTION: This code shows how to override the default label of a text input field using the `label()` method. The method accepts a string that will be used as the field's label. This can be used for custom labels or localization.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->label('Full name')\n```\n\n----------------------------------------\n\nTITLE: Customizing Record Creation Logic in Filament (PHP)\nDESCRIPTION: This snippet illustrates how to customize the record creation process itself within a Filament Create page class using the `handleRecordCreation()` method. It receives the `$data` array and uses it to create a new record using the Eloquent model associated with the resource. This allows you to override the default creation behavior and implement custom logic, like handling relationships.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nprotected function handleRecordCreation(array $data): Model\n{\n    return static::getModel()::create($data);\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving Form Data When Creating Another in Filament (PHP)\nDESCRIPTION: This snippet shows how to preserve specific form data fields when using the \"create and create another\" feature.  By overriding the `preserveFormDataWhenCreatingAnother()` method and returning a subset of the `$data` array, only those specific fields will be retained in the form for the next record creation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\nprotected function preserveFormDataWhenCreatingAnother(array $data): array\n{\n    return Arr::only($data, ['is_admin', 'organization']);\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Panel Access\nDESCRIPTION: This code snippet shows how to conditionally allow access to specific Filament panels based on their ID. It checks the panel ID within the `canAccessPanel()` method and returns `true` only if the panel is not the 'admin' panel or if the user meets the admin access criteria (email domain and verified email).  This allows for different access rules for different panels within the same application.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/01-overview.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Filament\\Models\\Contracts\\FilamentUser;\nuse Filament\\Panel;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\nclass User extends Authenticatable implements FilamentUser\n{\n    // ...\n\n    public function canAccessPanel(Panel $panel): bool\n    {\n        if ($panel->getId() === 'admin') {\n            return str_ends_with($this->email, '@yourdomain.com') && $this->hasVerifiedEmail();\n        }\n\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Casting State of an Import Column in Filament\nDESCRIPTION: This code snippet demonstrates how to cast the state of an import column before validation, using the `castStateUsing()` method. This allows converting strings from the CSV into the correct data type, such as converting a price string to a float.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('price')\n    ->castStateUsing(function (string $state): ?float {\n        if (blank($state)) {\n            return null;\n        }\n        \n        $state = preg_replace('/[^0-9.]/', '', $state);\n        $state = floatval($state);\n    \n        return round($state, precision: 2);\n    })\n```\n\n----------------------------------------\n\nTITLE: Customizing data before filling the form in Filament (PHP)\nDESCRIPTION: This code snippet shows how to customize the data before it's filled into the form using the `mutateRecordDataUsing()` method. In this example, it sets the 'user_id' to the authenticated user's ID.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/05-edit.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\EditAction;\n\nEditAction::make()\n    ->mutateRecordDataUsing(function (array $data): array {\n        $data['user_id'] = auth()->id();\n\n        return $data;\n    })\n```\n\n----------------------------------------\n\nTITLE: Using SpatieMediaLibraryFileUpload in Filament Form\nDESCRIPTION: This code snippet demonstrates how to use the `SpatieMediaLibraryFileUpload` component within a Filament form. It creates a file upload field named 'avatar' that stores files using Spatie's Media Library.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\SpatieMediaLibraryFileUpload;\n\nSpatieMediaLibraryFileUpload::make('avatar')\n```\n\n----------------------------------------\n\nTITLE: Conditionally Disable Action Button - PHP\nDESCRIPTION: This snippet shows how to conditionally disable a Filament action button based on a boolean value. The `disabled()` method is used with a boolean argument to determine whether the button should be disabled. It uses the auth facade to check if the current user has the 'delete' permission for the current post.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('delete')\n    ->disabled(! auth()->user()->can('delete', $this->post))\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Job Queue in Filament\nDESCRIPTION: This code snippet demonstrates how to customize the queue used for export jobs in Filament. The `getJobQueue()` method in the exporter class is overridden to return the desired queue name.  The default queue is used if null is returned.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\npublic function getJobQueue(): ?string\n{\n    return 'exports';\n}\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for Filament Plugin\nDESCRIPTION: This code snippet demonstrates the simplified `package.json` structure for a Filament plugin, including scripts for development and production builds using esbuild.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/11-plugins/03-building-a-panel-plugin.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"private\": true,\n    \"type\": \"module\",\n    \"scripts\": {\n        \"dev\": \"node bin/build.js --dev\",\n        \"build\": \"node bin/build.js\"\n    },\n    \"devDependencies\": {\n        \"esbuild\": \"^0.17.19\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating CSV Data in Filament ImportAction\nDESCRIPTION: This code snippet demonstrates how to add validation rules to an import column using the `rules()` method. These rules check the data in each row from the CSV before it is saved to the database.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('sku')\n    ->rules(['required', 'max:32'])\n```\n\n----------------------------------------\n\nTITLE: Using Domain to Identify Tenant in Filament\nDESCRIPTION: This snippet demonstrates how to configure Filament to use domain or subdomain routing for tenants via the `tenantDomain()` method. It shows two examples: one using subdomains (e.g., `team1.example.com`) and another using the entire domain (e.g., `example.com`).  It requires setting the `slugAttribute` in the `tenant()` method, corresponding to the attribute of the tenant model used in the domain.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Team;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenant(Team::class, slugAttribute: 'slug')\n        ->tenantDomain('{tenant:slug}.example.com');\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Team;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenant(Team::class, slugAttribute: 'domain')\n        ->tenantDomain('{tenant:domain}');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Importer Columns for Filament ImportAction\nDESCRIPTION: This code snippet demonstrates how to define the columns that can be imported by overriding the `getColumns()` method in an importer class. It uses `ImportColumn` objects to specify the column name, label, and validation rules.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\npublic static function getColumns(): array\n{\n    return [\n        ImportColumn::make('name')\n            ->requiredMapping()\n            ->rules(['required', 'max:255']),\n        ImportColumn::make('sku')\n            ->label('SKU')\n            ->requiredMapping()\n            ->rules(['required', 'max:32']),\n        ImportColumn::make('price')\n            ->numeric()\n            ->rules(['numeric', 'min:0']),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Navigation Icon\nDESCRIPTION: This code snippet demonstrates how to customize the navigation item's icon using the `$navigationIcon` property in a Filament resource or page class. The icon should be a string representing a Heroicon or a BackedEnum. No specific dependencies are required other than Filament. The expected output is a navigation item with the specified icon.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse BackedEnum;\n\nprotected static string | BackedEnum | null $navigationIcon = 'heroicon-o-document-text';\n```\n\n----------------------------------------\n\nTITLE: Dependant Select Options from Eloquent - Filament\nDESCRIPTION: This snippet adapts the previous example to load options from an Eloquent model. It demonstrates querying the database within the `options()` function to populate the `sub_category` select field based on the selected `category` value. It retrieves the category ID and then retrieves the corresponding subcategories.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_84\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Utilities\\Get;\nuse Filament\\Forms\\Components\\Select;\nuse Illuminate\\Support\\Collection;\n\nSelect::make('category')\n    ->options(Category::query()->pluck('name', 'id'))\n    ->live()\n    \nSelect::make('sub_category')\n    ->options(fn (Get $get): Collection => SubCategory::query()\n        ->where('category', $get('category'))\n        ->pluck('name', 'id'))\n```\n\n----------------------------------------\n\nTITLE: Disabling a Field in Filament\nDESCRIPTION: This shows how to disable a text input field using the `disabled()` method, preventing the user from editing the field's value. Disabled fields are not saved by default.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->disabled()\n```\n\n----------------------------------------\n\nTITLE: Enabling Record Reordering (PHP)\nDESCRIPTION: This code demonstrates how to enable reordering of records in a Filament table using drag and drop. The `$table->reorderable()` method accepts the name of the column to store the sort order in. Requires adding the sort column to the `$fillable` array of the model if using mass assignment protection.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->reorderable('sort');\n}\n```\n\n----------------------------------------\n\nTITLE: Globally configuring a component\nDESCRIPTION: Demonstrates how to globally configure a Filament form component using the `configureUsing()` method. This allows you to modify the default behavior of all instances of a particular component type. In this case, all Checkbox components are set to `inline(false)` by default.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_94\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Checkbox;\n\nCheckbox::configureUsing(function (Checkbox $checkbox): void {\n    $checkbox->inline(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding Field on Operation - PHP\nDESCRIPTION: This snippet demonstrates hiding a field based on the current form operation (e.g., 'edit'). The 'is_admin' toggle is hidden during the 'edit' operation using `hiddenOn()`.  This can be written either with `hiddenOn()` or with `hidden()` and an anonymous function.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('is_admin')\n    ->hiddenOn('edit')\n    \n// is the same as\n\nToggle::make('is_admin')\n    ->hidden(fn (string $operation): bool => $operation === 'edit')\n```\n\n----------------------------------------\n\nTITLE: Using a Resource Record in a Custom Page\nDESCRIPTION: This code snippet demonstrates how to use the `InteractsWithRecord` trait within a custom Filament page to access and manage a resource record. The `mount()` method resolves the record ID from the URL and stores it in `$this->record`. The resolved record can be accessed using `$this->getRecord()`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/11-custom-pages.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\Pages\\Page;\nuse Filament\\Resources\\Pages\\Concerns\\InteractsWithRecord;\n\nclass ManageUser extends Page\n{\n    use InteractsWithRecord;\n    \n    public function mount(int | string $record): void\n    {\n        $this->record = $this->resolveRecord($record);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Copy to Clipboard - PHP\nDESCRIPTION: This snippet demonstrates how to enable the copy-to-clipboard functionality for a text entry using the `copyable()` method. It also sets a custom confirmation message and duration.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('apiKey')\n    ->label('API key')\n    ->copyable()\n    ->copyMessage('Copied!')\n    ->copyMessageDuration(1500)\n```\n\n----------------------------------------\n\nTITLE: Adding Content Above Field - Filament PHP\nDESCRIPTION: This snippet demonstrates how to add extra content above a Filament form field using the `aboveContent()` method. It utilizes the `TextInput`, `Icon`, and `Heroicon` classes. It takes an array of content items (Icon and string) as input and renders them above the TextInput field.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Icon;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTextInput::make('name')\n    ->aboveContent([\n        Icon::make(Heroicon::Star),\n        'This is the content above the field\\'s content'\n    ])\n```\n\n----------------------------------------\n\nTITLE: Generating Filament Resource with Model, Migration and Factory\nDESCRIPTION: This command creates a Filament resource for the `Customer` model and simultaneously generates the model, migration, and factory files. It's useful for quick scaffolding of related components.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-resource Customer --model --migration --factory\n```\n\n----------------------------------------\n\nTITLE: Adding Affix Text to Filament Text Input\nDESCRIPTION: This snippet demonstrates how to add prefix and suffix text to a Filament text input field using the `prefix()` and `suffix()` methods. It requires the Filament Forms package.  It adds 'https://' as a prefix and '.com' as a suffix to the 'domain' field.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/02-text-input.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('domain')\n    ->prefix('https://')\n    ->suffix('.com')\n```\n\n----------------------------------------\n\nTITLE: Sharing Form Fields in Filament Resource (PHP)\nDESCRIPTION: This code defines static methods to retrieve form fields, allowing reuse in both the resource form and wizard steps. It enhances maintainability and reduces code duplication. The `getNameFormField` and `getSlugFormField` methods return pre-configured `TextInput` components.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms;\nuse Filament\\Resources\\Resource;\nuse Filament\\Schemas\\Schema;\n\nclass CategoryResource extends Resource\n{\n    public static function form(Schema $schema): Schema\n    {\n        return $schema\n            ->components([\n                static::getNameFormField(),\n                static::getSlugFormField(),\n                // ...\n            ]);\n    }\n    \n    public static function getNameFormField(): Forms\\Components\\TextInput\n    {\n        return TextInput::make('name')\n            ->required()\n            ->live()\n            ->afterStateUpdated(fn ($state, callable $set) => $set('slug', Str::slug($state)));\n    }\n    \n    public static function getSlugFormField(): Forms\\Components\\TextInput\n    {\n        return TextInput::make('slug')\n            ->disabled()\n            ->required()\n            ->unique(Category::class, 'slug', fn ($record) => $record);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Inline Label - PHP\nDESCRIPTION: Demonstrates applying `inlineLabel()` conditionally based on a FeatureFlag, allowing dynamic control over label display based on application state.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->inlineLabel(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Displaying Text as a Badge - PHP\nDESCRIPTION: This snippet demonstrates how to display a TextColumn as a badge in Filament. The `badge()` method is used to enable the badge appearance. The color of the badge can be customized using the `color()` method based on the column's state.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('status')\n    ->badge()\n    ->color(fn (string $state): string => match ($state) {\n        'draft' => 'gray',\n        'reviewing' => 'warning',\n        'published' => 'success',\n        'rejected' => 'danger',\n    })\n```\n\n----------------------------------------\n\nTITLE: Customizing the saving process in Filament (PHP)\nDESCRIPTION: This snippet illustrates how to customize the saving process using the `using()` method.  It provides a closure that receives the Eloquent model and the form data, allowing you to define exactly how the record is updated.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/05-edit.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\EditAction;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nEditAction::make()\n    ->using(function (Model $record, array $data): Model {\n        $record->update($data);\n\n        return $record;\n    })\n```\n\n----------------------------------------\n\nTITLE: Updating a field's state in Filament\nDESCRIPTION: This code snippet demonstrates how to customize what happens after the user updates a field using the `afterStateUpdated()` method. The example shows a function that can be used to perform actions after the 'name' field is updated.  Requires Filament\\Forms\\Components\\TextInput.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_69\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->afterStateUpdated(function (?string $state, ?string $old) {\n        // ...\n    })\n```\n\n----------------------------------------\n\nTITLE: Activating Google Two-Factor Authentication in Filament Panel (PHP)\nDESCRIPTION: This code snippet activates the Google two-factor authentication feature in a Filament panel using the `multiFactorAuthentication()` method and passing a `GoogleTwoFactorAuthentication` instance. This enables users to set up Google two-factor authentication for their accounts.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/02-multi-factor-authentication.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Auth\\MultiFactor\\GoogleTwoFactor\\GoogleTwoFactorAuthentication;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->multiFactorAuthentication([\n            GoogleTwoFactorAuthentication::make(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Page View with Custom Blade - PHP\nDESCRIPTION: This code demonstrates how to replace the default page view with a custom Blade template.  It overrides the `$view` property to specify the path to the new Blade file.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/04-editing-records.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nprotected string $view = 'filament.resources.users.pages.edit-user';\n```\n\n----------------------------------------\n\nTITLE: Hiding Field with Live Select - PHP\nDESCRIPTION: This snippet demonstrates how to hide a Filament form field based on the selected value of another field using the `hidden()` method and the `live()` method to trigger a schema reload.  It uses a Select component for 'role' and a Toggle component for 'is_admin'.  The 'is_admin' field is hidden if 'role' is not 'staff'. This approach causes a network request upon each change.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Toggle;\n\nSelect::make('role')\n    ->options([\n        'user' => 'User',\n        'staff' => 'Staff',\n    ])\n    ->live()\n\nToggle::make('is_admin')\n    ->hidden(fn (Get $get): bool => $get('role') !== 'staff')\n```\n\n----------------------------------------\n\nTITLE: Hydrating a field's state in Filament\nDESCRIPTION: This code snippet demonstrates how to customize what happens after a field is hydrated using the `afterStateHydrated()` method. The example capitalizes the state of the 'name' field after it's hydrated.  Requires Closure and Filament\\Forms\\Components\\TextInput.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_67\n\nLANGUAGE: PHP\nCODE:\n```\nuse Closure;\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->required()\n    ->afterStateHydrated(function (TextInput $component, string $state) {\n        $component->state(ucwords($state));\n    })\n```\n\n----------------------------------------\n\nTITLE: Enabling Searchable Select Filter Options in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to enable a search input for a select filter using the `searchable()` method. This allows users to easily find options when there are many available.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/02-select.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\SelectFilter;\n\nSelectFilter::make('author')\n    ->relationship('author', 'name')\n    ->searchable()\n```\n\n----------------------------------------\n\nTITLE: Hiding Empty Relationship Filter in Filament\nDESCRIPTION: This code snippet demonstrates how to hide the option to filter out \"empty\" relationships in a Filament relationship constraint. It uses the `emptyable(false)` method to prevent users from filtering out records where a multiple relationship must always have at least one related record.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\RelationshipConstraint;\n\nRelationshipConstraint::make('categories')\n    ->emptyable(false)\n```\n\n----------------------------------------\n\nTITLE: Failing Import Row if Record Not Found - Filament PHP\nDESCRIPTION: This snippet shows how to throw a `RowImportFailedException` if no record is found during the `resolveRecord()` process. This allows you to fail the import for specific rows and provide an error message to the user, which will be included in the failed rows CSV.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Product;\nuse Filament\\Actions\\Imports\\Exceptions\\RowImportFailedException;\n\npublic function resolveRecord(): ?Product\n{\n    $product = Product::query()\n        ->where('sku', $this->data['sku'])\n        ->first();\n\n    if (! $product) {\n        throw new RowImportFailedException(\"No product found with SKU [{$this->data['sku']}].\");\n    }\n\n    return $product;\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatically Triggering Filament Actions in PHP\nDESCRIPTION: This PHP code defines a Filament action, and then demonstrates how to trigger it from a click in HTML using the `wire:click` attribute, calling the `mountAction()` method. It also provides an example of triggering the action from JavaScript.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-action.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\npublic function testAction(): Action\n{\n    return Action::make('test')\n        ->requiresConfirmation()\n        ->action(function (array $arguments) {\n            dd('Test action called', $arguments);\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Reusable Action in a Page (PHP)\nDESCRIPTION: This shows how to use the `EmailCustomerAction` action class within a Filament page's header actions.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/12-code-quality-tips.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Resources\\Customers\\Actions\\EmailCustomerAction;\n\nprotected function getHeaderActions(): array\n{\n    return [\n        EmailCustomerAction::make(),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Field with JavaScript - PHP\nDESCRIPTION: This snippet shows how to hide a Filament form field using JavaScript via the `hiddenJs()` method, which avoids a schema reload. The 'is_admin' toggle is hidden when the 'role' select's value is not 'staff'.  It utilizes the `$get()` utility function, which is similar to its PHP counterpart.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Toggle;\n\nSelect::make('role')\n    ->options([\n        'user' => 'User',\n        'staff' => 'Staff',\n    ])\n\nToggle::make('is_admin')\n    ->hiddenJs(<<<'JS'\n        $get('role') !== 'staff'\n        JS)\n```\n\n----------------------------------------\n\nTITLE: Injecting the Current Component Instance - PHP\nDESCRIPTION: This code snippet illustrates how to inject the current component instance into a schema using the `$component` parameter. This allows access to the current component instance, enabling interaction with its properties and methods.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/01-overview.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Component;\n\nfunction (Component $component) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Record URLs (Clickable Rows) (PHP)\nDESCRIPTION: This code snippet demonstrates how to make table rows clickable by setting a URL for each record using the `$table->recordUrl()` method.  A closure is used to dynamically generate the URL based on the record data. The function accepts an Eloquent model and must return a string representing the URL. This allows users to navigate to a specific page for each record by clicking the row.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\nuse Illuminate\\Database\\Eloquent\\Model;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->recordUrl(\n            fn (Model $record): string => route('posts.edit', ['record' => $record]),\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Redirect After Deletion in Filament (PHP)\nDESCRIPTION: This code snippet demonstrates how to redirect the user to a different page after a record is successfully deleted. It uses the `successRedirectUrl()` method to specify the URL to redirect to, in this case, the 'posts.list' route.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/07-delete.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\DeleteAction;\n\nDeleteAction::make()\n    ->successRedirectUrl(route('posts.list'))\n```\n\n----------------------------------------\n\nTITLE: Customizing Ternary Filter Queries in Filament, PHP\nDESCRIPTION: Illustrates how to completely customize the query modification logic for each state of the ternary filter using the `queries()` method. This allows for fine-grained control over how the filter affects the database query based on the selected state (true, false, blank).  It allows you to define custom conditions to filter the results based on the `email_verified_at` field being not null, null, or no filtering when blank.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/03-ternary.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Tables\\Filters\\TernaryFilter;\n\nTernaryFilter::make('email_verified_at')\n    ->label('Email verification')\n    ->placeholder('All users')\n    ->trueLabel('Verified users')\n    ->falseLabel('Not verified users')\n    ->queries(\n        true: fn (Builder $query) => $query->whereNotNull('email_verified_at'),\n        false: fn (Builder $query) => $query->whereNull('email_verified_at'),\n        blank: fn (Builder $query) => $query, // In this example, we do not want to filter the query when it is blank.\n    )\n```\n\n----------------------------------------\n\nTITLE: Changing modal width - Filament Actions (PHP)\nDESCRIPTION: This snippet shows how to change the width of a Filament Action modal using the `modalWidth()` method and the `Width` enum. Requires Filament Actions and Filament Support packages.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Support\\Enums\\Width;\n\nAction::make('updateAuthor')\n    ->schema([\n        // ...\n    ])\n    ->action(function (array $data): void {\n        // ...\n    })\n    ->modalWidth(Width::FiveExtraLarge)\n```\n\n----------------------------------------\n\nTITLE: Global Table Configuration (PHP)\nDESCRIPTION: This code demonstrates how to customize the default configuration for all Filament tables using the static `configureUsing()` method within a service provider's `boot()` method. This allows setting default configurations for all tables in the application, such as the filters layout and pagination page options.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Enums\\FiltersLayout;\nuse Filament\\Tables\\Table;\n\nTable::configureUsing(function (Table $table): void {\n    $table\n        ->filtersLayout(FiltersLayout::AboveContentCollapsible)\n        ->paginationPageOptions([10, 25, 50]);\n});\n```\n\n----------------------------------------\n\nTITLE: Auto-hashing Password Field - Filament (Basic)\nDESCRIPTION: This snippet shows a basic password field configuration in Filament.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_86\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('password')\n    ->password()\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Input Intervals - PHP\nDESCRIPTION: This snippet demonstrates how to customize the input intervals for hours, minutes, and seconds in a DateTimePicker component using the `hoursStep()`, `minutesStep()`, and `secondsStep()` methods. The example also disables the native picker. This allows for more controlled and user-friendly time selection.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/08-date-time-picker.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DateTimePicker;\n\nDateTimePicker::make('published_at')\n    ->native(false)\n    ->hoursStep(2)\n    ->minutesStep(15)\n    ->secondsStep(10)\n```\n\n----------------------------------------\n\nTITLE: Configuring User Model for Google Two-Factor Authentication (PHP)\nDESCRIPTION: This code snippet configures the User model to handle the Google two-factor authentication secret.  It marks the `google_two_factor_authentication_secret` as `$hidden` to prevent exposure and encrypts it using the `encrypted` cast for secure storage.  It also implements `HasGoogleTwoFactorAuthentication` which requires implementing helper methods.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/02-multi-factor-authentication.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Models\\Contracts\\FilamentUser;\nuse Illuminate\\Contracts\\Auth\\MustVerifyEmail;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\nclass User extends Authenticatable implements FilamentUser, MustVerifyEmail\n{\n    // ...\n\n    /**\n     * @var array<string>\n     */\n    protected $hidden = [\n        // ...\n        'google_two_factor_authentication_secret',\n    ];\n\n    /**\n     * @var array<string, string>\n     */\n    protected $casts = [\n        // ...\n        'google_two_factor_authentication_secret' => 'encrypted',\n    ];\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing State Path in Blade\nDESCRIPTION: Illustrates how to access the state path of a field using `$getStatePath()` within a Blade view and bind it to an input field using either `wire:model` or Alpine.js's `$wire.entangle()`. This allows the field to be updated when the user interacts with it. Requires Filament.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/20-custom-fields.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-dynamic-component\n    :component=\"$getFieldWrapperView()\"\n    :field=\"$field\"\n>\n    <input wire:model=\"{{ $getStatePath() }}\" />\n\n    <!-- Or -->\n    \n    <div x-data=\"{ state: $wire.$entangle('{{ $getStatePath() }}') }\">\n        <input x-model=\"state\" />\n    </div>\n</x-dynamic-component>\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic Select Filter in Filament Tables (PHP)\nDESCRIPTION: This snippet demonstrates how to create a basic select filter for a 'status' column using the `SelectFilter` class in Filament. It defines the options available for filtering the status.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/02-select.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\SelectFilter;\n\nSelectFilter::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Initializing Tags Input with JSON Storage - PHP\nDESCRIPTION: Creates a TagsInput component named 'tags' that stores tags as a JSON array in the database.  This is the default behavior.  You'll need to add an array cast to your Eloquent model.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/14-tags-input.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TagsInput;\n\nTagsInput::make('tags')\n```\n\n----------------------------------------\n\nTITLE: Defining the Form Schema for Edit Page - PHP\nDESCRIPTION: This code defines the form schema for the new Edit page, allowing you to specify the fields and layout.  The `$schema` parameter is an instance of `Filament\\Schemas\\Schema`. The `components()` method accepts an array of schema components to be rendered in the form.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/04-editing-records.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Schema;\n\npublic function form(Schema $schema): Schema\n{\n    return $schema\n        ->components([\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Hooks Before/After Delete (PHP)\nDESCRIPTION: This code snippet demonstrates how to use the `before()` and `after()` methods to execute code before and after a record is deleted. These lifecycle hooks allow you to perform additional actions or validations before or after the deletion process.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/07-delete.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\DeleteAction;\n\nDeleteAction::make()\n    ->before(function () {\n        // ...\n    })\n    ->after(function () {\n        // ...\n    })\n```\n\n----------------------------------------\n\nTITLE: Testing Table Search Functionality - PHP\nDESCRIPTION: This snippet demonstrates how to test table search functionality in a Filament resource list page. It uses the `searchTable()` method to search for records and `assertCanSeeTableRecords()` and `assertCanNotSeeTableRecords()` to verify the search results.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/02-testing-resources.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Resources\\Users\\Pages\\ListUsers;\nuse App\\Models\\User;\n\nit('can search users by `name` or `email`', function () {\n    $users = User::factory()->count(5)->create();\n\n    livewire(ListUsers::class)\n        ->assertCanSeeTableRecords($users)\n        ->searchTable($users->first()->name)\n        ->assertCanSeeTableRecords($users->take(1))\n        ->assertCanNotSeeTableRecords($users->skip(1))\n        ->searchTable($users->last()->email)\n        ->assertCanSeeTableRecords($users->take(-1))\n        ->assertCanNotSeeTableRecords($users->take($users->count() - 1));\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling 'Create Another' Feature in Filament (PHP)\nDESCRIPTION: This code shows how to disable the \"create another\" feature after a record is created using the `$canCreateAnother` property. Setting it to `false` will remove the option to create another record from the creation page.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nprotected bool $canCreateAnother = false;\n```\n\n----------------------------------------\n\nTITLE: Preloading Relationship Options for Select Filters (PHP)\nDESCRIPTION: This snippet shows how to preload the searchable options for a relationship select filter using the `preload()` method, to populate the options from the database when the page is loaded.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/02-select.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\SelectFilter;\n\nSelectFilter::make('author')\n    ->relationship('author', 'name')\n    ->searchable()\n    ->preload()\n```\n\n----------------------------------------\n\nTITLE: Customizing the creation process\nDESCRIPTION: This code shows how to customize the record creation process using the `using()` method. The provided function receives the form data (`$data`) and the model class name (`$model`), allowing for custom logic during record creation. Dependencies include `Filament\\Actions\\CreateAction` and `Illuminate\\Database\\Eloquent\\Model`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/04-create.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\CreateAction;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nCreateAction::make()\n    ->using(function (array $data, string $model): Model {\n        return $model::create($data);\n    })\n```\n\n----------------------------------------\n\nTITLE: Authorization Tooltip - PHP\nDESCRIPTION: This snippet shows how to add a tooltip to a Filament action that displays a response message from the policy method when the user is not authorized. The `authorizationTooltip()` method is used to enable the tooltip, which will contain the message returned by the policy. This makes clear why an action is unavailable.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('edit')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n    ->authorize('update')\n    ->authorizationTooltip()\n```\n\n----------------------------------------\n\nTITLE: Setting TextInput required conditionally in Filament\nDESCRIPTION: This code snippet demonstrates how to conditionally set a TextInput field as required using a function. The function checks if the authenticated user has a middle name.  It requires the Filament\\Forms\\Components\\TextInput component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_53\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\User;\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('middle_name')\n    ->required(fn (): bool => auth()->user()->hasMiddleName())\n```\n\n----------------------------------------\n\nTITLE: Limiting Text Length in Filament Text Column (PHP)\nDESCRIPTION: This snippet demonstrates how to limit the length of the text displayed in a Filament TextColumn using the `limit()` method. By default, text is truncated with an ellipsis.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('description')\n    ->limit(50)\n```\n\n----------------------------------------\n\nTITLE: Using Multiple ImportActions with Unique Names\nDESCRIPTION: This code snippet shows how to use multiple `ImportAction` instances with unique names when more than one is needed in the same context. Each action is associated with a specific importer class to handle different types of imports (e.g., Products and Brands).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\ImportAction;\n\nImportAction::make('importProducts')\n    ->importer(ProductImporter::class)\n\nImportAction::make('importBrands')\n    ->importer(BrandImporter::class)\n```\n\n----------------------------------------\n\nTITLE: Relative date formatting in Filament Infolists (PHP)\nDESCRIPTION: This snippet formats the 'created_at' field to display a relative time using the `since()` method, leveraging Carbon's `diffForHumans()` function.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('created_at')\n    ->since()\n```\n\n----------------------------------------\n\nTITLE: Setting Record Title Attribute in Filament Resource\nDESCRIPTION: This code snippet shows how to set the `$recordTitleAttribute` in a Filament resource class. It specifies the column to be used as the title for identifying records, such as for global search.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?string $recordTitleAttribute = 'name';\n```\n\n----------------------------------------\n\nTITLE: Resolving Record for Updating - Filament PHP\nDESCRIPTION: This snippet shows how to modify the `resolveRecord()` method to update existing records instead of always creating new ones. It uses `Product::firstOrNew()` to find an existing product with a matching SKU, or create a new one if it doesn't exist.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Product;\n\npublic function resolveRecord(): ?Product\n{\n    return Product::firstOrNew([\n        'sku' => $this->data['sku'],\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Wrapper Attributes - Filament PHP\nDESCRIPTION: This snippet demonstrates adding extra HTML attributes to the field wrapper element in a Filament form using the `extraFieldWrapperAttributes()` method. This snippet is adding a custom class to the wrapper.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('categories')\n    ->extraFieldWrapperAttributes(['class' => 'components-locked'])\n```\n\n----------------------------------------\n\nTITLE: Applying Tenant Global Scope - PHP\nDESCRIPTION: This code snippet shows the implementation of the `handle` method within a custom middleware (`ApplyTenantScopes`).  It adds a global scope to the `Author` model, ensuring that all queries are filtered to only include records belonging to the current tenant. The tenant is retrieved using `Filament::getTenant()`, and a `whereBelongsTo` clause is added to the query builder.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Author;\nuse Closure;\nuse Filament\\Facades\\Filament;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Http\\Request;\n\nclass ApplyTenantScopes\n{\n    public function handle(Request $request, Closure $next)\n    {\n        Author::addGlobalScope(\n            'tenant',\n            fn (Builder $query) => $query->whereBelongsTo(Filament::getTenant()),\n        );\n\n        return $next($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating SelectColumn Input (PHP)\nDESCRIPTION: This snippet shows how to add validation rules to the `SelectColumn` using Laravel's validation system.  The `rules()` method takes an array of validation rules (e.g., `required`) that are applied when the user updates the select field's value. This ensures data integrity by enforcing constraints on user input.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/06-select.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\SelectColumn;\n\nSelectColumn::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n    ->rules(['required'])\n```\n\n----------------------------------------\n\nTITLE: Validate Numeric TextInput Size - PHP\nDESCRIPTION: This code snippet demonstrates how to validate the minimum and maximum values of a numeric TextInput field using the `minValue()` and `maxValue()` methods. First, `numeric()` is called to ensure input is numeric. `minValue(1)` enforces a minimum value of 1, and `maxValue(100)` enforces a maximum value of 100.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/02-text-input.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('number')\n    ->numeric()\n    ->minValue(1)\n    ->maxValue(100)\n```\n\n----------------------------------------\n\nTITLE: Defining Wizard Steps in Filament (PHP)\nDESCRIPTION: This code shows how to define the steps in a Filament wizard, each containing a schema of form components. Each `Step` can have a title, description, and an array of form components, allowing you to create a structured, multi-step creation process.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\MarkdownEditor;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Components\\Toggle;\nuse Filament\\Schemas\\Components\\Wizard\\Step;\n\nprotected function getSteps(): array\n{\n    return [\n        Step::make('Name')\n            ->description('Give the category a clear and unique name')\n            ->schema([\n                TextInput::make('name')\n                    ->required()\n                    ->live()\n                    ->afterStateUpdated(fn ($state, callable $set) => $set('slug', Str::slug($state))),\n                TextInput::make('slug')\n                    ->disabled()\n                    ->required()\n                    ->unique(Category::class, 'slug', fn ($record) => $record),\n            ]),\n        Step::make('Description')\n            ->description('Add some extra details')\n            ->schema([\n                MarkdownEditor::make('description')\n                    ->columnSpan('full'),\n            ]),\n        Step::make('Visibility')\n            ->description('Control who can view it')\n            ->schema([\n                Toggle::make('is_visible')\n                    ->label('Visible to customers.')\n                    ->default(true),\n            ]),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Ternary Filter for Nullable Columns in Filament, PHP\nDESCRIPTION: Implements a ternary filter for a nullable column, such as `email_verified_at`, which is commonly used to filter verified and unverified users. The `nullable()` method ensures that the filter correctly handles null values, representing the absence of a verified email timestamp.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/03-ternary.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\TernaryFilter;\n\nTernaryFilter::make('email_verified_at')\n    ->nullable()\n```\n\n----------------------------------------\n\nTITLE: Accessing Eloquent Record in Blade\nDESCRIPTION: Shows how to access the current Eloquent record within a Blade view using the `$record` variable. This allows you to display or utilize data from the associated database record.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/20-custom-fields.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-dynamic-component\n    :component=\"$getFieldWrapperView()\"\n    :field=\"$field\"\n>\n    {{ $record->name }}\n</x-dynamic-component>\n```\n\n----------------------------------------\n\nTITLE: Adding Filters Form to Filament Dashboard\nDESCRIPTION: This snippet demonstrates how to add a filters form to the Filament dashboard. It includes the `HasFiltersForm` trait and implements the `filtersForm()` method to return a schema containing form components. This allows filtering data across all widgets on the dashboard.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/01-overview.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Pages\\Dashboard as BaseDashboard;\nuse Filament\\Pages\\Dashboard\\Concerns\\HasFiltersForm;\nuse Filament\\Schemas\\Components\\Section;\nuse Filament\\Schemas\\Schema;\n\nclass Dashboard extends BaseDashboard\n{\n    use HasFiltersForm;\n\n    public function filtersForm(Schema $schema): Schema\n    {\n        return $schema\n            ->components([\n                Section::make()\n                    ->schema([\n                        DatePicker::make('startDate'),\n                        DatePicker::make('endDate'),\n                        // ...\n                    ])\n                    ->columns(3),\n            ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Filter with Schema - Filament PHP\nDESCRIPTION: This code creates a custom filter for a Filament table using a schema. It defines a filter named 'created_at' with two date picker fields, 'created_from' and 'created_until'. The `query()` method modifies the Eloquent query based on the values selected in the date pickers, filtering the results by the 'created_at' column.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/05-custom.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Tables\\Filters\\Filter;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nFilter::make('created_at')\n    ->schema([\n        DatePicker::make('created_from'),\n        DatePicker::make('created_until'),\n    ])\n    ->query(function (Builder $query, array $data): Builder {\n        return $query\n            ->when(\n                $data['created_from'],\n                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '>=', $date),\n            )\n            ->when(\n                $data['created_until'],\n                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '<=', $date),\n            );\n    })\n```\n\n----------------------------------------\n\nTITLE: Generating Filament Resource with View Page\nDESCRIPTION: This command generates a Filament resource for the `Customer` model and includes a View page. It allows viewing the details of a specific record.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-resource Customer --view\n```\n\n----------------------------------------\n\nTITLE: Defining Table Actions in Filament\nDESCRIPTION: This snippet demonstrates how to define actions for table rows and bulk actions in a Filament table. It uses `Action` and `BulkActionGroup` to define actions like 'feature', 'unfeature', and 'delete'. It showcases visibility control using `hidden()` and `visible()` methods. The snippet assumes you have a `Post` model with an `is_featured` attribute.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Actions\\Action;\nuse Filament\\Actions\\BulkActionGroup;\nuse Filament\\Actions\\DeleteBulkAction;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->columns([\n            // ...\n        ])\n        ->actions([\n            Action::make('feature')\n                ->action(function (Post $record) {\n                    $record->is_featured = true;\n                    $record->save();\n                })\n                ->hidden(fn (Post $record): bool => $record->is_featured),\n            Action::make('unfeature')\n                ->action(function (Post $record) {\n                    $record->is_featured = false;\n                    $record->save();\n                })\n                ->visible(fn (Post $record): bool => $record->is_featured),\n        ])\n        ->bulkActions([\n            BulkActionGroup::make([\n                DeleteBulkAction::make(),\n            ]),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hide Tenant Menu Items\nDESCRIPTION: This code snippet demonstrates how to conditionally hide tenant menu items using the `visible()` or `hidden()` methods on an Action.  It utilizes a closure to defer the visibility check until rendering, based on user permissions. Dependency: `Filament\\Actions\\Action`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('settings')\n    ->visible(fn (): bool => auth()->user()->can('manage-team'))\n    // or\n    ->hidden(fn (): bool => ! auth()->user()->can('manage-team'))\n```\n\n----------------------------------------\n\nTITLE: Toggle Column Lifecycle Hooks - PHP\nDESCRIPTION: This code snippet demonstrates how to use lifecycle hooks with a Filament toggle column. The `beforeStateUpdated` hook allows you to run code before the state is saved to the database, and the `afterStateUpdated` hook allows you to run code after the state is saved. The `$record` variable provides access to the Eloquent model instance being updated and `$state` contains the new boolean value of the toggle.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/07-toggle.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nToggleColumn::make()\n    ->beforeStateUpdated(function ($record, $state) {\n        // Runs before the state is saved to the database.\n    })\n    ->afterStateUpdated(function ($record, $state) {\n        // Runs after the state is saved to the database.\n    })\n```\n\n----------------------------------------\n\nTITLE: Requiring Multi-Factor Authentication in Filament\nDESCRIPTION: This code snippet illustrates how to require users to set up multi-factor authentication by passing `isRequired: true` to the `multiFactorAuthentication()` method in the Filament panel configuration.  This forces users to set up 2FA before accessing the application.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/02-multi-factor-authentication.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Auth\\MultiFactor\\GoogleTwoFactor\\GoogleTwoFactorAuthentication;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->multiFactorAuthentication([\n            GoogleTwoFactorAuthentication::make(),\n        ], isRequired: true);\n}\n```\n\n----------------------------------------\n\nTITLE: Globally Customize TextInput Phone Number Validation - PHP\nDESCRIPTION: This code snippet demonstrates how to globally customize the phone number validation regex for all TextInput fields in the application. It uses the `configureUsing()` method within a service provider to apply the custom regex to every TextInput component. This centralizes the configuration, ensuring consistent validation across the application. No explicit dependencies are required beyond Filament itself.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/02-text-input.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::configureUsing(function (TextInput $component): void {\n    $component->telRegex('/^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\.\\/0-9]*$/');\n});\n```\n\n----------------------------------------\n\nTITLE: Determining Relationship Existence\nDESCRIPTION: This code shows how to check for the existence of related records using the `exists()` method. The column name must follow Laravel's convention (e.g. `users_exists`).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('users_exists')\n    ->exists('users')\n```\n\n----------------------------------------\n\nTITLE: Customizing XLSX Header Cell Style in Filament\nDESCRIPTION: This code snippet demonstrates customizing the header cell style in Filament XLSX exports. The `getXlsxHeaderCellStyle()` method in the exporter class is overridden to return an OpenSpout `Style` object. The example sets the font to bold and italic, size 14, name 'Consolas', color yellow, background color black, and aligns the content to the center both horizontally and vertically.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nuse OpenSpout\\Common\\Entity\\Style\\CellAlignment;\nuse OpenSpout\\Common\\Entity\\Style\\CellVerticalAlignment;\nuse OpenSpout\\Common\\Entity\\Style\\Color;\nuse OpenSpout\\Common\\Entity\\Style\\Style;\n\npublic function getXlsxHeaderCellStyle(): ?Style\n{\n    return (new Style())\n        ->setFontBold()\n        ->setFontItalic()\n        ->setFontSize(14)\n        ->setFontName('Consolas')\n        ->setFontColor(Color::rgb(255, 255, 77))\n        ->setBackgroundColor(Color::rgb(0, 0, 0))\n        ->setCellAlignment(CellAlignment::CENTER)\n        ->setCellVerticalAlignment(CellVerticalAlignment::CENTER);\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Livewire Component into Filament Action (PHP)\nDESCRIPTION: This snippet shows how to inject the current Livewire component instance into a Filament action using the `$livewire` parameter. It requires importing the `Livewire\\Component` class. This provides access to the entire Livewire component instance, allowing access to its properties and methods.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\n\nfunction (Component $livewire) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Configuration Options - PHP\nDESCRIPTION: This code shows how to customize the chart's configuration options using the `$options` property or the `getOptions()` method. These options directly map to Chart.js configuration options.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/03-charts.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nprotected ?array $options = [\n    'plugins' => [\n        'legend' => [\n            'display' => false,\n        ],\n    ],\n];\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected function getOptions(): array\n{\n    return [\n        'plugins' => [\n            'legend' => [\n                'display' => false,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Aggregating Relationship Field with average in Filament Export\nDESCRIPTION: This code snippet demonstrates how to aggregate a relationship field using the `avg()` method in Filament to show the average of a field on all related records in a column during export.  The name of the column must follow the Laravel convention.  It uses the `ExportColumn` class from Filament.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('users_avg_age')\n    ->avg('users', 'age')\n```\n\n----------------------------------------\n\nTITLE: Displaying Data from Relationships\nDESCRIPTION: This code demonstrates how to access data from related models using dot notation. It allows exporting data from columns within relationships.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('author.name')\n```\n\n----------------------------------------\n\nTITLE: Initializing CheckboxList with Static Options - PHP\nDESCRIPTION: This code snippet demonstrates how to initialize a `CheckboxList` component in Filament with a static array of options. The options are defined as key-value pairs, where the key is the value and the value is the label displayed to the user.  It requires the `Filament\\Forms\\Components\\CheckboxList` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/06-checkbox-list.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technologies')\n    ->options([\n        'tailwind' => 'Tailwind CSS',\n        'alpine' => 'Alpine.js',\n        'laravel' => 'Laravel',\n        'livewire' => 'Laravel Livewire',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Installing the plugin via Composer\nDESCRIPTION: This command installs the Filament Spatie Media Library Plugin using Composer. It requires Composer to be installed and configured. The -W flag ensures that dependencies are updated aggressively.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/spatie-laravel-media-library-plugin:\"^3.2\" -W\n```\n\n----------------------------------------\n\nTITLE: Changing ToggleButtons Option Colors (PHP)\nDESCRIPTION: This snippet shows how to customize the colors of ToggleButtons based on the selected option using the `colors()` method.  Each key in the color array corresponds to the option value. The colors are referenced from Filament's styling system.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/18-toggle-buttons.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\n\nToggleButtons::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'scheduled' => 'Scheduled',\n        'published' => 'Published'\n    ])\n    ->colors([\n        'draft' => 'info',\n        'scheduled' => 'warning',\n        'published' => 'success',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Creating Row Actions\nDESCRIPTION: This snippet showcases how to create individual row actions using the `Action::make()` method, which accepts a unique action name.  The `url()` method defines a link that the action will trigger, while the `action()` method executes custom code. Callbacks allow access to the current table `$record` that was clicked.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/04-actions.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Actions\\Action;\n\nAction::make('edit')\n    ->url(fn (Post $record): string => route('posts.edit', $record))\n    ->openUrlInNewTab()\n\nAction::make('delete')\n    ->requiresConfirmation()\n    ->action(fn (Post $record) => $record->delete())\n```\n\n----------------------------------------\n\nTITLE: Setting Global Search Result Titles in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to set the title attribute for a resource to enable global search. The `$recordTitleAttribute` property specifies the attribute used to retrieve the search result title for records of the resource.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/09-global-search.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?string $recordTitleAttribute = 'title';\n```\n\n----------------------------------------\n\nTITLE: Showing Field with JavaScript - PHP\nDESCRIPTION: This snippet demonstrates how to conditionally show a field using `visibleJs()`. Here, the 'is_admin' toggle is only visible when the 'role' is 'staff', utilizing the JavaScript `$get()` function for client-side logic.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Toggle;\n\nSelect::make('role')\n    ->options([\n        'user' => 'User',\n        'staff' => 'Staff',\n    ])\n\nToggle::make('is_admin')\n    ->visibleJs(<<<'JS'\n        $get('role') === 'staff'\n        JS)\n```\n\n----------------------------------------\n\nTITLE: Overriding Filter Indicator Label - Filament PHP\nDESCRIPTION: This code shows how to override the default indicator label for a Filament filter.  The `indicator()` method is used to set a custom label that is displayed when the filter is active. In this case, the filter label is 'Administrators only?' and the indicator is 'Administrators'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/05-custom.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\Filter;\n\nFilter::make('is_admin')\n    ->label('Administrators only?')\n    ->indicator('Administrators')\n```\n\n----------------------------------------\n\nTITLE: Customizing Authorization - Filament Import (PHP)\nDESCRIPTION: This code shows how to customize authorization for accessing the failure CSV file by creating an `ImportPolicy` class and registering it in the `AuthServiceProvider`. It also demonstrates how to implement the `view()` method to check if the user is authorized to view the import.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_63\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Policies\\ImportPolicy;\nuse Filament\\Actions\\Imports\\Models\\Import;\n\nprotected $policies = [\n    Import::class => ImportPolicy::class,\n];\n```\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\User;\nuse Filament\\Actions\\Imports\\Models\\Import;\n\npublic function view(User $user, Import $import): bool\n{\n    return $import->user()->is($user);\n}\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Markdown HTML Output - Blade\nDESCRIPTION: This code snippet shows how to sanitize the HTML output generated from the MarkdownEditor in a Blade view. It uses Filament's `sanitizeHtml()` helper to prevent XSS vulnerabilities by removing potentially dangerous JavaScript from the HTML.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/11-markdown-editor.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n{!! str($record->content)->markdown()->sanitizeHtml() !!}\n```\n\n----------------------------------------\n\nTITLE: Asserting Form Errors - PHP\nDESCRIPTION: This snippet demonstrates how to assert that a Filament form has validation errors using `assertHasFormErrors()`. It requires the `Pest\\Livewire\\livewire` function. The example checks for a 'required' error on the 'title' field. You can specify the form name as the second argument to `assertHasFormErrors` when there are multiple schemas.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can validate input', function () {\n    livewire(CreatePost::class)\n        ->fillForm([\n            'title' => null,\n        ])\n        ->call('create')\n        ->assertHasFormErrors(['title' => 'required']);\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Theme CSS for Tailwind v4\nDESCRIPTION: This code snippet demonstrates the changes required in custom theme CSS files when upgrading to Tailwind CSS v4 in Filament.  It replaces the `@config` directive with `@source` directives, pointing to the application's Filament directories.  The old `tailwind.config.js` is no longer used.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\n@import '../../../../vendor/filament/filament/resources/css/theme.css';\n\n@source '../../../../app/Filament';\n@source '../../../../resources/views/filament';\n```\n\n----------------------------------------\n\nTITLE: Configure Slug Attribute\nDESCRIPTION: This code snippet shows how to configure the slug attribute for tenant URLs using the `slugAttribute` argument on the `tenant()` configuration method. It specifies that the 'slug' attribute of the Team model should be used in the URL. Dependencies: `App\\Models\\Team`, `Filament\\Panel`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Team;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenant(Team::class, slugAttribute: 'slug');\n}\n```\n\n----------------------------------------\n\nTITLE: Using the ImportAction in Filament\nDESCRIPTION: This code snippet demonstrates how to use the `ImportAction` in Filament. It creates an instance of `ImportAction` and associates it with a specific importer class, `ProductImporter`, which defines how the data will be imported.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Imports\\ProductImporter;\nuse Filament\\Actions\\ImportAction;\n\nImportAction::make()\n    ->importer(ProductImporter::class)\n```\n\n----------------------------------------\n\nTITLE: Customizing data before saving\nDESCRIPTION: This code demonstrates how to modify form data before saving it to the database using the `mutateFormDataUsing()` method.  It accesses the form data as an array, modifies it (in this case, setting the `user_id`), and returns the modified version.  A dependency includes `Filament\\Actions\\CreateAction`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/04-create.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\CreateAction;\n\nCreateAction::make()\n    ->mutateDataUsing(function (array $data): array {\n        $data['user_id'] = auth()->id();\n\n        return $data;\n    })\n```\n\n----------------------------------------\n\nTITLE: Initializing CreateAction with schema\nDESCRIPTION: This code initializes a Filament CreateAction, defining the form schema with a required text input field for the 'title'.  It utilizes the `CreateAction::make()` method to create the action and `schema()` to specify form fields. Dependencies include `Filament\\Actions\\CreateAction` and `Filament\\Forms\\Components\\TextInput`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/04-create.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\CreateAction;\nuse Filament\\Forms\\Components\\TextInput;\n\nCreateAction::make()\n    ->schema([\n        TextInput::make('title')\n            ->required()\n            ->maxLength(255),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Customizing Add Action Label in Filament KeyValue\nDESCRIPTION: This snippet demonstrates how to customize the label of the button used to add new rows to the KeyValue field using the `addActionLabel()` method.  This allows for a more user-friendly and descriptive interface.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/16-key-value.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n    ->addActionLabel('Add property')\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Properties to Uploaded Files\nDESCRIPTION: This code snippet adds custom properties to the uploaded files using the `customProperties()` method.  These properties can be used to store additional metadata associated with each file.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\SpatieMediaLibraryFileUpload;\n\nSpatieMediaLibraryFileUpload::make('attachments')\n    ->multiple()\n    ->customProperties(['zip_filename_prefix' => 'folder/subfolder/'])\n```\n\n----------------------------------------\n\nTITLE: Implementing Enum Descriptions with HasDescription in PHP\nDESCRIPTION: This snippet demonstrates implementing the `HasDescription` interface alongside `HasLabel` in a PHP enum.  The `getDescription()` method returns a textual description based on the enum case, allowing for more detailed information to be displayed in the UI, typically under the label. It depends on the `Filament\\Support\\Contracts\\HasDescription` and `Filament\\Support\\Contracts\\HasLabel` interfaces.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/03-enums.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Contracts\\HasDescription;\nuse Filament\\Support\\Contracts\\HasLabel;\n\nenum Status: string implements HasLabel, HasDescription\n{\n    case Draft = 'draft';\n    case Reviewing = 'reviewing';\n    case Published = 'published';\n    case Rejected = 'rejected';\n    \n    public function getLabel(): ?string\n    {\n        return $this->name;\n    }\n    \n    public function getDescription(): ?string\n    {\n        return match ($this) {\n            self::Draft => 'This has not finished being written yet.',\n            self::Reviewing => 'This is ready for a staff member to read.',\n            self::Published => 'This has been approved by a staff member and is public on the website.',\n            self::Rejected => 'A staff member has decided this is not appropriate for the website.',\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Builder minimum and maximum items validation in PHP\nDESCRIPTION: This code snippet demonstrates how to validate the minimum and maximum number of items in a Filament Form Builder using the `minItems()` and `maxItems()` methods. It sets the minimum to 1 and the maximum to 5.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->minItems(1)\n    ->maxItems(5)\n```\n\n----------------------------------------\n\nTITLE: Showing Field with JavaScript - JavaScript\nDESCRIPTION: This snippet contains the javascript code that is passed to the `visibleJs()` method.  It uses the `$get()` utility function to get the value of the 'role' field and returns true if it is equal to 'staff', meaning the field should be visible.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n$get('role') === 'staff'\n```\n\n----------------------------------------\n\nTITLE: Adding Search Functionality to Select Constraint (PHP)\nDESCRIPTION: This demonstrates how to enable search functionality within a SelectConstraint using the `searchable()` method. This allows users to search through the options in the select field, especially useful for large datasets.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\SelectConstraint;\n\nSelectConstraint::make('status')\n    ->searchable()\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Authorize Action using Policy - PHP\nDESCRIPTION: This snippet demonstrates how to authorize a Filament action using a policy method. The `authorize()` method is used to specify which policy method should be called to determine if the user is authorized to perform the action. It assumes an Eloquent model is available and uses it to find the correct policy.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('edit')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n    ->authorize('update')\n```\n\n----------------------------------------\n\nTITLE: Creating a custom Filament infolist entry\nDESCRIPTION: This command creates a new custom entry class and view for Filament infolists using the Artisan command-line tool. It generates a PHP class and a Blade view file.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/08-custom-entries.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-infolist-entry AudioPlayerEntry\n```\n\n----------------------------------------\n\nTITLE: Autocompleting Text in Filament Text Input\nDESCRIPTION: This snippet illustrates how to enable autocompletion for a text input field in Filament using the `autocomplete()` method. It requires the Filament Forms package. It demonstrates setting autocompletion for a password field to 'new-password' and disabling it with `autocomplete(false)`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/02-text-input.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('password')\n    ->password()\n    ->autocomplete('new-password')\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('password')\n    ->password()\n    ->autocomplete(false)\n```\n\n----------------------------------------\n\nTITLE: Dynamically Customizing Icon Color based on State (Filament, PHP)\nDESCRIPTION: This code demonstrates how to dynamically set the color of an Icon column based on its state. A function is passed to the `color()` method, which uses a `match` expression to map state values to different colors.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/03-icon.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\n\nIconColumn::make('status')\n    ->color(fn (string $state): string => match ($state) {\n        'draft' => 'info',\n        'reviewing' => 'warning',\n        'published' => 'success',\n        default => 'gray',\n    })\n```\n\n----------------------------------------\n\nTITLE: Validate TextInput Exact Length - PHP\nDESCRIPTION: This code snippet demonstrates how to specify an exact length for a TextInput field using the `length()` method. Similar to `minLength()` and `maxLength()`, this adds both frontend and backend validation to enforce the length. In this example, `length(8)` ensures that the input must be exactly 8 characters long.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/02-text-input.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('code')\n    ->length(8)\n```\n\n----------------------------------------\n\nTITLE: Creating a basic EditAction with schema in Filament (PHP)\nDESCRIPTION: This code snippet demonstrates how to create a basic EditAction with a schema that includes a required text input for the 'title' field. It uses the `EditAction::make()` method to create an instance of the action and the `schema()` method to define the form fields.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/05-edit.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\EditAction;\nuse Filament\\Forms\\Components\\TextInput;\n\nEditAction::make()\n    ->schema([\n        TextInput::make('title')\n            ->required()\n            ->maxLength(255),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Showing Field on Operation - PHP\nDESCRIPTION: This shows how to make a field visible only during a particular operation using `visibleOn()`. The 'is_admin' toggle is only visible on 'create', and in the second example, only visible on 'create' or 'edit'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('is_admin')\n    ->visibleOn('create')\n\nToggle::make('is_admin')\n    ->visibleOn(['create', 'edit'])\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Operator in Filament\nDESCRIPTION: This code snippet demonstrates how to create a custom operator for Filament using the `Operator::make()` method. It configures the label, summary, and the base query for filtering records based on whether the authenticated user is subscribed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\Operators\\Operator;\n\nOperator::make('subscribed')\n    ->label(fn (bool $isInverse): string => $isInverse ? 'Not subscribed' : 'Subscribed')\n    ->summary(fn (bool $isInverse): string => $isInverse ? 'You are not subscribed' : 'You are subscribed')\n    ->baseQuery(fn (Builder $query, bool $isInverse) => $query->{$isInverse ? 'whereDoesntHave' : 'whereHas'}(\n        'subscriptions.user',\n        fn (Builder $query) => $query->whereKey(auth()->user()),\n    )),\n```\n\n----------------------------------------\n\nTITLE: Importing BelongsToMany Relationship - Filament PHP\nDESCRIPTION: This snippet demonstrates how to import a `BelongsToMany` relationship.  It combines the `relationship()` method with `multiple()` to handle multiple values in the CSV column, separated by a comma in this case. The CSV column 'authors' will be mapped to the 'authors' relationship.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('authors')\n    ->relationship()\n    ->multiple(',')\n```\n\n----------------------------------------\n\nTITLE: Initializing Icon Column with State-Based Icons (Filament, PHP)\nDESCRIPTION: This code snippet demonstrates how to create an Icon column in a Filament table and set different icons based on the column's state. It uses a `match` expression to map state values to corresponding Heroicons.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/03-icon.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\nuse Filament\\Support\\Icons\\Heroicon;\n\nIconColumn::make('status')\n    ->icon(fn (string $state): string => match ($state) {\n        'draft' => Heroicon::OutlinedPencil,\n        'reviewing' => Heroicon::OutlinedClock,\n        'published' => Heroicon::OutlinedCheckCircle,\n    })\n```\n\n----------------------------------------\n\nTITLE: Limiting Word Count in Filament Text Column (PHP)\nDESCRIPTION: This snippet demonstrates how to limit the number of words displayed in a Filament TextColumn using the `words()` method. By default, text is truncated with an ellipsis.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('description')\n    ->words(10)\n```\n\n----------------------------------------\n\nTITLE: Accepted Validation - Filament PHP\nDESCRIPTION: This code snippet demonstrates how to use the `accepted()` validation rule to ensure that the checkbox is checked before the form can be submitted. This is commonly used for terms of service agreements or other mandatory agreements.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/04-checkbox.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Checkbox;\n\nCheckbox::make('terms_of_service')\n    ->accepted()\n```\n\n----------------------------------------\n\nTITLE: Adding Delete Action to Table - PHP\nDESCRIPTION: This code snippet demonstrates how to add a `DeleteAction` to a Filament table, allowing users to delete single records from the List page. This is added to the `actions` array within the `table` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/06-deleting-records.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic static function table(Table $table): Table\n{\n    return $table\n        ->columns([\n            // ...\n        ])\n        ->actions([\n            // ...\n            \\Filament\\Actions\\DeleteAction::make(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Skippable Steps in Filament Wizard (PHP)\nDESCRIPTION: This code shows how to allow users to skip steps in a Filament wizard by overriding the `hasSkippableSteps()` method and returning `true`. This makes all steps optional and allows users to navigate freely between them.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\npublic function hasSkippableSteps(): bool\n{\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Tenant in Filament (HasDefaultTenant Contract)\nDESCRIPTION: This snippet shows how to implement the `HasDefaultTenant` contract in a Filament user model to customize the default tenant selection. The `getDefaultTenant()` method is overridden to return the user's `latestTeam` relationship, determining the default tenant based on the last active team. It uses the `BelongsTo` relationship for associating with the Team model.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Filament\\Models\\Contracts\\FilamentUser;\nuse Filament\\Models\\Contracts\\HasDefaultTenant;\nuse Filament\\Models\\Contracts\\HasTenants;\nuse Filament\\Panel;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n\nclass User extends Model implements FilamentUser, HasDefaultTenant, HasTenants\n{\n    // ...\n\n    public function getDefaultTenant(Panel $panel): ?Model\n    {\n        return $this->latestTeam;\n    }\n\n    public function latestTeam(): BelongsTo\n    {\n        return $this->belongsTo(Team::class, 'latest_team_id');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Autocomplete Suggestions - PHP\nDESCRIPTION: Configures the TagsInput component to display autocomplete suggestions to the user.  The `suggestions()` method takes an array of strings as input. It accepts a static array or a function to dynamically calculate it.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/14-tags-input.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TagsInput;\n\nTagsInput::make('tags')\n    ->suggestions([\n        'tailwindcss',\n        'alpinejs',\n        'laravel',\n        'livewire',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Formatting Number with Decimal Places\nDESCRIPTION: Formats a column as a number with a specified number of decimal places using the `decimalPlaces` argument within the `numeric()` method. This allows customization of the precision of the displayed number.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('stock')\n    ->numeric(decimalPlaces: 0)\n```\n\n----------------------------------------\n\nTITLE: Defining Lifecycle Hooks - Filament Import (PHP)\nDESCRIPTION: This code snippet shows how to define lifecycle hooks within an importer class. These hooks allow execution of code at different stages of the import process, such as before or after validation, filling, and saving.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_62\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Imports\\Importer;\n\nclass ProductImporter extends Importer\n{\n    // ...\n\n    protected function beforeValidate(): void\n    {\n        // Runs before the CSV data for a row is validated.\n    }\n\n    protected function afterValidate(): void\n    {\n        // Runs after the CSV data for a row is validated.\n    }\n\n    protected function beforeFill(): void\n    {\n        // Runs before the validated CSV data for a row is filled into a model instance.\n    }\n\n    protected function afterFill(): void\n    {\n        // Runs after the validated CSV data for a row is filled into a model instance.\n    }\n\n    protected function beforeSave(): void\n    {\n        // Runs before a record is saved to the database.\n    }\n\n    protected function beforeCreate(): void\n    {\n        // Similar to `beforeSave()`, but only runs when creating a new record.\n    }\n\n    protected function beforeUpdate(): void\n    {\n        // Similar to `beforeSave()`, but only runs when updating an existing record.\n    }\n\n    protected function afterSave(): void\n    {\n        // Runs after a record is saved to the database.\n    }\n    \n    protected function afterCreate(): void\n    {\n        // Similar to `afterSave()`, but only runs when creating a new record.\n    }\n    \n    protected function afterUpdate(): void\n    {\n        // Similar to `afterSave()`, but only runs when updating an existing record.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Halting the Saving Process in Filament (PHP)\nDESCRIPTION: This code shows how to halt the saving process within a lifecycle hook by calling `$action->halt()`. An example is given where a user is notified and prevented from editing a post if they do not have an active subscription.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/05-edit.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Actions\\Action;\nuse Filament\\Actions\\EditAction;\nuse Filament\\Notifications\\Notification;\n\nEditAction::make()\n    ->before(function (EditAction $action, Post $record) {\n        if (! $record->team->subscribed()) {\n            Notification::make()\n                ->warning()\n                ->title('You don\\'t have an active subscription!')\n                ->body('Choose a plan to continue.')\n                ->persistent()\n                ->actions([\n                    Action::make('subscribe')\n                        ->button()\n                        ->url(route('subscribe'), shouldOpenInNewTab: true),\n                ])\n                ->send();\n        \n            $action->halt();\n        }\n    })\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Livewire Component (PHP)\nDESCRIPTION: This snippet demonstrates how to pass parameters to a Livewire component when inserting it into a Filament schema. These parameters are then available either as public properties or as arguments in the `mount()` method of the Livewire component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/07-custom-components.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Livewire\\Chart;\nuse Filament\\Schemas\\Components\\Livewire;\n\nLivewire::make(Chart::class, ['bar' => 'baz'])\n```\n\n----------------------------------------\n\nTITLE: Initializing Rich Editor in Filament\nDESCRIPTION: This code snippet demonstrates how to initialize a basic rich editor component in a Filament form. It uses the `RichEditor::make()` method to create a rich text editor field named 'content'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/10-rich-editor.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\RichEditor;\n\nRichEditor::make('content')\n```\n\n----------------------------------------\n\nTITLE: Injecting Eloquent Record into Filament Action (PHP)\nDESCRIPTION: This snippet shows how to inject the Eloquent record associated with a Filament action using the `$record` parameter. It requires importing the `Illuminate\\Database\\Eloquent\\Model` class. The `$record` parameter provides access to the model instance the action is associated with, often used within a table row action.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nfunction (Model $record) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing How Column Data is Filled - Filament PHP\nDESCRIPTION: This snippet demonstrates how to customize how column state is filled into a record using the `fillRecordUsing()` method.  The example converts the 'sku' column to uppercase before saving it to the record. It provides greater control over how data is transformed before being persisted.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Product;\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('sku')\n    ->fillRecordUsing(function (Product $record, string $state): void {\n        $record->sku = strtoupper($state);\n    })\n```\n\n----------------------------------------\n\nTITLE: Overriding setUp() Method - Filament PHP\nDESCRIPTION: Demonstrates overriding the `setUp()` method to configure the object once it's instantiated. This is the recommended approach instead of overriding the `make()` method to pass default configurations. The example sets a default label for the component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\nprotected function setUp(): void\n{\n    parent::setUp();\n\n    $this->label('Default label');\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Sidebar with Tailwind CSS @apply directive\nDESCRIPTION: This snippet demonstrates how to use Tailwind CSS's `@apply` directive to apply Tailwind classes to the Filament sidebar element using the `fi-sidebar` CSS hook class. It applies background colors for both light and dark modes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/02-css-hooks.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.fi-sidebar {\n    @apply bg-gray-50 dark:bg-gray-950;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Widget Data in Filament\nDESCRIPTION: This code snippet shows how to use the `InteractsWithPageFilters` trait in a widget to access the raw data from the filters form. The `$this->pageFilters` property is used to access the filter values, which can then be used to query the database. The code also demonstrates conditional querying based on the presence of filter values.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/01-overview.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\BlogPost;\nuse Carbon\\CarbonImmutable;\nuse Filament\\Widgets\\StatsOverviewWidget;\nuse Filament\\Widgets\\Concerns\\InteractsWithPageFilters;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass BlogPostsOverview extends StatsOverviewWidget\n{\n    use InteractsWithPageFilters;\n\n    public function getStats(): array\n    {\n        $startDate = $this->pageFilters['startDate'] ?? null;\n        $endDate = $this->pageFilters['endDate'] ?? null;\n\n        return [\n            StatsOverviewWidget\\Stat::make(\n                label: 'Total posts',\n                value: BlogPost::query()\n                    ->when($startDate, fn (Builder $query) => $query->whereDate('created_at', '>=', $startDate))\n                    ->when($endDate, fn (Builder $query) => $query->whereDate('created_at', '<=', $endDate))\n                    ->count(),\n            ),\n            // ...\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authorization for Filament Pages in PHP\nDESCRIPTION: This code snippet demonstrates how to restrict access to a Filament page by overriding the `canAccess()` method. It uses Laravel's authentication system to determine if the current user has the necessary permissions.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic static function canAccess(): bool\n{\n    return auth()->user()->canManageSettings();\n}\n```\n\n----------------------------------------\n\nTITLE: Eloquent Model Cast for JSON Tags - PHP\nDESCRIPTION: Defines an Eloquent model with a cast for the 'tags' attribute, ensuring it's treated as an array when retrieved from the database.  This is necessary when storing tags as JSON.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/14-tags-input.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Post extends Model\n{\n    protected $casts = [\n        'tags' => 'array',\n    ];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing HTML in CheckboxList Option Labels - PHP\nDESCRIPTION: This example demonstrates how to allow HTML in the option labels of the `CheckboxList` component using the `allowHtml()` method. This enables you to render HTML content within the labels, such as styled text or images. It is crucial to ensure that the HTML is safe to prevent XSS vulnerabilities. It requires the `Filament\\Forms\\Components\\CheckboxList` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/06-checkbox-list.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technology')\n    ->options([\n        'tailwind' => '<span class=\"text-blue-500\">Tailwind</span>',\n        'alpine' => '<span class=\"text-green-500\">Alpine</span>',\n        'laravel' => '<span class=\"text-red-500\">Laravel</span>',\n        'livewire' => '<span class=\"text-pink-500\">Livewire</span>',\n    ])\n    ->searchable()\n    ->allowHtml()\n```\n\n----------------------------------------\n\nTITLE: Hiding a Field in Filament\nDESCRIPTION: This shows how to hide a text input field using the `hidden()` method.  Hidden fields are not visible to the user.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->hidden()\n```\n\n----------------------------------------\n\nTITLE: Filtering Nullable Values in Filament Text Constraint\nDESCRIPTION: This code snippet demonstrates how to enable filtering of `null` values in a Filament text constraint. By using the `nullable()` method, the constraint will display operators like \"Is filled\" and \"Is blank\" to allow users to filter based on whether a column is empty or not.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\TextConstraint;\n\nTextConstraint::make('name')\n    ->nullable()\n```\n\n----------------------------------------\n\nTITLE: Grouping Navigation Items with Dynamic Parent\nDESCRIPTION: This code snippet demonstrates how to group navigation items under other items, using the `getNavigationParentItem()` method.  The parent must be defined with a group. No dependencies required except filament, and translation files for filament/navigation.groups.settings.items.notifications. The expected output is a nested navigation menu.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\npublic static function getNavigationParentItem(): ?string\n{\n    return __('filament/navigation.groups.settings.items.notifications');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Block Label\nDESCRIPTION: This code demonstrates how to customize the label of a block using the `label()` method. This is useful for providing a more descriptive name for the block, especially when using translation strings for localization. The example shows how to set a translation key as the label.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder\\Block;\n\nBlock::make('heading')\n    ->label(__('blocks.heading'))\n```\n\n----------------------------------------\n\nTITLE: Passing Eloquent Model Data to Infolist\nDESCRIPTION: This PHP code demonstrates how to pass an Eloquent model instance to the `record()` method of the infolist, which automatically maps model attributes to entries in the infolist's schema. It also demonstrates using `TextEntry` components. Requires `Filament\\Infolists\\Components\\TextEntry` and `Filament\\Schemas\\Schema`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-infolist.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\nuse Filament\\Schemas\\Schema;\n\npublic function productInfolist(Schema $schema): Schema\n{\n    return $schema\n        ->record($this->product)\n        ->components([\n            TextEntry::make('name'),\n            TextEntry::make('category.name'),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Chart Data - PHP\nDESCRIPTION: This example shows how to add filters to a chart to dynamically change the data displayed. It defines a `$filter` property to set the default filter, and the `getFilters()` method returns an array of filter options. The active filter value can be accessed in the `getData()` method to modify the data query.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/03-charts.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic ?string $filter = 'today';\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected function getFilters(): ?array\n{\n    return [\n        'today' => 'Today',\n        'week' => 'Last week',\n        'month' => 'Last month',\n        'year' => 'This year',\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected function getData(): array\n{\n    $activeFilter = $this->filter;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Laravel Container Dependencies into Filament Action (PHP)\nDESCRIPTION: This snippet shows how to inject dependencies from Laravel's container into a Filament action callback, alongside Filament's utility injections. This allows access to services like `Request` or other configured dependencies within the application.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nfunction (Request $request, array $arguments) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Filament Resource with Artisan\nDESCRIPTION: This command creates a new Filament resource for the `Customer` model, generating files in the `app/Filament/Resources` directory. It initializes the basic structure for managing customers in the Filament admin panel.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-resource Customer\n```\n\n----------------------------------------\n\nTITLE: Labelling Builder Items Based on Content\nDESCRIPTION: This snippet shows how to dynamically label builder items based on their content using a closure passed to the `label()` method. The closure receives the item's data in a `$state` variable. It returns a different label depending on whether the state is null (block picker) or contains data (item label). The `live()` method is used for real-time updates.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder\\Block;\nuse Filament\\Forms\\Components\\TextInput;\n\nBlock::make('heading')\n    ->schema([\n        TextInput::make('content')\n            ->live(onBlur: true)\n            ->required(),\n        // ...\n    ])\n    ->label(function (?array $state): string {\n        if ($state === null) {\n            return 'Heading';\n        }\n\n        return $state['content'] ?? 'Untitled heading';\n    })\n```\n\n----------------------------------------\n\nTITLE: Autocapitalizing Text in Filament Text Input\nDESCRIPTION: This snippet shows how to control autocapitalization of a text input field in Filament using the `autocapitalize()` method. It requires the Filament Forms package. It sets autocapitalization to 'words'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/02-text-input.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->autocapitalize('words')\n```\n\n----------------------------------------\n\nTITLE: Retrieving another field's state in Filament\nDESCRIPTION: This code snippet demonstrates how to retrieve the state (value) of another field in a Filament form using the `$get` parameter. You must inject Filament\\Schemas\\Components\\Utilities\\Get.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_56\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Utilities\\Get;\n\nfunction (Get $get) {\n    $email = $get('email'); // Store the value of the `email` field in the `$email` variable.\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Dehydrating Field State Using a Closure\nDESCRIPTION: This snippet demonstrates how to modify the state of a field during the dehydration process using `dehydrateStateUsing()`. It capitalizes the 'name' field's value before the form state is extracted.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_72\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->required()\n    ->dehydrateStateUsing(fn (string $state): string => ucwords($state))\n```\n\n----------------------------------------\n\nTITLE: Dynamic Grid Configuration based on User Role - PHP\nDESCRIPTION: This code snippet illustrates how to dynamically configure a Filament Grid component based on the user's role using a closure. It checks if the authenticated user is an admin and adjusts the number of columns accordingly. This allows for customized layouts based on user permissions or other dynamic criteria.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/01-overview.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Grid;\nuse Filament\\Schemas\\Components\\Section;\n\nGrid::make(fn (): array => [\n    'lg' => auth()->user()->isAdmin() ? 4 : 6,\n])->schema([\n    // ...\n])\n```\n\n----------------------------------------\n\nTITLE: Authorizing Bulk Actions\nDESCRIPTION: This snippet illustrates how to authorize bulk actions for each selected record using the `authorizeIndividualRecords()` method, which accepts the name of a policy method. If the policy denies authorization, the record will not be included in the `$records` collection passed to the action.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/04-actions.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\BulkAction;\nuse Illuminate\\Database\\Eloquent\\Collection;\n\nBulkAction::make('delete')\n    ->requiresConfirmation()\n    ->authorizeIndividualRecords('delete')\n    ->action(fn (Collection $records) => $records->each->delete())\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle Hooks in Filament (PHP)\nDESCRIPTION: This example shows how to use lifecycle hooks in Filament's EditAction. It includes `beforeFormFilled`, `afterFormFilled`, `beforeFormValidated`, `afterFormValidated`, `before`, and `after` hooks, allowing execution of code at various points in the saving process.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/05-edit.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\EditAction;\n\nEditAction::make()\n    ->beforeFormFilled(function () {\n        // Runs before the form fields are populated from the database.\n    })\n    ->afterFormFilled(function () {\n        // Runs after the form fields are populated from the database.\n    })\n    ->beforeFormValidated(function () {\n        // Runs before the form fields are validated when the form is saved.\n    })\n    ->afterFormValidated(function () {\n        // Runs after the form fields are validated when the form is saved.\n    })\n    ->before(function () {\n        // Runs before the form fields are saved to the database.\n    })\n    ->after(function () {\n        // Runs after the form fields are saved to the database.\n    })\n```\n\n----------------------------------------\n\nTITLE: Customizing Job Queue - PHP\nDESCRIPTION: This snippet shows how to customize the queue used for jobs of a certain importer, by overriding the `getJobQueue()` method in your importer class. It allows for specific queues for different import processes. Dependencies: None.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_52\n\nLANGUAGE: php\nCODE:\n```\npublic function getJobQueue(): ?string\n{\n    return 'imports';\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving data when creating another\nDESCRIPTION: This code demonstrates how to preserve form data when using the \"create and create another\" feature. It shows preserving only specific fields or all of the data by defining a function that filters or returns the entire `$data` array respectively. Dependencies include `Filament\\Actions\\CreateAction` and `Illuminate\\Support\\Arr`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/04-create.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\CreateAction;\n\nCreateAction::make()\n    ->preserveFormDataWhenCreatingAnother(['is_admin', 'organization'])\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\CreateAction;\nuse Illuminate\\Support\\Arr;\n\nCreateAction::make()\n    ->preserveFormDataWhenCreatingAnother(fn (array $data): array => Arr::only($data, ['is_admin', 'organization']))\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\CreateAction;\n\nCreateAction::make()\n    ->preserveFormDataWhenCreatingAnother(fn (array $data): array => $data)\n```\n\n----------------------------------------\n\nTITLE: Disabling Seconds Input - PHP\nDESCRIPTION: This code snippet demonstrates how to disable the seconds input in a DateTimePicker component using the `seconds(false)` method. This is useful when the application doesn't require time precision down to the second.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/08-date-time-picker.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DateTimePicker;\n\nDateTimePicker::make('published_at')\n    ->seconds(false)\n```\n\n----------------------------------------\n\nTITLE: Customizing the Table Eloquent Query\nDESCRIPTION: This snippet demonstrates how to customize the Eloquent query for the FilamentPHP List page table using the `modifyQueryUsing()` method in the `table()` method of the resource.  This allows for applying specific modifications to the query, such as removing global scopes. Requires `Filament\\Tables\\Table` and `Illuminate\\Database\\Eloquent\\Builder`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/02-listing-records.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Table;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\npublic static function table(Table $table): Table\n{\n    return $table\n        ->modifyQueryUsing(fn (Builder $query) => $query->withoutGlobalScopes());\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Number with Locale (PHP)\nDESCRIPTION: This code demonstrates how to format a summary value as a number using a specific locale with the `numeric()` method. This example formats the average rating using the 'nl' (Dutch) locale.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Average;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('rating')\n    ->summarize(Average::make()->numeric(\n        locale: 'nl',\n    ))\n```\n\n----------------------------------------\n\nTITLE: Checking the current operation in Filament\nDESCRIPTION: This code snippet illustrates how to determine the current operation (create, edit, or view) within a Filament schema using the `$operation` parameter. The `$operation` parameter is a string containing the operation name.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_58\n\nLANGUAGE: PHP\nCODE:\n```\nfunction (string $operation) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Filament Livewire Edit Form for Eloquent Record (PHP Artisan)\nDESCRIPTION: This command generates a Livewire form for editing an existing record of an Eloquent model. The `--edit` flag ensures that the form is populated with the record's data upon loading, and that changes are saved back to the model upon submission. It facilitates editing existing data entries.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-form.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-livewire-form Products/EditProduct --edit\n```\n\n----------------------------------------\n\nTITLE: Disable Action Button - PHP\nDESCRIPTION: This snippet demonstrates how to disable a Filament action button. The `disabled()` method is used to disable the button, making it non-clickable. It is a static disabling of the action.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('delete')\n    ->disabled()\n```\n\n----------------------------------------\n\nTITLE: Displaying Circular Images - Filament PHP\nDESCRIPTION: This code snippet shows how to display an image as a circle, often used for avatars, using the `circular()` method. It typically accompanies `imageHeight()` to define the size of the circular image. The `circular()` method can also accept a boolean value (or a function resolving to a boolean) to dynamically control whether the image should be circular.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/04-image-entry.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('author.avatar')\n    ->imageHeight(40)\n    ->circular()\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('author.avatar')\n    ->imageHeight(40)\n    ->circular(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Modifying Export Query with Options in Filament Export Action\nDESCRIPTION: This code snippet demonstrates how to modify the query builder before exporting data, while injecting an array of options using the `modifyQueryUsing()` method.  This allows the export to be configured using the options defined in `getOptionsFormComponents()` or `options()`\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Exports\\ProductExporter;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nExportAction::make()\n    ->exporter(ProductExporter::class)\n    ->modifyQueryUsing(fn (Builder $query, array $options) => $query->where('is_active', $options['isActive'] ?? true))\n```\n\n----------------------------------------\n\nTITLE: Custom Billing Provider\nDESCRIPTION: This code snippet shows how to implement a custom billing provider for Filament by implementing the `Filament\\Billing\\Providers\\Contracts\\Provider` interface. It defines a route action and a middleware to handle billing logic and subscription checks. Dependencies: `App\\Http\\Middleware\\RedirectIfUserNotSubscribed`, `Filament\\Billing\\Providers\\Contracts\\BillingProvider`, `Illuminate\\Http\\RedirectResponse`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Middleware\\RedirectIfUserNotSubscribed;\nuse Filament\\Billing\\Providers\\Contracts\\BillingProvider;\nuse Illuminate\\Http\\RedirectResponse;\n\nclass ExampleBillingProvider implements BillingProvider\n{\n    public function getRouteAction(): string\n    {\n        return function (): RedirectResponse {\n            return redirect('https://billing.example.com');\n        };\n    }\n\n    public function getSubscribedMiddleware(): string\n    {\n        return RedirectIfUserNotSubscribed::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Cast for Toggle with Eloquent - PHP\nDESCRIPTION: This snippet demonstrates how to define a boolean cast for the 'is_admin' property within an Eloquent model. This ensures that the value saved by the toggle is correctly interpreted as a boolean when interacting with the database.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/05-toggle.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    protected $casts = [\n        'is_admin' => 'boolean',\n    ];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Transactions for a Filament Page (PHP)\nDESCRIPTION: This snippet demonstrates how to enable database transactions for a Filament page by setting the `$hasDatabaseTransactions` property to `true` on the page class. This enables transactions for create and edit resource pages.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/05-panel-configuration.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Resources\\Pages\\CreateRecord;\n\nclass CreatePost extends CreateRecord\n{\n    protected ?bool $hasDatabaseTransactions = true;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Page URL with Query Parameters - PHP\nDESCRIPTION: This snippet shows how to generate a URL for a Filament page with URL / query parameters using the `getUrl()` static method with an argument array. The example passes a 'section' parameter with the value 'notifications'. This is useful for directing users to specific sections of a page.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Pages\\Settings;\n\nSettings::getUrl(['section' => 'notifications']); // /admin/settings?section=notifications\n```\n\n----------------------------------------\n\nTITLE: Adding Header Actions to a Filament Page in PHP\nDESCRIPTION: This code shows how to add actions to the header of a Filament page by overriding the `getHeaderActions()` method. It creates two actions: one to edit a post and another to delete it, including a confirmation step for the delete action.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nprotected function getHeaderActions(): array\n{\n    return [\n        Action::make('edit')\n            ->url(route('posts.edit', ['post' => $this->post])),\n        Action::make('delete')\n            ->requiresConfirmation()\n            ->action(fn () => $this->post->delete()),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Copy to Clipboard in Filament Text Column (PHP)\nDESCRIPTION: This snippet demonstrates how to make the text in a Filament TextColumn copyable to the clipboard using the `copyable()` method. It also shows how to customize the confirmation message and its duration using `copyMessage()` and `copyMessageDuration()`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('email')\n    ->copyable()\n    ->copyMessage('Email address copied')\n    ->copyMessageDuration(1500)\n```\n\n----------------------------------------\n\nTITLE: Setting Navigation Icon - PHP\nDESCRIPTION: This code demonstrates setting a navigation icon for a resource using the `$navigationIcon` property. It uses a Heroicon by default but can accept any Blade component name.  Dependencies: `BackedEnum`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse BackedEnum;\n\nprotected static string | BackedEnum | null $navigationIcon = 'heroicon-o-user-group';\n```\n\n----------------------------------------\n\nTITLE: Customizing Block Picker Columns - Filament Builder (PHP)\nDESCRIPTION: This snippet shows how to customize the number of columns in the block picker dropdown using the `blockPickerColumns()` method.  This allows you to control the layout of the available block types when adding a new block. Example uses integer to define the number of columns for lg breakpoint and higher.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make()\n    ->blockPickerColumns(2)\n    ->blocks([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Customizing Key Field Label in Filament KeyValue\nDESCRIPTION: This snippet demonstrates how to customize the label of the key field using the `keyLabel()` method. This makes the form more readable and user-friendly.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/16-key-value.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n    ->keyLabel('Property name')\n```\n\n----------------------------------------\n\nTITLE: Filtering Multiple Relationships in Filament\nDESCRIPTION: This code snippet demonstrates how to configure a relationship constraint in Filament to handle relationships like `HasMany` or `BelongsToMany`. By using the `multiple()` method, it adds operators that allow filtering based on the number of related records (e.g., \"Has minimum,\" \"Has less than\").\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\RelationshipConstraint;\n\nRelationshipConstraint::make('categories')\n    ->multiple()\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle hooks\nDESCRIPTION: This code demonstrates how to use lifecycle hooks to execute code at various points within the CreateAction's lifecycle.  The available hooks include `beforeFormFilled`, `afterFormFilled`, `beforeFormValidated`, `afterFormValidated`, `before`, and `after`. Dependency is `Filament\\Actions\\CreateAction`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/04-create.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\CreateAction;\n\nCreateAction::make()\n    ->beforeFormFilled(function () {\n        // Runs before the form fields are populated with their default values.\n    })\n    ->afterFormFilled(function () {\n        // Runs after the form fields are populated with their default values.\n    })\n    ->beforeFormValidated(function () {\n        // Runs before the form fields are validated when the form is submitted.\n    })\n    ->afterFormValidated(function () {\n        // Runs after the form fields are validated when the form is submitted.\n    })\n    ->before(function () {\n        // Runs before the form fields are saved to the database.\n    })\n    ->after(function () {\n        // Runs after the form fields are saved to the database.\n    })\n```\n\n----------------------------------------\n\nTITLE: Adding ImportAction to a Filament Table Header\nDESCRIPTION: This code snippet demonstrates how to add an `ImportAction` to the header of a Filament table. The `ImportAction` is instantiated and associated with an importer class, `ProductImporter`. It uses Filament's Table component and its headerActions to make this action appear in the header section of the table.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Imports\\ProductImporter;\nuse Filament\\Actions\\ImportAction;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->headerActions([\n            ImportAction::make()\n                ->importer(ProductImporter::class)\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting Actions - PHP\nDESCRIPTION: This snippet demonstrates how to rate limit Filament actions. The `rateLimit()` method is used to specify the number of attempts per minute that a user IP address can make. If the user exceeds this limit, the action will not run, and a notification will be shown.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('delete')\n    ->rateLimit(5)\n```\n\n----------------------------------------\n\nTITLE: Generating Resource Page URL - PHP\nDESCRIPTION: This code snippet demonstrates generating a URL to a specific page within a Filament resource (e.g., 'create') using the `getUrl()` method, passing the page name as an argument.  It requires the full class path to the resource.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Resources\\Customers\\CustomerResource;\n\nCustomerResource::getUrl('create'); // /admin/customers/create\n```\n\n----------------------------------------\n\nTITLE: Customizable Items Per Page in Livewire with Filament\nDESCRIPTION: This PHP snippet demonstrates how to allow users to customize the number of items per page in a Livewire component. It defines a `$perPage` property that stores the user's selection and uses it in the `paginate` method. Dependencies: `App\\Models\\User`, `Illuminate\\Contracts\\View\\View`, `Livewire\\Component`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-pagination.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\User;\nuse Illuminate\\Contracts\\View\\View;\nuse Livewire\\Component;\n\nclass ListUsers extends Component\n{\n    public int | string $perPage = 10;\n    \n    // ...\n    \n    public function render(): View\n    {\n        return view('livewire.list-users', [\n            'users' => User::query()->paginate($this->perPage),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding extra footer action to a Filament Action\nDESCRIPTION: This code snippet demonstrates how to add an extra action to the footer of a Filament action's modal. It creates an 'edit' action and then adds a 'delete' action to its modal footer. The 'delete' action requires confirmation before execution. This shows how nested actions can be created.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('edit')\n    // ...\n    ->extraModalFooterActions([\n        Action::make('delete')\n            ->requiresConfirmation()\n            ->action(function () {\n                // ...\n            }),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Scoping Dataset with Query (PHP)\nDESCRIPTION: This snippet demonstrates how to apply a database query scope to a summarizer's dataset using the `query()` method.  Only rows where `is_published` is true will be included in the average calculation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Average;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Illuminate\\Database\\Query\\Builder;\n\nTextColumn::make('rating')\n    ->summarize(\n        Average::make()->query(fn (Builder $query) => $query->where('is_published', true)),\n    )\n```\n\n----------------------------------------\n\nTITLE: Overriding File Name in Filament Exporter Class\nDESCRIPTION: This code snippet demonstrates how to override the `getFileName()` method in a Filament exporter class to set the file name for all actions using that exporter. This is an alternative to setting the file name on each individual `ExportAction`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Exports\\Models\\Export;\n\npublic function getFileName(Export $export): string\n{\n    return \"products-{$export->getKey()}.csv\";\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Determine Resolve Columns - Filament PHP\nDESCRIPTION: This snippet demonstrates dynamically determining the columns to use for resolving a relationship based on the input data. It uses a function passed to `resolveUsing` and checks if the input is a valid email to determine which column to use ('email' or 'username'). However, the return value is the *column name* and not the actual resolved entity which might lead to unexpected behaviour.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Author;\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('author')\n    ->relationship(resolveUsing: function (string $state): ?Author {\n        if (filter_var($state, FILTER_VALIDATE_EMAIL)) {\n            return 'email';\n        }\n    \n        return 'username';\n    })\n```\n\n----------------------------------------\n\nTITLE: Defining Infolist for View Page - PHP\nDESCRIPTION: This code defines an infolist within a Filament resource, which is used instead of a disabled form to display record data. It leverages `Filament\\Infolists` components to create a structured and readable view of the data, including text entries and layout components.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/05-viewing-records.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists;\nuse Filament\\Schemas\\Schema;\n\npublic static function infolist(Schema $schema): Schema\n{\n    return $schema\n        ->components([\n            Infolists\\Components\\TextEntry::make('name'),\n            Infolists\\Components\\TextEntry::make('email'),\n            Infolists\\Components\\TextEntry::make('notes')\n                ->columnSpanFull(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Enum Labels with Form Fields in PHP\nDESCRIPTION: This code snippet illustrates how to use the `HasLabel` interface to generate options for Filament form fields like `Select`, `CheckboxList`, and `Radio`, as well as Table Builder components like `SelectColumn` and `SelectFilter`. The `options()` method automatically leverages the `HasLabel` interface to display human-readable enum values. It depends on the Filament forms and tables components.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/03-enums.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\nuse Filament\\Forms\\Components\\Radio;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Tables\\Columns\\SelectColumn;\nuse Filament\\Tables\\Filters\\SelectFilter;\n\nSelect::make('status')\n    ->options(Status::class)\n\nCheckboxList::make('status')\n    ->options(Status::class)\n\nRadio::make('status')\n    ->options(Status::class)\n\nSelectColumn::make('status')\n    ->options(Status::class)\n\nSelectFilter::make('status')\n    ->options(Status::class)\n```\n\n----------------------------------------\n\nTITLE: Inserting Livewire Component into Filament Schema (PHP)\nDESCRIPTION: This snippet shows how to insert a Livewire component into a Filament schema using the `Livewire::make()` method.  It enables embedding Livewire components within Filament forms and pages. Limited data accessibility is a constraint.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/07-custom-components.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Livewire\\Chart;\nuse Filament\\Schemas\\Components\\Livewire;\n\nLivewire::make(Chart::class)\n```\n\n----------------------------------------\n\nTITLE: Localizing a Field's Label in Filament\nDESCRIPTION: This example demonstrates how to use a translation string to set the label of a text input field. This is useful for localizing the application. The `label()` method accepts a translation string key that Laravel will resolve.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->label(__('fields.name'))\n```\n\n----------------------------------------\n\nTITLE: Customizing Import Job for Specific Import - PHP\nDESCRIPTION: This snippet shows how to customize the import job for a specific import by using the `job()` method on the `ImportAction`. Dependencies: App\\Filament\\Imports\\ProductImporter, App\\Jobs\\ImportCsv, Filament\\Actions\\ImportAction.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Imports\\ProductImporter;\nuse App\\Jobs\\ImportCsv;\nuse Filament\\Actions\\ImportAction;\n\nImportAction::make()\n    ->importer(ProductImporter::class)\n    ->job(ImportCsv::class)\n```\n\n----------------------------------------\n\nTITLE: Register Keybindings - PHP\nDESCRIPTION: This snippet demonstrates how to attach keyboard shortcuts to a Filament action button. The `keyBindings()` method is used with an array of key codes to specify the keyboard shortcuts that will trigger the button's action. It uses the same key codes as Mousetrap.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('save')\n    ->action(fn () => $this->save())\n    ->keyBindings(['command+s', 'ctrl+s'])\n```\n\n----------------------------------------\n\nTITLE: Customizing Validation Attribute - Filament Import (PHP)\nDESCRIPTION: This code snippet demonstrates how to customize the validation attribute label using `validationAttribute()` on the `ImportColumn` class. It renames the 'name' column to 'full name' in validation messages.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_60\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('name')\n    ->validationAttribute('full name')\n```\n\n----------------------------------------\n\nTITLE: Injecting the Current Eloquent Record - PHP\nDESCRIPTION: This code snippet illustrates how to inject the current Eloquent record into a schema using the `$record` parameter. It allows access to the Eloquent model for the current schema, enabling components to retrieve and display data from the record.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/01-overview.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nfunction (?Model $record) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Action Group in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to create a basic action group in Filament using the `ActionGroup` object. It includes three actions: 'view', 'edit', and 'delete'. This groups these actions into a dropdown menu.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/03-grouping-actions.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Actions\\ActionGroup;\n\nActionGroup::make([\n    Action::make('view'),\n    Action::make('edit'),\n    Action::make('delete'),\n])\n```\n\n----------------------------------------\n\nTITLE: Customizing the Column Used by a Select Filter in Filament (PHP)\nDESCRIPTION: This snippet shows how to customize the column used by a `SelectFilter` using the `attribute()` method. Instead of filtering based on the 'status' column, it filters based on 'status_id'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/02-select.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\SelectFilter;\n\nSelectFilter::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n    ->attribute('status_id')\n```\n\n----------------------------------------\n\nTITLE: Input Masking in Filament Text Input\nDESCRIPTION: This snippet demonstrates how to apply input masking to a Filament text input field using the `mask()` method with Alpine.js. It requires Filament Forms and Filament Support.  The first example shows a static mask and the second uses RawJs for a dynamic mask.  The stripCharacters() function is shown which might be required.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/02-text-input.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('birthday')\n    ->mask('99/99/9999')\n    ->placeholder('MM/DD/YYYY')\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Support\\RawJs;\n\nTextInput::make('cardNumber')\n    ->mask(RawJs::make(<<<'JS'\n        $input.startsWith('34') || $input.startsWith('37') ? '9999 999999 99999' : '9999 9999 9999 9999'\n    JS))\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Support\\RawJs;\n\nTextInput::make('amount')\n    ->mask(RawJs::make('$money($input)'))\n    ->stripCharacters(',')\n    ->numeric()\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Constraint in Filament QueryBuilder (PHP)\nDESCRIPTION: This code shows how to create a TextConstraint for the QueryBuilder in Filament. It demonstrates filtering a column directly and via a relationship, using `relationship()` to target a column on a related table.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\TextConstraint;\n\nTextConstraint::make('name') // Filter the `name` column\n\nTextConstraint::make('creatorName')\n    ->relationship(name: 'creator', titleAttribute: 'name') // Filter the `name` column on the `creator` relationship\n```\n\n----------------------------------------\n\nTITLE: Initializing a Filament Wizard with Steps (PHP)\nDESCRIPTION: This code snippet demonstrates how to create a basic Filament Wizard component with multiple steps, each containing its own schema.  The steps are named 'Order', 'Delivery', and 'Billing'. Each step's schema would contain the form fields for that step.  This example requires the Filament library to be installed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/05-wizards.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Wizard;\nuse Filament\\Schemas\\Components\\Wizard\\Step;\n\nWizard::make([\n    Step::make('Order')\n        ->schema([\n            // ...\n        ]),\n    Step::make('Delivery')\n        ->schema([\n            // ...\n        ]),\n    Step::make('Billing')\n        ->schema([\n            // ...\n        ]),\n])\n```\n\n----------------------------------------\n\nTITLE: Excluding Attributes (Filament Replicate Action, PHP)\nDESCRIPTION: This snippet shows how to exclude specific attributes (columns) from being replicated when using ReplicateAction. It uses the `excludeAttributes()` method to specify the columns to exclude, such as 'slug'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/08-replicate.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\ReplicateAction;\n\nReplicateAction::make()\n    ->excludeAttributes(['slug'])\n```\n\n----------------------------------------\n\nTITLE: Testing Action URL in Filament\nDESCRIPTION: This snippet tests the URL of a Filament action using `assertActionHasUrl()`, `assertActionDoesNotHaveUrl()`, `assertActionShouldOpenUrlInNewTab()`, and `assertActionShouldNotOpenUrlInNewTab()` methods.  It asserts the 'filament' action has a specific URL and opens in a new tab, while the 'github' action does not open in a new tab.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/05-testing-actions.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('links to the correct Filament sites', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertActionHasUrl('filament', 'https://filamentphp.com/')\n        ->assertActionDoesNotHaveUrl('filament', 'https://github.com/filamentphp/filament')\n        ->assertActionShouldOpenUrlInNewTab('filament')\n        ->assertActionShouldNotOpenUrlInNewTab('github');\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Navigation Items (Advanced) - PHP\nDESCRIPTION: This code snippet demonstrates advanced navigation customization using the `navigation()` method. It allows you to completely override Filament's automatically generated navigation items by building a custom navigation using the `NavigationBuilder` and manually defining the items using `NavigationItem`.  It also uses closures to dynamically set properties like `isActiveWhen` and `url`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Pages\\Settings;\nuse App\\Filament\\Resources\\Users\\UserResource;\nuse Filament\\Navigation\\NavigationBuilder;\nuse Filament\\Navigation\\NavigationItem;\nuse Filament\\Pages\\Dashboard;\nuse Filament\\Panel;\nuse function Filament\\Support\\original_request;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->navigation(function (NavigationBuilder $builder): NavigationBuilder {\n            return $builder->items([\n                NavigationItem::make('Dashboard')\n                    ->icon('heroicon-o-home')\n                    ->isActiveWhen(fn (): bool => original_request()->routeIs('filament.admin.pages.dashboard'))\n                    ->url(fn (): string => Dashboard::getUrl()),\n                ...UserResource::getNavigationItems(),\n                ...Settings::getNavigationItems(),\n            ]);\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Another Field's State\nDESCRIPTION: This code snippet demonstrates how to set the value of another field from within the `afterStateUpdated()` method using the `$set` parameter. It updates the 'title' field to 'Blog Post' when the current field's state is updated.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_70\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Utilities\\Set;\n\nfunction (Set $set) {\n    $set('title', 'Blog Post'); // Set the `title` field to `Blog Post`.\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing and Running Filament Actions Migrations\nDESCRIPTION: These commands publish the migrations for Filament actions, which are necessary to store information about exports. The `migrate` command then runs these migrations to create the required database tables.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# All apps\nphp artisan vendor:publish --tag=filament-actions-migrations\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Navigation Items - PHP\nDESCRIPTION: This code snippet demonstrates how to register custom navigation items using the `NavigationItem` class in Filament. It shows how to define the URL, icon, group, and sort order for each navigation item. It also shows how to use a closure to dynamically set the label and `isActiveWhen` condition based on the current request.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Navigation\\NavigationItem;\nuse Filament\\Pages\\Dashboard;\nuse Filament\\Panel;\nuse function Filament\\Support\\original_request;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->navigationItems([\n            NavigationItem::make('Analytics')\n                ->url('https://filament.pirsch.io', shouldOpenInNewTab: true)\n                ->icon('heroicon-o-presentation-chart-line')\n                ->group('Reports')\n                ->sort(3),\n            NavigationItem::make('dashboard')\n                ->label(fn (): string => __('filament-panels::pages/dashboard.title'))\n                ->url(fn (): string => Dashboard::getUrl())\n                ->isActiveWhen(fn () => original_request()->routeIs('filament.admin.pages.dashboard')),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Text Input Field with Dot Notation\nDESCRIPTION: This code shows how to bind a text input field to a key within an array using dot notation. This is useful when working with nested data structures. The `TextInput::make()` method accepts a string representing the path to the array key.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('socials.github_url')\n```\n\n----------------------------------------\n\nTITLE: Multiple Active Indicators - Filament PHP\nDESCRIPTION: This example demonstrates rendering multiple active indicators in a Filament filter.  The `indicateUsing()` method returns an array of `Indicator` objects. Each `Indicator` is associated with a different field, and the `removeField()` method is used to ensure that the correct field is reset when the filter is removed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/05-custom.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Carbon\\Carbon;\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Tables\\Filters\\Filter;\nuse Filament\\Tables\\Filters\\Indicator;\n\nFilter::make('created_at')\n    ->schema([\n        DatePicker::make('from'),\n        DatePicker::make('until'),\n    ])\n    // ...\n    ->indicateUsing(function (array $data): array {\n        $indicators = [];\n\n        if ($data['from'] ?? null) {\n            $indicators[] = Indicator::make('Created from ' . Carbon::parse($data['from'])->toFormattedDateString())\n                ->removeField('from');\n        }\n\n        if ($data['until'] ?? null) {\n            $indicators[] = Indicator::make('Created until ' . Carbon::parse($data['until'])->toFormattedDateString())\n                ->removeField('until');\n        }\n\n        return $indicators;\n    })\n```\n\n----------------------------------------\n\nTITLE: Defining Import Options using Form Components - PHP\nDESCRIPTION: This snippet demonstrates how to define import options using Filament form components. The `getOptionsFormComponents()` method returns an array of form components, such as a checkbox, that allows users to customize the import behavior (e.g., update existing records). The Checkbox component is used to control if existing records should be updated. Dependencies: Filament\\Forms\\Components\\Checkbox.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Checkbox;\n\npublic static function getOptionsFormComponents(): array\n{\n    return [\n        Checkbox::make('updateExisting')\n            ->label('Update existing records'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Badges to Filter Tabs\nDESCRIPTION: This snippet demonstrates how to add badges to filter tabs in FilamentPHP using the `badge()` method of the `Tab` object. The badge displays a string value, which can be dynamically generated, such as counting active customers. Also demonstrates setting the badge color using `badgeColor()`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/02-listing-records.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Tabs\\Tab;\n\nTab::make()\n    ->badge(Customer::query()->where('active', true)->count())\n```\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Tabs\\Tab;\n\nTab::make()\n    ->badge(Customer::query()->where('active', true)->count())\n    ->badgeColor('success')\n```\n\n----------------------------------------\n\nTITLE: Making a Column Sortable in Filament\nDESCRIPTION: This snippet demonstrates how to make a column sortable in a Filament table using the `sortable()` method. This will add a sort button to the column header, allowing users to sort the table by that column. The code shows a TextColumn 'title' being made sortable.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('title')\n    ->sortable()\n```\n\n----------------------------------------\n\nTITLE: Customizing Filament Modal Content\nDESCRIPTION: This snippet shows how to customize the heading, description, and submit button label of a confirmation modal in Filament. It uses the `modalHeading()`, `modalDescription()`, and `modalSubmitActionLabel()` methods to set the respective text.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Actions\\Action;\n\nAction::make('delete')\n    ->action(fn (Post $record) => $record->delete())\n    ->requiresConfirmation()\n    ->modalHeading('Delete post')\n    ->modalDescription('Are you sure you\\'d like to delete this post? This cannot be undone.')\n    ->modalSubmitActionLabel('Yes, delete it')\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to a Filament Panel (PHP)\nDESCRIPTION: This snippet shows how to apply middleware to all routes within a Filament panel using the `middleware()` method.  Middleware is run on the initial page load, but not on subsequent Livewire AJAX requests unless `isPersistent: true` is passed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/05-panel-configuration.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->middleware([\n            // ...\n        ]);\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->middleware([\n            // ...\n        ], isPersistent: true);\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Filament Actions in PHP\nDESCRIPTION: This PHP code shows how to chain multiple Filament actions together using the `replaceMountedAction()` method. When the first action is submitted, the second action will open in its place. Arguments persist between requests.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-action.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Actions\\Action;\n\npublic function editAction(): Action\n{\n    return Action::make('edit')\n        ->form([\n            // ...\n        ])\n        // ...\n        ->action(function (array $arguments) {\n            $post = Post::find($arguments['post']);\n\n            // ...\n\n            $this->replaceMountedAction('publish', $arguments);\n        });\n}\n\npublic function publishAction(): Action\n{\n    return Action::make('publish')\n        ->requiresConfirmation()\n        // ...\n        ->action(function (array $arguments) {\n            $post = Post::find($arguments['post']);\n\n            $post->publish();\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding User Menu Items in Filament (PHP)\nDESCRIPTION: This code snippet demonstrates how to conditionally hide a user menu item in Filament based on user permissions. It uses the `visible()` and `hidden()` methods with a closure that checks the user's ability to 'viewAny' Payment models. Dependencies: `App\\Models\\Payment`, Filament Action.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/03-user-menu.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Payment;\nuse Filament\\Actions\\Action\n\nAction::make('payments')\n    ->visible(fn (): bool => auth()->user()->can('viewAny', Payment::class))\n    // or\n    ->hidden(fn (): bool => ! auth()->user()->can('viewAny', Payment::class))\n```\n\n----------------------------------------\n\nTITLE: Injecting Action Arguments into Filament Action (PHP)\nDESCRIPTION: This snippet demonstrates how to inject arguments passed to a Filament action using the `$arguments` parameter. The `$arguments` parameter will be an array of any arguments passed to the action when it was triggered.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nfunction (array $arguments) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML in Filament Infolist\nDESCRIPTION: Renders an HTML string using the `html()` method in a Filament Infolist TextEntry. Sanitizes the HTML to remove unsafe content. Optionally, a boolean value can control if the text should be rendered as HTML or not. Accepts both static values and functions for dynamic calculation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('description')\n    ->html()\n```\n\n----------------------------------------\n\nTITLE: Formatting Money with Division\nDESCRIPTION: Formats a column as currency after dividing the value by a specified amount using the `divideBy` argument.  Useful when the database stores monetary values in a smaller unit (e.g., cents).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('price')\n    ->money('EUR', divideBy: 100)\n```\n\n----------------------------------------\n\nTITLE: Customizing Validation Messages - Filament Import (PHP)\nDESCRIPTION: This code demonstrates how to customize validation messages for import data by overriding the `getValidationMessages()` method.  It returns an array of custom validation messages.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_59\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getValidationMessages(): array\n{\n    return [\n        'name.required' => 'The name column must not be empty.',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating builder data directly in PHP\nDESCRIPTION: This snippet shows how to get and set the raw data for the entire builder using `$component->getState()` and `$component->state($state)`. An item is added to the builder with a random UUID as the key. Requires `Illuminate\\Support\\Str`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n// Get the raw data for the entire builder\n$state = $component->getState();\n\n// Add an item, with a random UUID as the key\n$state[Str::uuid()] = [\n    'type' => 'contactDetails',\n    'data' => [\n        'email' => auth()->user()->email,\n    ],\n];\n\n// Set the new data for the builder\n$component->state($state);\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Label for Filament Action (PHP)\nDESCRIPTION: This code snippet demonstrates how to set a custom label for an action's trigger button using the `label()` method. This allows you to override the default label generated from the action's name and provide a more descriptive or user-friendly label.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('edit')\n    ->label('Edit post')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n```\n\n----------------------------------------\n\nTITLE: Dynamic Section Heading based on User Role - PHP\nDESCRIPTION: This code snippet demonstrates how to dynamically set the heading of a Filament Section component based on the user's role using a closure. It checks if the authenticated user is an admin and sets the heading to 'Admin Dashboard' or 'User Dashboard' accordingly. This allows for customized section titles based on user permissions or other dynamic criteria.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/01-overview.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nSection::make()\n    ->heading(fn (): string => auth()->user()->isAdmin() ? 'Admin Dashboard' : 'User Dashboard')\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Initializing MarkdownEditor - PHP\nDESCRIPTION: This code snippet demonstrates the basic initialization of the Filament MarkdownEditor component. It creates a MarkdownEditor instance for the 'content' field within a Filament form.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/11-markdown-editor.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\MarkdownEditor;\n\nMarkdownEditor::make('content')\n```\n\n----------------------------------------\n\nTITLE: Initializing RestoreAction in Filament (PHP)\nDESCRIPTION: This snippet demonstrates the basic implementation of a `RestoreAction` in Filament to restore a soft-deleted Eloquent record. When the button is clicked, a modal will prompt the user for confirmation before restoring the record. No specific dependencies beyond Filament are required.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/10-restore.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\RestoreAction;\n\nRestoreAction::make()\n```\n\n----------------------------------------\n\nTITLE: Limiting Maximum Export Rows in Filament\nDESCRIPTION: This code snippet demonstrates how to limit the maximum number of rows that can be exported in Filament by using the `maxRows()` method on the `ExportAction`. This is useful to prevent server overload when exporting large datasets. The value passed to `maxRows()` determines the maximum number of rows allowed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Exports\\ProductExporter;\nuse Filament\\Actions\\ExportAction;\n\nExportAction::make()\n    ->exporter(ProductExporter::class)\n    ->maxRows(100000)\n```\n\n----------------------------------------\n\nTITLE: Customizing Action Group Trigger Style (PHP)\nDESCRIPTION: This snippet shows how to customize the button that triggers the action group dropdown. It sets the label, icon, size, color, and style (button) of the trigger.  It utilizes methods like `label()`, `icon()`, `size()`, `color()`, and `button()` to modify the appearance.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/03-grouping-actions.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\ActionGroup;\nuse Filament\\Support\\Enums\\Size;\n\nActionGroup::make([\n    // Array of actions\n])\n    ->label('More actions')\n    ->icon('heroicon-m-ellipsis-vertical')\n    ->size(Size::Small)\n    ->color('primary')\n    ->button()\n```\n\n----------------------------------------\n\nTITLE: Using Conversions in Infolist Image Entry\nDESCRIPTION: This snippet shows how to specify a conversion when displaying images in a Filament Infolist.  It will attempt to display a 'thumb' conversion, falling back to the original.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\SpatieMediaLibraryImageEntry;\n\nSpatieMediaLibraryImageEntry::make('avatar')\n    ->conversion('thumb')\n```\n\n----------------------------------------\n\nTITLE: Implementing HasName Contract\nDESCRIPTION: This code snippet demonstrates how to implement the `HasName` contract to customize how Filament retrieves the user's name.  By implementing `getFilamentName()`, you can define a custom logic to generate the user's display name (e.g., combining first and last names).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/01-overview.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Filament\\Models\\Contracts\\FilamentUser;\nuse Filament\\Models\\Contracts\\HasName;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\nclass User extends Authenticatable implements FilamentUser, HasName\n{\n    // ...\n\n    public function getFilamentName(): string\n    {\n        return \"{$this->first_name} {$this->last_name}\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Import Action to Filament List Page (PHP)\nDESCRIPTION: This code adds an import action to the header of a Filament list page, allowing users to upload a CSV file for importing data.  The `ProductImporter` class handles the import logic. Requires the `ProductImporter` to be defined separately.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Imports\\ProductImporter;\nuse Filament\\Actions;\n\nprotected function getHeaderActions(): array\n{\n    return [\n        Actions\\ImportAction::make()\n            ->importer(ProductImporter::class),\n        Actions\\CreateAction::make(),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Tenant-Aware Middleware in Filament\nDESCRIPTION: This snippet demonstrates how to apply extra middleware to all tenant-aware routes in Filament using the `tenantMiddleware()` method in the panel configuration file.  The first example shows how to pass an array of middleware classes. The second shows how to make the middleware persistent by passing `true` as the second argument, ensuring it runs on every request, including Livewire AJAX requests.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantMiddleware([\n            // ...\n        ]);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantMiddleware([\n            // ...\n        ], isPersistent: true);\n}\n```\n\n----------------------------------------\n\nTITLE: Eloquent Cast for KeyValue Field\nDESCRIPTION: This snippet shows how to define an `array` cast for the 'meta' property in an Eloquent model. This is necessary to ensure that the KeyValue field data is correctly stored and retrieved as a PHP array.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/16-key-value.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Post extends Model\n{\n    protected $casts = [\n        'meta' => 'array',\n    ];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Multiple Dependencies into Filament Action (PHP)\nDESCRIPTION: This snippet illustrates how to inject multiple dependencies into a Filament action callback using a combination of utility parameters and Laravel container dependencies. The order of parameters doesn't matter as long as the parameter names match the expected injections.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\n\nfunction (array $arguments, Component $livewire) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing table data from a List page\nDESCRIPTION: This snippet demonstrates how to access table data in a widget used on a List page. The `ExposesTableToWidgets` trait is added to the page, `InteractsWithPageTable` trait is added to the widget, and the page class is returned from `getTablePage()`.  This allows accessing the table's query builder.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/10-widgets.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Pages\\Concerns\\ExposesTableToWidgets;\nuse Filament\\Resources\\Pages\\ListRecords;\n\nclass ListProducts extends ListRecords\n{\n    use ExposesTableToWidgets;\n\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Resources\\Products\\Pages\\ListProducts;\nuse Filament\\Widgets\\Concerns\\InteractsWithPageTable;\nuse Filament\\Widgets\\Widget;\n\nclass ProductStats extends Widget\n{\n    use InteractsWithPageTable;\n\n    protected function getTablePage(): string\n    {\n        return ListProducts::class;\n    }\n\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Widgets\\StatsOverviewWidget\\Stat;\n\nStat::make('Total Products', $this->getPageTableQuery()->count()),\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Widgets\\StatsOverviewWidget\\Stat;\n\nStat::make('Total Products', $this->getPageTableRecords()->count()),\n```\n\n----------------------------------------\n\nTITLE: Filling a Form with Data - PHP\nDESCRIPTION: This snippet demonstrates how to fill a Filament form with data in a test using the `fillForm()` method. It requires the `Pest\\Livewire\\livewire` function.  The snippet shows how to set the 'title' field with a fake sentence. You can specify the form name as the second argument to `fillForm` when there are multiple schemas.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nlivewire(CreatePost::class)\n    ->fillForm([\n        'title' => fake()->sentence(),\n        // ...\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Defining Table Actions\nDESCRIPTION: This snippet demonstrates how to define actions for a Filament table within the `table()` method of a Filament resource or page. Actions are added to the `$table` object using the `actions()` method. These actions will appear as buttons at the end of each table row by default.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/04-actions.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->actions([\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Profile Page\nDESCRIPTION: This code demonstrates how to customize the profile page by extending the base `EditProfile` class from Filament. It overrides the `form()` method to add a `username` field to the profile edit form, showcasing how to extend and customize default authentication pages.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/01-overview.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Filament\\Pages\\Auth;\n\nuse Filament\\Auth\\Pages\\EditProfile as BaseEditProfile;\nuse Filament\\Forms\\Components\\TextInput\n;use Filament\\Schemas\\Schema;\n\nclass EditProfile extends BaseEditProfile\n{\n    public function form(Schema $schema): Schema\n    {\n        return $schema\n            ->components([\n                TextInput::make('username')\n                    ->required()\n                    ->maxLength(255),\n                $this->getNameFormComponent(),\n                $this->getEmailFormComponent(),\n                $this->getPasswordFormComponent(),\n                $this->getPasswordConfirmationFormComponent(),\n            ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the current record in the widget\nDESCRIPTION: This code snippet shows how to access the current record within a widget that is used on an Edit or View page. It defines a public property `$record` of type `Model` on the widget class. Filament automatically populates this property with the current record.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/10-widgets.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\npublic ?Model $record = null;\n```\n\n----------------------------------------\n\nTITLE: Formatting a field's state in Filament\nDESCRIPTION: This code snippet demonstrates how to format a field's state during hydration using the `formatStateUsing()` method. The example capitalizes the state of the 'name' field. Requires Closure and Filament\\Forms\\Components\\TextInput.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_68\n\nLANGUAGE: PHP\nCODE:\n```\nuse Closure;\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->formatStateUsing(fn (string $state): string => ucwords($state))\n```\n\n----------------------------------------\n\nTITLE: Autofocus Field - PHP\nDESCRIPTION: Demonstrates how to set the autofocus attribute on a Filament form field using the `autofocus()` method.  This allows the user to start typing in the field immediately when the form loads.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->autofocus()\n```\n\n----------------------------------------\n\nTITLE: Using Conversions in Image Column\nDESCRIPTION: This snippet demonstrates how to specify a conversion to use when displaying images in a Filament table column. The 'thumb' conversion will be used if it exists.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\SpatieMediaLibraryImageColumn;\n\nSpatieMediaLibraryImageColumn::make('avatar')\n    ->conversion('thumb')\n```\n\n----------------------------------------\n\nTITLE: Registering Export Policy in Filament\nDESCRIPTION: This code snippet demonstrates how to register an `ExportPolicy` class in the `AuthServiceProvider` to customize the authorization logic for Filament exports. This allows you to define who can access the exported files.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Policies\\ExportPolicy;\nuse Filament\\Actions\\Exports\\Models\\Export;\n\nprotected $policies = [\n    Export::class => ExportPolicy::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing the raw field state in Filament\nDESCRIPTION: This code snippet shows how to access the raw, uncasted value of a field within a Filament form using the `$rawState` parameter. It's useful when a field automatically casts its state to a different format.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_55\n\nLANGUAGE: PHP\nCODE:\n```\nfunction ($rawState) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Filament Schema Component (PHP)\nDESCRIPTION: This snippet shows the structure of a custom Filament schema component class. It defines the view to be used for rendering and a static `make()` method for creating an instance of the component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/07-custom-components.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Component;\n\nclass Chart extends Component\n{\n    protected string $view = 'filament.schemas.components.chart';\n\n    public static function make(): static\n    {\n        return app(static::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customize Entire Delete Notification (PHP)\nDESCRIPTION: This code snippet demonstrates how to customize the entire success notification, including the title and body. It uses the `successNotification()` method to set a custom notification object.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/07-delete.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\DeleteAction;\nuse Filament\\Notifications\\Notification;\n\nDeleteAction::make()\n    ->successNotification(\n       Notification::make()\n            ->success()\n            ->title('User deleted')\n            ->body('The user has been deleted successfully.'),\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Filament Action Class (PHP)\nDESCRIPTION: This snippet shows how to create a dedicated class, `EmailCustomerAction`, for a Filament action. This allows for encapsulation and reusability of action logic. It defines the action's label, icon, schema (form fields), and the action's execution logic.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/12-code-quality-tips.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Filament\\Resources\\Customers\\Actions;\n\nuse App\\Models\\Customer;\nuse Filament\\Actions\\Action;\nuse Filament\\Forms\\Components\\Textarea;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Support\\Icons\\Heroicon;\n\nclass EmailCustomerAction\n{\n    public static function make(): Action\n    {\n        return Action::make('email')\n            ->label('Send email')\n            ->icon(Heroicon::Envelope)\n            ->schema([\n                TextInput::make('subject')\n                    ->required()\n                    ->maxLength(255),\n                Textarea::make('body')\n                    ->autosize()\n                    ->required(),\n            ])\n            ->action(function (Customer $customer, array $data) {\n                // ...\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ExportAction as a Bulk Action\nDESCRIPTION: This example demonstrates how to add an `ExportBulkAction` to a Filament table, allowing users to select specific rows for export. The `ProductExporter` class handles the data export logic.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Exports\\ProductExporter;\nuse Filament\\Actions\\ExportBulkAction;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->bulkActions([\n            ExportBulkAction::make()\n                ->exporter(ProductExporter::class),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Form in a Filament Modal\nDESCRIPTION: This snippet demonstrates how to render a form in a Filament modal using form fields. The data from the form is available in the `$data` array within the `action()` closure. The example uses a `Select` component to allow the user to update the author of a post.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\Post;\nuse App\\Models\\User;\nuse Filament\\Actions\\Action;\nuse Filament\\Forms\\Components\\Select;\n\nAction::make('updateAuthor')\n    ->schema([\n        Select::make('authorId')\n            ->label('Author')\n            ->options(User::query()->pluck('name', 'id'))\n            ->required(),\n    ])\n    ->action(function (array $data, Post $record): void {\n        $record->author()->associate($data['authorId']);\n        $record->save();\n    })\n```\n\n----------------------------------------\n\nTITLE: Setting Summarizer Label (PHP)\nDESCRIPTION: This code snippet shows how to set a custom label for a summarizer using the `label()` method. The example sets the label of the `Sum` summarizer for the 'price' column to 'Total'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Sum;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('price')\n    ->summarize(Sum::make()->label('Total'))\n```\n\n----------------------------------------\n\nTITLE: Defining Builder Blocks\nDESCRIPTION: This snippet illustrates the basic structure of defining blocks within a Filament Builder component. It emphasizes the use of `Builder::make()` to create the builder and `Block::make()` to define individual blocks. Each block has a unique name and a schema that defines the fields within the block. This showcases how to begin structuring a builder with different block types.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\nuse Filament\\Forms\\Components\\Builder\\Block;\nuse Filament\\Forms\\Components\\TextInput;\n\nBuilder::make('content')\n    ->blocks([\n        Block::make('heading')\n            ->schema([\n                TextInput::make('content')->required(),\n                // ...\n            ]),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Action Modal in Filament\nDESCRIPTION: This code snippet demonstrates how to use the `HasFiltersAction` trait and the `FilterAction` class to implement a filter action modal in a Filament dashboard. It defines a `Dashboard` class that extends `BaseDashboard` and overrides the `getHeaderActions()` method to register the `FilterAction`. The form within the action modal allows users to select start and end dates for filtering data.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/01-overview.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Pages\\Dashboard as BaseDashboard;\nuse Filament\\Pages\\Dashboard\\Actions\\FilterAction;\nuse Filament\\Pages\\Dashboard\\Concerns\\HasFiltersAction;\n\nclass Dashboard extends BaseDashboard\n{\n    use HasFiltersAction;\n    \n    protected function getHeaderActions(): array\n    {\n        return [\n            FilterAction::make()\n                ->form([\n                    DatePicker::make('startDate'),\n                    DatePicker::make('endDate'),\n                    // ...\n                ]),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tenancy for All Resources in Filament\nDESCRIPTION: This snippet shows how to disable tenancy for all resources by default and then selectively enable it. It calls `Resource::scopeToTenant(false)` inside a service provider's `boot()` method or a middleware.  After this, you can enable tenancy on a per-resource basis by setting `$isScopedToTenant` to `true`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\Resource;\n\nResource::scopeToTenant(false);\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected static bool $isScopedToTenant = true;\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Job with Action in Filament\nDESCRIPTION: This code snippet shows how to customize the export job for a specific export by passing the new job class to the `job()` method on the `ExportAction`. This overrides the default export job for that particular action.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Exports\\ProductExporter;\nuse App\\Jobs\\PrepareCsvExport;\nuse Filament\\Actions\\ExportAction;\n\nExportAction::make()\n    ->exporter(ProductExporter::class)\n    ->job(PrepareCsvExport::class)\n```\n\n----------------------------------------\n\nTITLE: Executing code on modal open - Filament Actions (PHP)\nDESCRIPTION: This snippet demonstrates how to execute code when a Filament Action modal opens, using the `mountUsing()` method.  It allows for initializing the form and performing custom logic. Requires Filament Actions and Filament Schemas packages.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Schemas\\Schema;\n\nAction::make('create')\n    ->mountUsing(function (Schema $form) {\n        $form->fill();\n\n        // ...\n    })\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Select Filters in Filament Tables (PHP)\nDESCRIPTION: This snippet demonstrates how to enable multi-select functionality for a `SelectFilter` using the `multiple()` method. This allows users to select multiple options to filter the table.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/02-select.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\SelectFilter;\n\nSelectFilter::make('status')\n    ->multiple()\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Customizing the save notification title in Filament (PHP)\nDESCRIPTION: This example demonstrates how to customize the title of the success notification using the `successNotificationTitle()` method. This is useful for providing more context to the user about the action that was performed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/05-edit.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\EditAction;\n\nEditAction::make()\n    ->successNotificationTitle('User updated')\n```\n\n----------------------------------------\n\nTITLE: Autocompleting Dates with Datalist - PHP\nDESCRIPTION: This snippet demonstrates how to add autocomplete options to a TimePicker using the `datalist()` method.  The datalist provides suggestions to the user but doesn't restrict them to only those values.  This feature is not available when using the JavaScript date picker.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/08-date-time-picker.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TimePicker;\n\nTimePicker::make('appointment_at')\n    ->datalist([\n        '09:00',\n        '09:30',\n        '10:00',\n        '10:30',\n        '11:00',\n        '11:30',\n        '12:00',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Using the CustomerForm Schema in a Filament Resource (PHP)\nDESCRIPTION: This snippet shows how to use the `CustomerForm` schema defined in the previous example within the `form()` method of a Filament resource. It calls the `configure()` method of the `CustomerForm` class, passing the `$schema` object as an argument.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/12-code-quality-tips.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Resources\\Customers\\Schemas\\CustomerForm;\nuse Filament\\Schemas\\Schema;\n\npublic static function form(Schema $schema): Schema\n{\n    return CustomerForm::configure($schema);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HasGoogleTwoFactorAuthentication Interface (PHP)\nDESCRIPTION: This code snippet implements the `HasGoogleTwoFactorAuthentication` interface on the `User` model. It provides the methods required by Filament to interact with the user's Google two-factor authentication secret, including checking if MFA is enabled, retrieving the secret, saving the secret, and providing a holder name for the authentication app.  These methods facilitate the user enablement and usage of Google Two-Factor Authentication.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/02-multi-factor-authentication.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Auth\\MultiFactor\\GoogleTwoFactor\\Contracts\\HasGoogleTwoFactorAuthentication;\nuse Filament\\Models\\Contracts\\FilamentUser;\nuse Illuminate\\Contracts\\Auth\\MustVerifyEmail;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\nclass User extends Authenticatable implements FilamentUser, HasGoogleTwoFactorAuthentication, MustVerifyEmail\n{\n    // ...\n\n    public function hasGoogleTwoFactorAuthentication(): bool\n    {\n        // This method should return true if the user has enabled Google two-factor authentication.\n        // We know that the user has enabled it if the secret is not null, but if your app has\n        // another mechanism for disabling two-factor authentication even when a secret is\n        // set, you should check that here.\n        \n        return filled($this->google_two_factor_authentication_secret);\n    }\n\n    public function getGoogleTwoFactorAuthenticationSecret(): ?string\n    {\n        // This method should return the user's saved Google two-factor authentication secret.\n    \n        return $this->google_two_factor_authentication_secret;\n    }\n\n    public function saveGoogleTwoFactorAuthenticationSecret(?string $secret): void\n    {\n        // This method should save the user's Google two-factor authentication secret.\n    \n        $this->google_two_factor_authentication_secret = $secret;\n        $this->save();\n    }\n\n    public function getGoogleTwoFactorAuthenticationHolderName(): string\n    {\n        // In a user's authentication app, each account can be represented by a \"holder name\".\n        // If the user has multiple accounts in your app, it might be a good idea to use\n        // their email address as then they are still uniquely identifiable.\n    \n        return $this->email;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Action Enabled/Disabled States in Filament\nDESCRIPTION: This code snippet demonstrates how to test if a Filament action is enabled or disabled using `assertActionEnabled()` and `assertActionDisabled()` methods within a Pest test. It creates an invoice and asserts the state of 'send' and 'print' actions.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/05-testing-actions.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can only print a sent invoice', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertActionDisabled('send')\n        ->assertActionEnabled('print');\n});\n```\n\n----------------------------------------\n\nTITLE: Delete Bulk Action in Filament Table (PHP)\nDESCRIPTION: This code snippet shows how to add a delete bulk action to a Filament table, allowing users to select multiple rows and delete them at once. It uses `DeleteBulkAction::make()` within the `bulkActions()` method of the `Table` object.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/07-delete.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\DeleteBulkAction;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->bulkActions([\n            DeleteBulkAction::make(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Reordering Trigger Action (PHP)\nDESCRIPTION: This snippet illustrates how to customize the reordering trigger button using the `reorderRecordsTriggerAction()` method in Filament. A closure is used to return a customized action, allowing modification of properties such as label and button style based on the reordering state.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->reorderRecordsTriggerAction(\n            fn (Action $action, bool $isReordering) => $action\n                ->button()\n                ->label($isReordering ? 'Disable reordering' : 'Enable reordering'),\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Aligning Add Action Button - Filament Builder (PHP)\nDESCRIPTION: This snippet demonstrates how to align the add action button within the Filament Builder component using the `addActionAlignment()` method. It shows how to use the `Alignment` enum from Filament to align the button to the start of the builder.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\nuse Filament\\Support\\Enums\\Alignment;\n\nBuilder::make('content')\n    ->schema([\n        // ...\n    ])\n    ->addActionAlignment(Alignment::Start)\n```\n\n----------------------------------------\n\nTITLE: Requiring Mapping for New Records Only\nDESCRIPTION: This code snippet demonstrates how to require an import column to be mapped only when creating new records, using the `requiredMappingForNewRecordsOnly()` method. This is useful when a column is required for new records but not for updating existing ones.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('sku')\n    ->requiredMappingForNewRecordsOnly()\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Records Only - Filament PHP\nDESCRIPTION: This snippet demonstrates how to write an importer that only updates existing records and does not create new ones. It returns `null` if no record is found with a matching SKU, effectively skipping the row.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Product;\n\npublic function resolveRecord(): ?Product\n{\n    return Product::query()\n        ->where('sku', $this->data['sku'])\n        ->first();\n}\n```\n\n----------------------------------------\n\nTITLE: Polling Table Content (PHP)\nDESCRIPTION: This code demonstrates how to automatically refresh the content of a Filament table at a specified interval using the `$table->poll()` method. The interval is provided as a string, such as '10s' for 10 seconds.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->poll('10s');\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a widget in resource page header\nDESCRIPTION: This code snippet demonstrates how to display a widget on a resource page using the `getHeaderWidgets()` method.  It overrides the method in the page class, returning an array containing the widget's class name. The widget will be displayed above the page content.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/10-widgets.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Filament\\Resources\\Customers\\Pages;\n\nuse App\\Filament\\Resources\\Customers\\CustomerResource;\n\nclass ListCustomers extends ListRecords\n{\n    public static string $resource = CustomerResource::class;\n\n    protected function getHeaderWidgets(): array\n    {\n        return [\n            CustomerResource\\Widgets\\CustomerOverview::class,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Casting to Numeric Value\nDESCRIPTION: This snippet demonstrates how to use the `numeric()` method to cast a column's state to a float. It also shows how to specify the number of decimal places to round to.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('price')\n    ->numeric() // Casts the state to a float.\n\nImportColumn::make('price')\n    ->numeric(decimalPlaces: 2) // Casts the state to a float, and rounds it to 2 decimal places.\n```\n\n----------------------------------------\n\nTITLE: Generating a custom color palette\nDESCRIPTION: This example demonstrates registering a color palette by providing either a hex or RGB color value. Filament attempts to generate the full range of color shades (50-950) based on the provided base color.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/03-colors.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Support\\Facades\\FilamentColor;\n\nFilamentColor::register([\n    'danger' => '#ff0000',\n]);\n\nFilamentColor::register([\n    'danger' => 'rgb(255, 0, 0)',\n]);\n```\n\n----------------------------------------\n\nTITLE: Collapsible Sidebar on Desktop\nDESCRIPTION: This code snippet shows how to enable the collapsible sidebar on desktop in Filament using the `sidebarCollapsibleOnDesktop()` method in the Panel configuration. This requires the Filament Panel class. The expected result is a sidebar that can be collapsed even on larger screens.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->sidebarCollapsibleOnDesktop();\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Wizard in a Filament Modal\nDESCRIPTION: This code shows how to create a multi-step form wizard inside a Filament modal using the `steps()` method. Each step is defined using the `Step` class and contains a schema of form components.  The example creates a wizard with steps for naming, describing and setting visibility of a category.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Forms\\Components\\MarkdownEditor;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Components\\Toggle;\nuse Filament\\Schemas\\Components\\Wizard\\Step;\n\nAction::make('create')\n    ->steps([\n        Step::make('Name')\n            ->description('Give the category a unique name')\n            ->schema([\n                TextInput::make('name')\n                    ->required()\n                    ->live()\n                    ->afterStateUpdated(fn ($state, callable $set) => $set('slug', Str::slug($state))),\n                TextInput::make('slug')\n                    ->disabled()\n                    ->required()\n                    ->unique(Category::class, 'slug'),\n            ])\n            ->columns(2),\n        Step::make('Description')\n            ->description('Add some extra details')\n            ->schema([\n                MarkdownEditor::make('description'),\n            ]),\n        Step::make('Visibility')\n            ->description('Control who can view it')\n            ->schema([\n                Toggle::make('is_visible')\n                    ->label('Visible to customers.')\n                    ->default(true),\n            ]),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Generating Filament Livewire Form for Eloquent Model (PHP Artisan)\nDESCRIPTION: This command generates a Livewire form for a specific Eloquent model. It asks for the model's name and creates a form that's pre-configured to access and save data to that model. This automates the process of connecting form fields to model attributes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-form.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-livewire-form Products/CreateProduct\n```\n\n----------------------------------------\n\nTITLE: Disabling a Field Based on Operation\nDESCRIPTION: This demonstrates how to disable a toggle field based on the current operation (e.g., 'edit') using the `disabledOn()` method. The field will only be disabled when the schema is being used for the specified operation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('is_admin')\n    ->disabledOn('edit')\n\n// is the same as\n\nToggle::make('is_admin')\n    ->disabled(fn (string $operation): bool => $operation === 'edit')\n```\n\n----------------------------------------\n\nTITLE: Defining Parent Resource\nDESCRIPTION: This PHP code defines a static property `$parentResource` within the nested resource class, indicating the parent resource.  This establishes the back-link, crucial for Filament to correctly associate the nested resource with its parent. It may be replaced by `getParentResourceRegistration()` for customization.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/08-nesting.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Resources\\Courses\\CourseResource;\n\nprotected static ?string $parentResource = CourseResource::class;\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Attributes to Modal with extraModalWindowAttributes()\nDESCRIPTION: This example shows how to add custom HTML attributes to a Filament modal window using `extraModalWindowAttributes()`. It sets the 'class' attribute to 'update-author-modal', which can be used for styling or targeting the modal with JavaScript.  The attributes are applied to the outermost HTML element of the modal.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_39\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('updateAuthor')\n    ->extraModalWindowAttributes(['class' => 'update-author-modal'])\n```\n\n----------------------------------------\n\nTITLE: Requiring an Import Column to be Mapped in Filament\nDESCRIPTION: This code snippet demonstrates how to require an import column to be mapped to a CSV column using the `requiredMapping()` method. This ensures that users must map the column to a corresponding column in the CSV file.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('sku')\n    ->requiredMapping()\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Summarizers to a Column (PHP)\nDESCRIPTION: This code snippet demonstrates how to add multiple summarizers (Average and Range) to a single Filament table column. Both the `Average` and `Range` classes are used from the `Filament\\Tables\\Columns\\Summarizers` namespace. The `summarize()` method accepts an array of summarizer objects.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Average;\nuse Filament\\Tables\\Columns\\Summarizers\\Range;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('rating')\n    ->numeric()\n    ->summarize([\n        Average::make(),\n        Range::make(),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic Text Input in Filament\nDESCRIPTION: This snippet demonstrates how to initialize a basic text input field using the Filament\\Forms\\Components\\TextInput class.  It creates a text input field for the 'name' attribute. No dependencies beyond the Filament Forms package are explicitly shown here.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/02-text-input.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n```\n\n----------------------------------------\n\nTITLE: Disable ToggleButtons Option in Filament Forms (PHP)\nDESCRIPTION: This code snippet demonstrates how to disable a specific option within a Filament ToggleButtons component using the `disableOptionWhen()` method. The closure checks if the option's value is 'published' and disables it if it is.  The `$value` parameter represents the value of the option being evaluated.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/18-toggle-buttons.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\n\nToggleButtons::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'scheduled' => 'Scheduled',\n        'published' => 'Published',\n    ])\n    ->disableOptionWhen(fn (string $value): bool => $value === 'published')\n```\n\n----------------------------------------\n\nTITLE: Generating Filament Settings Page (Artisan)\nDESCRIPTION: This Artisan command generates a new Filament settings page. It creates a page class in the `app/Filament/Pages` directory named `ManageFooter` which will be associated with the `FooterSettings` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-settings-plugin/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-settings-page ManageFooter FooterSettings\n```\n\n----------------------------------------\n\nTITLE: Including Null Values in Range (PHP)\nDESCRIPTION: This code snippet shows how to include null values in the range calculation by using the `excludeNull(false)` method with the `Range` summarizer.  By default null values are excluded.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Range;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('sku')\n    ->summarize(Range::make()->excludeNull(false))\n```\n\n----------------------------------------\n\nTITLE: Auto-hashing Password Field - Filament (Conditional Requirement)\nDESCRIPTION: This snippet conditionally makes the password field required when the user is being created. It injects the `$operation` utility and uses it in the `required()` method to determine if the field should be required based on the current operation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_89\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Support\\Facades\\Hash;\n\nTextInput::make('password')\n    ->password()\n    ->dehydrateStateUsing(fn (string $state): string => Hash::make($state))\n    ->dehydrated(fn (?string $state): bool => filled($state))\n    ->required(fn (string $operation): bool => $operation === 'create')\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting on Filament Action Execution (PHP)\nDESCRIPTION: This snippet shows how to implement rate limiting when a Filament action is executed. Similar to the previous example, it uses Laravel's `RateLimiter` and `Notification` to control and notify users about rate limits. The `action` method defines the logic executed when the action is triggered.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Notifications\\Notification;\nuse Illuminate\\Support\\Facades\\RateLimiter;\n\nAction::make('delete')\n    ->action(function () {\n        if (RateLimiter::tooManyAttempts(\n            $rateLimitKey = 'delete:' . auth()->id(),\n            maxAttempts: 5,\n        )) {\n            Notification::make()\n                ->title('Too many attempts')\n                ->body('Please try again in ' . RateLimiter::availableIn($rateLimitKey) . ' seconds.')\n                ->danger()\n                ->send();\n                \n            return;\n        }\n        \n         RateLimiter::hit($rateLimitKey);\n        \n        // ...\n    })\n```\n\n----------------------------------------\n\nTITLE: Enabling SPA Mode in Filament (PHP)\nDESCRIPTION: This code demonstrates how to enable SPA mode for a Filament panel using the `spa()` method. SPA mode leverages Livewire's `wire:navigate` feature for a smoother, single-page application-like experience.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/05-panel-configuration.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->spa();\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Resources\\Posts\\PostResource;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->spa()\n        ->spaUrlExceptions(fn (): array => [\n            url('/admin'),\n            PostResource::getUrl(),\n        ]);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->spa()\n        ->spaUrlExceptions([\n            '*/admin/posts/*',\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Resources/Pages to a Filament Cluster (PHP)\nDESCRIPTION: This snippet shows how to assign a resource or page to a specific cluster by defining the `$cluster` property within the resource or page class.  The value of this property should be the fully qualified class name of the desired cluster.  This establishes the hierarchical relationship between the cluster, and the resource/page and impacts navigation and URL structure.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/04-clusters.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Clusters\\Settings;\n\nprotected static ?string $cluster = Settings::class;\n```\n\n----------------------------------------\n\nTITLE: Configuring Filament Schema with a Dedicated Class (PHP)\nDESCRIPTION: This snippet demonstrates how to define a Filament schema in a dedicated class, `CustomerForm`, and then configure it with form components like `TextInput`. The `configure` method is used to define the schema structure.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/12-code-quality-tips.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Filament\\Resources\\Customers\\Schemas;\n\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Schema;\n\nclass CustomerForm\n{\n    public static function configure(Schema $schema): Schema\n    {\n        return $schema\n            ->components([\n                TextInput::make('name'),\n                // ...\n            ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Notification as Read - Filament Action\nDESCRIPTION: This code snippet shows how to add an action to a notification that marks the notification as read when clicked.  It uses the `markAsRead()` method on the action instance.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/02-database-notifications.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Notifications\\Notification;\n\nNotification::make()\n    ->title('Saved successfully')\n    ->success()\n    ->body('Changes to the post have been saved.')\n    ->actions([\n        Action::make('view')\n            ->button()\n            ->markAsRead(),\n    ])\n    ->send();\n```\n\n----------------------------------------\n\nTITLE: Counting Icon Occurrences (PHP)\nDESCRIPTION: This snippet demonstrates how to use the `icons()` method with the `Count` summarizer on an `IconColumn` to visually represent the number of occurrences of each icon in the table. It utilizes the `boolean()` method on the `IconColumn` to represent true/false values as icons.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\nuse Filament\\Tables\\Columns\\Summarizers\\Count;\nuse Illuminate\\Database\\Query\\Builder;\n\nIconColumn::make('is_published')\n    ->boolean()\n    ->summarize(Count::make()->icons()),\n```\n\n----------------------------------------\n\nTITLE: Using SpatieTagsInput in Filament Form\nDESCRIPTION: Demonstrates how to use the `SpatieTagsInput` component within a Filament form to manage tags associated with a model. This component allows users to input and manage tags related to a specific field.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-tags-plugin/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\SpatieTagsInput;\n\nSpatieTagsInput::make('tags')\n```\n\n----------------------------------------\n\nTITLE: Require Subscription on Resource\nDESCRIPTION: This code snippet demonstrates how to require a subscription for a specific resource or page by overriding the `isTenantSubscriptionRequired()` method.  It returns `true` to enforce the subscription requirement.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic static function isTenantSubscriptionRequired(Panel $panel): bool\n{\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing config method in Blade view\nDESCRIPTION: This code shows how to access the configuration set via a method like `speed()` within the Blade view.  The `getSpeed()` method of the entry class is accessed using `$getSpeed()`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/08-custom-entries.md#_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<x-dynamic-component\n    :component=\"$getEntryWrapperView()\"\n    :entry=\"$entry\"\n>\n    {{ $getSpeed() }}\n</x-dynamic-component>\n```\n\n----------------------------------------\n\nTITLE: Interactive Block Previews\nDESCRIPTION: This code demonstrates how to enable interactive block previews using the `blockPreviews()` method with the `areInteractive: true` argument. This allows links and buttons within the preview content to remain interactive, improving the user experience.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blockPreviews(areInteractive: true)\n    ->blocks([\n        //\n    ])\n```\n\n----------------------------------------\n\nTITLE: Registering Assets using FilamentAsset Facade\nDESCRIPTION: This code snippet demonstrates how to register assets (CSS and JavaScript) using the `FilamentAsset` facade within the `boot()` method of a service provider. It's used for registering both application and plugin assets.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Facades\\FilamentAsset;\n\npublic function boot(): void\n{\n    // ...\n    \n    FilamentAsset::register([\n        // ...\n    ]);\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Action Notifications\nDESCRIPTION: This snippet demonstrates how to send notifications after a bulk action completes using `successNotificationTitle()` and `failureNotificationTitle()`.  The failure notification can receive `$successCount` and `$totalCount` parameters to provide information about successes and failures.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/04-actions.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\BulkAction;\nuse Illuminate\\Database\\Eloquent\\Collection;\n\nBulkAction::make('delete')\n    ->requiresConfirmation()\n    ->authorizeIndividualRecords('delete')\n    ->action(fn (Collection $records) => $records->each->delete())\n    ->successNotificationTitle('Deleted users')\n    ->failureNotificationTitle(function (int $successCount, int $totalCount): string {\n        if ($successCount) {\n            return \"{$successCount} of {$totalCount} users deleted\";\n        }\n\n        return 'Failed to delete any users';\n    })\n```\n\n----------------------------------------\n\nTITLE: Clearing Filament Optimization Cache (Artisan Command)\nDESCRIPTION: This command clears the cached Filament components and Blade icons, undoing the effects of the `filament:optimize` command. This is useful for resetting the cache during development or after deployments.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/13-deployment.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan filament:optimize-clear\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix and Suffix (PHP)\nDESCRIPTION: This code snippet shows how to add a prefix and suffix to a summary's value. The example adds \"Total volume: \" as a prefix and \" m&sup3;\" as a suffix (using HtmlString to render the superscript correctly) to the sum of the 'volume' column.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Sum;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Illuminate\\Support\\HtmlString;\n\nTextColumn::make('volume')\n    ->summarize(Sum::make()\n        ->prefix('Total volume: ')\n        ->suffix(new HtmlString(' m&sup3;'))\n    )\n```\n\n----------------------------------------\n\nTITLE: Making a Column Searchable in Filament\nDESCRIPTION: This snippet shows how to make a column searchable in a Filament table using the `searchable()` method. This will add a search field to the table, allowing users to filter rows by the value of that column. The code shows a TextColumn 'title' being made searchable.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('title')\n    ->searchable()\n```\n\n----------------------------------------\n\nTITLE: Positioning Filters Above Content in Filament Table (PHP)\nDESCRIPTION: This snippet demonstrates how to configure a Filament table to display the filters above the table content. This is useful for accommodating deeply nested query builders which require more space.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Enums\\FiltersLayout;\nuse Filament\\Tables\\Filters\\QueryBuilder;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            QueryBuilder::make()\n                ->constraints([\n                    // ...\n                ]),\n        ], layout: FiltersLayout::AboveContent);\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Empty Relationships in Filament\nDESCRIPTION: This code snippet demonstrates how to add the ability to filter out \"empty\" relationships in Filament relationship constraints. It utilizes the `emptyable()` method to display an option that allows users to exclude records with no related records in a singular relationship.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\RelationshipConstraint;\n\nRelationshipConstraint::make('creator')\n    ->emptyable()\n```\n\n----------------------------------------\n\nTITLE: Relative Date Formatting - PHP\nDESCRIPTION: This snippet demonstrates how to format a date in a TextColumn relative to the current time, using Carbon's `diffForHumans()` method through the `since()` method.  This displays the date as a human-readable time difference, like \"2 days ago\".\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('created_at')\n    ->since()\n```\n\n----------------------------------------\n\nTITLE: Adding Average Summarizer (PHP)\nDESCRIPTION: This code snippet demonstrates how to calculate the average of all values in the dataset using the `Average` summarizer. It applies the summarizer to the 'rating' column of a Filament table.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Average;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('rating')\n    ->summarize(Average::make())\n```\n\n----------------------------------------\n\nTITLE: Making Items Collapsible - Filament Builder (PHP)\nDESCRIPTION: This snippet shows how to make the builder items collapsible using the `collapsible()` method in Filament.  This allows users to hide the content of blocks in long forms for a cleaner interface.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->collapsible()\n```\n\n----------------------------------------\n\nTITLE: Resolving BelongsToMany Relationship with Function - PHP\nDESCRIPTION: This snippet shows how to resolve a `BelongsToMany` relationship using a function with `resolveUsing`.  Since it is a `BelongsToMany`, the `$states` parameter is an array. The function finds multiple Author models based on the provided email or username array.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Author;\nuse Filament\\Actions\\Imports\\ImportColumn;\nuse Illuminate\\Database\\Eloquent\\Collection;\n\nImportColumn::make('authors')\n    ->relationship(resolveUsing: function (array $states): Collection {\n        return Author::query()\n            ->whereIn('email', $states)\n            ->orWhereIn('username', $states)\n            ->get();\n    })\n```\n\n----------------------------------------\n\nTITLE: Custom Blade View for View Page - PHP\nDESCRIPTION: This code demonstrates how to override the default view of a Filament view page with a custom Blade template. By setting the `$view` property to the path of your Blade file, you can completely customize the appearance and layout of the page.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/05-viewing-records.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nprotected string $view = 'filament.resources.users.pages.view-user';\n```\n\n----------------------------------------\n\nTITLE: Preventing Item Deletion - Filament Builder (PHP)\nDESCRIPTION: This snippet demonstrates how to prevent users from deleting items from a Filament Builder component using the `deletable(false)` method. Setting `deletable` to `false` removes the delete action button from each block, preventing users from removing existing blocks.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->deletable(false)\n```\n\n----------------------------------------\n\nTITLE: Requiring Tenant Subscription - PHP\nDESCRIPTION: This code snippet configures Filament to require a subscription for accessing the application. If a user doesn't have an active subscription, they will be redirected to the billing page.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->requiresTenantSubscription();\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Description Above Text\nDESCRIPTION: Displays a description above the column contents using the `description()` method with the `position` parameter set to `'above'`. The description is generated by a function that receives a `Post` record as input.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('title')\n    ->description(fn (Post $record): string => $record->description, position: 'above')\n```\n\n----------------------------------------\n\nTITLE: Customizing data before saving in Filament (PHP)\nDESCRIPTION: This example demonstrates how to customize the form data before saving it to the database using the `mutateDataUsing()` method. It sets the 'last_edited_by_id' field to the authenticated user's ID.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/05-edit.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\EditAction;\n\nEditAction::make()\n    ->mutateDataUsing(function (array $data): array {\n        $data['last_edited_by_id'] = auth()->id();\n\n        return $data;\n    })\n```\n\n----------------------------------------\n\nTITLE: Import Filament CSS (CSS)\nDESCRIPTION: This configuration imports the necessary CSS files for Filament components into the app's CSS file. This allows Filament styles to be applied to the application's UI.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/01-introduction/02-installation.md#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\n\n/* Required by all components */\n@import '../../vendor/filament/support/resources/css/index.css';\n\n/* Required by actions and tables */\n@import '../../vendor/filament/actions/resources/css/index.css';\n\n/* Required by actions, forms and tables */\n@import '../../vendor/filament/forms/resources/css/index.css';\n\n/* Required by actions and infolists */\n@import '../../vendor/filament/infolists/resources/css/index.css';\n\n/* Required by notifications */\n@import '../../vendor/filament/notifications/resources/css/index.css';\n\n/* Required by actions, infolists, forms, schemas and tables */\n@import '../../vendor/filament/schemas/resources/css/index.css';\n\n/* Required by tables */\n@import '../../vendor/filament/tables/resources/css/index.css';\n\n/* Required by widgets */\n@import '../../vendor/filament/widgets/resources/css/index.css';\n\n@variant dark (&:where(.dark, .dark *));\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding Navigation Items - PHP\nDESCRIPTION: This code snippet demonstrates how to conditionally hide a navigation item based on a user's permissions.  It uses the `visible()` or `hidden()` methods, passing in a closure that checks if the authenticated user has the 'view-analytics' permission.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Navigation\\NavigationItem;\n\nNavigationItem::make('Analytics')\n    ->visible(fn(): bool => auth()->user()->can('view-analytics'))\n    // or\n    ->hidden(fn(): bool => ! auth()->user()->can('view-analytics')),\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Job Tags in Filament\nDESCRIPTION: This code snippet illustrates how to customize the tags applied to export jobs in Filament. The `getJobTags()` method in the exporter class is overridden to return an array of strings representing the tags. The default tag includes the export ID.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\npublic function getJobTags(): array\n{\n    return [\"export{$this->export->getKey()}\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Date and Time with Carbon - PHP\nDESCRIPTION: These snippets demonstrate how to format date and time values in a TextColumn using the `isoDate()`, `isoDateTime()`, and `isoTime()` methods, which leverage Carbon's macro-formats. You can customize the format with strings like 'L', 'LLL', or 'LT'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('created_at')\n    ->isoDate()\n\nTextColumn::make('created_at')\n    ->isoDateTime()\n\nTextColumn::make('created_at')\n    ->isoTime()\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('created_at')\n    ->isoDate('L')\n\nTextColumn::make('created_at')\n    ->isoDateTime('LLL')\n\nTextColumn::make('created_at')\n    ->isoTime('LT')\n```\n\n----------------------------------------\n\nTITLE: Adding content after form field label - PHP\nDESCRIPTION: This code adds content (icon and text) after the label of a text input using `afterLabel()` in Filament. It passes an array of content to `afterLabel()`, which will render the content inline with and to the right of the label.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Icon;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTextInput::make('name')\n    ->afterLabel([\n        Icon::make(Heroicon::Star),\n        'This is the content after the field\\'s label'\n    ])\n```\n\n----------------------------------------\n\nTITLE: Disabling Column Mapping in ExportAction\nDESCRIPTION: This code disables the column selection modal, so the user will not be asked which columns they would like to export.  All configured columns will be exported.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Exports\\ProductExporter;\nuse Filament\\Actions\\ExportAction;\n\nExportAction::make()\n    ->exporter(ProductExporter::class)\n    ->columnMapping(false)\n```\n\n----------------------------------------\n\nTITLE: Preventing Pagination Query String Conflicts (PHP)\nDESCRIPTION: This snippet shows how to prevent query string conflicts when using multiple tables on the same page in Filament.  It defines a unique query string identifier for each table using `$table->queryStringIdentifier()` to avoid overwriting pagination states.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->queryStringIdentifier('users');\n}\n```\n\n----------------------------------------\n\nTITLE: Mutating State After Built-in Casting\nDESCRIPTION: This code snippet demonstrates how to mutate the state of an import column after it has been cast using a built-in method such as `numeric()`.  A function passed to `castStateUsing()` is used for post-casting modifications.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('price')\n    ->numeric()\n    ->castStateUsing(function (float $state): ?float {\n        if (blank($state)) {\n            return null;\n        }\n    \n        return round($state * 100);\n    })\n```\n\n----------------------------------------\n\nTITLE: Formatting as Number (PHP)\nDESCRIPTION: This code snippet illustrates how to format a summary value as a number using the `numeric()` method. It formats the average rating as a number.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Average;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('rating')\n    ->summarize(Average::make()->numeric())\n```\n\n----------------------------------------\n\nTITLE: Customizing the Default Active Tab\nDESCRIPTION: This snippet shows how to customize the default tab that is selected when the FilamentPHP List page is loaded. It demonstrates implementing the `getDefaultActiveTab()` method to return the array key of the desired default tab.  It also shows the initial `getTabs` array.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/02-listing-records.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Tabs\\Tab;\n\npublic function getTabs(): array\n{\n    return [\n        'all' => Tab::make(),\n        'active' => Tab::make(),\n        'inactive' => Tab::make(),\n    ];\n}\n\npublic function getDefaultActiveTab(): string | int | null\n{\n    return 'active';\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Filament Button Size - Blade\nDESCRIPTION: These snippets demonstrate how to set the size of a Filament button using the `size` attribute.  The available sizes are \"xs\" (extra small), \"sm\" (small), \"lg\" (large), and \"xl\" (extra large).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-button.md#_snippet_2\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::button size=\"xs\">\n    New user\n</x-filament::button>\n```\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::button size=\"sm\">\n    New user\n</x-filament::button>\n```\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::button size=\"lg\">\n    New user\n</x-filament::button>\n```\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::button size=\"xl\">\n    New user\n</x-filament::button>\n```\n\n----------------------------------------\n\nTITLE: Adding text below form field content - PHP\nDESCRIPTION: This code snippet demonstrates how to add a text string below the content of a text input field using the `belowContent()` method in Filament forms.  It uses the `TextInput` component and passes a string to the `belowContent()` method to display the text.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->belowContent('This is the user\\'s full name.')\n```\n\n----------------------------------------\n\nTITLE: Customizing the Wizard Action Objects (PHP)\nDESCRIPTION: This example shows how to customize the action buttons (e.g., Next, Previous) within the Filament Wizard by using the `nextAction()` method and passing a callback function that modifies the `$action` object. Requires Filament and Filament\\Actions\\Action.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/05-wizards.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Schemas\\Components\\Wizard;\n\nWizard::make([\n    // ...\n])\n    ->nextAction(\n        fn (Action $action) => $action->label('Next step'),\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Affix Text - PHP\nDESCRIPTION: This snippet shows how to add prefix and suffix text to a DatePicker field using the `prefix()` and `suffix()` methods. This can be used to provide additional context or units for the input field.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/08-date-time-picker.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\n\nDatePicker::make('date')\n    ->prefix('Starts')\n    ->suffix('at midnight')\n```\n\n----------------------------------------\n\nTITLE: Registering Render Hook in Filament (PHP)\nDESCRIPTION: This code demonstrates how to register a render hook within a Filament panel's configuration. It allows you to inject Blade content at specific points within the framework views.  In this example, it integrates `wire-elements/modal` with Filament.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/05-panel-configuration.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\nuse Filament\\View\\PanelsRenderHook;\nuse Illuminate\\Support\\Facades\\Blade;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->renderHook(\n            PanelsRenderHook::BODY_START,\n            fn (): string => Blade::render('@livewire(\\'livewire-ui-modal\\')'),\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon Inside a Filament Modal\nDESCRIPTION: This snippet demonstrates how to add an icon inside a Filament modal using the `modalIcon()` method. The example adds a trash icon to a confirmation modal.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Actions\\Action;\n\nAction::make('delete')\n    ->action(fn (Post $record) => $record->delete())\n    ->requiresConfirmation()\n    ->modalIcon('heroicon-o-trash')\n```\n\n----------------------------------------\n\nTITLE: Resolving Relationship with Multiple Columns - Filament PHP\nDESCRIPTION: This snippet demonstrates how to use multiple columns to resolve a relationship by passing an array of column names to the `resolveUsing` option. The record can be found by either their email or username.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('author')\n    ->relationship(resolveUsing: ['email', 'username'])\n```\n\n----------------------------------------\n\nTITLE: Using the Reusable TextInput Component in a Schema (PHP)\nDESCRIPTION: This snippet demonstrates how to use the `CustomerNameInput` component class within a Filament schema. It calls the `make()` method of the `CustomerNameInput` class to create an instance of the configured `TextInput` component, which is then added to the schema.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/12-code-quality-tips.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Resources\\Customers\\Schemas\\Components\\CustomerNameInput;\nuse Filament\\Schemas\\Schema;\n\npublic static function configure(Schema $schema): Schema\n{\n    return $schema\n        ->components([\n            CustomerNameInput::make(),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Details to Global Search Results in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to add extra details below the search result title by overriding the `getGlobalSearchResultDetails()` method.  The method returns an array where keys are detail labels and values are detail contents.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/09-global-search.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic static function getGlobalSearchResultDetails(Model $record): array\n{\n    return [\n        'Author' => $record->author->name,\n        'Category' => $record->category->name,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HasEmailCodeAuthentication Interface\nDESCRIPTION: This code snippet demonstrates how to implement the `HasEmailCodeAuthentication` interface on the `User` model. It provides the necessary methods for Filament to interact with the email code authentication secret and integration status. The methods include checks for enabled status and secret retrieval and storage.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/02-multi-factor-authentication.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Auth\\MultiFactor\\EmailCode\\Contracts\\HasEmailCodeAuthentication;\nuse Filament\\Models\\Contracts\\FilamentUser;\nuse Illuminate\\Contracts\\Auth\\MustVerifyEmail;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\nclass User extends Authenticatable implements FilamentUser, HasEmailCodeAuthentication, MustVerifyEmail\n{\n    // ...\n\n    public function hasEmailCodeAuthentication(): bool\n    {\n        // This method should return true if the user has enabled email code authentication.\n        // We know that the user has enabled it if the secret is not null, but if your app has\n        // another mechanism for disabling email code authentication even when a secret is\n        // set, you should check that here.\n        \n        return filled($this->email_code_authentication_secret);\n    }\n\n    public function getEmailCodeAuthenticationSecret(): ?string\n    {\n        // This method should return the user's saved email code authentication secret.\n    \n        return $this->email_code_authentication_secret;\n    }\n\n    public function saveEmailCodeAuthenticationSecret(?string $secret): void\n    {\n        // This method should save the user's email code authentication secret.\n    \n        $this->email_code_authentication_secret = $secret;\n        $this->save();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Page Content using Schemas - PHP\nDESCRIPTION: This code snippet showcases how to customize the page content by overriding the `content()` method and defining a custom schema.  It includes the default form and relation managers, which can be reordered or removed as needed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/04-editing-records.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Schema;\n\npublic function content(Schema $schema): Schema\n{\n    return $schema\n        ->components([\n            $this->getFormContentComponent(), // This method returns a component to display the form that is defined in this resource\n            $this->getRelationManagersContentComponent(), // This method returns a component to display the relation managers that are defined in this resource\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Unsaved Changes Alerts in Filament (PHP)\nDESCRIPTION: This code snippet demonstrates how to enable unsaved changes alerts for a Filament panel using the `unsavedChangesAlerts()` method. This will alert users if they try to navigate away from a page without saving their changes on Create and Edit pages, as well as open action modals.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/05-panel-configuration.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->unsavedChangesAlerts();\n}\n```\n\n----------------------------------------\n\nTITLE: Debouncing a reactive field in Filament\nDESCRIPTION: This code snippet demonstrates how to debounce a reactive TextInput field using the `live(debounce: 500)` method. This will prevent network requests from being sent until the user has finished typing for a specified period of time (in milliseconds). Requires Filament\\Forms\\Components\\TextInput.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_66\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('username')\n    ->live(debounce: 500) // Wait 500ms before re-rendering the schema.\n```\n\n----------------------------------------\n\nTITLE: Customizing Key Label - PHP\nDESCRIPTION: This code demonstrates how to customize the key column's label in the KeyValueEntry component using the `keyLabel()` method. It sets the label to 'Property name'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/06-key-value-entry.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\KeyValueEntry;\n\nKeyValueEntry::make('meta')\n    ->keyLabel('Property name')\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Job Retry Until in Filament\nDESCRIPTION: This code snippet shows how to customize the retry duration for export jobs in Filament. The `getJobRetryUntil()` method in the exporter class is overridden to return a `CarbonInterface` instance representing the date and time until which the job should be retried. The default retry period is 24 hours.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nuse Carbon\\CarbonInterface;\n\npublic function getJobRetryUntil(): ?CarbonInterface\n{\n    return now()->addHours(12);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Relation Manager\nDESCRIPTION: These commands generate a relation manager and a relation page for managing relationships between resources. The relation manager allows viewing and managing related records in a table format, linking to the nested resource for editing. The relation page provides a dedicated page for managing related records.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/08-nesting.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-relation-manager CourseResource lessons title\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-page ManageCourseLessons --resource=CourseResource --type=ManageRelatedRecords\n```\n\n----------------------------------------\n\nTITLE: Making sections collapsible\nDESCRIPTION: This code demonstrates how to make a section collapsible using the `collapsible()` method, allowing users to hide or show the section's content. It helps to improve the user experience by reducing visual clutter.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/03-sections.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Section;\n\nSection::make('Cart')\n    ->description('The items you have selected for purchase')\n    ->schema([\n        // ...\n    ])\n    ->collapsible()\n```\n\n----------------------------------------\n\nTITLE: Customizing Model Label Dynamically - PHP\nDESCRIPTION: This code snippet shows how to customize the model label dynamically using the `getModelLabel()` method. This allows for more complex label generation, such as using translations. The function must return a string.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\npublic static function getModelLabel(): string\n{\n    return __('filament/resources/customer.label');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Attachments - PHP\nDESCRIPTION: This code snippet demonstrates how to configure file attachments for the Filament MarkdownEditor. It allows specifying the disk, directory, and visibility settings for uploaded files using the `fileAttachmentsDisk()`, `fileAttachmentsDirectory()`, and `fileAttachmentsVisibility()` methods respectively.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/11-markdown-editor.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\MarkdownEditor;\n\nMarkdownEditor::make('content')\n    ->fileAttachmentsDisk('s3')\n    ->fileAttachmentsDirectory('attachments')\n    ->fileAttachmentsVisibility('private')\n```\n\n----------------------------------------\n\nTITLE: Passing Static Import Options - PHP\nDESCRIPTION: This snippet demonstrates how to pass a set of static options to the importer through the `options()` method on the `ImportAction`.  These options can then be accessed within the importer class using `$this->options`. Dependencies: App\\Filament\\Imports\\ProductImporter, Filament\\Actions\\ImportAction.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Imports\\ProductImporter;\nuse Filament\\Actions\\ImportAction;\n\nImportAction::make()\n    ->importer(ProductImporter::class)\n    ->options([\n        'updateExisting' => true,\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding Import Action to Filament Create Page (PHP)\nDESCRIPTION: This snippet shows how to add an import action to the header of a Filament Create page. It uses an `ImportAction` and specifies the importer class. The `UserImporter` class defines how to handle the imported data.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Imports\\UserImporter;\nuse Filament\\Actions;\nuse Filament\\Resources\\Pages\\CreateRecord;\n\nclass CreateUser extends CreateRecord\n{\n    // ...\n\n    protected function getHeaderActions(): array\n    {\n        return [\n            Actions\\ImportAction::make()\n                ->importer(UserImporter::class),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Register JavaScript Files from URL in PHP\nDESCRIPTION: This PHP code demonstrates how to register JavaScript files from a URL or a local asset path using `FilamentAsset::register()` and `Js::make()`. These assets will be loaded on every page but not copied to `/public` when running `php artisan filament:assets`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Assets\\Js;\n\nFilamentAsset::register([\n    Js::make('example-external-script', 'https://example.com/external.js'),\n    Js::make('example-local-script', asset('js/local.js')),\n]);\n```\n\n----------------------------------------\n\nTITLE: Changing Modal Content Alignment - Blade\nDESCRIPTION: This code snippet demonstrates how to change the alignment of the content within a Filament modal using the `alignment` attribute. The `alignment` attribute is set to 'center', which horizontally centers the modal's content.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-modal.md#_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal alignment=\"center\">\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Changing Import Chunk Size - PHP\nDESCRIPTION: This snippet demonstrates how to change the chunk size of the CSV by using the `chunkSize()` method on the `ImportAction`. By default, chunks are 100 rows at a time. Dependencies: App\\Filament\\Imports\\ProductImporter, Filament\\Actions\\ImportAction.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Imports\\ProductImporter;\nuse Filament\\Actions\\ImportAction;\n\nImportAction::make()\n    ->importer(ProductImporter::class)\n    ->chunkSize(250)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Filament Resource with Artisan\nDESCRIPTION: This command generates a simplified Filament resource for the `Customer` model, using modals for create, edit, and delete operations. It is suitable for managing simple models on a single page.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-resource Customer --simple\n```\n\n----------------------------------------\n\nTITLE: Setting Option Descriptions for Radio Component - PHP\nDESCRIPTION: This code shows how to add descriptions to each radio option using the `descriptions()` method.  The descriptions provide additional context for each status option, making the form more user-friendly.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/07-radio.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Radio;\n\nRadio::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'scheduled' => 'Scheduled',\n        'published' => 'Published'\n    ])\n    ->descriptions([\n        'draft' => 'Is not visible.',\n        'scheduled' => 'Will be visible.',\n        'published' => 'Is visible.'\n    ])\n```\n\n----------------------------------------\n\nTITLE: Configure Font Provider in Filament Panel\nDESCRIPTION: This code snippet demonstrates how to configure the font provider within a Filament panel using the `font()` method. It sets the font to 'Inter' and specifies the `SpatieGoogleFontProvider` class as the provider, which integrates with Spatie's laravel-google-fonts package for font caching and serving.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-google-fonts-plugin/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\FontProviders\\SpatieGoogleFontProvider;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->font('Inter', provider: SpatieGoogleFontProvider::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DatePicker displayFormat with a function in Filament\nDESCRIPTION: This code snippet demonstrates how to configure the display format of a DatePicker component in Filament using a function. The function determines the format based on the authenticated user's country ID. It depends on the App\\Models\\User model and the Filament\\Forms\\Components\\DatePicker component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_51\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\User;\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\TextInput;\n\nDatePicker::make('date_of_birth')\n    ->displayFormat(function (): string {\n        if (auth()->user()->country_id === 'us') {\n            return 'm/d/Y';\n        }\n\n        return 'd/m/Y';\n    })\n```\n\n----------------------------------------\n\nTITLE: Modifying Export Query in Filament Export Action\nDESCRIPTION: This code snippet demonstrates how to modify the query builder before exporting data using the `modifyQueryUsing()` method on the Filament `ExportAction`. This allows for filtering the data that is exported.  It injects an Eloquent Builder instance.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Exports\\ProductExporter;\nuse Filament\\Actions\\ExportAction;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nExportAction::make()\n    ->exporter(ProductExporter::class)\n    ->modifyQueryUsing(fn (Builder $query) => $query->where('is_active', true))\n```\n\n----------------------------------------\n\nTITLE: Creating a new Filament page with Artisan\nDESCRIPTION: This command creates a new Filament page using the Artisan command-line tool. It generates both a page class and a corresponding view file.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-page Settings\n```\n\n----------------------------------------\n\nTITLE: Customizing the Entire Success Notification in Filament (PHP)\nDESCRIPTION: This code shows how to completely customize the success notification displayed after record creation using the `getCreatedNotification()` method. It returns a `Filament\\Notifications\\Notification` object, allowing you to configure the title, body, type, and actions of the notification.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\nprotected function getCreatedNotification(): ?Notification\n{\n    return Notification::make()\n        ->success()\n        ->title('User registered')\n        ->body('The user has been created successfully.');\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Navigation Items\nDESCRIPTION: This code snippet demonstrates how to group navigation items by specifying a `$navigationGroup` property on a Filament resource or custom page. All items in the same navigation group will be displayed together under the same group label. No dependencies are required beyond a Filament resource or page class. The expected output is a navigation menu with grouped items under a common label.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nprotected static ?string $navigationGroup = 'Settings';\n```\n\n----------------------------------------\n\nTITLE: Defining Split Keys for Tag Creation - PHP\nDESCRIPTION: Specifies additional keys that trigger the creation of a new tag in the TagsInput component, in addition to the default 'Enter' key.  The `splitKeys()` method accepts an array of key names.  It accepts a static array or a function to dynamically calculate it.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/14-tags-input.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TagsInput;\n\nTagsInput::make('tags')\n    ->splitKeys(['Tab', ' '])\n```\n\n----------------------------------------\n\nTITLE: Sending POST Requests from User Menu Items in Filament (PHP)\nDESCRIPTION: This code snippet demonstrates how to send a POST HTTP request from a user menu item in Filament. It uses the `url()` method to specify the route and the `postToUrl()` method to ensure the request is sent as a POST request.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/03-user-menu.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make()\n    ->label('Lock session')\n    ->url(fn (): string => route('lock-session'))\n    ->postToUrl()\n```\n\n----------------------------------------\n\nTITLE: Inserting actions in the section header\nDESCRIPTION: This code demonstrates how to insert actions into the header of a section using the `afterHeader()` method, allowing you to add buttons or other components to the header.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/03-sections.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Section;\n\nSection::make('Rate limiting')\n    ->description('Prevent abuse by limiting the number of requests per period')\n    ->afterHeader([\n        Action::make('test'),\n    ])\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Disabling Tenancy for a Resource in Filament\nDESCRIPTION: This snippet shows how to disable tenancy for a specific resource in Filament by setting the `$isScopedToTenant` static property to `false` on the resource class. This makes the resource accessible across all tenants.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nprotected static bool $isScopedToTenant = false;\n```\n\n----------------------------------------\n\nTITLE: Validating RGBA Color - PHP\nDESCRIPTION: This snippet demonstrates how to validate an RGBA color using Laravel's validation rules within the Filament color picker. It uses a regex to ensure the RGBA color is in the correct format.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/17-color-picker.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\ColorPicker;\n\nColorPicker::make('rgba_color')\n    ->rgba()\n    ->regex('/^rgba\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d*(?:\\.\\d+)?)\\)$/')\n```\n\n----------------------------------------\n\nTITLE: Creating a Date Constraint in Filament QueryBuilder (PHP)\nDESCRIPTION: This snippet illustrates creating a DateConstraint for Filament's QueryBuilder to filter date-based columns. It shows how to filter both a column directly and a column in a relationship.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\DateConstraint;\n\nDateConstraint::make('created_at') // Filter the `created_at` column\n\nDateConstraint::make('creatorCreatedAt')\n    ->relationship(name: 'creator', titleAttribute: 'created_at') // Filter the `created_at` column on the `creator` relationship\n```\n\n----------------------------------------\n\nTITLE: Dispatching Livewire Events from Global Search Actions (PHP)\nDESCRIPTION: This snippet illustrates how to dispatch a Livewire event when a global search result action is clicked. The `dispatch()` method of the `Filament\\Actions\\Action` class is used to specify the event name and optional parameters.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/09-global-search.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('quickView')\n    ->dispatch('quickView', [$record->id])\n```\n\n----------------------------------------\n\nTITLE: Redirecting After Replication (Filament, PHP)\nDESCRIPTION: This code shows how to redirect the user to a different URL after the replication process is complete. The `successRedirectUrl()` method takes a route name as input, defining where the user will be redirected.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/08-replicate.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\ReplicateAction;\n\nReplicateAction::make()\n    ->successRedirectUrl(route('posts.list'))\n```\n\n----------------------------------------\n\nTITLE: Customizing Column with Ternary Filter in Filament, PHP\nDESCRIPTION: Demonstrates how to customize the underlying column used by the ternary filter using the `attribute()` method. This is useful when the filter name doesn't directly correspond to the database column name.  In this example, the 'verified' filter is linked to the 'status_id' column.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/03-ternary.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\TernaryFilter;\n\nTernaryFilter::make('verified')\n    ->nullable()\n    ->attribute('status_id')\n```\n\n----------------------------------------\n\nTITLE: Adding Content Before Field - Filament PHP\nDESCRIPTION: This snippet shows how to insert content before a Filament form field using the `beforeContent()` method. It uses `TextInput`, `Icon`, and `Heroicon` classes. It adds an Icon component before the TextInput field.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Icon;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTextInput::make('name')\n    ->beforeContent(Icon::make(Heroicon::Star))\n```\n\n----------------------------------------\n\nTITLE: Enabling Row Reordering in Filament KeyValue\nDESCRIPTION: This snippet demonstrates how to enable row reordering in the KeyValue field using the `reorderable()` method.  This allows the user to change the order of the key-value pairs.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/16-key-value.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n    ->reorderable()\n```\n\n----------------------------------------\n\nTITLE: Customizing Job Tags - Filament Import (PHP)\nDESCRIPTION: This snippet shows how to customize job tags for import jobs using the `getJobTags()` method. It returns an array containing a tag based on the import's key.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_57\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getJobTags(): array\n{\n    return [\"import{$this->import->getKey()}\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Options Form Components for Filament Export\nDESCRIPTION: This code snippet demonstrates how to return options form components from the `getOptionsFormComponents()` method in a Filament exporter class. These components allow users to customize the export behavior.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\npublic static function getOptionsFormComponents(): array\n{\n    return [\n        TextInput::make('descriptionLimit')\n            ->label('Limit the length of the description column content')\n            ->integer(),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Autosizing a Textarea - PHP\nDESCRIPTION: This snippet shows how to enable automatic resizing of a Textarea to fit its content. The `autosize()` method allows the textarea to dynamically adjust its height based on the amount of text entered by the user, providing a more user-friendly experience. Optionally a boolean value can be passed to control autosizing.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/15-textarea.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Textarea;\n\nTextarea::make('description')\n    ->autosize()\n```\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Textarea;\n\nTextarea::make('description')\n    ->autosize(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Adding Widgets to a Filament Page Header in PHP\nDESCRIPTION: This example demonstrates how to add widgets to the header of a Filament page using the `getHeaderWidgets()` method. It returns an array containing the class name of the widget to be displayed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Widgets\\StatsOverviewWidget;\n\nprotected function getHeaderWidgets(): array\n{\n    return [\n        StatsOverviewWidget::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Dehydrating a Toggle Field\nDESCRIPTION: This shows how to conditionally dehydrate a toggle field, ensuring it is saved based on a boolean value, such as a feature flag, using the `dehydrated()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('is_admin')\n    ->disabled()\n    ->dehydrated(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Customizing Toggle Colors in Filament - PHP\nDESCRIPTION: This snippet demonstrates how to customize the colors of the Toggle component to represent the 'on' and 'off' states using the `onColor()` and `offColor()` methods.  The example uses 'success' and 'danger' color schemes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/05-toggle.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('is_admin')\n    ->onColor('success')\n    ->offColor('danger')\n```\n\n----------------------------------------\n\nTITLE: Using SpatieMediaLibraryImageEntry in Filament Infolist\nDESCRIPTION: This snippet demonstrates using `SpatieMediaLibraryImageEntry` within a Filament infolist. It displays the image associated with 'avatar'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\SpatieMediaLibraryImageEntry;\n\nSpatieMediaLibraryImageEntry::make('avatar')\n```\n\n----------------------------------------\n\nTITLE: Accessing Record in Livewire Component - mount (PHP)\nDESCRIPTION: This snippet shows how to access the current Eloquent record within the `mount()` method of a Livewire component integrated into a Filament schema. It illustrates how to declare the record as an optional parameter. Be mindful of null values before the record is created.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/07-custom-components.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Chart extends Component\n{\n    public function mount(?Model $record = null): void\n    {       \n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Widgets from a Filament Page in PHP\nDESCRIPTION: This code demonstrates how to pass data from a Filament page to its widgets using the `getWidgetData()` method. It returns an array of data that will be available as public properties on the widget class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function getWidgetData(): array\n{\n    return [\n        'stats' => [\n            'total' => 100,\n        ],\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic $stats = [];\n```\n\n----------------------------------------\n\nTITLE: Autocompleting Text with a Datalist in Filament\nDESCRIPTION: This snippet demonstrates how to use a datalist to provide autocomplete options for a Filament text input using the `datalist()` method.  It requires the Filament Forms package. The user can still type any value, as it only provides suggestions.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/02-text-input.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nTextInput::make('manufacturer')\n    ->datalist([\n        'BMW',\n        'Ford',\n        'Mercedes-Benz',\n        'Porsche',\n        'Toyota',\n        'Volkswagen',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Providing Example CSV Data - PHP\nDESCRIPTION: This snippet shows how to add an example row to the CSV to show the user what the data should look like. The `example()` method accepts an example column value. Dependencies: Filament\\Actions\\Imports\\ImportColumn.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('sku')\n    ->example('ABC123')\n```\n\n----------------------------------------\n\nTITLE: Showing Form Component based on Operation\nDESCRIPTION: This code snippet demonstrates how to show a form component (TextInput 'password') only on the 'create' page using `visibleOn()` method and `Operation::Create`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Support\\Enums\\Operation;\n\nTextInput::make('password')\n    ->password()\n    ->required()\n    ->visibleOn(Operation::Create),\n```\n\n----------------------------------------\n\nTITLE: Testing Table Searching with Pest\nDESCRIPTION: This code snippet shows how to test table searching using `searchTable()`, `assertCanSeeTableRecords()`, and `assertCanNotSeeTableRecords()`. It verifies that the table displays only the records matching the search query and hides the rest.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/03-testing-tables.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can search posts by title', function () {\n    $posts = Post::factory()->count(10)->create();\n\n    $title = $posts->first()->title;\n\n    livewire(PostResource\\Pages\\ListPosts::class)\n        ->searchTable($title)\n        ->assertCanSeeTableRecords($posts->where('title', $title))\n        ->assertCanNotSeeTableRecords($posts->where('title', '!=', $title));\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Pagination in Filament Tables (PHP)\nDESCRIPTION: This code demonstrates how to disable pagination for a Filament table using the `$table->paginated(false)` method. When pagination is disabled, all records are displayed on a single page.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->paginated(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Boolean Radio Buttons - PHP\nDESCRIPTION: This snippet demonstrates how to create a boolean radio button group with \"Yes\" and \"No\" options using the `boolean()` method. It simplifies the creation of simple true/false choices.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/07-radio.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Radio;\n\nRadio::make('feedback')\n    ->label('Like this post?')\n    ->boolean()\n```\n\n----------------------------------------\n\nTITLE: Customize Tenant Menu Items\nDESCRIPTION: This code snippet illustrates how to customize tenant menu items by adding a settings link using the `tenantMenuItems()` method in the panel configuration. It defines an action that redirects to a settings page with a specific icon. Dependencies: `App\\Filament\\Pages\\Settings`, `Filament\\Actions\\Action`, `Filament\\Panel`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Pages\\Settings;\nuse Filament\\Actions\\Action;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantMenuItems([\n            Action::make('settings')\n                ->url(fn (): string => Settings::getUrl())\n                ->icon('heroicon-m-cog-8-tooth'),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing builder actions in PHP\nDESCRIPTION: This snippet shows how to customize a builder action, specifically the collapse all action, using the `collapseAllAction()` method and injecting the Action object.  It renames the label to \"Collapse all content\".\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->collapseAllAction(\n        fn (Action $action) => $action->label('Collapse all content'),\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Column Selection\nDESCRIPTION: This shows how to set the default selection state of an export column using `enabledByDefault()`.  If set to `false`, the column will not be selected by default when the user chooses columns to export.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('description')\n    ->enabledByDefault(false)\n```\n\n----------------------------------------\n\nTITLE: Adding Edit Pages to Resource Sub-Navigation - PHP\nDESCRIPTION: This code snippet demonstrates how to integrate the new Edit page into the resource's sub-navigation.  It uses the `getRecordSubNavigation()` method to add the `EditCustomerContact` page to the navigation items, making it easily accessible from the main Edit page.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/04-editing-records.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Resources\\Customers\\Pages;\nuse Filament\\Resources\\Pages\\Page;\n\npublic static function getRecordSubNavigation(Page $page): array\n{\n    return $page->generateNavigationItems([\n        // ...\n        Pages\\EditCustomerContact::class,\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ExportAction Implementation\nDESCRIPTION: This code snippet demonstrates the basic implementation of the `ExportAction` in Filament. It creates an export action and associates it with a custom exporter class (`ProductExporter`).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Exports\\ProductExporter;\nuse Filament\\Actions\\ExportAction;\n\nExportAction::make()\n    ->exporter(ProductExporter::class)\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Job Connection in Filament\nDESCRIPTION: This code snippet shows how to customize the connection used for export jobs in Filament by overriding the `getJobConnection()` method in the exporter class. This allows you to specify a different database connection or queue service. The default connection is used if null is returned.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\npublic function getJobConnection(): ?string\n{\n    return 'sqs';\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Navigation Groups\nDESCRIPTION: This code snippet demonstrates how to customize navigation groups by calling `navigationGroups()` in the Filament panel configuration. This allows specifying the label and icon for each group. It requires the Filament Panel class and the NavigationGroup class. The expected output is a customized navigation menu with the specified group labels and icons.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Navigation\\NavigationGroup;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->navigationGroups([\n            NavigationGroup::make()\n                 ->label('Shop')\n                 ->icon('heroicon-o-shopping-cart'),\n            NavigationGroup::make()\n                ->label('Blog')\n                ->icon('heroicon-o-pencil'),\n            NavigationGroup::make()\n                ->label(fn (): string => __('navigation.settings'))\n                ->icon('heroicon-o-cog-6-tooth')\n                ->collapsed(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Filament Importer Columns Automatically\nDESCRIPTION: This code snippet shows how to generate importer columns automatically based on the model's database columns, using the `--generate` option with the `make:filament-importer` Artisan command.  This saves time by automatically generating the basic column definitions.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-importer Product --generate\n```\n\n----------------------------------------\n\nTITLE: Customizing Default Pagination Page Option in Filament\nDESCRIPTION: This snippet demonstrates how to customize the default number of records shown per page in a Filament table using the `defaultPaginationPageOption()` method. The example sets the default to 25 records per page.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->defaultPaginationPageOption(25);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Icon Affixes to Filament Text Input\nDESCRIPTION: This snippet shows how to add prefix and suffix icons to a Filament text input field using the `prefixIcon()` and `suffixIcon()` methods. It requires the Filament Forms and Filament Support packages. It adds a globe icon as a suffix to the 'domain' field.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/02-text-input.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTextInput::make('domain')\n    ->url()\n    ->suffixIcon(Heroicon::GlobeAlt)\n```\n\n----------------------------------------\n\nTITLE: Customize TextInput Phone Number Validation - PHP\nDESCRIPTION: This code snippet shows how to customize phone number validation for a TextInput field using the `telRegex()` method. By default, a specific regular expression is used for `tel()` fields. The code snippet demonstrates overriding that default regular expression with a new one, providing more specific validation rules for the phone number format.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/02-text-input.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('phone')\n    ->tel()\n    ->telRegex('/^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\.\\/0-9]*$/')\n```\n\n----------------------------------------\n\nTITLE: Customizing Navigation Label - PHP\nDESCRIPTION: This code demonstrates customizing the navigation item label for a resource using the `$navigationLabel` property. This label appears in the navigation menu and overrides the default plural label.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?string $navigationLabel = 'Mis Clientes';\n```\n\n----------------------------------------\n\nTITLE: Specifying related model for a MorphTo relationship\nDESCRIPTION: This snippet demonstrates how to specify the related model for a `MorphTo` relationship using the `relatedModel` parameter in the `relationship()` method. This enables Filament to create new records for the `MorphTo` relationship instead of just updating existing ones. In this example, `Organization::class` is specified as the related model for the `customer` relationship.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_92\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\Organization;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Group;\n\nGroup::make()\n    ->relationship('customer', relatedModel: Organization::class)\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Modifying cancel button - Filament Actions (PHP)\nDESCRIPTION: This snippet demonstrates how to modify the default cancel button in the footer of a Filament modal using `modalCancelAction()`. Requires Filament Actions.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('help')\n    ->modalContent(view('actions.help'))\n    ->modalCancelAction(fn (Action $action) => $action->label('Close'))\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Value in Blade\nDESCRIPTION: Illustrates how to access a configuration value set in a custom field class using the getter method (e.g., `$getZoom()`) within the Blade view.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/20-custom-fields.md#_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n<x-dynamic-component\n    :component=\"$getFieldWrapperView()\"\n    :field=\"$field\"\n>\n    {{ $getZoom() }}\n</x-dynamic-component>\n```\n\n----------------------------------------\n\nTITLE: Overriding Export Formats in Filament Exporter Class\nDESCRIPTION: This code snippet demonstrates how to override the `getFormats()` method in a Filament exporter class to set the default export formats for all actions using that exporter. This is an alternative to setting the formats on each individual `ExportAction`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Exports\\Enums\\ExportFormat;\n\npublic function getFormats(): array\n{\n    return [\n        ExportFormat::Csv,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Eloquent record in Blade view\nDESCRIPTION: This snippet demonstrates how to access the current Eloquent record associated with the infolist using the `$record` variable. It then displays the `name` attribute of the record.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/08-custom-entries.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<x-dynamic-component\n    :component=\"$getEntryWrapperView()\"\n    :entry=\"$entry\"\n>\n    {{ $record->name }}\n</x-dynamic-component>\n```\n\n----------------------------------------\n\nTITLE: Configuration Value in Filament Component Constructor - PHP\nDESCRIPTION: This code demonstrates how to accept a configuration value in the constructor of a custom Filament component. The `make()` method passes the heading value to the constructor, which then calls the `heading()` setter method. The `evaluate()` method is used in the getter to handle both static values and Closures. It requires Filament and the Component class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/07-custom-components.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Closure;\nuse Filament\\Schemas\\Components\\Component;\n\nclass Chart extends Component\n{\n    protected string $view = 'filament.schemas.components.chart';\n    \n    protected string | Closure | null $heading = null;\n\n    public function __construct(string | Closure | null $heading = null)\n    {\n        $this->heading($heading)\n    }\n\n    public static function make(string | Closure | null $heading = null): static\n    {\n        return app(static::class, ['heading' => $heading]);\n    }\n    \n    public function heading(string | Closure | null $heading): static\n    {\n        $this->heading = $heading;\n\n        return $this;\n    }\n\n    public function getHeading(): ?string\n    {\n        return $this->evaluate($this->heading);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Money in Filament Infolist\nDESCRIPTION: Formats a monetary value using the `money()` method in a Filament Infolist TextEntry. It requires a currency code (e.g., 'EUR'). Accepts both static values and functions for dynamic calculation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('price')\n    ->money('EUR')\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Values in a Column - Filament PHP\nDESCRIPTION: This snippet demonstrates how to use the `multiple()` method to cast the values in a column to an array, using a delimiter to split the values.  It uses the `ImportColumn` class from Filament. The delimiter is a comma in this example.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('documentation_urls')\n    ->multiple(',');\n```\n\n----------------------------------------\n\nTITLE: Custom Page Content with Schema - PHP\nDESCRIPTION: This code demonstrates how to customize the content of a view page in Filament using schemas. By overriding the `content()` method and utilizing schema components, you can define the structure and elements that appear on the page, including infolists, forms, and relation managers.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/05-viewing-records.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Schema;\n\npublic function content(Schema $schema): Schema\n{\n    return $schema\n        ->components([\n            $this->hasInfolist() // This method returns `true` if the page has an infolist defined\n                ? $this->getInfolistContentComponent() // This method returns a component to display the infolist that is defined in this resource\n                : $this->getFormContentComponent(), // This method returns a component to display the form that is defined in this resource\n            $this->getRelationManagersContentComponent(), // This method returns a component to display the relation managers that are defined in this resource\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the save notification\nDESCRIPTION: This code shows how to customize the success notification that is dispatched after a record is created.  It allows for setting a custom title or customizing the entire notification using the `successNotificationTitle()` or `successNotification()` methods respectively. Dependencies include `Filament\\Actions\\CreateAction` and `Filament\\Notifications\\Notification`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/04-create.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\CreateAction;\n\nCreateAction::make()\n    ->successNotificationTitle('User registered')\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\CreateAction;\nuse Filament\\Notifications\\Notification;\n\nCreateAction::make()\n    ->successNotification(\n       Notification::make()\n            ->success()\n            ->title('User registered')\n            ->body('The user has been created successfully.'),\n    )\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\CreateAction;\n\nCreateAction::make()\n    ->successNotification(null)\n```\n\n----------------------------------------\n\nTITLE: Defining Bulk Actions\nDESCRIPTION: This snippet demonstrates how to define bulk actions for a Filament table using the `bulkActions()` method. Bulk actions are triggered when a user selects rows in the table.  These actions appear in a dropdown menu in the top left corner of the table.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/04-actions.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->bulkActions([\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Display Format - PHP\nDESCRIPTION: This snippet showcases how to customize the display format of a DatePicker component using the `displayFormat()` method, independently from the storage format. The example also disables the native picker.  It accepts PHP date formatting tokens for specifying the desired display format.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/08-date-time-picker.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\n\nDatePicker::make('date_of_birth')\n    ->native(false)\n    ->displayFormat('d/m/Y')\n```\n\n----------------------------------------\n\nTITLE: Styling Navigation Badge Contextually\nDESCRIPTION: This code snippet demonstrates how to style the navigation badge contextually using the `getNavigationBadgeColor()` method in a Filament resource or page class. The method should return one of the following strings: 'danger', 'gray', 'info', 'primary', 'success', or 'warning'.  This relies on static::getModel()::count(). The expected output is a navigation item with a badge styled according to the returned color.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\npublic static function getNavigationBadgeColor(): ?string\n{\n    return static::getModel()::count() > 10 ? 'warning' : 'primary';\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Profile Page in Filament Panel (PHP)\nDESCRIPTION: This code snippet shows how to enable the profile page feature within a Filament panel. This feature is a prerequisite for easily setting up multi-factor authentication.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/02-multi-factor-authentication.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->profile();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom User Menu Items in Filament (PHP)\nDESCRIPTION: This code snippet demonstrates how to register custom user menu items in Filament using the `userMenuItems()` method within the `panel()` method of a Filament Panel. It shows how to add a new menu item linked to a settings page using Filament Actions.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/03-user-menu.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Pages\\Settings;\nuse Filament\\Actions\\Action;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->userMenuItems([\n            Action::make()\n                ->label('Settings')\n                ->url(fn (): string => Settings::getUrl())\n                ->icon('heroicon-o-cog-6-tooth'),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Tag Reordering - PHP\nDESCRIPTION: Allows users to reorder the tags within the TagsInput component. The `reorderable()` method enables or disables reordering.  It accepts a boolean value or a function to dynamically calculate it.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/14-tags-input.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TagsInput;\n\nTagsInput::make('tags')\n    ->reorderable()\n```\n\n----------------------------------------\n\nTITLE: Adding Global Scope for One-to-Many Tenancy - PHP\nDESCRIPTION: This code snippet demonstrates how to use a global scope in a Laravel Eloquent model to filter records based on the current user's team ID. This is a simplified approach to tenancy suitable for one-to-many relationships.  It requires the `team_id` column on the table and assumes the user has a `team_id` property.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass Post extends Model\n{\n    protected static function booted(): void\n    {\n        static::addGlobalScope('team', function (Builder $query) {\n            if (auth()->hasUser()) {\n                $query->where('team_id', auth()->user()->team_id);\n                // or with a `team` relationship defined:\n                $query->whereBelongsTo(auth()->user()->team);\n            }\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Table Bulk Delete Action - PHP\nDESCRIPTION: This snippet tests a table bulk delete action. It selects records using `selectTableRecords()`, calls the delete action using `callAction()`, and asserts that the records are no longer visible in the table and are missing from the database.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/02-testing-resources.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Resources\\Users\\Pages\\ListUsers;\nuse App\\Models\\User;\nuse Filament\\Actions\\Testing\\TestAction;\nuse function Pest\\Laravel\\assertDatabaseMissing;\n\nit('can bulk delete users', function () {\n    $users = User::factory()->count(5)->create();\n\n    livewire(ListUsers::class)\n        ->assertCanSeeTableRecords($users)\n        ->selectTableRecords($users)\n        ->callAction(TestAction::make(DeleteBulkAction::class)->table()->bulk())\n        ->assertNotified()\n        ->assertCanNotSeeTableRecords($users);\n\n    $users->each(fn (User $user) => assertDatabaseMissing($user));\n});\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Input Type for Filament Text Input\nDESCRIPTION: This snippet showcases how to set the HTML input type of a text input field in Filament using methods like `email()`, `numeric()`, `integer()`, `password()`, `tel()`, and `url()`. These methods also provide validation. Alternatively, `type()` can be used to specify a custom HTML input type.  It depends on the Filament Forms package.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/02-text-input.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('text')\n    ->email() // or\n    ->numeric() // or\n    ->integer() // or\n    ->password() // or\n    ->tel() // or\n    ->url()\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('backgroundColor')\n    ->type('color')\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('text')\n    ->email(FeatureFlag::active()) // or\n    ->numeric(FeatureFlag::active()) // or\n    ->integer(FeatureFlag::active()) // or\n    ->password(FeatureFlag::active()) // or\n    ->tel(FeatureFlag::active()) // or\n    ->url(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Creating a new Filament Panel\nDESCRIPTION: This command creates a new Filament panel with the specified name. It generates a configuration file in the `app/Providers/Filament` directory, which needs to be registered in `bootstrap/providers.php` (Laravel 11+) or `config/app.php` (Laravel 10-).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/05-panel-configuration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-panel app\n```\n\n----------------------------------------\n\nTITLE: Adding Soft Deletes to Edit Page - PHP\nDESCRIPTION: This code snippet demonstrates how to add actions for deleting, force deleting, and restoring records to the header of the Edit page in a Filament resource. It uses the `DeleteAction`, `ForceDeleteAction`, and `RestoreAction` from the Filament Actions package.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/06-deleting-records.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions;\n\nprotected function getHeaderActions(): array\n{\n    return [\n        Actions\\DeleteAction::make(),\n        Actions\\ForceDeleteAction::make(),\n        Actions\\RestoreAction::make(),\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Responsive Widget Grid in Filament\nDESCRIPTION: This code snippet demonstrates how to create a responsive widget grid in Filament, where the number of columns changes based on the browser's breakpoint. The `getColumns()` method returns an array mapping breakpoints to the number of columns to use at each breakpoint.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/01-overview.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function getColumns(): int | string | array\n{\n    return [\n        'md' => 4,\n        'xl' => 5,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Constraining Foreign Key to Custom User Table - PHP\nDESCRIPTION: This snippet shows how to constrain the foreign key in the imports table to a different table than `users`, using the `constrained()` method and passing the table name as argument.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$table->foreignId('user_id')->constrained('admins')->cascadeOnDelete();\n```\n\n----------------------------------------\n\nTITLE: Ordering Navigation Groups\nDESCRIPTION: This code snippet shows how to reorder existing navigation groups by passing their labels to the `navigationGroups()` method in the Panel configuration. This allows changing the order without defining entire `NavigationGroup` objects. It relies on the Filament Panel class. The expected output is a reordered navigation menu.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n$panel\n    ->navigationGroups([\n        'Shop',\n        'Blog',\n        'Settings',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Generating Filament Resource with Soft Deletes\nDESCRIPTION: This command creates a Filament resource for the `Customer` model and adds functionality for handling soft deletes. It allows restoring, force deleting, and filtering trashed records.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-resource Customer --soft-deletes\n```\n\n----------------------------------------\n\nTITLE: Registering View Page in Resource - PHP\nDESCRIPTION: This code snippet demonstrates how to register a newly created view page within a Filament resource's `getPages()` method. This step is crucial for Filament to recognize and route to the new view page correctly.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/05-viewing-records.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic static function getPages(): array\n{\n    return [\n        'index' => Pages\\ListUsers::route('/'),\n        'create' => Pages\\CreateUser::route('/create'),\n        'view' => Pages\\ViewUser::route('/{record}'),\n        'edit' => Pages\\EditUser::route('/{record}/edit'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Table Sorting with Pest\nDESCRIPTION: This code snippet demonstrates how to test table sorting functionality using `sortTable()` and `assertCanSeeTableRecords()` with the `inOrder` parameter. It sorts the table by 'title' in both ascending and descending order and asserts that the records are displayed in the correct order.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/03-testing-tables.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can sort posts by title', function () {\n    $posts = Post::factory()->count(10)->create();\n\n    livewire(PostResource\\Pages\\ListPosts::class)\n        ->sortTable('title')\n        ->assertCanSeeTableRecords($posts->sortBy('title'), inOrder: true)\n        ->sortTable('title', 'desc')\n        ->assertCanSeeTableRecords($posts->sortByDesc('title'), inOrder: true);\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Custom Class Generator\nDESCRIPTION: This snippet illustrates how to bind a custom class generator in the service container, replacing the default Filament generator.  It uses the `bind` method within a service provider's `register` method to associate the base class generator with the custom implementation. This allows Filament to use the customized generator when creating files.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/04-file-generation.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Commands\\FileGenerators\\Resources\\ResourceClassGenerator;\nuse Filament\\Commands\\FileGenerators\\Resources\\ResourceClassGenerator as BaseResourceClassGenerator;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    public function register()\n    {\n        // ...\n    \n        $this->app->bind(BaseResourceClassGenerator::class, ResourceClassGenerator::class);\n        \n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Table Filtering Functionality - PHP\nDESCRIPTION: This snippet demonstrates how to test table filtering functionality. It uses the `filterTable()` method to filter the table by a specific column and value, and `assertCanSeeTableRecords()` and `assertCanNotSeeTableRecords()` to verify the filter results.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/02-testing-resources.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Resources\\Users\\Pages\\ListUsers;\nuse App\\Models\\User;\n\nit('can filter users by `locale`', function () {\n    $users = User::factory()->count(5)->create();\n\n    livewire(ListUsers::class)\n        ->assertCanSeeTableRecords($users)\n        ->filterTable('locale', $users->first()->locale)\n        ->assertCanSeeTableRecords($users->where('locale', $users->first()->locale))\n        ->assertCanNotSeeTableRecords($users->where('locale', '!=', $users->first()->locale));\n});\n```\n\n----------------------------------------\n\nTITLE: Filament Link as Button - Blade\nDESCRIPTION: This snippet showcases how to use the Filament Link Blade component as a button element instead of a link.  The `tag` attribute is set to \"button\", and a `wire:click` event is added to trigger an action when the button is clicked. This is useful for executing Livewire actions.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-link.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link\n    wire:click=\"openNewUserModal\"\n    tag=\"button\"\n>\n    New user\n</x-filament::link>\n```\n\n----------------------------------------\n\nTITLE: Adding a Badge to Navigation Item\nDESCRIPTION: This code snippet demonstrates how to add a badge to a navigation item using the `getNavigationBadge()` method in a Filament resource or page class. The method should return the content of the badge, which can be a string or a number.  It depends on the model to get the count. The expected output is a navigation item with a badge displaying the returned content.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\npublic static function getNavigationBadge(): ?string\n{\n    return static::getModel()::count();\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Email Code Expiration Time in Filament\nDESCRIPTION: This code snippet demonstrates how to change the expiration time window for email codes using the `codeWindow()` method on the `EmailCodeAuthentication` instance. The `codeWindow()` method accepts an integer, representing the number of 30-second windows for which the code is valid.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/02-multi-factor-authentication.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Auth\\MultiFactor\\EmailCode\\EmailCodeAuthentication;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->multiFactorAuthentication([\n            EmailCodeAuthentication::make()\n                ->codeWindow(4),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cursor Pagination in Filament Tables (PHP)\nDESCRIPTION: This code snippet demonstrates how to enable cursor pagination in a Filament table using the `paginationMode()` method with `PaginationMode::Cursor`. This modifies the table to use cursor-based pagination instead of page numbers.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Enums\\PaginationMode;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->paginationMode(PaginationMode::Cursor);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding content before form field label - PHP\nDESCRIPTION: This snippet demonstrates adding an icon before a text input's label using Filament's `beforeLabel()` method. It utilizes the `Icon` component and displays it inline with and to the left of the label.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Icon;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTextInput::make('name')\n    ->beforeLabel(Icon::make(Heroicon::Star))\n```\n\n----------------------------------------\n\nTITLE: Changing CSV Delimiter - PHP\nDESCRIPTION: This snippet shows how to change the CSV delimiter by using the `csvDelimiter()` method on the `ImportAction`. The method accepts a single character as the new delimiter. Dependencies: App\\Filament\\Imports\\ProductImporter, Filament\\Actions\\ImportAction.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Imports\\ProductImporter;\nuse Filament\\Actions\\ImportAction;\n\nImportAction::make()\n    ->importer(ProductImporter::class)\n    ->csvDelimiter(';')\n```\n\n----------------------------------------\n\nTITLE: Asserting Schema State - PHP\nDESCRIPTION: This snippet demonstrates how to assert the state of a Filament form schema using `assertSchemaStateSet()`. It uses `Illuminate\\Support\\Str` and `Pest\\Livewire\\livewire`. The example checks if the 'slug' field is automatically generated from the 'title' field. You can specify the schema name as the second argument to `assertSchemaStateSet` when there are multiple schemas.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Support\\Str;\nuse function Pest\\Livewire\\livewire;\n\nit('can automatically generate a slug from the title', function () {\n    $title = fake()->sentence();\n\n    livewire(CreatePost::class)\n        ->fillForm([\n            'title' => $title,\n        ])\n        ->assertSchemaStateSet([\n            'slug' => Str::slug($title),\n        ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Switching Navigation Icon when Active\nDESCRIPTION: This code snippet demonstrates how to customize the navigation item's icon when it is active, using the `$activeNavigationIcon` property in a Filament resource or page class.  The icon should be a string representing a Heroicon. No specific dependencies are required other than Filament. The expected output is a navigation item with a different icon when the user is currently on the resource or page.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nprotected static ?string $activeNavigationIcon = 'heroicon-o-document-text';\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Navigation Groups (Advanced) - PHP\nDESCRIPTION: This code snippet demonstrates registering custom navigation groups using the `navigation()` method and the `NavigationGroup` class. It allows you to organize navigation items into groups, providing a more structured navigation experience.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Pages\\HomePageSettings;\nuse App\\Filament\\Resources\\Categories\\CategoryResource;\nuse App\\Filament\\Resources\\Pages\\PageResource;\nuse Filament\\Navigation\\NavigationBuilder;\nuse Filament\\Navigation\\NavigationGroup;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->navigation(function (NavigationBuilder $builder): NavigationBuilder {\n            return $builder->groups([\n                NavigationGroup::make('Website')\n                    ->items([\n                        ...PageResource::getNavigationItems(),\n                        ...CategoryResource::getNavigationItems(),\n                        ...HomePageSettings::getNavigationItems(),\n                    ]),\n            ]);\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Number in TextColumn\nDESCRIPTION: Formats a column as a number using the `numeric()` method in Filament's `TextColumn`. This example demonstrates basic numeric formatting with the default locale.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('stock')\n    ->numeric()\n```\n\n----------------------------------------\n\nTITLE: Positioning ToggleButtons Inline (PHP)\nDESCRIPTION: This snippet demonstrates how to display the ToggleButtons inline using the `inline()` method.  The method accepts an optional boolean argument to control the inline display based on a condition.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/18-toggle-buttons.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\n\nToggleButtons::make('feedback')\n    ->label('Like this post?')\n    ->boolean()\n    ->inline()\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\n\nToggleButtons::make('feedback')\n    ->label('Like this post?')\n    ->boolean()\n    ->inline(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Passing a Collection to Media Library File Upload\nDESCRIPTION: This code snippet shows how to assign a specific collection to the `SpatieMediaLibraryFileUpload` component.  The `collection('avatars')` method groups uploaded files into the 'avatars' collection within the media library.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\SpatieMediaLibraryFileUpload;\n\nSpatieMediaLibraryFileUpload::make('avatar')\n    ->collection('avatars')\n```\n\n----------------------------------------\n\nTITLE: Registering Additional View Page - PHP\nDESCRIPTION: This code shows how to register an additional view page within a Filament resource. This involves adding the new page to the `getPages()` method, defining its route, and connecting it to the appropriate controller or logic.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/05-viewing-records.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic static function getPages(): array\n{\n    return [\n        'index' => Pages\\ListCustomers::route('/'),\n        'create' => Pages\\CreateCustomer::route('/create'),\n        'view' => Pages\\ViewCustomer::route('/{record}'),\n        'view-contact' => Pages\\ViewCustomerContact::route('/{record}/contact'),\n        'edit' => Pages\\EditCustomer::route('/{record}/edit'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extra HTML Attributes to Navigation Groups\nDESCRIPTION: This code snippet demonstrates how to add extra HTML attributes to the outer DOM element of a navigation group using the `extraSidebarAttributes()` and `extraTopbarAttributes()` methods. These attributes are applied specifically to the sidebar and topbar representations of the group, respectively. It requires Filament's `NavigationGroup` class. The expected output is modified HTML elements for the navigation groups with additional attributes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nNavigationGroup::make()\n    ->extraSidebarAttributes(['class' => 'featured-sidebar-group']),\n    ->extraTopbarAttributes(['class' => 'featured-topbar-group']),\n```\n\n----------------------------------------\n\nTITLE: Registering Render Hook with Multiple Scopes - PHP\nDESCRIPTION: This snippet illustrates how to register a render hook with multiple scopes. The hook will be rendered on any page or component specified in the `scopes` array.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/01-render-hooks.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Facades\\FilamentView;\nuse Filament\\View\\PanelsRenderHook;\n\nFilamentView::registerRenderHook(\n    PanelsRenderHook::PAGE_START,\n    fn (): View => view('warning-banner'),\n    scopes: [\n        \\App\\Filament\\Resources\\Users\\Pages\\CreateUser::class,\n        \\App\\Filament\\Resources\\Users\\Pages\\EditUser::class,\n    ],\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Chart Data from Eloquent Model - PHP\nDESCRIPTION: This snippet illustrates how to generate chart data from an Eloquent model using the `flowframe/laravel-trend` package. It queries the database for blog posts created within the current year, aggregates the data per month, and returns the data and labels for the chart. The package must be installed prior to use.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/03-charts.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Flowframe\\Trend\\Trend;\nuse Flowframe\\Trend\\TrendValue;\n\nprotected function getData(): array\n{\n    $data = Trend::model(BlogPost::class)\n        ->between(\n            start: now()->startOfYear(),\n            end: now()->endOfYear(),\n        )\n        ->perMonth()\n        ->count();\n\n    return [\n        'datasets' => [\n            [\n                'label' => 'Blog posts',\n                'data' => $data->map(fn (TrendValue $value) => $value->aggregate),\n            ],\n        ],\n        'labels' => $data->map(fn (TrendValue $value) => $value->date),\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Search for CheckboxList Options - PHP\nDESCRIPTION: This snippet demonstrates how to enable a search input for the `CheckboxList` component using the `searchable()` method. This allows users to easily find options when dealing with a large number of choices. It requires the `Filament\\Forms\\Components\\CheckboxList` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/06-checkbox-list.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technologies')\n    ->options([\n        // ...\n    ])\n    ->searchable()\n```\n\n----------------------------------------\n\nTITLE: Displaying square images with ImageColumn in Filament\nDESCRIPTION: This snippet demonstrates how to display the image using a 1:1 aspect ratio by using the `square()` method. The `imageHeight()` is also used to define the size of the square.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/04-image.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\ImageColumn;\n\nImageColumn::make('avatar')\n    ->imageHeight(40)\n    ->square()\n```\n\n----------------------------------------\n\nTITLE: Creating Responsive Widget Widths in Filament\nDESCRIPTION: This code snippet shows how to change the widget width based on the responsive breakpoint of the browser using the `$columnSpan` property as an array. This allows for different widget widths on different screen sizes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/01-overview.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nprotected int | string | array $columnSpan = [\n    'md' => 2,\n    'xl' => 3,\n];\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to a Text Column - PHP\nDESCRIPTION: This snippet demonstrates how to add an icon to a TextColumn in Filament. The `icon()` method allows setting a static icon using Heroicons. The position of the icon can be adjusted using `iconPosition()` and the color using `iconColor()`. These methods can also accept functions to dynamically calculate these properties.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTextColumn::make('email')\n    ->icon(Heroicon::Envelope)\n```\n\n----------------------------------------\n\nTITLE: Overriding File Disk in Filament Exporter Class\nDESCRIPTION: This code snippet demonstrates how to override the `getFileDisk()` method in a Filament exporter class to set the file disk for all actions using that exporter. This is an alternative to setting the disk on each individual `ExportAction` or globally.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getFileDisk(): string\n{\n    return 's3';\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Table Column Existence with Truth Test\nDESCRIPTION: This code snippet extends the column existence test by including a truth test function. It demonstrates how to use `assertTableColumnExists()` with a closure that asserts a specific configuration (description below) for the 'author' column, based on a `TextColumn` instance and a given record.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/03-testing-tables.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nit('has an author column', function () {\n    $post = Post::factory()->create();\n    \n    livewire(PostResource\\Pages\\ListPosts::class)\n        ->assertTableColumnExists('author', function (TextColumn $column): bool {\n            return $column->getDescriptionBelow() === $post->subtitle;\n        }, $post);\n});\n```\n\n----------------------------------------\n\nTITLE: Making Navigation Groups Not Collapsible\nDESCRIPTION: This code snippet demonstrates how to make a navigation group not collapsible using the `collapsible(false)` method on the `NavigationGroup` object. It requires Filament's `NavigationGroup` class. The expected result is a navigation group that always remains open.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Navigation\\NavigationGroup;\n\nNavigationGroup::make()\n    ->label('Settings')\n    ->icon('heroicon-o-cog-6-tooth')\n    ->collapsible(false);\n```\n\n----------------------------------------\n\nTITLE: Scoping Relationship for Average Calculation in Filament Export\nDESCRIPTION: This code snippet demonstrates how to scope a relationship using a closure before calculating the average in a Filament export. The key of the array passed to the `avg()` method is the relationship name, and the value is a function to scope the Eloquent query using the `Builder` class. This allows for filtering related records before aggregation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nExportColumn::make('users_avg_age')\n    ->avg([\n        'users' => fn (Builder $query) => $query->where('is_active', true),\n    ], 'age')\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone - PHP\nDESCRIPTION: This snippet illustrates how to set the timezone for a DateTimePicker component using the `timezone()` method.  It allows users to manage dates in their own timezone, while the application still stores dates using its configured timezone.  The example sets the timezone to 'America/New_York'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/08-date-time-picker.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DateTimePicker;\n\nDateTimePicker::make('published_at')\n    ->timezone('America/New_York')\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Resource\nDESCRIPTION: This command generates a new Filament resource that is nested under another resource. The `--nested` option indicates that the resource is intended to be a child of another resource, providing a full-page experience for creating and editing related data.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/08-nesting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-resource Lesson --nested\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Provider for Filament Plugin\nDESCRIPTION: This code snippet demonstrates how to configure the service provider for a Filament plugin, registering a Livewire component and an Alpine component for the plugin. It uses `FilamentAsset` facade to register the Alpine component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/11-plugins/03-building-a-panel-plugin.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Assets\\AlpineComponent;\nuse Filament\\Support\\Facades\\FilamentAsset;\nuse Livewire\\Livewire;\nuse Spatie\\LaravelPackageTools\\Package;\nuse Spatie\\LaravelPackageTools\\PackageServiceProvider;\n\nclass ClockWidgetServiceProvider extends PackageServiceProvider\n{\n    public static string $name = 'clock-widget';\n\n    public function configurePackage(Package $package): void\n    {\n        $package->name(static::$name)\n            ->hasViews()\n            ->hasTranslations();\n    }\n\n    public function packageBooted(): void\n    {\n        Livewire::component('clock-widget', ClockWidget::class);\n\n        // Asset Registration\n        FilamentAsset::register(\n            assets:[\n                 AlpineComponent::make('clock-widget', __DIR__ . '/../resources/dist/clock-widget.js'),\n            ],\n            package: 'awcodes/clock-widget'\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Word Count with Custom End String - PHP\nDESCRIPTION: This snippet demonstrates how to limit the number of words displayed in a text entry using the `words()` method and customizing the end string. It limits the text to a maximum of 10 words and appends ' (more)' to the end of the truncated text.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('description')\n    ->words(10, end: ' (more)')\n```\n\n----------------------------------------\n\nTITLE: Using Utility Injection (PHP)\nDESCRIPTION: Shows how to use the utility injection feature to configure a custom field.  A closure is passed to the `zoom()` method that retrieves data from the `Conference` model using the `$record` parameter. Requires `App\\Filament\\Forms\\Components\\LocationPicker`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/20-custom-fields.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Forms\\Components\\LocationPicker;\n\nLocationPicker::make('location')\n    ->zoom(fn (Conference $record): float => $record->isGlobal() ? 1 : 0.5)\n```\n\n----------------------------------------\n\nTITLE: Adding Content Above Error - Filament PHP\nDESCRIPTION: This example demonstrates adding content above a Filament form field's error message using the `aboveErrorMessage()` method. It requires `TextInput`, `Icon`, and `Heroicon` classes. The added content is displayed only when the field has an error. The field is also marked as required.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Icon;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTextInput::make('name')\n    ->required()\n    ->aboveErrorMessage([\n        Icon::make(Heroicon::Star),\n        'This is the content above the field\\'s error message'\n    ])\n```\n\n----------------------------------------\n\nTITLE: Formatting Number with Decimal Places (PHP)\nDESCRIPTION: This snippet shows how to format a summary value as a number with a specified number of decimal places using the `numeric()` method. This example formats the average rating with 0 decimal places.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Average;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('rating')\n    ->summarize(Average::make()->numeric(\n        decimalPlaces: 0,\n    ))\n```\n\n----------------------------------------\n\nTITLE: Adding Badge to Filament Button - Blade\nDESCRIPTION: These snippets demonstrate how to add a badge to a Filament button using the `badge` slot.  The badge content is placed within the `<x-slot name=\"badge\">` tag.  The `badge-color` attribute can be used to change the color of the badge.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-button.md#_snippet_7\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::button>\n    Mark notifications as read\n    \n    <x-slot name=\"badge\">\n        3\n    </x-slot>\n</x-filament::button>\n```\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::button badge-color=\"danger\">\n    Mark notifications as read\n    \n    <x-slot name=\"badge\">\n        3\n    </x-slot>\n</x-filament::button>\n```\n\n----------------------------------------\n\nTITLE: Formatting Export Column Value\nDESCRIPTION: This shows how to format the value of an export column using `formatStateUsing()`. This allows for applying custom formatting to the column's value before it is exported.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('status')\n    ->formatStateUsing(fn (string $state): string => __(\"statuses.{$state}\"))\n```\n\n----------------------------------------\n\nTITLE: Customizing Global Search Result Titles in Filament (PHP)\nDESCRIPTION: This snippet shows how to override the `getGlobalSearchResultTitle()` method to customize the title displayed in global search results. It returns either a plain text string or an instance of `Illuminate\\Support\\HtmlString` or `Illuminate\\Contracts\\Support\\Htmlable` to render HTML or Markdown.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/09-global-search.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\Support\\Htmlable;\n\npublic static function getGlobalSearchResultTitle(Model $record): string | Htmlable\n{\n    return $record->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Color of a Filament Action Button (PHP)\nDESCRIPTION: This code snippet demonstrates how to set the color of an action's trigger button using the `color()` method. This allows you to visually indicate the significance of the action, such as using 'danger' for delete actions.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('delete')\n    ->color('danger')\n```\n\n----------------------------------------\n\nTITLE: Rendering private images with ImageColumn in Filament\nDESCRIPTION: This snippet demonstrates how to generate temporary URLs for private images using the `visibility()` method.  It sets the visibility to 'private', requiring a signed URL to access the image.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/04-image.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\ImageColumn;\n\nImageColumn::make('header_image')\n    ->visibility('private')\n```\n\n----------------------------------------\n\nTITLE: Authorization - Controlling Settings Editing (PHP)\nDESCRIPTION: This code shows how to control editing permissions for a Filament settings page by defining a `canEdit()` method. This method should return `true` if the user is authorized to edit the settings and `false` otherwise. If `false`, the settings form becomes read-only.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-settings-plugin/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic static function canEdit(): bool\n{\n    return auth()->user()->isAdmin();\n}\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript to determine text content in Filament\nDESCRIPTION: This code snippet demonstrates how to use JavaScript to dynamically calculate the label content of a TextInput field in Filament. The code uses JsContent to execute javascript. The `$get` and `$state` variables are automatically available in the javascript context.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_63\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\JsContent;\n\nTextInput::make('greetingResponse')\n    ->label(JsContent::make(<<<'JS'\n        ($get('name') === 'John Doe') ? 'Hello, John!' : 'Hello, stranger!'\n        JS\n    ))\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Header with a View (PHP)\nDESCRIPTION: This code demonstrates how to customize the entire header of a Filament table by passing a view to the `$table->header()` method. This allows for complete control over the header's HTML structure and styling. The view can be passed data such as a heading.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->header(view('tables.header', [\n            'heading' => 'Clients',\n        ]))\n        ->columns([\n            // ...\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Field in PHP\nDESCRIPTION: Shows how to use the custom field, configuring it with the defined zoom method. Requires `App\\Filament\\Forms\\Components\\LocationPicker`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/20-custom-fields.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Forms\\Components\\LocationPicker;\n\nLocationPicker::make('location')\n    ->zoom(0.5)\n```\n\n----------------------------------------\n\nTITLE: Generating Resource Page URL with Parameters - PHP\nDESCRIPTION: This code snippet shows how to generate a URL to a resource page with parameters (e.g., 'edit') and passing a record to it using `getUrl()`. It requires the resource class path.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Resources\\Customers\\CustomerResource;\n\nCustomerResource::getUrl('edit', ['record' => $customer]); // /admin/customers/edit/1\n```\n\n----------------------------------------\n\nTITLE: Live Updating Chart Data (Polling) - PHP\nDESCRIPTION: This snippet shows how to configure the polling interval for live-updating chart data. The `$pollingInterval` property controls how often the chart data is refreshed. Setting the property to `null` disables polling.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/03-charts.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nprotected ?string $pollingInterval = '10s';\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected ?string $pollingInterval = null;\n```\n\n----------------------------------------\n\nTITLE: Setting an Icon for a Filament Action (PHP)\nDESCRIPTION: This code snippet demonstrates how to set an icon for an action's trigger button using the `icon()` method. This adds visual detail to the UI, making the action more easily recognizable.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('edit')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n    ->icon('heroicon-m-pencil-square')\n```\n\n----------------------------------------\n\nTITLE: Customizing Navigation Label Dynamically - PHP\nDESCRIPTION: This code snippet illustrates how to customize the navigation label dynamically using the `getNavigationLabel()` method. This allows for dynamic label generation, potentially using translations.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\npublic static function getNavigationLabel(): string\n{\n    return __('filament/resources/customer.navigation_label');\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-Select in Filament QueryBuilder (PHP)\nDESCRIPTION: This snippet shows how to enable multiple selections in a SelectConstraint using the `multiple()` method.  When multiple options are selected, the table will display records that match any of the selected values.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\SelectConstraint;\n\nSelectConstraint::make('status')\n    ->multiple()\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Direction for CheckboxList - PHP\nDESCRIPTION: This example shows how to set the grid direction for the `CheckboxList` component using the `gridDirection()` method. It allows you to arrange the checkboxes horizontally (in rows) instead of the default vertical arrangement (in columns). It requires `Filament\\Forms\\Components\\CheckboxList` and `Filament\\Support\\Enums\\GridDirection` classes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/06-checkbox-list.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\nuse Filament\\Support\\Enums\\GridDirection;\n\nCheckboxList::make('technologies')\n    ->options([\n        // ...\n    ])\n    ->columns(2)\n    ->gridDirection(GridDirection::Row)\n```\n\n----------------------------------------\n\nTITLE: Adding Actions to Global Search Results in Filament (PHP)\nDESCRIPTION: This snippet shows how to add actions (buttons) below each search result. Actions can open a URL or dispatch a Livewire event. The `getGlobalSearchResultActions()` method is overridden to return an array of `Filament\\Actions\\Action` instances.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/09-global-search.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\npublic static function getGlobalSearchResultActions(Model $record): array\n{\n    return [\n        Action::make('edit')\n            ->url(static::getUrl('edit', ['record' => $record])),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Tags Input with Comma Separator - PHP\nDESCRIPTION: Creates a TagsInput component that stores tags as a comma-separated string. The `separator()` method defines the character used to separate the tags. It accepts a static value or a function to dynamically calculate it.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/14-tags-input.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TagsInput;\n\nTagsInput::make('tags')\n    ->separator(',')\n```\n\n----------------------------------------\n\nTITLE: Increasing Block Picker Width - Filament Builder (PHP)\nDESCRIPTION: This snippet demonstrates how to increase the width of the block picker dropdown using the `blockPickerWidth()` method, using Tailwind's max-width scale. The width should increase incrementally to handle the additional columns. \nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make()\n    ->blockPickerColumns(3)\n    ->blockPickerWidth('2xl')\n    ->blocks([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Using Grouped Button Design for Actions (PHP)\nDESCRIPTION: This example demonstrates how to render an action group as a group of buttons instead of a dropdown menu. It configures actions with color, icons, and hidden labels, then uses `buttonGroup()` to display them as a button group. Dependencies: `Filament\\Actions\\Action`, `Filament\\Actions\\ActionGroup`, `Filament\\Support\\Icons\\Heroicon`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/03-grouping-actions.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Actions\\ActionGroup;\nuse Filament\\Support\\Icons\\Heroicon;\n\nActionGroup::make([\n    Action::make('edit')\n        ->color('gray')\n        ->icon(Heroicon::PencilSquare)\n        ->hiddenLabel(),\n    Action::make('delete')\n        ->color('gray')\n        ->icon(Heroicon::Trash)\n        ->hiddenLabel(),\n])\n    ->buttonGroup()\n```\n\n----------------------------------------\n\nTITLE: Sending a Broadcast Notification from a Laravel Notification Class (PHP)\nDESCRIPTION: This code snippet demonstrates how to send a broadcast notification from within a traditional Laravel notification class. The `toBroadcast()` method returns a `BroadcastMessage` object, which is obtained by calling `getBroadcastMessage()` on a Filament notification. This allows you to integrate Filament notifications with existing Laravel notification workflows. It requires Filament's `Notification` class, Laravel's `BroadcastMessage`, and a configured broadcasting service.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/03-broadcast-notifications.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\User;\nuse Filament\\Notifications\\Notification;\nuse Illuminate\\Notifications\\Messages\\BroadcastMessage;\n\npublic function toBroadcast(User $notifiable): BroadcastMessage\n{\n    return Notification::make()\n        ->title('Saved successfully')\n        ->getBroadcastMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding Modal with modalHidden() in Filament\nDESCRIPTION: This code snippet demonstrates how to conditionally hide a modal based on a condition using the `modalHidden()` method.  The action is only performed when the condition `$this->role !== 'admin'` is true. The `action()` method defines the code to be executed when the action is triggered, and `modalContent()` defines the view to render inside the modal.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_38\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('create')\n    ->action(function (array $data): void {\n        // ...\n    })\n    ->modalHidden($this->role !== 'admin')\n    ->modalContent(view('filament.pages.actions.create'))\n```\n\n----------------------------------------\n\nTITLE: Removing Styled Container - PHP\nDESCRIPTION: Illustrates how to remove the default styled container (card) around a Filament Tabs component using the `contained(false)` method. This allows for a cleaner integration with the surrounding layout.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/04-tabs.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Tabs;\nuse Filament\\Schemas\\Components\\Tabs\\Tab;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tab::make('Tab 1')\n            ->schema([\n                // ...\n            ]),\n        Tab::make('Tab 2')\n            ->schema([\n                // ...\n            ]),\n        Tab::make('Tab 3')\n            ->schema([\n                // ...\n            ]),\n    ])\n    ->contained(false)\n```\n\n----------------------------------------\n\nTITLE: Using Container Breakpoints for Grid Columns in FilamentPHP with PHP\nDESCRIPTION: This snippet shows how to use container breakpoints (`@md`, `@xl`) to define the number of grid columns in a FilamentPHP Grid component.  It utilizes `gridContainer()` to enable container queries and sets column counts for different container widths. Requires FilamentPHP framework.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/02-layouts.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Grid;\n\nGrid::make()\n    ->gridContainer()\n    ->columns([\n        '@md' => 3,\n        '@xl' => 4,\n    ])\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting Option Descriptions in CheckboxList - PHP\nDESCRIPTION: This example illustrates how to set descriptions for each option in the `CheckboxList` component. Descriptions can be plain text strings or instances of `Illuminate\\Support\\HtmlString` or `Illuminate\\Contracts\\Support\\Htmlable` to allow HTML rendering. It requires `Filament\\Forms\\Components\\CheckboxList` and `Illuminate\\Support\\HtmlString` classes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/06-checkbox-list.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\nuse Illuminate\\Support\\HtmlString;\n\nCheckboxList::make('technologies')\n    ->options([\n        'tailwind' => 'Tailwind CSS',\n        'alpine' => 'Alpine.js',\n        'laravel' => 'Laravel',\n        'livewire' => 'Laravel Livewire',\n    ])\n    ->descriptions([\n        'tailwind' => 'A utility-first CSS framework for rapidly building modern websites without ever leaving your HTML.',\n        'alpine' => new HtmlString('A rugged, minimal tool for composing behavior <strong>directly in your markup</strong>.'),\n        'laravel' => str('A **web application** framework with expressive, elegant syntax.')->inlineMarkdown()->toHtmlString(),\n        'livewire' => 'A full-stack framework for Laravel building dynamic interfaces simple, without leaving the comfort of Laravel.',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Value for a Field in Filament\nDESCRIPTION: This snippet demonstrates how to set a default value for a text input field using the `default()` method. The default value is only used when the schema is loaded without existing data, such as on a Create page.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->default('John')\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Color - PHP\nDESCRIPTION: This snippet demonstrates how to customize the text color of a TextColumn in Filament. The `color()` method allows setting a static color or dynamically calculating it using a function, enabling conditional formatting based on the column's state.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('status')\n    ->color('primary')\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Job Middleware in Filament\nDESCRIPTION: This code snippet demonstrates how to customize the middleware applied to export jobs in Filament. The `getJobMiddleware()` method in the exporter class is overridden to return an array of middleware instances. The default middleware prevents overlapping exports.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\Jobs\\PrepareCsvExport;\nuse App\\Jobs\\PrepareCsvExport as BasePrepareCsvExport;\nuse Illuminate\\Queue\\Middleware\\WithoutOverlapping;\n\npublic function getJobMiddleware(): array\n{\n    return [\n        (new WithoutOverlapping(\"export{$this->export->getKey()}\"))->expireAfter(600),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Plugin in Panel Provider\nDESCRIPTION: This PHP code demonstrates how to register the plugin and its widgets in a Filament Panel provider. This is necessary to make the plugin available in the Filament admin panel.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/11-plugins/03-building-a-panel-plugin.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// Register the plugin and/or Widget in your Panel provider:\n\nuse Awcodes\\ClockWidget\\ClockWidgetWidget;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        ->widgets([\n            ClockWidgetWidget::class,\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting Single Value into List Items (PHP)\nDESCRIPTION: This snippet demonstrates how to split a single text value into multiple list items using the `separator()` method. It's useful for displaying comma-separated values as badges or list elements in a Filament TextColumn.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('tags')\n    ->badge()\n    ->separator(',')\n```\n\n----------------------------------------\n\nTITLE: Injecting Modal Form Data into Filament Action (PHP)\nDESCRIPTION: This snippet showcases how to inject the current modal form data into a Filament action using the `$data` parameter. The `$data` parameter will contain an array of data from the modal form. Be aware that this data is only populated after the modal form has been submitted.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nfunction (array $data) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting Text into Badges with Separator - PHP\nDESCRIPTION: This snippet demonstrates how to use the `separator()` method to split a text string into multiple list items within a Filament Infolist TextEntry. The `badge()` method is also used to display the list items as badges. The separator is a comma.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('tags')\n    ->badge()\n    ->separator(',')\n```\n\n----------------------------------------\n\nTITLE: Initializing Radio Component with Options - PHP\nDESCRIPTION: This snippet demonstrates how to create a Radio component with a static array of options for selecting a status value. It uses the `options()` method to define the available choices (draft, scheduled, published).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/07-radio.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Radio;\n\nRadio::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'scheduled' => 'Scheduled',\n        'published' => 'Published'\n    ])\n```\n\n----------------------------------------\n\nTITLE: Add Configuration Method to Column\nDESCRIPTION: This PHP code defines a custom configuration method `speed()` on the `AudioPlayerColumn` class, allowing users to set a speed value. It also includes a getter method `getSpeed()` to retrieve the configured value. This enables customisation of the column's behavior.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/10-custom-columns.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Column;\n\nclass AudioPlayerColumn extends Column\n{\n    protected string $view = 'filament.tables.columns.audio-player-column';\n    \n    protected ?float $speed = null;\n\n    public function speed(?float $speed): static\n    {\n        $this->speed = $speed;\n\n        return $this;\n    }\n\n    public function getSpeed(): ?float\n    {\n        return $this->speed;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tenant Registration Page - PHP\nDESCRIPTION: This code snippet creates a custom tenant registration page by extending `Filament\\Pages\\Tenancy\\RegisterTenant`. It allows users to create new tenants.  It requires the `App\\Models\\Team` model, and assumes that the `Team` model has a `members()` relationship.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Filament\\Pages\\Tenancy;\n\nuse App\\Models\\Team;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Pages\\Tenancy\\RegisterTenant;\nuse Filament\\Schemas\\Schema;\n\nclass RegisterTeam extends RegisterTenant\n{\n    public static function getLabel(): string\n    {\n        return 'Register team';\n    }\n\n    public function form(Schema $schema): Schema\n    {\n        return $schema\n            ->components([\n                TextInput::make('name'),\n                // ...\n            ]);\n    }\n\n    protected function handleRegistration(array $data): Team\n    {\n        $team = Team::create($data);\n\n        $team->members()->attach(auth()->user());\n\n        return $team;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Indicator Removal - Filament PHP\nDESCRIPTION: This snippet demonstrates how to prevent users from removing a specific filter indicator using `removable(false)` on the `Indicator` object. This can be useful when a filter is always active or should not be easily disabled.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/05-custom.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Carbon\\Carbon;\nuse Filament\\Tables\\Filters\\Indicator;\n\nIndicator::make('Created from ' . Carbon::parse($data['from'])->toFormattedDateString())\n    ->removable(false)\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Search Field Suffix in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to customize the suffix of the global search field using the `globalSearchFieldSuffix()` method in the Filament configuration.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/09-global-search.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->globalSearchFieldSuffix(fn (): ?string => match (Platform::detect()) {\n            Platform::Windows, Platform::Linux => 'CTRL+K',\n            Platform::Mac => '⌘K',\n            default => null,\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Authentication Field\nDESCRIPTION: This code snippet shows how to customize a single field in an authentication form without redefining the entire form.  It overrides the `getPasswordFormComponent()` method and chains the `revealable(false)` method to disable the password reveal functionality on the password field.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/01-overview.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Filament\\Schemas\\Components\\Component;\n\nprotected function getPasswordFormComponent(): Component\n{\n    return parent::getPasswordFormComponent()\n        ->revealable(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Validating TextInputColumn Input in Filament\nDESCRIPTION: This snippet shows how to add validation rules to a text input column in Filament. It uses Laravel's validation features to ensure that the 'name' field is required and has a maximum length of 255 characters, improving data integrity.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/08-text-input.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextInputColumn;\n\nTextInputColumn::make('name')\n    ->rules(['required', 'max:255'])\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Filament Actions in Blade\nDESCRIPTION: This Blade code shows how to conditionally render a Filament action in a Livewire view using the `isVisible()` method. The code includes wrapping elements conditionally to avoid rendering unnecessary HTML.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-action.md#_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    @if ($this->deleteAction->isVisible())\n        {{ $this->deleteAction }}\n    @endif\n    \n    {{-- Or --}}\n    \n    @if (($this->deleteAction)(['post' => $post->id])->isVisible())\n        {{ ($this->deleteAction)(['post' => $post->id]) }}\n    @endif\n</div>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    @if ($this->deleteAction->isVisible())\n        <div>\n            {{ $this->deleteAction }}\n        </div>\n    @endif\n</div>\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Configuration for Filament Plugin\nDESCRIPTION: This JavaScript code shows how to configure Tailwind CSS to include the plugin's views for proper styling. The plugin's vendor directory is added to the `content` array in `tailwind.config.js` so Tailwind can process the plugin's CSS classes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n    content: [\n        './resources/**/*.blade.php',\n        './vendor/filament/**/*.blade.php',\n        './vendor/danharrin/filament-blog/resources/views/**/*.blade.php', // Your plugin's vendor directory\n    ],\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Money with Decimal Places (PHP)\nDESCRIPTION: This code shows how to format a monetary value with a specific number of decimal places using the `money()` method.  The number of decimal places to display is controlled with the `decimalPlaces` argument.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('price')\n    ->summarize(Sum::make()->money('EUR', decimalPlaces: 3))\n```\n\n----------------------------------------\n\nTITLE: Configuring User Model for Email Code Authentication\nDESCRIPTION: This code snippet shows how to configure the `User` model to handle email code authentication. It ensures that the `email_code_authentication_secret` column is encrypted and hidden for security. It also includes the use of the `FilamentUser` contract.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/02-multi-factor-authentication.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Models\\Contracts\\FilamentUser;\nuse Illuminate\\Contracts\\Auth\\MustVerifyEmail;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\nclass User extends Authenticatable implements FilamentUser, MustVerifyEmail\n{\n    // ...\n\n    /**\n     * @var array<string>\n     */\n    protected $hidden = [\n        // ...\n        'email_code_authentication_secret',\n    ];\n    \n    /**\n     * @var array<string, string>\n     */\n    protected $casts = [\n        // ...\n        'email_code_authentication_secret' => 'encrypted',\n    ];\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Font Weight of TextEntry - PHP\nDESCRIPTION: This snippet demonstrates how to customize the font weight of a Filament Infolist TextEntry using the `weight()` method and the `FontWeight` enum. It sets the font weight to `Bold`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\nuse Filament\\Support\\Enums\\FontWeight;\n\nTextEntry::make('title')\n    ->weight(FontWeight::Bold)\n```\n\n----------------------------------------\n\nTITLE: Making modal footer sticky - Filament Actions (PHP)\nDESCRIPTION: This snippet demonstrates how to make the footer of a Filament Action modal sticky, ensuring it remains visible while scrolling through the content. It utilizes the `stickyModalFooter()` method. Requires the Filament Actions package.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('updateAuthor')\n    ->schema([\n        // ...\n    ])\n    ->action(function (array $data): void {\n        // ...\n    })\n    ->stickyModalFooter()\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading CSS with Plugin Package Name\nDESCRIPTION: Blade snippet demonstrates loading CSS for a plugin lazily by passing the plugin package name to the `FilamentAsset::getStyleHref()` function.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<div\n    x-data=\"{}\"\n    x-load-css=\"[@js(\\Filament\\Support\\Facades\\FilamentAsset::getStyleHref('custom-stylesheet', package: 'danharrin/filament-blog'))]\"\n>\n    <!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Textarea Length Validation - PHP\nDESCRIPTION: This snippet demonstrates how to implement length validation for a Textarea component using `minLength()`, `maxLength()`, and `length()`.  These methods enforce constraints on the minimum, maximum, or exact length of the text entered, providing both frontend and backend validation for data integrity.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/15-textarea.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Textarea;\n\nTextarea::make('description')\n    ->minLength(2)\n    ->maxLength(1024)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Textarea;\n\nTextarea::make('question')\n    ->length(100)\n```\n\n----------------------------------------\n\nTITLE: Inline Label - PHP\nDESCRIPTION: This code demonstrates how to display a field's label inline using the `inlineLabel()` method. It applies to a TextInput component and can be used to save vertical space.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->inlineLabel()\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Hooks in View Page - PHP\nDESCRIPTION: This code illustrates the use of lifecycle hooks within a Filament view page. These hooks, such as `beforeFill()` and `afterFill()`, allow you to execute custom logic at specific points during the page's lifecycle, such as before or after the form fields are populated.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/05-viewing-records.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\Pages\\ViewRecord;\n\nclass ViewUser extends ViewRecord\n{\n    // ...\n\n    protected function beforeFill(): void\n    {\n        // Runs before the disabled form fields are populated from the database. Not run on pages using an infolist.\n    }\n\n    protected function afterFill(): void\n    {\n        // Runs after the disabled form fields are populated from the database. Not run on pages using an infolist.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Broadcast Notification using the notify() method (PHP)\nDESCRIPTION: This code snippet demonstrates how to send a broadcast notification using the `notify()` method on a recipient (user) object. It creates a notification instance, sets the title, and then uses `toBroadcast()` to prepare it for broadcasting before sending it to the recipient. It requires Filament's `Notification` class and a configured broadcasting service.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/03-broadcast-notifications.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\n$recipient = auth()->user();\n\n$recipient->notify(\n    Notification::make()\n        ->title('Saved successfully')\n        ->toBroadcast(),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Resource Sub-Navigation - Filament PHP\nDESCRIPTION: This code snippet demonstrates how to add a sub-navigation to a Filament resource's singular record pages. It defines the `getRecordSubNavigation()` method within the resource class, utilizing the `generateNavigationItems()` method to create an array of navigation items based on Filament page classes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\Pages\\Page;\n\npublic static function getRecordSubNavigation(Page $page): array\n{\n    return $page->generateNavigationItems([\n        ViewCustomer::class,\n        EditCustomer::class,\n        EditCustomerContact::class,\n        ManageCustomerAddresses::class,\n        ManageCustomerPayments::class,\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Database Notification - Fluent API - Filament\nDESCRIPTION: This code snippet demonstrates how to send a database notification using Filament's fluent API. It creates a notification instance, sets the title, and then sends it to the specified recipient, which is obtained from the authenticated user.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/02-database-notifications.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\n$recipient = auth()->user();\n\nNotification::make()\n    ->title('Saved successfully')\n    ->sendToDatabase($recipient);\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable TextInput Component Class (PHP)\nDESCRIPTION: This snippet demonstrates creating a dedicated class, `CustomerNameInput`, for a `TextInput` component in Filament.  It encapsulates the configuration of the component, making it reusable and simplifying schema definitions. The `make()` method returns a configured `TextInput` instance.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/12-code-quality-tips.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Filament\\Resources\\Customers\\Schemas\\Components;\n\nuse Filament\\Forms\\Components\\TextInput;\n\nclass CustomerNameInput\n{\n    public static function make(): TextInput\n    {\n        return TextInput::make('name')\n            ->label('Full name')\n            ->required()\n            ->maxLength(255)\n            ->placeholder('Enter your full name')\n            ->belowContent('This is the name that will be displayed on your profile.');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RestoreBulkAction in Filament (PHP)\nDESCRIPTION: This snippet illustrates how to integrate `RestoreBulkAction` into a Filament table. This allows users to select multiple rows and restore them simultaneously. The snippet shows the implementation within the `table()` method of a Filament resource. Requires Filament tables.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/10-restore.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\RestoreBulkAction;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->bulkActions([\n            RestoreBulkAction::make(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Relationship Names\nDESCRIPTION: This PHP code defines a `getParentResourceRegistration()` method within the nested resource class, allowing customization of the relationship names between the parent and nested resources. This is used when the default naming conventions do not apply. The `relationship()` and `inverseRelationship()` methods are used to specify the correct relationship names. The calls to these methods may be omitted if defaults are sufficient.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/08-nesting.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Resources\\Courses\\CourseResource;\nuse Filament\\Resources\\ParentResourceRegistration;\n\npublic static function getParentResourceRegistration(): ?ParentResourceRegistration\n{\n    return CourseResource::asParent()\n        ->relationship('lessons')\n        ->inverseRelationship('course');\n}\n```\n\n----------------------------------------\n\nTITLE: Filament Pagination with Customizable Page Options\nDESCRIPTION: This Blade snippet shows how to use the `<x-filament::pagination>` component with the `page-options` and `current-page-option-property` attributes to allow users to customize the number of items per page. The `page-options` attribute accepts an array of options, and the `current-page-option-property` attribute specifies the Livewire property where the user's selection is stored.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-pagination.md#_snippet_4\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::pagination\n    :paginator=\"$users\"\n    :page-options=\"[5, 10, 20, 50, 100, 'all']\"\n    :current-page-option-property=\"perPage\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Extra HTML Attributes to a Layout Component in FilamentPHP with PHP\nDESCRIPTION: This snippet shows how to add extra HTML attributes to a FilamentPHP Section component using the `extraAttributes()` method.  It adds a CSS class to the component's outer HTML element, allowing for custom styling. The provided array represents the attribute name and value.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/02-layouts.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Section;\n\nSection::make()\n    ->extraAttributes(['class' => 'custom-section-style'])\n```\n\n----------------------------------------\n\nTITLE: Creating a Boolean Constraint in Filament QueryBuilder (PHP)\nDESCRIPTION: This snippet shows how to create a BooleanConstraint for Filament's QueryBuilder to filter boolean columns. It filters both a direct column and a column in a related table using `relationship()`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\BooleanConstraint;\n\nBooleanConstraint::make('is_visible') // Filter the `is_visible` column\n\nBooleanConstraint::make('creatorIsAdmin')\n    ->relationship(name: 'creator', titleAttribute: 'is_admin') // Filter the `is_admin` column on the `creator` relationship\n```\n\n----------------------------------------\n\nTITLE: Customizing HTML Input Type in Filament\nDESCRIPTION: This snippet demonstrates how to customize the HTML input type for a text input column.  It sets the input type to 'color' for the 'background_color' field, allowing users to select a color using a color picker interface directly within the table.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/08-text-input.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextInputColumn;\n\nTextInputColumn::make('background_color')->type('color')\n```\n\n----------------------------------------\n\nTITLE: Adding Media Specific Manipulations\nDESCRIPTION: This snippet adds media-specific manipulations using the `manipulations()` method, allowing for transformations like rotating the image by 90 degrees when creating a 'thumb' conversion.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\SpatieMediaLibraryFileUpload;\n\nSpatieMediaLibraryFileUpload::make('attachments')\n    ->multiple()\n    ->manipulations([\n        'thumb' => ['orientation' => '90'],\n    ])\n```\n\n----------------------------------------\n\nTITLE: Customizing Data Before Filling Form - PHP\nDESCRIPTION: This code demonstrates how to modify the data before it is filled into the form on a view page in Filament. By defining a `mutateFormDataBeforeFill()` method, you can transform the data from the database before it populates the form fields.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/05-viewing-records.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nprotected function mutateFormDataBeforeFill(array $data): array\n{\n    $data['user_id'] = auth()->id();\n\n    return $data;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing action arguments - Filament Actions (PHP)\nDESCRIPTION: This snippet demonstrates how to access arguments passed to an action created with `makeModalSubmitAction()` inside the action's closure. Requires Filament Actions.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('create')\n    ->schema([\n        // ...\n    ])\n    // ...\n    ->extraModalFooterActions(fn (Action $action): array => [\n        $action->makeModalSubmitAction('createAnother', arguments: ['another' => true]),\n    ])\n    ->action(function (array $data, array $arguments): void {\n        // Create\n\n        if ($arguments['another'] ?? false) {\n            // Reset the form and don't close the modal\n        }\n    })\n```\n\n----------------------------------------\n\nTITLE: Setting Current Tenant Label in Filament (HasCurrentTenantLabel)\nDESCRIPTION: This snippet demonstrates how to implement the `HasCurrentTenantLabel` contract in a Filament tenant model to add a label above the name of the current tenant in the tenant switcher.  It defines the `getCurrentTenantLabel()` method to return a static string 'Active team' as the label.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Filament\\Models\\Contracts\\HasCurrentTenantLabel;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Team extends Model implements HasCurrentTenantLabel\n{\n    // ...\n\n    public function getCurrentTenantLabel(): string\n    {\n        return 'Active team';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Navigation Label - Method\nDESCRIPTION: This code snippet demonstrates how to customize the navigation label by overriding the `getNavigationLabel()` method in a Filament resource or page class.  Overriding this method provides more flexibility than using the `$navigationLabel` property. No dependencies are required beyond a Filament resource or page class. The expected output is a navigation item with the label returned by the method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npublic static function getNavigationLabel(): string\n{\n    return 'Custom Navigation Label';\n}\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting on Filament Action Modal Opening (PHP)\nDESCRIPTION: This snippet demonstrates how to implement rate limiting when an action modal is opened in Filament. It uses Laravel's `RateLimiter` to limit the number of attempts and displays a notification if the limit is exceeded. It uses `auth()->id()` to create a unique rate limit key per user.  The rate limit key is used in both `tooManyAttempts` and `availableIn` methods. The `mountUsing` method configures the action before the modal is displayed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Notifications\\Notification;\nuse Illuminate\\Support\\Facades\\RateLimiter;\n\nAction::make('delete')\n    ->mountUsing(function () {\n        if (RateLimiter::tooManyAttempts(\n            $rateLimitKey = 'delete:' . auth()->id(),\n            maxAttempts: 5,\n        )) {\n            Notification::make()\n                ->title('Too many attempts')\n                ->body('Please try again in ' . RateLimiter::availableIn($rateLimitKey) . ' seconds.')\n                ->danger()\n                ->send();\n                \n            return;\n        }\n        \n         RateLimiter::hit($rateLimitKey);\n    })\n```\n\n----------------------------------------\n\nTITLE: Limiting the Number of Global Search Results (PHP)\nDESCRIPTION: This snippet demonstrates how to limit the number of global search results returned per resource by overriding the `$globalSearchResultsLimit` property.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/09-global-search.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nprotected static int $globalSearchResultsLimit = 20;\n```\n\n----------------------------------------\n\nTITLE: Formatting Number with Locale\nDESCRIPTION: Formats a column as a number using a specific locale using the `locale` argument within the `numeric()` method. This ensures the number is displayed according to the conventions of the specified locale.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('stock')\n    ->numeric(locale: 'nl')\n```\n\n----------------------------------------\n\nTITLE: Limiting Text Length with Tooltip - PHP\nDESCRIPTION: This snippet limits text length and adds a tooltip if the text is truncated. It uses `limit()` to truncate the text and a closure to determine if a tooltip is needed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('description')\n    ->limit(50)\n    ->tooltip(function (TextEntry $component): ?string {\n        $state = $component->getState();\n\n        if (strlen($state) <= $component->getCharacterLimit()) {\n            return null;\n        }\n\n        // Only render the tooltip if the entry contents exceeds the length limit.\n        return $state;\n    })\n```\n\n----------------------------------------\n\nTITLE: Customizing Delete Action in Filament KeyValue\nDESCRIPTION: This snippet shows how to customize the delete action within the KeyValue field, specifically changing the icon to `Heroicon::XMark`. This demonstrates the flexibility to customize the appearance and behavior of actions within the KeyValue component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/16-key-value.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Forms\\Components\\KeyValue;\nuse Filament\\Support\\Icons\\Heroicon;\n\nKeyValue::make('meta')\n    ->deleteAction(\n        fn (Action $action) => $action->icon(Heroicon::XMark),\n    )\n```\n\n----------------------------------------\n\nTITLE: Customizing Rich Editor Toolbar Buttons\nDESCRIPTION: This code snippet demonstrates how to customize the toolbar buttons of the Filament rich editor component using the `toolbarButtons()` method. It allows specifying an array of button names to be displayed in the editor's toolbar.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/10-rich-editor.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\RichEditor;\n\nRichEditor::make('content')\n    ->toolbarButtons([\n        'attachFiles',\n        'blockquote',\n        'bold',\n        'bulletList',\n        'codeBlock',\n        'h2',\n        'h3',\n        'italic',\n        'link',\n        'orderedList',\n        'redo',\n        'strike',\n        'sub',\n        'sup',\n        'underline',\n        'undo',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding Date Tooltips in Filament Infolists (PHP)\nDESCRIPTION: This example demonstrates how to add formatted date tooltips to a TextEntry component. It uses `dateTooltip()`, `dateTimeTooltip()`, `timeTooltip()`, `isoDateTooltip()`, `isoDateTimeTooltip()`, `isoTimeTooltip()`, and `sinceTooltip()` to display formatted dates in tooltips.  These methods can be chained after the `since()` method or used independently to customize the date format in the tooltip.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('created_at')\n    ->since()\n    ->dateTooltip() // Accepts a custom PHP date formatting string\n\nTextEntry::make('created_at')\n    ->since()\n    ->dateTimeTooltip() // Accepts a custom PHP date formatting string\n\nTextEntry::make('created_at')\n    ->since()\n    ->timeTooltip() // Accepts a custom PHP date formatting string\n\nTextEntry::make('created_at')\n    ->since()\n    ->isoDateTooltip() // Accepts a custom Carbon macro format string\n\nTextEntry::make('created_at')\n    ->since()\n    ->isoDateTimeTooltip() // Accepts a custom Carbon macro format string\n\nTextEntry::make('created_at')\n    ->since()\n    ->isoTimeTooltip() // Accepts a custom Carbon macro format string\n\nTextEntry::make('created_at')\n    ->dateTime()\n    ->sinceTooltip()\n```\n\n----------------------------------------\n\nTITLE: Passing Properties to Widgets on Pages in PHP\nDESCRIPTION: This code shows how to pass properties to a widget when registering it on a Filament page.  The `make()` method is used to pass an array of Livewire properties, which are then mapped to public Livewire properties on the widget class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Widgets\\StatsOverviewWidget;\n\nprotected function getHeaderWidgets(): array\n{\n    return [\n        StatsOverviewWidget::make([\n            'status' => 'active',\n        ]),\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Widgets\\Widget;\n\nclass StatsOverviewWidget extends Widget\n{\n    public string $status;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting CheckboxList Options into Columns - PHP\nDESCRIPTION: This code snippet demonstrates how to split the options of a `CheckboxList` component into multiple columns using the `columns()` method. This method allows for responsive customization of the number of columns at different breakpoints. It requires the `Filament\\Forms\\Components\\CheckboxList` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/06-checkbox-list.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technologies')\n    ->options([\n        // ...\n    ])\n    ->columns(2)\n```\n\n----------------------------------------\n\nTITLE: Changing Tag Color - PHP\nDESCRIPTION: Sets the color of the tags in the TagsInput component. The `color()` method accepts a color name defined in the Filament styling system. It accepts a static value or a function to dynamically calculate it.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/14-tags-input.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TagsInput;\n\nTagsInput::make('tags')\n    ->color('danger')\n```\n\n----------------------------------------\n\nTITLE: Configuring Filament Infolist with a Dedicated Class (PHP)\nDESCRIPTION: Demonstrates using a dedicated class for Filament Infolist configurations using `CustomerInfoList` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/12-code-quality-tips.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Resources\\Customers\\Schemas\\CustomerInfoList;\nuse Filament\\Schemas\\Schema;\n\npublic static function infolist(Schema $schema): Schema\n{\n    return CustomerInfoList::configure($schema);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Relation Managers for View Page - PHP\nDESCRIPTION: This code demonstrates how to customize the relation managers displayed on a specific view page in Filament. By defining the `getAllRelationManagers()` method, you can specify which relation managers should appear on a particular view page, allowing for more tailored and context-specific information display.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/05-viewing-records.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nprotected function getAllRelationManagers(): array\n{\n    return [\n        CustomerAddressesRelationManager::class,\n        CustomerContactsRelationManager::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring XLSX Writer Before Closing in Filament\nDESCRIPTION: This code snippet demonstrates how to configure the XLSX writer before it is closed in Filament exports. The `configureXlsxWriterBeforeClosing()` method in the exporter class is overridden. It receives the `Writer` instance as a parameter, allowing for modifications before it is closed.  The example freezes the first row and column B and renames the sheet to 'export'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nuse OpenSpout\\Writer\\XLSX\\Entity\\SheetView;\nuse OpenSpout\\Writer\\XLSX\\Writer;\n\npublic function configureXlsxWriterBeforeClose(Writer $writer): Writer\n{\n    $sheetView = new SheetView();\n    $sheetView->setFreezeRow(2);\n    $sheetView->setFreezeColumn('B');\n    \n    $sheet = $writer->getCurrentSheet();\n    $sheet->setSheetView($sheetView);\n    $sheet->setName('export');\n    \n    return $writer;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Livewire Widget in Blade\nDESCRIPTION: This code snippet demonstrates how to render a Livewire widget, specifically `App\\Livewire\\Dashboard\\PostsChart`, within a Blade view using the `@livewire` directive.  The directive takes the fully qualified class name of the Livewire component as its argument, which then gets rendered in place. The widget is wrapped in a `div` element.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-widget.md#_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    @livewire(\\App\\Livewire\\Dashboard\\PostsChart::class)\n</div>\n```\n\n----------------------------------------\n\nTITLE: Conditional Accepted Validation - Filament PHP\nDESCRIPTION: This snippet demonstrates how to conditionally apply the `accepted()` validation rule based on a feature flag. The `accepted()` method accepts a boolean value to control whether the validation rule is active.  This allows you to enable or disable the validation dynamically.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/04-checkbox.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Checkbox;\n\nCheckbox::make('terms_of_service')\n    ->accepted(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Testing Form Validation - PHP\nDESCRIPTION: This snippet demonstrates testing form validation rules using a Pest dataset. It fills the form with specific data, calls the `create` action, asserts that the form has errors using `assertHasFormErrors()`, asserts that no notification is displayed, and asserts that no redirection occurs.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/02-testing-resources.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Resources\\Users\\Pages\\CreateUser;\nuse App\\Models\\User;\nuse Illuminate\\Support\\Str;\n\nit('validates the form data', function (array $data, array $errors) {\n    $newUserData = User::factory()->make();\n\n    livewire(CreateUser::class)\n        ->fillForm([\n            'name' => $newUserData->name,\n            'email' => $newUserData->email,\n            ...$data,\n        ])\n        ->call('create')\n        ->assertHasFormErrors($errors)\n        ->assertNotNotified()\n        ->assertNoRedirect();\n})->with([\n    '`name` is required' => [['name' => null], ['name' => 'required']],\n    '`name` is max 255 characters' => [['name' => Str::random(256)], ['name' => 'max']],\n    '`email` is a valid email address' => [['email' => Str::random()], ['email' => 'email']],\n    '`email` is required' => [['email' => null], ['email' => 'required']],\n    '`email` is max 255 characters' => [['email' => Str::random(256)], ['email' => 'max']],\n]);\n```\n\n----------------------------------------\n\nTITLE: Custom Row Classes (PHP)\nDESCRIPTION: This code demonstrates how to conditionally style table rows in Filament based on record data using the `$table->recordClasses()` method. A closure is used to determine the CSS classes to apply to each row, allowing dynamic styling based on record properties.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Closure;\nuse Filament\\Tables\\Table;\nuse Illuminate\\Database\\Eloquent\\Model;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->recordClasses(fn (Post $record) => match ($record->status) {\n            'draft' => 'draft-post-table-row',\n            'reviewing' => 'reviewing-post-table-row',\n            'published' => 'published-post-table-row',\n            default => null,\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder - PHP\nDESCRIPTION: This snippet demonstrates how to set a placeholder text for a Filament form field using the `placeholder()` method.  The placeholder will disappear when the user starts typing.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->placeholder('John Doe')\n```\n\n----------------------------------------\n\nTITLE: Formatting Money with Locale\nDESCRIPTION: Formats a column as currency using a specific locale, ensuring the currency is displayed according to the conventions of that locale using the `locale` argument within the `money()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('price')\n    ->money('EUR', locale: 'nl')\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Input Attributes - Filament PHP\nDESCRIPTION: This snippet demonstrates adding extra HTML attributes to the input element of a Filament form field using the `extraInputAttributes()` method. It sets the width to 200 for the TextInput field's input element.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('categories')\n    ->extraInputAttributes(['width' => 200])\n```\n\n----------------------------------------\n\nTITLE: Align Stack Content - Filament PHP\nDESCRIPTION: This example shows how to align the content within a `Stack` component to the end (right). It also demonstrates preventing columns within the stack from growing, which is necessary for the stack's alignment to take effect. Columns need to `grow(false)` otherwise they stretch to fill the entire width.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/05-layout.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\Alignment;\nuse Filament\\Support\\Enums\\FontWeight;\nuse Filament\\Tables\\Columns\\Layout\\Split;\nuse Filament\\Tables\\Columns\\Layout\\Stack;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nSplit::make([\n    ImageColumn::make('avatar')\n        ->circular(),\n    TextColumn::make('name')\n        ->weight(FontWeight::Bold)\n        ->searchable()\n        ->sortable(),\n    Stack::make([\n        TextColumn::make('phone')\n            ->icon('heroicon-m-phone')\n            ->grow(false),\n        TextColumn::make('email')\n            ->icon('heroicon-m-envelope')\n            ->grow(false),\n    ])\n        ->alignment(Alignment::End)\n        ->visibleFrom('md'),\n])\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Radio Options Inline - PHP\nDESCRIPTION: This example shows how to dynamically control the inline display of radio options using a feature flag. The `inline()` method accepts a boolean value or an expression that resolves to a boolean.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/07-radio.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Radio;\n\nRadio::make('feedback')\n    ->label('Like this post?')\n    ->boolean()\n    ->inline(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Grouping Navigation Items under Other Items\nDESCRIPTION: This code snippet demonstrates how to group navigation items as children of other items, using the `$navigationParentItem` property. The `$navigationGroup` property must be defined when using `$navigationParentItem`.  No specific dependencies other than filament is required. The expected output is a nested navigation menu.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nprotected static ?string $navigationParentItem = 'Notifications';\n\nprotected static ?string $navigationGroup = 'Settings';\n```\n\n----------------------------------------\n\nTITLE: Limiting Text Length with Custom End String - PHP\nDESCRIPTION: This snippet demonstrates how to limit the length of a text entry's value using the `limit()` method and customizing the end string. It truncates the text to a maximum of 50 characters and appends ' (more)' to the end of the truncated text.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('description')\n    ->limit(50, end: ' (more)')\n```\n\n----------------------------------------\n\nTITLE: Conditionally applying secondary section styling\nDESCRIPTION: This example demonstrates how to conditionally apply secondary styling to a section based on a boolean value (e.g., a feature flag) using the `secondary()` method, allowing dynamic control over the section's appearance.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/03-sections.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Section;\n\nSection::make('Notes')\n    ->schema([\n        // ...\n    ])\n    ->secondary(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Accessing the Current Operation in Blade\nDESCRIPTION: Demonstrates accessing the current operation (create, edit, view) within a Blade view using the `$operation` variable. This allows you to customize the UI based on the context of the form.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/20-custom-fields.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<x-dynamic-component\n    :component=\"$getFieldWrapperView()\"\n    :field=\"$field\"\n>\n    @if ($operation === 'create')\n        This is a new conference.\n    @else\n        This is an existing conference.\n    @endif\n</x-dynamic-component>\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Transactions for a Filament Action (PHP)\nDESCRIPTION: This snippet shows how to enable database transactions for a specific Filament action using the `databaseTransaction()` method. This ensures the action is wrapped in a transaction.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/05-panel-configuration.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nCreateAction::make()\n    ->databaseTransaction()\n```\n\n----------------------------------------\n\nTITLE: Changing Google Two-Factor Code Expiration in Filament\nDESCRIPTION: This code snippet demonstrates how to change the expiration time window for Google two-factor codes using the `codeWindow()` method on the `GoogleTwoFactorAuthentication` instance. The `codeWindow()` method accepts an integer representing the number of windows the code is valid for (each window is 30 seconds by default).  Here it is set to 4, meaning 2 minutes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/02-multi-factor-authentication.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Auth\\MultiFactor\\GoogleTwoFactor\\GoogleTwoFactorAuthentication;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->multiFactorAuthentication([\n            GoogleTwoFactorAuthentication::make()\n                ->codeWindow(4),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting an Icon in Filament Tabs Blade\nDESCRIPTION: This snippet demonstrates how to set an icon for a tab using the `icon` attribute. It utilizes heroicons for visual representation within the Filament Tabs component. The `icon` attribute accepts a string representing the heroicon name.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-tabs.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::tabs>\n    <x-filament::tabs.item icon=\"heroicon-m-bell\">\n        Notifications\n    </x-filament::tabs.item>\n\n    {{-- Other tabs --}}\n</x-filament::tabs>\n```\n\n----------------------------------------\n\nTITLE: Sorting Widgets in Filament\nDESCRIPTION: This code snippet demonstrates how to define the sort order of a Filament widget on the dashboard page using the `$sort` property. The lower the number, the earlier the widget appears. The order of the widgets can be adjusted by changing this property.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/01-overview.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?int $sort = 2;\n```\n\n----------------------------------------\n\nTITLE: Using slide-over - Filament Actions (PHP)\nDESCRIPTION: This snippet demonstrates how to open a Filament Action modal as a slide-over dialog using the `slideOver()` method, instead of a traditional modal. Requires the Filament Actions package.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('updateAuthor')\n    ->schema([\n        // ...\n    ])\n    ->action(function (array $data): void {\n        // ...\n    })\n    ->slideOver()\n```\n\n----------------------------------------\n\nTITLE: Conditional Autofocus Field - PHP\nDESCRIPTION: Shows how to enable autofocus conditionally on a field using a boolean expression. The autofocus will be active only when `FeatureFlag::active()` returns true.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->autofocus(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Section Header Aside - Blade\nDESCRIPTION: Demonstrates how to position the section header aside the content using the `aside` attribute. This creates a layout where the header is placed to the side of the main content area.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-section.md#_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::section aside>\n    <x-slot name=\"heading\">\n        User details\n    </x-slot>\n\n    {{-- Content --}}\n</x-filament::section>\n```\n\n----------------------------------------\n\nTITLE: Defining Operators for Custom Constraint in Filament\nDESCRIPTION: This code snippet shows how to define operators for a custom constraint in Filament, including built-in operators like `IsFilledOperator`. It is used in conjunction with a nullable column.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\Constraint;\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\Operators\\IsFilledOperator;\n\nConstraint::make('subscribed')\n    ->label('Subscribed to updates')\n    ->icon('heroicon-m-bell')\n    ->operators([\n        // ...\n        IsFilledOperator::class,\n    ]),\n```\n\n----------------------------------------\n\nTITLE: Creating Relationship Select Filters in Filament Tables (PHP)\nDESCRIPTION: This snippet demonstrates how to create a relationship select filter using the `relationship()` method. This allows filtering based on a related model, such as filtering records by author name.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/02-select.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\SelectFilter;\n\nSelectFilter::make('author')\n    ->relationship('author', 'name')\n```\n\n----------------------------------------\n\nTITLE: Halting Replication Process (Filament, PHP)\nDESCRIPTION: This code demonstrates how to halt the replication process within a lifecycle hook. It checks a condition (e.g., subscription status) and, if the condition is not met, sends a notification and halts the action using `$action->halt()`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/08-replicate.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Actions\\Action;\nuse Filament\\Actions\\ReplicateAction;\nuse Filament\\Notifications\\Notification;\n\nReplicateAction::make()\n    ->before(function (ReplicateAction $action, Post $record) {\n        if (! $record->team->subscribed()) {\n            Notification::make()\n                ->warning()\n                ->title('You don\\'t have an active subscription!')\n                ->body('Choose a plan to continue.')\n                ->persistent()\n                ->actions([\n                    Action::make('subscribe')\n                        ->button()\n                        ->url(route('subscribe'), shouldOpenInNewTab: true),\n                ])\n                ->send();\n        \n            $action->halt();\n        }\n    })\n```\n\n----------------------------------------\n\nTITLE: Defining a Filament Cluster Class (PHP)\nDESCRIPTION: This code defines a basic Filament cluster class. It extends the base `Cluster` class and can be customized with various properties like `$navigationIcon`. The namespace should match the `for` parameter specified in `discoverClusters()`.  By default the code provides a default navigation icon.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/04-clusters.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Filament\\Clusters;\n\nuse BackedEnum;\nuse Filament\\Clusters\\Cluster;\n\nclass Settings extends Cluster\n{\n    protected static string | BackedEnum | null $navigationIcon = 'heroicon-o-squares-2x2';\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown in TextColumn\nDESCRIPTION: Renders the column value as Markdown using the `markdown()` method. Assumes the column's state contains Markdown-formatted text.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('description')\n    ->markdown()\n```\n\n----------------------------------------\n\nTITLE: Setting Panel Colors with OKLCH Palette (PHP)\nDESCRIPTION: This snippet showcases the use of a custom color palette defined as an array of OKLCH colors for the primary color in a Filament panel. It provides fine-grained control over color shades, mapping color intensity to specific OKLCH values for various levels.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/01-overview.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$panel\n    ->colors([\n        'primary' => [\n            50 => 'oklch(0.969 0.015 12.422)',\n            100 => 'oklch(0.941 0.03 12.58)',\n            200 => 'oklch(0.892 0.058 10.001)',\n            300 => 'oklch(0.81 0.117 11.638)',\n            400 => 'oklch(0.712 0.194 13.428)',\n            500 => 'oklch(0.645 0.246 16.439)',\n            600 => 'oklch(0.586 0.253 17.585)',\n            700 => 'oklch(0.514 0.222 16.935)',\n            800 => 'oklch(0.455 0.188 13.697)',\n            900 => 'oklch(0.41 0.159 10.272)',\n            950 => 'oklch(0.271 0.105 12.094)',\n        ],\n    ])\n```\n\n----------------------------------------\n\nTITLE: Preventing Field Dehydration\nDESCRIPTION: This code shows how to prevent a field from being included in the dehydrated form state using `dehydrated(false)`. This is useful for fields that are only used for presentation and should not be saved to the database.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_73\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('password_confirmation')\n    ->password()\n    ->dehydrated(false)\n```\n\n----------------------------------------\n\nTITLE: Implementing Enum Icons with HasIcon in PHP\nDESCRIPTION: This code demonstrates how to implement the `HasIcon` interface in a PHP enum to associate icons with enum instances. The `getIcon()` method returns an icon string based on the enum case, allowing for dynamic icon display in the UI. It depends on the `Filament\\Support\\Contracts\\HasIcon` interface and Filament's icon system (Heroicons in this example).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/03-enums.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Contracts\\HasIcon;\n\nenum Status: string implements HasIcon\n{\n    case Draft = 'draft';\n    case Reviewing = 'reviewing';\n    case Published = 'published';\n    case Rejected = 'rejected';\n    \n    public function getIcon(): ?string\n    {\n        return match ($this) {\n            self::Draft => 'heroicon-m-pencil',\n            self::Reviewing => 'heroicon-m-eye',\n            self::Published => 'heroicon-m-check',\n            self::Rejected => 'heroicon-m-x-mark',\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a basic dropdown using Blade\nDESCRIPTION: This snippet demonstrates how to render a basic dropdown menu with a button that triggers it using Filament's Blade components. It utilizes the <x-filament::dropdown>, <x-slot name=\"trigger\">, and <x-filament::dropdown.list> components to create the dropdown structure and content. The wire:click directives within the list items are used to bind the dropdown item to Livewire methods.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-dropdown.md#_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::dropdown>\n    <x-slot name=\"trigger\">\n        <x-filament::button>\n            More actions\n        </x-filament::button>\n    </x-slot>\n    \n    <x-filament::dropdown.list>\n        <x-filament::dropdown.list.item wire:click=\"openViewModal\">\n            View\n        </x-filament::dropdown.list.item>\n        \n        <x-filament::dropdown.list.item wire:click=\"openEditModal\">\n            Edit\n        </x-filament::dropdown.list.item>\n        \n        <x-filament::dropdown.list.item wire:click=\"openDeleteModal\">\n            Delete\n        </x-filament::dropdown.list.item>\n    </x-filament::dropdown.list>\n</x-filament::dropdown>\n```\n\n----------------------------------------\n\nTITLE: Creating a Select Constraint in Filament QueryBuilder (PHP)\nDESCRIPTION: This snippet explains how to create a SelectConstraint for Filament's QueryBuilder. It shows how to define options for the select field, and how to use `relationship()` to filter a column on a related table.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\SelectConstraint;\n\nSelectConstraint::make('status') // Filter the `status` column\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n    \nSelectConstraint::make('creatorStatus')\n    ->relationship(name: 'creator', titleAttribute: 'department') // Filter the `department` column on the `creator` relationship\n    ->options([\n        'sales' => 'Sales',\n        'marketing' => 'Marketing',\n        'engineering' => 'Engineering',\n        'purchasing' => 'Purchasing',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Configuring the File Disk Globally for Filament Export Actions\nDESCRIPTION: This code snippet shows how to configure the file disk globally for all Filament export actions using the `configureUsing()` method in a service provider. This ensures consistency across all exports.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\ExportAction;\n\nExportAction::configureUsing(fn (ExportAction $action) => $action->fileDisk('s3'));\n```\n\n----------------------------------------\n\nTITLE: Configuring Radio Component Globally in Filament v4 (PHP)\nDESCRIPTION: This code snippet shows how to configure the `Radio` component's default behavior globally within a Filament v4 application.  It ensures that the `inlineLabel` property is set based on whether the `inline` property is enabled. This provides backwards compatibility with the v3 behavior if desired.  It must be placed inside the `boot()` method of a service provider such as `AppServiceProvider`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Radio;\n    \nRadio::configureUsing(fn (Radio $radio) => $radio\n    ->inlineLabel(fn (): bool => $radio->isInline()));\n```\n\n----------------------------------------\n\nTITLE: Using Custom Component with Configuration (PHP)\nDESCRIPTION: Illustrates how to utilize a custom component within a Filament schema, passing configuration data using the component's defined configuration method (e.g., `heading()`).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/07-custom-components.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Schemas\\Components\\Chart;\n\nChart::make()\n    ->heading('Sales')\n```\n\n----------------------------------------\n\nTITLE: Customizing Image Size - Filament PHP\nDESCRIPTION: This snippet demonstrates customizing the size of the displayed image using the `imageWidth()`, `imageHeight()`, and `imageSize()` methods.  `imageWidth()` and `imageHeight()` allow setting individual dimensions, while `imageSize()` sets both to the same value.  The methods also accept functions for dynamic size calculation, injecting utilities as parameters.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/04-image-entry.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('header_image')\n    ->imageWidth(200)\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('header_image')\n    ->imageHeight(50)\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('author.avatar')\n    ->imageSize(40)\n```\n\n----------------------------------------\n\nTITLE: Limiting Word Count of TextEntry - PHP\nDESCRIPTION: This snippet demonstrates how to limit the number of words displayed in a text entry using the `words()` method. It limits the text to a maximum of 10 words.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('description')\n    ->words(10)\n```\n\n----------------------------------------\n\nTITLE: Making Filament Modal Header Sticky\nDESCRIPTION: This code shows how to make the header of a Filament modal sticky using the `stickyModalHeader()` method. This ensures that the header remains visible even when the modal content overflows.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('updateAuthor')\n    ->schema([\n        // ...\n    ])\n    ->action(function (array $data): void {\n        // ...\n    })\n    ->stickyModalHeader()\n```\n\n----------------------------------------\n\nTITLE: Rendering Raw HTML Without Sanitization\nDESCRIPTION: Renders raw HTML without sanitization using the `formatStateUsing()` method and `Illuminate\\Support\\HtmlString` in Filament Infolists.  This bypasses the default HTML sanitization, allowing potentially unsafe content to be rendered.  Use with caution.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\nuse Illuminate\\Support\\HtmlString;\n\nTextEntry::make('description')\n    ->formatStateUsing(fn (string $state): HtmlString => new HtmlString($state))\n```\n\n----------------------------------------\n\nTITLE: Customizing Storage Format - PHP\nDESCRIPTION: This snippet shows how to customize the storage format of a DatePicker component using the `format()` method.  It utilizes PHP date formatting tokens to specify the desired date format for database storage.  The format 'd/m/Y' represents day/month/year.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/08-date-time-picker.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\n\nDatePicker::make('date_of_birth')\n    ->format('d/m/Y')\n```\n\n----------------------------------------\n\nTITLE: Declined Validation - Filament PHP\nDESCRIPTION: This snippet demonstrates how to use the `declined()` validation rule to ensure that the checkbox is not checked before the form can be submitted. This is useful in scenarios where the user must explicitly opt-out of something.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/04-checkbox.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Checkbox;\n\nCheckbox::make('is_under_18')\n    ->declined()\n```\n\n----------------------------------------\n\nTITLE: Setting a Form Model\nDESCRIPTION: This PHP code demonstrates how to set a model for the Filament form using the `$form->model()` method.  This enables features like automatically loading and saving relationship data, and enabling validation rules.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-form.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Schema;\n\npublic Post $post;\n\npublic function form(Schema $schema): Schema\n{\n    return $schema\n        ->components([\n            // ...\n        ])\n        ->statePath('data')\n        ->model($this->post);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Notification Title (Filament, PHP)\nDESCRIPTION: This snippet customizes the title of the success notification displayed after successful replication. It utilizes the `successNotificationTitle()` method to set a custom title string.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/08-replicate.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\ReplicateAction;\n\nReplicateAction::make()\n    ->successNotificationTitle('Category replicated')\n```\n\n----------------------------------------\n\nTITLE: Applying secondary section styling\nDESCRIPTION: This code demonstrates how to apply secondary styling to a section using the `secondary()` method, providing a less contrasting background color, suitable for nested sections or when the background behind the section matches the default section background color.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/03-sections.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Section;\n\nSection::make('Notes')\n    ->schema([\n        // ...\n    ])\n    ->secondary()\n    ->compact()\n```\n\n----------------------------------------\n\nTITLE: Halting the creation process\nDESCRIPTION: This code shows how to halt the creation process from within a lifecycle hook using `$action->halt()`.  It also demonstrates how to completely cancel the action, closing the modal, with `$action->cancel()`. Dependencies include `App\\Models\\Post`, `Filament\\Actions\\Action`, `Filament\\Actions\\CreateAction`, and `Filament\\Notifications\\Notification`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/04-create.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Actions\\Action;\nuse Filament\\Actions\\CreateAction;\nuse Filament\\Notifications\\Notification;\n\nCreateAction::make()\n    ->before(function (CreateAction $action, Post $record) {\n        if (! $record->team->subscribed()) {\n            Notification::make()\n                ->warning()\n                ->title('You don\\'t have an active subscription!')\n                ->body('Choose a plan to continue.')\n                ->persistent()\n                ->actions([\n                    Action::make('subscribe')\n                        ->button()\n                        ->url(route('subscribe'), shouldOpenInNewTab: true),\n                ])\n                ->send();\n        \n            $action->halt();\n        }\n    })\n\n$action->cancel();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Summary with Query Builder in Filament Table (PHP)\nDESCRIPTION: This snippet shows how to create a custom summary using the `using()` method within a Filament table column. It accesses the database query builder to perform calculations and display a value in the table's summary row. Requires Filament Tables and Illuminate Database.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Summarizer;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Illuminate\\Database\\Query\\Builder;\n\nTextColumn::make('name')\n    ->summarize(Summarizer::make()\n        ->label('First last name')\n        ->using(fn (Builder $query): string => $query->min('last_name')))\n```\n\n----------------------------------------\n\nTITLE: Registering Extra Colors\nDESCRIPTION: This snippet demonstrates how to register a new color (e.g., 'secondary') to be used in Filament components. It uses the `FilamentColor::register()` method, mapping the new color name to a Tailwind CSS color using the `Color` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/03-colors.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Support\\Colors\\Color;\nuse Filament\\Support\\Facades\\FilamentColor;\n\nFilamentColor::register([\n    'secondary' => Color::Indigo,\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Filament Widget\nDESCRIPTION: This command creates a new custom Filament widget using the Artisan command-line tool.  It generates both a widget class and a corresponding view file, which can then be customized.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/01-overview.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-widget BlogPostsOverview\n```\n\n----------------------------------------\n\nTITLE: Creating an Edit Page using Artisan Command - Bash\nDESCRIPTION: This command creates a new Filament page for editing a resource's contact information. It specifies the resource (`CustomerResource`) and the type of page (`EditRecord`). This command generates a PHP file containing the basic structure for the new Edit page.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/04-editing-records.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-page EditCustomerContact --resource=CustomerResource --type=EditRecord\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Steps (PHP)\nDESCRIPTION: This snippet demonstrates adding a short description to a Filament Wizard step using the `description()` method. The description appears below the step's title. Requires Filament.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/05-wizards.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Wizard\\Step;\n\nStep::make('Order')\n    ->description('Review your basket')\n    ->schema([\n        // ...\n    ]),\n```\n\n----------------------------------------\n\nTITLE: Asserting Form Field Existence with Truth Test - PHP\nDESCRIPTION: This snippet demonstrates how to assert that a form field passes a given truth test using a function with `assertFormFieldExists()`. It requires the `Pest\\Livewire\\livewire` function and `Filament\\Forms\\Components\\TextInput`. The example checks if the 'title' field is disabled. You can specify the form name as the second argument to `assertFormFieldExists` when there are multiple schemas.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('has a title field', function () {\n    livewire(CreatePost::class)\n        ->assertFormFieldExists('title', function (TextInput $field): bool {\n            return $field->isDisabled();\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding a Field\nDESCRIPTION: This snippet demonstrates hiding a text input field based on a boolean condition, like a feature flag, using the `hidden()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->hidden(! FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Defining Eloquent Model Cast for CheckboxList - PHP\nDESCRIPTION: This snippet shows how to define an `array` cast for the property that will store the selected checkbox values in an Eloquent model. This ensures that the values are properly serialized and deserialized when saving and retrieving data from the database. It requires the `Illuminate\\Database\\Eloquent\\Model` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/06-checkbox-list.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass App extends Model\n{\n    protected $casts = [\n        'technologies' => 'array',\n    ];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Date Range (PHP)\nDESCRIPTION: This code snippet demonstrates how to format the range as dates using the `minimalDateTimeDifference()` method with the `Range` summarizer. It formats the 'created_at' column to display the minimal difference between the minimum and maximum date.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Range;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('created_at')\n    ->dateTime()\n    ->summarize(Range::make()->minimalDateTimeDifference())\n```\n\n----------------------------------------\n\nTITLE: Testing Hidden Actions in Filament\nDESCRIPTION: This example demonstrates how to test if a Filament action is hidden using the `assertActionHidden()` method within a Pest test. It creates an invoice and asserts that the 'send' action is hidden.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/05-testing-actions.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can not send invoices', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertActionHidden('send');\n});\n```\n\n----------------------------------------\n\nTITLE: Global Section Configuration using configureUsing() - PHP\nDESCRIPTION: This code snippet shows how to globally configure Filament Section components using the `configureUsing()` method within a service provider's `boot()` method. It sets the default number of columns for all Section components to 2. It requires the `Filament\\Schemas\\Components\\Section` class and configures the section instance within the closure.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/01-overview.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Section;\n\nSection::configureUsing(function (Section $section): void {\n    $section\n        ->columns(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing the Profile Link in Filament (PHP)\nDESCRIPTION: This code snippet demonstrates how to customize the user profile link within the Filament user menu by registering a new item with the 'profile' array key and passing a function that customizes the Action object.  This allows for modifying the label of the profile link.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/03-user-menu.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->userMenuItems([\n            'profile' => fn (Action $action) => $action->label('Edit profile'),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Utility Injection Configuration (PHP)\nDESCRIPTION: Demonstrates how to enable utility injection in a custom field's configuration method. By allowing a `Closure` as the parameter type, users can pass functions that can access utilities. The `$this->evaluate()` method is used to inject the utilities or return the static value. Requires `Filament\\Forms\\Components\\Field` and `Closure`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/20-custom-fields.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Closure;\nuse Filament\\Forms\\Components\\Field;\n\nclass LocationPicker extends Field\n{\n    protected string $view = 'filament.forms.components.location-picker';\n    \n    protected float | Closure | null $zoom = null;\n\n    public function zoom(float | Closure | null $zoom): static\n    {\n        $this->zoom = $zoom;\n\n        return $this;\n    }\n\n    public function getZoom(): ?float\n    {\n        return $this->evaluate($this->zoom);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing XLSX Cell Style in Filament\nDESCRIPTION: This code snippet demonstrates how to customize the style of XLSX cells in Filament exports by overriding the `getXlsxCellStyle()` method in the exporter class. It returns an OpenSpout `Style` object to define the desired style. In this example, the font size is set to 12 and the font name to 'Consolas'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nuse OpenSpout\\Common\\Entity\\Style\\Style;\n\npublic function getXlsxCellStyle(): ?Style\n{\n    return (new Style())\n        ->setFontSize(12)\n        ->setFontName('Consolas');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Text Size of TextEntry - PHP\nDESCRIPTION: This snippet demonstrates how to customize the text size of a Filament Infolist TextEntry using the `size()` method and the `TextSize` enum. It sets the text size to `Large`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\nuse Filament\\Support\\Enums\\TextSize;\n\nTextEntry::make('title')\n    ->size(TextSize::Large)\n```\n\n----------------------------------------\n\nTITLE: Customize Rate Limited Notification - PHP\nDESCRIPTION: This snippet demonstrates how to fully customize the notification that is shown when an action is rate limited. The `rateLimitedNotification()` method is used to specify a closure that returns a `Filament\\Notifications\\Notification` instance. This allows complete control over the notification's content and appearance.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse DanHarrin\\LivewireRateLimiting\\Exceptions\\TooManyRequestsException;\nuse Filament\\Actions\\DeleteAction;\nuse Filament\\Notifications\\Notification;\n\nDeleteAction::make()\n    ->rateLimit(5)\n    ->rateLimitedNotification(\n       fn (TooManyRequestsException $exception): Notification => Notification::make()\n            ->warning()\n            ->title('Slow down!')\n            ->body(\"You can try deleting again in {$exception->secondsUntilAvailable} seconds.\"),\n    )\n```\n\n----------------------------------------\n\nTITLE: Formatting Money with Locale (PHP)\nDESCRIPTION: This code snippet formats a monetary value with a specific locale using the `money()` method. It formats the sum of 'price' in EUR, using the 'nl' locale.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Average;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('price')\n    ->summarize(Sum::make()->money('EUR', locale: 'nl'))\n```\n\n----------------------------------------\n\nTITLE: Applying Select Filters by Default in Filament Tables (PHP)\nDESCRIPTION: This snippet demonstrates how to set a select filter to be enabled by default using the `default()` method. It shows examples for both single and multiple select filters.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/02-select.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\SelectFilter;\n\nSelectFilter::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n    ->default('draft')\n\nSelectFilter::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n    ->multiple()\n    ->default(['draft', 'reviewing'])\n```\n\n----------------------------------------\n\nTITLE: Filling a Filament Form with Existing Data\nDESCRIPTION: This code shows how to pre-fill a form in a Filament modal with existing data using the `fillForm()` method. The example populates the 'authorId' field with the current author's ID.  The `fillForm()` function receives the record as a parameter, allowing dynamic pre-population based on the record's data.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\Post;\nuse App\\Models\\User;\nuse Filament\\Actions\\Action;\nuse Filament\\Forms\\Components\\Select;\n\nAction::make('updateAuthor')\n    ->fillForm(fn (Post $record): array => [\n        'authorId' => $record->author->id,\n    ])\n    ->schema([\n        Select::make('authorId')\n            ->label('Author')\n            ->options(User::query()->pluck('name', 'id'))\n            ->required(),\n    ])\n    ->action(function (array $data, Post $record): void {\n        $record->author()->associate($data['authorId']);\n        $record->save();\n    })\n```\n\n----------------------------------------\n\nTITLE: Dynamically Disabling 'Create Another' in Filament (PHP)\nDESCRIPTION: This code snippet illustrates how to dynamically control the \"create another\" feature by overriding the `canCreateAnother()` method.  Returning `false` from this method will disable the feature based on custom logic or conditions within your application.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nprotected function canCreateAnother(): bool\n{\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the current Eloquent record in Filament\nDESCRIPTION: This code snippet demonstrates how to access the Eloquent record for the current schema in a Filament form using the `$record` parameter. It requires the Illuminate\\Database\\Eloquent\\Model class. The `$record` variable will be null for create operations.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_57\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nfunction (?Model $record) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Enum Colors with HasColor in PHP\nDESCRIPTION: This snippet demonstrates how to implement the `HasColor` interface in a PHP enum to associate colors with enum instances. The `getColor()` method returns a color string or array based on the enum case, allowing for dynamic coloring in the UI.  It depends on the `Filament\\Support\\Contracts\\HasColor` interface and Filament's color system.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/03-enums.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Contracts\\HasColor;\n\nenum Status: string implements HasColor\n{\n    case Draft = 'draft';\n    case Reviewing = 'reviewing';\n    case Published = 'published';\n    case Rejected = 'rejected';\n    \n    public function getColor(): string | array | null\n    {\n        return match ($this) {\n            self::Draft => 'gray',\n            self::Reviewing => 'warning',\n            self::Published => 'success',\n            self::Rejected => 'danger',\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Usage with wire:model - Blade\nDESCRIPTION: This snippet demonstrates the basic implementation of the Filament checkbox component with `wire:model` for binding to a Livewire property. It renders a checkbox input labeled \"Is Admin\".\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-checkbox.md#_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<label>\n    <x-filament::input.checkbox wire:model=\"isAdmin\" />\n\n    <span>\n        Is Admin\n    </span>\n</label>\n```\n\n----------------------------------------\n\nTITLE: Custom Rate Limited Notification Title - PHP\nDESCRIPTION: This snippet demonstrates how to customize the title of the notification that is shown when an action is rate limited. The `rateLimitedNotificationTitle()` method is used to specify the title of the notification.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\DeleteAction;\n\nDeleteAction::make()\n    ->rateLimit(5)\n    ->rateLimitedNotificationTitle('Slow down!')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Enabled Radio Options - PHP\nDESCRIPTION: This code shows how to retrieve the options that are not disabled using `getEnabledOptions()`.  The result is used with the `in()` validation rule to ensure only enabled options are selected.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/07-radio.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Radio;\n\nRadio::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'scheduled' => 'Scheduled',\n        'published' => 'Published',\n    ])\n    ->disableOptionWhen(fn (string $value): bool => $value === 'published')\n    ->in(fn (Radio $component): array => array_keys($component->getEnabledOptions()))\n```\n\n----------------------------------------\n\nTITLE: Using Custom Empty State View - Filament Table (PHP)\nDESCRIPTION: This code snippet demonstrates how to use a completely custom view for the empty state of a Filament table using the `emptyState()` method. It requires the `Filament\\Tables\\Table` class. The method accepts a string representing the path to the view file.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/08-empty-state.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->emptyState(view('tables.posts.empty-state'));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Password Broker in Filament\nDESCRIPTION: This snippet illustrates how to set the password broker used by Filament, achieved by passing the broker name to the `authPasswordBroker()` configuration method within the panel configuration. In this case, the broker is set to 'users'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/01-overview.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->authPasswordBroker('users');\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Form Data to a Model\nDESCRIPTION: This PHP code demonstrates how to save the form's data to a model using the `Post::create()` method.  It uses the form's state to create a new `Post` record.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-form.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\Post;\n\npublic function create(): void\n{\n    Post::create($this->form->getState());\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Action Label in Filament\nDESCRIPTION: This code demonstrates how to test the label of a Filament action using `assertActionHasLabel()` and `assertActionDoesNotHaveLabel()` methods within a Pest test. It creates an invoice and asserts that the 'send' action has the label 'Email Invoice' and does not have the label 'Send'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/05-testing-actions.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('send action has correct label', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertActionHasLabel('send', 'Email Invoice')\n        ->assertActionDoesNotHaveLabel('send', 'Send');\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Icon Entry with State-Based Icons - PHP\nDESCRIPTION: This code initializes an IconEntry component named 'status' in a Filament infolist.  It uses a function to dynamically determine the icon based on the 'status' state. It leverages the Heroicon library for the actual icons. The function receives the state as a string parameter.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/03-icon-entry.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\IconEntry;\nuse Filament\\Support\\Icons\\Heroicon;\n\nIconEntry::make('status')\n    ->icon(fn (string $state): string => match ($state) {\n        'draft' => Heroicon::OutlinedPencil,\n        'reviewing' => Heroicon::OutlinedClock,\n        'published' => Heroicon::OutlinedCheckCircle,\n    })\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Job in Filament\nDESCRIPTION: This code snippet demonstrates how to customize the default export job in Filament by binding a custom job class to the base job class in a service provider's `register()` method.  This allows you to extend or override the functionality of the default export job.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Jobs\\PrepareCsvExport;\nuse Filament\\Actions\\Exports\\Jobs\\PrepareCsvExport as BasePrepareCsvExport;\n\n$this->app->bind(BasePrepareCsvExport::class, PrepareCsvExport::class);\n```\n\n----------------------------------------\n\nTITLE: Setting Color Format (RGBA) - PHP\nDESCRIPTION: This snippet demonstrates how to set the color format to RGBA for the Filament color picker component. It creates a color picker field named 'rgba_color' and configures it to use the RGBA format.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/17-color-picker.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\ColorPicker;\n\nColorPicker::make('rgba_color')\n    ->rgba()\n```\n\n----------------------------------------\n\nTITLE: Hiding a Field's Label in Filament\nDESCRIPTION: This snippet demonstrates how to hide the label of a text input field using the `hiddenLabel()` method. This ensures the field's purpose is still communicated to screen readers while visually hiding the label.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->hiddenLabel()\n```\n\n----------------------------------------\n\nTITLE: Marking Column Data as Sensitive - Filament PHP\nDESCRIPTION: This snippet shows how to mark a column's data as sensitive using the `sensitive()` method. This prevents the data from being logged to the database when import rows fail validation, which is useful for protecting sensitive information like social security numbers.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('ssn')\n    ->label('Social security number')\n    ->sensitive()\n    ->rules(['required', 'digits:9'])\n```\n\n----------------------------------------\n\nTITLE: Controlling Column Width with Grid - PHP\nDESCRIPTION: This code demonstrates how to control column widths in a Filament table using the `Grid` layout component. It defines a grid with two columns (`lg` breakpoint) and places two `TextColumn` components inside, ensuring they consume equal width within the grid.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/05-layout.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Layout\\Grid;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nGrid::make([\n    'lg' => 2,\n])\n    ->schema([\n        TextColumn::make('phone')\n            ->icon('heroicon-m-phone'),\n        TextColumn::make('email')\n            ->icon('heroicon-m-envelope'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Testing Table Column Visibility with Pest\nDESCRIPTION: This code snippet demonstrates how to test the visibility of columns in a Filament table using `assertTableColumnVisible()` and `assertTableColumnHidden()`. It verifies that the 'created_at' column is visible and the 'author' column is hidden.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/03-testing-tables.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('shows the correct columns', function () {\n    livewire(PostResource\\Pages\\ListPosts::class)\n        ->assertTableColumnVisible('created_at')\n        ->assertTableColumnHidden('author');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Filament Resource Form\nDESCRIPTION: This code demonstrates how to configure a Filament resource form using the `CustomerForm` schema. It defines the form's structure and fields, such as `name` and `email`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Resources\\Customers\\Schemas\\CustomerForm;\nuse Filament\\Schemas\\Schema;\n\npublic static function form(Schema $schema): Schema\n{\n    return CustomerForm::configure($schema);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix Icon to TimePicker - PHP\nDESCRIPTION: This code snippet demonstrates how to add a prefix icon to a Filament TimePicker component using the `prefixIcon()` method. It utilizes the `Heroicon` class to specify the icon to be displayed before the input field.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/08-date-time-picker.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TimePicker;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTimePicker::make('at')\n    ->prefixIcon(Heroicon::Play)\n```\n\n----------------------------------------\n\nTITLE: Building a Form for Settings (PHP)\nDESCRIPTION: This code shows how to define a form schema within the `form()` method of a Filament settings page. It uses Filament's Form Builder components like `TextInput` and `Repeater` to create a form that allows users to interact with and modify the settings defined in the settings class.  The `Schema` facade is utilized.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-settings-plugin/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Schema;\n\npublic function form(Schema $schema): Schema\n{\n    return $schema\n        ->components([\n            TextInput::make('copyright')\n                ->label('Copyright notice')\n                ->required(),\n            Repeater::make('links')\n                ->schema([\n                    TextInput::make('label')->required(),\n                    TextInput::make('url')\n                        ->url()\n                        ->required(),\n                ]),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Casting Boolean Value - Eloquent Model PHP\nDESCRIPTION: This example demonstrates how to cast the 'is_admin' attribute to a boolean within an Eloquent model. This ensures that the value retrieved from the database is always treated as a boolean, preventing unexpected behavior. It's a prerequisite for using the Checkbox component with Eloquent models.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/04-checkbox.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    protected $casts = [\n        'is_admin' => 'boolean',\n    ];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Changing the color of a dropdown item in Blade\nDESCRIPTION: This snippet showcases how to change the color of a dropdown item using the `color` attribute. The available color options are `danger`, `info`, `primary`, `success`, and `warning`. These attributes will adjust the styling of the dropdown item to visually represent the specified color.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-dropdown.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::dropdown.list.item color=\"danger\">\n    Edit\n</x-filament::dropdown.list.item>\n\n<x-filament::dropdown.list.item color=\"info\">\n    Edit\n</x-filament::dropdown.list.item>\n\n<x-filament::dropdown.list.item color=\"primary\">\n    Edit\n</x-filament::dropdown.list.item>\n\n<x-filament::dropdown.list.item color=\"success\">\n    Edit\n</x-filament::dropdown.list.item>\n\n<x-filament::dropdown.list.item color=\"warning\">\n    Edit\n</x-filament::dropdown.list.item>\n```\n\n----------------------------------------\n\nTITLE: Add Extra HTML Attributes - PHP\nDESCRIPTION: This snippet demonstrates how to add extra HTML attributes to a Filament action. The `extraAttributes()` method is used to specify an array of HTML attributes that should be added to the action's outer HTML element.  This allows greater control over the presentation of the action element.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('edit')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n    ->extraAttributes([\n        'title' => 'Edit this post',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding extra item actions to a builder in PHP\nDESCRIPTION: This code snippet demonstrates how to add extra actions to a builder item, specifically an action to send an email. It uses the `extraItemActions()` method and injects the item ID to get the data for the item to be validated. The `Mail` facade is used to send the email.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Forms\\Components\\Builder;\nuse Filament\\Forms\\Components\\Builder\\Block;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Support\\Icons\\Heroicon;\nuse Illuminate\\Support\\Facades\\Mail;\n\nBuilder::make('content')\n    ->blocks([\n        Block::make('contactDetails')\n            ->schema([\n                TextInput::make('email')\n                    ->label('Email address')\n                    ->email()\n                    ->required(),\n                // ...\n            ]),\n        // ...\n    ])\n    ->extraItemActions([\n        Action::make('sendEmail')\n            ->icon(Heroicon::Square2Stack)\n            ->action(function (array $arguments, Builder $component): void {\n                $itemData = $component->getItemState($arguments['item']);\n                \n                Mail::to($itemData['email'])\n                    ->send(\n                        // ...\n                    );\n            }),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Create Livewire Layout (Bash)\nDESCRIPTION: This Artisan command creates a basic layout file for Livewire components.  It serves as the foundation for incorporating Filament's styles and scripts.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/01-introduction/02-installation.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan livewire:layout\n```\n\n----------------------------------------\n\nTITLE: Preventing Item Reordering - Filament Builder (PHP)\nDESCRIPTION: This snippet demonstrates how to prevent users from reordering items within a Filament Builder component using the `reorderable(false)` method.  Setting `reorderable` to `false` removes the drag handles, preventing users from changing the order of the blocks.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->reorderable(false)\n```\n\n----------------------------------------\n\nTITLE: Generating Responsive Images\nDESCRIPTION: This code snippet enables the generation of responsive images when files are uploaded. This feature automatically creates different sizes of the image to optimize for various devices.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\SpatieMediaLibraryFileUpload;\n\nSpatieMediaLibraryFileUpload::make('attachments')\n    ->multiple()\n    ->responsiveImages()\n```\n\n----------------------------------------\n\nTITLE: Adding Badge to Filament Link - Blade\nDESCRIPTION: This snippet demonstrates adding a badge to the Filament Link Blade component using the `badge` slot.  It also shows how to change the color of the badge using the `badge-color` attribute to visually highlight notifications or other status indicators.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-link.md#_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link>\n    Mark notifications as read\n\n    <x-slot name=\"badge\">\n        3\n    </x-slot>\n</x-filament::link>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link badge-color=\"danger\">\n    Mark notifications as read\n\n    <x-slot name=\"badge\">\n        3\n    </x-slot>\n</x-filament::link>\n```\n\n----------------------------------------\n\nTITLE: Formatting Number in Filament Infolist\nDESCRIPTION: Formats a number using the `numeric()` method in a Filament Infolist TextEntry. By default, the app's locale is used. It can also specify the number of decimal places to use.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('stock')\n    ->numeric()\n```\n\n----------------------------------------\n\nTITLE: Revealable Password Input in Filament\nDESCRIPTION: This snippet illustrates how to make a password input field revealable in Filament, allowing users to view the password they are typing, using the `revealable()` method. Requires Filament Forms. A button will show/hide the password text.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/02-text-input.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('password')\n    ->password()\n    ->revealable()\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('password')\n    ->password()\n    ->revealable(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Triggering Filament Actions from JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to trigger a Filament action from JavaScript, using the `$wire` utility and passing in the action name and arguments. Requires Livewire's `$wire` utility\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-action.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n$wire.mountAction('test', { id: 12345 })\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting TextInput Read-Only - PHP\nDESCRIPTION: This code snippet demonstrates how to conditionally set a TextInput field to read-only based on a boolean value (e.g., a feature flag). The `readOnly()` method accepts a boolean, and if the boolean evaluates to true, the field will be rendered as read-only. The example assumes the presence of a `FeatureFlag` class with an `active()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/02-text-input.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->readOnly(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Setting Week Start Day (Monday/Sunday) - PHP\nDESCRIPTION: This snippet shows how to use the helper methods `weekStartsOnMonday()` and `weekStartsOnSunday()` to configure the first day of the week in the date picker component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/08-date-time-picker.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DateTimePicker;\n\nDateTimePicker::make('published_at')\n    ->native(false)\n    ->weekStartsOnMonday()\n\nDateTimePicker::make('published_at')\n    ->native(false)\n    ->weekStartsOnSunday()\n```\n\n----------------------------------------\n\nTITLE: Setting up the Filament Service Provider - PHP\nDESCRIPTION: Registers the plugin's stylesheet with the Filament Asset Manager. The `packageBooted` method uses `FilamentAsset::register` to load the stylesheet on demand using the `loadedOnRequest()` method.  This ensures the stylesheet is only loaded when the component is used, improving performance.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/11-plugins/04-building-a-standalone-plugin.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace Awcodes\\Headings;\n\nuse Filament\\Support\\Assets\\Css;\nuse Filament\\Support\\Facades\\FilamentAsset;\nuse Spatie\\LaravelPackageTools\\Package;\nuse Spatie\\LaravelPackageTools\\PackageServiceProvider;\n\nclass HeadingsServiceProvider extends PackageServiceProvider\n{\n    public static string $name = 'headings';\n\n    public function configurePackage(Package $package): void\n    {\n        $package->name(static::$name)\n            ->hasViews();\n    }\n\n    public function packageBooted(): void\n    {\n        FilamentAsset::register([\n            Css::make('headings', __DIR__ . '/../resources/dist/headings.css')->loadedOnRequest(),\n        ], 'awcodes/headings');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Navigation Badge Tooltip - Method\nDESCRIPTION: This code snippet demonstrates how to set a custom tooltip for the navigation badge using the `getNavigationBadgeTooltip()` method. This provides dynamic control over the tooltip value. No dependencies are required beyond a Filament resource or page class. The expected output is a navigation item badge which displays the tooltip returned by the method, on hover.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\npublic static function getNavigationBadgeTooltip(): ?string\n{\n    return 'The number of users';\n}\n```\n\n----------------------------------------\n\nTITLE: Custom modal content - Filament Actions (PHP)\nDESCRIPTION: This snippet demonstrates how to define custom content to be rendered inside a Filament Action modal, using the `modalContent()` method and passing a Blade view. The view name is passed as a parameter. Requires the Filament Actions package and a corresponding Blade view file.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Actions\\Action;\n\nAction::make('advance')\n    ->action(fn (Post $record) => $record->advance())\n    ->modalContent(view('filament.pages.actions.advance'))\n```\n\n----------------------------------------\n\nTITLE: Disabling modal close on escape - Filament\nDESCRIPTION: This code snippet demonstrates how to prevent a modal from closing when the Escape key is pressed, using the `closeModalByEscaping(false)` method. This allows the modal to remain open even if the user presses the Escape key.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('updateAuthor')\n    ->schema([\n        // ...\n    ])\n    ->action(function (array $data): void {\n        // ...\n    })\n    ->closeModalByEscaping(false)\n```\n\n----------------------------------------\n\nTITLE: Lazy Load Plugin JavaScript with Alpine.js in Blade\nDESCRIPTION: This Blade code shows how to use `x-load-js` to lazy load a Javascript file registered within a Filament plugin.  It requires specifying the plugin's name as the second argument to `FilamentAsset::getScriptSrc()`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_13\n\nLANGUAGE: blade\nCODE:\n```\n<div\n    x-data=\"{}\"\n    x-load-js=\"[@js(\\Filament\\Support\\Facades\\FilamentAsset::getScriptSrc('custom-script', package: 'danharrin/filament-blog'))]\"\n>\n    <!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Controlling Filters Dropdown Width - Filament PHP\nDESCRIPTION: This code snippet shows how to customize the width of the filters dropdown in a Filament table. The `filtersFormWidth()` method is used with a `Width` enum to specify the desired width.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/06-layout.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Support\\Enums\\Width;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            // ...\n        ])\n        ->filtersFormWidth(Width::FourExtraLarge);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Navigation Parent Item - PHP\nDESCRIPTION: This code configures a navigation item to be a child of another, using `$navigationParentItem` to specify the parent's label and `$navigationGroup` to ensure correct identification if the parent has a group.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?string $navigationParentItem = 'Products';\n\nprotected static ?string $navigationGroup = 'Shop';\n```\n\n----------------------------------------\n\nTITLE: Date formatting using Carbon macros in Filament Infolists (PHP)\nDESCRIPTION: This snippet demonstrates the use of Carbon macro-formats for date formatting using the `isoDate()`, `isoDateTime()`, and `isoTime()` methods on a TextEntry. These methods format the 'created_at' field using Carbon's macro-formats.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('created_at')\n    ->isoDate()\n\nTextEntry::make('created_at')\n    ->isoDateTime()\n\nTextEntry::make('created_at')\n    ->isoTime()\n```\n\n----------------------------------------\n\nTITLE: Adding ExportAction to a Table Header\nDESCRIPTION: This code snippet shows how to add an `ExportAction` to the header of a Filament table. The action is linked to a `ProductExporter` class, which defines how the data is exported.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Exports\\ProductExporter;\nuse Filament\\Actions\\ExportAction;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->headerActions([\n            ExportAction::make()\n                ->exporter(ProductExporter::class),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HasGoogleTwoFactorAuthenticationRecovery Interface (PHP)\nDESCRIPTION: This code snippet implements the `HasGoogleTwoFactorAuthenticationRecovery` interface on the `User` model. It provides the methods required to interact with the user's Google two-factor authentication recovery codes, including retrieving and saving the codes. This enables the functionality for users to use recovery codes when they lose access to their primary authentication method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/02-multi-factor-authentication.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Auth\\MultiFactor\\GoogleTwoFactor\\Contracts\\HasGoogleTwoFactorAuthentication;\nuse Filament\\Auth\\MultiFactor\\GoogleTwoFactor\\Contracts\\HasGoogleTwoFactorAuthenticationRecovery;\nuse Filament\\Models\\Contracts\\FilamentUser;\nuse Illuminate\\Contracts\\Auth\\MustVerifyEmail;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\nclass User extends Authenticatable implements FilamentUser, HasGoogleTwoFactorAuthentication, HasGoogleTwoFactorAuthenticationRecovery, MustVerifyEmail\n{\n    // ...\n\n    /**\n     * @return ?array<string>\n     */\n    public function getGoogleTwoFactorAuthenticationRecoveryCodes(): ?array\n    {\n        // This method should return the user's saved Google two-factor authentication recovery codes.\n    \n        return $this->google_two_factor_authentication_recovery_codes;\n    }\n\n    /**\n     * @param  array<string> | null  $codes\n     */\n    public function saveGoogleTwoFactorAuthenticationRecoveryCodes(?array $codes): void\n    {\n        // This method should save the user's Google two-factor authentication recovery codes.\n    \n        $this->google_two_factor_authentication_recovery_codes = $codes;\n        $this->save();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Basic Filament Livewire Form (PHP Artisan)\nDESCRIPTION: This command generates a new Livewire component for creating a form using Filament. It creates a `app/Livewire/RegistrationForm.php` file that can be customized to define the form's fields and actions. No model is directly associated, requiring manual form field and data persistence configuration.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-form.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-livewire-form RegistrationForm\n```\n\n----------------------------------------\n\nTITLE: Customizing the Entire Notification (Filament, PHP)\nDESCRIPTION: This demonstrates how to customize the entire success notification, including the title and body. It uses the `successNotification()` method along with the `Filament\\Notifications\\Notification` class to build a custom notification.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/08-replicate.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\ReplicateAction;\nuse Filament\\Notifications\\Notification;\n\nReplicateAction::make()\n    ->successNotification(\n       Notification::make()\n            ->success()\n            ->title('Category replicated')\n            ->body('The category has been replicated successfully.'),\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Resource with View Page - Bash\nDESCRIPTION: This command uses the Filament Artisan command to create a new resource along with its corresponding view page. This simplifies the process of setting up a resource with a dedicated view interface.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/05-viewing-records.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-resource User --view\n```\n\n----------------------------------------\n\nTITLE: Replacing the Page Header with a Custom View in PHP\nDESCRIPTION: This snippet shows how to replace the default header of a Filament page with a custom view. It overrides the `getHeader()` method to return a Blade view.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\View\\View;\n\npublic function getHeader(): ?View\n{\n    return view('filament.settings.custom-header');\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling parent actions in Filament\nDESCRIPTION: This snippet shows how to cancel parent actions when a nested action is executed.  The `cancelParentActions()` method cancels all parent actions, closing their modals. This ensures that only the intended action is executed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('delete')\n    ->requiresConfirmation()\n    ->action(function () {\n        // ...\n    })\n    ->cancelParentActions()\n```\n\n----------------------------------------\n\nTITLE: Generating Resource URL - PHP\nDESCRIPTION: This code snippet shows how to generate a URL to a Filament resource's list page using the `getUrl()` method. It requires the full class path to the resource.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Resources\\Customers\\CustomerResource;\n\nCustomerResource::getUrl(); // /admin/customers\n```\n\n----------------------------------------\n\nTITLE: Deferring Table Loading (PHP)\nDESCRIPTION: This code demonstrates how to defer the loading of table data in Filament using the `deferLoading()` method.  This loads the table data asynchronously, improving initial page load time for tables with large datasets.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->deferLoading();\n}\n```\n\n----------------------------------------\n\nTITLE: Casting to Integer and Boolean Values\nDESCRIPTION: This snippet showcases how to use the `integer()` and `boolean()` methods to cast a column's state to an integer or a boolean value, respectively.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('quantity')\n    ->integer() // Casts the state to an integer.\n\nImportColumn::make('is_visible')\n    ->boolean() // Casts the state to a boolean.\n```\n\n----------------------------------------\n\nTITLE: Grouping ToggleButtons (PHP)\nDESCRIPTION: This snippet groups the ToggleButtons together for a more compact display using the `grouped()` method.  Grouping also makes the buttons inline. The method accepts an optional boolean argument to control grouping based on a condition.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/18-toggle-buttons.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\n\nToggleButtons::make('feedback')\n    ->label('Like this post?')\n    ->boolean()\n    ->grouped()\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\n\nToggleButtons::make('feedback')\n    ->label('Like this post?')\n    ->boolean()\n    ->grouped(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Using SpatieTagsColumn in Filament Table\nDESCRIPTION: Demonstrates how to use the `SpatieTagsColumn` component within a Filament table to display tags associated with a model. The column will display the associated tags.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-tags-plugin/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\SpatieTagsColumn;\n\nSpatieTagsColumn::make('tags')\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling Copyable ColorColumn (PHP)\nDESCRIPTION: This snippet demonstrates how to conditionally enable or disable the copyable feature of the ColorColumn based on a feature flag (`FeatureFlag::active()`). This allows for dynamic control over whether the color can be copied to the clipboard.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/05-color.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Components\\ColorColumn;\n\nColorColumn::make('color')\n    ->copyable(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Setting Navigation Parent Item Dynamically - PHP\nDESCRIPTION: This code dynamically defines the parent navigation item label using the `getNavigationParentItem()` method, allowing for flexible parent item selection.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\npublic static function getNavigationParentItem(): ?string\n{\n    return __('filament/navigation.groups.shop.items.products');\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Item Addition - Filament Builder (PHP)\nDESCRIPTION: This snippet demonstrates how to prevent users from adding new items to a Filament Builder component using the `addable(false)` method. Setting `addable` to `false` disables the add action button, preventing the user from creating new blocks within the builder.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->addable(false)\n```\n\n----------------------------------------\n\nTITLE: Customizing Widget Grid Columns in PHP\nDESCRIPTION: This code shows how to customize the number of grid columns used to display widgets in a Filament page header. It overrides the `getHeaderWidgetsColumns()` method to return the desired number of columns.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function getHeaderWidgetsColumns(): int | array\n{\n    return 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tenant Route Prefix in Filament\nDESCRIPTION: This snippet shows how to add a prefix to the tenant route using the `tenantRoutePrefix()` method. This method is used within the panel configuration. In this example, the prefix 'team' is added, changing the URL structure from `/admin/1` to `/admin/team/1`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Team;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->path('admin')\n        ->tenant(Team::class)\n        ->tenantRoutePrefix('team');\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling File Reordering\nDESCRIPTION: This code snippet enables the reordering functionality for the `SpatieMediaLibraryFileUpload` component.  Users can drag and drop files to change their order within the media library.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\SpatieMediaLibraryFileUpload;\n\nSpatieMediaLibraryFileUpload::make('attachments')\n    ->multiple()\n    ->reorderable()\n```\n\n----------------------------------------\n\nTITLE: Accessing Original State During Mutation\nDESCRIPTION: This code snippet demonstrates how to access the original state (before casting) while mutating the state of an import column.  The `castStateUsing()` method can accept an `$originalState` parameter in its callback function.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('price')\n    ->numeric()\n    ->castStateUsing(function (float $state, mixed $originalState): ?float {\n        // ...\n    })\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Transactions for a Panel in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to enable database transactions for all operations within a Filament panel using the `databaseTransactions()` method. This wraps operations in a database transaction.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/05-panel-configuration.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->databaseTransactions();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Min and Max Dates for Validation - PHP\nDESCRIPTION: This snippet demonstrates how to restrict the selectable date range for a DatePicker using `minDate()` and `maxDate()`. It sets the minimum date to 150 years ago and the maximum date to the current date.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/08-date-time-picker.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\n\nDatePicker::make('date_of_birth')\n    ->native(false)\n    ->minDate(now()->subYears(150))\n    ->maxDate(now())\n```\n\n----------------------------------------\n\nTITLE: Limiting Text to a Specific Number of Lines (PHP)\nDESCRIPTION: This snippet demonstrates how to limit the text to a specific number of lines using the `lineClamp()` method. This is useful for responsive interfaces to ensure a consistent experience across different screen sizes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('description')\n    ->wrap()\n    ->lineClamp(2)\n```\n\n----------------------------------------\n\nTITLE: Activating Email Code Authentication in Filament\nDESCRIPTION: This code snippet shows how to activate the email code authentication feature in a Filament panel using the `multiFactorAuthentication()` method and passing an `EmailCodeAuthentication` instance.  This enables the email-based 2FA method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/02-multi-factor-authentication.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Auth\\MultiFactor\\EmailCode\\EmailCodeAuthentication;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->multiFactorAuthentication([\n            EmailCodeAuthentication::make(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Table Column Rendering with Pest\nDESCRIPTION: This code snippet demonstrates how to test if a specific column is rendered in a Filament table using `assertCanRenderTableColumn()`. It verifies that the 'title' column is present in the rendered table HTML after creating some posts.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/03-testing-tables.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can render post titles', function () {\n    Post::factory()->count(10)->create();\n\n    livewire(PostResource\\Pages\\ListPosts::class)\n        ->assertCanRenderTableColumn('title');\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting Action Instance into Filament Action (PHP)\nDESCRIPTION: This snippet demonstrates how to inject the current action instance into its own callback using the `$action` parameter. This allows the action to access its own configuration and methods.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nfunction (Action $action) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Toggle is Accepted (On) in Filament - PHP\nDESCRIPTION: This snippet demonstrates how to validate that the Toggle component is in the 'on' state using the `accepted()` method. It enforces that the user must agree to the terms of service.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/05-toggle.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('terms_of_service')\n    ->accepted()\n```\n\n----------------------------------------\n\nTITLE: Rendering Filament Form in Livewire View\nDESCRIPTION: This Blade code renders a Filament form within a Livewire component's view.  It includes a form tag that calls the 'create' method on submission, and renders the form itself using `$this->form`. It also renders action modals.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-form.md#_snippet_4\n\nLANGUAGE: Blade\nCODE:\n```\n<div>\n    <form wire:submit=\"create\">\n        {{ $this->form }}\n        \n        <button type=\"submit\">\n            Submit\n        </button>\n    </form>\n    \n    <x-filament-actions::modals />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using SpatieTagsColumn with type()\nDESCRIPTION: Demonstrates how to use the `SpatieTagsColumn` component within a Filament table, specifying a `type` to group tags into collections, and only display these tags.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-tags-plugin/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\SpatieTagsColumn;\n\nSpatieTagsColumn::make('tags')\n    ->type('categories')\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Upload Settings\nDESCRIPTION: This code snippet shows how to configure the settings for uploading images to the Filament rich editor, including the disk, directory, and visibility. It configures the storage disk to 's3', the upload directory to 'attachments', and the file visibility to 'private'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/10-rich-editor.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\RichEditor;\n\nRichEditor::make('content')\n    ->fileAttachmentsDisk('s3')\n    ->fileAttachmentsDirectory('attachments')\n    ->fileAttachmentsVisibility('private')\n```\n\n----------------------------------------\n\nTITLE: Customizing Plural Model Label - PHP\nDESCRIPTION: This snippet demonstrates customizing the plural model label in Filament using the `$pluralModelLabel` property. This property defines the pluralized version of the model label, overriding the automatic pluralization.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?string $pluralModelLabel = 'clientes';\n```\n\n----------------------------------------\n\nTITLE: Customizing Font Weight in Filament Text Column (PHP)\nDESCRIPTION: This snippet demonstrates how to customize the font weight of a Filament TextColumn using the `weight()` method and the `FontWeight` enum.  It allows setting the font weight to thin, extra light, light, medium, semi-bold, bold, extra bold, or black.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Support\\Enums\\FontWeight;\n\nTextColumn::make('title')\n    ->weight(FontWeight::Bold)\n```\n\n----------------------------------------\n\nTITLE: Customizing Plural Model Label Dynamically - PHP\nDESCRIPTION: This code snippet shows how to customize the plural model label dynamically using the `getPluralModelLabel()` method. This allows for a dynamic pluralization, possibly based on translation files.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\npublic static function getPluralModelLabel(): string\n{\n    return __('filament/resources/customer.plural_label');\n}\n```\n\n----------------------------------------\n\nTITLE: Collapsing Items by Default - Filament Builder (PHP)\nDESCRIPTION: This snippet shows how to make the builder items collapsed by default using the `collapsed()` method in Filament.  This is useful for hiding content initially, requiring users to expand blocks to view their contents.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->collapsed()\n```\n\n----------------------------------------\n\nTITLE: Closing Notifications from Actions - PHP\nDESCRIPTION: This code snippet demonstrates how to close a Filament notification after an action is performed. It utilizes the `Action::close()` method to achieve this. The notification includes actions to view a post and undo editing. Dependencies include `Filament\\Actions\\Action` and `Filament\\Notifications\\Notification`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/01-overview.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Notifications\\Notification;\n\nNotification::make()\n    ->title('Saved successfully')\n    ->success()\n    ->body('Changes to the post have been saved.')\n    ->actions([\n        Action::make('view')\n            ->button()\n            ->url(route('posts.show', $post), shouldOpenInNewTab: true),\n        Action::make('undo')\n            ->color('gray')\n            ->dispatch('undoEditingPost', [$post->id])\n            ->close(),\n    ])\n    ->send();\n```\n\n----------------------------------------\n\nTITLE: Multiple Relation Managers for View Pages - PHP\nDESCRIPTION: This code snippet shows how to define different relation managers for different view pages within a Filament resource. This is particularly useful when you have multiple view pages with distinct information needs.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/05-viewing-records.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// ViewCustomer.php\nprotected function getAllRelationManagers(): array\n{\n    return [\n        RelationManagers\\OrdersRelationManager::class,\n        RelationManagers\\SubscriptionsRelationManager::class,\n    ];\n}\n\n// ViewCustomerContact.php \nprotected function getAllRelationManagers(): array\n{\n    return [\n        RelationManagers\\ContactsRelationManager::class,\n        RelationManagers\\AddressesRelationManager::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Toolbar Buttons - PHP\nDESCRIPTION: This snippet shows how to disable specific toolbar buttons in the Filament MarkdownEditor using the `disableToolbarButtons()` method. It accepts an array of button names to disable.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/11-markdown-editor.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\MarkdownEditor;\n\nMarkdownEditor::make('content')\n    ->disableToolbarButtons([\n        'blockquote',\n        'strike',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Splitting ToggleButtons into Columns (PHP)\nDESCRIPTION: This snippet demonstrates how to arrange the ToggleButtons options into columns using the `columns()` method.  The number of columns can be customized responsively using the same options as Filament's grid system.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/18-toggle-buttons.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\n\nToggleButtons::make('technologies')\n    ->options([\n        // ...\n    ])\n    ->columns(2)\n```\n\n----------------------------------------\n\nTITLE: Displaying Boolean Values as Icons (Filament, PHP)\nDESCRIPTION: This code demonstrates how to represent boolean values in a Filament table using an Icon column. The `boolean()` method is used to automatically display a checkmark for `true` and an 'X' for `false`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/03-icon.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\n\nIconColumn::make('is_featured')\n    ->boolean()\n```\n\n----------------------------------------\n\nTITLE: Limiting Word Count in Export Column\nDESCRIPTION: This code shows how to limit the number of words displayed in an export column using the `words()` method. This is useful for truncating long text fields to a specified word count.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('description')\n    ->words(10)\n```\n\n----------------------------------------\n\nTITLE: Setting Panel Colors in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to customize the colors used within a Filament panel using the `colors()` method. It utilizes the `Filament\\Support\\Colors\\Color` class to set predefined Tailwind CSS color palettes for different color categories like 'danger', 'gray', 'info', etc.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/01-overview.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\nuse Filament\\Support\\Colors\\Color;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->colors([\n            'danger' => Color::Rose,\n            'gray' => Color::Gray,\n            'info' => Color::Blue,\n            'primary' => Color::Indigo,\n            'success' => Color::Emerald,\n            'warning' => Color::Orange,\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table Filters in Filament\nDESCRIPTION: This snippet demonstrates how to define filters in a Filament table using the `$table->filters()` method. It includes examples of using `Filter` and `SelectFilter` to filter rows based on conditions. The code sets up filters for 'is_featured' and 'status'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\Filter;\nuse Filament\\Tables\\Filters\\SelectFilter;\nuse Filament\\Tables\\Table;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->columns([\n            // ...\n        ])\n        ->filters([\n            Filter::make('is_featured')\n                ->query(fn (Builder $query) => $query->where('is_featured', true)),\n            SelectFilter::make('status')\n                ->options([\n                    'draft' => 'Draft',\n                    'reviewing' => 'Reviewing',\n                    'published' => 'Published',\n                ]),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Filter Tab Labels\nDESCRIPTION: This snippet shows how to customize the labels for filter tabs in FilamentPHP.  It demonstrates passing a label into the `make()` method of the `Tab` object to override the default label generation from the array key.  This enhances readability and user experience by providing more descriptive tab names.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/02-listing-records.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Tabs\\Tab;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\npublic function getTabs(): array\n{\n    return [\n        'all' => Tab::make('All customers'),\n        'active' => Tab::make('Active customers')\n            ->modifyQueryUsing(fn (Builder $query) => $query->where('active', true)),\n        'inactive' => Tab::make('Inactive customers')\n            ->modifyQueryUsing(fn (Builder $query) => $query->where('active', false)),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Flexible Layout with Flex Component - PHP\nDESCRIPTION: This code snippet showcases the use of the `Flex` component to create a layout with flexible widths. It contains two Sections; the first grows to occupy available horizontal space, creating a flexible sidebar effect.  The `from()` method dictates the breakpoint from which the horizontal split layout is applied.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/02-layouts.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Textarea;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Components\\Toggle;\nuse Filament\\Schemas\\Components\\Section;\nuse Filament\\Schemas\\Components\\Flex;\n\nFlex::make([\n    Section::make([\n        TextInput::make('title'),\n        Textarea::make('content'),\n    ]),\n    Section::make([\n        Toggle::make('is_published'),\n        Toggle::make('is_featured'),\n    ])->grow(false),\n])->from('md')\n```\n\n----------------------------------------\n\nTITLE: Preventing the Next Step from Being Loaded (PHP)\nDESCRIPTION: This example shows how to prevent the Wizard from loading the next step during the afterValidation or beforeValidation step lifecycle hooks by throwing a `Filament\\Support\\Exceptions\\Halt` exception. Requires Filament and Filament\\Support\\Exceptions\\Halt.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/05-wizards.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Wizard\\Step;\nuse Filament\\Support\\Exceptions\\Halt;\n\nStep::make('Order')\n    ->afterValidation(function () {\n        // ...\n\n        if (true) {\n            throw new Halt();\n        }\n    })\n    ->schema([\n        // ...\n    ]),\n```\n\n----------------------------------------\n\nTITLE: Discovering Clusters in Filament Panel Configuration (PHP)\nDESCRIPTION: This code snippet demonstrates how to register the directory containing cluster classes in a Filament panel configuration using the `discoverClusters()` method.  This allows Filament to automatically find and load your cluster classes. The `in` parameter specifies the directory, and the `for` parameter sets the namespace.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/04-clusters.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->discoverResources(in: app_path('Filament/Resources'), for: 'App\\\\Filament\\\\Resources')\n        ->discoverPages(in: app_path('Filament/Pages'), for: 'App\\\\Filament\\\\Pages')\n        ->discoverClusters(in: app_path('Filament/Clusters'), for: 'App\\\\Filament\\\\Clusters');\n}\n```\n\n----------------------------------------\n\nTITLE: Moving to a Specific Wizard Step (PHP)\nDESCRIPTION: Demonstrates how to navigate to a specific step in a Filament wizard using `goToWizardStep()` and verify the current step using `assertWizardCurrentStep()`. It requires the `CreatePost` Livewire component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('moves to the wizards second step', function () {\n    livewire(CreatePost::class)\n        ->goToWizardStep(2)\n        ->assertWizardCurrentStep(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Empty State Heading - Filament Table (PHP)\nDESCRIPTION: This code snippet demonstrates how to customize the heading of the empty state in a Filament table using the `emptyStateHeading()` method. It requires the `Filament\\Tables\\Table` class. The method accepts a string as the new heading text.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/08-empty-state.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->emptyStateHeading('No posts yet');\n}\n```\n\n----------------------------------------\n\nTITLE: Passing data to modal content - Filament Actions (PHP)\nDESCRIPTION: This snippet shows how to pass data to a custom modal content view in Filament Actions by returning the data from a function passed to `modalContent()`. Requires Filament Actions and a Blade view to receive the data.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Illuminate\\Contracts\\View\\View;\n\nAction::make('advance')\n    ->action(fn (Contract $record) => $record->advance())\n    ->modalContent(fn (Contract $record): View => view(\n        'filament.pages.actions.advance',\n        ['record' => $record],\n    ))\n```\n\n----------------------------------------\n\nTITLE: Basic ColorEntry instantiation\nDESCRIPTION: Creates a basic ColorEntry component for displaying a color value from the 'color' attribute. This assumes that a 'color' attribute exists in your data model.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/05-color-entry.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\ColorEntry;\n\nColorEntry::make('color')\n```\n\n----------------------------------------\n\nTITLE: Adding Dividers Between Actions (PHP)\nDESCRIPTION: This snippet demonstrates how to add dividers between groups of actions using nested `ActionGroup` objects. It uses `dropdown(false)` to put actions inside the parent dropdown instead of creating a new nested dropdown.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/03-grouping-actions.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\ActionGroup;\n\nActionGroup::make([\n    ActionGroup::make([\n        // Array of actions\n    ])->dropdown(false),\n    // Array of actions\n])\n```\n\n----------------------------------------\n\nTITLE: Customize Delete Notification Title (PHP)\nDESCRIPTION: This code snippet shows how to customize the title of the success notification that is displayed after a record is deleted. It uses the `successNotificationTitle()` method to set a custom title.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/07-delete.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\DeleteAction;\n\nDeleteAction::make()\n    ->successNotificationTitle('User deleted')\n```\n\n----------------------------------------\n\nTITLE: Disabling the save notification in Filament (PHP)\nDESCRIPTION: This code demonstrates how to disable the success notification altogether using the `successNotification(null)` method.  This is useful when a notification is not needed or desired.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/05-edit.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\EditAction;\n\nEditAction::make()\n    ->successNotification(null)\n```\n\n----------------------------------------\n\nTITLE: Setting Affix Icon Color in Filament Text Input\nDESCRIPTION: This snippet demonstrates how to set the color of affix icons in a Filament text input field using the `prefixIconColor()` and `suffixIconColor()` methods. It requires Filament Forms and Filament Support. It sets the suffix icon color to 'success'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/02-text-input.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTextInput::make('domain')\n    ->url()\n    ->suffixIcon(Heroicon::CheckCircle)\n    ->suffixIconColor('success')\n```\n\n----------------------------------------\n\nTITLE: Installing Filament Upgrade Package (Bash)\nDESCRIPTION: This command installs the `filament/upgrade` package as a development dependency using Composer. The `-W` flag ensures that all dependencies are updated to the latest compatible versions. After the upgrade is complete, this package should be removed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/upgrade:\"^4.0\" -W --dev\n\nvendor/bin/filament-v4\n```\n\n----------------------------------------\n\nTITLE: Accessing the Livewire component instance in Filament\nDESCRIPTION: This code snippet demonstrates how to access the current Livewire component instance in a Filament form using the `$livewire` parameter. This allows interacting with the underlying Livewire component. Requires Livewire\\Component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_59\n\nLANGUAGE: PHP\nCODE:\n```\nuse Livewire\\Component;\n\nfunction (Component $livewire) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Scoped Render Hook - PHP\nDESCRIPTION: This snippet demonstrates how to register a render hook with a specific scope using the `FilamentView::registerRenderHook()` method. The scope restricts the hook to a particular page or Livewire component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/01-render-hooks.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Facades\\FilamentView;\nuse Filament\\View\\PanelsRenderHook;\nuse Illuminate\\Support\\Facades\\Blade;\n\nFilamentView::registerRenderHook(\n    PanelsRenderHook::PAGE_START,\n    fn (): View => view('warning-banner'),\n    scopes: \\App\\Filament\\Resources\\Users\\Pages\\EditUser::class,\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Eloquent Record in Blade View (Blade)\nDESCRIPTION: This snippet shows how to access the current Eloquent record within a Blade view that is part of a Filament schema using the `$record` variable.  This allows displaying or manipulating data associated with the record being created or edited.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/07-custom-components.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    {{ $record->name }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Arranging Records in a Grid - PHP\nDESCRIPTION: This code shows how to arrange records in a Filament table into a grid format using the `$table->contentGrid()` method. It defines the number of columns to display at different breakpoints (`md` and `xl`).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/05-layout.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Layout\\Stack;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->columns([\n            Stack::make([\n                // Columns\n            ]),\n        ])\n        ->contentGrid([\n            'md' => 2,\n            'xl' => 3,\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Globally Adding 'all' Option to Table Pagination\nDESCRIPTION: This code snippet demonstrates how to globally add the 'all' option to the pagination page options across the entire Filament application. It utilizes the `Table::configureUsing` method within the `boot` method of a service provider to include 'all' in the default pagination options for all tables. Requires the `Filament\\Tables\\Table` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Table;\n\nTable::configureUsing(fn (Table $table) => $table\n    ->paginationPageOptions([5, 10, 25, 50, 'all']));\n```\n\n----------------------------------------\n\nTITLE: Add Badge to Button - PHP\nDESCRIPTION: This snippet shows how to add a badge to the corner of a Filament action button. The `badge()` method is used to specify the content of the badge, which can be a count or a status indicator.  The badge will appear on the corner of the button.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('filter')\n    ->iconButton()\n    ->icon('heroicon-m-funnel')\n    ->badge(5)\n```\n\n----------------------------------------\n\nTITLE: Setting Filament Link Size - Blade\nDESCRIPTION: This snippet demonstrates setting the size of the Filament Link Blade component using the `size` attribute.  Various sizes such as 'sm', 'lg', 'xl', and '2xl' are shown to control the visual appearance of the link. The default size is 'medium'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-link.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link size=\"sm\">\n    New user\n</x-filament::link>\n\n<x-filament::link size=\"lg\">\n    New user\n</x-filament::link>\n\n<x-filament::link size=\"xl\">\n    New user\n</x-filament::link>\n\n<x-filament::link size=\"2xl\">\n    New user\n</x-filament::link>\n```\n\n----------------------------------------\n\nTITLE: Preventing Row Deletion in Filament KeyValue\nDESCRIPTION: This snippet demonstrates how to disable the ability to delete rows from the KeyValue field using the `deletable(false)` method.  This is useful when certain key-value pairs should not be removed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/16-key-value.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n    ->deletable(false)\n```\n\n----------------------------------------\n\nTITLE: Allowing Steps to be Skipped (PHP)\nDESCRIPTION: This snippet demonstrates allowing users to skip steps in the Filament Wizard using the `skippable()` method. It shows both enabling skippability for the entire wizard and conditionally enabling it for a specific step. Requires Filament.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/05-wizards.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Wizard;\n\nWizard::make([\n    // ...\n])->skippable()\n\nuse Filament\\Schemas\\Components\\Wizard\\Step;\n\nStep::make('Order')\n    ->skippable(FeatureFlag::active())\n    ->schema([\n        // ...\n    ]),\n```\n\n----------------------------------------\n\nTITLE: Displaying Text Entry as a badge in Filament Infolists (PHP)\nDESCRIPTION: This code snippet demonstrates how to display a TextEntry component as a badge using the `badge()` method. It also shows how to dynamically set the badge color based on the 'status' field. The `badge()` method also accepts a function for dynamic badge enabling.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('status')\n    ->badge()\n    ->color(fn (string $state): string => match ($state) {\n        'draft' => 'gray',\n        'reviewing' => 'warning',\n        'published' => 'success',\n        'rejected' => 'danger',\n    })\n```\n\n----------------------------------------\n\nTITLE: Inserting actions in the section footer\nDESCRIPTION: This code demonstrates how to insert actions into the footer of a section using the `footer()` method, allowing you to add buttons or other components to the footer.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/03-sections.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Section;\n\nSection::make('Rate limiting')\n    ->description('Prevent abuse by limiting the number of requests per period')\n    ->schema([\n        // ...\n    ])\n    ->footer([\n        Action::make('test'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Using Utility Injection in Filament Component - PHP\nDESCRIPTION: This snippet shows how to use the utility injection feature of the custom Filament component. It passes a Closure to the `heading()` method, which can then inject a utility (Product record in this case) as a parameter. It depends on the `Chart` component defined previously and the `Product` model.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/07-custom-components.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Schemas\\Components\\Chart;\n\nChart::make()\n    ->heading(fn (Product $record): string => \"{$record->name} Sales\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Boolean Toggle Labels (PHP)\nDESCRIPTION: This snippet customizes the labels for the boolean ToggleButtons component using the `trueLabel` and `falseLabel` arguments of the `boolean()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/18-toggle-buttons.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\n\nToggleButtons::make('feedback')\n    ->label('Like this post?')\n    ->boolean(trueLabel: 'Absolutely!')\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\n\nToggleButtons::make('feedback')\n    ->label('Like this post?')\n    ->boolean(falseLabel: 'Not at all!')\n```\n\n----------------------------------------\n\nTITLE: Accessing the field's current state in Filament\nDESCRIPTION: This code snippet illustrates how to access the current value (state) of a field within a Filament form using the `$state` parameter in a function. The injected `$state` variable holds the current value of the field.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_54\n\nLANGUAGE: PHP\nCODE:\n```\nfunction ($state) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS Upgrade Tool\nDESCRIPTION: This command uses the Tailwind CSS upgrade tool to automatically adjust configuration files to use Tailwind v4.  It requires Node.js and npm (or yarn) to be installed. It updates the `tailwind.config.js` file or any other configuration file and installs the Tailwind v4 packages to replace the v3 ones.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nnpx @tailwindcss/upgrade\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Livewire Component (PHP)\nDESCRIPTION: This snippet demonstrates how to enable lazy loading for a Livewire component within a Filament schema using the `lazy()` method.  This can improve initial page load times by deferring the rendering of the Livewire component until it is needed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/07-custom-components.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Livewire;\nuse App\\Livewire\\Chart;\n\nLivewire::make(Chart::class)\n    ->lazy()       \n```\n\n----------------------------------------\n\nTITLE: Using Simple Pagination in Filament\nDESCRIPTION: This snippet shows how to use simple pagination in a Filament table using the `paginationMode(PaginationMode::Simple)` method. Simple pagination typically only includes 'Previous' and 'Next' buttons, without showing the total number of pages.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Enums\\PaginationMode;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->paginationMode(PaginationMode::Simple);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Dashboard Page in Filament\nDESCRIPTION: This snippet shows how to manually register a custom Dashboard page in Filament if `discoverPages()` is not used or doesn't include the custom Dashboard's directory. It configures the Filament panel to include the custom `Dashboard` class in the panel's pages. It explicitly declares the `Dashboard` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/01-overview.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Pages\\Dashboard;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->pages([\n            Dashboard::class,\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the Page Navigation Label in PHP\nDESCRIPTION: This code snippet shows how to customize the navigation label for a Filament page by defining a `$navigationLabel` property.  You can also override the `getNavigationLabel()` method to return a custom label.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?string $navigationLabel = 'Custom Navigation Label';\n```\n\nLANGUAGE: php\nCODE:\n```\npublic static function getNavigationLabel(): string\n{\n    return __('Custom Navigation Label');\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle Hooks (Filament, PHP)\nDESCRIPTION: This example demonstrates how to use lifecycle hooks to execute code at different points in the replication process. It includes `before`, `beforeReplicaSaved`, and `after` hooks, allowing you to run code before replication, before saving the replica, and after saving the replica, respectively.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/08-replicate.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\ReplicateAction;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nReplicateAction::make()\n    ->before(function () {\n        // Runs before the record has been replicated.\n    })\n    ->beforeReplicaSaved(function (Model $replica): void {\n        // Runs after the record has been replicated but before it is saved to the database.\n    })\n    ->after(function (Model $replica): void {\n        // Runs after the replica has been saved to the database.\n    })\n```\n\n----------------------------------------\n\nTITLE: Customizing Cluster Breadcrumb (Static) (PHP)\nDESCRIPTION: This snippet shows how to customize the breadcrumb name for a cluster using the `$clusterBreadcrumb` property.  This allows you to override the default breadcrumb text with a custom string.  This allows for better user experience.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/04-clusters.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nprotected static ?string $clusterBreadcrumb = 'cluster';\n```\n\n----------------------------------------\n\nTITLE: Optimizing Modal Rendering in Filament\nDESCRIPTION: This snippet shows how to optimize modal rendering by using the `modal()` method. This informs Filament that the modal exists for this action, preventing redundant checks and improving performance when the action contains expensive operations.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('updateAuthor')\n    ->modal()\n```\n\n----------------------------------------\n\nTITLE: Binding a Custom User Model for Filament Exports\nDESCRIPTION: This code snippet demonstrates how to bind a new `Authenticatable` model to the container in a service provider's `register()` method, allowing you to use a custom user model for Filament exports. The default user relationship on the Export model uses `App\\Models\\User`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_38\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\Admin;\nuse Illuminate\\Contracts\\Auth\\Authenticatable;\n\n$this->app->bind(Authenticatable::class, Admin::class);\n```\n\n----------------------------------------\n\nTITLE: Authenticating User in TestCase - PHP\nDESCRIPTION: This snippet demonstrates how to authenticate a user within a TestCase in PHP. It uses the `actingAs()` method to authenticate a newly created user before running tests. This ensures that the application context has an authenticated user.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/02-testing-resources.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\User;\n\nprotected function setUp(): void\n{\n    parent::setUp();\n\n    $this->actingAs(User::factory()->create());\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting after Restore in Filament (PHP)\nDESCRIPTION: This snippet shows how to redirect the user to a specific URL after a successful restore operation using the `successRedirectUrl()` method. This can be useful for directing the user back to a relevant page after restoring a record. Requires Filament routing setup.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/10-restore.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\RestoreAction;\n\nRestoreAction::make()\n    ->successRedirectUrl(route('posts.list'))\n```\n\n----------------------------------------\n\nTITLE: Improving Import Column Mapping Guesses - PHP\nDESCRIPTION: This snippet shows how to improve the column mapping guesses by calling the `guess()` method with more examples of the column name. The `guess()` method accepts an array of possible column names that might be present in the CSV. Dependencies: Filament\\Actions\\Imports\\ImportColumn.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('sku')\n    ->guess(['id', 'number', 'stock-keeping unit'])\n```\n\n----------------------------------------\n\nTITLE: Opening an Action Modal on Page Load in PHP\nDESCRIPTION: This code snippet demonstrates how to automatically open an action modal when a Filament page loads. It sets the `$defaultAction` property to the name of the action and defines the action using the `onboardingAction()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\npublic $defaultAction = 'onboarding';\n\npublic function onboardingAction(): Action\n{\n    return Action::make('onboarding')\n        ->modalHeading('Welcome')\n        ->visible(fn (): bool => ! auth()->user()->isOnBoarded());\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Table Rendering with Pest\nDESCRIPTION: This code snippet demonstrates how to test if a Filament table component renders successfully using the `assertSuccessful()` method provided by Pest's Livewire testing helpers. It ensures that the Livewire component `ListPosts` is rendered without errors.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/03-testing-tables.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can render page', function () {\n    livewire(ListPosts::class)\n        ->assertSuccessful();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Checkbox - Filament PHP\nDESCRIPTION: This code snippet demonstrates how to create a basic checkbox component using Filament PHP. The checkbox is bound to the 'is_admin' property. This allows a user to set a boolean value, typically used for admin privileges.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/04-checkbox.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Checkbox;\n\nCheckbox::make('is_admin')\n```\n\n----------------------------------------\n\nTITLE: Conditional Expandable Limited List\nDESCRIPTION: Conditionally allows expanding and collapsing a limited list using the `expandableLimitedList()` method in a Filament Infolist TextEntry. Requires `listWithLineBreaks()` or `bulleted()` to be used. Accepts both static values and functions for dynamic calculation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('authors.name')\n    ->listWithLineBreaks()\n    ->limitList(3)\n    ->expandableLimitedList(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle Hooks in Filament RestoreAction (PHP)\nDESCRIPTION: This snippet demonstrates the usage of `before()` and `after()` lifecycle hooks to execute custom code before and after the record restoration process. These hooks provide a way to perform actions such as logging or data manipulation during the restore operation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/10-restore.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\RestoreAction;\n\nRestoreAction::make()\n    ->before(function () {\n        // ...\n    })\n    ->after(function () {\n        // ...\n    })\n```\n\n----------------------------------------\n\nTITLE: Filament Button as Anchor Link - Blade\nDESCRIPTION: This snippet shows how to use a Filament button as an anchor link (`<a>` tag) by setting the `tag` attribute to \"a\" and providing an `href` attribute. This allows the button to navigate to a specific URL when clicked.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-button.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::button\n    href=\"https://filamentphp.com\"\n    tag=\"a\"\n>\n    Filament\n</x-filament::button>\n```\n\n----------------------------------------\n\nTITLE: Limiting the Number of List Values\nDESCRIPTION: Limits the number of values displayed in a list using the `limitList()` method in a Filament Infolist TextEntry. Requires `listWithLineBreaks()` or `bulleted()` to be effective. Accepts both static values and functions for dynamic calculation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('authors.name')\n    ->listWithLineBreaks()\n    ->limitList(3)\n```\n\n----------------------------------------\n\nTITLE: Defining Route Parameter for Record Access\nDESCRIPTION: To include a record parameter in the route, you must define `{record}` in the route path within the `getPages()` method.  This allows you to pass the record ID to the custom page.  The `ManageUser` page would then load the user with ID.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/11-custom-pages.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic static function getPages(): array\n{\n    return [\n        // ...\n        'manage' => Pages\\ManageUser::route('/{record}/manage'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the Icon for Completed Steps (PHP)\nDESCRIPTION: This example demonstrates how to customize the icon displayed for a completed step in the Filament Wizard using the `completedIcon()` method. It also uses the `Filament\\Support\\Icons\\Heroicon` enum. Requires Filament and Filament\\Support\\Icons\\Heroicon.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/05-wizards.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Wizard\\Step;\nuse Filament\\Support\\Icons\\Heroicon;\n\nStep::make('Order')\n    ->completedIcon(Heroicon::HandThumbUp)\n    ->schema([\n        // ...\n    ]),\n```\n\n----------------------------------------\n\nTITLE: Prevent Auto Loading for CSS\nDESCRIPTION: This shows how to prevent CSS files from being loaded automatically and enabling lazy loading using `loadedOnRequest()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Assets\\Css;\nuse Filament\\Support\\Facades\\FilamentAsset;\n\nFilamentAsset::register([\n    Css::make('custom-stylesheet', __DIR__ . '/../../resources/css/custom.css')->loadedOnRequest(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Add Colored Badge to Button - PHP\nDESCRIPTION: This snippet demonstrates how to add a badge with a specific color to the corner of a Filament action button. The `badgeColor()` method is used to specify the color of the badge. The color is from Filament's color palette.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('filter')\n    ->iconButton()\n    ->icon('heroicon-m-funnel')\n    ->badge(5)\n    ->badgeColor('success')\n```\n\n----------------------------------------\n\nTITLE: Generating Filament Livewire Form with Automatic Schema (PHP Artisan)\nDESCRIPTION: This command generates a Livewire form and attempts to automatically generate the form schema based on the model's database columns. The `--generate` flag instructs Filament to infer form fields from the model's structure. This simplifies form creation by reducing manual field configuration.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-form.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-livewire-form Products/CreateProduct --generate\n```\n\n----------------------------------------\n\nTITLE: Changing the icon color of a dropdown item in Blade\nDESCRIPTION: This snippet demonstrates how to change the icon color of a dropdown item using the `icon-color` attribute. The icon color can be set to `danger`, `info`, `primary`, `success`, or `warning`. If `icon-color` is not set, the icon will inherit the color of the dropdown item.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-dropdown.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::dropdown.list.item icon=\"heroicon-m-pencil\" icon-color=\"danger\">\n    Edit\n</x-filament::dropdown.list.item>\n\n<x-filament::dropdown.list.item icon=\"heroicon-m-pencil\" icon-color=\"info\">\n    Edit\n</x-filament::dropdown.list.item>\n\n<x-filament::dropdown.list.item icon=\"heroicon-m-pencil\" icon-color=\"primary\">\n    Edit\n</x-filament::dropdown.list.item>\n\n<x-filament::dropdown.list.item icon=\"heroicon-m-pencil\" icon-color=\"success\">\n    Edit\n</x-filament::dropdown.list.item>\n\n<x-filament::dropdown.list.item icon=\"heroicon-m-pencil\" icon-color=\"warning\">\n    Edit\n</x-filament::dropdown.list.item>\n```\n\n----------------------------------------\n\nTITLE: Adding Modal Icon with Custom Color - Blade\nDESCRIPTION: This code snippet demonstrates how to add an icon to a Filament modal and customize its color using the `icon-color` attribute. The `icon` attribute is set to 'heroicon-o-exclamation-triangle', and the `icon-color` attribute is set to 'danger', changing the icon's color.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-modal.md#_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal\n    icon=\"heroicon-o-exclamation-triangle\"\n    icon-color=\"danger\"\n>\n    <x-slot name=\"heading\">\n        Modal heading\n    </x-slot>\n\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Setting Constraint Picker Columns with Integer - PHP\nDESCRIPTION: This code snippet demonstrates how to set the number of columns in the constraint picker for large screens and above using the `constraintPickerColumns()` method with an integer value. Smaller devices will default to 1 column. It requires the `Filament\\Tables\\Filters\\QueryBuilder` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder;\n\nQueryBuilder::make()\n    ->constraintPickerColumns(2)\n    ->constraints([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Rendering Notifications Livewire Component in Blade\nDESCRIPTION: This code snippet demonstrates how to render the `notifications` Livewire component within a Blade layout. This ensures that notifications triggered by Livewire requests are displayed to the user. The component is rendered within a `div` element.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-notifications.md#_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    @livewire('notifications')\n</div>\n```\n\n----------------------------------------\n\nTITLE: Registering Page for Resource Sub-Navigation - PHP\nDESCRIPTION: This code illustrates how to register a view page for resource sub-navigation in Filament. By using the `getRecordSubNavigation()` method and `generateNavigationItems()`, you can add the view page to the sub-navigation menu of a resource, enabling easy access to different views of the same record.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/05-viewing-records.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Resources\\Customers\\Pages;\nuse Filament\\Resources\\Pages\\Page;\n\npublic static function getRecordSubNavigation(Page $page): array\n{\n    return $page->generateNavigationItems([\n        // ...\n        Pages\\ViewCustomerContact::class,\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to a Filament Action in Blade\nDESCRIPTION: This Blade code demonstrates how to pass arguments to a Filament action when rendering it in a Livewire view.  It iterates over an array of posts and renders the deleteAction for each, passing the post ID as an argument.  The modals are included.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-action.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    @foreach ($posts as $post)\n        <h2>{{ $post->title }}</h2>\n\n        {{ ($this->deleteAction)(['post' => $post->id]) }}\n    @endforeach\n\n    <x-filament-actions::modals />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining a Full-Page Livewire Component Route\nDESCRIPTION: This PHP code defines a route that maps the URL 'posts/create' to the `CreatePost` Livewire component. When a user visits 'posts/create', the `CreatePost` component will be rendered as a full page.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-form.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Livewire\\CreatePost;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('posts/create', CreatePost::class);\n```\n\n----------------------------------------\n\nTITLE: Hiding Form Component based on Operation\nDESCRIPTION: This code snippet demonstrates how to hide a form component (TextInput 'password') on the 'edit' page using `hiddenOn()` method and `Operation::Edit`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Support\\Enums\\Operation;\n\nTextInput::make('password')\n    ->password()\n    ->required()\n    ->hiddenOn(Operation::Edit),\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Chart.js Plugin - JavaScript\nDESCRIPTION: This code shows how to configure Vite to include the JavaScript file containing the Chart.js plugin. It adds the file to the `input` array in the Vite configuration, ensuring it is built during the build process. After adding the input you must run `npm run build`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/03-charts.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport laravel from 'laravel-vite-plugin';\n\nexport default defineConfig({\n    plugins: [\n        laravel({\n            input: [\n                'resources/css/app.css',\n                'resources/js/app.js',\n                'resources/css/filament/admin/theme.css',\n                'resources/js/filament-chart-js-plugins.js', // Include the new file in the `input` array so it is built\n            ],\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Date formatting in Filament Infolists (PHP)\nDESCRIPTION: This snippet demonstrates how to customize the date, datetime, and time format using the `date()`, `dateTime()`, and `time()` methods with a specific format string. It uses PHP date formatting tokens for customizing the 'created_at' field.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('created_at')\n    ->date('M j, Y')\n    \nTextEntry::make('created_at')\n    ->dateTime('M j, Y H:i:s')\n    \nTextEntry::make('created_at')\n    ->time('H:i:s')\n```\n\n----------------------------------------\n\nTITLE: Customizing Navigation Label - Property\nDESCRIPTION: This code snippet demonstrates how to customize the navigation label using the `$navigationLabel` property in a Filament resource or page class.  Setting this static property overrides the default label generated from the resource or page name. No dependencies are required beyond a Filament resource or page class. The expected output is a navigation item with the specified custom label.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nprotected static ?string $navigationLabel = 'Custom Navigation Label';\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Job Batch Name in Filament\nDESCRIPTION: This code snippet shows how to customize the batch name for export jobs in Filament by overriding the `getJobBatchName()` method in the exporter class. The example sets the batch name to 'product-export'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_55\n\nLANGUAGE: php\nCODE:\n```\npublic function getJobBatchName(): ?string\n{\n    return 'product-export';\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling the Success Notification in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to disable the success notification after record creation by returning `null` from the `getCreatedNotification()` method. This prevents any notification from being displayed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\nprotected function getCreatedNotification(): ?Notification\n{\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Values with Conditional Line Breaks\nDESCRIPTION: Conditionally renders multiple values from an array on separate lines based on a boolean value. Uses the `listWithLineBreaks()` method with a boolean parameter.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('authors.name')\n    ->listWithLineBreaks(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Registering render hook with view rendering in Filament\nDESCRIPTION: Registers a render hook to inject content from a Blade view file into the Filament panel. It uses the `FilamentView` facade to register the hook at the `BODY_START` location, rendering the `impersonation-banner` view.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/01-render-hooks.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Facades\\FilamentView;\nuse Filament\\View\\PanelsRenderHook;\nuse Illuminate\\Contracts\\View\\View;\n\nFilamentView::registerRenderHook(\n    PanelsRenderHook::BODY_START,\n    fn (): View => view('impersonation-banner'),\n);\n```\n\n----------------------------------------\n\nTITLE: Positioning Row Actions\nDESCRIPTION: This snippet demonstrates how to change the position of row actions within a Filament table using the `position` argument in the `actions()` method. Actions can be moved before the columns or before the checkbox column.  The available options are `ActionsPosition::BeforeColumns` and `ActionsPosition::BeforeCells`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/04-actions.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Enums\\ActionsPosition;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->actions([\n            // ...\n        ], position: ActionsPosition::BeforeColumns);\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Enums\\ActionsPosition;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->actions([\n            // ...\n        ], position: ActionsPosition::BeforeCells);\n}\n```\n\n----------------------------------------\n\nTITLE: Outlined Button Style - PHP\nDESCRIPTION: This snippet shows how to make a Filament action button outlined. The `outlined()` method is used to apply the outlined style to the button. This is generally used in conjunction with the button() method, to make the action look more like a button.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('edit')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n    ->button()\n    ->outlined()\n```\n\n----------------------------------------\n\nTITLE: Displaying Radio Options Inline - PHP\nDESCRIPTION: This snippet demonstrates how to display radio options inline with each other using the `inline()` method. It creates a boolean-style radio button group for collecting feedback on a post.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/07-radio.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Radio;\n\nRadio::make('feedback')\n    ->label('Like this post?')\n    ->boolean()\n    ->inline()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Showing Filament Table Summary based on Query (PHP)\nDESCRIPTION: Demonstrates how to conditionally show a summary using the `visible()` method based on the result of a database query. The summary will be visible if the query returns results. Requires Filament Tables and Illuminate Database.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Summarizer;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nTextColumn::make('sku')\n    ->summarize(Summarizer::make()\n        ->visible(fn (Builder $query): bool => $query->exists()))\n```\n\n----------------------------------------\n\nTITLE: Creating Collapsible Content with Panel - PHP\nDESCRIPTION: This code shows how to add collapsible content to a Filament table using the `Panel` component. It wraps a `Stack` component containing two `TextColumn` components within a `Panel` and makes it collapsible. The code also uses `Split` component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/05-layout.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\FontWeight;\nuse Filament\\Tables\\Columns\\Layout\\Panel;\nuse Filament\\Tables\\Columns\\Layout\\Split;\nuse Filament\\Tables\\Columns\\Layout\\Stack;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Tables\\Columns\\TextColumn;\n\n[\n    Split::make([\n        ImageColumn::make('avatar')\n            ->circular(),\n        TextColumn::make('name')\n            ->weight(FontWeight::Bold)\n            ->searchable()\n            ->sortable(),\n    ]),\n    Panel::make([\n        Stack::make([\n            TextColumn::make('phone')\n                ->icon('heroicon-m-phone'),\n            TextColumn::make('email')\n                ->icon('heroicon-m-envelope'),\n        ]),\n    ])->collapsible(),\n]\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Attributes to ImageColumn (PHP)\nDESCRIPTION: This code snippet demonstrates how to add extra HTML attributes to the `<img>` element rendered by Filament's `ImageColumn` using the `extraImgAttributes()` method.  The attributes are defined as a key-value array where keys are attribute names and values are attribute values. The function also accepts a `merge: true` parameter to merge attributes instead of overwriting them.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/04-image.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\ImageColumn;\n\nImageColumn::make('logo')\n    ->extraImgAttributes([\n        'alt' => 'Logo',\n        'loading' => 'lazy',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting Tab Badge - PHP\nDESCRIPTION: Illustrates how to add a badge to a Filament Tab using the `badge()` method.  The badge displays a numerical value.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/04-tabs.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Tabs;\nuse Filament\\Schemas\\Components\\Tabs\\Tab;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tab::make('Notifications')\n            ->badge(5)\n            ->schema([\n                // ...\n            ]),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting the Size of a Filament Action Button (PHP)\nDESCRIPTION: This code shows how to set the size of an action's trigger button using the `size()` method. The size can be one of `Size::Small`, `Size::Medium`, or `Size::Large`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Support\\Enums\\Size;\n\nAction::make('create')\n    ->size(Size::Large)\n```\n\n----------------------------------------\n\nTITLE: Inline Label on Schema - PHP\nDESCRIPTION: This snippet demonstrates applying inline labels to an entire Filament form schema using `inlineLabel()` on the schema object. This applies the inline label style to all fields within the form.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Schema;\n\npublic function form(Schema $schema): Schema\n{\n    return $schema\n        ->inlineLabel()\n        ->components([\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Casting Each Item in an Array - Filament PHP\nDESCRIPTION: This snippet shows how to cast each item in an array to a different data type, such as an integer, after splitting the column values into an array using the `multiple()` method. It builds on the previous example by chaining the `integer()` method to cast each item to an integer.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('customer_ratings')\n    ->multiple(',')\n    ->integer() // Casts each item in the array to an integer.\n```\n\n----------------------------------------\n\nTITLE: Injecting State of Another Component - PHP\nDESCRIPTION: This code snippet shows how to inject the state (value) of another component within a schema using the `$get` parameter. It retrieves the value of the 'email' entry and stores it in the `$email` variable. This allows components to react to and utilize the values of other components within the schema.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/01-overview.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Utilities\\Get;\n\nfunction (Get $get) {\n    $email = $get('email'); // Store the value of the `email` entry in the `$email` variable.\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting icon position in Filament Infolists (PHP)\nDESCRIPTION: This snippet configures the position of the icon within a TextEntry component using the `iconPosition()` method. It uses the `IconPosition` enum to specify whether the icon appears before or after the text. The `iconPosition()` method can also accept a function for dynamic icon position selection.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\nuse Filament\\Support\\Enums\\IconPosition;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTextEntry::make('email')\n    ->icon(Heroicon::Envelope)\n    ->iconPosition(IconPosition::After) // `IconPosition::Before` or `IconPosition::After`\n```\n\n----------------------------------------\n\nTITLE: Disabling and Dehydrating a Toggle Field in Filament\nDESCRIPTION: This snippet demonstrates how to disable a toggle field using `disabled()` and ensure it is still saved using `dehydrated()`.  Note that dehydrated fields can still potentially be manipulated via JavaScript.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('is_admin')\n    ->disabled()\n    ->dehydrated()\n```\n\n----------------------------------------\n\nTITLE: Preserving All Form Data When Creating Another in Filament (PHP)\nDESCRIPTION: This code demonstrates how to preserve all form data when using the \"create and create another\" feature. By overriding the `preserveFormDataWhenCreatingAnother()` method and returning the entire `$data` array, all filled fields will be retained for the next record creation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nprotected function preserveFormDataWhenCreatingAnother(array $data): array\n{\n    return $data;\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Column Header Offset - PHP\nDESCRIPTION: This snippet shows how to change the column header offset by using the `headerOffset()` method on the `ImportAction`. The method accepts the number of rows to skip. Dependencies: App\\Filament\\Imports\\ProductImporter, Filament\\Actions\\ImportAction.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Imports\\ProductImporter;\nuse Filament\\Actions\\ImportAction;\n\nImportAction::make()\n    ->importer(ProductImporter::class)\n    ->headerOffset(5)\n```\n\n----------------------------------------\n\nTITLE: Accessing the current operation in Blade view\nDESCRIPTION: This code shows how to access the current operation (e.g., 'create', 'edit', 'view') using the `$operation` variable. It uses a conditional statement to display different messages based on the operation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/08-custom-entries.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-dynamic-component\n    :component=\"$getEntryWrapperView()\"\n    :entry=\"$entry\"\n>\n    @if ($operation === 'create')\n        This is a new conference.\n    @else\n        This is an existing conference.\n    @endif\n</x-dynamic-component>\n```\n\n----------------------------------------\n\nTITLE: Setting Color Format (HSL) - PHP\nDESCRIPTION: This snippet demonstrates how to set the color format to HSL for the Filament color picker component. It creates a color picker field named 'hsl_color' and configures it to use the HSL format.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/17-color-picker.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\ColorPicker;\n\nColorPicker::make('hsl_color')\n    ->hsl()\n```\n\n----------------------------------------\n\nTITLE: Adding content above form field label - PHP\nDESCRIPTION: This code adds an icon and text above the label of a text input using the `aboveLabel()` method in Filament.  It uses the `Icon` component along with text and passes them as an array to `aboveLabel()` to display the content above the label.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Icon;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTextInput::make('name')\n    ->aboveLabel([\n        Icon::make(Heroicon::Star),\n        'This is the content above the field\\'s label'\n    ])\n```\n\n----------------------------------------\n\nTITLE: Using utility injection in entry configuration\nDESCRIPTION: This example shows how to use utility injection when configuring the custom entry's `speed` using a `Closure`. It demonstrates injecting the `$record` (Conference model) and using it to determine the speed based on whether the conference is global.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/08-custom-entries.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Infolists\\Components\\AudioPlayerEntry;\n\nAudioPlayerEntry::make('recording')\n    ->speed(fn (Conference $record): float => $record->isGlobal() ? 1 : 0.5)\n```\n\n----------------------------------------\n\nTITLE: Changing Export Chunk Size in Filament\nDESCRIPTION: This code snippet illustrates how to change the chunk size for Filament exports using the `chunkSize()` method on the `ExportAction`. Filament processes CSV exports in chunks via queued jobs. Adjusting the chunk size can improve performance or prevent memory issues. The example sets the chunk size to 250 rows.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Exports\\ProductExporter;\nuse Filament\\Actions\\ExportAction;\n\nExportAction::make()\n    ->exporter(ProductExporter::class)\n    ->chunkSize(250)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Blade View in Filament (PHP)\nDESCRIPTION: This snippet shows how to override the default view for a Filament page with a custom Blade view. It sets the `$view` property to the path of the custom view file.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nprotected string $view = 'filament.resources.users.pages.create-user';\n```\n\n----------------------------------------\n\nTITLE: Positioning Filters in Grid Columns - Filament PHP\nDESCRIPTION: This code snippet demonstrates how to change the number of columns that filters may occupy within a Filament table. The `filtersFormColumns()` method is used to specify the number of columns.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/06-layout.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            // ...\n        ])\n        ->filtersFormColumns(3);\n}\n```\n\n----------------------------------------\n\nTITLE: Aligning 'afterLabel' content to start - PHP\nDESCRIPTION: This code aligns the content added using `afterLabel()` to the start of the container. It demonstrates using `Schema::start()` to override the default alignment of `afterLabel` content, which is to the end of the container.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Icon;\nuse Filament\\Schemas\\Schema;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTextInput::make('name')\n    ->afterLabel(Schema::start([\n        Icon::make(Heroicon::Star),\n        'This is the content after the field\\'s label'\n    ]))\n```\n\n----------------------------------------\n\nTITLE: Adding View Action to Table - PHP\nDESCRIPTION: This code shows how to add a `ViewAction` to a Filament table.  This action enables users to view record details directly from the table, often in a modal.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/05-viewing-records.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic static function table(Table $table): Table\n{\n    return $table\n        ->columns([\n            // ...\n        ])\n        ->actions([\n            \\Filament\\Actions\\ViewAction::make(),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MFA Secret Column to Users Table (PHP)\nDESCRIPTION: This code adds a new column to the users table for storing the Google two-factor authentication secret. The column is defined as text and allows null values. This secret is crucial for generating and verifying time-based one-time passwords (TOTP).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/02-multi-factor-authentication.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nSchema::table('users', function (Blueprint $table) {\n    $table->text('google_two_factor_authentication_secret')->nullable();\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Validation of Toggle Declination in Filament - PHP\nDESCRIPTION: This snippet demonstrates how to conditionally validate the declination of a Toggle based on a feature flag. The `declined()` method accepts a boolean to control whether the validation rule is applied.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/05-toggle.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('is_under_18')\n    ->declined(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Persisting collapsed section state\nDESCRIPTION: This code demonstrates how to persist the collapsed state of a section in the user's session using the `persistCollapsed()` method. When the user refreshes the page, the section will remain collapsed if it was collapsed before.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/03-sections.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Section;\n\nSection::make('Cart')\n    ->description('The items you have selected for purchase')\n    ->schema([\n        // ...\n    ])\n    ->collapsible()\n    ->persistCollapsed()\n```\n\n----------------------------------------\n\nTITLE: Setting Numeric Step for Filament Text Input\nDESCRIPTION: This snippet shows how to set the `step` attribute for a numeric text input in Filament using the `step()` method.  It requires the Filament Forms package.  It sets the step to 100 for a numeric input.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/02-text-input.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('number')\n    ->numeric()\n    ->step(100)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Attributes to Filter Tabs\nDESCRIPTION: This snippet demonstrates how to add extra HTML attributes to filter tabs in FilamentPHP using the `extraAttributes()` method of the `Tab` object.  This allows for adding custom data attributes or other HTML attributes for styling or testing purposes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/02-listing-records.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Tabs\\Tab;\n\nTab::make()\n    ->extraAttributes(['data-cy' => 'statement-confirmed-tab'])\n```\n\n----------------------------------------\n\nTITLE: Stacking Images - Filament PHP\nDESCRIPTION: This code demonstrates how to display multiple images as a stack of overlapping images. This is achieved using the `stacked()` method, which is typically used with `imageHeight()` and `circular()` to style the individual images within the stack. The `stacked()` method can also accept a boolean value to dynamically control whether the images should be stacked.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/04-image-entry.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('colleagues.avatar')\n    ->imageHeight(40)\n    ->circular()\n    ->stacked()\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('colleagues.avatar')\n    ->imageHeight(40)\n    ->circular()\n    ->stacked(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Configuring Spark as Tenant Billing Provider - PHP\nDESCRIPTION: This code configures Filament to use Laravel Spark as the tenant billing provider. This allows users to manage their billing information through Spark. Requires the `filament/spark-billing-provider` package to be installed and configured, as well as Laravel Spark to be installed and configured for the tenant model.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Billing\\Providers\\SparkBillingProvider;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantBillingProvider(new SparkBillingProvider());\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Filament Resource with Custom Namespace\nDESCRIPTION: This command generates a Filament resource for the `Customer` model, specifying a custom namespace for the model. It allows locating the model in a non-default namespace.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-resource Customer --model-namespace=Custom\\\\Path\\\\Models\n```\n\n----------------------------------------\n\nTITLE: Triggering Filament Actions from HTML using Livewire\nDESCRIPTION: This HTML code shows how to trigger a Filament action from a click in HTML using the `wire:click` attribute, calling the `mountAction()` method and optionally passing in any arguments that you want to be available.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-action.md#_snippet_12\n\nLANGUAGE: blade\nCODE:\n```\n<button wire:click=\"mountAction('test', { id: 12345 })\">\n    Button\n</button>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Page using Artisan\nDESCRIPTION: This command creates two files: a page class in the `/Pages` directory of the resource directory and a view in the `/pages` directory of the resource views directory. Replace `SortUsers` with your desired page name and `UserResource` with the relevant resource.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/11-custom-pages.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-page SortUsers --resource=UserResource --type=custom\n```\n\n----------------------------------------\n\nTITLE: Enabling Cloning of Items - Filament Builder (PHP)\nDESCRIPTION: This snippet demonstrates how to enable the ability to clone builder items using the `cloneable()` method. This adds a clone action to each block, allowing users to duplicate existing blocks.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->cloneable()\n```\n\n----------------------------------------\n\nTITLE: Opening Modal from Alpine.js - PHP\nDESCRIPTION: This code snippet demonstrates how to dispatch an 'open-modal' event from Alpine.js to open a modal, identified by its ID.  `$dispatch()` function is used to send the event with the modal's ID ('edit-user') as a parameter within an object.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-modal.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$dispatch('open-modal', { id: 'edit-user' })\n```\n\n----------------------------------------\n\nTITLE: Conditionally Collapsing Items - Filament Builder (PHP)\nDESCRIPTION: This snippet demonstrates how to conditionally make the builder items collapsible and collapsed based on a feature flag. It uses the `collapsible()` and `collapsed()` methods, each accepting a boolean value.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->collapsible(FeatureFlag::active())\n    ->collapsed(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Grouping fields into a Fieldset - PHP\nDESCRIPTION: This code snippet showcases the use of the `Fieldset` component to group fields. Each fieldset has a label and a default two-column grid.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/02-layouts.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Fieldset;\n\nFieldset::make('Label')\n    ->columns([\n        'default' => 1,\n        'md' => 2,\n        'xl' => 3,\n    ])\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Registering a widget in the resource class\nDESCRIPTION: This code snippet shows how to register a newly created widget within a Filament resource class. It involves overriding the `getWidgets()` method and returning an array containing the class name of the widget to be registered.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/10-widgets.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Resources\\Customers\\Widgets\\CustomerOverview;\n\npublic static function getWidgets(): array\n{\n    return [\n        CustomerOverview::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing CSV Delimiter in Filament\nDESCRIPTION: This code snippet demonstrates how to customize the CSV delimiter used in Filament exports by overriding the `getCsvDelimiter()` method in the exporter class.  The delimiter is set to a semicolon (`;`) in this example.  Ensure that only a single character is returned.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\npublic static function getCsvDelimiter(): string\n{\n    return ';';\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Media Library Migrations\nDESCRIPTION: This command publishes the migrations for Spatie's Media Library, which are necessary to create the media table in your database.  It uses the `vendor:publish` Artisan command to copy the migration files to your project.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --provider=\"Spatie\\MediaLibrary\\MediaLibraryServiceProvider\" --tag=\"medialibrary-migrations\"\n```\n\n----------------------------------------\n\nTITLE: Counting with Query Scope (PHP)\nDESCRIPTION: This code snippet demonstrates how to count specific values in a dataset using the `Count` summarizer and a query scope. It counts the number of 'is_published' records that are set to true. It requires the `Illuminate\\Database\\Query\\Builder` class to define the query.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\nuse Filament\\Tables\\Columns\\Summarizers\\Count;\nuse Illuminate\\Database\\Query\\Builder;\n\nIconColumn::make('is_published')\n    ->boolean()\n    ->summarize(\n        Count::make()->query(fn (Builder $query) => $query->where('is_published', true)),\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Tenant Profile Page - PHP\nDESCRIPTION: This code creates a custom tenant profile page by extending `Filament\\Pages\\Tenancy\\EditTenantProfile`. It allows users to edit information about the current tenant.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Filament\\Pages\\Tenancy;\n\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Pages\\Tenancy\\EditTenantProfile;\nuse Filament\\Schemas\\Schema;\n\nclass EditTeamProfile extends EditTenantProfile\n{\n    public static function getLabel(): string\n    {\n        return 'Team profile';\n    }\n\n    public function form(Schema $schema): Schema\n    {\n        return $schema\n            ->components([\n                TextInput::make('name'),\n                // ...\n            ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Export Column Length with Options\nDESCRIPTION: This code snippet demonstrates how to limit the length of an export column using the `limit()` method, while injecting the `$options` array. This allows you to customize the limit based on user-defined options. Options are provided either through `getOptionsFormComponents` or `options()`\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_37\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('description')\n    ->limit(fn (array $options): int => $options['descriptionLimit'] ?? 100)\n```\n\n----------------------------------------\n\nTITLE: Creating a ViewAction with a schema in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to create a ViewAction in Filament and define a schema for the modal form. The schema uses TextInput to display the 'title' field, which is required and has a maximum length of 255 characters.  This action is used to view Eloquent records in a modal.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/06-view.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\ViewAction;\nuse Filament\\Forms\\Components\\TextInput;\n\nViewAction::make()\n    ->schema([\n        TextInput::make('title')\n            ->required()\n            ->maxLength(255),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Wrapping Input and Select Elements - Blade\nDESCRIPTION: This example demonstrates how to use the input wrapper component to wrap both a text input and a select element in Filament. It uses the `x-filament::input.wrapper` Blade component to provide a consistent styling and structure around form elements. The `wire:model` directive is used to bind the input values to Livewire properties.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-input-wrapper.md#_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::input.wrapper>\n    <x-filament::input\n        type=\"text\"\n        wire:model=\"name\"\n    />\n</x-filament::input.wrapper>\n\n<x-filament::input.wrapper>\n    <x-filament::input.select wire:model=\"status\">\n        <option value=\"draft\">Draft</option>\n        <option value=\"reviewing\">Reviewing</option>\n        <option value=\"published\">Published</option>\n    </x-filament::input.select>\n</x-filament::input.wrapper>\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Dates - PHP\nDESCRIPTION: This snippet demonstrates how to prevent specific dates from being selected in the date picker using the `disabledDates()` method.  It accepts an array of dates in the 'YYYY-MM-DD' format that should be disabled.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/08-date-time-picker.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DateTimePicker;\n\nDateTimePicker::make('date')\n    ->native(false)\n    ->disabledDates(['2000-01-03', '2000-01-15', '2000-01-20'])\n```\n\n----------------------------------------\n\nTITLE: Creating Queue Batches and Notifications Tables (Laravel 11+)\nDESCRIPTION: This code snippet demonstrates how to create the necessary database tables for queue batches and notifications in Laravel 11 and higher. These tables are required for Filament's import action to function correctly, enabling job batching and database notifications.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:queue-batches-table\nphp artisan make:notifications-table\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scopes in Render Hook - PHP\nDESCRIPTION: This snippet shows how to access the scopes within a render hook function.  The `$scopes` array is passed to the hook, allowing you to customize the output based on the current page or component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/01-render-hooks.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Facades\\FilamentView;\nuse Filament\\View\\PanelsRenderHook;\n\nFilamentView::registerRenderHook(\n    PanelsRenderHook::PAGE_START,\n    fn (array $scopes): View => view('warning-banner', ['scopes' => $scopes]),\n    scopes: \\App\\Filament\\Resources\\Users\\UserResource::class,\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Domain for Filament Panel (PHP)\nDESCRIPTION: This code snippet shows how to restrict a Filament panel to a specific domain using the `domain()` method. This ensures that the panel only responds to requests from the specified domain.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/05-panel-configuration.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->domain('admin.example.com');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Toggle States in Filament - PHP\nDESCRIPTION: This snippet shows how to add icons to represent the 'on' and 'off' states of a Toggle component using the `onIcon()` and `offIcon()` methods. It utilizes Filament's Heroicon integration for specifying the icons.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/05-toggle.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\nuse Filament\\Support\\Icons\\Heroicon;\n\nToggle::make('is_admin')\n    ->onIcon(Heroicon::Bolt)\n    ->offIcon(Heroicon::User)\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Block Headers\nDESCRIPTION: This code demonstrates how to display icons in the header of blocks using the `blockIcons()` method. Optionally, a boolean value can be passed to control if the icons are displayed. This provides visual cues for each block within the builder interface.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->blockIcons()\n\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->blockIcons(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Adding 'all' Option to Table Pagination\nDESCRIPTION: This code snippet shows how to add the `'all'` option to the pagination page options for a Filament table.  This allows users to display all records on a single page. Requires `Filament\\Tables\\Table` class.  Be aware that using 'all' with large datasets can lead to performance issues.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->paginationPageOptions([5, 10, 25, 50, 'all']);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Form Data Before Fill - Filament PHP\nDESCRIPTION: This code snippet demonstrates how to customize the data that is passed to the form. By overriding the `mutateFormDataBeforeFill()` method, you can modify the data before it is used to populate the form. In this example, the `is_admin` attribute is removed from the data array.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nprotected function mutateFormDataBeforeFill(array $data): array\n{\n    unset($data['is_admin']);\n\n    return $data;\n}\n```\n\n----------------------------------------\n\nTITLE: Positioning the heading and description aside\nDESCRIPTION: This code demonstrates how to position the section's heading and description to the left side, with the components inside a card on the right, using the `aside()` method. It provides an alternative layout for the section.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/03-sections.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Section;\n\nSection::make('Rate limiting')\n    ->description('Prevent abuse by limiting the number of requests per period')\n    ->aside()\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Customizing Global Search Result URLs in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to customize the URL that a global search result links to by overriding the `getGlobalSearchResultUrl()` method.  The method should return a route to the desired page.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/09-global-search.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic static function getGlobalSearchResultUrl(Model $record): string\n{\n    return UserResource::getUrl('edit', ['record' => $record]);\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Livewire Component when Record is Null (PHP)\nDESCRIPTION: This snippet shows how to conditionally hide a Livewire component within a Filament schema when the record is null using the `hidden()` method. This is useful when the component's functionality depends on an existing record.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/07-custom-components.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Livewire;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nLivewire::make(Chart::class)\n    ->hidden(fn (?Model $record): bool => $record === null)\n```\n\n----------------------------------------\n\nTITLE: Using Tabs as Anchor Links in Filament Blade\nDESCRIPTION: This snippet shows how to use a tab as an anchor link by setting the `tag` attribute to `a` and providing an `href` attribute.  It navigates to a specified route when the tab is clicked within the Filament Tabs component.  Laravel's `route` helper function is used to generate the URL.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-tabs.md#_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::tabs>\n    <x-filament::tabs.item\n        :href=\"route('notifications')\"\n        tag=\"a\"\n    >\n        Notifications\n    </x-filament::tabs.item>\n\n    {{-- Other tabs --}}\n</x-filament::tabs>\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Checkbox Column in Filament\nDESCRIPTION: This code snippet demonstrates how to create a basic Checkbox column in a Filament table. It utilizes the `CheckboxColumn::make()` method to render a checkbox associated with the `is_admin` field in the database. When the checkbox state changes, Filament automatically updates the corresponding database record.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/09-checkbox.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\CheckboxColumn;\n\nCheckboxColumn::make('is_admin')\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Pages to Routes\nDESCRIPTION: This static method in the resource class registers the custom page to a specific route. The `route()` method is called on the page class, defining the route path. The order of pages registered in `getPages()` is crucial as Laravel matches routes from top to bottom.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/11-custom-pages.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic static function getPages(): array\n{\n    return [\n        // ...\n        'sort' => Pages\\SortUsers::route('/sort'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Labeled From Breakpoint for Button in Filament (PHP)\nDESCRIPTION: This code sets a button to be an icon button on mobile and a labeled button from the 'md' (medium) breakpoint upwards.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('edit')\n    ->icon('heroicon-m-pencil-square')\n    ->button()\n    ->labeledFrom('md')\n```\n\n----------------------------------------\n\nTITLE: Setting Components to Span Full Column Width\nDESCRIPTION: This snippet shows how to make `Grid`, `Section`, and `Fieldset` layout components span the full width of their parent grid in Filament forms and infolists. It utilizes the `columnSpanFull()` method on each component to override the default single-column behavior.  Requires the `Filament\\Schemas\\Components\\Fieldset`, `Filament\\Schemas\\Components\\Grid`, and `Filament\\Schemas\\Components\\Section` classes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Fieldset;\nuse Filament\\Schemas\\Components\\Grid;\nuse Filament\\Schemas\\Components\\Section;\n\nFieldset::make()\n    ->columnSpanFull()\n    \nGrid::make()\n    ->columnSpanFull()\n\nSection::make()\n    ->columnSpanFull()\n```\n\n----------------------------------------\n\nTITLE: Using a Slide-over Instead of Modal - Blade\nDESCRIPTION: This code snippet demonstrates how to use a slide-over instead of a traditional modal in Filament by utilizing the `slide-over` attribute. Setting this attribute transforms the modal into a slide-over from the side of the screen.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-modal.md#_snippet_11\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal slide-over>\n    {{-- Slide-over content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Refreshing Form Data After Action in PHP\nDESCRIPTION: This code shows how to refresh form data on a Filament page after an action is performed. The `refreshFormData()` method is used to update specific model attributes in the form after the `approve()` method is called on a post.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Actions\\Action;\n\nAction::make('approve')\n    ->action(function (Post $record) {\n        $record->approve();\n\n        $this->refreshFormData([\n            'status',\n        ]);\n    })\n```\n\n----------------------------------------\n\nTITLE: Setting Recovery Code Count in Filament\nDESCRIPTION: This code snippet demonstrates how to change the number of recovery codes generated for each user using the `recoveryCodeCount()` method on the `GoogleTwoFactorAuthentication` instance within the `multiFactorAuthentication()` method of the Filament panel configuration. The `recoveryCodeCount()` method accepts an integer representing the desired number of recovery codes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/02-multi-factor-authentication.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Auth\\MultiFactor\\GoogleTwoFactor\\GoogleTwoFactorAuthentication;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->multiFactorAuthentication([\n            GoogleTwoFactorAuthentication::make()\n                ->recoverable()\n                ->recoveryCodeCount(10),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Page URL using getUrl() - PHP\nDESCRIPTION: This snippet demonstrates how to generate a URL for a Filament page using the `getUrl()` static method. It assumes the existence of a Filament page class named `Settings` in the `App\\Filament\\Pages` namespace. The generated URL will point to the default route of the `Settings` page within the admin panel.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Pages\\Settings;\n\nSettings::getUrl(); // /admin/settings\n```\n\n----------------------------------------\n\nTITLE: Enabling Striped Table Rows (PHP)\nDESCRIPTION: This code shows how to enable striped table rows in Filament tables using the `striped()` method. This applies alternating background colors to rows for improved readability.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->striped();\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing and Migrating Filament Actions Migrations\nDESCRIPTION: This code snippet demonstrates how to publish and migrate the Filament actions migrations. These migrations are required for Filament to store information about imports. It is crucial to run this command after installing the Filament actions package.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# All apps\nphp artisan vendor:publish --tag=filament-actions-migrations\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Conditional Badge Display - PHP\nDESCRIPTION: This snippet demonstrates how to conditionally display a TextColumn as a badge based on a boolean value. The `badge()` method accepts a boolean value or a function that returns a boolean to dynamically control whether the text is displayed as a badge.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('status')\n    ->badge(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Getting Enabled Options from CheckboxList - PHP\nDESCRIPTION: This code snippet shows how to retrieve the enabled options from a `CheckboxList` component, typically for validation purposes. The `getEnabledOptions()` method returns an array of enabled options, which can then be used with the `in()` validation rule. It requires the `Filament\\Forms\\Components\\CheckboxList` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/06-checkbox-list.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technologies')\n    ->options([\n        'tailwind' => 'Tailwind CSS',\n        'alpine' => 'Alpine.js',\n        'laravel' => 'Laravel',\n        'livewire' => 'Laravel Livewire',\n        'heroicons' => 'SVG icons',\n    ])\n    ->disableOptionWhen(fn (string $value): bool => $value === 'heroicons')\n    ->in(fn (CheckboxList $component): array => array_keys($component->getEnabledOptions()))\n```\n\n----------------------------------------\n\nTITLE: Registering render hook with Blade rendering in Filament\nDESCRIPTION: Registers a render hook to inject Livewire modal content into the Filament panel. It utilizes the `FilamentView` facade to register the hook at the `BODY_START` location, rendering the Livewire component using `Blade::render`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/01-render-hooks.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Facades\\FilamentView;\nuse Filament\\View\\PanelsRenderHook;\nuse Illuminate\\Support\\Facades\\Blade;\n\nFilamentView::registerRenderHook(\n    PanelsRenderHook::BODY_START,\n    fn (): string => Blade::render('@livewire(\\'livewire-ui-modal\\')'),\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Value Field Label in Filament KeyValue\nDESCRIPTION: This snippet demonstrates how to customize the label of the value field using the `valueLabel()` method. This improves the form's clarity and user experience.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/16-key-value.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n    ->valueLabel('Property value')\n```\n\n----------------------------------------\n\nTITLE: Disable Block Numbers\nDESCRIPTION: This code shows how to disable the numbering of items in the builder using the `blockNumbers(false)` method. This can be useful when the numbering is not necessary or when it interferes with the user interface.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->blockNumbers(false)\n```\n\n----------------------------------------\n\nTITLE: Conditional Split Layout - Filament PHP\nDESCRIPTION: This snippet shows how to configure a `Split` component to display columns horizontally only from a specific breakpoint. Before that breakpoint, columns will stack vertically.  Here, the horizontal layout starts from the 'md' breakpoint.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/05-layout.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\FontWeight;\nuse Filament\\Tables\\Columns\\Layout\\Split;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nSplit::make([\n    ImageColumn::make('avatar')\n        ->circular(),\n    TextColumn::make('name')\n        ->weight(FontWeight::Bold)\n        ->searchable()\n        ->sortable(),\n    TextColumn::make('email'),\n])->from('md')\n```\n\n----------------------------------------\n\nTITLE: Overriding Filament Class Method\nDESCRIPTION: This code shows how to override an existing method in a Filament class generator. It provides an example of overriding the `configureNavigationIconProperty()` method to modify the visibility of the `$navigationIcon` property. This allows customization of existing properties by changing their configuration.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/04-file-generation.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Nette\\PhpGenerator\\Property;\n\nprotected function configureNavigationIconProperty(Property $property): void\n{\n    $property->setPublic();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Notifications Polling - Filament Panel\nDESCRIPTION: This code snippet shows how to configure database notifications polling interval in a Filament panel. It sets the polling interval to 30 seconds, instructing the panel to check for new notifications every 30 seconds. Also demonstrates disabling polling.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/02-database-notifications.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->databaseNotifications()\n        ->databaseNotificationsPolling('30s');\n}\n\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->databaseNotifications()\n        ->databaseNotificationsPolling(null);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Filament Spark Billing Provider - Bash\nDESCRIPTION: This code installs the Filament billing provider for Laravel Spark using Composer.  Requires Laravel Spark to already be installed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require filament/spark-billing-provider\n```\n\n----------------------------------------\n\nTITLE: Expanding Limited List in Filament Text Column (PHP)\nDESCRIPTION: This snippet demonstrates how to allow expanding and collapsing of a limited list of items in a Filament TextColumn. It uses the `expandableLimitedList()` method in conjunction with `listWithLineBreaks()` and `limitList()`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('authors.name')\n    ->listWithLineBreaks()\n    ->limitList(3)\n    ->expandableLimitedList()\n```\n\n----------------------------------------\n\nTITLE: Testing Table Select Column Options with Pest\nDESCRIPTION: This code snippet demonstrates how to test the options of a `SelectColumn` using `assertTableSelectColumnHasOptions()` and `assertTableSelectColumnDoesNotHaveOptions()`. It asserts that the 'status' column has 'unpublished' and 'published' options, and does not have the 'archived' option.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/03-testing-tables.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('has the correct statuses', function () {\n    $post = Post::factory()->create();\n\n    livewire(PostsTable::class)\n        ->assertTableSelectColumnHasOptions('status', ['unpublished' => 'Unpublished', 'published' => 'Published'], $post)\n        ->assertTableSelectColumnDoesNotHaveOptions('status', ['archived' => 'Archived'], $post);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Polymorphic User Relationship on Import Model - PHP\nDESCRIPTION: This snippet shows how to set the polymorphic user relationship on the Import model by calling `Import::polymorphicUserRelationship()` in the boot method of a service provider. Dependencies: Filament\\Actions\\Imports\\Models\\Import.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\Models\\Import;\n\nImport::polymorphicUserRelationship();\n```\n\n----------------------------------------\n\nTITLE: Adding a Page Subheading in PHP\nDESCRIPTION: This code demonstrates adding a subheading to a Filament page using the `$subheading` property or the `getSubheading()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nprotected ?string $subheading = 'Custom Page Subheading';\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function getSubheading(): ?string\n{\n    return __('Custom Page Subheading');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding action to modal content - Filament Actions (PHP)\nDESCRIPTION: This snippet demonstrates adding a custom action button to the custom content of a Filament modal using `registerModalActions()` and passing the action to the modal content view. It requires Filament Actions, a Blade view, and a model (e.g., Post).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Actions\\Action;\nuse Illuminate\\Contracts\\View\\View;\n\nAction::make('advance')\n    ->registerModalActions([\n        Action::make('report')\n            ->requiresConfirmation()\n            ->action(fn (Post $record) => $record->report()),\n    ])\n    ->action(fn (Post $record) => $record->advance())\n    ->modalContent(fn (Action $action): View => view(\n        'filament.pages.actions.advance',\n        ['action' => $action],\n    ))\n```\n\n----------------------------------------\n\nTITLE: Creating Bulk Actions\nDESCRIPTION: This snippet showcases how to create individual bulk actions using the `BulkAction::make()` method, passing a unique action name. A callback function passed to `action()` is executed when the bulk action is triggered. The selected records are passed as an Eloquent collection to the function.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/04-actions.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\BulkAction;\nuse Illuminate\\Database\\Eloquent\\Collection;\n\nBulkAction::make('delete')\n    ->requiresConfirmation()\n    ->action(fn (Collection $records) => $records->each->delete())\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Source Directives (CSS)\nDESCRIPTION: These lines from a `theme.css` file are Tailwind directives that instruct the compiler to scan specific directories for Tailwind CSS classes used in the project. These are necessary to ensure custom styles are included in the compiled theme.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/01-overview.md#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n@source '../../../../app/Filament';\n@source '../../../../resources/views/filament';\n```\n\n----------------------------------------\n\nTITLE: Custom Date formatting using Carbon macros in Filament Infolists (PHP)\nDESCRIPTION: This snippet shows how to customize date formatting using Carbon's macro-formats via `isoDate()`, `isoDateTime()`, and `isoTime()` with a specific format string. It customizes the 'created_at' field formatting.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('created_at')\n    ->isoDate('L')\n\nTextEntry::make('created_at')\n    ->isoDateTime('LLL')\n\nTextEntry::make('created_at')\n    ->isoTime('LT')\n```\n\n----------------------------------------\n\nTITLE: Triggering Error State with Alpine.js - Blade/JavaScript\nDESCRIPTION: This snippet demonstrates how to trigger the error state of the checkbox using Alpine.js. It initializes an Alpine.js component with an `errors` array containing the names of fields with errors. The `alpine-valid` attribute binds to an Alpine.js expression that checks if the `isAdmin` field is in the `errors` array. If it is, the checkbox will be styled as invalid.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-checkbox.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<div x-data=\"{ errors: ['isAdmin'] }\">\n    <x-filament::input.checkbox\n        x-model=\"isAdmin\"\n        alpine-valid=\"! errors.includes('isAdmin')\"\n    />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Wrapping Multiple Color Blocks in ColorColumn (PHP)\nDESCRIPTION: This code shows how to enable wrapping for color blocks in a ColorColumn. The `wrap()` method ensures that if the color blocks don't fit on a single line, they will wrap to the next line. The width for wrapping is affected by the column label.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/05-color.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\ColorColumn;\n\nColorColumn::make('color')\n    ->wrap()\n```\n\n----------------------------------------\n\nTITLE: Customizing Boolean Colors - PHP\nDESCRIPTION: This snippet shows how to customize the colors used to represent the true and false states when using the `boolean()` method. It sets `trueColor` to 'info' and `falseColor` to 'warning'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/03-icon-entry.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\IconEntry;\n\nIconEntry::make('is_featured')\n    ->boolean()\n    ->trueColor('info')\n    ->falseColor('warning')\n```\n\n----------------------------------------\n\nTITLE: Accessing the current entry instance in Blade\nDESCRIPTION: This example illustrates how to access the current entry instance within a Blade view using the `$entry` variable. It demonstrates calling a public method (`isLabelHidden()`) on the entry instance.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/08-custom-entries.md#_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<x-dynamic-component\n    :component=\"$getEntryWrapperView()\"\n    :entry=\"$entry\"\n>\n    @if ($entry->isLabelHidden())\n        This is a new conference.\n    @endif\n</x-dynamic-component>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Setting Active State with Wire:click\nDESCRIPTION: This snippet shows how to conditionally set a tab to appear active based on a Livewire property. The `active` attribute is bound to the `$activeTab` property, and clicking the tab updates this property using `wire:click`. Filament and Livewire are required dependencies. The `active` attribute is a boolean expression.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-tabs.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::tabs>\n    <x-filament::tabs.item\n        :active=\"$activeTab === 'tab1'\"\n        wire:click=\"$set('activeTab', 'tab1')\"\n    >\n        Tab 1\n    </x-filament::tabs.item>\n\n    {{-- Other tabs --}}\n</x-filament::tabs>\n```\n\n----------------------------------------\n\nTITLE: Setting a Badge in Filament Tabs Blade\nDESCRIPTION: This snippet demonstrates how to set a badge for a tab using the `badge` slot.  The content of the `badge` slot will be displayed as a badge on the tab. It enhances the visual indication of tab-related information within the Filament Tabs component. Filament is a required dependency.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-tabs.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::tabs>\n    <x-filament::tabs.item>\n        Notifications\n\n        <x-slot name=\"badge\">\n            5\n        </x-slot>\n    </x-filament::tabs.item>\n\n    {{-- Other tabs --}}\n</x-filament::tabs>\n```\n\n----------------------------------------\n\nTITLE: Adding footer action - Filament Actions (PHP)\nDESCRIPTION: This snippet demonstrates how to add an extra action button to the footer of a Filament modal using `extraModalFooterActions()`. The action can be customized using methods available for trigger buttons. Requires Filament Actions.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('create')\n    ->schema([\n        // ...\n    ])\n    // ...\n    ->extraModalFooterActions(fn (Action $action): array => [\n        $action->makeModalSubmitAction('createAnother', arguments: ['another' => true]),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Customize Resource Relationship Name\nDESCRIPTION: This code snippet demonstrates how to customize the relationship name used to fetch a resource by setting the `$tenantRelationshipName` static property on the resource class. In this example, the tenant model class has an `blogPosts` relationship defined. Dependency: `Filament\\Resources\\Resource`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\Resource;\n\nclass PostResource extends Resource\n{\n    protected static ?string $tenantRelationshipName = 'blogPosts';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Table Filtering with Pest\nDESCRIPTION: This code snippet demonstrates how to test table filtering using the `filterTable()` method, along with `assertCanSeeTableRecords()` and `assertCanNotSeeTableRecords()`. It verifies that the table displays only the records where the 'is_published' filter is enabled (true).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/03-testing-tables.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can filter posts by `is_published`', function () {\n    $posts = Post::factory()->count(10)->create();\n\n    livewire(PostResource\\Pages\\ListPosts::class)\n        ->assertCanSeeTableRecords($posts)\n        ->filterTable('is_published')\n        ->assertCanSeeTableRecords($posts->where('is_published', true))\n        ->assertCanNotSeeTableRecords($posts->where('is_published', false));\n});\n```\n\n----------------------------------------\n\nTITLE: Confirming builder actions with a modal in PHP\nDESCRIPTION: This code snippet demonstrates how to require confirmation for a builder action, specifically the delete action, using the `requiresConfirmation()` method on the Action object.  This will display a modal before the action is executed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->deleteAction(\n        fn (Action $action) => $action->requiresConfirmation(),\n    )\n```\n\n----------------------------------------\n\nTITLE: Overriding Button Style with CSS in Filament\nDESCRIPTION: This CSS snippet demonstrates overriding the default border radius of buttons in Filament, from `rounded-lg` to `rounded-sm`.  It provides a thin layer of overrides on top of the default Filament design, allowing for customization without needing a complete custom stylesheet.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/01-introduction/01-overview.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.fi-btn {\n    @apply rounded-sm;\n}\n```\n\n----------------------------------------\n\nTITLE: Globally disabling modal autofocus - Filament\nDESCRIPTION: This snippet shows how to disable the autofocus behavior for all modals in the application. It uses `ModalComponent::autofocus(false)` within a service provider or middleware to prevent modals from automatically focusing on the first focusable element.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\View\\Components\\ModalComponent;\n\nModalComponent::autofocus(false);\n```\n\n----------------------------------------\n\nTITLE: Testing Resource Create Page Load - PHP\nDESCRIPTION: This snippet tests if the resource create page loads successfully.  It uses Livewire to interact with the `CreateUser` component and asserts that the HTTP response is OK (200).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/02-testing-resources.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Resources\\Users\\Pages\\CreateUser;\nuse App\\Models\\User;\n\nit('can load the page', function () {\n    livewire(CreateUser::class)\n        ->assertOk();\n});\n```\n\n----------------------------------------\n\nTITLE: Applying State Binding Modifiers in Blade\nDESCRIPTION: Illustrates how to use the `$applyStateBindingModifiers()` function in a Blade view to apply any state binding modifiers (like `defer` or `live()`) to a `wire:model` or `$wire.$entangle()` binding.  This ensures that the state is updated correctly based on the specified modifiers.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/20-custom-fields.md#_snippet_14\n\nLANGUAGE: blade\nCODE:\n```\n<x-dynamic-component\n    :component=\"$getFieldWrapperView()\"\n    :field=\"$field\"\n>\n    <input {{ $applyStateBindingModifiers('wire:model') }}=\"{{ $getStatePath() }}\" />\n    \n    <!-- Or -->\n    \n    <div x-data=\"{ state: $wire.{{ $applyStateBindingModifiers(\"\\$entangle('{$getStatePath()}')\") }} }\">\n        <input x-model=\"state\" />\n    </div>\n</x-dynamic-component>\n```\n\n----------------------------------------\n\nTITLE: Setting a custom disk for ImageColumn in Filament\nDESCRIPTION: This snippet shows how to specify a custom storage disk for the ImageColumn using the `disk()` method. This is useful when images are stored on a disk other than the default 'public' disk, such as 's3'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/04-image.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\ImageColumn;\n\nImageColumn::make('header_image')\n    ->disk('s3')\n```\n\n----------------------------------------\n\nTITLE: Registering a Full-Page Livewire Component in Routes\nDESCRIPTION: This PHP code registers a Livewire component as a full-page component, accessible via a specific route. It imports the component class and uses the Route facade to define the route.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-action.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Livewire\\ManageProduct;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('products/{product}/manage', ManageProduct::class);\n```\n\n----------------------------------------\n\nTITLE: Asserting Form Field Non-Existence - PHP\nDESCRIPTION: This snippet demonstrates how to assert that a Filament form does *not* have a specific field using `assertFormFieldDoesNotExist()`. It requires the `Pest\\Livewire\\livewire` function.  The example checks for the absence of a 'no-such-field' field.  You can specify the form name as the second argument to `assertFormFieldDoesNotExist` when there are multiple schemas.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('does not have a conditional field', function () {\n    livewire(CreatePost::class)\n        ->assertFormFieldDoesNotExist('no-such-field');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Queue Batches and Notifications Tables (Laravel 10)\nDESCRIPTION: This code snippet shows how to create the necessary database tables for queue batches and notifications in Laravel 10. These tables are required for Filament's import action to function correctly, enabling job batching and database notifications.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:batches-table\nphp artisan notifications:table\n```\n\n----------------------------------------\n\nTITLE: Controlling Dropdown Offset (PHP)\nDESCRIPTION: This snippet demonstrates how to control the offset of the action group dropdown using the `dropdownOffset()` method. It sets the offset to 16 pixels.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/03-grouping-actions.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\ActionGroup;\n\nActionGroup::make([\n    // Array of actions\n])\n    ->dropdownOffset(16)\n```\n\n----------------------------------------\n\nTITLE: Customizing Sidebar Width - PHP\nDESCRIPTION: This code snippet illustrates how to customize the width of the sidebar. The first example uses `sidebarWidth()` to set the standard width, and the second uses `collapsedSidebarWidth()` to set the width when the sidebar is collapsed (when using `sidebarCollapsibleOnDesktop()`).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->sidebarWidth('40rem');\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->sidebarCollapsibleOnDesktop()\n        ->collapsedSidebarWidth('9rem');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Section with Grid Columns in Filament (PHP)\nDESCRIPTION: This code snippet shows how to create a Filament section with a specified number of columns using the `columns()` method. The `Section::make()` method creates a new section, and `->columns(2)` sets the grid layout to have 2 columns.  The schema array represents the content of the section.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/03-sections.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Section;\n\nSection::make('Heading')\n    ->schema([\n        // ...\n    ])\n    ->columns(2)\n```\n\n----------------------------------------\n\nTITLE: Filament File Generation Configuration (PHP)\nDESCRIPTION: This PHP configuration snippet defines flags for Filament's file generation behavior, allowing users to revert to the v3 style. Flags control whether resource schemas and tables are embedded, whether cluster and resource classes are created outside of directories, and whether components are partially imported.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Commands\\FileGenerators\\FileGenerationFlag;\n\nreturn [\n\n    // ...\n\n    'file_generation' => [\n        'flags' => [\n            FileGenerationFlag::EMBEDDED_PANEL_RESOURCE_SCHEMAS, // Define new forms and infolists inside the resource class instead of a separate schema class.\n            FileGenerationFlag::EMBEDDED_PANEL_RESOURCE_TABLES, // Define new tables inside the resource class instead of a separate table class.\n            FileGenerationFlag::PANEL_CLUSTER_CLASSES_OUTSIDE_DIRECTORIES, // Create new cluster classes outside of their directories.\n            FileGenerationFlag::PANEL_RESOURCE_CLASSES_OUTSIDE_DIRECTORIES, // Create new resource classes outside of their directories.\n            FileGenerationFlag::PARTIAL_IMPORTS, // Partially import components such as form fields and table columns instead of importing each component explicitly.\n        ],\n    ],\n\n    // ...\n\n]\n```\n\n----------------------------------------\n\nTITLE: Testing Table Filtering with Select/Ternary Filter\nDESCRIPTION: This code snippet demonstrates how to filter a table using `filterTable()` when dealing with `SelectFilter` or `TernaryFilter`. It passes the filter name ('author_id') and the desired value ($authorId) to assert that only posts by that author are visible.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/03-testing-tables.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can filter posts by `author_id`', function () {\n    $posts = Post::factory()->count(10)->create();\n\n    $authorId = $posts->first()->author_id;\n\n    livewire(PostResource\\Pages\\ListPosts::class)\n        ->assertCanSeeTableRecords($posts)\n        ->filterTable('author_id', $authorId)\n        ->assertCanSeeTableRecords($posts->where('author_id', $authorId))\n        ->assertCanNotSeeTableRecords($posts->where('author_id', '!=', $authorId));\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown in Filament Infolist\nDESCRIPTION: Renders a Markdown string as HTML using the `markdown()` method in a Filament Infolist TextEntry. Optionally, a boolean value can control if the text should be rendered as Markdown or not. Accepts both static values and functions for dynamic calculation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('description')\n    ->markdown()\n```\n\n----------------------------------------\n\nTITLE: Using Action Class Names in Filament Tests\nDESCRIPTION: This code showcases how to use Filament's prebuilt action classes (e.g., `CreateAction`) in tests instead of action names. It also explains how to use the `#[ActionName]` attribute or `getDefaultName()` method to define action names for custom action classes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/05-testing-actions.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\CreateAction;\nuse function Pest\\Livewire\\livewire;\n\nlivewire(ManageInvoices::class)\n    ->callAction(CreateAction::class)\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Actions\\ActionName;\n\n#[ActionName('send')]\nclass SendInvoiceAction\n{\n    public static function make(): Action\n    {\n        return Action::make('send')\n            ->requiresConfirmation()\n            ->action(function () {\n                // ...\n            });\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Resources\\Invoices\\Actions\\SendInvoiceAction;\nuse Filament\\Actions\\Testing\\TestAction;\nuse function Pest\\Livewire\\livewire;\n\n$invoice = Invoice::factory()->create();\n\nlivewire(ManageInvoices::class)\n    ->callAction(TestAction::make(SendInvoiceAction::class)->table($invoice);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nclass SendInvoiceAction extends Action\n{\n    public static function getDefaultName(): string\n    {\n        return 'send';\n    }\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n        \n        $this\n            ->requiresConfirmation()\n            ->action(function () {\n                // ...\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Form Data\nDESCRIPTION: This PHP code demonstrates how to reset a form's data by calling `$this->form->fill()`.  This clears the form's contents to its default state.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-form.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\Comment;\n\npublic function createComment(): void\n{\n    Comment::create($this->form->getState());\n\n    // Reinitialize the form to clear its data.\n    $this->form->fill();\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Schema State with Function - PHP\nDESCRIPTION: This snippet demonstrates how to use a function with `assertSchemaStateSet()` to perform more complex assertions on the form state. It uses `Illuminate\\Support\\Str` and `Pest\\Livewire\\livewire`. The example checks if the 'slug' field contains no spaces. The function receives the form `$state` as an argument.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Support\\Str;\nuse function Pest\\Livewire\\livewire;\n\nit('can automatically generate a slug from the title without any spaces', function () {\n    $title = fake()->sentence();\n\n    livewire(CreatePost::class)\n        ->fillForm([\n            'title' => $title,\n        ])\n        ->assertSchemaStateSet(function (array $state): array {\n            expect($state['slug'])\n                ->not->toContain(' ');\n                \n            return [\n                'slug' => Str::slug($title),\n            ];\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Partial Rendering After State Update - Current Field Only\nDESCRIPTION: This code uses `partiallyRenderAfterStateUpdated()` to re-render only the current component after its state is updated. This is suitable when the component itself is the only part of the form that depends on its state.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_75\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->live()\n    ->partiallyRenderAfterStateUpdated()\n    ->belowContent(fn (Get $get): ?string => filled($get('name')) ? \"Hi, {$get('name')}!\" : null)\n```\n\n----------------------------------------\n\nTITLE: Creating Filament Widget Class\nDESCRIPTION: This code snippet shows the basic structure of a Filament widget class, extending the base `Widget` class and specifying the view that should be used to render the widget.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/11-plugins/03-building-a-panel-plugin.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Widgets\\Widget;\n\nclass ClockWidget extends Widget\n{\n    protected static string $view = 'clock-widget::widget';\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing parent action arguments in Filament\nDESCRIPTION: This snippet demonstrates accessing data and arguments from multiple parent actions in a deeply nested structure using the `$mountedActions` array.  It shows how to retrieve raw data and arguments from different levels of parent actions using `$mountedActions[index]->getRawData()` and `$mountedActions[index]->getArguments()`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('first')\n    ->schema([\n        TextInput::make('foo'),\n    ])\n    ->action(function () {\n        // ...\n    })\n    ->extraModalFooterActions([\n        Action::make('second')\n            ->schema([\n                TextInput::make('bar'),\n            ])\n            ->arguments(['number' => 2])\n            ->action(function () {\n                // ...\n            })\n            ->extraModalFooterActions([\n                Action::make('third')\n                    ->schema([\n                        TextInput::make('baz'),\n                    ])\n                    ->arguments(['number' => 3])\n                    ->action(function () {\n                        // ...\n                    })\n                    ->extraModalFooterActions([\n                        Action::make('fourth')\n                            ->requiresConfirmation()\n                            ->action(function (array $mountedActions) {\n                                dd(\n                                    $mountedActions[0]->getRawData(),\n                                    $mountedActions[0]->getArguments(),\n                                    $mountedActions[1]->getRawData(),\n                                    $mountedActions[1]->getArguments(),\n                                    $mountedActions[2]->getRawData(),\n                                    $mountedActions[2]->getArguments(),\n                                );\n                                // ...\n                            }),\n                    ]),\n            ]),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Conditionally Outlined Button - PHP\nDESCRIPTION: This snippet shows how to conditionally apply the outlined style to a Filament action button based on a boolean value. The `outlined()` method is used with a boolean argument to determine whether the button should be outlined.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('edit')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n    ->button()\n    ->outlined(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Formatting Money in TextColumn\nDESCRIPTION: Formats a column as currency using the `money()` method, specifying the currency code (e.g., 'EUR'). This example demonstrates basic money formatting with the specified currency.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('price')\n    ->money('EUR')\n```\n\n----------------------------------------\n\nTITLE: Dispatching Event for Websocket Notifications - Filament\nDESCRIPTION: This code snippet demonstrates how to dispatch a `DatabaseNotificationsSent` event when sending a notification to enable real-time updates via websockets. Setting `isEventDispatched` to `true` will trigger fetching new notifications after the notification is sent.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/02-database-notifications.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\n$recipient = auth()->user();\n\nNotification::make()\n    ->title('Saved successfully')\n    ->sendToDatabase($recipient, isEventDispatched: true);\n```\n\n----------------------------------------\n\nTITLE: Customizing the Title of a Filament Dashboard\nDESCRIPTION: This snippet shows how to customize the title of a Filament dashboard that is displayed in the user interface. It sets the `$title` property to a custom string. This can be overriden to create multiple dashboards with different titles.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/01-overview.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?string $title = 'Finance dashboard';\n```\n\n----------------------------------------\n\nTITLE: Customizing stacked ring width in Filament\nDESCRIPTION: This snippet shows how to customize the ring width around stacked images using the `ring()` method. The value should be between 0 and 8.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/04-image.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\ImageColumn;\n\nImageColumn::make('colleagues.avatar')\n    ->imageHeight(40)\n    ->circular()\n    ->stacked()\n    ->ring(5)\n```\n\n----------------------------------------\n\nTITLE: Setting a Limit on Stacked Images - Filament PHP\nDESCRIPTION: This code snippet shows how to limit the maximum number of images displayed in a stack using the `limit()` method. This is useful when dealing with a large number of images to prevent clutter. The `limit()` method also accepts a function for dynamic limit calculation, injecting utilities as parameters.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/04-image-entry.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('colleagues.avatar')\n    ->imageHeight(40)\n    ->circular()\n    ->stacked()\n    ->limit(3)\n```\n\n----------------------------------------\n\nTITLE: Registering Edit Pages in Resource - PHP\nDESCRIPTION: This code snippet shows how to register the newly created Edit page within the `getPages()` method of the resource.  It defines the route for the new 'edit-contact' page, making it accessible via a specific URL pattern that includes the record ID.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/04-editing-records.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic static function getPages(): array\n{\n    return [\n        'index' => Pages\\ListCustomers::route('/'),\n        'create' => Pages\\CreateCustomer::route('/create'),\n        'view' => Pages\\ViewCustomer::route('/{record}'),\n        'edit' => Pages\\EditCustomer::route('/{record}/edit'),\n        'edit-contact' => Pages\\EditCustomerContact::route('/{record}/edit/contact'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Size (Filament, PHP)\nDESCRIPTION: This snippet shows how to change the size of icons in a Filament Icon column using the `size()` method.  It sets the icon size to `IconSize::Medium`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/03-icon.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\nuse Filament\\Support\\Enums\\IconSize;\n\nIconColumn::make('status')\n    ->size(IconSize::Medium)\n```\n\n----------------------------------------\n\nTITLE: Disabling the Input - Blade\nDESCRIPTION: This example showcases how to disable the input by passing the `disabled` attribute to both the wrapper and the input component.  This ensures that the input is visually and functionally disabled, preventing user interaction.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-input-wrapper.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::input.wrapper disabled>\n    <x-filament::input\n        type=\"text\"\n        wire:model=\"name\"\n        disabled\n    />\n</x-filament::input.wrapper>\n```\n\n----------------------------------------\n\nTITLE: Customizing Font Family in Filament Text Column (PHP)\nDESCRIPTION: This snippet demonstrates how to customize the font family of a Filament TextColumn using the `fontFamily()` method and the `FontFamily` enum. It allows setting the font family to sans, serif, or mono.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\FontFamily;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('email')\n    ->fontFamily(FontFamily::Mono)\n```\n\n----------------------------------------\n\nTITLE: Custom Authorization Response\nDESCRIPTION: This snippet shows how to use a `DenyResponse` object within a policy method to provide a custom message explaining why authorization failed.  The `make()` method accepts a unique key to identify the failure type, and a message that can receive failure and total counts.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/04-actions.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\User;\nuse Filament\\Support\\Authorization\\DenyResponse;\nuse Illuminate\\Auth\\Access\\Response;\n\nclass UserPolicy\n{\n    public function delete(User $user, User $model): bool | Response\n    {\n        if (! $model->is_admin) {\n            return true;\n        }\n\n        return DenyResponse::make('cannot_delete_admin', message: function (int $failureCount, int $totalCount): string {\n            if (($failureCount === 1) && ($totalCount === 1)) {\n                return 'You cannot delete an admin user.';\n            }\n\n            if ($failureCount === $totalCount) {\n                return 'All users selected were admin users.';\n            }\n\n            if ($failureCount === 1) {\n                return 'One of the selected users was an admin user.';\n            }\n\n            return \"{$failureCount} of the selected users were admin users.\";\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Repeater State with Fake - PHP\nDESCRIPTION: This snippet demonstrates how to test a repeater component by faking the UUID generation for repeater items using `Repeater::fake()`. It requires `Filament\\Forms\\Components\\Repeater` and `Pest\\Livewire\\livewire`.  It asserts the state of the repeater, ensuring the data is correctly set. `Repeater::fake()` must be called at the beginning of the test and undone at the end.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\nuse function Pest\\Livewire\\livewire;\n\n$undoRepeaterFake = Repeater::fake();\n\nlivewire(EditPost::class, ['record' => $post])\n    ->assertSchemaStateSet([\n        'quotes' => [\n            [\n                'content' => 'First quote',\n            ],\n            [\n                'content' => 'Second quote',\n            ],\n        ],\n        // ...\n    ]);\n\n$undoRepeaterFake();\n```\n\n----------------------------------------\n\nTITLE: Install Tailwind CSS (Bash)\nDESCRIPTION: This command installs Tailwind CSS and its Vite plugin as development dependencies using npm.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/01-introduction/02-installation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tailwindcss @tailwindcss/vite --save-dev\n```\n\n----------------------------------------\n\nTITLE: Setting Visibility to Private - Filament PHP\nDESCRIPTION: This code configures the ImageEntry component to generate temporary URLs for rendering private images, enhancing security. By setting `visibility()` to `private`, Filament ensures that the images are only accessible through these signed URLs. The `visibility()` method can also accept a function for dynamic calculation, injecting utilities as parameters.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/04-image-entry.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('header_image')\n    ->visibility('private')\n```\n\n----------------------------------------\n\nTITLE: Skipping Resource Authorization - Filament PHP\nDESCRIPTION: This code snippet shows how to disable authorization checks for a Filament resource. By setting the `$shouldSkipAuthorization` property to `true`, all authorization checks for the resource are bypassed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nprotected static bool $shouldSkipAuthorization = true;\n```\n\n----------------------------------------\n\nTITLE: Disabling Placeholder Selection in SelectColumn (PHP)\nDESCRIPTION: This code demonstrates how to prevent the placeholder option from being selectable in the `SelectColumn`. The `selectablePlaceholder(false)` method disables the placeholder option, forcing the user to choose a valid option from the provided list. This is useful when a default or empty value is not a valid selection.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/06-select.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\SelectColumn;\n\nSelectColumn::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n    ->selectablePlaceholder(false)\n```\n\n----------------------------------------\n\nTITLE: Setting the width of a dropdown in Blade\nDESCRIPTION: This snippet illustrates how to set the width of a dropdown using the `width` attribute. The options for the width attribute correspond to Tailwind's max-width scale, such as `xs`, `sm`, `md`, `lg`, `xl`, `2xl`, `3xl`, `4xl`, `5xl`, `6xl` and `7xl`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-dropdown.md#_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::dropdown width=\"xs\">\n    {{-- Dropdown items --}}\n</x-filament::dropdown>\n```\n\n----------------------------------------\n\nTITLE: Customizing the Filament Dashboard Class\nDESCRIPTION: This code snippet shows how to customize the default Filament dashboard page by creating a new `Dashboard` class that extends `BaseDashboard`. This allows overriding methods and properties to customize the dashboard's behavior and appearance. It assumes the original `Dashboard` class is removed from panel configuration.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/01-overview.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Filament\\Pages;\n\nuse Filament\\Pages\\Dashboard as BaseDashboard;\n\nclass Dashboard extends BaseDashboard\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Database Notification - Laravel Notification Class - Filament\nDESCRIPTION: This code snippet shows how to send a database notification using a traditional Laravel notification class.  The `toDatabase()` method returns the notification to be sent.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/02-database-notifications.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Filament\\Notifications\\Notification;\n\npublic function toDatabase(User $notifiable): array\n{\n    return Notification::make()\n        ->title('Saved successfully')\n        ->getDatabaseMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Icon to Filament Button - Blade\nDESCRIPTION: This snippet demonstrates how to add an icon to a Filament button using the `icon` attribute. It uses Heroicons, and you can also specify the `icon-position` to be either \"before\" (default) or \"after\" the button text.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-button.md#_snippet_4\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::button icon=\"heroicon-m-sparkles\">\n    New user\n</x-filament::button>\n```\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::button\n    icon=\"heroicon-m-sparkles\"\n    icon-position=\"after\"\n>\n    New user\n</x-filament::button>\n```\n\n----------------------------------------\n\nTITLE: Testing Table Column Existence with Pest\nDESCRIPTION: This code snippet shows how to test if a specific column exists in a Filament table using `assertTableColumnExists()`. It verifies that the 'author' column is present.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/03-testing-tables.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('has an author column', function () {\n    livewire(PostResource\\Pages\\ListPosts::class)\n        ->assertTableColumnExists('author');\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a Filament Action in Blade\nDESCRIPTION: This Blade code renders a Filament action in a Livewire view.  The component also renders action modals that inject HTML to display interactive content.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-action.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    {{ $this->deleteAction }}\n\n    <x-filament-actions::modals />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix and Suffix to Export Column\nDESCRIPTION: This demonstrates how to add a prefix and suffix to the value of an export column using the `prefix()` and `suffix()` methods. This is useful for adding units or other contextual information to the exported values.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('domain')\n    ->prefix('https://')\n    ->suffix('.com')\n```\n\n----------------------------------------\n\nTITLE: Validating HEX Color - PHP\nDESCRIPTION: This snippet demonstrates how to validate a HEX color using Laravel's validation rules within the Filament color picker. It uses a regex to ensure the HEX color is in the correct format.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/17-color-picker.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\ColorPicker;\n\nColorPicker::make('hex_color')\n    ->regex('/^#([a-f0-9]{6}|[a-f0-9]{3})\\b$/')\n```\n\n----------------------------------------\n\nTITLE: Removing submit button - Filament Actions (PHP)\nDESCRIPTION: This snippet demonstrates how to remove the default submit button in the footer of a Filament modal using `modalSubmitAction(false)`. Requires Filament Actions.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('help')\n    ->modalContent(view('actions.help'))\n    ->modalSubmitAction(false)\n```\n\n----------------------------------------\n\nTITLE: Section with Description - Blade\nDESCRIPTION: Shows how to add a description below the heading in a Filament section using the `description` slot. This provides additional context for the section's content.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-section.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::section>\n    <x-slot name=\"heading\">\n        User details\n    </x-slot>\n\n    <x-slot name=\"description\">\n        This is all the information we hold about the user.\n    </x-slot>\n\n    {{-- Content --}}\n</x-filament::section>\n```\n\n----------------------------------------\n\nTITLE: Get Enabled ToggleButtons Options for Validation (PHP)\nDESCRIPTION: This code snippet demonstrates how to retrieve the enabled options from a Filament ToggleButtons component using `getEnabledOptions()` and use them for validation via the `in()` rule. The `disableOptionWhen()` method disables the 'published' option. The keys of the returned array from `getEnabledOptions()` are used for validation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/18-toggle-buttons.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\n\nToggleButtons::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'scheduled' => 'Scheduled',\n        'published' => 'Published',\n    ])\n    ->disableOptionWhen(fn (string $value): bool => $value === 'published')\n    ->in(fn (ToggleButtons $component): array => array_keys($component->getEnabledOptions()))\n```\n\n----------------------------------------\n\nTITLE: Adding component below form field content - PHP\nDESCRIPTION: This code snippet shows how to insert a schema component below the content of a text input field using `belowContent()`. It utilizes Filament's `Text` component to display styled text (bold in this case) beneath the field.  Requires the `TextInput`, `Text`, and `FontWeight` classes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Text;\nuse Filament\\Support\\Enums\\FontWeight;\n\nTextInput::make('name')\n    ->belowContent(Text::make('This is the user\\'s full name.')->weight(FontWeight::Bold))\n```\n\n----------------------------------------\n\nTITLE: Setting Brand Name in Filament (PHP)\nDESCRIPTION: This snippet shows how to change the text-based logo in a Filament panel using the `brandName()` method. It allows customizing the text displayed in the logo area.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/01-overview.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->brandName('Filament Demo');\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Lazy Loading - PHP\nDESCRIPTION: This demonstrates how to disable lazy loading for a chart widget by overriding the `$isLazy` property.  Setting it to false will cause the widget to be loaded even when it is not visible on the page.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/03-charts.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nprotected static bool $isLazy = true;\n```\n\n----------------------------------------\n\nTITLE: Injecting dependencies from Laravel's container - PHP\nDESCRIPTION: This code snippet demonstrates how to inject dependencies from Laravel's container into Filament components. It uses the `use` keyword to import necessary classes like `Filament\\Schemas\\Components\\Utilities\\Set` and `Illuminate\\Http\\Request`. The example function takes a `Request` instance and a `Set` instance as arguments, showcasing dependency injection.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/01-overview.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Utilities\\Set;\nuse Illuminate\\Http\\Request;\n\nfunction (Request $request, Set $set) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Export Column State with Options\nDESCRIPTION: This code snippet demonstrates how to format the state of an export column using the `formatStateUsing()` method, while injecting the `$options` array. This allows you to customize the formatting based on user-defined options. Options are provided either through `getOptionsFormComponents` or `options()`\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_36\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('description')\n    ->formatStateUsing(function (string $state, array $options): string {\n        return (string) str($state)->limit($options['descriptionLimit'] ?? 100);\n    })\n```\n\n----------------------------------------\n\nTITLE: Hiding Modal Close Button - Blade\nDESCRIPTION: This code snippet demonstrates how to hide the close button in the top right corner of a Filament modal using the `close-button` attribute. Setting the attribute to `false` removes the close button. The colon `:` before the attribute indicates that it is a dynamic attribute.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-modal.md#_snippet_17\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal :close-button=\"false\">\n    <x-slot name=\"heading\">\n        Modal heading\n    </x-slot>\n\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Calculating Export Column State\nDESCRIPTION: This code snippet demonstrates how to calculate the state of an export column using a callback function. This allows for dynamic values based on the record being exported.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Order;\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('amount_including_vat')\n    ->state(function (Order $record): float {\n        return $record->amount * (1 + $record->vat_rate);\n    })\n```\n\n----------------------------------------\n\nTITLE: Applying !important to Specific Tailwind Classes\nDESCRIPTION: This snippet demonstrates how to apply the `!important` modifier to only specific Tailwind classes when customizing the Filament sidebar. By prefixing the class names with `!`, only those specific styles are made important, resulting in a less intrusive override.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/02-css-hooks.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.fi-sidebar {\n    @apply !bg-gray-50 dark:!bg-gray-950;\n}\n```\n\n----------------------------------------\n\nTITLE: Load Asynchronous Alpine Component in Blade\nDESCRIPTION: This Blade code demonstrates how to load an asynchronous Alpine component using `x-load` and `x-load-src` attributes, along with the `FilamentAsset::getAlpineComponentSrc()` method to retrieve the component's URL. It passes the `state` as a parameter to the component for use within a custom form field.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_20\n\nLANGUAGE: blade\nCODE:\n```\n<div\n    x-load\n    x-load-src=\"{{ \\Filament\\Support\\Facades\\FilamentAsset::getAlpineComponentSrc('test-component') }}\"\n    x-data=\"testComponent({\n        state: $wire.{{ $applyStateBindingModifiers(\"\\$entangle('{$statePath}')\") }},\n    })\"\n>\n    <input x-model=\"state\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Overriding Modify Query in Filament Exporter Class\nDESCRIPTION: This code snippet demonstrates how to override the `modifyQuery()` method in a Filament exporter class to modify the query for all actions using that exporter. This is an alternative to setting the query modification on each individual `ExportAction`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\n\npublic static function modifyQuery(Builder $query): Builder\n{\n    return $query->with([\n        'purchasable' => fn (MorphTo $morphTo) => $morphTo->morphWith([\n            ProductPurchase::class => ['product'],\n            ServicePurchase::class => ['service'],\n            Subscription::class => ['plan'],\n        ]),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Error State with Blade - Blade\nDESCRIPTION: This snippet shows how to trigger the error state of the checkbox component using the `:valid` attribute. The `valid` attribute is bound to a boolean expression that checks for validation errors using Laravel's `$errors` object. If there is an error for the `isAdmin` field, the checkbox will be styled as invalid.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-checkbox.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::input.checkbox\n    wire:model=\"isAdmin\"\n    :valid=\"! $errors->has('isAdmin')\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Registering a Color Palette in Filament v4 Service Provider (PHP)\nDESCRIPTION: This code snippet demonstrates an alternative method to register a color palette in Filament v4 using the `FilamentColor` facade within a service provider's `boot()` method. This is useful if you are not using a panel or need to register the color globally. The code registers the 'ruby' color palette for use throughout the application.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Facades\\FilamentColor;\n\nFilamentColor::register([\n    'ruby' => [\n        50 => '254, 242, 242',\n        100 => '254, 226, 226',\n        200 => '254, 202, 202',\n        300 => '252, 165, 165',\n        400 => '248, 113, 113',\n        500 => '239, 68, 68',\n        600 => '220, 38, 38',\n        700 => '185, 28, 28',\n        800 => '153, 27, 27',\n        900 => '127, 29, 29',\n        950 => '69, 10, 10',\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring First Day of Week - PHP\nDESCRIPTION: This snippet shows how to customize the first day of the week in the date picker component using the `firstDayOfWeek()` method. Setting the value to 7 configures Sunday as the first day of the week.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/08-date-time-picker.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DateTimePicker;\n\nDateTimePicker::make('published_at')\n    ->native(false)\n    ->firstDayOfWeek(7)\n```\n\n----------------------------------------\n\nTITLE: Hide Stack on Mobile - Filament PHP\nDESCRIPTION: This code demonstrates how to hide a `Stack` component based on the browser's breakpoint.  Here, the stack containing 'phone' and 'email' is hidden on mobile devices (below the 'md' breakpoint).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/05-layout.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\FontWeight;\nuse Filament\\Tables\\Columns\\Layout\\Split;\nuse Filament\\Tables\\Columns\\Layout\\Stack;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nSplit::make([\n    ImageColumn::make('avatar')\n        ->circular(),\n    TextColumn::make('name')\n        ->weight(FontWeight::Bold)\n        ->searchable()\n        ->sortable(),\n    Stack::make([\n        TextColumn::make('phone')\n            ->icon('heroicon-m-phone'),\n        TextColumn::make('email')\n            ->icon('heroicon-m-envelope'),\n    ])->visibleFrom('md'),\n])\n```\n\n----------------------------------------\n\nTITLE: Conditionally Reordering Items with Buttons - Filament Builder (PHP)\nDESCRIPTION: This snippet demonstrates how to conditionally enable reordering items within a Filament Builder component using buttons, based on a feature flag using the `reorderableWithButtons()` method and passing a boolean. This enables or disables the buttons based on the flag.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->reorderableWithButtons(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Controlling Dropdown Max Height (PHP)\nDESCRIPTION: This snippet demonstrates how to control the maximum height of the action group dropdown using the `maxHeight()` method. It sets a maximum height of 400 pixels, enabling scrolling within the dropdown if content exceeds this height.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/03-grouping-actions.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\ActionGroup;\n\nActionGroup::make([\n    // Array of actions\n])\n    ->maxHeight('400px')\n```\n\n----------------------------------------\n\nTITLE: Updating Method Signature - Entry::make() PHP\nDESCRIPTION: Illustrates the updated signature for the `Entry::make()` method in Filament v4 for infolists. Any classes extending the `Entry` class and overriding the `make()` method must update the method signature to match the new signature. The updated method signature includes an optional string parameter named `$name` and returns a static instance.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\npublic static function make(?string $name = null): static\n```\n\n----------------------------------------\n\nTITLE: Disabling Placeholder Selection in Select Filters (PHP)\nDESCRIPTION: This snippet shows how to remove the placeholder (null option) from a select filter using the `selectablePlaceholder(false)` method.  This forces a selection and disables the 'all options applied' behavior.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/02-select.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\SelectFilter;\n\nSelectFilter::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n    ->default('draft')\n    ->selectablePlaceholder(false)\n```\n\n----------------------------------------\n\nTITLE: Displaying Date in Tooltip - PHP\nDESCRIPTION: This snippet demonstrates how to display a formatted date in a tooltip for a TextColumn. The `dateTooltip()`, `dateTimeTooltip()`, `timeTooltip()`, `isoDateTooltip()`, `isoDateTimeTooltip()`, `isoTimeTooltip()`, and `sinceTooltip()` methods can be used. Each of them accept a string to customize the format.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('created_at')\n    ->since()\n    ->dateTooltip() // Accepts a custom PHP date formatting string\n\nTextColumn::make('created_at')\n    ->since()\n    ->dateTimeTooltip() // Accepts a custom PHP date formatting string\n\nTextColumn::make('created_at')\n    ->since()\n    ->timeTooltip() // Accepts a custom PHP date formatting string\n\nTextColumn::make('created_at')\n    ->since()\n    ->isoDateTooltip() // Accepts a custom Carbon macro format string\n\nTextColumn::make('created_at')\n    ->since()\n    ->isoDateTimeTooltip() // Accepts a custom Carbon macro format string\n\nTextColumn::make('created_at')\n    ->since()\n    ->isoTimeTooltip() // Accepts a custom Carbon macro format string\n\nTextColumn::make('created_at')\n    ->dateTime()\n    ->sinceTooltip()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding Widgets in Filament\nDESCRIPTION: This code snippet demonstrates how to conditionally hide widgets by overriding the static `canView()` method. This method returns a boolean value indicating whether the widget should be visible, based on a condition. In this case, it checks if the user is an admin.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/01-overview.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic static function canView(): bool\n{\n    return auth()->user()->isAdmin();\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Job Retry Time - Filament Import (PHP)\nDESCRIPTION: This code snippet demonstrates how to customize the retry time for an import job by overriding the `getJobRetryUntil()` method. It sets the retry duration to 12 hours from the current time using Carbon.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_55\n\nLANGUAGE: PHP\nCODE:\n```\nuse Carbon\\CarbonInterface;\n\npublic function getJobRetryUntil(): ?CarbonInterface\n{\n    return now()->addHours(12);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Decimal Places in Money Formatting\nDESCRIPTION: Customizes the number of decimal places used when formatting money with the `money()` method in Filament Infolists. The `decimalPlaces` argument specifies the desired number of decimal places. Accepts both static values and functions for dynamic calculation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('price')\n    ->money('EUR', decimalPlaces: 3)\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Columns and Starts - PHP\nDESCRIPTION: This code snippet demonstrates how to configure the number of columns in a Filament grid layout for different screen sizes using the `columns()` method. It also shows how to specify the starting column for a text input within the grid using the `columnStart()` method, making the input's position responsive.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/02-layouts.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Grid;\nuse Filament\\Schemas\\Components\\TextEntry;\n\nGrid::make()\n    ->columns([\n        'sm' => 3,\n        'xl' => 6,\n        '2xl' => 8,\n    ])\n    ->schema([\n        TextInput::make('name')\n            ->columnStart([\n                'sm' => 2,\n                'xl' => 3,\n                '2xl' => 4,\n            ]),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Configuring Tenant Registration Page - PHP\nDESCRIPTION: This code snippet configures Filament to use the custom tenant registration page created in the previous step. It requires the `App\\Filament\\Pages\\Tenancy\\RegisterTeam` class to exist.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Pages\\Tenancy\\RegisterTeam;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantRegistration(RegisterTeam::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Text to Specific Number of Lines - PHP\nDESCRIPTION: This snippet demonstrates how to limit the text to a specific number of lines using the `lineClamp()` method. It clamps the text to a maximum of 2 lines.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('description')\n    ->lineClamp(2)\n```\n\n----------------------------------------\n\nTITLE: Stack Layout inside Split - Filament PHP\nDESCRIPTION: This code shows how to use a `Stack` component within a `Split` layout to display multiple columns vertically.  The 'phone' and 'email' columns are stacked together. This allows for displaying more information in fewer columns on larger screens.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/05-layout.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\FontWeight;\nuse Filament\\Tables\\Columns\\Layout\\Split;\nuse Filament\\Tables\\Columns\\Layout\\Stack;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nSplit::make([\n    ImageColumn::make('avatar')\n        ->circular(),\n    TextColumn::make('name')\n        ->weight(FontWeight::Bold)\n        ->searchable()\n        ->sortable(),\n    Stack::make([\n        TextColumn::make('phone')\n            ->icon('heroicon-m-phone'),\n        TextColumn::make('email')\n            ->icon('heroicon-m-envelope'),\n    ]),\n])\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle Hooks in a Filament Checkbox Column\nDESCRIPTION: This code snippet demonstrates how to use lifecycle hooks in a Filament Checkbox column. `beforeStateUpdated` is executed before the state is saved to the database, and `afterStateUpdated` is executed after the state is saved. These hooks allow you to execute custom code based on the state change of the checkbox.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/09-checkbox.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nCheckboxColumn::make()\n    ->beforeStateUpdated(function ($record, $state) {\n        // Runs before the state is saved to the database.\n    })\n    ->afterStateUpdated(function ($record, $state) {\n        // Runs after the state is saved to the database.\n    })\n```\n\n----------------------------------------\n\nTITLE: Setting Favicon in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to set the favicon for a Filament panel using the `favicon()` method. It passes the URL of the favicon file (e.g., PNG, ICO) using the `asset()` helper function.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/01-overview.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->favicon(asset('images/favicon.png'));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the File Disk for Filament Export Action\nDESCRIPTION: This code snippet demonstrates how to set the filesystem disk for a specific export using the `fileDisk()` method on the Filament `ExportAction`. This allows you to store the exported file on a different disk than the default.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\ExportAction;\n\nExportAction::make()\n    ->exporter(ProductExporter::class)\n    ->fileDisk('s3')\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle Layout to Stacked in Filament - PHP\nDESCRIPTION: This snippet shows how to set the layout of the Toggle component to 'stacked' (label above) using the `inline(false)` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/05-toggle.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('is_admin')\n    ->inline(false)\n```\n\n----------------------------------------\n\nTITLE: Using SpatieMediaLibraryImageColumn in Filament Table\nDESCRIPTION: This code snippet demonstrates how to use the `SpatieMediaLibraryImageColumn` component in a Filament table.  It displays the 'avatar' image from the media library in a table column.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\SpatieMediaLibraryImageColumn;\n\nSpatieMediaLibraryImageColumn::make('avatar')\n```\n\n----------------------------------------\n\nTITLE: Making Modal Header Sticky - Blade\nDESCRIPTION: This code snippet demonstrates how to make the header of a Filament modal sticky using the `sticky-header` attribute. When set, the header remains visible even when the modal content is scrolled.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-modal.md#_snippet_12\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal sticky-header>\n    <x-slot name=\"heading\">\n        Modal heading\n    </x-slot>\n\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions and Forms in Livewire\nDESCRIPTION: This PHP code demonstrates how to integrate actions and forms into a Livewire component. It uses the `InteractsWithActions` and `InteractsWithForms` traits and implements the `HasActions` and `HasForms` interfaces.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-action.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Concerns\\InteractsWithActions;\nuse Filament\\Actions\\Contracts\\HasActions;\nuse Filament\\Forms\\Concerns\\InteractsWithForms;\nuse Filament\\Forms\\Contracts\\HasForms;\nuse Livewire\\Component;\n\nclass ManagePost extends Component implements HasForms, HasActions\n{\n    use InteractsWithActions;\n    use InteractsWithForms;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Email Code Authentication Secret Column\nDESCRIPTION: This code snippet demonstrates how to add a new column to the `users` table to store the secret key for email code authentication. This column will store the encrypted time-based one-time password secret. The column is defined as a nullable text field.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/02-multi-factor-authentication.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nSchema::table('users', function (Blueprint $table) {\n    $table->text('email_code_authentication_secret')->nullable();\n});\n```\n\n----------------------------------------\n\nTITLE: Removing the Default Dashboard Class in Filament\nDESCRIPTION: This snippet configures the Filament panel to remove the original `Dashboard` class from the panel's pages. This is necessary when a custom Dashboard page is created to prevent conflicts. This step involves modifying the panel's configuration file.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/01-overview.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->discoverPages(in: app_path('Filament/Pages'), for: 'App\\\\Filament\\\\Pages')\n        ->pages([]);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Table Column State with Pest\nDESCRIPTION: This code snippet tests asserting a column has a particular state, or does not have a particular state for a given record using `assertTableColumnStateSet()` and `assertTableColumnStateNotSet()`\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/03-testing-tables.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can get post author names', function () {\n    $posts = Post::factory()->count(10)->create();\n\n    $post = $posts->first();\n\n    livewire(PostResource\\Pages\\ListPosts::class)\n        ->assertTableColumnStateSet('author.name', $post->author->name, record: $post)\n        ->assertTableColumnStateNotSet('author.name', 'Anonymous', record: $post);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Icon Button Trigger Style in Filament (PHP)\nDESCRIPTION: This code sets the trigger style of an action to 'icon button'. Icon button triggers are circular buttons with an icon and no label.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('edit')\n    ->icon('heroicon-m-pencil-square')\n    ->iconButton()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Showing a Field using visible()\nDESCRIPTION: This shows how to control field visibility with the `visible()` method, making code potentially more readable in some contexts.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->visible(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Counting Relationships with Scopes\nDESCRIPTION: This demonstrates how to count related records with scopes using an array with the relationship name as the key and a closure for the scope.  The column name must follow Laravel's convention (e.g. `users_count`).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nExportColumn::make('users_count')\n    ->counts([\n        'users' => fn (Builder $query) => $query->where('is_active', true),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Passing Collection to Infolist Image Entry\nDESCRIPTION: This code shows how to specify a collection to be used in `SpatieMediaLibraryImageEntry` via `collection()`. Only images associated with the 'avatars' collection will be displayed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\SpatieMediaLibraryImageEntry;\n\nSpatieMediaLibraryImageEntry::make('avatar')\n    ->collection('avatars')\n```\n\n----------------------------------------\n\nTITLE: Customizing Decimal Places in Numeric Formatting\nDESCRIPTION: Customizes the number of decimal places used when formatting a number with the `numeric()` method in Filament Infolists. The `decimalPlaces` argument specifies the desired number of decimal places. Accepts both static values and functions for dynamic calculation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('stock')\n    ->numeric(decimalPlaces: 0)\n```\n\n----------------------------------------\n\nTITLE: Generating Resource with Soft Deletes - Bash\nDESCRIPTION: This command generates a Filament resource with soft delete functionality enabled. The `--soft-deletes` flag ensures that the resource includes methods for handling soft-deleted records.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/06-deleting-records.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-resource Customer --soft-deletes\n```\n\n----------------------------------------\n\nTITLE: Rendering a Scoped Render Hook - Blade\nDESCRIPTION: This snippet demonstrates how to render a render hook with a scope in a Blade template, passing the scope (usually the Livewire component's class) to the `renderHook()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/01-render-hooks.md#_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n{{ \\Filament\\Support\\Facades\\FilamentView::renderHook(\\Filament\\View\\PanelsRenderHook::PAGE_START, scopes: $this->getRenderHookScopes()) }}\n```\n\n----------------------------------------\n\nTITLE: Customizing Boolean Icons (Filament, PHP)\nDESCRIPTION: This snippet demonstrates how to customize the icons used to represent true and false values in a Filament Icon column. The `trueIcon()` and `falseIcon()` methods are used to specify different Heroicons for each state.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/03-icon.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\nuse Filament\\Support\\Icons\\Heroicon;\n\nIconColumn::make('is_featured')\n    ->boolean()\n    ->trueIcon(Heroicon::OutlinedCheckBadge)\n    ->falseIcon(Heroicon::OutlinedXMark)\n```\n\n----------------------------------------\n\nTITLE: Listing Values with Bullet Points\nDESCRIPTION: Adds bullet points to each item in a list of values using the `bulleted()` method. Assumes the column's state is an array.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('authors.name')\n    ->bulleted()\n```\n\n----------------------------------------\n\nTITLE: Limiting the number of stacked images in Filament\nDESCRIPTION: This snippet demonstrates how to limit the number of images displayed in a stacked column using `limit()`.  It takes an integer representing the maximum number of images to show.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/04-image.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\ImageColumn;\n\nImageColumn::make('colleagues.avatar')\n    ->imageHeight(40)\n    ->circular()\n    ->stacked()\n    ->limit(3)\n```\n\n----------------------------------------\n\nTITLE: Accessing Livewire Component Instance in Blade\nDESCRIPTION: Illustrates accessing the current Livewire component instance using `$this` in a Blade view.  This allows you to access methods and properties of the Livewire component, such as checking if the component is a `ConferencesRelationManager` instance. Requires `Filament\\Resources\\Users\\RelationManagers\\ConferencesRelationManager`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/20-custom-fields.md#_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n@php\n    use Filament\\Resources\\Users\\RelationManagers\\ConferencesRelationManager;\n@endphp\n\n<x-dynamic-component\n    :component=\"$getFieldWrapperView()\"\n    :field=\"$field\"\n>\n    @if ($this instanceof ConferencesRelationManager)\n        You are editing conferences the of a user.\n    @endif\n</x-dynamic-component>\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle Hooks with SelectColumn (PHP)\nDESCRIPTION: This snippet illustrates how to use lifecycle hooks (`beforeStateUpdated` and `afterStateUpdated`) to execute custom logic before and after the state of the `SelectColumn` is updated.  These hooks allow you to perform actions such as data manipulation, logging, or triggering events when the select field's value changes. The `$record` and `$state` variables provide access to the current record and the new state value, respectively.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/06-select.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nSelectColumn::make()\n    ->beforeStateUpdated(function ($record, $state) {\n        // Runs before the state is saved to the database.\n    })\n    ->afterStateUpdated(function ($record, $state) {\n        // Runs after the state is saved to the database.\n    })\n```\n\n----------------------------------------\n\nTITLE: Making a Textarea Read-Only - PHP\nDESCRIPTION: This code makes the Textarea component read-only, preventing users from directly editing the content within the form. The field will still be submitted to the server. Optionally, a boolean value can be passed to control the read-only state.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/15-textarea.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Textarea;\n\nTextarea::make('description')\n    ->readOnly()\n```\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Textarea;\n\nTextarea::make('description')\n    ->readOnly(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Setting Conversions Disk\nDESCRIPTION: This code configures which disk conversions for the media library should be saved to using the `conversionsDisk()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\SpatieMediaLibraryFileUpload;\n\nSpatieMediaLibraryFileUpload::make('attachments')\n    ->conversionsDisk('s3')\n```\n\n----------------------------------------\n\nTITLE: Implementing HasSchemas Interface\nDESCRIPTION: This PHP code shows how to implement the `HasSchemas` interface and use the `InteractsWithSchemas` trait in a Livewire component. This is essential for using Filament schemas within the component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-infolist.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Concerns\\InteractsWithSchemas;\nuse Filament\\Schemas\\Contracts\\HasSchemas;\nuse Livewire\\Component;\n\nclass ViewProduct extends Component implements HasSchemas\n{\n    use InteractsWithSchemas;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Content After Field - Filament PHP\nDESCRIPTION: This code snippet illustrates how to add content after a Filament form field using the `afterContent()` method.  It utilizes the `TextInput`, `Icon`, and `Heroicon` classes to add an icon after the TextInput field.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Icon;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTextInput::make('name')\n    ->afterContent(Icon::make(Heroicon::Star))\n```\n\n----------------------------------------\n\nTITLE: Customizing Job Connection - PHP\nDESCRIPTION: This snippet shows how to customize the connection used for jobs of a certain importer, by overriding the `getJobConnection()` method in your importer class. This allows defining which connection should be used for specific import tasks. Dependencies: None.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\npublic function getJobConnection(): ?string\n{\n    return 'sqs';\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Remaining Text Size - Filament PHP\nDESCRIPTION: This code snippet demonstrates customizing the text size of the remaining images count using the `limitedRemainingText()` method, along with the `size` parameter which accepts a `TextSize` enum value. You can use `TextSize::ExtraSmall`, `TextSize::Small`, `TextSize::Medium` or `TextSize::Large`. The `limitedRemainingText()` method also accepts a function for dynamic text calculation, injecting utilities as parameters.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/04-image-entry.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\nuse Filament\\Support\\Enums\\TextSize;\n\nImageEntry::make('colleagues.avatar')\n    ->imageHeight(40)\n    ->circular()\n    ->stacked()\n    ->limit(3)\n    ->limitedRemainingText(size: TextSize::Large)\n```\n\n----------------------------------------\n\nTITLE: Sorting Navigation Items Dynamically - PHP\nDESCRIPTION: This code snippet shows how to dynamically determine the order of navigation items using the `getNavigationSort()` method. This allows for a dynamic sorting, possibly based on user roles or application settings.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\npublic static function getNavigationSort(): ?int\n{\n    return 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Table Sorting Functionality - PHP\nDESCRIPTION: This snippet demonstrates how to test table sorting functionality. It uses the `sortTable()` method to sort the table by a specified column, and `assertCanSeeTableRecords()` to verify that the records are displayed in the correct order after sorting.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/02-testing-resources.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Resources\\Users\\Pages\\ListUsers;\nuse App\\Models\\User;\n\nit('can sort users by `name`', function () {\n    $users = User::factory()->count(5)->create();\n\n    livewire(ListUsers::class)\n        ->assertCanSeeTableRecords($users)\n        ->sortTable('name')\n        ->assertCanSeeTableRecords($users->sortBy('name'), inOrder: true)\n        ->sortTable('name', 'desc')\n        ->assertCanSeeTableRecords($users->sortByDesc('name'), inOrder: true);\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Default Colors\nDESCRIPTION: This code demonstrates how to customize the default colors used in Filament using the `FilamentColor::register()` method. It shows how to map default color names (e.g., 'danger', 'primary') to Tailwind CSS colors using the `Color` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/03-colors.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Support\\Colors\\Color;\nuse Filament\\Support\\Facades\\FilamentColor;\n\nFilamentColor::register([\n    'danger' => Color::Red,\n    'gray' => Color::Zinc,\n    'info' => Color::Blue,\n    'primary' => Color::Amber,\n    'success' => Color::Green,\n    'warning' => Color::Amber,\n]);\n```\n\n----------------------------------------\n\nTITLE: Injecting Multiple Utilities - PHP\nDESCRIPTION: This code snippet demonstrates how to inject multiple utilities into a schema using different parameters. It shows how to combine Livewire instance, Get (for retrieving state), and Set (presumably for setting state).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/01-overview.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Utilities\\Get;\nuse Filament\\Schemas\\Components\\Utilities\\Set;\nuse Livewire\\Component as Livewire;\n\nfunction (Livewire $livewire, Get $get, Set $set) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a basic section\nDESCRIPTION: This code demonstrates how to create a basic section with a title, description, and schema using the Filament Section component. It is used to group related form fields under a common heading with an optional description.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/03-sections.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Section;\n\nSection::make('Rate limiting')\n    ->description('Prevent abuse by limiting the number of requests per period')\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Asserting No Form Errors - PHP\nDESCRIPTION: This snippet demonstrates how to assert that a Filament form has no validation errors using `assertHasNoFormErrors()`. It requires the `Pest\\Livewire\\livewire` function.  The example ensures that a filled form has no errors. You can specify the form name as the second argument to `assertHasNoFormErrors` when there are multiple schemas.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nlivewire(CreatePost::class)\n    ->fillForm([\n        'title' => fake()->sentence(),\n        // ...\n    ])\n    ->call('create')\n    ->assertHasNoFormErrors();\n```\n\n----------------------------------------\n\nTITLE: Using Grid Columns Within Tab - PHP\nDESCRIPTION: Shows how to customize the grid layout within a Filament Tab using the `columns()` method. This allows specifying the number of columns for the tab's content.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/04-tabs.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Tabs;\nuse Filament\\Schemas\\Components\\Tabs\\Tab;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tab::make('Tab 1')\n            ->schema([\n                // ...\n            ])\n            ->columns(3),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Testing Table Record Visibility with Pest\nDESCRIPTION: This code snippet shows how to test the visibility of records in a Filament table using `assertCanSeeTableRecords()`, `assertCanNotSeeTableRecords()`, and `assertCountTableRecords()`. It verifies that only non-trashed posts are displayed by default, and it correctly counts the number of visible records.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/03-testing-tables.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('cannot display trashed posts by default', function () {\n    $posts = Post::factory()->count(4)->create();\n    $trashedPosts = Post::factory()->trashed()->count(6)->create();\n\n    livewire(PostResource\\Pages\\ListPosts::class)\n        ->assertCanSeeTableRecords($posts)\n        ->assertCanNotSeeTableRecords($trashedPosts)\n        ->assertCountTableRecords(4);\n});\n```\n\n----------------------------------------\n\nTITLE: Wizard Step Navigation with Specific Schema (PHP)\nDESCRIPTION: Shows how to navigate wizard steps and assert form errors within a specific schema when multiple schemas exist on a single Livewire component. The `schema` parameter is passed to `goToNextWizardStep()` and `assertHasFormErrors()`.  It requires the `CreatePost` Livewire component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('moves to next wizard step only for fooForm', function () {\n    livewire(CreatePost::class)\n        ->goToNextWizardStep(schema: 'fooForm')\n        ->assertHasFormErrors(['title'], schema: 'fooForm');\n});\n```\n\n----------------------------------------\n\nTITLE: Making sections collapsed by default\nDESCRIPTION: This code demonstrates how to make a section collapsed by default using the `collapsed()` method. The section's content will be hidden until the user expands it.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/03-sections.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Section;\n\nSection::make('Cart')\n    ->description('The items you have selected for purchase')\n    ->schema([\n        // ...\n    ])\n    ->collapsed()\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Widgets in Filament Dashboard\nDESCRIPTION: This code snippet shows how to disable the default widgets displayed on a Filament dashboard. By updating the `widgets()` array within the `panel()` method of the `Panel` class, you can customize the widgets shown or disable them entirely by passing an empty array.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/01-overview.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->widgets([]);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Affix Icon Color - Blade\nDESCRIPTION: This example demonstrates how to set the color of the affix icon using the `suffix-icon-color` attribute. It allows you to customize the appearance of the icon based on the input's state or purpose (e.g., 'success' for a valid input).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-input-wrapper.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::input.wrapper\n    suffix-icon=\"heroicon-m-check-circle\"\n    suffix-icon-color=\"success\"\n>\n    <x-filament::input\n        type=\"url\"\n        wire:model=\"domain\"\n    />\n</x-filament::input.wrapper>\n```\n\n----------------------------------------\n\nTITLE: Collapsible Section - Blade\nDESCRIPTION: Demonstrates how to make a section collapsible using the `collapsible` attribute. This allows users to toggle the visibility of the section's content.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-section.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::section collapsible>\n    <x-slot name=\"heading\">\n        User details\n    </x-slot>\n\n    {{-- Content --}}\n</x-filament::section>\n```\n\n----------------------------------------\n\nTITLE: Creating Boolean ToggleButtons (PHP)\nDESCRIPTION: This snippet creates a ToggleButtons component for a boolean choice (Yes/No) using the `boolean()` method.  It sets up default colors and icons which can be overridden using `colors()` and `icons()` methods.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/18-toggle-buttons.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\n\nToggleButtons::make('feedback')\n    ->label('Like this post?')\n    ->boolean()\n```\n\n----------------------------------------\n\nTITLE: Creating a Filament Theme (Bash)\nDESCRIPTION: This snippet shows how to create a custom theme for a Filament panel using the `php artisan make:filament-theme` command. It allows specifying a panel name and package manager for theme creation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/01-overview.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-theme\n\nphp artisan make:filament-theme admin\n\nphp artisan make:filament-theme --pm=bun\n```\n\n----------------------------------------\n\nTITLE: Access Column Instance in Blade\nDESCRIPTION: This Blade snippet demonstrates how to access the current column instance in the Blade view using the `$column` variable. This is useful for accessing information or methods on the column object itself.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/10-custom-columns.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    @if ($column->isLabelHidden())\n        This is a new conference.\n    @endif\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a section without a header\nDESCRIPTION: This code shows how to create a section without a header, which effectively wraps the enclosed components in a simple card. Useful for grouping fields without a specific title.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/03-sections.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Section;\n\nSection::make()\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Using Enum Descriptions in Form Fields in PHP\nDESCRIPTION: This snippet demonstrates how to use the `HasDescription` interface to generate descriptions for Filament form fields like `Radio` and `CheckboxList`. The descriptions are automatically displayed in the UI to provide additional context for each option. The status enum has to implement the `HasDescription` interface.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/03-enums.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\nuse Filament\\Forms\\Components\\Radio;\n\nRadio::make('status')\n    ->options(Status::class)\n\nCheckboxList::make('status')\n    ->options(Status::class)\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Notifications - Filament Panel\nDESCRIPTION: This code snippet shows how to enable database notifications within a Filament panel using the `databaseNotifications()` method.  It configures the panel to use database notifications.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/02-database-notifications.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->databaseNotifications();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Current Tenant - PHP\nDESCRIPTION: This code snippet shows how to access the current tenant model anywhere in the application using the `Filament` facade.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Facades\\Filament;\n\n$tenant = Filament::getTenant();\n```\n\n----------------------------------------\n\nTITLE: Add Extra HTML Attributes to ImageEntry (PHP)\nDESCRIPTION: This snippet shows how to add extra HTML attributes to the `<img>` element generated by an ImageEntry component in Filament Infolists.  It uses the `extraImgAttributes()` method, which accepts an array where the keys are attribute names and the values are attribute values. Attributes such as 'alt' and 'loading' are demonstrated.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/04-image-entry.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('logo')\n    ->extraImgAttributes([\n        'alt' => 'Logo',\n        'loading' => 'lazy',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Inline SVG Logo (Blade)\nDESCRIPTION: This snippet shows how to define an inline SVG logo using Blade syntax. This SVG can be rendered using the brandLogo() method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/01-overview.md#_snippet_12\n\nLANGUAGE: blade\nCODE:\n```\n<svg\n    viewBox=\"0 0 128 26\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    class=\"h-full fill-gray-500 dark:fill-gray-400\"\n>\n    <!-- ... -->\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Creating Another View Page - Bash\nDESCRIPTION: This command uses the Filament Artisan command to create an additional view page for a resource. This allows for more complex layouts or different views for the same data.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/05-viewing-records.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-page ViewCustomerContact --resource=CustomerResource --type=ViewRecord\n```\n\n----------------------------------------\n\nTITLE: Setting Form Model Class\nDESCRIPTION: This PHP code shows how to set the model class (instead of instance) for the form. Use this when the model doesn't exist yet.  Relationships are not saved automatically.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-form.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Schemas\\Schema;\n\npublic function form(Schema $schema): Schema\n{\n    return $schema\n        ->components([\n            // ...\n        ])\n        ->statePath('data')\n        ->model(Post::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Alpine.js Component for Clock Widget\nDESCRIPTION: This JavaScript code defines the Alpine.js component that displays the current time and updates it every second. It exports a function that returns an object with the necessary properties and methods.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/11-plugins/03-building-a-panel-plugin.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function clockWidget() {\n    return {\n        time: new Date().toLocaleTimeString(),\n        init() {\n            setInterval(() => {\n                this.time = new Date().toLocaleTimeString();\n            }, 1000);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling a specific parent action in Filament\nDESCRIPTION: This code demonstrates canceling a specific parent action, including its children, when a nested action is run.  The `cancelParentActions('second')` method cancels the 'second' action and its child, 'third', but not the 'first' action.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('first')\n    ->requiresConfirmation()\n    ->action(function () {\n        // ...\n    })\n    ->extraModalFooterActions([\n        Action::make('second')\n            ->requiresConfirmation()\n            ->action(function () {\n                // ...\n            })\n            ->extraModalFooterActions([\n                Action::make('third')\n                    ->requiresConfirmation()\n                    ->action(function () {\n                        // ...\n                    })\n                    ->extraModalFooterActions([\n                        Action::make('fourth')\n                            ->requiresConfirmation()\n                            ->action(function () {\n                                // ...\n                            })\n                            ->cancelParentActions('second'),\n                    ]),\n            ]),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting Color Format (RGB) - PHP\nDESCRIPTION: This snippet demonstrates how to set the color format to RGB for the Filament color picker component. It creates a color picker field named 'rgb_color' and configures it to use the RGB format.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/17-color-picker.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\ColorPicker;\n\nColorPicker::make('rgb_color')\n    ->rgb()\n```\n\n----------------------------------------\n\nTITLE: Disabling Revealable Passwords in Filament\nDESCRIPTION: This snippet demonstrates how to disable the revealable password feature in Filament by passing `false` to the `revealablePasswords()` configuration method within the panel configuration. This prevents users from seeing a plain text version of the password they are typing.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/01-overview.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->revealablePasswords(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Sidebar from Custom Action - PHP\nDESCRIPTION: This code snippet shows how to dispatch a `refresh-sidebar` event from a custom action class. It injects the `$livewire` argument into a closure function and calls `dispatch()` on it.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Livewire\\Component;\n\nAction::make('create')\n    ->action(function (Component $livewire) {\n        // ...\n    \n        $livewire->dispatch('refresh-sidebar');\n    })\n```\n\n----------------------------------------\n\nTITLE: Creating a Fieldset Component in Blade\nDESCRIPTION: This code snippet demonstrates how to create a Fieldset component in a Blade template using Filament. It includes a slot for the label and a placeholder for form fields. The component helps to group related form elements together visually and semantically.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-fieldset.md#_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::fieldset>\n    <x-slot name=\"label\">\n        Address\n    </x-slot>\n    \n    {{-- Form fields --}}\n</x-filament::fieldset>\n```\n\n----------------------------------------\n\nTITLE: Using Heroicons in Blade Components\nDESCRIPTION: Illustrates how to use Heroicons within Blade components in Filament. It demonstrates passing the `Heroicon` enum value as an attribute to a Filament Blade component to render the specified icon.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/04-icons.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n@php\n    use Filament\\Support\\Icons\\Heroicon;\n@endphp\n\n<x-filament::badge :icon=\"Heroicon::Star\">\n    Star\n</x-filament::badge>\n```\n\n----------------------------------------\n\nTITLE: Accessing Livewire Component Instance in Blade View (Blade)\nDESCRIPTION: This snippet illustrates accessing the current Livewire component instance using `$this` within a Blade view. It includes an example of checking if the current component is a `PostsRelationManager` instance.  Note that this might be limiting depending on component context.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/07-custom-components.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n@php\n    use Filament\\Resources\\Users\\RelationManagers\\PostsRelationManager;\n@endphp\n\n<p>\n    @if ($this instanceof PostsRelationManager)\n        You are editing posts the of a user.\n    @endif\n</p>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Setting Read-Only - PHP\nDESCRIPTION: This example demonstrates how to conditionally set a DatePicker field as read-only using a boolean value. It leverages a feature flag to determine the read-only state dynamically.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/08-date-time-picker.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\n\nDatePicker::make('date_of_birth')\n    ->readOnly(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Adding a Table Heading (PHP)\nDESCRIPTION: This code shows how to add a heading to a Filament table using the `$table->heading()` method. The heading will be displayed above the table.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->heading('Clients')\n        ->columns([\n            // ...\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Customizing Relationship Query for Select Filters (PHP)\nDESCRIPTION: This snippet demonstrates how to customize the database query used to retrieve options for a relationship select filter. It uses the third parameter of the `relationship()` method to modify the query.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/02-select.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\SelectFilter;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nSelectFilter::make('author')\n    ->relationship('author', 'name', fn (Builder $query) => $query->withTrashed())\n```\n\n----------------------------------------\n\nTITLE: Showing Remaining Images Count - Filament PHP\nDESCRIPTION: This snippet demonstrates displaying the count of remaining images after a limit has been applied to a stacked image display using the `limitedRemainingText()` method. This informs the user how many images are not being displayed due to the limit. The `limitedRemainingText()` method can also accept a boolean value to control the display of the remaining text, and a function to calculate it dynamically.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/04-image-entry.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('colleagues.avatar')\n    ->imageHeight(40)\n    ->circular()\n    ->stacked()\n    ->limit(3)\n    ->limitedRemainingText()\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('colleagues.avatar')\n    ->imageHeight(40)\n    ->circular()\n    ->stacked()\n    ->limit(3)\n    ->limitedRemainingText(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Example Repeatable Entry Data Structure - PHP\nDESCRIPTION: This example demonstrates the expected data structure for the repeatable entry, showing an array of comments, each containing an author object (with a name), a title, and content.  This data is what Filament uses to populate the RepeatableEntry component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/07-repeatable-entry.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n[\n    [\n        'author' => ['name' => 'Jane Doe'],\n        'title' => 'Wow!',\n        'content' => 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam euismod, nisl eget aliquam ultricies, nunc nisl aliquet nunc, quis aliquam nisl.',\n    ],\n    [\n        'author' => ['name' => 'John Doe'],\n        'title' => 'This isn\\'t working. Help!',\n        'content' => 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam euismod, nisl eget aliquam ultricies, nunc nisl aliquet nunc, quis aliquam nisl.',\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Using a non-Tailwind color\nDESCRIPTION: This code snippet shows how to register a color using OKLCH values instead of Tailwind color names. It provides an array of color shades from 50 to 950 in OKLCH format which allows for using custom color palettes outside of the Tailwind defaults.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/03-colors.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Support\\Facades\\FilamentColor;\n\nFilamentColor::register([\n    'danger' => [\n        50 => 'oklch(0.969 0.015 12.422)',\n        100 => 'oklch(0.941 0.03 12.58)',\n        200 => 'oklch(0.892 0.058 10.001)',\n        300 => 'oklch(0.81 0.117 11.638)',\n        400 => 'oklch(0.712 0.194 13.428)',\n        500 => 'oklch(0.645 0.246 16.439)',\n        600 => 'oklch(0.586 0.253 17.585)',\n        700 => 'oklch(0.514 0.222 16.935)',\n        800 => 'oklch(0.455 0.188 13.697)',\n        900 => 'oklch(0.41 0.159 10.272)',\n        950 => 'oklch(0.271 0.105 12.094)',\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Preventing Value Editing in Filament KeyValue\nDESCRIPTION: This snippet demonstrates how to prevent the user from editing the value fields using the `editableValues(false)` method.  This is useful for read-only scenarios or when values are automatically generated.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/16-key-value.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n    ->editableValues(false)\n```\n\n----------------------------------------\n\nTITLE: Filament Filesystem Disk Configuration (PHP)\nDESCRIPTION: This PHP configuration snippet sets the default filesystem disk for Filament to the `FILESYSTEM_DISK` environment variable, falling back to 'public' if the variable is not defined.  This preserves v3 behavior and should be used after upgrading to v4.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n\n    // ...\n\n    'default_filesystem_disk' => env('FILAMENT_FILESYSTEM_DISK', 'public'),\n\n    // ...\n\n]\n```\n\n----------------------------------------\n\nTITLE: Wrapping Multiple Icons (Filament, PHP)\nDESCRIPTION: This code snippet demonstrates how to enable wrapping for multiple icons within a Filament Icon column. The `wrap()` method is used to allow the icons to wrap to the next line if they don't fit on a single line.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/03-icon.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\n\nIconColumn::make('icon')\n    ->wrap()\n```\n\n----------------------------------------\n\nTITLE: Customizing Grid Columns at Breakpoints - PHP\nDESCRIPTION: This code extends the previous example by customizing the number of columns within the grid at different breakpoints (`lg` and `2xl`). It uses a `Stack` component to group two `TextColumn` components together, demonstrating how to manage content within the grid columns.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/05-layout.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Layout\\Grid;\nuse Filament\\Tables\\Columns\\Layout\\Stack;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nGrid::make([\n    'lg' => 2,\n    '2xl' => 4,\n])\n    ->schema([\n        Stack::make([\n            TextColumn::make('name'),\n            TextColumn::make('job'),\n        ]),\n        TextColumn::make('phone')\n            ->icon('heroicon-m-phone'),\n        TextColumn::make('email')\n            ->icon('heroicon-m-envelope'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Passing properties to widgets on resource pages\nDESCRIPTION: This demonstrates how to pass properties to widgets when registering them on a resource page using the `make()` method. These properties are mapped to public Livewire properties on the widget class, enabling customization and dynamic behavior.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/10-widgets.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nprotected function getHeaderWidgets(): array\n{\n    return [\n        CustomerResource\\Widgets\\CustomerOverview::make([\n            'status' => 'active',\n        ]),\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Widgets\\Widget;\n\nclass CustomerOverview extends Widget\n{\n    public string $status;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Filament Loading Indicator Component - Blade\nDESCRIPTION: This snippet demonstrates how to use the Filament loading indicator Blade component within a Blade template.  It includes the component using the `<x-filament::loading-indicator>` tag and sets its height and width using the `class` attribute. The class is set to `h-5 w-5` which are Tailwind CSS classes that define the height and width to 5 units.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-loading-indicator.md#_snippet_0\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::loading-indicator class=\"h-5 w-5\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Bullet Points to List\nDESCRIPTION: Adds bullet points to each item in a list of values using the `bulleted()` method in a Filament Infolist TextEntry.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('authors.name')\n    ->bulleted()\n```\n\n----------------------------------------\n\nTITLE: Formatting Text Range (PHP)\nDESCRIPTION: This snippet formats the range as text using the `minimalTextualDifference()` method with the `Range` summarizer. It's used to display the minimal difference between the text values in the 'sku' column.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Range;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('sku')\n    ->summarize(Range::make()->minimalTextualDifference())\n```\n\n----------------------------------------\n\nTITLE: Customizing Widget Width in Filament\nDESCRIPTION: This snippet demonstrates how to customize the width of a widget using the `$columnSpan` property. This property can be set to a number between 1 and 12, or to `full` to make the widget occupy the full width of the page.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/01-overview.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nprotected int | string | array $columnSpan = 'full';\n```\n\n----------------------------------------\n\nTITLE: Conditional Boolean Handling - PHP\nDESCRIPTION: This snippet shows how to conditionally enable the boolean behavior of the IconEntry based on the result of `FeatureFlag::active()`. This allows dynamically controlling whether the IconEntry should represent a boolean value.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/03-icon-entry.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\IconEntry;\n\nIconEntry::make('is_featured')\n    ->boolean(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Initializing a simple Text Entry in Filament Infolists (PHP)\nDESCRIPTION: This snippet demonstrates how to create a basic TextEntry component in Filament Infolists, displaying the value of the 'title' field. It uses the `TextEntry::make()` method to instantiate the component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('title')\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading CSS with Alpine.js in Filament\nDESCRIPTION: This Blade snippet demonstrates lazy loading CSS files using Alpine.js and the `x-load-css` directive.  It uses `FilamentAsset::getStyleHref()` to get the CSS file's URL.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<div\n    x-data=\"{}\"\n    x-load-css=\"[@js(\\Filament\\Support\\Facades\\FilamentAsset::getStyleHref('custom-stylesheet'))]\"\n>\n    <!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing TextInputColumn in Filament\nDESCRIPTION: This snippet demonstrates how to create a basic text input column within a Filament table. It initializes a `TextInputColumn` instance for the 'email' field, allowing users to edit email addresses directly in the table.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/08-text-input.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextInputColumn;\n\nTextInputColumn::make('email')\n```\n\n----------------------------------------\n\nTITLE: Preventing Drag and Drop Reordering - Filament Builder (PHP)\nDESCRIPTION: This snippet demonstrates how to prevent users from reordering items via drag and drop within a Filament Builder component, while potentially still allowing reordering via buttons, using the `reorderableWithDragAndDrop(false)` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->reorderableWithDragAndDrop(false)\n```\n\n----------------------------------------\n\nTITLE: Defining Infolist for Additional View Page - PHP\nDESCRIPTION: This code defines the infolist structure for an additional view page in Filament. It showcases how to use the `infolist()` method to configure the components that display the record data on that specific page.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/05-viewing-records.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Schema;\n\npublic function infolist(Schema $schema): Schema\n{\n    return $schema\n        ->components([\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Media by Custom Properties\nDESCRIPTION: This snippet demonstrates how to filter the media collection based on custom properties. It uses the `filterMediaUsing()` method to scope the file upload component to only handle media with a specific 'gallery_id'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Utilities\\Get;\nuse Filament\\Forms\\Components\\SpatieMediaLibraryFileUpload;\nuse Illuminate\\Support\\Collection;\n\nSpatieMediaLibraryFileUpload::make('images')\n    ->customProperties(fn (Get $get): array => [\n        'gallery_id' => $get('gallery_id'),\n    ])\n    ->filterMediaUsing(\n        fn (Collection $media, Get $get): Collection => $media->where(\n            'custom_properties.gallery_id',\n            $get('gallery_id')\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: Customizing Example CSV Header - PHP\nDESCRIPTION: This snippet shows how to customize the header of the example CSV per-column using the `exampleHeader()` method. The method accepts a string for the new header value. Dependencies: Filament\\Actions\\Imports\\ImportColumn.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('sku')\n    ->exampleHeader('SKU')\n```\n\n----------------------------------------\n\nTITLE: Unshifting Operators to Filament Text Constraint\nDESCRIPTION: This snippet shows how to add an operator to the beginning of the existing list of operators in a Filament text constraint. By using the `unshiftOperators()` method, and passing an array containing the desired operator(s), the new operator(s) are added at the start of the list of operators.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\Operators\\IsFilledOperator;\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\TextConstraint;\n\nTextConstraint::make('author')\n    ->relationship(name: 'author', titleAttribute: 'name')\n    ->unshiftOperators([\n        IsFilledOperator::class,\n    ])\n```\n\n----------------------------------------\n\nTITLE: Accessing Component Configuration in Blade (Blade)\nDESCRIPTION: Demonstrates how to access a configuration value set in a custom component from its Blade view using the dynamically created `$getHeading()` function based on the component's `getHeading()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/07-custom-components.md#_snippet_15\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    {{ $getHeading() }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Polymorphic User Relationship - PHP\nDESCRIPTION: This snippet shows how to use a polymorphic `MorphTo` relationship instead of the default `user_id` column in the `imports` table. First, the `user_id` column is replaced by `morphs('user')`. Then, in the `boot()` method, `Import::polymorphicUserRelationship()` is called to swap the relationship.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$table->morphs('user');\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Entry color in Filament Infolists (PHP)\nDESCRIPTION: This snippet shows how to customize the color of a TextEntry component in Filament Infolists using the `color()` method. The color is set to 'primary'. This method can also accept a function for dynamic color calculation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('status')\n    ->color('primary')\n```\n\n----------------------------------------\n\nTITLE: Customize Avatar URL\nDESCRIPTION: This code snippet shows how to customize the user avatar URL by implementing the `HasAvatar` contract in the User model. It defines the `getFilamentAvatarUrl()` method to retrieve the avatar URL from the `avatar_url` attribute. Dependencies: `Filament\\Models\\Contracts\\FilamentUser`, `Filament\\Models\\Contracts\\HasAvatar`, `Illuminate\\Database\\Eloquent\\Model`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Filament\\Models\\Contracts\\FilamentUser;\nuse Filament\\Models\\Contracts\\HasAvatar;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Team extends Model implements HasAvatar\n{\n    // ...\n\n    public function getFilamentAvatarUrl(): ?string\n    {\n        return $this->avatar_url;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tooltip to Filament Button - Blade\nDESCRIPTION: This snippet demonstrates how to add a tooltip to a Filament button using the `tooltip` attribute.  The tooltip text will be displayed when the user hovers over the button.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-button.md#_snippet_6\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::button tooltip=\"Register a user\">\n    New user\n</x-filament::button>\n```\n\n----------------------------------------\n\nTITLE: Using a Registered Color Name in Filament v4 Action (PHP)\nDESCRIPTION: This code snippet demonstrates how to use a registered color in a Filament v4 action. After registering the color (e.g., 'ruby'), you can reference it by name. This is the updated approach for defining action colors in Filament v4.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('delete')\n    ->color('ruby');\n```\n\n----------------------------------------\n\nTITLE: Searching with Laravel Scout (PHP)\nDESCRIPTION: This code demonstrates how to integrate Laravel Scout for searching records in a Filament table using the `searchUsing()` method. It utilizes Scout's `search()` method and filters the query based on the results. Requires the `searchable()` method to be called on at least one column, or the entire table.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Tables\\Table;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->searchUsing(fn (Builder $query, string $search) => $query->whereKey(Post::search($search)->keys()));\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->searchable();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Font Family of TextEntry - PHP\nDESCRIPTION: This snippet demonstrates how to customize the font family of a Filament Infolist TextEntry using the `fontFamily()` method and the `FontFamily` enum. It sets the font family to `Mono`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\FontFamily;\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('apiKey')\n    ->label('API key')\n    ->fontFamily(FontFamily::Mono)\n```\n\n----------------------------------------\n\nTITLE: Adding a Chart Description - PHP\nDESCRIPTION: This shows how to add a description below the chart's heading using the `getDescription()` method. The description provides additional context or information about the chart's data.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/03-charts.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic function getDescription(): ?string\n{\n    return 'The number of blog posts published per month.';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Helper Text to Import Column - Filament PHP\nDESCRIPTION: This snippet shows how to add helper text below the import column using the `helperText()` method. This is useful for providing extra information or instructions to the user before validation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('skus')\n    ->multiple(',')\n    ->helperText('A comma-separated list of SKUs.')\n```\n\n----------------------------------------\n\nTITLE: Using the Reusable Action in a Table (PHP)\nDESCRIPTION: This shows how to incorporate the `EmailCustomerAction` action class within a Filament table's actions.  The action is made available on each row of the table.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/12-code-quality-tips.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Resources\\Customers\\Actions\\EmailCustomerAction;\nuse Filament\\Tables\\Table;\n\npublic static function configure(Table $table): Table\n{\n    return $table\n        ->columns([\n            // ...\n        ])\n        ->actions([\n            EmailCustomerAction::make(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Affix Icons - Blade\nDESCRIPTION: This example shows how to add an icon as a suffix to the input using the `suffix-icon` attribute. The icon is specified by its name (e.g., 'heroicon-m-globe-alt'), and Filament handles the rendering of the icon within the input wrapper.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-input-wrapper.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::input.wrapper suffix-icon=\"heroicon-m-globe-alt\">\n    <x-filament::input\n        type=\"url\"\n        wire:model=\"domain\"\n    />\n</x-filament::input.wrapper>\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Chart Height - PHP\nDESCRIPTION: This example demonstrates how to set a maximum height for the chart using the `$maxHeight` property. This property is set as a string value containing valid CSS height measurement (e.g. '300px', '50vh').\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/03-charts.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nprotected ?string $maxHeight = '300px';\n```\n\n----------------------------------------\n\nTITLE: Create Filament Table Column\nDESCRIPTION: This command generates a new custom Filament table column class and its corresponding Blade view file using the `AudioPlayerColumn` name. It uses `php artisan`, a command-line tool for Filament.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/10-custom-columns.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-table-column AudioPlayerColumn\n```\n\n----------------------------------------\n\nTITLE: Formatting Money with Division (PHP)\nDESCRIPTION: This snippet demonstrates how to format monetary values using the `money()` method with a `divideBy` argument. It divides the original value by 100 before formatting, which is useful if the database stores prices in cents.  It formats the sum of the 'price' column as EUR after dividing by 100.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Sum;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('price')\n    ->summarize(Sum::make()->money('EUR', divideBy: 100))\n```\n\n----------------------------------------\n\nTITLE: Date formatting in Filament Infolists (PHP)\nDESCRIPTION: This snippet demonstrates the date, datetime, and time formatting options using `date()`, `dateTime()`, and `time()` methods on a TextEntry component. These methods are used to format the 'created_at' field using PHP date formatting tokens.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('created_at')\n    ->date()\n\nTextEntry::make('created_at')\n    ->dateTime()\n\nTextEntry::make('created_at')\n    ->time()\n```\n\n----------------------------------------\n\nTITLE: Initializing a Toggle Component in Filament - PHP\nDESCRIPTION: This snippet initializes a basic Toggle component named 'is_admin' using the Filament Forms library. It demonstrates the minimal code required to create a functional toggle input within a Filament form.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/05-toggle.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('is_admin')\n```\n\n----------------------------------------\n\nTITLE: Controlling the maximum height of a dropdown in Blade\nDESCRIPTION: This snippet demonstrates how to control the maximum height of a dropdown content, using the `max-height` attribute and specifying a CSS length value. This will allow the content within the dropdown to scroll if it exceeds the set `max-height`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-dropdown.md#_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::dropdown max-height=\"400px\">\n    {{-- Dropdown items --}}\n</x-filament::dropdown>\n```\n\n----------------------------------------\n\nTITLE: Accessing Field Instance in Blade\nDESCRIPTION: Shows how to access the current field instance using `$field` in a Blade view. This allows you to call public methods on the field object to access information not directly available as variables.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/20-custom-fields.md#_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n<x-dynamic-component\n    :component=\"$getFieldWrapperView()\"\n    :field=\"$field\"\n>\n    @if ($field->getState())\n        This is a new conference.\n    @endif\n</x-dynamic-component>\n```\n\n----------------------------------------\n\nTITLE: Customizing the Color of a Filament Modal Icon\nDESCRIPTION: This code shows how to customize the color of an icon inside a Filament modal using the `modalIconColor()` method. This allows you to change the icon color independently of the action button's color. The example sets the icon color to 'warning'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Actions\\Action;\n\nAction::make('delete')\n    ->action(fn (Post $record) => $record->delete())\n    ->requiresConfirmation()\n    ->color('danger')\n    ->modalIcon('heroicon-o-trash')\n    ->modalIconColor('warning')\n```\n\n----------------------------------------\n\nTITLE: Persisting Tab in Session - PHP\nDESCRIPTION: Demonstrates how to persist the current tab in the user's session using the `persistTab()` method, along with a unique `id()` for identification.  Optionally accepts a boolean value to control persistence.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/04-tabs.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Tabs;\n\nTabs::make('Tabs')\n    ->tabs([\n        // ...\n    ])\n    ->persistTab()\n    ->id('order-tabs')\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Tabs;\n\nTabs::make('Tabs')\n    ->tabs([\n        // ...\n    ])\n    ->persistTab(FeatureFlag::active())\n    ->id('order-tabs')\n```\n\n----------------------------------------\n\nTITLE: Customizing Value Label - PHP\nDESCRIPTION: This code demonstrates how to customize the value column's label in the KeyValueEntry component using the `valueLabel()` method.  It sets the label to 'Property value'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/06-key-value-entry.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\KeyValueEntry;\n\nKeyValueEntry::make('meta')\n    ->valueLabel('Property value')\n```\n\n----------------------------------------\n\nTITLE: Sending Database Notification - Notify Method - Filament\nDESCRIPTION: This code snippet demonstrates how to send a database notification using the `notify()` method. It creates a notification instance, sets the title, converts it to a database notification, and then sends it to the specified recipient using the `notify()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/02-database-notifications.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\n$recipient = auth()->user();\n\n$recipient->notify(\n    Notification::make()\n        ->title('Saved successfully')\n        ->toDatabase(),\n);\n```\n\n----------------------------------------\n\nTITLE: Publishing Filament Configuration (Bash)\nDESCRIPTION: This command publishes the Filament package's configuration file to `config/filament.php`. This allows you to customize various aspects of Filament, including the broadcasting settings. It's a necessary step for setting up websockets within a Filament panel.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/03-broadcast-notifications.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan vendor:publish --tag=filament-config\n```\n\n----------------------------------------\n\nTITLE: Defining and Modifying Filament Schema (PHP)\nDESCRIPTION: This PHP code defines a method called `productSchema` which accepts a `Schema` object and modifies it by adding components.  It uses the Filament\\Schemas\\Schema class to build the schema.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-schema.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Schema;\n\npublic function productSchema(Schema $schema): Schema\n{\n    return $schema\n        ->components([\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Repeater Actions in Filament Forms (PHP)\nDESCRIPTION: Demonstrates how to test repeater actions using `callFormComponentAction()` in Filament.  It shows how to pass the correct `item` argument, especially when the repeater is reading from a relationship. Requires the `Quote` model, `EditPost` Livewire component, and `TestAction` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Quote;\nuse Filament\\Forms\\Components\\Repeater;\nuse function Pest\\Livewire\\livewire;\n\n$quote = Quote::first();\n\nlivewire(EditPost::class, ['record' => $post])\n    ->callAction(TestAction::make('sendQuote')->schemaComponent('quotes')->arguments([\n        'item' => \"record-{$quote->getKey()}\",\n    ]))\n    ->assertNotified('Quote sent!');\n```\n\n----------------------------------------\n\nTITLE: Setting Sub-Navigation Position in a Filament Cluster (PHP)\nDESCRIPTION: This code shows how to set the position of the sub-navigation for all pages within a cluster using the `$subNavigationPosition` property. The value is an enum, it can be set to `SubNavigationPosition::Start`, `SubNavigationPosition::End`, or `SubNavigationPosition::Top` to render the sub-navigation as tabs. This allows for consistent sub-navigation placement across the entire cluster.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/04-clusters.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Pages\\Enums\\SubNavigationPosition;\n\nprotected static ?SubNavigationPosition $subNavigationPosition = SubNavigationPosition::End;\n```\n\n----------------------------------------\n\nTITLE: Disabling Navigation (Advanced) - PHP\nDESCRIPTION: This code snippet shows how to disable navigation entirely by passing `false` to the `navigation()` method in the panel configuration.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->navigation(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Submit Button using Filament Blade Component (PHP)\nDESCRIPTION: This example demonstrates rendering a submit button using a Filament Blade component within the Wizard. It utilizes `Illuminate\\Support\\Facades\\Blade` to render the Blade template as an HtmlString. This ensures consistency with Filament's styling.  Requires Filament, Illuminate\\Support\\Facades\\Blade, and Illuminate\\Support\\HtmlString.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/05-wizards.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Wizard;\nuse Illuminate\\Support\\Facades\\Blade;\nuse Illuminate\\Support\\HtmlString;\n\nWizard::make([\n    // ...\n])->submitAction(new HtmlString(Blade::render(<<<BLADE\n    <x-filament::button\n        type=\"submit\"\n        size=\"sm\"\n    >\n        Submit\n    </x-filament::button>\nBLADE)))\n```\n\n----------------------------------------\n\nTITLE: Customizing Max Content Width in Filament (PHP)\nDESCRIPTION: This code snippet demonstrates how to customize the maximum content width of a Filament panel using the `maxContentWidth()` method. The options correspond to Tailwind's max-width scale.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/05-panel-configuration.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\nuse Filament\\Support\\Enums\\Width;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->maxContentWidth(Width::Full);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\nuse Filament\\Support\\Enums\\Width;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->simplePageMaxContentWidth(Width::Small);\n}\n```\n\n----------------------------------------\n\nTITLE: Labeling Custom Constraint in Filament\nDESCRIPTION: This code snippet demonstrates how to customize the label for a custom constraint in Filament using the `label()` method. It also sets an icon to the new constraint using the `icon()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\Constraint;\n\nConstraint::make('subscribed')\n    ->label('Subscribed to updates')\n    ->icon('heroicon-m-bell')\n    ->operators([\n        // ...\n    ]),\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to ToggleButtons Options (PHP)\nDESCRIPTION: This snippet demonstrates adding icons to ToggleButtons using the `icons()` method.  It associates specific icons with each option value. The icons are sourced from Filament's Heroicon library.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/18-toggle-buttons.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\nuse Filament\\Support\\Icons\\Heroicon;\n\nToggleButtons::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'scheduled' => 'Scheduled',\n        'published' => 'Published'\n    ])\n    ->icons([\n        'draft' => Heroicon::OutlinedPencil,\n        'scheduled' => Heroicon::OutlinedClock,\n        'published' => Heroicon::OutlinedCheckCircle,\n    ])\n```\n\n----------------------------------------\n\nTITLE: Content Before Header - Blade\nDESCRIPTION: Shows how to position the content before the header when the `aside` attribute is used, by adding the `content-before` attribute.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-section.md#_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::section\n    aside\n    content-before\n>\n    <x-slot name=\"heading\">\n        User details\n    </x-slot>\n\n    {{-- Content --}}\n</x-filament::section>\n```\n\n----------------------------------------\n\nTITLE: Define Custom Column Class\nDESCRIPTION: This snippet defines a custom Filament table column class named `AudioPlayerColumn`, extending the base `Column` class. It sets the `$view` property to specify the Blade view file for rendering the column.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/10-custom-columns.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Column;\n\nclass AudioPlayerColumn extends Column\n{\n    protected string $view = 'filament.tables.columns.audio-player-column';\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Static Options for Filament Export Action\nDESCRIPTION: This code snippet demonstrates how to pass a set of static options to the exporter through the `options()` method on the Filament `ExportAction`. These options can be accessed within the exporter class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_35\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Exports\\ProductExporter;\nuse Filament\\Actions\\ExportAction;\n\nExportAction::make()\n    ->exporter(ProductExporter::class)\n    ->options([\n        'descriptionLimit' => 250,\n    ])\n```\n\n----------------------------------------\n\nTITLE: Moving to Previous Wizard Step (PHP)\nDESCRIPTION: Shows how to navigate to the previous step in a Filament wizard using `goToPreviousWizardStep()` and assert for form errors. It requires the `CreatePost` Livewire component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('moves to next wizard step', function () {\n    livewire(CreatePost::class)\n        ->goToPreviousWizardStep()\n        ->assertHasFormErrors(['title']);\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying section ID for persistent collapse\nDESCRIPTION: This example shows how to manually specify the `id()` of a section to prevent ID conflicts when using `persistCollapsed()`, particularly when multiple sections have the same heading or no heading. This ensures that the collapse state is stored and retrieved correctly.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/03-sections.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Section;\n\nSection::make('Cart')\n    ->description('The items you have selected for purchase')\n    ->schema([\n        // ...\n    ])\n    ->collapsible()\n    ->persistCollapsed()\n    ->id('order-cart')\n```\n\n----------------------------------------\n\nTITLE: Displaying circular images with ImageColumn in Filament\nDESCRIPTION: This snippet demonstrates how to make the image fully rounded for displaying avatars. The `circular()` method is used to achieve this.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/04-image.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\ImageColumn;\n\nImageColumn::make('avatar')\n    ->imageHeight(40)\n    ->circular()\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Options in CheckboxList - PHP\nDESCRIPTION: This snippet illustrates how to disable specific options in the `CheckboxList` component using the `disableOptionWhen()` method. This method accepts a closure that determines whether an option should be disabled based on its value. It requires the `Filament\\Forms\\Components\\CheckboxList` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/06-checkbox-list.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technologies')\n    ->options([\n        'tailwind' => 'Tailwind CSS',\n        'alpine' => 'Alpine.js',\n        'laravel' => 'Laravel',\n        'livewire' => 'Laravel Livewire',\n    ])\n    ->disableOptionWhen(fn (string $value): bool => $value === 'livewire')\n```\n\n----------------------------------------\n\nTITLE: Accessing the state of an entry in Blade view\nDESCRIPTION: This code snippet demonstrates how to access the state (value) of an infolist entry within a Blade view using the `$getState()` helper function. The value is rendered within the dynamic component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/08-custom-entries.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-dynamic-component\n    :component=\"$getEntryWrapperView()\"\n    :entry=\"$entry\"\n>\n    {{ $getState() }}\n</x-dynamic-component>\n```\n\n----------------------------------------\n\nTITLE: Access Configuration in Blade\nDESCRIPTION: This Blade snippet shows how to access the configuration set by the `speed()` method in the view by calling `$getSpeed()`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/10-custom-columns.md#_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    {{ $getSpeed() }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Hiding the modal close button - Filament\nDESCRIPTION: This code snippet shows how to hide the close button on a modal using the `modalCloseButton(false)` method. This removes the default close button from the modal's interface.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('updateAuthor')\n    ->schema([\n        // ...\n    ])\n    ->action(function (array $data): void {\n        // ...\n    })\n    ->modalCloseButton(false)\n```\n\n----------------------------------------\n\nTITLE: Setting ToggleButtons Grid Direction (PHP)\nDESCRIPTION: This snippet shows how to set the grid direction for ToggleButtons when using columns, allowing options to be listed horizontally (in rows) instead of vertically using `gridDirection(GridDirection::Row)`. \nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/18-toggle-buttons.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\nuse Filament\\Support\\Enums\\GridDirection;\n\nToggleButtons::make('technologies')\n    ->options([\n        // ...\n    ])\n    ->columns(2)\n    ->gridDirection(GridDirection::Row)\n```\n\n----------------------------------------\n\nTITLE: Rendering Livewire Component in Blade\nDESCRIPTION: This Blade directive renders the `ViewProduct` Livewire component within a Blade view. This is a straightforward way to embed the component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-infolist.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n@livewire('view-product')\n```\n\n----------------------------------------\n\nTITLE: Custom Active Indicator with Date Formatting - Filament PHP\nDESCRIPTION: This code shows how to create a custom active indicator for a Filament filter with date formatting.  The `indicateUsing()` method is used to customize the indicator that is displayed when the filter is active. This example formats the selected date using Carbon.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/05-custom.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Carbon\\Carbon;\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Tables\\Filters\\Filter;\n\nFilter::make('created_at')\n    ->schema([DatePicker::make('date')])\n    // ...\n    ->indicateUsing(function (array $data): ?string {\n        if (! $data['date']) {\n            return null;\n        }\n\n        return 'Created at ' . Carbon::parse($data['date'])->toFormattedDateString();\n    })\n```\n\n----------------------------------------\n\nTITLE: Setting Default Theme Mode in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to set the default theme mode for a Filament panel using the `defaultThemeMode()` method. It allows forcing light or dark mode by passing `ThemeMode::Light` or `ThemeMode::Dark`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/01-overview.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Enums\\ThemeMode;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->defaultThemeMode(ThemeMode::Light);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Locale for Money Formatting\nDESCRIPTION: Customizes the locale used when formatting money with the `money()` method in Filament Infolists. The `locale` argument specifies the locale to use. Accepts both static values and functions for dynamic calculation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('price')\n    ->money('EUR', locale: 'nl')\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Body Attributes via Method - PHP\nDESCRIPTION: This snippet shows how to add extra attributes to the `<body>` tag of a Filament page by defining a `getExtraBodyAttributes()` method that returns an array of attributes and their values. This allows for dynamic attribute assignment based on page logic. This example sets the 'class' attribute to 'settings-page'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\npublic function getExtraBodyAttributes(): array\n{\n    return [\n        'class' => 'settings-page',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Blade Template for Page Content\nDESCRIPTION: This snippet provides an example of a Blade template used to customize the FilamentPHP List page.  It uses the filament-panels::page component and includes the original content defined in the `content()` method, which can be removed or modified as needed. This template corresponds to the path defined in the `view` property of the Filament PHP class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/02-listing-records.md#_snippet_9\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament-panels::page>\n    {{ $this->content }} {{-- This will render the content of the page defined in the `content()` method, which can be removed if you want to start from scratch --}}\n</x-filament-panels::page>\n```\n\n----------------------------------------\n\nTITLE: Grouping Navigation Items Dynamically - PHP\nDESCRIPTION: This code snippet showcases how to dynamically assign a navigation group using the `getNavigationGroup()` method.  This allows the group to be dynamically generated, like via translations.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\npublic static function getNavigationGroup(): ?string\n{\n    return __('filament/navigation.groups.shop');\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing another component's state in Blade view\nDESCRIPTION: This code shows how to access the state of another component within the same schema using the `$get()` function.  The example retrieves the value of the 'email' field.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/08-custom-entries.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<x-dynamic-component\n    :component=\"$getEntryWrapperView()\"\n    :entry=\"$entry\"\n>\n    {{ $get('email') }}\n</x-dynamic-component>\n```\n\n----------------------------------------\n\nTITLE: Register Script Data in PHP\nDESCRIPTION: This PHP code snippet registers script data using `FilamentAsset::registerScriptData()`. This data will be accessible in JavaScript files via the `window.filamentData` object. It should be called in the `boot()` method of a service provider.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Facades\\FilamentAsset;\n\nFilamentAsset::registerScriptData([\n    'user' => [\n        'name' => auth()->user()?->name,\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Customizing ImageColumn size in Filament\nDESCRIPTION: This snippet shows how to customize the image size using `imageWidth()`, `imageHeight()`, or `imageSize()`.  `imageWidth()` and `imageHeight()` set the width and height respectively, while `imageSize()` sets both to the same value.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/04-image.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\ImageColumn;\n\nImageColumn::make('header_image')\n    ->imageWidth(200)\n\nImageColumn::make('header_image')\n    ->imageHeight(50)\n\nImageColumn::make('avatar')\n    ->imageSize(40)\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Disk - Filament PHP\nDESCRIPTION: This snippet shows how to specify a custom storage disk for the ImageEntry component using the `disk()` method.  This allows you to retrieve images from a disk other than the default `public` disk.  You must have the `s3` disk configured in your `config/filesystems.php` file. The `disk()` method can also accept a function to dynamically determine the disk name, injecting utilities as parameters.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/04-image-entry.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('header_image')\n    ->disk('s3')\n```\n\n----------------------------------------\n\nTITLE: Filtering Media in Table Image Column\nDESCRIPTION: This code demonstrates filtering media in a table image column using the `filterMediaUsing` method. It displays only media with a specific `gallery_id` custom property.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\SpatieMediaLibraryImageColumn;\nuse Illuminate\\Support\\Collection;\n\nSpatieMediaLibraryImageColumn::make('images')\n    ->filterMediaUsing(\n        fn (Collection $media): Collection => $media->where(\n            'custom_properties.gallery_id',\n            12345,\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: Disable Delete Notification (PHP)\nDESCRIPTION: This code snippet shows how to disable the success notification altogether. It uses the `successNotification(null)` method to prevent any notification from being displayed after a record is deleted.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/07-delete.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\DeleteAction;\n\nDeleteAction::make()\n    ->successNotification(null)\n```\n\n----------------------------------------\n\nTITLE: Initializing Icon Button with Click Action - Blade\nDESCRIPTION: This code snippet demonstrates how to create a Filament icon button that triggers a Livewire action when clicked.  It utilizes the `wire:click` directive to call the `openNewUserModal` method. The `icon` and `label` attributes customize the button's appearance. Requires Filament and Livewire.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-icon-button.md#_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-plus\"\n    wire:click=\"openNewUserModal\"\n    label=\"New label\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Job Batch Name - Filament Import (PHP)\nDESCRIPTION: This code snippet demonstrates customizing the job batch name for import jobs by overriding the `getJobBatchName()` method. It returns a string representing the batch name.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_58\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getJobBatchName(): ?string\n{\n    return 'product-import';\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Filament Table Builder\nDESCRIPTION: This command installs the Filament Table Builder package using Composer. The Table Builder is used for crafting interactive datatables for Livewire components. It requires Composer to be installed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require filament/tables\n```\n\n----------------------------------------\n\nTITLE: Creating a Chart Widget - Artisan Command - Bash\nDESCRIPTION: This command generates a new Filament widget with chart support, providing a basic class structure for chart implementation. It leverages the `make:filament-widget` Artisan command with the `--chart` option to scaffold the necessary files and setup.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/03-charts.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-widget BlogPostsChart --chart\n```\n\n----------------------------------------\n\nTITLE: Importing JavaScript Notification Objects\nDESCRIPTION: This code snippet shows how to import `Notification` and `NotificationAction` JavaScript objects in a bundled JavaScript file. It imports them from the Filament notifications distribution folder.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/01-overview.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Notification, NotificationAction } from '../../vendor/filament/notifications/dist/index.js'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Eloquent Array Casting - PHP\nDESCRIPTION: This code shows how to define an array cast for a model property in Eloquent, which is necessary when saving array data to the database to ensure it's properly serialized and deserialized. It casts the 'meta' property to an array.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/06-key-value-entry.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Post extends Model\n{\n    protected $casts = [\n        'meta' => 'array',\n    ];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Modal Icon - Blade\nDESCRIPTION: This code snippet demonstrates how to add an icon to a Filament modal using the `icon` attribute.  The `icon` attribute is set to 'heroicon-o-information-circle', specifying the icon to display.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-modal.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal icon=\"heroicon-o-information-circle\">\n    <x-slot name=\"heading\">\n        Modal heading\n    </x-slot>\n\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Customizing the Import Job - PHP\nDESCRIPTION: This snippet shows how to customize the import job by binding a new class in the `register()` method of a service provider to override the default `Filament\\Actions\\Imports\\Jobs\\ImportCsv`. Dependencies: App\\Jobs\\ImportCsv, Filament\\Actions\\Imports\\Jobs\\ImportCsv as BaseImportCsv.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Jobs\\ImportCsv;\nuse Filament\\Actions\\Imports\\Jobs\\ImportCsv as BaseImportCsv;\n\n$this->app->bind(BaseImportCsv::class, ImportCsv::class);\n```\n\n----------------------------------------\n\nTITLE: Skipping Rendering After State Update\nDESCRIPTION: This snippet uses `skipRenderAfterStateUpdated()` to prevent the Livewire component from re-rendering after a field's state is updated. This can be useful for performing actions without triggering a UI update.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_76\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->live()\n    ->skipRenderAfterStateUpdated()\n    ->afterStateUpdated(function (string $state) {\n        // Do something with the state, but don't re-render the Livewire component.\n    })\n```\n\n----------------------------------------\n\nTITLE: Accessing Component Instance in Blade View (Blade)\nDESCRIPTION: This snippet demonstrates accessing the current schema component instance in the Blade view, utilizing `$schemaComponent` to call public methods and access information not directly available in variables. Allows access to component functionalities.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/07-custom-components.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<p>\n    @if ($schemaComponent->getState())\n        This is a new post.\n    @endif\n</p>\n```\n\n----------------------------------------\n\nTITLE: Asserting Form Field Visibility - PHP\nDESCRIPTION: This snippet demonstrates how to assert that a Filament form field is visible using `assertFormFieldVisible()`. It requires the `Pest\\Livewire\\livewire` function. The example checks the visibility of the 'title' field. You can specify the form name as the second argument to `assertFormFieldVisible` when there are multiple schemas.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\ntest('title is visible', function () {\n    livewire(CreatePost::class)\n        ->assertFormFieldVisible('title');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Icon Position - PHP\nDESCRIPTION: This snippet demonstrates how to set the position of an icon in a TextColumn. The `iconPosition()` method accepts `IconPosition::Before` or `IconPosition::After` to control the placement of the icon relative to the text.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Support\\Enums\\IconPosition;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTextColumn::make('email')\n    ->icon(Heroicon::Envelope)\n    ->iconPosition(IconPosition::After) // `IconPosition::Before` or `IconPosition::After`\n```\n\n----------------------------------------\n\nTITLE: Rendering a basic Filament Badge\nDESCRIPTION: This snippet demonstrates how to render a basic Filament badge using the `<x-filament::badge>` Blade component. It displays the text 'New' inside the badge with default styling.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-badge.md#_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::badge>\n    New\n</x-filament::badge>\n```\n\n----------------------------------------\n\nTITLE: Conditionally displaying circular images with ImageColumn in Filament\nDESCRIPTION: This snippet shows how to conditionally display a circular image based on a boolean value (e.g., a feature flag).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/04-image.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\ImageColumn;\n\nImageColumn::make('avatar')\n    ->imageHeight(40)\n    ->circular(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Allowing HTML with Feature Flag - PHP\nDESCRIPTION: This code shows how to conditionally allow HTML rendering based on a feature flag.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/06-checkbox-list.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technology')\n    ->options([\n        'tailwind' => '<span class=\"text-blue-500\">Tailwind</span>',\n        'alpine' => '<span class=\"text-green-500\">Alpine</span>',\n        'laravel' => '<span class=\"text-red-500\">Laravel</span>',\n        'livewire' => '<span class=\"text-pink-500\">Livewire</span>',\n    ])\n    ->searchable()\n    ->allowHtml(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Customizing Ternary Filter Labels in Filament, PHP\nDESCRIPTION: Shows how to customize the labels for each state of the ternary filter using `placeholder()`, `trueLabel()`, and `falseLabel()` methods.  This provides a more user-friendly experience by replacing the default labels with more descriptive terms.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/03-ternary.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Tables\\Filters\\TernaryFilter;\n\nTernaryFilter::make('email_verified_at')\n    ->label('Email verification')\n    ->nullable()\n    ->placeholder('All users')\n    ->trueLabel('Verified users')\n    ->falseLabel('Not verified users')\n```\n\n----------------------------------------\n\nTITLE: Install Filament Frontend Assets (Bash - Existing Project)\nDESCRIPTION: This command installs the Filament frontend assets in an existing Laravel project.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/01-introduction/02-installation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan filament:install\n```\n\n----------------------------------------\n\nTITLE: Initializing a basic ImageColumn in Filament\nDESCRIPTION: This snippet demonstrates how to create a basic ImageColumn in a Filament table. It takes the 'avatar' field from the model and renders it as an image.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/04-image.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\ImageColumn;\n\nImageColumn::make('avatar')\n```\n\n----------------------------------------\n\nTITLE: Overwriting Global Configuration on Individual Component - PHP\nDESCRIPTION: This code snippet demonstrates how to overwrite the global configuration of a Filament Section component on an individual basis. Even though the global configuration sets the default number of columns to 2, this snippet explicitly sets the number of columns to 1 for a specific Section component instance. It depends on `Filament\\Schemas\\Components\\Section`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/01-overview.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Section;\n\nSection::make()\n    ->columns(1)\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations\nDESCRIPTION: This command executes the database migrations, creating the necessary tables for the Spatie Media Library. It requires a properly configured database connection in your Laravel application.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Installing Filament Actions\nDESCRIPTION: This command installs the Filament Actions package using Composer. The Actions package provides buttons that can open modals for various tasks such as confirmations, record editing, and data importing. It requires Composer to be installed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require filament/actions\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Field Class in PHP\nDESCRIPTION: Illustrates the structure of a custom Filament form field class, extending the `Field` class and defining the view.  The `$view` property specifies the Blade view file to be used. Requires Filament.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/20-custom-fields.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Field;\n\nclass LocationPicker extends Field\n{\n    protected string $view = 'filament.forms.components.location-picker';\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Raw HTML (Unsanitized)\nDESCRIPTION: Renders raw HTML without sanitization by wrapping the column's state in an `HtmlString` object within the `formatStateUsing()` method. Requires `Illuminate\\Support\\HtmlString`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Illuminate\\Support\\HtmlString;\n\nTextColumn::make('description')\n    ->formatStateUsing(fn (string $state): HtmlString => new HtmlString($state))\n```\n\n----------------------------------------\n\nTITLE: Closing Notifications from Actions - JavaScript\nDESCRIPTION: This code snippet demonstrates how to close a Filament notification after an action using JavaScript.  It uses `FilamentNotificationAction.close()` to close the notification after dispatching the 'undoEditingPost' event. The notification includes actions to view a URL and undo editing.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/01-overview.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew FilamentNotification()\n    .title('Saved successfully')\n    .success()\n    .body('Changes to the post have been saved.')\n    .actions([\n        new FilamentNotificationAction('view')\n            .button()\n            .url('/view')\n            .openUrlInNewTab(),\n        new FilamentNotificationAction('undo')\n            .color('gray')\n            .dispatch('undoEditingPost')\n            .close(),\n    ])\n    .send()\n```\n\n----------------------------------------\n\nTITLE: Customizing Truncation End String (PHP)\nDESCRIPTION: This snippet demonstrates how to customize the string appended to the end of truncated text using the `end` argument of the `limit()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('description')\n    ->limit(50, end: ' (more)')\n```\n\n----------------------------------------\n\nTITLE: Displaying Extreme Pagination Links in Filament\nDESCRIPTION: This snippet demonstrates how to add links to the first and last pagination pages in a Filament table using the `extremePaginationLinks()` method. These links allow users to quickly navigate to the beginning or end of the table's data.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->extremePaginationLinks();\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the Maximum Content Width in PHP\nDESCRIPTION: This code demonstrates how to customize the maximum content width of a Filament page by overriding the `getMaxContentWidth()` method. It allows you to specify a width from Tailwind's max-width scale.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\Width;\n\npublic function getMaxContentWidth(): Width\n{\n    return Width::Full;\n}\n```\n\n----------------------------------------\n\nTITLE: Changing the color of a dropdown item's badge in Blade\nDESCRIPTION: This snippet demonstrates how to change the color of a badge on a dropdown item using the `badge-color` attribute. Common color options include `danger`, `info`, `primary`, `success`, and `warning`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-dropdown.md#_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::dropdown.list.item badge-color=\"danger\">\n    Mark notifications as read\n    \n    <x-slot name=\"badge\">\n        3\n    </x-slot>\n</x-filament::dropdown.list.item>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Filament Plugin using Bash\nDESCRIPTION: This bash command executes the `configure.php` script to configure the plugin, prompting for user input and generating the necessary files based on the responses. It's the first step to building your custom filament plugin from the skeleton.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/11-plugins/01-getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp ./configure.php\n```\n\n----------------------------------------\n\nTITLE: Expanding Panel by Default - PHP\nDESCRIPTION: This code demonstrates how to expand a `Panel` by default using the `collapsed(false)` method. It wraps a `Split` component containing two `TextColumn` components within a `Panel` and sets the `collapsed` state to `false`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/05-layout.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Layout\\Panel;\nuse Filament\\Tables\\Columns\\Layout\\Split;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nPanel::make([\n    Split::make([\n        TextColumn::make('phone')\n            ->icon('heroicon-m-phone'),\n        TextColumn::make('email')\n            ->icon('heroicon-m-envelope'),\n    ])->from('md'),\n])->collapsed(false)\n```\n\n----------------------------------------\n\nTITLE: Icon Button as Anchor Link - Blade\nDESCRIPTION: This example shows how to use the Filament icon button as an anchor link (`<a>` tag) instead of a standard button. The `tag` attribute is set to \"a\", and the `href` attribute specifies the URL. The `icon` and `label` attributes are also utilized for visual customization. Requires Filament.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-icon-button.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-arrow-top-right-on-square\"\n    href=\"https://filamentphp.com\"\n    tag=\"a\"\n    label=\"Filament\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding a badge to a dropdown item in Blade\nDESCRIPTION: This snippet shows how to add a badge to a dropdown item using the `badge` slot. The content within the `<x-slot name=\"badge\">` tags will be displayed as a badge on top of the dropdown item.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-dropdown.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::dropdown.list.item>\n    Mark notifications as read\n    \n    <x-slot name=\"badge\">\n        3\n    </x-slot>\n</x-filament::dropdown.list.item>\n```\n\n----------------------------------------\n\nTITLE: Stacked Checkbox Label - Filament PHP\nDESCRIPTION: This snippet shows how to position the checkbox label above the checkbox itself by setting the `inline()` method to `false`. This provides a stacked layout for the checkbox and its label, which can be useful for improving readability in some forms.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/04-checkbox.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Checkbox;\n\nCheckbox::make('is_admin')\n    ->inline(false)\n```\n\n----------------------------------------\n\nTITLE: Authorization Notification - PHP\nDESCRIPTION: This snippet shows how to send a notification to the user containing the response message from the policy method, even if the user is not authorized to perform the action. The `authorizationNotification()` method is used to enable the notification, which will display the message. This allows users to click the action even if not authorized, then receive the notification\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('edit')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n    ->authorize('update')\n    ->authorizationNotification()\n```\n\n----------------------------------------\n\nTITLE: Changing Filament Link Color - Blade\nDESCRIPTION: This snippet shows how to change the color of the Filament Link Blade component using the `color` attribute.  Available color options include 'danger', 'gray', 'info', 'success', and 'warning', allowing for contextual styling of the link based on its purpose.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-link.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link color=\"danger\">\n    New user\n</x-filament::link>\n\n<x-filament::link color=\"gray\">\n    New user\n</x-filament::link>\n\n<x-filament::link color=\"info\">\n    New user\n</x-filament::link>\n\n<x-filament::link color=\"success\">\n    New user\n</x-filament::link>\n\n<x-filament::link color=\"warning\">\n    New user\n</x-filament::link>\n```\n\n----------------------------------------\n\nTITLE: Using Custom SVGs as Icons (PHP)\nDESCRIPTION: Illustrates how to use custom SVG files as icons within Filament. This snippet shows how to reference a custom SVG file placed in the `resources/svg` directory within a Filament Action.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/04-icons.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('star')\n    ->icon('icon-star')\n```\n\n----------------------------------------\n\nTITLE: Disabling All Form Fields in a Filament Modal\nDESCRIPTION: This snippet demonstrates how to disable all form fields in a Filament modal using the `disabledForm()` method.  This is useful when you want to display data without allowing the user to edit it.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Actions\\Action;\nuse Filament\\Forms\\Components\\Textarea;\nuse Filament\\Forms\\Components\\TextInput;\n\nAction::make('approvePost')\n    ->schema([\n        TextInput::make('title'),\n        Textarea::make('content'),\n    ])\n    ->disabledForm()\n    ->action(function (Post $record): void {\n        $record->approve();\n    })\n```\n\n----------------------------------------\n\nTITLE: Applying compact section styling\nDESCRIPTION: This code demonstrates how to apply a more compact styling to a section using the `compact()` method, useful when nesting sections to reduce visual spacing.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/03-sections.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Section;\n\nSection::make('Rate limiting')\n    ->description('Prevent abuse by limiting the number of requests per period')\n    ->schema([\n        // ...\n    ])\n    ->compact()\n```\n\n----------------------------------------\n\nTITLE: Accessing Operation in Blade View (Blade)\nDESCRIPTION: This snippet shows how to access the current operation (create, edit, view) in a Blade view using the `$operation` variable.  This allows rendering different content or applying different logic based on whether the user is creating, editing, or viewing a record.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/07-custom-components.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<p>\n    @if ($operation === 'create')\n        This is a new post.\n    @else\n        This is an existing post.\n    @endif\n</p>\n```\n\n----------------------------------------\n\nTITLE: Preventing file existence checks in Filament\nDESCRIPTION: This snippet shows how to disable file existence checks using the `checkFileExistence(false)` method.  This can improve performance when using remote storage with many images by skipping the checks for missing files.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/04-image.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\ImageColumn;\n\nImageColumn::make('attachment')\n    ->checkFileExistence(false)\n```\n\n----------------------------------------\n\nTITLE: Disabling Database Transactions for a Filament Action (PHP)\nDESCRIPTION: This snippet shows how to disable database transactions for a specific Filament action using the `databaseTransaction(false)` method. This prevents the action from being wrapped in a transaction.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/05-panel-configuration.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nCreateAction::make()\n    ->databaseTransaction(false)\n```\n\n----------------------------------------\n\nTITLE: Initializing ImageEntry Component - Filament PHP\nDESCRIPTION: This code snippet demonstrates the basic initialization of an ImageEntry component in Filament Infolists, using the `header_image` field from the data model. It assumes that the `header_image` field contains either a relative path to an image on the storage disk (defined by the `FILESYSTEM_DISK` environment variable, defaulting to `public`) or an absolute URL to an image.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/04-image-entry.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('header_image')\n```\n\n----------------------------------------\n\nTITLE: Adding MFA Recovery Codes Column to Users Table (PHP)\nDESCRIPTION: This code adds a new column to the users table for storing Google two-factor authentication recovery codes. The column is defined as text and allows null values. These recovery codes are essential for users to regain access to their accounts if they lose access to their authentication app.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/02-multi-factor-authentication.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nSchema::table('users', function (Blueprint $table) {\n    $table->text('google_two_factor_authentication_recovery_codes')->nullable();\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Replicate Action (Filament, PHP)\nDESCRIPTION: This code snippet demonstrates how to initialize a basic ReplicateAction in Filament. It requires the `Filament\\Actions\\ReplicateAction` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/08-replicate.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\ReplicateAction;\n\nReplicateAction::make()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Setting Active State with Alpine.js\nDESCRIPTION: This snippet shows how to conditionally set a tab to appear active based on an Alpine.js data property.  The `alpine-active` attribute is bound to the `activeTab` Alpine.js property, and clicking the tab updates this property using `x-on:click`. Filament and Alpine.js are required dependencies. The `alpine-active` attribute is a boolean expression.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-tabs.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::tabs x-data=\"{ activeTab: 'tab1' }\">\n    <x-filament::tabs.item\n        alpine-active=\"activeTab === 'tab1'\"\n        x-on:click=\"activeTab = 'tab1'\"\n    >\n        Tab 1\n    </x-filament::tabs.item>\n\n    {{-- Other tabs --}}\n</x-filament::tabs>\n```\n\n----------------------------------------\n\nTITLE: Disabling Database Transactions for a Filament Page (PHP)\nDESCRIPTION: This snippet demonstrates how to disable database transactions for a Filament page by setting the `$hasDatabaseTransactions` property to `false` on the page class. This disables transactions for create and edit resource pages.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/05-panel-configuration.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Resources\\Pages\\CreateRecord;\n\nclass CreatePost extends CreateRecord\n{\n    protected ?bool $hasDatabaseTransactions = false;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Compile JavaScript with Node.js\nDESCRIPTION: This bash command executes the `build.js` script using Node.js, compiling the JavaScript and Alpine component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nnode bin/build.js\n```\n\n----------------------------------------\n\nTITLE: Marking Notification as Unread - Filament Action\nDESCRIPTION: This code snippet shows how to add an action to a notification that marks the notification as unread when clicked.  It uses the `markAsUnread()` method on the action instance.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/02-database-notifications.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Notifications\\Notification;\n\nNotification::make()\n    ->title('Saved successfully')\n    ->success()\n    ->body('Changes to the post have been saved.')\n    ->actions([\n        Action::make('markAsUnread')\n            ->button()\n            ->markAsUnread(),\n    ])\n    ->send();\n```\n\n----------------------------------------\n\nTITLE: Defining the Infolist Schema Method\nDESCRIPTION: This PHP code defines a method `productInfolist` that accepts a `$schema` object, modifies it, and returns it. This method is responsible for defining the infolist's structure and data mapping. The `Filament\\Schemas\\Schema` class is used.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-infolist.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Schema;\n\npublic function productInfolist(Schema $schema): Schema\n{\n    return $schema\n        ->record($this->product)\n        ->components([\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Filament Notifications\nDESCRIPTION: This command installs the Filament Notifications package using Composer. The Notifications package allows you to deliver flash notifications, fetch notifications from the database, and receive live notifications from a websockets server. It requires Composer to be installed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require filament/notifications\n```\n\n----------------------------------------\n\nTITLE: Passing Color to Blade Component\nDESCRIPTION: This snippet shows how to use a predefined color with a Filament Blade component. The color is passed as an attribute to the `<x-filament::badge>` component. This leverages Filament's built-in color management.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/03-colors.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::badge color=\"success\">\n    Active\n</x-filament::badge>\n```\n\n----------------------------------------\n\nTITLE: Publishing Blade Icons Configuration (Bash)\nDESCRIPTION: Shows the command to publish the Blade Icons configuration file, which is a prerequisite for using custom SVGs as icons in Filament.  This allows customization of the icon prefix and configuration of icon sets.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/04-icons.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=blade-icons\n```\n\n----------------------------------------\n\nTITLE: Registering CSS File with Filament Asset\nDESCRIPTION: This code demonstrates registering a CSS file using the `FilamentAsset` facade. A `Css` object is created with a unique ID and the path to the CSS file. The `__DIR__` magic constant provides a relative path.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Assets\\Css;\nuse Filament\\Support\\Facades\\FilamentAsset;\n\nFilamentAsset::register([\n    Css::make('custom-stylesheet', __DIR__ . '/../../resources/css/custom.css'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Customize Billing Route Slug\nDESCRIPTION: This code snippet demonstrates how to customize the URL slug for the billing route using the `tenantBillingRouteSlug()` method within the Filament panel configuration. It modifies the default billing route to 'billing'. Dependency: `Filament\\Panel`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantBillingRouteSlug('billing');\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Table Column Description with Pest\nDESCRIPTION: This code snippet demonstrates how to test a column's description above and below the column. It asserts the presence and absence of specific descriptions for the 'author' column using `assertTableColumnHasDescription()` and `assertTableColumnDoesNotHaveDescription()`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/03-testing-tables.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('has the correct descriptions above and below author', function () {\n    $post = Post::factory()->create();\n\n    livewire(PostsTable::class)\n        ->assertTableColumnHasDescription('author', 'Author! ↓↓↓', $post, 'above')\n        ->assertTableColumnHasDescription('author', 'Author! ↑↑↑', $post)\n        ->assertTableColumnDoesNotHaveDescription('author', 'Author! ↑↑↑', $post, 'above')\n        ->assertTableColumnDoesNotHaveDescription('author', 'Author! ↓↓↓', $post);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Filament Issue\nDESCRIPTION: This Artisan command generates a new issue on the Filament GitHub repository, pre-filled with version information from your application. This helps maintainers quickly understand your environment and reproduce the bug.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/01-introduction/05-contributing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-issue\n```\n\n----------------------------------------\n\nTITLE: Setting the placement of a dropdown in Blade\nDESCRIPTION: This snippet demonstrates how to set the placement of a dropdown relative to its trigger button using the `placement` attribute.  Valid values might include options like `top-start`, `bottom-end`, etc., depending on the underlying implementation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-dropdown.md#_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::dropdown placement=\"top-start\">\n    {{-- Dropdown items --}}\n</x-filament::dropdown>\n```\n\n----------------------------------------\n\nTITLE: Preventing Row Addition in Filament KeyValue\nDESCRIPTION: This snippet shows how to disable the ability to add new rows to the KeyValue field using the `addable(false)` method. This is useful when you want to restrict the number of key-value pairs a user can enter.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/16-key-value.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n    ->addable(false)\n```\n\n----------------------------------------\n\nTITLE: Changing Filament Button Color - Blade\nDESCRIPTION: These snippets show how to change the color of a Filament button using the `color` attribute.  Available colors are \"danger\", \"gray\", \"info\", \"success\", and \"warning\".\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-button.md#_snippet_3\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::button color=\"danger\">\n    New user\n</x-filament::button>\n```\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::button color=\"gray\">\n    New user\n</x-filament::button>\n```\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::button color=\"info\">\n    New user\n</x-filament::button>\n```\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::button color=\"success\">\n    New user\n</x-filament::button>\n```\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::button color=\"warning\">\n    New user\n</x-filament::button>\n```\n\n----------------------------------------\n\nTITLE: Creating a basic KeyValueEntry - PHP\nDESCRIPTION: This code demonstrates how to create a basic KeyValueEntry component in Filament Infolists, using the `make()` method to specify the data source ('meta').\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/06-key-value-entry.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\KeyValueEntry;\n\nKeyValueEntry::make('meta')\n```\n\n----------------------------------------\n\nTITLE: Setting Tab Badge Color - PHP\nDESCRIPTION: Demonstrates how to change the color of a Filament Tab's badge using the `badgeColor()` method. This allows customization of the badge's appearance.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/04-tabs.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Tabs;\nuse Filament\\Schemas\\Components\\Tabs\\Tab;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tab::make('Notifications')\n            ->badge(5)\n            ->badgeColor('info')\n            ->schema([\n                // ...\n            ]),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding View Page to Existing Resource - Bash\nDESCRIPTION: This command creates a new Filament page of the 'ViewRecord' type, associating it with an existing resource. This enables the addition of a view page to a resource that was initially created without one.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/05-viewing-records.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-page ViewUser --resource=UserResource --type=ViewRecord\n```\n\n----------------------------------------\n\nTITLE: Using Top Navigation - PHP\nDESCRIPTION: This snippet demonstrates how to switch from the default sidebar navigation to a top navigation in Filament. This is done by calling the `topNavigation()` method in the panel configuration.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->topNavigation();\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Schema Component with Truth Test - PHP\nDESCRIPTION: This snippet demonstrates how to assert that a schema component exists and passes a truth test using a function with `asserSchemaComponentExists()`. It requires `Pest\\Livewire\\livewire` and `Filament\\Forms\\Components\\Component`. The example checks if the 'comments-section' component has the heading 'Comments'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Component;\n\nuse function Pest\\Livewire\\livewire;\n\ntest('comments section has heading', function () {\n    livewire(EditPost::class)\n        ->asserSchemaComponentExists(\n            'comments-section',\n            function (Component $component): bool {\n                return $component->getHeading() === 'Comments';\n            },\n        );\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination in Livewire with Filament\nDESCRIPTION: This PHP snippet demonstrates how to use the Laravel pagination feature in a Livewire component to paginate a list of users. It retrieves users from the database using Eloquent and passes the paginated results to the Blade view. Dependencies: `App\\Models\\User`, `Illuminate\\Contracts\\View\\View`, `Livewire\\Component`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-pagination.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\User;\nuse Illuminate\\Contracts\\View\\View;\nuse Livewire\\Component;\n\nclass ListUsers extends Component\n{\n    // ...\n    \n    public function render(): View\n    {\n        return view('livewire.list-users', [\n            'users' => User::query()->paginate(10),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Sub-navigation Position in Filament (PHP)\nDESCRIPTION: This code demonstrates how to customize the default sub-navigation position for a Filament panel using the `subNavigationPosition()` method.  The position can be `Start`, `End`, or `Top`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/05-panel-configuration.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Pages\\Enums\\SubNavigationPosition;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->subNavigationPosition(SubNavigationPosition::End);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Value Field Placeholder in Filament KeyValue\nDESCRIPTION: This snippet shows how to add a placeholder to the value field using the `valuePlaceholder()` method, guiding the user on the expected input for the value.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/16-key-value.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n    ->valuePlaceholder('Property value')\n```\n\n----------------------------------------\n\nTITLE: Installing Chart.js Plugin - NPM - Bash\nDESCRIPTION: This command installs the `chartjs-plugin-datalabels` plugin using NPM.  Plugins extend the functionality of Chart.js by allowing the addition of data labels and other custom chart behaviors. This is the first step in utilizing a chart.js plugin.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/03-charts.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm install chartjs-plugin-datalabels --save-dev\n```\n\n----------------------------------------\n\nTITLE: Rendering the Heading Component View - Blade\nDESCRIPTION: Renders the view for the `Heading` component using Blade templating engine. It retrieves the heading level and color using the component's methods.  It uses `x-load-css` to asynchronously load the stylesheet using Filament's Asset Manager, ensuring that the styles are only loaded when the component is rendered.  It applies CSS classes and styles based on the color property.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/11-plugins/04-building-a-standalone-plugin.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n@php\n    $level = $getLevel();\n    $color = $getColor();\n@endphp\n\n<{{ $level }}\n    x-data\n    x-load-css=\"[@js(\\Filament\\Support\\Facades\\FilamentAsset::getStyleHref('headings', package: 'awcodes/headings'))]\"\n    {{\n        $attributes\n            ->class([\n                'headings-component',\n                match ($color) {\n                    'gray' => 'text-gray-600 dark:text-gray-400',\n                    default => 'text-custom-500',\n                },\n            ])\n            ->style([\n                \\Filament\\Support\\get_color_css_variables($color, [500]) => $color !== 'gray',\n            ])\n    }}\n>\n    {{ $getContent() }}\n</{{ $level }}>\n```\n\n----------------------------------------\n\nTITLE: Testing Resource List Page Load - PHP\nDESCRIPTION: This snippet tests if the resource list page loads successfully. It uses Livewire to interact with the `ListUsers` component, asserts that the HTTP response is OK (200), and checks if table records are displayed using `assertCanSeeTableRecords()`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/02-testing-resources.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Resources\\Users\\Pages\\ListUsers;\nuse App\\Models\\User;\n\nit('can load the page', function () {\n    $users = User::factory()->count(5)->create();\n\n    livewire(ListUsers::class)\n        ->assertOk()\n        ->assertCanSeeTableRecords($users);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Empty State Actions - Filament Table (PHP)\nDESCRIPTION: This code snippet demonstrates how to add actions to the empty state of a Filament table using the `emptyStateActions()` method.  It requires `Filament\\Tables\\Table` and `Filament\\Actions\\Action`. The method accepts an array of `Action` objects, allowing users to perform actions directly from the empty state.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/08-empty-state.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->emptyStateActions([\n            Action::make('create')\n                ->label('Create post')\n                ->url(route('posts.create'))\n                ->icon('heroicon-m-plus')\n                ->button(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Example Key-Value Data - PHP\nDESCRIPTION: This code shows an example of the expected data structure for the KeyValueEntry component.  It represents a one-dimensional PHP array or JSON object with key-value pairs.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/06-key-value-entry.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n[\n    'description' => 'Filament is a collection of Laravel packages',\n    'og:type' => 'website',\n    'og:site_name' => 'Filament',\n]\n```\n\n----------------------------------------\n\nTITLE: Disabling modal autofocus - Filament\nDESCRIPTION: This code snippet shows how to disable the autofocus on the first focusable element in a modal when it opens, using the `modalAutofocus(false)` method. This prevents the modal from automatically focusing on the first input field.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('updateAuthor')\n    ->schema([\n        // ...\n    ])\n    ->action(function (array $data): void {\n        // ...\n    })\n    ->modalAutofocus(false)\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Icon Property\nDESCRIPTION: This is a code snippet that shows how the navigation icon property is added to a resource class. It includes setting the default value, access modifiers, and type.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/04-file-generation.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse BackedEnum;\nuse Filament\\Support\\Icons\\Heroicon;\nuse Nette\\PhpGenerator\\ClassType;\nuse Nette\\PhpGenerator\\Literal;\n\nprotected function addNavigationIconPropertyToClass(ClassType $class): void\n{\n    $this->namespace->addUse(BackedEnum::class);\n    $this->namespace->addUse(Heroicon::class);\n\n    $property = $class->addProperty('navigationIcon', new Literal('Heroicon::OutlinedRectangleStack'))\n        ->setProtected()\n        ->setStatic()\n        ->setType('string|BackedEnum|null');\n    $this->configureNavigationIconProperty($property);\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Tag Reordering - PHP\nDESCRIPTION: Conditionally enables or disables tag reordering based on a feature flag. This demonstrates using a boolean value to control reordering.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/14-tags-input.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TagsInput;\n\nTagsInput::make('tags')\n    ->reorderable(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer for Local Filament Development\nDESCRIPTION: This `composer.json` configuration allows you to use a local copy of the Filament packages for development.  It specifies a path repository to load the Filament packages from the `filament/packages/*` directory within your Laravel application.  `minimum-stability` is set to `dev` to allow using development versions of packages.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/01-introduction/05-contributing.md#_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    // ...\n    \"require\": {\n        \"filament/filament\": \"*\",\n    },\n    \"minimum-stability\": \"dev\",\n    \"repositories\": [\n        {\n            \"type\": \"path\",\n            \"url\": \"filament/packages/*\"\n        }\n    ],\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Checkbox Label - Filament PHP\nDESCRIPTION: This snippet shows how to position the checkbox label inline with the checkbox itself using the `inline()` method. When set to `true` (or used without arguments), the label appears to the right of the checkbox. This is the default behavior.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/04-checkbox.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Checkbox;\n\nCheckbox::make('is_admin')\n    ->inline()\n```\n\n----------------------------------------\n\nTITLE: Responsive Widget Grid Configuration in PHP\nDESCRIPTION: This snippet demonstrates how to configure a responsive widget grid for a Filament page, adjusting the number of columns based on the browser's breakpoint. It overrides `getHeaderWidgetsColumns()` to return an array mapping breakpoints to column counts.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function getHeaderWidgetsColumns(): int | array\n{\n    return [\n        'md' => 4,\n        'xl' => 5,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a default image URL for ImageColumn in Filament\nDESCRIPTION: This snippet shows how to display a placeholder image when the actual image is missing using `defaultImageUrl()`. It takes a URL as a parameter.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/04-image.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\ImageColumn;\n\nImageColumn::make('header_image')\n    ->defaultImageUrl(url('storage/posts/header-images/default.jpg'))\n```\n\n----------------------------------------\n\nTITLE: Conditionally display Text Entry as badge (PHP)\nDESCRIPTION: This snippet shows how to conditionally display a TextEntry component as a badge based on a feature flag using the `badge()` method with a boolean value. The `badge()` method also accepts a function for dynamic badge enabling.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('status')\n    ->badge(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Setting Sub-Navigation Position - Filament PHP\nDESCRIPTION: This code snippet shows how to configure the position of the sub-navigation within a Filament resource. By setting the `$subNavigationPosition` property, you can specify whether the sub-navigation should be rendered at the start, end, or top (as tabs) of the page.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Pages\\Enums\\SubNavigationPosition;\n\nprotected static ?SubNavigationPosition $subNavigationPosition = SubNavigationPosition::End;\n```\n\n----------------------------------------\n\nTITLE: Adding Custom HTML with View - PHP\nDESCRIPTION: This code demonstrates how to add custom HTML to a Filament table using a `View` component. It renders a Blade view file (`users.table.collapsible-row-content`) and makes it collapsible. The code also uses `Split` component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/05-layout.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\FontWeight;\nuse Filament\\Tables\\Columns\\Layout\\Split;\nuse Filament\\Tables\\Columns\\Layout\\View;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Tables\\Columns\\TextColumn;\n\n[\n    Split::make([\n        ImageColumn::make('avatar')\n            ->circular(),\n        TextColumn::make('name')\n            ->weight(FontWeight::Bold)\n            ->searchable()\n            ->sortable(),\n    ]),\n    View::make('users.table.collapsible-row-content')\n        ->collapsible(),\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Repeatable Entry with Schema - PHP\nDESCRIPTION: This code snippet demonstrates how to implement a repeatable entry in Filament infolists using the `RepeatableEntry` component. It defines a schema that is repeated for each item in the 'comments' array, displaying the author's name, title, and content.  It sets the number of columns to 2.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/07-repeatable-entry.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\RepeatableEntry;\nuse Filament\\Infolists\\Components\\TextEntry;\n\nRepeatableEntry::make('comments')\n    ->schema([\n        TextEntry::make('author.name'),\n        TextEntry::make('title'),\n        TextEntry::make('content')\n            ->columnSpan(2),\n    ])\n    ->columns(2)\n```\n\n----------------------------------------\n\nTITLE: Enforcing Integer Values in Filament Number Constraint (PHP)\nDESCRIPTION: This demonstrates how to ensure that a NumberConstraint only accepts integer values by using the `integer()` method.  This prevents users from entering decimal values.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\NumberConstraint;\n\nNumberConstraint::make('stock')\n    ->integer()\n```\n\n----------------------------------------\n\nTITLE: Asserting Repeater Item Count with Function - PHP\nDESCRIPTION: This snippet shows how to assert the number of items in a repeater using a function with `assertSchemaStateSet()`. It utilizes `Filament\\Forms\\Components\\Repeater` and `Pest\\Livewire\\livewire`. It checks if the 'quotes' repeater has exactly two items. `Repeater::fake()` must be called at the beginning of the test and undone at the end.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\nuse function Pest\\Livewire\\livewire;\n\n$undoRepeaterFake = Repeater::fake();\n\nlivewire(EditPost::class, ['record' => $post])\n    ->assertSchemaStateSet(function (array $state) {\n        expect($state['quotes'])\n            ->toHaveCount(2);\n    });\n\n$undoRepeaterFake();\n```\n\n----------------------------------------\n\nTITLE: Rendering a Livewire Component in Blade\nDESCRIPTION: This Blade directive renders a Livewire component on the page. The component is referenced by its name (manage-product).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-action.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n@livewire('manage-product')\n```\n\n----------------------------------------\n\nTITLE: Collapsible Filters Above Content - Filament PHP\nDESCRIPTION: This code snippet demonstrates how to allow filters displayed above the table content in a Filament table to be collapsed.  The `filters` method is used with the `layout` parameter set to `FiltersLayout::AboveContentCollapsible`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/06-layout.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Enums\\FiltersLayout;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            // ...\n        ], layout: FiltersLayout::AboveContentCollapsible);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing 'Yes' Label in Boolean Radio Buttons - PHP\nDESCRIPTION: This code shows how to customize the \"Yes\" label in a boolean radio button group using the `trueLabel` argument of the `boolean()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/07-radio.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Radio;\n\nRadio::make('feedback')\n    ->label('Like this post?')\n    ->boolean(trueLabel: 'Absolutely!')\n```\n\n----------------------------------------\n\nTITLE: Making a DatePicker Read-Only - PHP\nDESCRIPTION: This code snippet demonstrates how to make a Filament DatePicker component read-only using the `readonly()` method.  When a field is read-only, it's still submitted with the form.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/08-date-time-picker.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\n\nDatePicker::make('date_of_birth')\n    ->readonly()\n```\n\n----------------------------------------\n\nTITLE: Creating Livewire Component\nDESCRIPTION: This command generates a new Livewire component named `ViewProduct`. This is the first step in rendering a Filament infolist within a Livewire component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-infolist.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:livewire ViewProduct\n```\n\n----------------------------------------\n\nTITLE: Enabling Sidebar on Profile Page\nDESCRIPTION: This code demonstrates how to enable the standard page layout with a sidebar on the profile page. By passing `isSimple: false` to the `$panel->profile()` method, the profile page will use the default page layout with a sidebar.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/01-overview.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->profile(isSimple: false);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML from a View\nDESCRIPTION: Renders HTML by returning a `view()` object from the `formatStateUsing()` method, which will also not be sanitized. Requires `Illuminate\\Contracts\\View\\View`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Illuminate\\Contracts\\View\\View;\n\nTextColumn::make('description')\n    ->formatStateUsing(fn (string $state): View => view(\n        'filament.tables.columns.description-column-content',\n        ['state' => $state],\n    ))\n```\n\n----------------------------------------\n\nTITLE: Dynamically Customizing Icon Color Based on State - PHP\nDESCRIPTION: This code shows how to dynamically change the color of an IconEntry based on its state using a function.  It uses a `match` expression to assign different colors based on the 'status' state (draft, reviewing, published).  A default color is specified for unhandled states. The function receives the state as a string parameter.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/03-icon-entry.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\IconEntry;\n\nIconEntry::make('status')\n    ->color(fn (string $state): string => match ($state) {\n        'draft' => 'info',\n        'reviewing' => 'warning',\n        'published' => 'success',\n        default => 'gray',\n    })\n```\n\n----------------------------------------\n\nTITLE: Compile JavaScript and Alpine Component with esbuild in JavaScript\nDESCRIPTION: This JavaScript code snippet uses esbuild to compile a JavaScript file containing an Alpine.js component. It defines options for bundling, minifying, and watching for changes. The `entryPoints` and `outfile` options specify the input and output file paths respectively. It includes a plugin to log build start and end times.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as esbuild from 'esbuild'\n\nconst isDev = process.argv.includes('--dev')\n\nasync function compile(options) {\n    const context = await esbuild.context(options)\n\n    if (isDev) {\n        await context.watch()\n    } else {\n        await context.rebuild()\n        await context.dispose()\n    }\n}\n\nconst defaultOptions = {\n    define: {\n        'process.env.NODE_ENV': isDev ? `'development'` : `'production'`,\n    },\n    bundle: true,\n    mainFields: ['module', 'main'],\n    platform: 'neutral',\n    sourcemap: isDev ? 'inline' : false,\n    sourcesContent: isDev,\n    treeShaking: true,\n    target: ['es2020'],\n    minify: !isDev,\n    plugins: [{\n        name: 'watchPlugin',\n        setup: function (build) {\n            build.onStart(() => {\n                console.log(`Build started at ${new Date(Date.now()).toLocaleTimeString()}: ${build.initialOptions.outfile}`)\n            })\n\n            build.onEnd((result) => {\n                if (result.errors.length > 0) {\n                    console.log(`Build failed at ${new Date(Date.now()).toLocaleTimeString()}: ${build.initialOptions.outfile}`, result.errors)\n                } else {\n                    console.log(`Build finished at ${new Date(Date.now()).toLocaleTimeString()}: ${build.initialOptions.outfile}`)\n                }\n            })\n        }\n    }],\n}\n\ncompile({\n    ...defaultOptions,\n    entryPoints: ['./resources/js/components/test-component.js'],\n    outfile: './resources/js/dist/components/test-component.js'],\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Square Images - Filament PHP\nDESCRIPTION: This code snippet shows how to display an image with a 1:1 aspect ratio (square) using the `square()` method.  It is often used with `imageHeight()` to define the dimensions of the square.  The `square()` method can also accept a boolean value (or a function resolving to a boolean) to dynamically control whether the image should be square.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/04-image-entry.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('author.avatar')\n    ->imageHeight(40)\n    ->square()\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('author.avatar')\n    ->imageHeight(40)\n    ->square(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Creating the Heading Component - PHP\nDESCRIPTION: Defines the `Heading` component, which extends Filament's `Component` class.  It includes properties for the heading level, content, and color. The component is configured to not be dehydrated. The `make` method is used to instantiate the component with the heading level. It also defines methods for setting and retrieving the content, level, and color.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/11-plugins/04-building-a-standalone-plugin.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace Awcodes\\Headings;\n\nuse Closure;\nuse Filament\\Schemas\\Components\\Component;\nuse Filament\\Support\\Colors\\Color;\nuse Filament\\Support\\Concerns\\HasColor;\n\nclass Heading extends Component\n{\n    use HasColor;\n\n    protected string | int $level = 2;\n\n    protected string | Closure $content = '';\n\n    protected string $view = 'headings::heading';\n\n    final public function __construct(string | int $level)\n    {\n        $this->level($level);\n    }\n\n    public static function make(string | int $level): static\n    {\n        return app(static::class, ['level' => $level]);\n    }\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->dehydrated(false);\n    }\n\n    public function content(string | Closure $content): static\n    {\n        $this->content = $content;\n\n        return $this;\n    }\n\n    public function level(string | int $level): static\n    {\n        $this->level = $level;\n\n        return $this;\n    }\n\n    public function getColor(): array\n    {\n        return $this->evaluate($this->color) ?? Color::Amber;\n    }\n\n    public function getContent(): string\n    {\n        return $this->evaluate($this->content);\n    }\n\n    public function getLevel(): string\n    {\n        return is_int($this->level) ? 'h' . $this->level : $this->level;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Media with Custom Properties (PHP)\nDESCRIPTION: This code snippet demonstrates how to filter media in a Filament table using the `filterMediaUsing()` method. It filters the media collection to only include items where the 'custom_properties.gallery_id' is equal to 12345.  It uses the Illuminate\\Support\\Collection class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\SpatieMediaLibraryImageEntry;\nuse Illuminate\\Support\\Collection;\n\nSpatieMediaLibraryImageEntry::make('images')\n    ->filterMediaUsing(\n        fn (Collection $media): Collection => $media->where(\n            'custom_properties.gallery_id',\n            12345,\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: Dispatching Close Notification Event from Livewire - PHP\nDESCRIPTION: This code snippet shows how to dispatch a `close-notification` browser event from a Livewire component in PHP.  It takes the notification ID as a parameter. This is used to close a specific notification on the page.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/01-overview.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->dispatch('close-notification', id: $notificationId);\n```\n\n----------------------------------------\n\nTITLE: Publishing the tags migration\nDESCRIPTION: Publishes the migration file required to create the 'tags' table in the database. This migration is provided by the Spatie Laravel Tags package.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-tags-plugin/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --provider=\"Spatie\\Tags\\TagsServiceProvider\" --tag=\"tags-migrations\"\n```\n\n----------------------------------------\n\nTITLE: Setting Icon Position in Filament Tabs Blade\nDESCRIPTION: This snippet demonstrates how to set the position of the icon in a tab using the `icon-position` attribute. The possible values for the `icon-position` attribute are `before` (default) and `after`. It customizes the display of icons within the Filament Tabs component.  Uses Filament and Heroicons.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-tabs.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::tabs>\n    <x-filament::tabs.item\n        icon=\"heroicon-m-bell\"\n        icon-position=\"after\"\n    >\n        Notifications\n    </x-filament::tabs.item>\n\n    {{-- Other tabs --}}\n</x-filament::tabs>\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Toolbar Buttons\nDESCRIPTION: This snippet demonstrates how to disable specific toolbar buttons using the `disableToolbarButtons()` method.  It accepts an array of button names to be disabled in the rich editor.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/10-rich-editor.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\RichEditor;\n\nRichEditor::make('content')\n    ->disableToolbarButtons([\n        'blockquote',\n        'strike',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Expanding Limited List\nDESCRIPTION: Allows expanding and collapsing a limited list using the `expandableLimitedList()` method in a Filament Infolist TextEntry.  Requires `listWithLineBreaks()` or `bulleted()` to be used. Accepts both static values and functions for dynamic calculation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('authors.name')\n    ->listWithLineBreaks()\n    ->limitList(3)\n    ->expandableLimitedList()\n```\n\n----------------------------------------\n\nTITLE: Configuring global modal click-away behavior - Filament\nDESCRIPTION: This snippet shows how to globally configure whether modals close when clicking away from them. It uses `ModalComponent::closedByClickingAway(false)` within a service provider or middleware to disable this behavior for all modals.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\View\\Components\\ModalComponent;\n\nModalComponent::closedByClickingAway(false);\n```\n\n----------------------------------------\n\nTITLE: Replacing Default Icons (PHP)\nDESCRIPTION: Demonstrates how to replace default icons used throughout the Filament UI with custom icons. It utilizes the `FilamentIcon` facade to register replacements in a service provider's `boot()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/04-icons.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Facades\\FilamentIcon;\n\nFilamentIcon::register([\n    'panels::topbar.global-search.field' => 'fas-magnifying-glass',\n    'panels::sidebar.group.collapse-button' => view('icons.chevron-up'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Dropdown Width (PHP)\nDESCRIPTION: This snippet demonstrates how to set the width of the action group dropdown using the `dropdownWidth()` method.  It leverages `Filament\\Support\\Enums\\Width` to set to a specific width like `Width::ExtraSmall`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/03-grouping-actions.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\ActionGroup;\nuse Filament\\Support\\Enums\\Width;\n\nActionGroup::make([\n    // Array of actions\n])\n    ->dropdownWidth(Width::ExtraSmall)\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Columns Directly - PHP\nDESCRIPTION: This code demonstrates how to define the number of columns in a Filament grid layout for various screen sizes directly when creating a `Grid` component using `Grid::make()`. The `columns()` method is not used here; instead, the column configuration is passed directly to the `make()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/02-layouts.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Grid;\n\nGrid::make([\n    'default' => 1,\n    'sm' => 2,\n    'md' => 3,\n    'lg' => 4,\n    'xl' => 6,\n    '2xl' => 8,\n])\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting Badge Trigger Style in Filament (PHP)\nDESCRIPTION: This code sets the trigger style of an action to 'badge'. Badge triggers have a background color and label.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('edit')\n    ->badge()\n```\n\n----------------------------------------\n\nTITLE: Allowing Utility Injection in custom entry (PHP)\nDESCRIPTION: This code modifies the custom entry class to allow utility injection in the `speed()` method. It updates the parameter and property type to accept a `Closure`, and uses `$this->evaluate()` in the getter to handle injected utilities or static values.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/08-custom-entries.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Closure;\nuse Filament\\Infolists\\Components\\Entry;\n\nclass AudioPlayerEntry extends Entry\n{\n    protected string $view = 'filament.infolists.components.audio-player-entry';\n    \n    protected float | Closure | null $speed = null;\n\n    public function speed(float | Closure | null $speed): static\n    {\n        $this->speed = $speed;\n\n        return $this;\n    }\n\n    public function getSpeed(): ?float\n    {\n        return $this->evaluate($this->speed);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Copyable ColorColumn with Custom Message (PHP)\nDESCRIPTION: This example shows how to make the color preview copyable to the clipboard when clicked. It includes setting a custom confirmation message ('Copied!') and a duration (1500ms) for the message to be displayed. SSL needs to be enabled for the app for this feature to work.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/05-color.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Components\\ColorColumn;\n\nColorColumn::make('color')\n    ->copyable()\n    ->copyMessage('Copied!')\n    ->copyMessageDuration(1500)\n```\n\n----------------------------------------\n\nTITLE: Styling Buttons with CSS in Filament\nDESCRIPTION: This CSS snippet demonstrates how to override the default styling of buttons in Filament using a utility-based CSS framework like Tailwind CSS. It changes the border radius of all buttons from large (`rounded-lg`) to small (`rounded-sm`) by targeting the `.fi-btn` class. This approach allows for customization of Filament components without extensive custom stylesheets or HTML modifications.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/01-introduction/01-overview.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.fi-btn {\n    @apply rounded-lg px-3 py-2 text-sm font-medium outline-none;\n}\n```\n\n----------------------------------------\n\nTITLE: Using RGB Color Array in Filament v3 Action (PHP)\nDESCRIPTION: This code snippet demonstrates how to define a color for an action using an array of RGB values in Filament v3.  This approach is deprecated in v4, requiring color registration instead. The code defines a delete action and assigns a color palette to it directly.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('delete')\n    ->color([\n        50 => '254, 242, 242',\n        100 => '254, 226, 226',\n        200 => '254, 202, 202',\n        300 => '252, 165, 165',\n        400 => '248, 113, 113',\n        500 => '239, 68, 68',\n        600 => '220, 38, 38',\n        700 => '185, 28, 28',\n        800 => '153, 27, 27',\n        900 => '127, 29, 29',\n        950 => '69, 10, 10',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Globally Disabling Deferred Table Filters in Filament\nDESCRIPTION: This code snippet demonstrates how to globally disable deferred table filters across the entire Filament application.  It uses the `Table::configureUsing` method within the `boot` method of a service provider to set `deferFilters(false)` as the default for all tables. Requires the `Filament\\Tables\\Table` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Table;\n\nTable::configureUsing(fn (Table $table) => $table\n    ->deferFilters(false));\n```\n\n----------------------------------------\n\nTITLE: Hiding Field with JavaScript - JavaScript\nDESCRIPTION: This snippet contains the javascript code that is passed to the `hiddenJs()` method.  It uses the `$get()` utility function to get the value of the 'role' field and returns true if it is not equal to 'staff', meaning the field should be hidden.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n$get('role') !== 'staff'\n```\n\n----------------------------------------\n\nTITLE: Sanitizing HTML Output in Blade\nDESCRIPTION: This snippet shows how to sanitize HTML content retrieved from the database and displayed in a Blade view, preventing potential XSS vulnerabilities. It utilizes Filament's `sanitizeHtml()` helper function to remove dangerous JavaScript from the HTML.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/10-rich-editor.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n{!! str($record->content)->sanitizeHtml() !!}\n```\n\n----------------------------------------\n\nTITLE: Setting Panel Font in Filament (PHP)\nDESCRIPTION: This snippet shows how to change the default font used in a Filament panel using the `font()` method. It allows specifying any Google Font by its name, such as 'Poppins'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/01-overview.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->font('Poppins');\n}\n```\n\n----------------------------------------\n\nTITLE: Blade Template Example - Blade\nDESCRIPTION: This is an example of a Blade template used to display a custom view page in Filament.  It includes the filament page layout and renders content defined in the 'content()' method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/05-viewing-records.md#_snippet_15\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament-panels::page>\n    {{-- `$this->getRecord()` will return the current Eloquent record for this page --}}\n    \n    {{ $this->content }} {{-- This will render the content of the page defined in the `content()` method, which can be removed if you want to start from scratch --}}\n</x-filament-panels::page>\n```\n\n----------------------------------------\n\nTITLE: Refreshing Sidebar from Livewire - PHP\nDESCRIPTION: This code snippet shows how to dispatch a `refresh-sidebar` event from a Livewire component to reload the sidebar. This is useful when you need to update the sidebar after an action has been performed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$this->dispatch('refresh-sidebar');\n```\n\n----------------------------------------\n\nTITLE: Registering JavaScript File with Filament Asset\nDESCRIPTION: This code demonstrates registering a JavaScript file using the `FilamentAsset` facade. A `Js` object is created with a unique ID and the path to the JavaScript file. The `__DIR__` magic constant provides a relative path.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Assets\\Js;\n\nFilamentAsset::register([\n    Js::make('custom-script', __DIR__ . '/../../resources/js/custom.js'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Responsive Grid Layout with Section and TextInput - PHP\nDESCRIPTION: This snippet shows how to create a responsive grid layout within a Filament Section component. It uses the `columns()` method to define the number of columns at different breakpoints (sm, xl, 2xl) for the Section. Inside the Section, a TextInput's column span is defined using the `columnSpan()` method, adjusting its width based on the screen size.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/02-layouts.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Section;\n\nSection::make()\n    ->columns([\n        'sm' => 3,\n        'xl' => 6,\n        '2xl' => 8,\n    ])\n    ->schema([\n        TextInput::make('name')\n            ->columnSpan([\n                'sm' => 2,\n                'xl' => 3,\n                '2xl' => 4,\n            ]),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Customizing Stacked Ring Width - Filament PHP\nDESCRIPTION: This snippet demonstrates customizing the ring width around each stacked image using the `ring()` method. The ring width can be a value between 0 and 8, inclusive, controlling the spacing between each image in the stack. The `ring()` method also accepts a function for dynamic width calculation, injecting utilities as parameters.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/04-image-entry.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('colleagues.avatar')\n    ->imageHeight(40)\n    ->circular()\n    ->stacked()\n    ->ring(5)\n```\n\n----------------------------------------\n\nTITLE: Preventing Modal Autofocus - Blade\nDESCRIPTION: This code snippet demonstrates how to prevent a Filament modal from automatically focusing on the first focusable element when opened using the `autofocus` attribute. Setting this attribute to `false` disables the autofocus behavior. The colon `:` before the attribute indicates that it is a dynamic attribute.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-modal.md#_snippet_18\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal :autofocus=\"false\">\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Disabling Broadcasting for a Filament Panel (PHP)\nDESCRIPTION: This snippet demonstrates how to disable the automatic connection to Laravel Echo for a specific Filament panel using the `broadcasting(false)` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/05-panel-configuration.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->broadcasting(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering CSS Variables in Filament\nDESCRIPTION: Registers CSS variables using the `FilamentAsset::registerCssVariables()` method. These variables can then be used in any CSS file.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Facades\\FilamentAsset;\n\nFilamentAsset::registerCssVariables([\n    'background-image' => asset('images/background.jpg'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Initializing ColorColumn in Filament Table (PHP)\nDESCRIPTION: This code snippet demonstrates how to create a basic ColorColumn in a Filament table. It uses the `ColorColumn::make()` method to define a column named 'color' which will display a color preview based on the CSS color definition stored in that column's data.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/05-color.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Components\\ColorColumn;\n\nColorColumn::make('color')\n```\n\n----------------------------------------\n\nTITLE: Running the database migrations\nDESCRIPTION: Executes the database migrations, including the one published in the previous step, to create the necessary tables for the Spatie Laravel Tags package.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-tags-plugin/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Hiding Field on Multiple Operations - PHP\nDESCRIPTION: This example extends the previous one, hiding the field on multiple operations ('edit' and 'view') using an array passed to `hiddenOn()`.  It again shows the same functionality can be achieved with the `hidden()` method and an anonymous function.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('is_admin')\n    ->hiddenOn(['edit', 'view'])\n    \n// is the same as\n\nToggle::make('is_admin')\n    ->hidden(fn (string $operation): bool => in_array($operation, ['edit', 'view']))\n```\n\n----------------------------------------\n\nTITLE: Sorting Navigation Items\nDESCRIPTION: This code snippet demonstrates how to sort navigation items using the `$navigationSort` property in a Filament resource or page class. Navigation items with lower sort values will appear before those with higher sort values.  No specific dependencies are required other than Filament. The expected output is a reordered navigation menu.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nprotected static ?int $navigationSort = 3;\n```\n\n----------------------------------------\n\nTITLE: Conditional Expanding in Filament Text Column (PHP)\nDESCRIPTION: This snippet demonstrates how to conditionally enable or disable the expandable list feature using a boolean value or a dynamic feature flag.  The `expandableLimitedList()` method accepts a boolean to determine if the text should be expandable.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('authors.name')\n    ->listWithLineBreaks()\n    ->limitList(3)\n    ->expandableLimitedList(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Enabling Search with Feature Flag - PHP\nDESCRIPTION: This code shows how to conditionally enable searching based on a feature flag.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/06-checkbox-list.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technologies')\n    ->options([\n        // ...\n    ])\n    ->searchable(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Adding Key Field Placeholder in Filament KeyValue\nDESCRIPTION: This snippet shows how to add a placeholder to the key field using the `keyPlaceholder()` method. This provides a hint to the user about what kind of input is expected.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/16-key-value.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n    ->keyPlaceholder('Property name')\n```\n\n----------------------------------------\n\nTITLE: Generating Page URL for Another Panel - PHP\nDESCRIPTION: This snippet demonstrates how to generate a URL for a page associated with a different panel by passing the panel ID to the `panel` argument in the `getUrl()` method.  This allows linking to pages in different Filament admin panels within the application. Requires a panel with id 'marketing' to be configured.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Pages\\Settings;\n\nSettings::getUrl(panel: 'marketing');\n```\n\n----------------------------------------\n\nTITLE: Testing Builders with UUIDs in Filament Forms (PHP)\nDESCRIPTION: Explains how to handle UUIDs generated by builders during testing. The `Builder::fake()` method disables UUID generation and replaces them with numeric keys, preventing test failures caused by inconsistent UUIDs. It requires the `EditPost` Livewire component and the `Builder` component. `assertSchemaStateSet` is used to assert the form state.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\nuse function Pest\\Livewire\\livewire;\n\n$undoBuilderFake = Builder::fake();\n\nlivewire(EditPost::class, ['record' => $post])\n    ->assertSchemaStateSet([\n        'content' => [\n            [\n                'type' => 'heading',\n                'data' => [\n                    'content' => 'Hello, world!',\n                    'level' => 'h1',\n                ],\n            ],\n            [\n                'type' => 'paragraph',\n                'data' => [\n                    'content' => 'This is a test post.',\n                ],\n            ],\n        ],\n        // ...\n    ]);\n\n$undoBuilderFake();\n```\n\n----------------------------------------\n\nTITLE: Customize Ownership Relationship (Resource)\nDESCRIPTION: This code snippet demonstrates how to customize the ownership relationship name for a specific resource by setting the `$tenantOwnershipRelationshipName` static property on the resource class. In this example, the `Post` model class has an `owner` relationship defined. Dependency: `Filament\\Resources\\Resource`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\Resource;\n\nclass PostResource extends Resource\n{\n    protected static ?string $tenantOwnershipRelationshipName = 'owner';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Form Existence - PHP\nDESCRIPTION: This snippet demonstrates how to assert that a Livewire component has a Filament form using `assertFormExists()`. It requires the `Pest\\Livewire\\livewire` function.  The example simply checks if a form exists in the component. You can specify the form name as the argument to `assertFormExists` when there are multiple schemas.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('has a form', function () {\n    livewire(CreatePost::class)\n        ->assertFormExists();\n});\n```\n\n----------------------------------------\n\nTITLE: Conditionally saving data to a relationship\nDESCRIPTION: This snippet demonstrates how to conditionally save data to a relationship using the `condition` parameter in the `relationship()` method. The relationship is only saved if the condition function returns `true`. In this example, the `customer` relationship is only saved if the 'name' field is filled.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_93\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Group;\n\nGroup::make()\n    ->relationship(\n        'customer',\n        condition: fn (?array $state): bool => filled($state['name']),\n    )\n    ->schema([\n        TextInput::make('name')\n            ->label('Customer'),\n        TextInput::make('email')\n            ->label('Email address')\n            ->email()\n            ->requiredWith('name'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Passing Array Data to Infolist\nDESCRIPTION: This PHP code demonstrates how to pass an array of data to the `constantState()` method of the infolist, which manually maps the data to entries in the infolist's schema. It showcases the use of `TextEntry` components for displaying the data. Requires `Filament\\Infolists\\Components\\TextEntry` and `Filament\\Schemas\\Schema`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-infolist.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\nuse Filament\\Schemas\\Schema;\n\npublic function productInfolist(Schema $schema): Schema\n{\n    return $schema\n        ->constantState([\n            'name' => 'MacBook Pro',\n            'category' => [\n                'name' => 'Laptops',\n            ],\n            // ...\n        ])\n        ->components([\n            TextEntry::make('name'),\n            TextEntry::make('category.name'),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Text Length in Export Column\nDESCRIPTION: This demonstrates how to limit the length of the text in an export column using the `limit()` method. This is useful for preventing excessively long text fields from overflowing in the exported file.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('description')\n    ->limit(50)\n```\n\n----------------------------------------\n\nTITLE: Setting Filament Link Font Weight - Blade\nDESCRIPTION: This snippet demonstrates setting the font weight of the Filament Link Blade component using the `weight` attribute.  Different weight values like 'thin', 'extralight', 'light', 'normal', 'medium', 'semibold', 'bold', and 'black' are provided to customize the text appearance.  A custom CSS class example is also given.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-link.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link weight=\"thin\">\n    New user\n</x-filament::link>\n\n<x-filament::link weight=\"extralight\">\n    New user\n</x-filament::link>\n\n<x-filament::link weight=\"light\">\n    New user\n</x-filament::link>\n\n<x-filament::link weight=\"normal\">\n    New user\n</x-filament::link>\n\n<x-filament::link weight=\"medium\">\n    New user\n</x-filament::link>\n\n<x-filament::link weight=\"semibold\">\n    New user\n</x-filament::link>\n   \n<x-filament::link weight=\"bold\">\n    New user\n</x-filament::link>\n\n<x-filament::link weight=\"black\">\n    New user\n</x-filament::link> \n\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link weight=\"md:font-[650]\">\n    New user\n</x-filament::link>\n```\n\n----------------------------------------\n\nTITLE: Customizing Toolbar Buttons - PHP\nDESCRIPTION: This snippet demonstrates how to customize the toolbar buttons of the Filament MarkdownEditor using the `toolbarButtons()` method. It allows specifying an array of button names to display in the toolbar.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/11-markdown-editor.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\MarkdownEditor;\n\nMarkdownEditor::make('content')\n    ->toolbarButtons([\n        'attachFiles',\n        'blockquote',\n        'bold',\n        'bulletList',\n        'codeBlock',\n        'heading',\n        'italic',\n        'link',\n        'orderedList',\n        'redo',\n        'strike',\n        'table',\n        'undo',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting Brand Logo with Blade View (PHP)\nDESCRIPTION: This snippet shows how to use a Blade view to render a custom logo (e.g., an inline SVG) in a Filament panel. The `brandLogo()` method is passed a closure that returns the rendered view.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/01-overview.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->brandLogo(fn () => view('filament.admin.logo'));\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Load JavaScript with Alpine.js in Blade\nDESCRIPTION: This code snippet demonstrates how to use the `x-load-js` directive in a Blade view to lazy load a JavaScript file when the element is loaded. It requires the `alpine-lazy-load-assets` package bundled with Filament. The JavaScript file path is obtained using `FilamentAsset::getScriptSrc()`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_11\n\nLANGUAGE: blade\nCODE:\n```\n<div\n    x-data=\"{}\"\n    x-load-js=\"[@js(\\Filament\\Support\\Facades\\FilamentAsset::getScriptSrc('custom-script'))]\"\n>\n    <!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Filament Resource Table\nDESCRIPTION: This code demonstrates how to configure a Filament resource table using the `CustomersTable` schema. It defines the table's structure and elements.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Resources\\Customers\\Schemas\\CustomersTable;\nuse Filament\\Tables\\Table;\n\npublic static function table(Table $table): Table\n{\n    return CustomersTable::configure($table);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Size in Filament Text Column (PHP)\nDESCRIPTION: This snippet demonstrates how to customize the text size of a Filament TextColumn using the `size()` method and the `TextSize` enum. It allows setting the text size to extra small, medium, or large.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Support\\Enums\\TextSize;\n\nTextColumn::make('title')\n    ->size(TextSize::Large)\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Operators in Filament Text Constraint\nDESCRIPTION: This code shows how to override the default operators for a Filament text constraint. The `operators()` method is used to specify a new set of operators, replacing the defaults. In this case, only the `IsFilledOperator` is retained.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\Operators\\IsFilledOperator;\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\TextConstraint;\n\nTextConstraint::make('author')\n    ->relationship(name: 'author', titleAttribute: 'name')\n    ->operators([\n        IsFilledOperator::make(),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Controlling Column Span at Breakpoints - PHP\nDESCRIPTION: This code demonstrates how to control the number of grid columns consumed by each component at different breakpoints. It uses the `columnSpan()` method to specify the span of the `Stack` and `TextColumn` components, allowing for more flexible layout customization.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/05-layout.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Layout\\Grid;\nuse Filament\\Tables\\Columns\\Layout\\Stack;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nGrid::make([\n    'lg' => 2,\n    '2xl' => 5,\n])\n    ->schema([\n        Stack::make([\n            TextColumn::make('name'),\n            TextColumn::make('job'),\n        ])->columnSpan([\n            'lg' => 'full',\n            '2xl' => 2,\n        ]),\n        TextColumn::make('phone')\n            ->icon('heroicon-m-phone')\n            ->columnSpan([\n                '2xl' => 2,\n            ]),\n        TextColumn::make('email')\n            ->icon('heroicon-m-envelope'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Initializing Date/Time Pickers - PHP\nDESCRIPTION: This snippet demonstrates the basic initialization of DatePicker, DateTimePicker, and TimePicker form components in Filament. It creates fields for capturing date, date and time, and time information respectively, assigning them to model attributes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/08-date-time-picker.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Forms\\Components\\DateTimePicker;\nuse Filament\\Forms\\Components\\TimePicker;\n\nDateTimePicker::make('published_at')\nDatePicker::make('date_of_birth')\nTimePicker::make('alarm_at')\n```\n\n----------------------------------------\n\nTITLE: Configuring Filament Table with a Dedicated Class (PHP)\nDESCRIPTION: This snippet shows how to use a dedicated class for defining Filament table configurations using the `CustomersTable` class. This includes defining columns and actions.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/12-code-quality-tips.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Resources\\Customers\\Schemas\\CustomersTable;\nuse Filament\\Tables\\Table;\n\npublic static function table(Table $table): Table\n{\n    return CustomersTable::configure($table);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Filters Below Content - Filament PHP\nDESCRIPTION: This code snippet shows how to render the filters below the table content in a Filament table. The `filters` method is used with the `layout` parameter set to `FiltersLayout::BelowContent`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/06-layout.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Enums\\FiltersLayout;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            // ...\n        ], layout: FiltersLayout::BelowContent);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an icon to a Filament Badge\nDESCRIPTION: This snippet shows how to add an icon to a Filament badge using the `icon` attribute. It uses a Heroicon and demonstrates how to change the icon's position using the `icon-position` attribute to be either before or after the text.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-badge.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::badge icon=\"heroicon-m-sparkles\">\n    New\n</x-filament::badge>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::badge\n    icon=\"heroicon-m-sparkles\"\n    icon-position=\"after\"\n>\n    New\n</x-filament::badge>\n```\n\n----------------------------------------\n\nTITLE: Overriding getDefaultName() - Filament PHP\nDESCRIPTION: Shows how to override the `getDefaultName()` method to provide a default `$name` value for a Filament component. This is an alternative to overriding the `make()` method. The function should return a nullable string.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\npublic static function getDefaultName(): ?string\n{\n    return 'default';\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Step Icon (PHP)\nDESCRIPTION: This code shows how to assign an icon to a specific step in the Filament Wizard using the `icon()` method. It uses the `Filament\\Support\\Icons\\Heroicon` enum for selecting an icon. Requires Filament and Filament\\Support\\Icons\\Heroicon.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/05-wizards.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Wizard\\Step;\nuse Filament\\Support\\Icons\\Heroicon;\n\nStep::make('Order')\n    ->icon(Heroicon::ShoppingBag)\n    ->schema([\n        // ...\n    ]),\n```\n\n----------------------------------------\n\nTITLE: Updating package.json with CSS build tools - JSON\nDESCRIPTION: Updates the `package.json` file to include `cssnano`, `postcss`, `postcss-cli`, and `postcss-nesting` as development dependencies. This enables the building of a custom stylesheet for the Filament plugin, utilizing PostCSS and CSSNano for optimization. The build script is also defined here.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/11-plugins/04-building-a-standalone-plugin.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"private\": true,\n    \"scripts\": {\n        \"build\": \"postcss resources/css/index.css -o resources/dist/headings.css\"\n    },\n    \"devDependencies\": {\n        \"cssnano\": \"^6.0.1\",\n        \"postcss\": \"^8.4.27\",\n        \"postcss-cli\": \"^10.1.0\",\n        \"postcss-nesting\": \"^13.0.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications with Custom ID - PHP\nDESCRIPTION: This code snippet shows how to send a Filament notification with a custom ID. It sets the first argument of the `make` function, the ID, to 'greeting'. This allows for targeted closing of the notification using the custom ID. `persistent()` keeps the notification from automatically disappearing.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/01-overview.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\nNotification::make('greeting')\n    ->title('Hello')\n    ->persistent()\n    ->send()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Constraint in Filament\nDESCRIPTION: This code snippet demonstrates how to create a custom constraint in Filament using the `Constraint::make()` method.  It also sets an icon to the new constraint using the `icon()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\Constraint;\n\nConstraint::make('subscribed')\n    ->icon('heroicon-m-bell')\n    ->operators([\n        // ...\n    ]),\n```\n\n----------------------------------------\n\nTITLE: Customizing the Logout Link in Filament (PHP)\nDESCRIPTION: This code snippet demonstrates how to customize the user logout link within the Filament user menu by registering a new item with the 'logout' array key and passing a function that customizes the Action object. This example modifies the label of the logout link.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/03-user-menu.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->userMenuItems([\n            'logout' => fn (Action $action) => $action->label('Log out'),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the Page URL Slug in PHP\nDESCRIPTION: This example shows how to customize the URL slug for a Filament page by defining a `$slug` property on the page class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?string $slug = 'custom-url-slug';\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Body Attributes - PHP\nDESCRIPTION: This code shows how to add extra attributes to the `<body>` tag of a Filament page by defining the `$extraBodyAttributes` property as an array. This can be used to customize the appearance or behavior of the page. The array keys represent the attribute names, and the values represent the attribute values.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nprotected array $extraBodyAttributes = [];\n```\n\n----------------------------------------\n\nTITLE: Configure Column with Method\nDESCRIPTION: This PHP snippet demonstrates how to configure the `AudioPlayerColumn` using the defined `speed()` method, setting the speed to 0.5.  This is done when defining the column for a table.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/10-custom-columns.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Tables\\Columns\\AudioPlayerColumn;\n\nAudioPlayerColumn::make('recording')\n    ->speed(0.5)\n```\n\n----------------------------------------\n\nTITLE: Triggering Error State with Blade\nDESCRIPTION: This example shows how to trigger the error state of the input wrapper component using the `valid` attribute.  The `$errors->has('name')` checks for validation errors associated with the 'name' input. The styling changes if there are errors.  This relies on Laravel's validation error bag.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-input-wrapper.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::input.wrapper :valid=\"! $errors->has('name')\">\n    <x-filament::input\n        type=\"text\"\n        wire:model=\"name\"\n    />\n</x-filament::input.wrapper>\n```\n\n----------------------------------------\n\nTITLE: Making All Navigation Groups Not Collapsible\nDESCRIPTION: This code snippet demonstrates how to make all navigation groups non-collapsible globally within the Filament Panel configuration. It requires the Filament Panel class.  The expected output is that all navigation groups will be displayed as expanded and cannot be collapsed by the user.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->collapsibleNavigationGroups(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Recovery Codes in Filament Google Two-Factor Authentication (PHP)\nDESCRIPTION: This code snippet enables the recovery codes feature for Google two-factor authentication in a Filament panel. It uses the `recoverable()` method on the `GoogleTwoFactorAuthentication` instance within the `multiFactorAuthentication()` configuration. This allows users to generate and use recovery codes for account access.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/02-multi-factor-authentication.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Auth\\MultiFactor\\GoogleTwoFactor\\GoogleTwoFactorAuthentication;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->multiFactorAuthentication([\n            GoogleTwoFactorAuthentication::make()\n                ->recoverable(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Hidden Field using Filament - PHP\nDESCRIPTION: This code snippet demonstrates how to create a hidden form field named 'token' using the Filament Forms Hidden component. The value will be submitted with the form, but it will be hidden from the user's view. It's crucial to understand that the value remains editable via browser developer tools, so avoid storing sensitive or read-only data.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/19-hidden.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Hidden;\n\nHidden::make('token')\n```\n\n----------------------------------------\n\nTITLE: Using SpatieTagsInput with type()\nDESCRIPTION: Demonstrates how to use the `SpatieTagsInput` component within a Filament form, specifying a `type` to group tags into collections. This leverages Spatie's tag types.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-tags-plugin/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\SpatieTagsInput;\n\nSpatieTagsInput::make('tags')\n    ->type('categories')\n```\n\n----------------------------------------\n\nTITLE: Adding Property to Filament Class\nDESCRIPTION: This snippet demonstrates how to add a new property to a Filament class using the `addPropertiesToClass()` method. It ensures that existing properties are inherited by calling `parent::addPropertiesToClass()` and then adds a new property called `$navigationSort`.  This approach allows for adding new properties while maintaining existing functionality.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/04-file-generation.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Nette\\PhpGenerator\\ClassType;\nuse Nette\\PhpGenerator\\Literal;\n\nprotected function addPropertiesToClass(ClassType $class): void\n{\n    parent::addPropertiesToClass($class);\n\n    $class->addProperty('navigationSort', 10)\n        ->setProtected()\n        ->setStatic()\n        ->setType('?int');\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Markdown Rendering\nDESCRIPTION: Conditionally renders content as Markdown in a Filament Infolist TextEntry using the `markdown()` method. A boolean value, such as the result of a feature flag check, controls whether the text is rendered as Markdown.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('description')\n    ->markdown(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Overriding Styles with !important Modifier\nDESCRIPTION: This snippet shows how to override existing styles on the Filament sidebar using the `!important` modifier in conjunction with the `@apply` directive. It applies background colors for both light and dark modes, ensuring these styles take precedence.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/02-css-hooks.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.fi-sidebar {\n    @apply bg-gray-50 dark:bg-gray-950 !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Images in Filament Tables (PHP)\nDESCRIPTION: This code snippet demonstrates how to use the `wrap()` method on an `ImageColumn` in Filament to allow images to wrap onto multiple lines if they cannot fit on a single line. This is useful when displaying multiple images, such as avatars.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/04-image.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\ImageColumn;\n\nImageColumn::make('colleagues.avatar')\n    ->circular()\n    ->stacked()\n    ->wrap()\n```\n\n----------------------------------------\n\nTITLE: Disabling a Field Based on Multiple Operations\nDESCRIPTION: This code demonstrates disabling a field for multiple operations. It accepts an array of operation names to the `disabledOn()` method.  The field is disabled if the current operation matches any value in the array.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('is_admin')\n    ->disabledOn(['edit', 'view'])\n    \n// is the same as\n\nToggle::make('is_admin')\n    ->disabled(fn (string $operation): bool => in_array($operation, ['edit', 'view']))\n```\n\n----------------------------------------\n\nTITLE: Validating HSL Color - PHP\nDESCRIPTION: This snippet demonstrates how to validate an HSL color using Laravel's validation rules within the Filament color picker. It uses a regex to ensure the HSL color is in the correct format.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/17-color-picker.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\ColorPicker;\n\nColorPicker::make('hsl_color')\n    ->hsl()\n    ->regex('/^hsl\\(\\s*(\\d+)\\s*,\\s*(\\d*(?:\\.\\d+)?)%\\s*,\\s*(\\d*(?:\\.\\d+)?)%\\)$/')\n```\n\n----------------------------------------\n\nTITLE: Spacing in Stack Layout - Filament PHP\nDESCRIPTION: This code snippet demonstrates how to add vertical spacing between columns within a `Stack` component using the `space()` method.  Spacing can be 1, 2, or 3, corresponding to Tailwind's spacing scale.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/05-layout.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Layout\\Stack;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nStack::make([\n    TextColumn::make('phone')\n        ->icon('heroicon-m-phone'),\n    TextColumn::make('email')\n        ->icon('heroicon-m-envelope'),\n])->space(1)\n```\n\n----------------------------------------\n\nTITLE: Closing Picker on Date Selection - PHP\nDESCRIPTION: This snippet shows how to configure the date picker to close automatically when a date is selected using the `closeOnDateSelection()` method. You can also pass a boolean to control the behavior conditionally.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/08-date-time-picker.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DateTimePicker;\n\nDateTimePicker::make('date')\n    ->native(false)\n    ->closeOnDateSelection()\n\nDateTimePicker::make('date')\n    ->native(false)\n    ->closeOnDateSelection(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Persisting Collapsed Section State - Blade\nDESCRIPTION: Illustrates how to persist the collapsed state of a section in local storage using the `persist-collapsed` attribute. Requires a unique `id` attribute for the section to maintain individual collapse states.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-section.md#_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::section\n    collapsible\n    collapsed\n    persist-collapsed\n    id=\"user-details\"\n>\n    <x-slot name=\"heading\">\n        User details\n    </x-slot>\n\n    {{-- Content --}}\n</x-filament::section>\n```\n\n----------------------------------------\n\nTITLE: Filament Pagination with Extreme Links\nDESCRIPTION: This Blade snippet demonstrates how to add links to the first and last pages to the Filament pagination component using the `extreme-links` attribute.  No specific dependencies beyond the Filament package.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-pagination.md#_snippet_5\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::pagination\n    :paginator=\"$users\"\n    extreme-links\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Grid Columns Within a Step (PHP)\nDESCRIPTION: This code snippet demonstrates how to customize the grid layout within a specific step of the Filament Wizard using the `columns()` method. Requires Filament.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/05-wizards.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Wizard;\nuse Filament\\Schemas\\Components\\Wizard\\Step;\n\nWizard::make([\n    Step::make('Order')\n        ->columns(2)\n        ->schema([\n            // ...\n        ]),\n    // ...\n])\n```\n\n----------------------------------------\n\nTITLE: Setting Filament Action URL with a Closure (PHP)\nDESCRIPTION: This snippet demonstrates how to set the URL of a Filament action using a closure, allowing for dynamic URL generation based on the current record.  It utilizes the `url()` method and a closure that returns a string. It assumes that `$this->post` represents the Eloquent model that the action is acting upon.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('edit')\n    ->label('Edit post')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n```\n\n----------------------------------------\n\nTITLE: Asserting Form Field Existence - PHP\nDESCRIPTION: This snippet demonstrates how to assert that a Filament form has a specific field using `assertFormFieldExists()`. It requires the `Pest\\Livewire\\livewire` function.  The example checks for the 'title' field. You can specify the form name as the second argument to `assertFormFieldExists` when there are multiple schemas.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('has a title field', function () {\n    livewire(CreatePost::class)\n        ->assertFormFieldExists('title');\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing the Page Title in PHP\nDESCRIPTION: This code shows how to customize the title of a Filament page by defining a `$title` property on the page class. Alternatively, the `getTitle()` method can be overridden to return a custom title.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?string $title = 'Custom Page Title';\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\Support\\Htmlable;\n\npublic function getTitle(): string | Htmlable\n{\n    return __('Custom Page Title');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding content below form field label - PHP\nDESCRIPTION: This code demonstrates adding content below a Filament form field label using the `belowLabel()` method. The example includes an icon and a text string. It is similar to `aboveContent()`, but has different behavior with inline labels.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Icon;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTextInput::make('name')\n    ->belowLabel([\n        Icon::make(Heroicon::Star),\n        'This is the content below the field\\'s label'\n    ])\n```\n\n----------------------------------------\n\nTITLE: Disabling Resource/Page Navigation - PHP\nDESCRIPTION: This code snippet shows two ways to prevent resources or pages from appearing in the navigation. The first method uses a static property `$shouldRegisterNavigation`, and the second method overrides the `shouldRegisterNavigation()` method. Note that this only controls the navigation display, not direct access.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nprotected static bool $shouldRegisterNavigation = false;\n```\n\nLANGUAGE: php\nCODE:\n```\npublic static function shouldRegisterNavigation(): bool\n{\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Filter Tabs\nDESCRIPTION: This snippet demonstrates how to add icons to filter tabs in FilamentPHP using the `icon()` method of the `Tab` object. It also illustrates how to change the icon's position using the `iconPosition()` method, allowing for flexible customization of the tab's appearance. Requires `Filament\\Support\\Enums\\IconPosition`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/02-listing-records.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse use Filament\\Schemas\\Components\\Tabs\\Tab;\n\nTab::make()\n    ->icon('heroicon-m-user-group')\n```\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Support\\Enums\\IconPosition;\n\nTab::make()\n    ->icon('heroicon-m-user-group')\n    ->iconPosition(IconPosition::After)\n```\n\n----------------------------------------\n\nTITLE: Customize Ownership Relationship\nDESCRIPTION: This code snippet demonstrates how to customize the ownership relationship name used across all resources at once by specifying the `ownershipRelationship` argument on the `tenant()` configuration method. In this case, the relationship is named 'owner'. Dependencies: `App\\Models\\Team`, `Filament\\Panel`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Team;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenant(Team::class, ownershipRelationship: 'owner');\n}\n```\n\n----------------------------------------\n\nTITLE: Scoping Relationships in Filament Text Constraint\nDESCRIPTION: This code snippet shows how to scope a relationship within a Filament text constraint. By using the `relationship()` method with the `modifyQueryUsing` argument, the related records can be filtered using an Eloquent builder, allowing more specific filtering based on relationship attributes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\TextConstraint;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nTextConstraint::make('adminCreatorName')\n    ->relationship(\n        name: 'creator',\n        titleAttribute: 'name',\n        modifyQueryUsing: fn (Builder $query) => $query->where('is_admin', true),\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Layout for Repeatable Entry - PHP\nDESCRIPTION: This snippet shows how to configure the grid layout for repeatable items using the `grid()` method.  It accepts the same options as the `columns()` method, allowing responsive customization of column numbers at various breakpoints. Here the grid is set to 2.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/07-repeatable-entry.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\RepeatableEntry;\n\nRepeatableEntry::make('comments')\n    ->schema([\n        // ...\n    ])\n    ->grid(2)\n```\n\n----------------------------------------\n\nTITLE: Passing a Collection to Media Library Image Column\nDESCRIPTION: This code snippet demonstrates how to pass a specific collection to the `SpatieMediaLibraryImageColumn` component. This will only show images from the specified collection ('avatars').\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\SpatieMediaLibraryImageColumn;\n\nSpatieMediaLibraryImageColumn::make('avatar')\n    ->collection('avatars')\n```\n\n----------------------------------------\n\nTITLE: Setting Default Filter Field Value - Filament PHP\nDESCRIPTION: This snippet demonstrates how to set a default value for a field in a custom filter schema in Filament. The `default(now())` method is used on the 'created_until' DatePicker component to set its initial value to the current date and time.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/05-custom.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Tables\\Filters\\Filter;\n\nFilter::make('created_at')\n    ->schema([\n        DatePicker::make('created_from'),\n        DatePicker::make('created_until')\n            ->default(now()),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Customize Profile Link\nDESCRIPTION: This code snippet shows how to customize the user profile link in the tenant menu. It uses the `tenantMenuItems()` method with the 'profile' key to modify the action label. Dependencies: `Filament\\Actions\\Action`, `Filament\\Panel`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantMenuItems([\n            'profile' => fn (Action $action) => $action->label('Edit team profile'),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dropdown Placement (PHP)\nDESCRIPTION: This snippet configures the placement of the action group dropdown relative to the trigger button using the `dropdownPlacement()` method. Example shows setting the dropdown placement to 'top-start'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/03-grouping-actions.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\ActionGroup;\n\nActionGroup::make([\n    // Array of actions\n])\n    ->dropdownPlacement('top-start')\n```\n\n----------------------------------------\n\nTITLE: Customizing the Page Heading in PHP\nDESCRIPTION: This code shows how to customize the heading of a Filament page by defining a `$heading` property on the page class.  You can also override the `getHeading()` method to return a custom heading.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nprotected ?string $heading = 'Custom Page Heading';\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function getHeading(): string\n{\n    return __('Custom Page Heading');\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Values with Line Breaks\nDESCRIPTION: Renders multiple values from an array on separate lines using the `listWithLineBreaks()` method. Assumes the column's state is an array.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('authors.name')\n    ->listWithLineBreaks()\n```\n\n----------------------------------------\n\nTITLE: Formatting Text Entry state in Filament Infolists (PHP)\nDESCRIPTION: This snippet demonstrates how to format the state of a TextEntry component using the `formatStateUsing()` method. It translates the 'status' field using a translation function. The function passed to `formatStateUsing()` can inject various utilities as parameters.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('status')\n    ->formatStateUsing(fn (string $state): string => __(\"statuses.{$state}\"))\n```\n\n----------------------------------------\n\nTITLE: Conditionally displaying square images with ImageColumn in Filament\nDESCRIPTION: This snippet shows how to conditionally display a square image based on a boolean value (e.g., a feature flag).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/04-image.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\ImageColumn;\n\nImageColumn::make('avatar')\n    ->imageHeight(40)\n    ->square(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Customizing Filament Modal Content Alignment\nDESCRIPTION: This snippet demonstrates how to customize the alignment of content within a Filament modal using the `modalAlignment()` method. You can align content to the start or center using `Alignment::Start` or `Alignment::Center` respectively.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Support\\Enums\\Alignment;\n\nAction::make('updateAuthor')\n    ->schema([\n        // ...\n    ])\n    ->action(function (array $data): void {\n        // ...\n    })\n    ->modalAlignment(Alignment::Center)\n```\n\n----------------------------------------\n\nTITLE: Determining Relationship Existence with Scopes\nDESCRIPTION: This demonstrates how to check for the existence of related records with scopes using an array.  The column name must follow Laravel's convention (e.g. `users_exists`).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nExportColumn::make('users_exists')\n    ->exists([\n        'users' => fn (Builder $query) => $query->where('is_active', true),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Basic Color Picker Initialization - PHP\nDESCRIPTION: This snippet demonstrates the basic initialization of a Filament color picker component using the HEX format, which is the default. It creates a color picker field named 'color'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/17-color-picker.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\ColorPicker;\n\nColorPicker::make('color')\n```\n\n----------------------------------------\n\nTITLE: Utility Injection in Filament Component - PHP\nDESCRIPTION: This code snippet demonstrates how to allow utility injection in a custom Filament component by using a Closure for the heading property. The `evaluate()` method is used in the getter to inject utilities if a Closure is provided, otherwise, it returns the static value. It requires the Filament library and uses the Component class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/07-custom-components.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Closure;\nuse Filament\\Schemas\\Components\\Component;\n\nclass Chart extends Component\n{\n    protected string $view = 'filament.schemas.components.chart';\n    \n    protected string | Closure | null $heading = null;\n\n    public static function make(): static\n    {\n        return app(static::class);\n    }\n\n    public function heading(string | Closure | null $heading): static\n    {\n        $this->heading = $heading;\n\n        return $this;\n    }\n\n    public function getHeading(): ?string\n    {\n        return $this->evaluate($this->heading);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Styles for the Heading - CSS\nDESCRIPTION: Provides custom styling for the `Heading` component in CSS. It defines styles for different heading levels (h1 to h6), including font weight, letter spacing, line height, and font size. It also uses nesting to apply styles to the headings within the `headings-component` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/11-plugins/04-building-a-standalone-plugin.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.headings-component {\n    &:is(h1, h2, h3, h4, h5, h6) {\n         font-weight: 700;\n         letter-spacing: -.025em;\n         line-height: 1.1;\n     }\n\n    &h1 {\n         font-size: 2rem;\n     }\n\n    &h2 {\n         font-size: 1.75rem;\n     }\n\n    &h3 {\n         font-size: 1.5rem;\n     }\n\n    &h4 {\n         font-size: 1.25rem;\n     }\n\n    &h5,\n    &h6 {\n         font-size: 1rem;\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Constraint Picker Width - PHP\nDESCRIPTION: This code snippet demonstrates how to set the maximum width of the constraint picker dropdown using the `constraintPickerWidth()` method with a Tailwind max-width scale option. The column count is set to 3 using `constraintPickerColumns()`. It requires the `Filament\\Tables\\Filters\\QueryBuilder` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder;\n\nQueryBuilder::make()\n    ->constraintPickerColumns(3)\n    ->constraintPickerWidth('2xl')\n    ->constraints([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Conditionally\nDESCRIPTION: Conditionally renders the column value as HTML based on a boolean value. Uses the `html()` method with a boolean parameter.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('description')\n    ->html(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Listing Values with Conditional Bullet Points\nDESCRIPTION: Conditionally adds bullet points to each item in a list of values based on a boolean value. Uses the `bulleted()` method with a boolean parameter.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('authors.name')\n    ->bulleted(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Customizing Model Label - PHP\nDESCRIPTION: This code snippet demonstrates how to customize the model label in Filament using the `$modelLabel` property. This label is used in the UI and can be set as a static property within the resource class. It replaces the automatically generated label based on the model name.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?string $modelLabel = 'cliente';\n```\n\n----------------------------------------\n\nTITLE: Ignoring Blank State for Import Column - Filament PHP\nDESCRIPTION: This snippet shows how to ignore blank state for an import column using the `ignoreBlankState()` method. If a column in the CSV is blank, the existing value in the database will be used instead of importing as `null`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('price')\n    ->ignoreBlankState()\n```\n\n----------------------------------------\n\nTITLE: Accessing Component State in Blade View (Blade)\nDESCRIPTION: This snippet demonstrates how to access the state of another component in the schema within a Blade view using the `$get()` function. This allows dynamic display of information based on other form field values. Note that this is not reactive unless the field is `live()`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/07-custom-components.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    {{ $get('email') }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Icon Position for Filament Action (PHP)\nDESCRIPTION: This code demonstrates how to change the position of the icon on an action's trigger button to be after the label instead of before it, using the `iconPosition()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Support\\Enums\\IconPosition;\n\nAction::make('edit')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n    ->icon('heroicon-m-pencil-square')\n    ->iconPosition(IconPosition::After)\n```\n\n----------------------------------------\n\nTITLE: Section Icon Size - Blade\nDESCRIPTION: Shows how to change the size of the section icon using the `icon-size` attribute. The available sizes are `sm` (small) and `md` (medium), defaulting to `large`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-section.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::section\n    icon=\"heroicon-m-user\"\n    icon-size=\"sm\"\n>\n    <x-slot name=\"heading\">\n        User details\n    </x-slot>\n\n    {{-- Content --}}\n</x-filament::section>\n\n<x-filament::section\n    icon=\"heroicon-m-user\"\n    icon-size=\"md\"\n>\n    <x-slot name=\"heading\">\n        User details\n    </x-slot>\n\n    {{-- Content --}}\n</x-filament::section>\n```\n\n----------------------------------------\n\nTITLE: Setting Navigation Badge Tooltip - Property\nDESCRIPTION: This code snippet demonstrates how to set a custom tooltip for the navigation badge using the `$navigationBadgeTooltip` property. No dependencies are required beyond a Filament resource or page class. The expected output is a navigation item badge which displays the specified tooltip on hover.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nprotected static ?string $navigationBadgeTooltip = 'The number of users';\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Route Path for a Filament Dashboard\nDESCRIPTION: This code snippet demonstrates how to define a custom URL path for an extra Filament dashboard. It sets the `$routePath` property, which determines the URL for accessing the dashboard (e.g., `/finance`). This allows creating multiple dashboards with different URLs.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/01-overview.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nprotected static string $routePath = 'finance';\n```\n\n----------------------------------------\n\nTITLE: Conditionally positioning heading and description aside\nDESCRIPTION: This example illustrates how to conditionally set the aside layout based on a boolean value (e.g., a feature flag) using the `aside()` method. It provides dynamic control over the section layout.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/03-sections.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Section;\n\nSection::make('Rate limiting')\n    ->description('Prevent abuse by limiting the number of requests per period')\n    ->aside(FeatureFlag::active())\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Registering a Color Palette in Filament v4 Panel (PHP)\nDESCRIPTION: This code snippet demonstrates how to register a color palette in a Filament v4 panel.  This is required before using the color in components like actions, columns, or infolist entries. The code defines a 'ruby' color with multiple shades and registers it within the panel configuration.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\nuse Filament\\Support\\Colors\\Color;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->colors([\n            'ruby' => [\n                50 => '254, 242, 242',\n                100 => '254, 226, 226',\n                200 => '254, 202, 202',\n                300 => '252, 165, 165',\n                400 => '248, 113, 113',\n                500 => '239, 68, 68',\n                600 => '220, 38, 38',\n                700 => '185, 28, 28',\n                800 => '153, 27, 27',\n                900 => '127, 29, 29',\n                950 => '69, 10, 10',\n            ],\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Create Button to Filament Header (PHP)\nDESCRIPTION: This snippet moves the default \"Create\" button from the form to the header of the Filament page. It overrides `getHeaderActions` and calls `getCreateFormAction()`, passing `formId('form')` to ensure the action submits the form.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nprotected function getHeaderActions(): array\n{\n    return [\n        $this->getCreateFormAction()\n            ->formId('form'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding action below form field content - PHP\nDESCRIPTION: This snippet demonstrates how to add a Filament action below the content of a text input using `belowContent()`. It creates a simple 'generate' action and associates it with the text input field. Requires the `Action` and `TextInput` classes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->belowContent(Action::make('generate'))\n```\n\n----------------------------------------\n\nTITLE: Conditional Record Reordering (PHP)\nDESCRIPTION: This code shows how to conditionally enable reordering based on a boolean condition using `$table->reorderable()`.  The second parameter allows enabling reordering based on a condition, such as user permissions.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->reorderable('sort', auth()->user()->isAdmin());\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing data before filling ViewAction form (PHP)\nDESCRIPTION: This code snippet demonstrates how to use the `mutateRecordDataUsing()` method to modify the data from a record before it's displayed in the ViewAction's form. In this example, the 'user_id' field in the `$data` array is set to the currently authenticated user's ID. The modified data is then returned.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/06-view.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\ViewAction;\n\nViewAction::make()\n    ->mutateRecordDataUsing(function (array $data): array {\n        $data['user_id'] = auth()->id();\n\n        return $data;\n    })\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML in TextColumn\nDESCRIPTION: Renders the column value as HTML using the `html()` method. Assumes the column's state contains HTML-formatted text, which will be sanitized.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('description')\n    ->html()\n```\n\n----------------------------------------\n\nTITLE: Disabling Closing Modal by Clicking Away - Blade\nDESCRIPTION: This code snippet demonstrates how to prevent a Filament modal from closing when clicking outside of it by setting the `close-by-clicking-away` attribute to `false`. The colon `:` before the attribute indicates that it is a dynamic attribute.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-modal.md#_snippet_15\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal :close-by-clicking-away=\"false\">\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Applying Container Breakpoints to columnSpan in FilamentPHP with PHP\nDESCRIPTION: This snippet illustrates how to apply container breakpoints to the `columnSpan()` method of a FilamentPHP TextInput component. It utilizes `gridContainer()` to define the container and sets the column span of the text input based on the container's width at different breakpoints (`@md`, `@xl`).  Depends on FilamentPHP components.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/02-layouts.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Grid;\nuse Filament\\Schemas\\Components\\TextInput;\n\nGrid::make()\n    ->gridContainer()\n    ->columns([\n        '@md' => 3,\n        '@xl' => 4,\n    ])\n    ->schema([\n        TextInput::make('name')\n            ->columnSpan([\n                '@md' => 2,\n                '@xl' => 3,\n            ]),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Implementing Filament Schema Interface (PHP)\nDESCRIPTION: This PHP code demonstrates how to implement the `HasSchemas` interface and use the `InteractsWithSchemas` trait in a Livewire component.  It is required to interact with Filament schemas within the Livewire component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-schema.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Concerns\\InteractsWithSchemas;\nuse Filament\\Schemas\\Contracts\\HasSchemas;\nuse Livewire\\Component;\n\nclass ViewProduct extends Component implements HasSchemas\n{\n    use InteractsWithSchemas;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Boolean Icon Colors (Filament, PHP)\nDESCRIPTION: This example shows how to customize the colors of the icons representing true and false states in a Filament Icon column. The `trueColor()` and `falseColor()` methods are used to set different colors for each state.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/03-icon.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\n\nIconColumn::make('is_featured')\n    ->boolean()\n    ->trueColor('info')\n    ->falseColor('warning')\n```\n\n----------------------------------------\n\nTITLE: Persisting Tab in Query String - PHP\nDESCRIPTION: Shows how to persist the current tab in the URL's query string using the `persistTabInQueryString()` method. You can optionally customize the query string parameter name.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/04-tabs.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Tabs;\nuse Filament\\Schemas\\Components\\Tabs\\Tab;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tab::make('Tab 1')\n            ->schema([\n                // ...\n            ]),\n        Tab::make('Tab 2')\n            ->schema([\n                // ...\n            ]),\n        Tab::make('Tab 3')\n            ->schema([\n                // ...\n            ]),\n    ])\n    ->persistTabInQueryString()\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Tabs;\nuse Filament\\Schemas\\Components\\Tabs\\Tab;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tab::make('Tab 1')\n            ->schema([\n                // ...\n            ]),\n        Tab::make('Tab 2')\n            ->schema([\n                // ...\n            ]),\n        Tab::make('Tab 3')\n            ->schema([\n                // ...\n            ]),\n    ])\n    ->persistTabInQueryString('settings-tab')\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Default Column Span for Layout Components\nDESCRIPTION: This code snippet demonstrates how to configure the default column span behavior of `Grid`, `Section`, and `Fieldset` components across the entire Filament application. It utilizes the `configureUsing` method within the `boot` method of a service provider to set `columnSpanFull()` as the default for all instances of these components. Requires the `Filament\\Forms\\Components\\Fieldset`, `Filament\\Forms\\Components\\Grid`, and `Filament\\Forms\\Components\\Section` classes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Fieldset;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Section;\n\nFieldset::configureUsing(fn (Fieldset $fieldset) => $fieldset\n    ->columnSpanFull());\n\nGrid::configureUsing(fn (Grid $grid) => $grid\n    ->columnSpanFull());\n\nSection::configureUsing(fn (Section $section) => $section\n    ->columnSpanFull());\n```\n\n----------------------------------------\n\nTITLE: Inserting a Blade View into Filament Schema (PHP)\nDESCRIPTION: This snippet demonstrates how to insert a Blade view into a Filament schema using the `View::make()` method. It assumes the existence of a corresponding Blade template file. This allows for embedding custom UI elements within a Filament form or page using a standard Blade view.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/07-custom-components.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\View;\n\nView::make('filament.schemas.components.chart')\n```\n\n----------------------------------------\n\nTITLE: Allow Utility Injection\nDESCRIPTION: This PHP code modifies the `speed()` method and `getSpeed` method to allow utility injection. The parameter type of `speed()` allows a `Closure`, and `getSpeed` uses `$this->evaluate()` to handle static values or functions, injecting utilities as needed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/10-custom-columns.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Closure;\nuse Filament\\Tables\\Columns\\Column;\n\nclass AudioPlayerColumn extends Column\n{\n    protected string $view = 'filament.tables.columns.audio-player-column';\n    \n    protected float | Closure | null $speed = null;\n\n    public function speed(float | Closure | null $speed): static\n    {\n        $this->speed = $speed;\n\n        return $this;\n    }\n\n    public function getSpeed(): ?float\n    {\n        return $this->evaluate($this->speed);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Form Field Disabled - PHP\nDESCRIPTION: This snippet demonstrates how to assert that a Filament form field is disabled using `assertFormFieldDisabled()`. It requires the `Pest\\Livewire\\livewire` function. The example checks if the 'title' field is disabled. You can specify the form name as the second argument to `assertFormFieldDisabled` when there are multiple schemas.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\ntest('title is disabled', function () {\n    livewire(CreatePost::class)\n        ->assertFormFieldDisabled('title');\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Badge to Icon Button - Blade\nDESCRIPTION: This snippet shows how to add a badge to a Filament icon button using the `badge` slot. The content within the `<x-slot name=\"badge\">` tag will be displayed as the badge. Requires Filament.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-icon-button.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-x-mark\"\n    label=\"Mark notifications as read\"\n>\n    <x-slot name=\"badge\">\n        3\n    </x-slot>\n</x-filament::icon-button>\n```\n\n----------------------------------------\n\nTITLE: Making Wizard Steps Skippable\nDESCRIPTION: This snippet shows how to make all steps of the wizard skippable by utilizing the `skippableSteps()` method. All prior dependencies from the wizard example still apply.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/04-create.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\CreateAction;\n\nCreateAction::make()\n    ->steps([\n        // ...\n    ])\n    ->skippableSteps()\n```\n\n----------------------------------------\n\nTITLE: Setting Panel Font Provider (PHP)\nDESCRIPTION: This snippet demonstrates how to change the font provider used by Filament. It showcases the use of GoogleFontProvider and LocalFontProvider to serve fonts from Google's CDN or a local stylesheet, respectively.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/01-overview.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\FontProviders\\GoogleFontProvider;\n\n$panel->font('Inter', provider: GoogleFontProvider::class)\n\nuse Filament\\FontProviders\\LocalFontProvider;\n\n$panel->font(\n    'Inter',\n    url: asset('css/fonts.css'),\n    provider: LocalFontProvider::class,\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Ignore Record by Default in Unique Validation\nDESCRIPTION: This code demonstrates how to revert the default behavior of the `unique()` validation rule in Filament v4, where it now ignores the current record by default.  This snippet shows how to disable this behavior for a specific field by using `ignoreRecord: false`.  Requires the `Filament\\Forms\\Components\\Field` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Field;\n\nField::configureUsing(fn (Field $field) => $field\n    ->uniqueValidationIgnoresRecordByDefault(false));\n```\n\n----------------------------------------\n\nTITLE: Extending PackageServiceProvider in Filament Plugin\nDESCRIPTION: This PHP code demonstrates how to upgrade a plugin service provider to extend `PackageServiceProvider` and define the `$name` property. This is required for Filament to properly register the plugin. The `configurePackage` method is also implemented to set the package name.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/11-plugins/01-getting-started.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass MyPluginServiceProvider extends PackageServiceProvider\n{\n    public static string $name = 'my-plugin';\n\n    public function configurePackage(Package $package): void\n    {\n        $package->name(static::$name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Boolean Icons - PHP\nDESCRIPTION: This code demonstrates how to customize the icons used to represent true and false states when using the `boolean()` method.  It sets `trueIcon` to `Heroicon::OutlinedCheckBadge` and `falseIcon` to `Heroicon::OutlinedXMark`. It requires importing `Heroicon`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/03-icon-entry.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\IconEntry;\nuse Filament\\Support\\Icons\\Heroicon;\n\nIconEntry::make('is_featured')\n    ->boolean()\n    ->trueIcon(Heroicon::OutlinedCheckBadge)\n    ->falseIcon(Heroicon::OutlinedXMark)\n```\n\n----------------------------------------\n\nTITLE: Custom Page View Blade Template - Blade\nDESCRIPTION: This is an example of a custom Blade template for the Edit page.  It includes the filament page wrapper and renders the content defined in the `content()` method of the page class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/04-editing-records.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament-panels::page>\n    {{-- `$this->getRecord()` will return the current Eloquent record for this page --}}\n    \n    {{ $this->content }} {{-- This will render the content of the page defined in the `content()` method, which can be removed if you want to start from scratch --}}\n</x-filament-panels::page>\n```\n\n----------------------------------------\n\nTITLE: Customizing the save notification in Filament (PHP)\nDESCRIPTION: This snippet shows how to customize the entire success notification using the `successNotification()` method. You can define the title, body, and other properties of the notification.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/05-edit.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\EditAction;\nuse Filament\\Notifications\\Notification;\n\nEditAction::make()\n    ->successNotification(\n       Notification::make()\n            ->success()\n            ->title('User updated')\n            ->body('The user has been saved successfully.'),\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Sub-Navigation Position - PHP\nDESCRIPTION: This snippet illustrates how to set the position of the sub-navigation for a Filament page by defining the `$subNavigationPosition` property. It uses the `SubNavigationPosition` enum to specify the desired position. This example sets the sub-navigation to the end of the page.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Pages\\Enums\\SubNavigationPosition;\n\nprotected static ?SubNavigationPosition $subNavigationPosition = SubNavigationPosition::End;\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Avatar Provider\nDESCRIPTION: This code shows how to register the custom avatar provider within the Filament panel configuration. By setting `defaultAvatarProvider` to the `BoringAvatarsProvider::class`, Filament will use this provider for generating user avatars.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/01-overview.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse App\\Filament\\AvatarProviders\\BoringAvatarsProvider;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->defaultAvatarProvider(BoringAvatarsProvider::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Authentication Route Slugs in Filament\nDESCRIPTION: This snippet demonstrates how to customize the URL slugs for various authentication routes within a Filament panel, such as login, registration, password reset, and email verification. The configuration modifies the `loginRouteSlug`, `registrationRouteSlug`, `passwordResetRoutePrefix`, `passwordResetRequestRouteSlug`, `passwordResetRouteSlug`, `emailVerificationRoutePrefix`, `emailVerificationPromptRouteSlug`, `emailVerificationRouteSlug`, and `emailChangeVerificationRouteSlug` methods.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/01-overview.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->loginRouteSlug('login')\n        ->registrationRouteSlug('register')\n        ->passwordResetRoutePrefix('password-reset')\n        ->passwordResetRequestRouteSlug('request')\n        ->passwordResetRouteSlug('reset')\n        ->emailVerificationRoutePrefix('email-verification')\n        ->emailVerificationPromptRouteSlug('prompt')\n        ->emailVerificationRouteSlug('verify')\n        ->emailChangeVerificationRoutePrefix('email-change-verification')\n        ->emailChangeVerificationRouteSlug('verify');\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Broadcast Notification using Filament's Fluent API (PHP)\nDESCRIPTION: This code snippet demonstrates how to send a broadcast notification using Filament's fluent API. It creates a notification instance, sets the title, and then broadcasts it to a specified recipient (in this case, the authenticated user). It relies on Filament's `Notification` class and requires a configured broadcasting service like Pusher.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/03-broadcast-notifications.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\n$recipient = auth()->user();\n\nNotification::make()\n    ->title('Saved successfully')\n    ->broadcast($recipient);\n```\n\n----------------------------------------\n\nTITLE: Defining a custom Filament infolist entry class\nDESCRIPTION: This code defines a custom entry class for Filament infolists, extending the base `Entry` class. It sets the `$view` property to specify the Blade view file to be used for rendering the entry.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/08-custom-entries.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Entry;\n\nclass AudioPlayerEntry extends Entry\n{\n    protected string $view = 'filament.infolists.components.audio-player-entry';\n}\n```\n\n----------------------------------------\n\nTITLE: Overwriting global configuration on a field\nDESCRIPTION: Demonstrates how to overwrite a globally configured behavior on an individual field. The global configuration for Checkbox is to set `inline(false)`, but this snippet shows how to set `inline()` for a specific 'is_admin' checkbox.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_95\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Checkbox;\n\nCheckbox::make('is_admin')\n    ->inline()\n```\n\n----------------------------------------\n\nTITLE: Adding an icon to the section header\nDESCRIPTION: This example demonstrates how to add an icon to the section's header using the `icon()` method with an icon from the `Heroicon` set. It enhances visual identification of the section.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/03-sections.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Section;\nuse Filament\\Support\\Icons\\Heroicon;\n\nSection::make('Cart')\n    ->description('The items you have selected for purchase')\n    ->icon(Heroicon::ShoppingBag)\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding a Field's Label\nDESCRIPTION: This shows how to conditionally hide a field's label based on a boolean value using the `hiddenLabel()` method. This allows for dynamic control over label visibility based on conditions such as feature flags.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->hiddenLabel(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Color - PHP\nDESCRIPTION: This snippet demonstrates how to customize the color of an icon in a TextColumn, independent of the text color. The `iconColor()` method allows setting a static color, or dynamically calculating it with a function.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTextColumn::make('email')\n    ->icon(Heroicon::Envelope)\n    ->iconColor('primary')\n```\n\n----------------------------------------\n\nTITLE: Conditional Declined Validation - Filament PHP\nDESCRIPTION: This snippet demonstrates how to conditionally apply the `declined()` validation rule based on a feature flag. The `declined()` method accepts a boolean value to control whether the validation rule is active. This enables dynamic enabling or disabling of the validation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/04-checkbox.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Checkbox;\n\nCheckbox::make('is_under_18')\n    ->declined(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Initializing a Textarea Component - PHP\nDESCRIPTION: This code initializes a basic Textarea component named 'description' using the Filament Forms library. It demonstrates the fundamental usage of the Textarea component for multi-line string input in a form.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/15-textarea.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Textarea;\n\nTextarea::make('description')\n```\n\n----------------------------------------\n\nTITLE: Rendering a Submit Button on the Last Step (PHP)\nDESCRIPTION: This snippet shows how to render a submit button specifically on the last step of the Filament Wizard. It demonstrates two approaches: using a Blade view and directly creating an HtmlString.  This requires Filament and Illuminate\\Support\\HtmlString.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/05-wizards.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Wizard;\nuse Illuminate\\Support\\HtmlString;\n\nWizard::make([\n    // ...\n])->submitAction(view('order-form.submit-button'))\n\nWizard::make([\n    // ...\n])->submitAction(new HtmlString('<button type=\"submit\">Submit</button>'))\n```\n\n----------------------------------------\n\nTITLE: Supporting Older Browsers with Fallback Breakpoints in FilamentPHP with PHP\nDESCRIPTION: This snippet demonstrates how to support older browsers that do not support container queries by defining fallback breakpoints using the `!@` prefix.  It defines column counts for both container-query-supporting browsers (`@md`, `@xl`) and older browsers (`!@md`, `!@xl`). Requires FilamentPHP.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/02-layouts.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Grid;\n\nGrid::make()\n    ->gridContainer()\n    ->columns([\n        '@md' => 3,\n        '@xl' => 4,\n        '!@md' => 2,\n        '!@xl' => 3,\n    ])\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Importing Chart.js Plugin - JavaScript\nDESCRIPTION: This snippet imports the `chartjs-plugin-datalabels` plugin and adds it to the `window.filamentChartJsPlugins` array.  This makes the plugin accessible to Filament's chart rendering engine.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/03-charts.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport ChartDataLabels from 'chartjs-plugin-datalabels'\n\nwindow.filamentChartJsPlugins ??= []\nwindow.filamentChartJsPlugins.push(ChartDataLabels)\n```\n\n----------------------------------------\n\nTITLE: Validating Toggle is Declined (Off) in Filament - PHP\nDESCRIPTION: This snippet shows how to validate that the Toggle component is in the 'off' state using the `declined()` method. It ensures that the user is not under 18.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/05-toggle.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('is_under_18')\n    ->declined()\n```\n\n----------------------------------------\n\nTITLE: Defining Settings Class (PHP)\nDESCRIPTION: This code snippet shows how to link a settings page to its corresponding settings class. The static `$settings` property is assigned the fully qualified class name of the settings class, allowing Filament to manage and interact with the settings.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-settings-plugin/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected static string $settings = FooterSettings::class;\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Attributes - Filament PHP\nDESCRIPTION: This snippet demonstrates adding extra HTML attributes to a Filament form field using the `extraAttributes()` method. It adds a 'title' attribute to the TextInput field.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->extraAttributes(['title' => 'Text input'])\n```\n\n----------------------------------------\n\nTITLE: Adding Configuration Method to Custom Component (PHP)\nDESCRIPTION: This snippet demonstrates adding a configuration method (`heading()`) to a custom Filament schema component class. This allows configuring the component using a fluent interface.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/07-custom-components.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Component;\n\nclass Chart extends Component\n{\n    protected string $view = 'filament.schemas.components.chart';\n    \n    protected ?string $heading = null;\n\n    public static function make(): static\n    {\n        return app(static::class);\n    }\n\n    public function heading(?string $heading): static\n    {\n        $this->heading = $heading;\n\n        return $this;\n    }\n\n    public function getHeading(): ?string\n    {\n        return $this->heading;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Builder Item Counts in Filament Forms (PHP)\nDESCRIPTION: Demonstrates how to assert the number of items in a builder using a function within `assertSchemaStateSet()`.  It asserts that the 'content' array in the form state has a specific count. Requires the `EditPost` Livewire component and the `Builder` component. The `Builder::fake()` method is used to disable UUID generation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\nuse function Pest\\Livewire\\livewire;\n\n$undoBuilderFake = Builder::fake();\n\nlivewire(EditPost::class, ['record' => $post])\n    ->assertSchemaStateSet(function (array $state) {\n        expect($state['content'])\n            ->toHaveCount(2);\n    });\n\n$undoBuilderFake();\n```\n\n----------------------------------------\n\nTITLE: Setting the Default Active Step (PHP)\nDESCRIPTION: This example shows how to set the default active step when the Filament Wizard is initialized using the `startOnStep()` method. The step number is 1-indexed. Requires Filament.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/05-wizards.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Wizard;\n\nWizard::make([\n    // ...\n])->startOnStep(2)\n```\n\n----------------------------------------\n\nTITLE: Disabling Restore Notification in Filament (PHP)\nDESCRIPTION: This snippet shows how to disable the success notification altogether after a record has been successfully restored. This is achieved by passing `null` to the `successNotification()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/10-restore.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\RestoreAction;\n\nRestoreAction::make()\n    ->successNotification(null)\n```\n\n----------------------------------------\n\nTITLE: Simple and Cursor Pagination in Laravel\nDESCRIPTION: This PHP snippet demonstrates the usage of `simplePaginate` and `cursorPaginate` methods in Laravel Eloquent queries. These methods are alternatives to `paginate` and provide simpler pagination options, rendering only 'previous' and 'next' buttons. Dependencies: `App\\Models\\User`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-pagination.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\User;\n\nUser::query()->simplePaginate(10)\nUser::query()->cursorPaginate(10)\n```\n\n----------------------------------------\n\nTITLE: Changing Modal Width - Blade\nDESCRIPTION: This code snippet demonstrates how to change the width of a Filament modal using the `width` attribute.  The `width` attribute accepts Tailwind's max-width scale values; in this case, '5xl' is used to specify the desired width.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-modal.md#_snippet_14\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal width=\"5xl\">\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Asserting Schema Component Existence - PHP\nDESCRIPTION: This snippet demonstrates how to assert that a Filament schema component exists using `asserSchemaComponentExists()`. It requires the `Pest\\Livewire\\livewire` function and relies on the component's `key()`. The example checks for the 'comments-section' component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\ntest('comments section exists', function () {\n    livewire(EditPost::class)\n        ->asserSchemaComponentExists('comments-section');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Brand Logo Height in Filament (PHP)\nDESCRIPTION: This snippet shows how to customize the height of the logo in a Filament panel using the `brandLogoHeight()` method. It accepts a CSS length value (e.g., '2rem').\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/01-overview.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->brandLogo(fn () => view('filament.admin.logo'))\n        ->brandLogoHeight('2rem');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting timezone for date formatting in Filament Infolists (PHP)\nDESCRIPTION: This snippet sets the timezone for date formatting using the `dateTime()` method with the `timezone` argument, and using the `timezone()` method before calling `dateTime()` to apply it to all date-time methods, allowing the conversion of the time displayed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('created_at')\n    ->dateTime(timezone: 'America/New_York')\n\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('created_at')\n    ->timezone('America/New_York')\n    ->dateTime()\n```\n\n----------------------------------------\n\nTITLE: Setting the Storage Disk for File Upload\nDESCRIPTION: This code snippet demonstrates how to manually set the storage disk for the file upload component using the `disk()` method. This overrides the default disk configured in Filament or the environment.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('attachment')\n    ->disk('s3')\n```\n\n----------------------------------------\n\nTITLE: Injecting the Current Operation - PHP\nDESCRIPTION: This code snippet shows how to inject the current operation (create, edit, or view) into a schema using the `$operation` parameter. This allows components to adjust their behavior based on the current operation being performed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/01-overview.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction (string $operation) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Notification Title After Creation in Filament (PHP)\nDESCRIPTION: This snippet illustrates how to customize the title of the success notification displayed after a record is created in Filament using the `getCreatedNotificationTitle()` method.  It returns a string representing the desired title for the notification.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nprotected function getCreatedNotificationTitle(): ?string\n{\n    return 'User registered';\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Job Backoff Strategy - Filament Import (PHP)\nDESCRIPTION: This code snippet shows how to customize the backoff strategy for import jobs by overriding the `getJobBackoff()` method. It defines an array of backoff intervals in seconds.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_56\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n* @return int | array<int> | null\n */\npublic function getJobBackoff(): int | array | null\n{\n    return [60, 120, 300, 600];\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Authorization Mode for Filament Panel (PHP)\nDESCRIPTION: This snippet demonstrates how to enable strict authorization mode for a Filament panel using the `strictAuthorization()` method. This forces Filament to throw an exception if a policy or policy method does not exist.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/05-panel-configuration.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->strictAuthorization();\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting multiple utilities in Filament\nDESCRIPTION: This code snippet demonstrates how to inject multiple utilities into a Filament form function using reflection. It requires Filament\\Schemas\\Components\\Utilities\\Get, Filament\\Schemas\\Components\\Utilities\\Set, and Livewire\\Component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_61\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Utilities\\Get;\nuse Filament\\Schemas\\Components\\Utilities\\Set;\nuse Livewire\\Component as Livewire;\n\nfunction (Livewire $livewire, Get $get, Set $set) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Making Modal Footer Sticky - Blade\nDESCRIPTION: This code snippet demonstrates how to make the footer of a Filament modal sticky using the `sticky-footer` attribute. When set, the footer remains visible even when the modal content is scrolled.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-modal.md#_snippet_13\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal sticky-footer>\n    {{-- Modal content --}}\n    \n    <x-slot name=\"footer\">\n        {{-- Modal footer content --}}\n    </x-slot>\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Boolean Icons (Filament, PHP)\nDESCRIPTION: This example shows how to conditionally enable boolean icon representation.  The `boolean()` method accepts a boolean value which determines whether the boolean icons are active or not.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/03-icon.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\n\nIconColumn::make('is_featured')\n    ->boolean(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Adding Tag Suffix - PHP\nDESCRIPTION: Adds a suffix to each tag displayed in the TagsInput component without modifying the underlying data. The `tagSuffix()` method takes a string as input.  It accepts a static value or a function to dynamically calculate it.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/14-tags-input.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TagsInput;\n\nTagsInput::make('percentages')\n    ->tagSuffix('%')\n```\n\n----------------------------------------\n\nTITLE: Conditional Copy to Clipboard (PHP)\nDESCRIPTION: This snippet demonstrates how to conditionally enable or disable the copy-to-clipboard functionality using a boolean value or a dynamic feature flag with the `copyable()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('email')\n    ->copyable(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Limiting Text Length (PHP)\nDESCRIPTION: This code demonstrates how to limit the length of the summary's value using the `limit()` method.  This limits the 'sku' column summary to a maximum length of 5 characters.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Range;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('sku')\n    ->summarize(Range::make()->limit(5))\n```\n\n----------------------------------------\n\nTITLE: Setting Brand Logo in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to set an image as the logo in a Filament panel using the `brandLogo()` method. It passes the URL of the image file (e.g., SVG, PNG) using the `asset()` helper function.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/01-overview.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->brandLogo(asset('images/logo.svg'));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Tab Icon - PHP\nDESCRIPTION: Demonstrates how to add an icon to a Filament Tab using the `icon()` method. It requires the `Filament\\Support\\Icons\\Heroicon` class for specifying the icon.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/04-tabs.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Tabs;\nuse Filament\\Schemas\\Components\\Tabs\\Tab;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tab::make('Notifications')\n            ->icon(Heroicon::Bell)\n            ->schema([\n                // ...\n            ]),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Limiting Number of List Values\nDESCRIPTION: Limits the number of values displayed in a list using the `limitList()` method. This example limits the list to 3 values. Requires `listWithLineBreaks()` to display items.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('authors.name')\n    ->listWithLineBreaks()\n    ->limitList(3)\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle Hooks in Filament (PHP)\nDESCRIPTION: This code snippet shows how to use the `bootUsing()` lifecycle hook to execute code during a Filament panel's lifecycle. This hook is run on every request within the panel, after all service providers have been booted.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/05-panel-configuration.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->bootUsing(function (Panel $panel) {\n            // ...\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Grid Container in FilamentPHP with PHP\nDESCRIPTION: This code snippet demonstrates how to define a grid container in FilamentPHP using the `gridContainer()` method. The container is used to apply container queries for responsive layouts based on the container's width. It initializes a `Grid` component and sets it as a container.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/02-layouts.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Grid;\n\nGrid::make()\n    ->gridContainer()\n    ->columns([\n        // ...\n    ])\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting the size of a Filament Badge\nDESCRIPTION: This snippet shows how to set the size of a Filament badge using the `size` attribute. It includes examples for 'extra small' (`xs`) and 'small' (`sm`) sizes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-badge.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::badge size=\"xs\">\n    New\n</x-filament::badge>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::badge size=\"sm\">\n    New\n</x-filament::badge>\n```\n\n----------------------------------------\n\nTITLE: Customizing Page Content\nDESCRIPTION: This snippet demonstrates how to customize the content of the FilamentPHP List page by overriding the `content()` method and manipulating the schema. It shows how to add, reorder, or remove components within the `components()` array, allowing for complete control over the page's structure. Requires `Filament\\Schemas\\Components\\EmbeddedTable`, `Filament\\Schemas\\Components\\RenderHook`, and `Filament\\Schemas\\Schema`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/02-listing-records.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\EmbeddedTable;\nuse Filament\\Schemas\\Components\\RenderHook;\nuse Filament\\Schemas\\Schema;\n\npublic function content(Schema $schema): Schema\n{\n    return $schema\n        ->components([\n            $this->getTabsContentComponent(), // This method returns a component to display the tabs above a table\n            RenderHook::make(PanelsRenderHook::RESOURCE_PAGES_LIST_RECORDS_TABLE_BEFORE),\n            EmbeddedTable::make(), // This is the component that renders the table that is defined in this resource\n            RenderHook::make(PanelsRenderHook::RESOURCE_PAGES_LIST_RECORDS_TABLE_AFTER),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an icon to Text Entry in Filament Infolists (PHP)\nDESCRIPTION: This code snippet demonstrates how to add an icon to a TextEntry component in Filament Infolists using the `icon()` method. It utilizes a Heroicon. The `icon()` method also accepts a function for dynamic icon selection.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTextEntry::make('email')\n    ->icon(Heroicon::Envelope)\n```\n\n----------------------------------------\n\nTITLE: Calculating Range (PHP)\nDESCRIPTION: This code snippet shows how to calculate the minimum and maximum value in a dataset using the `Range` summarizer. It applies the summarizer to the 'price' column to find the price range.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Range;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('price')\n    ->summarize(Range::make())\n```\n\n----------------------------------------\n\nTITLE: Changing Badge Color - Blade\nDESCRIPTION: This example demonstrates how to change the color of a badge on a Filament icon button using the `badge-color` attribute. The badge color can be set to options like \"danger\". Requires Filament.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-icon-button.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-x-mark\"\n    label=\"Mark notifications as read\"\n    badge-color=\"danger\"\n>\n    <x-slot name=\"badge\">\n        3\n    </x-slot>\n</x-filament::icon-button>\n```\n\n----------------------------------------\n\nTITLE: Using PanelsRenderHook class in Filament\nDESCRIPTION: Illustrates the use of `Filament\\View\\PanelsRenderHook` class. This class contains constants that represent various locations in the Filament panel where content can be injected using render hooks. The constants are used as the first argument to the `FilamentView::registerRenderHook` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/01-render-hooks.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\View\\PanelsRenderHook;\n```\n\n----------------------------------------\n\nTITLE: Setting Block Icon\nDESCRIPTION: This snippet demonstrates how to add an icon to a block using the `icon()` method. It uses the `Heroicon` class to specify the icon. The icon is displayed next to the label in the builder's interface, improving visual identification of block types.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder\\Block;\nuse Filament\\Support\\Icons\\Heroicon;\n\nBlock::make('paragraph')\n    ->icon(Heroicon::Bars3BottomLeft)\n```\n\n----------------------------------------\n\nTITLE: Dividing Value Before Money Formatting\nDESCRIPTION: Divides the original value before formatting it as money using the `money()` method in Filament Infolists. The `divideBy` argument specifies the divisor. Accepts both static values and functions for dynamic calculation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('price')\n    ->money('EUR', divideBy: 100)\n```\n\n----------------------------------------\n\nTITLE: Disable Column Growth in Split - Filament PHP\nDESCRIPTION: This example demonstrates how to prevent a column within a `Split` component from growing to fill available whitespace.  The `grow(false)` method is applied to the 'avatar' image, ensuring it sits tightly against the 'name' column.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/05-layout.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\FontWeight;\nuse Filament\\Tables\\Columns\\Layout\\Split;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nSplit::make([\n    ImageColumn::make('avatar')\n        ->circular()\n        ->grow(false),\n    TextColumn::make('name')\n        ->weight(FontWeight::Bold)\n        ->searchable()\n        ->sortable(),\n    TextColumn::make('email'),\n])\n```\n\n----------------------------------------\n\nTITLE: Customizing the Label of an Import Column\nDESCRIPTION: This code snippet demonstrates how to customize the label of an import column using the `label()` method. This allows you to specify a more user-friendly label for the column in the import mapping interface.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('sku')\n    ->label('SKU')\n```\n\n----------------------------------------\n\nTITLE: Grouping Navigation Items - PHP\nDESCRIPTION: This code snippet demonstrates grouping navigation items under a common label using the `$navigationGroup` property. This property accepts a string, which becomes the group's label in the navigation menu.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?string $navigationGroup = 'Shop';\n```\n\n----------------------------------------\n\nTITLE: Disabling Search Term Splitting in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to disable the splitting of search terms into individual words in global search by setting the `$shouldSplitGlobalSearchTerms` property to `false` on the resource. Disabling splitting can improve performance with large datasets.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/09-global-search.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?bool $shouldSplitGlobalSearchTerms = false;\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Color (Filament, PHP)\nDESCRIPTION: This snippet showcases how to set a static color for an Icon column in Filament. The `color()` method is used to apply the 'success' color to all icons in the column.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/03-icon.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\n\nIconColumn::make('status')\n    ->color('success')\n```\n\n----------------------------------------\n\nTITLE: Returning Raw JavaScript for Chart Options - PHP\nDESCRIPTION: This snippet demonstrates how to return raw JavaScript for chart options, allowing for the use of JavaScript callback functions within the configuration. This is useful for more advanced customization, such as formatting y-axis labels with currency symbols.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/03-charts.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Filament\\Support\\RawJs;\n\nprotected function getOptions(): RawJs\n{\n    return RawJs::make(<<<JS\n        {\n            scales: {\n                y: {\n                    ticks: {\n                        callback: (value) => '€' + value,\n                    },\n                },\n            },\n        }\n    JS);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Button Trigger Style in Filament (PHP)\nDESCRIPTION: This code sets the trigger style of an action to 'button'. Button triggers have a background color and label.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('edit')\n    ->button()\n```\n\n----------------------------------------\n\nTITLE: Using Heroicons in Filament (PHP)\nDESCRIPTION: Demonstrates how to use Heroicons, which are included by default in Filament, within PHP components such as Actions and Toggle. It shows how to reference the outlined and solid variants of an icon using the `Heroicon` enum class, and leverages IDE autocompletion.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/04-icons.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Forms\\Components\\Toggle;\nuse Filament\\Support\\Icons\\Heroicon;\n\nAction::make('star')\n    ->icon(Heroicon::OutlinedStar)\n    \nToggle::make('is_starred')\n    ->onIcon(Heroicon::Star)\n```\n\n----------------------------------------\n\nTITLE: Testing Table Column Formatted State with Pest\nDESCRIPTION: This code snippet demonstrates testing formatted column states using `assertTableColumnFormattedStateSet()` and `assertTableColumnFormattedStateNotSet()`. It verifies that the formatted state of the 'author.name' column is correctly set to 'Smith, John' for a post with the name 'John Smith'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/03-testing-tables.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can get post author names', function () {\n    $post = Post::factory(['name' => 'John Smith'])->create();\n\n    livewire(PostResource\\Pages\\ListPosts::class)\n        ->assertTableColumnFormattedStateSet('author.name', 'Smith, John', record: $post)\n        ->assertTableColumnFormattedStateNotSet('author.name', $post->author->name, record: $post);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Navigation Icon Dynamically - PHP\nDESCRIPTION: This code demonstrates setting the navigation icon dynamically with the `getNavigationIcon()` method, returning the name of a Blade component for the icon. It leverages Htmlable for rendering.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse BackedEnum;\nuse Illuminate\\Contracts\\Support\\Htmlable;\n\npublic static function getNavigationIcon(): string | BackedEnum | Htmlable | null\n{\n    return 'heroicon-o-user-group';\n}\n```\n\n----------------------------------------\n\nTITLE: Access Eloquent Record in Blade\nDESCRIPTION: This Blade snippet shows how to access the current table row's Eloquent record within the view. The `$record` variable provides access to the model instance for the row, allowing access to its attributes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/10-custom-columns.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    {{ $record->name }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing a Simple Text Column - PHP\nDESCRIPTION: This snippet demonstrates the basic initialization of a TextColumn in Filament, displaying the 'title' field from the data source. It provides a simple way to show textual data in a table.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('title')\n```\n\n----------------------------------------\n\nTITLE: Setting Prefix Icon Color - PHP\nDESCRIPTION: This code snippet shows how to set the color of the prefix icon in a Filament TimePicker component using the `prefixIconColor()` method. It sets the color to 'success'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/08-date-time-picker.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TimePicker;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTimePicker::make('at')\n    ->prefixIcon(Heroicon::CheckCircle)\n    ->prefixIconColor('success')\n```\n\n----------------------------------------\n\nTITLE: Customizing Word Count Truncation End String (PHP)\nDESCRIPTION: This snippet demonstrates how to customize the string appended to the end of truncated text when using `words()` using the `end` argument.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('description')\n    ->words(10, end: ' (more)')\n```\n\n----------------------------------------\n\nTITLE: Installing Filament Form Builder\nDESCRIPTION: This command installs the Filament Form Builder package using Composer. The Form Builder simplifies creating interactive forms in Livewire components with a range of pre-built components. It requires Composer to be installed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require filament/forms\n```\n\n----------------------------------------\n\nTITLE: Customizing Chart Color - PHP\nDESCRIPTION: This example demonstrates how to customize the color of the chart data by setting the `$color` property.  By default, filament provides a set of common colors (primary, secondary, info, success, warning, danger).  You can further customize the chart appearance by directly setting the `backgroundColor` and `borderColor` within the data array.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/03-charts.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected string $color = 'info';\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nprotected function getData(): array\n{\n    return [\n        'datasets' => [\n            [\n                'label' => 'Blog posts created',\n                'data' => [0, 10, 5, 2, 21, 32, 45, 74, 65, 45, 77, 89],\n                'backgroundColor' => '#36A2EB',\n                'borderColor' => '#9BD0F5',\n            ],\n        ],\n        'labels' => ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Notification Alignment - PHP\nDESCRIPTION: This code snippet shows how to configure the horizontal and vertical alignment of Filament notifications. It uses the `Notifications::alignment()` and `Notifications::verticalAlignment()` methods to set the alignment.  Dependencies include `Filament\\Notifications\\Livewire\\Notifications`, `Filament\\Support\\Enums\\Alignment`, and `Filament\\Support\\Enums\\VerticalAlignment`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/01-overview.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Livewire\\Notifications;\nuse Filament\\Support\\Enums\\Alignment;\nuse Filament\\Support\\Enums\\VerticalAlignment;\n\nNotifications::alignment(Alignment::Start);\nNotifications::verticalAlignment(VerticalAlignment::End);\n```\n\n----------------------------------------\n\nTITLE: Conditional Text Wrapping (PHP)\nDESCRIPTION: This snippet demonstrates how to conditionally enable or disable text wrapping using a boolean value or a dynamic feature flag with the `wrap()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('description')\n    ->wrap(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Injecting Laravel container dependencies in Filament\nDESCRIPTION: This code snippet shows how to inject dependencies from Laravel's container alongside Filament utilities. Requires Filament\\Schemas\\Components\\Utilities\\Set and Illuminate\\Http\\Request.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_62\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Utilities\\Set;\nuse Illuminate\\Http\\Request;\n\nfunction (Request $request, Set $set) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Text Wrapping in Filament Text Column (PHP)\nDESCRIPTION: This snippet demonstrates how to enable text wrapping in a Filament TextColumn using the `wrap()` method. By default, text does not wrap to the next line.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('description')\n    ->wrap()\n```\n\n----------------------------------------\n\nTITLE: Using Other Icon Sets in Filament (PHP)\nDESCRIPTION: Explains how to integrate other icon sets (besides Heroicons) into Filament. It assumes the desired icon set is installed and shows how to use the icon's name directly in PHP components.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/04-icons.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Forms\\Components\\Toggle;\n\nAction::make('star')\n    ->icon('iconic-star')\n    \nToggle::make('is_starred')\n    ->onIcon('iconic-check-circle')\n```\n\n----------------------------------------\n\nTITLE: Hide Tenant Menu\nDESCRIPTION: This code snippet demonstrates how to hide the entire tenant menu using the `tenantMenu(false)` method in the panel configuration. It removes the tenant switching menu from the admin layout. Dependency: `Filament\\Panel`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantMenu(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table Widget in Filament\nDESCRIPTION: This command creates a new table widget using the Artisan command-line tool. The `--table` option specifies that a table widget should be created.  It generates a base file which can be further customized using Filament's table features.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/01-overview.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-widget LatestOrders --table\n```\n\n----------------------------------------\n\nTITLE: Adding a Table Description (PHP)\nDESCRIPTION: This code adds a description to a Filament table, displayed below the heading. It uses the `$table->description()` method to set the description text.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->heading('Clients')\n        ->description('Manage your clients here.')\n        ->columns([\n            // ...\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Disabling modal close on clicking away - Filament\nDESCRIPTION: This code snippet shows how to disable closing a modal by clicking away from it using the `closeModalByClickingAway(false)` method. This prevents the modal from closing when the user clicks outside of it.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('updateAuthor')\n    ->schema([\n        // ...\n    ])\n    ->action(function (array $data): void {\n        // ...\n    })\n    ->closeModalByClickingAway(false)\n```\n\n----------------------------------------\n\nTITLE: Filament Pagination Blade Component Usage\nDESCRIPTION: This Blade snippet shows how to use the `<x-filament::pagination>` component to render pagination links for the `$users` paginator. The `$users` variable should be a Paginator instance passed from the Livewire component.  No specific dependencies beyond the Filament package.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-pagination.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::pagination :paginator=\"$users\" />\n```\n\n----------------------------------------\n\nTITLE: Authenticating User in Pest beforeEach - PHP\nDESCRIPTION: This snippet demonstrates how to authenticate a user using the `beforeEach()` function in Pest. It creates a new user using the factory and then authenticates that user using the `actingAs()` helper function. This is done before each test case.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/02-testing-resources.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\User;\n\nbeforeEach(function () {\n    $user = User::factory()->create();\n\n    actingAs($user);\n});\n```\n\n----------------------------------------\n\nTITLE: Allowing Multiple Selections in ToggleButtons (PHP)\nDESCRIPTION: This snippet enables multiple selections in the ToggleButtons component using the `multiple()` method. It also includes an example of defining an array cast in an Eloquent model to properly store the selected values.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/18-toggle-buttons.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\n\nToggleButtons::make('technologies')\n    ->multiple()\n    ->options([\n        'tailwind' => 'Tailwind CSS',\n        'alpine' => 'Alpine.js',\n        'laravel' => 'Laravel',\n        'livewire' => 'Laravel Livewire',\n    ])\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass App extends Model\n{\n    protected $casts = [\n        'technologies' => 'array',\n    ];\n\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\n\nToggleButtons::make('technologies')\n    ->multiple(FeatureFlag::active())\n    ->options([\n        'tailwind' => 'Tailwind CSS',\n        'alpine' => 'Alpine.js',\n        'laravel' => 'Laravel',\n        'livewire' => 'Laravel Livewire',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Accessing the Livewire component instance in Blade\nDESCRIPTION: This code shows how to access the current Livewire component instance inside a Blade view using the `$this` variable. It includes a use statement to import the `ConferencesRelationManager` class.  A conditional is then used to check if the current instance is an instance of `ConferencesRelationManager`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/08-custom-entries.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n@php\n    use Filament\\Resources\\Users\\RelationManagers\\ConferencesRelationManager;\n@endphp\n\n<x-dynamic-component\n    :component=\"$getEntryWrapperView()\"\n    :entry=\"$entry\"\n>\n    @if ($this instanceof ConferencesRelationManager)\n        You are editing conferences the of a user.\n    @endif\n</x-dynamic-component>\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Color - PHP\nDESCRIPTION: This snippet demonstrates how to customize the color of an IconEntry component using the `color()` method.  It sets a static color 'success' for the icon. The `color()` method accepts a string representing a color name defined in Filament's styling system.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/03-icon-entry.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\IconEntry;\n\nIconEntry::make('status')\n    ->color('success')\n```\n\n----------------------------------------\n\nTITLE: Rendering a Render Hook with Multiple Scopes - Blade\nDESCRIPTION: This snippet demonstrates how to render a render hook with multiple scopes in a Blade template, passing an array of scopes to the `renderHook()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/01-render-hooks.md#_snippet_11\n\nLANGUAGE: blade\nCODE:\n```\n{{ \\Filament\\Support\\Facades\\FilamentView::renderHook(\\Filament\\View\\PanelsRenderHook::PAGE_START, scopes: [static::class, \\App\\Filament\\Resources\\Users\\UserResource::class]) }}\n```\n\n----------------------------------------\n\nTITLE: Setting Empty State Description - Filament Table (PHP)\nDESCRIPTION: This code snippet demonstrates how to customize the description of the empty state in a Filament table using the `emptyStateDescription()` method. It requires the `Filament\\Tables\\Table` class. The method accepts a string as the new description text.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/08-empty-state.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->emptyStateDescription('Once you write your first post, it will appear here.');\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying All Collections in Image Column\nDESCRIPTION: This code snippet shows how to display media from all collections in the `SpatieMediaLibraryImageColumn` by using `allCollections()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\SpatieMediaLibraryImageColumn;\n\nSpatieMediaLibraryImageColumn::make('avatar')\n    ->allCollections()\n```\n\n----------------------------------------\n\nTITLE: Limiting Text Length of TextEntry - PHP\nDESCRIPTION: This snippet demonstrates how to limit the length of a text entry's value using the `limit()` method. It truncates the text to a maximum of 50 characters.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('description')\n    ->limit(50)\n```\n\n----------------------------------------\n\nTITLE: Setting Link Trigger Style in Filament (PHP)\nDESCRIPTION: This code sets the trigger style of an action to 'link'. Link triggers have no background color and look like a link within text.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/01-overview.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('edit')\n    ->link()\n```\n\n----------------------------------------\n\nTITLE: Saving Form Data to Individual Properties\nDESCRIPTION: This PHP code demonstrates how to save form data to individual properties instead of using a `$data` array.  Ensure that all your fields have public properties on the class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-form.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\MarkdownEditor;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Schema;\n\npublic ?string $title = null;\n\npublic ?string $content = null;\n\npublic function form(Schema $schema): Schema\n{\n    return $schema\n        ->components([\n            TextInput::make('title')\n                ->required(),\n            MarkdownEditor::make('content'),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Filament Widgets\nDESCRIPTION: This command installs the Filament Widgets package using Composer. The Widgets package is built upon Livewire's core principles of real-time reactivity with the server. It requires Composer to be installed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/README.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require filament/widgets\n```\n\n----------------------------------------\n\nTITLE: Creating Notifications Table - Laravel\nDESCRIPTION: This code snippet demonstrates how to create the notifications table in Laravel. The first command is for Laravel 11 and higher, while the second is for Laravel 10.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/02-database-notifications.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Laravel 11 and higher\nphp artisan make:notifications-table\n\n# Laravel 10\nphp artisan notifications:table\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle Layout to Inline in Filament - PHP\nDESCRIPTION: This snippet shows how to set the layout of the Toggle component to 'inline' using the `inline()` method. This will display the label adjacent to the toggle.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/05-toggle.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('is_admin')\n    ->inline()\n```\n\n----------------------------------------\n\nTITLE: Conditional Line Breaks in List\nDESCRIPTION: Conditionally displays multiple values from an array with line breaks between each item using the `listWithLineBreaks()` method in a Filament Infolist TextEntry. Accepts both static values and functions for dynamic calculation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('authors.name')\n    ->listWithLineBreaks(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Disabling Breadcrumbs - PHP\nDESCRIPTION: This code snippet shows how to disable breadcrumbs in the Filament panel by passing `false` to the `breadcrumbs()` method in the panel configuration.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->breadcrumbs(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Bulk Toggle with Feature Flag - PHP\nDESCRIPTION: This code shows how to conditionally enable bulk toggling based on a feature flag.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/06-checkbox-list.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technologies')\n    ->options([\n        // ...\n    ])\n    ->bulkToggleable(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Hiding Filter Indicators - Filament PHP\nDESCRIPTION: This code snippet shows how to hide the active filters indicators above the table in a Filament table. The `hiddenFilterIndicators()` method is used to achieve this.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/06-layout.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            // ...\n        ])\n        ->hiddenFilterIndicators();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Copying\nDESCRIPTION: This code demonstrates how to enable the ability to copy the color value to the clipboard when the color preview is clicked.  It also shows how to customize the confirmation message and its duration. This feature requires SSL to be enabled.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/05-color-entry.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\ColorEntry;\n\nColorEntry::make('color')\n    ->copyable()\n    ->copyMessage('Copied!')\n    ->copyMessageDuration(1500)\n```\n\n----------------------------------------\n\nTITLE: Setting Panel Colors with Hex/RGB (PHP)\nDESCRIPTION: This snippet illustrates how to define the primary color in a Filament panel using either a hexadecimal color code or an RGB color value. Filament will then attempt to generate a full color palette based on this singular color value.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/01-overview.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$panel\n    ->colors([\n        'primary' => '#6366f1',\n    ])\n\n$panel\n    ->colors([\n        'primary' => 'rgb(99, 102, 241)',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Grouping Filament Actions in Blade\nDESCRIPTION: This Blade code demonstrates how to group multiple Filament actions together into a dropdown menu using the `<x-filament-actions::group>` Blade component. It shows the basic usage and how to customize the appearance of the trigger button and dropdown.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-action.md#_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <x-filament-actions::group :actions=\"[\n        $this->editAction,\n        $this->viewAction,\n        $this->deleteAction,\n    ]\" />\n\n    <x-filament-actions::modals />\n</div>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <x-filament-actions::group\n        :actions=\"[\n            $this->editAction,\n            $this->viewAction,\n            $this->deleteAction,\n        ]\"\n        label=\"Actions\"\n        icon=\"heroicon-m-ellipsis-vertical\"\n        color=\"primary\"\n        size=\"md\"\n        tooltip=\"More actions\"\n        dropdown-placement=\"bottom-start\"\n    />\n\n    <x-filament-actions::modals />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing Cluster Breadcrumb (Dynamic) (PHP)\nDESCRIPTION: This snippet shows how to define a dynamic breadcrumb name for a cluster using the `getClusterBreadcrumb()` method.  This allows you to use translation keys or other dynamic data to generate the breadcrumb text. This allows for flexible breadcrumb rendering based on the cluster context.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/04-clusters.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\npublic static function getClusterBreadcrumb(): string\n{\n    return __('filament/clusters/cluster.name');\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Key Editing in Filament KeyValue\nDESCRIPTION: This snippet demonstrates how to prevent the user from editing the key fields using the `editableKeys(false)` method. This is useful when the keys should be fixed and not modifiable by the user.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/16-key-value.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n    ->editableKeys(false)\n```\n\n----------------------------------------\n\nTITLE: Creating a Filament Widget using Artisan\nDESCRIPTION: This command creates a new Filament widget using the Artisan command-line tool. It prompts the user to choose the type of widget to create (Custom, Chart, Stats overview, or Table). This is the initial step for creating a custom widget within the Filament framework.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/01-overview.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-widget MyWidget\n```\n\n----------------------------------------\n\nTITLE: Access Column State in Blade\nDESCRIPTION: This Blade snippet demonstrates how to access the state of the column within the view. The `$getState()` function retrieves the data associated with the column for the current row.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/10-custom-columns.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    {{ $getState() }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Extending Filament Class Generator\nDESCRIPTION: This code demonstrates how to extend an existing Filament class generator.  It shows how to create a new class that inherits from a base class generator, such as `ResourceClassGenerator`, allowing for customization of the file generation process. This is a prerequisite for customizing the generated files.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/04-file-generation.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Filament\\Commands\\FileGenerators\\Resources;\n\nuse Filament\\Commands\\FileGenerators\\Resources\\ResourceClassGenerator as BaseResourceClassGenerator;\n\nclass ResourceClassGenerator extends BaseResourceClassGenerator\n{\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Global Search in Filament (PHP)\nDESCRIPTION: This snippet illustrates how to disable global search entirely in the Filament configuration, using the `globalSearch(false)` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/09-global-search.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->globalSearch(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Action Halted Status in Filament\nDESCRIPTION: This code demonstrates how to check if a Filament action has been halted using `assertActionHalted()` within a Pest test. It creates an invoice without an email address, calls the 'send' action, and asserts that it was halted.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/05-testing-actions.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('stops sending if invoice has no email address', function () {\n    $invoice = Invoice::factory(['email' => null])->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->callAction('send')\n        ->assertActionHalted('send');\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Constraint Icon in Filament\nDESCRIPTION: This snippet shows how to customize the icon displayed next to a constraint's label in the Filament query builder.  It utilizes the `icon()` method, passing the name of the desired icon to change the default icon to the specified one.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\TextConstraint;\n\nTextConstraint::make('author')\n    ->relationship(name: 'author', titleAttribute: 'name')\n    ->icon('heroicon-m-user')\n```\n\n----------------------------------------\n\nTITLE: Disable Inline Label for Field - PHP\nDESCRIPTION: Shows how to opt-out of the inline label for an individual field when inline labels are applied to the section. This is achieved by calling `inlineLabel(false)` on the field.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Section;\n\nSection::make('Details')\n    ->inlineLabel()\n    ->schema([\n        TextInput::make('name'),\n        TextInput::make('email')\n            ->label('Email address'),\n        TextInput::make('phone')\n            ->label('Phone number')\n            ->inlineLabel(false),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Register Asynchronous Alpine Component in PHP\nDESCRIPTION: This PHP code snippet registers an asynchronous Alpine component using `FilamentAsset::register()` and `AlpineComponent::make()`.  This makes the compiled file accessible within the Filament context.  This should be done within the `boot()` method of a service provider.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Assets\\AlpineComponent;\nuse Filament\\Support\\Facades\\FilamentAsset;\n\nFilamentAsset::register([\n    AlpineComponent::make('test-component', __DIR__ . '/../../resources/js/dist/components/test-component.js'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining a Filament Action in Livewire\nDESCRIPTION: This PHP code defines a Filament action within a Livewire component.  The `deleteAction` method returns an `Action` instance configured with confirmation and a deletion action. Requires Filament Actions package and defines a relationship with a Post model.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-action.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Actions\\Action;\nuse Filament\\Actions\\Concerns\\InteractsWithActions;\nuse Filament\\Actions\\Contracts\\HasActions;\nuse Filament\\Forms\\Concerns\\InteractsWithForms;\nuse Filament\\Forms\\Contracts\\HasForms;\nuse Livewire\\Component;\n\nclass ManagePost extends Component implements HasForms, HasActions\n{\n    use InteractsWithActions;\n    use InteractsWithForms;\n\n    public Post $post;\n\n    public function deleteAction(): Action\n    {\n        return Action::make('delete')\n            ->requiresConfirmation()\n            ->action(fn () => $this->post->delete());\n    }\n    \n    // This method name also works, since the action name is `delete`:\n    // public function delete(): Action\n    \n    // This method name does not work, since the action name is `delete`, not `deletePost`:\n    // public function deletePost(): Action\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Filters Dropdown Max Height - Filament PHP\nDESCRIPTION: This code snippet demonstrates how to add a maximum height to the filters' dropdown content in a Filament table, enabling scrolling. The `filtersFormMaxHeight()` method is used with a CSS length value to set the maximum height.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/06-layout.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            // ...\n        ])\n        ->filtersFormMaxHeight('400px');\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Multiple Values as JSON Array\nDESCRIPTION: This shows how to export multiple values in a single column as a JSON array using `listAsJson()`.  By default, multiple values would be comma-separated.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('tags')\n    ->listAsJson()\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle Hooks in Filament TextInputColumn\nDESCRIPTION: This snippet illustrates how to use lifecycle hooks to execute custom code before and after the state of a text input column is updated. `beforeStateUpdated` runs before the database is saved, and `afterStateUpdated` runs after.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/08-text-input.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nTextInputColumn::make()\n    ->beforeStateUpdated(function ($record, $state) {\n        // Runs before the state is saved to the database.\n    })\n    ->afterStateUpdated(function ($record, $state) {\n        // Runs after the state is saved to the database.\n    })\n```\n\n----------------------------------------\n\nTITLE: Refreshing Sidebar from JavaScript (Native) - JavaScript\nDESCRIPTION: This code snippet shows how to dispatch a `refresh-sidebar` event from JavaScript using the native browser `window.dispatchEvent()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.dispatchEvent(new CustomEvent('refresh-sidebar'));\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Conditionally\nDESCRIPTION: Conditionally renders the column value as Markdown based on a boolean value.  Uses the `markdown()` method with a boolean parameter.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('description')\n    ->markdown(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to Uploaded Files\nDESCRIPTION: This code snippet adds custom headers to the uploaded files using the `customHeaders()` method. These headers can be used to control caching or other aspects of file delivery.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\SpatieMediaLibraryFileUpload;\n\nSpatieMediaLibraryFileUpload::make('attachments')\n    ->multiple()\n    ->customHeaders(['CacheControl' => 'max-age=86400'])\n```\n\n----------------------------------------\n\nTITLE: Setting Avatar Size with Predefined Values - Blade\nDESCRIPTION: This snippet demonstrates how to set the size of the avatar using the `size` attribute. Available predefined size options are `sm`, `md`, and `lg`. This example sets the size to `lg`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-avatar.md#_snippet_2\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::avatar\n    src=\"https://filamentphp.com/dan.jpg\"\n    alt=\"Dan Harrin\"\n    size=\"lg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Tab Icon Position - PHP\nDESCRIPTION: Shows how to position the icon of a Filament Tab either before or after the label using the `iconPosition()` method. This uses the `Filament\\Support\\Enums\\IconPosition` enum.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/04-tabs.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Tabs;\nuse Filament\\Schemas\\Components\\Tabs\\Tab;\nuse Filament\\Support\\Enums\\IconPosition;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tab::make('Notifications')\n            ->icon(Heroicon::Bell)\n            ->iconPosition(IconPosition::After)\n            ->schema([\n                // ...\n            ]),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Radio Options - PHP\nDESCRIPTION: This snippet demonstrates how to disable specific radio options using the `disableOptionWhen()` method. A closure is used to determine if an option should be disabled based on its value.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/07-radio.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Radio;\n\nRadio::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'scheduled' => 'Scheduled',\n        'published' => 'Published',\n    ])\n    ->disableOptionWhen(fn (string $value): bool => $value === 'published')\n```\n\n----------------------------------------\n\nTITLE: Using Shared Form Fields in Filament Wizard (PHP)\nDESCRIPTION: This snippet shows how to incorporate the shared form fields defined in the `CategoryResource` within a Filament wizard step.  It reuses the configurations defined in `getNameFormField` and `getSlugFormField` functions. It depends on the `CategoryResource`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Resources\\Categories\\CategoryResource;\nuse Filament\\Resources\\Pages\\CreateRecord;\n\nclass CreateCategory extends CreateRecord\n{\n    use CreateRecord\\Concerns\\HasWizard;\n    \n    protected static string $resource = CategoryResource::class;\n\n    protected function getSteps(): array\n    {\n        return [\n            Step::make('Name')\n                ->description('Give the category a clear and unique name')\n                ->schema([\n                    CategoryResource::getNameFormField(),\n                    CategoryResource::getSlugFormField(),\n                ]),\n            // ...\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML from a View\nDESCRIPTION: Renders HTML from a Blade view file, bypassing sanitization, using the `formatStateUsing()` method in Filament Infolists. Passes the state to the view for rendering. This avoids HTML sanitization.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\nuse Illuminate\\Contracts\\View\\View;\n\nTextEntry::make('description')\n    ->formatStateUsing(fn (string $state): View => view(\n        'filament.infolists.components.description-entry-content',\n        ['state' => $state],\n    ))\n```\n\n----------------------------------------\n\nTITLE: Conditional Validation of Toggle Acceptance in Filament - PHP\nDESCRIPTION: This snippet shows how to conditionally validate the acceptance of a Toggle based on a feature flag. The `accepted()` method accepts a boolean to control whether the validation rule is applied.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/05-toggle.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('terms_of_service')\n    ->accepted(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Enabling JavaScript Date Picker - PHP\nDESCRIPTION: This snippet demonstrates how to enable a more customizable JavaScript date picker for the DatePicker component by using the `native(false)` method. This allows for a richer user interface, at the cost of potentially losing full keyboard input support.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/08-date-time-picker.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\n\nDatePicker::make('date_of_birth')\n    ->native(false)\n```\n\n----------------------------------------\n\nTITLE: Customizing Sidebar Color with CSS\nDESCRIPTION: This snippet demonstrates how to customize the background color of the Filament sidebar using the `fi-sidebar` CSS hook class. It sets the background color to `#fafafa`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/02-css-hooks.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.fi-sidebar {\n    background-color: #fafafa;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Tabs Component - PHP\nDESCRIPTION: Demonstrates how to create a basic Tabs component in Filament, defining multiple tabs with associated schemas. It shows the basic structure for implementing tabs in a Filament form or table.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/04-tabs.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Tabs;\nuse Filament\\Schemas\\Components\\Tabs\\Tab;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tab::make('Tab 1')\n            ->schema([\n                // ...\n            ]),\n        Tab::make('Tab 2')\n            ->schema([\n                // ...\n            ]),\n        Tab::make('Tab 3')\n            ->schema([\n                // ...\n            ]),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Disabling \"create another\"\nDESCRIPTION: This code demonstrates how to remove the \"create another\" button from the modal using the `createAnother(false)` method. Dependency is `Filament\\Actions\\CreateAction`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/04-create.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\CreateAction;\n\nCreateAction::make()\n    ->createAnother(false)\n```\n\n----------------------------------------\n\nTITLE: Example Usage in README - PHP\nDESCRIPTION: Provides an example of how to use the `Heading` component in a Filament project. It shows how to create a heading with a specific level, content, and color.  This code snippet would typically appear in the README to guide users on implementing the plugin.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/11-plugins/04-building-a-standalone-plugin.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Awcodes\\Headings\\Heading;\n\nHeading::make(2)\n    ->content('Product Information')\n    ->color(Color::Lime),\n```\n\n----------------------------------------\n\nTITLE: Setting TextInput to Read-Only - PHP\nDESCRIPTION: This code snippet demonstrates how to make a TextInput field read-only using the `readOnly()` method in Filament forms. When a field is read-only, it will still be sent to the server upon form submission but cannot be directly edited by the user unless mutated using browser console or Javascript. To prevent sending the field to the server, the `dehydrated(false)` method can be used. No dependencies are required.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/02-text-input.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->readOnly()\n```\n\n----------------------------------------\n\nTITLE: Generating a Filament Exporter Class\nDESCRIPTION: This command uses the Filament CLI to create a new exporter class for a specified model (e.g., Product). This class will define how the model's data is exported.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-exporter Product\n```\n\n----------------------------------------\n\nTITLE: Conditional Bullet Points\nDESCRIPTION: Conditionally adds bullet points to each item in a list of values using the `bulleted()` method in a Filament Infolist TextEntry. Accepts both static values and functions for dynamic calculation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('authors.name')\n    ->bulleted(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Prevent Automatic Loading of JavaScript in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to prevent a JavaScript file from being loaded automatically by using the `loadedOnRequest()` method when registering the asset. This allows the file to only be loaded when specifically requested.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Assets\\Js;\nuse Filament\\Support\\Facades\\FilamentAsset;\n\nFilamentAsset::register([\n    Js::make('custom-script', __DIR__ . '/../../resources/js/custom.js')->loadedOnRequest(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Registering Full-Page Livewire Component Route (PHP)\nDESCRIPTION: This PHP snippet registers a full-page Livewire component as a route.  It uses the Illuminate\\Support\\Facades\\Route to define a GET route for 'products/{product}' that renders the 'ViewProduct' Livewire component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-schema.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Livewire\\ViewProduct;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('products/{product}', ViewProduct::class);\n```\n\n----------------------------------------\n\nTITLE: Rendering a Custom View in the Page Footer in PHP\nDESCRIPTION: This code shows how to add a custom footer to a Filament page by overriding the `getFooter()` method to return a Blade view.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/02-custom-pages.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\View\\View;\n\npublic function getFooter(): ?View\n{\n    return view('filament.settings.custom-footer');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Guard in Filament\nDESCRIPTION: This code snippet shows how to set the authentication guard used by Filament by passing the guard name to the `authGuard()` configuration method within the panel configuration. The example sets the guard to 'web'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/01-overview.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->authGuard('web');\n}\n```\n\n----------------------------------------\n\nTITLE: Making a field reactive on blur in Filament\nDESCRIPTION: This code snippet shows how to make a TextInput field reactive only when it loses focus using the `live(onBlur: true)` method. This can improve performance by preventing unnecessary re-renders while the user is still typing. Requires Filament\\Forms\\Components\\TextInput.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_65\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('username')\n    ->live(onBlur: true)\n```\n\n----------------------------------------\n\nTITLE: Adding multiple content types below form field content - PHP\nDESCRIPTION: This example illustrates how to combine multiple content types (Icon, text, Action) and add them below a Filament form field using `belowContent()`. This demonstrates the flexibility of `belowContent()` by passing an array of mixed content.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Icon;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTextInput::make('name')\n    ->belowContent([\n        Icon::make(Heroicon::InformationCircle),\n        'This is the user\\'s full name.',\n        Action::make('generate'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Accessing Record in Livewire Component - property (PHP)\nDESCRIPTION: This snippet shows how to access the current Eloquent record as a public property of a Livewire component integrated into a Filament schema. The record will be available as `$this->record`. Be mindful of null values before the record is created.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/07-custom-components.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Chart extends Component\n{\n    public ?Model $record = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Modal Footer Actions - Blade\nDESCRIPTION: This code snippet demonstrates how to add actions to a Filament modal's footer using the `footerActions` slot.  This is typically used to place buttons or other interactive elements. The actions content is placed within the `<x-slot name=\"footerActions\">` tag.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-modal.md#_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal>\n    {{-- Modal content --}}\n    \n    <x-slot name=\"footerActions\">\n        {{-- Modal footer actions --}}\n    </x-slot>\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Partial Rendering After State Update - Specific Fields\nDESCRIPTION: This example uses `partiallyRenderComponentsAfterStateUpdated()` to re-render only the specified components ('email') after the 'name' field's state is updated. This optimizes performance by preventing unnecessary full component re-renders.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_74\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->live()\n    ->partiallyRenderComponentsAfterStateUpdated(['email'])\n```\n\n----------------------------------------\n\nTITLE: Registering Full-Page Livewire Component\nDESCRIPTION: This PHP code registers the `ViewProduct` Livewire component as a full-page component, accessible via a specific route. It uses the `Illuminate\\Support\\Facades\\Route` facade.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-infolist.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Livewire\\ViewProduct;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('products/{product}', ViewProduct::class);\n```\n\n----------------------------------------\n\nTITLE: Adding an icon to a dropdown item in Blade\nDESCRIPTION: This snippet demonstrates how to add an icon to a dropdown item using the `icon` attribute. The value of the `icon` attribute should be a valid icon name from a supported icon library (e.g., Heroicons).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-dropdown.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::dropdown.list.item icon=\"heroicon-m-pencil\">\n    Edit\n</x-filament::dropdown.list.item>\n```\n\n----------------------------------------\n\nTITLE: Using Polymorphic User Relationship for Filament Exports\nDESCRIPTION: This code snippet demonstrates how to use a polymorphic `MorphTo` relationship for the user association in Filament exports. This allows associating exports with multiple user models. Requires modifying the exports table and calling `Export::polymorphicUserRelationship()` in a service provider's `boot()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_39\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Exports\\Models\\Export;\n\nExport::polymorphicUserRelationship();\n```\n\n----------------------------------------\n\nTITLE: Section Header End Content - Blade\nDESCRIPTION: Illustrates how to add content to the end of the section header, next to the heading and description, using the `headerEnd` slot. This allows for adding interactive elements or supplementary information in the header.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-section.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::section>\n    <x-slot name=\"heading\">\n        User details\n    </x-slot>\n\n    <x-slot name=\"headerEnd\">\n        {{-- Input to select the user's ID --}}\n    </x-slot>\n\n    {{-- Content --}}\n</x-filament::section>\n```\n\n----------------------------------------\n\nTITLE: Basic Filament Link with Href - Blade\nDESCRIPTION: This snippet demonstrates the basic usage of the Filament Link Blade component with an href attribute to create a clickable link that navigates to a specified route. It serves as the foundation for more complex link implementations.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-link.md#_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link :href=\"route('users.create')\">\n    New user\n</x-filament::link>\n```\n\n----------------------------------------\n\nTITLE: Pushing Operators to Filament Text Constraint\nDESCRIPTION: This code snippet shows how to add an operator to the end of the existing list of operators in a Filament text constraint. By using the `pushOperators()` method and passing an array with the desired operator(s), the new operators will be appended to the end of the default operator list.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\Operators\\IsFilledOperator;\nuse Filament\\Tables\\Filters\\QueryBuilder\\Constraints\\TextConstraint;\n\nTextConstraint::make('author')\n    ->relationship(name: 'author', titleAttribute: 'name')\n    ->pushOperators([\n        IsFilledOperator::class,\n    ])\n```\n\n----------------------------------------\n\nTITLE: Customizing XLSX Writer Options in Filament\nDESCRIPTION: This code snippet demonstrates how to customize the OpenSpout XLSX Writer options in Filament exports. The `getXlsxWriterOptions()` method in the exporter class is overridden to return an `OpenSpout\\Writer\\XLSX\\Options` instance.  This allows for configuring column widths. The example sets the width of column 1 to 10 and the width of columns 2 and 3 to 12.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nuse OpenSpout\\Writer\\XLSX\\Options;\n\npublic function getXlsxWriterOptions(): ?Options\n{\n    $options = new Options();\n    $options->setColumnWidth(10, 1);\n    $options->setColumnWidthForRange(12, 2, 3);\n    \n    return $options;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the Widget Grid Columns in Filament\nDESCRIPTION: This code snippet demonstrates how to customize the number of grid columns used to display widgets on a Filament dashboard. The `getColumns()` method is overridden to return the desired number of columns. This value determines the layout of widgets on the page.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/01-overview.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function getColumns(): int | string | array\n{\n    return 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Showing remaining images count in Filament\nDESCRIPTION: This snippet shows how to display the count of remaining images after limiting the stack using `limitedRemainingText()`. It requires `limit()` to be set.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/04-image.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\ImageColumn;\n\nImageColumn::make('colleagues.avatar')\n    ->imageHeight(40)\n    ->circular()\n    ->stacked()\n    ->limit(3)\n    ->limitedRemainingText()\n```\n\n----------------------------------------\n\nTITLE: Rendering modal action button - Filament Actions (Blade)\nDESCRIPTION: This snippet shows how to render the action button passed to a custom modal content view in Filament, using Blade syntax and the `getModalAction()` method. Requires a Filament Action that registers modal actions and passes the action to the view.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_16\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    {{ $action->getModalAction('report') }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing Import File Validation - Filament Import (PHP)\nDESCRIPTION: This snippet shows how to add custom validation rules for the imported file using the `fileRules()` method. It demonstrates setting file size limits and allowed file types.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_61\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\ImportAction;\nuse Illuminate\\Validation\\Rules\\File;\n\nImportAction::make()\n    ->importer(ProductImporter::class)\n    ->fileRules([\n        'max:1024',\n        // or\n        File::types(['csv', 'txt'])->max(1024),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Enabling Pagination While Reordering (PHP)\nDESCRIPTION: This code snippet demonstrates how to allow pagination while reordering records in a Filament table using `$table->paginatedWhileReordering()`. This is generally discouraged but can be overridden if needed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->paginatedWhileReordering();\n}\n```\n\n----------------------------------------\n\nTITLE: Using a dropdown item as an anchor link in Blade\nDESCRIPTION: This snippet demonstrates how to use a dropdown item as an anchor link by setting the `tag` attribute to \"a\" and providing an `href` attribute. This changes the underlying HTML tag of the dropdown item from `<button>` to `<a>`, allowing it to function as a hyperlink.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-dropdown.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::dropdown.list.item\n    href=\"https://filamentphp.com\"\n    tag=\"a\"\n>\n    Filament\n</x-filament::dropdown.list.item>\n```\n\n----------------------------------------\n\nTITLE: Using SpatieTagsEntry with type()\nDESCRIPTION: Demonstrates how to use the `SpatieTagsEntry` component within a Filament infolist, specifying a `type` to group tags into collections, and display only tags of that type.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-tags-plugin/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\SpatieTagsEntry;\n\nSpatieTagsEntry::make('tags')\n    ->type('categories')\n```\n\n----------------------------------------\n\nTITLE: Step Lifecycle Hooks (PHP)\nDESCRIPTION: This snippet demonstrates how to use the `afterValidation()` and `beforeValidation()` methods to execute code before and after validation occurs on a specific step in the Filament Wizard.  Requires Filament.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/05-wizards.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Wizard\\Step;\n\nStep::make('Order')\n    ->afterValidation(function () {\n        // ...\n    })\n    ->beforeValidation(function () {\n        // ...\n    })\n    ->schema([\n        // ...\n    ]),\n```\n\n----------------------------------------\n\nTITLE: Adding Configuration Method to Custom Field (PHP)\nDESCRIPTION: Demonstrates how to add a configuration method (`zoom`) to a custom field class. The method accepts a value, stores it in a protected property, and provides a getter method (`getZoom`).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/20-custom-fields.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Field;\n\nclass LocationPicker extends Field\n{\n    protected string $view = 'filament.forms.components.location-picker';\n    \n    protected ?float $zoom = null;\n\n    public function zoom(?float $zoom): static\n    {\n        $this->zoom = $zoom;\n\n        return $this;\n    }\n\n    public function getZoom(): ?float\n    {\n        return $this->zoom;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Render Hook for a Resource - PHP\nDESCRIPTION: This example demonstrates registering a render hook that applies to all pages within a Filament resource. This allows for consistent UI elements across all resource pages.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/01-render-hooks.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Facades\\FilamentView;\nuse Filament\\View\\PanelsRenderHook;\n\nFilamentView::registerRenderHook(\n    PanelsRenderHook::PAGE_START,\n    fn (): View => view('warning-banner'),\n    scopes: \\App\\Filament\\Resources\\Users\\UserResource::class,\n);\n```\n\n----------------------------------------\n\nTITLE: Filament Select Component Usage in Blade\nDESCRIPTION: This code snippet demonstrates how to implement a Filament select component within an input wrapper. The select component is bound to the `status` property using `wire:model`.  Options are provided with hardcoded values.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-select.md#_snippet_0\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::input.wrapper>\n    <x-filament::input.select wire:model=\"status\">\n        <option value=\"draft\">Draft</option>\n        <option value=\"reviewing\">Reviewing</option>\n        <option value=\"published\">Published</option>\n    </x-filament::input.select>\n</x-filament::input.wrapper>\n```\n\n----------------------------------------\n\nTITLE: Accessing parent action data in Filament\nDESCRIPTION: This snippet shows how to access raw data from parent actions using the `$mountedActions` array.  It injects `$mountedActions` into the child action's function and accesses the raw data of the first parent action using `$mountedActions[0]->getRawData()`.  Raw data is not validated.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Forms\\Components\\TextInput;\n\nAction::make('first')\n    ->schema([\n        TextInput::make('foo'),\n    ])\n    ->action(function () {\n        // ...\n    })\n    ->extraModalFooterActions([\n        Action::make('second')\n            ->requiresConfirmation()\n            ->action(function (array $mountedActions) {\n                dd($mountedActions[0]->getRawData());\n            \n                // ...\n            }),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Persisting the Current Step in the URL (PHP)\nDESCRIPTION: This example demonstrates how to persist the current step of the Filament Wizard in the URL's query string using the `persistStepInQueryString()` method. It shows how to use the default 'step' key and how to specify a custom key. Requires Filament.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/05-wizards.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Wizard;\n\nWizard::make([\n    // ...\n])->persistStepInQueryString()\n\nWizard::make([\n    // ...\n])->persistStepInQueryString('wizard-step')\n```\n\n----------------------------------------\n\nTITLE: Embedding Components in View - PHP\nDESCRIPTION: This code demonstrates how to embed other components into a `View` component using the `components()` method. It passes a `TextColumn` to the `components()` method of the `View` component, enabling the inclusion of other Filament elements within the custom HTML.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/05-layout.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\FontWeight;\nuse Filament\\Tables\\Columns\\Layout\\Split;\nuse Filament\\Tables\\Columns\\Layout\\View;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Tables\\Columns\\TextColumn;\n\n[\n    Split::make([\n        ImageColumn::make('avatar')\n            ->circular(),\n        TextColumn::make('name')\n            ->weight(FontWeight::Bold)\n            ->searchable()\n            ->sortable(),\n    ]),\n    View::make('users.table.collapsible-row-content')\n        ->components([\n            TextColumn::make('email')\n                ->icon('heroicon-m-envelope'),\n        ])\n        ->collapsible(),\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Avatar Rounding to Square - Blade\nDESCRIPTION: This snippet demonstrates how to change the avatar from a circular shape to a square shape using the `circular` attribute. Setting `:circular=\"false\"` makes the avatar square.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-avatar.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::avatar\n    src=\"https://filamentphp.com/dan.jpg\"\n    alt=\"Dan Harrin\"\n    :circular=\"false\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing 'No' Label in Boolean Radio Buttons - PHP\nDESCRIPTION: This example shows how to customize the \"No\" label in a boolean radio button group using the `falseLabel` argument of the `boolean()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/07-radio.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Radio;\n\nRadio::make('feedback')\n    ->label('Like this post?')\n    ->boolean(falseLabel: 'Not at all!')\n```\n\n----------------------------------------\n\nTITLE: Globally hiding modal close buttons - Filament\nDESCRIPTION: This snippet demonstrates how to hide the close button on all modals within the application. It uses `ModalComponent::closeButton(false)` inside a service provider or middleware to achieve this global setting.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\View\\Components\\ModalComponent;\n\nModalComponent::closeButton(false);\n```\n\n----------------------------------------\n\nTITLE: Setting Constraint Picker Columns with Array - PHP\nDESCRIPTION: This code snippet demonstrates how to set the number of columns in the constraint picker for different screen sizes using the `constraintPickerColumns()` method with an array, specifying column counts for `md` and `xl` breakpoints. Smaller devices will use the default 1 column. It requires the `Filament\\Tables\\Filters\\QueryBuilder` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/04-query-builder.md#_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\QueryBuilder;\n\nQueryBuilder::make()\n    ->constraintPickerColumns(['md' => 2, 'xl' => 4])\n    ->constraints([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Using Filament Input Blade Component\nDESCRIPTION: This snippet demonstrates how to use the Filament input Blade component within a Laravel Blade template. It requires wrapping the `<x-filament::input>` component within an `<x-filament::input.wrapper>` component. The `type` attribute specifies the type of input (e.g., \"text\"), and `wire:model` binds the input value to a Livewire property.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-input.md#_snippet_0\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::input.wrapper>\n    <x-filament::input\n        type=\"text\"\n        wire:model=\"name\"\n    />\n</x-filament::input.wrapper>\n```\n\n----------------------------------------\n\nTITLE: Rendering the Infolist in Blade\nDESCRIPTION: This Blade code renders the infolist within the Livewire component's view. It calls the `productInfolist` method to retrieve the infolist data.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-infolist.md#_snippet_5\n\nLANGUAGE: Blade\nCODE:\n```\n{{ $this->productInfolist }}\n```\n\n----------------------------------------\n\nTITLE: Testing Action Icon in Filament\nDESCRIPTION: This code shows how to test the icon of a Filament action using `assertActionHasIcon()` and `assertActionDoesNotHaveIcon()` methods within a Pest test. It asserts the 'send' action has 'envelope-open' icon and does not have 'envelope' icon when enabled.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/05-testing-actions.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('when enabled the send button has correct icon', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertActionEnabled('send')\n        ->assertActionHasIcon('send', 'envelope-open')\n        ->assertActionDoesNotHaveIcon('send', 'envelope');\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Modal Trigger Button - Blade\nDESCRIPTION: This code snippet demonstrates how to disable the modal trigger button and prevent the modal from opening when the button is clicked. The `disabled` attribute is used on both the `trigger` slot and the button within it. This ensures the modal doesn't open even if the wrapping element's click listener is active.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-modal.md#_snippet_19\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal>\n    <x-slot name=\"trigger\" disabled>\n        <x-filament::button :disabled=\"true\">\n            Open modal\n        </x-filament::button>\n    </x-slot>\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Forms\nDESCRIPTION: This PHP code shows how to define multiple forms within a Livewire component. The `getForms()` method returns an array of form names.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-form.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nprotected function getForms(): array\n{\n    return [\n        'editPostForm',\n        'createCommentForm',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Content Below Error - Filament PHP\nDESCRIPTION: This snippet demonstrates how to add content below a Filament form field's error message using the `belowErrorMessage()` method.  It requires `TextInput`, `Icon`, and `Heroicon` classes. This will add an icon and a text below the error message for the TextInput field.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Icon;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTextInput::make('name')\n    ->required()\n    ->belowErrorMessage([\n        Icon::make(Heroicon::Star),\n        'This is the content below the field\\'s error message'\n    ])\n```\n\n----------------------------------------\n\nTITLE: Changing the color of a Filament Badge\nDESCRIPTION: This snippet demonstrates how to change the color of a Filament badge using the `color` attribute. It includes examples for `danger`, `gray`, `info`, `success`, and `warning` colors.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-badge.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::badge color=\"danger\">\n    New\n</x-filament::badge>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::badge color=\"gray\">\n    New\n</x-filament::badge>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::badge color=\"info\">\n    New\n</x-filament::badge>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::badge color=\"success\">\n    New\n</x-filament::badge>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::badge color=\"warning\">\n    New\n</x-filament::badge>\n```\n\n----------------------------------------\n\nTITLE: Setting the Navigation Sort Order for Filament Dashboards\nDESCRIPTION: This code shows how to control the navigation sort order of custom dashboards with the `$navigationSort` property. The lower the number, the earlier it appears in the navigation. It sets the property to 15, positioning it relative to other navigation items.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/01-overview.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?int $navigationSort = 15;\n```\n\n----------------------------------------\n\nTITLE: Customize Registration Link\nDESCRIPTION: This code snippet shows how to customize the tenant registration link using the `tenantMenuItems()` method and the 'register' key. It modifies the label of the registration action. Dependencies: `Filament\\Actions\\Action`, `Filament\\Panel`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantMenuItems([\n            'register' => fn (Action $action) => $action->label('Register new team'),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Form Field Hidden - PHP\nDESCRIPTION: This snippet demonstrates how to assert that a Filament form field is hidden using `assertFormFieldHidden()`. It requires the `Pest\\Livewire\\livewire` function. The example checks if the 'title' field is hidden. You can specify the form name as the second argument to `assertFormFieldHidden` when there are multiple schemas.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\ntest('title is hidden', function () {\n    livewire(CreatePost::class)\n        ->assertFormFieldHidden('title');\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Filament Button Implementation - Blade\nDESCRIPTION: This snippet demonstrates the basic implementation of a Filament button component that triggers the `openNewUserModal` Livewire method when clicked. It uses the `wire:click` directive to bind the click event to the Livewire method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-button.md#_snippet_0\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::button wire:click=\"openNewUserModal\">\n    New user\n</x-filament::button>\n```\n\n----------------------------------------\n\nTITLE: Disabling the Topbar - PHP\nDESCRIPTION: This code snippet shows how to disable the topbar entirely by passing `false` to the `topbar()` method in the panel configuration.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->topbar(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Stacking images with ImageColumn in Filament\nDESCRIPTION: This snippet demonstrates how to display multiple images as a stack of overlapping images using `stacked()`. Requires `imageHeight()` and `circular()` for visual appeal.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/04-image.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\ImageColumn;\n\nImageColumn::make('colleagues.avatar')\n    ->imageHeight(40)\n    ->circular()\n    ->stacked()\n```\n\n----------------------------------------\n\nTITLE: Listing Values with Line Breaks\nDESCRIPTION: Displays multiple values from an array with line breaks between each item using the `listWithLineBreaks()` method in a Filament Infolist TextEntry.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('authors.name')\n    ->listWithLineBreaks()\n```\n\n----------------------------------------\n\nTITLE: Defining Related Resource\nDESCRIPTION: This PHP code defines a static property `$relatedResource` within a relation manager or page, indicating the associated nested resource. This property establishes the link between the manager/page and the nested resource, allowing Filament to correctly route actions to the nested resource's create/edit pages.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/08-nesting.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Resources\\Courses\\Resources\\Lessons\\LessonResource;\n\nprotected static ?string $relatedResource = LessonResource::class;\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Size - PHP\nDESCRIPTION: This snippet demonstrates how to customize the size of an IconEntry component using the `size()` method. It sets the size to `IconSize::Medium`. You must import both `IconEntry` and `IconSize` from Filament.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/03-icon-entry.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\IconEntry;\nuse Filament\\Support\\Enums\\IconSize;\n\nIconEntry::make('status')\n    ->size(IconSize::Medium)\n```\n\n----------------------------------------\n\nTITLE: Using SpatieTagsEntry in Filament Infolist\nDESCRIPTION: Demonstrates how to use the `SpatieTagsEntry` component within a Filament infolist to display tags associated with a model.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-tags-plugin/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\SpatieTagsEntry;\n\nSpatieTagsEntry::make('tags')\n```\n\n----------------------------------------\n\nTITLE: Installing npm dependencies - Bash\nDESCRIPTION: Installs the dependencies defined in the `package.json` file using npm. This command is essential for setting up the development environment and enabling the build process for the plugin's stylesheet.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/11-plugins/04-building-a-standalone-plugin.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Column Label\nDESCRIPTION: This demonstrates how to customize the label of an export column using the `label()` method. This allows for more user-friendly column names in the exported file.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('sku')\n    ->label('SKU')\n```\n\n----------------------------------------\n\nTITLE: Installing Node Dependencies\nDESCRIPTION: This command installs the Node.js dependencies specified in the `package.json` file. It is a crucial step to ensure that the build process and development tools function correctly.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/11-plugins/03-building-a-panel-plugin.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Disable File Existence Check in ImageEntry (PHP)\nDESCRIPTION: This snippet demonstrates how to disable the automatic file existence check for an ImageEntry component in Filament Infolists.  This is useful when using remote storage or when the file existence check is time-consuming.  It utilizes the `checkFileExistence(false)` method of the ImageEntry component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/04-image-entry.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('attachment')\n    ->checkFileExistence(false)\n```\n\n----------------------------------------\n\nTITLE: Rendering Livewire Component in Blade\nDESCRIPTION: This Blade directive renders the 'view-product' Livewire component. It is a shorthand method for embedding Livewire components within Blade templates.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-schema.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n@livewire('view-product')\n```\n\n----------------------------------------\n\nTITLE: Customizing Stacked Overlap - Filament PHP\nDESCRIPTION: This snippet demonstrates customizing the overlap between stacked images using the `overlap()` method.  The overlap can be a value between 0 and 8, inclusive, controlling how much each image covers the previous one in the stack.  The `overlap()` method also accepts a function for dynamic overlap calculation, injecting utilities as parameters.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/04-image-entry.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('colleagues.avatar')\n    ->imageHeight(40)\n    ->circular()\n    ->stacked()\n    ->overlap(2)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding Filament Table Summary based on Query (PHP)\nDESCRIPTION: Demonstrates how to conditionally hide a summary using the `hidden()` method based on the result of a database query.  The summary will be hidden if the query returns no results.  Requires Filament Tables and Illuminate Database.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Summarizer;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nTextColumn::make('sku')\n    ->summarize(Summarizer::make()\n        ->hidden(fn (Builder $query): bool => ! $query->exists()))\n```\n\n----------------------------------------\n\nTITLE: Register JavaScript asset in Filament\nDESCRIPTION: This snippet demonstrates how to register a JavaScript file for Filament chart widgets using the `FilamentAsset` facade. It utilizes the `Js::make()` method to create a JavaScript asset and registers it using `FilamentAsset::register()`. The asset is loaded using `Vite::asset()` and registered as a module.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/widgets/docs/03-charts.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Assets\\Js;\nuse Filament\\Support\\Facades\\FilamentAsset;\nuse Illuminate\\Support\\Facades\\Vite;\n\nFilamentAsset::register([\n    Js::make('chart-js-plugins', Vite::asset('resources/js/filament-chart-js-plugins.js'))->module(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Dispatching Close Notification Event from Alpine.js - Blade\nDESCRIPTION: This code snippet demonstrates how to dispatch a `close-notification` browser event from Alpine.js within a Blade template. It uses `x-on:click` to trigger the event when a button is clicked, passing the `notificationId` as data.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/01-overview.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<button x-on:click=\"$dispatch('close-notification', { id: notificationId })\" type=\"button\">\n    Close Notification\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables\nDESCRIPTION: Shows how to use CSS variables previously registered with FilamentAsset.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_9\n\nLANGUAGE: css\nCODE:\n```\nbackground-image: var(--background-image);\n```\n\n----------------------------------------\n\nTITLE: Data Binding with wire:model in Blade\nDESCRIPTION: Demonstrates binding a Livewire component's public property to an input field using `wire:model` in a Blade view.  The `name` property is bound to the input field.  When the user types, the property is updated.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/20-custom-fields.md#_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<x-dynamic-component\n    :component=\"$getFieldWrapperView()\"\n    :field=\"$field\"\n>\n    <input wire:model=\"name\" />\n    \n    <!-- Or -->\n    \n    <div x-data=\"{ state: $wire.$entangle('name') }\">\n        <input x-model=\"state\" />\n    </div>\n</x-dynamic-component>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tenant Profile Page - PHP\nDESCRIPTION: This code configures Filament to use the custom tenant profile page created above. It requires the `App\\Filament\\Pages\\Tenancy\\EditTeamProfile` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Pages\\Tenancy\\EditTeamProfile;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantProfile(EditTeamProfile::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Form Field Enabled - PHP\nDESCRIPTION: This snippet demonstrates how to assert that a Filament form field is enabled using `assertFormFieldEnabled()`. It requires the `Pest\\Livewire\\livewire` function. The example checks if the 'title' field is enabled.  You can specify the form name as the second argument to `assertFormFieldEnabled` when there are multiple schemas.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\ntest('title is enabled', function () {\n    livewire(CreatePost::class)\n        ->assertFormFieldEnabled('title');\n});\n```\n\n----------------------------------------\n\nTITLE: Widget Render Hook Constants - PHP\nDESCRIPTION: This snippet shows the usage of `WidgetsRenderHook` constants for injecting content at the beginning or end of a table widget. These constants are used when registering render hooks to extend the functionality of Filament table widgets.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/01-render-hooks.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Widgets\\View\\WidgetsRenderHook;\n```\n\n----------------------------------------\n\nTITLE: Disabling Dark Mode in Filament (PHP)\nDESCRIPTION: This snippet shows how to disable dark mode switching in a Filament panel using the `darkMode(false)` method. This forces the panel to always use light mode.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/01-overview.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->darkMode(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Filters in a Modal - Filament PHP\nDESCRIPTION: This code snippet shows how to render the filters in a modal instead of in a dropdown within a Filament table. The `filters` method is used with the `layout` parameter set to `FiltersLayout::Modal`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/06-layout.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Enums\\FiltersLayout;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            // ...\n        ], layout: FiltersLayout::Modal);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing View Authorization in Export Policy in Filament\nDESCRIPTION: This code snippet implements the `view()` method in an `ExportPolicy` to authorize access to Filament export downloads. It checks if the user initiating the request is the same user who started the export.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_57\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Filament\\Actions\\Exports\\Models\\Export;\n\npublic function view(User $user, Export $export): bool\n{\n    return $export->user()->is($user);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Modal Description - Blade\nDESCRIPTION: This code snippet demonstrates how to add a description to a Filament modal, displayed below the heading, using the `description` slot. The description content ('Modal description') is placed within the `<x-slot name=\"description\">` tag.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-modal.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal>\n    <x-slot name=\"heading\">\n        Modal heading\n    </x-slot>\n\n    <x-slot name=\"description\">\n        Modal description\n    </x-slot>\n\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Custom Filament Blade View Template (Blade)\nDESCRIPTION: This is an example of a custom Blade view for a Filament page. It renders the default Filament page structure and includes the page content defined in the `content()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n<x-filament-panels::page>\n    {{ $this->content }} {{-- This will render the content of the page defined in the `content()` method, which can be removed if you want to start from scratch --}}\n</x-filament-panels::page>\n```\n\n----------------------------------------\n\nTITLE: Globally disabling modal escape behavior - Filament\nDESCRIPTION: This snippet shows how to globally disable the ability to close modals by pressing the Escape key. It utilizes `ModalComponent::closedByEscaping(false)` in a service provider or middleware to apply this setting to all modals in the application.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/02-modals.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\View\\Components\\ModalComponent;\n\nModalComponent::closedByEscaping(false);\n```\n\n----------------------------------------\n\nTITLE: Create Filament User (Bash)\nDESCRIPTION: This command creates a new user account for Filament using the Artisan command. This user can then access the Filament admin panel.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/01-introduction/02-installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-user\n```\n\n----------------------------------------\n\nTITLE: Registering Assets for a Filament Plugin\nDESCRIPTION: This snippet shows how to register assets specifically for a Filament plugin. The second argument to `FilamentAsset::register()` specifies the Composer package name to prevent asset name collisions.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Facades\\FilamentAsset;\n\nFilamentAsset::register([\n    // ...\n], package: 'danharrin/filament-blog');\n```\n\n----------------------------------------\n\nTITLE: Displaying All Collections in Infolist Image Entry\nDESCRIPTION: This code configures the media library image entry to show images from all media library collections using the `allCollections()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\SpatieMediaLibraryImageEntry;\n\nSpatieMediaLibraryImageEntry::make('avatar')\n    ->allCollections()\n```\n\n----------------------------------------\n\nTITLE: Testing Action Order in Filament\nDESCRIPTION: This snippet illustrates how to test the order of Filament actions using `assertActionsExistInOrder()` within a Pest test.  It checks if the 'send' and 'export' actions are in the specified order.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/05-testing-actions.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can have actions in order', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertActionsExistInOrder(['send', 'export']);\n});\n```\n\n----------------------------------------\n\nTITLE: Preventing Text Wrapping - PHP\nDESCRIPTION: This snippet demonstrates how to prevent text wrapping using the `wrap(false)` method. The text will not wrap to the next line if it exceeds the width of the container.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('description')\n    ->wrap(false)\n```\n\n----------------------------------------\n\nTITLE: Customizing Restore Notification Title in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to customize the title of the success notification displayed after a record is restored.  The `successNotificationTitle()` method is used to set a custom title. Requires Filament notifications.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/10-restore.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\RestoreAction;\n\nRestoreAction::make()\n    ->successNotificationTitle('User restored')\n```\n\n----------------------------------------\n\nTITLE: Displaying a Description Below Text\nDESCRIPTION: Displays a description below the column contents using the `description()` method. The description is generated by a function that receives a `Post` record as input.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('title')\n    ->description(fn (Post $record): string => $record->description)\n```\n\n----------------------------------------\n\nTITLE: Formatting as Money (PHP)\nDESCRIPTION: This code snippet shows how to format a summary value as money using the `money()` method, specifying the currency. It formats the sum of the 'price' column as EUR.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Sum;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('price')\n    ->summarize(Sum::make()->money('EUR'))\n```\n\n----------------------------------------\n\nTITLE: Customizing Google Two-Factor Authentication Brand Name in Filament\nDESCRIPTION: This code snippet illustrates how to customize the brand name displayed in the Google Authenticator app by using the `brandName()` method on the `GoogleTwoFactorAuthentication` instance. The `brandName()` method accepts a string representing the desired brand name.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/02-multi-factor-authentication.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Auth\\MultiFactor\\GoogleTwoFactor\\GoogleTwoFactorAuthentication;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->multiFactorAuthentication([\n            GoogleTwoFactorAuthentication::make()\n                ->brandName('Filament Demo'),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Styled Container from Repeatable Entry - PHP\nDESCRIPTION: This code demonstrates how to remove the default styled container (card) from each item in a repeatable entry using the `contained(false)` method.  This allows for more customization of the item's appearance.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/07-repeatable-entry.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\RepeatableEntry;\n\nRepeatableEntry::make('comments')\n    ->schema([\n        // ...\n    ])\n    ->contained(false)\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale - PHP\nDESCRIPTION: This snippet demonstrates how to configure the locale used for rendering the display of a DatePicker component using the `locale()` method.  The example also disables the native picker and sets a display format. The locale is set to 'fr' (French).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/08-date-time-picker.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\n\nDatePicker::make('date_of_birth')\n    ->native(false)\n    ->displayFormat('d F Y')\n    ->locale('fr')\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Image URL - Filament PHP\nDESCRIPTION: This code snippet demonstrates how to set a default image URL to display when no image is available for the specified field. The `defaultImageUrl()` method accepts a URL to the fallback image.  The `defaultImageUrl()` method also accepts a function for dynamic URL calculation, injecting utilities as parameters.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/04-image-entry.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('header_image')\n    ->defaultImageUrl(url('storage/posts/header-images/default.jpg'))\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Search Debounce in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to adjust the debounce time for global search using the `globalSearchDebounce()` method in the Filament configuration.  The debounce time limits the number of requests made while the user is typing.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/09-global-search.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->globalSearchDebounce('750ms');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Input Mode for Filament Text Input\nDESCRIPTION: This snippet demonstrates how to set the `inputmode` attribute of a text input field in Filament using the `inputMode()` method. It requires the Filament Forms package. It sets the input mode to 'decimal' after setting the input type to numeric.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/02-text-input.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('text')\n    ->numeric()\n    ->inputMode('decimal')\n```\n\n----------------------------------------\n\nTITLE: Setting Default Active Tab - PHP\nDESCRIPTION: Illustrates how to set the default active tab for a Filament Tabs component using the `activeTab()` method. This allows specifying which tab should be open initially.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/04-tabs.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Schemas\\Components\\Tabs;\nuse Filament\\Schemas\\Components\\Tabs\\Tab;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tab::make('Tab 1')\n            ->schema([\n                // ...\n            ]),\n        Tab::make('Tab 2')\n            ->schema([\n                // ...\n            ]),\n        Tab::make('Tab 3')\n            ->schema([\n                // ...\n            ]),\n    ])\n    ->activeTab(2)\n```\n\n----------------------------------------\n\nTITLE: Displaying Filters Above Content - Filament PHP\nDESCRIPTION: This code snippet demonstrates how to render the filters above the table content in a Filament table. The `filters` method is used with the `layout` parameter set to `FiltersLayout::AboveContent`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/06-layout.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Enums\\FiltersLayout;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            // ...\n        ], layout: FiltersLayout::AboveContent);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User Model for Google Two-Factor Recovery Codes (PHP)\nDESCRIPTION: This code snippet configures the User model to handle the Google two-factor authentication recovery codes. It marks the `google_two_factor_authentication_recovery_codes` as `$hidden` to prevent unauthorized access and encrypts it as an array using the `encrypted:array` cast for secure storage of multiple codes. This setup ensures the recovery codes are protected.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/02-multi-factor-authentication.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Auth\\MultiFactor\\GoogleTwoFactor\\Contracts\\HasGoogleTwoFactorAuthentication;\nuse Filament\\Models\\Contracts\\FilamentUser;\nuse Illuminate\\Contracts\\Auth\\MustVerifyEmail;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\nclass User extends Authenticatable implements FilamentUser, HasGoogleTwoFactorAuthentication, MustVerifyEmail\n{\n    // ...\n\n    /**\n     * @var array<string>\n     */\n    protected $hidden = [\n        // ...\n        'google_two_factor_authentication_recovery_codes',\n    ];\n\n    /**\n     * @var array<string, string>\n     */\n    protected $casts = [\n        // ...\n        'google_two_factor_authentication_recovery_codes' => 'encrypted:array',\n    ];\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Passing configuration value to custom entry\nDESCRIPTION: This PHP code demonstrates how to pass a configuration value to the custom entry class using the defined `speed()` method. It chains the `speed()` method after calling `make()` on the `AudioPlayerEntry`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/08-custom-entries.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Infolists\\Components\\AudioPlayerEntry;\n\nAudioPlayerEntry::make('recording')\n    ->speed(0.5)\n```\n\n----------------------------------------\n\nTITLE: Creating a Filament Cluster using Artisan (Bash)\nDESCRIPTION: This command-line instruction shows how to generate a new Filament cluster class using the `php artisan make:filament-cluster` command. This command automatically creates a cluster class file in the configured clusters directory.  The example shows creating a cluster named 'Settings'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/04-clusters.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan make:filament-cluster Settings\n```\n\n----------------------------------------\n\nTITLE: Generating Queue and Notifications Tables Migrations (Laravel)\nDESCRIPTION: These commands are used to generate the necessary migration files for queue batches and notifications tables in a Laravel application. These migrations are required for the export functionality to work correctly.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Laravel 11 and higher\nphp artisan make:queue-batches-table\nphp artisan make:notifications-table\n\n# Laravel 10\nphp artisan queue:batches-table\nphp artisan notifications:table\n```\n\n----------------------------------------\n\nTITLE: Adding Modal Heading - Blade\nDESCRIPTION: This code snippet demonstrates how to add a heading to a Filament modal using the `heading` slot.  The heading content ('Modal heading') is placed within the `<x-slot name=\"heading\">` tag.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-modal.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal>\n    <x-slot name=\"heading\">\n        Modal heading\n    </x-slot>\n\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Validating RGB Color - PHP\nDESCRIPTION: This snippet demonstrates how to validate an RGB color using Laravel's validation rules within the Filament color picker. It uses a regex to ensure the RGB color is in the correct format.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/17-color-picker.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\ColorPicker;\n\nColorPicker::make('rgb_color')\n    ->rgb()\n    ->regex('/^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/')\n```\n\n----------------------------------------\n\nTITLE: Checking for Missing Translations in Published App\nDESCRIPTION: This Artisan command checks for missing translations in your application's published translations, instead of the package's translations. This is useful if you have customized or extended the default translations.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/01-introduction/05-contributing.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan filament:check-translations es --source=app\n```\n\n----------------------------------------\n\nTITLE: Testing Action Arguments in Filament\nDESCRIPTION: This code demonstrates how to test Filament action arguments using a `TestAction` object with the `arguments()` method in Livewire. It shows calling an action, and asserting its visibility and existence with specific arguments.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/05-testing-actions.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Testing\\TestAction;\nuse function Pest\\Livewire\\livewire;\n\n$invoice = Invoice::factory()->create();\n\nlivewire(ManageInvoices::class)\n    ->callAction(TestAction::make('send')->arguments(['invoice' => $invoice->getKey()]));\n\nlivewire(ManageInvoices::class)\n    ->assertActionVisible(TestAction::make('send')->arguments(['invoice' => $invoice->getKey()]))\n\nlivewire(ManageInvoices::class)\n    ->assertActionExists(TestAction::make('send')->arguments(['invoice' => $invoice->getKey()]))\n```\n\n----------------------------------------\n\nTITLE: Adding Tooltip to Icon Button - Blade\nDESCRIPTION: This example demonstrates how to add a tooltip to a Filament icon button using the `tooltip` attribute. The tooltip text is displayed when the user hovers over the button.  The `icon` and `label` attributes are also utilized. Requires Filament.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-icon-button.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-plus\"\n    tooltip=\"Register a user\"\n    label=\"New label\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Binding a Custom User Model - PHP\nDESCRIPTION: This snippet shows how to bind a new `Authenticatable` model to the container in a service provider's `register()` method if the default `App\\Models\\User` model doesn't exist or a different one is desired. Dependencies: App\\Models\\Admin, Illuminate\\Contracts\\Auth\\Authenticatable.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Admin;\nuse Illuminate\\Contracts\\Auth\\Authenticatable;\n\n$this->app->bind(Authenticatable::class, Admin::class);\n```\n\n----------------------------------------\n\nTITLE: Adding Affix Text - Blade\nDESCRIPTION: This example illustrates how to add prefix and suffix text to the input using the `prefix` and `suffix` slots. It uses `<x-slot>` to define content that will be placed before and after the input element within the wrapper, allowing for customized labels or units.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-input-wrapper.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::input.wrapper>\n    <x-slot name=\"prefix\">\n        https://\n    </x-slot>\n\n    <x-filament::input\n        type=\"text\"\n        wire:model=\"domain\"\n    />\n\n    <x-slot name=\"suffix\">\n        .com\n    </x-slot>\n</x-filament::input.wrapper>\n```\n\n----------------------------------------\n\nTITLE: Updating Method Signature - Field::make() PHP\nDESCRIPTION: Illustrates the updated signature for the `Field::make()`, `MorphToSelect::make()`, `Placeholder::make()`, and `Builder\\Block::make()` methods in Filament v4.  This change is necessary for classes extending these components that override the `make()` method. The updated method signature includes an optional string parameter named `$name` and returns a static instance.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\npublic static function make(?string $name = null): static\n```\n\n----------------------------------------\n\nTITLE: Rendering Embedded Components - Blade\nDESCRIPTION: This code shows how to render the embedded components within the Blade file. It iterates through the components passed to the `components()` method and renders them within the layout.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/05-layout.md#_snippet_17\n\nLANGUAGE: blade\nCODE:\n```\n<div class=\"px-4 py-3 bg-gray-100 rounded-lg\">\n    @foreach ($getComponents() as $layoutComponent)\n        {{ $layoutComponent\n            ->record($getRecord())\n            ->recordKey($getRecordKey())\n            ->rowLoop($getRowLoop())\n            ->renderInLayout() }}\n    @endforeach\n</div>\n```\n\n----------------------------------------\n\nTITLE: Testing Table Column Searching with Pest\nDESCRIPTION: This code snippet demonstrates how to search individual columns in a Filament table using the `searchTableColumns()` method. It asserts that the correct records are visible and invisible based on the search term applied to a specific column ('title').\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/03-testing-tables.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can search posts by title column', function () {\n    $posts = Post::factory()->count(10)->create();\n\n    $title = $posts->first()->title;\n\n    livewire(PostResource\\Pages\\ListPosts::class)\n        ->searchTableColumns(['title' => $title])\n        ->assertCanSeeTableRecords($posts->where('title', $title))\n        ->assertCanNotSeeTableRecords($posts->where('title', '!=', $title));\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a configuration method to custom entry (PHP)\nDESCRIPTION: This code defines a custom infolist entry class with a configuration method `speed()` to set a speed value.  It also contains a getter `getSpeed()` to retrieve the stored value.  The `speed()` method utilizes a fluent interface by returning `$this`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/08-custom-entries.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Entry;\n\nclass AudioPlayerEntry extends Entry\n{\n    protected string $view = 'filament.infolists.components.audio-player-entry';\n    \n    protected ?float $speed = null;\n\n    public function speed(?float $speed): static\n    {\n        $this->speed = $speed;\n\n        return $this;\n    }\n\n    public function getSpeed(): ?float\n    {\n        return $this->speed;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Livewire Component\nDESCRIPTION: This command generates a new Livewire component using Laravel's Artisan command-line tool.  This is the first step in creating a Livewire component that can be used to render a form.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-form.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:livewire CreatePost\n```\n\n----------------------------------------\n\nTITLE: Configuring postcss.config.js - JavaScript\nDESCRIPTION: Configures PostCSS to use `postcss-nesting` and `cssnano` plugins.  `postcss-nesting` enables nested CSS rules, and `cssnano` minifies the CSS output for production.  This configuration is essential for processing the plugin's stylesheet.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/11-plugins/04-building-a-standalone-plugin.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    plugins: [\n        require('postcss-nesting')(),\n        require('cssnano')({\n            preset: 'default',\n        }),\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Opening Modal from Livewire - PHP\nDESCRIPTION: This code snippet demonstrates how to dispatch an 'open-modal' event from a Livewire component to open a specific modal, identified by its ID. The `$this->dispatch()` method is used to send the event with the modal's ID ('edit-user') as a parameter.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-modal.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->dispatch('open-modal', id: 'edit-user');\n```\n\n----------------------------------------\n\nTITLE: Updating Method Signature - ExportColumn::make() PHP\nDESCRIPTION: Illustrates the updated signature for the `ExportColumn::make()` and `ImportColumn::make()` methods in Filament v4 for actions. Any classes extending the `ExportColumn` or `ImportColumn` class and overriding the `make()` method must update the method signature to match the new signature. The updated method signature includes an optional string parameter named `$name` and returns a static instance.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\npublic static function make(?string $name = null): static\n```\n\n----------------------------------------\n\nTITLE: Conditionally persisting collapse state\nDESCRIPTION: This example demonstrates how to conditionally persist the collapsed state of a section based on a boolean value (e.g., a feature flag) using the `persistCollapsed()` method. This allows dynamic control over whether the collapse state is saved.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/03-sections.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Section;\n\nSection::make('Cart')\n    ->description('The items you have selected for purchase')\n    ->schema([\n        // ...\n    ])\n    ->collapsible()\n    ->persistCollapsed(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Generating a Livewire Component\nDESCRIPTION: This command generates a new Livewire component named 'ViewProduct'. It utilizes the artisan console command 'make:livewire'.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-schema.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:livewire ViewProduct\n```\n\n----------------------------------------\n\nTITLE: Changing Icon Button Color - Blade\nDESCRIPTION: These snippets show how to customize the color of a Filament icon button using the `color` attribute. Available color options include \"danger\", \"gray\", \"info\", \"success\", and \"warning\".  The `icon` and `label` attributes are used for visual styling. Requires Filament.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-icon-button.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-plus\"\n    color=\"danger\"\n    label=\"New label\"\n/>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-plus\"\n    color=\"gray\"\n    label=\"New label\"\n/>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-plus\"\n    color=\"info\"\n    label=\"New label\"\n/>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-plus\"\n    color=\"success\"\n    label=\"New label\"\n/>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-plus\"\n    color=\"warning\"\n    label=\"New label\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating Exporter Columns Automatically\nDESCRIPTION: This command generates the exporter columns automatically based on the model's database columns. It saves time by automatically setting up basic column definitions.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-exporter Product --generate\n```\n\n----------------------------------------\n\nTITLE: Basic Filament Modal Implementation - Blade\nDESCRIPTION: This code snippet demonstrates the basic structure of a Filament modal component in a Blade view. It includes a trigger button within the `trigger` slot to open the modal and a placeholder for the modal content. The modal content is placed inside the `<x-filament::modal>` tag.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-modal.md#_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal>\n    <x-slot name=\"trigger\">\n        <x-filament::button>\n            Open modal\n        </x-filament::button>\n    </x-slot>\n\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Removing Form Actions in Filament (PHP)\nDESCRIPTION: This snippet removes all actions from the form in a Filament page. It overrides the `getFormActions()` method and returns an empty array.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/03-creating-records.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nprotected function getFormActions(): array\n{\n    return [];\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Resource URL Slug - PHP\nDESCRIPTION: This code demonstrates how to customize the URL slug for a Filament resource by setting the `$slug` property. This affects the URL used to access the resource's pages.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?string $slug = 'pending-orders';\n```\n\n----------------------------------------\n\nTITLE: Access Script Data in JavaScript\nDESCRIPTION: This JavaScript code shows how to access the script data registered using `FilamentAsset::registerScriptData()` in PHP. The data is available through the `window.filamentData` object.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.filamentData.user.name // 'Dan Harrin'\n```\n\n----------------------------------------\n\nTITLE: Aligning Content Below Form Field Content - PHP\nDESCRIPTION: This set of snippets shows how to align content placed below a Filament form field using `Schema::start()`, `Schema::end()`, and `Schema::between()`. It utilizes an icon, text, and an action to demonstrate alignment options. `Flex` component usage is also demonstrated with `Schema::between()` to avoid space between icon and text.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Components\\Flex;\nuse Filament\\Schemas\\Components\\Icon;\nuse Filament\\Schemas\\Schema;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTextInput::make('name')\n    ->belowContent(Schema::end([\n        Icon::make(Heroicon::InformationCircle),\n        'This is the user\\'s full name.',\n        Action::make('generate'),\n    ]))\n\nTextInput::make('name')\n    ->belowContent(Schema::between([\n        Icon::make(Heroicon::InformationCircle),\n        'This is the user\\'s full name.',\n        Action::make('generate'),\n    ]))\n\nTextInput::make('name')\n    ->belowContent(Schema::between([\n        Flex::make([\n            Icon::make(Heroicon::InformationCircle)\n                ->grow(false),\n            'This is the user\\'s full name.',\n        ]),\n        Action::make('generate'),\n    ]))\n```\n\n----------------------------------------\n\nTITLE: Accessing Related Data in Filament Columns\nDESCRIPTION: This snippet shows how to display data from a relationship in a Filament table column. It uses dot notation to access the `name` attribute of the `author` relationship on the `Post` model. Filament eager-loads these relationships automatically. This code assumes a 'Post' model has an 'author' relationship.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('author.name')\n```\n\n----------------------------------------\n\nTITLE: Collapsed Section by Default - Blade\nDESCRIPTION: Shows how to make a section collapsed by default using the `collapsed` attribute in conjunction with the `collapsible` attribute.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-section.md#_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::section\n    collapsible\n    collapsed\n>\n    <x-slot name=\"heading\">\n        User details\n    </x-slot>\n\n    {{-- Content --}}\n</x-filament::section>\n```\n\n----------------------------------------\n\nTITLE: Opening Record URLs in New Tab (PHP)\nDESCRIPTION: This snippet shows how to configure a Filament table to open record URLs in a new tab using the `$table->openRecordUrlInNewTab()` method. When a user clicks a row, the associated URL will open in a new browser tab.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/01-overview.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->openRecordUrlInNewTab();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Empty State Icon - Filament Table (PHP)\nDESCRIPTION: This code snippet demonstrates how to customize the icon of the empty state in a Filament table using the `emptyStateIcon()` method. It requires the `Filament\\Tables\\Table` class. The method accepts a string representing the heroicon name.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/08-empty-state.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->emptyStateIcon('heroicon-o-bookmark');\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering the Filament Infolist in Blade\nDESCRIPTION: This Blade snippet renders the infolist in the Livewire component's view. It accesses the `productSchema` property of the Livewire component, which returns the schema to be rendered.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-schema.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n{{ $this->productSchema }}\n```\n\n----------------------------------------\n\nTITLE: Registering External CSS File\nDESCRIPTION: This code registers CSS files from a URL, typically for external stylesheets or those already in `/public`.  These files aren't copied during `php artisan filament:assets`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Assets\\Css;\nuse Filament\\Support\\Facades\\FilamentAsset;\n\nFilamentAsset::register([\n    Css::make('example-external-stylesheet', 'https://example.com/external.css'),\n    Css::make('example-local-stylesheet', asset('css/local.css')),\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing HasAvatar Contract\nDESCRIPTION: This code demonstrates how to implement the `HasAvatar` contract in the `App\\Models\\User` model. It overrides the `getFilamentAvatarUrl()` method to retrieve the user's avatar URL from the `avatar_url` attribute.  If the attribute is not set, Filament will fall back to the default avatar provider.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/01-overview.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Filament\\Models\\Contracts\\FilamentUser;\nuse Filament\\Models\\Contracts\\HasAvatar;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\nclass User extends Authenticatable implements FilamentUser, HasAvatar\n{\n    // ...\n\n    public function getFilamentAvatarUrl(): ?string\n    {\n        return $this->avatar_url;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Title Case Model Label - PHP\nDESCRIPTION: This code snippet disables the automatic capitalization of each word in the model label by setting the `$hasTitleCaseModelLabel` property to `false`. This affects the appearance of the label in page titles, navigation, and breadcrumbs.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nprotected static bool $hasTitleCaseModelLabel = false;\n```\n\n----------------------------------------\n\nTITLE: Conditional HTML Rendering\nDESCRIPTION: Conditionally renders content as HTML in a Filament Infolist TextEntry using the `html()` method. A boolean value, such as the result of a feature flag check, controls whether the text is rendered as HTML.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('description')\n    ->html(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatar with Source and Alt Text - Blade\nDESCRIPTION: This snippet demonstrates how to render a basic avatar using the Filament Blade component. It sets the image source (src) and alt text (alt) for the avatar. The component renders a circular image by default.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-avatar.md#_snippet_0\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::avatar\n    src=\"https://filamentphp.com/dan.jpg\"\n    alt=\"Dan Harrin\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Job Middleware - PHP\nDESCRIPTION: This snippet demonstrates how to customize the middleware that is applied to jobs of a certain importer, by overriding the `getJobMiddleware()` method in your importer class. Dependencies: Illuminate\\Queue\\Middleware\\WithoutOverlapping.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Queue\\Middleware\\WithoutOverlapping;\n\npublic function getJobMiddleware(): array\n{\n    return [\n        (new WithoutOverlapping(\"import{$this->import->getKey()}\"))->expireAfter(600),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Modal Footer - Blade\nDESCRIPTION: This code snippet demonstrates how to add a footer to a Filament modal using the `footer` slot. The footer content (represented by a comment) is placed within the `<x-slot name=\"footer\">` tag.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-modal.md#_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal>\n    {{-- Modal content --}}\n    \n    <x-slot name=\"footer\">\n        {{-- Modal footer content --}}\n    </x-slot>\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Asserting Schema Component Non-Existence - PHP\nDESCRIPTION: This snippet demonstrates how to assert that a Filament schema component does *not* exist using `asserSchemaComponentDoesNotExist()`. It requires the `Pest\\Livewire\\livewire` function and relies on the component's `key()`. The example checks for the absence of a 'no-such-section' component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('does not have a conditional component', function () {\n    livewire(CreatePost::class)\n        ->asserSchemaComponentDoesNotExist('no-such-section');\n});\n```\n\n----------------------------------------\n\nTITLE: Customize Billing Link\nDESCRIPTION: This code snippet shows how to customize the billing link in the tenant menu using the `tenantMenuItems()` method with the 'billing' key to modify the action label. Dependencies: `Filament\\Actions\\Action`, `Filament\\Panel`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantMenuItems([\n            'billing' => fn (Action $action) => $action->label('Manage subscription'),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Global Scopes - PHP\nDESCRIPTION: This code demonstrates how to remove specific global scopes from the Eloquent query of a Filament resource by overriding `getEloquentQuery` and specifying the scopes to remove in `withoutGlobalScopes()`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\npublic static function getEloquentQuery(): Builder\n{\n    return parent::getEloquentQuery()->withoutGlobalScopes([ActiveScope::class]);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an image to a dropdown item in Blade\nDESCRIPTION: This snippet illustrates how to add a circular image to a dropdown item using the `image` attribute. The value of the `image` attribute should be a valid URL pointing to an image.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-dropdown.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::dropdown.list.item image=\"https://filamentphp.com/dan.jpg\">\n    Dan Harrin\n</x-filament::dropdown.list.item>\n```\n\n----------------------------------------\n\nTITLE: Section with Icon - Blade\nDESCRIPTION: Illustrates how to add an icon to the section header using the `icon` attribute.  Requires a heroicon installed and referenced correctly in the Filament configuration.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-section.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::section icon=\"heroicon-o-user\">\n    <x-slot name=\"heading\">\n        User details\n    </x-slot>\n\n    {{-- Content --}}\n</x-filament::section>\n```\n\n----------------------------------------\n\nTITLE: Counting Relationships\nDESCRIPTION: This code shows how to count the number of related records using the `counts()` method.  The column name must follow Laravel's convention (e.g. `users_count`).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('users_count')\n    ->counts('users')\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling Copy to Clipboard - PHP\nDESCRIPTION: This snippet demonstrates how to conditionally enable the copy-to-clipboard functionality based on a feature flag using the `copyable()` method with a boolean value.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('apiKey')\n    ->label('API key')\n    ->copyable(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Using Other Icon Sets in Blade Components\nDESCRIPTION: Demonstrates how to use icons from other installed icon sets within Blade components in Filament. It shows passing the icon's name as an attribute to render the icon.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/04-icons.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::badge icon=\"iconic-star\">\n    Star\n</x-filament::badge>\n```\n\n----------------------------------------\n\nTITLE: Conditionally applying compact section styling\nDESCRIPTION: This example shows how to conditionally apply compact styling to a section based on a boolean value (e.g., a feature flag) using the `compact()` method, allowing for dynamic control over the section's appearance.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/03-sections.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Section;\n\nSection::make('Rate limiting')\n    ->description('Prevent abuse by limiting the number of requests per period')\n    ->schema([\n        // ...\n    ])\n    ->compact(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Creating a resource widget using Artisan\nDESCRIPTION: This command uses the Filament Artisan command to create a new widget class and its corresponding view file for a given resource. It creates the necessary files in the appropriate directories for the specified resource.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/10-widgets.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-widget CustomerOverview --resource=CustomerResource\n```\n\n----------------------------------------\n\nTITLE: Resizing a Textarea - PHP\nDESCRIPTION: This code demonstrates how to customize the size of a Textarea component by specifying the number of rows and columns.  `rows()` sets the vertical size and `cols()` sets the horizontal size. These methods allow for adjusting the visual dimensions of the textarea within the form.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/15-textarea.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Textarea;\n\nTextarea::make('description')\n    ->rows(10)\n    ->cols(20)\n```\n\n----------------------------------------\n\nTITLE: Hiding Column by Breakpoint - Filament PHP\nDESCRIPTION: This code snippet demonstrates how to hide a column in a Filament table based on the browser's responsive breakpoint. The `visibleFrom()` method is used to show the 'slug' column only from the 'md' (medium) breakpoint onwards.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/05-layout.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('slug')\n    ->visibleFrom('md')\n```\n\n----------------------------------------\n\nTITLE: Limiting Maximum Number of Rows - PHP\nDESCRIPTION: This snippet demonstrates how to limit the maximum number of rows that can be imported by using the `maxRows()` method on the `ImportAction`. Dependencies: App\\Filament\\Imports\\ProductImporter, Filament\\Actions\\ImportAction.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/11-import.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Imports\\ProductImporter;\nuse Filament\\Actions\\ImportAction;\n\nImportAction::make()\n    ->importer(ProductImporter::class)\n    ->maxRows(100000)\n```\n\n----------------------------------------\n\nTITLE: Making Filament Button Outlined - Blade\nDESCRIPTION: This snippet shows how to make a Filament button use an outlined design by adding the `outlined` attribute.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-button.md#_snippet_5\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::button outlined>\n    New user\n</x-filament::button>\n```\n\n----------------------------------------\n\nTITLE: Split Layout - Filament PHP\nDESCRIPTION: This code shows how to wrap columns within a `Split` component to allow them to stack on mobile devices. It includes an image column for 'avatar', and text columns for 'name' and 'email'. The 'name' column is set to be searchable and sortable, with a bold font weight.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/05-layout.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\FontWeight;\nuse Filament\\Tables\\Columns\\Layout\\Split;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nSplit::make([\n    ImageColumn::make('avatar')\n        ->circular(),\n    TextColumn::make('name')\n        ->weight(FontWeight::Bold)\n        ->searchable()\n        ->sortable(),\n    TextColumn::make('email'),\n])\n```\n\n----------------------------------------\n\nTITLE: Using getCharacterLimit() for Tooltips (PHP)\nDESCRIPTION: This snippet demonstrates how to use the `getCharacterLimit()` method to conditionally display a tooltip based on whether the column content exceeds the defined limit.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('description')\n    ->limit(50)\n    ->tooltip(function (TextColumn $column): ?string {\n        $state = $column->getState();\n\n        if (strlen($state) <= $column->getCharacterLimit()) {\n            return null;\n        }\n\n        // Only render the tooltip if the column contents exceeds the length limit.\n        return $state;\n    })\n```\n\n----------------------------------------\n\nTITLE: Use Utility Injection\nDESCRIPTION: This code demonstrates how to use utility injection when configuring the `AudioPlayerColumn`'s `speed()` method. A closure is passed to calculate the speed based on whether the associated Conference record is global.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/10-custom-columns.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Tables\\Columns\\AudioPlayerColumn;\n\nAudioPlayerColumn::make('recording')\n    ->speed(fn (Conference $record): float => $record->isGlobal() ? 1 : 0.5)\n```\n\n----------------------------------------\n\nTITLE: Customizing Locale for Numeric Formatting\nDESCRIPTION: Customizes the locale used when formatting a number with the `numeric()` method in Filament Infolists. The `locale` argument specifies the locale to use. Accepts both static values and functions for dynamic calculation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('stock')\n    ->numeric(locale: 'nl')\n```\n\n----------------------------------------\n\nTITLE: Setting Avatar Size with Custom Classes - Blade\nDESCRIPTION: This snippet demonstrates how to set the avatar size using custom CSS classes. You can pass any custom classes to the `size` attribute, such as `w-12 h-12` for a width and height of 12 units.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-avatar.md#_snippet_3\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::avatar\n    src=\"https://filamentphp.com/dan.jpg\"\n    alt=\"Dan Harrin\"\n    size=\"w-12 h-12\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Triggering Error State with Alpine.js\nDESCRIPTION: This example demonstrates how to trigger the error state using Alpine.js.  It uses `alpine-valid` to conditionally apply error styling based on whether the 'name' field is in the `errors` array. This approach allows for client-side validation feedback.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-input-wrapper.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<div x-data=\"{ errors: ['name'] }\">\n    <x-filament::input.wrapper alpine-valid=\"! errors.includes('name')\">\n        <x-filament::input\n            type=\"text\"\n            wire:model=\"name\"\n        />\n    </x-filament::input.wrapper>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing stacked overlap in Filament\nDESCRIPTION: This snippet shows how to customize the overlap between stacked images using the `overlap()` method. The value should be between 0 and 8.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/04-image.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\ImageColumn;\n\nImageColumn::make('colleagues.avatar')\n    ->imageHeight(40)\n    ->circular()\n    ->stacked()\n    ->overlap(2)\n```\n\n----------------------------------------\n\nTITLE: Disabling Closing Modal by Escaping - Blade\nDESCRIPTION: This code snippet demonstrates how to prevent a Filament modal from closing when the escape key is pressed by setting the `close-by-escaping` attribute to `false`. The colon `:` before the attribute indicates that it is a dynamic attribute.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-modal.md#_snippet_16\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal :close-by-escaping=\"false\">\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Watch for JavaScript Changes with Node.js and esbuild\nDESCRIPTION: This bash command executes the `build.js` script with the `--dev` flag, enabling esbuild's watch mode to automatically recompile the JavaScript and Alpine component on file changes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnode bin/build.js --dev\n```\n\n----------------------------------------\n\nTITLE: Initializing a Ternary Filter in Filament, PHP\nDESCRIPTION: Creates a basic ternary filter for the `is_admin` column in a Filament table.  This filter allows users to select between true, false, and blank states. The filter uses the default behavior for each state, modifying the query accordingly.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/03-ternary.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Filters\\TernaryFilter;\n\nTernaryFilter::make('is_admin')\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum (PHP)\nDESCRIPTION: This code snippet demonstrates how to calculate the total of all values in the dataset using the `Sum` summarizer. It applies the summarizer to the 'price' column to calculate the total price.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Sum;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('price')\n    ->summarize(Sum::make())\n```\n\n----------------------------------------\n\nTITLE: Post Action Tenant Menu Item\nDESCRIPTION: This code snippet illustrates how to create a tenant menu item that sends a POST HTTP request using the `postAction()` method on an Action. It specifies a route to be called when the menu item is clicked. Dependency: `Filament\\Actions\\Action`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/03-tenancy.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('lockSession')\n    ->postAction(fn (): string => route('lock-session'))\n```\n\n----------------------------------------\n\nTITLE: Testing Table Column Not Rendering with Pest\nDESCRIPTION: This code snippet demonstrates how to test if a specific column is NOT rendered in a Filament table using `assertCanNotRenderTableColumn()`. It verifies that the 'comments' column is not present in the rendered table HTML after creating some posts.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/03-testing-tables.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can not render post comments', function () {\n    Post::factory()->count(10)->create()\n\n    livewire(PostResource\\Pages\\ListPosts::class)\n        ->assertCanNotRenderTableColumn('comments');\n});\n```\n\n----------------------------------------\n\nTITLE: Install Filament Frontend Assets (Bash)\nDESCRIPTION: This command installs Livewire, Alpine.js, and Tailwind CSS. It is intended for use in new Laravel projects, as it may overwrite existing files.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/01-introduction/02-installation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan filament:install --scaffold\n\nnpm install\n\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Adding Tooltip to Filament Link - Blade\nDESCRIPTION: This snippet showcases how to add a tooltip to the Filament Link Blade component using the `tooltip` attribute. This provides additional context or information to the user when they hover over the link.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-link.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link tooltip=\"Register a user\">\n    New user\n</x-filament::link>\n```\n\n----------------------------------------\n\nTITLE: Moving to Next Wizard Step (PHP)\nDESCRIPTION: Shows how to navigate to the next step in a Filament wizard using `goToNextWizardStep()` and assert for form errors using `assertHasFormErrors()`. It requires the `CreatePost` Livewire component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/04-testing-schemas.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('moves to next wizard step', function () {\n    livewire(CreatePost::class)\n        ->goToNextWizardStep()\n        ->assertHasFormErrors(['title']);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Conversions for Display\nDESCRIPTION: This code snippet specifies a conversion to use when displaying the file in the form. If a conversion named 'thumb' exists, it will be used; otherwise, the original file is displayed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-media-library-plugin/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\SpatieMediaLibraryFileUpload;\n\nSpatieMediaLibraryFileUpload::make('attachments')\n    ->conversion('thumb')\n```\n\n----------------------------------------\n\nTITLE: Custom Avatar Provider\nDESCRIPTION: This code snippet illustrates how to create a custom avatar provider for Filament.  The `BoringAvatarsProvider` class implements the `AvatarProvider` interface and generates an avatar URL using the `boringavatars.com` service, based on the user's name. This allows for easy swapping of avatar services.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/01-overview.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Filament\\AvatarProviders;\n\nuse Filament\\AvatarProviders\\Contracts;\nuse Filament\\Facades\\Filament;\nuse Illuminate\\Contracts\\Auth\\Authenticatable;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass BoringAvatarsProvider implements Contracts\\AvatarProvider\n{\n    public function get(Model | Authenticatable $record): string\n    {\n        $name = str(Filament::getNameForDefaultAvatar($record))\n            ->trim()\n            ->explode(' ')\n            ->map(fn (string $segment): string => filled($segment) ? mb_substr($segment, 0, 1) : '')\n            ->join(' ');\n\n        return 'https://source.boringavatars.com/beam/120/' . urlencode($name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Section Component - Blade\nDESCRIPTION: Demonstrates the basic usage of the Filament section component with a heading slot to group content. This is the foundational element for creating sections within Filament interfaces.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-section.md#_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::section>\n    <x-slot name=\"heading\">\n        User details\n    </x-slot>\n\n    {{-- Content --}}\n</x-filament::section>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Render Hook - Blade\nDESCRIPTION: This snippet demonstrates how to render a registered render hook in a Blade template using the `FilamentView::renderHook()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/01-render-hooks.md#_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n{{ \\Filament\\Support\\Facades\\FilamentView::renderHook(\\Filament\\View\\PanelsRenderHook::PAGE_START) }}\n```\n\n----------------------------------------\n\nTITLE: Publishing Translations (Artisan)\nDESCRIPTION: This command publishes the translation files for the Filament Spatie Laravel Settings Plugin. This allows developers to customize the plugin's text to different languages.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-settings-plugin/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=filament-spatie-laravel-settings-plugin-translations\n```\n\n----------------------------------------\n\nTITLE: Handling Boolean Values - PHP\nDESCRIPTION: This code configures an IconEntry to display a check or cross icon based on a boolean value. The `boolean()` method automatically displays a checkmark for `true` and an X for `false`. It assumes the 'is_featured' attribute is a boolean or cast to a boolean.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/03-icon-entry.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\IconEntry;\n\nIconEntry::make('is_featured')\n    ->boolean()\n```\n\n----------------------------------------\n\nTITLE: Checking for Missing Translations\nDESCRIPTION: This Artisan command checks for missing translations in Filament for a specified locale. It compares the translations in the package or application against the keys that should be translated.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/01-introduction/05-contributing.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan filament:check-translations es\n```\n\n----------------------------------------\n\nTITLE: Conditionally stacking images with ImageColumn in Filament\nDESCRIPTION: This snippet shows how to conditionally display stacked images based on a boolean value (e.g., a feature flag).\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/04-image.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\ImageColumn;\n\nImageColumn::make('colleagues.avatar')\n    ->imageHeight(40)\n    ->circular()\n    ->stacked(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Sorting Navigation Items - PHP\nDESCRIPTION: This code snippet demonstrates specifying the order of navigation items using the `$navigationSort` property. This property accepts an integer, which determines the item's position in the navigation menu.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?int $navigationSort = 2;\n```\n\n----------------------------------------\n\nTITLE: Setting Active State in Filament Tabs Blade\nDESCRIPTION: This snippet shows how to set a tab to appear active by default using the `active` attribute. It highlights the initial active tab within the Filament Tabs component. No parameters besides the `active` attribute are needed for this simple case.  Other tabs may exist but are represented by a comment.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-tabs.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::tabs>\n    <x-filament::tabs.item active>\n        Tab 1\n    </x-filament::tabs.item>\n\n    {{-- Other tabs --}}\n</x-filament::tabs>\n```\n\n----------------------------------------\n\nTITLE: Getting Notification ID - PHP\nDESCRIPTION: This code snippet shows how to get the ID of a Filament notification after it has been sent. It uses the `getId()` method on the `Notification` object. The `persistent()` method keeps the notification from automatically disappearing.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/01-overview.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\n$notification = Notification::make()\n    ->title('Hello')\n    ->persistent()\n    ->send()\n\n$notificationId = $notification->getId()\n```\n\n----------------------------------------\n\nTITLE: Testing Table Column Extra Attributes with Pest\nDESCRIPTION: This code snippet demonstrates how to test the extra attributes of a column using `assertTableColumnHasExtraAttributes()` and `assertTableColumnDoesNotHaveExtraAttributes()`. It asserts the presence of the 'text-danger-500' class and the absence of the 'text-primary-500' class for the 'author' column.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/03-testing-tables.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('displays author in red', function () {\n    $post = Post::factory()->create();\n\n    livewire(PostsTable::class)\n        ->assertTableColumnHasExtraAttributes('author', ['class' => 'text-danger-500'], $post)\n        ->assertTableColumnDoesNotHaveExtraAttributes('author', ['class' => 'text-primary-500'], $post);\n});\n```\n\n----------------------------------------\n\nTITLE: Access Livewire Component in Blade\nDESCRIPTION: This Blade snippet illustrates how to access the current Livewire component instance within the view using `$this`.  It demonstrates checking if the current component is a specific RelationManager.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/10-custom-columns.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n@php\n    use Filament\\Resources\\Users\\RelationManagers\\ConferencesRelationManager;\n@endphp\n\n<div>\n    @if ($this instanceof ConferencesRelationManager)\n        You are editing conferences the of a user.\n    @endif\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Form with Existing Data\nDESCRIPTION: This PHP code shows how to initialize the form with data from an existing `Post` model instance. It uses the `$this->form->fill()` method to populate the form with the model's attributes.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-form.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\Post;\n\npublic function mount(Post $post): void\n{\n    $this->form->fill($post->toArray());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Filament Widget View (Blade)\nDESCRIPTION: This Blade template defines the view for the Filament widget, using Filament's components for styling and structure. It includes the Alpine component for dynamic functionality, loaded asynchronously.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/11-plugins/03-building-a-panel-plugin.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament-widgets::widget>\n    <x-filament::section>\n        <x-slot name=\"heading\">\n            {{ __('clock-widget::clock-widget.title') }}\n        </x-slot>\n\n        <div\n            x-load\n            x-load-src=\"{{ \\Filament\\Support\\Facades\\FilamentAsset::getAlpineComponentSrc('clock-widget', 'awcodes/clock-widget') }}\"\n            x-data=\"clockWidget()\"\n            class=\"text-center\"\n        >\n            <p>{{ __('clock-widget::clock-widget.description') }}</p>\n            <p class=\"text-xl\" x-text=\"time\"></p>\n        </div>\n    </x-filament::section>\n</x-filament-widgets::widget>\n```\n\n----------------------------------------\n\nTITLE: Updating Method Signature - Column::make() PHP\nDESCRIPTION: Illustrates the updated signature for the `Column::make()` and `Constraint::make()` methods in Filament v4 for tables. Any classes extending the `Column` or `Constraint` class and overriding the `make()` method must update the method signature to match the new signature. The updated method signature includes an optional string parameter named `$name` and returns a static instance.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\npublic static function make(?string $name = null): static\n```\n\n----------------------------------------\n\nTITLE: Configure Vite Plugin (JavaScript)\nDESCRIPTION: This Javascript snippet configures the Vite plugin in `vite.config.js` to include Laravel and Tailwind CSS plugins.  This is necessary for compiling assets.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/01-introduction/02-installation.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport laravel from 'laravel-vite-plugin'\nimport tailwindcss from '@tailwindcss/vite'\n\nexport default defineConfig({\n    plugins: [\n        laravel({\n            input: ['resources/css/app.css', 'resources/js/app.js'],\n            refresh: true,\n        }),\n        tailwindcss(),\n    ],\n})\n```\n\n----------------------------------------\n\nTITLE: Conditionally making sections collapsible/collapsed\nDESCRIPTION: This example shows how to conditionally set whether a section is collapsible or collapsed based on a boolean value (e.g., a feature flag) using the `collapsible()` and `collapsed()` methods. This allows for dynamic control of section behavior.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/schemas/docs/03-sections.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Section;\n\nSection::make('Cart')\n    ->description('The items you have selected for purchase')\n    ->schema([\n        // ...\n    ])\n    ->collapsible(FeatureFlag::active())\n    ->collapsed(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Saving Relationships After Creation\nDESCRIPTION: This PHP code demonstrates how to save the model's relationships after the model has been created and the form has been submitted using the `$this->form->model($post)->saveRelationships()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-form.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\Post;\n\npublic function create(): void\n{\n    $post = Post::create($this->form->getState());\n    \n    // Save the relationships from the form to the post after it is created.\n    $this->form->model($post)->saveRelationships();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ToggleButtons with Static Options (PHP)\nDESCRIPTION: This snippet demonstrates how to create a ToggleButtons component with a static array of options for selecting a status. It utilizes the `options()` method to define the available choices.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/18-toggle-buttons.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\n\nToggleButtons::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'scheduled' => 'Scheduled',\n        'published' => 'Published'\n    ])\n```\n\n----------------------------------------\n\nTITLE: Alpine.js Component Definition in JavaScript\nDESCRIPTION: This JavaScript code defines an Alpine.js component using a function that returns an object with `state`, `init`, and other properties. This component is designed to be compiled using `esbuild` and loaded asynchronously.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Import any external JavaScript libraries from NPM here.\n\nexport default function testComponent({\n    state,\n}) {\n    return {\n        state,\n        \n        // You can define any other Alpine.js properties here.\n\n        init: function () {\n            // Initialise the Alpine component here, if you need to.\n        },\n        \n        // You can define any other Alpine.js functions here.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Filter Form Schema - Filament PHP\nDESCRIPTION: This code snippet demonstrates how to customize the form schema of the entire filter form at once in a Filament table. The `filtersFormSchema()` method is used with a closure that receives the array of defined `$filters`, allowing you to rearrange them into your desired layout using form layout components.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/03-filters/06-layout.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Schemas\\Components\\Section;\nuse Filament\\Tables\\Filters\\Filter;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            Filter::make('is_featured'),\n            Filter::make('published_at'),\n            Filter::make('author'),\n        ])\n        ->filtersFormColumns(2)\n        ->filtersFormSchema(fn (array $filters): array => [\n            Section::make('Visibility')\n                ->description('These filters affect the visibility of the records in the table.')\n                ->schema([\n                    $filters['is_featured'],\n                    $filters['published_at'],\n                ])\n                    ->columns(2)\n                ->columnSpanFull(),\n            $filters['author'],\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally showing remaining images count in Filament\nDESCRIPTION: This snippet demonstrates how to conditionally display the remaining text, based on a feature flag.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/04-image.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\ImageColumn;\n\nImageColumn::make('colleagues.avatar')\n    ->imageHeight(40)\n    ->circular()\n    ->stacked()\n    ->limit(3)\n    ->limitedRemainingText(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Initializing Filament Tabs Component in Blade\nDESCRIPTION: This snippet demonstrates the basic usage of the Filament Tabs Blade component. It renders a set of tabs, each containing a title. The component is used to toggle between multiple sections of content.  No specific dependencies are required beyond the Filament package itself.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-tabs.md#_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::tabs label=\"Content tabs\">\n    <x-filament::tabs.item>\n        Tab 1\n    </x-filament::tabs.item>\n\n    <x-filament::tabs.item>\n        Tab 2\n    </x-filament::tabs.item>\n\n    <x-filament::tabs.item>\n        Tab 3\n    </x-filament::tabs.item>\n</x-filament::tabs>\n```\n\n----------------------------------------\n\nTITLE: Referencing Modal with ID - Blade\nDESCRIPTION: This code snippet shows how to assign an ID to a Filament modal, which is necessary for controlling the modal's visibility via JavaScript.  The `id` attribute is set to 'edit-user', allowing it to be targeted by `open-modal` and `close-modal` events.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-modal.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal id=\"edit-user\">\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Formatting Date and Time - PHP\nDESCRIPTION: These snippets demonstrate how to format date and time values in a TextColumn using the `date()`, `dateTime()`, and `time()` methods.  They accept a format string using PHP date formatting tokens. These functions allow you to control how date and time information is displayed in the table.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('created_at')\n    ->date()\n\nTextColumn::make('created_at')\n    ->dateTime()\n\nTextColumn::make('created_at')\n    ->time()\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('created_at')\n    ->date('M j, Y')\n    \nTextColumn::make('created_at')\n    ->dateTime('M j, Y H:i:s')\n    \nTextColumn::make('created_at')\n    ->time('H:i:s')\n```\n\n----------------------------------------\n\nTITLE: Formatting Money with Decimal Places\nDESCRIPTION: Formats a column as currency with a specified number of decimal places using the `decimalPlaces` argument.  This allows customization of the precision of the displayed currency amount.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('price')\n    ->money('EUR', decimalPlaces: 3)\n```\n\n----------------------------------------\n\nTITLE: Adding Translations for Filament Widget\nDESCRIPTION: This PHP code defines the translation keys for the Filament widget, allowing users to translate the widget's text into their language.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/11-plugins/03-building-a-panel-plugin.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'title' => 'Clock Widget',\n    'description' => 'Your current time is:',\n];\n```\n\n----------------------------------------\n\nTITLE: Conditionally enabling Color Copying\nDESCRIPTION: This code demonstrates how to conditionally enable or disable the copyable functionality based on a boolean value. This example uses a FeatureFlag, but any boolean condition can be used.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/05-color-entry.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\ColorEntry;\n\nColorEntry::make('color')\n    ->copyable(FeatureFlag::active())\n```\n\n----------------------------------------\n\nTITLE: Setting Add Action Label - Filament Builder (PHP)\nDESCRIPTION: This snippet demonstrates how to set a custom label for the add action button in a Filament Builder component using the `addActionLabel()` method. The label specifies the text displayed on the button used to add new blocks to the builder. It uses a static string value.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->addActionLabel('Add a new block')\n```\n\n----------------------------------------\n\nTITLE: Customizing the Entire Restore Notification in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to fully customize the success notification using the `successNotification()` method. It allows defining the title and body of the notification. Requires Filament notifications.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/10-restore.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\RestoreAction;\nuse Filament\\Notifications\\Notification;\n\nRestoreAction::make()\n    ->successNotification(\n       Notification::make()\n            ->success()\n            ->title('User restored')\n            ->body('The user has been restored successfully.'),\n    )\n```\n\n----------------------------------------\n\nTITLE: Customizing icon color in Filament Infolists (PHP)\nDESCRIPTION: This snippet customizes the color of the icon in a TextEntry component using the `iconColor()` method. The icon color is set to 'primary', independent of the text color. The `iconColor()` method also accepts a function for dynamic icon color calculation.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/infolists/docs/02-text-entry.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\nuse Filament\\Support\\Icons\\Heroicon;\n\nTextEntry::make('email')\n    ->icon(Heroicon::Envelope)\n    ->iconColor('primary')\n```\n\n----------------------------------------\n\nTITLE: Rendering a Livewire Component in Blade\nDESCRIPTION: This Blade directive renders the Livewire component named 'create-post' within a Blade view.  This is a simple way to embed a Livewire component into a webpage.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-form.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n@livewire('create-post')\n```\n\n----------------------------------------\n\nTITLE: Accessing Another Component's State in Blade\nDESCRIPTION: Demonstrates how to access the state of another form field within the current Blade view using the `$get()` function. This allows you to dynamically retrieve and display values from other fields.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/20-custom-fields.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<x-dynamic-component\n    :component=\"$getFieldWrapperView()\"\n    :field=\"$field\"\n>\n    {{ $get('email') }}\n</x-dynamic-component>\n```\n\n----------------------------------------\n\nTITLE: Install esbuild via NPM\nDESCRIPTION: This bash command installs `esbuild` as a development dependency using NPM.  `esbuild` will be used to compile Javascript and Alpine components into a single file.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/02-assets.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm install esbuild --save-dev\n```\n\n----------------------------------------\n\nTITLE: Disabling Global Scopes - PHP\nDESCRIPTION: This code snippet demonstrates disabling global scopes for a Filament resource query.  It overrides the `getEloquentQuery` method and uses `withoutGlobalScopes()` to remove all global scopes. Requires: `Builder`\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/01-overview.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\npublic static function getEloquentQuery(): Builder\n{\n    return parent::getEloquentQuery()->withoutGlobalScopes();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Icon to Filament Link - Blade\nDESCRIPTION: This snippet demonstrates how to add an icon to the Filament Link Blade component using the `icon` attribute.  It also shows how to change the icon's position to be after the text using the `icon-position` attribute. Icons are from heroicons.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-link.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link icon=\"heroicon-m-sparkles\">\n    New user\n</x-filament::link>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link\n    icon=\"heroicon-m-sparkles\"\n    icon-position=\"after\"\n>\n    New user\n</x-filament::link>\n```\n\n----------------------------------------\n\nTITLE: Setting Icon Button Size - Blade\nDESCRIPTION: These snippets demonstrate how to control the size of a Filament icon button using the `size` attribute.  Available sizes are \"xs\" (extra small), \"sm\" (small), \"lg\" (large), and \"xl\" (extra large). The `icon` and `label` attributes are included for completeness. Requires Filament.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-icon-button.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-plus\"\n    size=\"xs\"\n    label=\"New label\"\n/>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-plus\"\n    size=\"sm\"\n    label=\"New label\"\n/>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-s-plus\"\n    size=\"lg\"\n    label=\"New label\"\n/>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-s-plus\"\n    size=\"xl\"\n    label=\"New label\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Bulk Toggling for CheckboxList - PHP\nDESCRIPTION: This example demonstrates how to enable bulk toggling of checkboxes in the `CheckboxList` component using the `bulkToggleable()` method. This allows users to select or deselect all checkboxes at once. It requires the `Filament\\Forms\\Components\\CheckboxList` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/06-checkbox-list.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technologies')\n    ->options([\n        // ...\n    ])\n    ->bulkToggleable()\n```\n\n----------------------------------------\n\nTITLE: Testing Action Color in Filament\nDESCRIPTION: This code tests the color of a Filament action using `assertActionHasColor()` and `assertActionDoesNotHaveColor()` methods within a Pest test. It asserts the 'delete' action has 'danger' color and 'print' action does not have 'danger' color.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/10-testing/05-testing-actions.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('actions display proper colors', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertActionHasColor('delete', 'danger')\n        ->assertActionDoesNotHaveColor('print', 'danger');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Forms\nDESCRIPTION: This PHP code shows how to define multiple forms using individual methods, each returning a schema. Notice how `statePath` is unique for each form.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-form.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\MarkdownEditor;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Schemas\\Schema;\n\npublic function editPostForm(Schema $schema): Schema\n{\n    return $schema\n        ->components([\n            TextInput::make('title')\n                ->required(),\n            MarkdownEditor::make('content'),\n            // ...\n        ])\n        ->statePath('postData')\n        ->model($this->post);\n}\n\npublic function createCommentForm(Schema $schema): Schema\n{\n    return $schema\n        ->components([\n            TextInput::make('name')\n                ->required(),\n            TextInput::make('email')\n                ->email()\n                ->required(),\n            MarkdownEditor::make('content')\n                ->required(),\n            // ...\n        ])\n        ->statePath('commentData')\n        ->model(Comment::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the field instance in Filament\nDESCRIPTION: This code snippet shows how to access the current component instance in a Filament form using the `$component` parameter. Requires Filament\\Forms\\Components\\Field.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/01-overview.md#_snippet_60\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Field;\n\nfunction (Field $component) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Filament Infolists\nDESCRIPTION: This command installs the Filament Infolists package using Composer. The Infolists package offers a way to display read-only information about a particular record. It requires Composer to be installed.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require filament/infolists\n```\n\n----------------------------------------\n\nTITLE: Disabling Success Notification (Filament, PHP)\nDESCRIPTION: This code shows how to completely disable the success notification that is displayed after successful replication. It achieves this by passing `null` to the `successNotification()` method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/08-replicate.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\RestoreAction;\n\nReplicateAction::make()\n    ->successNotification(null)\n```\n\n----------------------------------------\n\nTITLE: Accessing Action Arguments in PHP\nDESCRIPTION: This PHP code shows how to access arguments passed to a Filament action. The action retrieves the post ID from the `$arguments` array and uses it to find and delete the corresponding post.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-action.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Actions\\Action;\n\npublic function deleteAction(): Action\n{\n    return Action::make('delete')\n        ->requiresConfirmation()\n        ->action(function (array $arguments) {\n            $post = Post::find($arguments['post']);\n\n            $post?->delete();\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Breadcrumbs Navigation in Blade\nDESCRIPTION: This code snippet demonstrates how to use the `filament::breadcrumbs` component to render a breadcrumb navigation. It accepts an array where keys are URLs and values are the text labels for each breadcrumb link. The component displays a linear navigation path for the user.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-breadcrumbs.md#_snippet_0\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::breadcrumbs :breadcrumbs=\"[\n    '/' => 'Home',\n    '/dashboard' => 'Dashboard',\n    '/dashboard/users' => 'Users',\n    '/dashboard/users/create' => 'Create User',\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Refreshing Sidebar from JavaScript (Alpine.js) - HTML\nDESCRIPTION: This code snippet shows how to dispatch a `refresh-sidebar` event from JavaScript using the `$dispatch()` Alpine.js helper method.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/06-navigation/01-overview.md#_snippet_31\n\nLANGUAGE: html\nCODE:\n```\n<button x-on:click=\"$dispatch('refresh-sidebar')\" type=\"button\">\n    Refresh Sidebar\n</button>\n```\n\n----------------------------------------\n\nTITLE: Publishing Filament Configuration (Bash)\nDESCRIPTION: This command publishes the Filament configuration file using the `filament-config` tag. This allows customization of Filament's behavior, particularly concerning filesystem disk settings and file generation preferences.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=filament-config\n```\n\n----------------------------------------\n\nTITLE: Section Icon Color - Blade\nDESCRIPTION: Demonstrates how to change the color of the section icon using the `icon-color` attribute.  Supported colors include `danger`, `info`, `primary`, `success`, and `warning`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/03-section.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::section\n    icon=\"heroicon-o-user\"\n    icon-color=\"info\"\n>\n    <x-slot name=\"heading\">\n        User details\n    </x-slot>\n\n    {{-- Content --}}\n</x-filament::section>\n```\n\n----------------------------------------\n\nTITLE: Install Filament Panel Builder (Bash)\nDESCRIPTION: These commands install the Filament Panel Builder via Composer and then run the Artisan installer. The installer creates and registers a new Laravel service provider.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/01-introduction/02-installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/filament\n\nphp artisan filament:install --panels\n```\n\n----------------------------------------\n\nTITLE: Creating a Livewire Component using Artisan\nDESCRIPTION: This command generates a new Livewire component using the Artisan CLI. It creates the necessary PHP class and Blade view file for the component.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-action.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:livewire ManageProduct\n```\n\n----------------------------------------\n\nTITLE: Table Render Hook Constants - PHP\nDESCRIPTION: This snippet shows the usage of `TablesRenderHook` constants for various positions in a Filament table. These constants are used when registering render hooks to inject content at specific locations within a table.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/09-advanced/01-render-hooks.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\View\\TablesRenderHook;\n```\n\n----------------------------------------\n\nTITLE: Laravel Pint Configuration (JSON)\nDESCRIPTION: This JSON configuration provides a starting point for Laravel Pint, used to clean up code style after running the Filament upgrade script. It includes rules for blank lines, concatenation spacing, fully qualified strict types, global namespace imports, method argument spacing, single trait inserts, and types spacing.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"preset\": \"laravel\",\n    \"rules\": {\n        \"blank_line_before_statement\": true,\n        \"concat_space\": {\n            \"spacing\": \"one\"\n        },\n        \"fully_qualified_strict_types\": {\n            \"import_symbols\": true\n        },\n        \"global_namespace_import\": true,\n        \"method_argument_space\": true,\n        \"single_trait_insert_per_statement\": true,\n        \"types_spaces\": {\n            \"space\": \"single\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Deferred Table Filters in Filament\nDESCRIPTION: This code snippet shows how to disable the default deferred filter behavior in Filament tables.  It uses the `deferFilters(false)` method within the `table` function to immediately apply filters without requiring a button click. Requires the `Filament\\Tables\\Table` class.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/14-upgrade-guide.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->deferFilters(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Close Notification Event with Custom ID - Blade\nDESCRIPTION: This code snippet demonstrates how to dispatch the `close-notification` event with a custom notification ID from Alpine.js within a Blade template. This is useful when a random ID isn't persisted.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/01-overview.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<button x-on:click=\"$dispatch('close-notification', { id: 'greeting' })\" type=\"button\">\n    Close Notification\n</button>\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone for Date Formatting - PHP\nDESCRIPTION: These snippets demonstrate how to set the timezone for date formatting in a TextColumn. The `dateTime(timezone: 'America/New_York')` method can be used directly.  Alternatively, the `timezone('America/New_York')` method can be chained before any of the date formatting methods (`dateTime()`, etc.) to apply the timezone to all date/time displays.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/02-text.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('created_at')\n    ->dateTime(timezone: 'America/New_York')\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('created_at')\n    ->timezone('America/New_York')\n    ->dateTime()\n```\n\n----------------------------------------\n\nTITLE: Opening URLs from Global Search Actions (PHP)\nDESCRIPTION: This snippet demonstrates opening a URL from a global search action, optionally in a new tab, using the `url()` method of the `Filament\\Actions\\Action` class and the `shouldOpenInNewTab` parameter.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/03-resources/09-global-search.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('view')\n    ->url(static::getUrl('view', ['record' => $record]), shouldOpenInNewTab: true)\n```\n\n----------------------------------------\n\nTITLE: Filament Blade Layout (Blade)\nDESCRIPTION: This Blade template sets up the basic structure for a Filament-enabled application. It includes Filament styles and scripts, meta tags, and the slot for content.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/01-introduction/02-installation.md#_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"{{ str_replace('_', '-', app()->getLocale()) }}\">\n    <head>\n        <meta charset=\"utf-8\">\n\n        <meta name=\"application-name\" content=\"{{ config('app.name') }}\">\n        <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n        <title>{{ config('app.name') }}</title>\n\n        <style>\n            [x-cloak] {\n                display: none !important;\n            }\n        </style>\n\n        @filamentStyles\n        @vite('resources/css/app.css')\n    </head>\n\n    <body class=\"antialiased\">\n        {{ $slot }}\n\n        @livewire('notifications') {{-- Only required if you wish to send flash notifications --}}\n\n        @filamentScripts\n        @vite('resources/js/app.js')\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom HTML - Blade\nDESCRIPTION: This code shows the Blade template used to render custom HTML within a Filament table. It accesses the table record using `$getRecord()` to display the email address.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/05-layout.md#_snippet_15\n\nLANGUAGE: blade\nCODE:\n```\n<p class=\"px-4 py-3 bg-gray-100 rounded-lg\">\n    <span class=\"font-medium\">\n        Email address:\n    </span>\n\n    <span>\n        {{ $getRecord()->email }}\n    </span>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Cleaning composer.json for Filament Plugin\nDESCRIPTION: This code snippet shows the necessary changes to the `composer.json` file when creating a simple Filament plugin, removing the database factories and facade aliases.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/11-plugins/03-building-a-panel-plugin.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"autoload\": {\n    \"psr-4\": {\n        // We can remove the database factories\n        \"Awcodes\\\\ClockWidget\\\\Database\\\\Factories\\\\\": \"database/factories/\"\n    }\n},\n\"extra\": {\n    \"laravel\": {\n        // We can remove the facade\n        \"aliases\": {\n            \"ClockWidget\": \"Awcodes\\\\ClockWidget\\\\Facades\\\\ClockWidget\"\n        }\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Cleaning up composer.json - JSON\nDESCRIPTION: Removes unneeded options from the composer.json file, specifically database factories and facade aliases. This helps to reduce boilerplate code for simpler plugins. This snippet shows how to modify the `autoload` and `extra` sections of the `composer.json` file.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/11-plugins/04-building-a-standalone-plugin.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"autoload\": {\n    \"psr-4\": {\n        // We can remove the database factories\n        \"Awcodes\\\\Headings\\\\Database\\\\Factories\\\\\": \"database/factories/\"\n    }\n},\n\"extra\": {\n    \"laravel\": {\n        // We can remove the facade\n        \"aliases\": {\n            \"Headings\": \"Awcodes\\\\Headings\\\\Facades\\\\ClockWidget\"\n        }\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Customizing remaining images text size in Filament\nDESCRIPTION: This snippet demonstrates how to customize the remaining text using different TextSize enums, such as TextSize::Large.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/02-columns/04-image.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Support\\Enums\\TextSize;\n\nImageColumn::make('colleagues.avatar')\n    ->imageHeight(40)\n    ->circular()\n    ->stacked()\n    ->limit(3)\n    ->limitedRemainingText(size: TextSize::Large)\n```\n\n----------------------------------------\n\nTITLE: Reordering Items with Buttons - Filament Builder (PHP)\nDESCRIPTION: This snippet demonstrates how to enable reordering items within a Filament Builder component using up and down buttons instead of drag and drop using the `reorderableWithButtons()` method. This provides an alternative UI for changing the order of blocks.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/forms/docs/13-builder.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->reorderableWithButtons()\n```\n\n----------------------------------------\n\nTITLE: Install Filament Spatie Google Fonts Plugin\nDESCRIPTION: This command installs the Filament Spatie Google Fonts plugin using Composer. It requires Composer to be installed and configured in the project environment.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-google-fonts-plugin/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/spatie-laravel-google-fonts-plugin:\"^3.2\" -W\n```\n\n----------------------------------------\n\nTITLE: Preventing Recovery Code Regeneration in Filament\nDESCRIPTION: This code snippet shows how to prevent users from regenerating their recovery codes by using the `regenerableRecoveryCodes(false)` method on the `GoogleTwoFactorAuthentication` instance in the Filament panel configuration. Setting `regenerableRecoveryCodes` to `false` disables the regeneration functionality.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/07-users/02-multi-factor-authentication.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Auth\\MultiFactor\\GoogleTwoFactor\\GoogleTwoFactorAuthentication;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->multiFactorAuthentication([\n            GoogleTwoFactorAuthentication::make()\n                ->recoverable()\n                ->regenerableRecoveryCodes(false),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Database Notifications Modal - Blade\nDESCRIPTION: This code snippet demonstrates how to open the database notifications modal from a Blade template by dispatching an `open-modal` browser event. It includes the necessary x-data and x-on directives for Alpine.js to handle the click event.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/notifications/docs/02-database-notifications.md#_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<button\n    x-data=\"{}\"\n    x-on:click=\"$dispatch('open-modal', { id: 'database-notifications' })\"\n    type=\"button\"\n>\n    Notifications\n</button>\n```\n\n----------------------------------------\n\nTITLE: Install Filament Components (Bash)\nDESCRIPTION: This command installs various Filament components like tables, schemas, forms, infolists, actions, notifications, and widgets using Composer.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/01-introduction/02-installation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require\n    filament/tables\n    filament/schemas\n    filament/forms\n    filament/infolists\n    filament/actions\n    filament/notifications\n    filament/widgets\n```\n\n----------------------------------------\n\nTITLE: Defining State Properties For Multiple Forms\nDESCRIPTION: This PHP code shows how to define public properties that map to the `statePath` defined in each of the forms.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/12-components/02-form.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\npublic ?array $postData = [];\npublic ?array $commentData = [];\n```\n\n----------------------------------------\n\nTITLE: Building the Stylesheet - Bash\nDESCRIPTION: Compiles the CSS file using the `npm run build` command. This command executes the build script defined in the `package.json` file, which uses PostCSS and CSSNano to process the CSS and generate the final stylesheet.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/11-plugins/04-building-a-standalone-plugin.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Adding Average Summarizer to a Column (PHP)\nDESCRIPTION: This code snippet demonstrates how to add an average summarizer to a Filament table column. It uses the `Average` class from the `Filament\\Tables\\Columns\\Summarizers` namespace.  The `summarize()` method is called on a `TextColumn` instance to apply the summarizer to the specified column ('rating').\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/tables/docs/06-summaries.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Average;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('rating')\n    ->summarize(Average::make())\n```\n\n----------------------------------------\n\nTITLE: Installing Filament Spatie Settings Plugin (Composer)\nDESCRIPTION: This command installs the `filament/spatie-laravel-settings-plugin` package using Composer. The `-W` flag ensures that dependencies are updated. This is the first step in integrating the plugin into a Filament project.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/spatie-laravel-settings-plugin/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/spatie-laravel-settings-plugin:\"^3.2\" -W\n```\n\n----------------------------------------\n\nTITLE: Registering Assets for a Filament Panel (PHP)\nDESCRIPTION: This snippet demonstrates how to register CSS and JS assets for a Filament panel using the `assets()` method. It registers a custom stylesheet and a custom script. Requires running `php artisan filament:assets`.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/05-panel-configuration.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\nuse Filament\\Support\\Assets\\Css;\nuse Filament\\Support\\Assets\\Js;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->assets([\n            Css::make('custom-stylesheet', resource_path('css/custom.css')),\n            Js::make('custom-script', resource_path('js/custom.js')),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Job Backoff Strategy in Filament\nDESCRIPTION: This code snippet demonstrates how to customize the backoff strategy for export jobs in Filament. The `getJobBackoff()` method in the exporter class is overridden to return an integer or an array of integers, representing the delay in seconds before retrying the job. The default backoff strategy is [60, 120, 300, 600].\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/packages/actions/docs/12-export.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n/**\n* @return int | array<int> | null\n */\npublic function getJobBackoff(): int | array | null\n{\n    return [60, 120, 300, 600];\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Color to Action and Toggle Components - PHP\nDESCRIPTION: This code demonstrates how to pass a predefined color (e.g., 'success') to Filament Action and Toggle components in PHP. The `color()` method for Action and `onColor()` method for Toggle are used to set the color. It leverages Filament's built-in color palette.\nSOURCE: https://github.com/hasnayeen/filav4/blob/4.x/docs/08-styling/03-colors.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Forms\\Components\\Toggle;\n\nAction::make('proceed')\n    ->color('success')\n    \nToggle::make('is_active')\n    ->onColor('success')\n```"
  }
]