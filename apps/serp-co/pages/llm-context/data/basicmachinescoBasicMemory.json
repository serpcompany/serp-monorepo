[
  {
    "owner": "basicmachines-co",
    "repo": "basic-memory",
    "content": "TITLE: Creating a Context Generation Service for AI Conversations in Python\nDESCRIPTION: A Python class that generates contextual information for AI conversations by extracting key decisions and open questions from previous discussions. This helps maintain continuity between conversations and prevents repetition of resolved topics.\n\nLANGUAGE: python\nCODE:\n```\nclass ConversationTemplateService:\n    def generate_context(self, previous_conversations):\n        \"\"\"Create a quick summary of relevant past discussions\"\"\"\n        recent_decisions = self.extract_key_decisions(previous_conversations)\n        return f\"\"\"Previous context:\n\n- Last discussed: {recent_decisions}\n- Open questions: {self.get_open_questions()}\n  \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Basic Memory with Claude Desktop\nDESCRIPTION: Instructions for installing Basic Memory using uv tool and configuring it with Claude Desktop by modifying the claude_desktop_config.json file to add the MCP server configuration.\n\nLANGUAGE: bash\nCODE:\n```\n# Install with uv (recommended)\nuv tool install basic-memory\n\n# Configure Claude Desktop (edit ~/Library/Application Support/Claude/claude_desktop_config.json)\n# Add this to your config:\n{\n  \"mcpServers\": {\n    \"basic-memory\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"basic-memory\",\n        \"mcp\"\n      ]\n    }\n  }\n}\n# Now in Claude Desktop, you can:\n# - Write notes with \"Create a note about coffee brewing methods\"\n# - Read notes with \"What do I know about pour over coffee?\"\n# - Search with \"Find information about Ethiopian beans\"\n```\n\n----------------------------------------\n\nTITLE: AI Context Building from Chat URI in Python\nDESCRIPTION: Asynchronous Python function that builds comprehensive context for a chat by loading the current conversation, following entity links to understand related concepts, and finding additional relevant discussions.\n\nLANGUAGE: python\nCODE:\n```\nasync def build_context(chat_uri: str) -> Context:\n    # Load current chat\n    chat = await load_entity(chat_uri)\n\n    # Follow links to understand context\n    file_ops = await load_entity(\"memory://basic-memory/file-operations\")\n    sync_strategy = await load_entity(\"memory://basic-memory/sync-strategy\")\n\n    # Find related discussions\n    related = await search_entities(\"sync AND conflicts\")\n\n    return Context(chat, file_ops, sync_strategy, related)\n```\n\n----------------------------------------\n\nTITLE: Basic Memory File Format Structure\nDESCRIPTION: This snippet shows the standard structure for Basic Memory knowledge files. It includes frontmatter with metadata, the main content, observations section with semantic markup, and relations section with connections to other documents.\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Authentication Approaches\ntype: note\ntags: [security, architecture]\npermalink: authentication-approaches\n---\n\n# Authentication Approaches\n\nA comparison of authentication methods.\n\n## Observations\n\n- [approach] JWT provides stateless authentication #security\n- [limitation] Session tokens require server-side storage #infrastructure\n\n## Relations\n\n- implements [[Security Requirements]]\n- affects [[User Login Flow]]\n```\n\n----------------------------------------\n\nTITLE: Context Manager Implementation in Python\nDESCRIPTION: Python class that manages context retrieval, decision tracking, and relationship updates between entities in the memory system, forming the core functionality for maintaining knowledge connections.\n\nLANGUAGE: python\nCODE:\n```\nclass ContextManager:\n    def get_recent_context(self, project: str) -> str:\n        \"\"\"Get recent relevant context\"\"\"\n\n    def track_decisions(self, chat: Chat) -> List[Decision]:\n        \"\"\"Extract and track decisions\"\"\"\n\n    def update_relations(self, source: str, refs: List[str]):\n        \"\"\"Update entity relations\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Initial setup of Basic Memory\nDESCRIPTION: Commands for installing Basic Memory and performing the initial setup, including the first sync and starting watch mode.\n\nLANGUAGE: bash\nCODE:\n```\n# Install Basic Memory\nuv install basic-memory\n\n# First sync\nbasic-memory sync\n\n# Start watching mode\nbasic-memory sync --watch\n```\n\n----------------------------------------\n\nTITLE: ContextBuilder Class Implementation in Python\nDESCRIPTION: Implements the core ContextBuilder class that provides the build_context functionality, including entity loading, relation following, and context caching.\n\nLANGUAGE: python\nCODE:\n```\nclass ContextBuilder:\n    def __init__(self, memory_service: MemoryService):\n        self.memory_service = memory_service\n        self.cache = ExpiringCache()  # Cache recent context builds\n\n    async def build_context(\n            self,\n            uri: str,\n            depth: int = 1,\n            max_related: int = 5\n    ) -> Context:\n        # Check cache first\n        if cached := self.cache.get(f\"{uri}:{depth}\"):\n            return cached\n\n        # Load primary entity\n        entity = await self.memory_service.load_entity(uri)\n\n        # Follow relations to given depth\n        related = await self.follow_relations(\n            entity,\n            depth=depth,\n            max_entities=max_related\n        )\n\n        # Find relevant discussions\n        discussions = await self.find_related_discussions(entity)\n\n        # Generate AI-friendly summary\n        summary = self.generate_summary(\n            entity,\n            related,\n            discussions\n        )\n\n        # Build and cache result \n        context = Context(\n            primary=entity,\n            related_results=related,\n            discussions=discussions,\n        )\n        self.cache.set(f\"{uri}:{depth}\", context)\n        return context\n\n    async def follow_relations(\n            self,\n            entity: Entity,\n            depth: int,\n            max_entities: int,\n            seen: Set[str] = None\n    ) -> List[Entity]:\n        \"\"\"Follow entity relations to given depth\"\"\"\n        seen = seen or {entity.id}\n        if depth == 0:\n            return []\n\n        related = []\n        for relation in entity.relations:\n            if len(related) >= max_entities:\n                break\n\n            target = await self.memory_service.load_entity(\n                relation.target_uri\n            )\n            if target.id not in seen:\n                seen.add(target.id)\n                related.append(target)\n\n                # Recurse to depth\n                children = await self.follow_relations(\n                    target,\n                    depth - 1,\n                    max_entities - len(related),\n                    seen\n                )\n                related.extend(children)\n\n        return related\n```\n\n----------------------------------------\n\nTITLE: Basic Memory Tools Available in Claude Desktop\nDESCRIPTION: List of tools that Claude can use when integrated with Basic Memory, including functions for creating, reading, and searching notes, building context, tracking activity, and generating visualizations.\n\nLANGUAGE: text\nCODE:\n```\nwrite_note(title, content, folder, tags) - Create or update notes\nread_note(identifier, page, page_size) - Read notes by title or permalink\nbuild_context(url, depth, timeframe) - Navigate knowledge graph via memory:// URLs\nsearch_notes(query, page, page_size) - Search across your knowledge base\nrecent_activity(type, depth, timeframe) - Find recently updated information\ncanvas(nodes, edges, title, folder) - Generate knowledge visualizations\n```\n\n----------------------------------------\n\nTITLE: Automatic Context Generation Template in Markdown\nDESCRIPTION: Template for automatically generating structured context for discussions, displaying recent history, project status, and related discussions using memory URIs to pull in relevant information.\n\nLANGUAGE: markdown\nCODE:\n```\n# Context for Current Discussion\n\n## Recent History\n\n- Previous chat: memory://project/last-chat\n- Key decisions: memory://project/decisions/*\n- Open questions: memory://project/questions/*\n\n## Project Status\n\n- Current phase: Implementation\n- Recent updates: memory://project/recent-changes\n- Next milestones: memory://project/roadmap\n\n## Related Discussions\n\n- Technical: memory://project/tech/*\n- Design: memory://project/design/*\n- Planning: memory://project/plan/*\n```\n\n----------------------------------------\n\nTITLE: Creating Relations in Basic Memory\nDESCRIPTION: This snippet demonstrates how to build connections between pieces of knowledge by creating relations. The example shows how to link a document to other documents using various relation types.\n\nLANGUAGE: markdown\nCODE:\n```\n## Relations\n\n- implements [[Security Requirements]]\n- depends_on [[User Authentication]]\n```\n\n----------------------------------------\n\nTITLE: Defining Core Document Structure in Markdown for Basic Memory\nDESCRIPTION: Shows the basic structure of a Markdown document in Basic Memory, including frontmatter, headings, observations, and relations sections that make up the knowledge graph foundation.\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Document Title\ntype: note\ntags: [tag1, tag2]\npermalink: custom-path\n---\n\n# Document Title\n\nRegular markdown content...\n\n## Observations\n- [category] Content with #tags (optional context)\n\n## Relations\n- relation_type [[Other Document]] (optional context)\n```\n\n----------------------------------------\n\nTITLE: Extended Metadata Fields in YAML for Basic Memory Project\nDESCRIPTION: Defines the enhanced YAML frontmatter structure for entities in the Basic Memory system, including tracking creation dates, project associations, conversation threading, decisions, and related content links using the memory URI scheme.\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: chat_session  # or other entity type\ncreated: 2024-12-10T15:30:00Z\nproject: basic-memory\ndescription: Discussion about memory URI scheme\n\n# Enhanced fields\ncontinues_from: memory://basic-memory/20241210-previous-chat\nkey_decisions:\n  - adopt_memory_uri_scheme\n  - enhance_frontmatter\nrelated_results:\n  - memory://basic-memory/markdown-service\n  - memory://basic-memory/schema-design\ntags: [ technical, design, architecture ]\n---\n```\n\n----------------------------------------\n\nTITLE: Context Merging Feature in Python\nDESCRIPTION: Advanced feature that enables merging multiple contexts intelligently, combining entities and discussions from multiple context objects.\n\nLANGUAGE: python\nCODE:\n```\nasync def merge_contexts(\n        self,\n        contexts: List[Context]\n) -> Context:\n    \"\"\"Merge multiple contexts intelligently\"\"\"\n    all_entities = set()\n    all_discussions = set()\n\n    for ctx in contexts:\n        all_entities.update(ctx.related_results)\n        all_discussions.update(ctx.discussions)\n\n    return Context(\n        entities=list(all_entities),\n        discussions=list(all_discussions),\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontmatter in YAML for Basic Memory Documents\nDESCRIPTION: Demonstrates the YAML frontmatter structure used to define essential metadata for Basic Memory documents, including title, type, tags, and permalink.\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Document Title    # Used for linking and references\ntype: note               # Document type\ntags: [tag1, tag2]       # For organization and searching\npermalink: custom-link   # Optional custom URL path\n---\n```\n\n----------------------------------------\n\nTITLE: Smart Depth Control Feature in Python\nDESCRIPTION: Advanced feature that allows build_context to follow relations based on importance rather than fixed depth, using a relevance scoring mechanism and importance threshold.\n\nLANGUAGE: python\nCODE:\n```\nasync def build_smart_context(\n        self,\n        uri: str,\n        importance_threshold: float = 0.7\n) -> Context:\n    \"\"\"Follow relations based on importance\"\"\"\n    entity = await self.load_entity(uri)\n\n    # Score relations by relevance\n    scored_relations = [\n        (relation, self.score_relevance(relation))\n        for relation in entity.relations\n    ]\n\n    # Follow important relations\n    related = [\n        await self.load_entity(rel.target_uri)\n        for rel, score in scored_relations\n        if score >= importance_threshold\n    ]\n\n    return self.build_context_from_entities(\n        [entity, *related]\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop with Basic Memory\nDESCRIPTION: JSON configuration for setting up Claude Desktop to use Basic Memory via MCP. This snippet shows how to modify the Claude Desktop configuration file to enable Basic Memory integration.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"basic-memory\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"basic-memory\",\n        \"mcp\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Temporal Context Feature in Python\nDESCRIPTION: Advanced feature that builds context with temporal relevance, finding and including recently related entities within a specified timeframe.\n\nLANGUAGE: python\nCODE:\n```\nasync def build_temporal_context(\n        self,\n        uri: str,\n        timeframe: timedelta\n) -> Context:\n    \"\"\"Build context with temporal relevance\"\"\"\n    base_context = await self.build_context(uri)\n\n    # Find temporally related entities\n    recent = await self.find_recent_related(\n        uri,\n        timeframe\n    )\n\n    return self.merge_contexts([\n        base_context,\n        recent\n    ])\n```\n\n----------------------------------------\n\nTITLE: Basic Memory Architecture Flow in Mermaid\nDESCRIPTION: A flowchart diagram showing the architecture of Basic Memory and how it interacts with LLMs like Claude, local storage, and text editors. It illustrates the file-first approach with Markdown as the source of truth.\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    User((User)) <--> |Conversation| Claude[\"Claude or other LLM\"]\n    Claude <-->|API Calls| BMCP[\"Basic Memory MCP Server\"]\n    \n    subgraph \"Local Storage\"\n        KnowledgeFiles[\"Markdown Files - Source of Truth\"]\n        KnowledgeIndex[(Knowledge Graph SQLite Index)]\n    end\n    \n    BMCP <-->|\"write_note() read_note()\"| KnowledgeFiles\n    BMCP <-->|\"search_notes() build_context()\"| KnowledgeIndex\n    KnowledgeFiles <-.->|Sync Process| KnowledgeIndex\n    KnowledgeFiles <-->|Direct Editing| Editors((Text Editors & Git))\n    \n    User -.->|\"Complete control, Privacy preserved\"| KnowledgeFiles\n    \n    \n    class Claude primary\n    class BMCP secondary\n    class KnowledgeFiles tertiary\n    class KnowledgeIndex quaternary\n    class User,Editors user`;\n```\n\n----------------------------------------\n\nTITLE: Visualizing Project Architecture with Mermaid\nDESCRIPTION: A mermaid diagram depicting the architecture of the basic-memory project, showing the relationship between storage components (SQLite DB, Full Text Search), interface components (Command Line, MCP Tools), and export capabilities (Markdown, Visualizations).\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n    subgraph Storage\n        DB[(SQLite DB)]\n        FTS[Full Text Search]\n    end\n\n    subgraph Interface\n        CLI[Command Line]\n        MCP[MCP Tools]\n    end\n\n    subgraph Export\n        MD[Markdown]\n        VIZ[Visualizations]\n    end\n\n    CLI -->|manage| DB\n    MCP -->|query| DB\n    DB -->|index| FTS\n    DB -->|generate| MD\n    DB -->|create| VIZ\n```\n\n----------------------------------------\n\nTITLE: Natural Language Search in Basic Memory\nDESCRIPTION: This snippet demonstrates how to perform a natural language search by directly asking Claude about a topic. The AI will search the knowledge base semantically and return relevant information.\n\nLANGUAGE: markdown\nCODE:\n```\nYou: What do I know about authentication methods?\n```\n\n----------------------------------------\n\nTITLE: Memory URI Handler Implementation in Python\nDESCRIPTION: Python class for handling memory URIs, providing methods to parse the URI components, load contextual information, and validate URI format and access permissions.\n\nLANGUAGE: python\nCODE:\n```\nclass MemoryURIHandler:\n    def parse(self, uri: str) -> URIComponents:\n        \"\"\"Parse memory:// URI into components\"\"\"\n\n    def load_context(self, uri: str) -> str:\n        \"\"\"Load and format context from URI\"\"\"\n\n    def validate(self, uri: str) -> bool:\n        \"\"\"Validate URI format and access\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Managing Projects in Basic Memory\nDESCRIPTION: CLI commands for managing multiple projects in Basic Memory, including listing, adding, setting defaults, removing, and showing the current project.\n\nLANGUAGE: bash\nCODE:\n```\n# List all configured projects  \nbasic-memory project list  \n  \n# Add a new project  \nbasic-memory project add work ~/work-basic-memory  \n  \n# Set the default project  \nbasic-memory project default work  \n  \n# Remove a project (doesn't delete files)  \nbasic-memory project remove personal  \n  \n# Show current project  \nbasic-memory project current  \n```\n\n----------------------------------------\n\nTITLE: MCP Tool Integration for MemoryServer in Python\nDESCRIPTION: Shows how the build_context functionality is integrated as a tool in the MemoryServer class for the MCP (Message Control Protocol) system.\n\nLANGUAGE: python\nCODE:\n```\nclass MemoryServer(Server):\n    async def handle_build_context(\n            self,\n            uri: str,\n            depth: int = 1,\n            max_related: int = 5\n    ):\n        \"\"\"MCP tool for building context\"\"\"\n        context = await self.context_builder.build_context(\n            uri,\n            depth=depth,\n            max_related=max_related\n        )\n        return self.create_response(\n            context,\n            mime_type=\"application/vnd.basic-memory+json\"\n        )\n```\n\n----------------------------------------\n\nTITLE: Using the sync command in Basic Memory CLI\nDESCRIPTION: The sync command keeps files and the knowledge graph in sync. It supports options for continuous monitoring and verbose output.\n\nLANGUAGE: bash\nCODE:\n```\n# Basic sync\nbasic-memory sync\n\n# Watch for changes\nbasic-memory sync --watch\n\n# Show detailed sync information\nbasic-memory sync --verbose\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of build_context Tool in Python\nDESCRIPTION: Shows how to use the build_context tool to retrieve structured context from a memory:// URI with a specified depth for relationship traversal.\n\nLANGUAGE: python\nCODE:\n```\n# AI sees a memory:// reference\ncontext = await tools.build_context(\n    uri=\"memory://basic-memory/markdown-service\",\n    depth=1  # How deep to follow relationships\n)\n\n# Gets back structured context\nContext(\n    primary=entity,  # The main entity\n    related_results=[...],  # Related entities\n    discussions=[...],  # Relevant chats/discussions\n)\n```\n\n----------------------------------------\n\nTITLE: Syncing Knowledge with Basic Memory\nDESCRIPTION: Bash commands for syncing local knowledge with Basic Memory. Includes both one-time sync and real-time watch mode options.\n\nLANGUAGE: bash\nCODE:\n```\n# One-time sync of local knowledge updates\nbasic-memory sync\n\n# Run realtime sync process (recommended)\nbasic-memory sync --watch\n```\n\n----------------------------------------\n\nTITLE: Creating Knowledge through Conversations with Claude\nDESCRIPTION: This snippet demonstrates how to create knowledge files by asking Claude to create a note during a conversation. The process results in a Markdown file being created in the Basic Memory directory.\n\nLANGUAGE: markdown\nCODE:\n```\nYou: We've covered several authentication approaches. Could you create a note summarizing what we've discussed?\n\nClaude: I'll create a note summarizing our authentication discussion.\n```\n\n----------------------------------------\n\nTITLE: Importing External Knowledge with Basic Memory CLI\nDESCRIPTION: Commands to import existing conversations from AI assistants like Claude and ChatGPT into Basic Memory, followed by indexing the imported content.\n\nLANGUAGE: bash\nCODE:\n```\n# From Claude\nbasic-memory import claude conversations\n\n# From ChatGPT\nbasic-memory import chatgpt\n```\n\n----------------------------------------\n\nTITLE: Combining Search with Context Building in Basic Memory\nDESCRIPTION: This snippet shows how to build comprehensive context by following relationships between documents. It finds initial documents and then follows implementation relationships to build a complete picture.\n\nLANGUAGE: markdown\nCODE:\n```\nYou: Search for JWT authentication and then follow all implementation relations.\n```\n\n----------------------------------------\n\nTITLE: Importing Existing AI Conversations to Basic Memory\nDESCRIPTION: Commands for importing existing conversations from Claude or ChatGPT into Basic Memory, followed by running sync to index everything.\n\nLANGUAGE: bash\nCODE:\n```\n# From Claude\nbasic-memory import claude conversations\n\n# From ChatGPT\nbasic-memory import chatgpt\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of Knowledge in Basic Memory\nDESCRIPTION: Example of how Basic Memory internally represents knowledge from Markdown files as structured JSON data. This shows the entity model with observations, relations, and metadata for a coffee brewing methods entry.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entities\": [\n    {\n      \"permalink\": \"coffee/coffee-brewing-methods\",\n      \"title\": \"Coffee Brewing Methods\",\n      \"file_path\": \"Coffee Notes/Coffee Brewing Methods.md\",\n      \"entity_type\": \"note\",\n      \"entity_metadata\": {\n        \"title\": \"Coffee Brewing Methods\",\n        \"type\": \"note\",\n        \"permalink\": \"coffee/coffee-brewing-methods\",\n        \"tags\": \"['#coffee', '#brewing', '#methods', '#demo']\"\n      },\n      \"checksum\": \"bfa32a0f23fa124b53f0694c344d2788b0ce50bd090b55b6d738401d2a349e4c\",\n      \"content_type\": \"text/markdown\",\n      \"observations\": [\n        {\n          \"category\": \"principle\",\n          \"content\": \"Coffee extraction follows a predictable pattern: acids extract first, then sugars, then bitter compounds #extraction\",\n          \"tags\": [\n            \"extraction\"\n          ],\n          \"permalink\": \"coffee/coffee-brewing-methods/observations/principle/coffee-extraction-follows-a-predictable-pattern-acids-extract-first-then-sugars-then-bitter-compounds-extraction\"\n        },\n        {\n          \"category\": \"method\",\n          \"content\": \"Pour over methods generally produce cleaner, brighter cups with more distinct flavor notes #clarity\",\n          \"tags\": [\n            \"clarity\"\n          ],\n          \"permalink\": \"coffee/coffee-brewing-methods/observations/method/pour-over-methods-generally-produce-cleaner-brighter-cups-with-more-distinct-flavor-notes-clarity\"\n        }\n      ],\n      \"relations\": [\n        {\n          \"from_id\": \"coffee/coffee-bean-origins\",\n          \"to_id\": \"coffee/coffee-brewing-methods\",\n          \"relation_type\": \"pairs_with\",\n          \"permalink\": \"coffee/coffee-bean-origins/pairs-with/coffee/coffee-brewing-methods\",\n          \"to_name\": \"Coffee Brewing Methods\"\n        },\n        {\n          \"from_id\": \"coffee/flavor-extraction\",\n          \"to_id\": \"coffee/coffee-brewing-methods\",\n          \"relation_type\": \"affected_by\",\n          \"permalink\": \"coffee/flavor-extraction/affected-by/coffee/coffee-brewing-methods\",\n          \"to_name\": \"Coffee Brewing Methods\"\n        }\n      ],\n      \"created_at\": \"2025-03-06T14:01:23.445071\",\n      \"updated_at\": \"2025-03-06T13:34:48.563606\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Context Loading from Memory URI in Python\nDESCRIPTION: Python code snippet that demonstrates how to parse a memory URI and load contextual information from the referenced entity, providing the foundation for maintaining conversation context across sessions.\n\nLANGUAGE: python\nCODE:\n```\nif uri.startswith('memory://'):\n    project, path = parse_memory_uri(uri)\n    context = memory_service.load_context(project, path)\n    return Prompt(f'Loading context from {uri}:\\n{context}')\n```\n\n----------------------------------------\n\nTITLE: Structuring Knowledge with Markdown in Basic Memory\nDESCRIPTION: Example of how Basic Memory uses standard Markdown format with frontmatter to organize knowledge. This demonstrates how entities, observations, and relations are defined within a Markdown document about coffee brewing methods.\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Coffee Brewing Methods\ntype: note\npermalink: coffee/coffee-brewing-methods\ntags:\n- '#coffee'\n- '#brewing'\n- '#methods'\n- '#demo'\n---\n\n# Coffee Brewing Methods\n\nAn exploration of different coffee brewing techniques, their characteristics, and how they affect flavor extraction.\n\n## Overview\n\nCoffee brewing is both an art and a science. Different brewing methods extract different compounds from coffee beans,\nresulting in unique flavor profiles, body, and mouthfeel. The key variables in any brewing method are:\n\n- Grind size\n- Water temperature\n- Brew time\n- Coffee-to-water ratio\n- Agitation/turbulence\n\n## Observations\n\n- [principle] Coffee extraction follows a predictable pattern: acids extract first, then sugars, then bitter compounds\n  #extraction\n- [method] Pour over methods generally produce cleaner, brighter cups with more distinct flavor notes #clarity\n\n## Relations\n\n- requires [[Proper Grinding Technique]]\n- affects [[Flavor Extraction]]\n```\n\n----------------------------------------\n\nTITLE: Boolean Search Examples in Basic Memory\nDESCRIPTION: This snippet shows examples of using various boolean operators (AND, OR, NOT) and grouping with parentheses to create complex search queries for precise information retrieval.\n\nLANGUAGE: markdown\nCODE:\n```\nYou: Search for \"python AND flask\"\n\nYou: Search for \"python OR javascript\"\n\nYou: Search for \"python NOT django\"\n\nYou: Search for \"(python OR javascript) AND web\"\n```\n\n----------------------------------------\n\nTITLE: Creating Observations in Markdown for Basic Memory\nDESCRIPTION: Shows how to format observations in Basic Memory documents, including categories, content, tags, and optional context information.\n\nLANGUAGE: markdown\nCODE:\n```\n## Observations\n- [tech] Uses SQLite for storage #database\n- [design] Follows local-first architecture #architecture\n- [decision] Selected bcrypt for passwords #security (Based on audit)\n```\n\n----------------------------------------\n\nTITLE: Examples of Observations in Basic Memory\nDESCRIPTION: Various examples of observations in Basic Memory demonstrating different categories like method, tip, preference, fact, experiment, resource, question, and note.\n\nLANGUAGE: markdown\nCODE:\n```\n- [method] Pour over extracts more floral notes than French press\n- [tip] Grind size should be medium-fine for pour over #brewing\n- [preference] Ethiopian beans have bright, fruity flavors (especially from Yirgacheffe)\n- [fact] Lighter roasts generally contain more caffeine than dark roasts\n- [experiment] Tried 1:15 coffee-to-water ratio with good results\n- [resource] James Hoffman's V60 technique on YouTube is excellent\n- [question] Does water temperature affect extraction of different compounds differently?\n- [note] My favorite local shop uses a 30-second bloom time\n```\n\n----------------------------------------\n\nTITLE: Defining Relations Between Documents in Basic Memory\nDESCRIPTION: Demonstrates how to create relations between documents to form the knowledge graph, showing both standalone relation lists and inline references.\n\nLANGUAGE: markdown\nCODE:\n```\n## Relations\n- implements [[Search Design]]\n- depends_on [[Database Schema]]\n- relates_to [[User Interface]]\n```\n\n----------------------------------------\n\nTITLE: Requesting Canvas Visualizations from Claude in Markdown\nDESCRIPTION: Examples of prompts to ask Claude to create different types of canvas visualizations in Basic Memory, including project components, concept maps, and procedural diagrams.\n\nLANGUAGE: markdown\nCODE:\n```\nYou: \"Create a canvas visualization of my project components and their relationships.\"\n\nYou: \"Make a concept map showing the main themes from our discussion about climate change.\"\n\nYou: \"Can you make a canvas diagram of the perfect pour over method?\"\n```\n\n----------------------------------------\n\nTITLE: Creating Inline References in Basic Memory Documents\nDESCRIPTION: Shows how to create inline references to other documents within the content of a Basic Memory document.\n\nLANGUAGE: markdown\nCODE:\n```\nThis builds on [[Core Design]] and uses [[Utility Functions]].\n```\n\n----------------------------------------\n\nTITLE: Structuring Daily Notes in Markdown for Knowledge Management\nDESCRIPTION: Template for creating daily notes in Basic Memory with progress tracking, notes with tags, and relational links to other documents. This structure helps maintain a connected knowledge base.\n\nLANGUAGE: markdown\nCODE:\n```\n# 2024-01-21\n\n## Progress\n- Updated [[Search Design]]\n- Fixed [[Bug Report 123]]\n\n## Notes\n- [idea] Better indexing #enhancement\n- [todo] Update docs #documentation\n\n## Links\n- relates_to [[Current Sprint]]\n- updates [[Project Status]]\n```\n\n----------------------------------------\n\nTITLE: Basic Memory's Markdown Note Structure\nDESCRIPTION: Example of a Markdown file generated by Basic Memory, showing the frontmatter, observations, and relations sections that form the knowledge graph structure.\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Coffee Brewing Methods\npermalink: coffee-brewing-methods\ntags:\n- coffee\n- brewing\n---\n\n# Coffee Brewing Methods\n\n## Observations\n\n- [method] Pour over provides more clarity and highlights subtle flavors\n- [technique] Water temperature at 205°F (96°C) extracts optimal compounds\n- [principle] Freshly ground beans preserve aromatics and flavor\n\n## Relations\n\n- relates_to [[Coffee Bean Origins]]\n- requires [[Proper Grinding Technique]]\n- affects [[Flavor Extraction]]\n```\n\n----------------------------------------\n\nTITLE: Daily Conversation Log Structure in Markdown\nDESCRIPTION: A markdown template for organizing AI conversations by date and project. Provides a structured view of daily interactions with timestamps, key decisions, and action items for better tracking of project progress.\n\nLANGUAGE: markdown\nCODE:\n```\n# December 10, 2024\n\n## 12pt.co Conversations\n\n- 9:15 AM: Manuscript Formatting Discussion with Claude\n    - Decided on Pandoc\n    - Solved table formatting issue\n    - Next step: Test with complex documents\n\n- 2:30 PM: Marketing Strategy with GPT-4\n    - Identified 5 key Reddit communities\n    - Drafted beta test announcement\n    - Question raised about pricing message\n\n## Writing Project Discussions\n\n- 11:00 AM: Story Development with Claude\n    - Explored character motivations\n    - Mapped plot structure\n    - Need to resolve third act issues\n```\n\n----------------------------------------\n\nTITLE: Basic Memory Observation Format\nDESCRIPTION: The Markdown format for observations in Basic Memory, including examples of different observation categories like methods, tips, and preferences.\n\nLANGUAGE: markdown\nCODE:\n```\n- [category] content #tag (optional context)\n```\n\n----------------------------------------\n\nTITLE: Project Decision Explorer Template in Markdown\nDESCRIPTION: A markdown structure for tracking key project decisions across multiple AI conversations. Uses status indicators and categorization to organize technical and business decisions with links to relevant discussion threads.\n\nLANGUAGE: markdown\nCODE:\n```\n# Key Project Decisions\n\n## Technical Choices\n\n- ✅ Document Conversion: Pandoc (Dec 10)\n    - Related discussions: [link1], [link2]\n    - Key factors: Speed, format support\n\n- ⏳ Cloud Storage: Evaluating Options\n    - Azure discussion [link]\n    - AWS pricing analysis [link]\n    - Open concerns: Security, cost\n\n## Business Decisions\n\n- ✅ Beta Pricing: $49 (Dec 7)\n    - Market analysis [link]\n    - Competitor review [link]\n\n- 🆕 Marketing Strategy: Reddit-First (Dec 10)\n    - Community list [link]\n    - Launch plan [link]\n```\n\n----------------------------------------\n\nTITLE: Basic Memory Relation Format\nDESCRIPTION: The Markdown format for relations in Basic Memory that define connections between entities in the knowledge graph, with optional context to provide additional information.\n\nLANGUAGE: markdown\nCODE:\n```\n- relation_type [[WikiLink]] (optional context)\n```\n\n----------------------------------------\n\nTITLE: Feature Implementation Tracker Template in Markdown\nDESCRIPTION: A markdown template for tracking the implementation status of specific features discussed across AI conversations. Includes sections for requirements, technical decisions, open questions, and next steps to provide a comprehensive view of feature development.\n\nLANGUAGE: markdown\nCODE:\n```\n# Manuscript Formatting Feature\n\n## Current Status: In Development 🚧\n\n### Requirements Gathered\n\n- Must preserve custom styles [Dec 5 discussion]\n- Table support critical [Dec 10 discussion]\n- Need batch processing [Dec 8 discussion]\n\n### Technical Decisions\n\n- Using Pandoc for conversion\n- Custom style preservation solution needed\n- AWS S3 for file storage (tentative)\n\n### Open Questions\n\n- [ ] How to handle complex tables?\n- [ ] Maximum file size limit?\n- [ ] Error handling strategy?\n\n### Next Steps\n\n1. Test Pandoc with sample manuscripts\n2. Build style preservation prototype\n3. Set up basic error handling\n```\n\n----------------------------------------\n\nTITLE: Examples of Relations in Basic Memory\nDESCRIPTION: Various examples of relation types in Basic Memory like pairs_well_with, grown_in, requires, relates_to, and others that connect entities to form a knowledge graph.\n\nLANGUAGE: markdown\nCODE:\n```\n- pairs_well_with [[Chocolate Desserts]]\n- grown_in [[Ethiopia]]\n- contrasts_with [[Tea Brewing Methods]]\n- requires [[Burr Grinder]]\n- improves_with [[Fresh Beans]]\n- relates_to [[Morning Routine]]\n- inspired_by [[Japanese Coffee Culture]]\n- documented_in [[Coffee Journal]]\n```\n\n----------------------------------------\n\nTITLE: Continuing a Conversation with Claude\nDESCRIPTION: This snippet shows how to use the 'Continue Conversation' prompt to pick up a previous discussion. Claude searches the knowledge base to understand prior context about the specified topic.\n\nLANGUAGE: markdown\nCODE:\n```\nYou: Let's continue our conversation about authentication systems.\n```\n\n----------------------------------------\n\nTITLE: Using Memory URI Scheme in Markdown Links\nDESCRIPTION: Shows how to create links to other knowledge entities within markdown content using both the standard markdown link syntax and direct URI references to maintain relationships between documents.\n\nLANGUAGE: markdown\nCODE:\n```\nRelated to [[memory://other-project/some-entity]]\nSee also: memory://current/recent-decisions\n```\n\n----------------------------------------\n\nTITLE: AI Feature Analysis Using Context Building in Python\nDESCRIPTION: Asynchronous Python function that analyzes a feature by loading its direct context, following relevant links to related entities, and gathering broader project context to generate comprehensive insights.\n\nLANGUAGE: python\nCODE:\n```\n# AI analyzing a feature proposal\nasync def analyze_feature(uri: str) -> Analysis:\n    # Load direct context\n    feature = await load_entity(uri)\n\n    # Follow relevant links\n    related = await load_related_results(feature.related_features)\n    decisions = await load_entities(feature.key_decisions)\n\n    # Load broader context\n    project = await load_project_context(feature.project)\n\n    # Generate insights\n    return analyze_context(feature, related, decisions, project)\n```\n\n----------------------------------------\n\nTITLE: Feature Proposal with Relationship Expression in Markdown\nDESCRIPTION: Example of a feature proposal document showing how to express relationships to other knowledge entities using markdown links with memory URIs, creating a navigable knowledge graph.\n\nLANGUAGE: markdown\nCODE:\n```\n# Feature Proposal: Auto-Indexing\n\nRelated to [[memory://basic-memory/markdown-service]]\nImplements [[memory://basic-memory/core-principles]]\nDiscussed in [[memory://chats/20241210-indexing]]\n\n## Description\n\nAuto-generates indexes based on entity relationships...\n```\n\n----------------------------------------\n\nTITLE: Sync Implementation Documentation in Markdown with Links\nDESCRIPTION: Example of a real-world documentation entry that includes relationships to other entities using memory URI links with additional relationship semantics, showing how humans would write in the system.\n\nLANGUAGE: markdown\nCODE:\n```\n# Basic Memory Sync Implementation\n\nWorking on implementing file sync between Obsidian and our knowledge graph.\n\n## Approach\n\nConsidering watchdog for file monitoring...\n\n## Questions\n\n- How to handle conflicts?\n- What about concurrent edits?\n\n[[memory://basic-memory/file-operations]] needs_update\n[[memory://basic-memory/sync-strategy]] implements\n```\n\n----------------------------------------\n\nTITLE: Semantic Metadata in YAML for Feature Proposal\nDESCRIPTION: Comprehensive YAML frontmatter for a feature proposal, including type classification, status tracking, relationship links, and prioritization information that AI can use for context understanding.\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: feature_proposal\nstatus: in_development\nproject: basic-memory\nkey_decisions:\n  - use_watchdog_for_monitoring\n  - implement_incremental_updates\nrelated_features:\n  - memory://basic-memory/file-sync\n  - memory://basic-memory/index-generation\nimpact_areas:\n  - user_experience\n  - performance\npriority: high\n---\n```\n\n----------------------------------------\n\nTITLE: Following Relationships Example in Markdown\nDESCRIPTION: Shows how an AI would use build_context with increased depth to follow relationships between entities and provide comprehensive information about file sync functionality.\n\nLANGUAGE: markdown\nCODE:\n```\nHuman: How does our file sync work?\n\nClaude: Looking at [File Sync](memory://basic-memory/file-sync)...\n\n<using build_context depth=2>\nThis connects to several components:\n1. [Watchdog Service](memory://basic-memory/watchdog) monitors changes\n2. [File Operations](memory://basic-memory/file-operations) handles writes\n3. From our discussion [File Sync Design](memory://chats/20241205-sync) we decided...\n```\n\n----------------------------------------\n\nTITLE: Implementing Enhanced YAML Frontmatter for AI Conversations in Obsidian\nDESCRIPTION: A YAML frontmatter template for marking up AI conversations with metadata to improve searchability and conversation tracking. Includes fields for conversation type, creation date, AI system used, project association, key decisions, and links to previous conversations.\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: ai_conversation\ncreated: 2024-12-10T15:30:00Z\nai_system: claude\nproject: 12pt_co\nkey_decisions: [database_choice, api_structure]\ncontinues_from: conversation_2024_12_09\nemotion_markers: [🌊, ⚡, ✧]  # tracking our style!\n---\n```\n\n----------------------------------------\n\nTITLE: Cross-Project Context Example in Markdown\nDESCRIPTION: Demonstrates how build_context can be used with multiple URIs to build context across different projects, facilitating cross-project integration.\n\nLANGUAGE: markdown\nCODE:\n```\nHuman: How could we use this for 12pt.co?\n\nClaude: Let me build context across projects...\n\n<using build_context with multiple URIs>\nLooking at:\n- [Basic Memory Sync](memory://basic-memory/file-sync)\n- [12pt.co Architecture](memory://12pt-co/architecture)\n\nI can see how we could integrate these by...\n```\n\n----------------------------------------\n\nTITLE: Sample AI Conversation Frontmatter for Document Management\nDESCRIPTION: An example YAML frontmatter for a specific AI conversation about document formatting features. Shows how to track project association, feature discussions, key decisions, and related conversation threads.\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: ai_conversation\ncreated: 2024-12-10T15:30:00Z\nproject: 12pt_co\nfeature_discussion: manuscript_formatting\nkey_points:\n- decided to use Pandoc for conversion\n- need to preserve custom Word styles\n- concerned about formatting tables\n  continues_from: conversation_2024_12_09_formatting\n  related_features: [style_preservation, batch_processing]\n---\n```\n\n----------------------------------------\n\nTITLE: Regular usage examples for Basic Memory CLI\nDESCRIPTION: Common commands for regular use of Basic Memory, including status checks, importing content, and syncing changes.\n\nLANGUAGE: bash\nCODE:\n```\n# Check status\nbasic-memory status\n\n# Import new content\nbasic-memory import claude conversations\n\n# Sync changes\nbasic-memory sync\n\n# Sync changes continuously\nbasic-memory sync --watch\n```\n\n----------------------------------------\n\nTITLE: Using pipes with write_note tool in Basic Memory\nDESCRIPTION: Examples of piping content from other commands into the write_note tool to create new notes in Basic Memory.\n\nLANGUAGE: bash\nCODE:\n```\n# Pipe output of a command into a new note\necho \"# My Note\\n\\nThis is a test note\" | basic-memory tool write-note --title \"Test Note\" --folder \"notes\"\n\n# Pipe output of a file into a new note\ncat README.md | basic-memory tool write-note --title \"Project README\" --folder \"documentation\"\n\n# Process text through other tools before saving as a note\ncat data.txt | grep \"important\" | basic-memory tool write-note --title \"Important Data\" --folder \"data\"\n```\n\n----------------------------------------\n\nTITLE: Checking Recent Activity in Basic Memory\nDESCRIPTION: This snippet demonstrates how to ask Claude about recent discussions. Claude retrieves recently modified documents, analyzes patterns, and summarizes key topics and changes.\n\nLANGUAGE: markdown\nCODE:\n```\nYou: What have we been discussing recently?\n```\n\n----------------------------------------\n\nTITLE: Importing external knowledge sources in Basic Memory CLI\nDESCRIPTION: The import command allows importing data from various external sources like Claude conversations, Claude projects, ChatGPT history, and JSON files.\n\nLANGUAGE: bash\nCODE:\n```\n# Claude conversations\nbasic-memory import claude conversations\n\n# Claude projects\nbasic-memory import claude projects\n\n# ChatGPT history\nbasic-memory import chatgpt\n\n# ChatGPT history\nbasic-memory import memory-json /path/to/memory.json\n```\n\n----------------------------------------\n\nTITLE: Using heredoc syntax with write_note tool in Basic Memory\nDESCRIPTION: Example of using heredoc syntax to create multi-line content notes with the write_note tool.\n\nLANGUAGE: bash\nCODE:\n```\n# Create a note with heredoc\ncat << EOF | basic-memory tool write_note --title \"Project Ideas\" --folder \"projects\"\n# Project Ideas for Q2\n\n## AI Integration\n- Improve recommendation engine\n- Add semantic search to product catalog\n\n## Infrastructure\n- Migrate to Kubernetes\n- Implement CI/CD pipeline\nEOF\n```\n\n----------------------------------------\n\nTITLE: Maintenance tasks for Basic Memory\nDESCRIPTION: Commands for maintaining a Basic Memory knowledge base, including detailed status checks, full resyncs, and targeted imports.\n\nLANGUAGE: bash\nCODE:\n```\n# Check system status in detail\nbasic-memory status --verbose\n\n# Full resync of all files\nbasic-memory sync\n\n# Import updates to specific folder\nbasic-memory import claude conversations --folder new\n```\n\n----------------------------------------\n\nTITLE: Using input redirection with write_note tool in Basic Memory\nDESCRIPTION: Example of redirecting input from a file to create a note with the write_note tool.\n\nLANGUAGE: bash\nCODE:\n```\n# Create a note from file content\nbasic-memory tool write-note --title \"Meeting Notes\" --folder \"meetings\" < meeting_notes.md\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Memory as an MCP server for Claude Code\nDESCRIPTION: Commands for setting up Basic Memory as an MCP server for Claude Code integration and checking MCP server status.\n\nLANGUAGE: bash\nCODE:\n```\nclaude mcp add basic-memory basic-memory mcp\n```\n\nLANGUAGE: bash\nCODE:\n```\n➜  ~ claude mcp add basic-memory basic-memory mcp\nAdded stdio MCP server basic-memory with command: basic-memory mcp to project config\n➜  ~ claude mcp list\nbasic-memory: basic-memory mcp\n```\n\nLANGUAGE: bash\nCODE:\n```\n/mcp\n  ⎿  MCP Server Status\n\n     • basic-memory: connected\n```\n\n----------------------------------------\n\nTITLE: Integrating Claude Code with Basic Memory using CLI\nDESCRIPTION: Example of using Claude Code to create a note in Basic Memory via the command line interface.\n\nLANGUAGE: bash\nCODE:\n```\n⏺ Bash(echo \"# Test Note from Claude\\n\\nThis is a test note created by Claude to test the stdin functionality.\" | basic-memory tool write-note --title \"Claude Test Note\" --folder \"test\" --tags \"test\" --tags \"claude\")…\n  ⎿  # Created test/Claude Test Note.md (23e00eec)\n     permalink: test/claude-test-note\n\n     ## Tags\n     - test, claude\n```\n\n----------------------------------------\n\nTITLE: Managing projects in Basic Memory CLI\nDESCRIPTION: The project command allows creating and managing multiple knowledge base projects with operations like listing, adding, setting defaults, and removing projects.\n\nLANGUAGE: bash\nCODE:\n```\n# List all configured projects  \nbasic-memory project list  \n  \n# Add a new project  \nbasic-memory project add work ~/work-basic-memory  \n  \n# Set the default project  \nbasic-memory project default work  \n  \n# Remove a project (doesn't delete files)  \nbasic-memory project remove personal  \n  \n# Show current project  \nbasic-memory project current  \n```\n\n----------------------------------------\n\nTITLE: Boolean Search with AND Operator in Basic Memory\nDESCRIPTION: This snippet demonstrates using the AND boolean operator to find documents containing both specified terms. This helps refine searches for more precise results.\n\nLANGUAGE: markdown\nCODE:\n```\nYou: Search for \"authentication AND OAuth NOT basic\"\n```\n\n----------------------------------------\n\nTITLE: Using projects with commands in Basic Memory CLI\nDESCRIPTION: Examples of using the --project flag or environment variables to specify which project to use with various commands.\n\nLANGUAGE: bash\nCODE:\n```\n# Sync a specific project  \nbasic-memory --project=work sync  \n  \n# Run MCP server for a specific project  \nbasic-memory --project=personal mcp  \n```\n\nLANGUAGE: bash\nCODE:\n```\nBASIC_MEMORY_PROJECT=work basic-memory sync  \n```\n\n----------------------------------------\n\nTITLE: Writing Notes with MCP Tools\nDESCRIPTION: Example signature of the write_note function for creating or updating markdown notes with semantic observations and relations.\n\nLANGUAGE: python\nCODE:\n```\nwrite_note(title, content, folder, tags)\n```\n\n----------------------------------------\n\nTITLE: Viewing help information in Basic Memory CLI\nDESCRIPTION: The help command provides detailed information about available commands and their options.\n\nLANGUAGE: bash\nCODE:\n```\n ✗ basic-memory --help\n\n Usage: basic-memory [OPTIONS] COMMAND [ARGS]...\n\n Basic Memory - Local-first personal knowledge management system.\n\n╭─ Options ─────────────────────────────────────────────────────────────────────────────────╮\n│ --project             -p      TEXT  Specify which project to use                          │\n│                                     [env var: BASIC_MEMORY_PROJECT]                       │\n│                                     [default: None]                                       │\n│ --version             -V            Show version information and exit.                    │\n│ --install-completion                Install completion for the current shell.             │\n│ --show-completion                   Show completion for the current shell, to copy it or  │\n│                                     customize the installation.                           │\n│ --help                              Show this message and exit.                           │\n╰───────────────────────────────────────────────────────────────────────────────────────────╯\n╭─ Commands ────────────────────────────────────────────────────────────────────────────────╮\n│ sync      Sync knowledge files with the database.                                         │\n│ status    Show sync status between files and database.                                    │\n│ reset     Reset database (drop all tables and recreate).                                  │\n│ mcp       Run the MCP server for Claude Desktop integration.                              │\n│ import    Import data from various sources                                                │\n│ tool      Direct access to MCP tools via CLI                                              │\n│ project   Manage multiple Basic Memory projects                                           │\n╰───────────────────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Creating Canvas Visualizations with MCP Tools\nDESCRIPTION: Example signature of the canvas function for generating Obsidian canvas files for knowledge graph visualization.\n\nLANGUAGE: python\nCODE:\n```\ncanvas(nodes, edges, title, folder)\n```\n\n----------------------------------------\n\nTITLE: Basic Memory Sync Commands\nDESCRIPTION: CLI commands for synchronizing the Basic Memory knowledge base, either as a one-time operation or in watch mode for continuous updates.\n\nLANGUAGE: bash\nCODE:\n```\n# One-time sync\nbasic-memory sync\n\n# Watch for changes\nbasic-memory sync --watch\n```\n\n----------------------------------------\n\nTITLE: Requesting Conversation-Based Visualizations in Markdown\nDESCRIPTION: Example prompt for requesting Claude to create a canvas visualization based on the content of the current conversation.\n\nLANGUAGE: markdown\nCODE:\n```\nYou: \"Make a canvas visualization of the main points we just discussed\"\n```\n\n----------------------------------------\n\nTITLE: Using Search Prompt in Basic Memory\nDESCRIPTION: This snippet shows how to use the dedicated search prompt for more focused searches. This triggers a specialized search that returns precise results with document titles and relevant excerpts.\n\nLANGUAGE: markdown\nCODE:\n```\nYou: Search for \"JWT authentication\"\n```\n\n----------------------------------------\n\nTITLE: Requesting Search-Based Visualizations in Markdown\nDESCRIPTION: Example prompt for requesting Claude to create a canvas visualization based on search results from the knowledge base.\n\nLANGUAGE: markdown\nCODE:\n```\nYou: \"Find all my notes about psychology and create a visual map of the concepts\"\n```\n\n----------------------------------------\n\nTITLE: Memory URL Pattern Matching in Basic Memory\nDESCRIPTION: This snippet demonstrates using memory:// URL patterns with wildcards for advanced searches. The pattern matching supports wildcards, path patterns, and relation traversal.\n\nLANGUAGE: markdown\nCODE:\n```\nYou: Look at memory://auth* and summarize all authentication approaches.\n```\n\n----------------------------------------\n\nTITLE: Requesting Theme-Based Visualizations in Markdown\nDESCRIPTION: Example prompt for requesting Claude to create a canvas visualization showing relationships between abstract themes or concepts.\n\nLANGUAGE: markdown\nCODE:\n```\nYou: \"Create a visual map showing how different philosophical schools relate to each other\"\n```\n\n----------------------------------------\n\nTITLE: Natural Language References in Basic Memory\nDESCRIPTION: This snippet shows how to reference knowledge conversationally without using specific URLs. Claude will search the knowledge base to find relevant information about the topic.\n\nLANGUAGE: markdown\nCODE:\n```\nYou: What did we decide about authentication for the project?\n```\n\n----------------------------------------\n\nTITLE: Creating YAML Frontmatter for Document Metadata\nDESCRIPTION: YAML frontmatter structure for defining document metadata in Basic Memory files. This metadata is used by Obsidian for search and filtering capabilities.\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Document Title\ntype: note\ntags: [search, design]\n---\n```\n\n----------------------------------------\n\nTITLE: Using Advanced Memory URI Patterns with Wildcards\nDESCRIPTION: Example of using wildcards in memory URI patterns to retrieve and summarize related content across multiple documents.\n\nLANGUAGE: plaintext\nCODE:\n```\nYou: Review memory://project/*/requirements to summarize all project requirements.\n```\n\n----------------------------------------\n\nTITLE: Prompting Claude to Create Obsidian Canvas Files\nDESCRIPTION: Example prompt to ask Claude to generate a canvas visualization for Obsidian. The resulting .canvas file can be opened and edited directly in Obsidian.\n\nLANGUAGE: markdown\nCODE:\n```\nYou: \"Create a canvas showing the structure of our project components.\"\n```\n\n----------------------------------------\n\nTITLE: Forward References in Basic Memory\nDESCRIPTION: This snippet shows how to reference documents that don't exist yet in the knowledge base. These references will resolve automatically when the referenced document is created in the future.\n\nLANGUAGE: markdown\nCODE:\n```\n- will_impact [[Future Feature]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Directory for Basic Memory\nDESCRIPTION: Commands to add a custom project directory instead of using the default ~/basic-memory location, and to set it as the default project.\n\nLANGUAGE: bash\nCODE:\n```\nbasic-memory project add custom-project /path/to/your/directory\nbasic-memory project default custom-project\n```\n\n----------------------------------------\n\nTITLE: Basic Memory Import Commands\nDESCRIPTION: Specific CLI commands for importing conversations from different AI assistants into the Basic Memory system.\n\nLANGUAGE: bash\nCODE:\n```\n# Import from Claude\nbasic-memory import claude conversations\n\n# Import from ChatGPT\nbasic-memory import chatgpt\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Basic Memory Installation\nDESCRIPTION: Commands for troubleshooting Basic Memory installation issues, including checking the version, verifying sync processes, checking verbose sync output, and examining log files.\n\nLANGUAGE: bash\nCODE:\n```\nbasic-memory --version\n```\n\nLANGUAGE: bash\nCODE:\n```\nps aux | grep basic-memory\n```\n\nLANGUAGE: bash\nCODE:\n```\nbasic-memory sync --verbose\n```\n\nLANGUAGE: bash\nCODE:\n```\ncat ~/.basic-memory/basic-memory.log\n```\n\n----------------------------------------\n\nTITLE: Using Project Flags in Basic Memory Commands\nDESCRIPTION: Examples of how to specify which project to use when running Basic Memory commands, either via command-line flags or environment variables.\n\nLANGUAGE: bash\nCODE:\n```\n# Sync a specific project  \nbasic-memory --project=work sync  \n  \n# Run MCP server for a specific project  \nbasic-memory --project=personal mcp  \n```\n\n----------------------------------------\n\nTITLE: Creating a Note with Effective Relations in Basic Memory (Python)\nDESCRIPTION: Demonstrates creating a note about Tokyo neighborhoods with both existing and forward references to other notes. The code searches for existing entities, builds relations, and handles the creation process with proper verification.\n\nLANGUAGE: python\nCODE:\n```\nasync def create_note_with_effective_relations():\n    # Search for existing entities to reference\n    search_results = await search_notes(\"travel\")\n    existing_entities = [result.title for result in search_results.primary_results]\n\n    # Check if specific entities exist\n    packing_tips_exists = \"Packing Tips\" in existing_entities\n    japan_travel_exists = \"Japan Travel Guide\" in existing_entities\n\n    # Prepare relations section - include both existing and forward references\n    relations_section = \"## Relations\\n\"\n\n    # Existing reference - exact match to known entity\n    if packing_tips_exists:\n        relations_section += \"- references [[Packing Tips]]\\n\"\n    else:\n        # Forward reference - will be linked when that entity is created later\n        relations_section += \"- references [[Packing Tips]]\\n\"\n\n    # Another possible reference\n    if japan_travel_exists:\n        relations_section += \"- part_of [[Japan Travel Guide]]\\n\"\n\n    # You can also check recently modified notes to reference them\n    recent = await recent_activity(timeframe=\"1 week\")\n    recent_titles = [item.title for item in recent.primary_results]\n\n    if \"Transportation Options\" in recent_titles:\n        relations_section += \"- relates_to [[Transportation Options]]\\n\"\n\n    # Always include meaningful forward references, even if they don't exist yet\n    relations_section += \"- located_in [[Tokyo]]\\n\"\n    relations_section += \"- visited_during [[Spring 2023 Trip]]\\n\"\n\n    # Now create the note with both verified and forward relations\n    content = f\"\"\"# Tokyo Neighborhood Guide\n    \n## Overview\nDetails about different Tokyo neighborhoods and their unique characteristics.\n\n## Observations\n- [area] Shibuya is a busy shopping district #shopping\n- [transportation] Yamanote Line connects major neighborhoods #transit\n- [recommendation] Visit Shimokitazawa for vintage shopping #unique\n- [tip] Get a Suica card for easy train travel #convenience\n\n{relations_section}\n    \"\"\"\n\n    result = await write_note(\n        title=\"Tokyo Neighborhood Guide\",\n        content=content,\n        verbose=True\n    )\n\n    # You can check which relations were resolved and which are forward references\n    if result and 'relations' in result:\n        resolved = [r['to_name'] for r in result['relations'] if r.get('target_id')]\n        forward_refs = [r['to_name'] for r in result['relations'] if not r.get('target_id')]\n\n        print(f\"Resolved relations: {resolved}\")\n        print(f\"Forward references that will be resolved later: {forward_refs}\")\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables with Basic Memory\nDESCRIPTION: Example of setting the BASIC_MEMORY_PROJECT environment variable to specify which project to use for Basic Memory commands.\n\nLANGUAGE: bash\nCODE:\n```\nBASIC_MEMORY_PROJECT=work basic-memory sync  \n```\n\n----------------------------------------\n\nTITLE: Handling Sync Issues in Basic Memory (Python)\nDESCRIPTION: Shows how to detect potential synchronization issues by checking for recent activity. If no recent updates are found, it suggests running the sync command, helping users troubleshoot when information appears outdated.\n\nLANGUAGE: python\nCODE:\n```\n# If information seems outdated\nactivity = await recent_activity(timeframe=\"1 hour\")\nif not activity or not activity.primary_results:\n    print(\"It seems there haven't been recent updates. You might need to run 'basic-memory sync'.\")\n```\n\n----------------------------------------\n\nTITLE: Advanced References in Basic Memory\nDESCRIPTION: This snippet demonstrates how to follow connections across the knowledge graph. Claude looks at a specific document and then checks related documents to provide a comprehensive view.\n\nLANGUAGE: markdown\nCODE:\n```\nYou: Look at memory://project-architecture and check related documents to give me a complete picture.\n```\n\n----------------------------------------\n\nTITLE: Cloning the Basic Memory Repository in Bash\nDESCRIPTION: Commands to clone the Basic Memory GitHub repository and navigate to the project directory.\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/basicmachines-co/basic-memory.git\ncd basic-memory\n```\n\n----------------------------------------\n\nTITLE: Searching Basic Memory Knowledge Base\nDESCRIPTION: This snippet shows how to search for specific information in the knowledge base. Claude performs a semantic search and retrieves relevant documents on the requested topic.\n\nLANGUAGE: markdown\nCODE:\n```\nYou: Find information about JWT authentication in my notes.\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Basic Memory in Bash\nDESCRIPTION: Commands to run tests using the make command or uv runner, including options for running all tests or specific test files.\n\nLANGUAGE: bash\nCODE:\n```\n# Run all tests\nmake test\n# or\nuv run pytest -p pytest_mock -v\n\n# Run a specific test\npytest tests/path/to/test_file.py::test_function_name\n```\n\n----------------------------------------\n\nTITLE: Referencing Knowledge with memory:// URLs\nDESCRIPTION: This snippet demonstrates how to reference specific knowledge directly using memory:// URLs. This allows Claude to access and use specific documents from the knowledge base.\n\nLANGUAGE: markdown\nCODE:\n```\nYou: Please look at memory://authentication-approaches and suggest which approach would be best for our mobile app.\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Git for Basic Memory\nDESCRIPTION: Git commands to create a new branch for feature development or bug fixes when contributing to the project.\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/your-feature-name\n# or\ngit checkout -b fix/issue-you-are-fixing\n```\n\n----------------------------------------\n\nTITLE: Basic Memory Status and Help Commands\nDESCRIPTION: CLI commands to check the Basic Memory system status and display help information for the command line interface.\n\nLANGUAGE: bash\nCODE:\n```\n# Check system status\nbasic-memory status\n\n# View CLI help\nbasic-memory --help\n```\n\n----------------------------------------\n\nTITLE: Running Code Quality Checks for Basic Memory in Bash\nDESCRIPTION: Commands to verify code quality through linting, formatting, and type checking, either all at once or individually.\n\nLANGUAGE: bash\nCODE:\n```\n# Run all checks at once\nmake check\n\n# Or run individual checks\nmake lint      # Run linting\nmake format    # Format code\nmake type-check  # Type checking\n```\n\n----------------------------------------\n\nTITLE: Using MCP Prompts for AI Assistance\nDESCRIPTION: Example signatures of MCP prompt functions for better AI interaction with Basic Memory tools.\n\nLANGUAGE: python\nCODE:\n```\nai_assistant_guide()\n```\n\nLANGUAGE: python\nCODE:\n```\ncontinue_conversation(topic, timeframe)\n```\n\nLANGUAGE: python\nCODE:\n```\nsearch_notes(query, after_date)\n```\n\nLANGUAGE: python\nCODE:\n```\nrecent_activity(timeframe)\n```\n\nLANGUAGE: python\nCODE:\n```\njson_canvas_spec()\n```\n\n----------------------------------------\n\nTITLE: Checking system status in Basic Memory CLI\nDESCRIPTION: The status command provides system status information with options for detailed output and JSON formatting.\n\nLANGUAGE: bash\nCODE:\n```\n# Basic status check\nbasic-memory status\n\n# Detailed status\nbasic-memory status --verbose\n\n# JSON output\nbasic-memory status --json\n```\n\n----------------------------------------\n\nTITLE: Building Context with MCP Tools\nDESCRIPTION: Example signature of the build_context function for navigating the knowledge graph via memory:// URLs for conversation continuity.\n\nLANGUAGE: python\nCODE:\n```\nbuild_context(url, depth, timeframe)\n```\n\n----------------------------------------\n\nTITLE: Finding the Path to uvx Executable\nDESCRIPTION: Command to locate the absolute path to the uvx executable when troubleshooting 'ENOENT' errors in Claude Desktop configuration.\n\nLANGUAGE: bash\nCODE:\n```\nwhich uvx\n```\n\n----------------------------------------\n\nTITLE: Reading Notes with MCP Tools\nDESCRIPTION: Example signature of the read_note function for reading notes by title, permalink, or memory:// URL with knowledge graph awareness.\n\nLANGUAGE: python\nCODE:\n```\nread_note(identifier, page, page_size)\n```\n\n----------------------------------------\n\nTITLE: Updating Basic Memory to Latest Version\nDESCRIPTION: Commands for updating Basic Memory when new versions are released, using either uv tool (recommended) or pip.\n\nLANGUAGE: bash\nCODE:\n```\n# Update with uv (recommended)\nuv tool upgrade basic-memory \n\n# Or with pip \npip install --upgrade basic-memory\n```\n\n----------------------------------------\n\nTITLE: Reading Files with MCP Tools\nDESCRIPTION: Example signature of the read_file function for reading raw file content without knowledge graph processing.\n\nLANGUAGE: python\nCODE:\n```\nread_file(path)\n```\n\n----------------------------------------\n\nTITLE: Getting Recent Activity with MCP Tools\nDESCRIPTION: Example signature of the recent_activity function for retrieving recently updated information with a specified timeframe.\n\nLANGUAGE: python\nCODE:\n```\nrecent_activity(type, depth, timeframe)\n```\n\n----------------------------------------\n\nTITLE: Searching Notes with MCP Tools\nDESCRIPTION: Example signature of the search_notes function for full-text search across all content with filtering options.\n\nLANGUAGE: python\nCODE:\n```\nsearch_notes(query, page, page_size)\n```\n\n----------------------------------------\n\nTITLE: Accessing MCP Tools in Basic Memory\nDESCRIPTION: Commands for accessing the Model Context Protocol tools from the command line, including guide access and conversation continuation.\n\nLANGUAGE: bash\nCODE:\n```\nbasic-memory tools\n```\n\nLANGUAGE: bash\nCODE:\n```\nbasic-memory tools basic-memory-guide\n```\n\nLANGUAGE: bash\nCODE:\n```\nbasic-memory tools continue-conversation --topic=\"search\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Knowledge Flow with Mermaid\nDESCRIPTION: A mermaid flowchart showing the knowledge flow in the basic-memory system, illustrating how human input, AI input, and CLI commands are processed through the knowledge graph and full-text search, resulting in markdown outputs, visualizations, and AI context.\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    subgraph Input\n        H[Human Input]\n        AI[AI Input]\n        CLI[CLI Commands]\n    end\n\n    subgraph Processing\n        KG[Knowledge Graph]\n        FTS[Full Text Search]\n    end\n\n    subgraph Output\n        MD[Markdown]\n        VIZ[Visualizations]\n        CTX[AI Context]\n    end\n\n    H -->|add| KG\n    AI -->|enhance| KG\n    CLI -->|manage| KG\n    KG -->|export| MD\n    KG -->|generate| VIZ\n    KG -->|load| CTX\n    KG ---|index| FTS\n```\n\n----------------------------------------\n\nTITLE: CLI Commands for Visualization in Bash\nDESCRIPTION: Example bash commands for the basic-memory CLI tool that demonstrate how to generate different types of visualizations from the knowledge graph, including relationship diagrams, architecture diagrams, and flow diagrams.\n\nLANGUAGE: bash\nCODE:\n```\nbasic-memory visualize relationships basic-factory\nbasic-memory visualize architecture\nbasic-memory visualize flow\n```\n\n----------------------------------------\n\nTITLE: Visualizing Web UI Architecture with Mermaid\nDESCRIPTION: A mermaid diagram showing the architecture of the basic-memory-webui, including the frontend components (Notebook Interface, Visualizations, Editors) and backend components (FastAPI, SQLite, MCP Server) and their interactions.\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"Frontend\"\n        NB[Notebook Interface]\n        VIZ[Visualizations]\n        ED[Editors]\n    end\n\n    subgraph \"Backend\"\n        API[FastAPI]\n        DB[(SQLite)]\n        MCP[MCP Server]\n    end\n\n    NB -->|HTMX| API\n    VIZ -->|Updates| API\n    ED -->|Changes| API\n    API -->|Query| DB\n    API -->|Context| MCP\n    MCP -->|Updates| DB\n```\n\n----------------------------------------\n\nTITLE: Direct Reference Example in Markdown\nDESCRIPTION: Illustrates how an AI would use build_context to fetch information about a markdown service when directly referenced in a conversation.\n\nLANGUAGE: markdown\nCODE:\n```\nHuman: What's our markdown service design?\n\nClaude: Let me check [Markdown Service](memory://basic-memory/markdown-service)...\n\n<using build_context>\nI see this is our core service for markdown processing. Key points:\n- Uses python-markdown and python-frontmatter\n- Handles file reading/writing\n- Manages semantic parsing\n- Related to [File Operations](memory://basic-memory/file-operations)\n```\n\n----------------------------------------\n\nTITLE: Installing Basic Memory via Smithery CLI\nDESCRIPTION: Alternative installation method using Smithery CLI to automatically install and configure Basic Memory for Claude Desktop without requiring manual edits to the configuration file.\n\nLANGUAGE: bash\nCODE:\n```\nnpx -y @smithery/cli install @basicmachines-co/basic-memory --client claude\n```\n\n----------------------------------------\n\nTITLE: Example LLM Conversation Input for Basic Memory\nDESCRIPTION: Example of conversational input to capture knowledge about coffee brewing methods that will be stored in Basic Memory's knowledge base.\n\nLANGUAGE: markdown\nCODE:\n```\nI've been experimenting with different coffee brewing methods. Key things I've learned:\n\n- Pour over gives more clarity in flavor than French press\n- Water temperature is critical - around 205°F seems best\n- Freshly ground beans make a huge difference\n```\n\n----------------------------------------\n\nTITLE: Example Prompts for Basic Memory in Claude Desktop\nDESCRIPTION: Sample prompts demonstrating how to interact with Basic Memory through Claude, including creating notes, searching for information, visualizing knowledge, and retrieving recent activity.\n\nLANGUAGE: text\nCODE:\n```\n\"Create a note about our project architecture decisions\"\n\"Find information about JWT authentication in my notes\"\n\"Create a canvas visualization of my project components\"\n\"Read my notes on the authentication system\"\n\"What have I been working on in the past week?\"\n```\n\n----------------------------------------\n\nTITLE: Generating a Coffee Flavor Map Canvas Visualization with Claude\nDESCRIPTION: A prompt example for requesting Claude to create a canvas visualization that maps relationships between coffee brewing methods, origins, and flavor outcomes, including the influence of different equipment and techniques.\n\nLANGUAGE: markdown\nCODE:\n```\nPlease create a canvas visualization mapping the relationships between coffee brewing methods, origins, and flavor outcomes. Show how different equipment and techniques influence extraction and resulting flavor profiles.\n```\n\n----------------------------------------\n\nTITLE: Refining Canvas Visualizations in Markdown\nDESCRIPTION: Example prompts for asking Claude to make adjustments to an existing canvas visualization, such as reorganizing components or adding more detail to connections.\n\nLANGUAGE: markdown\nCODE:\n```\nYou: \"Could you reorganize the canvas to group related components together?\"\n\nYou: \"Please add more detail about the connection between these two concepts.\"\n```\n\n----------------------------------------\n\nTITLE: Requesting Document-Based Visualizations in Markdown\nDESCRIPTION: Example prompt for requesting Claude to create a canvas visualization based on documents in the user's knowledge base.\n\nLANGUAGE: markdown\nCODE:\n```\nYou: \"Create a canvas showing the connections between my project planning documents\"\n```\n\n----------------------------------------\n\nTITLE: Missing Content Error Handling in Basic Memory (Python)\nDESCRIPTION: Demonstrates how to handle situations where a requested note doesn't exist by attempting to search for similar content instead. This error handling pattern helps maintain smooth user interaction when exact content isn't found.\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    content = await read_note(\"Document\")\nexcept:\n    # Try search instead\n    results = await search_notes(\"Document\")\n    if results and results.primary_results:\n        # Found something similar\n        content = await read_note(results.primary_results[0].permalink)\n```\n\n----------------------------------------\n\nTITLE: Handling Forward References in Basic Memory (Python)\nDESCRIPTION: Shows how to process unresolved relations (forward references) in a note creation response. This code identifies which references don't yet have target entities and offers to create those missing notes, treating forward references as a feature rather than an error.\n\nLANGUAGE: python\nCODE:\n```\nresponse = await write_note(..., verbose=True)\n# Check for forward references (unresolved relations)\nforward_refs = []\nfor relation in response.get('relations', []):\n    if not relation.get('target_id'):\n        forward_refs.append(relation.get('to_name'))\n\nif forward_refs:\n    # This is a feature, not an error! Inform the user about forward references\n    print(f\"Note created with forward references to: {forward_refs}\")\n    print(\"These will be automatically linked when those notes are created.\")\n    \n    # Optionally suggest creating those entities now\n    print(\"Would you like me to create any of these notes now to complete the connections?\")\n```\n\n----------------------------------------\n\nTITLE: Creating Project Tracking Documents with Task Lists\nDESCRIPTION: Format for project tracking documents in Basic Memory, including task lists with document references and organizational tags. This helps manage project workflows within the knowledge base.\n\nLANGUAGE: markdown\nCODE:\n```\n# Current Sprint\n\n## Tasks\n- [ ] Update [[Search]]\n- [ ] Fix [[Auth Bug]]\n\n## Tags\n#sprint #planning #current\n```\n\n----------------------------------------\n\nTITLE: Creating Wiki Links in Markdown for Basic Memory Relations\nDESCRIPTION: Wiki Links format used in Basic Memory to establish connections between documents. These links appear as clickable elements in Obsidian and populate the graph view with connected nodes.\n\nLANGUAGE: markdown\nCODE:\n```\n## Relations\n- implements [[Search Design]]\n- depends_on [[Database Schema]]\n```\n\n----------------------------------------\n\nTITLE: Formatting Observations with Tags in Markdown\nDESCRIPTION: Format for adding observations in Basic Memory with tags. The tags (prefixed with #) become searchable and filterable in Obsidian's tag pane.\n\nLANGUAGE: markdown\nCODE:\n```\n## Observations\n- [tech] Using SQLite #database\n- [design] Local-first #architecture\n```\n\n----------------------------------------\n\nTITLE: Importing MCP Memory Server Data to Basic Memory\nDESCRIPTION: Command to import existing data from an MCP Memory Server JSON file into Basic Memory.\n\nLANGUAGE: bash\nCODE:\n```\nbasic-memory import memory-json path/to/memory.json\n```\n\n----------------------------------------\n\nTITLE: Importing Claude Data to Basic Memory\nDESCRIPTION: Commands to import existing data from Claude.ai into Basic Memory, including conversations and projects.\n\nLANGUAGE: bash\nCODE:\n```\nbasic-memory import claude conversations path/to/conversations.json\nbasic-memory import claude projects path/to/projects.json\n```\n\n----------------------------------------\n\nTITLE: Importing ChatGPT Data to Basic Memory\nDESCRIPTION: Command to import existing conversations from ChatGPT into Basic Memory.\n\nLANGUAGE: bash\nCODE:\n```\nbasic-memory import chatgpt path/to/conversations.json\n```\n\n----------------------------------------\n\nTITLE: Starting Synchronization for Basic Memory\nDESCRIPTION: Commands to synchronize files with Basic Memory, either in real-time watch mode or as a one-time sync operation.\n\nLANGUAGE: bash\nCODE:\n```\nbasic-memory sync --watch\n```\n\nLANGUAGE: bash\nCODE:\n```\nbasic-memory sync\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Basic Memory\nDESCRIPTION: JSON configuration to set up the MCP server for Basic Memory. This should be added to the Claude Desktop configuration file located in the application support directory.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"basic-memory\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"basic-memory\",\n        \"mcp\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Projects in Basic Memory\nDESCRIPTION: Commands to list all projects, add a new project with a specific path, and set a default project for Basic Memory.\n\nLANGUAGE: bash\nCODE:\n```\n# List all projects\nbasic-memory project list\n\n# Add a new project\nbasic-memory project add work ~/work-basic-memory\n\n# Set default project\nbasic-memory project default work\n```\n\n----------------------------------------\n\nTITLE: Installing Basic Memory Package with Package Managers\nDESCRIPTION: Commands to install Basic Memory using either uv (recommended) or pip package managers.\n\nLANGUAGE: bash\nCODE:\n```\n# Install with uv (recommended)\nuv tool install basic-memory\n\n# Or with pip\npip install basic-memory\n```\n\n----------------------------------------\n\nTITLE: Managing Basic Memory Projects\nDESCRIPTION: Commands for adding new projects, setting default projects, and listing all configured projects in Basic Memory to change the default storage location.\n\nLANGUAGE: bash\nCODE:\n```\n# Add a new project  \nbasic-memory project add work ~/work-basic-memory  \n  \n# Set the default project  \nbasic-memory project default work  \n\n# List all configured projects  \nbasic-memory project list  \n```\n\n----------------------------------------\n\nTITLE: Running the Basic Memory Sync Service\nDESCRIPTION: Commands for running the Basic Memory sync service, either as a one-time sync or with continuous file change monitoring using the --watch flag.\n\nLANGUAGE: bash\nCODE:\n```\n# One-time sync\nbasic-memory sync\n\n# For continuous monitoring (recommended)\nbasic-memory sync --watch\n```\n\n----------------------------------------\n\nTITLE: Sample Markdown Format for Created Knowledge Notes\nDESCRIPTION: Example of the markdown file structure generated by Basic Memory when creating a knowledge note through conversation with Claude.\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Coffee Brewing Methods\npermalink: coffee-brewing-methods\n---\n\n# Coffee Brewing Methods\n\n## Observations\n- [method] Pour over provides more clarity...\n- [technique] Water temperature at 205°F...\n\n## Relations\n- relates_to [[Other Coffee Topics]]\n```\n\n----------------------------------------\n\nTITLE: Running Basic Memory Sync with Continuous Monitoring\nDESCRIPTION: Command to start the Basic Memory sync process with continuous file watching, which should be kept running in the background for real-time updates.\n\nLANGUAGE: bash\nCODE:\n```\nbasic-memory sync --watch\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop with Absolute Path to uvx\nDESCRIPTION: Modified JSON configuration using the absolute path to uvx executable for Claude Desktop when the default path isn't working.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"basic-memory\": {\n      \"command\": \"/absolute/path/to/uvx\",\n      \"args\": [\n        \"basic-memory\",\n        \"mcp\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Basic Memory via Command Line\nDESCRIPTION: Commands for installing Basic Memory using either uv tool (recommended) or pip. The uv method installs the package in a standalone virtual environment.\n\nLANGUAGE: bash\nCODE:\n```\n# Install with uv (recommended).  \nuv tool install basic-memory\n\n# Or with pip\npip install basic-memory\n```\n\n----------------------------------------\n\nTITLE: Running a Single Test in Basic Memory Project\nDESCRIPTION: Command for running a specific test function in the Basic Memory project using pytest.\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/path/to/test_file.py::test_function_name\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Basic Memory Project\nDESCRIPTION: Commands for running all tests using either make or pytest directly with the pytest_mock plugin.\n\nLANGUAGE: bash\nCODE:\n```\nuv run pytest -p pytest_mock -v\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Running All Code Checks\nDESCRIPTION: Command for running all code quality checks (lint, format, type-check, test) in one operation.\n\nLANGUAGE: bash\nCODE:\n```\nmake check\n```\n\n----------------------------------------\n\nTITLE: Syncing Knowledge in Basic Memory\nDESCRIPTION: Commands for synchronizing knowledge in Basic Memory, either once or in watch mode.\n\nLANGUAGE: bash\nCODE:\n```\nbasic-memory sync\n```\n\nLANGUAGE: bash\nCODE:\n```\nbasic-memory sync --watch\n```\n\n----------------------------------------\n\nTITLE: Checking Sync Status in Basic Memory\nDESCRIPTION: Command for checking the synchronization status of the knowledge base.\n\nLANGUAGE: bash\nCODE:\n```\nbasic-memory status\n```\n\n----------------------------------------\n\nTITLE: Importing Data from External Sources\nDESCRIPTION: Commands for importing data into Basic Memory from various sources including Claude, ChatGPT, and Memory JSON.\n\nLANGUAGE: bash\nCODE:\n```\nbasic-memory import claude conversations\n```\n\nLANGUAGE: bash\nCODE:\n```\nbasic-memory import chatgpt\n```\n\nLANGUAGE: bash\nCODE:\n```\nbasic-memory import memory-json\n```\n\n----------------------------------------\n\nTITLE: Running the MCP Inspector\nDESCRIPTION: Command for starting the development Model Context Protocol (MCP) Inspector.\n\nLANGUAGE: bash\nCODE:\n```\nmake run-inspector\n```\n\n----------------------------------------\n\nTITLE: Installing Basic Memory Development Environment\nDESCRIPTION: Commands for installing the Basic Memory project in development mode using either make or pip directly.\n\nLANGUAGE: bash\nCODE:\n```\nmake install\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install -e \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Linting Basic Memory Project Code\nDESCRIPTION: Commands for linting the codebase using either make or ruff directly with auto-fix option.\n\nLANGUAGE: bash\nCODE:\n```\nmake lint\n```\n\nLANGUAGE: bash\nCODE:\n```\nruff check . --fix\n```\n\n----------------------------------------\n\nTITLE: Type Checking Basic Memory Project\nDESCRIPTION: Commands for running static type checking on the codebase using either make or pyright directly.\n\nLANGUAGE: bash\nCODE:\n```\nmake type-check\n```\n\nLANGUAGE: bash\nCODE:\n```\nuv run pyright\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migrations\nDESCRIPTION: Command for creating a new Alembic database migration with a specified message.\n\nLANGUAGE: bash\nCODE:\n```\nmake migration m=\"Your migration message\"\n```\n\n----------------------------------------\n\nTITLE: Signing Git Commits for DCO Compliance in Bash\nDESCRIPTION: Command to sign Git commits with the Developer Certificate of Origin (DCO) using the --signoff flag, which is required for contributions.\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -s -m \"Your commit message\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Coverage for Basic Memory in Bash\nDESCRIPTION: Command to run the test suite with coverage reporting to ensure all code is properly tested.\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Basic Memory in Bash\nDESCRIPTION: Commands to install project dependencies using different methods: make (recommended), uv, or pip.\n\nLANGUAGE: bash\nCODE:\n```\n# Using make (recommended)\nmake install\n\n# Or using uv\nuv install -e \".[dev]\"\n\n# Or using pip\npip install -e \".[dev]\"\n```"
  }
]