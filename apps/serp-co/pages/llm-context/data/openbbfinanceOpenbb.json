[
  {
    "owner": "openbb-finance",
    "repo": "openbb",
    "content": "TITLE: Installing OpenBB Platform via pip\nDESCRIPTION: This code snippet demonstrates how to install the OpenBB Platform using pip, the Python package installer. This is the recommended method for installing the platform as a PyPI package. It requires Python and pip to be installed on the system.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Yahoo!Finance Provider with pip\nDESCRIPTION: This code snippet shows how to install the OpenBB Yahoo!Finance extension using pip.  This command installs the necessary packages to enable the Yahoo!Finance data provider within the OpenBB Platform. The command should be executed in a terminal environment where Python and pip are configured.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/yfinance/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-yfinance\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB QA Extension with pip\nDESCRIPTION: This command installs the OpenBB quantitative analysis extension using pip. It is executed within the extension's folder and adds the QA functionality to the OpenBB Platform. This requires pip to be installed and configured to access the Python package index.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/quantitative/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-quantitative\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Forex Data - OpenBB\nDESCRIPTION: Fetches historical exchange rate data for the EUR/USD pair using the yfinance provider via the OpenBB Platform. It uses `obb.equity.price.historical` to get the data between specified start and end dates and stores it in a Pandas DataFrame.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/currencyExchangeRateForecasting.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Fetching historical data for the EUR/USD pair using the yfinance provider\nstart_date = '1991-01-01'\nend_date = '2024-01-01'\n\n# Since yfinance uses \"EURUSD=X\", we'll use that\nforex_df = obb.equity.price.historical(symbol=\"EURUSD=X\", provider=\"yfinance\", start_date=start_date, end_date=end_date).to_df()\n\nforex_df.sample(5)\n```\n\n----------------------------------------\n\nTITLE: Fetching Daily Historical Prices with OpenBB\nDESCRIPTION: This code snippet retrieves daily historical price data for the 'SPY' ticker using the 'yfinance' provider via the OpenBB Platform. It then converts the result to a pandas DataFrame and displays the first row.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/loadHistoricalPriceData.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndf_daily = obb.equity.price.historical(symbol=\"spy\", provider=\"yfinance\")\ndf_daily.to_df().head(1)\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Stock Data using OpenBB\nDESCRIPTION: This code fetches historical stock data for specified symbols (AAPL, GOOG, MSFT, NVDA) from 2015-01-01 using the OpenBB SDK's equity.price.historical function with yfinance as the provider. It handles potential exceptions during data fetching and concatenates the data into a combined pandas DataFrame.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/BacktestingMomentumTrading.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsymbols = ['AAPL', 'GOOG', 'MSFT', 'NVDA']\nstart_date = '2015-01-01'\ninitial_capital = 10000\nshort_window = 40\nlong_window = 100\ndataframes = []\n\nfor symbol in symbols:\n    try:\n        data = obb.equity.price.historical(\n            symbol=symbol,\n            start_date=start_date,\n            provider=\"yfinance\"\n        ).to_df()\n        data['Symbol'] = symbol\n        dataframes.append(data)\n    except Exception as e:\n        print(f\"Failed to fetch data for {symbol}: {str(e)}\")\n\ncombined_data = pd.concat(dataframes)\ncombined_data = combined_data.reset_index()\n\ncombined_data.head()\n```\n\n----------------------------------------\n\nTITLE: Fetching Monthly Historical Prices with OpenBB\nDESCRIPTION: This code retrieves monthly historical price data for the 'SPY' ticker, starting from '1990-01-01', using the 'yfinance' provider. The 'interval' parameter is set to '1M' to specify monthly data, and the last two rows of the resulting DataFrame are displayed.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/loadHistoricalPriceData.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndf_monthly = obb.equity.price.historical(\n    \"spy\", start_date=\"1990-01-01\", interval=\"1M\", provider=\"yfinance\"\n).to_df()\ndf_monthly.tail(2)\n```\n\n----------------------------------------\n\nTITLE: Splitting Data into Training and Testing Sets\nDESCRIPTION: Splits the preprocessed forex data into training and testing sets.  80% of the data is used for training, and 20% is reserved for testing the performance of the models.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/currencyExchangeRateForecasting.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Split the data, keeping 20% of it for testing\ntrain_size = int(len(forex_df) * 0.8)\ntrain_data, test_data = forex_df['close'][:train_size], forex_df['close'][train_size:]\n\nprint(f\"Training data: {len(train_data)} rows\")\nprint(f\"Testing data: {len(test_data)} rows\")\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB EconDB Extension with pip\nDESCRIPTION: This command installs the OpenBB EconDB extension using pip. It fetches the package from PyPI and installs it along with any required dependencies. This enables the OpenBB Platform to access data from the EconDB provider.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/econdb/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-econdb\n```\n\n----------------------------------------\n\nTITLE: Import OpenBB Platform\nDESCRIPTION: This snippet imports the OpenBB platform, providing access to its various functionalities and data sources. It is the entry point for using the platform's features. No dependencies are required other than having the OpenBB package installed.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/platform_standardization.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb import obb\n```\n\n----------------------------------------\n\nTITLE: Importing necessary packages\nDESCRIPTION: This code snippet imports the required Python libraries for data manipulation, numerical calculations, plotting, and portfolio optimization. It imports OpenBB for data retrieval, NumPy and Pandas for data handling, Matplotlib for visualization, and PyPortfolioOpt for portfolio optimization algorithms.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/portfolioOptimizationUsingModernPortfolioTheory.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb import obb\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom pypfopt import EfficientFrontier\nfrom pypfopt import CovarianceShrinkage, CLA, expected_returns\n```\n\n----------------------------------------\n\nTITLE: Passing Chart Parameters - Python\nDESCRIPTION: This code shows how to pass chart parameters as a nested dictionary under the `chart_params` key when making a request to an OpenBB Platform endpoint. It demonstrates how to customize the chart's title and add indicators like EMA.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/index.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nchart_params = dict(\n    title=\"AAPL 50/200 Day EMA\",\n    indicators=dict(\n        ema=dict(length=[50,200]),\n    ),\n)\nparams = dict(\n    symbol=\"AAPL\",\n    start_date=\"2022-01-01\",\n    provider=\"yfinance\",\n    chart=True,\n    chart_params=chart_params,\n)\ndata = obb.equity.price.historical(**params)\n```\n\n----------------------------------------\n\nTITLE: Plotting Actual vs Predicted Prices in Time Series Analysis (matplotlib)\nDESCRIPTION: This code snippet plots the actual and predicted close prices from different time series models (ARIMA, SARIMAX, Exponential Smoothing, LSTM) on a single chart using matplotlib.  It takes a DataFrame `comparison_df` as input, which should contain 'date', 'close' (actual), and prediction columns ('arima_predictions', 'sarimax_predictions', 'exp_smooth_predictions', 'lstm_predictions').\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/currencyExchangeRateForecasting.ipynb#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Plotting the actual vs predicted prices\nplt.figure(figsize=(14, 7))\nplt.plot(comparison_df['date'], comparison_df['close'], label='Actual Close Price', color='blue')\nplt.plot(comparison_df['date'], comparison_df['arima_predictions'], label='ARIMA Predictions', color='orange')\nplt.plot(comparison_df['date'], comparison_df['sarimax_predictions'], label='SARIMAX Predictions', color='green')\nplt.plot(comparison_df['date'], comparison_df['exp_smooth_predictions'], label='Exponential Smoothing Predictions', color='red')\nplt.plot(comparison_df['date'], comparison_df['lstm_predictions'], label='Long Short Term Memomy Predictions', color='violet')\nplt.title('Actual vs Predicted Close Prices')\nplt.xlabel('Date')\nplt.ylabel('Close Price')\nplt.legend()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Calculate Dividends Per Share\nDESCRIPTION: This code calculates dividends per share by fetching cash flow statement data for 'TGT' from FMP using `obb.equity.fundamental.cash()` and income data to calculate the amount of dividends paid per share.  It then divides the 'payment_of_dividends' by 'weighted_average_basic_shares_outstanding'.  The last 4 results are then displayed.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/financialStatements.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndividends = obb.equity.fundamental.cash(\n    \"TGT\", provider=\"fmp\", limit=150, period=\"quarter\"\n).to_df()[[\"payment_of_dividends\"]]\n\ndividends[\"shares\"] = data[[\"weighted_average_basic_shares_outstanding\"]]\ndividends[\"div_per_share\"] = abs(\n    dividends[\"payment_of_dividends\"] / dividends[\"shares\"]\n)\n\ndividends[\"div_per_share\"].tail(4)\n```\n\n----------------------------------------\n\nTITLE: Importing OpenBB (Python)\nDESCRIPTION: This code snippet shows how to import the OpenBB module into a Python script.  The line `from openbb import obb` imports the `obb` object which is the entry point to the OpenBB Platform. This import statement is required to access OpenBB's functions and data.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/COMMUNITY_EXAMPLE_TEMPLATE.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb import obb\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Equity Data using FMP\nDESCRIPTION: This snippet fetches historical price data for the SPX equity index using the `fmp` provider. The equity ticker symbol is passed as the first argument to `obb.equity.price.historical()`. The result is converted to a Pandas DataFrame.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/loadHistoricalPriceData.ipynb#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nobb.equity.price.historical(\"^SPX\", provider=\"fmp\").to_df()\n```\n\n----------------------------------------\n\nTITLE: Fetching crypto data using OpenBB\nDESCRIPTION: This code snippet fetches historical price data for the top 10 cryptocurrencies from October 1, 2023, to October 1, 2024, using the OpenBB platform. It uses the `obb.crypto.price.historical` function to retrieve daily close prices from yfinance and converts the data into a Pandas DataFrame.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/portfolioOptimizationUsingModernPortfolioTheory.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntop_crypto= ['ADA-USD', 'BNB-USD', 'BTC-USD', 'DOT-USD', 'ETH-USD', 'LTC-USD','MATIC-USD', 'SOL-USD', 'TRX-USD', 'XRP-USD']\n\nohlc_data= obb.crypto.price.historical(top_crypto, provider=\"yfinance\", interval='1d', start_date='2023-10-01', end_date='2024-10-01').to_df()\nohlc_data\n```\n\n----------------------------------------\n\nTITLE: Retrieve FRED Series Data\nDESCRIPTION: Retrieves time series data from FRED (Federal Reserve Economic Data) for specified series IDs, including WALCL, WLRRAL, WDTGAL, and SP500 using the `obb.economy.fred_series()` function.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/usdLiquidityIndex.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata = obb.economy.fred_series([\"WALCL\", \"WLRRAL\", \"WDTGAL\", \"SP500\"])\n\ndata\n```\n\n----------------------------------------\n\nTITLE: Installing the OpenBB Multpl extension\nDESCRIPTION: This command installs the OpenBB Multpl extension using pip.  This allows access to financial data from multpl.com within the OpenBB platform. It is a prerequisite for using the `obb.index.sp500_multiples` endpoint.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/multpl/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install openbb-multpl\n```\n\n----------------------------------------\n\nTITLE: Install OpenBB Platform in Google Colab (Python)\nDESCRIPTION: Installs the OpenBB Platform with all available extensions using pip.  Package version conflicts during installation can be safely ignored. The `openbb[all]` specification ensures that all extensions are installed.  Alternatively, the nightly distribution can be installed using `openbb-nightly`.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/googleColab.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install openbb[all]\n\n# There is also a nightly distribution available, openbb-nightly\n```\n\n----------------------------------------\n\nTITLE: Backtesting Strategy\nDESCRIPTION: The `backtest` function simulates the trading strategy by calculating daily returns, strategy returns based on position, cumulative market returns (buy & hold), cumulative strategy returns, and the portfolio value over time. Initial capital is used to track the portfolio's growth.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/BacktestingMomentumTrading.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef backtest(data, initial_capital):\n    data['Daily Return'] = data['close'].pct_change()\n    data['Strategy Return'] = data['Position'] * data['Daily Return']\n    data['Cumulative Market Return'] = (1 + data['Daily Return']).cumprod()\n    data['Cumulative Strategy Return'] = (1 + data['Strategy Return']).cumprod()\n    data['Portfolio Value'] = initial_capital * data['Cumulative Strategy Return']\n\n    return data\n```\n\n----------------------------------------\n\nTITLE: Screening Equities by Sector on FMP\nDESCRIPTION: This snippet demonstrates how to screen equities by sector and country using the FMP provider. It filters for stocks in India within the financial services sector. The length of results and the first 5 rows of the DataFrame are displayed, after converting dtypes.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/findSymbols.ipynb#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsector_results = obb.equity.screener(\n    country=\"IN\", sector=\"financial_services\", provider=\"fmp\"\n).to_df()\ndisplay(len(sector_results))\nsector_results.head(5).convert_dtypes()\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Widget Parameter Types\nDESCRIPTION: This code snippet demonstrates how to define various basic widget parameter types within a FastAPI endpoint. It includes examples of a required date parameter, a string parameter with a default value, an integer parameter, a float parameter, a literal type parameter for choices, and a boolean parameter. The docstring provides the widget description. choices_dict is an example of how to handle the \"choices\" parameter to convert a displayed label to a desired label.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/hello_params\")\nasync def hello_params(\n    required_param: datetime.date,\n    param_1: str = \"Default\",\n    param_2: int = 0,\n    param_3: float = None,\n    param_4: Literal[\"Choice 1\", \"Choice 2\", \"Choice 3\"] = \"Choice 1\",\n    param_5: bool = True,\n) -> list:\n    \"\"\"Widget description created by docstring.\"\"\"\n    # Handle the \"choices\" parameter inside the function to convert the displayed label to the desired one.\n    choices_dict = {\"Choice 1\": \"do_one\", \"Choice 2\": \"do_two\", \"Choice 3\": \"do_three\"}\n    choice = choices_dict.get(param_4, None)\n\n    # Do something with the parameters and return the result of work.\n    return [{\"Hello\": \"Row 1!\"}, {\"Hello\": \"Row 2!\"}]\n```\n\n----------------------------------------\n\nTITLE: Importing OpenBB Platform\nDESCRIPTION: This snippet demonstrates how to import the OpenBB Platform into a Python session. It assumes that the OpenBB Platform has been installed and the environment is active.  This is the initial step for using any of the OpenBB Platform's functionalities.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/findSymbols.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb import obb\n```\n\n----------------------------------------\n\nTITLE: Importing the OpenBB Python Interface\nDESCRIPTION: This code snippet demonstrates how to import the OpenBB Python interface, which provides access to the core functionality and installed extensions. The `obb` object is the main entry point for interacting with the platform.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb import obb\n```\n\n----------------------------------------\n\nTITLE: Calculate Error Metrics for Prediction Methods (scikit-learn, pandas)\nDESCRIPTION: This code calculates error metrics (MAE, MSE, RMSE, MAPE) for different time series prediction methods (ARIMA, SARIMAX, Exponential Smoothing, LSTM) using scikit-learn. It requires a DataFrame `comparison_df` with actual values ('close') and prediction columns. The NaN values in prediction columns are dropped for fair error calculation.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/currencyExchangeRateForecasting.ipynb#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Calculate errors for each prediction method\nmetrics = {}\n\n# Define a function to calculate metrics\ndef calculate_metrics(actual, predicted):\n    mae = mean_absolute_error(actual, predicted)\n    mse = mean_squared_error(actual, predicted)\n    rmse = mse ** 0.5\n    mape = np.mean(np.abs((actual - predicted) / actual)) * 100\n    return mae, mse, rmse, mape\n\n# Get actual values\nactual_values = comparison_df['close'].values\n\n# Dropping rows where any of the predictions are NaN for cleaning\ncomparison_df_clean = comparison_df.dropna(subset=['arima_predictions', 'sarimax_predictions', 'exp_smooth_predictions', 'lstm_predictions'])\n\n# Get the cleaned actual and predicted values\nactual_values_clean = comparison_df_clean['close'].values\narima_predictions_clean = comparison_df_clean['arima_predictions'].values\nsarimax_predictions_clean = comparison_df_clean['sarimax_predictions'].values\nexp_smooth_predictions_clean = comparison_df_clean['exp_smooth_predictions'].values\nlstm_predictions_clean = comparison_df_clean['lstm_predictions'].values\n\n# Calculate metrics for each prediction method\nmetrics['ARIMA'] = calculate_metrics(actual_values_clean, arima_predictions_clean)\nmetrics['SARIMAX'] = calculate_metrics(actual_values_clean, sarimax_predictions_clean)\nmetrics['Exponential Smoothing'] = calculate_metrics(actual_values_clean, exp_smooth_predictions_clean)\nmetrics['LSTM'] = calculate_metrics(actual_values_clean, lstm_predictions_clean)\n\n# Create a summary DataFrame\nmetrics_df = pd.DataFrame(metrics, index=['MAE', 'MSE', 'RMSE', 'MAPE']).T\nmetrics_df.columns = ['Mean Absolute Error', 'Mean Squared Error', 'Root Mean Squared Error', 'Mean Absolute Percentage Error']\n\nplt.figure(figsize=(10, 6))\n\n# Create a heatmap\nsns.heatmap(metrics_df, annot=True, fmt='.6f', linewidths=0.1, vmax=1.0, vmin=-1.0, cbar=True, cmap=plt.cm.RdBu_r, linecolor='white')\n\n# Adding titles and labels\nplt.title('Model Performance Comparison')\nplt.xlabel('Metrics')\nplt.ylabel('Models')\n\n# Show the plot\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Parameters in Widget\nDESCRIPTION: This code snippet demonstrates how to use function arguments as widget parameters in a FastAPI endpoint. It shows examples of optional string parameters, literal type parameters for choices, and boolean parameters.  The docstring is used for the widget description. The typing module and Literal are used for type hinting the choices\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Literal, Optional\n\n@app.get(\"/hello\")\nasync def hello(param1: Optional[str] = None, param2: Literal[\"Choice 1\", \"Choice 2\"] = None, param3: bool = False) -> str:\n    \"\"\"Widget Description Generated By Docstring\"\"\"\n    if not param1 and not param2 and not param3:\n        return \"Enter a parameter or make a choice!\"\n    if param3:\n        return f\"Param3 enabled!\"\n    if param2:\n        return f\"You selected: {param2}\"\n    if param1:\n        return f\"You entered: {param1}\"\n\n    return \"Nothing to return!\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Model Predictions\nDESCRIPTION: Creates a comparison DataFrame that includes the actual test data along with the predictions from each of the trained models (ARIMA, SARIMAX, Exponential Smoothing, and LSTM). The LSTM predictions are aligned with the test data by offsetting them by 60 periods due to the sequence length used in the model.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/currencyExchangeRateForecasting.ipynb#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ncomparison_df = test_data.reset_index()\ncomparison_df['arima_predictions'] = arima_predictions.reset_index(drop=True)\ncomparison_df['sarimax_predictions'] = sarimax_predictions.reset_index(drop=True)\ncomparison_df['exp_smooth_predictions'] = exp_smooth_predictions.reset_index(drop=True)\ncomparison_df['lstm_predictions'] = np.nan\ncomparison_df.loc[60:, 'lstm_predictions'] = lstm_predictions.flatten()\ncomparison_df.sample(10)\n```\n\n----------------------------------------\n\nTITLE: Searching ETFs on FMP\nDESCRIPTION: This snippet demonstrates searching ETFs using the FMP provider. The `obb.etf.search()` method is called with the provider set to \"fmp\" and a search term.  The `to_df()` converts the result to a Pandas DataFrame and `iloc[:5]` shows the first 5 rows.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/findSymbols.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nobb.etf.search(\"covered call\", provider=\"fmp\").to_df().iloc[:5]\n```\n\n----------------------------------------\n\nTITLE: LSTM Model Training and Prediction\nDESCRIPTION: Trains an LSTM (Long Short-Term Memory) model on the training data and makes predictions on the test data. This involves scaling the data, creating sequences, building the LSTM model, training the model, and inverse scaling the predictions to get the actual values.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/currencyExchangeRateForecasting.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n%%time\n# Step 1: Data Preparation\n\n# Scale the close prices of train_data and test_data (Series)\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaled_train_data = scaler.fit_transform(train_data.values.reshape(-1, 1))\nscaled_test_data = scaler.transform(test_data.values.reshape(-1, 1))\n\n# Creating dataset for LSTM from train_data\nX_train, y_train = [], []\nfor i in range(60, len(scaled_train_data)):\n    X_train.append(scaled_train_data[i-60:i, 0])  # Previous 60 days\n    y_train.append(scaled_train_data[i, 0])  # Current day\nX_train, y_train = np.array(X_train), np.array(y_train)\n\n# Reshaping for LSTM\nX_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)\n\n# Step 2: Build and Compile LSTM Model\nmodel = Sequential()\nmodel.add(LSTM(50, return_sequences=True, input_shape=(X_train.shape[1], 1)))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(50, return_sequences=False))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n# Step 3: Train the Model on the training data\nmodel.fit(X_train, y_train, epochs=25, batch_size=32, verbose=1)\n\n# Step 4: Preparing the test_data for making predictions\n\n# Creating the test data sequences (just like we did for train_data)\nX_test = []\nfor i in range(60, len(scaled_test_data)):\n    X_test.append(scaled_test_data[i-60:i, 0])  # Previous 60 days\nX_test = np.array(X_test)\n\n# Reshaping for LSTM\nX_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)\n\n# Step 5: Make Predictions on test_data\nlstm_predictions = model.predict(X_test)\n\n# Inverse scaling to get actual values for predictions\nlstm_predictions = scaler.inverse_transform(lstm_predictions)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB WSJ Extension via pip\nDESCRIPTION: This command installs the OpenBB Wall St Journal provider extension using pip. It allows the OpenBB platform to access data from the WSJ (Wall Street Journal).  It requires pip to be installed and configured correctly.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/wsj/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-wsj\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Platform CLI via pip\nDESCRIPTION: This code snippet demonstrates how to install the OpenBB Platform CLI using pip.  The CLI provides command-line access to the OpenBB Platform. It requires Python and pip to be installed.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-cli\n```\n\n----------------------------------------\n\nTITLE: Calculating Implied Move from Straddle Data\nDESCRIPTION: This code snippet calculates the implied move of a stock based on the straddle price. It retrieves straddle data for a specified expiration date, extracts the cost of the straddle, days to expiration, upper and lower breakeven prices. Finally calculates and displays implied daily move as a percentage. It also displays the straddle data.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/impliedEarningsMove.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Use the straddle method of the results object to get the straddle data and then calculate the implied move.\n\nstraddle = options.results.straddle(days=options.results.expirations[1])\nstraddle_price = straddle.loc[\"Cost\"].values[0]\ndays = straddle.loc[\"DTE\"].values[0]\nupper_price = straddle.loc[\"Breakeven Upper\"].values[0]\nlower_price = straddle.loc[\"Breakeven Lower\"].values[0]\n\nimplied_move = ((1 + straddle_price / last_price) ** (1 / days) - 1) * 100\n\ndisplay(\n    f\"Cost of Straddle: ${round(straddle_price, 2)}\"\n    f\"\\nCost as a % of Share Price: {round((straddle_price/last_price) * 100, 4)}%\"\n    f\"\\nUpper Breakeven Price: ${upper_price}\"\n    f\"\\nLower Breakeven Price: ${lower_price}\"\n    f\"\\nImplied Daily Move: {round(implied_move, 4)}%\\n\"\n)\n\ndisplay(straddle)\n```\n\n----------------------------------------\n\nTITLE: Sector Rotation Strategy Implementation\nDESCRIPTION: Defines a function `sector_rotation_strategy` that implements a sector rotation strategy based on past performance. It resamples the ETF data to monthly frequency, calculates monthly returns, and selects the top performing ETFs over a lookback period. Portfolio returns are computed based on these top ETFs. The function takes ETF data, lookback period and the number of top ETFs to invest in as parameters.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/sectorRotationStrategy.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef sector_rotation_strategy(etf_data, lookback_period=3, top_n=3):\n    \"\"\"\n    Implements a simple sector rotation strategy that invests in the top 'n' sector ETFs based on\n    past performance over a lookback period.\n\n    Parameters:\n    etf_data (DataFrame): ETF performance data\n    lookback_period (int): Number of months to look back for performance evaluation\n    top_n (int): Number of top sector ETFs to invest in\n\n    Returns:\n    DataFrame: Portfolio returns based on the sector rotation strategy\n    \"\"\"\n    monthly_returns = etf_data.resample('ME').last().pct_change()\n\n    portfolio_returns = pd.DataFrame(index=monthly_returns.index, columns=['Portfolio Return'])\n\n    for date in monthly_returns.index[lookback_period:]:\n        past_returns = monthly_returns.loc[date - pd.DateOffset(months=lookback_period):date].mean()\n        top_etfs = past_returns.nlargest(top_n).index\n\n        next_month_date = date + pd.DateOffset(months=1)\n\n        if next_month_date in monthly_returns.index:\n            next_month_return = monthly_returns.loc[next_month_date, top_etfs].mean()\n            portfolio_returns.loc[next_month_date, 'Portfolio Return'] = next_month_return\n\n    return portfolio_returns\n\nportfolio_returns = sector_rotation_strategy(pivoted_data, lookback_period=3, top_n=3)\nportfolio_returns.dropna(inplace=True)\n\nportfolio_returns.head()\n```\n\n----------------------------------------\n\nTITLE: Fetch and Display Quick Ratio\nDESCRIPTION: This code fetches financial ratios for 'TGT' from FMP using `obb.equity.fundamental.ratios()` and displays the current and median quick ratios. The retrieved ratios are limited to 50 periods.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/financialStatements.ipynb#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nratios = obb.equity.fundamental.ratios(\"TGT\", limit=50, provider=\"fmp\").to_df()\n\ndisplay(f\"Current Quick Ratio: {round(ratios['quick_ratio'].iloc[-1], 4)}\")\ndisplay(f\"Median Quick Ratio: {round(ratios['quick_ratio'].median(), 4)}\")\n```\n\n----------------------------------------\n\nTITLE: Calculate Market Cap Change\nDESCRIPTION: This code calculates the percentage change in market capitalization of 'TGT' between '2023-09-30' and '2022-12-31', using the data fetched from Intrinio. The indexes are converted to string before accessing the data.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/financialStatements.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmarketcap.index = marketcap.index.astype(str)\n(\n    (marketcap.loc[\"2023-09-30\"].value - marketcap.loc[\"2022-12-31\"].value)\n    / marketcap.loc[\"2022-12-31\"].value\n)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB\nDESCRIPTION: This command installs the OpenBB package using pip. The -q flag enables quiet mode, reducing the verbosity of the installation process.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/BacktestingMomentumTrading.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install openbb -q\n```\n\n----------------------------------------\n\nTITLE: Calculating the covariance matrix\nDESCRIPTION: This code snippet calculates the covariance matrix of the crypto assets using the Ledoit-Wolf shrinkage method. This method improves the estimation of the covariance matrix, especially when dealing with high-dimensional data relative to the number of observations. The `CovarianceShrinkage` class from PyPortfolioOpt is used to compute the shrunk covariance matrix.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/portfolioOptimizationUsingModernPortfolioTheory.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Covariance matrix of crypto assets using the Ledoit-Wolf shrinkage method.\ncovariance = CovarianceShrinkage(prices).ledoit_wolf()\ncovariance\n```\n\n----------------------------------------\n\nTITLE: Importing Modules for Form Submission Widget\nDESCRIPTION: This code imports the necessary modules for creating a form submission widget. It includes `uuid`, `date`, `Literal`, `Union`, `FormData`, `Data`, `ConfigDict`, and `Field` from various libraries. These components are used to define the form's input model and the submission record model.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\nfrom datetime import date as dateType\nfrom typing import Literal, Union\n\n# from fastapi import FastAPI\nfrom openbb_platform_api.query_models import FormData\nfrom openbb_platform_api.response_models import Data\nfrom pydantic import ConfigDict, Field\n\n# app = FastAPI()\n```\n\n----------------------------------------\n\nTITLE: Fetch Historical Futures Data (OpenBB, Pandas)\nDESCRIPTION: This snippet retrieves historical weekly data for gold (GC=F) and copper (HG=F) futures contracts from the CME using the `openbb-yfinance` data extension via the `obb.derivatives.futures.historical` function. The data is then converted to a Pandas DataFrame, pivoted to have gold and copper prices as separate columns, and the index is converted to datetime objects.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/copperToGoldRatio.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata = pd.DataFrame()\ncols_dict = {\"GC=F\": \"Gold\", \"HG=F\": \"Copper\"}\ndata = (\n    obb.derivatives.futures.historical(\n        [\"GC\", \"HG\"],\n        start_date=\"2000-01-01\",\n        end_date=\"2024-08-19\",\n        interval=\"1W\",\n    )\n    .to_df()\n    .pivot(columns=\"symbol\", values=\"close\")\n)\ndata.columns = [cols_dict[symbol] for symbol in data.columns]\ndata.index = pd.to_datetime(data.index)\n```\n\n----------------------------------------\n\nTITLE: Selecting and formatting close price data\nDESCRIPTION: This code snippet selects the 'close' price and 'symbol' from the fetched OHLC data, sets the 'symbol' as the second index level, unstacks the 'symbol' to create separate columns for each crypto, and flattens the column headers to create a clean DataFrame of close prices.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/portfolioOptimizationUsingModernPortfolioTheory.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclose_symbol= ohlc_data[['close', 'symbol']]\n\n# Setting the symbol as the second index level\nclose_symbol = close_symbol.set_index('symbol', append= True)\n\n# Unstack 'symbol' to make each unique symbol a separate column\nclose_symbol_unstacked= close_symbol.unstack(level='symbol')\n\n# Flatten the column headers\nclose_symbol_unstacked.columns = close_symbol_unstacked.columns.get_level_values(1)\n\nprices= close_symbol_unstacked\n\nprices\n```\n\n----------------------------------------\n\nTITLE: Create Interactive Data Selection Widget (Python)\nDESCRIPTION: Creates an interactive dropdown widget using `ipywidgets` to allow the user to select a specific data column for visualization. The widget dynamically updates a bar chart based on the selected column from the data. It initializes dropdown options from column names, sets up event handling, and displays the widget.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/googleColab.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Create a widget for selecting the data to display.\n\nclear_output(wait = False)\n\ndata_choices = data.columns.tolist()\ndata_selection = widgets.Dropdown(\n    options = data_choices,\n    value = None,\n)\noutput = widgets.Output()\n\n\ndef generate_figure(data, data_choice):\n    data = data[data[data_choice].notnull()]\n    fig = go.Figure()\n    fig.add_bar(\n        y = data[data_choice][data[data_choice] > 0].values,\n        x = data[data_choice][data[data_choice] > 0].index,\n        name = data_choice,\n        marker = dict(color = \"blue\"),\n    )\n    fig.add_bar(\n        y = data[data_choice][data[data_choice] < 0].values,\n        x = data[data_choice][data[data_choice] < 0].index,\n        name = data_choice,\n        marker = dict(color = \"red\")\n    )\n    fig.update_xaxes(type=\"category\")\n    fig.update_traces(width=0.98, selector=dict(type=\"bar\"))\n    fig.update_layout(\n        showlegend=False,\n        width=1400,\n        height=600,\n        title = dict(\n            text=f\"{symbol} {data_choice.replace('_', ' ').title()}\",\n            xanchor = \"center\",\n            x = 0.5,\n            font = dict(size = 20)\n        ),\n        barmode=\"overlay\",\n        bargap=0,\n        bargroupgap=0,\n        yaxis=dict(\n            ticklen=0,\n            showgrid=True,\n            tickfont=dict(size=14),\n        ),\n        xaxis=dict(\n            showgrid=False,\n            autorange=True,\n            tickangle=90,\n            tickfont=dict(size=11),\n        ),\n    )\n    return fig\n\ndef on_value_change(change):\n    clear_output(wait = True)\n    display(data_selection)\n    with output:\n        data_selection.value\n\ndata_selection.observe(on_value_change, names=\"value\")\ndisplay(data_selection)\n\n# Select from the drop-down menu below.\n```\n\n----------------------------------------\n\nTITLE: Install OpenBB IMF Provider\nDESCRIPTION: This command installs the openbb-imf provider extension using pip.  It allows the OpenBB platform to access data from the International Monetary Fund (IMF). Requires pip to be installed.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/imf/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install openbb-imf\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenBB CLI\nDESCRIPTION: This command deploys the OpenBB Platform CLI after installation, allowing users to interact with the platform. It assumes that the installation via pip was successful.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/cli/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenbb\n```\n\n----------------------------------------\n\nTITLE: Evaluating Strategy Performance\nDESCRIPTION: Calculates and prints the final cumulative returns for both the sector rotation strategy and the market average. It also computes and prints the Sharpe Ratio of the sector rotation strategy using the daily returns of the strategy.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/sectorRotationStrategy.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfinal_strategy_return = portfolio_returns['Cumulative Return'].iloc[-1]\n\nfinal_market_return = market_cumulative_return.iloc[-1]\n\nprint(f\"Final cumulative return of sector rotation strategy: {final_strategy_return:.2f}\")\nprint(f\"Final cumulative return of market average: {final_market_return:.2f}\")\n\nstrategy_daily_returns = portfolio_returns['Portfolio Return'].dropna()\nsharpe_ratio = (strategy_daily_returns.mean() / strategy_daily_returns.std()) * np.sqrt(12)\nprint(f\"Sharpe Ratio of the sector rotation strategy: {sharpe_ratio:.2f}\")\n```\n\n----------------------------------------\n\nTITLE: ARIMA Model Training and Prediction\nDESCRIPTION: Trains an ARIMA model on the training data using `pm.auto_arima` for automatic parameter selection and makes predictions on the test data. The model summary is also printed to show the model's characteristics.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/currencyExchangeRateForecasting.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n%%time\nauto_arima_model = pm.auto_arima(train_data, seasonal=False, stepwise=True, suppress_warnings=True)\narima_predictions = auto_arima_model.predict(n_periods=len(test_data))\nprint(auto_arima_model.summary())\n```\n\n----------------------------------------\n\nTITLE: Searching Equities on Nasdaq\nDESCRIPTION: This snippet demonstrates how to search for equities on the Nasdaq exchange using a text query. It uses the `obb.equity.search()` method with the provider set to \"nasdaq\". The `to_df()` method is used to convert the results to a Pandas DataFrame, and `head(3)` displays the first 3 rows.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/findSymbols.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nobb.equity.search(\"JPMorgan\", provider=\"nasdaq\").to_df().head(3)\n```\n\n----------------------------------------\n\nTITLE: Calculating optimized portfolio weights\nDESCRIPTION: This code snippet extracts the weights of the portfolio with the maximum Sharpe ratio, rounds them to four decimal places, and organizes them into a Pandas DataFrame for easier interpretation. This DataFrame shows the percentage allocation to each asset in the optimized portfolio.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/portfolioOptimizationUsingModernPortfolioTheory.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\noptimized_weight=np.array(list(cla.max_sharpe().values()))\noptimized_weight= np.round(optimized_weight, 4)\n\npie_df=pd.DataFrame(optimized_weight*100, index=prices.columns, columns=['weights'])\npie_df= pie_df.sort_values(by=['weights'], ascending=False)\npie_df\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB EIA Provider Extension using PyPI\nDESCRIPTION: This snippet shows how to install the OpenBB EIA provider extension using pip, the Python package installer. This is the simplest way to install the extension.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/eia/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install openbb-us-eia\n```\n\n----------------------------------------\n\nTITLE: Fetching ETF Historical Data\nDESCRIPTION: Retrieves historical data for a list of sector ETFs from the yfinance provider using the OpenBB SDK. It loops through the list of ETF symbols, fetches the data, adds a 'Symbol' column to each dataframe, and appends it to a list.  Error handling is included to catch potential issues during data retrieval.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/sectorRotationStrategy.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsector_etfs = ['XLF', 'XLE', 'XLK', 'XLY', 'XLI', 'XLU', 'XLV']\n\nstart_date = '2015-01-01'\netf_dataframes = []\n\nfor etf in sector_etfs:\n    try:\n        data = obb.etf.historical(\n            symbol=etf,\n            start_date=start_date,\n            provider=\"yfinance\"\n        ).to_df()\n        data['Symbol'] = etf\n        etf_dataframes.append(data)\n    except Exception as e:\n        print(f\"Failed to fetch data for {etf}: {str(e)}\")\n\ncombined_etf_data = pd.concat(etf_dataframes)\ncombined_etf_data = combined_etf_data.reset_index()\n\ncombined_etf_data.head()\n```\n\n----------------------------------------\n\nTITLE: Import Libraries for OpenBB and Data Analysis (Python)\nDESCRIPTION: Imports necessary Python libraries for data analysis and visualization using OpenBB Platform, pandas, plotly, and ipywidgets. Includes type hinting with `typing.Literal` and display utilities from `IPython.display`. Pandas-ta is for technical analysis functions.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/googleColab.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Literal\nfrom IPython.display import display\nfrom IPython.display import clear_output\nimport ipywidgets as widgets\nimport pandas as pd\nimport pandas_ta as ta\nfrom datetime import datetime\nfrom plotly import graph_objects as go\n\nfrom openbb import obb\n```\n\n----------------------------------------\n\nTITLE: Visualizing Backtest Results\nDESCRIPTION: The `visualize_backtest` function creates a plot comparing the cumulative returns of the momentum strategy against a buy-and-hold strategy for a given stock symbol. The plot includes labels, titles, and legends to enhance readability and facilitate performance comparison.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/BacktestingMomentumTrading.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef visualize_backtest(data, symbol):\n    plt.figure(figsize=(12, 7))\n\n    plt.plot(data['date'], data['Cumulative Market Return'], label='Market Return (Buy & Hold)', color='blue')\n    plt.plot(data['date'], data['Cumulative Strategy Return'], label='Momentum Strategy Return', color='green')\n\n    plt.title(f'{symbol} Backtest: Momentum Strategy vs Buy & Hold', fontsize=16, fontweight='bold')\n    plt.xlabel('Date', fontsize=12)\n    plt.ylabel('Cumulative Return', fontsize=12)\n    plt.xticks(rotation=45)\n\n    plt.legend()\n    plt.show()\n```\n\n----------------------------------------\n\nTITLE: Fetch Balance Sheet Data from Multiple Providers\nDESCRIPTION: This code fetches balance sheet data for 'TGT' (Target Corporation) from multiple providers (yfinance, fmp, intrinio, polygon) using the `obb.equity.fundamental.balance()` function.  It then retrieves the 'total_assets' field, limits the results to the top 3, and combines them into a single pandas DataFrame.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/financialStatements.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame()\n\ndf[\"yfinance\"] = (\n    obb.equity.fundamental.balance(\n        \"TGT\", provider=\"yfinance\"\n    )  # There is no limit for yFinance, historical data is limited.\n    .to_df()\n    .get(\"total_assets\")\n    .head(3)\n)\n\ndf[\"fmp\"] = (\n    obb.equity.fundamental.balance(\"TGT\", provider=\"fmp\", limit=3)\n    .to_df()\n    .get(\"total_assets\")\n)\n\ndf[\"intrinio\"] = (\n    obb.equity.fundamental.balance(\"TGT\", provider=\"intrinio\", limit=3)\n    .to_df()\n    .get(\"total_assets\")\n)\n\ndf[\"polygon\"] = (\n    obb.equity.fundamental.balance(\"TGT\", provider=\"polygon\", limit=3)\n    .to_df()\n    .get(\"total_assets\")\n)\n\ndf\n```\n\n----------------------------------------\n\nTITLE: Access Field Alias Dictionary\nDESCRIPTION: This code accesses the alias dictionary within the BenzingaWorldNewsData model.  This dictionary maps provider-specific field names to standard field names. Requires the `BenzingaWorldNewsData` class to be imported.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/platform_standardization.ipynb#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nBenzingaWorldNewsData.__alias_dict__\n```\n\n----------------------------------------\n\nTITLE: Launching OpenBB Platform API\nDESCRIPTION: This command launches the OpenBB Platform API.  It starts a FastAPI instance, via `uvicorn`, at `http://127.0.0.1:6900`. Uvicorn can be configured by adding keyword arguments.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nopenbb-api\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Regulators Extension\nDESCRIPTION: This code snippet shows the command to install the OpenBB Regulators extension using pip.  It ensures that the extension is properly installed and available for use within the OpenBB platform. The user should execute this in the appropriate directory for the OpenBB project.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/regulators/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-regulators\n```\n\n----------------------------------------\n\nTITLE: Import Statements for Data Providers - Python\nDESCRIPTION: These import statements are necessary when building data providers and fetchers. They include imports for the `Data`, `QueryParams`, `Fetcher`, `OBBject`, and `Router` classes from the `openbb_core` and `openbb_app` modules.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# The `Data` class\nfrom openbb_core.provider.abstract.data import Data\n\n# The `QueryParams` class\nfrom openbb_core.provider.abstract.query_params import QueryParams\n\n# The `Fetcher` class\nfrom openbb_core.provider.abstract.fetcher import Fetcher\n\n# The `OBBject` class\nfrom openbb_core.app.model.obbject import OBBject\n\n# The `Router` class\nfrom openbb_core.app.router import Router\n```\n\n----------------------------------------\n\nTITLE: Plotting Time Series with TA Indicators\nDESCRIPTION: This code demonstrates how to plot a time series with technical analysis (TA) indicators using the `to_chart` method.  It retrieves historical price data for AAPL and passes a dictionary of indicators to the `to_chart` method. This requires understanding of the `OpenBBFigure` and `PlotlyTA` classes.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb import obb\nres = obb.equity.price.historical(\"AAPL\")\n\nindicators = dict(\n    sma=dict(length=[20,30,50]),\n    adx=dict(length=14),\n    rsi=dict(length=14),\n    macd=dict(fast=12, slow=26, signal=9),\n    bbands=dict(length=20, std=2),\n    stoch=dict(length=14),\n    ema=dict(length=[20,30,50]),\n)\nres.charting.to_chart(**{\"indicators\": indicators})\n```\n\n----------------------------------------\n\nTITLE: SARIMAX Model Training and Prediction\nDESCRIPTION: Trains a SARIMAX model on the training data with specified orders and makes predictions on the test data. The `enforce_stationarity` and `enforce_invertibility` parameters are set to False for flexibility.  Seasonal order parameters require tuning.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/currencyExchangeRateForecasting.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n%%time\nsarimax_model = SARIMAX(train_data,\n                       order=(5, 1, 0),  # non-seasonal order\n                       seasonal_order=(1, 1, 1, 12),  # seasonal order: parameters tuning is required\n                       enforce_stationarity=False,\n                       enforce_invertibility=False)\n\nsarimax_fit = sarimax_model.fit(disp=False)\nsarimax_predictions = sarimax_fit.forecast(steps=len(test_data))\n```\n\n----------------------------------------\n\nTITLE: Displaying a pie chart of portfolio weights\nDESCRIPTION: This code snippet filters out assets with zero weight and displays a pie chart showing the allocation of weights in the optimized portfolio.  The pie chart visually represents the proportion of each asset in the portfolio.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/portfolioOptimizationUsingModernPortfolioTheory.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npie_df= pie_df.query('weights != 0.000000')\n\nfig, ax = plt.subplots()\nax.pie(pie_df.weights, labels=pie_df.index.values.tolist(), autopct='%1.1f%%', radius=2)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB FINRA Extension with pip\nDESCRIPTION: This command installs the openbb-finra package using pip, allowing access to FINRA data through the OpenBB Platform. It requires pip to be installed and configured in the system's PATH. After successful installation, the FINRA provider is available within the OpenBB Platform.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/finra/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-finra\n```\n\n----------------------------------------\n\nTITLE: Access OpenBB Instance\nDESCRIPTION: This snippet accesses the main OpenBB instance. It allows for interaction with the core functionalities of the platform. It assumes that the OpenBB platform has already been imported.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/platform_standardization.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nobb\n```\n\n----------------------------------------\n\nTITLE: Searching Institutions on SEC\nDESCRIPTION: This snippet demonstrates how to search for institutions, such as investment trusts and insurance companies, using the SEC regulator endpoint. It searches for \"Berkshire Hathaway\" and converts the results to a Pandas DataFrame.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/findSymbols.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ninstututions = obb.regulators.sec.institutions_search(\"Berkshire Hathaway\").to_df()\ninstututions\n```\n\n----------------------------------------\n\nTITLE: Normalize Time Series Data\nDESCRIPTION: Defines several functions to normalize time series data (absolute maximum scale, min-max scaling, z-score standardization) and then applies one of these methods (min-max scaling) to both the USD Liquidity Index and S&P 500 index.  It also shows how to parameterize the scaling method to easily switch between techniques.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/usdLiquidityIndex.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ny_axis = liquidity_index[[\"USD Liquidity Index\", \"SP500\"]]\n\n\ndef absolute_maximum_scale(series):\n    return series / series.abs().max()\n\n\ndef min_max_scaling(series):\n    return (series - series.min()) / (series.max() - series.min())\n\n\ndef z_score_standardization(series):\n    return (series - series.mean()) / series.std()\n\n\nmethods = {\n    \"z\": z_score_standardization,\n    \"m\": min_max_scaling,\n    \"a\": absolute_maximum_scale,\n}\n\n\ndef normalize(data: DataFrame, method: str = \"z\") -> DataFrame:\n    for col in data.columns:\n        data.loc[:, col] = methods[f\"{method}\"](data.loc[:, col])\n\n    return data\n\n\nnormalized = normalize(y_axis, method=\"m\")\n\nnormalized.tail(3)\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Prices for BRK-B with FMP\nDESCRIPTION: This snippet retrieves historical price data for Berkshire Hathaway Class B shares ('BRK-B') using the 'fmp' provider via the OpenBB Platform.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/loadHistoricalPriceData.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nobb.equity.price.historical(\"brk-b\", provider=\"fmp\")\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Setting Output Type\nDESCRIPTION: This code snippet imports necessary libraries and sets the output type preference in OpenBB to 'dataframe'. It imports `datetime` and `timedelta` from the `datetime` module and imports the `obb` object from the `openbb` package.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/impliedEarningsMove.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timedelta\n\nfrom openbb import obb\n\nobb.user.preferences.output_type = \"dataframe\"\n```\n\n----------------------------------------\n\nTITLE: Import Statements for OpenBB Platform\nDESCRIPTION: This snippet imports necessary libraries for interacting with the OpenBB Platform, including datetime for handling dates, pandas for data manipulation, and the obb object which serves as the main interface to the OpenBB SDK.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/loadHistoricalPriceData.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timedelta\n\nimport pandas as pd\nfrom openbb import obb\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Polygon Provider\nDESCRIPTION: This command installs the OpenBB Polygon Provider extension using pip.  It allows the OpenBB Platform to access data from Polygon.io. Ensure pip is installed and configured correctly before running this command.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/polygon/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-polygon\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Plotly Chart Endpoint\nDESCRIPTION: This code defines a FastAPI endpoint `/hello_chart` that returns a custom Plotly chart. It sets the widget type to \"chart\" using `openapi_extra` and returns the JSON representation of the Plotly figure generated using `Figure.to_plotly_json()`.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\n    \"/hello_chart\",\n    openapi_extra={\"widget_config\": {\"type\": \"chart\"}},\n)\nasync def hello_chart() -> dict:\n    \"\"\"Widget description created by docstring.\"\"\"\n    from plotly.graph_objs import Bar, Layout, Figure\n\n    fig = Figure(\n        data=[Bar(x=[\"A\", \"B\", \"C\"], y=[1, 2, 3])],\n        layout=Layout(title=\"Hello Chart!\"),\n    )\n\n    return fig.to_plotly_json()\n```\n\n----------------------------------------\n\nTITLE: Filter Options Data by Expiration or Strike (Python)\nDESCRIPTION: Defines a function `filter_options_data` to aggregate options data by either expiration date or strike price. Calculates total, call, and put open interest and volume. Takes an options data DataFrame and a `by` parameter ('expiration' or 'strike') as input and returns a new DataFrame with the aggregated data.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/googleColab.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef filter_options_data(options, by: Literal[\"expiration\", \"strike\"] = \"expiration\"):\n    data = pd.DataFrame()\n    data[\"Total Open Interest\"] = options.groupby(by)[\"open_interest\"].sum()\n    data[\"Call Open Interest\"] = options[options[\"option_type\"] == \"call\"].groupby(by)[\"open_interest\"].sum()\n    data[\"Put Open Interest\"] = options[options[\"option_type\"] == \"put\"].groupby(by)[\"open_interest\"].sum()\n    data[\"Total Volume\"] = options.groupby(by)[\"volume\"].sum()\n    data[\"Call Volume\"] = options[options[\"option_type\"] == \"call\"].groupby(by)[\"volume\"].sum()\n    data[\"Put Volume\"] = options[options[\"option_type\"] == \"put\"].groupby(by)[\"volume\"].sum()\n\n    return data\n\ndata = filter_options_data(options, \"strike\")\n\ndata\n```\n\n----------------------------------------\n\nTITLE: Index Price Historical Signature - Python\nDESCRIPTION: This code shows the signature of the `obb.index.price.historical` function, highlighting the `chart` parameter. The parameter enables chart generation for the historical index price data.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/index.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nobb.index.price.historical(\n    symbol: Annotated[Union[str, List[str]], OpenBBCustomParameter(description='Symbol to get data for. Multiple comma separated items allowed for provider(s): cboe, fmp, intrinio, polygon, yfinance.')],\n    ...\n    chart: typing.Annotated[bool, OpenBBCustomParameter(description='Whether to create a chart or not, by default False.')] = False,\n    **kwargs,\n) -> openbb_core.app.model.obbject.OBBject\n```\n\n----------------------------------------\n\nTITLE: Getting Available Indices on YFinance\nDESCRIPTION: This snippet retrieves the available indices from yfinance and filters the list to only show those which contain the name \"ASX 200\". It prints the length of the indices.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/findSymbols.ipynb#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nindices = obb.index.available(provider=\"yfinance\").to_df()\nprint(len(indices))\n\nindices[indices[\"name\"].str.contains(\"ASX 200\")]\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Alpha Vantage Provider with pip\nDESCRIPTION: This code snippet demonstrates how to install the OpenBB Alpha Vantage provider using pip.  It uses the `pip install` command followed by the package name. This installs the package and its dependencies.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/alpha_vantage/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-alpha-vantage\n```\n\n----------------------------------------\n\nTITLE: Display Interactive Chart Based on Selection (Python)\nDESCRIPTION: Displays the interactive bar chart generated using Plotly based on the user's selection from the dropdown menu. The code checks if a value has been selected and then calls the `generate_figure` function with the data and selected column to create and display the chart.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/googleColab.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Play this cell to display the choice\n\nif data_selection.value is not None:\n\n    generate_figure(data, data_selection.value).show()\n```\n\n----------------------------------------\n\nTITLE: Logging into OpenBB Hub\nDESCRIPTION: Logs into the OpenBB Hub using a personal access token (PAT).  After logging in, the user settings are saved to persist changes.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from openbb import obb\n>>> openbb.account.login(pat=\"OPENBB_PAT\")\n\n>>> # Persist changes in OpenBB Hub\n>>> obb.account.save()\n```\n\n----------------------------------------\n\nTITLE: Displaying Data in an Interactive Table - Python\nDESCRIPTION: This code retrieves stock quote data for multiple symbols using OpenBB and displays it in an interactive table using the `charting.table()` method.  It shows how to directly use the data returned from an OpenBB command to create a table.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/index.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndata = obb.equity.price.quote(\"AAPL,MSFT,GOOGL,META,TSLA,AMZN\", provider=\"yfinance\")\ndata.charting.table()\n```\n\n----------------------------------------\n\nTITLE: Date Validation with Pydantic Field Validator\nDESCRIPTION: This shows an example of a Pydantic field validator used for validating the date field. It parses the date string into a datetime object. Requires the datetime module.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/platform_standardization.ipynb#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@field_validator(\"date\")\ndef date_validate(cls, v):\n    \"\"\"Return the date as a datetime object.\"\"\"\n    return datetime.strptime(v, \"%a, %d %b %Y %H:%M:%S %z\")\n```\n\n----------------------------------------\n\nTITLE: Screening Equities by Metric on Finviz\nDESCRIPTION: This snippet demonstrates how to use Finviz screener presets through the openbb-finviz provider extension.  It screens for top gainers with mid-over market cap using the overview metric.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/findSymbols.ipynb#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nobb.equity.screener(\n    metric=\"overview\", signal=\"top_gainers\", provider=\"finviz\", mktcap=\"mid_over\"\n).to_df()\n```\n\n----------------------------------------\n\nTITLE: Comparing Volume Data Across Providers\nDESCRIPTION: This snippet fetches daily historical price data for 'SPY' from multiple providers (yfinance, alpha_vantage, intrinio, fmp, polygon) using the OpenBB Platform. It then creates a pandas DataFrame to compare the volume data from each provider, displaying the last 10 rows of volume from each source, and dropping any rows with NaN values.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/loadHistoricalPriceData.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Collect the data\n\nyahoo = obb.equity.price.historical(\"spy\", provider=\"yfinance\").to_df()\nalphavantage = obb.equity.price.historical(\"spy\", provider=\"alpha_vantage\").to_df()\nintrinio = obb.equity.price.historical(\"spy\", provider=\"intrinio\").to_df()\nfmp = obb.equity.price.historical(\"spy\", provider=\"fmp\").to_df()\npolygon = obb.equity.price.historical(\"spy\", provider=\"polygon\").to_df()\n\n# Make a new DataFrame with just the volume columns\ncompare = pd.DataFrame()\ncompare[\"AV Volume\"] = alphavantage[\"volume\"].tail(10)\ncompare[\"FMP Volume\"] = fmp[\"volume\"].tail(10)\ncompare[\"Intrinio Volume\"] = intrinio[\"volume\"].tail(10)\ncompare[\"Yahoo Volume\"] = yahoo[\"volume\"].tail(10)\ncompare[\"Polygon Volume\"] = polygon[\"volume\"].tail(10)\n\ncompare.dropna(how=\"any\")\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Crypto Extension using pip\nDESCRIPTION: This code snippet demonstrates how to install the `openbb-crypto` extension using the pip package manager.  It is assumed that pip is installed and configured on the system. Executing this command installs the crypto data retrieval commands for the OpenBB Platform.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/crypto/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-crypto\n```\n\n----------------------------------------\n\nTITLE: Fetch Dividends Data\nDESCRIPTION: This snippet retrieves dividends data for 'TGT' from FMP using `obb.equity.fundamental.dividends()` and filters the data between '2023-08-15' and '2022-11-15'.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/financialStatements.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndata = obb.equity.fundamental.dividends(\"TGT\", provider=\"fmp\").to_df()[\n    [\"ex_dividend_date\", \"amount\"]\n]\ndata.ex_dividend_date = data.ex_dividend_date.astype(str)\ndata.set_index(\"ex_dividend_date\").loc[\"2023-08-15\":\"2022-11-15\"]\n```\n\n----------------------------------------\n\nTITLE: Access FRED Series Metadata\nDESCRIPTION: Retrieves and displays the metadata associated with the FRED series. The code extracts the metadata from the data object's `extra` attribute.  It then accesses specific metadata attributes, like `title` and `units` for the \"WALCL\" series.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/usdLiquidityIndex.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmetadata = data.extra[\"results_metadata\"]\n\ndisplay(metadata.keys())\ndisplay(metadata[\"WALCL\"].get(\"title\"))\ndisplay(metadata[\"WALCL\"].get(\"units\"))\n```\n\n----------------------------------------\n\nTITLE: Calculate Ounce-Based Ratio (Pandas)\nDESCRIPTION: This snippet calculates the copper-to-gold ratio based on price per ounce for both metals. It adjusts the copper price by dividing by 16 (ounces per pound) and the gold price by multiplying by 0.911458 (conversion from Troy ounces to ounces). The result is scaled by 1000.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/copperToGoldRatio.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndata[\"Copper/Gold Ratio per Ounce (x1000) %\"] = (\n    (data[\"Copper\"] / 16) / (data[\"Gold\"] * 0.911458)\n) * 1000\n\ndata.tail(2)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB ECB Extension via pip\nDESCRIPTION: This code snippet shows how to install the OpenBB ECB extension using pip.  It is necessary to have pip installed and configured correctly in your environment. This installation adds the ECB data provider to the OpenBB platform.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/ecb/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-ecb\n```\n\n----------------------------------------\n\nTITLE: Displaying Chart - Python\nDESCRIPTION: This code snippet demonstrates how to display a chart using the `show()` method of an OBBject after retrieving data from the OpenBB Platform. This opens the chart in a PyWry window or renders it inline in an IDE.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/index.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata.show()\n```\n\n----------------------------------------\n\nTITLE: Calculating efficient frontier portfolios\nDESCRIPTION: This code snippet calculates the efficient frontier, obtaining returns, volatility, and weights for various portfolios. It then stores these values in a Pandas DataFrame. The efficient frontier represents the set of optimal portfolios that offer the highest expected return for a defined level of risk or the lowest risk for a given level of expected return.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/portfolioOptimizationUsingModernPortfolioTheory.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Calculate the efficient frontier, obtaining the returns, volatility, and weights for various portfolios.\n(returns, volatility, weights) = cla.efficient_frontier()\n\nefficient_frontier_portfolios= pd.DataFrame([returns, volatility, weights]).T\nefficient_frontier_portfolios.columns=['returns', 'volatility', 'weights']\n\nefficient_frontier_portfolios\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Equity Extension via pip\nDESCRIPTION: This command installs the OpenBB Equity extension using pip. It allows users to access equity market data tools within the OpenBB platform. Execute this command in the appropriate directory to install the extension and its dependencies.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/equity/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-equity\n```\n\n----------------------------------------\n\nTITLE: Loading Historical Data Using Custom Function\nDESCRIPTION: This snippet defines a function `load_historical` that takes a symbol, start date, end date, provider, and optional keyword arguments. It instantiates the `HistoricalPrices` class and returns it. It also handles the case where no symbol is provided and defaults the provider to 'yfinance'.  An example usage then creates an instance for 'spy'.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/loadHistoricalPriceData.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef load_historical(\n    symbol: str = \"\", start_date=None, end_date=None, provider=None, **kwargs\n) -> HistoricalPrices:\n\n    if symbol == \"\":\n        display(\"Please enter a ticker symbol\")\n    if provider is None:\n        provider = \"yfinance\"\n    prices = HistoricalPrices(symbol, start_date, end_date, provider, **kwargs)\n\n    return prices\n\n\nprices = load_historical(\"spy\")\ndisplay(prices.__dict__.keys())\ndisplay(prices.weekly.tail(2))\n\ndisplay(prices.one.head(2))\n```\n\n----------------------------------------\n\nTITLE: Fetch and Display Free Cash Flow Yield\nDESCRIPTION: This code iterates through a list of ticker symbols, fetches free cash flow yield data for each from FMP using `obb.equity.fundamental.metrics()`, and creates a DataFrame to store the results.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/financialStatements.ipynb#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# List of other retail chains\ntickers = [\"COST\", \"BJ\", \"DLTR\", \"DG\", \"WMT\", \"BIG\", \"M\", \"KSS\", \"TJX\"]\n\n# Create a column for each.\nfcf_yield = pd.DataFrame()\nfor ticker in tickers:\n    fcf_yield[ticker] = (\n        obb.equity.fundamental.metrics(\n            ticker, provider=\"fmp\", period=\"annual\", limit=10\n        )\n        .to_df()\n        .reset_index()\n        .set_index(\"calendar_year\")\n        .sort_index(ascending=False)[\"free_cash_flow_yield\"]\n    )\nfcf_yield.transpose()\n```\n\n----------------------------------------\n\nTITLE: Search FRED Series\nDESCRIPTION: Demonstrates how to search for specific FRED series using keywords. It uses `obb.economy.fred_search()` to find series related to \"Wednesday Levels\", \"Wednesday Levels Reverse Repo\", \"Wednesday Levels Treasury General\", and \"SP500\", displaying the first three results of each search.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/usdLiquidityIndex.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# The first result is the series we are looking for as the starting value.\n\nobb.economy.fred_search(\"Wednesday Levels\").to_df().head(3)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Adding \"Reverse Repo\" to the search returns the second series in the equation, as the first result.\n\nobb.economy.fred_search(\"Wednesday Levels Reverse Repo\").to_df().head(3)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Refining the search for the Treasury General Account, returns the final series in the equation, as the first result.\n\nobb.economy.fred_search(\"Wednesday Levels Treasury General\").to_df().head(3)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Several major equity indices are published to FRED, S&P 500 is one of them.\n\nobb.economy.fred_search(\"SP500\").to_df().head(2)\n```\n\n----------------------------------------\n\nTITLE: Screening Equities by Industry on FMP\nDESCRIPTION: This snippet demonstrates how to screen equities by industry and country using the FMP provider. It filters for companies in the manufacturing industry that are domiciled in India and displays the length and the first 5 rows of the DataFrame.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/findSymbols.ipynb#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nindustry_results = obb.equity.screener(\n    industry=\"manufacturing\", provider=\"fmp\", country=\"IN\"\n).to_df()\ndisplay(len(industry_results))\nindustry_results.head(5)\n```\n\n----------------------------------------\n\nTITLE: Installing BLS Extension Locally with Poetry\nDESCRIPTION: Installs the OpenBB BLS extension locally using Poetry. Assumes Poetry is installed and configured in the project.  This command installs the extension and its dependencies defined in the poetry.lock or pyproject.toml files.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/bls/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Access OpenBB News Module\nDESCRIPTION: This code accesses the news module within the OpenBB platform. It enables fetching and processing news data. It relies on the OpenBB platform being correctly initialized and imported.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/platform_standardization.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nobb.news\n```\n\n----------------------------------------\n\nTITLE: Estimate Buy Back Amount\nDESCRIPTION: This code estimates the amount spent on share buybacks by calculating the average closing price of 'TGT' stock between '2022-10-01' and the present using `obb.equity.price.historical()`, and multiplying it by 1.3 million shares.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/financialStatements.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprice = obb.equity.price.historical(\n    \"TGT\", start_date=\"2022-10-01\", provider=\"fmp\"\n).to_df()\n\nround((price[\"close\"].mean() * 1300000) / 1000000, 2)\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Currency Data using yfinance (Equity endpoint)\nDESCRIPTION: This snippet fetches historical price data for the USD/JPY currency pair using the `yfinance` provider, leveraging the `obb.equity.price.historical()` endpoint. The currency pair symbol is passed as the first argument. The result is converted to a Pandas DataFrame.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/loadHistoricalPriceData.ipynb#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nobb.equity.price.historical(\"usdjpy=x\", provider=\"yfinance\").to_df()\n```\n\n----------------------------------------\n\nTITLE: Get World News with Intrinio Provider\nDESCRIPTION: This code fetches world news using the OpenBB platform's news module with the 'intrinio' provider. It retrieves a limited number of news articles and displays them in a transposed DataFrame format. Requires OpenBB and the intrinio provider to be installed.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/platform_standardization.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nobb.news.world(limit=1, provider=\"intrinio\").to_df().T\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB CLI with pip\nDESCRIPTION: This command installs the OpenBB Platform CLI, providing access to all available OpenBB extensions behind the OpenBB Platform.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/cli/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-cli\n```\n\n----------------------------------------\n\nTITLE: Pivoting ETF Data\nDESCRIPTION: Transforms the combined ETF data into a pivoted table with dates as index and ETF symbols as columns, representing closing prices. Missing values are forward filled to handle any data gaps.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/sectorRotationStrategy.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncombined_etf_data['date'] = pd.to_datetime(combined_etf_data['date'])\ncombined_etf_data = combined_etf_data[['date', 'close', 'Symbol']]\n\npivoted_data = combined_etf_data.pivot_table(index='date', columns='Symbol', values='close')\n\npivoted_data.ffill()\n\npivoted_data.head()\n```\n\n----------------------------------------\n\nTITLE: Plot Ratio and Yield (Plotly)\nDESCRIPTION: This snippet creates a line chart using Plotly to visualize the copper-to-gold ratio and the US 10-Year Treasury yield over time.  It adds two scatter traces and configures the chart's title, axis labels, and legend.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/copperToGoldRatio.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfig = go.Figure()\nfig.add_scatter(\n    x=data.index, y=data[\"Copper/Gold Ratio\"], name=\"Copper/Gold Ratio (x1000) %\"\n)\nfig.add_scatter(\n    x=data.index,\n    y=data[\"US 10-Year Constant Maturity\"],\n    name=\"US 10-Year Constant Maturity %\",\n)\nfig.update(\n    {\n        \"layout\": {\n            \"xaxis\": {\"title\": \"Date\"},\n            \"yaxis\": {\"title\": \"%\"},\n            \"title\": \"Copper/Gold Ratio vs. US 10-Year Constant Maturity\",\n            \"title_y\": 0.90,\n            \"title_x\": 0.5,\n        }\n    }\n)\nfig.update_layout(legend=dict(yanchor=\"top\", y=1, xanchor=\"right\", x=1.0))\n```\n\n----------------------------------------\n\nTITLE: Fetching and Sorting Upcoming Earnings Dates\nDESCRIPTION: This code snippet retrieves upcoming earnings dates using the OpenBB Platform. It fetches the earnings calendar data for the next 14 days from the Nasdaq provider, sorts the results by market capitalization and number of estimates in descending order, and displays the top 20 results.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/impliedEarningsMove.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Lookup some upcoming earnings dates and sort them by market cap.\n\nearnings_calendar = obb.equity.calendar.earnings(\n    start_date=(datetime.now() + timedelta(days=1)).date(),\n    end_date=(datetime.now() + timedelta(days=14)).date(),\n    provider=\"nasdaq\",\n)\n\nearnings_calendar.sort_values(by=[\"market_cap\", \"num_estimates\"], ascending=False).head(\n    20\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Rolling Standard Deviation Chart - Python\nDESCRIPTION: This code snippet demonstrates how to retrieve historical price data for a stock using OpenBB, calculate the rolling standard deviation of the closing prices, and generate a chart using the `charting.show()` method.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/index.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndata = obb.equity.price.historical(\n    symbol=\"XLK\",\n    start_date=\"2023-01-01\",\n    provider=\"yfinance\",\n)\nqa = obb.quantitative.rolling.stdev(data.results, target=\"close\")\n\nqa.charting.show(title=\"XLK Rolling 21 Day Standard Deviation\")\n```\n\n----------------------------------------\n\nTITLE: Using OpenBB Charting with Python\nDESCRIPTION: This example demonstrates how to use the OpenBB Charting extension within a Python environment.  It fetches historical price data for a specified stock symbol (\"TSLA\") and displays a chart using the `chart` argument.  This requires the `openbb` library to be installed.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb import obb\nequity_data = obb.equity.price.historical(symbol=\"TSLA\", chart=True)\n```\n\n----------------------------------------\n\nTITLE: Searching Filings by CIK on SEC\nDESCRIPTION: This snippet demonstrates how to search for filings by CIK number using the SEC provider.  The cik number is a unique id for filers in the US. The `to_df()` method is used to convert the results to a Pandas DataFrame, and `iloc[-1]` selects the last row.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/findSymbols.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nhomestate_filings = obb.equity.fundamental.filings(cik=\"0000829771\", provider=\"sec\")\n\nhomestate_filings.to_df().iloc[-1]\n```\n\n----------------------------------------\n\nTITLE: Filtering Equities by Metrics on FMP\nDESCRIPTION: This snippet refines an equity search using the FMP provider. It finds listings on the NYSE, domiciled in the USA, with a market cap between $100-300 billion, and exhibiting a beta value of less than 0.5. The resulting DataFrame is then displayed.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/findSymbols.ipynb#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nobb.equity.screener(\n    exchange=\"nyse\",\n    mktcap_min=100000000000,\n    mktcap_max=300000000000,\n    country=\"us\",\n    beta_max=0.5,\n    provider=\"fmp\",\n).to_df()\n```\n\n----------------------------------------\n\nTITLE: Get Options Chain Data from CBOE (Python)\nDESCRIPTION: Retrieves options chain data for a given symbol (e.g., SPY) from the CBOE provider using the OpenBB Platform. The `obb.derivatives.options.chains` function fetches options data, which is then stored in the `options` variable. The default output is a pandas DataFrame.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/googleColab.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsymbol = \"SPY\"\n\noptions = obb.derivatives.options.chains(symbol, provider=\"cboe\")\n\noptions\n```\n\n----------------------------------------\n\nTITLE: FastAPI Endpoint Returning a List of Custom Data Models\nDESCRIPTION: This snippet defines a FastAPI endpoint `/hello_data` that returns a list of `MyData` instances. It demonstrates how to use the custom data model defined earlier as the return type of an API endpoint.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/hello_data\")\nasync def hello_data() -> list[MyData]:\n    \"\"\"Widget description created by docstring.\"\"\"\n    # Do something with the parameters and return the result of work.\n    return [MyData(column_1=datetime.date.today(), column_2=\"Hello!\")]\n```\n\n----------------------------------------\n\nTITLE: Widget Configuration with openapi_extra in OpenBB API (Python)\nDESCRIPTION: This Python code snippet demonstrates how to configure a widget in the OpenBB API using the `openapi_extra` dictionary within the `@app.get` decorator. It overrides the default column definitions for a table within the widget configuration. The `field` parameter in `columnsDefs` is used as the matching identifier for updates.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\n    \"/hello_data\",\n    openapi_extra={\n        \"widget_config\": {\n            \"data\": {\n                \"table\": {\n                    \"columnsDefs\": [\n                        {\n                            \"field\": \"column_1\",\n                            \"headerName\": \"My Column\",\n                            \"headerTooltip\": \"This hovertext wins!\",\n                        }\n                    ]\n                }\n            }\n        }\n    },\n)\nasync def hello_data() -> list[MyData]:\n    \"\"\"Widget description created by docstring.\"\"\"\n    # Do something with the parameters and return the result of work.\n    return [MyData(column_1=datetime.date.today(), column_2=\"Hello!\")]\n```\n\n----------------------------------------\n\nTITLE: Creating a Historical Prices Data Class\nDESCRIPTION: This code defines a class `HistoricalPrices` that initializes and stores historical price data for various time intervals (1m, 5m, 15m, 30m, 60m, 1d, 1W, 1M) using the OpenBB Platform.  It fetches data for a given symbol, start date, end date, and provider for each interval, converting the result to a Pandas DataFrame.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/loadHistoricalPriceData.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass HistoricalPrices:\n    def __init__(self, symbol, start_date, end_date, provider, **kwargs) -> None:\n        self.one: pd.DataFrame = (\n            obb.equity.price.historical(\n                symbol=symbol,\n                start_date=start_date,\n                end_date=end_date,\n                interval=\"1m\",\n                provider=provider,\n                **kwargs\n            )\n            .to_df()\n            .convert_dtypes()\n        )\n        self.five: pd.DataFrame = (\n            obb.equity.price.historical(\n                symbol=symbol,\n                start_date=start_date,\n                end_date=end_date,\n                interval=\"5m\",\n                provider=provider,\n                **kwargs\n            )\n            .to_df()\n            .convert_dtypes()\n        )\n        self.fifteen: pd.DataFrame = (\n            obb.equity.price.historical(\n                symbol=symbol,\n                start_date=start_date,\n                end_date=end_date,\n                interval=\"15m\",\n                provider=provider,\n                **kwargs\n            )\n            .to_df()\n            .convert_dtypes()\n        )\n        self.thirty: pd.DataFrame = (\n            obb.equity.price.historical(\n                symbol=symbol,\n                start_date=start_date,\n                end_date=end_date,\n                interval=\"30m\",\n                provider=provider,\n                **kwargs\n            )\n            .to_df()\n            .convert_dtypes()\n        )\n        self.sixty: pd.DataFrame = (\n            obb.equity.price.historical(\n                symbol=symbol,\n                start_date=start_date,\n                end_date=end_date,\n                interval=\"60m\",\n                provider=provider,\n                **kwargs\n            )\n            .to_df()\n            .convert_dtypes()\n        )\n        self.daily: pd.DataFrame = (\n            obb.equity.price.historical(\n                symbol=symbol,\n                start_date=start_date,\n                end_date=end_date,\n                interval=\"1d\",\n                provider=provider,\n                **kwargs\n            )\n            .to_df()\n            .convert_dtypes()\n        )\n        self.weekly: pd.DataFrame = (\n            obb.equity.price.historical(\n                symbol=symbol,\n                start_date=start_date,\n                end_date=end_date,\n                interval=\"1W\",\n                provider=provider,\n                **kwargs\n            )\n            .to_df()\n            .convert_dtypes()\n        )\n        self.monthly: pd.DataFrame = (\n            obb.equity.price.historical(\n                symbol=symbol,\n                start_date=start_date,\n                end_date=end_date,\n                interval=\"1M\",\n                provider=provider,\n                **kwargs\n            )\n            .to_df()\n            .convert_dtypes()\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Data Model with Annotated Fields\nDESCRIPTION: This example defines a custom data model named `MyData` that inherits from `Data`. It uses `Field` to annotate each column with a description, title, and default value.  It also shows usage of `json_schema_extra` to apply formatting functions for percent values.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass MyData(Data):\n    \"\"\"This is a custom Data model.\"\"\"\n\n    # Add fields to the model.\n    column_1: datetime.date = Field(\n        description=\"The date column is a mandatory field.\",\n        title=\"Some Date\",\n    )\n    column_2: Optional[str] = Field(\n        default=None,\n        description=\"This is an optional string column.\",\n        title=\"Some String\",\n    )\n    column_3: int = Field(\n        default=-1,\n        description=\"This is an integer column.\",\n        title=\"Some Integer\",\n    )\n    column_4: float = Field(\n        default=10.25,\n        description=\"This is a float column.\",\n        title=\"Some Float\",\n    )\n    column_5: float = Field(\n        default=10.25,\n        description=\"This is a percent column.\",\n        title=\"Some Percent\",\n        json_schema_extra={\"x-widget_config\": {\"formatterFn\": \"percent\"}},\n    )\n    column_6: float = Field(\n        default=0.1025,\n        description=\"This is a normalized percent value adjusted for presentation.\",\n        title=\"Some Normalized Percent\",\n        json_schema_extra={\n            \"x-widget_config\": {\n                \"formatterFn\": \"normalizedPercent\",\n                \"renderFn\": \"greenRed\",\n            }\n        },\n    )\n```\n\n----------------------------------------\n\nTITLE: Searching Filings by Ticker and Type on SEC\nDESCRIPTION: This snippet shows how to search for filings by ticker symbol and form type using the SEC provider. The `to_df()` method converts the results to a Pandas DataFrame, and `iloc[0]` selects the first row.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/findSymbols.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\naapl_filings = obb.equity.fundamental.filings(\"AAPL\", type=\"4\", provider=\"sec\")\n\naapl_filings.to_df().iloc[0]\n```\n\n----------------------------------------\n\nTITLE: Equity Screener with Finviz (default)\nDESCRIPTION: This code snippet demonstrates how to use the `obb.equity.screener` function with the `finviz` provider, defaulting to the \"top_gainers\" signal when no parameters are specified. This retrieves data based on the default settings of the Finviz screener.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/finviz/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nres = obb.equity.screener(provider=\"finviz\")\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Options Data using yfinance\nDESCRIPTION: This snippet fetches historical price data for an individual options contract using the `yfinance` provider. The option ticker symbol is passed as the first argument to `obb.equity.price.historical()`. The result is converted to a Pandas DataFrame.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/loadHistoricalPriceData.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nobb.equity.price.historical(\"SPY251219P00400000\", provider=\"yfinance\").to_df()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Strategy Performance\nDESCRIPTION: Calculates cumulative returns for both the sector rotation strategy and a market average (mean of all ETFs). It generates a plot comparing the performance of the strategy against the market average, displaying cumulative returns over time. The plot includes a title, axis labels, a legend, and gridlines.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/sectorRotationStrategy.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nportfolio_returns['Cumulative Return'] = (1 + portfolio_returns['Portfolio Return']).cumprod()\n\npivoted_data['Market Average'] = pivoted_data.mean(axis=1)\nmarket_returns = pivoted_data['Market Average'].resample('ME').last().pct_change()\nmarket_cumulative_return = (1 + market_returns).cumprod()\n\nplt.figure(figsize=(12, 7))\nplt.plot(portfolio_returns.index, portfolio_returns['Cumulative Return'], label='Sector Rotation Strategy', color='green')\nplt.plot(market_cumulative_return.index, market_cumulative_return, label='Market Average', color='blue')\n\nplt.title('Sector Rotation Strategy vs Market Average', fontsize=16, fontweight='bold')\nplt.xlabel('Date', fontsize=12)\nplt.ylabel('Cumulative Return', fontsize=12)\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Installing CFTC Extension from PyPI\nDESCRIPTION: This command installs the openbb-cftc extension from the Python Package Index (PyPI). It is the standard method for installing the extension.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/cftc/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install openbb-cftc\n```\n\n----------------------------------------\n\nTITLE: Get Fundamental Ratios Data from FMP (Python)\nDESCRIPTION: Retrieves fundamental ratios data for a specified stock symbol (e.g., AAPL) from the Financial Modeling Prep (FMP) provider using the OpenBB Platform. It limits the data to the last 100 quarters, sets the date format for the index and saves to the dataframe `data`.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/googleColab.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# In this scenario, \"data\" could be anything that would be displayed as a bar chart. Alternatively, it could be company fundamentals data.\n\n# Note: This requires a valid FMP API key\n\n\nsymbol=\"AAPL\"\n\ndata = obb.equity.fundamental.ratios(symbol, limit = 100, period=\"quarter\", provider=\"fmp\")\n\ndata.index = data.index.strftime(\"%Y-%m-%d\")\n\ndata\n```\n\n----------------------------------------\n\nTITLE: Initializing M&A Analysis Variables - Python\nDESCRIPTION: This snippet initializes the variables required for the M&A impact analysis.  It sets the acquirer symbol, target symbol, and the announcement date. These values will be used as inputs to the analysis functions.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/mAndAImpact.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nacquirer_symbol = \"MSFT\"\ntarget_symbol = \"LNKD\"\nannouncement_date = \"2016-06-13\"\n```\n\n----------------------------------------\n\nTITLE: Generating M&A Summary Report - Python\nDESCRIPTION: This snippet generates a summary report of the M&A analysis using the `generate_ma_report` function. It passes the analysis results, acquirer symbol, target symbol, and announcement date to the function. The generated report is then printed to the console.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/mAndAImpact.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Generate and print the summary report\nprint(generate_ma_report(analysis_results, acquirer_symbol, target_symbol, announcement_date))\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Prices for BRK.B with Polygon\nDESCRIPTION: This snippet retrieves historical price data for Berkshire Hathaway Class B shares ('BRK.B') using the 'polygon' provider via the OpenBB Platform.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/loadHistoricalPriceData.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nobb.equity.price.historical(\"brk.b\", provider=\"polygon\")\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Charting\nDESCRIPTION: This code snippet imports necessary modules from the `datetime` and `openbb` libraries. `datetime` and `timedelta` are used for date manipulation, while `obb` provides access to the OpenBB Platform's functionalities.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/examples.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom datetime import datetime, timedelta\nfrom openbb import obb\n```\n\n----------------------------------------\n\nTITLE: Redrawing Chart - Python\nDESCRIPTION: This code shows how to redraw a chart using the `charting.to_chart()` method, allowing users to modify the chart's appearance or data post-request. This is useful for customizing the chart without making a new API call.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/index.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndata.charting.to_chart()\n```\n\n----------------------------------------\n\nTITLE: Creating Table Widget Endpoint\nDESCRIPTION: This code snippet creates a FastAPI endpoint that returns a list of dictionaries, rendered as a table widget in OpenBB Workspace.  Each dictionary represents a row in the table. The docstring of the function is used as the widget description.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/hello\")\nasync def hello() -> list:\n    \"\"\"Widget Description Generated By Docstring\"\"\"\n    return [{\"Column 1\": \"Hello\", \"Column 2\": \"from OpenBB!\"}]\n```\n\n----------------------------------------\n\nTITLE: Plot Ratio and Yield with Dual Y-Axes (Plotly)\nDESCRIPTION: This snippet creates a line chart using Plotly with dual y-axes to visualize the copper-to-gold ratio and the US 10-Year Treasury yield.  It adds two scatter traces, each associated with a different y-axis, and configures the chart's titles, axis labels, and legend.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/copperToGoldRatio.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfig = go.Figure()\n\n# Add the first scatter trace with its own y-axis\nfig.add_scatter(\n    x=data.index,\n    y=data[\"Copper/Gold Ratio\"],\n    name=\"Copper/Gold Ratio (x1000) %\",\n    yaxis=\"y1\",\n)\n\n# Add the second scatter trace with its own y-axis\nfig.add_scatter(\n    x=data.index,\n    y=data[\"US 10-Year Constant Maturity\"],\n    name=\"US 10-Year Constant Maturity %\",\n    yaxis=\"y2\",\n)\n\n# Update the layout to include the y-axes and their titles\nfig.update_layout(\n    yaxis=dict(\n        title=\"Copper/Gold Ratio (x1000) %\",\n        side=\"left\",\n        position=0,\n        titlefont=dict(size=12),\n        showgrid=False,\n    ),\n    yaxis2=dict(\n        title=\"US 10-Year Constant Maturity %\",\n        side=\"right\",\n        overlaying=\"y\",\n        position=1,\n        titlefont=dict(size=12),\n    ),\n    xaxis=dict(title=\"Date\"),\n    title=\"Copper/Gold Ratio vs. US 10-Year Constant Maturity\",\n    title_y=0.90,\n    title_x=0.5,\n)\n\n# Set the legend position\nfig.update_layout(\n    legend=dict(yanchor=\"top\", y=1, xanchor=\"right\", x=1.0, font=dict(size=10))\n)\n\n# Show the plot\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart with Indicators in OpenBB - Python\nDESCRIPTION: This snippet demonstrates how to initialize an OpenBB chart with various technical indicators such as EMA, SRLines, and RSI.  It retrieves historical price data for a given ticker (TSLA), specifies the interval and start date, and then defines chart parameters including Heikin Ashi candles and the desired indicators with their respective configurations.  The `chart_params` dictionary is used to configure the indicators, and the `data.show()` method displays the chart.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/indicators.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timedelta\nfrom openbb import obb\ndata = obb.equity.price.historical(\n    \"TSLA\",\n    provider=\"yfinance\",\n    interval=\"15m\",\n    start_date=(datetime.now()-timedelta(days=21)).date(),\n    chart=True,\n    chart_params=dict(\n        heikin_ashi=True,\n        indicators=(dict(\n            ema=dict(length=[8,32]),\n            srlines={}, # For indicators, an empty dictionary implies the default state.\n            rsi=dict(length=32)\n        ))\n    )\n)\ndata.show()\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Equity Data using CBOE\nDESCRIPTION: This snippet fetches historical price data for the SPX equity index using the `cboe` provider. The equity ticker symbol is passed as the first argument to `obb.equity.price.historical()`. The result is converted to a Pandas DataFrame.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/loadHistoricalPriceData.ipynb#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nobb.equity.price.historical(\"SPX\", provider=\"cboe\").to_df()\n```\n\n----------------------------------------\n\nTITLE: Import OpenBB and Pandas\nDESCRIPTION: Imports the OpenBB SDK and Pandas library, which are essential for data retrieval and manipulation.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/usdLiquidityIndex.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb import obb\nfrom pandas import DataFrame\n```\n\n----------------------------------------\n\nTITLE: Plotting M&A Analysis Results - Python\nDESCRIPTION: This snippet shows how to plot the M&A analysis results using the `plot_ma_analysis` function. It takes the analysis results, acquirer symbol, and announcement date as input to create a visualization. This function likely depends on matplotlib or a similar plotting library.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/mAndAImpact.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Plot the analysis results\nplot_ma_analysis(analysis_results, acquirer_symbol, announcement_date)\n```\n\n----------------------------------------\n\nTITLE: Resampling Daily Data to Monthly in Pandas\nDESCRIPTION: This snippet resamples daily historical price data to monthly data using pandas. It converts the index to datetime objects, then resamples the DataFrame to the end of each month ('ME') and aggregates the 'open', 'high', 'low', 'close', and 'volume' columns using appropriate functions (first, max, min, last, sum).\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/loadHistoricalPriceData.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndf_daily.index = pd.to_datetime(df_daily.index)\n(\n    df_daily[[\"open\", \"high\", \"low\", \"close\", \"volume\"]]\n    .resample(\"ME\")\n    .agg(\n        {\"open\": \"first\", \"high\": \"max\", \"low\": \"min\", \"close\": \"last\", \"volume\": \"sum\"}\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Searching Indexes on Cboe\nDESCRIPTION: This snippet shows how to search for indexes on the Cboe exchange. It uses the `obb.index.search()` method with the provider set to \"cboe\". The `to_df()` method converts the results to a Pandas DataFrame, and `tail(5)` displays the last 5 rows.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/findSymbols.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nobb.index.search(\"SPX\", provider=\"cboe\").to_df().tail(5)\n```\n\n----------------------------------------\n\nTITLE: Plot Normalized Data with Pandas\nDESCRIPTION: Plots the normalized USD Liquidity Index and S&P 500 data using the Pandas built-in plotting backend (set to Plotly). This provides a quick way to visualize the normalized time series.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/usdLiquidityIndex.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\npd.options.plotting.backend = \"plotly\"\nnormalized.plot()\n```\n\n----------------------------------------\n\nTITLE: Creating a FastAPI Endpoint to Open PDF\nDESCRIPTION: This code defines a FastAPI endpoint `/open_pdf` that opens a PDF document from a URL or local file path. It accepts parameters such as `url`, `filename`, and `user_agent`. It returns a `PdfResponseModel` which handles conversion of document to a base64 encoded string.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/open_pdf\")\nasync def open_pdf(\n    url: Annotated[\n        str,\n        Query(\n            description=\"URL, or local path, to the PDF document.\",\n            title=\"URL or Path\",\n        ),\n    ],\n    filename: Annotated[\n        Optional[str],\n        Query(\n            description=\"Filename to associate with the PDF internally.\",\n            title=\"Fiilename\",\n        ),\n    ] = \"\",\n    user_agent: Annotated[\n        Optional[str],\n        Query(description=\"A specific User-Agent string for the request.\", title=\"User-Agent\"),\n    ] = None,\n) -> PdfResponseModel:\n    \"\"\"Open a PDF document from a URL, or local file path.\"\"\"\n    # pylint: disable=import-outside-toplevel\n    from pathlib import Path  # noqa\n    from openbb_core.provider.utils.errors import OpenBBError\n    from openbb_core.provider.utils.helpers import get_requests_session\n\n    if \"://\" not in url:\n        file_path = Path(url)\n        if not file_path.is_file():\n            raise OpenBBError(f\"The file - {url} - does not exist.\")\n        with open(file_path, \"rb\") as file:\n            pdf = file.read()\n    else:\n        session = get_requests_session(headers={\"User-Agent\": user_agent})\n        response = session.get(url)\n        if response.status_code != 200:\n            raise OpenBBError(\n                f\"Failed to open PDF from URL -> Code: {response.status_code} -> {response.reason}\"\n            )\n\n        pdf = response.content\n\n    return PdfResponseModel(\n        filename = filename,\n        content = pdf,\n    )\n```\n\n----------------------------------------\n\nTITLE: Fetching Options Chain Data\nDESCRIPTION: This code snippet fetches options chain data for a specific stock symbol (NVDA). It first sets the output type preference to 'OBBject' to utilize built-in options chain methods. It then retrieves options chain data from the CBOE provider and displays the last price and the first three expiration dates.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/impliedEarningsMove.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Get the options chains data.\n\nsymbol = \"NVDA\"  # This will not be evergreen, change the symbol based on a stock above.\n\nobb.user.preferences.output_type = \"OBBject\"  # To use the built-in options chains methods, we need to set the output type to OBBject.\n\noptions = obb.derivatives.options.chains(symbol, provider=\"cboe\")\n\nlast_price = options.results.underlying_price[0]\n\ndisplay(f\"Last Price: ${last_price}\")\n\ndisplay(options.results.expirations[:3])\n```\n\n----------------------------------------\n\nTITLE: Get World News with Benzinga Provider\nDESCRIPTION: This snippet retrieves world news using the OpenBB platform with the 'benzinga' provider. The limit parameter restricts the output to a single news article, which is then displayed in a transposed DataFrame. OpenBB and the benzinga provider are required.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/platform_standardization.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nobb.news.world(limit=1, provider=\"benzinga\").to_df().T\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Tradier Provider using pip\nDESCRIPTION: This code snippet shows how to install the `openbb-tradier` package using pip. It is the primary method to integrate the Tradier provider into an OpenBB Platform installation. No specific dependencies are required beyond a working Python environment with pip.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/tradier/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-tradier\n```\n\n----------------------------------------\n\nTITLE: Data Processing Function Signature\nDESCRIPTION: This code snippet illustrates the function signature of a data processing command (ema), highlighting the use of the Data class. It shows how data can be a List[Data] or a pandas.DataFrame, and how to define the parameters and return type of the data processing function.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef ema(\n        self,\n        data: Union[List[Data], pandas.DataFrame],\n        target: str = \"close\",\n        index: str = \"date\",\n        length: int = 50,\n        offset: int = 0,\n        chart: bool = False,\n    ) -> OBBject[List[Data]]:\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Getting Index Price History on YFinance\nDESCRIPTION: This snippet compares the historical price data of an index using its ticker symbol and short code with the yfinance extension. It verifies if the last value of the index price is identical when retrieved by the short code and ticker symbol.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/findSymbols.ipynb#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n(\n    obb.index.price.historical(\"au_utilities\", provider=\"yfinance\").to_df().tail(1)\n    == obb.index.price.historical(\"^AXUJ\", provider=\"yfinance\").to_df().tail(1)\n)\n```\n\n----------------------------------------\n\nTITLE: Fetcher Class Implementation with TET Pattern - Python\nDESCRIPTION: This code snippet demonstrates the implementation of a Fetcher class, responsible for retrieving and transforming data from an API.  It follows the TET (Transform, Extract, Transform) pattern.  It shows the `transform_query`, `extract_data`, and `transform_data` methods.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass <ProviderName>EquityHistoricalFetcher(\n    Fetcher[\n        <ProviderName>EquityHistoricalQueryParams,\n        List[<ProviderName>EquityHistoricalData],\n    ]\n):\n    \"\"\"Transform the query, extract and transform the data.\"\"\"\n\n    @staticmethod\n    def transform_query(params: Dict[str, Any]) -> <ProviderName>EquityHistoricalQueryParams:\n        \"\"\"Transform the query parameters.\"\"\"\n\n        return <ProviderName>EquityHistoricalQueryParams(**transformed_params)\n\n    @staticmethod\n    def extract_data(\n        query: <ProviderName>EquityHistoricalQueryParams,\n        credentials: Optional[Dict[str, str]],\n        **kwargs: Any,\n    ) -> dict:\n        \"\"\"Return the raw data from the endpoint.\"\"\"\n\n        obtained_data = my_request(query, credentials, **kwargs)\n\n        return obtained_data\n\n    @staticmethod\n    def transform_data(\n        query: <ProviderName>EquityHistoricalQueryParams,\n        data: dict,\n        **kwargs: Any,\n    ) -> List[<ProviderName>EquityHistoricalData]:\n        \"\"\"Transform the data to the standard format.\"\"\"\n\n        return [<ProviderName>EquityHistoricalData.model_validate(d) for d in data]\n```\n\n----------------------------------------\n\nTITLE: Import OpenBB and Pandas\nDESCRIPTION: This snippet imports the necessary libraries: OpenBB for data retrieval and Pandas for data manipulation and calculations. It also imports plotly for creating the visualization.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/copperToGoldRatio.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Import the Platform and Pandas for some calculations.\n\nimport pandas as pd\nimport plotly.graph_objects as go\nfrom openbb import obb\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB OECD Provider\nDESCRIPTION: This command installs the OpenBB OECD extension using pip. The extension allows the OpenBB platform to access and utilize data from the OECD.  It requires a working Python environment with pip installed.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/oecd/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-oecd\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Currency Data using yfinance (Currency endpoint)\nDESCRIPTION: This snippet fetches historical price data for the USD/JPY currency pair using the `yfinance` provider and the `obb.currency.price.historical()` endpoint. The currency pair symbol is passed as the first argument. The result is converted to a Pandas DataFrame.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/loadHistoricalPriceData.ipynb#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nobb.currency.price.historical(\"usdjpy\", provider=\"yfinance\").to_df()\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Economy Extension with pip\nDESCRIPTION: This command installs the OpenBB Economy extension, allowing access to global macroeconomic data within the OpenBB Platform.  It utilizes pip, the package installer for Python. Make sure pip is properly configured and accessible in your environment.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/economy/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-economy\n```\n\n----------------------------------------\n\nTITLE: OpenBB Platform Command Endpoint Structure - Python\nDESCRIPTION: This snippet illustrates the structure of an OpenBB Platform command endpoint when using a Fetcher. It shows how to define an endpoint using the `@router.command` decorator, specifying the model, CommandContext, ProviderChoices, StandardParams, and ExtraParams. The `OBBject.from_query` method is used to return the data.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@router.command(model=\"Example\")\nasync def model_example(    # create an async endpoint\n    cc: CommandContext,\n    provider_choices: ProviderChoices,\n    standard_params: StandardParams,\n    extra_params: ExtraParams,\n) -> OBBject:\n    \"\"\"Example Data.\"\"\"\n    return await OBBject.from_query(Query(**locals()))\n```\n\n----------------------------------------\n\nTITLE: Accessing Charting Extension Methods - Python\nDESCRIPTION: This code demonstrates how to access the charting extension methods using the `obb.equity.price.historical` function and the `charting?` attribute to display the available methods.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb import obb\ndata = obb.equity.price.historical(\"AAPL\")\ndata.charting?\n```\n\n----------------------------------------\n\nTITLE: Analyzing Share Volume Turnover\nDESCRIPTION: This code analyzes the year-to-date share volume turnover of the S&P 500 Energy Sector constituents. It retrieves historical price data and share float data, calculates the turnover rate, sorts the data by turnover rate, and then generates a bar chart using the `create_bar_chart()` method.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/examples.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nsymbols = [\n    'XOM',\n    'CVX',\n    'COP',\n    'EOG',\n    'MPC',\n    'SLB',\n    'PSX',\n    'PXD',\n    'VLO',\n    'WMB',\n    'OKE',\n    'OXY',\n    'HES',\n    'FANG',\n    'HAL',\n    'KMI',\n    'DVN',\n    'BKR',\n    'TRGP',\n    'CTRA',\n    'MRO',\n    'EQT',\n    'APA'\n]\ndata = obb.equity.price.historical(symbols, start_date=\"2024-01-01\", provider=\"yfinance\")\ncreate_bar_chart = data.charting.create_bar_chart\nvolume = data.to_df().groupby(\"symbol\").sum()[\"volume\"]\nshares = obb.equity.profile(\n    symbols, provider=\"yfinance\"\n).to_df().set_index(\"symbol\")[\"shares_float\"]\ndf = volume.to_frame().join(shares)\ndf[\"Turnover\"] = (df.volume/df.shares_float).round(4)\ndf = df.sort_values(by=\"Turnover\", ascending=False).reset_index()\ncreate_bar_chart(\n    data=df,\n    x=\"symbol\",\n    y=\"Turnover\",\n    title=\"S&P Energy Sector YTD Turnover Rate\",\n)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB EIA Provider Extension in Editable Mode\nDESCRIPTION: This snippet shows how to install the OpenBB EIA provider extension in editable mode, which allows for changes to the source code to be immediately reflected without re-installing the package. This is for development purposes.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/eia/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Equity Screener with Finviz (performance metric)\nDESCRIPTION: This code snippet shows how to use the `metric` parameter to specify the type of data fields to return. In this case, it requests the 'performance' metrics from the Finviz screener.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/finviz/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nres = obb.equity.screener(provider=\"finviz\", metric=\"performance\")\n```\n\n----------------------------------------\n\nTITLE: Equity Screener with Finviz (filters_dict as JSON)\nDESCRIPTION: This code demonstrates using the `filters_dict` parameter with a JSON-encoded string.  It shows how to pass filters to the equity screener, specifically to find stocks in the NASDAQ 100 index.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/finviz/README.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nres = obb.equity.screener(provider=\"finviz\", filters_dict='{\"Index\": \"NASDAQ 100\"}')\n```\n\n----------------------------------------\n\nTITLE: Displaying External Data in a Table - Python\nDESCRIPTION: This snippet takes an existing DataFrame, transposes it, sets the index name, and modifies column names.  It then uses the `charting.table()` method to display the modified DataFrame as an interactive table. `df` needs to be defined before running this snippet.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/index.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nnew_df = df.to_df().T\nnew_df.index.name=\"metric\"\nnew_df.columns = new_df.loc[\"symbol\"]\nnew_df.drop(\"symbol\", inplace=True)\ndata.charting.table(data=new_df)\n```\n\n----------------------------------------\n\nTITLE: Prepare Data for Calculation\nDESCRIPTION: Prepares the data by dropping NaN values and creating a new DataFrame. This ensures consistent data for calculating the liquidity index.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/usdLiquidityIndex.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndisplay(data.to_df().head(4))\ndisplay(data.to_df().dropna().head(4))\n\n# We'll create a new DataFrame object with the dropped rows.\nliquidity_index = DataFrame(data.to_df().dropna())\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Charting Extension\nDESCRIPTION: This command installs the `openbb-charting` extension using pip.  It's a prerequisite for using the charting functionalities within the OpenBB Platform. This ensures that the necessary charting components are available.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-charting\n```\n\n----------------------------------------\n\nTITLE: Launching OpenBB API Over HTTPS\nDESCRIPTION: This command launches the OpenBB API over HTTPS using the generated SSL key and certificate files. The `--ssl_keyfile` and `--ssl_certfile` arguments specify the paths to the key and certificate files, respectively.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nopenbb-api --ssl_keyfile localhost.key --ssl_certfile localhost.crt\n```\n\n----------------------------------------\n\nTITLE: Create Data Output Model for Provider\nDESCRIPTION: This snippet defines a data output model specific to a provider, inheriting from `EquityHistoricalData`. This class holds the structure for data returned by the provider's API, including any provider-specific fields.  The `Source` comment indicates the API documentation URL.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass <ProviderName>EquityHistoricalData(EquityHistoricalData):\n    \"\"\"<ProviderName> Equity Historical Data.\n\n    Source: https://www.<provider_name>.co/documentation/\n    \"\"\"\n\n    # provider specific data output fields if any\n```\n\n----------------------------------------\n\nTITLE: Install OpenBB Fixed Income Extension\nDESCRIPTION: Installs the OpenBB Fixed Income extension using pip. This command needs to be executed in the folder where the extension is located. It adds fixed income data functionality to the OpenBB Platform.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/fixedincome/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-fixedincome\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Widget Endpoint\nDESCRIPTION: This code snippet creates a FastAPI endpoint that returns a string, rendered as a markdown widget in OpenBB Workspace.  The docstring of the function is used as the widget description.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/hello\")\nasync def hello() -> str:\n    \"\"\"Widget Description Generated By Docstring\"\"\"\n    return \"Hello, from OpenBB!\"\n```\n\n----------------------------------------\n\nTITLE: Plotting Cumulative Returns\nDESCRIPTION: This snippet retrieves historical price data for a list of SPDR funds (SPY, XLE, XLB, etc.) over a five-year period using the `obb.equity.price.historical` endpoint. It then displays the cumulative returns chart generated by the `openbb-charting` extension using `spdrs.show()`. The yfinance provider is specified.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/examples.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nSPDRS = [\n    \"SPY\",\n    \"XLE\",\n    \"XLB\",\n    \"XLI\",\n    \"XHB\",\n    \"XLP\",\n    \"XLY\",\n    \"XRT\",\n    \"XLF\",\n    \"XLV\",\n    \"XLK\",\n    \"XLC\",\n    \"XLU\",\n    \"XLRE\",\n]\nstart_date = (datetime.now() - timedelta(weeks=52*5)).date()\nspdrs = obb.equity.price.historical(SPDRS, start_date=start_date, provider=\"yfinance\", chart=True)\n\nspdrs.show()\n```\n\n----------------------------------------\n\nTITLE: Ethereum Trend Analysis with OpenBB and Python\nDESCRIPTION: This code snippet retrieves historical Ethereum price data using the OpenBB platform, calculates moving averages (50-day and 200-day), daily returns, and volatility.  It then visualizes these metrics using matplotlib and identifies potential buy/sell signals based on moving average crossovers and Relative Strength Index (RSI). It requires the `openbb`, `pandas`, `matplotlib.pyplot`, and `numpy` libraries.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/EthereumTrendAnalysis.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb import obb\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Download historical Ethereum (ETH) to USD price data\neth_data = obb.crypto.price.historical(symbol='ETH-USD', interval='1d', start_date='2024-02-01', end_date='2024-06-01')\n\n# Convert to DataFrame\ndf = eth_data.to_df()\n\n# Calculate moving averages\ndf['MA50'] = df['close'].rolling(window=50).mean()\ndf['MA200'] = df['close'].rolling(window=200).mean()\n\n# Calculate daily returns and volatility\ndf['Daily_Return'] = df['close'].pct_change()\ndf['Volatility'] = df['Daily_Return'].rolling(window=30).std() * np.sqrt(252)\n\n# Visualize the Ethereum price trend with moving averages\nplt.figure(figsize=(12, 6))\nplt.plot(df.index, df['close'], label='Price')\nplt.plot(df.index, df['MA50'], label='50-day MA')\nplt.plot(df.index, df['MA200'], label='200-day MA')\nplt.title('Ethereum Price with Moving Averages (Feb 1 - Jun 1, 2024)')\nplt.xlabel('Date')\nplt.ylabel('Price (USD)')\nplt.legend()\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n# Analyze daily trading volume for Ethereum\nplt.figure(figsize=(12, 6))\nplt.bar(df.index, df['volume'])\nplt.title('Ethereum Trading Volume (Feb 1 - Jun 1, 2024)')\nplt.xlabel('Date')\nplt.ylabel('Volume')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n# Plot the 30-day rolling volatility of Ethereum prices\nplt.figure(figsize=(12, 6))\nplt.plot(df.index[30:], df['Volatility'].iloc[30:])\nplt.title('Ethereum 30-Day Rolling Volatility (Mar 2 - Jun 1, 2024)')\nplt.xlabel('Date')\nplt.ylabel('Volatility')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n# Additional quantitative analysis\nprint(\"\\nQuantitative Analysis:\")\nprint(f\"Current Price: ${df['close'].iloc[-1]:.2f}\")\nprint(f\"Price Change (Start to End): {((df['close'].iloc[-1] / df['close'].iloc[0]) - 1) * 100:.2f}%\")\nprint(f\"Highest Price: ${df['high'].max():.2f}\")\nprint(f\"Lowest Price: ${df['low'].min():.2f}\")\nprint(f\"Average Daily Return: {df['Daily_Return'].mean() * 100:.2f}%\")\nprint(f\"Average Daily Volume: {df['volume'].mean():.0f}\")\nprint(f\"Current Volatility: {df['Volatility'].iloc[-1] * 100:.2f}%\")\n\n# Identify potential buy/sell signals based on moving average crossovers\ndf['Signal'] = np.where(df['MA50'] > df['MA200'], 1, 0)\ndf['Position'] = df['Signal'].diff()\n\nprint(\"\\nTrading Signals based on MA Crossover:\")\nprint(df[df['Position'] == 1][['close', 'MA50', 'MA200']].to_string())  # Buy signals\nprint(df[df['Position'] == -1][['close', 'MA50', 'MA200']].to_string())  # Sell signals\n\n# Calculate Relative Strength Index (RSI)\ndef calculate_rsi(data, window=14):\n    delta = data.diff()\n    gain = (delta.where(delta > 0, 0)).rolling(window=window).mean()\n    loss = (-delta.where(delta < 0, 0)).rolling(window=window).mean()\n    rs = gain / loss\n    return 100 - (100 / (1 + rs))\n\ndf['RSI'] = calculate_rsi(df['close'])\n\nprint(\"\\nRSI Analysis:\")\nprint(f\"Current RSI: {df['RSI'].iloc[-1]:.2f}\")\nprint(\"Overbought periods (RSI > 70):\")\nprint(df[df['RSI'] > 70][['close', 'RSI']].to_string())\nprint(\"\\nOversold periods (RSI < 30):\")\nprint(df[df['RSI'] < 30][['close', 'RSI']].to_string())\n\nprint(\"\\nEthereum price and volume analysis completed!\")\n```\n\n----------------------------------------\n\nTITLE: Plotting Analysis Results\nDESCRIPTION: This function `plot_ma_analysis` generates visualizations for the M&A impact analysis. It creates two subplots: one showing cumulative returns for pre- and post-merger periods, and another comparing key metrics (total return, volatility, beta) for the two periods. It takes the analysis results, acquirer symbol, and announcement date as input.  Matplotlib is used for the plotting.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/mAndAImpact.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef plot_ma_analysis(analysis_results, acquirer_symbol, announcement_date):\n    \"\"\"\n    Creates visualizations for M&A impact analysis\n    \n    Parameters:\n    analysis_results (dict): Results from analyze_ma_impact function\n    acquirer_symbol (str): Acquirer company symbol\n    announcement_date (str): M&A announcement date\n    \"\"\"\n    if analysis_results is None:\n        print(\"No analysis results to plot\")\n        return\n        \n    try:\n        plt.figure(figsize=(15, 10))\n        \n        # Plot 1: Cumulative Returns\n        plt.subplot(2, 2, 1)\n        pre_cum_returns = (1 + analysis_results['pre_merger']['daily_returns']).cumprod()\n        post_cum_returns = (1 + analysis_results['post_merger']['daily_returns']).cumprod()\n        \n        plt.plot(range(-len(pre_cum_returns), 0), pre_cum_returns, label='Pre-merger')\n        plt.plot(range(len(post_cum_returns)), post_cum_returns, label='Post-merger')\n        plt.axvline(x=0, color='r', linestyle='--', label='Announcement')\n        plt.title(f'Cumulative Returns Around M&A Announcement\\n{acquirer_symbol}')\n        plt.xlabel('Days from Announcement')\n        plt.ylabel('Cumulative Return')\n        plt.legend()\n        \n        # Plot 2: Key Metrics Comparison\n        plt.subplot(2, 2, 2)\n        metrics = ['total_return', 'volatility', 'beta']\n        pre_values = [analysis_results['pre_merger'][m] for m in metrics]\n        post_values = [analysis_results['post_merger'][m] for m in metrics]\n        \n        x = np.arange(len(metrics))\n        width = 0.35\n        \n        plt.bar(x - width/2, pre_values, width, label='Pre-merger')\n        plt.bar(x + width/2, post_values, width, label='Post-merger')\n        plt.xticks(x, metrics)\n        plt.title('Key Metrics Comparison')\n        plt.legend()\n        \n        plt.tight_layout()\n        plt.show()\n    except Exception as e:\n        print(f\"Error in plotting: {str(e)}\")\n```\n\n----------------------------------------\n\nTITLE: Search Financial Attributes\nDESCRIPTION: This code searches for financial attributes related to 'marketcap' using the intrinio provider, leveraging `obb.equity.fundamental.search_attributes()`.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/financialStatements.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n(obb.equity.fundamental.search_attributes(\"marketcap\", provider=\"intrinio\").to_df())\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Federal Reserve Provider via pip\nDESCRIPTION: This command installs the OpenBB Federal Reserve extension using pip. This allows access to Federal Reserve data within the OpenBB platform.  It requires pip to be installed and configured.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/federal_reserve/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-federal-reserve\n```\n\n----------------------------------------\n\nTITLE: Starting the OpenBB REST API\nDESCRIPTION: Starts the OpenBB Platform's REST API using Uvicorn. This command initiates the FastAPI application, making it accessible via HTTP.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nuvicorn openbb_core.api.rest_api:app --host 0.0.0.0 --port 8000 --reload\n```\n\n----------------------------------------\n\nTITLE: Listing Available Indicators in OpenBB - Python\nDESCRIPTION: This snippet shows how to retrieve a list of available technical indicators within the OpenBB charting library.  It calls the `data.charting.indicators()` method, which returns a Pydantic model containing all available indicators as fields. The result is displayed as a docstring to the console if not explicitly caught by a variable. No external dependencies are required beyond the OpenBB charting library itself.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/indicators.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata.charting.indicators()\n```\n\n----------------------------------------\n\nTITLE: Visualize Normalized Data with Plotly\nDESCRIPTION: Creates a Plotly visualization of the normalized USD Liquidity Index and S&P 500 data, including titles and axis labels for clarity. This replicates the visualization but uses the normalized data.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/usdLiquidityIndex.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfig = go.Figure()\n\nfig.add_scatter(\n    x=normalized.index, y=normalized[\"USD Liquidity Index\"], name=\"USD Liquidity Index\"\n)\n\nfig.add_scatter(x=normalized.index, y=normalized[\"SP500\"], name=\"S&P 500 Index\")\n\nfig.update_layout(\n    title=\"USD Liquidity Index vs. S&P 500 Index (Normalized)\",\n    title_y=0.90,\n    title_x=0.5,\n    autosize=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Create Query Parameters Model for Provider\nDESCRIPTION: This code snippet creates a query parameters model for a specific data provider, inheriting from `EquityHistoricalQueryParams`.  The model includes any provider-specific query parameters required to make a request to the provider's API. The `Source` comment indicates the API documentation URL.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass <ProviderName>EquityHistoricalQueryParams(EquityHistoricalQueryParams):\n    \"\"\"<ProviderName> Equity Historical Query.\n\n    Source: https://www.<provider_name>.co/documentation/\n    \"\"\"\n\n    # provider specific query parameters if any\n```\n\n----------------------------------------\n\nTITLE: Importing PdfResponseModel from OpenBB Platform API\nDESCRIPTION: This snippet imports the `PdfResponseModel` from the `openbb_platform_api.response_models` module. This model is used for creating PDF widgets in API endpoints.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb_platform_api.response_models import PdfResponseModel\n```\n\n----------------------------------------\n\nTITLE: Calculate Copper/Gold Ratio (Pandas)\nDESCRIPTION: This snippet calculates the copper-to-gold ratio by dividing the 'Copper' column by the 'Gold' column in the DataFrame. The result is stored in a new column named 'Copper/Gold Ratio'.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/copperToGoldRatio.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata[\"Copper/Gold Ratio\"] = data[\"Copper\"] / data[\"Gold\"]\n\ndata.tail(2)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Derivatives Extension via pip\nDESCRIPTION: This command installs the OpenBB Derivatives Extension using pip. It allows users to access derivatives data within the OpenBB Platform. The command should be executed in the extension's folder.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/derivatives/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-derivatives\n```\n\n----------------------------------------\n\nTITLE: API Data Structure\nDESCRIPTION: This JSON snippet illustrates how data should be structured in the request body when using the OpenBB Platform API for data processing commands. It depicts a list of records, where each record is a JSON object containing the necessary data fields.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"open\": 80,\n        \"high\": 80.69,\n        \"low\": 77.37,\n        \"close\": 77.62,\n        \"volume\": 2487300\n    }\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Loading Full Historical Data with OpenBB\nDESCRIPTION: This snippet demonstrates how to load the entire historical data available for a given ticker ('SPY') from the 'yfinance' provider.  It sets a start date far in the past ('1990-01-01') to ensure all available data is retrieved and then displays the first row of the DataFrame.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/loadHistoricalPriceData.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndf_daily = obb.equity.price.historical(\n    symbol=\"spy\", start_date=\"1990-01-01\", provider=\"yfinance\"\n).to_df()\ndf_daily.head(1)\n```\n\n----------------------------------------\n\nTITLE: Screening Equities by Sector on Nasdaq\nDESCRIPTION: This snippet screens equities by sector using the Nasdaq provider, which covers the American market. It filters for stocks in the financial services sector. The length of results and the first 5 rows of the DataFrame are displayed, after converting dtypes.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/findSymbols.ipynb#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# The same can be done with the Nasdaq provider, covering the American market.\nsector_results = obb.equity.screener(\n    sector=\"financial_services\", provider=\"nasdaq\"\n).to_df()\ndisplay(len(sector_results))\nsector_results.head(5).convert_dtypes()\n```\n\n----------------------------------------\n\nTITLE: Launching Custom App with OpenBB API\nDESCRIPTION: This command launches a custom application as an OpenBB Workspace custom backend. The `--app` argument specifies the path to the Python file containing the FastAPI instance.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nopenbb-api --app /Users/some_user/path/to/main.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Picker Widget\nDESCRIPTION: This code snippet implements a date picker widget using a string parameter named \"date\", or including \"_date\" in the name. A `datetime.date` parameter will also work. It demonstrates how the date is received from the Workspace in YYYY-MM-DD format.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\n\n@app.get(\"/hello_date\")\nasync def hello_date(date: str) -> list:\n    \"\"\"Widget description created by docstring.\"\"\"\n    # Workspace returns the date as YYYY-MM-DD\n    return [{\"Hello\": \"Row 1!\"}, {\"Hello\": \"Row 2!\"}]\n\n\n@app.get(\"/hello_date_range\")\nasync def hello_date_range(start: datetime.date, end: datetime.date) -> list:\n    \"\"\"Widget description created by docstring.\"\"\"\n    # Workspace returns the date as YYYY-MM-DD\n    return [{\"Hello\": \"Row 1!\"}, {\"Hello\": \"Row 2!\"}]\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Seeking Alpha Provider\nDESCRIPTION: This command installs the OpenBB Seeking Alpha extension using pip.  It retrieves the package from PyPI and installs it along with any required dependencies.  This extension allows the OpenBB platform to access data from the Seeking Alpha data provider.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/seeking_alpha/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-seeking-alpha\n```\n\n----------------------------------------\n\nTITLE: OpenBB user_settings.json template\nDESCRIPTION: Template for the `user_settings.json` file, showing how to specify API keys for FMP, Polygon, Benzinga, and FRED. Replace \"REPLACE_ME\" with the actual API keys.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/README.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"credentials\": {\n    \"fmp_api_key\": \"REPLACE_ME\",\n    \"polygon_api_key\": \"REPLACE_ME\",\n    \"benzinga_api_key\": \"REPLACE_ME\",\n    \"fred_api_key\": \"REPLACE_ME\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB in Colab (Python)\nDESCRIPTION: This code snippet demonstrates how to install the OpenBB Platform in a Google Colaboratory environment. It uses the `pip` package installer to install the `openbb` package. This is necessary to use OpenBB functionalities within the Colab notebook.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/COMMUNITY_EXAMPLE_TEMPLATE.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install openbb\n```\n\n----------------------------------------\n\nTITLE: Installing the OpenBB ETF Extension\nDESCRIPTION: This command installs the OpenBB ETF extension using pip. This allows users to access the ETF data retrieval commands provided by the extension. It requires pip to be installed and configured correctly.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/etf/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-etf\n```\n\n----------------------------------------\n\nTITLE: Defining a GET Endpoint to Retrieve Form Submissions\nDESCRIPTION: This code defines a GET endpoint `/general_intake` that returns the list of `IntakeForm` instances, representing all submitted forms.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/general_intake\")\nasync def general_intake() -> list[IntakeForm]:\n    return INTAKE_FORMS\n```\n\n----------------------------------------\n\nTITLE: Getting Available Indicators\nDESCRIPTION: This example shows how to get a list of available indicators using the `indicators` attribute of either a command result (`res.charting.indicators`) or the `Charting` class directly (`Charting.indicators()`). This provides insight into the available technical indicators that can be used in visualizations.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/README.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# if you have a command result already\nres.charting.indicators\n\n# or if you want to know in standalone fashion\nfrom openbb_charting import Charting\nCharting.indicators()\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB SEC Provider with pip\nDESCRIPTION: This code snippet provides the command to install the OpenBB SEC Provider extension using pip, the Python package installer. This allows users to access SEC data within the OpenBB Platform.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/sec/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-sec\n```\n\n----------------------------------------\n\nTITLE: Installing pmdarima Package\nDESCRIPTION: Installs the pmdarima package using pip. pmdarima is used for automatic ARIMA parameter selection, which is essential for the ARIMA model implementation.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/currencyExchangeRateForecasting.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n!pip install pmdarima -q\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Query Parameters with Pydantic\nDESCRIPTION: This code snippet defines a standard query parameters model for equity historical data using Pydantic.  It inherits from `QueryParams` and defines required and optional fields with descriptions, leveraging Pydantic features for validation. The `QUERY_DESCRIPTIONS` variable is assumed to be defined elsewhere.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass EquityHistoricalQueryParams(QueryParams):\n    \"\"\"Equity Historical end of day Query.\"\"\"\n    symbol: str = Field(description=QUERY_DESCRIPTIONS.get(\"symbol\", \"\"))\n    start_date: Optional[date] = Field(\n        description=QUERY_DESCRIPTIONS.get(\"start_date\", \"\"), default=None\n    )\n    end_date: Optional[date] = Field(\n        description=QUERY_DESCRIPTIONS.get(\"end_date\", \"\"), default=None\n    )\n```\n\n----------------------------------------\n\nTITLE: Visualizing the efficient frontier\nDESCRIPTION: This code snippet visualizes the efficient frontier by plotting volatility against returns. The plot shows the range of portfolios on the efficient frontier, helping to identify the trade-off between risk and return.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/portfolioOptimizationUsingModernPortfolioTheory.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nplt.figure(figsize=(10,5))\nplt.scatter(volatility, returns, label='Portfolios on efficient frontier')\nplt.legend()\nplt.ylabel('Expected Reward')\nplt.xlabel('Volatiity')\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Package in Python\nDESCRIPTION: This command installs the OpenBB package using pip. The `-q` flag is used for quiet installation, reducing the output displayed during the installation process.  This step is essential as a prerequisite for using OpenBB's data analysis capabilities.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/EthereumTrendAnalysis.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install openbb -q\n```\n\n----------------------------------------\n\nTITLE: Displaying Chart with show() Method\nDESCRIPTION: This snippet shows how to display the generated chart using the `show()` method of the `OBBject`. The `show()` method requires either a Jupyter Notebook environment or a standalone python script with a PyWry backend properly initialized.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nequity_data.show()\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests (Bash)\nDESCRIPTION: This pytest command runs only the integration tests within the `openbb_platform` directory. It filters tests based on the `integration` marker.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\npytest openbb_platform -m integration\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Stockgrid Provider\nDESCRIPTION: This command installs the openbb-stockgrid package using pip. This will allow the OpenBB platform to access data from Stockgrid. It assumes that pip is installed and configured correctly in the user's environment.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/stockgrid/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-stockgrid\n```\n\n----------------------------------------\n\nTITLE: Analyzing M&A Impact\nDESCRIPTION: This function `analyze_ma_impact` analyzes the impact of an M&A announcement on the acquirer's stock performance. It calculates performance metrics for pre- and post-merger periods using the `get_stock_performance` function. It takes acquirer and target symbols, the announcement date, and a window size as input. It returns a dictionary containing the pre-merger, post-merger, and impact (change in metrics) results.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/mAndAImpact.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef analyze_ma_impact(acquirer_symbol, target_symbol, announcement_date, window_size=180):\n    \"\"\"\n    Analyzes the impact of M&A announcement on company performance\n    \n    Parameters:\n    acquirer_symbol (str): Acquirer company symbol\n    target_symbol (str): Target company symbol\n    announcement_date (str): M&A announcement date in YYYY-MM-DD format\n    window_size (int): Analysis window in days before and after announcement\n    \n    Returns:\n    dict: Analysis results including pre and post merger performance metrics\n    \"\"\"\n    try:\n        # Parse dates\n        announcement_dt = datetime.strptime(announcement_date, '%Y-%m-%d')\n        pre_start = (announcement_dt - timedelta(days=window_size)).strftime('%Y-%m-%d')\n        pre_end = announcement_date\n        post_start = announcement_date\n        post_end = (announcement_dt + timedelta(days=window_size)).strftime('%Y-%m-%d')\n        \n        print(f\"Analyzing pre-merger period: {pre_start} to {pre_end}\")\n        pre_merger = get_stock_performance(acquirer_symbol, pre_start, pre_end)\n        \n        if pre_merger is None:\n            print(\"Unable to analyze pre-merger performance\")\n            return None\n        \n        print(f\"Analyzing post-merger period: {post_start} to {post_end}\")\n        post_merger = get_stock_performance(acquirer_symbol, post_start, post_end)\n        \n        if post_merger is None:\n            print(\"Unable to analyze post-merger performance\")\n            return None\n        \n        return {\n            'pre_merger': pre_merger,\n            'post_merger': post_merger,\n            'impact': {\n                'return_change': post_merger['total_return'] - pre_merger['total_return'],\n                'volatility_change': post_merger['volatility'] - pre_merger['volatility'],\n                'beta_change': post_merger['beta'] - pre_merger['beta']\n            }\n        }\n    except Exception as e:\n        print(f\"Error in analysis: {str(e)}\")\n        return None\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Benzinga Provider\nDESCRIPTION: This command installs the OpenBB Benzinga provider extension using pip. It allows the OpenBB Platform to access and utilize data from Benzinga.  This is a one-line installation using the package manager pip.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/benzinga/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-benzinga\n```\n\n----------------------------------------\n\nTITLE: Plotting Price Performance Bar Chart\nDESCRIPTION: This snippet utilizes the `obb.equity.price.performance` endpoint to generate a bar chart displaying the price performance of the SPDR funds (SPY, XLE, XLB, etc.) over different intervals. The chart is displayed using `price_performance.show()`.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/examples.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nprice_performance = obb.equity.price.performance(SPDRS, chart=True)\nprice_performance.show()\n```\n\n----------------------------------------\n\nTITLE: Add Extension as Local Dependency (TOML)\nDESCRIPTION: This TOML snippet shows how to add a local extension as a dependency in the `dev_install.py` file.  It configures the extension's path and enables editable mode.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_32\n\nLANGUAGE: toml\nCODE:\n```\n# If this is a community dependency, add this under \"Community dependencies\",\n# with additional argument optional = true\nopenbb-extension = { path = \"<relative-path-to-the-extension>\", develop = true }\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Index Extension\nDESCRIPTION: This command installs the OpenBB Index extension using pip. It allows users to access global and european index data within the OpenBB Platform. Ensure pip is installed and configured correctly before running this command.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/index/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-index\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Futures Data using yfinance\nDESCRIPTION: This snippet fetches historical price data for a crude oil futures contract using the `yfinance` provider. The futures contract symbol is passed as the first argument to `obb.equity.price.historical()`. The result is converted to a Pandas DataFrame.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/loadHistoricalPriceData.ipynb#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nobb.equity.price.historical(\"CLZ25.NYM\", provider=\"yfinance\").to_df()\n```\n\n----------------------------------------\n\nTITLE: Equity Screener with Finviz (index filter)\nDESCRIPTION: This code filters the equity screener results by specifying the `index` parameter. In this example, it retrieves stocks listed on the NASDAQ index from the Finviz provider.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/finviz/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nres = obb.equity.screener(provider=\"finviz\", index=\"nasdaq\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Pydantic Model for Form Input (GeneralIntake)\nDESCRIPTION: This defines the `GeneralIntake` Pydantic model for a form submission.  It inherits from `FormData` to designate its purpose as a form. It includes fields such as `date_created`, `first_name`, `last_name`, `email`, `dob`, `account_types` and `submit` to capture the form data. The `json_schema_extra` is used to enable multi-select for `account_types`. The submit field is implemented as a button.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nAccountTypes = Literal[\"General Fund\", \"Separately Managed\", \"Private Equity\", \"Family Office\"]\n\nclass GeneralIntake(FormData):\n    \"\"\"Submit a form via POST request.\"\"\"\n\n    date_created: dateType = Field(\n        title=\"Created On\", default_factory=dateType.today\n    )\n    first_name: str = Field(title=\"First Name\")\n    last_name: str = Field(title=\"Last Name\")\n    email: str = Field(title=\"Contact Email\")\n    dob: dateType = Field(\n        title=\"Date Of Birth\",\n    )\n    account_types: Union[AccountTypes, list[AccountTypes]] = Field(\n        title=\"Type Of Account\",\n        json_schema_extra={\n            \"x-widget_config\": {\"multiSelect\": True},\n        },\n    )\n    submit: bool = Field(\n        default=True,\n        title=\"Submit\",\n        type=\"button\",  # This creates a button, when pressed the parameter is sent as True\n    )\n```\n\n----------------------------------------\n\nTITLE: Importing Data and Field from OpenBB Platform API\nDESCRIPTION: This code imports `Data` and `Field` from the `openbb_platform_api.response_models` and `pydantic` modules, respectively. These components are used to define response models with annotated fields for API endpoints.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb_platform_api.response_models import Data\nfrom pydantic import Field\n```\n\n----------------------------------------\n\nTITLE: SARIMAX Prediction and RMSE Calculation (statsmodels, scikit-learn)\nDESCRIPTION: This code snippet forecasts future values using the best SARIMAX model obtained from hyperparameter tuning and calculates the Root Mean Squared Error (RMSE) to evaluate the model's performance on the test data. Requires `best_model` (the fitted SARIMAX model), `test_data`, and the `mean_squared_error` function from scikit-learn.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/currencyExchangeRateForecasting.ipynb#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# sarima_predictions = best_model.forecast(steps=len(test_data))\n\n# # Compute the RMSE\n# rmse = np.sqrt(mean_squared_error(test_data, sarima_predictions))\n# print(f\"SARIMAX Test RMSE: {rmse}\")\n```\n\n----------------------------------------\n\nTITLE: Installing CFTC Extension Locally\nDESCRIPTION: This command installs the openbb-cftc extension locally using pip's editable mode. This is typically used during development to install from a local directory.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/cftc/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB TMX Provider\nDESCRIPTION: This command installs the `openbb-tmx` package using pip. It is a prerequisite for using the TMX data provider within the OpenBB Platform.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/tmx/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-tmx\n```\n\n----------------------------------------\n\nTITLE: Rebuilding OpenBB Python Interface\nDESCRIPTION: This command rebuilds the OpenBB Python interface after installing a new extension, making the extension accessible via the OpenBB package.  It is executed from the command line and ensures the newly installed extension is integrated into the OpenBB environment.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/conda/installer/assets/examples/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nopenbb-build\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB CBOE Provider with pip\nDESCRIPTION: This code snippet demonstrates how to install the `openbb-cboe` package using pip. This installation is necessary to enable the CBOE data provider within the OpenBB Platform. The command installs the package and its dependencies, making the CBOE provider accessible for data retrieval and analysis.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/cboe/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-cboe\n```\n\n----------------------------------------\n\nTITLE: Screening Equities by Exchange and Country on FMP\nDESCRIPTION: This snippet demonstrates how to screen equities by exchange and country using the FMP provider.  It finds companies listed on the American Stock Exchange (AMEX) that are domiciled in China and displays the length and the results of the DataFrame.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/findSymbols.ipynb#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nexchange_results = obb.equity.screener(\n    exchange=\"amex\", country=\"CN\", provider=\"fmp\"\n).to_df()\ndisplay(len(exchange_results))\nexchange_results\n```\n\n----------------------------------------\n\nTITLE: Calculate USD Liquidity Index\nDESCRIPTION: Calculates the USD Liquidity Index by subtracting the WLRRAL and WDTGAL series from the WALCL series, storing the result in a new column named \"USD Liquidity Index\".\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/usdLiquidityIndex.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nliquidity_index[\"USD Liquidity Index\"] = (\n    liquidity_index[\"WALCL\"] - liquidity_index[\"WLRRAL\"] - liquidity_index[\"WDTGAL\"]\n)\n\nliquidity_index.tail(4)\n```\n\n----------------------------------------\n\nTITLE: Running integration tests with pytest\nDESCRIPTION: This command runs pytest to execute the integration tests within the openbb_platform directory. The `-m integration` flag specifically includes integration tests in the run. This is part of the pre-release process.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/pypi/openbb_platform/PUBLISH.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest openbb_platform -m integration\n```\n\n----------------------------------------\n\nTITLE: Install OpenBB Trading Economics Extension\nDESCRIPTION: This command installs the OpenBB Trading Economics extension using pip. It allows the OpenBB SDK to access data from the Trading Economics data provider.  It requires pip to be installed and configured.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/tradingeconomics/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-tradingeconomics\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Bar Chart\nDESCRIPTION: This snippet demonstrates how to create a custom bar chart using the `create_bar_chart()` method within the `openbb-charting` extension. It isolates the one-month price performance data, orients the chart horizontally, and sets custom titles for the chart and axes.  It multiplies the values by 100 to represent percentages.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/examples.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nnew_data = price_performance.to_df().set_index(\"symbol\").multiply(100).reset_index()\nprice_performance.charting.create_bar_chart(\n    data=new_data,\n    x=\"symbol\",\n    y=\"one_month\",\n    orientation=\"h\",\n    title=\"One Month Price Performance\",\n    xtitle=\"Percent (%)\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Platform API\nDESCRIPTION: This command installs the `openbb-platform-api` package using pip. It requires a Python environment between versions 3.9 and 3.12, inclusively. The package can be used standalone for creating new backends.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install openbb-platform-api\n```\n\n----------------------------------------\n\nTITLE: Generating Summary Report\nDESCRIPTION: This function `generate_ma_report` creates a text-based summary report of the M&A impact analysis.  The report includes the acquirer, target, announcement date, and pre/post merger metrics. The function utilizes f-strings for report formatting.  It takes the analysis results, acquirer symbol, target symbol, and announcement date as input and returns a formatted string.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/mAndAImpact.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef generate_ma_report(analysis_results, acquirer_symbol, target_symbol, announcement_date):\n    \"\"\"\n    Generates a summary report of the M&A impact analysis\n    \n    Parameters:\n    analysis_results (dict): Results from analyze_ma_impact function\n    acquirer_symbol (str): Acquirer company symbol\n    target_symbol (str): Target company symbol\n    announcement_date (str): M&A announcement date\n    \n    Returns:\n    str: Formatted report text\n    \"\"\"\n    if analysis_results is None:\n        return \"Unable to generate report due to missing analysis results\"\n        \n    try:\n        report = f\"\"\"\nM&A Impact Analysis Report\n=========================\nAcquirer: {acquirer_symbol}\nTarget: {target_symbol}\nAnnouncement Date: {announcement_date}\n\nPerformance Metrics\n-----------------\nPre-Merger Period:\n- Total Return: {analysis_results['pre_merger']['total_return']:.2f}%\n- Volatility: {analysis_results['pre_merger']['volatility']:.2f}%\n- Beta: {analysis_results['pre_merger']['beta']:.2f}\n\nPost-Merger Period:\n- Total Return: {analysis_results['post_merger']['total_return']:.2f}%\n- Volatility: {analysis_results['post_merger']['volatility']:.2f}%\n- Beta: {analysis_results['post_merger']['beta']:.2f}\n\nImpact Analysis\n--------------\n- Return Impact: {analysis_results['impact']['return_change']:.2f}%\n- Volatility Impact: {analysis_results['impact']['volatility_change']:.2f}%\n- Beta Impact: {analysis_results['impact']['beta_change']:.2f}\n\nSummary\n-------\nThe merger announcement appears to have {\n    'positively' if analysis_results['impact']['return_change'] > 0 else 'negatively'\n} impacted the acquirer's stock performance, with a {\n    abs(analysis_results['impact']['return_change']):.2f}% change in returns.\nRisk metrics show that the company's volatility has {\n    'increased' if analysis_results['impact']['volatility_change'] > 0 else 'decreased'\n} by {abs(analysis_results['impact']['volatility_change']):.2f}% and beta has {\n    'increased' if analysis_results['impact']['beta_change'] > 0 else 'decreased'\n} by {abs(analysis_results['impact']['beta_change']):.2f}.\n\"\"\"\n        return report\n    except Exception as e:\n        return f\"Error generating report: {str(e)}\"\n```\n\n----------------------------------------\n\nTITLE: Installing external packages\nDESCRIPTION: This code snippet installs the necessary external packages, including OpenBB and PyPortfolioOpt, which are required for data retrieval, portfolio optimization, and related calculations.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/portfolioOptimizationUsingModernPortfolioTheory.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install openbb\n!pip install PyPortfolioOpt\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys at Runtime\nDESCRIPTION: Sets API keys for FMP and Polygon at runtime using the OpenBB object. The settings are saved to persist the changes in the user settings file.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from openbb import obb\n>>> obb.user.credentials.fmp_api_key = \"REPLACE_ME\"\n>>> obb.user.credentials.polygon_api_key = \"REPLACE_ME\"\n\n>>> # Persist changes in ~/.openbb_platform/user_settings.json\n>>> obb.account.save()\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Commodity Extension\nDESCRIPTION: This command installs the OpenBB Commodity extension using pip. It requires pip to be installed and configured correctly in the system. The command downloads and installs the package and its dependencies from PyPI.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/commodity/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-commodity\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests (Bash)\nDESCRIPTION: This pytest command executes only the unit tests within the `openbb_platform` directory, excluding integration tests. It uses the `-m` flag to filter tests based on markers.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\npytest openbb_platform -m \"not integration\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Provider to the __init__.py File - Python\nDESCRIPTION: This code snippet shows how to add a new provider to the `__init__.py` file within the provider's directory.  This step makes the provider visible to the OpenBB Platform. It includes defining the provider with its name, website, description, required credentials, and associated fetchers.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"<Provider Name> Provider module.\"\"\"\nfrom openbb_core.provider.abstract.provider import Provider\n\nfrom openbb_<provider_name>.models.equity_historical import <ProviderName>EquityHistoricalFetcher\n\n<provider_name>_provider = Provider(\n    name=\"<provider_name>\",\n    website=\"<URL to the provider website>\",\n    description=\"Provider description goes here\",\n    credentials=[\"api_key\"],\n    fetcher_dict={\n        \"EquityHistorical\": <ProviderName>EquityHistoricalFetcher,\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: List Installed OpenBB Packages\nDESCRIPTION: This snippet uses a shell command to list all installed Python packages that include 'openbb' in their name, demonstrating how OpenBB is structured as a set of modular packages. Requires the `pip` package manager and a shell environment.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/platform_standardization.ipynb#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n!pip list | grep openbb\n```\n\n----------------------------------------\n\nTITLE: Defining Equity Historical Data Model with Pydantic\nDESCRIPTION: This code snippet defines a Pydantic data model, `EquityHistoricalData`, which represents equity historical end-of-day price data. It inherits from the `Data` class and includes fields such as `date`, `open`, `high`, `low`, `close`, `volume`, and an optional `vwap` field. PositiveFloat is used to ensure that numerical values are positive and float types.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass EquityHistoricalData(Data):\n    \"\"\"Equity Historical end of day price Data.\"\"\"\n\n    date: datetime = Field(description=DATA_DESCRIPTIONS.get(\"date\", \"\"))\n    open: PositiveFloat = Field(description=DATA_DESCRIPTIONS.get(\"open\", \"\"))\n    high: PositiveFloat = Field(description=DATA_DESCRIPTIONS.get(\"high\", \"\"))\n    low: PositiveFloat = Field(description=DATA_DESCRIPTIONS.get(\"low\", \"\"))\n    close: PositiveFloat = Field(description=DATA_DESCRIPTIONS.get(\"close\", \"\"))\n    volume: float = Field(description=DATA_DESCRIPTIONS.get(\"volume\", \"\"))\n    vwap: Optional[PositiveFloat] = Field(description=DATA_DESCRIPTIONS.get(\"vwap\", \"\"), default=None)\n```\n\n----------------------------------------\n\nTITLE: Configuring API Keys in user_settings.json\nDESCRIPTION: This JSON snippet shows the structure of the `~/.openbb_platform/user_settings.json` file, where API keys for various data providers (FMP, Polygon, Benzinga, FRED) can be specified. Replace the `REPLACE_ME` placeholders with your actual API keys.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/cli/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"credentials\": {\n    \"fmp_api_key\": \"REPLACE_ME\",\n    \"polygon_api_key\": \"REPLACE_ME\",\n    \"benzinga_api_key\": \"REPLACE_ME\",\n    \"fred_api_key\": \"REPLACE_ME\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting EIA API Key in Current Python Session\nDESCRIPTION: This snippet shows how to set the EIA API key for the current Python session.  This method is useful for testing or when you don't want to save the API key permanently.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/eia/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb import obb\n\nobb.user.credentials.eia_api_key = \"REPLACE_WITH_YOUR_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Installing all OpenBB Extensions\nDESCRIPTION: Installs all available OpenBB extensions using pip. This provides access to all community providers and data sources.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb[all]\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Currency Extension with pip\nDESCRIPTION: This snippet shows how to install the OpenBB Currency extension using pip. It ensures that the extension is available for use within the OpenBB Platform, enabling access to currency exchange data.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/currency/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-currency\n```\n\n----------------------------------------\n\nTITLE: Displaying Heikin Ashi Chart - Python\nDESCRIPTION: This code demonstrates how to create and display a Heikin Ashi candlestick chart using the `obb.equity.price.historical` function with specific chart parameters. It sets the `heikin_ashi` parameter to True and displays the chart using the `show()` method.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/index.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nobb.equity.price.historical(\n    symbol=\"XLK\",\n    start_date=\"2024-01-01\",\n    provider=\"yfinance\",\n    chart=True,\n    chart_params=dict(title=\"XLK YTD\", heikin_ashi=True)\n).show()\n```\n\n----------------------------------------\n\nTITLE: Creating and Installing OpenBB Platform\nDESCRIPTION: This shell script creates a new conda environment named 'my_env' with Python 3.10, activates it, installs Poetry, locks and installs dependencies, and runs the OpenBB build process. It assumes the user is in the directory containing the necessary configuration files.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/conda/installer/assets/openbb_platform_installer/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nconda create -n my_env python=3.10 -y\nconda activate my_env\npip install poetry\npoetry lock\npoetry install\nopenbb-build\n```\n\n----------------------------------------\n\nTITLE: Installing Streamlit and OpenBB Biztoc - Python\nDESCRIPTION: This code snippet demonstrates how to install Streamlit and the OpenBB Biztoc extension using pip. Streamlit is used to create interactive web applications, and openbb-biztoc provides news headline data from Biztoc. This command is run from the terminal to install the specified packages in the active Python environment. It is crucial to have OpenBB Platform already installed.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/README.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install streamlit\npip install openbb-biztoc\n```\n\n----------------------------------------\n\nTITLE: SARIMAX Hyperparameter Tuning using AIC (statsmodels)\nDESCRIPTION: This commented-out code performs hyperparameter tuning for the SARIMAX model by iterating through different combinations of (p, d, q) and (P, D, Q, s) parameters and selecting the combination that minimizes the AIC.  It uses `itertools.product` to generate parameter combinations and `SARIMAX` from `statsmodels` to fit the models.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/currencyExchangeRateForecasting.ipynb#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# # Define the p, d, q parameters to take any value between 0 and 2\n#import itertools\n# p = d = q = range(0, 3)\n\n# # Define the seasonal parameters (P, D, Q, s)\n# P = D = Q = range(0, 2)\n# seasonal_period = [7, 14, 21]  # Seasonal period, e.g., 12 for monthly data\n\n# # Create a list of all possible combinations of p, d, q for non-seasonal and seasonal terms\n# pdq = list(itertools.product(p, d, q))\n# seasonal_pdq = list(itertools.product(P, D, Q, seasonal_period))\n\n# # Search for the best combination of parameters\n# best_aic = np.inf\n# best_pdq = None\n# best_seasonal_pdq = None\n# best_model = None\n\n# for param in pdq:\n#     for seasonal_param in seasonal_pdq:\n#         try:\n#             # Fit the SARIMAX model with the given parameters\n#             model = SARIMAX(train_data,\n#                             order=param,\n#                             seasonal_order=seasonal_param,\n#                             enforce_stationarity=False,\n#                             enforce_invertibility=False)\n#             results = model.fit(disp=False)\n\n#             # Keep track of the best model based on AIC\n#             if results.aic < best_aic:\n#                 best_aic = results.aic\n#                 best_pdq = param\n#                 best_seasonal_pdq = seasonal_param\n#                 best_model = results\n\n#         except Exception as e:\n#             continue\n\n# print(f\"Best SARIMAX model: ARIMA{best_pdq} x {best_seasonal_pdq}12 - AIC: {best_aic}\")\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Certificate\nDESCRIPTION: This command generates a self-signed certificate and associated key for running the API over HTTPS. It uses OpenSSL to create the necessary files `localhost.crt` and `localhost.key`. It requires OpenSSL to be installed.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nopenssl req -x509 -days 3650 -out localhost.crt -keyout localhost.key   -newkey rsa:4096 -nodes -sha256   -subj '/CN=localhost' -extensions EXT -config <( \\\n   printf \"[dn]\\nCN=localhost\\n[req]\\ndistinguished_name = dn\\n[EXT]\\nsubjectAltName=DNS:localhost\\nkeyUsage=digitalSignature\\nextendedKeyUsage=serverAuth\")\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Nasdaq Provider\nDESCRIPTION: This code snippet shows how to install the OpenBB Nasdaq provider using pip.  This is required to use the Nasdaq data within the OpenBB platform. The only dependency is pip itself.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/nasdaq/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-nasdaq\n```\n\n----------------------------------------\n\nTITLE: Dataframe to Data Processing\nDESCRIPTION: This code snippet shows how to convert OBBject results to a Pandas DataFrame, then to a list of records, and finally, apply the data processing command. It highlights the flexibility of using Data processing commands with data from various sources.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> res = obb.equity.price.historical(\"AAPL\")\n>>> my_df = res.to_dataframe() # yes, you can convert your OBBject.results into a dataframe out-of-the-box!\n>>> my_records = df.to_dict(orient=\"records\")\n\n>>> obb.ta.ema(data=my_record)\n\nOBBject\n\nresults: [{'close': 77.62, 'close_EMA_50': None}, {'close': 80.25, 'close_EMA_50': ... # this is a `List[Data]` yet again\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Biztoc Provider with pip\nDESCRIPTION: This command installs the `openbb-biztoc` package, which integrates the Biztoc data provider into the OpenBB Platform. The command should be executed in the directory containing the extension. It uses pip, the Python package installer, to download and install the necessary files and dependencies.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/biztoc/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-biztoc\n```\n\n----------------------------------------\n\nTITLE: Launching OpenBB API in Editable Mode (Shell)\nDESCRIPTION: This shell command shows how to launch the OpenBB API in editable mode using the `--editable` flag.  When launched this way, a file will be stored to disk at the default location. Use `--no-build` to prevent rebuilds.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nopenbb-api --editable --no-build\n```\n\n----------------------------------------\n\nTITLE: Set OpenBB Output Preference (Python)\nDESCRIPTION: Sets the default output type for OpenBB data retrievals to Pandas DataFrame. This configuration simplifies data manipulation and integration with other Python libraries that work well with DataFrames.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/googleColab.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nobb.user.preferences.output_type = \"dataframe\"\n```\n\n----------------------------------------\n\nTITLE: Using Factory Flag for FastAPI Instance\nDESCRIPTION: This command indicates that the FastAPI instance is served via a factory function using the `--factory` flag. The `--app` argument specifies the path to the Python file containing the FastAPI instance and factory function, and `--factory` indicates the usage of a factory function.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nopenbb-api --app some_file.py:main --factory\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Econometrics Extension with pip\nDESCRIPTION: This snippet demonstrates how to install the OpenBB Econometrics extension using pip. It is executed from the extension's directory. This installs the required packages and dependencies for the extension to function within the OpenBB platform. Ensure pip is installed and configured correctly.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/econometrics/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-econometrics\n```\n\n----------------------------------------\n\nTITLE: Running Backtest and Analyzing Performance\nDESCRIPTION: This code iterates through each stock symbol, applies the momentum strategy, performs backtesting, visualizes the results, and prints the final portfolio value, total market return, and total strategy return for each symbol. This provides a comprehensive analysis of the strategy's performance.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/BacktestingMomentumTrading.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfor symbol in symbols:\n    stock_data = combined_data[combined_data['Symbol'] == symbol].copy()\n\n    stock_data = momentum_strategy(stock_data, short_window, long_window)\n    stock_data = backtest(stock_data, initial_capital)\n\n    visualize_backtest(stock_data, symbol)\n\n    final_portfolio_value = stock_data['Portfolio Value'].iloc[-1]\n    print(f\"Final portfolio value for {symbol}: ${final_portfolio_value:.2f}\")\n\n    total_market_return = stock_data['Cumulative Market Return'].iloc[-1] - 1\n    total_strategy_return = stock_data['Cumulative Strategy Return'].iloc[-1] - 1\n    print(f\"Total market return for {symbol}: {total_market_return * 100:.2f}%\"\n    print(f\"Total strategy return for {symbol}: {total_strategy_return * 100:.2f}%\")\n    print(\"=\"*40)\n```\n\n----------------------------------------\n\nTITLE: Defining a POST Endpoint for Form Submission\nDESCRIPTION: This code defines a POST endpoint `/general_intake` that handles form submissions. It receives the `GeneralIntake` data model, converts it to a dictionary, and appends a new `IntakeForm` instance to the `INTAKE_FORMS` list.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nINTAKE_FORMS: list[IntakeForm] = []\n\n\n@app.post(\"/general_intake\")\nasync def general_intake_post(data: GeneralIntake) -> bool:\n    global INTAKE_FORMS\n    try:\n        INTAKE_FORMS.append(IntakeForm(**data.model_dump()))\n        return True\n    except Exception as e:\n        raise e from e\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit App - Python\nDESCRIPTION: This command executes a Streamlit application named 'news.py'. It is essential to navigate to the directory containing the file via terminal and the 'obb' Python environment must be active for it to run successfully. Streamlit will automatically open the app in a web browser.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/README.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nstreamlit run news.py\n```\n\n----------------------------------------\n\nTITLE: Running OpenBB REST API with Uvicorn\nDESCRIPTION: This command starts the OpenBB Platform REST API using Uvicorn, a fast ASGI server. It specifies the host, port, and enables auto-reloading for development.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuvicorn openbb_platform.core.openbb_core.api.rest_api:app --host 0.0.0.0 --port 8000 --reload\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Platform\nDESCRIPTION: Installs the OpenBB Platform using pip. This is necessary to access OpenBB's functionalities for fetching and analyzing financial data.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/currencyExchangeRateForecasting.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install openbb\n```\n\n----------------------------------------\n\nTITLE: Install Rust (Cargo)\nDESCRIPTION: This command installs Rust (Cargo) using the rustup installer. It downloads and executes a script that configures the Rust development environment.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/installation.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncurl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | sh\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Model for Form Submission Records (IntakeForm)\nDESCRIPTION: This code defines the `IntakeForm` data model, which inherits from `Data`, to represent a submission record.  It includes fields such as `contacted`, `date_created`, `first_name`, `last_name`, `email`, `dob`, `account_types`, and `unique_id`. The `ConfigDict(extra=\"ignore\")` is included to ensure no errors are raised.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nclass IntakeForm(Data):\n    \"\"\"Submission Records.\"\"\"\n\n    model_config = ConfigDict(extra=\"ignore\")\n\n    contacted: bool = Field(\n        title=\"Contacted\",\n        default=False,\n    )\n    date_created: dateType = Field(\n        title=\"Created On\",\n    )\n    first_name: str = Field(title=\"First Name\")\n    last_name: str = Field(title=\"Last Name\")\n    email: str = Field(title=\"Contact Email\")\n    dob: dateType = Field(\n        title=\"Date Of Birth\",\n    )\n    account_types: Union[AccountTypes, list[AccountTypes]] = Field(\n        title=\"Account Interest\",\n    )\n    unique_id: uuid.UUID = Field(\n        title=\"Unique ID\",\n        default_factory=uuid.uuid4,\n    )\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB US Government Provider with pip\nDESCRIPTION: This code snippet shows how to install the OpenBB US Government provider using pip.  It allows users to access US Government data through the OpenBB platform. The command installs the `openbb-us-government` package and its dependencies.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/government_us/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-us-government\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB in Google Colab\nDESCRIPTION: This code snippet shows how to install the OpenBB library in a Google Colab environment. It uses the `pip` package manager to install OpenBB with the `all` extra dependencies. After installation, it recommends restarting the runtime.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/impliedEarningsMove.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# If using in Google Colab, install the OpenBB library.\n\n#!pip install openbb[\"all\"]\n\n# Restart the runtime before the next block\n```\n\n----------------------------------------\n\nTITLE: Initializing FastAPI Application\nDESCRIPTION: This code snippet initializes a FastAPI application instance. It imports the `FastAPI` class and creates an instance named `app` which is required for creating API endpoints.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries\nDESCRIPTION: Imports the necessary libraries for data manipulation, numerical computation, visualization, model building, and evaluation. These libraries include openbb, pandas, numpy, matplotlib, seaborn, sklearn, statsmodels, pmdarima, and keras.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/currencyExchangeRateForecasting.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb import obb  # Fetches historical forex data from OpenBB\nimport pandas as pd  # Data manipulation and analysis\nimport numpy as np  # For numerical computations\nimport matplotlib.pyplot as plt  # Data visualization\nimport seaborn as sns\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error  # Evaluation of model performance (e.g., MSE)\nfrom sklearn.preprocessing import MinMaxScaler  # Data normalization (scaling values)\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX  # Seasonal ARIMA forecasting model\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing  # Exponential smoothing for time-series\nimport pmdarima as pm  # Auto-ARIMA for automatic ARIMA parameter selection\nfrom keras.models import Sequential\nfrom keras.layers import LSTM, Dense, Dropout  # LSTM neural network layers for time-series data\n```\n\n----------------------------------------\n\nTITLE: Install Package from PyPI with Pip (Bash)\nDESCRIPTION: This command installs a Python package from PyPI using pip.  `openbb-some_ext` should be replaced with the actual package name.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-some_ext\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB and Matplotlib\nDESCRIPTION: This code snippet installs the OpenBB Platform and Matplotlib using pip. This is necessary to run the analysis if the notebook is executed in an environment like Google Colab where these libraries are not pre-installed.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/mAndAImpact.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install openbb matplotlib\n```\n\n----------------------------------------\n\nTITLE: Installing Individual Extension using Poetry\nDESCRIPTION: This command installs an individual OpenBB extension using Poetry. It assumes the user is within the extension's directory. The `--only-root` flag limits the installation to the root project dependencies.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/conda/installer/assets/examples/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npoetry install --only-root\n```\n\n----------------------------------------\n\nTITLE: Equity Screener with Finviz (preset file)\nDESCRIPTION: This example shows how to use a preset file with the `preset` parameter to configure the equity screener. The preset file \"short_squeeze\" is used to apply specific filters defined in the preset.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/finviz/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nres = obb.equity.screener(provider=\"finviz\", preset=\"short_squeeze\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart - Python\nDESCRIPTION: This snippet shows how to import the necessary modules and initialize an empty `OBBject` instance to create a standalone bar chart.  It demonstrates the usage of `charting.create_bar_chart` without relying on existing data within an `OBBject` instance.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/index.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb import obb\nfrom openbb_core.app.model.obbject import OBBject\ncreate_bar_chart = OBBject(results=None).charting.create_bar_chart\n\ncreate_bar_chart?\n```\n\n----------------------------------------\n\nTITLE: Using charting Attribute\nDESCRIPTION: This example demonstrates how to use the `charting` attribute for accessing the charting functionalities. It retrieves historical price data for AAPL and displays the chart using `res.charting.show()`. This uses the `OBBject` extension methods for charting.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb import obb\nres = obb.equity.price.historical(\"AAPL\")\nres.charting.show()\n```\n\n----------------------------------------\n\nTITLE: Running OpenBB Platform Locally (Bash)\nDESCRIPTION: This command starts the OpenBB Platform locally using Uvicorn, specifying the host, port, and enabling auto-reload. It's a prerequisite for running API interface integration tests.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nuvicorn openbb_platform.core.openbb_core.api.rest_api:app --host 0.0.0.0 --port 8000 --reload\n```\n\n----------------------------------------\n\nTITLE: Import Provider-Specific World News Models\nDESCRIPTION: This code imports provider-specific Pydantic models for world news data from Intrinio and Benzinga. These models extend the standard `WorldNewsData` model with provider-specific fields. Requires the `openbb_intrinio` and `openbb_benzinga` packages.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/platform_standardization.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb_intrinio.models.world_news import IntrinioWorldNewsData\nfrom openbb_benzinga.models.world_news import BenzingaWorldNewsData\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Stock Prices with OpenBB\nDESCRIPTION: Retrieves historical stock prices for Apple (AAPL) using the OpenBB Platform. The code initializes the OpenBB object, fetches the data, converts it to a pandas DataFrame, and prints the first 5 rows.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from openbb import obb\n>>> output = obb.equity.price.historical(\"AAPL\")\n>>> df = output.to_dataframe()\n>>> df.head()\n              open    high     low  ...  change_percent             label  change_over_time\ndate                                ...\n2022-09-19  149.31  154.56  149.10  ...         3.46000  September 19, 22          0.034600\n2022-09-20  153.40  158.08  153.08  ...         2.28000  September 20, 22          0.022800\n2022-09-21  157.34  158.74  153.60  ...        -2.30000  September 21, 22         -0.023000\n2022-09-22  152.38  154.47  150.91  ...         0.23625  September 22, 22          0.002363\n2022-09-23  151.19  151.47  148.56  ...        -0.50268  September 23, 22         -0.005027\n\n[5 rows x 12 columns]\n```\n\n----------------------------------------\n\nTITLE: Creating a CLA object\nDESCRIPTION: This code snippet creates a Critical Line Algorithm (CLA) object using the calculated expected returns and covariance matrix. CLA is used for portfolio optimization, finding the optimal asset weights for a given risk-return profile.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/portfolioOptimizationUsingModernPortfolioTheory.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Create a Critical Line Algorithm (CLA) object using the calculated expected returns and covariance matrix.\ncla = CLA(assets_expected_returns, covariance)\n```\n\n----------------------------------------\n\nTITLE: Uninstall OpenBB Package\nDESCRIPTION: This code uninstalls the `openbb-yfinance` package using `pip`, showcasing how individual OpenBB components can be managed separately. Requires the `pip` package manager and a shell environment.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/platform_standardization.ipynb#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n!pip uninstall openbb-yfinance\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries\nDESCRIPTION: Imports necessary libraries including pandas for data manipulation, numpy for numerical calculations, matplotlib for plotting, and the OpenBB SDK for financial data access.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/sectorRotationStrategy.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom openbb import obb\n```\n\n----------------------------------------\n\nTITLE: Discovering Available Charts\nDESCRIPTION: This snippet shows how to discover available charts using the `Charting.functions()` method.  It imports the `Charting` class from `openbb_charting` and calls the `functions()` method to list the supported endpoints. This provides information on which endpoints support charting.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb_charting import Charting\nCharting.functions()\n```\n\n----------------------------------------\n\nTITLE: Generating API Interface Integration Tests (Bash)\nDESCRIPTION: This command runs a Python script that automatically generates integration tests for the API interface of the OpenBB platform. It requires the OpenBB Platform to be running locally to function correctly.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\npython openbb_platform/extensions/tests/utils/integration_tests_api_generator.py\n```\n\n----------------------------------------\n\nTITLE: Customizing Chart with Indicators in OpenBB - Python\nDESCRIPTION: This snippet demonstrates how to customize an OpenBB chart by applying specific technical indicators, MACD and KC (Keltner Channel) in this case.  It first retrieves the indicator definitions using `data.charting.indicators().dict()`, and gets specific indicator definitions (`macd` and `kc`). These definitions are then included in `chart_params` alongside other chart configurations, such as disabling the default candles and setting a title.  Finally, the chart is generated using `data.charting.to_chart(**chart_params)`.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/indicators.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nindicators = data.charting.indicators().dict()\nmacd=indicators.get(\"macd\")\nkc=indicators.get(\"kc\")\nchart_params=dict(\n    candles=False,\n    title=\"My New Chart\",\n    indicators=(dict(\n        macd=macd,\n        kc=kc,\n    ))\n)\ndata.charting.to_chart(**chart_params)\n```\n\n----------------------------------------\n\nTITLE: Publishing all extensions\nDESCRIPTION: This command executes the publish.py script to publish all OpenBB extensions to PyPI. It utilizes the `--extensions` flag to indicate that all extensions should be published.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/pypi/openbb_platform/PUBLISH.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npython build/pypi/openbb_platform/publish.py --extensions\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Certificate for HTTPS\nDESCRIPTION: This command uses OpenSSL to generate a self-signed certificate and key for enabling HTTPS on the OpenBB Platform API. The certificate is valid for 3650 days and is configured for localhost. It requires OpenSSL to be installed on the system.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/conda/installer/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nopenssl req -x509 -days 3650 -out localhost.crt -keyout localhost.key   -newkey rsa:4096 -nodes -sha256   -subj '/CN=localhost' -extensions EXT -config <( \\\n   printf \"[dn]\\nCN=localhost\\n[req]\\ndistinguished_name = dn\\n[EXT]\\nsubjectAltName=DNS:localhost\\nkeyUsage=digitalSignature\\nextendedKeyUsage=serverAuth\")\n```\n\n----------------------------------------\n\nTITLE: Installing openbb-core via pip\nDESCRIPTION: This command installs the openbb-core package using pip. It's a prerequisite for using the Core extension and other OpenBB Platform components.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/core/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-core\n```\n\n----------------------------------------\n\nTITLE: Scale Copper/Gold Ratio (Pandas)\nDESCRIPTION: This snippet scales the copper-to-gold ratio by multiplying it by 1000.  This is done to make it suitable for plotting on the same y-axis as the Treasury yield, which is typically a larger value.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/copperToGoldRatio.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndata[\"Copper/Gold Ratio\"] = (data[\"Copper\"] / data[\"Gold\"]) * 1000\n\ndata.tail(2)\n```\n\n----------------------------------------\n\nTITLE: Importing FastAPI Query and Typing Libraries\nDESCRIPTION: This snippet imports necessary modules from FastAPI and typing for annotating query parameters. The `Annotated` type hint allows adding metadata to parameters, while `Query` is used to define query parameters with descriptions and titles.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\nfrom fastapi import Query\n```\n\n----------------------------------------\n\nTITLE: Publishing openbb-core package\nDESCRIPTION: This command executes the publish.py script to publish the openbb-core package to PyPI. It uses the `--core` flag to specify that only the core package should be published.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/pypi/openbb_platform/PUBLISH.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npython build/pypi/openbb_platform/publish.py --core\n```\n\n----------------------------------------\n\nTITLE: Importing OpenBB Package\nDESCRIPTION: This Python code imports the OpenBB package, providing access to its functionalities, including any installed extensions. It's a standard import statement used to begin interacting with the OpenBB framework within a Python script or interactive session.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/conda/installer/assets/examples/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb import obb\n```\n\n----------------------------------------\n\nTITLE: Installing BLS Extension via PyPI\nDESCRIPTION: Installs the OpenBB BLS extension using pip.  This command fetches and installs the extension package and its dependencies from the Python Package Index (PyPI). Assumes pip is installed and configured.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/bls/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install openbb-bls\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB EIA Provider Extension from Source\nDESCRIPTION: This snippet demonstrates how to install the OpenBB EIA provider extension from source after cloning the main repository.  It installs the package in regular mode.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/eia/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install .\n```\n\n----------------------------------------\n\nTITLE: Verify OpenBB Hub Credentials (Python)\nDESCRIPTION: Retrieves and displays the user's credentials from the OpenBB Hub to verify successful authentication. This snippet confirms that the login process was successful and the platform can access the user's account information.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/googleColab.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nobb.user.credentials\n```\n\n----------------------------------------\n\nTITLE: Fetching Stock Performance Data\nDESCRIPTION: This function `get_stock_performance` retrieves stock price data from OpenBB and calculates key performance metrics such as total return, volatility, and beta. It takes a stock symbol, start date, and end date as input.  The function also fetches S&P 500 data to calculate beta. It returns a dictionary containing the calculated metrics.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/mAndAImpact.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_stock_performance(symbol, start_date, end_date):\n    \"\"\"\n    Fetches stock price data and calculates key performance metrics\n    \n    Parameters:\n    symbol (str): Stock symbol symbol\n    start_date (str): Start date in YYYY-MM-DD format\n    end_date (str): End date in YYYY-MM-DD format\n    \n    Returns:\n    dict: Performance metrics including returns, volatility, and beta\n    \"\"\"\n    try:\n        # Get historical price data and convert to DataFrame\n        stock_data = obb.equity.price.historical(symbol, start_date, end_date).to_df()\n        \n        if len(stock_data) == 0:\n            print(f\"No data available for {symbol}\")\n            return None\n            \n        # Calculate daily returns using 'close' price\n        stock_data['returns'] = stock_data['close'].pct_change()\n        \n        # Get market data (S&P 500)\n        spy_data = obb.equity.price.historical('SPY', start_date, end_date).to_df()\n        spy_data['returns'] = spy_data['close'].pct_change()\n        \n        # Calculate metrics\n        first_price = stock_data['close'].iloc[0]\n        last_price = stock_data['close'].iloc[-1]\n        total_return = ((last_price / first_price) - 1) * 100\n        volatility = stock_data['returns'].std() * np.sqrt(252) * 100\n        \n        # Calculate beta using aligned data\n        merged_data = pd.DataFrame({\n            'stock': stock_data['returns'],\n            'market': spy_data['returns']\n        }).dropna()\n        \n        if len(merged_data) > 0:\n            beta = np.cov(merged_data['stock'], merged_data['market'])[0][1] / np.var(merged_data['market'])\n        else:\n            beta = np.nan\n        \n        return {\n            'total_return': total_return,\n            'volatility': volatility,\n            'beta': beta,\n            'daily_returns': stock_data['returns']\n        }\n    except Exception as e:\n        print(f\"Error fetching data for {symbol}: {str(e)}\")\n        import traceback\n        print(traceback.format_exc())\n        return None\n```\n\n----------------------------------------\n\nTITLE: Publishing CLI package with Poetry\nDESCRIPTION: This command publishes the OpenBB CLI package to PyPI using Poetry.  It first builds the package and then publishes it from the `cli` directory. Requires the `openbb` dependency in `cli/pyproject.toml` to be updated to the latest version.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/pypi/openbb_platform/PUBLISH.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npoetry publish --build\n```\n\n----------------------------------------\n\nTITLE: Annotated Query Parameters in FastAPI Endpoint\nDESCRIPTION: This snippet shows a FastAPI endpoint with annotated query parameters. `required_param` demonstrates a required date parameter with a title and description, while `not_required_param` showcases a parameter with predefined choices, a default value, and extra configurations for multi-select functionality.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/hello_annotated_params\")\nasync def hello_annotated_params(\n    required_param: Annotated[\n        datetime.date, Query(description=\"The date is required.\", title=\"Required Date\")\n    ],\n    not_required_param: Annotated[\n        Literal[\"Choice 1\", \"Choice 2\", \"Choice 3\"],\n        Query(\n            description=\"Choose from a list of possible choices. The default is, 'Choice 1'\",\n            title=\"Selector\",\n            json_schema_extra={\"x-widget_config\": {\"multiSelect\": True}}  # This lets you select multiple items from dropdown choices.\n        ),\n    ] = \"Choice 1\",\n) -> list:\n    \"\"\"Widget description created by docstring.\"\"\"\n\n    # Do something with the parameters and return the result of work.\n    return [{\"Hello\": \"Row 1!\"}, {\"Hello\": \"Row 2!\"}]\n```\n\n----------------------------------------\n\nTITLE: Accessing widgets.json via URL (Shell)\nDESCRIPTION: This shell command demonstrates how to access the `widgets.json` file through a URL when the `--editable` flag is not set. The host address may vary depending on the server configuration.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nhttp://127.0.0.1:6900/widgets.json\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Extensions\nDESCRIPTION: Installs specific OpenBB extensions and their dependencies using pip. Extensions enhance core functionalities, such as charting and accessing Yahoo Finance data. The first line installs a single extension and the second installs another one.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb[charting]\npip install openbb-yfinance\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom workspace_templates.json Path (Shell)\nDESCRIPTION: This shell command demonstrates how to specify a custom path for the `workspace_templates.json` file using the `--templates-path` argument.  This can be used to customize workspace templates.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\nopenbb-api --templates-path /Users/some_user/path/to/workspace_templates.json\n```\n\n----------------------------------------\n\nTITLE: Install Tuna for Import Time Analysis (Bash)\nDESCRIPTION: This command installs the `tuna` package using pip. Tuna is used to visualize Python import times and identify potential performance bottlenecks.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\npip install tuna\n```\n\n----------------------------------------\n\nTITLE: Check Inheritance of Provider Model\nDESCRIPTION: This snippet verifies that the BenzingaWorldNewsData model inherits from the WorldNewsData model, demonstrating the platform's data standardization approach. It uses the `issubclass` function. Requires the `BenzingaWorldNewsData` and `WorldNewsData` classes to be imported.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/platform_standardization.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nissubclass(BenzingaWorldNewsData, WorldNewsData)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB News Extension with pip\nDESCRIPTION: This command installs the OpenBB News extension using the pip package manager.  It fetches the package from the Python Package Index (PyPI) and installs it into the current Python environment.  The command should be executed within the directory containing the extension's setup files.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/news/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-news\n```\n\n----------------------------------------\n\nTITLE: Annotating Query Parameter Example in FastAPI\nDESCRIPTION: This code demonstrates how to annotate a query parameter in a FastAPI endpoint. It uses `Annotated` along with `Query` to add a title and description to the `my_param` parameter, enhancing API documentation and developer experience.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nmy_param: Annotated[str, Query(title=\"My Title\", description=\"My custom hovertext with detailed information\")] = None\n```\n\n----------------------------------------\n\nTITLE: Running Tests (npm test)\nDESCRIPTION: This command launches the test runner in interactive watch mode, allowing developers to execute and monitor unit tests. It provides feedback and updates tests as code changes are made, facilitating test-driven development workflows. Requires a configured testing environment.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/frontend-components/plotly/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Display DataFrame Head (Pandas)\nDESCRIPTION: This snippet displays the first two rows of the DataFrame to inspect the fetched data.  This allows for confirmation of successful data retrieval and formatting.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/copperToGoldRatio.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata.head(2)\n```\n\n----------------------------------------\n\nTITLE: Searching Equities on SEC\nDESCRIPTION: This snippet retrieves a list of all companies from the SEC using an empty string as the search query. It then prints the number of results and displays the first 10 rows of the DataFrame.  The SEC sorts the list by market cap.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/findSymbols.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nall_companies = obb.equity.search(\"\", provider=\"sec\")\n\nprint(len(all_companies.results))\n\nall_companies.to_df().head(10)\n```\n\n----------------------------------------\n\nTITLE: Adding EIA API Key to user_settings.json\nDESCRIPTION: This snippet shows how to add the EIA API key to the `user_settings.json` file, which is located in the `~/.openbb_platform/` directory. This allows the OpenBB platform to authenticate with the EIA API.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/eia/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"credentials\": {\n        \"eia_api_key\": \"REPLACE_WITH_YOUR_KEY\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running unit tests with pytest\nDESCRIPTION: This command runs pytest to execute the unit tests within the openbb_platform directory. The `-m \"not integration\"` flag excludes integration tests from the run. This is part of the pre-release process.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/pypi/openbb_platform/PUBLISH.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest openbb_platform -m \"not integration\"\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App (npm run eject)\nDESCRIPTION: This command removes the Create React App build dependency, copying all configuration files (webpack, Babel, ESLint, etc.) directly into the project. This grants full control over the build process but is a one-way operation and requires manual maintenance afterwards.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/frontend-components/plotly/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Check NSIS File - Batch\nDESCRIPTION: This command checks the NSIS (Nullsoft Scriptable Install System) file 'assets\\installer.nsi' using `makensis.exe`. The `/V2` flag enables verbose output, providing more detailed information for debugging errors in the NSIS script.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/conda/README.md#_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\nminiconda3\\envs\\constructor\\NSIS\\makensis.exe /V2 assets\\installer.nsi\n```\n\n----------------------------------------\n\nTITLE: Import pandas and OpenBB\nDESCRIPTION: This code snippet imports the pandas library for data manipulation and the OpenBB library, which provides access to financial data.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/financialStatements.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom openbb import obb\n```\n\n----------------------------------------\n\nTITLE: Equity Screener with Finviz (error message)\nDESCRIPTION: This shows the error message that would be returned as a result of passing in the incorrect Index value to the function. Note that this is not executable, rather it is the output of the previous block.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/finviz/README.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nInvalid filter option 'NASDAQ'. Possible filter options: ['Any', 'S&P 500', 'NASDAQ 100', 'DJIA', 'RUSSELL 2000']\n```\n\n----------------------------------------\n\nTITLE: Create Conda Environment - YAML\nDESCRIPTION: This command creates a Conda environment based on the specification defined in the `environments/constructor.yml` file. This YAML file contains the environment's name, dependencies, and other configuration details required for the installer build process.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/conda/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconda env create --file environments/constructor.yml\n```\n\n----------------------------------------\n\nTITLE: Generating Python Interface Integration Tests (Bash)\nDESCRIPTION: This command executes a Python script to generate integration tests specifically for the Python interface of the OpenBB platform. The script handles the automated generation of integration test code.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\npython openbb_platform/extensions/tests/utils/integration_tests_generator.py\n```\n\n----------------------------------------\n\nTITLE: Building for Production (npm run build)\nDESCRIPTION: This command builds the React application for production, bundling and minifying the code for optimal performance. The output is placed in the `build` folder, ready for deployment. Filenames include hashes for cache busting.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/frontend-components/plotly/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Generating Provider Unit Tests in OpenBB\nDESCRIPTION: This bash command executes a Python script to automatically generate unit tests for the OpenBB platform's providers. The script iterates through available fetchers and creates corresponding unit tests.  It is important to run the script from the root of the repository.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/tests/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython openbb_platform/providers/tests/utils/unit_test_generator.py\n```\n\n----------------------------------------\n\nTITLE: Login to OpenBB Hub (Python)\nDESCRIPTION: Authenticates with the OpenBB Hub using a personal access token (PAT). The PAT should be replaced with the user's actual PAT obtained from the OpenBB Hub website. Successful login enables access to stored API keys and other user-specific settings.  This step is not required if the keys are already configured.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/googleColab.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nobb.account.login(pat=\"replace with your PAT\")\n\n# This is not required\n```\n\n----------------------------------------\n\nTITLE: Unit Tests Generator\nDESCRIPTION: This bash command invokes the unit tests generator script, responsible for creating unit tests for fetchers within a specified provider. It requires execution from the repository root and assumes the existence of a 'tests' directory.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npython openbb_platform/providers/tests/utils/unit_tests_generator.py\n```\n\n----------------------------------------\n\nTITLE: Build Installer with Constructor - Bash\nDESCRIPTION: This command builds the installer using Conda Constructor, using the files located in the `installer/.` directory as input. This directory contains the configuration files and assets required to create the final installer package for the OpenBB Platform.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/conda/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconstructor installer/.\n```\n\n----------------------------------------\n\nTITLE: Installing All Example Extensions\nDESCRIPTION: This script automates the installation of all example extensions for OpenBB. It assumes an active OpenBB environment and executes a Python script to perform the installation.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/conda/installer/assets/examples/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython install_examples.py\n```\n\n----------------------------------------\n\nTITLE: Fetch and Resample Historical Market Cap (FMP)\nDESCRIPTION: This code fetches daily historical market cap data for 'TGT' from FMP using `obb.equity.historical_market_cap()`, resamples it to quarterly frequency, and then calculates the percentage change in market cap between '2023-09-30' and '2022-12-31'.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/financialStatements.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndf = obb.equity.historical_market_cap(\n    \"TGT\", start_date=\"2022-01-01\", provider=\"fmp\"\n).to_df()\n\nresampled = df.copy()\nresampled.index = pd.to_datetime(resampled.index)\nresampled = resampled[[\"market_cap\"]]\nresampled = resampled.resample(\"QE\").last()\nresampled.index = resampled.index.astype(str)\ndisplay(resampled)\n(\n    (resampled.loc[\"2023-09-30\"] - resampled.loc[\"2022-12-31\"])\n    / resampled.loc[\"2022-12-31\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Updating OpenBB Platform Packages\nDESCRIPTION: These shell commands update the environment dependencies by locking the poetry configuration and installing the packages. This ensures the environment is up to date with the versions specified in the `poetry.lock` file.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/conda/installer/assets/openbb_platform_installer/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npoetry lock\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Finviz Extension with pip\nDESCRIPTION: This command installs the `openbb-finviz` extension using pip. This extension provides access to Finviz data through the OpenBB platform.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/finviz/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-finviz\n```\n\n----------------------------------------\n\nTITLE: Publish Package to PyPI with Poetry (Bash)\nDESCRIPTION: This command publishes the Python package to PyPI using Poetry. It requires a correctly configured PyPI token.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\npoetry publish\n```\n\n----------------------------------------\n\nTITLE: Extension Views Module Structure\nDESCRIPTION: This snippet provides the suggested structure for the `my_extension_views` module, including the class definition and the charting function for a specific endpoint. The charting function should return a tuple containing an `OpenBBFigure` and a dictionary.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/README.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Views for MyExtension.\"\"\"\n\nfrom typing import Any, Dict, Tuple\n\nfrom openbb_charting.charts.price_historical import price_historical\nfrom openbb_charting.core.openbb_figure import OpenBBFigure\n\n\nclass MyExtensionViews:\n    \"\"\"MyExtension Views.\"\"\"\n\n    @staticmethod\n    def my_extension_price_historical(\n        **kwargs,\n    ) -> Tuple[OpenBBFigure, Dict[str, Any]]:\n        \"\"\"MyExtension Price Historical Chart.\"\"\"\n        return price_historical(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Install OpenBB Extension Locally with Poetry\nDESCRIPTION: This command installs the OpenBB extension locally using Poetry. The `--only-root` flag ensures that only the root package (the extension itself) is installed, without installing development dependencies or other packages.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/conda/installer/assets/examples/empty_provider/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npoetry install --only-root\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: This bash command demonstrates how to run unit tests using pytest and record the results. The '<path_to_the_unit_test_file>' placeholder needs to be replaced with the actual path to the unit test file.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npytest <path_to_the_unit_test_file> --record=all\n```\n\n----------------------------------------\n\nTITLE: Display Units of Measurement\nDESCRIPTION: Iterates through the metadata of each series ID and prints the units of measurement associated with each series.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/usdLiquidityIndex.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfor id in metadata:\n    display(f\"{id}: {metadata[id]['units']}\")\n```\n\n----------------------------------------\n\nTITLE: Rebuilding the OpenBB Python Package\nDESCRIPTION: This command manually triggers the rebuilding of the OpenBB Python package.  This is useful when developing new extensions and wanting to force the package to recognize the changes.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython -c \"import openbb; openbb.build()\"\n```\n\n----------------------------------------\n\nTITLE: Build Package with Poetry (Bash)\nDESCRIPTION: This command uses Poetry to build the Python package, creating `.whl` and `.tar.gz` distribution files in the `/dist` directory. It relies on the `pyproject.toml` file for project configuration.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\npoetry build\n```\n\n----------------------------------------\n\nTITLE: Install OpenBB Object Extension\nDESCRIPTION: This command installs the OpenBB Object extension locally using Poetry. It ensures that only the root package is installed.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/conda/installer/assets/examples/empty_obbject/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npoetry install --only-root\n```\n\n----------------------------------------\n\nTITLE: Rebuild Python Interface\nDESCRIPTION: This Python code snippet rebuilds the Python interface for the OpenBB Platform. It imports the openbb module and calls the build() function to trigger the rebuild process. This is often required after installing in editable mode.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/installation.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport openbb\nopenbb.build()\n```\n\n----------------------------------------\n\nTITLE: Access Intrinio Field Validators\nDESCRIPTION: This accesses the field validators defined in the IntrinioWorldNewsData model using the `__pydantic_decorators__` attribute, which stores Pydantic-specific decorators and metadata. Requires the `IntrinioWorldNewsData` class to be imported.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/platform_standardization.ipynb#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nIntrinioWorldNewsData.__dict__[\"__pydantic_decorators__\"].field_validators\n```\n\n----------------------------------------\n\nTITLE: Inspecting Forex Data\nDESCRIPTION: Prints the information about the DataFrame. This is used to check the data types, non-null values and memory usage.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/currencyExchangeRateForecasting.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprint(forex_df.info())\n```\n\n----------------------------------------\n\nTITLE: Analyze Import Time with Tuna (Bash)\nDESCRIPTION: These commands measure and visualize the import time of the `openbb/__init__.py` file using Python's `-X importtime` option and the `tuna` package.  It outputs the import time data to `import.log` and then opens the tuna visualization tool.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\npython -X importtime openbb/__init__.py 2> import.log\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuna import.log\n```\n\n----------------------------------------\n\nTITLE: Install Wheel Package with Pip (Bash)\nDESCRIPTION: This command installs a Python package from a wheel file using pip. It's used for local testing before publishing to PyPI.  `[FILE_NAME]` needs to be replaced with the actual file name.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\npip install dist/openbb_[FILE_NAME].whl\n```\n\n----------------------------------------\n\nTITLE: Fetch and Display Weighted Average Shares Outstanding\nDESCRIPTION: This code fetches income statement data for 'TGT' from FMP using `obb.equity.fundamental.income()`, extracts the 'weighted_average_basic_shares_outstanding' column, divides it by one million for readability, and then displays the first and last values.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/financialStatements.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata = obb.equity.fundamental.income(\n    \"TGT\", provider=\"fmp\", limit=150, period=\"quarter\"\n).to_df()\n\nshares = data[\"weighted_average_basic_shares_outstanding\"] / 1000000\n\ndisplay(shares.head(1))\n\ndisplay(shares.tail(1))\n```\n\n----------------------------------------\n\nTITLE: Fetcher Class with Optional Credentials - Python\nDESCRIPTION: This example demonstrates how to make credentials optional for a Fetcher class. Setting `require_credentials = False` within the class definition makes the credentials optional even if they are declared on the provider level. This allows the fetcher to operate without requiring credentials to be provided.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass <ProviderName>EquityHistoricalFetcher(\n    Fetcher[\n        <ProviderName>EquityHistoricalQueryParams,\n        List[<ProviderName>EquityHistoricalData],\n    ]\n):\n    \"\"\"Transform the query, extract and transform the data.\"\"\"\n\n    require_credentials = False\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Screening Equities by Country on Nasdaq\nDESCRIPTION: This snippet demonstrates how to screen equities by country using the Nasdaq provider. It is limited to American market listings. It filters for stocks in India and displays the length of results and the first 5 rows of the DataFrame, after converting the dtypes.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/findSymbols.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# The Nasdaq screener is limited to the American market listings.\nresults = obb.equity.screener(country=\"india\", provider=\"nasdaq\").to_df()\ndisplay(len(results))\nresults.head(5).convert_dtypes()\n```\n\n----------------------------------------\n\nTITLE: Calculating expected returns\nDESCRIPTION: This code snippet calculates the annualized expected returns of the crypto assets using the mean historical return. It utilizes the `expected_returns.mean_historical_return` function from PyPortfolioOpt, setting the frequency parameter to 365 to annualize daily data and compounding to False for simple returns.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/portfolioOptimizationUsingModernPortfolioTheory.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Expected returns of crypto assets using the mean historical return.\nassets_expected_returns = expected_returns.mean_historical_return(prices, frequency=365, compounding=False)\nassets_expected_returns\n```\n\n----------------------------------------\n\nTITLE: Import Standard World News Model\nDESCRIPTION: This imports the standard Pydantic model for world news data. The standard model defines the common structure for news data across different providers within the OpenBB platform.  Requires the `openbb_core` package.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/platform_standardization.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb_core.provider.standard_models.world_news import WorldNewsData\n```\n\n----------------------------------------\n\nTITLE: Instantiating Data from Dictionary\nDESCRIPTION: This example demonstrates how to instantiate a Data class from a Python dictionary. It validates that the dictionary is correctly parsed into a Data object, allowing users to process external data with OpenBB data processing commands.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> from openbb_core.provider.abstract.data import Data\n>>> my_data_item_1 = {\"open\": 1, \"high\": 2, \"low\": 3, \"close\": 4, \"volume\": 5, \"date\": \"2020-01-01\"}\n>>> my_data_item_1_as_data = Data.model_validate(my_data_item_1)\n>>> my_data_item_1_as_data\n\nData(open=1, high=2, low=3, close=4, volume=5, date=2020-01-01)\n```\n\n----------------------------------------\n\nTITLE: Searching ETFs on TMX\nDESCRIPTION: This snippet demonstrates how to search for ETFs using the TMX provider. The `obb.etf.search()` method is used with the provider set to \"tmx\". The `to_df()` method converts the results to a Pandas DataFrame, and `iloc[-5:]` selects the last 5 rows.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/findSymbols.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nobb.etf.search(\"gold\", provider=\"tmx\").to_df().iloc[-5:]\n```\n\n----------------------------------------\n\nTITLE: Install OpenBB Charting in Editable Mode\nDESCRIPTION: This command installs the openbb-charting extension in editable mode, allowing for live changes to the source code without reinstalling. It uses pip with the -e flag to create a link to the source directory.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/installation.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Equity Screener with Finviz (error example)\nDESCRIPTION: This code is intended to show error handling for when an invalid filter is provided. This particular example demonstrates passing an incorrect index value to `filters_dict`.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/finviz/README.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nobb.equity.screener(provider=\"finviz\", filters_dict='{\"Index\": \"NASDAQ\"}')\n```\n\n----------------------------------------\n\nTITLE: Running All Tests (Bash)\nDESCRIPTION: This pytest command executes all tests within the `openbb_platform` directory, including both unit and integration tests, without any specific filtering.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\npytest openbb_platform\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB FMP Extension using pip\nDESCRIPTION: This code snippet shows how to install the OpenBB Financial Modeling Prep extension using pip. The command `pip install openbb-fmp` installs the necessary packages and dependencies to enable the FMP provider within the OpenBB Platform. This allows users to access financial data from Financial Modeling Prep through OpenBB.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/fmp/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-fmp\n```\n\n----------------------------------------\n\nTITLE: Exponential Smoothing Model Training and Prediction\nDESCRIPTION: Trains an Exponential Smoothing model on the training data, specifying trend and seasonal components, and makes predictions on the test data. The model is fit and then used to forecast future values.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/currencyExchangeRateForecasting.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n%%time\nexp_smooth_model = ExponentialSmoothing(train_data, trend='add', seasonal='add', seasonal_periods=12)\nexp_smooth_fit = exp_smooth_model.fit()\n\n# Predict using Exponential Smoothing\nexp_smooth_predictions = exp_smooth_fit.forecast(steps=len(test_data))\n```\n\n----------------------------------------\n\nTITLE: Creating Metric Widget Endpoint\nDESCRIPTION: This code snippet creates a FastAPI endpoint that returns a `MetricResponseModel`, which defines a metric widget in OpenBB Workspace, displaying a label, value, and delta. It requires importing `MetricResponseModel` from `openbb_platform_api.response_models`.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb_platform_api.response_models import MetricResponseModel\n\n@app.get(\"/hello_metric\")\nasync def hello_metric() -> MetricResponseModel:\n    \"\"\"Widget description created by docstring.\"\"\"\n    return MetricResponseModel(label=\"Good Vibes Score\", value=100, delta=\"1%\")\n```\n\n----------------------------------------\n\nTITLE: Screening Equities by Country on FMP\nDESCRIPTION: This snippet demonstrates how to screen equities by country using the FMP provider. It filters for stocks in India and displays the length of results and the first 5 rows of the DataFrame, after converting the dtypes.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/findSymbols.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nresults = obb.equity.screener(country=\"IN\", provider=\"fmp\").to_df()\ndisplay(len(results))\nresults.head(5).convert_dtypes()\n```\n\n----------------------------------------\n\nTITLE: Fetch US 10-Year Treasury Yield (OpenBB)\nDESCRIPTION: This snippet retrieves the daily 10-Year US Treasury Yield data from FRED using the `obb.economy.fred_series` function. The data is then assigned to a new column in the main DataFrame.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/copperToGoldRatio.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nus10year = obb.economy.fred_series(\n    \"DGS10\", frequency=\"wem\", start_date=\"2000-08-28\", end_date=\"2024-08-19\"\n).to_df()[[\"DGS10\"]]\n\ndata[\"US 10-Year Constant Maturity\"] = us10year[\"DGS10\"]\n\ndata.head(2)\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries\nDESCRIPTION: This snippet imports necessary libraries including OpenBB, pandas for data manipulation, numpy for numerical calculations, matplotlib for plotting, and datetime for date handling. These libraries are essential for fetching, processing, and visualizing stock data.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/mAndAImpact.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb import obb\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\n```\n\n----------------------------------------\n\nTITLE: Calculate Share Count Change\nDESCRIPTION: This snippet calculates the percentage change in shares outstanding over 20 quarters and the absolute difference in shares outstanding between the 4th last and last reporting periods. It uses `shares.pct_change(20)` and `shares.iloc[-4] - shares.iloc[-1]` for these calculations.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/financialStatements.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndisplay(shares.pct_change(20).iloc[-1])\n\ndisplay(shares.iloc[-4] - shares.iloc[-1])\n```\n\n----------------------------------------\n\nTITLE: Implementing Momentum Strategy\nDESCRIPTION: The `momentum_strategy` function calculates short and long moving averages, generates trading signals based on the crossover of these averages, and determines the trading position. It uses a shift of 1 to avoid look-ahead bias.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/BacktestingMomentumTrading.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef momentum_strategy(data, short_window, long_window):\n    data['Short MA'] = data['close'].rolling(window=short_window, min_periods=1).mean()\n    data['Long MA'] = data['close'].rolling(window=long_window, min_periods=1).mean()\n\n    data['Signal'] = 0\n    signal_values = np.where(\n        data['Short MA'][short_window:] > data['Long MA'][short_window:], 1, -1\n    )\n    data.loc[data.index[short_window:], 'Signal'] = signal_values\n    data['Position'] = data['Signal'].shift(1)\n\n    return data\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Forex Data\nDESCRIPTION: Preprocesses the fetched forex data by converting the index to datetime objects, resampling the data to a daily frequency, and forward-filling missing values to ensure a complete time series.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/currencyExchangeRateForecasting.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nforex_df.index = pd.to_datetime(forex_df.index)\n\nforex_df = forex_df.asfreq('D')  # Resamples the data to a daily frequency ('D' stands for days), ensuring data is indexed daily\n\nforex_df.ffill(inplace=True) # Forward fills missing values to fill gaps in the time series with the last available value\n```\n\n----------------------------------------\n\nTITLE: Analyzing M&A Impact - Python\nDESCRIPTION: This snippet demonstrates how to use the `analyze_ma_impact` function. It passes the acquirer symbol, target symbol, and announcement date to the function.  The function is expected to return the analysis results, which are then stored in the `analysis_results` variable.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/mAndAImpact.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Example usage\nanalysis_results = analyze_ma_impact(acquirer_symbol, target_symbol, announcement_date)\n```\n\n----------------------------------------\n\nTITLE: Access Benzinga World News Model Fields\nDESCRIPTION: This code accesses the fields defined in the BenzingaWorldNewsData Pydantic model.  These fields include both the standard fields inherited from `WorldNewsData` and the provider-specific fields. Requires the `BenzingaWorldNewsData` class to be imported.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/platform_standardization.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nBenzingaWorldNewsData.__fields__\n```\n\n----------------------------------------\n\nTITLE: Adding Visualization to an OpenBB Command\nDESCRIPTION: This configuration snippet shows how to add a visualization to an existing Platform command using a `poetry` plugin in the `pyproject.toml` file.  It defines the entry point for the charting extension. The `openbb_charting_extension` key is mandatory.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/README.md#_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.plugins.\"openbb_charting_extension\"]\nmy_extension = \"openbb_my_extension.my_extension_views:MyExtensionViews\"\n```\n\n----------------------------------------\n\nTITLE: Redrawing Chart as YTD\nDESCRIPTION: This snippet modifies the data from the previous example to display year-to-date (YTD) cumulative returns.  It filters the historical data to start from December 29, 2023, and then redraws the chart using `spdrs.charting.to_chart` with the modified data and a new title.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/examples.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nnew_data = spdrs.to_df().loc[datetime(2023,12,29).date():]\nspdrs.charting.to_chart(data=new_data, title=\"YTD\")\n```\n\n----------------------------------------\n\nTITLE: Access Intrinio World News Model Fields\nDESCRIPTION: This accesses the fields defined in the IntrinioWorldNewsData Pydantic model. These fields include both the standard fields inherited from `WorldNewsData` and the provider-specific fields. Requires the `IntrinioWorldNewsData` class to be imported.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/platform_standardization.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nIntrinioWorldNewsData.__fields__\n```\n\n----------------------------------------\n\nTITLE: Defining Arbitrary Instance Name for FastAPI\nDESCRIPTION: This command defines the FastAPI instance with an arbitrary name using the `--name` argument. The `--app` argument specifies the path to the Python file containing the FastAPI instance, and `--name` specifies the name of the FastAPI instance within that file.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nopenbb-api --app some_file.py --name my_app\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB FRED Provider with pip\nDESCRIPTION: This code snippet demonstrates how to install the `openbb-fred` extension using pip. This installation is necessary to access FRED data within the OpenBB Platform. No specific dependencies are required beyond pip itself being installed.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/fred/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-fred\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Technical Analysis Extension\nDESCRIPTION: This code snippet shows how to install the `openbb-technical` package using pip. This installation is necessary to use the Technical Analysis extension within the OpenBB Platform. The command `pip install openbb-technical` will download and install the extension and its dependencies.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/technical/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-technical\n```\n\n----------------------------------------\n\nTITLE: Access Benzinga Field Validators\nDESCRIPTION: This code accesses the field validators defined in the BenzingaWorldNewsData model using the `__pydantic_decorators__` attribute, which stores Pydantic-specific decorators and metadata. Requires the `BenzingaWorldNewsData` class to be imported.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/platform_standardization.ipynb#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nBenzingaWorldNewsData.__dict__[\"__pydantic_decorators__\"].field_validators\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Futures Data using FMP\nDESCRIPTION: This snippet fetches historical price data for a crude oil futures contract using the `fmp` provider. The futures contract symbol is passed as the first argument to `obb.equity.price.historical()`. The result is converted to a Pandas DataFrame.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/loadHistoricalPriceData.ipynb#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nobb.equity.price.historical(\"CL=F\", provider=\"fmp\").to_df()\n```\n\n----------------------------------------\n\nTITLE: Configure Poetry PyPI Token (Bash)\nDESCRIPTION: This command configures Poetry to use a specific PyPI token for authentication. It stores the token associated with the \"pypi\" repository in Poetry's configuration.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\npoetry config pypi-token.pypi pypi-YYYYYYYY\n```\n\n----------------------------------------\n\nTITLE: Listing Charting Functions - Python\nDESCRIPTION: This code demonstrates how to retrieve a list of available charting functions using the `charting.functions()` method of an OBBject. This allows users to discover which endpoints have associated charting capabilities.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/index.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom openbb import obb\n\ndata = obb.equity.price.historical(\"SPY,QQQ,XLK,BTC-USD\", provider=\"yfinance\")\n\ndata.charting.functions()\n```\n\n----------------------------------------\n\nTITLE: Visualize Data with Plotly\nDESCRIPTION: Visualizes the USD Liquidity Index and the S&P 500 Index using Plotly. It creates a figure with two y-axes, one for the Liquidity Index (in Billions) and another for the S&P 500 Index.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/usdLiquidityIndex.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_scatter(\n    x=liquidity_index.index,\n    y=liquidity_index[\"USD Liquidity Index\"] / 1000,\n    name=\"USD Liquidity Index (Billions)\",\n    yaxis=\"y1\",\n)\n\nfig.add_scatter(\n    x=liquidity_index.index,\n    y=liquidity_index[\"SP500\"],\n    name=\"S&P 500 Index\",\n    yaxis=\"y2\",\n)\n\nfig.update_layout(\n    yaxis=dict(\n        title=\"USD Liquidity Index (Billions)\",\n        side=\"left\",\n        position=0,\n        titlefont=dict(size=12),\n        showgrid=False,\n    ),\n    yaxis2=dict(\n        title=\"S&P 500 Index\",\n        side=\"right\",\n        overlaying=\"y\",\n        position=1,\n        titlefont=dict(size=12),\n    ),\n    title=\"USD Liquidity Index vs. S&P 500 Index\",\n    title_y=0.90,\n    title_x=0.5,\n    autosize=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Access Standard World News Model Fields\nDESCRIPTION: This accesses the fields defined in the standard WorldNewsData Pydantic model. These fields represent the common attributes of world news data across all providers. Requires the `WorldNewsData` class to be imported.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/platform_standardization.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nWorldNewsData.__fields__\n```\n\n----------------------------------------\n\nTITLE: Filtering ADRs on Nasdaq\nDESCRIPTION: This snippet demonstrates how to filter for American Depositary Receipts (ADRs) using the Nasdaq screener. It displays the resulting DataFrame.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/findSymbols.ipynb#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nobb.equity.screener(exsubcategory=\"adr\", provider=\"nasdaq\").to_df()\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries\nDESCRIPTION: This snippet imports necessary libraries: pandas for data manipulation, numpy for numerical operations, matplotlib.pyplot for plotting, and the OpenBB SDK (obb) for financial data.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/BacktestingMomentumTrading.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom openbb import obb\n```\n\n----------------------------------------\n\nTITLE: Equity Screener with Finviz (filters_dict)\nDESCRIPTION: This example demonstrates the usage of the `filters_dict` parameter, which accepts a dictionary to filter the equity screener results. It filters for stocks in the NASDAQ 100 index.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/finviz/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nres = obb.equity.screener(provider=\"finviz\", filters_dict={\"Index\": \"NASDAQ 100\"})\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Tiingo Provider with pip\nDESCRIPTION: This command installs the OpenBB Tiingo provider extension using pip. It allows the OpenBB platform to access data from Tiingo. Ensure that pip is installed and configured correctly before running this command.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/tiingo/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-tiingo\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB DevTools Extension with pip\nDESCRIPTION: This code snippet shows how to install the OpenBB DevTools extension using pip. This command installs the package and all its dependencies. The extension enhances the development environment with tools such as linters and formatters.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/devtools/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-devtools\n```\n\n----------------------------------------\n\nTITLE: Fetch Historical Attributes\nDESCRIPTION: This code fetches historical market capitalization data for 'TGT' from Intrinio using `obb.equity.fundamental.historical_attributes()`. It retrieves quarterly data.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/financialStatements.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmarketcap = obb.equity.fundamental.historical_attributes(\n    symbol=\"TGT\", tag=\"marketcap\", frequency=\"quarterly\", provider=\"intrinio\"\n).to_df()\n\nmarketcap.tail(5)\n```\n\n----------------------------------------\n\nTITLE: Running the App in Development Mode (npm start)\nDESCRIPTION: This command starts the React application in development mode, enabling hot-reloading and console linting. The application becomes accessible in the browser at http://localhost:3000. Changes to the code will automatically trigger a reload in the browser.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/frontend-components/plotly/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing the OpenBB Router Extension using Poetry\nDESCRIPTION: This command installs the OpenBB Router Extension locally using Poetry. The `--only-root` flag ensures that only the root package is installed, which is useful for extension development.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/conda/installer/assets/examples/empty_router/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npoetry install --only-root\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Platform with Specific Groups\nDESCRIPTION: This command installs only the `openbb-core` package and base dependencies using the `main` Poetry group. The `--sync` flag ensures the environment is synchronized to the `poetry.lock` file for the specified group. Other packages will be removed, and only those specified in the `main` group will be included.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/conda/installer/assets/openbb_platform_installer/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npoetry install --only main --sync\n```\n\n----------------------------------------\n\nTITLE: Activate Conda Environment - Bash\nDESCRIPTION: This command activates the Conda environment named 'constructor', which was previously created using the `conda env create` command. Activating the environment ensures that subsequent commands are executed within the context of this specific environment, using the correct Python version and installed packages.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/conda/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda activate constructor\n```\n\n----------------------------------------\n\nTITLE: Install OpenBB Charting from PyPI\nDESCRIPTION: This command installs the openbb-charting extension from PyPI using pip. It retrieves the package from the Python Package Index and installs it into the current Python environment.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/obbject_extensions/charting/installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-charting\n```\n\n----------------------------------------\n\nTITLE: OpenBB Provider Directory Structure\nDESCRIPTION: This code snippet shows the recommended directory structure for an OpenBB provider. It includes a README.md, pyproject.toml, poetry.lock, a tests directory, and a main directory containing models and utilities. This structure helps to organize the provider's code and dependencies.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenbb_platform\n└───providers\n    └───<provider_name>\n        |   README.md\n        │   pyproject.toml\n        │   poetry.lock\n        |───tests\n        └───openbb_<provider_name>\n            │   __init__.py\n            |───models\n            |   |───<some model>.py\n            |   └───...\n            └───utils\n                |───<some helper>.py\n                └───...\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Platform\nDESCRIPTION: Installs the core OpenBB Platform functionalities using pip.  This command installs the base package and the data providers mentioned in the table.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb\n```\n\n----------------------------------------\n\nTITLE: Check NSIS File with More Verbose Output - Batch\nDESCRIPTION: This command checks the NSIS (Nullsoft Scriptable Install System) file 'assets\\installer.nsi' using `makensis.exe`. The `/V4` flag enables very verbose output, providing maximum information for debugging errors in the NSIS script. This level of verbosity is helpful for identifying subtle issues.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/conda/README.md#_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\nminiconda3\\envs\\constructor\\NSIS\\makensis.exe /V4 assets\\installer.nsi\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB Intrinio Provider\nDESCRIPTION: This command installs the OpenBB Intrinio provider extension using pip. It allows the OpenBB Platform to access data from Intrinio.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/providers/intrinio/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openbb-intrinio\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBB package\nDESCRIPTION: Installs the OpenBB package using pip. The `-q` flag suppresses output during installation.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/sectorRotationStrategy.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install openbb -q\n```\n\n----------------------------------------\n\nTITLE: Add Extension as Poetry Dependency (TOML)\nDESCRIPTION: This TOML snippet demonstrates how to add an external extension as a dependency within the `pyproject.toml` file under the `tool.poetry.dependencies` section. It specifies the package name and version constraint.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_33\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.dependencies]\nopenbb-qa = \"^0.0.0a2\"\n```\n\n----------------------------------------\n\nTITLE: Publishing openbb main package\nDESCRIPTION: This command executes the publish.py script to publish the main OpenBB package to PyPI. It employs the `--openbb` flag to specify that the main package should be published.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/pypi/openbb_platform/PUBLISH.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npython build/pypi/openbb_platform/publish.py --openbb\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom widgets.json Path (Shell)\nDESCRIPTION: This shell command demonstrates how to specify a custom path for the `widgets.json` file using the `--widgets-path` argument. This allows you to use a manually created or modified file instead of the default one.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/extensions/platform_api/README.md#_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\nopenbb-api --widgets-path /Users/some_user/path/to/widgets.json\n```\n\n----------------------------------------\n\nTITLE: Screening Equities by Industry on Finviz\nDESCRIPTION: This snippet demonstrates screening equities by industry using the Finviz provider. It filters for companies in the apparel manufacturing industry, and displays the length and the first 5 rows of the DataFrame.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/examples/findSymbols.ipynb#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nindustry_results = obb.equity.screener(\n    industry=\"apparel_manufacturing\", provider=\"finviz\"\n).to_df()\ndisplay(len(industry_results))\nindustry_results.head(5)\n```\n\n----------------------------------------\n\nTITLE: Installing Example Extensions\nDESCRIPTION: These commands activate the OpenBB environment, navigate to the example extensions directory, and run the installation script. This script installs example router, provider, and OBBject extensions.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/conda/installer/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nsource activate obb  # CMD: conda activate obb\ncd extensions/examples\npython install_examples.py\n```\n\n----------------------------------------\n\nTITLE: Data Example\nDESCRIPTION: This snippet shows an example of the Data class in the OpenBB platform, demonstrating how to access the results of a command and how the results are structured as a list of Data objects, each representing a single row of data.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/openbb_platform/CONTRIBUTING.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> res = obb.equity.price.historical(\"AAPL\")\n>>> res.results[0]\n\nAVEquityHistoricalData(date=2023-11-03 00:00:00, open=174.24, high=176.82, low=173.35, close=176.65, volume=79829246.0, vwap=None, adj_close=None, dividend_amount=None, split_coefficient=None)\n```\n\n----------------------------------------\n\nTITLE: Generating extension data for assets\nDESCRIPTION: This command executes a Python script to generate extension data, likely for use in documentation or other external resources. The script is located at `assets/scripts/generate_extension_data.py`.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/pypi/openbb_platform/PUBLISH.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npython assets/scripts/generate_extension_data.py\n```\n\n----------------------------------------\n\nTITLE: Starting OpenBB API with SSL\nDESCRIPTION: This command starts the OpenBB API, specifying the SSL key and certificate files to enable HTTPS. Ensure that the paths to the key and certificate files are correct.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/build/conda/installer/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nopenbb-api --ssl_keyfile localhost.key --ssl_certfile localhost.crt\n```\n\n----------------------------------------\n\nTITLE: Cloning OpenBB Platform Repository\nDESCRIPTION: This code snippet shows how to clone the OpenBB Platform repository directly from GitHub using git. This allows users to access the source code and contribute to the project. It requires git to be installed on the system.\nSOURCE: https://github.com/openbb-finance/openbb/blob/develop/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/OpenBB-finance/OpenBB.git\n```"
  }
]