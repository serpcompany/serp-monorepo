[
  {
    "owner": "stimulus-use",
    "repo": "stimulus-use",
    "content": "TITLE: Dropdown Component Example Using Stimulus Transition Controller and Tailwind in HTML\nDESCRIPTION: This snippet is a complete dropdown UI component built with Tailwind CSS, configured to use Stimulus transition controller via data attributes that apply enter and leave transition classes. It includes ARIA accessible attributes and binds click actions for toggling the dropdown state. The example demonstrates how to utilize data-transition directives for smooth show/hide animations on the dropdown content.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-transition.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div \n  class=\"relative\"\n  data-controller=\"transition click-outside\"\n  data-transition-target=\"content\"\n  data-action=\"click-outside:click:outside->transition#leave\"\n>\n  <div>\n    <button\n      data-action=\"click->dropdown#toggle\"\n      type=\"button\"\n      class=\"inline-flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n    >\n      Dropdown\n    </button>\n  </div>\n  <div\n    class=\"origin-top-right absolute left-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5\"\n    data-dropdown-target=\"content\"\n    data-transition-enter-active=\"transition ease-out duration-300\"\n    data-transition-enter-from=\"transform opacity-0 scale-95\"\n    data-transition-enter-to=\"transform opacity-100 scale-100\"\n    data-transition-leave-active=\"transition ease-in duration-300\"\n    data-transition-leave-from=\"transform opacity-100 scale-100\"\n    data-transition-leave-to=\"transform opacity-0 scale-95\"\n    role=\"menu\"\n    aria-orientation=\"vertical\"\n    aria-labelledby=\"user-menu\"\n  >\n    <a href=\"#\" class=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\" role=\"menuitem\">Your Profile</a>\n    <a href=\"#\" class=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\" role=\"menuitem\">Settings</a>\n    <a href=\"#\" class=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\" role=\"menuitem\">Sign out</a>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Vue-Style Transition Directives with HTML for Stimulus Transitions\nDESCRIPTION: This HTML snippet illustrates how to apply Vue.js inspired data attributes for controlling transition classes on an element. These attributes define the active, start, and end states for entering and leaving transitions. No additional dependencies besides Stimulus with stimulus-use are required. This setup supports TailwindCSS utility classes for ease of styling and creates animated transitions on state changes.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-transition.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\ndata-transition-enter-active=\"transition ease-out duration-300\"\ndata-transition-enter-from=\"transform opacity-0 scale-95\"\ndata-transition-enter-to=\"transform opacity-100 scale-100\"\ndata-transition-leave-active=\"transition ease-in duration-300\"\ndata-transition-leave-from=\"transform opacity-100 scale-100\"\ndata-transition-leave-to=\"transform opacity-0 scale-95\"\n```\n\n----------------------------------------\n\nTITLE: Adding/Removing Class on Hover (Javascript)\nDESCRIPTION: This example demonstrates a practical use case for the `mouseEnter` and `mouseLeave` callbacks provided by `useHover`. It shows how to add a CSS class (e.g., 'active') to the controller's element when the mouse enters and remove it when the mouse leaves, enabling visual feedback directly linked to the hover state.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-hover.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\nimport { useHover } from 'stimulus-use'\n\nexport default class extends Controller {\n  \n  connect() {\n    useHover(this, { element: this.element });\n  }\n  \n  mouseEnter() {\n    // ...\n    this.element.classList.add('active')\n  }\n\n  mouseLeave() {\n    // ...\n    this.element.classList.remove('active')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Composing useWindowResize with a Stimulus Controller in JavaScript\nDESCRIPTION: Example showing how to compose a Stimulus controller with the useWindowResize utility. The controller updates a width target's text content when the window is resized.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-window-resize.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\nimport { useWindowResize } from 'stimulus-use'\n\nexport default class extends Controller {\n  static targets = ['width']\n\n  connect() {\n    useWindowResize(this)\n  }\n\n  windowResize({ width, height, event }) {\n    this.widthTarget.textContent = width\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useMatchMedia in a Stimulus Controller\nDESCRIPTION: Example of implementing useMatchMedia in a Stimulus controller. It shows how to configure media queries and demonstrate the callback methods that are triggered when media query states change.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-match-media.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\nimport { useMatchMedia } from 'stimulus-use'\n\nexport default class extends Controller {\n  connect() {\n    useMatchMedia(this, {\n      mediaQueries: {\n        small: '(min-width: 320px) and (max-width: 769px)',\n        tall: '(min-height: 1000px)',\n        light: '(prefers-color-scheme: light)',\n        landscape: '(orientation: landscape)',\n      }\n    })\n  }\n\n  smallChanged({ name, media, matches, event }) {\n    console.log(\"small media query changed\")\n  }\n\n  isSmall({ name, media, matches, event }) {\n    console.log(\"small media query matches\")\n  }\n\n  notSmall({ name, media, matches, event }) {\n    console.log(\"small media query doesn't match\")\n  }\n\n  // The same for\n  // tall      => tallChanged()      // isTall()      // notTall()\n  // light     => lightChanged()     // isLight()     // notLight()\n  // landscape => landscapeChanged() // isLandscape() // notLandscape()\n}\n```\n\n----------------------------------------\n\nTITLE: Using useClickOutside with Custom Element Option in JavaScript\nDESCRIPTION: Example demonstrating how to invoke `useClickOutside` within the `connect` lifecycle callback of a Stimulus controller. It specifies a custom target element (`this.contentTarget`) instead of the default controller element for click-outside detection.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-click-outside.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconnect() {\n  // passing a custom target as the root element.\n  useClickOutside(this, { element: this.contentTarget })\n}\n```\n\n----------------------------------------\n\nTITLE: Handling click:outside Event with Stimulus Actions (HTML)\nDESCRIPTION: Shows how to declaratively handle the `click:outside` event (prefixed by default with the controller identifier, e.g., `modal:click:outside`) using Stimulus `data-action` attributes in HTML. This example triggers the `close` action on the `modal` controller.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-click-outside.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"modal\" data-controller=\"modal\" data-action=\"modal:click:outside->modal#close\" >\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring useDebounce with custom wait times for individual functions\nDESCRIPTION: This snippet shows how to specify custom wait durations for each debounced function within the static debounces array by including objects with name and wait properties. The useDebounce function is called with an options object to set a global wait time, which can be overridden per function.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-debounce.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default class extends ApplicationController {\\n  static debounces = [\\n    'click',\\n    {\\n      name: 'fetch',\\n      wait: 500\\n    }\\n  ]\\n\\n  connect() {\\n    useDebounce(this, { wait: 100 })\\n  }\\n\\n  click() {\\n    // this function is debounced with a wait time of 100ms.\\n  }\\n\\n  fetch() {\\n    // this function is debounced with a wait time of 500ms.\\n  }\\n\\n  instant() {\\n    //this function is not debounced.\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Using useMutation in a Stimulus controller\nDESCRIPTION: This code snippet demonstrates how to use the `useMutation` helper within a Stimulus controller to observe mutations. It initializes the MutationObserver in the `connect` method with specified options and defines a `mutate` method to handle the mutation records. The mutate method iterates over the MutationRecord entries and logs messages based on the type of mutation observed.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-mutation.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class extends Controller {\n  connect() {\n    useMutation(this, { attributes: true, childList: true, subtree: true })\n  }\n\n  mutate(entries) {\n    for (const mutation of entries) {\n      if (mutation.type === 'childList') {\n        console.log('A child node has been added or removed.');\n      } else if (mutation.target === this.element) {\n        console.log('The root element of this controller was modified.');\n      } else if (mutation.type === 'attributes') {\n        console.log('The ' + mutation.attributeName + ' attribute was modified.');\n      }\n    }\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Extending ClickOutsideController for Automatic Behavior (JavaScript)\nDESCRIPTION: Demonstrates an alternative method by extending the `ClickOutsideController` provided by `stimulus-use`. This approach automatically applies the click-outside detection logic, requiring only the implementation of the `clickOutside` method to handle the event.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-click-outside.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ClickOutsideController } from 'stimulus-use'\n\nexport default class extends ClickOutsideController {\n  clickOutside(event) {\n    // example to close a modal\n    event.preventDefault()\n    this.modal.close()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Stimulus Cart and Item Controllers with Event Binding\nDESCRIPTION: Defines the markup for a cart component controlled by a Stimulus controller listening to a custom event `item:add`. The HTML sets up a button controlled by an item controller that triggers the dispatch of an event when clicked, and a counter display updated by the cart controller. Data attributes configure controllers, actions, and initial counter state in compliance with Stimulus conventions.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/application-controller.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"cart\"\\n     data-action=\"item:add->cart#refreshTotal\"\\n     data-cart-counter=\"0\">\\n\\n  <button data-controller=\"item\" data-action=\"item#add\">\\n    Add\\n  </button>\\n\\n  <div>\\n    <span>No of items : </span>\\n    <span data-cart-target=\"counterView\">0</span>\\n  </div>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Cart Controller Handling Add Events with Stimulus in JavaScript\nDESCRIPTION: Implements a cart Stimulus controller that extends ApplicationController and listens for the 'item:add' event to update the item count. It uses a target to display the counter value, setter and getter for the counter state stored in the controller's data attribute, and a method to render the updated count. The refreshTotal method extracts the quantity from the event detail and increments the counter accordingly, also logging the emitting controller instance.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/application-controller.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n//cart_controller.js\\nimport { ApplicationController } from 'stimulus-use'\\n\\nexport default class extends ApplicationController {\\n  static targets = ['counterView']\\n\\n  refreshTotal(e) {\\n    this.counter += e.detail.quantity\\n    console.log(e.detail.controller) // the emitting item_controller\\n  }\\n\\n  renderCounter() {\\n    this.counterViewTarget.textContent = this.counter\\n  }\\n\\n  set counter(value) {\\n    this.data.set('counter', value)\\n    this.renderCounter()\\n  }\\n\\n  get counter() {\\n    return parseInt(this.data.get('counter'))\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from `useDispatch` to Stimulus Native `dispatch` (JavaScript)\nDESCRIPTION: Demonstrates the code changes required to migrate from the deprecated `stimulus-use` `useDispatch` mixin to the built-in Stimulus `this.dispatch` function. This involves removing the import and initialization of `useDispatch` and wrapping the event payload within a `detail` object when calling `this.dispatch`.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-dispatch.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  import { Controller } from '@hotwired/stimulus'\n- import { useDispatch } from 'stimulus-use'\n\n  export default class extends Controller {\n    connect() {\n-     useDispatch(this)\n    }\n\n    add() {\n-     this.dispatch('add', { quantity: 1 })\n+     this.dispatch('add', { detail: { quantity: 1 } })\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Composing with useMutation\nDESCRIPTION: This code shows an example of composing a Stimulus controller with the `useMutation` helper. The `connect` method initializes the mutation observer to watch for changes to the child list of the controller's element. The `mutate` method is then defined to handle the mutations when they occur.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-mutation.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\nimport { useMutation } from 'stimulus-use'\n\nexport default class extends Controller {\n  connect() {\n    useMutation(this, { childList: true })\n  }\n\n  mutate(entries) {\n    // triggered when the observed element is changed\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Stimulus-use with Custom Controller in JavaScript\nDESCRIPTION: This snippet shows how to extend a pre-built Stimulus-use controller (e.g., IntersectionController) to create a custom controller with specific behavior, such as handling the 'appear' event when an element enters the viewport. Dependencies include the 'stimulus-use' package. It relies on class inheritance and overriding methods to implement custom logic.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/usage.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { IntersectionController } from 'stimulus-use'\n\nexport default class extends IntersectionController {\n  appear(entry) {\n    // triggered when the element appears within the viewport\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending built-in controllers in Stimulus\nDESCRIPTION: This code snippet demonstrates how to extend a built-in controller from stimulus-use. It imports the IntersectionController and extends it to create a custom controller. The appear method is overridden to define custom behavior when the element appears within the viewport.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { IntersectionController } from 'stimulus-use'\n\nexport default class extends IntersectionController {\n  appear(entry) {\n    // triggered when the element appears within the viewport\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Controller and Original Event from `click:outside` Detail (JavaScript)\nDESCRIPTION: Illustrates how to access the source Stimulus controller and the original DOM event from the `detail` property of a custom `click:outside` event dispatched by the `useClickOutside` module. This is achieved by destructuring the `event.detail` object.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/events.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// get the emitting controller and original event for a click:outside event\nconst { controller, originalEvent } = event.detail\n```\n\n----------------------------------------\n\nTITLE: Extending a Controller with WindowFocusController\nDESCRIPTION: This code illustrates extending a controller to inherit `WindowFocusController` functionality.  It imports `WindowFocusController` from `stimulus-use` and then implements the `focus` and `unfocus` methods in the extended class.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-window-focus.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { WindowFocusController } from 'stimulus-use'\n\nexport default class extends WindowFocusController {\n  focus() {\n    // triggered when the window is focused\n  }\n\n  unfocus() {\n    // triggered when the window is unfocused\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useWindowFocus in JavaScript\nDESCRIPTION: This snippet demonstrates the basic usage of the `useWindowFocus` function within a Stimulus controller's `connect` method. It initializes the module to track window focus and trigger focus/unfocus actions.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-window-focus.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nuseWindowFocus(controller, options)\n```\n\n----------------------------------------\n\nTITLE: Composing a Controller with useWindowFocus\nDESCRIPTION: This snippet shows how to use `useWindowFocus` to incorporate window focus tracking into a Stimulus controller. It imports the necessary dependencies and applies the module within the `connect` lifecycle hook, defining the `focus` and `unfocus` methods.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-window-focus.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\nimport { useWindowFocus } from 'stimulus-use'\n\nexport default class extends Controller {\n  connect() {\n    useWindowFocus(this)\n  }\n\n  focus() {\n    // triggered when the window is focused\n  }\n\n  unfocus() {\n    // triggered when the window is unfocused\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Environment-Specific Debugging for StimulusUse in JavaScript\nDESCRIPTION: This code shows how to activate StimulusUse's debug mode only in development environments by evaluating the 'NODE_ENV' environment variable. It assumes your build system (such as webpack) injects environment variables at runtime. Setting 'application.stimulusUseDebug' based on the current environment ensures debugging is active only when appropriate. This pattern is useful for preventing debug logs in production.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/debug.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\napplication.stimulusUseDebug = process.env.NODE_ENV === 'development'\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Meta Tags for Stimulus useMeta\nDESCRIPTION: Illustrates example HTML <head> meta tags with various names and content values that can be accessed by the `stimulus-use` `useMeta` utility in a Stimulus controller. Shows different data types implicitly stored in the content attribute and different naming conventions.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-meta.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n  ...\n  <meta name=\"userId\" content=\"12345678\">\n  <meta name=\"admin\" content=\"true\">\n  <meta name=\"email\" content=\"joe@doe.com\">\n  <meta name=\"snake_case_name\" content=\"are camelized\">\n  ...\n</head>\n```\n\n----------------------------------------\n\nTITLE: Implementing useMemo in a Stimulus Controller (JavaScript)\nDESCRIPTION: Example demonstrating how to integrate `useMemo` into a Stimulus controller. It imports `Controller` from `@hotwired/stimulus` and `useMemo` from `stimulus-use`, defines a getter `normalizedText` to be memoized in the static `memos` array, and calls `useMemo(this)` in the `connect` method. Subsequent calls to `this.normalizedText` will return the cached result after the initial computation.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-memo.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\nimport { useMemo } from 'stimulus-use'\n\nexport default class extends Controller {\n  static memos = ['normalizedText']\n  static targets = ['longText']\n\n  connect() {\n    useMemo(this)\n\n    this.normalizedText // first call normalize the text and cache the result\n    this.normalizedText // second call gets the result from the cache\n  }\n\n  get normalizedText() {\n    return this.longTextTarget.textContent.normalize('NFD')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stimulus Controller Example Using useIdle with Default Options\nDESCRIPTION: This code demonstrates how to incorporate useIdle into a Stimulus controller's connect method with default options, enabling user idle detection. It also defines 'away' and 'back' event handler methods to respond to user inactivity and return.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-idle.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconnect() {\n  useIdle(this)\n}\n\naway(event) {\n  alert('Hey, wake up!')\n}\n\nback(event) {\n  alert('Welcome back!')\n}\n```\n\n----------------------------------------\n\nTITLE: Stimulus Controller Integrating useIdle and Event-Based Actions\nDESCRIPTION: This example illustrates how to integrate useIdle within a Stimulus controller and trigger actions based on custom events such as 'user:away'. It includes an HTML example of data-controller and data-action attributes linked to 'user' controller methods like logout, which respond to user inactivity events.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-idle.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default class extends Controller {\n\n  connect() {\n    useIdle(this)\n  }\n\n  logout(event) {\n    event.preventDefault()\n    // perform logout actions\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Video Controller using useWindowFocus\nDESCRIPTION: This code snippet provides a concrete example of how to use `useWindowFocus` within a Stimulus controller to manage video playback.  It connects the module, and implements `focus` and `unfocus` methods to play and pause the video, respectively. Requires a VideoPlayer class.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-window-focus.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// video_controller.js\n\nexport default class extends Controller {\n  connect() {\n    useWindowFocus(this)\n    this.player = new VideoPlayer()\n  }\n\n  focus() {\n    this.player.play()\n  }\n\n  unfocus() {\n    this.player.pause()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Video Controller Example with useVisibility\nDESCRIPTION: An example showing how to use useVisibility to pause and play a video when the page visibility changes.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-visibility.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// video_controller.js\n\nexport default class extends Controller {\n  connect() {\n    useVisibility(this)\n    this.player = new VideoPlayer()\n  }\n\n  visible() {\n    this.player.play()\n  }\n\n  invisible() {\n    this.player.pause()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Stimulus Actions for Intersection Events (Window) in HTML\nDESCRIPTION: Example HTML using Stimulus data attributes to listen for `appear` and `disappear` events bubbling up to the window object. It triggers `increase` and `decrease` actions on the `counter` controller when these events occur.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-intersection.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div\n  class=\"modal\"\n  data-controller=\"counter\"\n  data-action=\"appear@window->counter#increase disappear@window->counter#decrease\"\n>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Layout for Custom Controller Using Stimulus Transition Without Tailwind\nDESCRIPTION: This snippet presents a simple HTML structure involving a box element and buttons to control its visibility using a custom Stimulus controller with the useTransition mixin. It provides targets and actions to trigger transition methods, expecting the corresponding JavaScript controller and CSS for fade animations.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-transition.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-controller=\"custom-close\">\n  <div data-custom-close-target=\"boxToClose\">\n    This element will fade out and in!\n  </div>\n\n  <button data-action=\"custom-close#close\">Close Box</button>\n  <button data-action=\"custom-close#open\">Open Box</button>\n  <button data-action=\"custom-close#toggle\">Toggle Box</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Extending TargetMutationController with Options (JavaScript)\nDESCRIPTION: This snippet shows how to extend `TargetMutationController` and specify options using a `static options` property. This allows configuring the target mutation tracking. The `targets` option is used to specify which targets to track, in this case, only the 'location' target. Callbacks are defined to handle target add, remove, and change events.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-target-mutation.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TargetMutationController } from 'stimulus-use'\n\nexport default class extends TargetMutationController {\n\n  static targets = [\"location\", \"view\", \"content\"]\n  static options = { targets: [\"location\"] }\n\n  locationTargetAdded(element) {\n    // triggered when a locationTarget is added\n  }\n\n  locationTargetRemoved(element) {\n    // triggered when a locationTarget is removed\n  }\n\n  locationTargetChanged(element) {\n    // triggered when a locationTarget is changed\n  }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic useVisibility Function Reference\nDESCRIPTION: The basic function signature for the useVisibility module with its parameters and options.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-visibility.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseVisibility(controller, options)\n```\n\n----------------------------------------\n\nTITLE: Using Visibility Helper Functions with useIntersection in JavaScript\nDESCRIPTION: Illustrates using helper functions like `this.atLeastOneVisible()` and `this.noneVisible()` provided by `useIntersection` within the `appear` and `disappear` callbacks. These helpers simplify conditional logic based on the visibility state of tracked elements, useful when observing multiple targets.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-intersection.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\nimport { useIntersection } from 'stimulus-use'\n\nexport default class extends Controller {\n  static targets = [ 'menu' ]\n\n  connect() {\n    useIntersection(this)\n  }\n\n  appear() {\n    if (this.atLeastOneVisible()) {\n      this.menuTarget.show()\n    }\n  }\n\n  disappear() {\n    if (this.noneVisible()) {\n      this.menuTarget.hide()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Debug Mode in StimulusUse with JavaScript\nDESCRIPTION: This snippet demonstrates how to globally enable the debug mode for StimulusUse within a Stimulus application by setting the 'stimulusUseDebug' property to 'true' on your application instance. Dependencies include '@hotwired/stimulus', '@hotwired/stimulus-webpack-helpers', and a controller directory. The code initializes the Stimulus application, loads controller definitions dynamically from a specified context, and activates global debugging. No special parameters are required, and the main output is enhanced logging for all StimulusUse mixins throughout the app.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/debug.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Application } from '@hotwired/stimulus'\nimport { definitionsFromContext } from '@hotwired/stimulus-webpack-helpers'\n\nconst application = Application.start()\nconst context = require.context('./controllers', true, /\\.js$/)\napplication.load(definitionsFromContext(context))\n\n// enable StimulusUse debug mode\napplication.stimulusUseDebug = true\n```\n\n----------------------------------------\n\nTITLE: Implementing Stimulus Controller with useMeta\nDESCRIPTION: Demonstrates how to integrate and use the `useMeta` mixin within a Stimulus controller. It shows declaring required meta names using `static metaNames`, invoking `useMeta` in the `connect` method, accessing individual meta values via auto-generated getters (with default `Meta` suffix), and accessing all declared meta values as a single object (`this.metas`). The values are automatically type-casted.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-meta.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\nimport { useMeta } from 'stimulus-use'\n\nexport default class extends Controller {\n  static metaNames = ['userId', 'admin', 'email', 'snake_case_name']\n\n  connect() {\n    useMeta(this)\n\n    // individual getters\n    this.userIdMeta         // 123456 -> Number\n    this.adminMeta          // true -> Boolean\n    this.emailMeta          // \"joe@doe.com\" -> String\n    this.snakeCaseNameMeta  // \"are camelized\"\n\n    // get all metas in one object\n    this.metas\n    // {\n    //   userId: 123456,\n    //   admin: true,\n    //   email: \"joe@doe.com\",\n    //   snakeCaseName: \"are camelized\"\n    // }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending MutationController\nDESCRIPTION: This code illustrates how to extend the `MutationController` class to create a specialized controller that automatically observes mutations. The `options` property is used to configure the MutationObserver, and the `mutate` method is overridden to handle mutation records.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-mutation.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MutationController } from 'stimulus-use'\n\nexport default class extends MutationController {\n\n  options = {\n    childList: true\n  }\n  \n  mutate(entries) {\n    // triggered when the observed element is changed\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Event Handling for Visibility Changes\nDESCRIPTION: HTML markup example showing how to listen for visibility events to trigger controller actions.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-visibility.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"player\" data-controller=\"player\" data-action=\"visible@document->player#play invisible@document->player#pause\">\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Extending VisibilityController\nDESCRIPTION: Example of extending the VisibilityController class to inherit the visibility functionality without explicit composition.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-visibility.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VisibilityController } from 'stimulus-use'\n\nexport default class extends VisibilityController {\n  visible() {\n    // triggered when the page is visible\n  }\n\n  invisible() {\n    // triggered when the page is invisible\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing useTransition Mixin with Stimulus Controller in JavaScript\nDESCRIPTION: This snippet shows the import and application of the useTransition mixin to a Stimulus controller, configuring transition-related options such as CSS classes for enter and leave states, the target element, and visibility control. Dependencies include Stimulus and the stimulus-use library. The snippet allows toggling enter and leave transitions programmatically and requires complementary CSS for animations.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-transition.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus';\nimport { useTransition } from 'stimulus-use';\n\nexport default class extends Controller {\n    static targets = ['boxToClose']\n\n    connect() {\n        useTransition(this, {\n            element: this.boxToCloseTarget,\n            enterActive: 'fade-enter-active',\n            enterFrom: 'fade-enter-from',\n            enterTo: 'fade-enter-to',\n            leaveActive: 'fade-leave-active',\n            leaveFrom: 'fade-leave-from',\n            leaveTo: 'fade-leave-to',\n            hiddenClass: 'd-none',\n            // set this, because the item *starts* in an open state\n            transitioned: true,\n        });\n    }\n\n    close() {\n        this.leave();\n    }\n\n    open() {\n        this.enter();\n    }\n\n    toggle() {\n        this.toggleTransition();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Composing useTargetMutation with Specific Targets (JavaScript)\nDESCRIPTION: This snippet shows how to use `useTargetMutation` with the `targets` option to track mutations for a specific set of targets (in this case, \"location\").  It imports the necessary modules from `@hotwired/stimulus` and `stimulus-use`, defines the targets, and initializes `useTargetMutation` in the `connect` method.  Callbacks are defined to handle added, removed, and changed events for the specified target.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-target-mutation.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\nimport { useTargetMutation } from 'stimulus-use'\n\nexport default class extends Controller {\n\n  static targets = [\"location\", \"content\", \"view\"];\n\n  connect() {\n    useTargetMutation(this, { targets: [\"location\"] }) // only track mutations of \"location\" target\n  }\n\n  locationTargetAdded(element) {\n    // triggered when a locationTarget is added\n  }\n\n  locationTargetRemoved(element) {\n    // triggered when a locationTarget is removed\n  }\n\n  locationTargetChanged(element) {\n    // triggered when a locationTarget is changed\n  }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Resize Behavior in Stimulus Controller Using useResize Function in JavaScript\nDESCRIPTION: This snippet demonstrates how to compose the useResize behavior into a Stimulus controller by calling useResize with the controller instance. It requires the Stimulus Controller base class and the useResize function imported from 'stimulus-use'. The controller defines a resize handler which receives a size object, specifically extracting the width to update the target element’s text content. The snippet assumes the presence of a target named 'width' and auto-observes the controller's root element by default.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-resize.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\\nimport { useResize } from 'stimulus-use'\\n\\nexport default class extends Controller {\\n  static targets = ['width']\\n\\n  connect() {\\n    useResize(this)\\n  }\\n\\n  resize({ width }) {\\n    this.widthTarget.textContent = width\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Multiple Behaviors in Stimulus Controller Using 'use' Functions in JavaScript\nDESCRIPTION: This snippet demonstrates how to compose multiple behaviors by importing 'useIntersection' and 'useResize' functions from 'stimulus-use' and applying them within a Stimulus controller's connect method. It handles events such as element intersection (appearance in viewport) and resize. Dependencies include 'stimulus-use' and '@hotwired/stimulus'. The approach promotes modular behavior addition and event management in Stimulus controllers.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/usage.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\nimport { useIntersection, useResize } from 'stimulus-use'\n\nexport default class extends Controller {\n  connect() {\n    useIntersection(this)\n    useResize(this)\n  }\n\n  appear(entry) {\n    // triggered when the element appears within the viewport\n  }\n\n  resize({ height, width }) {\n    // triggered when the element is resized\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Composing with useVisibility\nDESCRIPTION: Example of composing a Stimulus controller with useVisibility by importing the function and using it in the connect method.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-visibility.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\nimport { useVisibility } from 'stimulus-use'\n\nexport default class extends Controller {\n  connect() {\n    useVisibility(this)\n  }\n\n  visible() {\n    // triggered when the page is visible\n  }\n\n  invisible() {\n    // triggered when the page is invisible\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing useTargetMutation in Stimulus Controller (JavaScript)\nDESCRIPTION: This snippet demonstrates how to initialize the `useTargetMutation` utility within a Stimulus controller's `connect` method. It tracks mutations for all defined targets and defines callback functions for when targets are added, removed, or changed. The callback functions receive the target node as a parameter.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-target-mutation.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class extends Controller {\n\n  static targets = [\"location\", \"content\", \"view\"]\n\n  connect() {\n    useTargetMutation(this)\n  }\n\n  locationTargetAdded(element) {\n    console.log('A new location was added!')\n  }\n\n  locationTargetRemoved(element) {\n    console.log('A location was removed!')\n  }\n\n  locationTargetChanged(element) {\n    console.log('A location was changed!')\n  }\n\n  contentTargetAdded(element) {\n    console.log('A content target was added!')\n  }\n\n  contentTargetRemoved(element) {\n    console.log('A content target was removed!')\n  }\n\n  contentTargetChanged(element) {\n    console.log('A content target was changed!')\n  }\n\n  viewTargetAdded(element) {\n    console.log('A view target was added!')\n  }\n\n  viewTargetRemoved(element) {\n    console.log('A view target was removed!')\n  }\n\n  viewTargetChanged(element) {\n    console.log('A view target was changed!')\n  }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Extending Stimulus ResizeController to Handle Resize Events in JavaScript\nDESCRIPTION: This snippet shows how to extend the provided ResizeController class from 'stimulus-use' to inherit resize observation behavior. The extending controller defines the same resize handler method that updates the content of a target element named 'width'. It requires importing ResizeController from 'stimulus-use' and assumes that ResizeController internally manages the Resize Observer setup. The approach provides an alternative to composition by leveraging inheritance for resize event handling.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-resize.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ResizeController } from 'stimulus-use'\\n\\nexport default class extends ResizeController {\\n  static targets = ['width']\\n\\n  resize({ width }) {\\n    this.widthTarget.textContent = width\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Using useHotkeys with advanced hotkey options in Stimulus\nDESCRIPTION: Example of configuring hotkeys with additional options like scope, key event types, and splitKey delimiter. The handler methods are assigned to various hotkeys, demonstrating more sophisticated setup including filters and event specifics.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-hotkeys.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\nimport { useHotkeys } from 'stimulus-use/hotkeys'\n\nexport default class extends Controller {\n  connect() {\n    useHotkeys(this, {\n      hotkeys: {\n        '/': {\n          handler: this.singleKeyHandler\n        },\n        'cmd+a': {\n          handler: this.metaKeyHandler\n        },\n        f: {\n          handler: this.scopeHandler,\n          options: {\n            scope: 'files'\n          }\n        },\n        b: {\n          handler: this.inputHandler\n        },\n        c: {\n          handler: this.keyUpHandler,\n          options: {\n            keydown: false,\n            keyup: true\n          }\n        },\n        'ctrl-d': {\n          handler: this.splitKeyHandler,\n          options: {\n            splitKey: '-'\n          }\n        }\n      },\n      filter: this.filter\n    })\n  }\n\n  singleKeyHandler(e) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Controlling Observation with useIntersection in JavaScript\nDESCRIPTION: Shows how to capture the `observe` and `unobserve` functions returned as an array by the `useIntersection()` call. This allows for manual control over the observation lifecycle, demonstrated here by calling `this.unobserve()` within the `appear` callback to stop observing after the first intersection.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-intersection.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class extends Controller {\n  connect() {\n    const [observe, unobserve] = useIntersection(this)\n    this.observe = observe\n    this.unobserve = unobserve\n  }\n\n  appear() {\n    // observe and emit `appear()` callback just once\n    this.unobserve()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useApplication Helper with Stimulus Controller in JavaScript\nDESCRIPTION: Demonstrates how to apply the useApplication function inside a Stimulus controller's connect method to enhance the controller's capabilities. It requires importing useApplication from 'stimulus-use' and passing the current controller instance ('this'). This setup provides access to helper methods and properties like isPreview, isConnected, and dispatch. The snippet shows initialization with default options and highlights the overwriteDispatch option for legacy event dispatching behavior.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/application-controller.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\\nimport { useApplication } from 'stimulus-use'\\n\\nexport default class extends Controller {\\n  connect() {\\n    useApplication(this)\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Cart Controller Receiving Events for Cart Example (JavaScript)\nDESCRIPTION: JavaScript code for the `cart_controller`. It defines a target `counterView`. The `refreshTotal` method acts as the event listener for `item:add`, accessing the payload via `e.detail.quantity` to update a counter. Getter/setter methods manage the counter state stored in a data attribute and trigger rendering.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-dispatch.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n//cart_controller.js\nimport { ApplicationController } from 'stimulus-use' // Assumes ApplicationController is a base class\n\nexport default class extends ApplicationController {\n  static targets = ['counterView']\n\n  refreshTotal(e) {\n    this.counter += e.detail.quantity\n    console.log(e.detail.controller) // the emitting item_controller\n  }\n\n  renderCounter() {\n    this.counterViewTarget.textContent = this.counter\n  }\n\n  set counter(value) {\n    this.data.set('counter', value)\n    this.renderCounter()\n  }\n\n  get counter() {\n    // Ensure the counter is treated as a number\n    return parseInt(this.data.get('counter') || '0', 10)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Alpine-Style Transition Directives with HTML for Stimulus Transitions\nDESCRIPTION: This HTML snippet demonstrates Alpine.js style attributes for transitions, defining classes for the starting and ending states of entering and leaving phases of DOM elements. It leverages the stimulus-use library with Stimulus and enables transitions using Tailwind or any CSS classes. These directives are compatible with the underlying transition mechanism for animating element appearance and disappearance.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-transition.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\ndata-transition-enter-class=\"transform opacity-0 scale-95\"\ndata-transition-enter-start-class=\"transition ease-out duration-300\"\ndata-transition-enter-end-class=\"transform opacity-100 scale-100\"\ndata-transition-leave-class=\"transform opacity-100 scale-100\"\ndata-transition-leave-start-class=\"transition ease-in duration-300\"\ndata-transition-leave-end-class=\"transform opacity-0 scale-95\"\n```\n\n----------------------------------------\n\nTITLE: Custom CSS for Fade Transitions Controlling Opacity in CSS\nDESCRIPTION: This CSS snippet defines classes used for transitioning opacity during enter and leave phases as configured in the Stimulus controller example. It includes transition duration and easing properties for fade-in and fade-out effects and a hidden display class. These styles must be included in the project to realize visible animations tied to transition classes applied by the useTransition mixin.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-transition.md#_snippet_4\n\nLANGUAGE: CSS\nCODE:\n```\n.fade-enter-active, .fade-leave-active {\n    transition: opacity 500ms;\n}\n.fade-enter-from, .fade-leave-to {\n    opacity: 0;\n}\n.fade-enter-to, .fade-leave-from {\n    opacity: 1;\n}\n.d-none {\n    display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Using stimulus-use via UMD Script Tags (HTML/JavaScript)\nDESCRIPTION: Demonstrates including Stimulus and StimulusUse via UMD script tags directly in an HTML file. It shows how to start a Stimulus application and register a controller that uses the `appear` mixin from the globally available `StimulusUse` object within the `connect` lifecycle callback.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/getting_started.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"https://unpkg.com/stimulus/dist/stimulus.umd.js\"></script>\n  <script src=\"https://unpkg.com/stimulus-use/dist/index.umd.js\"></script>\n  <script>\n    (() => {\n      const application = Stimulus.Application.start()\n\n      application.register(\"hello\", class extends Stimulus.Controller {\n        connect(){\n          StimulusUse.appear(this)\n        }\n\n        appear(){\n          ...\n        }\n      })\n    })()\n  </script>\n</head>\n<body>\n  <div data-controller=\"hello\">\n    …\n  </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: HTML Example for Listening to 'user:away' Event Triggered by useIdle\nDESCRIPTION: This snippet provides an HTML element setup where a Stimulus controller 'user' listens for the custom 'user:away' event, and triggers the logout action when the event occurs. It illustrates how to connect user idle detection with Stimulus actions through data attributes.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-idle.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-controller=\"user\" data-action=\"user:away->user#logout\">\n   ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Prefixing in JavaScript\nDESCRIPTION: This JavaScript snippet illustrates the use of the `eventPrefix` option in `useWindowFocus`. By setting `eventPrefix` to `false`, it disables the default prefixing of events with the controller's identifier. This allows to customize the events.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-window-focus.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// application_controller.js\n\nexport default class extends Controller {\n  connect() {\n    useWindowFocus(this, { eventPrefix: false })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Option for Individual StimulusUse Mixins with JavaScript\nDESCRIPTION: This snippet illustrates how to enable debugging for a specific StimulusUse mixin by passing a 'debug' option to the mixin initializer (such as 'useMatchMedia'). The 'debug: true' parameter activates debugging features only for the selected mixin instance, leaving global debug settings unaffected. Useful for isolating debug logs to troubleshooting specific functionality. Requires the relevant mixin (e.g., useMatchMedia) and a proper Stimulus context.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/debug.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nuseMatchMedia(this, { debug: true })\n```\n\n----------------------------------------\n\nTITLE: Configuring useThrottle with Per-Function Wait Option in Stimulus JS\nDESCRIPTION: Illustrates how to set specific wait times for individual throttled methods. The `static throttles` array can contain objects with `name` and `wait` properties. This per-function `wait` value overrides any global `wait` option set in the `useThrottle` function call for that specific method.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-throttle.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class extends ApplicationController {\n  static throttles = [\n    'click',\n    {\n      name: 'fetch',\n      wait: 500\n    }\n  ]\n\n  connect() {\n    useThrottle(this, { wait: 100 })\n  }\n\n  click() {\n    // this function is throttled with a wait time of 100ms.\n  }\n\n  fetch() {\n    // this function is throttled with a wait time of 500ms.\n  }\n\n  instant() {\n    // this function is not throttled.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Item Controller Dispatching Custom Event in JavaScript using ApplicationController\nDESCRIPTION: Defines an item Stimulus controller extending ApplicationController that dispatches an 'add' custom event with a quantity payload when the add method is called. This allows communication with other controllers such as the cart controller that listens for the 'item:add' event. The dispatch method facilitates sending events with detail data to Stimulus event listeners in an organized manner.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/application-controller.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n//item_controller.js\\nimport { ApplicationController } from 'stimulus-use'\\n\\nexport default class extends ApplicationController {\\n  add() {\\n    this.dispatch('add', { quantity: 1 })\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Composing useIntersection within a Stimulus Controller in JavaScript\nDESCRIPTION: Demonstrates how to use the `useIntersection` hook within the `connect` lifecycle method of a Stimulus controller. It sets up the `appear` and `disappear` callback methods, which are automatically triggered when the controller's element intersects or leaves the viewport (or the specified root element).\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-intersection.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\nimport { useIntersection } from 'stimulus-use'\n\nexport default class extends Controller {\n  connect() {\n    useIntersection(this)\n  }\n\n  appear(entry, observer) {\n    // callback automatically triggered when the element\n    // intersects with the viewport (or root Element specified in the options)\n  }\n\n  disappear(entry, observer) {\n    // callback automatically triggered when the element\n    // leaves the viewport (or root Element specified in the options)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Composing with mixins in Stimulus\nDESCRIPTION: This code snippet demonstrates how to compose a Stimulus controller using mixins from stimulus-use. It imports the necessary modules, applies the mixins in the connect method, and defines callback functions for the mixins. The `useIntersection` and `useResize` mixins are used to add intersection and resize observation capabilities to the controller.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\nimport { useIntersection, useResize } from 'stimulus-use'\n\nexport default class extends Controller {\n  connect() {\n    useIntersection(this)\n    useResize(this)\n  }\n\n  appear(entry) {\n    // triggered when the element appears within the viewport\n  }\n\n  resize({ height, width }) {\n    // trigered when the element is resized\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing useDebounce with default options in Stimulus Controller\nDESCRIPTION: This snippet demonstrates how to import and set up the useDebounce utility within a Stimulus controller, including defining the functions to debounce via the static debounces array and invoking useDebounce in the connect() method. This setup enables automatic debouncing of specified functions with default wait time.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-debounce.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ApplicationController, useDebounce } from 'stimulus-use'\\n\\nexport default class extends ApplicationController {\\n  static debounces = ['add']\\n\\n  connect() {\\n    useDebounce(this)\\n  }\\n\\n  add() {\\n    // this function is debounced.\\n  }\\n\\n  instant() {\\n    //this function is not debounced.\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Stimulus Controller with useHover (Javascript)\nDESCRIPTION: This example demonstrates the standard way to integrate `useHover` into a Stimulus controller using composition. It imports the necessary components, calls `useHover(this, { element: this.element })` within the `connect` method to enable hover tracking, and defines the `mouseEnter` and `mouseLeave` callback methods that will be triggered by hover events on the controller's element.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-hover.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\nimport { useHover } from 'stimulus-use'\n\nexport default class extends Controller {\n\n  connect() {\n    useHover(this, { element: this.element });\n  }\n\n  mouseEnter() {\n    // ...\n  }\n\n  mouseLeave() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: UseThrottle Mixin for Throttling Functions in Stimulus Use\nDESCRIPTION: Provides a mechanism to throttle an array of functions specified in 'throttles', limiting their invocation rate to enhance performance. Dependencies include throttle logic implementations. The 'throttles' parameter is an array of functions to be throttled; the output ensures these functions are called at most once within the throttle interval.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/optimization.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## Optimization\n\n  A set of mixin to optimize performances.\n\n  | Mixin| Description |\n  |------|-------------|\n  |[`useThrottle`](./docs/use-throttle.md)|Adds the ability to specify an array \"throttles\" of functions to   throttle.|\n```\n\n----------------------------------------\n\nTITLE: Handling Intersection Events with Stimulus Controller in JavaScript\nDESCRIPTION: Shows a Stimulus controller setup to handle `appear` and `disappear` events dispatched by `useIntersection`. It configures `useIntersection` with `eventPrefix: false` to emit unprefixed events (`appear`, `disappear`) and defines methods (`increase`, `decrease`) intended to be triggered by these events via Stimulus actions defined in HTML.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-intersection.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\nimport { useIntersection } from 'stimulus-use'\n\nexport default class extends Controller {\n  connect() {\n    useIntersection(this, { eventPrefix: false })\n  }\n\n  increase() { /* ... */ }\n  decrease() { /* ... */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the `useDispatch` Mixin (JavaScript)\nDESCRIPTION: Shows the function signature for initializing the `useDispatch` mixin, typically called within a Stimulus controller's `connect` method. It requires the controller instance (`this`) and accepts an optional options object to configure behavior like the event target (`element`), event name prefixing (`eventPrefix`), bubbling (`bubbles`), cancelability (`cancelable`), and debugging (`debug`).\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-dispatch.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nuseDispatch(controller, options = {})\n```\n\n----------------------------------------\n\nTITLE: Extended Stimulus Controller Using useIdle with All Options\nDESCRIPTION: This snippet shows an advanced setup of a Stimulus controller using useIdle with all configurable options, such as custom timeout duration, initial idle state, specific events to detect activity, disabling event prefix, and controlling event dispatching. It demonstrates flexible configuration for user idle management.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-idle.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconnect() {\n  useIdle(this, { ms: 3000, initialState: true, events: ['click'], dispatchEvent: false, eventPrefix: false });\n}\n```\n\n----------------------------------------\n\nTITLE: Composing useClickOutside Behavior in a Stimulus Controller (JavaScript)\nDESCRIPTION: Illustrates integrating `useClickOutside` into a standard Stimulus controller. The hook is imported and called within the `connect` method. A `clickOutside` method is defined on the controller to handle the event dispatched when a click occurs outside the controller's element.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-click-outside.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\nimport { useClickOutside } from 'stimulus-use'\n\nexport default class extends Controller {\n\n  connect() {\n    useClickOutside(this)\n  }\n\n  clickOutside(event) {\n    // example to close a modal\n    event.preventDefault()\n    this.modal.close()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the `dispatch` Function Provided by `useDispatch` (JavaScript)\nDESCRIPTION: Describes the signature of the `dispatch` helper function added to the controller instance after initializing the `useDispatch` mixin. This function is used to emit custom DOM events. It requires an `eventName` (string) and accepts an optional `detail` object as a payload, which becomes accessible via `event.detail` on the listener side.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-dispatch.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndispatch(eventName, detail = {})\n```\n\n----------------------------------------\n\nTITLE: Extending TargetMutationController (JavaScript)\nDESCRIPTION: This code demonstrates extending the `TargetMutationController` from `stimulus-use`.  This approach automatically sets up target mutation tracking.  It defines the `locationTargetAdded`, `locationTargetRemoved`, and `locationTargetChanged` callback functions. This simplifies setup compared to using `useTargetMutation` directly.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-target-mutation.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TargetMutationController } from 'stimulus-use'\n\nexport default class extends TargetMutationController {\n\n  static targets = [\"location\"]\n\n  locationTargetAdded(element) {\n    // triggered when a locationTarget is added\n  }\n\n  locationTargetRemoved(element) {\n    // triggered when a locationTarget is removed\n  }\n\n  locationTargetChanged(element) {\n    // triggered when a locationTarget is changed\n  }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using useHotkeys with simple hotkey definitions in Stimulus\nDESCRIPTION: Example of how to register hotkeys with associated handlers in a Stimulus controller using the simple object syntax. Each hotkey maps to a handler method and optionally an element, facilitating quick setup of keyboard shortcuts.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-hotkeys.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus'\nimport { useHotkeys } from 'stimulus-use/hotkeys'\n\nexport default class extends Controller {\n  connect() {\n    useHotkeys(this, {\n      '/': [this.singleKeyHandler],\n      'cmd+a': [this.metaKeyHandler],\n      b: [this.inputHandler],\n      e: [this.inputHandler, this.inputTarget]\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the IntersectionObserver Instance in JavaScript\nDESCRIPTION: Demonstrates accessing the raw `IntersectionObserver` instance, which is passed as the second argument to the `appear` and `disappear` callbacks. This allows for advanced operations, such as calling `observer.unobserve(entry.target)` to stop observing only the specific element that triggered the callback.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-intersection.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class extends Controller {\n  connect() {\n    useIntersection(this)\n  }\n\n  appear(entry, observer) {\n    // observe and emit `appear()` callback just once\n    observer.unobserve(entry.target)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Prefix in a Stimulus Controller (JavaScript)\nDESCRIPTION: Demonstrates how to set the `eventPrefix` option to `true` within a Stimulus controller's `options` object when initializing a stimulus-use module like `useIntersection`. Setting `eventPrefix` to `true` causes emitted events (e.g., `appear`) to be prefixed with the controller's identifier (e.g., `card:appear`).\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/events.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// card_controller.js\nexport default class extends Controller {\n  options = {\n    eventPrefix: true,\n  }\n\n  connect() {\n    useIntersection(this, this.options)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending IntersectionController for Stimulus in JavaScript\nDESCRIPTION: Illustrates extending the base `IntersectionController` provided by `stimulus-use`. This alternative approach automatically integrates intersection observer functionality, allowing direct definition of `options`, `appear`, and `disappear` methods without explicitly calling `useIntersection` in `connect`.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-intersection.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { IntersectionController } from 'stimulus-use'\n\nexport default class extends IntersectionController {\n  options = {\n    element: this.element, // default\n  }\n\n  appear(entry, observer) {\n    // ...\n  }\n\n  disappear(entry, observer) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending HoverController Class (Javascript)\nDESCRIPTION: This snippet shows an alternative, cleaner approach for controllers primarily focused on hover behavior by extending the `HoverController` base class provided by `stimulus-use`. This class automatically sets up the hover listeners, allowing the user to simply define the `mouseEnter` and `mouseLeave` methods directly.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-hover.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { HoverController } from 'stimulus-use'\n\nexport default class extends HoverController {\n\n  mouseEnter() {\n    // ...\n  }\n\n  mouseLeave() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useThrottle with Global Wait Option in Stimulus JS\nDESCRIPTION: Demonstrates the basic usage of the `useThrottle` utility. Methods listed in the `static throttles` array are throttled using the global `wait` option provided to the `useThrottle` function call in the `connect` method. Unlisted methods are not throttled.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-throttle.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ApplicationController, useThrottle } from 'stimulus-use'\n\nexport default class extends ApplicationController {\n  static throttles = ['add']\n\n  connect() {\n    useThrottle(this, { wait: 100 })\n  }\n\n  add() {\n    // this function is throttled.\n  }\n\n  instant() {\n    //this function is not throttled.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending ApplicationController in Stimulus using JavaScript\nDESCRIPTION: Illustrates how to extend the ApplicationController provided by stimulus-use to inherit enhanced functionalities such as checking if the page is a Turbolinks preview (isPreview), connection status (isConnected), and sending custom events via the dispatch helper. This enables controllers to easily integrate with Stimulus lifecycle and emit/listen to events across controllers. The dispatch method used here is deprecated, with a reference to migration documentation for alternatives.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/application-controller.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// greet_controller.js\\nimport { ApplicationController } from 'stimulus-use'\\n\\nexport default class extends ApplicationController {\\n\\n  connect() {\\n    this.isPreview // true/false if it is a Turbolinks preview\\n    this.isConnected // true/false if the controller is connected\\n    this.dispatch(\"hello\") // helper to dispatch a custom event \"greet:hello\" to other Stimulus controllers\\n    // this.dispatch() is deprecated: For more information https://stimulus-use.github.io/stimulus-use/#/use-dispatch?id=migration-guide\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Stimulus Controller Setup for useClickOutside (JavaScript)\nDESCRIPTION: Provides the JavaScript Stimulus controller (`modal_controller.js`) corresponding to the HTML example. It imports and initializes `useClickOutside` in the `connect` method and defines the `close` action method, which is invoked by the `click:outside` event defined in the HTML `data-action`.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-click-outside.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// modal_controller.js\nexport default class extends Controller {\n\n  connect() {\n    useClickOutside(this)\n  }\n\nclose(event) {\n    event.preventDefault()\n    this.modal.close()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Data Attributes for Focus/Unfocus Actions in HTML\nDESCRIPTION: This HTML snippet demonstrates how to trigger Stimulus actions in response to the `focus` and `unfocus` events dispatched by `useWindowFocus`.  It sets up a data-controller and data-action to bind focus and unfocus events with controller methods.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-window-focus.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"player\" data-controller=\"player\" data-action=\"focus@document->player#play unfocus@document->player#pause\">\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Declaring Stimulus Actions for Intersection Events (Element) in HTML\nDESCRIPTION: Simplified HTML example where Stimulus actions listen for `appear` and `disappear` events directly on the controller's element. This avoids needing `@window` as the events are dispatched on the controller's element itself by default.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-intersection.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div\n  class=\"modal\"\n  data-controller=\"counter\"\n  data-action=\"appear->counter#increase disappear->counter#decrease\"\n>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Details from Intersection Events in JavaScript\nDESCRIPTION: Demonstrates how to access the originating Stimulus `controller`, the IntersectionObserver `entry` object, and the `observer` instance from the `event.detail` property within a Stimulus action handler triggered by an `appear` or `disappear` event.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-intersection.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncount(event) {\n  const { controller, entry, observer } = event.detail\n}\n```\n\n----------------------------------------\n\nTITLE: Reference Signature for useHover Function (Javascript)\nDESCRIPTION: This snippet shows the function signature for the `useHover` utility from `stimulus-use`. It takes a Stimulus controller instance (`controller`) and an optional options object to configure the hover behavior, primarily specifying the element to listen on.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-hover.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseHover(controller, options = {})\n```\n\n----------------------------------------\n\nTITLE: Accessing Controller and Entry from `appear` Event Detail (JavaScript)\nDESCRIPTION: Shows how to extract the source Stimulus controller and the associated `IntersectionObserverEntry` object from the `detail` property of a custom `appear` event dispatched by the `useIntersection` module. Destructuring assignment is used on `event.detail`.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/events.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// get the emitting controller and entry object for an appear event\nconst { controller, entry } = event.detail\n```\n\n----------------------------------------\n\nTITLE: useIdle Function Signature Documentation in JavaScript\nDESCRIPTION: This snippet describes the function signature of useIdle, outlining its parameters: a Stimulus controller and an options object with default values. It serves as the core reference for implementing user idle detection functionality in Stimulus controllers.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-idle.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nuseIdle(controller, options = {})\n```\n\n----------------------------------------\n\nTITLE: Extending WindowResizeController in JavaScript\nDESCRIPTION: Example showing how to extend the dedicated WindowResizeController from stimulus-use. This approach directly inherits the window resize functionality without manually composing it.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-window-resize.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WindowResizeController } from 'stimulus-use'\n\nexport default class extends WindowResizeController {\n  static targets = ['width']\n\n  windowResize({ width, height, event }) {\n    this.widthTarget.textContent = width\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Launch Local Playground - Yarn Bash\nDESCRIPTION: Runs the start script specified in the project's package.json using Yarn. This typically launches a local development server, making the playground accessible via a web browser at the specified address (defaulting to http://localhost:8080).\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/stu-playground.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: UseDebounce Mixin for Debouncing Functions in Stimulus Use\nDESCRIPTION: Provides functionality to debounce an array of functions called 'debounces', reducing the frequency of execution to improve performance. Dependencies include internal implementations of debounce logic. Key parameter 'debounces' is an array of functions to be debounced; the expected output is a debounced version of these functions integrated into the component.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/optimization.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## Optimization\n\n  A set of mixin to optimize performances.\n\n  | Mixin| Description |\n  |------|-------------|\n  |[`useDebounce`](./docs/use-debounce.md)|Adds the ability to specify an array \"debounces\" of functions to   debounce.|\n```\n\n----------------------------------------\n\nTITLE: UseMemo Mixin for Memoizing Expensive Getters in Stimulus Use\nDESCRIPTION: Enables caching of expensive getter computations through the use of `useMemo` and a static `memos` array. Dependencies include memoization logic and the static array to store memoized values. This improves performance by avoiding redundant computations when data hasn't changed. The input includes the list of getters to memoize; the output is improved component efficiency.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/optimization.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## Optimization\n\n  A set of mixin to optimize performances.\n\n  | Mixin| Description |\n  |------|-------------|\n  |[`useMemo`](./docs/use-memo.md)|Memoize expensive getters by mixing in `useMemo` and adding a static   `memos` array.|\n```\n\n----------------------------------------\n\nTITLE: Installing stimulus-use with npm (Bash)\nDESCRIPTION: Installs the stimulus-use library as a project dependency using the Node Package Manager (npm). This command should be run in the project's root directory.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/getting_started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i stimulus-use\n```\n\n----------------------------------------\n\nTITLE: Reference Signature for useClickOutside in JavaScript\nDESCRIPTION: Defines the function signature for the `useClickOutside` hook. It accepts a Stimulus controller instance and an optional configuration object as arguments.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-click-outside.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseClickOutside(controller, options = {})\n```\n\n----------------------------------------\n\nTITLE: Installing stimulus-use with yarn for Stimulus 3\nDESCRIPTION: This command installs the stimulus-use and @hotwired/stimulus packages using yarn. This is the recommended installation method for projects using Stimulus 3 or higher.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add stimulus-use @hotwired/stimulus\n```\n\n----------------------------------------\n\nTITLE: Installing stimulus-use with yarn (Bash)\nDESCRIPTION: Installs the stimulus-use library as a project dependency using the Yarn package manager. Execute this command within the project's root directory.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/getting_started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add stimulus-use\n```\n\n----------------------------------------\n\nTITLE: Reference API for useWindowResize in JavaScript\nDESCRIPTION: Basic API reference showing the function signature for the useWindowResize utility that adds window resize behavior to a Stimulus controller.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-window-resize.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseWindowResize(controller)\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for a Cart Counter Example (HTML)\nDESCRIPTION: Presents the HTML markup for a cart counter example using Stimulus controllers. A `cart` controller listens for `item:add` events on its element, an `item` controller triggers this event via a button click, and a `<span>` with `data-cart-target=\"counterView\"` displays the count.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-dispatch.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"cart\"\n     data-action=\"item:add->cart#refreshTotal\"\n     data-cart-counter=\"0\">\n\n  <button data-controller=\"item\" data-action=\"item#add\">\n    Add\n  </button>\n\n  <div>\n    <span>No of items : </span>\n    <span data-cart-target=\"counterView\">0</span>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Handling Bubbled Events with Stimulus Actions (HTML)\nDESCRIPTION: Illustrates an HTML structure where a parent element managed by a `reciever` controller listens for a custom event (`emitter:add`) dispatched from a child element managed by an `emitter` controller. The `data-action` attribute on the parent directly catches the bubbled event.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-dispatch.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"reciever\" data-action=\"emitter:add->reciever#update\">\n  <div data-controller=\"emitter\" data-action=\"click->emitter#add\" ></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Application Controller with Custom Event Prefix\nDESCRIPTION: Example of configuring useVisibility with the eventPrefix option set to false to remove the controller identifier prefix from events.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-visibility.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// application_controller.js\n\nexport default class extends Controller {\n\n  connect() {\n    useVisibility(this, { eventPrefix: false })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing stimulus-use with npm for Stimulus 3\nDESCRIPTION: This command installs the stimulus-use and @hotwired/stimulus packages using npm.  This is the recommended installation method for projects using Stimulus 3 or higher.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i stimulus-use @hotwired/stimulus\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of `useDispatch` in a Stimulus Controller (JavaScript)\nDESCRIPTION: Provides a basic example of importing and initializing the (deprecated) `useDispatch` mixin in an `item_controller.js`. It then demonstrates using the injected `this.dispatch` method within an `add` action to emit a custom event named `item:add` (assuming default prefixing).\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-dispatch.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// item_controller.js\nimport { Controller } from '@hotwired/stimulus'\nimport { useDispatch } from 'stimulus-use'\n\nexport default class extends Controller {\n  connect() {\n    useDispatch(this)\n  }\n\n  add() {\n    // dispatch a custom event item:add\n    this.dispatch(\"add\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Item Controller Dispatching Events for Cart Example (JavaScript)\nDESCRIPTION: JavaScript code for the `item_controller` in the cart example. It initializes the (deprecated) `useDispatch` mixin in `connect()` and defines an `add` method that dispatches an `add` event (prefixed to `item:add`) with a `quantity: 1` payload.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-dispatch.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n//item_controller.js\nimport { useDispatch } from 'stimulus-use'\n\nexport default class extends Controller {\n  connect() {\n    useDispatch(this)\n  }\n\n  add() {\n    this.dispatch('add', { quantity: 1 })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining useResize Function Signature and Options for Stimulus Controllers in JavaScript\nDESCRIPTION: This snippet outlines the useResize function signature showing that it attaches resize observation behavior to a Stimulus controller. It accepts a controller instance and an optional options object, which can specify dispatchEvent (boolean), element to observe (HTMLElement), and eventPrefix (boolean or string) with default values provided. The function enables automatic dispatching of resize events, observation of a specific element, and customizable event name prefixes tied to the controller identifier or a custom string.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-resize.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nuseResize(controller, options = {})\n```\n\n----------------------------------------\n\nTITLE: Listening for Events at the Window Level in Stimulus (HTML)\nDESCRIPTION: Shows an HTML setup suitable for sibling controllers or when the listener is nested within the emitter. The `reciever` controller uses the `@window` modifier in its `data-action` attribute (`emitter:add@window->reciever#update`) to listen for the custom event globally on the window object.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-dispatch.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"reciever\" data-action=\"emitter:add@window->reciever#update\"></div>\n<div data-controller=\"emitter\" data-action=\"click->emitter#add\" ></div>\n```\n\n----------------------------------------\n\nTITLE: Calling the useMemo Function (JavaScript)\nDESCRIPTION: Reference snippet showing the basic syntax for calling the `useMemo` function from `stimulus-use`. It takes the Stimulus controller instance (typically `this`) as its argument to apply the memoization behavior.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-memo.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseMemo(controller)\n```\n\n----------------------------------------\n\nTITLE: Initializing useMatchMedia Function in JavaScript\nDESCRIPTION: Function signature for the useMatchMedia utility that tracks if the window matches given media query strings. It accepts a Stimulus controller and options object as parameters.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-match-media.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseMatchMedia(controller, options)\n```\n\n----------------------------------------\n\nTITLE: Defining the useIntersection Function Signature in JavaScript\nDESCRIPTION: Shows the function signature for `useIntersection`, taking a Stimulus controller instance and an optional options object. It utilizes the Intersection Observer API to trigger callbacks. The options object allows customization of the observer behavior, event dispatching, and attribute naming.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-intersection.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseIntersection(controller, options = {})\n```\n\n----------------------------------------\n\nTITLE: Installing hotkeys-js and importmap configuration\nDESCRIPTION: Commands to install the hotkeys-js library with yarn and pin it via importmap for use in a Stimulus application. It ensures the peer dependency is added, and the library is registered correctly for use in the project.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-hotkeys.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add hotkeys-js\nbin/importmap pin stimulus-use/hotkeys\nbin/importmap pin hotkeys-js\n```\n\n----------------------------------------\n\nTITLE: Installing stimulus-use with yarn for Stimulus 2 (or below)\nDESCRIPTION: This command installs the stimulus-use and stimulus packages using yarn. This is specifically for projects using Stimulus 2 or below, ensuring compatibility with the older stimulus package.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add stimulus-use@0.41.0 stimulus@2.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing stimulus-use with npm for Stimulus 2 (or below)\nDESCRIPTION: This command installs the stimulus-use and stimulus packages using npm. This is specifically for projects using Stimulus 2 or below, ensuring compatibility with the older stimulus package.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i stimulus-use@0.41.0 stimulus@2.0.0\n```\n\n----------------------------------------\n\nTITLE: Updating import statement for useHotkeys in Stimulus application\nDESCRIPTION: Modification of import path for useHotkeys to reflect version 0.52.0 change, using the new import path 'stimulus-use/hotkeys'. This change ensures compatibility with the updated library structure.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/use-hotkeys.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import {  useHotkeys } from \"stimulus-use\"\n+ import {  useHotkeys } from \"stimulus-use/hotkeys\"\n```\n\n----------------------------------------\n\nTITLE: Clone Repository using SSH - Bash\nDESCRIPTION: Clones the stimulus-use Git repository from GitHub using the SSH protocol. This command is the initial step to obtain the project's source code locally for development.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/stu-playground.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:stimulus-use/stimulus-use.git\n```\n\n----------------------------------------\n\nTITLE: Install Project Dependencies - Yarn Bash\nDESCRIPTION: Navigates into the cloned stimulus-use directory and installs all necessary project dependencies using the Yarn package manager. This step prepares the project for building and running.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/stu-playground.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Build Stimulus-use Library - Yarn Bash\nDESCRIPTION: Executes the build script defined in the project's package.json file using Yarn. This command compiles the library's source code, making it ready for local use or testing within the playground.\nSOURCE: https://github.com/stimulus-use/stimulus-use/blob/main/docs/stu-playground.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```"
  }
]