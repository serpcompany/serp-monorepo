[
  {
    "owner": "sanic-org",
    "repo": "sanic",
    "content": "TITLE: Initializing Sanic Application in Python\nDESCRIPTION: Creates a basic Sanic application instance with a custom name. This is typically done in a file called server.py.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# /path/to/server.py\n\nfrom sanic import Sanic\n\napp = Sanic(\"MyHelloWorldApp\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Sanic Application in Python\nDESCRIPTION: This snippet demonstrates how to create a simple 'Hello, world' application using Sanic. It includes setting up a Sanic app instance and defining a basic route.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/index.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.response import text\n\napp = Sanic(\"MyHelloWorldApp\")\n\n@app.get(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n```\n\n----------------------------------------\n\nTITLE: Creating Hello World Application in Sanic\nDESCRIPTION: Basic example showing how to create a Sanic application with a single route handler that returns 'Hello, world.' Uses async handling and explicit response typing.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/getting-started.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.response import text\n\napp = Sanic(\"MyHelloWorldApp\")\n\n@app.get(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Synchronous and Asynchronous Handlers in Python\nDESCRIPTION: Demonstrates the basic structure of both synchronous and asynchronous handler functions in Sanic. These functions take a request object and return an HTTPResponse.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/handlers.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef i_am_a_handler(request):\n    return HTTPResponse()\n\nasync def i_am_ALSO_a_handler(request):\n    return HTTPResponse()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Sanic Application in Python\nDESCRIPTION: This snippet demonstrates the basic structure of a Sanic application file, including the creation of the Sanic instance and the proper way to run it using the if __name__ == \"__main__\" block.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# server.py\napp = Sanic(\"MyApp\")\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Path Parameter Handling\nDESCRIPTION: Examples of using path parameters with type hints and validation.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/routing.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/tag/<tag>\")\nasync def tag_handler(request, tag):\n    return text(\"Tag - {}\".format(tag))\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/foo/<foo_id:uuid>\")\nasync def uuid_handler(request, foo_id: UUID):\n    return text(\"UUID - {}\".format(foo_id))\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/foo/<foo_id>\")\nasync def uuid_handler(request, foo_id: UUID):\n    return text(\"UUID - {}\".format(foo_id))\n```\n\n----------------------------------------\n\nTITLE: Initializing Sanic Server with Protected Route\nDESCRIPTION: Sets up a Sanic server with a secret key and creates a protected endpoint that requires authentication.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic, text\n\nfrom auth import protected\nfrom login import login\n\napp = Sanic(\"AuthApp\")\napp.config.SECRET = \"KEEP_IT_SECRET_KEEP_IT_SAFE\"\napp.blueprint(login)\n\n@app.get(\"/secret\")\n@protected\nasync def secret(request):\n    return text(\"To go fast, you must be fast.\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Hello World API with Sanic in Python\nDESCRIPTION: Basic example of creating a Sanic application with a single route that returns a JSON response. Demonstrates how to define an async route handler.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/README.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.response import json\n\napp = Sanic(\"my-hello-world-app\")\n\n@app.route('/')\nasync def test(request):\n    return json({'hello': 'world'})\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Streaming in Sanic\nDESCRIPTION: This snippet shows how to implement response streaming in Sanic. It uses the respond() method to start the response and then sends content in chunks using the send() method.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/streaming.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\nasync def test(request):\n    response = await request.respond(content_type=\"text/csv\")\n    await response.send(\"foo,\")\n    await response.send(\"bar\")\n\n    # Optionally, you can explicitly end the stream by calling:\n    await response.eof()\n```\n\n----------------------------------------\n\nTITLE: Specifying HTTP Methods for Routes\nDESCRIPTION: Shows how to specify multiple HTTP methods for a route handler.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/routing.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp.add_route(\n    handler,\n    '/test',\n    methods=[\"POST\", \"PUT\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Working with Form Data in Sanic\nDESCRIPTION: Shows how to access form data submitted in a request, including methods for accessing single values or lists of values.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/request.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:8000 -d 'foo=bar'\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> print(request.body)\nb'foo=bar'\n\n>>> print(request.form)\n{'foo': ['bar']}\n\n>>> print(request.form.get(\"foo\"))\nbar\n\n>>> print(request.form.getlist(\"foo\"))\n['bar']\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Config Type in Sanic Application\nDESCRIPTION: Demonstrates how to create a custom configuration type by subclassing Sanic's Config class. Shows type annotation for an application instance with custom config.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.config import Config\n\nclass CustomConfig(Config):\n    pass\n\napp = Sanic(\"test\", config=CustomConfig())\nreveal_type(app) # N: Revealed type is \"sanic.app.Sanic[main.CustomConfig, types.SimpleNamespace]\"\n```\n\n----------------------------------------\n\nTITLE: Basic Route Declarations in Python using Sanic\nDESCRIPTION: Examples of basic route declarations using different HTTP methods.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/routing.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/stairway\")\n    ...\n\n@app.get(\"/to\")\n    ...\n\n@app.post(\"/heaven\")\n    ...\n```\n\n----------------------------------------\n\nTITLE: Handling Path Parameters in Sanic Route Handlers\nDESCRIPTION: This example shows how to extract and use path parameters in Sanic route handlers. Parameters are injected into the handler as keyword arguments.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/request.md#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/tag/<tag>')\nasync def tag_handler(request, tag):\n    return text(\"Tag - {}\".format(tag))\n\n# or, explicitly as keyword arguments\n@app.route('/tag/<tag>')\nasync def tag_handler(request, *, tag):\n    return text(\"Tag - {}\".format(tag))\n```\n\n----------------------------------------\n\nTITLE: Basic Sanic Application with Auto-Extensions\nDESCRIPTION: Modern setup pattern for Sanic application with automatic extension integration (v21.12+). No explicit extension initialization required when sanic-ext is installed.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/getting-started.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.response import text\n\napp = Sanic(\"MyHelloWorldApp\")\n\n@app.get(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Middleware in Sanic\nDESCRIPTION: Example of response middleware that executes after the handler, allowing you to process both the request and response objects.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/middleware.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.on_response\nasync def example(request, response):\n\tprint(\"I execute after the handler.\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Function-Based GET Handler in Sanic\nDESCRIPTION: Shows how to create a basic GET route handler using the @app.get() decorator. The handler returns a text response using the text() convenience method.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/handlers.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import text\n\n@app.get(\"/foo\")\nasync def foo_handler(request):\n    return text(\"I said foo!\")\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Response Handler in Sanic\nDESCRIPTION: Demonstrates the most basic implementation of a Sanic route handler returning an HTTPResponse object.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/response.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import HTTPResponse, Sanic\n\napp = Sanic(\"TestApp\")\n\n@app.route(\"\")\ndef handler(_):\n    return HTTPResponse()\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Data from Request Body\nDESCRIPTION: Shows how to access parsed JSON data from a request body using the request.json property.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/request.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:8000 -d '{\"foo\": \"bar\"}'\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> print(request.json)\n{'foo': 'bar'}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Context Type in Sanic Application\nDESCRIPTION: Shows how to create and use a custom context object in a Sanic application, demonstrating type changes when using custom context.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\n\nclass Foo:\n    pass\n\napp = Sanic(\"test\", ctx=Foo())\nreveal_type(app)  # N: Revealed type is \"sanic.app.Sanic[sanic.config.Config, main.Foo]\"\n```\n\n----------------------------------------\n\nTITLE: Route Decorator with HTTP Methods\nDESCRIPTION: Example of using route decorator with specific HTTP methods.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/routing.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/test', methods=[\"POST\", \"PUT\"])\nasync def handler(request):\n    return text('OK')\n```\n\n----------------------------------------\n\nTITLE: Basic Request Handler Usage in Sanic\nDESCRIPTION: Shows the conventional and alternative naming patterns for handling request objects in Sanic route handlers.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/request.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/foo\")\nasync def typical_use_case(request):\n    return text(\"I said foo!\")\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/foo\")\nasync def atypical_use_case(req):\n    return text(\"I said foo!\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Factory Pattern for Sanic Application in Python\nDESCRIPTION: Demonstrates the factory pattern for creating a Sanic application. This allows for easier testing and configuration management.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# ./path/to/server.py\nfrom sanic import Sanic\nfrom .path.to.config import MyConfig\nfrom .path.to.some.blueprint import bp\n\n\ndef create_app(config=MyConfig) -> Sanic:\n    app = Sanic(\"MyApp\", config=config)\n    app.blueprint(bp)\n    return app\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Serialization for Sanic in Python\nDESCRIPTION: Shows how to provide a custom function for serializing objects to JSON in a Sanic application. This example uses ujson with custom parameters.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport ujson\n\ndumps = partial(ujson.dumps, escape_forward_slashes=False)\napp = Sanic(__name__, dumps=dumps)\n```\n\n----------------------------------------\n\nTITLE: Empty Response Handler in Sanic\nDESCRIPTION: Demonstrates returning an empty response with default 204 status.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/response.md#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import empty\n\n@app.route(\"/\")\nasync def handler(request):\n    return empty()\n```\n\n----------------------------------------\n\nTITLE: Using Middleware Decorators in Sanic\nDESCRIPTION: This snippet shows how to use middleware decorators in Sanic to execute code before or after request handling. It includes examples of request and response middleware.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/decorators.md#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.middleware('request')\nasync def add_request_id(request):\n    request.ctx.request_id = str(uuid.uuid4())\n\n@app.middleware('response')\nasync def add_cors_headers(request, response):\n    response.headers['Access-Control-Allow-Origin'] = '*'\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Dependency Injection in Sanic\nDESCRIPTION: Demonstrates using the high-level dependency API to inject a database connection into request handlers. Shows how to set up a dependency before server start and use it in route handlers.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/injection.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass FakeConnection:\n    async def execute(self, query: str, **arguments):\n        return \"result\"\n\n@app.before_server_start\nasync def setup_db(app, _):\n    db_conn = FakeConnection()\n    app.ext.dependency(db_conn)\n\n@app.get(\"/\")\nasync def handler(request, conn: FakeConnection):\n    response = await conn.execute(\"...\")\n    return text(response)\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:8000/\nresult\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Sanic Application\nDESCRIPTION: Shows how to create a basic Sanic application with a single route handler returning JSON response.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ./path/to/server.py\nfrom sanic import Sanic, Request, json\n\napp = Sanic(\"TestApp\")\n\n@app.get(\"/\")\nasync def handler(request: Request):\n    return json({\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: WebSocket Background Task Management\nDESCRIPTION: A complete example showing how to use named tasks with WebSockets, including task creation, cleanup on connection close, and event handling. Demonstrates practical application of task management.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/tasks.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync def receiver(ws):\n    while True:\n        message = await ws.recv()\n        if not message:\n            break\n        print(f\"Received: {message}\")\n\n@app.websocket(\"/feed\")\nasync def feed(request, ws):\n    task_name = f\"receiver:{request.id}\"\n    request.app.add_task(receiver(ws), name=task_name)\n    try:\n        while True:\n            await request.app.event(\"my.custom.event\")\n            await ws.send(\"A message\")\n    finally:\n        # When the websocket closes, let's cleanup the task\n        await request.app.cancel_task(task_name)\n        request.app.purge_tasks()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Request Objects in Sanic\nDESCRIPTION: Shows how to create a custom Request class that extends Sanic's Request object with additional functionality.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/request.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic, Request\n\nclass CustomRequest(Request):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.user_id = self.headers.get(\"X-User-ID\")\n\napp = Sanic(\"Example\", request_class=CustomRequest)\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Basic Sanic Application in Python\nDESCRIPTION: A simple Sanic application that defines a single route returning a JSON response. This serves as the foundation for demonstrating development features.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/development.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# server.py\nfrom sanic import Sanic\nfrom sanic.response import json\n\napp = Sanic(__name__)\n\n@app.route(\"/\")\nasync def hello_world(request):\n    return json({\"hello\": \"world\"})\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Middleware in Sanic\nDESCRIPTION: Example of request middleware that executes before the handler, allowing you to add preprocessing functionality to incoming requests.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/middleware.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def example(request):\n\tprint(\"I execute before the handler.\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sanic Application from Registry in Python\nDESCRIPTION: Demonstrates how to retrieve a Sanic application instance from the app registry. This is useful when you need to access the app from a different location.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# ./path/to/server.py\nfrom sanic import Sanic\n\napp = Sanic(\"my_awesome_server\")\n\n# ./path/to/somewhere_else.py\nfrom sanic import Sanic\n\napp = Sanic.get_app(\"my_awesome_server\")\n```\n\n----------------------------------------\n\nTITLE: Static File Serving Configuration\nDESCRIPTION: Shows various methods of serving static files in Sanic, including directory serving, individual file serving, and named endpoints.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/routing.md#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\napp.static(\"/static/\", \"/path/to/directory/\")\napp.static(\"/\", \"/path/to/index.html\")\napp.static(\"/user/uploads/\", \"/path/to/uploads/\", name=\"uploads\")\n```\n\n----------------------------------------\n\nTITLE: Registering API Routes in Sanic with Tortoise-ORM Queries\nDESCRIPTION: Define API routes for the Sanic app that interact with the Tortoise-ORM models. This includes routes for listing all users and getting a specific user by ID, demonstrating asynchronous database queries.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/orm.md#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# ./main.py\n\nfrom models import Users\nfrom sanic import Sanic, response\n\n@app.route(\"/user\")\nasync def list_all(request):\n    users = await Users.all()\n    return response.json({\"users\": [str(user) for user in users]})\n\n@app.route(\"/user/<pk:int>\")\nasync def get_user(request, pk):\n    user = await Users.query(pk=pk)\n    return response.json({\"user\": str(user)})\n\nif __name__ == \"__main__\":\n    app.run(port=5000)\n```\n\n----------------------------------------\n\nTITLE: JSON Response Handler in Sanic\nDESCRIPTION: Shows how to return JSON responses using the json convenience function.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/response.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import json\n\n@app.route(\"/\")\nasync def handler(request):\n    return json({\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: Running Sanic Application with Factory Function\nDESCRIPTION: Demonstrates how to run a Sanic application using a factory function pattern with the CLI --factory flag. The factory function creates and returns a Sanic application instance.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/app-loader.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:create_app --factory\n```\n\nLANGUAGE: python\nCODE:\n```\n# server.py\ndef create_app():\n    app = Sanic(\"TestApp\")\n\n    @app.get(\"/\")\n    async def handler(request: Request):\n        return json({\"foo\": \"bar\"})\n\n    return app\n```\n\n----------------------------------------\n\nTITLE: Early Response in Middleware\nDESCRIPTION: Examples showing how middleware can halt request processing by returning an HTTPResponse, preventing the handler or further middleware from executing.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/middleware.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def halt_request(request):\n    return text(\"I halted the request\")\n\n@app.on_response\nasync def halt_response(request, response):\n    return text(\"I halted the response\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanic Application in Python\nDESCRIPTION: Shows different methods of configuring a Sanic application, including dot notation, dictionary-style, and updating with a dictionary.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic('myapp')\n\napp.config.DB_NAME = 'appdb'\napp.config['DB_USER'] = 'appuser'\n\ndb_settings = {\n    'DB_HOST': 'localhost',\n    'DB_NAME': 'appdb',\n    'DB_USER': 'appuser'\n}\napp.config.update(db_settings)\n```\n\n----------------------------------------\n\nTITLE: Streaming Database Records with Sanic and asyncpg\nDESCRIPTION: This example demonstrates how to stream database records to the client using Sanic and asyncpg. It uses an asynchronous cursor to fetch and send records one by one.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/streaming.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\nasync def index(request):\n    response = await request.respond()\n    conn = await asyncpg.connect(database='test')\n    async with conn.transaction():\n        async for record in conn.cursor('SELECT generate_series(0, 10)'):\n            await response.send(record[0])\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Sanic Configuration in Python\nDESCRIPTION: Shows how to create a custom configuration class for a Sanic application by subclassing the default Config class.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.config import Config\n\nclass MyConfig(Config):\n    FOO = \"bar\"\n\napp = Sanic(..., config=MyConfig())\n```\n\n----------------------------------------\n\nTITLE: HTML Response Handler in Sanic\nDESCRIPTION: Demonstrates returning HTML content using the html convenience function with UTF-8 encoding.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/response.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import html\n\n@app.route(\"/\")\nasync def handler(request):\n    return html('<!DOCTYPE html><html lang=\"en\"><meta charset=\"UTF-8\"><div>Hi 😎</div>')\n```\n\n----------------------------------------\n\nTITLE: Complete Listener Registration Example for Sanic Application Lifecycle\nDESCRIPTION: Comprehensive example showing how to register listeners for all lifecycle events in a Sanic application, demonstrating both the @app.listener and direct event decorators.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/listeners.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.listener(\"before_server_start\")\nasync def listener_1(app, loop):\n    print(\"listener_1\")\n\n@app.before_server_start\nasync def listener_2(app, loop):\n    print(\"listener_2\")\n\n@app.listener(\"after_server_start\")\nasync def listener_3(app, loop):\n    print(\"listener_3\")\n\n@app.after_server_start\nasync def listener_4(app, loop):\n    print(\"listener_4\")\n\n@app.listener(\"before_server_stop\")\nasync def listener_5(app, loop):\n    print(\"listener_5\")\n\n@app.before_server_stop\nasync def listener_6(app, loop):\n    print(\"listener_6\")\n\n@app.listener(\"after_server_stop\")\nasync def listener_7(app, loop):\n    print(\"listener_7\")\n\n@app.after_server_stop\nasync def listener_8(app, loop):\n    print(\"listener_8\")\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with Multiple Workers\nDESCRIPTION: Demonstrates how to run Sanic with multiple worker processes using command-line arguments.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsanic server:app --host=0.0.0.0 --port=1337 --workers=4\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Middleware Decorators in Sanic\nDESCRIPTION: Preferred shorter syntax for registering middleware using @app.on_request and @app.on_response decorators.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/middleware.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def extract_user(request):\n    ...\n\n@app.on_response\nasync def prevent_xss(request, response):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating Sanic App and Registering Tortoise-ORM\nDESCRIPTION: Initialize a Sanic app and register Tortoise-ORM with it. This sets up the database connection using the provided URL and specifies the location of the models. The generate_schemas flag creates the necessary database tables.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/orm.md#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# ./main.py\n\nfrom models import Users\nfrom tortoise.contrib.sanic import register_tortoise\n\napp = Sanic(__name__)\n\nregister_tortoise(\n    app, db_url=\"mysql://root:root@localhost/test\", modules={\"models\": [\"models\"]}, generate_schemas=True\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Middleware with Headers\nDESCRIPTION: Example of response middleware that adds security headers to HTTP responses.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/middleware.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.middleware('response')\nasync def prevent_xss(request, response):\n    response.headers[\"x-xss-protection\"] = \"1; mode=block\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Logging in Sanic Application\nDESCRIPTION: A simple Sanic application that demonstrates basic logging functionality using the default logger. This example shows how to import the logger and use it to log information within a route handler.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/logging.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.log import logger\nfrom sanic.response import text\n\napp = Sanic('logging_example')\n\n@app.route('/')\nasync def test(request):\n    logger.info('Here is your log')\n    return text('Hello World!')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Blueprint in Sanic\nDESCRIPTION: Demonstrates how to create a blueprint with a route handler that returns a JSON response. The blueprint is defined with a name that will be used for route naming.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# ./my_blueprint.py\nfrom sanic.response import json\nfrom sanic import Blueprint\n\nbp = Blueprint(\"my_blueprint\")\n\n@bp.route(\"/\")\nasync def bp_root(request):\n    return json({\"my\": \"blueprint\"})\n```\n\n----------------------------------------\n\nTITLE: Websocket Route Implementation\nDESCRIPTION: Demonstrates how to implement websocket routes in Sanic using both direct route addition and decorator syntax.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/routing.md#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@app.websocket(\"/test\")\nasync def handler(request, ws):\n    message = \"Start\"\n    while True:\n        await ws.send(message)\n        message = await ws.recv()\n```\n\n----------------------------------------\n\nTITLE: Adding Exception Handlers Programmatically\nDESCRIPTION: Shows how to add exception handlers programmatically using app.error_handler.add() instead of using the decorator approach. This example creates a server error handler.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nasync def server_error_handler(request, exception):\n    return text(\"Oops, server error\", status=500)\n\napp.error_handler.add(Exception, server_error_handler)\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in Sanic\nDESCRIPTION: Demonstrates how to access uploaded files from a request, including methods for accessing file metadata and content.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/request.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -F 'my_file=@/path/to/TEST' http://localhost:8000\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> print(request.body)\nb'--------------------------cb566ad845ad02d3\\r\\nContent-Disposition: form-data; name=\"my_file\"; filename=\"TEST\"\\r\\nContent-Type: application/octet-stream\\r\\n\\r\\nhello\\n\\r\\n--------------------------cb566ad845ad02d3--\\r\\n'\n\n>>> print(request.files)\n{'my_file': [File(type='application/octet-stream', body=b'hello\\n', name='TEST')]}\n\n>>> print(request.files.get(\"my_file\"))\nFile(type='application/octet-stream', body=b'hello\\n', name='TEST')\n\n>>> print(request.files.getlist(\"my_file\"))\n[File(type='application/octet-stream', body=b'hello\\n', name='TEST')]\n```\n\n----------------------------------------\n\nTITLE: Middleware Execution Order Demonstration\nDESCRIPTION: Complete example showing the execution order of middleware, where request middleware executes in declaration order and response middleware executes in reverse order.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/middleware.md#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def middleware_1(request):\n    print(\"middleware_1\")\n\n@app.on_request\nasync def middleware_2(request):\n    print(\"middleware_2\")\n\n@app.on_response\nasync def middleware_3(request, response):\n    print(\"middleware_3\")\n\n@app.on_response\nasync def middleware_4(request, response):\n    print(\"middleware_4\")\n\n@app.get(\"/handler\")\nasync def handler(request):\n    print(\"~ handler ~\")\n    return text(\"Done.\")\n```\n\nLANGUAGE: bash\nCODE:\n```\nmiddleware_1\nmiddleware_2\n~ handler ~\nmiddleware_4\nmiddleware_3\n[INFO][127.0.0.1:44788]: GET http://localhost:8000/handler  200 5\n```\n\n----------------------------------------\n\nTITLE: Defining Info Blueprint for API Structure\nDESCRIPTION: Creates a blueprint for managing information-related routes with a specific URL prefix. This is part of a modular API structure example.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# api/info.py\nfrom sanic import Blueprint\n\ninfo = Blueprint(\"info\", url_prefix=\"/info\")\n```\n\n----------------------------------------\n\nTITLE: Registering Middleware Functions in Sanic\nDESCRIPTION: Example of explicitly registering a middleware function using the register_middleware method, specifying it should run on requests.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/middleware.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def extract_user(request):\n    request.ctx.user = await extract_user_from_request(request)\n\napp.register_middleware(extract_user, \"request\")\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration from File\nDESCRIPTION: Demonstrates how to load configuration values from a Python file using app.update_config().\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/configuration.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> app.update_config(\"/path/to/my_config.py\")\n>>> print(app.config.A)\n1\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: Shows how to set and access Sanic configuration values using environment variables with the SANIC_ prefix.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ export SANIC_REQUEST_TIMEOUT=10\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> print(app.config.REQUEST_TIMEOUT)\n10\n```\n\n----------------------------------------\n\nTITLE: Attaching Database to Sanic Application Context in Python\nDESCRIPTION: Demonstrates how to attach a database instance to the Sanic application context. This allows sharing the database across different parts of the application.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"MyApp\")\napp.ctx.db = Database()\n```\n\n----------------------------------------\n\nTITLE: Using Request Context for Authentication\nDESCRIPTION: Shows how to use the request.ctx object to store user authentication information that persists during the request lifecycle.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/request.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def run_before_handler(request):\n    request.ctx.user = await fetch_user_by_token(request.token)\n\n@app.route('/hi')\nasync def hi_my_name_is(request):\n    if not request.ctx.user:\n        return text(\"Hmm... I don't know you)\n    return text(f\"Hi, my name is {request.ctx.user.name}\")\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Sanic Application\nDESCRIPTION: Dockerfile that builds a container for the Sanic application using the official Sanic image as the base. It installs dependencies from requirements.txt and exposes port 8000.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/deployment/docker.md#2025-04-20_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM sanicframework/sanic:3.8-latest\n\nWORKDIR /sanic\n\nCOPY . .\n\nRUN pip install -r requirements.txt\n\nEXPOSE 8000\n\nCMD [\"python\", \"server.py\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Listener Functions for Reload and Main Processes in Sanic\nDESCRIPTION: Example demonstrating the implementation of listeners for different phases of a Sanic application lifecycle, including reload_process_start, main_process_start, and before_server_start.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/listeners.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.reload_process_start\nasync def reload_start(*_):\n    print(\">>>>>> reload_start <<<<<<\")\n\n@app.main_process_start\nasync def main_start(*_):\n    print(\">>>>>> main_start <<<<<<\")\n\t\n@app.before_server_start\nasync def before_start(*_):\n\tprint(\">>>>>> before_start <<<<<<\")\n```\n\n----------------------------------------\n\nTITLE: Handling Host Headers and Dynamic URL Construction in Sanic\nDESCRIPTION: This example shows how to work with host headers and construct dynamic URLs in Sanic. It demonstrates the use of request.host for effective host, handling of proxy-forwarded hosts, and dynamic URL generation using request.url_for.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/headers.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp.config.SERVER_NAME = \"https://example.com\"\n\n@app.route(\"/hosts\", name=\"foo\")\nasync def handler(request):\n    return json(\n        {\n            \"effective host\": request.host,\n            \"host header\": request.headers.get(\"host\"),\n            \"forwarded host\": request.forwarded.get(\"host\"),\n            \"you are here\": request.url_for(\"foo\"),\n        }\n    )\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl localhost:8000/hosts\n{\n  \"effective host\": \"example.com\",\n  \"host header\": \"localhost:8000\",\n  \"forwarded host\": null,\n  \"you are here\": \"https://example.com/hosts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sanic Listener for Database Attachment in Python\nDESCRIPTION: Shows the best practice of attaching objects to the Sanic application context using a listener. This method ensures proper initialization timing.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"MyApp\")\n\n@app.before_server_start\nasync def attach_db(app, loop):\n    app.ctx.db = Database()\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Error Handler Class\nDESCRIPTION: Shows how to create a custom error handler by subclassing Sanic's ErrorHandler. This allows complete customization of error handling logic, such as returning JSON responses for all errors.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.handlers import ErrorHandler\n\nclass CustomErrorHandler(ErrorHandler):\n    def default(self, request: Request, exception: Exception) -> HTTPResponse:\n        ''' handles errors that have no error handlers assigned '''\n        # You custom error handling logic...\n        status_code = getattr(exception, \"status_code\", 500)\n        return json({\n          \"error\": str(exception),\n          \"foo\": \"bar\"\n        }, status=status_code)\n\napp.error_handler = CustomErrorHandler()\n```\n\n----------------------------------------\n\nTITLE: Comparing Synchronous and Asynchronous Handlers in Sanic\nDESCRIPTION: Illustrates the performance difference between synchronous and asynchronous handlers. The synchronous version uses time.sleep(), while the asynchronous version uses asyncio.sleep().\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/handlers.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/sync\")\ndef sync_handler(request):\n    time.sleep(0.1)\n    return text(\"Done.\")\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/async\")\nasync def async_handler(request):\n    await asyncio.sleep(0.1)\n    return text(\"Done.\")\n```\n\n----------------------------------------\n\nTITLE: Custom Status Code Response in Sanic\nDESCRIPTION: Shows how to set a custom HTTP status code (201) for a JSON response.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/response.md#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/\")\nasync def create_new(request):\n    new_thing = await do_create(request)\n    return json({\"created\": True, \"id\": new_thing.thing_id}, status=201)\n```\n\n----------------------------------------\n\nTITLE: Extracting Authorization Tokens in Sanic\nDESCRIPTION: This snippet demonstrates how to extract authorization tokens from the request headers in Sanic. It supports both 'Token' and 'Bearer' prefixes and makes the token available via request.token.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/headers.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\nasync def handler(request):\n    return text(request.token)\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl localhost:8000 \\\n    -H \"Authorization: Token ABCDEF12345679\"\nABCDEF12345679\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl localhost:8000 \\\n    -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n```\n\n----------------------------------------\n\nTITLE: Class-based Configuration\nDESCRIPTION: Demonstrates how to use a class for configuration values and load it into Sanic.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/configuration.md#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass MyConfig:\n    A = 1\n    B = 2\n\napp.update_config(MyConfig)\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Class Based View Example in Sanic\nDESCRIPTION: Shows a complete implementation of HTTPMethodView with all common HTTP methods defined, including both synchronous and asynchronous handlers.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/class-based-views.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.views import HTTPMethodView\nfrom sanic.response import text\n\nclass SimpleView(HTTPMethodView):\n\n  def get(self, request):\n      return text(\"I am get method\")\n\n  # You can also use async syntax\n  async def post(self, request):\n      return text(\"I am post method\")\n\n  def put(self, request):\n      return text(\"I am put method\")\n\n  def patch(self, request):\n      return text(\"I am patch method\")\n\n  def delete(self, request):\n      return text(\"I am delete method\")\n\napp.add_route(SimpleView.as_view(), \"/\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation Decorator for Sanic Request Handlers\nDESCRIPTION: This decorator function applies validation rules to incoming request data. It supports various sources of data (JSON, form, query parameters) and allows custom error handling. The function uses the Cerberus library for actual validation.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/validation.md#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef validate(\n    schema,\n    load_json=True,\n    load_form=False,\n    load_match_info=False,\n    load_headers=False,\n    load_files=False,\n    load_query=False,\n    error_handler=None,\n):\n    if load_json:\n        @bp.middleware(\"request\")\n        async def extract_json(request):\n            try:\n                request.json = await request.json()\n            except:\n                request.json = None\n\n    def vd(f):\n        @wraps(f)\n        async def wrapper(request, *args, **kwargs):\n            if not isinstance(schema, Schema):\n                validator = Validator(schema)\n            else:\n                validator = schema\n\n            if load_json and request.json is None:\n                data = {}\n            else:\n                data = request.json if load_json else {}\n\n            if load_form:\n                data.update(request.form)\n\n            if load_match_info:\n                data.update(request.match_info)\n\n            if load_headers:\n                data.update(request.headers)\n\n            if load_files:\n                data.update(request.files)\n\n            if load_query:\n                data.update(request.query_args)\n\n            if not validator.validate(data):\n                if error_handler:\n                    return error_handler(validator.errors)\n                else:\n                    return ValidationError(\n                        validator.errors,\n                        error=f'Invalid data: {validator.errors}',\n                    )\n            kwargs['valid_data'] = validator.document\n            return await f(request, *args, **kwargs)\n        return wrapper\n    return vd\n```\n\n----------------------------------------\n\nTITLE: Creating Background Task in Sanic\nDESCRIPTION: Demonstrates how to add a basic background task to a running Sanic application using add_task(). The example shows a task that waits 5 seconds before printing a notification message.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/tasks.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def notify_server_started_after_five_seconds():\n    await asyncio.sleep(5)\n    print('Server successfully started!')\n\napp.add_task(notify_server_started_after_five_seconds())\n```\n\n----------------------------------------\n\nTITLE: Implementing Echo Websocket Handler in Sanic\nDESCRIPTION: Demonstrates a basic websocket handler implementation that echoes received messages back to the client using an explicit while loop with send() and recv() methods.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/websockets.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request, Websocket\n\n@app.websocket(\"/feed\")\nasync def feed(request: Request, ws: Websocket):\n    while True:\n        data = \"hello!\"\n        print(\"Sending: \" + data)\n        await ws.send(data)\n        data = await ws.recv()\n        print(\"Received: \" + data)\n```\n\n----------------------------------------\n\nTITLE: HTTP Method-Specific Decorators\nDESCRIPTION: Examples of convenience decorators for different HTTP methods.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/routing.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.get('/test')\nasync def handler(request):\n    return text('OK')\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.post('/test')\nasync def handler(request):\n    return text('OK')\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.put('/test')\nasync def handler(request):\n    return text('OK')\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.patch('/test')\nasync def handler(request):\n    return text('OK')\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.delete('/test')\nasync def handler(request):\n    return text('OK')\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.head('/test')\nasync def handler(request):\n    return empty()\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.options('/test')\nasync def handler(request):\n    return empty()\n```\n\n----------------------------------------\n\nTITLE: Importing Sanic's Built-in Loggers\nDESCRIPTION: Example showing how to import Sanic's pre-configured loggers and use them in your application. Sanic provides specialized loggers for different purposes including root, error, access, server, and websockets.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/logging.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.log import logger, error_logger, access_logger, server_logger, websockets_logger\n\nlogger.info('This is a root logger message')\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Request Context in Sanic\nDESCRIPTION: This snippet demonstrates how to create a custom request context by subclassing the Sanic Request class and implementing a make_context method. It allows for adding type hints to the context object for better IDE support.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/request.md#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic, Request\nfrom types import SimpleNamespace\n\nclass CustomRequest(Request):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.ctx.user_id = self.headers.get(\"X-User-ID\")\n\n    @staticmethod\n    def make_context() -> CustomContext:\n        return CustomContext()\n\n@dataclass\nclass CustomContext:\n    user_id: str = None\n```\n\n----------------------------------------\n\nTITLE: Correctly Attaching Blueprint in Sanic Application\nDESCRIPTION: This snippet demonstrates the correct way to attach a blueprint to a Sanic application, ensuring it works across all processes.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom my.other.module import bp\n\napp = Sanic(\"MyApp\")\n\nif __name__ == \"__mp_main__\":\n    app.blueprint(bp)\nelif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Running a Sanic Server from Command Line\nDESCRIPTION: This snippet shows how to start a Sanic server from the command line, including the output displaying server information and configuration.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/index.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app\n[2023-01-31 12:34:56 +0000] [999996] [INFO] Sanic v22.12.0\n[2023-01-31 12:34:56 +0000] [999996] [INFO] Goin' Fast @ http://127.0.0.1:8000\n[2023-01-31 12:34:56 +0000] [999996] [INFO] mode: production, single worker\n[2023-01-31 12:34:56 +0000] [999996] [INFO] server: sanic, HTTP/1.1\n[2023-01-31 12:34:56 +0000] [999996] [INFO] python: 3.10.9\n[2023-01-31 12:34:56 +0000] [999996] [INFO] platform: SomeOS-9.8.7\n[2023-01-31 12:34:56 +0000] [999996] [INFO] packages: sanic-routing==22.8.0\n[2023-01-31 12:34:56 +0000] [999997] [INFO] Starting worker [999997]\n```\n\n----------------------------------------\n\nTITLE: Defining Route Handlers with Decorators in Sanic\nDESCRIPTION: This snippet demonstrates how to use the @app.route decorator to define route handlers in a Sanic application. It shows different HTTP methods and URL patterns.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/decorators.md#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n@app.route(\"/\")\nasync def index(request):\n    return text(\"Hello, World!\")\n\n@app.route(\"/user/<user_id:int>\")\nasync def user_info(request, user_id):\n    return text(f\"User ID: {user_id}\")\n\n@app.post(\"/submit\")\nasync def submit_form(request):\n    return json({\"status\": \"success\"})\n```\n\n----------------------------------------\n\nTITLE: Implementing Route-Level Versioning in Sanic\nDESCRIPTION: Shows how to add different versions to individual routes. This creates separate endpoints for different API versions that handle the same URL path but respond differently based on the version.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/versioning.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# /v1/text\n@app.route(\"/text\", version=1)\ndef handle_request(request):\n    return response.text(\"Hello world! Version 1\")\n\n# /v2/text\n@app.route(\"/text\", version=2)\ndef handle_request(request):\n    return response.text(\"Hello world! Version 2\")\n```\n\n----------------------------------------\n\nTITLE: Type Annotation with Sanic Request Object\nDESCRIPTION: Demonstrates how to add type annotations to a request handler for better IDE support and code completion.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/request.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.request import Request\nfrom sanic.response import text\n\n@app.get(\"/typed\")\nasync def typed_handler(request: Request):\n    return text(\"Done.\")\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in Response in Sanic\nDESCRIPTION: This snippet shows how to set a cookie in the response object of a Sanic route handler. It creates a text response and adds a cookie named 'test' with various parameters such as domain and httponly flag.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/cookies.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/cookie\")\nasync def test(request):\n    response = text(\"There's a cookie up in this response\")\n    response.add_cookie(\n        \"test\",\n        \"It worked!\",\n        domain=\".yummy-yummy-cookie.com\",\n        httponly=True\n    )\n    return response\n```\n\n----------------------------------------\n\nTITLE: JSON Response Manipulation in Sanic\nDESCRIPTION: Examples of manipulating JSON responses using various convenience methods.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/response.md#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nresp = json({\"foo\": \"bar\"})\n\n# This is OKAY\nresp.raw_body = {\"foo\": \"bar\", \"something\": \"else\"}\n\n# This is better\nresp.set_body({\"foo\": \"bar\", \"something\": \"else\"})\n\n# This is also works well\nresp.update({\"something\": \"else\"})\n\n# This is NOT OKAY\nresp.raw_body.update({\"something\": \"else\"})\n```\n\nLANGUAGE: python\nCODE:\n```\n# Or, even treat it like a list\nresp = json([\"foo\", \"bar\"])\n\n# This is OKAY\nresp.raw_body = [\"foo\", \"bar\", \"something\", \"else\"]\n\n# This is better\nresp.extend([\"something\", \"else\"])\n\n# This is also works well\nresp.append(\"something\")\nresp.append(\"else\")\n\n# This is NOT OKAY\nresp.raw_body.append(\"something\")\n```\n\n----------------------------------------\n\nTITLE: Using SanicTestClient in Python\nDESCRIPTION: Demonstrates how to use the SanicTestClient to make a GET request to a Sanic endpoint. This is the default test client provided by Sanic.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-testing/clients.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp.test_client.get(\"/path/to/endpoint\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Sanic Application with Autodiscovery\nDESCRIPTION: This snippet shows how to set up a Sanic application using autodiscovery to register blueprints and listeners from various modules. It imports the necessary components and uses a custom autodiscover function to wire up the application.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/autodiscovery.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.response import empty\n\nimport blueprints\nfrom utility import autodiscover\n\napp = Sanic(\"auto\", register=True)\nautodiscover(\n    app,\n    blueprints,\n    \"parent.child\",\n    \"listeners.something\",\n    recursive=True,\n)\n\napp.route(\"/\")(lambda _: empty())\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Login Blueprint\nDESCRIPTION: Creates a login blueprint that generates JWT tokens using the application's secret key.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/authentication.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\nfrom sanic import Blueprint, text\n\nlogin = Blueprint(\"login\", url_prefix=\"/login\")\n\n@login.post(\"/\")\nasync def do_login(request):\n    token = jwt.encode({}, request.app.config.SECRET)\n    return text(token)\n```\n\n----------------------------------------\n\nTITLE: Middleware Execution Flow with Request Modification\nDESCRIPTION: Complete example showing middleware execution order, including storing data in request context and modifying response headers.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/middleware.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def add_key(request):\n    # Arbitrary data may be stored in request context:\n    request.ctx.foo = \"bar\"\n\n@app.on_response\nasync def custom_banner(request, response):\n    response.headers[\"Server\"] = \"Fake-Server\"\n\n@app.on_response\nasync def prevent_xss(request, response):\n    response.headers[\"x-xss-protection\"] = \"1; mode=block\"\n\n@app.get(\"/\")\nasync def index(request):\n    return text(request.ctx.foo)\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Request Body Data\nDESCRIPTION: Demonstrates how to access the raw bytes from a request body using the request.body property.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/request.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:8000 -d '{\"foo\": \"bar\"}'\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> print(request.body)\nb'{\"foo\": \"bar\"}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Handler for Sanic in Python\nDESCRIPTION: Demonstrates how to create and use a custom error handler for a Sanic application. This allows for custom error handling logic.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.handlers import ErrorHandler\n\nclass CustomErrorHandler(ErrorHandler):\n    def default(self, request, exception):\n        ''' handles errors that have no error handlers assigned '''\n        # You custom error handling logic...\n        return super().default(request, exception)\n\napp = Sanic(..., error_handler=CustomErrorHandler())\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Response Headers in Sanic\nDESCRIPTION: This snippet demonstrates how to set custom response headers in Sanic, both in the route handler and using response middleware. It includes examples of setting content-language and content-security-policy headers.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/headers.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\nasync def handler(request):\n    return text(\"Done.\", headers={\"content-language\": \"en-US\"})\n\n@app.middleware(\"response\")\nasync def add_csp(request, response):\n    response.headers[\"content-security-policy\"] = \"default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self';base-uri 'self';form-action 'self'\"\n```\n\n----------------------------------------\n\nTITLE: Sanic Route Pattern Matching Examples\nDESCRIPTION: Examples of different route pattern matching approaches including full pattern matching, single matching groups, and named matching groups.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/routing.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@app.get(r\"/<foo:[a-z]{3}.txt>\")                # matching on the full pattern\n@app.get(r\"/<foo:([a-z]{3}).txt>\")              # defining a single matching group\n@app.get(r\"/<foo:(?P<foo>[a-z]{3}).txt>\")       # defining a single named matching group\n@app.get(r\"/<foo:(?P<foo>[a-z]{3}).(?:txt)>\")   # defining a single named matching group, with one or more non-matching groups\n```\n\n----------------------------------------\n\nTITLE: Blueprint Versioning in Sanic\nDESCRIPTION: Shows how to create versioned blueprints by specifying a version number. This prefixes routes with version information like /v1/, /v2/, etc.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nauth1 = Blueprint(\"auth\", url_prefix=\"/auth\", version=1)\nauth2 = Blueprint(\"auth\", url_prefix=\"/auth\", version=2)\n```\n\n----------------------------------------\n\nTITLE: Creating Named Tasks in Sanic\nDESCRIPTION: Demonstrates how to create a named task in Sanic by providing a name parameter to add_task(). Named tasks can be retrieved and managed by their identifier.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/tasks.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp.add_task(slow_work, name=\"slow_task\")\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Data to Exceptions\nDESCRIPTION: Shows how to include additional data in exceptions using the extra parameter. This can be used to provide more context about the exception.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nraise SanicException(..., extra={\"name\": \"Adam\"})\n```\n\n----------------------------------------\n\nTITLE: Handling Request ID in Sanic\nDESCRIPTION: This example shows how to access the X-Request-ID header in Sanic using request.id. It demonstrates both retrieving an existing request ID and automatic generation of a new ID if one is not provided.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/headers.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\nasync def handler(request):\n    return text(request.id)\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl localhost:8000 \\\n    -H \"X-Request-ID: ABCDEF12345679\"\nABCDEF12345679\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Signals in Sanic\nDESCRIPTION: Demonstrates how to use Sanic's built-in signals, including attaching handlers and using the Event enum for easier reference.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/signals.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.signal(\"http.lifecycle.complete\")\nasync def my_signal_handler(conn_info):\n    print(\"Connection has been closed\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.signals import Event\n\n@app.signal(Event.HTTP_LIFECYCLE_COMPLETE)\nasync def my_signal_handler(conn_info):\n    print(\"Connection has been closed\")\n```\n\n----------------------------------------\n\nTITLE: File Streaming with Content-Length in Sanic\nDESCRIPTION: This example shows how to stream a file in Sanic while manually adding the Content-Length header. It uses aiofiles to asynchronously get the file size.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/streaming.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom aiofiles import os as async_os\nfrom sanic.response import file_stream\n\n@app.route(\"/\")\nasync def index(request):\n    file_path = \"/srv/www/whatever.png\"\n\n    file_stat = await async_os.stat(file_path)\n    headers = {\"Content-Length\": str(file_stat.st_size)}\n\n    return await file_stream(\n        file_path,\n        headers=headers,\n    )\n```\n\n----------------------------------------\n\nTITLE: Customizing OpenAPI Specification Metadata in Sanic\nDESCRIPTION: This code shows how to modify the metadata of the OpenAPI specification using the 'describe' method. It sets the API title, version, and adds a multi-line description using Markdown formatting. The 'dedent' function is used for cleaner multi-line string formatting.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/openapi/basics.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom textwrap import dedent\n\napp.ext.openapi.describe(\n    \"Testing API\",\n    version=\"1.2.3\",\n    description=dedent(\n        \"\"\"\n        # Info\n        This is a description. It is a good place to add some _extra_ doccumentation.\n\n        **MARKDOWN** is supported.\n        \"\"\"\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with Application Factory\nDESCRIPTION: Shows different ways to run a Sanic application using a factory function, including explicit and implicit methods.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsanic server:create_app --factory\n```\n\nLANGUAGE: sh\nCODE:\n```\nsanic \"server:create_app()\"\n```\n\nLANGUAGE: sh\nCODE:\n```\nsanic server:create_app\n```\n\n----------------------------------------\n\nTITLE: Adding X-Request-ID Header to Responses in Sanic\nDESCRIPTION: This example shows how to add an X-Request-ID header to every response in Sanic using middleware. It demonstrates accessing the request ID and setting it in the response headers.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/headers.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\nasync def handler(request):\n    return text(str(request.id))\n\n@app.on_response\nasync def add_request_id_header(request, response):\n    response.headers[\"X-Request-ID\"] = request.id\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl localhost:8000 -i\nHTTP/1.1 200 OK\nX-Request-ID: 805a958e-9906-4e7a-8fe0-cbe83590431b\ncontent-length: 36\nconnection: keep-alive\ncontent-type: text/plain; charset=utf-8\n\n805a958e-9906-4e7a-8fe0-cbe83590431b\n```\n\n----------------------------------------\n\nTITLE: Simplified Websocket Handler Using Async For Loop\nDESCRIPTION: Shows a simplified websocket handler implementation using async for loop iteration over the Websocket object. Feature added in Sanic v22.9.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/websockets.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request, Websocket\n\n@app.websocket(\"/feed\")\nasync def feed(request: Request, ws: Websocket):\n    async for msg in ws:\n        await ws.send(msg)\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Blueprint Groups in Sanic\nDESCRIPTION: Demonstrates how to create and compose multiple Blueprints and Blueprint groups with different URL prefixes, versions, and mounting options. Shows how a single handler can be mounted to multiple paths through Blueprint composition.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_21\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(__name__)\nblueprint_1 = Blueprint(\"blueprint_1\", url_prefix=\"/bp1\")\nblueprint_2 = Blueprint(\"blueprint_2\", url_prefix=\"/bp2\")\ngroup = Blueprint.group(\n    blueprint_1,\n    blueprint_2,\n    version=1,\n    version_prefix=\"/api/v\",\n    url_prefix=\"/grouped\",\n    strict_slashes=True,\n)\nprimary = Blueprint.group(group, url_prefix=\"/primary\")\n\n@blueprint_1.route(\"/\")\ndef blueprint_1_default_route(request):\n    return text(\"BP1_OK\")\n\n@blueprint_2.route(\"/\")\ndef blueprint_2_default_route(request):\n    return text(\"BP2_OK\")\n\napp.blueprint(group)\napp.blueprint(primary)\napp.blueprint(blueprint_1)\n\n# The mounted paths:\n# /api/v1/grouped/bp1/\n# /api/v1/grouped/bp2/\n# /api/v1/primary/grouped/bp1\n# /api/v1/primary/grouped/bp2\n# /bp1\n```\n\n----------------------------------------\n\nTITLE: Accessing and Manipulating Request Headers in Sanic\nDESCRIPTION: This snippet illustrates various ways to access and manipulate request headers in Sanic. It shows how to use different methods like get(), getone(), and getall() to retrieve header values, and demonstrates case-insensitivity of header keys.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/headers.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\nasync def handler(request):\n    return json(\n        {\n            \"foo_weakref\": request.headers[\"foo\"],\n            \"foo_get\": request.headers.get(\"Foo\"),\n            \"foo_getone\": request.headers.getone(\"FOO\"),\n            \"foo_getall\": request.headers.getall(\"fOo\"),\n            \"all\": list(request.headers.items()),\n        }\n    )\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl localhost:9999/headers -H \"Foo: one\" -H \"FOO: two\"|jq\n{\n  \"foo_weakref\": \"one\",\n  \"foo_get\": \"one\",\n  \"foo_getone\": \"one\",\n  \"foo_getall\": [\n    \"one\",\n    \"two\"\n  ],\n  \"all\": [\n    [\n      \"host\",\n      \"localhost:9999\"\n    ],\n    [\n      \"user-agent\",\n      \"curl/7.76.1\"\n    ],\n    [\n      \"accept\",\n      \"*/*\"\n    ],\n    [\n      \"foo\",\n      \"one\"\n    ],\n    [\n      \"foo\",\n      \"two\"\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Catchall Exception Handler\nDESCRIPTION: Demonstrates how to create a catchall exception handler that will handle any exception thrown in the application by using Exception as the target class.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@app.exception(Exception)\nasync def catch_anything(request, exception):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with Sanic\nDESCRIPTION: These snippets demonstrate how to serve static files using Sanic, including options for serving individual files, directories, and setting up automatic index pages or file browsers.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/index.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp.static(\"/\", \"/path/to/index.html\")\napp.static(\"/uploads/\", \"/path/to/uploads/\")\n```\n\nLANGUAGE: python\nCODE:\n```\napp.static(\n    \"/uploads/\",\n    \"/path/to/uploads/\",\n    index=\"index.html\"\n)\n```\n\nLANGUAGE: python\nCODE:\n```\napp.static(\n    \"/uploads/\",\n    \"/path/to/uploads/\",\n    directory_view=True\n)\n```\n\n----------------------------------------\n\nTITLE: Blueprint Lifecycle Listeners\nDESCRIPTION: Shows how to register event listeners on a blueprint for server lifecycle events like startup and shutdown. These listeners will be triggered at the appropriate points in the application lifecycle.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@bp.listener(\"before_server_start\")\nasync def before_server_start(app, loop):\n    ...\n\n@bp.listener(\"after_server_stop\")\nasync def after_server_stop(app, loop):\n    ...\n```\n\n----------------------------------------\n\nTITLE: CORS Response Headers Example\nDESCRIPTION: Shows the curl command and the corresponding HTTP response headers for a CORS preflight request.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/http/cors.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:8000 -X OPTIONS -i\nHTTP/1.1 204 No Content\nallow: GET,HEAD,OPTIONS\naccess-control-allow-origin: http://foobar.com\nconnection: keep-alive\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers in Exceptions\nDESCRIPTION: Demonstrates how to include custom HTTP headers in exception responses, either by setting them on the exception class or when raising the exception.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass MyException(SanicException):\n    headers = {\n      \"X-Foo\": \"bar\"\n    }\n\nraise MyException\n# or\nraise InvalidUsage(\"blah blah\", headers={\n    \"X-Foo\": \"bar\"\n})\n```\n\n----------------------------------------\n\nTITLE: URL Generation in Sanic\nDESCRIPTION: Shows how to generate URLs using app.url_for() method with various parameters and query string arguments.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/routing.md#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/')\nasync def index(request):\n    # generate a URL for the endpoint `post_handler`\n    url = app.url_for('post_handler', post_id=5)\n\n    # Redirect to `/posts/5`\n    return redirect(url)\n\n@app.route('/posts/<post_id>')\nasync def post_handler(request, post_id):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Complete Development Mode in Sanic\nDESCRIPTION: Command to start Sanic in complete development mode, which enables debug mode, automatic reloading, and the REPL in one command.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/development.md#2025-04-20_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to:app --dev\n```\n\n----------------------------------------\n\nTITLE: Creating Exception Handlers for Specific Exceptions\nDESCRIPTION: Shows how to create custom exception handlers for specific exception types using the @app.exception decorator. This example handles NotFound errors with a custom message.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.exceptions import NotFound\n\n@app.exception(NotFound, SomeCustomException)\nasync def ignore_404s(request, exception):\n    return text(\"Yep, I totally found the page: {}\".format(request.url))\n```\n\n----------------------------------------\n\nTITLE: Writing a Synchronous Test with Sanic Test Client\nDESCRIPTION: Example of how to write a synchronous test using Sanic's test client. It demonstrates setting up a Sanic app with a route, creating a pytest fixture, and writing a test function to verify the response.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-testing/getting-started.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom sanic import Sanic, response\n\n@pytest.fixture\ndef app():\n    sanic_app = Sanic(\"TestSanic\")\n\n    @sanic_app.get(\"/\")\n    def basic(request):\n        return response.text(\"foo\")\n\n    return sanic_app\n\ndef test_basic_test_client(app):\n    request, response = app.test_client.get(\"/\")\n\n    assert request.method.lower() == \"get\"\n    assert response.body == b\"foo\"\n    assert response.status == 200\n```\n\n----------------------------------------\n\nTITLE: File Streaming Handler in Sanic\nDESCRIPTION: Shows how to stream large files like videos using file_stream.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/response.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.response import file_stream\n\n@app.route(\"/\")\nasync def handler(request):\n    return await file_stream(\"/path/to/whatever.mp4\")\n```\n\n----------------------------------------\n\nTITLE: Registering a Listener Function in Sanic Using Decorator Syntax\nDESCRIPTION: Example showing how to register a database setup function as a 'before_server_start' listener using the @app.listener decorator, which provides a more concise way to attach listeners.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/listeners.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.listener(\"before_server_start\")\nasync def setup_db(app):\n    app.ctx.db = await db_setup()\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanic with Custom Logging Settings\nDESCRIPTION: Example of initializing a Sanic application with custom logging configuration. This shows how to disable access logging for improved performance in production environments.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/logging.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic('logging_example', log_config=LOGGING_CONFIG)\n\nif __name__ == \"__main__\":\n    app.run(access_log=False)\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files from Blueprints\nDESCRIPTION: Demonstrates how to serve static files from a blueprint. Includes an example of providing a named static route that can be referenced using url_for().\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nbp = Blueprint(\"bp\", url_prefix=\"/bp\")\nbp.static(\"/web/path\", \"/folder/to/serve\")\nbp.static(\"/web/path\", \"/folder/to/server\", name=\"uploads\")\n```\n\n----------------------------------------\n\nTITLE: Blueprint Middleware Registration\nDESCRIPTION: Shows how to register middleware functions that are specific to a blueprint. Includes examples of request middleware, which runs before the handler, and response middleware, which runs after.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@bp.middleware\nasync def print_on_request(request):\n    print(\"I am a spy\")\n\n@bp.middleware(\"request\")\nasync def halt_request(request):\n    return text(\"I halted the request\")\n\n@bp.middleware(\"response\")\nasync def halt_response(request, response):\n    return text(\"I halted the response\")\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Message Sanic Exception\nDESCRIPTION: Defines a custom Sanic exception with a dynamic message property that uses 'extra' information passed during instantiation.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nclass TeapotError(SanicException):\n    status_code = 418\n\n    @property\n    def message(self):\n        return f\"Sorry {self.extra['name']}, I cannot make you coffee\"\n\nraise TeapotError(extra={\"name\": \"Adam\"})\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Parameters in Sanic Request Handlers\nDESCRIPTION: This snippet demonstrates how to access and use query parameters in a Sanic request handler using the request.args attribute. It shows a typical use case for a search endpoint.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/request.md#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/search\")\nasync def search(request):\n   query = request.args.get(\"q\")\n    if not query:\n        return text(\"No query string provided\")\n    return text(f\"Searching for: {query}\")\n```\n\n----------------------------------------\n\nTITLE: Simple Route Handler with Multiple Decorators in Sanic\nDESCRIPTION: An example of a Sanic view handler with multiple decorators applied to it, including route definition, authorization, validation and user injection.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/decorators.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/orders\")\n@authorized(\"view_order\")\n@validate_list_params()\n@inject_user()\nasync def get_order_details(request, params, user):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Setting Error Format per Route\nDESCRIPTION: Demonstrates how to set the error format (HTML, JSON, or text) on a per-route basis using the error_format parameter. This controls how exceptions are presented to clients.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@app.request(\"/\", error_format=\"text\")\nasync def handler(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing Sanic with Extensions\nDESCRIPTION: Two alternative methods for installing Sanic with its official extensions package that provides additional functionality like OpenAPI, CORS, and dependency injection.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/getting-started.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npip install sanic[ext]\n```\n\nLANGUAGE: sh\nCODE:\n```\npip install sanic sanic-ext\n```\n\n----------------------------------------\n\nTITLE: Implementing User Registration Signal in Sanic\nDESCRIPTION: Demonstrates how to create and dispatch a custom signal for user registration, including sending a registration email.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/signals.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.signal(\"user.registration.created\")\nasync def send_registration_email(**context):\n    await send_email(context[\"email\"], template=\"registration\")\n\n@app.post(\"/register\")\nasync def handle_registration(request):\n    await do_registration(request)\n    await request.app.dispatch(\n        \"user.registration.created\",\n        context={\"email\": request.json.email}\n    })\n```\n\n----------------------------------------\n\nTITLE: Adding Routes Programmatically in Sanic\nDESCRIPTION: Demonstrates how to add routes programmatically using add_route() method.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/routing.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(request):\n    return text(\"OK\")\n\napp.add_route(handler, \"/test\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom CLI Commands in Sanic Python\nDESCRIPTION: Demonstrates how to create custom CLI commands using decorator syntax in Sanic. Shows three different patterns: async with parameters, synchronous without parameters, and custom named commands.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2024/v24.12.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.command\nasync def foo(one, two: str, three: str = \"...\"):\n    logger.info(f\"FOO {one=} {two=} {three=}\")\n\n\n@app.command\ndef bar():\n    logger.info(\"BAR\")\n\n\n@app.command(name=\"qqq\")\nasync def baz():\n    logger.info(\"BAZ\")\n```\n\n----------------------------------------\n\nTITLE: Text Response Handler in Sanic\nDESCRIPTION: Shows how to return plain text responses with UTF-8 encoding using the text convenience function.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/response.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import text\n\n@app.route(\"/\")\nasync def handler(request):\n    return text(\"Hi 😎\")\n```\n\n----------------------------------------\n\nTITLE: Adding Context to Exceptions\nDESCRIPTION: Demonstrates how to add contextual information to exceptions using the context parameter. This can be useful for providing additional data about the error condition.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nraise SanicException(..., context={\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: Blueprint Group Middleware\nDESCRIPTION: Demonstrates how to apply middleware to an entire group of blueprints. This shows both blueprint-specific middleware and group-level middleware that applies to all blueprints in the group.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nbp1 = Blueprint(\"bp1\", url_prefix=\"/bp1\")\nbp2 = Blueprint(\"bp2\", url_prefix=\"/bp2\")\n\n@bp1.middleware(\"request\")\nasync def bp1_only_middleware(request):\n    print(\"applied on Blueprint : bp1 Only\")\n\n@bp1.route(\"/\")\nasync def bp1_route(request):\n    return text(\"bp1\")\n\n@bp2.route(\"/<param>\")\nasync def bp2_route(request, param):\n    return text(param)\n\ngroup = Blueprint.group(bp1, bp2)\n\n@group.middleware(\"request\")\nasync def group_middleware(request):\n    print(\"common middleware applied for both bp1 and bp2\")\n\n# Register Blueprint group under the app\napp.blueprint(group)\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Decorators in Sanic\nDESCRIPTION: This example demonstrates how to apply multiple decorators to a single route handler in Sanic. It combines authentication, rate limiting, and error handling decorators.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/decorators.md#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@app.route('/protected')\n@auth.login_required\n@limiter.limit('5 per minute')\n@error_handler\nasync def protected_route(request):\n    return json({\"message\": \"Access granted\"})\n```\n\n----------------------------------------\n\nTITLE: Implementing Dataclass Validation in Sanic Route Handler\nDESCRIPTION: This code shows how to use the @validate decorator to apply dataclass validation to a Sanic route handler. It validates query parameters against the SearchParams model.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/validation.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import validate\n\n@app.route(\"/search\")\n@validate(query=SearchParams)\nasync def handler(request, query: SearchParams):\n    return json(asdict(query))\n```\n\n----------------------------------------\n\nTITLE: Sanic Listeners with Priority Ordering Example\nDESCRIPTION: Example showing how to use the priority parameter to control the execution order of listeners. Demonstrates the interaction between priority values, registration order, and application vs blueprint listeners.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/listeners.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@app.before_server_start\nasync def first(app):\n    print(\"first\")\n\n@app.listener(\"before_server_start\", priority=2)\nasync def second(app):\n    print(\"second\")\n\n@app.before_server_start(priority=3)\nasync def third(app):\n    print(\"third\")\n\n@bp.before_server_start\nasync def bp_first(app):\n    print(\"bp_first\")\n\n@bp.listener(\"before_server_start\", priority=2)\nasync def bp_second(app):\n    print(\"bp_second\")\n\n@bp.before_server_start(priority=3)\nasync def bp_third(app):\n    print(\"bp_third\")\n\n@app.before_server_start\nasync def fourth(app):\n    print(\"fourth\")\n\napp.blueprint(bp)\n```\n\n----------------------------------------\n\nTITLE: Running Basic Sanic Application from CLI\nDESCRIPTION: Shows how to run a basic Sanic application using the CLI command and the corresponding server implementation. The example creates a simple API endpoint that returns a JSON response.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/app-loader.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app\n```\n\nLANGUAGE: python\nCODE:\n```\n# server.py\napp = Sanic(\"TestApp\")\n\n@app.get(\"/\")\nasync def handler(request: Request):\n    return json({\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: Modifying URL Parameters in Middleware\nDESCRIPTION: Example of middleware that converts URL slug parameters from kebab-case to snake_case by modifying the request.match_info dictionary.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/middleware.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\ndef convert_slug_to_underscore(request: Request):\n    request.match_info[\"slug\"] = request.match_info[\"slug\"].replace(\"-\", \"_\")\n\n@app.get(\"/<slug:slug>\")\nasync def handler(request, slug):\n    return text(slug)\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:9999/foo-bar-baz\nfoo_bar_baz\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Event Parameters in Sanic Signals\nDESCRIPTION: Shows how to use dynamic event parameters in Sanic signals, allowing for flexible event handling based on arbitrary values.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/signals.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.signal(\"foo.bar.<thing>\")\nasync def signal_handler(thing):\n    print(f\"[signal_handler] {thing=}\")\n\n@app.get(\"/\")\nasync def trigger(request):\n    await app.dispatch(\"foo.bar.baz\")\n    return response.text(\"Done.\")\n```\n\n----------------------------------------\n\nTITLE: Running Sanic Server\nDESCRIPTION: Command to launch a Sanic server using the production-ready built-in server implementation.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/getting-started.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsanic server\n```\n\n----------------------------------------\n\nTITLE: Method-Specific Decorators in Class Based Views\nDESCRIPTION: Demonstrates how to apply decorators to specific HTTP methods within a class-based view.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/class-based-views.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass ViewWithSomeDecorator(HTTPMethodView):\n\n    @staticmethod\n    @some_decorator_here\n    def get(request, name):\n        return text(\"Hello I have a decorator\")\n\n    def post(self, request, name):\n        return text(\"Hello I do not have any decorators\")\n\n    @some_decorator_here\n    def patch(self, request, name):\n        return text(\"Hello I have a decorator\")\n```\n\n----------------------------------------\n\nTITLE: Integrating HTTP Redirection with Main Sanic Application\nDESCRIPTION: Lifecycle event handlers to run an HTTP redirection server alongside the main HTTPS application, managing server startup and shutdown.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/tls.md#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# app == Your main application\n# redirect == Your http_redir application\n@app.before_server_start\nasync def start(app, _):\n    app.ctx.redirect = await redirect.create_server(\n        port=80, return_asyncio_server=True\n    )\n    app.add_task(runner(redirect, app.ctx.redirect))\n\n@app.before_server_stop\nasync def stop(app, _):\n    await app.ctx.redirect.close()\n\nasync def runner(app, app_server):\n    app.state.is_running = True\n    try:\n        app.signalize()\n        app.finalize()\n        app.state.is_started = True\n        await app_server.serve_forever()\n    finally:\n        app.state.is_running = False\n        app.state.is_stopping = True\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with Maximum CPU Performance\nDESCRIPTION: Shows how to run Sanic with the maximum number of workers based on system constraints using the --fast option.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsanic server:app --host=0.0.0.0 --port=1337 --fast\n```\n\n----------------------------------------\n\nTITLE: Raising SanicException with Custom Status Code in Python\nDESCRIPTION: Shows how to raise a SanicException with a custom status code to halt execution and return an appropriate HTTP response. The example demonstrates returning a 501 status code with a custom error message.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.exceptions import SanicException\n\n@app.route(\"/youshallnotpass\")\nasync def no_no(request):\n        raise SanicException(\"Something went wrong.\", status_code=501)\n```\n\n----------------------------------------\n\nTITLE: Path Parameters in Class Based Views\nDESCRIPTION: Example of using URL path parameters with class-based views in Sanic.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/class-based-views.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass NameView(HTTPMethodView):\n\n  def get(self, request, name):\n    return text(\"Hello {}\".format(name))\n\napp.add_route(NameView.as_view(), \"/<name>\")\n```\n\n----------------------------------------\n\nTITLE: Implementing an Authorization Decorator in Sanic\nDESCRIPTION: A complete example of creating an authorization decorator that checks if a user is authorized to access an endpoint and returns an appropriate response.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/decorators.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import wraps\nfrom sanic.response import json\n\ndef authorized():\n    def decorator(f):\n        @wraps(f)\n        async def decorated_function(request, *args, **kwargs):\n            # run some method that checks the request\n            # for the client's authorization status\n            is_authorized = await check_request_for_authorization_status(request)\n\n            if is_authorized:\n                # the user is authorized.\n                # run the handler method and return the response\n                response = await f(request, *args, **kwargs)\n                return response\n            else:\n                # the user is not authorized.\n                return json({\"status\": \"not_authorized\"}, 403)\n        return decorated_function\n    return decorator\n\n@app.route(\"/\")\n@authorized()\nasync def test(request):\n    return json({\"status\": \"authorized\"})\n```\n\n----------------------------------------\n\nTITLE: JWT Authentication Decorator Implementation\nDESCRIPTION: Implements the authentication decorator that validates JWT tokens and protects routes.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/authentication.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import wraps\n\nimport jwt\nfrom sanic import text\n\ndef check_token(request):\n    if not request.token:\n        return False\n\n    try:\n        jwt.decode(\n            request.token, request.app.config.SECRET, algorithms=[\"HS256\"]\n        )\n    except jwt.exceptions.InvalidTokenError:\n        return False\n    else:\n        return True\n\ndef protected(wrapped):\n    def decorator(f):\n        @wraps(f)\n        async def decorated_function(request, *args, **kwargs):\n            is_authenticated = check_token(request)\n\n            if is_authenticated:\n                response = await f(request, *args, **kwargs)\n                return response\n            else:\n                return text(\"You are unauthorized.\", 401)\n\n        return decorated_function\n\n    return decorator(wrapped)\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Session Middleware\nDESCRIPTION: Implement request/response middleware for SQLAlchemy session management\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/orm.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# ./server.py\nfrom contextvars import ContextVar\n\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.orm import sessionmaker\n\n_sessionmaker = sessionmaker(bind, AsyncSession, expire_on_commit=False)\n\n_base_model_session_ctx = ContextVar(\"session\")\n\n@app.middleware(\"request\")\nasync def inject_session(request):\n    request.ctx.session = _sessionmaker()\n    request.ctx.session_ctx_token = _base_model_session_ctx.set(request.ctx.session)\n\n@app.middleware(\"response\")\nasync def close_session(request, response):\n    if hasattr(request.ctx, \"session_ctx_token\"):\n        _base_model_session_ctx.reset(request.ctx.session_ctx_token)\n        await request.ctx.session.close()\n```\n\n----------------------------------------\n\nTITLE: Raw Bytes Response Handler in Sanic\nDESCRIPTION: Demonstrates sending raw bytes without encoding.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/response.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import raw\n\n@app.route(\"/\")\nasync def handler(request):\n    return raw(b\"raw bytes\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixed Serializer in Sanic\nDESCRIPTION: Demonstrates how to use the @serializer decorator to predefine response serialization for endpoints. The example shows a simple text response serializer with dynamic content based on the input parameter.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/convenience.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import serializer\n\n@app.get(\"/<name>\")\n@serializer(text)\nasync def hello_world(request, name: str):\n    if name.isnumeric():\n        return \"hello \" * int(name)\n    return f\"Hello, {name}\"\n```\n\n----------------------------------------\n\nTITLE: Adding Signals in Sanic\nDESCRIPTION: Shows different methods of adding signals to a Sanic application, including using decorators and explicit addition with conditions.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/signals.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def my_signal_handler():\n    print(\"something happened\")\n\napp.add_signal(my_signal_handler, \"something.happened.ohmy\")\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.signal(\"something.happened.ohmy\")\nasync def my_signal_handler():\n    print(\"something happened\")\n```\n\nLANGUAGE: python\nCODE:\n```\nasync def my_signal_handler1():\n    print(\"something happened\")\n\napp.add_signal(\n    my_signal_handler,\n    \"something.happened.ohmy1\",\n    conditions={\"some_condition\": \"value\"}\n)\n\n@app.signal(\"something.happened.ohmy2\", conditions={\"some_condition\": \"value\"})\nasync def my_signal_handler2():\n    print(\"something happened\")\n```\n\nLANGUAGE: python\nCODE:\n```\nbp = Blueprint(\"foo\")\n\n@bp.signal(\"something.happened.ohmy\")\nasync def my_signal_handler():\n    print(\"something happened\")\n```\n\n----------------------------------------\n\nTITLE: Running Sanic in Debug Mode via Command Line\nDESCRIPTION: Command to start the Sanic server with debug mode enabled. Debug mode provides verbose output and disables run-time optimizations, which is useful for development but not for production.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/development.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsanic server:app --host=0.0.0.0 --port=1234 --debug\n```\n\n----------------------------------------\n\nTITLE: Dynamic Application Creation with AppLoader\nDESCRIPTION: Showcases using the AppLoader for dynamic application creation across worker processes. This advanced pattern allows for customizing application properties at runtime through command-line arguments.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/app-loader.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom functools import partial\n\nfrom sanic import Request, Sanic, json\nfrom sanic.worker.loader import AppLoader\n\ndef attach_endpoints(app: Sanic):\n    @app.get(\"/\")\n    async def handler(request: Request):\n        return json({\"app_name\": request.app.name})\n\ndef create_app(app_name: str) -> Sanic:\n    app = Sanic(app_name)\n    attach_endpoints(app)\n    return app\n\nif __name__ == \"__main__\":\n    app_name = sys.argv[-1]\n    loader = AppLoader(factory=partial(create_app, app_name))\n    app = loader.load()\n    app.prepare(port=9999, dev=True)\n    Sanic.serve(primary=app, app_loader=loader)\n```\n\nLANGUAGE: sh\nCODE:\n```\npython path/to/server.py MyTestAppName\n```\n\n----------------------------------------\n\nTITLE: Reading Cookies from Request in Sanic\nDESCRIPTION: This snippet demonstrates how to access cookies from the request object in a Sanic route handler. It retrieves the value of a cookie named 'test' using the get() method.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/cookies.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/cookie\")\nasync def test(request):\n    test_cookie = request.cookies.get(\"test\")\n    return text(f\"Test cookie: {test_cookie}\")\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Deserialization for Sanic in Python\nDESCRIPTION: Shows how to provide a custom function for deserializing JSON data in a Sanic application. This example uses orjson for deserialization.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom orjson import loads\n\napp = Sanic(\"MyApp\", loads=loads)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Status Code on Exception Class\nDESCRIPTION: Demonstrates creating a custom exception with a predefined status code (418) and message. Also shows how to override the status code when raising the exception.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass TeapotError(SanicException):\n    status_code = 418\n    message = \"Sorry, I cannot brew coffee\"\n\nraise TeapotError\n# or\nraise TeapotError(status_code=400)\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with ASGI Servers\nDESCRIPTION: These snippets demonstrate how to run a Sanic application using ASGI-compliant servers like Uvicorn and Hypercorn.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nuvicorn myapp:app\n```\n\nLANGUAGE: sh\nCODE:\n```\nhypercorn myapp:app\n```\n\n----------------------------------------\n\nTITLE: Basic Class Based View Implementation in Sanic\nDESCRIPTION: Demonstrates the basic structure of a class-based view using HTTPMethodView, showing how to handle different HTTP methods within a single class.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/class-based-views.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.views import HTTPMethodView\n\nclass FooBar(HTTPMethodView):\n    async def get(self, request):\n        ...\n    \n    async def post(self, request):\n        ...\n    \n    async def put(self, request):\n        ...\n\napp.add_route(FooBar.as_view(), \"/foobar\")\n```\n\n----------------------------------------\n\nTITLE: Custom Environment Prefix Configuration\nDESCRIPTION: Demonstrates how to use a custom prefix for environment variables instead of the default SANIC_ prefix.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ export MYAPP_REQUEST_TIMEOUT=10\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> app = Sanic(__name__, env_prefix='MYAPP_')\n>>> print(app.config.REQUEST_TIMEOUT)\n10\n```\n\n----------------------------------------\n\nTITLE: Correct Generic Type Dependency Implementation\nDESCRIPTION: Demonstrates the correct way to implement generic type dependency injection by explicitly defining the intended type for injection.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/injection.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport typing\nfrom sanic import Sanic, text\n\nT = typing.TypeVar(\"T\")\n\nclass Test(typing.Generic[T]):\n    test: T\n\napp = Sanic(\"testapp\")\n_singleton = Test()\napp.ext.add_dependency(Test[str], lambda: _singleton)\n\n@app.get(\"/\")\ndef test(request, test: Test[str]):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Request Types\nDESCRIPTION: Shows how to create custom request types with typed application and context objects.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request\nfrom myapp.types import MyApp\nfrom types import SimpleNamespace\n\ndef add_routes(app: MyApp):\n    @app.get(\"/\")\n    async def handler(request: Request[MyApp, SimpleNamespace]):\n        # do something with your fully typed app instance\n        results = await request.app.ctx.db.query(\"SELECT * FROM foo\")\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS Headers Management\nDESCRIPTION: CORS header handling implementation that adds necessary Access-Control headers to responses based on route methods.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/cors.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Iterable\n\ndef _add_cors_headers(response, methods: Iterable[str]) -> None:\n    allow_methods = list(set(methods))\n    if \"OPTIONS\" not in allow_methods:\n        allow_methods.append(\"OPTIONS\")\n    headers = {\n        \"Access-Control-Allow-Methods\": \",\".join(allow_methods),\n        \"Access-Control-Allow-Origin\": \"mydomain.com\",\n        \"Access-Control-Allow-Credentials\": \"true\",\n        \"Access-Control-Allow-Headers\": (\n            \"origin, content-type, accept, \"\n            \"authorization, x-xsrf-token, x-request-id\"\n        ),\n    }\n    response.headers.extend(headers)\n\ndef add_cors_headers(request, response):\n    if request.method != \"OPTIONS\":\n        methods = [method for method in request.route.methods]\n        _add_cors_headers(response, methods)\n```\n\n----------------------------------------\n\nTITLE: Implementing Blueprint Group Versioning in Sanic\nDESCRIPTION: Shows how to implement versioning at the blueprint group level with versioning hierarchy. Blueprint groups can provide version defaults that are inherited by member blueprints unless overridden at more specific levels.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/versioning.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.blueprints import Blueprint\nfrom sanic.response import json\n\nbp1 = Blueprint(\n    name=\"blueprint-1\",\n    url_prefix=\"/bp1\",\n    version=1.25,\n)\nbp2 = Blueprint(\n    name=\"blueprint-2\",\n    url_prefix=\"/bp2\",\n)\n\ngroup = Blueprint.group(\n    [bp1, bp2],\n    url_prefix=\"/bp-group\",\n    version=\"v2\",\n)\n\n# GET /v1.25/bp-group/bp1/endpoint-1\n@bp1.get(\"/endpoint-1\")\nasync def handle_endpoint_1_bp1(request):\n    return json({\"Source\": \"blueprint-1/endpoint-1\"})\n\n# GET /v2/bp-group/bp2/endpoint-2\n@bp2.get(\"/endpoint-1\")\nasync def handle_endpoint_1_bp2(request):\n    return json({\"Source\": \"blueprint-2/endpoint-1\"})\n\n# GET /v1/bp-group/bp2/endpoint-2\n@bp2.get(\"/endpoint-2\", version=1)\nasync def handle_endpoint_2_bp2(request):\n    return json({\"Source\": \"blueprint-2/endpoint-2\"})\n```\n\n----------------------------------------\n\nTITLE: Cancelling Named Tasks in Sanic\nDESCRIPTION: Demonstrates how to cancel a named task using cancel_task(). The function must be awaited since task cancellation is an asynchronous operation.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/tasks.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nawait app.cancel_task(\"slow_task\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom TRACE Route Handler in Sanic\nDESCRIPTION: Shows how to implement a custom TRACE route handler in Sanic Extensions. This requires explicit route definition using the route decorator with the trace method.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/http/methods.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\", methods=[\"trace\"])\nasync def handler(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Dispatching Signals in Sanic\nDESCRIPTION: Shows how to dispatch signals in Sanic, including passing context to signal handlers and handling blueprint-specific signals.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/signals.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.signal(\"foo.bar.<thing>\")\nasync def foo_bar(thing):\n    print(f\"{thing=}\")\n\nawait app.dispatch(\"foo.bar.baz\")\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.signal(\"user.registration.created\")\nasync def send_registration_email(**context):\n    print(context)\n\nawait app.dispatch(\n    \"user.registration.created\",\n    context={\"hello\": \"world\"}\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nbp = Blueprint(\"bp\")\n\napp_counter = 0\nbp_counter = 0\n\n@app.signal(\"foo.bar.baz\")\ndef app_signal():\n    nonlocal app_counter\n    app_counter += 1\n\n@bp.signal(\"foo.bar.baz\")\ndef bp_signal():\n    nonlocal bp_counter\n    bp_counter += 1\n\nawait app.dispatch(\"foo.bar.baz\")\nassert app_counter == 1\nassert bp_counter == 1\n\nawait bp.dispatch(\"foo.bar.baz\")\nassert app_counter == 1\nassert bp_counter == 2\n```\n\n----------------------------------------\n\nTITLE: Basic Dependency Injection with IceCream Class\nDESCRIPTION: Demonstrates basic dependency injection by recasting a path parameter into a custom IceCream class. Shows how to use type annotations to automatically convert route parameters.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/injection.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass IceCream:\n    flavor: str\n\n    def __str__(self) -> str:\n        return f\"{self.flavor.title()} (Yum!)\"\n\napp.ext.add_dependency(IceCream)\n\n@app.get(\"/<flavor:str>\")\nasync def ice_cream(request, flavor: IceCream):\n    return text(f\"You chose: {flavor}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Context Queue in Sanic\nDESCRIPTION: Demonstrates how to create and share a Queue object between worker processes using the shared_ctx attribute. The Queue must be assigned inside the main_process_start listener.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.9.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom multiprocessing import Queue\n\n@app.main_process_start\nasync def main_process_start(app):\n    app.shared_ctx.queue = Queue()\n```\n\n----------------------------------------\n\nTITLE: Defining Dataclass Model for Validation in Python\nDESCRIPTION: This snippet demonstrates how to define a simple dataclass model for validation purposes in a Sanic application.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/validation.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass SearchParams:\n    q: str\n```\n\n----------------------------------------\n\nTITLE: Parsing Query String in Sanic Requests\nDESCRIPTION: This example illustrates different ways to access and parse query string parameters in Sanic, including raw query string, parsed query args, and handling multiple values for a single key.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/request.md#2025-04-20_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://localhost:8000?key1=val1&key2=val2&key1=val3\"\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> print(request.args)\n{'key1': ['val1', 'val3'], 'key2': ['val2']}\n\n>>> print(request.args.get(\"key1\"))\nval1\n\n>>> print(request.args.getlist(\"key1\"))\n['val1', 'val3']\n\n>>> print(request.query_args)\n[('key1', 'val1'), ('key2', 'val2'), ('key1', 'val3')]\n\n>>> print(request.query_string)\nkey1=val1&key2=val2&key1=val3\n```\n\n----------------------------------------\n\nTITLE: Implementing Pydantic Validation in Sanic Route Handler\nDESCRIPTION: This code demonstrates how to use the @validate decorator with a Pydantic model to validate JSON body data in a Sanic route handler.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/validation.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import validate\n\n@app.post(\"/person\")\n@validate(json=Person)\nasync def handler(request, body: Person):\n    return json(body.dict())\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Domain Certificates in Python\nDESCRIPTION: Example of configuring multiple TLS certificates for different domains in Sanic with Python, allowing the server to choose the appropriate certificate based on the client's SNI.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/tls.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nssl = [\"certs/example.com/\", \"certs/bigcorp.test/\"]\napp.run(host=\"0.0.0.0\", port=8443, ssl=ssl)\n```\n\n----------------------------------------\n\nTITLE: Implementing Zero Downtime Restart\nDESCRIPTION: Example of using the multiplexer to implement zero-downtime worker process restarts.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp.m.restart(zero_downtime=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Streaming in Sanic using HTTPMethodView\nDESCRIPTION: This snippet demonstrates how to enable request streaming on an endpoint using the @stream decorator on an HTTPMethodView class. It reads the request body in chunks until completion.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/streaming.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.views import stream\n\nclass SimpleView(HTTPMethodView):\n    @stream\n    async def post(self, request):\n        result = \"\"\n        while True:\n            body = await request.stream.read()\n            if body is None:\n                break\n            result += body.decode(\"utf-8\")\n        return text(result)\n```\n\n----------------------------------------\n\nTITLE: Custom Serializer Implementation\nDESCRIPTION: Demonstrates creating and using a custom serializer function that returns a JSON response with request ID, action, and message. The serializer transforms simple string returns into structured JSON responses.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/convenience.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef message(retval, request, action, status):\n    return json(\n        {\n            \"request_id\": str(request.id),\n            \"action\": action,\n            \"message\": retval,\n        },\n        status=status,\n    )\n\n@app.post(\"/<action>\")\n@serializer(message)\nasync def do_action(request, action: str):\n    return \"This is a message\"\n```\n\n----------------------------------------\n\nTITLE: Explicit App Injection in Sanic Tasks\nDESCRIPTION: Demonstrates explicitly injecting the app instance into a background task function. This alternative approach gives more control over dependency injection.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/tasks.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def explicit_inject(app):\n    await asyncio.sleep(5)\n    print(app.name)\n\napp.add_task(explicit_inject(app))\n```\n\n----------------------------------------\n\nTITLE: Registering a Blueprint with a Sanic Application\nDESCRIPTION: Shows how to import a blueprint and register it with a Sanic application instance. This attaches all the blueprint's routes to the main application.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom my_blueprint import bp\n\napp = Sanic(__name__)\napp.blueprint(bp)\n```\n\n----------------------------------------\n\nTITLE: Implementing Blueprint-Level Versioning in Sanic\nDESCRIPTION: Demonstrates how to add versioning at the blueprint level, which applies the version number to all routes within that blueprint. This simplifies version management for groups of related endpoints.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/versioning.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbp = Blueprint(\"test\", url_prefix=\"/foo\", version=1)\n\n# /v1/foo/html\n@bp.route(\"/html\")\ndef handle_request(request):\n    return response.html(\"<p>Hello world!</p>\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Validation Models in Sanic Route Handler\nDESCRIPTION: This snippet demonstrates how to use the @validate decorator to apply multiple validation models for different parts of the request (JSON body, query parameters, and form data) in a single Sanic route handler.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/validation.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@validate(\n    json=ModelA,\n    query=ModelB,\n    form=ModelC,\n)\n```\n\n----------------------------------------\n\nTITLE: File Streaming in Sanic\nDESCRIPTION: This snippet shows how to use file_stream function in Sanic to stream a large file. It demonstrates setting custom headers and mime type for the streamed file.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/streaming.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/mp4\")\nasync def handler_file_stream(request):\n    return await response.file_stream(\n        \"/path/to/sample.mp4\",\n        chunk_size=1024,\n        mime_type=\"application/metalink4+xml\",\n        headers={\n            \"Content-Disposition\": 'Attachment; filename=\"nicer_name.meta4\"',\n            \"Content-Type\": \"application/metalink4+xml\",\n        },\n    )\n```\n\n----------------------------------------\n\nTITLE: Deleting Cookies in Sanic\nDESCRIPTION: This snippet demonstrates how to delete cookies in a Sanic route handler. It shows two methods: explicitly deleting a cookie and setting a cookie with a short expiration time.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/cookies.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/cookie\")\nasync def test(request):\n    response = text(\"Time to eat some cookies muahaha\")\n\n    # This cookie will be set to expire in 0 seconds\n    response.delete_cookie(\"eat_me\")\n\n    # This cookie will self destruct in 5 seconds\n    response.add_cookie(\"fast_bake\", \"Be quick!\", max_age=5)\n\n    return response\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Websocket Route in Sanic\nDESCRIPTION: Shows two equivalent methods for setting up a websocket route in Sanic - using add_websocket_route() or the @app.websocket decorator.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/websockets.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request, Websocket\n\nasync def feed(request: Request, ws: Websocket):\n    pass\n\napp.add_websocket_route(feed, \"/feed\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request, Websocket\n\n@app.websocket(\"/feed\")\nasync def feed(request: Request, ws: Websocket):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Registering a Listener Function in Sanic Using register_listener Method\nDESCRIPTION: Example showing how to register a database setup function as a 'before_server_start' listener using the register_listener method, which injects the Sanic application instance into the listener function.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/listeners.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def setup_db(app):\n    app.ctx.db = await db_setup()\n\napp.register_listener(setup_db, \"before_server_start\")\n```\n\n----------------------------------------\n\nTITLE: Using Application Context in Sanic\nDESCRIPTION: Example of using the new application context (ctx) object to store database connection information during server startup.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.3.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.before_server_startup\nasync def startup_db(app, _):\n    # WRONG\n    app.db = await connect_to_db()\n\n    # CORRECT\n    app.ctx.db = await connect_to_db()\n```\n\n----------------------------------------\n\nTITLE: Enabling Request Streaming in Sanic using Decorator\nDESCRIPTION: This snippet shows how to enable request streaming using a keyword argument in the route decorator. It allows reading the request body in chunks.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/streaming.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/stream\", stream=True)\nasync def handler(request):\n        ...\n        body = await request.stream.read()\n        ...\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Decorator Syntax for Sanic Listeners\nDESCRIPTION: Example showing the shorthand decorator syntax for registering a listener function, which is more concise and can benefit from IDE autocomplete functionality.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/listeners.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.before_server_start\nasync def setup_db(app):\n    app.ctx.db = await db_setup()\n```\n\n----------------------------------------\n\nTITLE: Using Custom JSON Serialization Library in Sanic Python\nDESCRIPTION: Demonstrates how to use an alternative JSON serialization library (orjson) for a Sanic application.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom orjson import dumps\n\napp = Sanic(\"MyApp\", dumps=dumps)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom TOML Configuration for Sanic in Python\nDESCRIPTION: Demonstrates a more complex custom configuration setup using TOML files. This example includes methods for loading and processing TOML configuration data.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic, text\nfrom sanic.config import Config\n\nclass TomlConfig(Config):\n    def __init__(self, *args, path: str, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        with open(path, \"r\") as f:\n            self.apply(toml.load(f))\n\n    def apply(self, config):\n        self.update(self._to_uppercase(config))\n\n    def _to_uppercase(self, obj: Dict[str, Any]) -> Dict[str, Any]:\n        retval: Dict[str, Any] = {}\n        for key, value in obj.items():\n            upper_key = key.upper()\n            if isinstance(value, list):\n                retval[upper_key] = [\n                    self._to_uppercase(item) for item in value\n                ]\n            elif isinstance(value, dict):\n                retval[upper_key] = self._to_uppercase(value)\n            else:\n                retval[upper_key] = value\n        return retval\n\ntoml_config = TomlConfig(path=\"/path/to/config.toml\")\napp = Sanic(toml_config.APP_NAME, config=toml_config)\n```\n\n----------------------------------------\n\nTITLE: Registering Versioned Blueprints\nDESCRIPTION: Demonstrates how to register multiple versioned blueprints with a Sanic application. Each blueprint will have its routes prefixed with its respective version number.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom auth_blueprints import auth1, auth2\n\napp = Sanic(__name__)\napp.blueprint(auth1)\napp.blueprint(auth2)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom JSON Loads Function in Sanic\nDESCRIPTION: Demonstrates how to set a custom JSON loads function globally for a Sanic application, using orjson as an example.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.6.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom orjson import loads\n\napp = Sanic(\"Test\", loads=loads)\n```\n\n----------------------------------------\n\nTITLE: Custom Type Converter Configuration\nDESCRIPTION: Example of adding custom type converters to Sanic configuration.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/configuration.md#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(..., config=Config(converters=[UUID]))\n```\n\n----------------------------------------\n\nTITLE: Pydantic Integration Example\nDESCRIPTION: Integration example showing how to use Pydantic models with Sanic OpenAPI for schema generation\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/openapi/decorators.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic, json\nfrom sanic_ext import validate, openapi\nfrom pydantic import BaseModel, Field\n\n@openapi.component\nclass Item(BaseModel):\n    name: str\n    description: str = None\n    price: float\n    tax: float = None\n\nclass ItemList(BaseModel):\n    items: List[Item]\n\napp = Sanic(\"test\")\n\n@app.get(\"/\")\n@openapi.definition(\n    body={\n        \"application/json\": ItemList.schema(\n            ref_template=\"#/components/schemas/{model}\"\n        )\n    },\n)\nasync def get(request):\n    return json({})\n```\n\n----------------------------------------\n\nTITLE: Using Connection Context in Sanic\nDESCRIPTION: Example of using the new connection context (ctx) object to maintain state across multiple requests from the same client connection.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.3.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def increment_foo(request):\n    if not hasattr(request.conn_info.ctx, \"foo\"):\n        request.conn_info.ctx.foo = 0\n    request.conn_info.ctx.foo += 1\n\n@app.get(\"/\")\nasync def count_foo(request):\n    return text(f\"request.conn_info.ctx.foo={request.conn_info.ctx.foo}\")\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Sanic Docker Project\nDESCRIPTION: Shows the basic file structure for a Dockerized Sanic application with the main server file, requirements, and Dockerfile.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/deployment/docker.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# /path/to/SanicDocker\nSanicDocker\n├── requirements.txt\n├── dockerfile\n└── server.py\n```\n\n----------------------------------------\n\nTITLE: Websocket Signals in Sanic\nDESCRIPTION: Demonstrates the usage of new websocket signals in Sanic: before, after, and exception handlers for websocket connections.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.12.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.signal(\"websocket.handler.before\")\nasync def ws_before(request: Request, websocket: Websocket):\n    ...\n\n@app.signal(\"websocket.handler.after\")\nasync def ws_after(request: Request, websocket: Websocket):\n    ...\n    \n@app.signal(\"websocket.handler.exception\")\nasync def ws_exception(\n    request: Request, websocket: Websocket, exception: Exception\n):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Service Injection with Database Connection\nDESCRIPTION: Shows how to inject services like database connections using the low-level API, demonstrating setup before server start and connection handling.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/injection.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass FakeConnection:\n    async def execute(self, query: str, **arguments):\n        return \"result\"\n\n@app.before_server_start\nasync def setup_db(app, _):\n    app.ctx.db_conn = FakeConnection()\n    app.ext.add_dependency(FakeConnection, get_db)\n\ndef get_db(request: Request):\n    return request.app.ctx.db_conn\n\n\n\n@app.get(\"/\")\nasync def handler(request, conn: FakeConnection):\n    response = await conn.execute(\"...\")\n    return text(response)\n```\n\n----------------------------------------\n\nTITLE: Defining Pydantic Model for Validation in Python\nDESCRIPTION: This snippet illustrates how to create a Pydantic model for validation in a Sanic application. It defines a Person model with name and age fields.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/validation.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Person(BaseModel):\n    name: str\n    age: int\n```\n\n----------------------------------------\n\nTITLE: Purging Completed and Cancelled Tasks\nDESCRIPTION: Shows how to purge completed or cancelled tasks from the app.tasks property to prevent memory buildup from tasks that are no longer active.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/tasks.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\napp.purge_tasks()\n```\n\n----------------------------------------\n\nTITLE: Basic Sanic Application Setup\nDESCRIPTION: A simple Sanic application that responds with 'OK!' to the root endpoint. Note that the host is set to '0.0.0.0' to ensure the application is accessible from outside the container.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/deployment/docker.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"MySanicApp\")\n\n@app.get('/')\nasync def hello(request):\n    return text(\"OK!\")\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8000)\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with TLS via Command Line\nDESCRIPTION: Example of how to start a Sanic server with TLS enabled using the command line interface, specifying the certificate directory.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/tls.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo sanic myserver:app -H :: -p 443 \\\n  --tls /etc/letsencrypt/live/example.com/\n```\n\n----------------------------------------\n\nTITLE: Versioning Blueprint Groups\nDESCRIPTION: Shows how to apply versioning to an entire group of blueprints. This creates a versioned API with multiple endpoints under the same version prefix.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nauth = Blueprint(\"auth\", url_prefix=\"/auth\")\nmetrics = Blueprint(\"metrics\", url_prefix=\"/metrics\")\n\ngroup = Blueprint.group(auth, metrics, version=\"v1\")\n\n# This will provide APIs prefixed with the following URL path\n# /v1/auth/ and /v1/metrics\n```\n\n----------------------------------------\n\nTITLE: Running Sanic as a Python Module\nDESCRIPTION: Shows how to run a Sanic application directly as a Python module with command-line arguments.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npython -m sanic server.app --host=0.0.0.0 --port=1337 --workers=4\n```\n\n----------------------------------------\n\nTITLE: Configuration File Example\nDESCRIPTION: Example of a configuration file that can be loaded into Sanic.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/configuration.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# my_config.py\nA = 1\nB = 2\n```\n\n----------------------------------------\n\nTITLE: Writing an Asynchronous Test with Sanic ASGI Client\nDESCRIPTION: Example of how to write an asynchronous test using Sanic's ASGI client. It shows the setup of a Sanic app, creating a pytest fixture, and writing an async test function using pytest-asyncio to verify the response.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-testing/getting-started.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom sanic import Sanic, response\n\n@pytest.fixture\ndef app():\n    sanic_app = Sanic(__name__)\n\n    @sanic_app.get(\"/\")\n    def basic(request):\n        return response.text(\"foo\")\n\n    return sanic_app\n\n@pytest.mark.asyncio\nasync def test_basic_asgi_client(app):\n    request, response = await app.asgi_client.get(\"/\")\n\n    assert request.method.lower() == \"get\"\n    assert response.body == b\"foo\"\n    assert response.status == 200\n```\n\n----------------------------------------\n\nTITLE: Creating a Proxy-Aware Sanic Application\nDESCRIPTION: A simple Sanic application example that displays connection information, including forwarded headers. This demonstrates how a Sanic app can be configured to work with a proxy such as Caddy.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/deployment/caddy.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.response import text\n\napp = Sanic(\"proxied_example\")\n\n@app.get(\"/\")\ndef index(request):\n    # This should display external (public) addresses:\n    return text(\n        f\"{request.remote_addr} connected to {request.url_for('index')}\\n\"\n        f\"Forwarded: {request.forwarded}\\n\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Raising NotFound Exception in a Login Route\nDESCRIPTION: Demonstrates how to use the built-in NotFound exception to return a 404 status code when a user cannot be found. The example includes a custom error message with interpolated username from the request.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import exceptions\n\n@app.route(\"/login\")\nasync def login(request):\n    user = await some_login_func(request)\n    if not user:\n        raise exceptions.NotFound(\n            f\"Could not find user with username={request.json.username}\"\n        )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Named Tasks in Sanic\nDESCRIPTION: Shows how to retrieve a previously registered named task using get_task(). This allows accessing task instances from anywhere in the application.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/tasks.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntask = app.get_task(\"slow_task\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-serve Applications in Sanic Python\nDESCRIPTION: Demonstrates how to run multiple Sanic applications concurrently bound to different ports using the new multi-serve API. Uses app.prepare() to configure each instance and Sanic.serve() to start all applications.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.3.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"One\")\napp2 = Sanic(\"Two\")\n\napp.prepare(port=9999)\napp.prepare(port=9998)\napp.prepare(port=9997)\napp2.prepare(port=8888)\napp2.prepare(port=8887)\n\nSanic.serve()\n```\n\n----------------------------------------\n\nTITLE: Implementing Request and Response Lifecycle Hooks in Sanic\nDESCRIPTION: These snippets show how to use Sanic's lifecycle hooks to execute code before a request is processed and after a response is generated.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/index.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def add_key(request):\n    request.ctx.foo = \"bar\"\n\n@app.on_response\nasync def custom_banner(request, response):\n    response.headers[\"X-Foo\"] = request.ctx.foo\n```\n\n----------------------------------------\n\nTITLE: Customizing Version Prefix in Sanic Route\nDESCRIPTION: Demonstrates how to customize the version prefix for a route. This allows mounting versioned routes under custom paths like '/api/v' instead of the default '/v'.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/versioning.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# /v1/my/path\napp.route(\"/my/path\", version=1, version_prefix=\"/api/v\")\n```\n\n----------------------------------------\n\nTITLE: Running Sanic Simple Server from Command Line\nDESCRIPTION: This snippet shows how to use Sanic's Simple Server to serve static files from a directory.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nsanic ./path/to/dir --simple\n```\n\n----------------------------------------\n\nTITLE: Creating a Fully Annotated Handler in Sanic\nDESCRIPTION: Demonstrates how to use type annotations in a Sanic handler function, specifying the request type and return type.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/handlers.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.response import HTTPResponse, text\nfrom sanic.request import Request\n\n@app.get(\"/typed\")\nasync def typed_handler(request: Request) -> HTTPResponse:\n    return text(\"Done.\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Shared Context in Different Handlers\nDESCRIPTION: Shows how to access shared context objects from various Sanic handlers including before_server_starts, on_request, and route handlers.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.9.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.before_server_starts\nasync def before_server_starts(app):\n    assert isinstance(app.shared_ctx.queue, Queue)\n\n@app.on_request\nasync def on_request(request):\n    assert isinstance(request.app.shared_ctx.queue, Queue)\n\n@app.get(\"/\")\nasync def handler(request):\n    assert isinstance(request.app.shared_ctx.queue, Queue)\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with TLS via Python\nDESCRIPTION: Example of how to start a Sanic server with TLS enabled using Python code, specifying the certificate directory.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/tls.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp.run(\"::\", 443, ssl=\"/etc/letsencrypt/live/example.com/\")\n```\n\n----------------------------------------\n\nTITLE: Adding Tasks Before Sanic App Startup\nDESCRIPTION: Shows how to add background tasks before calling app.run(). This approach creates the coroutine object on each worker rather than in the main process.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/tasks.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def slow_work():\n   ...\n\nasync def even_slower(num):\n   ...\n\napp = Sanic(...)\napp.add_task(slow_work) # Note: we are passing the callable and not coroutine object ...\napp.add_task(even_slower(10)) # ... or we can call the function and pass the coroutine.\napp.run(...)\n```\n\n----------------------------------------\n\nTITLE: Accessing Worker State in Sanic Request Handler\nDESCRIPTION: Shows how to access and print the state of all worker processes through the multiplexer in a request handler.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def print_state(request: Request):\n    print(request.app.m.workers)\n```\n\n----------------------------------------\n\nTITLE: Adding a New Route in Sanic REPL\nDESCRIPTION: Example of dynamically adding a new route to the Sanic application within the REPL for testing purposes.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/development.md#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> @app.get(\"/new-route\")\n... async def new_route(request):\n...     return sanic.json({\"hello\": \"world\"})\n...\n>>>\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Route Handlers\nDESCRIPTION: Implement Sanic route handlers for creating and retrieving user data with SQLAlchemy\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/orm.md#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# ./server.py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import selectinload\nfrom sanic.response import json\n\nfrom models import Car, Person\n\n@app.post(\"/user\")\nasync def create_user(request):\n    session = request.ctx.session\n    async with session.begin():\n        car = Car(brand=\"Tesla\")\n        person = Person(name=\"foo\", cars=[car])\n        session.add_all([person])\n    return json(person.to_dict())\n\n@app.get(\"/user/<pk:int>\")\nasync def get_user(request, pk):\n    session = request.ctx.session\n    async with session.begin():\n        stmt = select(Person).where(Person.id == pk).options(selectinload(Person.cars))\n        result = await session.execute(stmt)\n        person = result.scalar()\n\n    if not person:\n        return json({})\n\n    return json(person.to_dict())\n```\n\n----------------------------------------\n\nTITLE: Executing Custom Sanic CLI Command\nDESCRIPTION: Demonstrates the basic pattern for invoking a custom Sanic CLI command using the exec action.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/commands.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to:app exec <command> [--arg=value]\n```\n\n----------------------------------------\n\nTITLE: Prioritized Listeners in Sanic\nDESCRIPTION: Shows how to assign priority to a listener in Sanic. Higher priority numbers execute first.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.12.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.before_server_start(priority=3)\nasync def sample(app):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Sanic Inspector via Configuration\nDESCRIPTION: Shows how to enable the Sanic Inspector by setting a configuration value after creating the application instance.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/inspector.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"TestApp\")\napp.config.INSPECTOR = True\n```\n\n----------------------------------------\n\nTITLE: Advanced Caddy Configuration with Static File Handling\nDESCRIPTION: A more advanced Caddy configuration that serves static files directly from Caddy for better performance while proxying other requests to Sanic. It demonstrates using a Unix socket for communication with Sanic and Brotli compression for static assets.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/deployment/caddy.md#2025-04-20_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\napp.example.com {\n    # Look for static files first, proxy to Sanic if not found\n    route {\n        file_server {\n            root /srv/sanicexample/static\n            precompress br                     # brotli your large scripts and styles\n            pass_thru\n        }\n        reverse_proxy unix//tmp/sanic.socket   # sanic --unix /tmp/sanic.socket\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanic Run Parameters in Python\nDESCRIPTION: This snippet shows how to configure Sanic's run method with custom host, port, and access log settings.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# server.py\napp = Sanic(\"MyApp\")\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port=1337, access_log=False)\n```\n\n----------------------------------------\n\nTITLE: Enabling Sanic Inspector via Application Instance\nDESCRIPTION: Shows how to enable the Sanic Inspector by setting a flag when creating the application instance.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/inspector.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"TestApp\", inspector=True)\n```\n\n----------------------------------------\n\nTITLE: Securing All Endpoints Globally\nDESCRIPTION: Examples of applying security schemes globally to all endpoints in a Sanic application. Shows both default security and token-based security implementations.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/openapi/security.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp.ext.openapi.secured()\napp.ext.openapi.secured(\"token\")\n```\n\n----------------------------------------\n\nTITLE: Server Startup Event Listeners in Sanic\nDESCRIPTION: Demonstrates different ways to implement before_server_start event listeners with and without the loop parameter.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.3.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.before_server_start\nasync def without(app):\n    ...\n\n@app.before_server_start\nasync def with(app, loop):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using TestManager for Sanic Testing in Python\nDESCRIPTION: Demonstrates how to use the TestManager, which sets up both SanicTestClient and SanicASGITestClient. This provides a convenient way to access both test clients.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-testing/clients.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_testing import TestManager\n\nmgr = TestManager(app)\napp.test_client.get(\"/path/to/endpoint\")\n# or\nmgr.test_client.get(\"/path/to/endpoint\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Sanic Application Factory\nDESCRIPTION: Demonstrates how to create a Sanic application using the factory pattern, which returns an instance of Sanic.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\n\ndef create_app() -> Sanic:\n    app = Sanic(\"MyApp\")\n\n    return app\n```\n\n----------------------------------------\n\nTITLE: Managing and Restarting Processes in Sanic\nDESCRIPTION: Demonstrates how to use the multiplexer to manage, start, and restart processes in Sanic. This includes defining a task function and setting up route handlers for restarting and starting processes.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.12.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef task(n: int = 10, **kwargs):\n    print(\"TASK STARTED\", kwargs)\n    for i in range(n):\n        print(f\"Running task - Step {i+1} of {n}\")\n        sleep(1)\n\n@app.get(\"/restart\")\nasync def restart_handler(request: Request):\n    request.app.m.restart(\"Sanic-TEST-0\")\n    return json({\"foo\": request.app.m.name})\n\n\n@app.get(\"/start\")\nasync def start_handler(request: Request):\n    request.app.m.manage(\"NEW\", task, kwargs={\"n\": 7}, workers=2)\n    return json({\"foo\": request.app.m.name})\n\n@app.main_process_ready\ndef start_process(app: Sanic):\n    app.manager.manage(\"TEST\", task, kwargs={\"n\": 3}, restartable=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Certificate Creator in Sanic\nDESCRIPTION: Python code to configure the certificate creator for automatic TLS in Sanic. Options include automatic selection, mkcert, or trustme.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/development.md#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\napp.config.LOCAL_CERT_CREATOR = \"auto\"\napp.config.LOCAL_CERT_CREATOR = \"mkcert\"\napp.config.LOCAL_CERT_CREATOR = \"trustme\"\n```\n\n----------------------------------------\n\nTITLE: Defining Tortoise-ORM Model in Python\nDESCRIPTION: Create a Users model class inheriting from tortoise.Model. This defines the structure of the users table in the database, including an integer primary key and a character field for the name.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/orm.md#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# ./models.py\nfrom tortoise import Model, fields\n\nclass Users(Model):\n    id = fields.IntField(pk=True)\n    name = fields.CharField(50)\n\n    def __str__(self):\n        return f\"I am {self.name}\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Reloader in Sanic\nDESCRIPTION: Command to start Sanic with the automatic reloader feature, which restarts the application whenever a Python file is changed. This improves the development workflow by eliminating manual restarts.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/development.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to:app --reload\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with HTTP/3 Support from Command Line\nDESCRIPTION: These snippets demonstrate how to start a Sanic server with HTTP/3 support from the command line.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app --http=3\n```\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app -3\n```\n\n----------------------------------------\n\nTITLE: Blueprint Exception Handling\nDESCRIPTION: Shows how to register blueprint-specific exception handlers. This example handles 404 NotFound errors for routes managed by this blueprint.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@bp.exception(NotFound)\ndef ignore_404s(request, exception):\n    return text(\"Yep, I totally found the page: {}\".format(request.url))\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanic with SSL Dictionary\nDESCRIPTION: Example of configuring SSL in Sanic using a dictionary to specify certificate and key file paths, with optional password for encrypted keys.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/tls.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nssl = {\n    \"cert\": \"/path/to/fullchain.pem\",\n    \"key\": \"/path/to/privkey.pem\",\n    \"password\": \"for encrypted privkey file\",   # Optional\n}\napp.run(host=\"0.0.0.0\", port=8443, ssl=ssl)\n```\n\n----------------------------------------\n\nTITLE: Using Sanic's Development Mode with Integrated REPL\nDESCRIPTION: Command to start Sanic in development mode, which automatically enables the REPL along with debug mode and auto-reload features.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/development.md#2025-04-20_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app --dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Current Request Getter in Sanic Logging\nDESCRIPTION: This snippet shows how to implement a custom logging configuration in Sanic that includes the request ID in log messages. It uses the Request.get_current() method to access the current request object.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/request.md#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nfrom sanic import Request, Sanic, json\nfrom sanic.exceptions import SanicException\nfrom sanic.log import LOGGING_CONFIG_DEFAULTS\n\nLOGGING_FORMAT = (\n    \"%(asctime)s - (%(name)s)[%(levelname)s][%(host)s]: \"\n    \"%(request_id)s %(request)s %(message)s %(status)d %(byte)d\"\n)\n\nold_factory = logging.getLogRecordFactory()\n\ndef record_factory(*args, **kwargs):\n    record = old_factory(*args, **kwargs)\n    record.request_id = \"\"\n\n    try:\n        request = Request.get_current()\n    except SanicException:\n        ...\n    else:\n        record.request_id = str(request.id)\n\n    return record\n\nlogging.setLogRecordFactory(record_factory)\n\n\nLOGGING_CONFIG_DEFAULTS[\"formatters\"][\"access\"][\"format\"] = LOGGING_FORMAT\napp = Sanic(\"Example\", log_config=LOGGING_CONFIG_DEFAULTS)\n```\n\n----------------------------------------\n\nTITLE: Defining Static Content Blueprint for API Structure\nDESCRIPTION: Creates a blueprint for managing static content routes with a specific URL prefix. This is part of a modular API structure example.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# api/content/static.py\nfrom sanic import Blueprint\n\nstatic = Blueprint(\"content_static\", url_prefix=\"/static\")\n```\n\n----------------------------------------\n\nTITLE: Handling Forwarded Headers in Sanic Route (Python)\nDESCRIPTION: Example of a Sanic route that returns information about the request's remote address, scheme, server name, port, and forwarded headers.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/proxy-headers.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/fwd\")\nasync def forwarded(request):\n    return json(\n        {\n            \"remote_addr\": request.remote_addr,\n            \"scheme\": request.scheme,\n            \"server_name\": request.server_name,\n            \"server_port\": request.server_port,\n            \"forwarded\": request.forwarded,\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Flexible Decorator Template with Optional Arguments in Sanic\nDESCRIPTION: Template for creating a flexible Sanic decorator that can be used with or without arguments, using keyword-only arguments for clearer implementation.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/decorators.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef foobar(maybe_func=None, *, arg1=None, arg2=None):\n    def decorator(f):\n        @wraps(f)\n        async def decorated_function(request, *args, **kwargs):\n\n            response = f(request, *args, **kwargs)\n            if isawaitable(response):\n                response = await response\n\n            return response\n\n        return decorated_function\n\n    return decorator(maybe_func) if maybe_func else decorator\n```\n\n----------------------------------------\n\nTITLE: Decorator Template with Required Arguments in Sanic\nDESCRIPTION: Template for creating a Sanic decorator that always requires arguments. Shows both implementation and usage examples.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/decorators.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef foobar(arg1, arg2):\n    def decorator(f):\n        @wraps(f)\n        async def decorated_function(request, *args, **kwargs):\n\n            response = f(request, *args, **kwargs)\n            if isawaitable(response):\n                response = await response\n\n            return response\n\n        return decorated_function\n\n    return decorator\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Lifecycle Events in Sanic\nDESCRIPTION: These snippets demonstrate how to use Sanic's server lifecycle events to execute code before the server starts and after it stops, useful for setup and teardown operations.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/index.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.before_server_start\nasync def setup_db(app):\n    app.ctx.db_pool = await db_setup()\n\n@app.after_server_stop\nasync def setup_db(app):\n    await app.ctx.db_pool.shutdown()\n```\n\n----------------------------------------\n\nTITLE: Managing Untracked Process in Sanic\nDESCRIPTION: Shows how to configure an untracked process that will be removed from tracking upon completion.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@app.main_process_ready\nasync def ready(app: Sanic, _):\n    app.manager.manage(\n        \"OneAndDone\",\n        do_once,\n        {},\n        tracked=False,\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Sanic Application with Proxy Support\nDESCRIPTION: A simple Sanic application that demonstrates handling proxied requests and displaying client information. The app shows the remote address and forwarded headers information.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/deployment/nginx.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.response import text\n\napp = Sanic(\"proxied_example\")\n\n@app.get(\"/\")\ndef index(request):\n    # This should display external (public) addresses:\n    return text(\n        f\"{request.remote_addr} connected to {request.url_for('index')}\\n\"\n        f\"Forwarded: {request.forwarded}\\n\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Managing Background Tasks in Sanic\nDESCRIPTION: Example of adding, retrieving, and canceling named background tasks in Sanic.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.12.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\napp.add_task(dummy, name=\"dummy_task\")\ntask = app.get_task(\"dummy_task\")\n\napp.cancel_task(\"dummy_task\")\n```\n\n----------------------------------------\n\nTITLE: Querying Health Monitor Diagnostics Endpoint\nDESCRIPTION: Example of the JSON response from the health monitor's diagnostics endpoint. It shows the state of the main Sanic process and worker processes, including PIDs, start times, and restart information.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/health-monitor.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    'Sanic-Main': {'pid': 99997},\n    'Sanic-Server-0-0': {\n        'server': True,\n        'state': 'ACKED',\n        'pid': 9999,\n        'start_at': datetime.datetime(2022, 10, 1, 0, 0, 0, 0, tzinfo=datetime.timezone.utc),\n        'starts': 2,\n        'restart_at': datetime.datetime(2022, 10, 1, 0, 0, 12, 861332, tzinfo=datetime.timezone.utc)\n    },\n    'Sanic-Reloader-0': {\n        'server': False,\n        'state': 'STARTED',\n        'pid': 99998,\n        'start_at': datetime.datetime(2022, 10, 1, 0, 0, 0, 0, tzinfo=datetime.timezone.utc),\n        'starts': 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with HTTP/3 Support in Python\nDESCRIPTION: This snippet shows how to run a Sanic application with HTTP/3 support in Python code.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_19\n\nLANGUAGE: python\nCODE:\n```\napp.run(version=3)\n```\n\n----------------------------------------\n\nTITLE: Customizing Sanic Request Class in Python\nDESCRIPTION: Shows how to create and use a custom Request class for a Sanic application. This example modifies the default request ID generator.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nfrom sanic import Request, Sanic, text\n\nclass NanoSecondRequest(Request):\n    @classmethod\n    def generate_id(*_):\n        return time.time_ns()\n\napp = Sanic(..., request_class=NanoSecondRequest)\n\n@app.get(\"/\")\nasync def handler(request):\n    return text(str(request.id))\n```\n\n----------------------------------------\n\nTITLE: Setting Middleware Priority in Sanic\nDESCRIPTION: Example showing how to modify middleware execution order by assigning priority values, where higher values execute earlier.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/middleware.md#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def low_priority(request):\n    ...\n\n@app.on_request(priority=99)\nasync def high_priority(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Log Formatters in Sanic\nDESCRIPTION: Demonstrates how to set up JSON formatters for both generic and access logs in Sanic, useful for integration with third-party logging platforms.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2024/v24.6.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.log import LOGGING_CONFIG_DEFAULTS\n\nLOGGING_CONFIG_DEFAULTS[\"formatters\"] = {\n    \"generic\": {\n        \"class\": \"sanic.logging.formatter.JSONFormatter\"\n    },\n    \"access\": {\n        \"class\": \"sanic.logging.formatter.JSONAccessFormatter\"\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Route-Level CORS Override in Sanic\nDESCRIPTION: Demonstrates how to override global CORS settings for a specific route using the @cors decorator.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/http/cors.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import cors\n\napp.config.CORS_ORIGINS = \"https://foo.com\"\n\n@app.get(\"/\", host=\"bar.com\")\n@cors(origin=\"https://bar.com\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n```\n\n----------------------------------------\n\nTITLE: Waiting for Events in Sanic\nDESCRIPTION: Demonstrates how to wait for events to be triggered in Sanic, including using background tasks for non-blocking operation.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/signals.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def wait_for_event(app):\n    while True:\n        print(\"> waiting\")\n        await app.event(\"foo.bar.baz\")\n        print(\"> event found\\n\")\n\n@app.after_server_start\nasync def after_server_start(app, loop):\n    app.add_task(wait_for_event(app))\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of Flexible Decorator with and without Arguments\nDESCRIPTION: Examples showing how to apply a flexible Sanic decorator both with and without arguments to route handlers.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/decorators.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\n@foobar(arg1=1, arg2=2)\nasync def handler(request: Request):\n    return text(\"hi\")\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\n@foobar\nasync def handler(request: Request):\n    return text(\"hi\")\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Sanic CLI Command\nDESCRIPTION: Shows how to create a custom CLI command using the @app.command decorator. The function can be async and accept keyword arguments.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/commands.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.command\nasync def hello(name=\"world\"):\n    print(f\"Hello, {name}.\")\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Methods as Enum in Sanic 21.6\nDESCRIPTION: Demonstrates the use of the new 'sanic.HTTPMethod' Enum, which can be used interchangeably with strings when specifying HTTP methods in route definitions.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.6.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic, HTTPMethod\n\n@app.route(\"/\", methods=[\"post\", \"PUT\", HTTPMethod.PATCH])\nasync def handler(...):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Dynamic Process Management Handler\nDESCRIPTION: Example of dynamically adding a new process through a request handler using the multiplexer.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/start\")\nasync def start_handler(request: Request):\n    request.app.m.manage(\n        \"MyProcess\",\n        my_process,\n        {\"foo\": \"bar\"},\n        workers=2,\n    )\n    return json({\"foo\": request.app.m.name})\n```\n\n----------------------------------------\n\nTITLE: Running Sanic Application with Proxy Support\nDESCRIPTION: Command to run the Sanic application with proxy support enabled. The SANIC_PROXIES_COUNT environment variable tells Sanic to trust X-Forwarded headers from Caddy.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/deployment/caddy.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSANIC_PROXIES_COUNT=1 sanic proxied_example --port 8001\n```\n\n----------------------------------------\n\nTITLE: Managing Arbitrary Processes in Sanic\nDESCRIPTION: Shows how to register and manage arbitrary processes using the main_process_ready listener in Sanic.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.9.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.main_process_ready\nasync def ready(app: Sanic, _):\n    app.manager.manage(\"MyProcess\", my_process, {\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: Registering a Listener Function with Application and Loop Parameters\nDESCRIPTION: Example demonstrating how to register a listener that accepts both the application instance and event loop as parameters, which is supported for backward compatibility with pre-v22.3 Sanic.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/listeners.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.listener(\"before_server_start\")\nasync def setup_db(app, loop):\n    app.ctx.db = await db_setup()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Sanic Application Instance in Python\nDESCRIPTION: Demonstrates how to retrieve the only registered Sanic application instance when there's just one.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nSanic(\"My only app\")\n\napp = Sanic.get_app()\n```\n\n----------------------------------------\n\nTITLE: Basic OpenAPI Decorator Usage in Sanic\nDESCRIPTION: Example showing basic usage of OpenAPI decorators with a Sanic route handler, demonstrating summary and description decorators\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/openapi/decorators.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import openapi\n\n@app.get(\"/path/to/<something>\")\n@openapi.summary(\"This is a summary\")\n@openapi.description(\"This is a description\")\nasync def handler(request, something: str):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Dictionary Configuration Update\nDESCRIPTION: Shows how to update configuration using a dictionary.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/configuration.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\napp.update_config({\"A\": 1, \"B\": 2})\n```\n\n----------------------------------------\n\nTITLE: Global Decorators in Class Based Views\nDESCRIPTION: Shows how to apply decorators to all methods in a class-based view using the decorators class variable.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/class-based-views.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass ViewWithDecorator(HTTPMethodView):\n  decorators = [some_decorator_here]\n\n  def get(self, request, name):\n    return text(\"Hello I have a decorator\")\n\n  def post(self, request, name):\n    return text(\"Hello I also have a decorator\")\n\napp.add_route(ViewWithDecorator.as_view(), \"/url\")\n```\n\n----------------------------------------\n\nTITLE: Using SSLContext in Sanic\nDESCRIPTION: Example of creating and configuring an SSL context with full control over security settings before passing it to the Sanic run method.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/tls.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport ssl\n\ncontext = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\ncontext.load_cert_chain(\"certs/fullchain.pem\", \"certs/privkey.pem\")\n\napp.run(host=\"0.0.0.0\", port=8443, ssl=context)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Sanic Exception\nDESCRIPTION: Defines a custom exception class 'TeapotError' that inherits from SanicException, with a custom status code and message.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nclass TeapotError(SanicException):\n    status_code = 418\n    message = \"Sorry, I cannot brew coffee\"\n\nraise TeapotError\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Process Queue\nDESCRIPTION: Implementation of shared context between worker processes using multiprocessing Queue in the main process start listener.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom multiprocessing import Queue\n\n@app.main_process_start\nasync def main_process_start(app):\n    app.shared_ctx.queue = Queue()\n```\n\n----------------------------------------\n\nTITLE: Route Context Management\nDESCRIPTION: Demonstrates how to add context to routes using ctx_ prefix and access it in request handlers.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/routing.md#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/1\", ctx_label=\"something\")\nasync def handler1(request):\n    ...\n\n@app.get(\"/2\", ctx_label=\"something\")\nasync def handler2(request):\n    ...\n\n@app.get(\"/99\")\nasync def handler99(request):\n    ...\n\n@app.on_request\nasync def do_something(request):\n    if request.route.ctx.label == \"something\":\n        ...\n```\n\n----------------------------------------\n\nTITLE: Recommended Method for Setting Response Cookies in Sanic\nDESCRIPTION: Preferred approach for setting cookies with properties in Sanic. This uses the add_cookie method which will continue to be supported in future versions.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.3.md#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nresp = HTTPResponse()\nresp.add_cookie(\"foo\", \"bar\", httponly=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Fork Start Method in Sanic\nDESCRIPTION: Demonstrates how to configure Sanic to use the 'fork' start method instead of the default 'spawn' method on Unix systems.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\n\nSanic.start_method = \"fork\"\n```\n\n----------------------------------------\n\nTITLE: Basic Caddy Configuration File\nDESCRIPTION: A minimal Caddyfile configuration that sets up a reverse proxy to a Sanic application running locally. This is equivalent to the simple command-line version but in configuration file format.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/deployment/caddy.md#2025-04-20_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nexample.com {\n    reverse_proxy localhost:8001\n}\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Async Engine Setup\nDESCRIPTION: Configure SQLAlchemy async engine with MySQL connection\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/orm.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# ./server.py\nfrom sanic import Sanic\nfrom sqlalchemy.ext.asyncio import create_async_engine\n\napp = Sanic(\"my_app\")\n\nbind = create_async_engine(\"mysql+aiomysql://root:root@localhost/test\", echo=True)\n```\n\n----------------------------------------\n\nTITLE: Running Sanic Applications from Command Line\nDESCRIPTION: Demonstrates the simplified CLI targets for starting Sanic applications. Shows three different patterns: using a global app instance, factory pattern, or serving from a directory.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/docs/sanic/releases/23/23.3.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ sanic path.to.module:app          # global app instance\n$ sanic path.to.module:create_app   # factory pattern\n$ sanic ./path/to/directory/        # simple serve\n```\n\n----------------------------------------\n\nTITLE: Watching Multiple Directories with Automatic Reloader\nDESCRIPTION: Command demonstrating how to watch multiple directories for changes using the shorthand flags. The application will reload when files in any of the specified directories are modified.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/development.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to:app -r -R /path/to/one -R /path/to/two\n```\n\n----------------------------------------\n\nTITLE: Basic Sanic Configuration\nDESCRIPTION: Shows basic configuration using dot notation and dictionary-style access to set database configuration values.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"myapp\")\napp.config.DB_NAME = \"appdb\"\napp.config[\"DB_USER\"] = \"appuser\"\n```\n\n----------------------------------------\n\nTITLE: Binding Multiple Sanic Applications to Different Ports\nDESCRIPTION: This snippet demonstrates how to bind multiple Sanic applications to different ports using the prepare and serve methods.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    app1.prepare(host='0.0.0.0', port=9990)\n    app1.prepare(host='0.0.0.0', port=9991)\n    app2.prepare(host='0.0.0.0', port=5555)\n    Sanic.serve()\n```\n\n----------------------------------------\n\nTITLE: Starting Sanic with REPL for Interactive Development\nDESCRIPTION: Command to start Sanic with the REPL (Read-Eval-Print Loop) enabled, allowing interactive debugging and testing directly from the command line.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/development.md#2025-04-20_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app --repl\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode for Detailed Error Information\nDESCRIPTION: Shows how to enable debug mode in Sanic, which causes exceptions to include detailed traceback information in the response. This is useful during development.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\napp.config.DEBUG = True\n```\n\n----------------------------------------\n\nTITLE: Loading Config with Environment Variables in Path\nDESCRIPTION: Shows how to use environment variables in the configuration file path.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/configuration.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ export my_path=\"/path/to\"\n```\n\nLANGUAGE: python\nCODE:\n```\napp.update_config(\"${my_path}/my_config.py\")\n```\n\n----------------------------------------\n\nTITLE: Registering Routes After Blueprint Registration\nDESCRIPTION: Demonstrates that routes can be added to a blueprint even after it has been registered with the application. This feature was added in Sanic v21.12.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp.blueprint(bp)\n\n@bp.route(\"/\")\nasync def bp_root(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Adding Cookies to Sanic Response\nDESCRIPTION: Example of using the convenience method for cookie creation in Sanic responses. Shows how to add a cookie with a specified domain to a text response.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/docs/sanic/releases/23/23.3.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresponse = text(\"...\")\nresponse.add_cookie(\"test\", \"It worked!\", domain=\".yummy-yummy-cookie.com\")\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Sanic Inspector\nDESCRIPTION: Shows how to secure the Inspector HTTP instance by enabling TLS encryption with certificate and key paths.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/inspector.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\napp.config.INSPECTOR_TLS_CERT = \"/path/to/cert.pem\"\napp.config.INSPECTOR_TLS_KEY = \"/path/to/key.pem\"\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Management Commands\nDESCRIPTION: Commands for managing the Sanic service using systemd, including reload, start, and enable operations.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/deployment/nginx.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl daemon-reload\nsystemctl start sanicexample\nsystemctl enable sanicexample\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Domain Certificates via CLI\nDESCRIPTION: Example of configuring multiple TLS certificates for different domains using Sanic's command line interface with the --tls option for each certificate.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/tls.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsanic myserver:app\n    --tls certs/example.com/\n    --tls certs/bigcorp.test/\n    --tls-strict-host\n```\n\n----------------------------------------\n\nTITLE: Using New Path Parameter Types in Sanic 21.6\nDESCRIPTION: Demonstrates the usage of new path parameter types 'str' and 'float' instead of deprecated 'string' and 'number' types. This change improves type hinting and consistency with Python's built-in types.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.6.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/<foo:str>/<bar:float>\")\nasync def handler(request, foo: str, bar: float):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Advanced Cookie Operations in Sanic\nDESCRIPTION: Examples of cookie prefixes, partitioned cookies, and cookie access patterns.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.3.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresponse.cookies.add_cookie(\"foo\", \"bar\", host_prefix=True)\nrequest.cookies.get(\"foo\")\nrequest.cookies.foo\nrequest.cookies.getlist(\"foo\")\nresponse.cookies.add_cookie(..., partitioned=True)\n```\n\n----------------------------------------\n\nTITLE: Redirect Response Handler in Sanic\nDESCRIPTION: Shows how to redirect clients to a different path with a 302 response.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/response.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import redirect\n\n@app.route(\"/\")\nasync def handler(request):\n    return redirect(\"/login\")\n```\n\n----------------------------------------\n\nTITLE: Creating Silent Exceptions with quiet Flag\nDESCRIPTION: Shows how to create exceptions that don't get logged by using the quiet flag. This can be useful when using exceptions for flow control without polluting logs.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass SilentError(SanicException):\n    message = \"Something happened, but not shown in logs\"\n    quiet = True\n\nraise SilentError\n# or\nraise InvalidUsage(\"blah blah\", quiet=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic OPTIONS Route Generation\nDESCRIPTION: Implementation for automatically generating OPTIONS route handlers for existing routes that don't have them, including route compilation and handler setup.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/cors.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom collections import defaultdict\nfrom typing import Dict, FrozenSet\n\nfrom sanic import Sanic, response\nfrom sanic.router import Route\n\nfrom cors import _add_cors_headers\n\ndef _compile_routes_needing_options(\n    routes: Dict[str, Route]\n) -> Dict[str, FrozenSet]:\n    needs_options = defaultdict(list)\n    # This is 21.12 and later. You will need to change this for older versions.\n    for route in routes.values():\n        if \"OPTIONS\" not in route.methods:\n            needs_options[route.uri].extend(route.methods)\n\n    return {\n        uri: frozenset(methods) for uri, methods in dict(needs_options).items()\n    }\n\ndef _options_wrapper(handler, methods):\n    def wrapped_handler(request, *args, **kwargs):\n        nonlocal methods\n        return handler(request, methods)\n\n    return wrapped_handler\n\nasync def options_handler(request, methods) -> response.HTTPResponse:\n    resp = response.empty()\n    _add_cors_headers(resp, methods)\n    return resp\n\ndef setup_options(app: Sanic, _):\n    app.router.reset()\n    needs_options = _compile_routes_needing_options(app.router.routes_all)\n    for uri, methods in needs_options.items():\n        app.add_route(\n            _options_wrapper(options_handler, methods),\n            uri,\n            methods=[\"OPTIONS\"],\n        )\n    app.router.finalize()\n```\n\n----------------------------------------\n\nTITLE: Implementing Both Custom Config and Context Types\nDESCRIPTION: Demonstrates combining both custom config and context types in a Sanic application instance.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.config import Config\n\nclass CustomConfig(Config):\n    pass\n\nclass Foo:\n    pass\n\napp = Sanic(\"test\", config=CustomConfig(), ctx=Foo())\nreveal_type(app)  # N: Revealed type is \"sanic.app.Sanic[main.CustomConfig, main.Foo]\"\n```\n\n----------------------------------------\n\nTITLE: Usage Example of Decorator with Required Arguments\nDESCRIPTION: Example showing how to apply a Sanic decorator that requires arguments to a route handler.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/decorators.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\n@foobar(1, 2)\nasync def handler(request: Request):\n    return text(\"hi\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Access Logs in Sanic for Performance\nDESCRIPTION: This command demonstrates how to run a Sanic application with access logs disabled, which can significantly improve performance in production environments.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app --no-access-logs\n```\n\n----------------------------------------\n\nTITLE: Raising Sanic Exception with Extra and Context\nDESCRIPTION: Demonstrates raising a Sanic exception with additional 'extra' and 'context' information for internal use and client responses respectively.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nraise TeapotError(extra={\"foo\": \"bar\"}, context={\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: Blueprint Groups with Name Prefixing for Reusability\nDESCRIPTION: Demonstrates how to use name prefixing to make blueprints reusable and composable across multiple groups. This allows the same blueprint to be registered multiple times with unique names.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nbp1 = Blueprint(\"bp1\", url_prefix=\"/bp1\")\nbp2 = Blueprint(\"bp2\", url_prefix=\"/bp2\")\n\nbp1.add_route(lambda _: ..., \"/\", name=\"route1\")\nbp2.add_route(lambda _: ..., \"/\", name=\"route2\")\n\ngroup_a = Blueprint.group(\n    bp1, bp2, url_prefix=\"/group-a\", name_prefix=\"group-a\"\n)\ngroup_b = Blueprint.group(\n    bp1, bp2, url_prefix=\"/group-b\", name_prefix=\"group-b\"\n)\n\napp = Sanic(\"TestApp\")\napp.blueprint(group_a)\napp.blueprint(group_b)\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with Both HTTP/3 and HTTP/1.1 in Python\nDESCRIPTION: This snippet shows how to run a Sanic application supporting both HTTP/3 and HTTP/1.1 in Python code.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_21\n\nLANGUAGE: python\nCODE:\n```\napp.prepare(version=3)\napp.prepare(version=1)\nSanic.serve()\n```\n\n----------------------------------------\n\nTITLE: Creating a Blueprint with a Listener\nDESCRIPTION: This snippet demonstrates how to create a Sanic blueprint with an after_server_start listener. It's an example of a component that will be autodiscovered and registered with the main application.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/autodiscovery.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Blueprint\nfrom sanic.log import logger\n\nlevel1 = Blueprint(\"level1\")\n\n@level1.after_server_start\ndef print_something(app, loop):\n    logger.debug(\"something @ level1\")\n```\n\n----------------------------------------\n\nTITLE: Nginx Reverse Proxy Configuration\nDESCRIPTION: Nginx server configuration that sets up a reverse proxy to forward requests from /api/ to the Sanic application.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/mounting.md#2025-04-20_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80;\n\n    # Computed data service\n    location /api/ {\n        proxy_pass http://<YOUR IP ADDRESS>:9999/;\n        proxy_set_header Host example.com;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Route Handler with Mayim Executor\nDESCRIPTION: Sanic route handler using Mayim executor for country data retrieval\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/orm.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\nasync def handler(request: Request, executor: CountryExecutor):\n    countries = await executor.select_all_countries()\n    return json({\"countries\": [country.dict() for country in co\n```\n\n----------------------------------------\n\nTITLE: Raising Sanic Exception with Context\nDESCRIPTION: Shows how to raise a Sanic exception with additional context information that will be included in the error response.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nraise TeapotError(context={\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: Using New Slug Path Parameter Type in Sanic 21.6\nDESCRIPTION: Shows how to use the new 'slug' path parameter type for dynamic routing. Slugs must consist of lowercase letters or digits and may contain hyphens, but cannot start with a hyphen.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.6.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/articles/<article_slug:slug>\")\nasync def article(request, article_slug: str):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Authentication API Usage Examples\nDESCRIPTION: Demonstrates how to interact with the authentication endpoints using curl commands.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/authentication.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:9999/secret -i\nHTTP/1.1 401 Unauthorized\ncontent-length: 21\nconnection: keep-alive\ncontent-type: text/plain; charset=utf-8\n\nYou are unauthorized.\n\n\n$ curl localhost:9999/login -X POST\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.e30.rjxS7ztIGt5tpiRWS8BGLUqjQFca4QOetHcZTi061DE\n\n\n$ curl localhost:9999/secret -i -H \"Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.e30.rjxS7ztIGt5tpiRWS8BGLUqjQFca4QOetHcZTi061DE\"\nHTTP/1.1 200 OK\ncontent-length: 29\nconnection: keep-alive\ncontent-type: text/plain; charset=utf-8\n\nTo go fast, you must be fast.\n\n\n$ curl localhost:9999/secret -i -H \"Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.e30.BAD\"                                        \nHTTP/1.1 401 Unauthorized\ncontent-length: 21\nconnection: keep-alive\ncontent-type: text/plain; charset=utf-8\n\nYou are unauthorized.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Request in Sanic\nDESCRIPTION: Demonstrates how to retrieve the current request object when outside of a request handler using the new Request.get_current() method.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.6.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request\n\nRequest.get_current()\n```\n\n----------------------------------------\n\nTITLE: Testing Sanic API with curl\nDESCRIPTION: Command to test the Sanic API using curl, demonstrating how to make a request to the local server.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/README.rst#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl localhost:8000 -i\n```\n\n----------------------------------------\n\nTITLE: Running Sanic in Single Process Mode\nDESCRIPTION: Demonstrates how to run Sanic in a single process, disabling auto-reload and the worker manager.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsanic server:app --host=0.0.0.0 --port=1337 --single-process\n```\n\n----------------------------------------\n\nTITLE: Using Shared Queue in Handler\nDESCRIPTION: Example of accessing and using a shared Queue object within a request handler across worker processes.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom multiprocessing import Queue\n\n@app.get(\"\")\nasync def handler(request):\n    request.app.shared_ctx.queue.put(1)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Request Class with Context\nDESCRIPTION: Demonstrates creating a custom request class with typed context and configuration objects.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request, Sanic\nfrom sanic.config import Config\n\nclass CustomConfig(Config):\n    pass\n\nclass Foo:\n    pass\n\nclass RequestContext:\n    foo: Foo\n\nclass CustomRequest(Request[Sanic[CustomConfig, Foo], RequestContext]):\n    @staticmethod\n    def make_context() -> RequestContext:\n        ctx = RequestContext()\n        ctx.foo = Foo()\n        return ctx\n\napp = Sanic(\n    \"test\", config=CustomConfig(), ctx=Foo(), request_class=CustomRequest\n)\n\n@app.get(\"/\")\nasync def handler(request: CustomRequest):\n    # Full access to typed:\n    # - custom application configuration object\n    # - custom application context object\n    # - custom request context object\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using Connection Context for State Sharing\nDESCRIPTION: Demonstrates how to use connection context to share state between multiple requests on the same connection.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/request.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def increment_foo(request):\n    if not hasattr(request.conn_info.ctx, \"foo\"):\n        request.conn_info.ctx.foo = 0\n    request.conn_info.ctx.foo += 1\n\n@app.get(\"/\")\nasync def count_foo(request):\n    return text(f\"request.conn_info.ctx.foo={request.conn_info.ctx.foo}\")\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:8000 localhost:8000 localhost:8000\nrequest.conn_info.ctx.foo=1\nrequest.conn_info.ctx.foo=2\nrequest.conn_info.ctx.foo=3\n```\n\n----------------------------------------\n\nTITLE: Specifying Additional Directories for Automatic Reloading\nDESCRIPTION: Command to enable reloading when files in specific directories change. This is useful for watching template files or other non-Python resources that affect the application.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/development.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to:app --reload --reload-dir=/path/to/templates\n```\n\n----------------------------------------\n\nTITLE: Initializing Sanic Server with CORS Support\nDESCRIPTION: Main server setup file that creates a Sanic application instance and registers necessary CORS middleware and listeners.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/cors.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic, text\n\nfrom cors import add_cors_headers\nfrom options import setup_options\n\napp = Sanic(\"app\")\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\nasync def do_stuff(request):\n    return text(\"...\")\n\n# Add OPTIONS handlers to any route that is missing it\napp.register_listener(setup_options, \"before_server_start\")\n\n# Fill in CORS headers\napp.register_middleware(add_cors_headers, \"response\")\n```\n\n----------------------------------------\n\nTITLE: Using Custom Inspector Commands via HTTP\nDESCRIPTION: Demonstrates how to use custom inspector commands by making an HTTP request with a JSON payload containing arguments.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/inspector.md#2025-04-20_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:6457/something \\\n  --json '{\"args\":[\"one\", \"two\", \"three\"], \"four\":true, \"five\":false, \"six\":6}'\n```\n\n----------------------------------------\n\nTITLE: Using Custom Version Prefix with Blueprint Groups in Sanic\nDESCRIPTION: Shows how to use custom version prefixes with blueprint groups to organize API routes. This allows creating structured API endpoints with consistent version prefixing.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/versioning.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# /v1/my/path\napp = Sanic(__name__)\nv2ip = Blueprint(\"v2ip\", url_prefix=\"/ip\", version=2)\napi = Blueprint.group(v2ip, version_prefix=\"/api/version\")\n\n# /api/version2/ip\n@v2ip.get(\"/\")\nasync def handler(request):\n    return text(request.ip)\n\napp.blueprint(api)\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic TLS Certificates for Development\nDESCRIPTION: Command to start Sanic with automatic TLS certificate generation for HTTPS in debug mode, useful for local development with secure connections.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/development.md#2025-04-20_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app --auto-tls --debug\n```\n\n----------------------------------------\n\nTITLE: Simple Caddy Reverse Proxy Command\nDESCRIPTION: A single command to set up Caddy as a reverse proxy for a Sanic application. This configuration includes automatic HTTPS, HTTP/3 support, and WebSocket handling.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/deployment/caddy.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncaddy reverse-proxy --from example.com --to :8001\n```\n\n----------------------------------------\n\nTITLE: Using SanicTestClient.request Method in Python\nDESCRIPTION: Shows how to use the request method of SanicTestClient when manually specifying the HTTP method. This is useful for more complex test scenarios.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-testing/clients.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntest_client.request(\"/path/to/endpoint\", http_method=\"get\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Debug Mode for Production\nDESCRIPTION: Shows how to disable debug mode in Sanic for production environments, which limits the error information shown to users for security reasons.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\napp.config.DEBUG = False\n```\n\n----------------------------------------\n\nTITLE: Securing Individual Routes with Decorators\nDESCRIPTION: Demonstrates different methods of securing specific routes using decorators and docstrings. Shows various syntax options for applying security schemes to individual endpoints.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/openapi/security.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/one\")\nasync def handler1(request):\n    \"\"\"\n    openapi:\n    ---\n    security:\n        - foo: []\n    \"\"\"\n\n@app.route(\"/two\")\n@openapi.secured(\"foo\")\n@openapi.secured({\"bar\": []})\n@openapi.secured(baz=[])\nasync def handler2(request):\n    ...\n\n@app.route(\"/three\")\n@openapi.definition(secured=\"foo\")\n@openapi.definition(secured={\"bar\": []})\nasync def handler3(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Grouping All API Blueprints\nDESCRIPTION: Groups content and info blueprint groups under a main API blueprint group with a common URL prefix. This creates the top level of the nested API structure.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# api/__init__.py\nfrom sanic import Blueprint\nfrom .content import content\nfrom .info import info\n\napi = Blueprint.group(content, info, url_prefix=\"/api\")\n```\n\n----------------------------------------\n\nTITLE: Accessing API Key Protected Sanic Inspector\nDESCRIPTION: Demonstrates how to access the Inspector when API key authentication is enabled, using both CLI and HTTP.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/inspector.md#2025-04-20_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nsanic inspect --api-key=Super-Secret-200\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:6457  -H \"Authorization: Bearer Super-Secret-200\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanic Application with Custom Server Name\nDESCRIPTION: Sets up a Sanic application with a custom server name and creates a route handler that returns its external URL. Uses the SERVER_NAME config to specify the base path.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/mounting.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic, text\n\napp = Sanic(\"app\")\napp.config.SERVER_NAME = \"example.com/api\"\n\n@app.route(\"/foo\")\ndef handler(request):\n    url = app.url_for(\"handler\", _external=True)\n    return text(f\"URL: {url}\")\n```\n\n----------------------------------------\n\nTITLE: Arbitrary Constructor Dependency Injection\nDESCRIPTION: Demonstrates how to use dependency injection with arbitrary constructors that don't require the Request object, using Alpha and Beta classes.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/injection.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Alpha:\n    ...\n\nclass Beta:\n    def __init__(self, alpha: Alpha) -> None:\n        self.alpha = alpha\n\napp.ext.add_dependency(Alpha)\napp.ext.add_dependency(Beta)\n\n@app.get(\"/beta\")\nasync def handler(request: Request, beta: Beta):\n    assert isinstance(beta.alpha, Alpha)\n```\n\n----------------------------------------\n\nTITLE: Setting Worker Manager ACK Threshold\nDESCRIPTION: Configuration to extend the worker acknowledgment timeout period by modifying the THRESHOLD value. The value represents intervals of 0.1 seconds.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.worker.manager import WorkerManager\n\nWorkerManager.THRESHOLD = 600\n```\n\n----------------------------------------\n\nTITLE: Sanic App Configuration with Mayim\nDESCRIPTION: Setup Sanic application with Mayim extension and PostgreSQL executor\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/orm.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# ./server.py\nfrom sanic import Sanic, Request, json\nfrom sanic_ext import Extend\nfrom mayim.executor import PostgresExecutor\nfrom mayim.extensions import SanicMayimExtension\nfrom models import Country\n\nclass CountryExecutor(PostgresExecutor):\n    async def select_all_countries(\n        self, limit: int = 4, offset: int = 0\n    ) -> list[Country]:\n        ...\n\napp = Sanic(\"Test\")\nExtend.register(\n    SanicMayimExtension(\n        executors=[CountryExecutor],\n        dsn=\"postgres://...\",\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanic Inspector Host and Port\nDESCRIPTION: Shows how to configure the host and port settings for the Sanic inspector service.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\napp.config.INSPECTOR_HOST =  \"localhost\"\napp.config.INSPECTOR_PORT =  6457\n```\n\n----------------------------------------\n\nTITLE: Setting HTML as Fallback Error Format\nDESCRIPTION: Shows how to configure Sanic to use HTML as the fallback error format. This controls how errors are displayed when no specific error handler is defined.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\napp.config.FALLBACK_ERROR_FORMAT = \"html\"\n```\n\n----------------------------------------\n\nTITLE: Defining Pydantic Models for Mayim ORM\nDESCRIPTION: Create Pydantic model classes for City and Country entities with type hints\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/orm.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ./models.py\nfrom pydantic import BaseModel\n\nclass City(BaseModel):\n    id: int\n    name: str\n    district: str\n    population: int\n\nclass Country(BaseModel):\n    code: str\n    name: str\n    continent: str\n    region: str\n    capital: City\n```\n\n----------------------------------------\n\nTITLE: Initializing Sanic Application with Generic Types in Python\nDESCRIPTION: Demonstrates how to create a Sanic application instance with generic typing, revealing the default types for config and context objects.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.6.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\napp = Sanic(\"test\")\nreveal_type(app)  # N: Revealed type is \"sanic.app.Sanic[sanic.config.Config, types.SimpleNamespace]\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Blueprint Groups with Name Prefixing in Sanic\nDESCRIPTION: Demonstrates how to use the new name_prefix parameter in blueprint groups to avoid naming conflicts and improve composability.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.6.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbp1 = Blueprint(\"bp1\", url_prefix=\"/bp1\")\nbp2 = Blueprint(\"bp2\", url_prefix=\"/bp2\")\n\nbp1.add_route(lambda _: ..., \"/\", name=\"route1\")\nbp2.add_route(lambda _: ..., \"/\", name=\"route2\")\n\ngroup_a = Blueprint.group(\n    bp1, bp2, url_prefix=\"/group-a\", name_prefix=\"group-a\"\n)\ngroup_b = Blueprint.group(\n    bp1, bp2, url_prefix=\"/group-b\", name_prefix=\"group-b\"\n)\n\napp = Sanic(\"TestApp\")\napp.blueprint(group_a)\napp.blueprint(group_b)\n```\n\n----------------------------------------\n\nTITLE: Inline Streaming with eof() in Sanic 21.6\nDESCRIPTION: Illustrates the new inline streaming feature using the 'eof()' method. This method should be called once the final data has been pushed to the client, providing a convenient way to handle streaming responses.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.6.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\nasync def test(request):\n    response = await request.respond(content_type=\"text/csv\")\n    await response.send(\"foo,\")\n    await response.send(\"bar\")\n    await response.eof()\n    return response\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Directory Browser in Sanic\nDESCRIPTION: Example of enabling directory view for static file serving with the directory_view parameter.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.3.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp.static(\"/uploads/\", \"/path/to/dir/\", directory_view=True)\n```\n\n----------------------------------------\n\nTITLE: Main Application with Registered Blueprint Groups\nDESCRIPTION: Creates the main Sanic application and registers the top-level API blueprint group. This connects all the nested blueprints to the application.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# app.py\nfrom sanic import Sanic\nfrom .api import api\n\napp = Sanic(__name__)\napp.blueprint(api)\n```\n\n----------------------------------------\n\nTITLE: Defining ValidationError Class for Sanic Request Validation\nDESCRIPTION: This class extends Sanic's SanicException to create a custom exception for validation errors. It includes attributes for the invalid data and the validation errors encountered.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/validation.md#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass ValidationError(SanicException):\n    def __init__(self, invalid_data, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.invalid_data = invalid_data\n        self.error = kwargs.get(\"error\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Inspector Commands\nDESCRIPTION: Demonstrates how to extend the Inspector class to create custom commands that can be accessed via CLI or HTTP.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/inspector.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import json\nfrom sanic.worker.inspector import Inspector\n\nclass MyInspector(Inspector):\n    async def something(self, *args, **kwargs):\n        print(args)\n        print(kwargs)\n\napp = Sanic(\"TestApp\", inspector_class=MyInspector, inspector=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in Sanic\nDESCRIPTION: These snippets demonstrate how to handle errors in Sanic, including raising built-in exceptions and creating custom exception classes.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/index.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nraise sanic.exceptions.NotFound  # Automatically responds with HTTP 404\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.exceptions import SanicException\n\nclass TeapotError(SanicException):\n    status_code = 418\n    message = \"Sorry, I cannot brew coffee\"\n\nraise TeapotError\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker Manager Threshold\nDESCRIPTION: Example of modifying the Worker Manager threshold for extending worker startup time allowance. The threshold value is in 0.1s increments.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.worker.manager import WorkerManager\n\nWorkerManager.THRESHOLD = 100  # Value is in 0.1s\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Redirects in Sanic with Python\nDESCRIPTION: This Python script sets up a Sanic web application with configurable static redirects using a dictionary. It creates handler functions dynamically for each redirect and configures static file serving for client resources and files.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/static-redirects.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n### SETUP ###\nimport typing\nimport sanic, sanic.response\n\n# Create the Sanic app\napp = sanic.Sanic(__name__)\n\n# This dictionary represents your \"static\"\n# redirects. For example, these values\n# could be pulled from a configuration file.\nREDIRECTS = {\n    '/':'/hello_world',                     # Redirect '/' to '/hello_world'\n    '/hello_world':'/hello_world.html'      # Redirect '/hello_world' to 'hello_world.html'\n}\n\n# This function will return another function\n# that will return the configured value\n# regardless of the arguments passed to it.\ndef get_static_function(value:typing.Any) -> typing.Callable[..., typing.Any]:\n    return lambda *_, **__: value\n\n### ROUTING ###\n# Iterate through the redirects\nfor src, dest in REDIRECTS.items():                            \n    # Create the redirect response object         \n    response:sanic.HTTPResponse = sanic.response.redirect(dest)\n\n    # Create the handler function. Typically,\n    # only a sanic.Request object is passed\n    # to the function. This object will be \n    # ignored.\n    handler = get_static_function(response)\n\n    # Route the src path to the handler\n    app.route(src)(handler)\n\n# Route some file and client resources\napp.static('/files/', 'files')\napp.static('/', 'client')\n\n### RUN ###\nif __name__ == '__main__':\n    app.run(\n        '127.0.0.1',\n        10000\n    )\n```\n\n----------------------------------------\n\nTITLE: Testing Routes with the 'do' Function in Sanic REPL\nDESCRIPTION: Example of using the 'do' function to mock HTTP requests and test routes within the REPL without making actual HTTP requests.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/development.md#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> await do(\"/new-route\")\nResult(request=<Request: GET /new-route>, response=<JSONResponse: 200 application/json>)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Traditional Route Handling in Sanic\nDESCRIPTION: Shows two common but suboptimal patterns for handling multiple HTTP methods: using separate route decorators and using a single route with method checking.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/class-based-views.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/foo\")\nasync def foo_get(request):\n    ...\n\n@app.post(\"/foo\")\nasync def foo_post(request):\n    ...\n\n@app.put(\"/foo\")\nasync def foo_put(request):\n    ...\n\n@app.route(\"/bar\", methods=[\"GET\", \"POST\", \"PATCH\"])\nasync def bar(request):\n    if request.method == \"GET\":\n        ...\n\n    elif request.method == \"POST\":\n        ...\n        \n    elif request.method == \"PATCH\":\n        ...\n```\n\n----------------------------------------\n\nTITLE: Good Queue Implementation with Listener\nDESCRIPTION: Shows the recommended way to implement a multiprocessing Queue using Sanic's main_process_start listener.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom multiprocessing import Queue\n\n@app.main_process_start\nasync def main_process_start(app):\n    app.shared_ctx.q = Queue()\n```\n\n----------------------------------------\n\nTITLE: Using Async/Await in Sanic REPL\nDESCRIPTION: Example of using async/await syntax in the Sanic REPL to test asynchronous code, in this case querying a database.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/development.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> await app.ctx.db.fetchval(\"SELECT 1\")\n1 \n```\n\n----------------------------------------\n\nTITLE: String-Based Template Rendering\nDESCRIPTION: Rendering templates from a Python string instead of a file, useful for dynamic template generation\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/templating/jinja.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import render\nfrom textwrap import dedent\n\n@app.get(\"/\")\nasync def handler(request):\n    template = dedent(\"\"\"\n        <!DOCTYPE html>\n        <html lang=\\\"en\\\">\n\n            <head>\n                <title>My Webpage</title>\n            </head>\n\n            <body>\n                <h1>Hello, world!!!!</h1>\n                <ul>\n                    {% for item in seq %}\n                    <li>{{ item }}</li>\n                    {% endfor %}\n                </ul>\n            </body>\n\n        </html>\n    \"\"\")\n    return await render(\n        template_source=template,\n        context={\"seq\": [\"three\", \"four\"]},\n        app=app,\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Injection Signal\nDESCRIPTION: Shows how to configure the signal timing for dependency injection, allowing it to occur at http.handler.before instead of the default http.routing.after.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/injection.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\napp.config.INJECTION_SIGNAL = \"http.handler.before\"\n```\n\n----------------------------------------\n\nTITLE: Dictionary-based Configuration Extension\nDESCRIPTION: Shows how to extend Sanic app configuration using a dictionary of settings.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"MyApp\")\napp.extend(config={\"oas_url_prefix\": \"/apidocs\"})\n```\n\n----------------------------------------\n\nTITLE: Defining Security Schemes in Sanic OAS\nDESCRIPTION: Examples of adding different types of security schemes including API key, HTTP authentication (Bearer/Basic), and OAuth2 to a Sanic application. Demonstrates various security configurations supported by OpenAPI specification.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/openapi/security.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp.ext.openapi.add_security_scheme(\"api_key\", \"apiKey\")\napp.ext.openapi.add_security_scheme(\n    \"token\",\n    \"http\",\n    scheme=\"bearer\",\n    bearer_format=\"JWT\",\n)\napp.ext.openapi.add_security_scheme(\"token2\", \"http\")\napp.ext.openapi.add_security_scheme(\n    \"oldschool\",\n    \"http\",\n    scheme=\"basic\",\n)\napp.ext.openapi.add_security_scheme(\n    \"oa2\",\n    \"oauth2\",\n    flows={\n        \"implicit\": {\n            \"authorizationUrl\": \"http://example.com/auth\",\n            \"scopes\": {\n                \"on:two\": \"something\",\n                \"three:four\": \"something else\",\n                \"threefour\": \"something else...\",\n            },\n        }\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Existing Sanic Application in Python\nDESCRIPTION: Shows how to force the creation of a new Sanic application instance if it doesn't exist in the registry.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic.get_app(\n    \"non-existing\",\n    force_create=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing TRACE and CONNECT Methods in Sanic\nDESCRIPTION: Shows how to implement both TRACE and CONNECT HTTP methods in a single route handler using Sanic Extensions.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/http/methods.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\", methods=[\"trace\", \"connect\"])\nasync def handler(_):\n    return empty()\n```\n\n----------------------------------------\n\nTITLE: Running Sanic CLI with Module Path\nDESCRIPTION: Demonstrates how to run a Sanic application using the CLI by specifying the path to the server module and app instance.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Process with Shutdown Handler\nDESCRIPTION: Example of implementing a custom process that can handle shutdown signals using KeyboardInterrupt.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom time import sleep\n\ndef my_process(foo):\n    try:\n        while True:\n            sleep(1)\n    except KeyboardInterrupt:\n        print(\"done\")\n```\n\n----------------------------------------\n\nTITLE: Advanced Multiple Domain Configuration with Name Restrictions\nDESCRIPTION: Example of configuring TLS with specific domain name restrictions, allowing connections only to specific domains and subdomains while preventing fallback for unmatched names.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/tls.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nssl = [\n    None,  # No fallback if names do not match!\n    {\n        \"cert\": \"certs/example.com/fullchain.pem\",\n        \"key\": \"certs/example.com/privkey.pem\",\n        \"names\": [\"example.com\", \"*.bigcorp.test\"],\n    }\n]\napp.run(host=\"0.0.0.0\", port=8443, ssl=ssl)\n```\n\n----------------------------------------\n\nTITLE: Grouping Content Blueprints in API Structure\nDESCRIPTION: Groups static and authors blueprints under a content blueprint group with a common URL prefix. This creates a nested URL structure for the API.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# api/content/__init__.py\nfrom sanic import Blueprint\nfrom .static import static\nfrom .authors import authors\n\ncontent = Blueprint.group(static, authors, url_prefix=\"/content\")\n```\n\n----------------------------------------\n\nTITLE: Field Normalization with Forwarded Header\nDESCRIPTION: Demonstrates field normalization in Sanic using the Forwarded header with various parameters including protocol, host, path and secret. Shows both the configuration and expected response.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/proxy-headers.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl localhost:8000/fwd \\\n\t-H 'Forwarded: PROTO=WSS;BY=\"CAFE::8000\";FOR=unknown;PORT=X;HOST=\"A:2\";PATH=\"/With%20Spaces%22Quoted%22/sanicApp?key=val\";SECRET=mySecret' | jq\n```\n\nLANGUAGE: python\nCODE:\n```\n# Sanic application config\napp.config.PROXIES_COUNT = 1\napp.config.REAL_IP_HEADER = \"x-real-ip\"\napp.config.FORWARDED_SECRET = \"mySecret\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# curl response\n{\n  \"remote_addr\": \"\",\n  \"scheme\": \"wss\",\n  \"server_name\": \"a\",\n  \"server_port\": 2,\n  \"forwarded\": {\n    \"proto\": \"wss\",\n    \"by\": \"[cafe::8000]\",\n    \"host\": \"a:2\",\n    \"path\": \"/With Spaces\\\"Quoted\\\"/sanicApp?key=val\",\n    \"secret\": \"mySecret\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Request Headers in Sanic\nDESCRIPTION: Example showing how request headers with the same field name are joined together when accessed as properties. Multiple headers with the same name are concatenated with commas.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/docs/sanic/releases/23/23.3.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nrequest.headers.example_field == \"Foo, Bar,Baz\"\n```\n\n----------------------------------------\n\nTITLE: Using ReusableClient for Sanic Testing in Python\nDESCRIPTION: Shows how to use the ReusableClient for persistent testing of Sanic applications. This client allows control over the lifecycle of the application and can make multiple requests to the same running instance.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-testing/clients.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_testing.reusable import ReusableClient\n\ndef test_multiple_endpoints_on_same_server(app):\n    client = ReusableClient(app)\n    with client:\n        _, response = client.get(\"/path/to/1\")\n        assert response.status == 200\n\n        _, response = client.get(\"/path/to/2\")\n        assert response.status == 200\n```\n\n----------------------------------------\n\nTITLE: Using Middleware Decorator in Sanic\nDESCRIPTION: Alternative approach to register middleware using the @app.middleware decorator with the middleware type as an argument.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/middleware.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.middleware(\"request\")\nasync def extract_user(request):\n    request.ctx.user = await extract_user_from_request(request)\n```\n\n----------------------------------------\n\nTITLE: Implementing Autodiscovery Utility Function\nDESCRIPTION: This snippet defines the autodiscover function used to automatically register blueprints and listeners. It recursively searches through specified modules and their submodules to find and register Sanic blueprints.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/autodiscovery.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom glob import glob\nfrom importlib import import_module, util\nfrom inspect import getmembers\nfrom pathlib import Path\nfrom types import ModuleType\nfrom typing import Union\n\nfrom sanic.blueprints import Blueprint\n\ndef autodiscover(\n    app, *module_names: Union[str, ModuleType], recursive: bool = False\n):\n    mod = app.__module__\n    blueprints = set()\n    _imported = set()\n\n    def _find_bps(module):\n        nonlocal blueprints\n\n        for _, member in getmembers(module):\n            if isinstance(member, Blueprint):\n                blueprints.add(member)\n\n    for module in module_names:\n        if isinstance(module, str):\n            module = import_module(module, mod)\n            _imported.add(module.__file__)\n        _find_bps(module)\n\n        if recursive:\n            base = Path(module.__file__).parent\n            for path in glob(f\"{base}/**/*.py\", recursive=True):\n                if path not in _imported:\n                    name = \"module\"\n                    if \"__init__\" in path:\n                        *_, name, __ = path.split(\"/\")\n                    spec = util.spec_from_file_location(name, path)\n                    specmod = util.module_from_spec(spec)\n                    _imported.add(path)\n                    spec.loader.exec_module(specmod)\n                    _find_bps(specmod)\n\n    for bp in blueprints:\n        app.blueprint(bp)\n```\n\n----------------------------------------\n\nTITLE: Using By Field as Secret in Forwarded Header\nDESCRIPTION: Shows how to use the 'by' field as a proxy secret in the Forwarded header. Includes configuration settings and the response format when forwarding client IP.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/proxy-headers.md#2025-04-20_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncurl localhost:8000/fwd \\\n\t-H 'Forwarded: for=1.2.3.4; by=_proxySecret' | jq\n```\n\nLANGUAGE: python\nCODE:\n```\n# Sanic application config\napp.config.PROXIES_COUNT = 1\napp.config.REAL_IP_HEADER = \"x-real-ip\"\napp.config.FORWARDED_SECRET = \"_proxySecret\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# curl response\n{\n  \"remote_addr\": \"1.2.3.4\",\n  \"scheme\": \"http\",\n  \"server_name\": \"localhost\",\n  \"server_port\": 8000,\n  \"forwarded\": {\n    \"for\": \"1.2.3.4\",\n    \"by\": \"_proxySecret\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanic Start Method\nDESCRIPTION: Configuration to modify the process start method used by Sanic from the default 'spawn' to alternative methods like 'fork'.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\n\nSanic.start_method = \"fork\"\n```\n\n----------------------------------------\n\nTITLE: Running Sanic in Production Mode\nDESCRIPTION: This command shows how to run a Sanic application in production mode, which turns off debug mode for better performance.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app\n```\n\n----------------------------------------\n\nTITLE: URL Generation for Class Based Views\nDESCRIPTION: Example of generating URLs for class-based views using Sanic's URL generation functionality.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/class-based-views.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\ndef index(request):\n    url = app.url_for(\"SpecialClassView\")\n    return redirect(url)\n\nclass SpecialClassView(HTTPMethodView):\n    def get(self, request):\n        return text(\"Hello from the Special Class View!\")\n\napp.add_route(SpecialClassView.as_view(), \"/special_class_view\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware with Priority\nDESCRIPTION: Shows how to implement middleware with different priority levels to control execution order.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.9.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def low_priority(_):\n    ...\n\n@app.on_request(priority=10)\nasync def high_priority(_):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Process in Sanic\nDESCRIPTION: Shows how to register a custom process using the main_process_ready listener.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@app.main_process_ready\nasync def ready(app: Sanic, _):\n#   app.manager.manage(<name>, <callable>, <kwargs>)\n    app.manager.manage(\"MyProcess\", my_process, {\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: HTTP to HTTPS Redirection Server in Sanic\nDESCRIPTION: Implementation of a Sanic application that redirects HTTP traffic to HTTPS while still serving ACME/certbot files over HTTP for certificate renewals.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/tls.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic, exceptions, response\n\napp = Sanic(\"http_redir\")\n\n# Serve ACME/certbot files without HTTPS, for certificate renewals\napp.static(\"/.well-known\", \"/var/www/.well-known\", resource_type=\"dir\")\n\n@app.exception(exceptions.NotFound, exceptions.MethodNotSupported)\ndef redirect_everything_else(request, exception):\n    server, path = request.server_name, request.path\n    if server and path.startswith(\"/\"):\n        return response.redirect(f\"https://{server}{path}\", status=308)\n    return response.text(\"Bad Request. Please use HTTPS!\", status=400)\n```\n\n----------------------------------------\n\nTITLE: Decorator Template without Arguments in Sanic\nDESCRIPTION: Template for creating a Sanic decorator that does not take arguments. This pattern allows for cleaner application without needing to call the decorator.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/decorators.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef foobar(func):\n    def decorator(f):\n        @wraps(f)\n        async def decorated_function(request, *args, **kwargs):\n\n            response = f(request, *args, **kwargs)\n            if isawaitable(response):\n                response = await response\n\n            return response\n\n        return decorated_function\n\n    return decorator(func)\n```\n\n----------------------------------------\n\nTITLE: Updating Sanic Config with Dictionary\nDESCRIPTION: Demonstrates how to update multiple configuration values at once using a dictionary and the update() method.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndb_settings = {\n    'DB_HOST': 'localhost',\n    'DB_NAME': 'appdb',\n    'DB_USER': 'appuser'\n}\napp.config.update(db_settings)\n```\n\n----------------------------------------\n\nTITLE: Instance-based Configuration\nDESCRIPTION: Shows how to use an instance of a configuration class.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/configuration.md#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\napp.update_config(MyConfig())\n```\n\n----------------------------------------\n\nTITLE: Enabling Request Streaming in Sanic using add_route()\nDESCRIPTION: This example demonstrates how to enable request streaming when adding a route using the add_route() method. It sets the stream parameter to True.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/streaming.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbp.add_route(\n    bp_handler,\n    \"/bp_stream\",\n    methods=[\"POST\"],\n    stream=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Manual Extension with Keyword Arguments\nDESCRIPTION: Demonstrates manual extension of Sanic app using lowercase keyword arguments for configuration.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"MyApp\")\napp.extend(oas_url_prefix=\"/apidocs\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Type Alias for Sanic Application\nDESCRIPTION: Shows how to create a custom type alias for a Sanic application to use in listeners and handlers.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# ./path/to/types.py\nfrom sanic.app import Sanic\nfrom sanic.config import Config\nfrom myapp.context import MyContext\nfrom typing import TypeAlias\n\nMyApp = TypeAlias(\"MyApp\", Sanic[Config, MyContext])\n```\n\n----------------------------------------\n\nTITLE: Using Signals and Custom Events in Sanic\nDESCRIPTION: These snippets show how to use Sanic's built-in signals and create custom events, allowing for more flexible event-driven programming.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/index.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@app.signal(\"http.lifecycle.complete\")  # built-in\nasync def my_signal_handler(conn_info):\n    print(\"Connection has been closed\")\n\n@app.signal(\"something.happened.ohmy\")  # custom\nasync def my_signal_handler():\n    print(\"something happened\")\n\nawait app.dispatch(\"something.happened.ohmy\")\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with Automatic TLS Setup in Debug Mode\nDESCRIPTION: Demonstrates how to start a Sanic server with automatic TLS certificate setup using either mkcert or trustme for local development environments.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.6.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sanic path.to.server:app --auto-tls --debug\n```\n\nLANGUAGE: python\nCODE:\n```\napp.run(debug=True, auto_tls=True)\n```\n\n----------------------------------------\n\nTITLE: Executing Custom Hello Command\nDESCRIPTION: Demonstrates how to invoke the custom 'hello' command with a name argument from the CLI.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/commands.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to:app exec hello --name=Adam\n```\n\n----------------------------------------\n\nTITLE: Installing Sanic with HTTP/3 Support\nDESCRIPTION: These snippets show two ways to install Sanic with HTTP/3 support using pip.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\npip install sanic aioquic\n```\n\nLANGUAGE: sh\nCODE:\n```\npip install sanic[http3]\n```\n\n----------------------------------------\n\nTITLE: Installing Sanic with pip in Python\nDESCRIPTION: Command to install Sanic using pip. Includes options to disable uvloop and ujson dependencies using environment variables.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ export SANIC_NO_UVLOOP=true\n$ export SANIC_NO_UJSON=true\n$ pip install --no-binary :all: sanic\n```\n\n----------------------------------------\n\nTITLE: Using HTTPX Client in Sanic REPL\nDESCRIPTION: Example of making HTTP requests to your running Sanic application using the pre-configured HTTPX client in the REPL.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/development.md#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> client.get(\"/\")\n<Response [200 OK]>\n```\n\n----------------------------------------\n\nTITLE: Running HTTP Redirection Server with Sanic CLI\nDESCRIPTION: Command to start the HTTP to HTTPS redirection server for both IPv4 and IPv6 interfaces using the Sanic command line interface.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/tls.md#2025-04-20_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsanic http_redir:app -H 0.0.0.0 -p 80\nsanic http_redir:app -H :: -p 80\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-documentation in Sanic Handler\nDESCRIPTION: Example of how to exclude docstrings from API documentation using the @openapi.no_autodoc decorator for individual handlers.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/openapi/autodoc.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/foo\")\n@openapi.no_autodoc\nasync def handler(request, something: str):\n    \"\"\"This is a docstring about internal info only. Do not parse it.\n    \"\"\"\n    return text(\"...\")\n```\n\n----------------------------------------\n\nTITLE: Custom Environment Variable Type Casting\nDESCRIPTION: Example of adding custom type converters for environment variables.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.12.md#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(..., config=Config(converters=[UUID]))\n```\n\n----------------------------------------\n\nTITLE: Sanic Proxy Configuration Example 2 (Python)\nDESCRIPTION: Configuration for Sanic application with PROXIES_COUNT, REAL_IP_HEADER, and FORWARDED_SECRET set.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/proxy-headers.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Sanic application config\napp.config.PROXIES_COUNT = 1\napp.config.REAL_IP_HEADER = \"x-real-ip\"\napp.config.FORWARDED_SECRET = \"mySecret\"\n```\n\n----------------------------------------\n\nTITLE: Using Custom Inspector Commands via CLI\nDESCRIPTION: Shows how to use custom inspector commands via the CLI, passing both positional and keyword arguments.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/inspector.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsanic inspect something one two three --four --no-five --six=6\n```\n\n----------------------------------------\n\nTITLE: Initializing Typed Sanic Server\nDESCRIPTION: Shows how to initialize a Sanic server with custom types and listeners.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# ./path/to/server.py\nfrom myapp.types import MyApp\nfrom myapp.context import MyContext\nfrom myapp.config import MyConfig\nfrom myapp.listeners import add_listeners\n\napp = Sanic(\"myapp\", config=MyConfig(), ctx=MyContext())\nadd_listeners(app)\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Sanic Extension\nDESCRIPTION: This snippet shows how to register a custom Sanic extension using the Extend.register method. It demonstrates the simplified process of adding custom extensions to a Sanic application.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/custom.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import Extend, Extension\n\nclass MyCustomExtension(Extension):\n    ...\n\nExtend.register(MyCustomExtension())\n```\n\n----------------------------------------\n\nTITLE: Installing Sanic 20.12 LTS with pip\nDESCRIPTION: Command to install the Sanic 20.12 LTS version and freeze requirements for compatibility with older versions.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.3.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"sanic>=20.12,<20.13\"\npip freeze > requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Sanic Inspector\nDESCRIPTION: Python code snippet showing how to configure TLS encryption for the Sanic Inspector by specifying the paths to the TLS certificate and key files in the application configuration.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.12.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp.config.INSPECTOR_TLS_CERT = \"/path/to/cert.pem\"\napp.config.INSPECTOR_TLS_KEY = \"/path/to/key.pem\"\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with TLS Support\nDESCRIPTION: These snippets demonstrate how to run a Sanic server with TLS support, including options for specifying certificate files or using auto-TLS for development.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/index.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app --cert=/path/to/bundle.crt --key=/path/to/privkey.pem\n```\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app --tls=/path/to/certs\n```\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app --dev --auto-tls\n```\n\n----------------------------------------\n\nTITLE: Running Sanic Server with Autodiscovery\nDESCRIPTION: This snippet shows the command to run the Sanic server with debug mode enabled, which will trigger the autodiscovery process and log the discovered components.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/autodiscovery.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsource ./.venv/bin/activate # activate the python venv which sanic is installed in\nsanic sever -d # run this in the directory containing server.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom AutoMonitor Extension in Sanic\nDESCRIPTION: This snippet demonstrates how to create a custom AutoMonitor extension for Sanic. It includes the extension class definition, configuration setup, and a sample route using the extension.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/custom.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request, Sanic, json\nfrom sanic_ext import Extend, Extension\n\napp = Sanic(__name__)\napp.config.MONITOR = True\n\nclass AutoMonitor(Extension):\n    name = \"automonitor\"\n\n    def startup(self, bootstrap) -> None:\n        if self.included():\n            self.app.before_server_start(self.ensure_monitor_set)\n            self.app.on_request(self.monitor)\n\n    @staticmethod\n    async def monitor(request: Request):\n        if request.route and request.route.ctx.monitor:\n            print(\"....\")\n\n    @staticmethod\n    async def ensure_monitor_set(app: Sanic):\n        for route in app.router.routes:\n            if not hasattr(route.ctx, \"monitor\"):\n                route.ctx.monitor = False\n\n    def label(self):\n        has_monitor = [\n            route\n            for route in self.app.router.routes\n            if getattr(route.ctx, \"monitor\", None)\n        ]\n        return f\"{len(has_monitor)} endpoint(s)\"\n\n    def included(self):\n        return self.app.config.MONITOR\n\nExtend.register(AutoMonitor)\n\n@app.get(\"/\", ctx_monitor=True)\nasync def handler(request: Request):\n    return json({\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: Future Cookie Access Pattern for Sanic v24.3\nDESCRIPTION: Shows the upcoming change in Sanic v24.3 where dictionary access will return a list of values instead of a single value, similar to other request properties.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.3.md#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nassert request.cookies[\"foo\"] == [\"bar\"]\nassert request.cookies.get(\"foo\") == \"bar\"\nassert request.cookies.getlist(\"foo\") == [\"bar\"]\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Sanic with Nginx\nDESCRIPTION: Docker Compose file that orchestrates both the Sanic application and Nginx services. It defines network connections and volume mounts for the Nginx configuration.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/deployment/docker.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\n\nservices:\n  mysanic:\n    image: my-sanic-image\n    ports:\n      - \"8000:8000\"\n    restart: always\n\n  mynginx:\n    image: nginx:1.13.6-alpine\n    ports:\n      - \"80:80\"\n    depends_on:\n      - mysanic\n    volumes:\n      - ./mysanic.conf:/etc/nginx/conf.d/mysanic.conf\n    restart: always\n\nnetworks:\n  default:\n    driver: bridge\n```\n\n----------------------------------------\n\nTITLE: Basic Sanic Configuration\nDESCRIPTION: Simple example of configuring Sanic Extensions by setting config values directly on the Sanic app instance.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"MyApp\")\napp.config.OAS_URL_PREFIX = \"/apidocs\"\n```\n\n----------------------------------------\n\nTITLE: Sample User Profile Model Definition\nDESCRIPTION: Simple class definition representing a user profile model with typed attributes\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/openapi/decorators.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass UserProfile:\n    name: str\n    age: int\n    email: str\n```\n\n----------------------------------------\n\nTITLE: Inspecting Sanic Application with CLI\nDESCRIPTION: Example of using the new Sanic inspect CLI command to view help information. This command provides options for host, port, secure connection, API key, and various subcommands for managing the Sanic application.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.12.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sanic inspect --help                             \n\n  ▄███ █████ ██      ▄█▄      ██       █   █   ▄██████████\n ██                 █   █     █ ██     █   █  ██\n  ▀███████ ███▄    ▀     █    █   ██   ▄   █  ██\n              ██  █████████   █     ██ █   █  ▄▄\n ████ ████████▀  █         █  █       ██   █   ▀██ ███████\n\nOptional\n========\n  General:\n    -h, --help                      show this help message and exit\n    --host HOST, -H HOST            Inspector host address [default 127.0.0.1]\n    --port PORT, -p PORT            Inspector port [default 6457]\n    --secure, -s                    Whether to access the Inspector via TLS encryption\n    --api-key API_KEY, -k API_KEY   Inspector authentication key\n    --raw                           Whether to output the raw response information\n\n  Subcommands:\n    Run one or none of the below subcommands. Using inspect without a subcommand will fetch general information about the state of the application instance.\n    \n    Or, you can optionally follow inspect with a subcommand. If you have created a custom Inspector instance, then you can run custom commands. See https://sanic.dev/en/guide/deployment/inspector.html for more details.\n\n    {reload,shutdown,scale,<custom>}\n        reload                      Trigger a reload of the server workers\n        shutdown                    Shutdown the application and all processes\n        scale                       Scale the number of workers\n        <custom>                    Run a custom command\n```\n\n----------------------------------------\n\nTITLE: Requesting Let's Encrypt Certificates with Certbot\nDESCRIPTION: Command for obtaining free SSL certificates from Let's Encrypt using Certbot, with optimizations for certificate size and performance.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/tls.md#2025-04-20_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nsudo certbot certonly --key-type ecdsa --preferred-chain \"ISRG Root X1\" -d example.com -d www.example.com\n```\n\n----------------------------------------\n\nTITLE: Accessing Worker State Information\nDESCRIPTION: Example of accessing worker state information through the multiplexer interface in a request middleware.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\nasync def print_state(request: Request):\n    print(request.app.m.name)\n    print(request.app.m.pid)\n    print(request.app.m.state)\n```\n\n----------------------------------------\n\nTITLE: Setting Sanic Start Method for Subprocesses\nDESCRIPTION: Code snippet demonstrating how to configure Sanic to use the 'fork' start method for subprocesses instead of the new default 'spawn' method.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/docs/sanic/releases/22/22.12.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\n\nSanic.start_method = \"fork\"\n```\n\n----------------------------------------\n\nTITLE: Defining Attrs Model for Validation in Python\nDESCRIPTION: This snippet shows how to define an Attrs model for validation in a Sanic application. It creates a Person model with name and age attributes.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/validation.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@attrs.define\nclass Person:\n    name: str\n    age: int\n```\n\n----------------------------------------\n\nTITLE: Implementing Universal Exception Signal Handler in Sanic\nDESCRIPTION: Demonstrates how to use the new universal exception signal in Sanic to catch and report all exceptions occurring during server runtime.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.6.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.signals import Event\n\n@app.signal(Event.SERVER_LIFECYCLE_EXCEPTION)\nasync def catch_any_exception(app: Sanic, exception: Exception):\n    app.ctx.my_error_reporter_utility.error(exception)\n```\n\n----------------------------------------\n\nTITLE: Signal Event Auto-registration in Sanic 21.6\nDESCRIPTION: Shows how to use the new auto-registration feature for signal events by setting 'config.EVENT_AUTOREGISTER' to True. This allows awaiting any signal event even if it hasn't been previously defined with a signal handler.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.6.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@app.signal(\"do.something.start\")\nasync def signal_handler():\n    await do_something()\n    await app.dispatch(\"do.something.complete\")\n\n# somethere else in your app:\nawait app.event(\"do.something.complete\")\n```\n\n----------------------------------------\n\nTITLE: Custom SSL Context Loading in Sanic\nDESCRIPTION: Example of implementing a custom CertLoader for SSL context configuration.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.3.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.worker.loader import CertLoader\n\nclass MyCertLoader(CertLoader):\n    def load(self, app: Sanic) -> SSLContext:\n        ...\n\napp = Sanic(..., certloader_class=MyCertLoader)\n```\n\n----------------------------------------\n\nTITLE: Copying Blueprints with Modified Properties\nDESCRIPTION: Shows how to create a copy of an existing blueprint with a new name and potentially different properties. This is useful for creating multiple versions of similar functionality.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nv1 = Blueprint(\"Version1\", version=1)\n\n@v1.route(\"/something\")\ndef something(request):\n    pass\n\nv2 = v1.copy(\"Version2\", version=2)\n\napp.blueprint(v1)\napp.blueprint(v2)\n```\n\n----------------------------------------\n\nTITLE: New Cookie List Access Method in Sanic v23.3\nDESCRIPTION: Demonstrates the new getlist method introduced in Sanic v23.3 for retrieving all values for a cookie key as a list.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.3.md#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nassert request.cookies.getlist(\"foo\") == [\"bar\"]\n```\n\n----------------------------------------\n\nTITLE: Nginx Reverse Proxy Configuration\nDESCRIPTION: Complete Nginx configuration for proxying requests to Sanic, including SSL settings, upstream configuration, and HTTP to HTTPS redirects.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/deployment/nginx.md#2025-04-20_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\n# Files managed by Certbot\nssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\nssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n\n# Sanic service\nupstream example.com {\n  keepalive 100;\n  server 127.0.0.1:8001;\n  #server unix:/tmp//sanic.sock;\n}\n\nserver {\n  server_name example.com;\n  listen 443 ssl http2 default_server;\n  listen [::]:443 ssl http2 default_server;\n  # Serve static files if found, otherwise proxy to Sanic\n  location / {\n    root /srv/sanicexample/static;\n    try_files $uri @sanic;\n  }\n  location @sanic {\n    proxy_pass http://$server_name;\n    # Allow fast streaming HTTP/1.1 pipes (keep-alive, unbuffered)\n    proxy_http_version 1.1;\n    proxy_request_buffering off;\n    proxy_buffering off;\n    proxy_set_header forwarded 'by=\\\"_$hostname\\\";$for_addr;proto=$scheme;host=\\\"$http_host\\\"';\n    # Allow websockets and keep-alive (avoid connection: close)\n    proxy_set_header connection \"upgrade\";\n    proxy_set_header upgrade $http_upgrade;\n  }\n}\n\n# Redirect WWW to no-WWW\nserver {\n  listen 443 ssl http2;\n  listen [::]:443 ssl http2;\n  server_name ~^www\\.(.*)$;\n  return 308 $scheme://$1$request_uri;\n}\n\n# Redirect all HTTP to HTTPS with no-WWW\nserver {\n  listen 80 default_server;\n  listen [::]:80 default_server;\n  server_name ~^(?:www\\.)?(.*)$;\n  return 308 https://$1$request_uri;\n}\n\n# Forwarded for= client IP address formatting\nmap $remote_addr $for_addr {\n  ~^[0-9.]+$          \"for=$remote_addr\";        # IPv4 client address\n  ~^[0-9A-Fa-f:.]+$   \"for=\\\"[$remote_addr]\\\"\";  # IPv6 bracketed and quoted\n  default             \"for=unknown\";             # Unix socket\n}\n```\n\n----------------------------------------\n\nTITLE: Request Counter Usage\nDESCRIPTION: Demonstrates how to access the request count in a route handler using the CountedRequest class.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/convenience.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\nasync def handler(request: CountedRequest):\n    return json({\"count\": request.count})\n```\n\n----------------------------------------\n\nTITLE: Executing Custom Named Command\nDESCRIPTION: Shows how to execute the custom command with an overridden name ('greet' instead of 'hello') from the CLI.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/commands.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to:app exec greet --name=Adam\n```\n\n----------------------------------------\n\nTITLE: Testing with SanicTestClient Port Configuration\nDESCRIPTION: Example showing how to configure SanicTestClient to bind to a random port by specifying port=None\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/changelog.md#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nSanicTestClient(port=None)\n```\n\n----------------------------------------\n\nTITLE: Implementing Typed Listeners in Sanic\nDESCRIPTION: Demonstrates how to use custom type annotations in Sanic listeners for better type safety.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/app.md#2025-04-20_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# ./path/to/listeners.py\nfrom myapp.types import MyApp\n\ndef add_listeners(app: MyApp):\n    @app.before_server_start\n    async def before_server_start(app: MyApp):\n        # do something with your fully typed app instance\n        await app.ctx.db.connect()\n```\n\n----------------------------------------\n\nTITLE: Using Sanic's Prepare and Serve Methods in Python\nDESCRIPTION: This snippet shows an alternative way to run a Sanic application using the prepare and serve methods separately.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    app.prepare(host='0.0.0.0', port=1337, access_log=False)\n    Sanic.serve()\n```\n\n----------------------------------------\n\nTITLE: Using SanicASGITestClient in Python\nDESCRIPTION: Demonstrates how to use the SanicASGITestClient for asynchronous testing of Sanic applications. This client uses httpx to execute Sanic as an ASGI application.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-testing/clients.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nawait app.test_client.get(\"/path/to/endpoint\")\n```\n\n----------------------------------------\n\nTITLE: Implementing GET Route with Auto HEAD Support in Sanic\nDESCRIPTION: Demonstrates a basic GET route implementation that automatically supports HEAD requests through Sanic Extensions. The route returns a simple text response.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/http/methods.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings in Sanic (Python)\nDESCRIPTION: Example of how to set proxy-related configuration values in a Sanic application.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/proxy-headers.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp.config.FORWARDED_SECRET = \"super-duper-secret\"\napp.config.REAL_IP_HEADER = \"CF-Connecting-IP\"\napp.config.PROXIES_COUNT = 2\n```\n\n----------------------------------------\n\nTITLE: Installing Sanic Framework\nDESCRIPTION: Basic pip command to install the Sanic web framework.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/getting-started.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install sanic\n```\n\n----------------------------------------\n\nTITLE: Running Sanic from Command Line\nDESCRIPTION: Command to start a Sanic application from the command line, assuming the app is defined in a file named 'hello.py'.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/README.rst#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsanic hello.app\n```\n\n----------------------------------------\n\nTITLE: Current Request Cookie Access in Sanic v23.3\nDESCRIPTION: Example showing the current behavior of accessing cookies in Sanic v23.3, where both dictionary access and get() method return the first cookie value.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.3.md#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nassert request.cookies[\"foo\"] == \"bar\"\nassert request.cookies.get(\"foo\") == \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Dependency Injection with Person Class\nDESCRIPTION: Shows how to implement dependency injection with custom constructors and nested dependencies using PersonID and Person classes.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/injection.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass PersonID:\n    person_id: int\n\n@dataclass\nclass Person:\n    person_id: PersonID\n    name: str\n    age: int\n\n    @classmethod\n    async def create(cls, request: Request, person_id: int):\n        return cls(person_id=PersonID(person_id), name=\"noname\", age=111)\n\n\napp.ext.add_dependency(Person, Person.create)\napp.ext.add_dependency(PersonID)\n\n@app.get(\"/person/<person_id:int>\")\nasync def person_details(\n    request: Request, person_id: PersonID, person: Person\n):\n    return text(f\"{person_id}\\n{person}\")\n```\n\n----------------------------------------\n\nTITLE: Simplified Signal Naming in Sanic\nDESCRIPTION: Shows how to use simplified signal naming in Sanic, including dynamic signal names.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.12.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.signal(\"foo\")\nasync def foo():\n    ...\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.signal(\"<thing>\")\nasync def handler(**kwargs):\n    print(\"foobar signal received\")\n    print(kwargs)\n\n\n@app.route(\"/\")\nasync def test(request: Request):\n    await request.app.dispatch(\"foobar\")\n    return json({\"hello\": \"world\"})\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for Sanic Exceptions Module\nDESCRIPTION: ReStructuredText directive that automatically generates documentation for the sanic.exceptions module. It includes all members and shows inheritance relationships.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/docs/sanic/api/exceptions.rst#2025-04-20_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: sanic.exceptions\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting START_METHOD_SET Flag in Sanic\nDESCRIPTION: Shows how to prevent Sanic from setting the start method by marking it as already set, useful when resolving RuntimeError conflicts.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\n\nSanic.START_METHOD_SET = True\n```\n\n----------------------------------------\n\nTITLE: Naming Handlers in Sanic\nDESCRIPTION: Shows different ways to name handlers in Sanic, including automatic naming and explicit naming using the 'name' parameter in the route decorator.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/handlers.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Handler name will be \"foo_handler\"\n@app.get(\"/foo\")\nasync def foo_handler(request):\n    return text(\"I said foo!\")\n```\n\nLANGUAGE: python\nCODE:\n```\n# Handler name will be \"foo\"\n@app.get(\"/foo\", name=\"foo\")\nasync def foo_handler(request):\n    return text(\"I said foo!\")\n```\n\nLANGUAGE: python\nCODE:\n```\n# Two handlers, same function,\n# different names:\n# - \"foo_arg\"\n# - \"foo\"\n@app.get(\"/foo/<arg>\", name=\"foo_arg\")\n@app.get(\"/foo\")\nasync def foo(request, arg=None):\n    return text(\"I said foo!\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Listener in a Separate Module\nDESCRIPTION: This snippet shows how to define a listener in a separate module that will be autodiscovered. It retrieves the Sanic app instance and attaches an after_server_start listener to it.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/autodiscovery.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.log import logger\n\napp = Sanic.get_app(\"auto\")\n\n@app.after_server_start\ndef print_something(app, loop):\n    logger.debug(\"something\")\n```\n\n----------------------------------------\n\nTITLE: OpenAPI UI Configuration Options Table\nDESCRIPTION: Configuration table detailing all available options for customizing the OpenAPI UI implementation in Sanic Extensions, including path settings, UI preferences, and endpoint visibility controls.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/openapi/ui.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Key**                    | **Type**        | **Default**         | **Desctiption**                                              |\n| -------------------------- | --------------- | ------------------- | ------------------------------------------------------------ |\n| `OAS_IGNORE_HEAD`          | `bool`          | `True`              | Whether to display `HEAD` endpoints.                         |\n| `OAS_IGNORE_OPTIONS`       | `bool`          | `True`              | Whether to display `OPTIONS` endpoints.                      |\n| `OAS_PATH_TO_REDOC_HTML`   | `Optional[str]` | `None`              | Path to HTML to override the default Redoc HTML              |\n| `OAS_PATH_TO_SWAGGER_HTML` | `Optional[str]` | `None`              | Path to HTML to override the default Swagger HTML            |\n| `OAS_UI_DEFAULT`           | `Optional[str]` | `\"redoc\"`           | Can be set to `redoc` or `swagger`. Controls which UI to display on the base route. If set to `None`, then the base route will not be setup. |\n| `OAS_UI_REDOC`             | `bool`          | `True`              | Whether to enable Redoc UI.                                  |\n| `OAS_UI_SWAGGER`           | `bool`          | `True`              | Whether to enable Swagger UI.                                |\n| `OAS_URI_TO_CONFIG`        | `str`           | `\"/openapi-config\"` | URI path to the OpenAPI config used by Swagger               |\n| `OAS_URI_TO_JSON`          | `str`           | `\"/openapi.json\"`   | URI path to the JSON document.                               |\n| `OAS_URI_TO_REDOC`         | `str`           | `\"/redoc\"`          | URI path to Redoc.                                           |\n| `OAS_URI_TO_SWAGGER`       | `str`           | `\"/swagger\"`        | URI path to Swagger.                                         |\n| `OAS_URL_PREFIX`           | `str`           | `\"/docs\"`           | URL prefix to use for the Blueprint for OpenAPI docs.        |\n```\n\n----------------------------------------\n\nTITLE: Accessing New HTTP Method Properties in Sanic Requests\nDESCRIPTION: Demonstrates how to use new boolean properties on Sanic request objects to determine if an HTTP method is safe, idempotent, or cacheable. These properties are based on the HTTP specification.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.9.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrequest.is_safe\nrequest.is_idempotent\nrequest.is_cacheable\n```\n\n----------------------------------------\n\nTITLE: Current Streaming Response Implementation\nDESCRIPTION: Demonstrates the current recommended way to implement streaming responses in Sanic using the request.respond() method.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.12.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def sample_streaming_fn(response):\n    await response.write(\"foo,\")\n    await response.write(\"bar\")\n\n@app.route(\"/\")\nasync def test(request: Request):\n    response = await request.respond(content_type=\"text/csv\")\n    await response.send(\"foo,\")\n    await response.send(\"bar\")\n```\n\n----------------------------------------\n\nTITLE: Deprecated Config Methods\nDESCRIPTION: Configuration methods deprecated in version 20.9.0 to be removed in v21.3\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/changelog.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nconfig.from_envar\nconfig.from_pyfile\nconfig.from_object\n```\n\n----------------------------------------\n\nTITLE: Type-Annotated Configuration Extension\nDESCRIPTION: Demonstrates using type-annotated Config object for better IDE support when configuring Sanic Extensions.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import Config\n\napp = Sanic(\"MyApp\")\napp.extend(config=Config(oas_url_prefix=\"/apidocs\"))\n```\n\n----------------------------------------\n\nTITLE: Expanded HTTPMethodView Usage in Sanic 21.6\nDESCRIPTION: Illustrates the three ways to attach class-based views in Sanic 21.6, including the existing method and two new methods using the 'attach' method and class definition.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.6.md#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass DummyView(HTTPMethodView):\n    ...\n\n# Option 1 - Existing\napp.add_route(DummyView.as_view(), \"/dummy\")\n\n# Option 2 - From `attach` method\nDummyView.attach(app, \"/\")\n\n# Option 3 - From class definition at `__init_subclass__`\nclass DummyView(HTTPMethodView, attach=app, uri=\"/\"):\n    ...\n\n# Using in another file\nfrom sanic import Sanic, HTTPMethodView\n\nclass DummyView(HTTPMethodView, attach=Sanic.get_app(), uri=\"/\"):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Reload Trigger with Changed Files in Sanic\nDESCRIPTION: Demonstrates how to access the list of changed files in the reload trigger listener.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.12.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.after_reload_trigger\nasync def after_reload_trigger(_, changed):\n    print(changed)\n```\n\n----------------------------------------\n\nTITLE: Request-Based Profile Dependency Injection\nDESCRIPTION: Implements dependency injection using request data to create user profiles, demonstrating how to handle request body processing and custom object creation.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/injection.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass User:\n    name: str\n\n@dataclass\nclass UserProfile:\n    user: User\n    age: int = field(default=0)\n    email: str = field(default=\"\")\n\n    def __json__(self):\n        return ujson.dumps({\n            \"name\": self.user.name,\n            \"age\": self.age,\n            \"email\": self.email,\n        })\n\nasync def fake_request_to_db(body):\n    today = date.today()\n    email = f'{body[\"name\"]}@something.com'.lower()\n    difference = today - date.fromisoformat(body[\"birthday\"])\n    age = int(difference.days / 365)\n    return UserProfile(\n        User(body[\"name\"]),\n        age=age,\n        email=email,\n    )\n\nasync def compile_profile(request: Request):\n    await request.receive_body()\n    profile = await fake_request_to_db(request.json)\n    return profile\n\napp.ext.add_dependency(UserProfile, compile_profile)\n\n@app.patch(\"/profile\")\nasync def update_profile(request, profile: UserProfile):\n    return json(profile)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Route Names in Sanic\nDESCRIPTION: Demonstrates how to override the default route naming behavior in Sanic by subclassing the Sanic class and implementing a custom generate_name method.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2024/v24.6.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic, text,\n\nclass Custom(Sanic):\n    def generate_name(self, *objects):\n        existing = self._generate_name(*objects)\n        return existing.upper()\n        \napp = Sanic(\"Foo\")\n\n@app.get(\"/\")\nasync def handler(request):\n    return text(request.name)  # FOO.HANDLER\n\n    \nreturn app\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand for Sanic Development Mode\nDESCRIPTION: A more concise command to enable development mode using the shorthand flag -d, providing the same functionality as --dev.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/development.md#2025-04-20_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to:app -d\n```\n\n----------------------------------------\n\nTITLE: Documenting Sanic HTTP Module in RST\nDESCRIPTION: Sphinx autodoc directive to generate documentation for the sanic.http module, showing all members and inheritance information.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/docs/sanic/api/server.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: sanic.http\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Basic Docstring Documentation in Sanic Handler\nDESCRIPTION: Demonstrates how to use Python docstrings to automatically generate API documentation summary and description. The first line becomes the summary while the remaining text becomes the description. Supports markdown formatting.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/openapi/autodoc.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/foo\")\nasync def handler(request, something: str):\n    \"\"\"This is a simple foo handler\n\n    It is helpful to know that you could also use **markdown** inside your\n    docstrings.\n\n    - one\n    - two\n    - three\"\"\"\n    return text(\">>>\")\n```\n\nLANGUAGE: json\nCODE:\n```\n\"paths\": {\n  \"/foo\": {\n    \"get\": {\n      \"summary\": \"This is a simple foo handler\",\n      \"description\": \"It is helpful to know that you could also use **markdown** inside your<br>docstrings.<br><br>- one<br>- two<br>- three\",\n      \"responses\": {\n        \"default\": {\n          \"description\": \"OK\"\n        }\n      },\n      \"operationId\": \"get_handler\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with Proxy Configuration\nDESCRIPTION: Command line instruction to run the Sanic application with forwarded secret configuration for proxy support.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/deployment/nginx.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSANIC_FORWARDED_SECRET=_hostname sanic proxied_example --port 8001\n```\n\n----------------------------------------\n\nTITLE: Running Sanic in Development Mode for Enhanced Logging\nDESCRIPTION: Command to run a Sanic application in development mode, which provides more detailed logging output. The --dev flag enables debug mode which changes log formatting and level.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/logging.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app --dev\n```\n\n----------------------------------------\n\nTITLE: Enabling Background Logger in Sanic Extensions\nDESCRIPTION: This snippet shows how to enable the background logger in Sanic Extensions. The background logger is disabled by default and needs to be explicitly enabled through configuration.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/logger.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp.config.LOGGING = True\n```\n\n----------------------------------------\n\nTITLE: Modifying Sanic's Default Logging Formatters\nDESCRIPTION: Example showing how to modify specific parts of Sanic's default logging configuration. This code changes the formatter classes to use production formatters instead of the auto formatters that adjust based on debug mode.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/logging.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.log import LOGGING_CONFIG_DEFAULTS\n\nLOGGING_CONFIG_DEFAULTS['formatters']['generic']['class'] = 'sanic.logging.formatter.ProdFormatter'\nLOGGING_CONFIG_DEFAULTS['formatters']['access']['class'] = 'sanic.logging.formatter.ProdAccessFormatter'\n\napp = Sanic('logging_example', log_config=LOGGING_CONFIG_DEFAULTS)\n```\n\n----------------------------------------\n\nTITLE: Setting Text as Fallback Error Format\nDESCRIPTION: Shows how to configure Sanic to use plain text as the fallback error format. This affects how errors are displayed when no specific error handler is defined.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\napp.config.FALLBACK_ERROR_FORMAT = \"text\"\n```\n\n----------------------------------------\n\nTITLE: Factory Pattern Application in Sanic 21.6 CLI\nDESCRIPTION: Demonstrates how to use the new '--factory' flag in Sanic CLI for applications following the factory pattern. This allows launching applications that are created by a function returning a Sanic instance.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.6.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Blueprint, Sanic, text\n\nbp = Blueprint(__file__)\n\n@bp.get(\"/\")\nasync def handler(request):\n    return text(\"😎\")\n\ndef create_app() -> Sanic:\n    app = Sanic(__file__)\n    app.blueprint(bp)\n    return app\n```\n\n----------------------------------------\n\nTITLE: Implementing Signal Handlers in Sanic\nDESCRIPTION: Example of using the new Signals API in Sanic, demonstrating how to define signal handlers, wait for events, and dispatch signals.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.3.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.signal(\"foo.bar.<thing>\")\nasync def signal_handler(thing, **kwargs):\n    print(f\"[signal_handler] {thing=}\", kwargs)\n\nasync def wait_for_event(app):\n    while True:\n        print(\"> waiting\")\n        await app.event(\"foo.bar.*\")\n        print(\"> event found\\n\")\n\n@app.after_server_start\nasync def after_server_start(app, loop):\n    app.add_task(wait_for_event(app))\n\n@app.get(\"/\")\nasync def trigger(request):\n    await app.dispatch(\"foo.bar.baz\")\n    return response.text(\"Done.\")\n```\n\n----------------------------------------\n\nTITLE: Fixed Serializer with Status Code\nDESCRIPTION: Shows how to use the @serializer decorator with a custom status code for the response. This example sets a 202 status code for a POST endpoint.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/convenience.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import serializer\n\n@app.post(\"/\")\n@serializer(text, status=202)\nasync def create_something(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Legacy Logging Formatters in Sanic\nDESCRIPTION: Shows how to configure Sanic to use the legacy logging formatters for both generic and access logs.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2024/v24.6.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.log import LOGGING_CONFIG_DEFAULTS\n\nLOGGING_CONFIG_DEFAULTS[\"formatters\"] = {\n    \"generic\": {\n        \"class\": \"sanic.logging.formatter.LegacyFormatter\"\n    },\n    \"access\": {\n        \"class\": \"sanic.logging.formatter.LegacyAccessFormatter\"\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Including RST Changelog Files\nDESCRIPTION: RST directives for including multiple changelog files from different Sanic versions using mdinclude and include directives\nSOURCE: https://github.com/sanic-org/sanic/blob/main/docs/sanic/changelog.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. mdinclude:: ./releases/23/23.6.md\n.. mdinclude:: ./releases/23/23.3.md\n.. mdinclude:: ./releases/22/22.12.md\n.. mdinclude:: ./releases/22/22.9.md\n.. mdinclude:: ./releases/22/22.6.md\n.. mdinclude:: ./releases/22/22.3.md\n.. mdinclude:: ./releases/21/21.12.md\n.. mdinclude:: ./releases/21/21.9.md\n.. include:: ../../CHANGELOG.rst\n```\n\n----------------------------------------\n\nTITLE: Destructuring Test Results in Sanic REPL\nDESCRIPTION: Example of destructuring the tuple returned by the 'do' function to directly access request and response objects.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/development.md#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> request, response = await do(\"/new-route\")\n>>> request\n<Request: GET /new-route>\n>>> response\n<JSONResponse: 200 application/json>\n```\n\n----------------------------------------\n\nTITLE: Sanic Proxy Configuration Example 1 (Python)\nDESCRIPTION: Configuration for Sanic application with PROXIES_COUNT and REAL_IP_HEADER set.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/proxy-headers.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Sanic application config\napp.config.PROXIES_COUNT = 1\napp.config.REAL_IP_HEADER = \"x-real-ip\"\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Fallback Error Format in Sanic\nDESCRIPTION: Sets the fallback error format to JSON in Sanic configuration. This determines how errors are formatted when returned to the client.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_18\n\nLANGUAGE: python\nCODE:\n```\napp.config.FALLBACK_ERROR_FORMAT = \"json\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Sanic Server Module in RST\nDESCRIPTION: Sphinx autodoc directive to generate documentation for the sanic.server module, showing all members and inheritance information.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/docs/sanic/api/server.rst#2025-04-20_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: sanic.server\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Enabling Health Monitor in Sanic Extensions\nDESCRIPTION: Configuration to enable the health monitor and its endpoint in Sanic Extensions. This requires Sanic version 22.9 or higher and should not be used in single process mode.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/health-monitor.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp.config.HEALTH = True\napp.config.HEALTH_ENDPOINT = True\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with Multiple HTTP Versions\nDESCRIPTION: Shows how to run a Sanic server with both HTTP/3 and HTTP/1.1 simultaneously using application multi-serve feature.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.6.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sanic path.to.server:app --http=3 --http=1\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ sanic path.to.server:app -3 -1\n```\n\nLANGUAGE: python\nCODE:\n```\napp.prepre(version=3)\napp.prepre(version=1)\nSanic.serve()\n```\n\n----------------------------------------\n\nTITLE: Enabling Noisy Exceptions Configuration\nDESCRIPTION: Shows how to configure Sanic to log all exceptions regardless of their quiet property by enabling the NOISY_EXCEPTIONS configuration. Useful for debugging quiet exceptions.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\napp.config.NOISY_EXCEPTIONS = True\n```\n\n----------------------------------------\n\nTITLE: File Extension Path Parameter Handling in Sanic\nDESCRIPTION: Shows usage of the new file extension path parameter type for matching file patterns in URLs. Demonstrates basic and advanced pattern matching with type constraints.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.3.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/path/to/<filename:ext>\")\nasync def handler(request, filename, ext):\n    ...\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/path/to/<filename=int:ext=jpg>\")\nasync def handler(request, filename, ext):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Signal Events with Enums in Sanic\nDESCRIPTION: Example of using enumerated signal events for event handling.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.12.md#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic.signals import Event\n\n@app.signal(Event.HTTP_LIFECYCLE_BEGIN)\nasync def connection_opened(conn_info):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Attrs Validation in Sanic Route Handler\nDESCRIPTION: This code illustrates how to use the @validate decorator with an Attrs model to validate JSON body data in a Sanic route handler.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/validation.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import validate\n\n@app.post(\"/person\")\n@validate(json=Person)\nasync def handler(request, body: Person):\n    return json(attrs.asdict(body))\n```\n\n----------------------------------------\n\nTITLE: Creating Multiprocessing Queue in Sanic Main Process\nDESCRIPTION: Illustrates how to create a multiprocessing Queue in the main process of a Sanic application, utilizing the new multiprocessing start method.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.6.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom multiprocessing import Queue\n\n@app.main_process_start\nasync def main_process_start(app):\n    app.shared_ctx.queue = Queue()\n```\n\n----------------------------------------\n\nTITLE: Sanic CLI Launch Commands\nDESCRIPTION: Various methods to launch Sanic applications from the command line.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.3.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.module:app          # global app instance\nsanic path.to.module:create_app   # factory pattern\nsanic ./path/to/directory/        # simple serve\nsanic path.to.module              # module with app instance\n```\n\n----------------------------------------\n\nTITLE: Using Custom Request Objects in Handlers\nDESCRIPTION: Demonstrates how to use a custom Request class in a route handler with type annotations.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/request.md#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\nasync def handler(request: CustomRequest):\n    return text(f\"User ID: {request.user_id}\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Request and Response Objects from REPL Test Results\nDESCRIPTION: Example showing how to access the Request and Response objects returned by the 'do' function in the Sanic REPL.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/development.md#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> result = await do(\"/new-route\")\n>>> result.request\n<Request: GET /new-route>\n>>> result.response\n<JSONResponse: 200 application/json>\n```\n\n----------------------------------------\n\nTITLE: Defining Robot Access Rules for Sanic Website\nDESCRIPTION: This snippet configures the robots.txt file for the Sanic website. It allows all user agents to access the entire site, specifies the sitemap location, and sets the host.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/public/web/robots.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nAllow: /\nSitemap: https://sanic.dev/sitemap.xml\nHost: https://sanic.dev\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Control Headers in Sanic File Response\nDESCRIPTION: Shows the improved API support for setting Cache-Control headers when using the file response helper in Sanic.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.6.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfile(\n    ...,\n    last_modified=...,\n    max_age=...,\n    no_store=...,\n)\n```\n\n----------------------------------------\n\nTITLE: Running Sanic Simple Server with Auto-Reload\nDESCRIPTION: This snippet demonstrates how to run Sanic's Simple Server with auto-reloading enabled for a specific directory.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nsanic ./path/to/dir --simple --reload --reload-dir=./path/to/dir\n```\n\n----------------------------------------\n\nTITLE: Using Type Annotations for Sanic Route Parameters\nDESCRIPTION: Shows how to use Python type annotations to control path parameter types in Sanic routes, simplifying route definitions.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.9.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/<one>/<two>/<three>\")\ndef handler(request: Request, one: int, two: float, three: UUID):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Static Directory Index Configuration in Sanic\nDESCRIPTION: Shows how to configure automatic index file serving for static directories.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.3.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp.static(\"/assets/\", \"/path/to/some/dir\", index=\"index.html\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Deprecation Warning Filter in Sanic\nDESCRIPTION: Shows how to set the deprecation warning filter for Sanic using the app.config.DEPRECATION_FILTER setting. This allows control over the display of deprecation warnings using standard library warning filter values.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.9.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\napp.config.DEPRECATION_FILTER = \"ignore\"\n```\n\n----------------------------------------\n\nTITLE: Decorator-Based Template Rendering\nDESCRIPTION: Using Sanic's template decorator for pre-loading templates at startup time for optimal performance\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/templating/jinja.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\n@app.ext.template(\"foo.html\")\nasync def handler(request: Request):\n    return {\"seq\": [\"one\", \"two\"]}\n```\n\n----------------------------------------\n\nTITLE: Correct Route Naming with Explicit Names in Sanic\nDESCRIPTION: Recommended approach for route naming in Sanic v23.3+. This example shows how to explicitly name routes to avoid duplicate name errors.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.3.md#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"SomeApp\")\n\n@app.get(\"/\", name=\"root\")\n@app.get(\"/foo\", name=\"foo\")\nasync def handler(request: Request):\n```\n\n----------------------------------------\n\nTITLE: Disable Environment Loading\nDESCRIPTION: Shows how to disable environment variable loading in Sanic configuration.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/configuration.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(__name__, load_env=False)\n```\n\n----------------------------------------\n\nTITLE: Basic Jinja HTML Template\nDESCRIPTION: Example HTML template file showing Jinja syntax for iteration and variable rendering\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/templating/jinja.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\n    <head>\n        <title>My Webpage</title>\n    </head>\n\n    <body>\n        <h1>Hello, world!!!!</h1>\n        <ul>\n            {% for item in seq %}\n            <li>{{ item }}</li>\n            {% endfor %}\n        </ul>\n    </body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Contextual Exceptions in Sanic\nDESCRIPTION: Examples of implementing custom exceptions with dynamic messages and context in Sanic.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.12.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass TeapotError(SanicException):\n    status_code = 418\n    message = \"Sorry, I cannot brew coffee\"\n\nraise TeapotError\n```\n\nLANGUAGE: python\nCODE:\n```\nclass TeapotError(SanicException):\n    status_code = 418\n\n    @property\n    def message(self):\n        return f\"Sorry {self.extra['name']}, I cannot make you coffee\"\n\nraise TeapotError(extra={\"name\": \"Adam\"})\n```\n\nLANGUAGE: python\nCODE:\n```\nraise TeapotError(context={\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Model Definitions\nDESCRIPTION: Define SQLAlchemy ORM models for Person and Car entities with relationships\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/orm.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# ./models.py\nfrom sqlalchemy import INTEGER, Column, ForeignKey, String\nfrom sqlalchemy.orm import declarative_base, relationship\n\nBase = declarative_base()\n\nclass BaseModel(Base):\n    __abstract__ = True\n    id = Column(INTEGER(), primary_key=True)\n\nclass Person(BaseModel):\n    __tablename__ = \"person\"\n    name = Column(String())\n    cars = relationship(\"Car\")\n\n    def to_dict(self):\n        return {\"name\": self.name, \"cars\": [{\"brand\": car.brand} for car in self.cars]}\n\nclass Car(BaseModel):\n    __tablename__ = \"car\"\n\n    brand = Column(String())\n    user_id = Column(ForeignKey(\"person.id\"))\n    user = relationship(\"Person\", back_populates=\"cars\")\n```\n\n----------------------------------------\n\nTITLE: Copying and Versioning Sanic Blueprints\nDESCRIPTION: Demonstrates how to copy a Sanic Blueprint to create a new version with all attached routes and middleware.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.9.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nv1 = Blueprint(\"Version1\", version=1)\n\n@v1.route(\"/something\")\ndef something(request):\n    pass\n\nv2 = v1.copy(\"Version2\", version=2)\n\napp.blueprint(v1)\napp.blueprint(v2)\n```\n\n----------------------------------------\n\nTITLE: Specifying Error Format for Sanic Route\nDESCRIPTION: Shows how to explicitly control the exception format for a specific route in Sanic using the error_format parameter.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.9.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\", error_format=\"json\")\nasync def handler(request):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Cookie Management in Sanic\nDESCRIPTION: Demonstrates old and new methods of cookie handling in Sanic responses.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.3.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresponse = text(\"There's a cookie up in this response\")\nresponse.cookies[\"test\"] = \"It worked!\"\nresponse.cookies[\"test\"][\"domain\"] = \".yummy-yummy-cookie.com\"\nresponse.cookies[\"test\"][\"httponly\"] = True\n```\n\nLANGUAGE: python\nCODE:\n```\nresponse = text(\"There's a cookie up in this response\")\nresponse.add_cookie(\n    \"test\",\n    \"It worked!\",\n    domain=\".yummy-yummy-cookie.com\",\n    httponly=True\n)\n```\n\n----------------------------------------\n\nTITLE: Defining ErrorHandler.lookup Method in Python\nDESCRIPTION: Shows the new required signature for the ErrorHandler.lookup method, which now requires two positional arguments: the exception and an optional route name.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.9.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef lookup(self, exception, route_name: Optional[str]):\n```\n\n----------------------------------------\n\nTITLE: Instantiating SanicTestClient in Python\nDESCRIPTION: Shows how to manually instantiate the SanicTestClient for testing Sanic applications. This approach gives more control over the test client setup.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-testing/clients.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_testing.testing import SanicTestClient\n\ntest_client = SanicTestClient(app)\ntest_client.get(\"/path/to/endpoint\")\n```\n\n----------------------------------------\n\nTITLE: Route Context Arguments in Sanic\nDESCRIPTION: Example of using context kwargs in route definitions with the ctx_ prefix.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.12.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/1\", ctx_label=\"something\")\nasync def handler1(request):\n    ...\n\n@app.get(\"/2\", ctx_label=\"something\")\nasync def handler2(request):\n    ...\n\n@app.get(\"/99\")\nasync def handler99(request):\n    ...\n\n@app.on_request\nasync def do_something(request):\n    if request.route.ctx.label == \"something\":\n        ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanic Extensions - API Documentation Path\nDESCRIPTION: Three equivalent methods to configure Sanic extensions, specifically setting the OpenAPI documentation URL prefix.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.12.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# This is optional, not required\napp = Sanic(\"MyApp\")\napp.extend(config={\"oas_url_prefix\": \"/apidocs\"})\n```\n\nLANGUAGE: python\nCODE:\n```\n# This is optional, not required\napp = Sanic(\"MyApp\")\napp.config.OAS_URL_PREFIX = \"/apidocs\"\n```\n\nLANGUAGE: python\nCODE:\n```\n# This is optional, not required\nfrom sanic_ext import Config\n\napp = Sanic(\"MyApp\")\napp.extend(config=Config(oas_url_prefix=\"/apidocs\"))\n```\n\n----------------------------------------\n\nTITLE: Defining Author Blueprint for API Structure\nDESCRIPTION: Creates a blueprint for managing author-related routes with a specific URL prefix. This is part of a modular API structure example.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# api/content/authors.py\nfrom sanic import Blueprint\n\nauthors = Blueprint(\"content_authors\", url_prefix=\"/authors\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Sanic Inspector via HTTP\nDESCRIPTION: Shows how to access the Sanic Inspector by making an HTTP request to its endpoint.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/inspector.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:6457\n```\n\n----------------------------------------\n\nTITLE: Installing Mayim Dependencies with pip\nDESCRIPTION: Install required packages for Mayim ORM integration with Sanic and PostgreSQL support\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/orm.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install sanic-ext\npip install mayim[postgres]\n```\n\n----------------------------------------\n\nTITLE: Example Output of Sanic Listeners Execution Order\nDESCRIPTION: Console output demonstrating the execution order of Sanic listeners across multiple processes, showing how startup listeners run in registration order and shutdown listeners run in reverse order.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/listeners.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n[pid: 1000000] [INFO] Goin' Fast @ http://127.0.0.1:9999\n[pid: 1000000] [INFO] listener_0\n[pid: 1111111] [INFO] listener_1\n[pid: 1111111] [INFO] listener_2\n[pid: 1111111] [INFO] listener_3\n[pid: 1111111] [INFO] listener_4\n[pid: 1111111] [INFO] Starting worker [1111111]\n[pid: 1222222] [INFO] listener_1\n[pid: 1222222] [INFO] listener_2\n[pid: 1222222] [INFO] listener_3\n[pid: 1222222] [INFO] listener_4\n[pid: 1222222] [INFO] Starting worker [1222222]\n[pid: 1111111] [INFO] Stopping worker [1111111]\n[pid: 1222222] [INFO] Stopping worker [1222222]\n[pid: 1222222] [INFO] listener_6\n[pid: 1222222] [INFO] listener_5\n[pid: 1222222] [INFO] listener_8\n[pid: 1222222] [INFO] listener_7\n[pid: 1111111] [INFO] listener_6\n[pid: 1111111] [INFO] listener_5\n[pid: 1111111] [INFO] listener_8\n[pid: 1111111] [INFO] listener_7\n[pid: 1000000] [INFO] listener_9\n[pid: 1000000] [INFO] Server Stopped\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Nginx\nDESCRIPTION: Docker Compose configuration that sets up an Nginx container, exposing port 80 and mounting a local configuration file.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/mounting.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.7\"\nservices:\n  app:\n    image: nginx:alpine\n    ports:\n      - 80:80\n    volumes:\n      - type: bind\n        source: ./conf\n        target: /etc/nginx/conf.d/default.conf\n```\n\n----------------------------------------\n\nTITLE: Running Sanic Application from Command Line\nDESCRIPTION: This snippet demonstrates how to execute a Sanic application script from the command line.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\npython server.py\n```\n\n----------------------------------------\n\nTITLE: Request Endpoint Access\nDESCRIPTION: Demonstrates how to access the endpoint handler name from a request object\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/changelog.md#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nrequest.endpoint  # Contains name of handler function\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Typed Sanic Application and Request in Python\nDESCRIPTION: Shows how to create a Sanic application with custom config, context, and request types for improved type hinting and IDE autocompletion.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.6.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request, Sanic\nfrom sanic.config import Config\n\nclass CustomConfig(Config):\n    pass\n\nclass Foo:\n    pass\n\nclass RequestContext:\n    foo: Foo\n\nclass CustomRequest(Request[Sanic[CustomConfig, Foo], RequestContext]):\n    @staticmethod\n    def make_context() -> RequestContext:\n        ctx = RequestContext()\n        ctx.foo = Foo()\n        return ctx\n\napp = Sanic(\n    \"test\", config=CustomConfig(), ctx=Foo(), request_class=CustomRequest\n)\n\n@app.get(\"/\")\nasync def handler(request: CustomRequest):\n   ...\n```\n\n----------------------------------------\n\nTITLE: Accessing IP Addresses in Sanic 21.6\nDESCRIPTION: Demonstrates the new 'client_ip' accessor on the 'conn_info' object, which provides an 'unwrapped' version of IPv6 addresses. This is particularly useful for IPv6 applications.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.6.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\nasync def handler(request):\n    return json(\n        {\n            \"request.ip\": request.ip,\n            \"request.conn_info.client\": request.conn_info.client,\n            \"request.conn_info.client_ip\": request.conn_info.client_ip,\n        }\n    )\n\napp.run(sock=my_ipv6_sock)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple TLS Certificates\nDESCRIPTION: Example of running Sanic server with multiple TLS certificates.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.12.md#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\napp.run(\n    ssl=[\n        \"/etc/letsencrypt/live/example.com/\",\n        \"/etc/letsencrypt/live/mysite.example/\",\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Version Prefix in Route Definition for Sanic 21.6\nDESCRIPTION: Illustrates how to use the new 'version_prefix' argument in route definitions to alter the version prefix in the URL. This allows adding path segments before the version number.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.6.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# /api/v1/my/path\napp.route(\"/my/path\", version=1, version_prefix=\"/api/v\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Sanic Inspector\nDESCRIPTION: Demonstrates how to enable the Sanic inspector through configuration settings.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\napp.config.INSPECTOR = True\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-Trace Configuration in Sanic Extensions\nDESCRIPTION: Demonstrates how to enable automatic TRACE endpoint creation in Sanic Extensions using configuration settings.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/http/methods.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import Extend, Config\n\napp.extend(config=Config(http_auto_trace=True))\n```\n\n----------------------------------------\n\nTITLE: Advanced OpenAPI YAML Documentation in Sanic Handler\nDESCRIPTION: Shows how to embed OpenAPI YAML specification within docstrings to provide detailed API documentation including operation ID, tags, parameters, and responses.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/openapi/autodoc.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/foo\")\nasync def handler(request, something: str):\n    \"\"\"This is a simple foo handler\n\n    Now we will add some more details\n\n    openapi:\n    ---\n    operationId: fooDots\n    tags:\n      - one\n      - two\n    parameters:\n      - name: limit\n        in: query\n        description: How many items to return at one time (max 100)\n        required: false\n        schema:\n          type: integer\n          format: int32\n    responses:\n      '200':\n        description: Just some dots\n    \"\"\"\n    return text(\"...\")\n```\n\nLANGUAGE: json\nCODE:\n```\n\"paths\": {\n  \"/foo\": {\n    \"get\": {\n      \"operationId\": \"fooDots\",\n      \"summary\": \"This is a simple foo handler\",\n      \"description\": \"Now we will add some more details\",\n      \"tags\": [\n        \"one\",\n        \"two\"\n      ],\n      \"parameters\": [\n        {\n          \"name\": \"limit\",\n          \"in\": \"query\",\n          \"description\": \"How many items to return at one time (max 100)\",\n          \"required\": false,\n          \"schema\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          }\n        }\n      ],\n      \"responses\": {\n        \"200\": {\n          \"description\": \"Just some dots\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Process Restart Handler\nDESCRIPTION: Shows how to implement a request handler that can restart a custom process using the multiplexer.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/restart\")\nasync def restart_handler(request: Request):\n    request.app.m.restart(\"Sanic-MyProcess-0\")\n    return json({\"foo\": request.app.m.name})\n```\n\n----------------------------------------\n\nTITLE: Using url_for with Blueprint Static Routes\nDESCRIPTION: Shows how to generate URLs for static files served by a blueprint using the url_for function. The blueprint name is included in the route name.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> print(app.url_for(\"static\", name=\"bp.uploads\", filename=\"file.txt\"))\n'/bp/web/path/file.txt'\n```\n\n----------------------------------------\n\nTITLE: Sanic Blueprint URL Generation Format\nDESCRIPTION: Shows the format used for generating URLs with url_for() when working with Blueprint handlers. The endpoint name follows the pattern of {blueprint_name}.{handler_name}.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n{blueprint_name}.{handler_name}\n```\n\n----------------------------------------\n\nTITLE: Using Simplified Exception Reporting Decorator in Sanic\nDESCRIPTION: Shows the usage of the new @app.report_exception decorator for simplified exception reporting in Sanic applications.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.6.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.report_exception\nasync def catch_any_exception(app: Sanic, exception: Exception):\n    print(\"Caught exception:\", exception)\n```\n\n----------------------------------------\n\nTITLE: Defining Sanic Routes with Different Version Types\nDESCRIPTION: Examples of defining Sanic routes with different version types, including string, integer, and float versions.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.3.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/foo\", version=\"2.1.1\")\n@app.route(\"/foo\", version=2)\n@app.route(\"/foo\", version=2.1)\n```\n\n----------------------------------------\n\nTITLE: Hybrid Template Rendering\nDESCRIPTION: Combining decorator-based template definition with lazy rendering for flexible response handling\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/templating/jinja.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import render\n\n@app.get(\"/\")\n@app.ext.template(\"foo.html\")\nasync def handler(request: Request):\n    return await render(context={\"seq\": [\"five\", \"six\"]}, status=400)\n```\n\n----------------------------------------\n\nTITLE: Defining Default Exception Message in Sanic\nDESCRIPTION: Demonstrates how to create a custom exception derived from SanicException with a default message.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.9.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass TeaError(SanicException):\n    message = \"Tempest in a teapot\"\n\nraise TeaError\n```\n\n----------------------------------------\n\nTITLE: Empty String Path Parameter Handling in Sanic\nDESCRIPTION: Demonstrates the new strorempty parameter type for handling empty string matches in URL path parameters.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.3.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/path/to/<foo:strorempty>\")\nasync def handler(request, foo):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Available Routes After Blueprint Copying\nDESCRIPTION: Shows the resulting routes available after copying and registering blueprints with different versions. Each blueprint has its own versioned URL prefix.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/blueprints.md#2025-04-20_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nAvailable routes:\n/v1/something\n/v2/something\n\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key for Sanic Inspector\nDESCRIPTION: Python code snippet demonstrating how to set an API key for authenticating access to the Sanic Inspector by adding it to the application configuration.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.12.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp.config.INSPECTOR_API_KEY = \"Super-Secret-200\"\n```\n\n----------------------------------------\n\nTITLE: Installing Sanic Extensions - Package Installation\nDESCRIPTION: Two equivalent methods to install Sanic with its extensions package.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.12.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install sanic[ext]\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install sanic sanic-ext\n```\n\n----------------------------------------\n\nTITLE: Setting Application Context Properties in Sanic\nDESCRIPTION: Demonstrates the new required way to set properties on Sanic or Blueprint objects using the ctx object, replacing the deprecated direct property setting.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.12.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"MyApp\")\napp.ctx.db = Database()\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Template for Hello World Page\nDESCRIPTION: A simple HTML template that displays 'Hello world!' text. It references an external CSS stylesheet for styling and sets up a basic document structure with appropriate metadata.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/static-redirects.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n</head>\n<link rel=\"stylesheet\" href=\"/hello_world.css\">\n<body>\n    <div id='hello_world'>\n        Hello world!\n    </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using JSONResponse in Sanic\nDESCRIPTION: Python code example showing how to use the new JSONResponse class in Sanic, which allows for convenient updating of JSON response bodies after creation.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.12.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresp = json({\"foo\": \"bar\"})\nresp.update({\"another\": \"value\"})\n```\n\n----------------------------------------\n\nTITLE: Adding Cookies to Response in Sanic\nDESCRIPTION: Demonstrates how to add cookies to a Sanic response using the new convenience method add_cookie(). This method allows setting cookie attributes like domain.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/changelog.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresponse = text(\"...\")\nresponse.add_cookie(\"test\", \"It worked!\", domain=\".yummy-yummy-cookie.com\")\n```\n\n----------------------------------------\n\nTITLE: Automatic App Injection in Sanic Tasks\nDESCRIPTION: Shows how Sanic automatically injects the app instance into a task function. This allows task functions to access the app object without explicitly passing it.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/tasks.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def auto_inject(app):\n    await asyncio.sleep(5)\n    print(app.name)\n\napp.add_task(auto_inject)\n```\n\n----------------------------------------\n\nTITLE: Setting Sanic Start Method\nDESCRIPTION: Shows how to set the start method for Sanic subprocesses to 'fork' instead of the default 'spawn'.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/changelog.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\n\nSanic.start_method = \"fork\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Transient Process in Sanic\nDESCRIPTION: Demonstrates how to configure a transient process that can be restarted by the auto-reloader.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@app.main_process_ready\nasync def ready(app: Sanic, _):\n    app.manager.manage(\n        \"MyProcess\",\n        my_process,\n        {\"foo\": \"bar\"},\n        transient=True,\n    )\n```\n\n----------------------------------------\n\nTITLE: Event Listener Implementation in Sanic Reloader\nDESCRIPTION: Shows how to implement process start and stop event listeners for the Sanic auto-reloader functionality.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.3.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.reload_process_start\nasync def reload_start(*_):\n    print(\">>>>>> reload_start <<<<<<\")\n\n@app.reload_process_stop\nasync def reload_stop(*_):\n    print(\">>>>>> reload_stop <<<<<<\")\n```\n\n----------------------------------------\n\nTITLE: Installing Sanic with HTTP/3 Support\nDESCRIPTION: Shows how to install Sanic with HTTP/3 support using pip, which requires the aioquic package.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.6.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install sanic aioquic\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install sanic[http3]\n```\n\n----------------------------------------\n\nTITLE: HTML Generation using html5tagger in Sanic\nDESCRIPTION: Demonstrates creating HTML content using html5tagger package with Sanic's HTML response.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.3.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom html5tagger import Document\nfrom sanic import Request, Sanic, html\n\napp = Sanic(\"TestApp\")\n\n@app.get(\"/\")\nasync def handler(request: Request):\n    doc = Document(\"My Website\")\n    doc.h1(\"Hello, world.\")\n    with doc.table(id=\"data\"):\n        doc.tr.th(\"First\").th(\"Second\").th(\"Third\")\n        doc.tr.td(1).td(2).td(3)\n    doc.p(class_=\"text\")(\"A paragraph with \")\n    doc.a(href=\"/files\")(\"a link\")(\" and \").em(\"formatting\")\n    return html(doc)\n```\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<title>My Website</title>\n<h1>Hello, world.</h1>\n<table id=data>\n    <tr>\n        <th>First\n        <th>Second\n        <th>Third\n    <tr>\n        <td>1\n        <td>2\n        <td>3\n</table>\n<p class=text>\n    A paragraph with <a href=\"/files\">a link</a> and <em>formatting</em>\n```\n\n----------------------------------------\n\nTITLE: Custom Naming Sanic CLI Command\nDESCRIPTION: Illustrates how to override the default command name by passing the 'name' argument to the @app.command decorator.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/commands.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.command(name=\"greet\")\nasync def hello(name=\"world\"):\n    print(f\"Hello, {name}.\")\n```\n\n----------------------------------------\n\nTITLE: Direct Configuration Setting Example\nDESCRIPTION: Example of setting configuration directly on app.config using capitalized configuration keys.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/configuration.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"MyApp\")\napp.config.OAS_URL_PREFIX = \"/apidocs\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Websocket Echo Handler\nDESCRIPTION: Demonstrates the new iterable websocket functionality for handling websocket messages using async for loops.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.9.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request, Websocket\n\n@app.websocket(\"/ws\")\nasync def ws_echo_handler(request: Request, ws: Websocket):\n    async for msg in ws:\n        await ws.send(msg)\n```\n\n----------------------------------------\n\nTITLE: Configuration Example Snippet\nDESCRIPTION: Example showing server configuration value names for websocket timeouts introduced in version 20.9.0\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/changelog.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nWEBSOCKET_PING_TIMEOUT\nWEBSOCKET_PING_INTERVAL\n```\n\n----------------------------------------\n\nTITLE: Running Sanic in Single Process Mode\nDESCRIPTION: Shows different ways to run Sanic in single process mode, including CLI, direct run, and prepare/serve methods.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nsanic path.to.server:app --single-process\n```\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    app.run(single_process=True)\n```\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    app.prepare(single_process=True)\n    Sanic.serve_single()\n```\n\n----------------------------------------\n\nTITLE: Setting Spawn Start Method with Multiprocessing\nDESCRIPTION: Shows how to configure Python's multiprocessing to use spawn instead of fork using the set_start_method function.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport multiprocessing\n\nmultiprocessing.set_start_method(\"spawn\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Restartable Custom Process\nDESCRIPTION: Demonstrates how to create a manually restartable process that won't be affected by auto-reloader.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@app.main_process_ready\nasync def ready(app: Sanic, _):\n    app.manager.manage(\n        \"MyProcess\",\n        my_process,\n        {\"foo\": \"bar\"},\n        restartable=True,\n    )\n```\n\n----------------------------------------\n\nTITLE: Installing Standalone Sanic Extensions\nDESCRIPTION: Installation command for Sanic Extensions package alone using pip package manager.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/getting-started.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install sanic-ext\n```\n\n----------------------------------------\n\nTITLE: Common Imports for Sanic Decorators\nDESCRIPTION: Essential imports for creating decorators in Sanic applications, including functools.wraps to preserve function metadata and inspect.isawaitable for handling both regular and async functions.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/decorators.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom inspect import isawaitable\nfrom functools import wraps\n```\n\n----------------------------------------\n\nTITLE: Executing Sanic CLI Commands\nDESCRIPTION: Shows the shell command syntax for executing custom CLI commands in Sanic using the exec command with optional arguments.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2024/v24.12.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsanic server:app exec <command> [--arg=value]\n```\n\nLANGUAGE: sh\nCODE:\n```\nsanic server:app exec command --one=1 --two=2 --three=3\n```\n\n----------------------------------------\n\nTITLE: Direct Template Rendering\nDESCRIPTION: Rendering templates by returning an HTTPResponse object directly, allowing for response customization\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/templating/jinja.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import render\n\n@app.get(\"/alt\")\nasync def handler(request: Request):\n    return await render(\n        \"foo.html\", context={\"seq\": [\"three\", \"four\"]}, status=400\n    )\n```\n\n----------------------------------------\n\nTITLE: Installing Sanic Extensions with Full Features\nDESCRIPTION: Installation command for Sanic with all extensions included using pip package manager.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/getting-started.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install sanic[ext]\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Logging in Sanic\nDESCRIPTION: Setting up noisy exceptions to force logging of all exceptions regardless of quiet flag.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.12.md#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\napp.config.NOISY_EXCEPTIONS = True\n```\n\n----------------------------------------\n\nTITLE: Configuring Websocket Parameters in Sanic\nDESCRIPTION: Demonstrates the default configuration settings for websocket maximum size, ping interval, and ping timeout parameters.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/websockets.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napp.config.WEBSOCKET_MAX_SIZE = 2 ** 20\napp.config.WEBSOCKET_PING_INTERVAL = 20\napp.config.WEBSOCKET_PING_TIMEOUT = 20\n```\n\n----------------------------------------\n\nTITLE: Initializing Sanic Server Main Process\nDESCRIPTION: Basic pattern for starting a Sanic server in the main process to prevent duplicate process creation when using spawn start method.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Configuration for Sanic\nDESCRIPTION: Systemd unit file configuration for running the Sanic application as a system service with appropriate security settings.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/deployment/nginx.md#2025-04-20_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n[Unit]\nDescription=Sanic Example\n\n[Service]\nDynamicUser=Yes\nWorkingDirectory=/srv/sanicservice\nEnvironment=SANIC_PROXY_SECRET=_hostname\nExecStart=sanic proxied_example --port 8001 --fast\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Sanic Exception Handling\nDESCRIPTION: Demonstrates importing and using Sanic's exception classes with additional control parameters.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.3.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import NotFound, Unauthorized, BadRequest, ServerError\n```\n\nLANGUAGE: python\nCODE:\n```\nraise ServerError(headers={\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: Installing Sanic for Development\nDESCRIPTION: Command to install Sanic from source code in development mode with all dev dependencies\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/organization/contributing.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install -e \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Sanic Inspector via CLI\nDESCRIPTION: Demonstrates how to access the Sanic Inspector using the CLI command.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/inspector.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsanic inspect\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Requests to Sanic API with Tortoise-ORM Backend\nDESCRIPTION: Example curl commands to interact with the Sanic API that uses Tortoise-ORM. These requests demonstrate fetching all users and a specific user by ID.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/orm.md#2025-04-20_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncurl --location --request POST 'http://127.0.0.1:8000/user'\n{\"users\":[\"I am foo\", \"I am bar\"]}\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl --location --request GET 'http://127.0.0.1:8000/user/1'\n{\"user\": \"I am foo\"}\n```\n\n----------------------------------------\n\nTITLE: Overriding Safe Method Body Handling in Sanic\nDESCRIPTION: Example of overriding the default behavior for safe HTTP methods to allow body decoding in a DELETE route.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.3.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.delete(..., ignore_body=False)\n```\n\n----------------------------------------\n\nTITLE: Installing SQLAlchemy Dependencies\nDESCRIPTION: Install required packages for SQLAlchemy async integration\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/orm.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npip install -U sqlalchemy\npip install -U aiomysql\n```\n\n----------------------------------------\n\nTITLE: Accessing Accept Header in Sanic Request\nDESCRIPTION: Shows how to access and use the parsed Accept header from a Sanic Request object, including wildcard matching.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.9.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprint(request.accept)\n# [\"*/*\"]\n\n\"text/plain\" in request.accept\n```\n\n----------------------------------------\n\nTITLE: Using Lower-level API for REPL Context Management\nDESCRIPTION: Shows how to use the lower-level API to add objects to the REPL context with custom descriptions. This method provides more control over how objects are presented in the REPL help system.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2025/v25.3.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp.repl_ctx.add(foo)\napp.repl_ctx.add(os, desc=\"Standard os module.\")\n```\n\n----------------------------------------\n\nTITLE: Request Body Handling Options\nDESCRIPTION: Examples of handling request bodies for non-standard HTTP methods.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/routing.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.request(\"/path\", ignore_body=False)\nasync def handler(_):\n    ...\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/path\")\nasync def handler(request: Request):\n    await request.receive_body()\n```\n\n----------------------------------------\n\nTITLE: Building the Docker Image\nDESCRIPTION: Shell command to build a Docker image for the Sanic application, tagging it as 'my-sanic-image'.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/deployment/docker.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t my-sanic-image .\n```\n\n----------------------------------------\n\nTITLE: Disabling Color Output in Sanic Logging\nDESCRIPTION: Demonstrates how to disable color output in Sanic's logging system by setting a configuration option.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2024/v24.6.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp.config.NO_COLOR = True\n```\n\n----------------------------------------\n\nTITLE: Running Type Checks\nDESCRIPTION: Command to run mypy type annotation checks\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/organization/contributing.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ntox -e type-checking\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Country Selection\nDESCRIPTION: SQL query to select countries with their capital cities using JSON aggregation\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/orm.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- ./queries/select_all_countries.sql\nSELECT country.code,\n    country.name,\n    country.continent,\n    country.region,\n    (\n        SELECT row_to_json(q)\n        FROM (\n                SELECT city.id,\n                    city.name,\n                    city.district,\n                    city.population\n            ) q\n    ) capital\nFROM country\n    JOIN city ON country.capital = city.id\nORDER BY country.name ASC\nLIMIT $limit OFFSET $offset;\n```\n\n----------------------------------------\n\nTITLE: Installing Tortoise-ORM Dependency\nDESCRIPTION: Install the Tortoise-ORM package using pip. This is the only dependency required for using Tortoise-ORM.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/orm.md#2025-04-20_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npip install -U tortoise-orm\n```\n\n----------------------------------------\n\nTITLE: Specifying Static Resource Type in Sanic\nDESCRIPTION: Demonstrates how to explicitly specify the resource type (file or directory) when defining a static endpoint in Sanic.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.9.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nstatic(\"/\", \"/path/to/some/file\", resource_type=\"file\")\n```\n\n----------------------------------------\n\nTITLE: Expected Output from Sanic Endpoint\nDESCRIPTION: The expected response when accessing the Sanic application's root endpoint.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/deployment/docker.md#2025-04-20_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nOK!\n```\n\n----------------------------------------\n\nTITLE: Using Sanic's App Inspector from Command Line\nDESCRIPTION: This snippet shows how to use Sanic's App Inspector to check on live, running applications and issue commands like scaling workers.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/index.md#2025-04-20_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nsanic inspect      \n\n┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐\n│                                                        Sanic                                                        │\n│                                          Inspecting @ http://localhost:6457                                         │\n├───────────────────────┬─────────────────────────────────────────────────────────────────────────────────────────────┤\n│                       │     mode: production, single worker                                                         │\n│     ▄███ █████ ██     │   server: unknown                                                                           │\n│    ██                 │   python: 3.10.9                                                                            │\n│     ▀███████ ███▄     │ platform: SomeOS-9.8.7\n│                 ██    │ packages: sanic==22.12.0, sanic-routing==22.8.0, sanic-testing==22.12.0, sanic-ext==22.12.0 │\n│    ████ ████████▀     │                                                                                             │\n│                       │                                                                                             │\n│ Build Fast. Run Fast. │                                                                                             │\n└───────────────────────┴─────────────────────────────────────────────────────────────────────────────────────────────┘\n\nSanic-Main\n    pid: 999996\n\nSanic-Server-0-0\n    server: True\n    state: ACKED\n    pid: 999997\n    start_at: 2023-01-31T12:34:56.00000+00:00\n    starts: 1\n\nSanic-Inspector-0\n    server: False\n    state: STARTED\n    pid: 999998\n    start_at: 2023-01-31T12:34:56.00000+00:00\n    starts: 1\n```\n\nLANGUAGE: sh\nCODE:\n```\nsanic inspect scale 4\n```\n\nLANGUAGE: sh\nCODE:\n```\nsanic inspect migrations\n```\n\n----------------------------------------\n\nTITLE: Disabling REPL in Sanic Development Mode\nDESCRIPTION: Command to start Sanic in development mode without the REPL, useful when you want debug mode and auto-reload but not the interactive shell.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/development.md#2025-04-20_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to:app --dev --no-repl\n```\n\n----------------------------------------\n\nTITLE: Custom Serializer Response Example\nDESCRIPTION: Shows the curl command and JSON response format when using the custom serializer implementation.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/convenience.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:8000/eat_cookies -X POST\n{\n  \"request_id\": \"ef81c45b-235c-46dd-9dbd-b550f8fa77f9\",\n  \"action\": \"eat_cookies\",\n  \"message\": \"This is a message\"\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Body Decorator Examples\nDESCRIPTION: Various ways to use the @openapi.body decorator to specify request body schemas\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/openapi/decorators.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@openapi.body(UserProfile)\n\n@openapi.body({\"application/json\": UserProfile})\n\n@openapi.body(RequestBody({\"application/json\": UserProfile}))\n\n@openapi.body({\"content\": UserProfile})\n\n@openapi.body(RequestBody(UserProfile))\n\n@openapi.body({\"application/json\": {\"description\": ...}})\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with Both HTTP/3 and HTTP/1.1 from Command Line\nDESCRIPTION: These snippets demonstrate how to start a Sanic server supporting both HTTP/3 and HTTP/1.1 from the command line.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app --http=3 --http=1\n```\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to.server:app -3 -1\n```\n\n----------------------------------------\n\nTITLE: Sanic's Default Logging Configuration Object\nDESCRIPTION: The default logging configuration dictionary used by Sanic. This configuration defines the loggers, handlers, and formatters that Sanic uses for logging when no custom configuration is provided.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/logging.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{\n    'version': 1,\n    'disable_existing_loggers': False,\n    'loggers': {\n        'sanic.root': {'level': 'INFO', 'handlers': ['console']},\n        'sanic.error': {\n            'level': 'INFO',\n            'handlers': ['error_console'],\n            'propagate': True,\n            'qualname': 'sanic.error'\n        },\n        'sanic.access': {\n            'level': 'INFO',\n            'handlers': ['access_console'],\n            'propagate': True,\n            'qualname': 'sanic.access'\n        },\n        'sanic.server': {\n            'level': 'INFO',\n            'handlers': ['console'],\n            'propagate': True,\n            'qualname': 'sanic.server'\n        },\n        'sanic.websockets': {\n            'level': 'INFO',\n            'handlers': ['console'],\n            'propagate': True,\n            'qualname': 'sanic.websockets'\n        }\n    },\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n            'formatter': 'generic',\n            'stream': sys.stdout\n        },\n        'error_console': {\n            'class': 'logging.StreamHandler',\n            'formatter': 'generic',\n            'stream': sys.stderr\n        },\n        'access_console': {\n            'class': 'logging.StreamHandler',\n            'formatter': 'access',\n            'stream': sys.stdout\n        }\n    },\n    'formatters': {\n        'generic': {'class': 'sanic.logging.formatter.AutoFormatter'},\n        'access': {'class': 'sanic.logging.formatter.AutoAccessFormatter'}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AsyncioServer Methods\nDESCRIPTION: New server methods added in version 20.3.0 for controlling server lifecycle\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/changelog.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsrv.start_serving()\nsrv.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand for Sanic Automatic Reloader\nDESCRIPTION: A more concise command to enable the automatic reloader using the shorthand flag -r. This provides the same functionality as the --reload flag.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/development.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsanic path.to:app -r\n```\n\n----------------------------------------\n\nTITLE: Running the Sanic Container\nDESCRIPTION: Shell command to run the Sanic application in a Docker container, mapping port 8000 from the container to the host and running it in detached mode.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/deployment/docker.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name mysanic -p 8000:8000 -d my-sanic-image\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Support in Sanic\nDESCRIPTION: This snippet shows how to implement a WebSocket endpoint in Sanic using the websockets package, allowing for bidirectional communication.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/index.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Request, Websocket\n\n@app.websocket(\"/feed\")\nasync def feed(request: Request, ws: Websocket):\n    async for msg in ws:\n        await ws.send(msg)\n```\n\n----------------------------------------\n\nTITLE: Bad Queue Implementation Example\nDESCRIPTION: Demonstrates an incorrect way of implementing a multiprocessing Queue in the global scope.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom multiprocessing import Queue\n\nq = Queue()\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config and Context Objects in Sanic 21.6\nDESCRIPTION: Shows how to pass custom configuration and context objects to Sanic applications. The custom config should be a subclass of 'sanic.config.Config', while the context object can be any user-defined class.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.6.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass CustomConfig(Config):\n    ...\n\nconfig = CustomConfig()\napp = Sanic(\"custom\", config=config)\nassert isinstance(app.config, CustomConfig)\n\nclass CustomContext:\n    ...\n\nctx = CustomContext()\napp = Sanic(\"custom\", ctx=ctx)\nassert isinstance(app.ctx, CustomContext)\n```\n\n----------------------------------------\n\nTITLE: Accessing Secure Sanic Inspector\nDESCRIPTION: Demonstrates how to access the Inspector when TLS is enabled, using both CLI and HTTP.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/inspector.md#2025-04-20_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsanic inspect --secure --host=<somewhere>\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl https://<somewhere>:6457\n```\n\n----------------------------------------\n\nTITLE: SSL Certificate Generation with Certbot\nDESCRIPTION: Command to obtain SSL certificates using Certbot for domain verification and HTTPS support.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/deployment/nginx.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncertbot -d example.com -d www.example.com\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Hello World Page\nDESCRIPTION: CSS stylesheet that styles the 'Hello world!' text with a centered, shadowed container and sets a background image. It references an image file from the static file directory.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/static-redirects.md#2025-04-20_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n#hello_world {\n    width: 1000px;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 100px;\n\n    padding: 100px;\n    color: aqua;\n    text-align: center;\n    font-size: 100px;\n    font-family: monospace;\n\n    background-color: rgba(0, 0, 0, 0.75);\n\n    border-radius: 10px;\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.75);\n}\n\nbody {\n    background-image: url(\"/files/grottoes.jpg\");\n    background-repeat: no-repeat;\n    background-size: cover;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Request Match Info in Sanic Middleware\nDESCRIPTION: Example of altering the 'match_info' attribute of a Sanic request object in middleware to convert parameters to snake case.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.3.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.on_request\ndef convert_to_snake_case(request):\n    request.match_info = to_snake(request.match_info)\n```\n\n----------------------------------------\n\nTITLE: Testing Connection Context with cURL\nDESCRIPTION: Bash command to test the connection context example using cURL, demonstrating how the context is maintained across multiple requests.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.3.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:8000 localhost:8000 localhost:8000\nrequest.conn_info.ctx.foo=1\nrequest.conn_info.ctx.foo=2\nrequest.conn_info.ctx.foo=3\n```\n\n----------------------------------------\n\nTITLE: Setting Fork Start Method Explicitly\nDESCRIPTION: Demonstrates explicitly setting the fork start method in Sanic to prevent it from using spawn.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/manager.md#2025-04-20_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\n\nSanic.start_method = \"fork\"\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Sanic Proxy\nDESCRIPTION: Nginx configuration file that sets up a reverse proxy to the Sanic application. It forwards requests from port 80 to the Sanic container on port 8000.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/deployment/docker.md#2025-04-20_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80;\n    listen [::]:80;\n    location / {\n      proxy_pass http://mysanic:8000/;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection upgrade;\n      proxy_set_header Accept-Encoding gzip;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Docker and Sanic Server\nDESCRIPTION: Commands to start the Docker container with Nginx and run the Sanic application on port 9999.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/mounting.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d\n$ sanic server.app --port=9999 --host=0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Tox\nDESCRIPTION: Command to run all tests using tox test runner\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/organization/contributing.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ntox\n```\n\n----------------------------------------\n\nTITLE: Installing Jinja Dependencies\nDESCRIPTION: Command to install Jinja2 package as a requirement for Sanic templating\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/templating/jinja.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install Jinja2\n```\n\n----------------------------------------\n\nTITLE: Exception Response Format Examples\nDESCRIPTION: JSON response formats for exceptions in both production and development environments.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.12.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"I'm a teapot\",\n  \"status\": 418,\n  \"message\": \"Sorry Adam, I cannot make you coffee\",\n  \"context\": {\n    \"foo\": \"bar\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"I'm a teapot\",\n  \"status\": 418,\n  \"message\": \"Sorry Adam, I cannot make you coffee\",\n  \"context\": {\n    \"foo\": \"bar\"\n  },\n  \"extra\": {\n    \"name\": \"Adam\",\n    \"more\": \"lines\",\n    \"complex\": {\n      \"one\": \"two\"\n    }\n  },\n  \"path\": \"/\",\n  \"args\": {},\n  \"exceptions\": [\n    {\n      \"type\": \"TeapotError\",\n      \"exception\": \"Sorry Adam, I cannot make you coffee\",\n      \"frames\": [\n        {\n          \"file\": \"handle_request\",\n          \"line\": 83,\n          \"name\": \"handle_request\",\n          \"src\": \"\"\n        },\n        {\n          \"file\": \"/tmp/p.py\",\n          \"line\": 17,\n          \"name\": \"handler\",\n          \"src\": \"raise TeapotError(\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sanic Error Reporting Handler\nDESCRIPTION: Defines an error reporting handler using Sanic's signal system to catch and log exceptions.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n@app.report_exception\nasync def catch_any_exception(app: Sanic, exception: Exception):\nprint(\"Caught exception:\", exception)\n```\n\n----------------------------------------\n\nTITLE: Unquoting Non-ASCII Characters in Sanic Routes\nDESCRIPTION: Example of using the 'unquote' parameter in Sanic route definitions to handle non-ASCII characters in URL parameters.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.3.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/overload/<param>\", methods=[\"GET\"], unquote=True)\nasync def handler2(request, param):\n    return text(\"OK2 \" + param)\n\nrequest, response = app.test_client.get(\"/overload/您好\")\nassert response.text == \"OK2 您好\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Fallback Error Format in Sanic\nDESCRIPTION: Sets the fallback error format to 'auto' in Sanic configuration, allowing Sanic to guess which fallback option to use.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_23\n\nLANGUAGE: python\nCODE:\n```\napp.config.FALLBACK_ERROR_FORMAT = \"auto\"\n```\n\n----------------------------------------\n\nTITLE: Testing Proxy Configuration with cURL (Bash)\nDESCRIPTION: Example of using cURL to test various proxy header configurations against a Sanic server.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/advanced/proxy-headers.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:8000/fwd \\\n\t-H 'Forwarded: for=1.1.1.1, for=injected;host=\", for=\"[::2]\";proto=https;host=me.tld;path=\"/app/\";secret=mySecret,for=broken;;secret=b0rked, for=127.0.0.3;scheme=http;port=1234' \\\n\t-H \"X-Real-IP: 127.0.0.2\" \\\n\t-H \"X-Forwarded-For: 127.0.1.1\" \\\n\t-H \"X-Scheme: ws\" \\\n\t-H \"Host: local.site\" | jq\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Attaching Blueprint in Sanic Application\nDESCRIPTION: This snippet shows a common mistake where a blueprint is attached inside the __main__ block, which will not work correctly in worker processes.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom my.other.module import bp\n\napp = Sanic(\"MyApp\")\n\nif __name__ == \"__main__\":\n    app.blueprint(bp)\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Testing the Mounted Application\nDESCRIPTION: Command to test the mounted application by making a curl request to the API endpoint.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/how-to/mounting.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost/api/foo\nURL: http://example.com/api/foo\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot Exclusion Rules\nDESCRIPTION: Standard robots.txt configuration that instructs all web crawlers (*) to not crawl any paths (/) on the site. This is a restrictive configuration that blocks all automated access.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/examples/static/robots.txt#2025-04-20_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow: /\n```\n\n----------------------------------------\n\nTITLE: Running Lint Checks\nDESCRIPTION: Command to run linting checks including flake8, black and isort\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/organization/contributing.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ntox -e lint\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in Sanic\nDESCRIPTION: Enables debug mode in Sanic configuration, which provides more detailed error information in responses.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_19\n\nLANGUAGE: python\nCODE:\n```\napp.config.DEBUG = True\n```\n\n----------------------------------------\n\nTITLE: Configuring uvloop Usage in Sanic\nDESCRIPTION: Example of disabling uvloop through configuration.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.12.md#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\napp.config.USE_UVLOOP = False\n```\n\n----------------------------------------\n\nTITLE: Incorrect Generic Type Dependency Implementation\nDESCRIPTION: Shows an incorrect implementation of generic type dependency injection where the type definition mismatch causes injection to fail.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/injection.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport typing\nfrom sanic import Sanic, text\n\nT = typing.TypeVar(\"T\")\n\nclass Test(typing.Generic[T]):\n    test: T\n\napp = Sanic(\"testapp\")\napp.ext.dependency(Test())\n\n@app.get(\"/\")\ndef test(request, test: Test[str]):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Legacy Sanic Application with Manual Extensions\nDESCRIPTION: Deprecated setup pattern (v21.9) for Sanic application with explicit extension initialization using the Extend class.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/getting-started.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\nfrom sanic.response import text\nfrom sanic_ext import Extend\n\napp = Sanic(\"MyHelloWorldApp\")\nExtend(app)\n\n@app.get(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n```\n\n----------------------------------------\n\nTITLE: Request Counter Setup\nDESCRIPTION: Shows how to initialize a Sanic application with the CountedRequest class to enable request counting functionality.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/convenience.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic_ext import CountedRequest\n\napp = Sanic(..., request_class=CountedRequest)\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with Trio Support\nDESCRIPTION: This snippet shows how to run a Sanic application with experimental Trio support using Hypercorn.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nhypercorn -k trio myapp:app\n```\n\n----------------------------------------\n\nTITLE: Curl Command for Debugging Sanic Errors\nDESCRIPTION: Demonstrates a curl command to test error responses from a Sanic server in debug mode, showing detailed error information including stack traces.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\ncurl localhost:8000/exc -i\nHTTP/1.1 500 Internal Server Error\ncontent-length: 572\nconnection: keep-alive\ncontent-type: application/jso\n\n{\n  \"description\": \"Internal Server Error\",\n  \"status\": 500,\n  \"message\": \"That time when that thing broke that other thing? That happened.\",\n  \"path\": \"/exc\",\n  \"args\": {},\n  \"exceptions\": [\n    {\n      \"type\": \"ServerError\",\n      \"exception\": \"That time when that thing broke that other thing? That happened.\",\n      \"frames\": [\n        {\n          \"file\": \"/path/to/sanic/app.py\",\n          \"line\": 979,\n          \"name\": \"handle_request\",\n          \"src\": \"response = await response\"\n        },\n        {\n          \"file\": \"/path/to/server.py\",\n          \"line\": 16,\n          \"name\": \"handler\",\n          \"src\": \"do_something(cause_error=True)\"\n        },\n        {\n          \"file\": \"/path/to/something.py\",\n          \"line\": 9,\n          \"name\": \"do_something\",\n          \"src\": \"raise ServerError(\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Usage Example of Decorator without Arguments\nDESCRIPTION: Example showing how to apply a Sanic decorator that doesn't require arguments to a route handler.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/decorators.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\n@foobar\nasync def handler(request: Request):\n    return text(\"hi\")\n```\n\n----------------------------------------\n\nTITLE: Formatting Code Before Commit\nDESCRIPTION: Command to automatically format code according to project standards\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/organization/contributing.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake pretty\n```\n\n----------------------------------------\n\nTITLE: Disabling Debug Mode in Sanic\nDESCRIPTION: Disables debug mode in Sanic configuration, which provides less detailed error information in responses for production use.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_21\n\nLANGUAGE: python\nCODE:\n```\napp.config.DEBUG = False\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Checks\nDESCRIPTION: Command to verify documentation integrity\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/organization/contributing.md#2025-04-20_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ntox -e docs\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: Specifies required Python packages and their minimum version constraints. Includes Sanic framework, extensions, and utilities for processing documentation and markup.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsanic>=23.12\nsanic-ext>=23.12\nmsgspec\npython-frontmatter\npygments\ndocstring-parser\nlibsass\nmistune\n```\n\n----------------------------------------\n\nTITLE: Regex Pattern Matching in Sanic Routes\nDESCRIPTION: Demonstrates various regex pattern matching techniques for Sanic routes, including capturing numeric portions and using named matching groups.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/routing.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\napp.route(r\"/image/<img_id:(?P<img_id>\\d+)\\.jpg>\")\n```\n\n----------------------------------------\n\nTITLE: Running Sanic with Gunicorn and Uvicorn Worker\nDESCRIPTION: This command demonstrates how to run a Sanic application using Gunicorn with the Uvicorn worker. It binds the application to all interfaces on port 1337.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/running.md#2025-04-20_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\ngunicorn myapp:app --bind 0.0.0.0:1337 --worker-class uvicorn.workers.UvicornWorker\n```\n\n----------------------------------------\n\nTITLE: Running Specific Python Version Tests\nDESCRIPTION: Commands to run unit tests for specific Python versions using tox\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/organization/contributing.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ntox -e py37 -v -- tests/test_config.py\n# or\ntox -e py310 -v -- tests/test_config.py\n```\n\n----------------------------------------\n\nTITLE: Curl Command for Production Sanic Errors\nDESCRIPTION: Demonstrates a curl command to test error responses from a Sanic server in production mode, showing minimal error information.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\ncurl localhost:8000/exc -i\nHTTP/1.1 500 Internal Server Error\ncontent-length: 129\nconnection: keep-alive\ncontent-type: application/json\n\n{\n  \"description\": \"Internal Server Error\",\n  \"status\": 500,\n  \"message\": \"That time when that thing broke that other thing? That happened.\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deprecated Streaming Response Implementation\nDESCRIPTION: Shows the old, deprecated method of implementing streaming responses in Sanic that will be removed in v22.6.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.12.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def sample_streaming_fn(response):\n    await response.write(\"foo,\")\n    await response.write(\"bar\")\n\n@app.route(\"/\")\nasync def test(request: Request):\n    return stream(sample_streaming_fn, content_type=\"text/csv\")\n```\n\n----------------------------------------\n\nTITLE: Installing Sanic Testing via pip\nDESCRIPTION: Command to install Sanic Testing from PyPI using pip. This is the recommended method for adding Sanic Testing to your project environment.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-testing/getting-started.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install sanic-testing\n```\n\n----------------------------------------\n\nTITLE: Running Additional Checks\nDESCRIPTION: Command to run miscellaneous code checks\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/organization/contributing.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ntox -e check\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Sanic API Reference in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for the Sanic API reference documentation using reStructuredText syntax. It sets up a tree structure with a maximum depth of 2 and includes links to various API sections.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/docs/sanic/api_reference.rst#2025-04-20_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   api/app\n   api/blueprints\n   api/core\n   api/exceptions\n   api/router\n   api/server\n   api/utility\n```\n\n----------------------------------------\n\nTITLE: Initializing Sanic Application for OpenAPI Documentation\nDESCRIPTION: This snippet demonstrates the basic setup required to enable automatic OpenAPI documentation generation in a Sanic application. No additional configuration is needed beyond creating the Sanic app instance.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/openapi/basics.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic\n\napp = Sanic(\"MyApp\")\n\n# Add all of your views\n```\n\n----------------------------------------\n\nTITLE: URL Reference to Sanic Contribution Guidelines\nDESCRIPTION: A simple markdown link pointing to the official Sanic project contribution guidelines on the documentation website.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributing\n\nSee https://sanic.dev/en/organization/contributing.html\n```\n\n----------------------------------------\n\nTITLE: Defining Sanic Version Number Format\nDESCRIPTION: Specifies Sanic's calendar versioning pattern using YY.MM.MICRO format, where YY represents the year, MM represents the month, and MICRO indicates incremental patch versions starting at 0.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/organization/policies.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nYY.MM.MICRO\n```\n\n----------------------------------------\n\nTITLE: Running Security Analysis\nDESCRIPTION: Command to perform static security analysis\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/organization/contributing.md#2025-04-20_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ntox -e security\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for Sanic Error Pages Module\nDESCRIPTION: ReStructuredText directive that automatically generates documentation for the sanic.errorpages module. It includes all members and shows inheritance relationships.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/docs/sanic/api/exceptions.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: sanic.errorpages\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Deprecated Dict-style Cookie Setting in Sanic\nDESCRIPTION: Example of the deprecated dict-style approach for setting cookie properties. This pattern will be removed in Sanic v24.3.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.3.md#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nresp = HTTPResponse()\nresp.cookies[\"foo\"] = \"bar\"\nresp.cookies[\"foo\"][\"httponly\"] = True\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Services\nDESCRIPTION: Shell command to start both the Sanic and Nginx containers using docker-compose in detached mode.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/deployment/docker.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Objects to Sanic REPL Context\nDESCRIPTION: Demonstrates how to add custom objects and functions to the Sanic REPL context using direct assignment. This allows developers to extend the REPL with their own objects that will be available during development sessions.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2025/v25.3.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\ndef foo():\n    \"\"\"This docstring will show in the REPL\"\"\"\n    \napp.repl_ctx.foo = foo\napp.repl_ctx.os = os\n```\n\n----------------------------------------\n\nTITLE: Incorrect Route Naming with Duplicate Routes in Sanic\nDESCRIPTION: Example of the deprecated approach using duplicate route names. This pattern will raise a ServerError as duplicate route names are no longer allowed in Sanic v23.3.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2023/v23.3.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\napp = Sanic(\"SomeApp\")\n\n@app.get(\"/\")\n@app.get(\"/foo\")\nasync def handler(request: Request):\n```\n\n----------------------------------------\n\nTITLE: Basic CORS Implementation in Sanic\nDESCRIPTION: Demonstrates the basic setup of CORS protection in a Sanic application using Sanic Extensions. Shows how to configure allowed origins and create a simple endpoint.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/http/cors.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import Sanic, text\nfrom sanic_ext import Extend\n\napp = Sanic(__name__)\napp.config.CORS_ORIGINS = \"http://foobar.com,http://bar.com\"\nExtend(app)\n\n@app.get(\"/\")\nasync def hello_world(request):\n    return text(\"Hello, world.\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Exceptions with Default Message\nDESCRIPTION: Shows how to create a custom exception class that inherits from SanicException with a default message. It also demonstrates how to override the default message when raising the exception.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/best-practices/exceptions.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass CustomError(SanicException):\n    message = \"Something bad happened\"\n\nraise CustomError\n# or\nraise CustomError(\"Override the default message with something else\")\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Definition Decorator Example\nDESCRIPTION: Example of using the comprehensive @openapi.definition decorator to define multiple aspects of an API endpoint\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/plugins/sanic-ext/openapi/decorators.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@openapi.definition(\n    body=RequestBody(UserProfile, required=True),\n    summary=\"User profile update\",\n    tag=\"one\",\n    response=[Success, Response(Failure, status=400)],\n)\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Disconnection in Python\nDESCRIPTION: Demonstrates how to catch a CancelledError when a user closes a WebSocket connection in a Sanic WebSocket handler.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2021/v21.9.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.websocket(\"/\")\nasync def handler(request, ws):\n    try:\n        while True:\n            await asyncio.sleep(0.25)\n    except asyncio.CancelledError:\n        print(\"User closed connection\")\n```\n\n----------------------------------------\n\nTITLE: Starting Sanic Server with HTTP/3 Support\nDESCRIPTION: Demonstrates various ways to start a Sanic server with HTTP/3 support, including command-line options and Python code.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/2022/v22.6.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sanic path.to.server:app --http=3\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ sanic path.to.server:app -3\n```\n\nLANGUAGE: python\nCODE:\n```\napp.run(version=3)\n```\n\n----------------------------------------\n\nTITLE: File Response Handler in Sanic\nDESCRIPTION: Demonstrates serving files with optional MIME type and filename customization.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/response.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import file\n\n@app.route(\"/\")\nasync def handler(request):\n    return await file(\"/path/to/whatever.png\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfile(\"/path/to/whatever.png\", mime_type=\"image/png\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfile(\"/path/to/whatever.png\", filename=\"super-awesome-incredible.png\")\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key Authentication for Sanic Inspector\nDESCRIPTION: Shows how to secure the Inspector API with bearer token authentication.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/running/inspector.md#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\napp.config.INSPECTOR_API_KEY = \"Super-Secret-200\"\n```\n\n----------------------------------------\n\nTITLE: Request Stream Reading Pattern\nDESCRIPTION: Updated pattern for reading from request streams using the new bounded-size buffer implementation\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/changelog.md#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nawait request.stream.read()\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Encoder in Sanic\nDESCRIPTION: Examples of using custom JSON encoders both per-response and globally.\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/guide/basics/response.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sanic import json\nfrom orjson import dumps\n\njson({\"foo\": \"bar\"}, dumps=dumps)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom orjson import dumps\n\napp = Sanic(..., dumps=dumps)\n```\n\n----------------------------------------\n\nTITLE: Cookie Max-Age Type Enforcement\nDESCRIPTION: Shows the enforced integer type requirement for cookie max-age values\nSOURCE: https://github.com/sanic-org/sanic/blob/main/guide/content/en/release-notes/changelog.md#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ncookie.max_age = 0  # Non-integer values are replaced with 0\n```"
  }
]