[
  {
    "owner": "tanstack",
    "repo": "tanstack.com",
    "content": "TITLE: Type-Safe Form Field Implementation\nDESCRIPTION: Demonstration of TanStack Form's type safety features in React, showing field validation and type checking for form fields.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/app/blog/announcing-tanstack-form-v1.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst form = useForm({\n\tdefaultValues: {\n        name: \"\",\n        age: 0\n    }\n});\n\n// TypeScript will correctly tell you that `firstName` is not a valid field\n<form.Field name=\"firstName\"/>\n\n// TypeScript will correctly tell you that `name`'s type is a `string`, not a `number`\n<form.Field name=\"name\" children={field => <NumberInput value={field.state.value}/>}/>\n```\n\n----------------------------------------\n\nTITLE: Schema Validation Using Zod\nDESCRIPTION: Implementation of schema validation using Zod with TanStack Form, showing integration with Standard Schema.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/app/blog/announcing-tanstack-form-v1.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst userSchema = z.object({\n  age: z.number().gte(13, 'You must be 13 to make an account'),\n})\n\nfunction App() {\n  const form = useForm({\n    defaultValues: {\n      age: 0,\n    },\n    validators: {\n      onChange: userSchema,\n    },\n  })\n  return (\n    <div>\n      <form.Field\n        name=\"age\"\n        children={(field) => {\n          return <>{/* ... */}</>\n        }}\n      />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Form Field Validation with Error Handling\nDESCRIPTION: Example of form field validation with error handling and type checking for error messages.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/app/blog/announcing-tanstack-form-v1.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<form.Field\n  name=\"age\"\n  validators={{\n    onChange: ({ value }) => (value < 12 ? { tooYoung: true } : undefined),\n  }}\n  children={(field) => (\n    <>\n      <NumberInput value={field.state.value} />\n      // TypeScript will correctly tell you that `errorMap.onChange` // is an object,\n      not a string\n      <p>{field.state.meta.errorMap.onChange}</p>\n    </>\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Convex Mutation Function in TypeScript\nDESCRIPTION: This code shows how to create a mutation function in Convex that modifies the database. It demonstrates argument validation, inserting data into the database, and returning the result.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Convex Query Function in TypeScript\nDESCRIPTION: This code demonstrates how to create a query function in Convex that takes number and string arguments. The function shows database querying capabilities and how to handle arguments passed from the client.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Async Form Validation\nDESCRIPTION: Example of async form validation with debouncing and AbortSignal-based cancellation support.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/app/blog/announcing-tanstack-form-v1.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<form.Field\n  name=\"age\"\n  asyncDebounceMs={500}\n  validators={{\n    onBlurAsync: async ({ value, signal }) => {\n      const currentAge = await fetchCurrentAgeOnProfile({ signal })\n      return value < currentAge ? 'You can only increase the age' : undefined\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Server-Side Form Validation Setup\nDESCRIPTION: Implementation of server-side form validation for SSR solutions like Next.js or TanStack Start.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/app/blog/announcing-tanstack-form-v1.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// app/routes/index.tsx, but can be extracted to any other path\nimport { createServerValidate, getFormData } from '@tanstack/react-form/start'\nimport { yourSchemaHere } from '~/constants/forms'\n\nconst serverValidate = createServerValidate({\n  ...formOpts,\n  onServerValidate: yourSchemaHere,\n})\n\nexport const getFormDataFromServer = createServerFn({ method: 'GET' }).handler(\n  async () => {\n    return getFormData()\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: This example demonstrates how to use a Convex mutation function in a React component using the useMutation hook. It shows both fire-and-forget usage and handling the returned result with a promise.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: This example shows how to use a Convex query function in a React component using the useQuery hook. It demonstrates passing arguments to the query function.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Optimized <Link> Usage for Better TypeScript Performance in TanStack Router\nDESCRIPTION: Improved examples of <Link> usage that provide better type safety and editor performance. These examples use the 'from' property to specify the current route, allowing TanStack Router to narrow types to specific routes.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/app/blog/tanstack-router-typescript-performance.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Link from=\"/dashboard\" search={{ page: 0 }} />\n<Link from=\"/dashboard\" to=\"..\" search={{page: 0}} />\n<Link from=\"/users\" to=\"/dashboard\" search={prev => ({...prev, page: 0 })} />\n```\n\n----------------------------------------\n\nTITLE: Optimized Route Tree Declaration for File-Based Routing\nDESCRIPTION: Demonstrates the improved approach using explicit interface declarations to define route tree children. This change helps avoid unnecessary inference of the entire route tree when only specific routes are needed.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/app/blog/tanstack-router-typescript-performance.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface RootRouteChildren {\n  IndexRoute: typeof IndexRoute\n  LayoutRoute: typeof LayoutRouteWithChildren\n  PostsRoute: typeof PostsRouteWithChildren\n}\n\nconst rootRouteChildren: RootRouteChildren = {\n  IndexRoute: IndexRoute,\n  LayoutRoute: LayoutRouteWithChildren,\n  PostsRoute: PostsRouteWithChildren,\n}\n\nexport const routeTree = rootRoute._addFileChildren(rootRouteChildren)\n```\n\n----------------------------------------\n\nTITLE: Optimized Hook Usage for Better TypeScript Performance in TanStack Router\nDESCRIPTION: Improved examples of using TanStack Router hooks with the 'from' property, providing better editor performance and type safety by specifying the current route.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/app/blog/tanstack-router-typescript-performance.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst search = useSearch({ from: '/dashboard' })\nconst params = useParams({ from: '/dashboard' })\nconst context = useRouteContext({ from: '/dashboard' })\nconst loaderData = useLoaderData({ from: '/dashboard' })\nconst match = useMatch({ from: '/dashboard' })\n```\n\n----------------------------------------\n\nTITLE: Configuring TanStack Start for Vercel Deployment\nDESCRIPTION: A simple configuration example showing how to set up TanStack Start to deploy to Vercel by specifying the 'vercel' preset in the server configuration. This eliminates the need for a separate Vercel adapter.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/app/blog/why-tanstack-start-is-ditching-adapters.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { defineConfig } from '@tanstack/start/config'\n\nexport default defineConfig({\n  server: {\n    preset: 'vercel',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Form Framework Packages\nDESCRIPTION: NPM installation commands for different framework versions of TanStack Form including React, Vue, Angular, Solid, and Lit.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/app/blog/announcing-tanstack-form-v1.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm i @tanstack/react-form\n# or\n$ npm i @tanstack/vue-form\n# or\n$ npm i @tanstack/angular-form\n# or\n$ npm i @tanstack/solid-form\n# or\n$ npm i @tanstack/lit-form\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Generated Route Type Definitions for File-Based Routing\nDESCRIPTION: Shows the complete set of interfaces generated during the route tree creation phase that provide explicit mappings between routes, paths, and IDs. This pre-generated approach bypasses the need for extensive inference at usage time.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/app/blog/tanstack-router-typescript-performance.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface FileRoutesByFullPath {\n  '/': typeof IndexRoute\n  '/posts': typeof PostsRouteWithChildren\n  '/posts/$postId': typeof PostsPostIdRoute\n  '/posts/': typeof PostsIndexRoute\n  '/layout-a': typeof LayoutLayout2LayoutARoute\n  '/layout-b': typeof LayoutLayout2LayoutBRoute\n}\n\nexport interface FileRoutesByTo {\n  '/': typeof IndexRoute\n  '/posts/$postId': typeof PostsPostIdRoute\n  '/posts': typeof PostsIndexRoute\n  '/layout-a': typeof LayoutLayout2LayoutARoute\n  '/layout-b': typeof LayoutLayout2LayoutBRoute\n}\n\nexport interface FileRoutesById {\n  __root__: typeof rootRoute\n  '/': typeof IndexRoute\n  '/_layout': typeof LayoutRouteWithChildren\n  '/posts': typeof PostsRouteWithChildren\n  '/_layout/_layout-2': typeof LayoutLayout2RouteWithChildren\n  '/posts/$postId': typeof PostsPostIdRoute\n  '/posts/': typeof PostsIndexRoute\n  '/_layout/_layout-2/layout-a': typeof LayoutLayout2LayoutARoute\n  '/_layout/_layout-2/layout-b': typeof LayoutLayout2LayoutBRoute\n}\n\nexport interface FileRouteTypes {\n  fileRoutesByFullPath: FileRoutesByFullPath\n  fullPaths:\n    | '/'\n    | '/posts'\n    | '/posts/$postId'\n    | '/posts/'\n    | '/layout-a'\n    | '/layout-b'\n  fileRoutesByTo: FileRoutesByTo\n  to: '/' | '/posts/$postId' | '/posts' | '/layout-a' | '/layout-b'\n  id:\n    | '__root__'\n    | '/'\n    | '/_layout'\n    | '/posts'\n    | '/_layout/_layout-2'\n    | '/posts/$postId'\n    | '/posts/'\n    | '/_layout/_layout-2/layout-a'\n    | '/_layout/_layout-2/layout-b'\n  fileRoutesById: FileRoutesById\n}\n\nexport interface RootRouteChildren {\n  IndexRoute: typeof IndexRoute\n  LayoutRoute: typeof LayoutRouteWithChildren\n  PostsRoute: typeof PostsRouteWithChildren\n}\n\nconst rootRouteChildren: RootRouteChildren = {\n  IndexRoute: IndexRoute,\n  LayoutRoute: LayoutRouteWithChildren,\n  PostsRoute: PostsRouteWithChildren,\n}\n\nexport const routeTree = rootRoute\n  ._addFileChildren(rootRouteChildren)\n  ._addFileTypes<FileRouteTypes>()\n```\n\n----------------------------------------\n\nTITLE: Creating a TanStack Start Project with AI Chatbot Template Using Netlify\nDESCRIPTION: Command to initialize a new TanStack Router application with the file-router template and tanchat add-on, which provides a full-stack AI chatbot starter template showcasing TanStack Start's data management capabilities alongside Netlify Functions.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/app/blog/netlify-partnership.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-tsrouter-app@latest <name> --template file-router --add-ons tanchat\n```\n\n----------------------------------------\n\nTITLE: Original Route Tree Definition with Inference in TanStack Router\nDESCRIPTION: Shows how route trees were previously created using inference with nested addChildren() calls, which caused performance issues in the TypeScript language service.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/app/blog/tanstack-router-typescript-performance.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const routeTree = rootRoute.addChildren({\n  IndexRoute,\n  LayoutRoute: LayoutRoute.addChildren({\n    LayoutLayout2Route: LayoutLayout2Route.addChildren({\n      LayoutLayout2LayoutARoute,\n      LayoutLayout2LayoutBRoute,\n    }),\n  }),\n  PostsRoute: PostsRoute.addChildren({ PostsPostIdRoute, PostsIndexRoute }),\n})\n```\n\n----------------------------------------\n\nTITLE: Route Mapping Type Using ParseRoute\nDESCRIPTION: Shows how the ParseRoute type was previously used to create mappings from route paths to route types. This approach required inferring the entire route tree.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/app/blog/tanstack-router-typescript-performance.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport type RoutesByPath<TRouteTree extends AnyRoute> = {\n  [K in ParseRoute<TRouteTree> as K['fullPath']]: K\n}\n```\n\n----------------------------------------\n\nTITLE: ParseRoute Type Causing Performance Issues\nDESCRIPTION: Shows the recursive TypeScript type that was causing performance bottlenecks by walking down the entire route tree to create unions of routes. This type was later optimized to be conditional based on the routing approach.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/app/blog/tanstack-router-typescript-performance.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport type ParseRoute<TRouteTree, TAcc = TRouteTree> = TRouteTree extends {\n  types: { children: infer TChildren }\n}\n  ? unknown extends TChildren\n    ? TAcc\n    : TChildren extends ReadonlyArray<any>\n    ? ParseRoute<TChildren[number], TAcc | TChildren[number]>\n    : ParseRoute<TChildren[keyof TChildren], TAcc | TChildren[keyof TChildren]>\n  : TAcc\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Query v4 Package\nDESCRIPTION: npm and yarn commands to install the new @tanstack/react-query package.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/app/blog/announcing-tanstack-query-v4.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @tanstack/react-query\n# or\nyarn add @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Development Environment\nDESCRIPTION: Commands to install dependencies and start the development server in the TanStack.com directory for local documentation editing.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack.com\npnpm i\n# The app will run on https://localhost:3000 by default\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Development Server\nDESCRIPTION: Basic commands to install dependencies and start the development server using pnpm package manager.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Using Hooks with Loose Type Inference in TanStack Router\nDESCRIPTION: Examples of using various TanStack Router hooks with 'strict: false' option, which results in looser type inference and potentially worse editor performance as the application scales.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/app/blog/tanstack-router-typescript-performance.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst search = useSearch({ strict: false })\nconst params = useParams({ strict: false })\nconst context = useRouteContext({ strict: false })\nconst loaderData = useLoaderData({ strict: false })\nconst match = useMatch({ strict: false })\n```\n\n----------------------------------------\n\nTITLE: Using <Link> Component with Loose Type Inference in TanStack Router\nDESCRIPTION: Examples of <Link> usage that require inference of the whole route tree, resulting in a less optimal editor experience. These methods use relative paths or don't specify the 'from' route, leading to looser type inference.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/app/blog/tanstack-router-typescript-performance.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Link to=\".\" search={{ page: 0 }} />\n<Link to=\"..\" search={{page: 0}} />\n<Link to=\"/dashboard\" search={prev => ({..prev, page: 0 })} />\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Trace for Performance Analysis\nDESCRIPTION: Command to generate a TypeScript trace file for analyzing performance issues. This helps identify bottlenecks in type-checking operations, particularly useful for diagnosing slow editor response when working with large route trees.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/app/blog/tanstack-router-typescript-performance.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntsc --generatetrace trace\n```\n\n----------------------------------------\n\nTITLE: Cloning TanStack Repositories\nDESCRIPTION: Commands to clone the TanStack.com website and form project repositories into the workspace directory.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack\ngit clone git@github.com:TanStack/tanstack.com.git\ngit clone git@github.com:TanStack/form.git\n```\n\n----------------------------------------\n\nTITLE: Creating TanStack Directory\nDESCRIPTION: Command to create a new directory for TanStack development workspace.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir tanstack\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: YAML frontmatter metadata for the blog post, including title, publication date and author information.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/app/blog/announcing-tanstack-query-v5.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Announcing TanStack Query v5\npublished: 10/17/2023\nauthors:\n  - Dominik Dorfmeister\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Google AdSense Publisher Verification\nDESCRIPTION: Configuration line that verifies the website's ownership with Google AdSense. Contains the publisher domain, ID, relationship type (DIRECT), and verification hash.\nSOURCE: https://github.com/tanstack/tanstack.com/blob/main/public/ads.txt#2025-04-21_snippet_0\n\nLANGUAGE: config\nCODE:\n```\ngoogle.com, pub-9403278435468733, DIRECT, f08c47fec0942fa0\n```"
  }
]