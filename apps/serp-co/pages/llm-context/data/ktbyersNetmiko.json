[
  {
    "owner": "ktbyers",
    "repo": "netmiko",
    "content": "TITLE: Executing Show Commands with Netmiko\nDESCRIPTION: Sends a show command to the connected device and prints the output. This example demonstrates the send_command method for executing simple show commands on the network device.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\noutput = net_connect.send_command('show ip int brief')\nprint(output)\n```\n\n----------------------------------------\n\nTITLE: Creating a Device Dictionary for Netmiko Connection\nDESCRIPTION: Creates a Python dictionary containing connection parameters for a Cisco device. The dictionary includes essential parameters like device type, host address, username, password, and optional parameters like port and enable secret.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom netmiko import ConnectHandler\n\ncisco_881 = {\n    'device_type': 'cisco_ios',\n    'host':   '10.10.10.10',\n    'username': 'test',\n    'password': 'password',\n    'port' : 8022,          # optional, defaults to 22\n    'secret': 'secret',     # optional, defaults to ''\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Netmiko Connection to a Cisco Device in Python\nDESCRIPTION: A simple example showing how to connect to a Cisco device using Netmiko, retrieve the prompt, and disconnect. This uses direct parameter passing to the ConnectHandler function.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom netmiko import ConnectHandler\nfrom getpass import getpass\n\nnet_connect = ConnectHandler(\n    device_type=\"cisco_ios\",\n    host=\"cisco1.lasthop.io\",\n    username=\"pyclass\",\n    password=getpass(),\n)\n\nprint(net_connect.find_prompt())\nnet_connect.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Executing Configuration Changes with Netmiko\nDESCRIPTION: Sends a list of configuration commands to the network device. The send_config_set method automatically enters configuration mode, executes the commands, and exits config mode when done.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nconfig_commands = [ 'logging buffered 20000',\n                    'logging buffered 20010',\n                    'no logging console' ]\noutput = net_connect.send_config_set(config_commands)\nprint(output)\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Network Device using a Dictionary in Netmiko\nDESCRIPTION: This example shows how to create a device connection dictionary and pass it to the ConnectHandler using the ** operator. This approach makes it easy to store device information in a structured format.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom netmiko import ConnectHandler\nfrom getpass import getpass\n\ncisco1 = {\n    \"device_type\": \"cisco_ios\",\n    \"host\": \"cisco1.lasthop.io\",\n    \"username\": \"pyclass\",\n    \"password\": getpass(),\n}\n\nnet_connect = ConnectHandler(**cisco1)\nprint(net_connect.find_prompt())\nnet_connect.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Using Secure Copy (SCP) with Netmiko in Python\nDESCRIPTION: This snippet shows how to use Netmiko's file_transfer function to securely copy files to or from a network device. It requires the device to have SCP server enabled and supports options for file overwriting.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom getpass import getpass\nfrom netmiko import ConnectHandler, file_transfer\n\ncisco = {\n    \"device_type\": \"cisco_ios\",\n    \"host\": \"cisco1.lasthop.io\",\n    \"username\": \"pyclass\",\n    \"password\": getpass(),\n}\n\n# A secure copy server must be enable on the device ('ip scp server enable')\nsource_file = \"test1.txt\"\ndest_file = \"test1.txt\"\ndirection = \"put\"\nfile_system = \"flash:\"\n\nssh_conn = ConnectHandler(**cisco)\ntransfer_dict = file_transfer(\n    ssh_conn,\n    source_file=source_file,\n    dest_file=dest_file,\n    file_system=file_system,\n    direction=direction,\n    # Force an overwrite of the file if it already exists\n    overwrite_file=True,\n)\n\nprint(transfer_dict)\n```\n\n----------------------------------------\n\nTITLE: Executing Show Commands with Netmiko in Python\nDESCRIPTION: This example shows how to execute a show command on a Cisco device using Netmiko's send_command method. It automatically cleans up the output to return only the command output.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom netmiko import ConnectHandler\nfrom getpass import getpass\n\ncisco1 = { \n    \"device_type\": \"cisco_ios\",\n    \"host\": \"cisco1.lasthop.io\",\n    \"username\": \"pyclass\",\n    \"password\": getpass(),\n}\n\n# Show command that we execute.\ncommand = \"show ip int brief\"\n\nwith ConnectHandler(**cisco1) as net_connect:\n    output = net_connect.send_command(command)\n\n# Automatically cleans-up the output so that only the show output is returned\nprint()\nprint(output)\nprint()\n```\n\n----------------------------------------\n\nTITLE: Configuration Changes with Netmiko\nDESCRIPTION: Demonstrates how to make configuration changes on a Cisco device using Netmiko. Shows both single command configuration and saving the running configuration.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\nfrom netmiko import ConnectHandler\nfrom getpass import getpass\n\ndevice = {\n    \"device_type\": \"cisco_ios\",\n    \"host\": \"cisco1.lasthop.io\",\n    \"username\": \"pyclass\",\n    \"password\": getpass(),\n}\n\ncommands = [\"logging buffered 100000\"]\nwith ConnectHandler(**device) as net_connect:\n    output = net_connect.send_config_set(commands)\n    output += net_connect.save_config()\n\nprint()\nprint(output)\nprint()\n```\n\n----------------------------------------\n\nTITLE: SSH Key Authentication with Netmiko\nDESCRIPTION: Shows how to use SSH key-based authentication with Netmiko instead of password authentication. Demonstrates setting up the connection using an SSH key file.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom netmiko import ConnectHandler\n\nkey_file = \"~/.ssh/test_rsa\"\ncisco1 = {\n    \"device_type\": \"cisco_ios\",\n    \"host\": \"cisco1.lasthop.io\",\n    \"username\": \"testuser\",\n    \"use_keys\": True,\n    \"key_file\": key_file,\n}\n\nwith ConnectHandler(**cisco1) as net_connect:\n    output = net_connect.send_command(\"show ip arp\")\n\nprint(f\"\\n{output}\\n\")\n```\n\n----------------------------------------\n\nTITLE: Establishing an SSH Connection with Netmiko\nDESCRIPTION: Establishes an SSH connection to a network device by passing the device dictionary to the ConnectHandler function. This creates a connection object that can be used for subsequent operations.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nnet_connect = ConnectHandler(**cisco_881)\n```\n\n----------------------------------------\n\nTITLE: Adjusting delay_factor for Long-Running Commands in Netmiko\nDESCRIPTION: This example demonstrates how to use the delay_factor parameter to increase the timeout for long-running commands. It shows a file copy operation with interactive prompts handled via send_command_timing.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom netmiko import ConnectHandler\nfrom getpass import getpass\nfrom datetime import datetime\n\ncisco1 = {\n    \"device_type\": \"cisco_ios\",\n    \"host\": \"cisco1.lasthop.io\",\n    \"username\": \"pyclass\",\n    \"password\": getpass(),\n}\n\ncommand = \"copy flash:c880data-universalk9-mz.155-3.M8.bin flash:test1.bin\"\n\n# Start clock\nstart_time = datetime.now()\n\nnet_connect = ConnectHandler(**cisco1)\n\n# Netmiko normally allows 100 seconds for send_command to complete\n# delay_factor=4 would allow 400 seconds.\noutput = net_connect.send_command_timing(\n    command, strip_prompt=False, strip_command=False, delay_factor=4\n)\n# Router prompted in this example:\n# -------\n# cisco1#copy flash:c880data-universalk9-mz.155-3.M8.bin flash:test1.bin\n# Destination filename [test1.bin]? \n# Copy in progress...CCCCCCC\n# -------\nif \"Destination filename\" in output:\n    print(\"Starting copy...\")\n    output += net_connect.send_command(\"\\n\", delay_factor=4, expect_string=r\"#\")\nnet_connect.disconnect()\n\nend_time = datetime.now()\nprint(f\"\\n{output}\\n\")\nprint(\"done\")\nprint(f\"Execution time: {start_time - end_time}\")\n```\n\n----------------------------------------\n\nTITLE: Handling Interactive Prompts in Netmiko Using send_command_timing()\nDESCRIPTION: Demonstrates how to handle show commands that prompt for additional information by using the send_command_timing() method instead of looking for prompts. This example shows copying a configuration file with a confirmation prompt.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/COMMON_ISSUES.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncmd1 = \"copy running-config flash:test1.txt\"\noutput = net_connect.send_command_timing(cmd1)\nif 'Destination filename' in output:\n    output += net_connect.send_command_timing(\"\\n\")\nprint(output)\n```\n\n----------------------------------------\n\nTITLE: Auto-detecting Network Device Types using SNMPv3 in Netmiko\nDESCRIPTION: This snippet shows how to use Netmiko's SNMPDetect class with SNMPv3 to automatically determine the device type. It requires the 'pysnmp' library and uses more secure user-based authentication with encryption for SNMP queries.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom getpass import getpass\nfrom netmiko.snmp_autodetect import SNMPDetect\nfrom netmiko import ConnectHandler\n\ndevice = {\"host\": \"cisco1.lasthop.io\", \"username\": \"pyclass\", \"password\": getpass()}\n\nsnmp_key = getpass(\"Enter SNMP community: \")\nmy_snmp = SNMPDetect(\n    \"cisco1.lasthop.io\",\n    snmp_version=\"v3\",\n    user=\"pysnmp\",\n    auth_key=snmp_key,\n    encrypt_key=snmp_key,\n    auth_proto=\"sha\",\n    encrypt_proto=\"aes128\",\n)\ndevice_type = my_snmp.autodetect()\nprint(device_type)\n\nif device_type is None:\n    sys.exit(\"SNMP failed!\")\n\n# Update the device_type with information discovered using SNMP\ndevice[\"device_type\"] = device_type\nnet_connect = ConnectHandler(**device)\nprint(net_connect.find_prompt())\nnet_connect.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Auto-detecting Network Device Types using SSH in Netmiko\nDESCRIPTION: This snippet demonstrates how to use Netmiko's SSHDetect class to automatically determine the device type of a network device. It creates a connection with device_type 'autodetect' and then updates the device dictionary with the detected device type.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom netmiko import SSHDetect, ConnectHandler\nfrom getpass import getpass\n\ndevice = {\n    \"device_type\": \"autodetect\",\n    \"host\": \"cisco1.lasthop.io\",\n    \"username\": \"pyclass\",\n    \"password\": getpass(),\n}\n\nguesser = SSHDetect(**device)\nbest_match = guesser.autodetect()\nprint(best_match)  # Name of the best device_type to use further\nprint(guesser.potential_matches)  # Dictionary of the whole matching result\n# Update the 'device' dictionary with the device_type\ndevice[\"device_type\"] = best_match\n\nwith ConnectHandler(**device) as connection:\n    print(connection.find_prompt())\n```\n\n----------------------------------------\n\nTITLE: Parsing Network Data with Genie in Python\nDESCRIPTION: Uses Netmiko with Genie parser to retrieve and structure interface data from a Cisco device. Demonstrates how to connect to a device and parse 'show ip interface brief' command output into structured data.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom getpass import getpass\nfrom pprint import pprint\nfrom netmiko import ConnectHandler\n\ndevice = {\n    \"device_type\": \"cisco_ios\",\n    \"host\": \"cisco1.lasthop.io\",\n    \"username\": \"pyclass\",\n    \"password\": getpass()\n}\n\nwith ConnectHandler(**device) as net_connect:\n    output = net_connect.send_command(\"show ip interface brief\", use_genie=True)\n\nprint()\npprint(output)\nprint()\n```\n\n----------------------------------------\n\nTITLE: Auto-detecting Network Device Types using SNMPv2c in Netmiko\nDESCRIPTION: This snippet demonstrates how to use Netmiko's SNMPDetect class with SNMPv2c to automatically determine the device type. It requires the 'pysnmp' library and uses community-based authentication for SNMP queries.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom getpass import getpass\nfrom netmiko.snmp_autodetect import SNMPDetect\nfrom netmiko import ConnectHandler\n\nhost = \"cisco1.lasthop.io\"\ndevice = {\n    \"host\": host,\n    \"username\": \"pyclass\", \n    \"password\": getpass()\n}\n\nsnmp_community = getpass(\"Enter SNMP community: \")\nmy_snmp = SNMPDetect(\n    host, snmp_version=\"v2c\", community=snmp_community\n)\ndevice_type = my_snmp.autodetect()\nprint(device_type)\n\nif device_type is None:\n    sys.exit(\"SNMP failed!\")\n\n# Update the device dictionary with the device_type and connect\ndevice[\"device_type\"] = device_type\nwith ConnectHandler(**device) as net_connect:\n    print(net_connect.find_prompt())\n```\n\n----------------------------------------\n\nTITLE: Using TextFSM with Netmiko for Structured Data Parsing\nDESCRIPTION: This example demonstrates how to use TextFSM with Netmiko to convert command output into structured data. It sets use_textfsm=True when sending a command to return a list of dictionaries instead of raw text.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom netmiko import ConnectHandler\nfrom getpass import getpass\nfrom pprint import pprint\n\ncisco1 = {\n    \"device_type\": \"cisco_ios\",\n    \"host\": \"cisco1.lasthop.io\",\n    \"username\": \"pyclass\",\n    \"password\": getpass(),\n}\n\ncommand = \"show ip int brief\"\nwith ConnectHandler(**cisco1) as net_connect:\n    # Use TextFSM to retrieve structured data\n    output = net_connect.send_command(command, use_textfsm=True)\n\nprint()\npprint(output)\nprint()\n```\n\n----------------------------------------\n\nTITLE: Connecting Through Terminal Server with Netmiko Redispatch\nDESCRIPTION: Demonstrates how to connect to a network device through a terminal server using Netmiko. The example shows manual handling of terminal server interaction and then using redispatch to switch to the appropriate device type once connected.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/COMMON_ISSUES.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import unicode_literals, print_function\nimport time\nfrom netmiko import ConnectHandler, redispatch\n\nnet_connect = ConnectHandler(\n    device_type='terminal_server',        # Notice 'terminal_server' here\n    ip='10.10.10.10', \n    username='admin', \n    password='admin123', \n    secret='secret123')\n\n# Manually handle interaction in the Terminal Server \n# (fictional example, but hopefully you see the pattern)\n# Send Enter a Couple of Times\nnet_connect.write_channel(\"\\r\\n\")\ntime.sleep(1)\nnet_connect.write_channel(\"\\r\\n\")\ntime.sleep(1)\noutput = net_connect.read_channel()\nprint(output)                             # Should hopefully see the terminal server prompt\n\n# Login to end device from terminal server\nnet_connect.write_channel(\"connect 1\\r\\n\")\ntime.sleep(1)\n\n# Manually handle the Username and Password\nmax_loops = 10\ni = 1\nwhile i <= max_loops:\n    output = net_connect.read_channel()\n    \n    if 'Username' in output:\n        net_connect.write_channel(net_connect.username + '\\r\\n')\n        time.sleep(1)\n        output = net_connect.read_channel()\n\n    # Search for password pattern / send password\n    if 'Password' in output:\n        net_connect.write_channel(net_connect.password + '\\r\\n')\n        time.sleep(.5)\n        output = net_connect.read_channel()\n        # Did we successfully login\n        if '>' in output or '#' in output:\n            break\n\n    net_connect.write_channel('\\r\\n')\n    time.sleep(.5)\n    i += 1\n\n# We are now logged into the end device \n# Dynamically reset the class back to the proper Netmiko class\nredispatch(net_connect, device_type='cisco_ios')\n\n# Now just do your normal Netmiko operations\nnew_output = net_connect.send_command(\"show ip int brief\")\n```\n\n----------------------------------------\n\nTITLE: Using TTP with Netmiko for Template-Based Parsing\nDESCRIPTION: This example shows how to use TTP (Template Text Parser) with Netmiko to parse command output using a custom template. It creates a template file and uses it to extract structured data from interface configurations.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom netmiko import ConnectHandler\nfrom getpass import getpass\nfrom pprint import pprint\n\ncisco1 = {\n    \"device_type\": \"cisco_ios\",\n    \"host\": \"cisco1.lasthop.io\",\n    \"username\": \"pyclass\",\n    \"password\": getpass(),\n}\n\n# write template to file\nttp_raw_template = \"\"\"\ninterface {{ interface }}\n description {{ description }}\n\"\"\"\n\nwith open(\"show_run_interfaces.ttp\", \"w\") as writer:\n    writer.write(ttp_raw_template)\n\ncommand = \"show run | s interfaces\"\nwith ConnectHandler(**cisco1) as net_connect:\n    # Use TTP to retrieve structured data\n    output = net_connect.send_command(\n        command, use_ttp=True, ttp_template=\"show_run_interfaces.ttp\"\n    )\n\nprint()\npprint(output)\nprint()\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard Logging with Netmiko in Python\nDESCRIPTION: This snippet demonstrates how to set up logging with Netmiko to capture detailed connection information. It creates a log file named 'test.log' that contains low-level details of the SSH connection process for debugging purposes.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom netmiko import ConnectHandler\nfrom getpass import getpass\n\n# Logging section ##############\nimport logging\n\nlogging.basicConfig(filename=\"test.log\", level=logging.DEBUG)\nlogger = logging.getLogger(\"netmiko\")\n# Logging section ##############\n\ncisco1 = {\n    \"device_type\": \"cisco_ios\",\n    \"host\": \"cisco1.lasthop.io\",\n    \"username\": \"pyclass\",\n    \"password\": getpass(),\n}\n\nnet_connect = ConnectHandler(**cisco1)\nprint(net_connect.find_prompt())\nnet_connect.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Connecting to Multiple Network Devices using Netmiko in Python\nDESCRIPTION: This example demonstrates how to connect to multiple devices of different types in a loop. It creates a connection dictionary for each device and processes them sequentially.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom netmiko import ConnectHandler\nfrom getpass import getpass\n\npassword = getpass()\n\ncisco1 = {\n    \"device_type\": \"cisco_ios\",\n    \"host\": \"cisco1.lasthop.io\",\n    \"username\": \"pyclass\",\n    \"password\": password,\n}\n\ncisco2 = {\n    \"device_type\": \"cisco_ios\",\n    \"host\": \"cisco2.lasthop.io\",\n    \"username\": \"pyclass\",\n    \"password\": password,\n}\n\nnxos1 = {\n    \"device_type\": \"cisco_nxos\",\n    \"host\": \"nxos1.lasthop.io\",\n    \"username\": \"pyclass\",\n    \"password\": password,\n}\n\nsrx1 = {\n    \"device_type\": \"juniper_junos\",\n    \"host\": \"srx1.lasthop.io\",\n    \"username\": \"pyclass\",\n    \"password\": password,\n}\n\nfor device in (cisco1, cisco2, nxos1, srx1):\n    net_connect = ConnectHandler(**device)\n    print(net_connect.find_prompt())\n    net_connect.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Using Terminal Server and Redispatch in Netmiko for Complex Connection Scenarios\nDESCRIPTION: This advanced example demonstrates using Netmiko to connect through multiple devices, including a terminal server, to reach an end device. It uses the redispatch() function to change the Netmiko class when connecting to different device types in the connection chain.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"This is a complicated example.\n\nIt illustrates both using a terminal server and bouncing through multiple\ndevices.\n\nIt also illustrates using 'redispatch()' to change the Netmiko class.\n\nThe setup is:\n\nLinux Server \n  --> Small Switch (SSH)\n        --> Terminal Server (telnet)\n              --> Juniper SRX (serial)\n\"\"\"\nimport os\nfrom getpass import getpass\nfrom netmiko import ConnectHandler, redispatch\n\n# Hiding these IP addresses\nterminal_server_ip = os.environ[\"TERMINAL_SERVER_IP\"]\npublic_ip = os.environ[\"PUBLIC_IP\"]\n\ns300_pass = getpass(\"Enter password of s300: \")\nterm_serv_pass = getpass(\"Enter the terminal server password: \")\nsrx2_pass = getpass(\"Enter SRX2 password: \")\n\n# For internal reasons I have to bounce through this small switch to access\n# my terminal server.\ndevice = {\n    \"device_type\": \"cisco_s300\",\n    \"host\": public_ip,\n    \"username\": \"admin\",\n    \"password\": s300_pass,\n    \"session_log\": \"output.txt\",\n}\n\n# Initial connection to the S300 switch\nnet_connect = ConnectHandler(**device)\nprint(net_connect.find_prompt())\n\n# Update the password as the terminal server uses different credentials\nnet_connect.password = term_serv_pass\nnet_connect.secret = term_serv_pass\n# Telnet to the terminal server\ncommand = f\"telnet {terminal_server_ip}\\n\"\nnet_connect.write_channel(command)\n# Use the telnet_login() method to handle the login process\nnet_connect.telnet_login()\nprint(net_connect.find_prompt())\n\n# Made it to the terminal server (this terminal server is \"cisco_ios\")\n# Use redispatch to re-initialize the right class.\nredispatch(net_connect, device_type=\"cisco_ios\")\nnet_connect.enable()\nprint(net_connect.find_prompt())\n\n# Now connect to the end-device via the terminal server (Juniper SRX2)\nnet_connect.write_channel(\"srx2\\n\")\n# Update the credentials for SRX2 as these are different.\nnet_connect.username = \"pyclass\"\nnet_connect.password = srx2_pass\n# Use the telnet_login() method to connect to the SRX\nnet_connect.telnet_login()\nredispatch(net_connect, device_type=\"juniper_junos\")\nprint(net_connect.find_prompt())\n\n# Now we could do something on the SRX\noutput = net_connect.send_command(\"show version\")\nprint(output)\n\nnet_connect.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Session Logging with Netmiko\nDESCRIPTION: Demonstrates how to enable session logging in Netmiko to capture all interaction with the network device to a file. Shows configuration of session logging and command execution.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\nfrom netmiko import ConnectHandler\nfrom getpass import getpass\n\ncisco1 = {\n    \"device_type\": \"cisco_ios\",\n    \"host\": \"cisco1.lasthop.io\",\n    \"username\": \"pyclass\",\n    \"password\": getpass(),\n    \"session_log\": \"output.txt\"\n}\n\ncommand = \"show ip int brief\"\nwith ConnectHandler(**cisco1) as net_connect:\n    output = net_connect.send_command(command)\n```\n\n----------------------------------------\n\nTITLE: Accessing Enable Mode in Netmiko for Cisco Devices\nDESCRIPTION: This example shows how to connect to a Cisco device and enter enable (privileged) mode using the enable() method. It requires both the regular password and the enable secret password.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom netmiko import ConnectHandler\nfrom getpass import getpass\n\npassword = getpass()\nsecret = getpass(\"Enter secret: \")\n\ncisco1 = {\n    \"device_type\": \"cisco_ios\",\n    \"host\": \"cisco1.lasthop.io\",\n    \"username\": \"pyclass\",\n    \"password\": password,\n    \"secret\": secret,\n}\n\nnet_connect = ConnectHandler(**cisco1)\n# Call 'enable()' method to elevate privileges\nnet_connect.enable()\nprint(net_connect.find_prompt())\nnet_connect.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Enabling Netmiko Logging for Debugging\nDESCRIPTION: Shows how to enable logging of all reads and writes of the communications channel in Netmiko. This creates a log file in the current working directory at DEBUG level for troubleshooting.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/COMMON_ISSUES.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nlogging.basicConfig(filename='test.log', level=logging.DEBUG)\nlogger = logging.getLogger(\"netmiko\")\n```\n\n----------------------------------------\n\nTITLE: Using a Context Manager with Netmiko in Python\nDESCRIPTION: This example demonstrates how to use a context manager (with statement) with Netmiko, which automatically handles the disconnect process when exiting the context block.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom netmiko import ConnectHandler\nfrom getpass import getpass\n\ncisco1 = {\n    \"device_type\": \"cisco_ios\",\n    \"host\": \"cisco1.lasthop.io\",\n    \"username\": \"pyclass\",\n    \"password\": getpass(),\n}\n\n# Will automatically 'disconnect()'\nwith ConnectHandler(**cisco1) as net_connect:\n    print(net_connect.find_prompt())\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Using Encryption in Netmiko\nDESCRIPTION: A complete example demonstrating how to use encryption in code, including getting the encryption key from the environment, encrypting a password, and storing it in a YAML file for automatic decryption by Netmiko Tools.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/ENCRYPTION_HANDLING.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom netmiko.encryption_handling import encrypt_value, get_encryption_key\nfrom netmiko.encryption_handling import decrypt_value\n\n# Get the encryption key from environment\nkey = get_encryption_key()\n\n# Encrypt a password\npassword = \"my_secure_password\"\nencrypted_password = encrypt_value(password, key, \"fernet\")\n\n# The encrypted password can now be stored in your YAML file\n# It will automatically be decrypted when Netmiko Tools reads the \n# file (assuming you have properly set the '__meta__' fields\n```\n\n----------------------------------------\n\nTITLE: Handling Command Prompts with Timing in Netmiko\nDESCRIPTION: Shows how to handle interactive commands that prompt for user input using send_command_timing method. Example demonstrates deleting a file from flash memory with confirmation prompts.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom netmiko import ConnectHandler\nfrom getpass import getpass\n\ncisco1 = {\n    \"device_type\": \"cisco_ios\",\n    \"host\": \"cisco1.lasthop.io\",\n    \"username\": \"pyclass\",\n    \"password\": getpass(),\n}\n\ncommand = \"del flash:/test3.txt\"\nnet_connect = ConnectHandler(**cisco1)\n\noutput = net_connect.send_command_timing(\n    command_string=command,\n    strip_prompt=False,\n    strip_command=False\n)\nif \"Delete filename\" in output:\n    output += net_connect.send_command_timing(\n        command_string=\"\\n\",\n        strip_prompt=False,\n        strip_command=False\n    )\nif \"confirm\" in output:\n    output += net_connect.send_command_timing(\n        command_string=\"y\",\n        strip_prompt=False,\n        strip_command=False\n    )\nnet_connect.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Updating the SSH Dispatcher with the New Class\nDESCRIPTION: Commands and code to update the ssh_dispatcher.py file to include the new vendor class in the dispatcher mapping system.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/VENDOR.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd netmiko/netmiko\n$ vi ssh_dispatcher.py\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom netmiko.cisco import CiscoIosSSH\nfrom netmiko.cisco import CiscoAsaSSH\nfrom netmiko.arista import AristaSSH            # Add here\n\nCLASS_MAPPER = {\n    'cisco_ios'     : CiscoIosSSH,\n    'cisco_asa'     : CiscoAsaSSH,\n    'arista_eos'    : AristaSSH,        # Add Here (device_type to class mapping)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Available Device Types in Netmiko using Python\nDESCRIPTION: This example demonstrates how to see all available device types supported by Netmiko by intentionally using an invalid device_type, which causes Netmiko to return an error listing all supported platforms.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom netmiko import ConnectHandler\n\n# Just pick an 'invalid' device_type\ncisco1 = {\n    \"device_type\": \"invalid\",\n    \"host\": \"cisco1.lasthop.io\",\n    \"username\": \"pyclass\",\n    \"password\": \"invalid\"\n}\n\nnet_connect = ConnectHandler(**cisco1)\nnet_connect.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Creating a New Module for the Vendor\nDESCRIPTION: Command to create a new Python module for the vendor and implementation of a basic class that inherits from CiscoSSHConnection.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/VENDOR.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ vi arista_ssh.py\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom netmiko.cisco_base_connection import CiscoSSHConnection\n\nclass AristaSSH(CiscoSSHConnection):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Supported Platform List - Markdown\nDESCRIPTION: Lists network platforms and devices supported by Netmiko, organized by testing status and connection protocol support. Includes device_type values for configuration.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/PLATFORMS.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Supported Platforms\n\n###### Regularly tested\n\n- Arista vEOS\n- Cisco IOS\n- Cisco IOS-XE\n- Cisco IOS-XR\n- Cisco NX-OS\n- Cisco SG300\n- Juniper Junos\n- Linux\n\n###### Limited testing\n[...]\n\n###### Experimental\n[...]\n\n###### Supported SSH device_type values\n[...]\n\n###### Supported Telnet device_type values\n[...]\n\n###### Supported Secure Copy device_type values\n[...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Encryption in YAML File\nDESCRIPTION: Setting up encryption in the ~/.netmiko.yml file using the __meta__ field to enable encryption and specify the encryption type (fernet or aes128).\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/ENCRYPTION_HANDLING.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n__meta__:\n  encryption: true\n  encryption_type: fernet  # or aes128\n```\n\n----------------------------------------\n\nTITLE: Required Methods for Vendor Implementation\nDESCRIPTION: A list of all required methods that must be implemented in the new vendor class, either directly or through inheritance from parent classes.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/VENDOR.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef __init__(self, ip, username, password, secret='', port=22, device_type='', verbose=True):\ndef establish_connection(self, sleep_time=3, verbose=True):\ndef disable_paging(self):\ndef find_prompt(self):\ndef clear_buffer(self):\ndef send_command(self, command_string, delay_factor=1, max_loops=30):\ndef strip_prompt(self, a_string):\ndef strip_command(self, command_string, output):\ndef normalize_linefeeds(self, a_string):\ndef enable(self):\ndef config_mode(self):\ndef exit_config_mode(self):\ndef send_config_set(self, config_commands=None):\ndef cleanup(self):\ndef disconnect(self):\n```\n\n----------------------------------------\n\nTITLE: Using Encrypted Values in YAML Configuration\nDESCRIPTION: Example of how encrypted values appear in a YAML configuration file. The encrypted password is prefixed with __encrypt__ and Netmiko will automatically decrypt it when reading the file.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/ENCRYPTION_HANDLING.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\narista1:\n  device_type: arista_eos\n  host: arista1.domain.com\n  username: pyclass\n  password: >\n    __encrypt__ifcs7SWOUER4m1K3ZEZYlw==:Z0FBQUFBQm5CQ9lrdV9BVS0xOWxYelF1Yml\n    zV3hBcnF4am1SWjRYNnVSRGdBb1FPVmJ2Q2EzX1RjTWxYMVVMdlBZSXVqYWVqUVNASXNRO\n    FBpR1MxRTkxN2J0NWxVeZNKT0E9PQ==\n```\n\n----------------------------------------\n\nTITLE: Updating __init__.py to Export the New Class\nDESCRIPTION: Command and code to update the __init__.py file to expose the new vendor class to the rest of the package.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/VENDOR.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ vi __init__.py\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom netmiko.arista.arista_ssh import AristaSSH\n\n__all__ = ['AristaSSH']\n```\n\n----------------------------------------\n\nTITLE: Running Netmiko Tests with pytest\nDESCRIPTION: Commands to execute specific Netmiko test modules against a defined test device using pytest. The test_device parameter specifies which device configuration to use from the YAML files.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/TESTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npy.test -v test_netmiko_show.py --test_device cisco881  \npy.test -v test_netmiko_config.py --test_device cisco881\n```\n\n----------------------------------------\n\nTITLE: Making the Directory a Python Package\nDESCRIPTION: Commands to navigate to the new vendor directory and create an empty __init__.py file to make it a proper Python package.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/VENDOR.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd arista\n$ touch __init__.py\n```\n\n----------------------------------------\n\nTITLE: Setting Up Netmiko Test Environment\nDESCRIPTION: Commands to copy example configuration files for Netmiko testing. These commands create the necessary YAML configuration files that define test devices and expected responses.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/TESTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ./netmiko/tests/etc  \ncp test_devices.yml.example test_devices.yml  \ncp responses.yml.example responses.yml  \ncp commands.yml.example commands.yml  \n```\n\n----------------------------------------\n\nTITLE: Decrypting Values in Python\nDESCRIPTION: Function signature for decrypting a value that was encrypted with either fernet or aes128. The function takes an encrypted string (with the __encrypt__ prefix), encryption key, and encryption type.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/ENCRYPTION_HANDLING.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef decrypt_value(encrypted_value: str, key: bytes, encryption_type: str) -> str:\n    \"\"\"\n    Decrypt a value using the specified encryption type.\n    \n    Args:\n        encrypted_value: The encrypted string (including '__encrypt__' prefix)\n        key: Encryption key as bytes\n        encryption_type: Either 'fernet' or 'aes128'\n    \n    Returns:\n        Decrypted string\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Buffer and Console Settings (Cisco IOS)\nDESCRIPTION: Network device configuration commands that modify the logging buffer size and disable console logging. Sets buffered logging to specific sizes and disables logging output to the console.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/cisco_ios_commands.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco-ios\nCODE:\n```\nlogging buffered 9990\nlogging buffered 8880\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Encrypting Values in Python\nDESCRIPTION: Function signature for encrypting a value using either the fernet or aes128 encryption type. The function takes a string, encryption key, and encryption type, returning the encrypted string with an __encrypt__ prefix.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/ENCRYPTION_HANDLING.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef encrypt_value(value: str, key: bytes, encryption_type: str) -> str:\n    \"\"\"\n    Encrypt a value using the specified encryption type.\n    \n    Args:\n        value: The string to encrypt\n        key: Encryption key as bytes\n        encryption_type: Either 'fernet' or 'aes128'\n    \n    Returns:\n        Encrypted string with '__encrypt__' prefix\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Netmiko with pip\nDESCRIPTION: Simple pip command to install the Netmiko package. This is the recommended method to install Netmiko.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install netmiko\n```\n\n----------------------------------------\n\nTITLE: Setting the Encryption Key Environment Variable\nDESCRIPTION: Example of setting the NETMIKO_TOOLS_KEY environment variable which is required for the encryption/decryption process.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/ENCRYPTION_HANDLING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Example of setting the encryption key\nexport NETMIKO_TOOLS_KEY=\"your-secure-key-here\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Network Interface Status Table in Plain Text\nDESCRIPTION: This snippet shows a formatted table of network interface information, including interface names, IP addresses, status, protocol, MTU, and owner. It provides a clear overview of the network configuration for troubleshooting and management purposes.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/unit/arista1.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n                                                                                   Address\nInterface         IP Address            Status           Protocol           MTU    Owner  \n----------------- --------------------- ---------------- -------------- ---------- -------\nManagement1       unassigned            admin down       down              1500           \nVlan1             10.220.88.28/24       up               up                1500           \n```\n\n----------------------------------------\n\nTITLE: Running Final Checks Before Submitting PR\nDESCRIPTION: These commands run final checks on your code, including formatting, linting, type checking, and unit tests, before submitting a pull request.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/CONTRIBUTING.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd {{ repo_base }}\n# Use black to autoformat the code\nblack .\n\n# Fix any linting errors\npylama .\n\n# Type hints (if you struggle with this, submit PR and ask for assistance)\nmypy netmiko/\n\n# Unit tests\n$ py.test tests/unit/\n```\n\n----------------------------------------\n\nTITLE: Running Code Formatting and Linting Checks\nDESCRIPTION: These commands run various code quality checks, including Black for formatting, Pylama for linting, and MyPy for type checking.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ black --check .\nAll done! ✨ 🍰 ✨\n264 files would be left unchanged.\n\n$ pylama .\n\n$ mypy netmiko/\nSuccess: no issues found in 194 source files\n```\n\n----------------------------------------\n\nTITLE: Activating the Virtual Environment\nDESCRIPTION: This command activates the virtual environment created by Poetry, which contains all the necessary dependencies.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Netmiko Dependencies with Poetry\nDESCRIPTION: This command uses Poetry to install all the dependencies required for Netmiko development, creating a virtual environment in the process.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry install\n<\"Installing x\"...>\n```\n\n----------------------------------------\n\nTITLE: Checking Git Status\nDESCRIPTION: This command checks the current status of the Git repository, showing the current branch and any changes.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit status\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: This command runs the unit tests for Netmiko using pytest, ensuring all tests pass before making changes.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ py.test tests/unit/\n============================= test session starts ==============================\nplatform linux -- Python 3.9.12, pytest-7.1.2, pluggy-1.3.0\nrootdir: /home/ktbyers/netmiko_tmp/netmiko, configfile: setup.cfg\nplugins: pylama-8.3.8\ncollected 58 items                                                             \n\ntests/unit/test_base_connection.py ........................              [ 41%]\ntests/unit/test_connection.py ....                                       [ 48%]\ntests/unit/test_entry_points.py .                                        [ 50%]\ntests/unit/test_ssh_autodetect.py .                                      [ 51%]\ntests/unit/test_utilities.py ............................                [100%]\n\n============================== 58 passed in 6.41s ==============================\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Documentation with pdoc3 for Netmiko\nDESCRIPTION: Command to generate HTML documentation for the Netmiko package using pdoc3. The output is set to the docs directory and the documentation is generated forcefully.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/release_process.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npdoc3 --html --output-dir docs netmiko --force\n```\n\n----------------------------------------\n\nTITLE: Using global_delay_factor in Netmiko to Adjust Overall Timing\nDESCRIPTION: This example shows how to use the global_delay_factor parameter to multiply all delay factors throughout the Netmiko connection, which is useful for slower devices or high-latency connections.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom netmiko import ConnectHandler\nfrom getpass import getpass\n\ncisco1 = { \n    \"device_type\": \"cisco_ios\",\n    \"host\": \"cisco1.lasthop.io\",\n    \"username\": \"pyclass\",\n    \"password\": getpass(),\n    # Multiple all of the delays by a factor of two\n    \"global_delay_factor\": 2,\n}\n\ncommand = \"show ip arp\"\nnet_connect = ConnectHandler(**cisco1)\noutput = net_connect.send_command(command)\nnet_connect.disconnect()\n\nprint(f\"\\n{output}\\n\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Encryption Key from Environment\nDESCRIPTION: Function signature for retrieving the encryption key from the NETMIKO_TOOLS_KEY environment variable, which is used for encryption and decryption operations.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/ENCRYPTION_HANDLING.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef get_encryption_key() -> bytes:\n    \"\"\"\n    Retrieve the encryption key from NETMIKO_TOOLS_KEY environment variable.\n    \n    Returns:\n        Encryption key as bytes\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running Netmiko Config Tests for AudioCode 66\nDESCRIPTION: This snippet shows the command to run Netmiko configuration tests specifically for the AudioCode 66 device using pytest.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/netmiko_audiocode_driver_test_results.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npy.test -v test_netmiko_config.py --test_device audiocode_66\n```\n\n----------------------------------------\n\nTITLE: Decrypting Values Manually\nDESCRIPTION: Example of how to manually decrypt an encrypted value using the decrypt_value function, specifying the encrypted value, key, and encryption type.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/ENCRYPTION_HANDLING.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclear_value = decrypt_value(encrypted_value, key, encryption_type=\"fernet)\n```\n\n----------------------------------------\n\nTITLE: Navigating to Netmiko Test Directory\nDESCRIPTION: Command to change directory to the Netmiko tests folder before executing tests.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/TESTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ./netmiko/tests\n```\n\n----------------------------------------\n\nTITLE: Creating a New Vendor Directory in Netmiko\nDESCRIPTION: Commands to navigate to the netmiko package directory and create a new subdirectory for the vendor (Arista in this example).\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/VENDOR.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd netmiko/netmiko\n$ mkdir arista\n```\n\n----------------------------------------\n\nTITLE: Executing SR Linux Test Script\nDESCRIPTION: This command runs the test_srl.sh script, which contains the actual tests for the SR Linux environment set up by containerlab.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_nokia_srl/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./test_srl.sh\n```\n\n----------------------------------------\n\nTITLE: Cloning the Forked Netmiko Repository\nDESCRIPTION: This snippet demonstrates how to clone a forked Netmiko repository to your local machine. It uses the SSH URL of the forked repository.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n▶ git clone git@github.com:<gituser>/netmiko.git\nCloning into 'netmiko'...\nremote: Enumerating objects: 17427, done.\nremote: Counting objects: 100% (753/753), done.\nremote: Compressing objects: 100% (417/417), done.\nremote: Total 17427 (delta 395), reused 611 (delta 323), pack-reused 16674\nReceiving objects: 100% (17427/17427), 7.37 MiB | 8.25 MiB/s, done.\nResolving deltas: 100% (11334/11334), done.\n```\n\n----------------------------------------\n\nTITLE: Destroying Containerlab Node After Testing\nDESCRIPTION: This command destroys the containerlab node defined in containerlabTest.yml, cleaning up the environment after testing is complete.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_nokia_srl/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo clab destroy --topo containerlabTest.yml\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch for Development\nDESCRIPTION: This command creates a new branch for your work, tracking the 'develop' branch from the origin repository.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/CONTRIBUTING.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b my_cool_work origin/develop\nbranch 'my_cool_work' set up to track 'origin/develop'.\nSwitched to a new branch 'my_cool_work'\n```\n\n----------------------------------------\n\nTITLE: Displaying Network Interface Status Table\nDESCRIPTION: Text output showing a formatted table of network interface details including interface names, IP addresses, status, protocol state, MTU and owner information. Contains data for Management1 and Vlan1 interfaces.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/unit/arista2.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n                                                                                   Address\nInterface         IP Address            Status           Protocol           MTU    Owner  \n----------------- --------------------- ---------------- -------------- ---------- -------\nManagement1       unassigned            admin down       down              1500           \nVlan1             10.220.88.29/24       up               up                1500           \n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing Git Tag for Netmiko Release\nDESCRIPTION: Git commands to create an annotated tag for a version release and push it to the remote repository. The example shows tagging version 4.5.0.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/release_process.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a v4.5.0 -m \"Version 4.5.0 Release\"\ngit push origin v4.5.0\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies Declaration\nDESCRIPTION: Lists required Python packages - pygal and jinja2 libraries\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/performance/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npygal\njinja2\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment for Netmiko Development Branch\nDESCRIPTION: Instructions for setting up a Python virtual environment to install the Netmiko development branch with Poetry support. This snippet shows the venv creation step of the process.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/COMMON_ISSUES.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Use the appropriate python3 for your machine\n# This creates a virtual environment named .venv\npython3.10 -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple VLANs in Cisco IOS\nDESCRIPTION: This code snippet defines three VLANs (100, 101, and 102) with corresponding names (red100, red101, and red102). This is typical Cisco IOS configuration syntax used for network switch VLAN setup.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/examples_old/case15_netmiko_tools/vlans.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco\nCODE:\n```\nvlan 100\n  name red100\nvlan 101\n  name red101\nvlan 102\n  name red102\n```\n\n----------------------------------------\n\nTITLE: Verifying Poetry Installation\nDESCRIPTION: This command checks if Poetry is installed and in the system PATH by displaying its version.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry --version\nPoetry (version 1.x.y)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cisco IOS System Logging\nDESCRIPTION: Commands to disable console logging and configure buffered logging with a 10000 message capacity. These commands help manage system logging behavior on Cisco devices.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test2_src.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco-ios\nCODE:\n```\nno logging console\nlogging buffered 10000\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Netmiko\nDESCRIPTION: This command changes the current working directory to the cloned Netmiko repository.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd netmiko\n```\n\n----------------------------------------\n\nTITLE: Configuring Buffered Logging for Notifications in Cisco IOS\nDESCRIPTION: This command sets up buffered logging for notification-level messages. It allows the device to store notification and higher severity messages in an internal buffer.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/cisco_asa_commands.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco-ios\nCODE:\n```\nlogging buffered notifications\n```\n\n----------------------------------------\n\nTITLE: Disable Console Logging on Cisco IOS\nDESCRIPTION: Command to disable logging messages from being displayed on the console port. This helps reduce unnecessary output that might interfere with console operations.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_ubiquiti_edgerouter/test9.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco-ios\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Configuring Buffered Logging for Warnings in Cisco IOS\nDESCRIPTION: This command configures buffered logging for warning-level messages. It sets up the device to store warning and higher severity messages in an internal buffer for later review.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/cisco_asa_commands.txt#2025-04-23_snippet_2\n\nLANGUAGE: cisco-ios\nCODE:\n```\nlogging buffered warnings\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Settings in Cisco IOS\nDESCRIPTION: Commands to disable console logging and configure buffered logging with a size of 10000 bytes. This helps prevent console overload while maintaining system logs in the buffer.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_cisco_xe/test2_src.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco-ios\nCODE:\n```\nno logging console\nlogging buffered 10000\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging in Cisco IOS\nDESCRIPTION: This command disables logging messages to the console terminal. It is useful in production environments to prevent log messages from interrupting console sessions and potentially slowing down the device when there are many log messages.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_cisco_ios/test9.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging in Cisco IOS\nDESCRIPTION: Configuration command to disable logging output to the console. This helps reduce unnecessary output when running automated tasks.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test9.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco-ios\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging in Cisco IOS\nDESCRIPTION: Command to disable log messages from being displayed on the console port. This is useful when running automation scripts as it prevents excessive logging messages from cluttering the console output.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_cisco_xe/test9.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging on Cisco Devices\nDESCRIPTION: Command to disable logging output to the console terminal. This helps prevent console messages from interrupting command input and is commonly used in production environments.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_arista_eos/test9.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco-ios\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging in Cisco IOS\nDESCRIPTION: This command disables logging output to the console on a Cisco network device. It's commonly used to reduce unnecessary output when managing devices programmatically or through scripts.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_cisco_xr/testx.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco-ios\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging in Cisco IOS\nDESCRIPTION: This command disables the display of logging messages to the console terminal. It helps prevent logging messages from interrupting console sessions while still allowing logs to be sent to other destinations such as buffer or syslog.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_cisco_xr/test9.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging in Network Device Configuration\nDESCRIPTION: This command disables logging output to the console on a network device. It's commonly used in Cisco IOS and similar network operating systems to prevent log messages from being displayed on the console, which can be useful in automated scripts or when managing devices remotely.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_cisco_nxos/testx.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging in Cisco IOS\nDESCRIPTION: This command disables the logging of system messages to the console port. It's typically used to reduce unnecessary output when managing a device via console, especially during automated operations.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_linux/test9.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging in Cisco IOS\nDESCRIPTION: This command disables logging messages to the console port on a Cisco device. It's often used to reduce clutter and improve performance in production environments where console output is not actively monitored.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_cisco_asa/test9.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco-ios\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging in Network Device Configuration\nDESCRIPTION: This command disables logging output to the console on network devices. It's commonly used to reduce clutter and improve performance, especially when managing devices remotely or running automated scripts.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_extreme_exos/test9.txt#2025-04-23_snippet_0\n\nLANGUAGE: Network Configuration\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging in Cisco IOS\nDESCRIPTION: This command disables logging messages to the console port on a Cisco network device. It's commonly used to reduce output clutter during configuration or troubleshooting sessions.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_cisco_asa/testx.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging in Cisco IOS\nDESCRIPTION: This command disables logging messages to the console port on Cisco network devices. It helps prevent overwhelming the console with log messages while still allowing logging to other destinations such as buffer, syslog servers, etc.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_cisco_nxos/test9.txt#2025-04-23_snippet_0\n\nLANGUAGE: Cisco IOS\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging in Cisco IOS\nDESCRIPTION: This command disables logging messages from being displayed on the console port of a Cisco networking device. This is often used to reduce clutter when working on a device via console connection or to improve performance by eliminating the processing overhead of displaying logs.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_juniper_junos/test9.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco ios\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging in Cisco IOS\nDESCRIPTION: This command disables the output of log messages to the console port. It's commonly used in production environments to prevent excessive logging from impacting device performance or overwhelming the console output.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_arista_eos/testx.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging on Cisco IOS\nDESCRIPTION: Command to disable logging messages from being displayed on the console terminal. This helps prevent console flooding with log messages and is commonly used in production environments.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_juniper_junos/testx.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco-ios\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging in Cisco IOS\nDESCRIPTION: This command disables logging output to the console on a Cisco network device. It's commonly used to reduce unnecessary output during automated configuration tasks or to redirect logging to other destinations.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_dell_sonic/test9.txt#2025-04-23_snippet_0\n\nLANGUAGE: Cisco IOS\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging - Cisco IOS Command\nDESCRIPTION: Disables the logging of system messages to the console port on a Cisco device. This command helps reduce console output and improves performance by preventing log messages from being displayed on the console terminal.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_linux/testx.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco-ios\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging in Cisco IOS\nDESCRIPTION: This command disables logging output to the console on a Cisco network device. It's often used to reduce unnecessary output during automated configuration tasks or to prevent flooding the console with log messages in high-traffic environments.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_cisco_xe/testx.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco-ios\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging in Cisco IOS\nDESCRIPTION: Command to disable logging messages to the console port on Cisco network devices. This command prevents log messages from being displayed on the console, which can be useful in scripts or when the console is not actively monitored.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_mikrotik_routeros/test9.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Running Netmiko Config Tests for AudioCode Shell\nDESCRIPTION: This snippet shows the command to run Netmiko configuration tests specifically for the AudioCode Shell device using pytest.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/netmiko_audiocode_driver_test_results.txt#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npy.test -v test_netmiko_config.py --test_device audiocode_shell\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging on Cisco IOS\nDESCRIPTION: Command to disable system logging messages from being displayed on the console terminal. This helps reduce unnecessary output when working on the device console.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_mikrotik_routeros/testx.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Running Netmiko Show Tests for AudioCode Shell\nDESCRIPTION: This snippet demonstrates the command to execute Netmiko show command tests for the AudioCode Shell device using pytest.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/netmiko_audiocode_driver_test_results.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npy.test -v test_netmiko_show.py --test_device audiocode_shell\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging on Cisco IOS\nDESCRIPTION: Command to disable logging output to the console terminal. This is commonly used to prevent logging messages from interrupting command output during automated configuration sessions.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_ubiquiti_edgerouter/testx.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco-ios\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Deploying Containerlab Node for SR Linux Testing\nDESCRIPTION: This command deploys a containerlab node defined in the containerlabTest.yml file, which sets up the environment for SR Linux testing.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_nokia_srl/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo clab deploy --topo containerlabTest.yml\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging in Cisco IOS\nDESCRIPTION: This command disables logging output to the console. It prevents log messages from being displayed on the console, which can be useful in certain scenarios to reduce output clutter.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/cisco_asa_commands.txt#2025-04-23_snippet_1\n\nLANGUAGE: cisco-ios\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Performance Comparison Headers\nDESCRIPTION: Version information for Netmiko and Scrapli libraries used in the performance comparison\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/performance/performance_netmiko_scrapli.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Netmiko-Scrapli Performance Comparison\n# Netmiko Version: 4.1.0\n# Scrapli Version: 2022.1.30.post1\n```\n\n----------------------------------------\n\nTITLE: Display Performance Graphs in Markdown\nDESCRIPTION: Markdown image references to display SVG performance graphs for different network platforms supported by Netmiko.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/performance/performance_report.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Netmiko performance\n![](graphs/netmiko_arista_eos.svg)\n![](graphs/netmiko_cisco_asa.svg)\n![](graphs/netmiko_cisco_ios.svg)\n![](graphs/netmiko_cisco_nxos.svg)\n![](graphs/netmiko_cisco_xe.svg)\n![](graphs/netmiko_cisco_xr.svg)\n![](graphs/netmiko_hp_procurve.svg)\n![](graphs/netmiko_juniper_junos.svg)\n```\n\n----------------------------------------\n\nTITLE: Output from Terminal Server Redispatch Example in Netmiko\nDESCRIPTION: This is the output from executing the terminal server redispatch example. It shows the command prompts as the connection traverses through different devices from a small switch to a terminal server and finally to a Juniper SRX device.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md#2025-04-23_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\n$ python term_server.py \nEnter password of s300: \nEnter the terminal server password: \nEnter SRX2 password: \n\nsf-dc-sw1#\n\ntwb-dc-termsrv>\ntwb-dc-termsrv#\n\npyclass@srx2>\n\nHostname: srx2\nModel: srx110h2-va\nJUNOS Software Release []\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Settings on Cisco IOS Devices\nDESCRIPTION: These commands configure the logging behavior on a Cisco network device. The first command enables buffered logging with a 100000 byte buffer size, while the second command disables logging to the console, which can improve performance by preventing console output interruptions.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/examples/config_changes.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco-ios\nCODE:\n```\nlogging buffered 100000\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging in Cisco IOS\nDESCRIPTION: This command disables the display of logging messages to the console port on Cisco networking devices. It's useful in production environments to prevent console connections from being overwhelmed with system messages while still allowing logging to other destinations.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_extreme_exos/testx.txt#2025-04-23_snippet_0\n\nLANGUAGE: cisco-ios\nCODE:\n```\nno logging console\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging in Network Device Configuration\nDESCRIPTION: This command disables logging to the console on network devices. It is commonly used to reduce unnecessary output during automated configuration tasks or to improve performance on devices with limited resources.\nSOURCE: https://github.com/ktbyers/netmiko/blob/develop/tests/test_dell_sonic/testx.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nno logging console\n```"
  }
]