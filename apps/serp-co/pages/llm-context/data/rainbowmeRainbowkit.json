[
  {
    "owner": "rainbow-me",
    "repo": "rainbowkit",
    "content": "TITLE: Installing RainbowKit and Wagmi v2 Dependencies\nDESCRIPTION: Command to upgrade RainbowKit, wagmi, and viem to their latest versions.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/guides/rainbowkit-wagmi-v2.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @rainbow-me/rainbowkit wagmi viem@2.x\n```\n\n----------------------------------------\n\nTITLE: Installing RainbowKit 1.x.x Dependencies\nDESCRIPTION: Command to install the latest versions of RainbowKit and wagmi for the 1.x.x upgrade.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/migration-guide.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @rainbow-me/rainbowkit@^1 wagmi@^1\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Wallet with WalletConnect in RainbowKit\nDESCRIPTION: This example demonstrates how to create a custom wallet implementation using WalletConnect in RainbowKit. It defines a wallet with custom options, icons, download URLs, and connection methods, along with specific instructions for mobile and extension installations.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/custom-wallets.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Wallet, getWalletConnectConnector } from '@rainbow-me/rainbowkit';\n\nexport interface MyWalletOptions {\n  projectId: string;\n}\n\nexport const rainbow = ({ projectId }: MyWalletOptions): Wallet => ({\n  id: 'my-wallet',\n  name: 'My Wallet',\n  iconUrl: 'https://my-image.xyz',\n  iconBackground: '#0c2f78',\n  downloadUrls: {\n    android: 'https://play.google.com/store/apps/details?id=my.wallet',\n    ios: 'https://apps.apple.com/us/app/my-wallet',\n    chrome: 'https://chrome.google.com/webstore/detail/my-wallet',\n    qrCode: 'https://my-wallet/qr',\n  },\n  mobile: {\n    getUri: (uri: string) => uri,\n  },\n  qrCode: {\n    getUri: (uri: string) => uri,\n    instructions: {\n      learnMoreUrl: 'https://my-wallet/learn-more',\n      steps: [\n        {\n          description:\n            'We recommend putting My Wallet on your home screen for faster access to your wallet.',\n          step: 'install',\n          title: 'Open the My Wallet app',\n        },\n        {\n          description:\n            'After you scan, a connection prompt will appear for you to connect your wallet.',\n          step: 'scan',\n          title: 'Tap the scan button',\n        },\n      ],\n    },\n  },\n  extension: {\n    instructions: {\n      learnMoreUrl: 'https://my-wallet/learn-more',\n      steps: [\n        {\n          description:\n            'We recommend pinning My Wallet to your taskbar for quicker access to your wallet.',\n          step: 'install',\n          title: 'Install the My Wallet extension',\n        },\n        {\n          description:\n            'Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone.',\n          step: 'create',\n          title: 'Create or Import a Wallet',\n        },\n        {\n          description:\n            'Once you set up your wallet, click below to refresh the browser and load up the extension.',\n          step: 'refresh',\n          title: 'Refresh your browser',\n        },\n      ],\n    },\n  },\n  createConnector: getWalletConnectConnector({ projectId }),\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up RainbowKit Providers\nDESCRIPTION: Implementation of provider wrapper components for RainbowKit, including WagmiProvider and QueryClientProvider.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/installation.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst queryClient = new QueryClient();\n\nconst App = () => {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}>\n        <RainbowKitProvider>\n          {/* Your App */}\n        </RainbowKitProvider>\n      </QueryClientProvider>\n    </WagmiProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi with Rainbow Button\nDESCRIPTION: Example showing how to set up the Wagmi provider with Rainbow Button configuration, including chain setup and React Query integration.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/guides/rainbow-button.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@rainbow-me/rainbow-button/styles.css';\nimport {\n  RainbowButtonProvider,\n  RainbowButton,\n  rainbowConnector,\n} from '@rainbow-me/rainbow-button';\nimport { WagmiProvider, createConfig, http } from 'wagmi';\nimport { mainnet } from 'viem/chains';\nimport {\n  QueryClientProvider,\n  QueryClient,\n} from \"@tanstack/react-query\";\n\nconst config = createConfig({\n  connectors: [\n    rainbowConnector({\n      appName: 'RainbowKit demo',\n      projectId: 'YOUR_PROJECT_ID',\n    }),\n  ],\n  chains: [mainnet],\n  transports: {\n    [mainnet.id]: http(),\n  },\n  ssr: true,\n});\n\nconst queryClient = new QueryClient();\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}>\n        <RainbowButtonProvider>\n          <RainbowButton />\n        </RainbowButtonProvider>\n      </QueryClientProvider>\n    </WagmiProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building Custom Wallet Connectors with connectorsForWallets in RainbowKit\nDESCRIPTION: Example of importing individual wallets and using connectorsForWallets to create a custom list of wallets with their necessary connectors. This allows control over which wallets to display and in what order.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/custom-wallet-list.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { connectorsForWallets } from '@rainbow-me/rainbowkit';\nimport {\n  rainbowWallet,\n  walletConnectWallet,\n} from '@rainbow-me/rainbowkit/wallets';\n\nconst connectors = connectorsForWallets(\n  [\n    {\n      groupName: 'Recommended',\n      wallets: [rainbowWallet, walletConnectWallet],\n    },\n  ],\n  {\n    appName: 'My RainbowKit App',\n    projectId: 'YOUR_PROJECT_ID',\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Basic ERC721 Implementation Using OpenZeppelin\nDESCRIPTION: Example of creating an ERC721 non-fungible token contract by importing and extending OpenZeppelin's implementation. Shows how to create a custom NFT contract with a name and symbol.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/README.md#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract MyCollectible is ERC721 {\n    constructor() ERC721(\"MyCollectible\", \"MCO\") {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic WalletButton Usage in RainbowKit\nDESCRIPTION: Demonstrates how to use the WalletButton component for different wallet providers (Rainbow, MetaMask, and Coinbase) in a React application with RainbowKit.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/wallet-button.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WalletButton } from '@rainbow-me/rainbowkit';\n\n<WalletButton wallet=\"rainbow\" />\n<WalletButton wallet=\"metamask\" />\n<WalletButton wallet=\"coinbase\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring RainbowKit with SIWE and NextAuth in a React App\nDESCRIPTION: Complete setup example showing how to configure a Next.js application with RainbowKit, Sign-In with Ethereum, and NextAuth for wallet-based authentication.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/fr/docs/authentication.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitSiweNextAuthProvider } from '@rainbow-me/rainbowkit-siwe-next-auth';\nimport { RainbowKitProvider } from '@rainbow-me/rainbowkit';\nimport { SessionProvider } from 'next-auth/react';\nimport type { Session } from 'next-auth';\nimport { AppProps } from 'next/app';\nimport { WagmiProvider } from 'wagmi';\nimport {\n  QueryClientProvider,\n  QueryClient,\n} from \"@tanstack/react-query\";\n\nconst queryClient = new QueryClient();\n\nexport default function App({\n  Component,\n  pageProps,\n}: AppProps<{\n  session: Session;\n}>) {\n  return (\n    <WagmiProvider {...etc}>\n      <SessionProvider refetchInterval={0} session={pageProps.session}>\n        <QueryClientProvider client={queryClient}>\n          <RainbowKitSiweNextAuthProvider>\n            <RainbowKitProvider {...etc}>\n              <Component {...pageProps} />\n            </RainbowKitProvider>\n          </RainbowKitSiweNextAuthProvider>\n        </QueryClientProvider>\n      </SessionProvider>\n    </WagmiProvider>;\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating RainbowKit and Wagmi Configuration\nDESCRIPTION: Diff showing the changes required to upgrade the RainbowKit and Wagmi configuration to v2. This includes import changes, new QueryClient setup, and updated provider usage.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/guides/rainbowkit-wagmi-v2.mdx#2025-04-14_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n  import '@rainbow-me/rainbowkit/styles.css'\n\n+ import { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n- import { createPublicClient, http } from 'viem'\n- import { WagmiConfig } from 'wagmi'\n+ import { WagmiProvider, http } from 'wagmi'\n- import { configureChains, createConfig } from 'wagmi'\n  import { mainnet } from 'wagmi/chains'\n  import { RainbowKitProvider } from '@rainbow-me/rainbowkit'\n- import { getDefaultWallets, connectorsForWallets } from '@rainbow-me/rainbowkit'\n+ import { getDefaultConfig } from '@rainbow-me/rainbowkit'\n\n  /* getDefaultWallets is now optional */\n- const { wallets } = getDefaultWallets({\n-   appName: 'RainbowKit demo',\n-   projectId: 'YOUR_PROJECT_ID',\n-   chains,\n- })\n\n  /* connectorsForWallets is now optional */\n- const connectors = connectorsForWallets([...wallets])\n\n- const { chains, publicClient } = configureChains( \n-   [mainnet, sepolia], \n-   [publicProvider(), publicProvider()],\n- )\n\n- const config = createConfig({\n-   autoConnect: true,\n-   publicClient,\n- })\n\n  /* New API that includes Wagmi's createConfig and replaces getDefaultWallets and connectorsForWallets */\n+ const config = getDefaultConfig({\n+   appName: 'RainbowKit demo',\n+   projectId: 'YOUR_PROJECT_ID',\n+   chains: [mainnet],\n+   transports: {\n+     [mainnet.id]: http(),\n+   },\n+ })\n\n+ const queryClient = new QueryClient()\n\n  const App = () => {\n    return (\n-     <WagmiConfig config={config}>\n+     <WagmiProvider config={config}>\n+       <QueryClientProvider client={queryClient}>\n-         <RainbowKitProvider chains={chains}>\n+         <RainbowKitProvider>\n            {/* Your App */}\n          </RainbowKitProvider>\n+       </QueryClientProvider>\n-     </WagmiConfig>\n+     </WagmiProvider>\n    )\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Up App Component with Authentication Providers\nDESCRIPTION: Complete setup of the App component with proper nesting of authentication providers. The component wraps RainbowKitProvider with RainbowKitSiweNextAuthProvider inside NextAuth's SessionProvider and WagmiProvider.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/authentication.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitSiweNextAuthProvider } from '@rainbow-me/rainbowkit-siwe-next-auth';\nimport { RainbowKitProvider } from '@rainbow-me/rainbowkit';\nimport { SessionProvider } from 'next-auth/react';\nimport type { Session } from 'next-auth';\nimport { AppProps } from 'next/app';\nimport { WagmiProvider } from 'wagmi';\nimport {\n  QueryClientProvider,\n  QueryClient,\n} from \"@tanstack/react-query\";\n\nconst queryClient = new QueryClient();\n\nexport default function App({\n  Component,\n  pageProps,\n}: AppProps<{\n  session: Session;\n}>) {\n  return (\n    <WagmiProvider {...etc}>\n      <SessionProvider refetchInterval={0} session={pageProps.session}>\n        <QueryClientProvider client={queryClient}>\n          <RainbowKitSiweNextAuthProvider>\n            <RainbowKitProvider {...etc}>\n              <Component {...pageProps} />\n            </RainbowKitProvider>\n          </RainbowKitSiweNextAuthProvider>\n        </QueryClientProvider>\n      </SessionProvider>\n    </WagmiProvider>;\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating RainbowKit and Wagmi Configuration for v2\nDESCRIPTION: Comprehensive diff showing changes needed to migrate RainbowKit and Wagmi configuration from v1 to v2, including the new getDefaultConfig API, QueryClient setup, and provider changes.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/fr/docs/migration-guide.mdx#2025-04-14_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n  import '@rainbow-me/rainbowkit/styles.css'\n\n+ import { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n- import { createPublicClient, http } from 'viem'\n- import { WagmiConfig } from 'wagmi'\n+ import { WagmiProvider, http } from 'wagmi'\n- import { configureChains, createConfig } from 'wagmi'\n  import { mainnet } from 'wagmi/chains'\n  import { RainbowKitProvider } from '@rainbow-me/rainbowkit'\n- import { getDefaultWallets, connectorsForWallets } from '@rainbow-me/rainbowkit'\n+ import { getDefaultConfig } from '@rainbow-me/rainbowkit'\n\n  /* getDefaultWallets is now optional */\n- const { wallets } = getDefaultWallets({\n-   appName: 'RainbowKit demo',\n-   projectId: 'YOUR_PROJECT_ID',\n-   chains,\n- })\n\n  /* connectorsForWallets is now optional */\n- const connectors = connectorsForWallets([...wallets])\n\n- const { chains, publicClient } = configureChains( \n-   [mainnet, sepolia], \n-   [publicProvider(), publicProvider()],\n- )\n\n- const config = createConfig({\n-   autoConnect: true,\n-   publicClient,\n- })\n\n  /* New API that includes Wagmi's createConfig and replaces getDefaultWallets and connectorsForWallets */\n+ const config = getDefaultConfig({\n+   appName: 'RainbowKit demo',\n+   projectId: 'YOUR_PROJECT_ID',\n+   chains: [mainnet],\n+   transports: {\n+     [mainnet.id]: http(),\n+   },\n+ })\n\n+ const queryClient = new QueryClient()\n\n  const App = () => {\n    return (\n-     <WagmiConfig config={config}>\n+     <WagmiProvider config={config}>\n+       <QueryClientProvider client={queryClient}>\n-         <RainbowKitProvider chains={chains}>\n+         <RainbowKitProvider>\n            {/* Your App */}\n          </RainbowKitProvider>\n+       </QueryClientProvider>\n-     </WagmiConfig>\n+     </WagmiProvider>\n    )\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting up Rainbow Button with Wagmi Configuration\nDESCRIPTION: Complete example showing how to configure Wagmi with RainbowConnector and set up the RainbowButtonProvider and RainbowButton components in a React application.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbow-button/CHANGELOG.md#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"@rainbow-me/rainbow-button/styles.css\";\nimport {\n  RainbowButtonProvider,\n  RainbowConnector,\n} from \"@rainbow-me/rainbow-button\";\n\nconst config = createConfig({\n  connectors: [new RainbowConnector({ chains, projectId })],\n  publicClient,\n});\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  return (\n    <WagmiConfig config={config}>\n      <RainbowButtonProvider>{/* Your App */}</RainbowButtonProvider>\n    </WagmiConfig>\n  );\n}\n\nexport const YourApp = () => {\n  return <RainbowButton />;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating RainbowKit and Wagmi Configuration for 2.x.x\nDESCRIPTION: Diff showing the changes required to update the RainbowKit and Wagmi configuration for version 2.x.x, including new imports and API usage.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/migration-guide.mdx#2025-04-14_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n  import '@rainbow-me/rainbowkit/styles.css'\n\n+ import { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n- import { createPublicClient, http } from 'viem'\n- import { WagmiConfig } from 'wagmi'\n+ import { WagmiProvider, http } from 'wagmi'\n- import { configureChains, createConfig } from 'wagmi'\n  import { mainnet } from 'wagmi/chains'\n  import { RainbowKitProvider } from '@rainbow-me/rainbowkit'\n- import { getDefaultWallets, connectorsForWallets } from '@rainbow-me/rainbowkit'\n+ import { getDefaultConfig } from '@rainbow-me/rainbowkit'\n\n  /* getDefaultWallets is now optional */\n- const { wallets } = getDefaultWallets({\n-   appName: 'RainbowKit demo',\n-   projectId: 'YOUR_PROJECT_ID',\n-   chains,\n- })\n\n  /* connectorsForWallets is now optional */\n- const connectors = connectorsForWallets([...wallets])\n\n- const { chains, publicClient } = configureChains( \n-   [mainnet, sepolia], \n-   [publicProvider(), publicProvider()],\n- )\n\n- const config = createConfig({\n-   autoConnect: true,\n-   publicClient,\n- })\n\n  /* New API that includes Wagmi's createConfig and replaces getDefaultWallets and connectorsForWallets */\n+ const config = getDefaultConfig({\n+   appName: 'RainbowKit demo',\n+   projectId: 'YOUR_PROJECT_ID',\n+   chains: [mainnet],\n+   transports: {\n+     [mainnet.id]: http(),\n+   },\n+ })\n\n+ const queryClient = new QueryClient()\n\n  const App = () => {\n    return (\n-     <WagmiConfig config={config}>\n+     <WagmiProvider config={config}>\n+       <QueryClientProvider client={queryClient}>\n-         <RainbowKitProvider chains={chains}>\n+         <RainbowKitProvider>\n            {/* Your App */}\n          </RainbowKitProvider>\n+       </QueryClientProvider>\n-     </WagmiConfig>\n+     </WagmiProvider>\n    )\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Query Dependency\nDESCRIPTION: Command to install the @tanstack/react-query peer dependency required for Wagmi v2.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/migration-guide.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Setting up RainbowKit Provider Components\nDESCRIPTION: Provider wrapper components setup including WagmiProvider, QueryClientProvider and RainbowKitProvider.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst queryClient = new QueryClient();\n\nconst App = () => {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}>\n        <RainbowKitProvider>\n          {/* Your App */}\n        </RainbowKitProvider>\n      </QueryClientProvider>\n    </WagmiProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Server-Side with NextAuth\nDESCRIPTION: Server-side implementation for accessing and validating user authentication state using NextAuth's getToken and getSession functions. Demonstrates how to pass the session and address to client components.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/authentication.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GetServerSideProps, InferGetServerSidePropsType } from 'next';\nimport { getSession } from 'next-auth/react';\nimport { getToken } from 'next-auth/jwt';\nimport React from 'react';\n\nexport const getServerSideProps: GetServerSideProps = async context => {\n  const session = await getSession(context);\n  const token = await getToken({ req: context.req });\n\n  const address = token?.sub ?? null;\n  // If you have a value for \"address\" here, your\n  // server knows the user is authenticated.\n\n  // You can then pass any data you want\n  // to the page component here.\n  return {\n    props: {\n      address,\n      session,\n    },\n  };\n};\n\ntype AuthenticatedPageProps = InferGetServerSidePropsType<\n  typeof getServerSideProps\n>;\n\nexport default function AuthenticatedPage({\n  address,\n}: AuthenticatedPageProps) {\n  return address ? (\n    <h1>Authenticated as {address}</h1>\n  ) : (\n    <h1>Unauthenticated</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RainbowKit and Wagmi in React\nDESCRIPTION: Shows how to set up RainbowKit and Wagmi v2 in a React application, including configuring chains, providers, and wrapping the app with necessary context providers.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@rainbow-me/rainbowkit/styles.css'\n\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { WagmiProvider, http } from 'wagmi'\nimport { mainnet } from 'wagmi/chains'\nimport { RainbowKitProvider } from '@rainbow-me/rainbowkit'\nimport { getDefaultConfig } from '@rainbow-me/rainbowkit'\n\nconst config = getDefaultConfig({\n  appName: 'RainbowKit demo',\n  projectId: 'YOUR_PROJECT_ID',\n  chains: [mainnet],\n  transports: {\n    [mainnet.id]: http(),\n  },\n})\n\nconst queryClient = new QueryClient()\n\nconst App = () => {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}>\n        <RainbowKitProvider>\n          {/* Your App */}\n        </RainbowKitProvider>\n      </QueryClientProvider>\n    </WagmiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing RainbowKit via Package Manager\nDESCRIPTION: Commands to scaffold a new RainbowKit project with wagmi and Next.js using different package managers.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/installation.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @rainbow-me/rainbowkit@latest\n# or\npnpm create @rainbow-me/rainbowkit@latest\n# or\nyarn create @rainbow-me/rainbowkit\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Avalanche Chain with RainbowKit in TypeScript React\nDESCRIPTION: This snippet demonstrates how to create a custom Avalanche chain configuration and integrate it into a React application using RainbowKit, Wagmi, and TanStack Query. It includes the chain definition, provider setup, and basic app structure.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/es-419/docs/custom-chains.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  RainbowKitProvider,\n  getDefaultConfig,\n  Chain,\n} from '@rainbow-me/rainbowkit';\nimport { WagmiProvider } from 'wagmi';\nimport {\n  QueryClientProvider,\n  QueryClient,\n} from \"@tanstack/react-query\";\n\nconst avalanche = {\n  id: 43_114,\n  name: 'Avalanche',\n  iconUrl: 'https://s2.coinmarketcap.com/static/img/coins/64x64/5805.png',\n  iconBackground: '#fff',\n  nativeCurrency: { name: 'Avalanche', symbol: 'AVAX', decimals: 18 },\n  rpcUrls: {\n    default: { http: ['https://api.avax.network/ext/bc/C/rpc'] },\n  },\n  blockExplorers: {\n    default: { name: 'SnowTrace', url: 'https://snowtrace.io' },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 11_907_934,\n    },\n  },\n} as const satisfies Chain;\n\nconst config = getDefaultConfig({\n  appName: 'My RainbowKit App',\n  projectId: 'YOUR_PROJECT_ID',\n  chains: [avalanche],\n});\n\nconst queryClient = new QueryClient();\n\nconst App = () => {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}>\n        <RainbowKitProvider>\n          {/* Your App */}\n        </RainbowKitProvider>\n      </QueryClientProvider>\n    </WagmiProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing RainbowKit Dependencies\nDESCRIPTION: Package installation command for RainbowKit and its peer dependencies including wagmi, viem, and @tanstack/react-query.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @rainbow-me/rainbowkit wagmi viem@2.x @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Installing viem Dependency\nDESCRIPTION: Command to install the viem peer dependency required for wagmi v1.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/migration-guide.mdx#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i viem\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Authentication Adapter for RainbowKit\nDESCRIPTION: This code snippet demonstrates how to create a custom authentication adapter for RainbowKit using Sign-In with Ethereum. It implements methods for getting a nonce, creating a message, verifying the signature, and signing out.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/custom-authentication.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAuthenticationAdapter } from '@rainbow-me/rainbowkit';\nimport { createSiweMessage } from 'viem/siwe';\n\nconst authenticationAdapter = createAuthenticationAdapter({\n  getNonce: async () => {\n    const response = await fetch('/api/nonce');\n    return await response.text();\n  },\n\n  createMessage: ({ nonce, address, chainId }) => {\n    return createSiweMessage({\n      domain: window.location.host,\n      address,\n      statement: 'Sign in with Ethereum to the app.',\n      uri: window.location.origin,\n      version: '1',\n      chainId,\n      nonce,\n    });\n  },\n\n  verify: async ({ message, signature }) => {\n    const verifyRes = await fetch('/api/verify', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ message, signature }),\n    });\n\n    return Boolean(verifyRes.ok);\n  },\n\n  signOut: async () => {\n    await fetch('/api/logout');\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Theme in RainbowKit with TypeScript\nDESCRIPTION: Example of creating a fully custom theme by defining all theme properties including blurs, colors, fonts, radii, and shadows. The custom theme is passed to the RainbowKitProvider component.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/custom-theme.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitProvider, Theme } from '@rainbow-me/rainbowkit';\n\nconst myCustomTheme: Theme = {\n  blurs: {\n    modalOverlay: '...',\n  },\n  colors: {\n    accentColor: '...',\n    accentColorForeground: '...',\n    actionButtonBorder: '...',\n    actionButtonBorderMobile: '...',\n    actionButtonSecondaryBackground: '...',\n    closeButton: '...',\n    closeButtonBackground: '...',\n    connectButtonBackground: '...',\n    connectButtonBackgroundError: '...',\n    connectButtonInnerBackground: '...',\n    connectButtonText: '...',\n    connectButtonTextError: '...',\n    connectionIndicator: '...',\n    downloadBottomCardBackground: '...',\n    downloadTopCardBackground: '...',\n    error: '...',\n    generalBorder: '...',\n    generalBorderDim: '...',\n    menuItemBackground: '...',\n    modalBackdrop: '...',\n    modalBackground: '...',\n    modalBorder: '...',\n    modalText: '...',\n    modalTextDim: '...',\n    modalTextSecondary: '...',\n    profileAction: '...',\n    profileActionHover: '...',\n    profileForeground: '...',\n    selectedOptionBorder: '...',\n    standby: '...',\n  },\n  fonts: {\n    body: '...',\n  },\n  radii: {\n    actionButton: '...',\n    connectButton: '...',\n    menuButton: '...',\n    modal: '...',\n    modalMobile: '...',\n  },\n  shadows: {\n    connectButton: '...',\n    dialog: '...',\n    profileDetailsAction: '...',\n    selectedOption: '...',\n    selectedWallet: '...',\n    walletLogo: '...',\n  },\n};\n\nconst App = () => (\n  <RainbowKitProvider theme={myCustomTheme} {...etc}>\n    {/* Your App */}\n  </RainbowKitProvider>;\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring RainbowKit\nDESCRIPTION: Configuration setup for RainbowKit including app name, project ID, and supported chains.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/installation.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = getDefaultConfig({\n  appName: 'My RainbowKit App',\n  projectId: 'YOUR_PROJECT_ID',\n  chains: [mainnet, polygon, optimism, arbitrum, base],\n  ssr: true, // If your dApp uses server side rendering (SSR)\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing RainbowKitAuthenticationProvider in Next.js App\nDESCRIPTION: This code snippet shows how to implement the RainbowKitAuthenticationProvider in a Next.js application. It wraps the RainbowKitProvider and uses the custom authentication adapter. The authentication status needs to be resolved by the application's authentication system.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/custom-authentication.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  createAuthenticationAdapter,\n  RainbowKitAuthenticationProvider,\n  RainbowKitProvider,\n} from '@rainbow-me/rainbowkit';\nimport { AppProps } from 'next/app';\nimport { WagmiProvider } from 'wagmi';\nimport {\n  QueryClientProvider,\n  QueryClient,\n} from \"@tanstack/react-query\";\n\nconst authenticationAdapter = createAuthenticationAdapter({\n  /* See above... */\n});\n\nconst queryClient = new QueryClient();\n\nexport default function App({ Component, pageProps }: AppProps) {\n  // You'll need to resolve AUTHENTICATION_STATUS here\n  // using your application's authentication system.\n  // It needs to be either 'loading' (during initial load),\n  // 'unauthenticated' or 'authenticated'.\n\n  return (\n    <WagmiProvider {...etc}>\n      <QueryClientProvider client={queryClient}>\n        <RainbowKitAuthenticationProvider\n          adapter={authenticationAdapter}\n          status={AUTHENTICATION_STATUS}\n        >\n          <RainbowKitProvider {...etc}>\n            <Component {...pageProps} />\n          </RainbowKitProvider>\n        </RainbowKitAuthenticationProvider>\n      </QueryClientProvider>\n    </WagmiProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WalletConnect ProjectId with RainbowKit\nDESCRIPTION: TypeScript code showing how to configure WalletConnect projectId with RainbowKit's getDefaultWallets and custom wallet connectors. The projectId is required for WalletConnect v2 functionality.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/guides/walletconnect-v2.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst projectId = 'YOUR_PROJECT_ID';\nconst { wallets } = getDefaultWallets({\n  appName: 'My RainbowKit App',\n  projectId,\n  chains,\n});\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: 'Other',\n    wallets: [\n      argentWallet({ projectId, chains }),\n      trustWallet({ projectId, chains }),\n      ledgerWallet({ projectId, chains }),\n    ],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Avalanche Chain and Configuring RainbowKit in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom Avalanche chain using the Chain type from RainbowKit, and then configure a React application with RainbowKit, Wagmi, and TanStack Query. It includes setting up the chain details, creating a Wagmi configuration, and wrapping the app with necessary providers.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/fr/docs/custom-chains.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  RainbowKitProvider,\n  getDefaultConfig,\n  Chain,\n} from '@rainbow-me/rainbowkit';\nimport { WagmiProvider } from 'wagmi';\nimport {\n  QueryClientProvider,\n  QueryClient,\n} from \"@tanstack/react-query\";\n\nconst avalanche = {\n  id: 43_114,\n  name: 'Avalanche',\n  iconUrl: 'https://s2.coinmarketcap.com/static/img/coins/64x64/5805.png',\n  iconBackground: '#fff',\n  nativeCurrency: { name: 'Avalanche', symbol: 'AVAX', decimals: 18 },\n  rpcUrls: {\n    default: { http: ['https://api.avax.network/ext/bc/C/rpc'] },\n  },\n  blockExplorers: {\n    default: { name: 'SnowTrace', url: 'https://snowtrace.io' },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 11_907_934,\n    },\n  },\n} as const satisfies Chain;\n\nconst config = getDefaultConfig({\n  appName: 'My RainbowKit App',\n  projectId: 'YOUR_PROJECT_ID',\n  chains: [avalanche],\n});\n\nconst queryClient = new QueryClient();\n\nconst App = () => {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}>\n        <RainbowKitProvider>\n          {/* Your App */}\n        </RainbowKitProvider>\n      </QueryClientProvider>\n    </WagmiProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Transactions with useAddRecentTransaction Hook\nDESCRIPTION: Example demonstrating how to register transactions with RainbowKit using the useAddRecentTransaction hook. This basic implementation shows adding a transaction with its hash and description.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/recent-transactions.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAddRecentTransaction } from '@rainbow-me/rainbowkit';\n\nexport default () => {\n  const addRecentTransaction = useAddRecentTransaction();\n\n  return (\n    <button\n      onClick={() => {\n        addRecentTransaction({\n          hash: '0x...',\n          description: '...',\n        });\n      }}\n    >\n      Add recent transaction\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating OneKey Wallet with RainbowKit in TypeScript\nDESCRIPTION: Example code showing how to integrate OneKey wallet into a RainbowKit application by importing the wallet connector and adding it to the connectors list.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { oneKeyWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst { wallets } = getDefaultWallets({ appName, projectId, chains });\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [oneKeyWallet({ chains })],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Wallet Groups with RainbowKit\nDESCRIPTION: Shows how to configure multiple wallet groups using connectorsForWallets from RainbowKit. The code sets up two groups: 'Recommended' containing Rainbow and MetaMask wallets, and 'Others' containing Coinbase and WalletConnect. Requires @rainbow-me/rainbowkit package and a valid project ID.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/custom-wallet-list.mdx#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { connectorsForWallets } from '@rainbow-me/rainbowkit';\nimport {\n  rainbowWallet,\n  metaMaskWallet,\n  coinbaseWallet,\n  walletConnectWallet,\n} from '@rainbow-me/rainbowkit/wallets';\n\nconst connectors = connectorsForWallets(\n  [\n    {\n      groupName: 'Recommended',\n      wallets: [rainbowWallet, metaMaskWallet],\n    },\n    {\n      groupName: 'Others',\n      wallets: [coinbaseWallet, walletConnectWallet],\n    },\n  ],\n  { appName: 'RainbowKit App', projectId: 'YOUR_PROJECT_ID' },\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Chain Metadata with getDefaultConfig\nDESCRIPTION: Shows how to customize chain icons and backgrounds using getDefaultConfig by extending existing chain configurations from wagmi.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/chains.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { mainnet, optimism } from 'wagmi/chains';\n\nconst config = getDefaultConfig({\n  chains: [\n    {\n      ...mainnet,\n      iconBackground: '#000',\n      iconUrl: 'https://example.com/icons/ethereum.png',\n    },\n    {\n      ...optimism,\n      iconBackground: '#ff0000',\n      iconUrl: 'https://example.com/icons/optimism.png',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing RainbowKit Connect Button\nDESCRIPTION: Example of importing and implementing the RainbowKit ConnectButton component.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ConnectButton } from '@rainbow-me/rainbowkit';\n\nexport const YourApp = () => {\n  return <ConnectButton />;\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating Chain Configuration\nDESCRIPTION: Example of migrating from RainbowKit's configureChains to wagmi's native configuration with updated provider imports.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_46\n\nLANGUAGE: diff\nCODE:\n```\n-import {\n-  apiProvider,\n-} from '@rainbow-me/rainbowkit';\nimport { configureChains } from 'wagmi';\n+import { alchemyProvider } from 'wagmi/providers/alchemy';\n\nconst { chains, provider } = configureChains(\n  [chain.mainnet, chain.polygon, chain.optimism, chain.arbitrum],\n- [apiProvider.alchemy(process.env.ALCHEMY_ID)]\n+ [alchemyProvider({ alchemyId: process.env.ALCHEMY_ID })]\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Server-Side Session in Next.js with RainbowKit and NextAuth\nDESCRIPTION: Example of how to access the server-side session data in a Next.js page component, including retrieving the authenticated user's address and passing it as a prop.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/ms/docs/authentication.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GetServerSideProps, InferGetServerSidePropsType } from 'next';\nimport { getSession } from 'next-auth/react';\nimport { getToken } from 'next-auth/jwt';\nimport React from 'react';\n\nexport const getServerSideProps: GetServerSideProps = async context => {\n  const session = await getSession(context);\n  const token = await getToken({ req: context.req });\n\n  const address = token?.sub ?? null;\n  // If you have a value for \"address\" here, your\n  // server knows the user is authenticated.\n\n  // You can then pass any data you want\n  // to the page component here.\n  return {\n    props: {\n      address,\n      session,\n    },\n  };\n};\n\ntype AuthenticatedPageProps = InferGetServerSidePropsType<\n  typeof getServerSideProps\n>;\n\nexport default function AuthenticatedPage({\n  address,\n}: AuthenticatedPageProps) {\n  return address ? (\n    <h1>Authenticated as {address}</h1>\n  ) : (\n    <h1>Unauthenticated</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Theme Selectors for Server-Rendered Applications\nDESCRIPTION: Implementation of custom CSS selectors for themes in server-rendered applications using cssStringFromTheme. This approach allows for manual theme toggling through CSS selectors.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/custom-theme.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  RainbowKitProvider,\n  cssStringFromTheme,\n  lightTheme,\n  darkTheme,\n} from '@rainbow-me/rainbowkit';\n\nconst App = () => {\n  return (\n    <RainbowKitProvider theme={null} {...etc}>\n      <style\n        dangerouslySetInnerHTML={{\n          __html: `\n            :root {\n              ${cssStringFromTheme(lightTheme)}\n            }\n\n            html[data-dark] {\n              ${cssStringFromTheme(darkTheme, {\n                extends: lightTheme,\n              })}\n            }\n          `,\n        }}\n      />\n\n      {/* ... */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Server-Side Authentication Verification with NextAuth\nDESCRIPTION: Complete implementation of server-side session verification using NextAuth and getServerSideProps. Demonstrates how to check authentication status and pass the address to page components.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/es-419/docs/authentication.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GetServerSideProps, InferGetServerSidePropsType } from 'next';\nimport { getSession } from 'next-auth/react';\nimport { getToken } from 'next-auth/jwt';\nimport React from 'react';\n\nexport const getServerSideProps: GetServerSideProps = async context => {\n  const session = await getSession(context);\n  const token = await getToken({ req: context.req });\n\n  const address = token?.sub ?? null;\n  // If you have a value for \"address\" here, your\n  // server knows the user is authenticated.\n\n  // You can then pass any data you want\n  // to the page component here.\n  return {\n    props: {\n      address,\n      session,\n    },\n  };\n};\n\ntype AuthenticatedPageProps = InferGetServerSidePropsType<\n  typeof getServerSideProps\n>;\n\nexport default function AuthenticatedPage({\n  address,\n}: AuthenticatedPageProps) {\n  return address ? (\n    <h1>Authenticated as {address}</h1>\n  ) : (\n    <h1>Unauthenticated</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating FoxWallet with RainbowKit in TypeScript/TSX\nDESCRIPTION: Example code showing how to integrate FoxWallet into a RainbowKit application by importing the wallet connector and adding it to the connectors list. Requires projectId parameter.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { foxWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst { wallets } = getDefaultWallets({ appName, projectId, chains });\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [foxWallet({ projectId, chains })],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Connect Button\nDESCRIPTION: Example of importing and implementing the RainbowKit ConnectButton component in a React application.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/installation.mdx#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConnectButton } from '@rainbow-me/rainbowkit';\n\nexport const YourApp = () => {\n  return <ConnectButton />;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Avalanche Chain with RainbowKit\nDESCRIPTION: This example demonstrates how to create a custom Avalanche chain configuration and integrate it with RainbowKit and Wagmi in a React application. It configures the chain's ID, name, icons, native currency, RPC URLs, block explorers, and multicall contract details.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/custom-chains.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  RainbowKitProvider,\n  getDefaultConfig,\n  Chain,\n} from '@rainbow-me/rainbowkit';\nimport { WagmiProvider } from 'wagmi';\nimport {\n  QueryClientProvider,\n  QueryClient,\n} from \"@tanstack/react-query\";\n\nconst avalanche = {\n  id: 43_114,\n  name: 'Avalanche',\n  iconUrl: 'https://s2.coinmarketcap.com/static/img/coins/64x64/5805.png',\n  iconBackground: '#fff',\n  nativeCurrency: { name: 'Avalanche', symbol: 'AVAX', decimals: 18 },\n  rpcUrls: {\n    default: { http: ['https://api.avax.network/ext/bc/C/rpc'] },\n  },\n  blockExplorers: {\n    default: { name: 'SnowTrace', url: 'https://snowtrace.io' },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 11_907_934,\n    },\n  },\n} as const satisfies Chain;\n\nconst config = getDefaultConfig({\n  appName: 'My RainbowKit App',\n  projectId: 'YOUR_PROJECT_ID',\n  chains: [avalanche],\n});\n\nconst queryClient = new QueryClient();\n\nconst App = () => {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}>\n        <RainbowKitProvider>\n          {/* Your App */}\n        </RainbowKitProvider>\n      </QueryClientProvider>\n    </WagmiProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Updating RainbowKit and Wagmi Configuration for v2\nDESCRIPTION: Diff showing the changes required to update the RainbowKit and Wagmi configuration for v2, including new imports, provider changes, and the use of getDefaultConfig.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/de/guides/rainbowkit-wagmi-v2.mdx#2025-04-14_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n  import '@rainbow-me/rainbowkit/styles.css'\n\n+ import { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n- import { createPublicClient, http } from 'viem'\n- import { WagmiConfig } from 'wagmi'\n+ import { WagmiProvider, http } from 'wagmi'\n- import { configureChains, createConfig } from 'wagmi'\n  import { mainnet } from 'wagmi/chains'\n  import { RainbowKitProvider } from '@rainbow-me/rainbowkit'\n- import { getDefaultWallets, connectorsForWallets } from '@rainbow-me/rainbowkit'\n+ import { getDefaultConfig } from '@rainbow-me/rainbowkit'\n\n  /* getDefaultWallets is now optional */\n- const { wallets } = getDefaultWallets({\n-   appName: 'RainbowKit demo',\n-   projectId: 'YOUR_PROJECT_ID',\n-   chains,\n- })\n\n  /* connectorsForWallets is now optional */\n- const connectors = connectorsForWallets([...wallets])\n\n- const { chains, publicClient } = configureChains( \n-   [mainnet, sepolia], \n-   [publicProvider(), publicProvider()],\n- )\n\n- const config = createConfig({\n-   autoConnect: true,\n-   publicClient,\n- })\n\n  /* New API that includes Wagmi's createConfig and replaces getDefaultWallets and connectorsForWallets */\n+ const config = getDefaultConfig({\n+   appName: 'RainbowKit demo',\n+   projectId: 'YOUR_PROJECT_ID',\n+   chains: [mainnet],\n+   transports: {\n+     [mainnet.id]: http(),\n+   },\n+ })\n\n+ const queryClient = new QueryClient()\n\n  const App = () => {\n    return (\n-     <WagmiConfig config={config}>\n+     <WagmiProvider config={config}>\n+       <QueryClientProvider client={queryClient}>\n-         <RainbowKitProvider chains={chains}>\n+         <RainbowKitProvider>\n            {/* Your App */}\n          </RainbowKitProvider>\n+       </QueryClientProvider>\n-     </WagmiConfig>\n+     </WagmiProvider>\n    )\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring RainbowKit with SIWE and NextAuth in React\nDESCRIPTION: React component setup for integrating RainbowKit with Sign-In with Ethereum and NextAuth. This includes wrapping the application with necessary providers and configuring the session management.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/ms/docs/authentication.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitSiweNextAuthProvider } from '@rainbow-me/rainbowkit-siwe-next-auth';\nimport { RainbowKitProvider } from '@rainbow-me/rainbowkit';\nimport { SessionProvider } from 'next-auth/react';\nimport type { Session } from 'next-auth';\nimport { AppProps } from 'next/app';\nimport { WagmiProvider } from 'wagmi';\nimport {\n  QueryClientProvider,\n  QueryClient,\n} from \"@tanstack/react-query\";\n\nconst queryClient = new QueryClient();\n\nexport default function App({\n  Component,\n  pageProps,\n}: AppProps<{\n  session: Session;\n}>) {\n  return (\n    <WagmiProvider {...etc}>\n      <SessionProvider refetchInterval={0} session={pageProps.session}>\n        <QueryClientProvider client={queryClient}>\n          <RainbowKitSiweNextAuthProvider>\n            <RainbowKitProvider {...etc}>\n              <Component {...pageProps} />\n            </RainbowKitProvider>\n          </RainbowKitSiweNextAuthProvider>\n        </QueryClientProvider>\n      </SessionProvider>\n    </WagmiProvider>;\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Public Client for Smart Contract Signature Verification\nDESCRIPTION: Code snippet showing how to create a Public Client using viem to enable smart contract signature verification for Sign-in with Ethereum for Smart Contract Wallets.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = getDefaultConfig({\n  /* your config */\n});\n+ const publicClient = config.getClient().extend(publicActions);\n```\n\n----------------------------------------\n\nTITLE: Updating RainbowKit and Wagmi Configuration\nDESCRIPTION: Diff showing the necessary changes to update the RainbowKit and Wagmi configuration for v2, including new imports, provider wrappers, and the use of getDefaultConfig.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/zh-CN/guides/rainbowkit-wagmi-v2.mdx#2025-04-14_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n  import '@rainbow-me/rainbowkit/styles.css'\n\n+ import { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n- import { createPublicClient, http } from 'viem'\n- import { WagmiConfig } from 'wagmi'\n+ import { WagmiProvider, http } from 'wagmi'\n- import { configureChains, createConfig } from 'wagmi'\n  import { mainnet } from 'wagmi/chains'\n  import { RainbowKitProvider } from '@rainbow-me/rainbowkit'\n- import { getDefaultWallets, connectorsForWallets } from '@rainbow-me/rainbowkit'\n+ import { getDefaultConfig } from '@rainbow-me/rainbowkit'\n\n  /* getDefaultWallets is now optional */\n- const { wallets } = getDefaultWallets({\n-   appName: 'RainbowKit demo',\n-   projectId: 'YOUR_PROJECT_ID',\n-   chains,\n- })\n\n  /* connectorsForWallets is now optional */\n- const connectors = connectorsForWallets([...wallets])\n\n- const { chains, publicClient } = configureChains( \n-   [mainnet, sepolia], \n-   [publicProvider(), publicProvider()],\n- )\n\n- const config = createConfig({\n-   autoConnect: true,\n-   publicClient,\n- })\n\n  /* New API that includes Wagmi's createConfig and replaces getDefaultWallets and connectorsForWallets */\n+ const config = getDefaultConfig({\n+   appName: 'RainbowKit demo',\n+   projectId: 'YOUR_PROJECT_ID',\n+   chains: [mainnet],\n+   transports: {\n+     [mainnet.id]: http(),\n+   },\n+ })\n\n+ const queryClient = new QueryClient()\n\n  const App = () => {\n    return (\n-     <WagmiConfig config={config}>\n+     <WagmiProvider config={config}>\n+       <QueryClientProvider client={queryClient}>\n-         <RainbowKitProvider chains={chains}>\n+         <RainbowKitProvider>\n            {/* Your App */}\n          </RainbowKitProvider>\n+       </QueryClientProvider>\n-     </WagmiConfig>\n+     </WagmiProvider>\n    )\n  }\n```\n\n----------------------------------------\n\nTITLE: Customizing Chain Icons with getDefaultConfig (TSX)\nDESCRIPTION: Shows how to customize chain icons using the getDefaultConfig approach, including setting iconBackground and iconUrl for mainnet and optimism chains.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/zh-CN/docs/chains.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { mainnet, optimism } from 'wagmi/chains';\n\nconst config = getDefaultConfig({\n  chains: [\n    {\n      ...mainnet,\n      iconBackground: '#000',\n      iconUrl: 'https://example.com/icons/ethereum.png',\n    },\n    {\n      ...optimism,\n      iconBackground: '#ff0000',\n      iconUrl: 'https://example.com/icons/optimism.png',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Chain Icons with getDefaultConfig\nDESCRIPTION: This example shows how to customize chain icons and backgrounds using the getDefaultConfig method from RainbowKit.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/pt-BR/docs/chains.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { mainnet, optimism } from 'wagmi/chains';\n\nconst config = getDefaultConfig({\n  chains: [\n    {\n      ...mainnet,\n      iconBackground: '#000',\n      iconUrl: 'https://example.com/icons/ethereum.png',\n    },\n    {\n      ...optimism,\n      iconBackground: '#ff0000',\n      iconUrl: 'https://example.com/icons/optimism.png',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Working with Wallets Property After getDefaultWallets API Change\nDESCRIPTION: Demonstrates how to modify the wallet list returned from getDefaultWallets after the API change. Instead of directly accessing the return value, users now need to destructure the wallets property from the object.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_48\n\nLANGUAGE: diff\nCODE:\n```\nimport { getDefaultWallets, connectorsForWallets } from '@rainbow-me/rainbowkit';\n\n-const wallets = getDefaultWallets({\n+const { wallets } = getDefaultWallets({\n  /* ... */\n});\n\nconst connectors = connectorsForWallets(wallets);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Popular Wallets with RainbowKit\nDESCRIPTION: Example showing how to include multiple popular wallets (Rainbow, MetaMask, Coinbase) along with the WalletConnect fallback option. The order in the array defines the display order in the UI.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/custom-wallet-list.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { connectorsForWallets } from '@rainbow-me/rainbowkit';\nimport {\n  rainbowWallet,\n  metaMaskWallet,\n  coinbaseWallet,\n  walletConnectWallet,\n} from '@rainbow-me/rainbowkit/wallets';\n\nconst connectors = connectorsForWallets(\n  [\n    {\n      groupName: 'Suggested',\n      wallets: [\n        rainbowWallet,\n        metaMaskWallet,\n        coinbaseWallet,\n        walletConnectWallet,\n      ],\n    },\n  ],\n  { appName: 'RainbowKit App', projectId: 'YOUR_PROJECT_ID' },\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing WalletButton with Custom Rendering in RainbowKit\nDESCRIPTION: Shows how to use WalletButton.Custom for creating a custom implementation with custom styling. The example demonstrates accessing the ready and connect props to create a personalized connection button for Rainbow wallet.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/wallet-button.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<WalletButton.Custom wallet=\"rainbow\">\n  {({ ready, connect }) => {\n    return (\n      <button\n        type=\"button\"\n        disabled={!ready}\n        onClick={connect}\n      >\n        Connect Rainbow\n      </button>\n    );\n  }}\n</WalletButton.Custom>\n```\n\n----------------------------------------\n\nTITLE: Customizing Chain Metadata with createConfig\nDESCRIPTION: Demonstrates how to customize chain metadata using createConfig with TypeScript type definitions for Chain array.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/chains.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { mainnet, optimism } from 'wagmi/chains';\nimport { Chain } from '@rainbow-me/rainbowkit';\n\nconst chains: readonly [Chain, ...Chain[]] = [\n  {\n    ...mainnet,\n    iconBackground: '#000',\n    iconUrl: 'https://example.com/icons/ethereum.png',\n  },\n  {\n    ...optimism,\n    iconBackground: '#ff0000',\n    iconUrl: 'https://example.com/icons/optimism.png',\n  },\n];\n\nconst config = createConfig({\n  chains,\n});\n```\n\n----------------------------------------\n\nTITLE: Dark Mode Support Implementation\nDESCRIPTION: Shows how to implement dynamic theme switching between light and dark modes based on system preferences.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/theming.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  RainbowKitProvider,\n  lightTheme,\n  darkTheme,\n} from '@rainbow-me/rainbowkit';\n\nconst App = () => (\n  <RainbowKitProvider\n    theme={{\n      lightMode: lightTheme(),\n      darkMode: darkTheme(),\n    }}\n    {...etc}\n  >\n    {/* Your App */}\n  </RainbowKitProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi with RainbowConnector\nDESCRIPTION: Creation of Wagmi configuration using RainbowConnector. Requires chains and projectId from WalletConnect Cloud.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbow-button/README.md#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = createConfig({\n  connectors: [new RainbowConnector({ chains, projectId })],\n  publicClient\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Avatar Component in RainbowKit with TypeScript\nDESCRIPTION: This code demonstrates how to create and implement a custom avatar component in a RainbowKit application. The component displays either the user's ENS image or generates a colored background with a smiley face based on the user's address. The custom avatar is then provided to the RainbowKitProvider through the avatar prop.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/custom-avatars.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  RainbowKitProvider,\n  AvatarComponent,\n} from '@rainbow-me/rainbowkit';\nimport { generateColorFromAddress } from './utils';\n\nconst CustomAvatar: AvatarComponent = ({ address, ensImage, size }) => {\n  const color = generateColorFromAddress(address);\n  return ensImage ? (\n    <img\n      src={ensImage}\n      width={size}\n      height={size}\n      style={{ borderRadius: 999 }}\n    />\n  ) : (\n    <div\n      style={{\n        backgroundColor: color,\n        borderRadius: 999,\n        height: size,\n        width: size,\n      }}\n    >\n      :^)\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <RainbowKitProvider avatar={CustomAvatar} {...etc}>\n      {/* ... */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ConnectButton in RainbowKit with TypeScript React\nDESCRIPTION: This code snippet demonstrates how to create a custom ConnectButton using RainbowKit's ConnectButton.Custom component. It handles different states such as not connected, wrong network, and connected, rendering appropriate buttons and information based on the connection status.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/custom-connect-button.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConnectButton } from '@rainbow-me/rainbowkit';\n\nexport const YourApp = () => {\n  return (\n    <ConnectButton.Custom>\n      {({\n        account,\n        chain,\n        openAccountModal,\n        openChainModal,\n        openConnectModal,\n        authenticationStatus,\n        mounted,\n      }) => {\n        // Note: If your app doesn't use authentication, you\n        // can remove all 'authenticationStatus' checks\n        const ready = mounted && authenticationStatus !== 'loading';\n        const connected =\n          ready &&\n          account &&\n          chain &&\n          (!authenticationStatus ||\n            authenticationStatus === 'authenticated');\n\n        return (\n          <div\n            {...(!ready && {\n              'aria-hidden': true,\n              'style': {\n                opacity: 0,\n                pointerEvents: 'none',\n                userSelect: 'none',\n              },\n            })}\n          >\n            {(() => {\n              if (!connected) {\n                return (\n                  <button onClick={openConnectModal} type=\"button\">\n                    Connect Wallet\n                  </button>\n                );\n              }\n\n              if (chain.unsupported) {\n                return (\n                  <button onClick={openChainModal} type=\"button\">\n                    Wrong network\n                  </button>\n                );\n              }\n\n              return (\n                <div style={{ display: 'flex', gap: 12 }}>\n                  <button\n                    onClick={openChainModal}\n                    style={{ display: 'flex', alignItems: 'center' }}\n                    type=\"button\"\n                  >\n                    {chain.hasIcon && (\n                      <div\n                        style={{\n                          background: chain.iconBackground,\n                          width: 12,\n                          height: 12,\n                          borderRadius: 999,\n                          overflow: 'hidden',\n                          marginRight: 4,\n                        }}\n                      >\n                        {chain.iconUrl && (\n                          <img\n                            alt={chain.name ?? 'Chain icon'}\n                            src={chain.iconUrl}\n                            style={{ width: 12, height: 12 }}\n                          />\n                        )}\n                      </div>\n                    )}\n                    {chain.name}\n                  </button>\n\n                  <button onClick={openAccountModal} type=\"button\">\n                    {account.displayName}\n                    {account.displayBalance\n                      ? ` (${account.displayBalance})`\n                      : ''}\n                  </button>\n                </div>\n              );\n            })()}\n          </div>\n        );\n      }}\n    </ConnectButton.Custom>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Light/Dark Themes in RainbowKit (TSX)\nDESCRIPTION: This example shows how to set up dynamic theming in RainbowKit to support both light and dark modes based on system preferences.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/zh-TW/docs/theming.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  RainbowKitProvider,\n  lightTheme,\n  darkTheme,\n} from '@rainbow-me/rainbowkit';\n\nconst App = () => (\n  <RainbowKitProvider\n    theme={{\n      lightMode: lightTheme(),\n      darkMode: darkTheme(),\n    }}\n    {...etc}\n  >\n    {/* Your App */}\n  </RainbowKitProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing RainbowKit Dependencies\nDESCRIPTION: Import statements for RainbowKit, Wagmi, and TanStack Query components and styles.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/installation.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@rainbow-me/rainbowkit/styles.css';\n\nimport {\n  getDefaultConfig,\n  RainbowKitProvider,\n} from '@rainbow-me/rainbowkit';\nimport { WagmiProvider } from 'wagmi';\nimport {\n  mainnet,\n  polygon,\n  optimism,\n  arbitrum,\n  base,\n} from 'wagmi/chains';\nimport {\n  QueryClientProvider,\n  QueryClient,\n} from \"@tanstack/react-query\";\n```\n\n----------------------------------------\n\nTITLE: Customizing Chain Icons with createConfig\nDESCRIPTION: Example of how to customize chain icons when using the createConfig approach. This demonstrates importing the Chain type from RainbowKit and creating a properly typed chains array with custom icon properties.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/es-419/docs/chains.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { mainnet, optimism } from 'wagmi/chains';\nimport { Chain } from '@rainbow-me/rainbowkit';\n\nconst chains: readonly [Chain, ...Chain[]] = [\n  {\n    ...mainnet,\n    iconBackground: '#000',\n    iconUrl: 'https://example.com/icons/ethereum.png',\n  },\n  {\n    ...optimism,\n    iconBackground: '#ff0000',\n    iconUrl: 'https://example.com/icons/optimism.png',\n  },\n];\n\nconst config = createConfig({\n  chains,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Recent Transactions in React with RainbowKit\nDESCRIPTION: Demonstrates how to use the useAddRecentTransaction hook from RainbowKit to add and track recent transactions, updating gas balance in real-time as transactions are confirmed on-chain.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAddRecentTransaction } from \"@rainbow-me/rainbowkit\";\n\nexport default () => {\n  const addRecentTransaction = useAddRecentTransaction();\n\n  return (\n    <button\n      onClick={() => {\n        addRecentTransaction({\n          hash: \"0x...\",\n          description: \"...\",\n        });\n      }}\n    >\n      Add recent transaction\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Customized Theme Configuration\nDESCRIPTION: Demonstrates how to customize theme properties including accent color, border radius, font stack, and overlay blur.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/theming.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitProvider, darkTheme } from '@rainbow-me/rainbowkit';\n\nexport const App = () => (\n  <RainbowKitProvider\n    theme={darkTheme({\n      __accentColor__: '#7b3fe4',\n      __accentColorForeground__: 'white',\n      __borderRadius__: 'small',\n      __fontStack__: 'system',\n      __overlayBlur__: 'small',\n    })}\n    {...etc}\n  >\n    {/* Your App */}\n  </RainbowKitProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Cool Mode in RainbowKit using RainbowKitProvider\nDESCRIPTION: This snippet demonstrates how to enable cool mode in a RainbowKit application by setting the coolMode prop on the RainbowKitProvider component. When enabled, this feature creates emoji explosions using the selected wallet's icon whenever a user selects a wallet from the wallet list.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/cool-mode.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitProvider } from '@rainbow-me/rainbowkit';\n\nconst App = () => (\n  <RainbowKitProvider coolMode {...etc}>\n    {/* Your App */}\n  </RainbowKitProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring RainbowKit with Custom Transport\nDESCRIPTION: Example of configuring RainbowKit with custom HTTP transport for specific chains using Alchemy endpoints.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getDefaultConfig } from '@rainbow-me/rainbowkit';\nimport { http } from 'wagmi';\nimport { mainnet, sepolia } from 'wagmi/chains';\n\nconst config = getDefaultConfig({\n  appName: 'My RainbowKit App',\n  projectId: 'YOUR_PROJECT_ID',\n  chains: [mainnet, sepolia],\n  transports: {\n    [mainnet.id]: http('https://eth-mainnet.g.alchemy.com/v2/...'),\n    [sepolia.id]: http('https://eth-sepolia.g.alchemy.com/v2/...'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Next.js Pages Router Integration with RainbowKit\nDESCRIPTION: Implementation of RainbowKit localization with Next.js Pages Router, using the router's locale prop for language selection.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/localization.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitProvider, Locale } from '@rainbow-me/rainbowkit';\n\nexport const App = () => {\n  const { locale } = useRouter() as { locale: Locale };\n  return (\n    <RainbowKitProvider locale={locale} {...etc}>\n      {/* Your App */}\n    </RainbowKitProvider>\n  )\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Recent Transactions Support in RainbowKit\nDESCRIPTION: Shows how to enable the display of recent transactions within RainbowKit's account modal. This requires enabling the showRecentTransactions option on RainbowKitProvider to opt in to this feature.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_54\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitProvider } from \"@rainbow-me/rainbowkit\";\n\nconst App = () => {\n  return (\n    <RainbowKitProvider showRecentTransactions={true} {...etc}>\n      {/* ... */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Modal Hooks in RainbowKit with React\nDESCRIPTION: This code demonstrates how to import and use the useConnectModal, useAccountModal, and useChainModal hooks from RainbowKit. It shows how to conditionally render buttons that open each modal and how to access the modal open status.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/modal-hooks.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  useConnectModal,\n  useAccountModal,\n  useChainModal,\n} from '@rainbow-me/rainbowkit';\n\nexport const YourApp = () => {\n  const { openConnectModal } = useConnectModal();\n  const { openAccountModal } = useAccountModal();\n  const { openChainModal } = useChainModal();\n\n  return (\n    <>\n      {openConnectModal && (\n        <button onClick={openConnectModal} type=\"button\">\n          Open Connect Modal\n        </button>\n      )}\n\n      {openAccountModal && (\n        <button onClick={openAccountModal} type=\"button\">\n          Open Account Modal\n        </button>\n      )}\n\n      {openChainModal && (\n        <button onClick={openChainModal} type=\"button\">\n          Open Chain Modal\n        </button>\n      )}\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring WalletConnect with Project ID in TypeScript\nDESCRIPTION: Example of configuring RainbowKit with a WalletConnect Cloud project ID for WalletConnect v2 support.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_32\n\nLANGUAGE: ts\nCODE:\n```\nconst projectId = \"YOUR_PROJECT_ID\";\n\nconst { wallets } = getDefaultWallets({\n  appName: \"My RainbowKit App\",\n  projectId,\n  chains,\n});\n\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [\n      argentWallet({ projectId, chains }),\n      trustWallet({ projectId, chains }),\n      ledgerWallet({ projectId, chains }),\n    ],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Enabling Recent Transactions in RainbowKitProvider (TSX)\nDESCRIPTION: This snippet shows how to enable the display of recent transactions by setting the showRecentTransactions prop to true in the RainbowKitProvider component.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/id/docs/recent-transactions.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitProvider } from '@rainbow-me/rainbowkit';\n\nconst App = () => {\n  return (\n    <RainbowKitProvider showRecentTransactions={true} {...etc}>\n      {/* ... */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring RainbowKit Default Settings\nDESCRIPTION: Configuration setup for RainbowKit including app name, project ID and supported chains.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = getDefaultConfig({\n  appName: 'My RainbowKit App',\n  projectId: 'YOUR_PROJECT_ID',\n  chains: [mainnet, polygon, optimism, arbitrum, base],\n  ssr: true, // If your dApp uses server side rendering (SSR)\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating NextAuth authorize implementation from siwe to viem/siwe\nDESCRIPTION: Diff showing how to update the NextAuth authorize function to use viem/siwe instead of siwe and ethers for message parsing and signature verification.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit-siwe-next-auth/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- import { SiweMessage } from 'siwe';\n+ import {\n+   type SiweMessage,\n+   parseSiweMessage,\n+   validateSiweMessage,\n+ } from 'viem/siwe';\n\nexport function getAuthOptions(req: IncomingMessage): NextAuthOptions {\n  const providers = [\n    CredentialsProvider({\n      async authorize(credentials: any) {\n\n-       const siwe = new SiweMessage(\n-         JSON.parse(credentials?.message || '{}'),\n-       );\n+       const siweMessage = parseSiweMessage(\n+         credentials?.message,\n+       ) as SiweMessage;\n\n+       if (!validateSiweMessage({\n+         address: siweMessage?.address,\n+         message: siweMessage,\n+       })) {\n+         return null;\n+       }\n\n        /* ... */\n\n-       await siwe.verify({ signature: credentials?.signature || '' });\n+       const valid = await publicClient.verifyMessage({\n+         address: siweMessage?.address,\n+         message: credentials?.message,\n+         signature: credentials?.signature,\n+       });\n\n+       if (!valid) {\n+         return null;\n+       }\n      },\n      /* ... */\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Extending a Built-in Theme in RainbowKit\nDESCRIPTION: Example of extending the built-in darkTheme by importing necessary dependencies, merging the theme with custom properties, and applying it to the RainbowKitProvider.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/custom-theme.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport merge from 'lodash.merge';\nimport {\n  RainbowKitProvider,\n  darkTheme,\n  Theme,\n} from '@rainbow-me/rainbowkit';\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst myTheme = merge(darkTheme(), {\n  colors: {\n    accentColor: '#07296d',\n  },\n} as Theme);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  return (\n    <RainbowKitProvider theme={myTheme} {...etc}>\n      {/* Your App */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing WalletButton Component in React TSX\nDESCRIPTION: Examples showing how to use the WalletButton component for connecting specific wallets. The component can be used directly or customized with WalletButton.Custom for styling flexibility.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<WalletButton wallet=\"rainbow\" />\n<WalletButton wallet=\"metamask\" />\n<WalletButton wallet=\"coinbase\" />\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<WalletButton.Custom wallet=\"rainbow\">\n  {({ ready, connect }) => {\n    return (\n      <button type=\"button\" disabled={!ready} onClick={connect}>\n        Connect Rainbow\n      </button>\n    );\n  }}\n</WalletButton.Custom>\n```\n\n----------------------------------------\n\nTITLE: Customizing Transaction Confirmation Settings\nDESCRIPTION: Advanced example showing how to customize the number of confirmations required before a transaction is considered complete by specifying the confirmations parameter when registering a transaction.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/recent-transactions.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAddRecentTransaction } from '@rainbow-me/rainbowkit';\n\nexport default () => {\n  const addRecentTransaction = useAddRecentTransaction();\n\n  return (\n    <button\n      onClick={() => {\n        addRecentTransaction({\n          hash: '0x...',\n          description: '...',\n          confirmations: 100,\n        });\n      }}\n    >\n      Add recent transaction\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Transaction Confirmation Settings with useAddRecentTransaction (TSX)\nDESCRIPTION: This snippet illustrates how to customize the confirmation settings for a transaction when using the useAddRecentTransaction hook. It sets a custom number of confirmations required for the transaction to be considered complete.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/id/docs/recent-transactions.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAddRecentTransaction } from '@rainbow-me/rainbowkit';\n\nexport default () => {\n  const addRecentTransaction = useAddRecentTransaction();\n\n  return (\n    <button\n      onClick={() => {\n        addRecentTransaction({\n          hash: '0x...',\n          description: '...',\n          confirmations: 100,\n        });\n      }}\n    >\n      Add recent transaction\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Recent Transactions in RainbowKit\nDESCRIPTION: Demonstrates how to register transactions with RainbowKit using the useAddRecentTransaction hook. This allows tracking and displaying transaction status in the account modal after enabling recent transactions.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_55\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAddRecentTransaction } from \"@rainbow-me/rainbowkit\";\n\nexport default () => {\n  const addRecentTransaction = useAddRecentTransaction();\n\n  return (\n    <button\n      onClick={() => {\n        addRecentTransaction({\n          hash: \"0x...\",\n          description: \"...\",\n        });\n      }}\n    >\n      Add recent transaction\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using RainbowKit Modal Hooks in React Components\nDESCRIPTION: This code demonstrates how to import and use RainbowKit's modal hooks to programmatically open connect, account, and chain modals. It shows conditional rendering of buttons based on the availability of modal opening functions and how to access the modal state values.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/es-419/docs/modal-hooks.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  useConnectModal,\n  useAccountModal,\n  useChainModal,\n} from '@rainbow-me/rainbowkit';\n\nexport const YourApp = () => {\n  const { openConnectModal } = useConnectModal();\n  const { openAccountModal } = useAccountModal();\n  const { openChainModal } = useChainModal();\n\n  return (\n    <>\n      {openConnectModal && (\n        <button onClick={openConnectModal} type=\"button\">\n          Open Connect Modal\n        </button>\n      )}\n\n      {openAccountModal && (\n        <button onClick={openAccountModal} type=\"button\">\n          Open Account Modal\n        </button>\n      )}\n\n      {openChainModal && (\n        <button onClick={openChainModal} type=\"button\">\n          Open Chain Modal\n        </button>\n      )}\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: RainbowKit Implementation With configureChains API\nDESCRIPTION: Example of RainbowKit configuration using the new configureChains API. This simplified approach allows easier provider setup with the apiProvider helper and streamlined chain configuration.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_58\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  apiProvider,\n  Chain,\n  configureChains,\n  getDefaultWallets,\n  RainbowKitProvider,\n} from \"@rainbow-me/rainbowkit\";\nimport { createClient, WagmiProvider, chain } from \"wagmi\";\nimport { providers } from \"ethers\";\n\nconst { chains, provider } = configureChains(\n  [chain.mainnet, chain.polygon, chain.optimism, chain.arbitrum],\n  [apiProvider.infura(process.env.INFURA_ID)]\n);\n\nconst { connectors } = getDefaultWallets({\n  appName: \"My RainbowKit App\",\n  chains,\n});\n\nconst wagmiClient = createClient({\n  autoConnect: true,\n  connectors,\n  provider,\n});\n\nconst App = () => {\n  return (\n    <WagmiProvider client={wagmiClient}>\n      <RainbowKitProvider chains={chains}>\n        {/* Your App */}\n      </RainbowKitProvider>\n    </WagmiProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC4626 Test Contract\nDESCRIPTION: Example implementation of a test contract that extends the abstract ERC4626Test contract with custom vault setup. Demonstrates configuration of test parameters and vault initialization.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/lib/erc4626-tests/README.md#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"erc4626-tests/ERC4626.test.sol\";\n\nimport { ERC20Mock   } from \"/path/to/mocks/ERC20Mock.sol\";\nimport { ERC4626Mock } from \"/path/to/mocks/ERC4626Mock.sol\";\n\ncontract ERC4626StdTest is ERC4626Test {\n    function setUp() public override {\n        _underlying_ = address(new ERC20Mock(\"Mock ERC20\", \"MERC20\", 18));\n        _vault_ = address(new ERC4626Mock(ERC20Mock(__underlying__), \"Mock ERC4626\", \"MERC4626\"));\n        _delta_ = 0;\n        _vaultMayBeEmpty = false;\n        _unlimitedAmount = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Transaction Confirmations in RainbowKit\nDESCRIPTION: Shows how to customize the number of confirmations required for a transaction to be considered complete. By default, a transaction is complete after one confirmation, but this can be configured with the confirmations property.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_56\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAddRecentTransaction } from \"@rainbow-me/rainbowkit\";\n\nexport default () => {\n  const addRecentTransaction = useAddRecentTransaction();\n\n  return (\n    <button\n      onClick={() => {\n        addRecentTransaction({\n          hash: \"0x...\",\n          description: \"...\",\n          confirmations: 100,\n        });\n      }}\n    >\n      Add recent transaction\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Transactions with useAddRecentTransaction Hook\nDESCRIPTION: This snippet demonstrates how to use the useAddRecentTransaction hook to register a transaction with RainbowKit. It shows adding a transaction with a hash and description.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/zh-HK/docs/recent-transactions.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAddRecentTransaction } from '@rainbow-me/rainbowkit';\n\nexport default () => {\n  const addRecentTransaction = useAddRecentTransaction();\n\n  return (\n    <button\n      onClick={() => {\n        addRecentTransaction({\n          hash: '0x...',\n          description: '...',\n        });\n      }}\n    >\n      Add recent transaction\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Rainbow Button\nDESCRIPTION: Example of using RainbowButton.Custom for a custom button implementation with ready state and connect function.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbow-button/README.md#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<RainbowButton.Custom>\n  {({ ready, connect }) => {\n    return (\n      <button\n        type=\"button\"\n        disabled={!ready}\n        onClick={connect}\n      >\n        Connect Rainbow\n      </button>\n    );\n  }}\n</RainbowButton.Custom>\n```\n\n----------------------------------------\n\nTITLE: Dark Theme with Custom Accent\nDESCRIPTION: Shows how to implement dark theme with custom purple accent color and medium border radius.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/theming.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitProvider, darkTheme } from '@rainbow-me/rainbowkit';\n\nconst App = () => {\n  return (\n    <RainbowKitProvider\n      theme={darkTheme({\n        accentColor: '#7b3fe4',\n        accentColorForeground: 'white',\n        borderRadius: 'medium',\n      })}\n      {...etc}\n    >\n      {/* Your App */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom ConnectButton Implementation with Authentication\nDESCRIPTION: Example of using ConnectButton.Custom with authentication status handling in a React component.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_42\n\nLANGUAGE: tsx\nCODE:\n```\n<ConnectButton.Custom>\n  {({\n    account,\n    chain,\n    openAccountModal,\n    openChainModal,\n    openConnectModal,\n    authenticationStatus,\n    mounted,\n  }) => {\n    const ready = mounted && authenticationStatus !== \"loading\";\n    const connected =\n      ready &&\n      account &&\n      chain &&\n      (!authenticationStatus || authenticationStatus === \"authenticated\");\n\n    return (\n      <div\n        {...(!ready && {\n          \"aria-hidden\": true,\n          style: {\n            opacity: 0,\n          },\n        })}\n      >\n        {/* etc... */}\n      </div>\n    );\n  }}\n</ConnectButton.Custom>\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Accent Color Presets with RainbowKit Themes\nDESCRIPTION: Shows how to use the built-in accent color presets with the new theming API. Presets are now accessed through the accentColors property on the theme object and spread into the theme configuration.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_51\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitProvider, darkTheme } from \"@rainbow-me/rainbowkit\";\n\nconst App = () => {\n  return (\n    <RainbowKitProvider\n      theme={darkTheme({\n        ...darkTheme.accentColors.purple,\n      })}\n    >\n      {/* Your App */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Recent Transactions in RainbowKitProvider\nDESCRIPTION: Configuration example showing how to enable the Recent Transactions feature by setting the showRecentTransactions option to true in the RainbowKitProvider component.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/recent-transactions.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitProvider } from '@rainbow-me/rainbowkit';\n\nconst App = () => {\n  return (\n    <RainbowKitProvider showRecentTransactions={true} {...etc}>\n      {/* ... */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Locale in RainbowKitProvider Component\nDESCRIPTION: Example showing how to specify a language preference for RainbowKit's localization feature by setting the locale prop on RainbowKitProvider.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<RainbowKitProvider locale=\"zh-CN\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi with RainbowKit Connectors\nDESCRIPTION: Shows how to pass custom wallet connectors to Wagmi's createConfig function and set up the application with RainbowKitProvider. This connects the custom wallet list to the application framework.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/custom-wallet-list.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { connectorsForWallets } from '@rainbow-me/rainbowkit';\nimport { createConfig } from 'wagmi';\n\nconst connectors = connectorsForWallets(/* ... */);\n\nconst config = createConfig({\n  connectors,\n  {/* Wagmi config */}\n});\n\nconst queryClient = new QueryClient();\n\nconst App = () => (\n  <WagmiProvider config={config}>\n    <QueryClientProvider client={queryClient}>\n      <RainbowKitProvider {...etc}>\n        {/* Your App */}\n      </RainbowKitProvider>\n    </QueryClientProvider>\n  </WagmiProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up RainbowKit SIWE Next-Auth Provider in App Component\nDESCRIPTION: Complete setup of the RainbowKit SIWE Next-Auth provider in a Next.js App component, including the proper nesting with SessionProvider and RainbowKitProvider.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit-siwe-next-auth/README.md#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitSiweNextAuthProvider } from '@rainbow-me/rainbowkit-siwe-next-auth';\nimport { RainbowKitProvider } from '@rainbow-me/rainbowkit';\nimport { SessionProvider } from 'next-auth/react';\nimport type { Session } from 'next-auth';\nimport { AppProps } from 'next/app';\nimport { WagmiConfig } from 'wagmi';\n\nexport default function App({\n  Component,\n  pageProps,\n}: AppProps<{\n  session: Session;\n}>) {\n  return (\n    <WagmiConfig {...etc}>\n      <SessionProvider refetchInterval={0} session={pageProps.session}>\n        <RainbowKitSiweNextAuthProvider>\n          <RainbowKitProvider {...etc}>\n            <Component {...pageProps} />\n          </RainbowKitProvider>\n        </RainbowKitSiweNextAuthProvider>\n      </SessionProvider>\n    </WagmiConfig>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MetaMask with Generic Fallback Wallets in RainbowKit\nDESCRIPTION: Example of displaying MetaMask along with generic fallback wallets using connectorsForWallets. This ensures MetaMask is available as a primary option with WalletConnect as a fallback.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/custom-wallet-list.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { connectorsForWallets } from '@rainbow-me/rainbowkit';\nimport {\n  metaMaskWallet,\n  walletConnectWallet,\n} from '@rainbow-me/rainbowkit/wallets';\n\nconst connectors = connectorsForWallets(\n  [\n    {\n      groupName: 'Recommended',\n      wallets: [metaMaskWallet, walletConnectWallet],\n    },\n  ],\n  { appName: 'RainbowKit App', projectId: 'YOUR_PROJECT_ID' },\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Chain Metadata with getDefaultConfig\nDESCRIPTION: This example shows how to customize chain metadata, including icon URL and background, using the getDefaultConfig function.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/de/docs/chains.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { mainnet, optimism } from 'wagmi/chains';\n\nconst config = getDefaultConfig({\n  chains: [\n    {\n      ...mainnet,\n      iconBackground: '#000',\n      iconUrl: 'https://example.com/icons/ethereum.png',\n    },\n    {\n      ...optimism,\n      iconBackground: '#ff0000',\n      iconUrl: 'https://example.com/icons/optimism.png',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Wallet with Conditional Visibility in TypeScript\nDESCRIPTION: Demonstrates how to create a custom wallet that hides itself based on the availability of other wallets, using the new 'hidden' function on the Wallet type.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nimport type Wallet from \"@rainbow-me/rainbowkit\";\nimport { InjectedConnector } from \"wagmi/connectors/injected\";\n\nconst myCustomWallet: Wallet = {\n  hidden: ({ wallets }) => {\n    return wallets.some(\n      (wallet) =>\n        wallet.installed &&\n        (wallet.connector instanceof InjectedConnector ||\n          wallet.id === \"coinbase\")\n    );\n  },\n  ...etc,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC Transport\nDESCRIPTION: Example of configuring custom RPC transport for production deployment using Alchemy or similar providers.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/installation.mdx#2025-04-14_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getDefaultConfig } from '@rainbow-me/rainbowkit';\nimport { http } from 'wagmi';\nimport { mainnet, sepolia } from 'wagmi/chains';\n\nconst config = getDefaultConfig({\n  appName: 'My RainbowKit App',\n  projectId: 'YOUR_PROJECT_ID',\n  chains: [mainnet, sepolia],\n  transports: {\n    [mainnet.id]: http('https://eth-mainnet.g.alchemy.com/v2/...'),\n    [sepolia.id]: http('https://eth-sepolia.g.alchemy.com/v2/...'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Trust Wallet Support in TypeScript\nDESCRIPTION: Example of adding Trust Wallet support to RainbowKit's wallet list, including browser extension support.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_30\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { trustWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst { wallets } = getDefaultWallets({ appName, projectId, chains });\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [trustWallet({ projectId, chains })],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Updating getDefaultWallets Return Type in RainbowKit\nDESCRIPTION: Shows the migration from using getDefaultWallets with connectorsForWallets to now using the connectors property returned directly from getDefaultWallets. This simplifies the setup process by removing the need for the connectorsForWallets function in most cases.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_47\n\nLANGUAGE: diff\nCODE:\n```\n-import { getDefaultWallets, connectorsForWallets } from '@rainbow-me/rainbowkit';\n+import { getDefaultWallets } from '@rainbow-me/rainbowkit';\n\n-const wallets = getDefaultWallets({\n+const { connectors } = getDefaultWallets({\n  /* ... */\n});\n\n-const connectors = connectorsForWallets(wallets);\n```\n\n----------------------------------------\n\nTITLE: Configuring SafePal Wallet with RainbowKit\nDESCRIPTION: Example of how to add SafePal wallet support to a RainbowKit implementation using getDefaultWallets and connectorsForWallets functions.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { safepalWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst { wallets } = getDefaultWallets({ appName, chains });\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [safepalWallet({ projectId, chains })],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Disclaimer to RainbowKitProvider (TSX)\nDESCRIPTION: This snippet shows how to add a custom disclaimer to the RainbowKitProvider. It defines a Disclaimer component that uses the provided Text and Link components to create a custom message with styled links. The disclaimer is then passed to the appInfo prop.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/es-419/docs/custom-app-info.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  RainbowKitProvider,\n  DisclaimerComponent,\n} from '@rainbow-me/rainbowkit';\n\nconst Disclaimer: DisclaimerComponent = ({ Text, Link }) => (\n  <Text>\n    By connecting your wallet, you agree to the{' '}\n    <Link href=\"https://termsofservice.xyz\">Terms of Service</Link> and\n    acknowledge you have read and understand the protocol{' '}\n    <Link href=\"https://disclaimer.xyz\">Disclaimer</Link>\n  </Text>\n);\n\nconst App = () => {\n  return (\n    <RainbowKitProvider\n      appInfo={{\n        appName: 'RainbowKit Demo',\n        disclaimer: Disclaimer,\n      }}\n      {...etc}\n    >\n      {/* ... */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing SIWE Message Options in RainbowKit\nDESCRIPTION: Example of how to customize the Sign-In with Ethereum message options by passing a function to the getSiweMessageOptions prop of RainbowKitSiweNextAuthProvider.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/ms/docs/authentication.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  RainbowKitSiweNextAuthProvider,\n  GetSiweMessageOptions,\n} from '@rainbow-me/rainbowkit-siwe-next-auth';\n\nconst getSiweMessageOptions: GetSiweMessageOptions = () => ({\n  statement: 'Sign in to my RainbowKit app',\n});\n\n<RainbowKitSiweNextAuthProvider\n  getSiweMessageOptions={getSiweMessageOptions}\n>\n  ...\n</RainbowKitSiweNextAuthProvider>;\n```\n\n----------------------------------------\n\nTITLE: Integrating Frame Wallet with RainbowKit in TypeScript\nDESCRIPTION: Example code showing how to integrate Frame wallet into a RainbowKit application by importing the wallet connector and adding it to the connectors list.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { frameWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst { wallets } = getDefaultWallets({ appName, chains });\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [frameWallet({ chains })],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Desktop Wallet Downloads in RainbowKit\nDESCRIPTION: Example of setting up desktop wallet download links and desktop wallet instructions for custom wallets in RainbowKit. Includes configuration for various operating systems and connection instructions.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  downloadUrls: {\n    windows: 'https://my-wallet/windows-app',\n    macos: 'https://my-wallet/macos-app',\n    linux: 'https://my-wallet/linux-app',\n    desktop: 'https://my-wallet/desktop-app',\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nreturn {\n  connector,\n  desktop: {\n    getUri,\n    instructions: {\n      learnMoreUrl: 'https://my-wallet/learn-more',\n      steps: [\n        // ...\n        {\n          description: 'A prompt will appear for you to approve the connection to My Wallet.'\n          step: 'connect',\n          title: 'Connect',\n        }\n      ]\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Chain in RainbowKitProvider using Chain ID\nDESCRIPTION: Example of how to set a specific initial chain for RainbowKit using a chain ID. This ensures that users will connect to this specific chain when they first interact with your dApp.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/es-419/docs/chains.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<RainbowKitProvider initialChain={1}>\n```\n\n----------------------------------------\n\nTITLE: Integrating Uniswap Wallet with RainbowKit in TypeScript\nDESCRIPTION: Example code showing how to integrate Uniswap wallet into a RainbowKit application by importing the wallet connector and adding it to the connectors list.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { uniswapWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst { wallets } = getDefaultWallets({ appName, chains });\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [uniswapWallet({ chains })],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet Connectors in TypeScript\nDESCRIPTION: Example of configuring wallet connectors for RainbowKit, including handling of injected wallets and fallbacks.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nconst connectors = connectorsForWallets([\n  {\n    groupName: \"Suggested\",\n    wallets: [\n      wallet.injected({ chains }),\n      wallet.rainbow({ chains }),\n      wallet.metaMask({ chains }),\n      wallet.coinbase({ appName: \"My RainbowKit App\", chains }),\n      wallet.metaMask({ chains }),\n    ],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Accessing Modal States in TypeScript/TSX\nDESCRIPTION: Example of using hooks to access the open state of different modals in RainbowKit.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nconst { connectModalOpen } = useConnectModal();\nconst { accountModalOpen } = useAccountModal();\nconst { chainModalOpen } = useChainModal();\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic App Info in RainbowKit\nDESCRIPTION: Demonstrates how to customize basic application information like app name and learn more URL using the RainbowKitProvider component\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/custom-app-info.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitProvider } from '@rainbow-me/rainbowkit';\n\nconst App = () => {\n  return (\n    <RainbowKitProvider\n      appInfo={{\n        appName: 'Rainbowkit Demo',\n        learnMoreUrl: 'https://learnaboutcryptowallets.example',\n      }}\n      {...etc}\n    >\n      {/* ... */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Emitting Events After State Changes in Solidity\nDESCRIPTION: Shows the proper pattern for emitting events immediately after state changes in Solidity functions. Events should be named in past tense and follow the state modification they represent.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/GUIDELINES.md#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _burn(address who, uint256 value) internal {\n    super._burn(who, value);\n    emit TokensBurned(who, value);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Compact Modal Size in RainbowKitProvider\nDESCRIPTION: This code snippet demonstrates how to set the modal size to 'compact' in RainbowKit. It uses the RainbowKitProvider component and sets the modalSize prop to 'compact'.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/modal-sizes.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitProvider } from '@rainbow-me/rainbowkit';\n\nexport const App = () => (\n  <RainbowKitProvider modalSize=\"compact\" {...etc}>\n    {/* Your App */}\n  </RainbowKitProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic ConnectButton Implementation in React\nDESCRIPTION: Basic implementation of the ConnectButton component for wallet connection functionality.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/connect-button.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConnectButton } from '@rainbow-me/rainbowkit';\n\nexport const YourApp = () => {\n  return <ConnectButton />;\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Recent Transactions in RainbowKitProvider\nDESCRIPTION: This snippet shows how to enable the showRecentTransactions option in the RainbowKitProvider component. This is required to display recent transactions in the account modal.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/zh-HK/docs/recent-transactions.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitProvider } from '@rainbow-me/rainbowkit';\n\nconst App = () => {\n  return (\n    <RainbowKitProvider showRecentTransactions={true} {...etc}>\n      {/* ... */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring RainbowKit Locale in React\nDESCRIPTION: Basic implementation of locale setting in RainbowKitProvider component. Shows how to specify a custom language for the dApp interface.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/localization.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitProvider } from '@rainbow-me/rainbowkit';\n\nexport const App = () => (\n  <RainbowKitProvider locale=\"zh-CN\" {...etc}>\n    {/* Your App */}\n  </RainbowKitProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Applying a Dark Theme in RainbowKit (TSX)\nDESCRIPTION: This snippet demonstrates how to apply the dark theme to RainbowKit using the RainbowKitProvider component.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/zh-TW/docs/theming.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitProvider, darkTheme } from '@rainbow-me/rainbowkit';\n\nexport const App = () => (\n  <RainbowKitProvider theme={darkTheme()} {...etc}>\n    {/* Your App */}\n  </RainbowKitProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Adding OKX Wallet Support in TypeScript\nDESCRIPTION: Example of adding OKX wallet support to RainbowKit's wallet list.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_35\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { okxWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst { wallets } = getDefaultWallets({ appName, chains });\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [okxWallet({ chains })],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Filtering Chains in RainbowKit Configuration\nDESCRIPTION: Example of filtering chains before passing them to RainbowKitProvider, useful for L2-only projects.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  chains: [, ...chains], // Omit first chain (mainnet), get the rest\n  provider,\n  webSocketProvider,\n} = configureChains(\n  [chain.mainnet, chain.polygon],\n  [\n    alchemyProvider({ apiKey: \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\" }),\n    publicProvider(),\n  ]\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring WalletConnect in TypeScript\nDESCRIPTION: Example of customizing WalletConnect options in RainbowKit, including QR code modal options.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nwalletConnectWallet(options: {\n  projectId: string;\n  chains: Chain[];\n  options?: {\n    qrcodeModalOptions?: {\n      desktopLinks?: string[];\n      mobileLinks?: string[];\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Chain Icons with getDefaultConfig\nDESCRIPTION: Example of how to customize chain icons when using the getDefaultConfig approach. This allows for setting custom iconUrl and iconBackground properties for each chain in your configuration.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/es-419/docs/chains.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { mainnet, optimism } from 'wagmi/chains';\n\nconst config = getDefaultConfig({\n  chains: [\n    {\n      ...mainnet,\n      iconBackground: '#000',\n      iconUrl: 'https://example.com/icons/ethereum.png',\n    },\n    {\n      ...optimism,\n      iconBackground: '#ff0000',\n      iconUrl: 'https://example.com/icons/optimism.png',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing RainbowKit Dependencies\nDESCRIPTION: Command to manually install RainbowKit and its peer dependencies including wagmi, viem, and @tanstack/react-query.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/installation.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rainbow-me/rainbowkit wagmi viem@2.x @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Configuring Okto Wallet with RainbowKit\nDESCRIPTION: Example of how to add Okto wallet support to a RainbowKit implementation using getDefaultWallets and connectorsForWallets functions.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { oktoWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst { wallets } = getDefaultWallets({ appName, projectId, chains });\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [oktoWallet({ projectId, chains })],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Hidden Balance ConnectButton\nDESCRIPTION: ConnectButton configuration to hide the balance display.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/connect-button.mdx#2025-04-14_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ConnectButton showBalance={__false__} />\n```\n\n----------------------------------------\n\nTITLE: Configuring CLV Wallet with RainbowKit\nDESCRIPTION: Example of how to add CLV wallet support to a RainbowKit implementation using getDefaultWallets and connectorsForWallets functions.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { clvWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst { wallets } = getDefaultWallets({ appName, chains });\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [clvWallet({ chains, projectId })],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Accent Colors with RainbowKit Themes\nDESCRIPTION: Demonstrates how to configure a custom accent color and foreground color with the RainbowKit theming system. This allows for greater customization of the UI appearance to match brand colors.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_50\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitProvider, darkTheme } from \"@rainbow-me/rainbowkit\";\n\nconst App = () => {\n  return (\n    <RainbowKitProvider\n      theme={darkTheme({\n        accentColor: \"#7b3fe4\",\n        accentColorForeground: \"white\",\n      })}\n    >\n      {/* Your App */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing RainbowKit Project using Package Managers\nDESCRIPTION: Command-line instructions for creating a new RainbowKit project using npm, pnpm, or yarn package managers. Each command initializes a new project with the latest version of RainbowKit.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/create-rainbowkit/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @rainbow-me/rainbowkit@latest\n# or\npnpm create @rainbow-me/rainbowkit@latest\n# or\nyarn create @rainbow-me/rainbowkit\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Server-Side with Next.js\nDESCRIPTION: Example of accessing the authenticated user's address server-side using getServerSideProps, getSession, and getToken from NextAuth.js, and passing it to the page component.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit-siwe-next-auth/README.md#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GetServerSideProps, InferGetServerSidePropsType } from 'next';\nimport { getSession } from 'next-auth/react';\nimport { getToken } from 'next-auth/jwt';\nimport React from 'react';\n\nexport const getServerSideProps: GetServerSideProps = async context => {\n  const session = await getSession(context);\n  const token = await getToken({ req: context.req });\n\n  const address = token?.sub ?? null;\n  // If you have a value for \"address\" here, your\n  // server knows the user is authenticated.\n\n  // You can then pass any data you want\n  // to the page component here.\n  return {\n    props: {\n      address,\n      session,\n    },\n  };\n};\n\ntype AuthenticatedPageProps = InferGetServerSidePropsType<\n  typeof getServerSideProps\n>;\n\nexport default function AuthenticatedPage({ address }: AuthenticatedPageProps) {\n  return address ? (\n    <h1>Authenticated as {address}</h1>\n  ) : (\n    <h1>Unauthenticated</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Wallets in RainbowKit with TypeScript\nDESCRIPTION: Shows how to import and use individual wallet connectors from RainbowKit to reduce bundle size through tree shaking.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connectorsForWallets } from '@rainbow-me/rainbowkit';\nimport {\n  injectedWallet,\n  rainbowWallet,\n  metaMaskWallet,\n  coinbaseWallet,\n  walletConnectWallet,\n} from '@rainbow-me/rainbowkit/wallets';\n\nconst wallets = [\n  injectedWallet({ chains }),\n  rainbowWallet({ chains }),\n  metaMaskWallet({ chains }),\n  coinbaseWallet({ chains, appName: 'My App' }),\n  walletConnectWallet({ chains }),\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Phantom Wallet Support in TypeScript\nDESCRIPTION: Example of adding Phantom wallet support to RainbowKit's wallet list.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_28\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { phantomWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst { wallets } = getDefaultWallets({ appName, projectId, chains });\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [phantomWallet({ chains })],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Avatar Component in RainbowKit with TypeScript\nDESCRIPTION: Example of creating a custom avatar component that displays either an ENS image if available or a colored background with a smiley face as fallback. The component is then provided to RainbowKitProvider through the avatar prop.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/pt-BR/docs/custom-avatars.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  RainbowKitProvider,\n  AvatarComponent,\n} from '@rainbow-me/rainbowkit';\nimport { generateColorFromAddress } from './utils';\n\nconst CustomAvatar: AvatarComponent = ({ address, ensImage, size }) => {\n  const color = generateColorFromAddress(address);\n  return ensImage ? (\n    <img\n      src={ensImage}\n      width={size}\n      height={size}\n      style={{ borderRadius: 999 }}\n    />\n  ) : (\n    <div\n      style={{\n        backgroundColor: color,\n        borderRadius: 999,\n        height: size,\n        width: size,\n      }}\n    >\n      :^)\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <RainbowKitProvider avatar={CustomAvatar} {...etc}>\n      {/* ... */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Chain in RainbowKitProvider\nDESCRIPTION: This snippet demonstrates how to set the initial chain for RainbowKit using either a chain ID or a chain object.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/de/docs/chains.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<RainbowKitProvider initialChain={1}>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<RainbowKitProvider initialChain={mainnet}>\n```\n\n----------------------------------------\n\nTITLE: Basic Theme Implementation in RainbowKit\nDESCRIPTION: Shows how to apply a basic dark theme to RainbowKit provider component.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/theming.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitProvider, darkTheme } from '@rainbow-me/rainbowkit';\n\nexport const App = () => (\n  <RainbowKitProvider theme={darkTheme()} {...etc}>\n    {/* Your App */}\n  </RainbowKitProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Zeal Wallet with RainbowKit\nDESCRIPTION: Example of how to add Zeal wallet support to a RainbowKit implementation using getDefaultWallets and connectorsForWallets functions.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { zealWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst { wallets } = getDefaultWallets({ appName, chains });\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [zealWallet({ chains })],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Chain in RainbowKitProvider using Chain Object\nDESCRIPTION: Example of how to set a specific initial chain for RainbowKit using a chain object. This approach allows for more convenient chain specification using imported chain objects.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/es-419/docs/chains.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<RainbowKitProvider initialChain={mainnet}>\n```\n\n----------------------------------------\n\nTITLE: Adding Rabby Wallet Support in TypeScript\nDESCRIPTION: Example of adding Rabby wallet support to RainbowKit's wallet list.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_29\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { rabbyWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst { wallets } = getDefaultWallets({ appName, chains });\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [rabbyWallet({ chains })],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Theme with Preset Accent Colors\nDESCRIPTION: Demonstrates using built-in accent color presets with the dark theme.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/theming.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitProvider, darkTheme } from '@rainbow-me/rainbowkit';\n\nconst App = () => {\n  return (\n    <RainbowKitProvider\n      theme={darkTheme({\n        ...darkTheme.accentColors.pink,\n      })}\n      {...etc}\n    >\n      {/* Your App */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Public Client with viem\nDESCRIPTION: Diff showing how to create a viem public client by extending the RainbowKit config to verify smart contract signatures.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit-siwe-next-auth/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nconst config = getDefaultConfig({\n  /* your config */\n});\n+ const publicClient = config.getClient().extend(publicActions);\n```\n\n----------------------------------------\n\nTITLE: Using Preset Accent Colors in RainbowKit Theme (TSX)\nDESCRIPTION: This snippet demonstrates how to use a preset accent color (pink in this case) when configuring a RainbowKit theme.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/zh-TW/docs/theming.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitProvider, darkTheme } from '@rainbow-me/rainbowkit';\n\nconst App = () => {\n  return (\n    <RainbowKitProvider\n      theme={darkTheme({\n        ...darkTheme.accentColors.pink,\n      })}\n      {...etc}\n    >\n      {/* Your App */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Activating Cool Mode in RainbowKitProvider\nDESCRIPTION: This code demonstrates how to enable cool mode via the coolMode property on the RainbowKitProvider component. When activated, this feature creates emoji explosions when a wallet is selected from the wallet list.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/fr/docs/cool-mode.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitProvider } from '@rainbow-me/rainbowkit';\n\nconst App = () => (\n  <RainbowKitProvider coolMode {...etc}>\n    {/* Your App */}\n  </RainbowKitProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring RainbowKit with SIWE and NextAuth in React\nDESCRIPTION: React component setup for integrating RainbowKit with Sign-In with Ethereum and NextAuth. It includes provider wrapping and session management.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/de/docs/authentication.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitSiweNextAuthProvider } from '@rainbow-me/rainbowkit-siwe-next-auth';\nimport { RainbowKitProvider } from '@rainbow-me/rainbowkit';\nimport { SessionProvider } from 'next-auth/react';\nimport type { Session } from 'next-auth';\nimport { AppProps } from 'next/app';\nimport { WagmiProvider } from 'wagmi';\nimport {\n  QueryClientProvider,\n  QueryClient,\n} from \"@tanstack/react-query\";\n\nconst queryClient = new QueryClient();\n\nexport default function App({\n  Component,\n  pageProps,\n}: AppProps<{\n  session: Session;\n}>) {\n  return (\n    <WagmiProvider {...etc}>\n      <SessionProvider refetchInterval={0} session={pageProps.session}>\n        <QueryClientProvider client={queryClient}>\n          <RainbowKitSiweNextAuthProvider>\n            <RainbowKitProvider {...etc}>\n              <Component {...pageProps} />\n            </RainbowKitProvider>\n          </RainbowKitSiweNextAuthProvider>\n        </QueryClientProvider>\n      </SessionProvider>\n    </WagmiProvider>;\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Rainbow Button Implementation\nDESCRIPTION: Example demonstrating how to use RainbowButton.Custom component for custom implementations and styling, providing render props for connection status and functionality.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbow-button/CHANGELOG.md#2025-04-14_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<RainbowButton.Custom>\n  {({ ready, connect }) => {\n    return (\n      <button type=\"button\" disabled={!ready} onClick={connect}>\n        Connect Rainbow\n      </button>\n    );\n  }}\n</RainbowButton.Custom>\n```\n\n----------------------------------------\n\nTITLE: Integrating Bifrost Wallet with RainbowKit in TypeScript\nDESCRIPTION: Example code showing how to integrate Bifrost wallet into a RainbowKit application by importing the wallet connector and adding it to the connectors list.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { bifrostWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst { wallets } = getDefaultWallets({ appName, chains });\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [bifrostWallet({ chains })],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Taho Wallet Support in TypeScript\nDESCRIPTION: Example of adding Taho wallet support to RainbowKit's wallet list.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_34\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { tahoWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst { wallets } = getDefaultWallets({ appName, chains });\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [tahoWallet({ chains })],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Migrating from Steakwallet to Omni Wallet in RainbowKit\nDESCRIPTION: Code diff showing how to migrate from the deprecated Steakwallet to Omni Wallet in RainbowKit v0.7.x and above.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/migration-guide.mdx#2025-04-14_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n-import { wallet } from '@rainbow-me/rainbowkit';\n+import { omniWallet } from '@rainbow-me/rainbowkit/wallets';\n\nconst wallets = [\n-  wallet.steak({ chains }),\n+  omniWallet({ chains }),\n];\n```\n\n----------------------------------------\n\nTITLE: Customizing Chain Icons with createConfig (TSX)\nDESCRIPTION: Illustrates how to customize chain icons using the createConfig method, defining a custom Chain type and setting iconBackground and iconUrl for mainnet and optimism chains.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/zh-CN/docs/chains.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { mainnet, optimism } from 'wagmi/chains';\nimport { Chain } from '@rainbow-me/rainbowkit';\n\nconst chains: readonly [Chain, ...Chain[]] = [\n  {\n    ...mainnet,\n    iconBackground: '#000',\n    iconUrl: 'https://example.com/icons/ethereum.png',\n  },\n  {\n    ...optimism,\n    iconBackground: '#ff0000',\n    iconUrl: 'https://example.com/icons/optimism.png',\n  },\n];\n\nconst config = createConfig({\n  chains,\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Message Verification to viem/siwe\nDESCRIPTION: Code showing how to adopt parseSiweMessage and verifyMessage from viem/siwe for the Verify handler instead of using siwe's SiweMessage verify method.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n- import { SiweMessage } from 'siwe';\n+ import { parseSiweMessage, type SiweMessage } from 'viem/siwe';\n\nconst { message, signature } = req.body;\n- const siweMessage = new SiweMessage(message);\n- const { success, error, data } = await siweMessage.verify({\n-  signature,\n- });\n+ const siweMessage = parseSiweMessage(message) as SiweMessage;\n+ const success = await publicClient.verifyMessage({\n+   address: siweMessage.address,\n+   message,\n+   signature,\n+ });\n\n- if (!success) throw error;\n+ if (!success) throw new Error('Invalid signature.');\n\n- if (data.nonce !== req.session.nonce)\n+ if (siweMessage.nonce !== req.session.nonce)\n+   return res.status(422).json({ message: 'Invalid nonce.' });\n```\n\n----------------------------------------\n\nTITLE: Integrating Bitski Wallet with RainbowKit in TypeScript\nDESCRIPTION: Example of how to add Bitski wallet support to RainbowKit using the new bitskiWallet function.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { bitskiWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [\n      argentWallet({ chains }),\n      trustWallet({ chains }),\n      bitskiWallet({ chains }),\n      ledgerWallet({ chains }),\n    ],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Wallet Connector in RainbowKit 0.3.x (JavaScript)\nDESCRIPTION: This snippet demonstrates how to update a custom wallet connector in RainbowKit 0.3.x by removing the chainId parameter and adjusting the configuration for RPC URLs.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/zh-TW/docs/migration-guide.mdx#2025-04-14_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { connectorsForWallets, wallet, Chain, Wallet } from '@rainbow-me/rainbowkit';\nimport { chain, configureChains } from 'wagmi';\nimport { alchemyProvider } from 'wagmi/providers/alchemy';\nimport { publicProvider } from 'wagmi/providers/public';\nimport { WalletConnectConnector } from 'wagmi/connectors/walletConnect';\n\nexport interface MyWalletOptions {\n  chains: Chain[];\n}\n\n-const chains = [chain.mainnet]\n+const { chains } = configureChains(\n+  [chain.mainnet],\n+  [\n+    alchemyProvider({ alchemyId: process.env.ALCHEMY_ID }),\n+    publicProvider(),\n+  ]\n+);\n\nexport const rainbow = ({ chains }: MyWalletOptions): Wallet => ({\n  ...\n- createConnector: ({ chainId }) => {\n+ createConnector: () => {\n-   const rpc = chains.reduce(\n-     (rpcUrlMap, chain) => ({\n-       ...rpcUrlMap,\n-       [chainId]: chain.rpcUrls.default,\n-     }),\n-     {}\n-   );\n    const connector = new WalletConnectConnector({\n      chains,\n      options: {\n        qrcode: false,\n-       rpc,\n      },\n    });\n  }\n  ...\n}\n\nconst connectors = connectorsForWallets([\n  {\n    groupName: 'Recommended',\n    wallets: [\n      rainbow({ chains }),\n    ],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Updating Theme Accent Color Usage in RainbowKit\nDESCRIPTION: Shows the migration path for using accent colors with the new theming API. The built-in accent color presets are now provided by an accentColors property on each theme function rather than being passed directly.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_49\n\nLANGUAGE: diff\nCODE:\n```\ndarkTheme({\n-  accentColor: 'purple',\n+  ...darkTheme.accentColors.purple,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Coinbase Wallet Smart Wallet Preference\nDESCRIPTION: Example showing how to configure the coinbaseWallet connector with a preference for Smart Wallet testing on sepolia and baseSepolia chains.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { coinbaseWallet } from \"@rainbow-me/rainbowkit/wallets\";\n\n// Enable Coinbase Smart Wallet for testing\ncoinbaseWallet.preference = \"smartWalletOnly\";\n\n// You must manually specify your wallet list with `wallets` in\n// `getDefaultConfig` or `connectorsForWallets` to assign the preference\nconst config = getDefaultConfig({\n  /* ... */\n  wallets: [\n    {\n      groupName: \"Popular\",\n      wallets: [coinbaseWallet],\n    },\n  ],\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating configureChains Import for RainbowKit v0.2.x\nDESCRIPTION: Code diff showing how to update the configureChains import from RainbowKit to wagmi for version 0.2.x.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/migration-guide.mdx#2025-04-14_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n- import { configureChains } from '@rainbow-me/rainbowkit';\n+ import { configureChains } from 'wagmi';\n```\n\n----------------------------------------\n\nTITLE: Customizing App Info in RainbowKitProvider (TSX)\nDESCRIPTION: This snippet demonstrates how to customize the app name and learn more URL in RainbowKitProvider using the appInfo prop. It sets a custom app name and a URL for the 'Learn More' button in the connection modal.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/es-419/docs/custom-app-info.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitProvider } from '@rainbow-me/rainbowkit';\n\nconst App = () => {\n  return (\n    <RainbowKitProvider\n      appInfo={{\n        appName: 'Rainbowkit Demo',\n        learnMoreUrl: 'https://learnaboutcryptowallets.example',\n      }}\n      {...etc}\n    >\n      {/* ... */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing RainbowKit SIWE NextAuth Package\nDESCRIPTION: Command to install the RainbowKit integration package for Sign-In with Ethereum and NextAuth.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/authentication.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rainbow-me/rainbowkit-siwe-next-auth\n```\n\n----------------------------------------\n\nTITLE: Customizing Transaction Confirmation Settings\nDESCRIPTION: This snippet shows how to customize the number of confirmations required for a transaction to be considered complete. It uses the useAddRecentTransaction hook with a custom confirmations value.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/zh-HK/docs/recent-transactions.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAddRecentTransaction } from '@rainbow-me/rainbowkit';\n\nexport default () => {\n  const addRecentTransaction = useAddRecentTransaction();\n\n  return (\n    <button\n      onClick={() => {\n        addRecentTransaction({\n          hash: '0x...',\n          description: '...',\n          confirmations: 100,\n        });\n      }}\n    >\n      Add recent transaction\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Wrapping Application with Required Providers\nDESCRIPTION: Example of wrapping the main application component with WagmiProvider, QueryClientProvider, and RainbowButtonProvider.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbow-button/README.md#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}>\n        <RainbowButtonProvider>\n          {/* Your App */}\n        </RainbowButtonProvider>\n      </QueryClientProvider>\n    </WagmiProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Rainbow Button\nDESCRIPTION: Example of using the RainbowButton.Custom component to create a customized connection button with custom styling and implementation.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/guides/rainbow-button.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<RainbowButton.Custom>\n  {({ ready, connect }) => {\n    return (\n      <button\n        type=\"button\"\n        disabled={!ready}\n        onClick={connect}\n      >\n        Connect Rainbow\n      </button>\n    );\n  }}\n</RainbowButton.Custom>\n```\n\n----------------------------------------\n\nTITLE: Integrating Coin98 Wallet with RainbowKit in TypeScript\nDESCRIPTION: Example code showing how to integrate Coin98 wallet into a RainbowKit application by importing the wallet connector and adding it to the connectors list. Requires projectId parameter.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { coin98Wallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst { wallets } = getDefaultWallets({ appName, chains });\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [coin98Wallet({ projectId, chains })],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Installing RainbowKit and Dependencies via npm\nDESCRIPTION: Commands to install RainbowKit v1, wagmi v1, and the viem peer dependency.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @rainbow-me/rainbowkit@^1 wagmi@^1\nnpm i viem\n```\n\n----------------------------------------\n\nTITLE: Importing RainbowKitSiweNextAuthProvider\nDESCRIPTION: Importing the provider component from the RainbowKit SIWE NextAuth package.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/authentication.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitSiweNextAuthProvider } from '@rainbow-me/rainbowkit-siwe-next-auth';\n```\n\n----------------------------------------\n\nTITLE: Upgrading RainbowKit and wagmi to v0.9.x\nDESCRIPTION: Command to upgrade RainbowKit to version 0.9.0 and wagmi to version 0.9.0 using npm.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/migration-guide.mdx#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @rainbow-me/rainbowkit@^0.9.0 wagmi@^0.9.0\n```\n\n----------------------------------------\n\nTITLE: RainbowKit Basic Imports\nDESCRIPTION: Essential imports for RainbowKit including styles, providers, and chain configurations from wagmi.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@rainbow-me/rainbowkit/styles.css';\n\nimport {\n  getDefaultConfig,\n  RainbowKitProvider,\n} from '@rainbow-me/rainbowkit';\n\nimport { WagmiProvider } from 'wagmi';\n\nimport {\n  mainnet,\n  polygon,\n  optimism,\n  arbitrum,\n  base,\n} from 'wagmi/chains';\n\nimport {\n  QueryClientProvider,\n  QueryClient,\n} from \"@tanstack/react-query\";\n```\n\n----------------------------------------\n\nTITLE: Installing RainbowKit SIWE NextAuth Package\nDESCRIPTION: Command to install the @rainbow-me/rainbowkit-siwe-next-auth package using npm.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/de/docs/authentication.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rainbow-me/rainbowkit-siwe-next-auth\n```\n\n----------------------------------------\n\nTITLE: Customizing SIWE Message Options in RainbowKit\nDESCRIPTION: Example showing how to customize the Sign-In with Ethereum message options by implementing a getSiweMessageOptions function.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/fr/docs/authentication.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  RainbowKitSiweNextAuthProvider,\n  GetSiweMessageOptions,\n} from '@rainbow-me/rainbowkit-siwe-next-auth';\n\nconst getSiweMessageOptions: GetSiweMessageOptions = () => ({\n  statement: 'Sign in to my RainbowKit app',\n});\n\n<RainbowKitSiweNextAuthProvider\n  getSiweMessageOptions={getSiweMessageOptions}\n>\n  ...\n</RainbowKitSiweNextAuthProvider>;\n```\n\n----------------------------------------\n\nTITLE: Migrating apiProvider.infura to infuraProvider for RainbowKit v0.2.x\nDESCRIPTION: Code diff showing how to replace RainbowKit's apiProvider.infura with wagmi's infuraProvider for v0.2.x.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/migration-guide.mdx#2025-04-14_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n+import { infuraProvider } from 'wagmi/providers/infura';\n\nconst { chains, provider } = configureChains(\n  [chain.mainnet, chain.polygon, chain.optimism, chain.arbitrum],\n- [apiProvider.infura(process.env.INFURA_ID)]\n+ [infuraProvider({ infuraId: process.env.INFURA_ID })]\n);\n```\n\n----------------------------------------\n\nTITLE: Installing RainbowKit SIWE NextAuth Package\nDESCRIPTION: Command to install the @rainbow-me/rainbowkit-siwe-next-auth package for integrating Sign-In with Ethereum and NextAuth in a RainbowKit project.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/ms/docs/authentication.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rainbow-me/rainbowkit-siwe-next-auth\n```\n\n----------------------------------------\n\nTITLE: Migrating to wagmi@0.3.x with RainbowKit\nDESCRIPTION: Demonstrates the changes needed to migrate from wagmi 0.2.x to 0.3.x when using RainbowKit. The key change is creating a wagmi client with createClient and passing it to WagmiProvider instead of passing configuration directly.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_53\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createClient, WagmiProvider } from \"wagmi\";\n\nconst wagmiClient = createClient({\n  autoConnect: true,\n  connectors,\n  provider,\n});\n\nconst App = () => {\n  return (\n    <WagmiProvider client={wagmiClient}>\n      <RainbowKitProvider chains={chains}>\n        {/* Your App */}\n      </RainbowKitProvider>\n    </WagmiProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using RainbowKit Modal Hooks in React\nDESCRIPTION: Example of using RainbowKit hooks to programmatically open connect, account, and chain modals in a React component.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_44\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  useConnectModal,\n  useAccountModal,\n  useChainModal,\n} from \"@rainbow-me/rainbowkit\";\n\nexport const YourApp = () => {\n  const { openConnectModal } = useConnectModal();\n  const { openAccountModal } = useAccountModal();\n  const { openChainModal } = useChainModal();\n\n  return (\n    <>\n      {openConnectModal && (\n        <button onClick={openConnectModal} type=\"button\">\n          Open Connect Modal\n        </button>\n      )}\n\n      {openAccountModal && (\n        <button onClick={openAccountModal} type=\"button\">\n          Open Account Modal\n        </button>\n      )}\n\n      {openChainModal && (\n        <button onClick={openChainModal} type=\"button\">\n          Open Chain Modal\n        </button>\n      )}\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing updated RainbowKit, siwe-next-auth, and viem packages\nDESCRIPTION: Command to install the required versions of RainbowKit, rainbowkit-siwe-next-auth, and viem packages for SIWE smart contract signature support.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit-siwe-next-auth/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @rainbow-me/rainbowkit@^2.2.0 rainbow-me/rainbowkit-siwe-next-auth@^0.5.0 viem@^2.12.0\n```\n\n----------------------------------------\n\nTITLE: Initializing ERC4626 vault decimals in Solidity\nDESCRIPTION: For existing ERC4626 contracts being upgraded to 4.8, a reinitializer function should be added to initialize the new vault token decimals variable.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/CHANGELOG.md#2025-04-14_snippet_9\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction migrateToV48() public reinitializer(2) {\n  __ERC4626_init(IERC20Upgradeable(asset()));\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating apiProvider.alchemy to alchemyProvider for RainbowKit v0.2.x\nDESCRIPTION: Code diff showing how to replace RainbowKit's apiProvider.alchemy with wagmi's alchemyProvider for v0.2.x.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/migration-guide.mdx#2025-04-14_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n- import { apiProvider } from '@rainbow-me/rainbowkit';\n+ import { alchemyProvider } from 'wagmi/providers/alchemy';\n\nconst { chains, provider } = configureChains(\n  [chain.mainnet, chain.polygon, chain.optimism, chain.arbitrum],\n- [apiProvider.alchemy(process.env.ALCHEMY_ID)]\n+ [alchemyProvider({ alchemyId: process.env.ALCHEMY_ID })]\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Chain in RainbowKitProvider (TSX)\nDESCRIPTION: Demonstrates how to set the initial chain for RainbowKit using either a chain ID or a chain object.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/zh-CN/docs/chains.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<RainbowKitProvider initialChain={1}>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<RainbowKitProvider initialChain={mainnet}>\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Chain in RainbowKitProvider\nDESCRIPTION: Demonstrates how to set the initial chain using either a chain ID or chain object in RainbowKitProvider.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/chains.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<RainbowKitProvider initialChain={1}>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<RainbowKitProvider initialChain={mainnet}>\n```\n\n----------------------------------------\n\nTITLE: Migrating Custom Wallet List for RainbowKit v0.7.x\nDESCRIPTION: Code diff showing how to migrate from the namespaced wallet imports to individual wallet imports for RainbowKit v0.7.x. This change reduces bundle size by allowing tree-shaking of unused wallets.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/migration-guide.mdx#2025-04-14_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n-import { connectorsForWallets, wallet } from '@rainbow-me/rainbowkit';\n+import { connectorsForWallets } from '@rainbow-me/rainbowkit';\n+import {\n+  injectedWallet,\n+  rainbowWallet,\n+  metaMaskWallet,\n+  coinbaseWallet,\n+  walletConnectWallet,\n+} from '@rainbow-me/rainbowkit/wallets';\n\nconst wallets = [\n-  wallet.injected({ chains }),\n-  wallet.rainbow({ chains }),\n-  wallet.metaMask({ chains }),\n-  wallet.coinbase({ chains, appName: 'My App' }),\n-  wallet.walletConnect({ chains }),\n+  injectedWallet({ chains }),\n+  rainbowWallet({ chains }),\n+  metaMaskWallet({ chains }),\n+  coinbaseWallet({ chains, appName: 'My App' }),\n+  walletConnectWallet({ chains }),\n];\n```\n\n----------------------------------------\n\nTITLE: Installing RainbowKit v2 with Required Dependencies\nDESCRIPTION: Command for upgrading RainbowKit, wagmi, and viem to their v2.x.x versions.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/fr/docs/migration-guide.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @rainbow-me/rainbowkit@2 wagmi@2 viem@2.x\n```\n\n----------------------------------------\n\nTITLE: Adopting Node.js Core Module Polyfills for Webpack Bundler Support\nDESCRIPTION: Code example showing the adoption of fs, net, and tls polyfills for better wagmi@1 and viem Webpack bundler support. These modules were previously polyfilled by ethers and are required by WalletConnect packages upstream.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-siwe-next-auth/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n371c988: Adopted `fs`, `net`, and `tls` polyfills for better `wagmi@1` and `viem` Webpack bundler support.\n\n  These modules are required by WalletConnect packages upstream, and were previously polyfilled by `ethers`. Reference the discussion [here](https://github.com/wagmi-dev/wagmi/issues/2300#issuecomment-1541425648).\n```\n\n----------------------------------------\n\nTITLE: Registering Recent Transactions with useAddRecentTransaction Hook (TSX)\nDESCRIPTION: This code demonstrates how to use the useAddRecentTransaction hook to register a new transaction with RainbowKit. It includes a button that, when clicked, adds a transaction with a specified hash and description.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/id/docs/recent-transactions.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAddRecentTransaction } from '@rainbow-me/rainbowkit';\n\nexport default () => {\n  const addRecentTransaction = useAddRecentTransaction();\n\n  return (\n    <button\n      onClick={() => {\n        addRecentTransaction({\n          hash: '0x...',\n          description: '...',\n        });\n      }}\n    >\n      Add recent transaction\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Updated Custom Error Replacements\nDESCRIPTION: Migration guide for replacing legacy error identifiers with new ones in version 5.1.0, affecting Address, Clones, and SafeERC20 contracts.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nAddress.FailedInnerCall -> Errors.FailedCall\nAddress.AddressInsufficientBalance -> Errors.InsufficientBalance\nClones.Create2InsufficientBalance -> Errors.InsufficientBalance\nClones.ERC1167FailedCreateClone -> Errors.FailedDeployment\nClones.Create2FailedDeployment -> Errors.FailedDeployment\n```\n\n----------------------------------------\n\nTITLE: Adding ERC4626 Tests Dependency\nDESCRIPTION: Command for adding the erc4626-tests repository as a dependency to the vault project\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/lib/erc4626-tests/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /path/to/your-erc4626-vault\n$ forge install a16z/erc4626-tests\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Query Dependency\nDESCRIPTION: Command to install the required TanStack Query peer dependency for Wagmi v2.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/zh-CN/guides/rainbowkit-wagmi-v2.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Importing Rainbow Button and Wagmi Components\nDESCRIPTION: Import statements for Rainbow Button styles, components, and Wagmi configuration.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbow-button/README.md#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@rainbow-me/rainbow-button/styles.css';\nimport {\n  RainbowConnector,\n  RainbowButtonProvider,\n} from '@rainbow-me/rainbow-button';\n...\nimport { createConfig, WagmiConfig } from 'wagmi';\n```\n\n----------------------------------------\n\nTITLE: Migrating Custom Authentication to viem/siwe\nDESCRIPTION: Code example showing how to adjust the createAuthenticationAdapter implementation when migrating from siwe/ethers to viem/siwe for custom authentication.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n- import { SiweMessage } from 'siwe';\n+ import { createSiweMessage } from 'viem/siwe';\n\ncreateAuthenticationAdapter({\n  getNonce: async () => {\n    const response = await fetch('/api/nonce');\n    return await response.text();\n  },\n\n  createMessage: ({ nonce, address, chainId }) => {\n-   return new SiweMessage({\n+   return createSiweMessage({\n      domain: window.location.host,\n      address,\n      statement: 'Sign in with Ethereum to the app.',\n      uri: window.location.origin,\n      version: '1',\n      chainId,\n      nonce,\n    });\n  },\n\n- getMessageBody: ({ message }) => {\n-   return message.prepareMessage();\n- },\n\n  /* ... */\n})\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Query Dependency for Wagmi v2\nDESCRIPTION: Command to install the required TanStack Query peer dependency for Wagmi v2 using npm.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/de/guides/rainbowkit-wagmi-v2.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes in Custom Error Names\nDESCRIPTION: Changes to custom error identifiers including replacing GovernorAlreadyOverridenVote, AccessControlNonRevokable, and Errors.FailedCall with updated versions.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nGovernorAlreadyOverridenVote -> GovernorAlreadyOverriddenVote\nAccessControlNonRevokable -> AccessControlNonRevocable\nErrors.FailedCall -> bubbled-up revert reason in Address.sendValue\n```\n\n----------------------------------------\n\nTITLE: Installing OpenZeppelin Contracts with npm\nDESCRIPTION: Command to install OpenZeppelin Contracts using npm package manager for Hardhat projects.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @openzeppelin/contracts\n```\n\n----------------------------------------\n\nTITLE: Setting Compact Modal Size in RainbowKitProvider (TSX)\nDESCRIPTION: This code snippet demonstrates how to set the modal size to 'compact' in the RainbowKitProvider component. It involves importing the RainbowKitProvider and adding the modalSize prop to the component.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/de/docs/modal-sizes.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitProvider } from '@rainbow-me/rainbowkit';\n\nexport const App = () => (\n  <RainbowKitProvider modalSize=\"compact\" {...etc}>\n    {/* Your App */}\n  </RainbowKitProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Return Value Naming Conventions in Solidity Functions\nDESCRIPTION: Demonstrates proper return value naming conventions in Solidity functions. Names should be included when there are multiple return values or when clarity is needed.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/GUIDELINES.md#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction expiration() public view returns (uint256) { // Good\nfunction hasRole() public view returns (bool isMember, uint32 currentDelay) { // Good\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC721 Token ID Tracking in Solidity\nDESCRIPTION: Example of using the renamed Counters library to track token IDs in an ERC721 contract. This demonstrates the API improvements made to the Counter library, now called Counters.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/CHANGELOG.md#2025-04-14_snippet_14\n\nLANGUAGE: Solidity\nCODE:\n```\nimport \"./Counters.sol\";\n\ncontract ERC721 {\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIds;\n\n    function _mint(address to, uint256 tokenId) internal {\n        // Minting logic\n        _tokenIds.increment();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rainbow Button and Dependencies with npm\nDESCRIPTION: Command for installing @rainbow-me/rainbow-button v2 along with its peer dependencies wagmi v2 and viem v2.x.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbow-button/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @rainbow-me/rainbow-button@2 wagmi@2 viem@2.x\n```\n\n----------------------------------------\n\nTITLE: Implementing EIP-165 Interface Support with supportsInterface\nDESCRIPTION: Example showing how to register EIP-165 interfaces by overriding the supportsInterface function rather than using the deprecated _registerInterface method from ERC165Storage.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n  return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing RainbowKit SIWE Next-Auth Package\nDESCRIPTION: Command to install the RainbowKit SIWE Next-Auth integration package via npm.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit-siwe-next-auth/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rainbow-me/rainbowkit-siwe-next-auth\n```\n\n----------------------------------------\n\nTITLE: Listing RainbowKit Documentation Resources in Markdown\nDESCRIPTION: This code snippet is a Markdown-formatted list of various RainbowKit documentation resources. It includes links to guides for installation, component usage, theming, authentication, and other features of RainbowKit.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms.txt#2025-04-14_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# rainbowkit.com llms.txt\n\n> RainbowKit offers a customizable wallet connection framework designed for developers, enabling them to easily integrate enhanced wallet experiences into their Web3 applications.\n\n- [RainbowKit Documentation](https://rainbowkit.com/docs): Provide documentation for integrating the RainbowKit wallet connection library in React applications.\n- [ConnectButton Documentation](https://rainbowkit.com/docs/connect-button): Guide for using and customizing the ConnectButton component in RainbowKit.\n- [RainbowKit Theming Guide](https://rainbowkit.com/docs/theming): Guide for customizing themes in RainbowKit.\n- [RainbowKit Migration Guide](https://rainbowkit.com/docs/migration-guide): Guide users on migrating RainbowKit with detailed steps and information on breaking changes.\n- [RainbowKit Documentation](https://rainbowkit.com/docs/introduction): To provide documentation on using RainbowKit for wallet connection in dapps with customization options.\n- [Cool Mode Instructions](https://rainbowkit.com/docs/cool-mode): Describes how to enable and use Cool Mode in RainbowKit for enhanced wallet selection animations.\n- [RainbowKit Modal Sizes](https://rainbowkit.com/docs/modal-sizes): To guide users on the usage of different modal sizes in RainbowKit.\n- [Wallet Integration for Developers](https://rainbowkit.com): Offering developers an easy, customizable way to integrate wallet connections into their applications.\n- [Custom Avatars Guide](https://rainbowkit.com/docs/custom-avatars): Guide on customizing user avatars in RainbowKit applications.\n- [Customizing RainbowKit Info](https://rainbowkit.com/docs/custom-app-info): Guide on customizing app information for RainbowKit integration.\n- [Authentication Guide](https://rainbowkit.com/docs/authentication): Guide to implement user authentication using RainbowKit with Sign-In with Ethereum and NextAuth.\n- [Custom Theme in RainbowKit](https://rainbowkit.com/docs/custom-theme): Guidance on creating and managing custom themes in RainbowKit.\n- [Localization Guide](https://rainbowkit.com/docs/localization): Guide for implementing localization in dApps using RainbowKit.\n- [WalletButton Documentation](https://rainbowkit.com/docs/wallet-button): Guide for using the WalletButton component in the RainbowKit for decentralized applications.\n- [Email Protection Info](https://rainbowkit.com/cdn-cgi/l/email-protection): Inform users about email protection and encourage Cloudflare sign-ups.\n- [Recent Transactions Feature](https://rainbowkit.com/docs/recent-transactions): Instructions for displaying recent transactions in RainbowKit's account modal.\n- [Chain Customization Guide](https://rainbowkit.com/docs/chains): Guide for customizing blockchain integration with RainbowKit.\n- [Modal Hooks Documentation](https://rainbowkit.com/docs/modal-hooks): Explains how to use modal hooks in RainbowKit for dApps.\n- [Custom Chains Guide](https://rainbowkit.com/docs/custom-chains): Guide to creating custom blockchain integrations for RainbowKit.\n- [RainbowKit Installation Guide](https://rainbowkit.com/docs/installation): Guide users on installing and setting up RainbowKit for their React applications.\n- [Custom Authentication Integration](https://rainbowkit.com/docs/custom-authentication): Guide for integrating custom authentication with RainbowKit.\n```\n\n----------------------------------------\n\nTITLE: Adding MEW Wallet Support to RainbowKit in TypeScript\nDESCRIPTION: Demonstrates how to integrate MEW (MyEtherWallet) wallet into RainbowKit using the new mewWallet function.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { mewWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [\n      argentWallet({ chains }),\n      trustWallet({ chains }),\n      mewWallet({ chains }),\n      ledgerWallet({ chains }),\n    ],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Initializing a New RainbowKit Project with Package Managers\nDESCRIPTION: Commands to scaffold a new RainbowKit + wagmi + Next.js application using different package managers (npm, pnpm, or yarn).\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @rainbow-me/rainbowkit@latest\n# or\npnpm create @rainbow-me/rainbowkit@latest\n# or\nyarn create @rainbow-me/rainbowkit\n```\n\n----------------------------------------\n\nTITLE: Migrating to generateSiweNonce Function\nDESCRIPTION: Code snippet demonstrating how to adopt the generateSiweNonce function from viem/siwe instead of siwe's generateNonce.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n- import { generateNonce } from 'siwe';\n+ import { generateSiweNonce } from 'viem/siwe';\n\n- req.session.nonce = generateNonce();\n+ req.session.nonce = generateSiweNonce();\n```\n\n----------------------------------------\n\nTITLE: Installing RainbowKit and Wagmi Dependencies\nDESCRIPTION: Command to upgrade RainbowKit to version 1.0.2 and Wagmi to version 1.2 using npm.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/guides/walletconnect-v2.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @rainbow-me/rainbowkit@^1.0.2 wagmi@^1.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Desig Wallet with RainbowKit\nDESCRIPTION: Example of how to add Desig wallet support to a RainbowKit implementation using getDefaultWallets and connectorsForWallets functions.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { desigWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst { wallets } = getDefaultWallets({ appName, chains, projectId });\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [desigWallet({ chains })],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Responsive Account Status ConnectButton\nDESCRIPTION: ConnectButton with responsive account status configuration for different screen sizes.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/connect-button.mdx#2025-04-14_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<ConnectButton\n  accountStatus={{\n    smallScreen: 'avatar',\n    largeScreen: 'full',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for RainbowKit Examples\nDESCRIPTION: Command to install the required dependencies before running any of the example projects.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Adding Dawn Wallet Support in TypeScript\nDESCRIPTION: Example of adding Dawn wallet support to RainbowKit's wallet list.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_36\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { dawnWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst { wallets } = getDefaultWallets({ appName, chains });\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [dawnWallet({ chains })],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Running RainbowKit Example in Development Mode\nDESCRIPTION: Command to start the development server for a RainbowKit example project.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Migrating NextAuth Authentication to viem/siwe\nDESCRIPTION: Code example showing how to migrate from siwe/ethers to viem/siwe for NextAuth authentication by adjusting the authorize implementation.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n- import { SiweMessage } from 'siwe';\n+ import {\n+   type SiweMessage,\n+   parseSiweMessage,\n+   validateSiweMessage,\n+ } from 'viem/siwe';\n\nexport function getAuthOptions(req: IncomingMessage): NextAuthOptions {\n  const providers = [\n    CredentialsProvider({\n      async authorize(credentials: any) {\n\n-       const siwe = new SiweMessage(\n-         JSON.parse(credentials?.message || '{}'),\n-       );\n+       const siweMessage = parseSiweMessage(\n+         credentials?.message,\n+       ) as SiweMessage;\n\n+       if (!validateSiweMessage({\n+         address: siweMessage?.address,\n+         message: siweMessage,\n+       })) {\n+         return null;\n+       }\n\n        /* ... */\n\n-       await siwe.verify({ signature: credentials?.signature || '' });\n+       const valid = await publicClient.verifyMessage({\n+         address: siweMessage?.address,\n+         message: credentials?.message,\n+         signature: credentials?.signature,\n+       });\n\n+       if (!valid) {\n+         return null;\n+       }\n      },\n      /* ... */\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading RainbowKit and wagmi to v0.10.x\nDESCRIPTION: Command to upgrade RainbowKit to version 0.10.0 and wagmi to version 0.10.0 using npm.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/migration-guide.mdx#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @rainbow-me/rainbowkit@^0.10.0 wagmi@^0.10.0\n```\n\n----------------------------------------\n\nTITLE: Installing Rainbow Button Dependencies\nDESCRIPTION: Command to install the Rainbow Button package and its required peer dependencies including Wagmi, Viem, and TanStack Query.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/guides/rainbow-button.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rainbow-me/rainbow-button wagmi viem@2.x @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Remix Configuration for RainbowKit\nDESCRIPTION: Configuration setup for using RainbowKit with Remix, including necessary polyfills.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@remix-run/dev').AppConfig} */\nexport default {\n  ignoredRouteFiles: [\"**/.*\"],\n  browserNodeBuiltinsPolyfill: {\n    modules: { buffer: true, events: true, http: true },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing RainbowKit 2.x.x Dependencies\nDESCRIPTION: Command to install the latest versions of RainbowKit, wagmi, and viem for the 2.x.x upgrade.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/migration-guide.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @rainbow-me/rainbowkit@2 wagmi@2 viem@2.x\n```\n\n----------------------------------------\n\nTITLE: Installing Viem Dependency for Wagmi v1\nDESCRIPTION: Command for installing the viem dependency required by Wagmi v1.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/fr/docs/migration-guide.mdx#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i viem\n```\n\n----------------------------------------\n\nTITLE: Configuring SubWallet with RainbowKit\nDESCRIPTION: Example of how to add SubWallet support to a RainbowKit implementation using getDefaultWallets and connectorsForWallets functions.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { subWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst { wallets } = getDefaultWallets({ appName, chains, projectId });\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [subWallet({ chains, projectId })],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Hardhat-compatible console.log in Forge Tests\nDESCRIPTION: Example showing how to use the standard console.log for Hardhat compatibility in Forge tests. Note that this has limitations with uint256 and int256 decoding in Forge traces.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/forge-std/README.md#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\n// import it indirectly via Test.sol\nimport \"forge-std/Test.sol\";\n// or directly import it\nimport \"forge-std/console.sol\";\n...\nconsole.log(someValue);\n```\n\n----------------------------------------\n\nTITLE: Updating Provider Configuration in RainbowKit 0.2.x (JavaScript)\nDESCRIPTION: This snippet demonstrates how to update provider configurations for Alchemy, Infura, JSON RPC, and public providers when migrating to RainbowKit 0.2.x.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/zh-TW/docs/migration-guide.mdx#2025-04-14_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n+ import { alchemyProvider } from 'wagmi/providers/alchemy';\n\nconst { chains, provider } = configureChains(\n  [chain.mainnet, chain.polygon, chain.optimism, chain.arbitrum],\n- [apiProvider.alchemy(process.env.ALCHEMY_ID)]\n+ [alchemyProvider({ alchemyId: process.env.ALCHEMY_ID })]\n);\n```\n\nLANGUAGE: diff\nCODE:\n```\n+import { infuraProvider } from 'wagmi/providers/infura';\n\nconst { chains, provider } = configureChains(\n  [chain.mainnet, chain.polygon, chain.optimism, chain.arbitrum],\n- [apiProvider.infura(process.env.INFURA_ID)]\n+ [infuraProvider({ infuraId: process.env.INFURA_ID })]\n);\n```\n\nLANGUAGE: diff\nCODE:\n```\n+ import { jsonRpcProvider } from 'wagmi/providers/jsonRpc';\n\nconst { chains, provider } = configureChains(\n  [chain.mainnet, chain.polygon],\n  [\n-   apiProvider.jsonRpc(chain => ({\n-     rpcUrl: `https://${chain.id}.example.com`,\n-   })),\n+   jsonRpcProvider({\n+     rpc: chain => ({\n+       http: `https://${chain.id}.example.com`,\n+     }),\n+   }),\n  ]\n);\n```\n\nLANGUAGE: diff\nCODE:\n```\n+ import { publicProvider } from 'wagmi/providers/public';\n\nconst { chains, provider } = configureChains(\n  [chain.mainnet, chain.polygon],\n- [apiProvider.fallback()]\n+ [publicProvider()]\n);\n```\n\n----------------------------------------\n\nTITLE: Using stdError for Testing Solidity Revert Errors\nDESCRIPTION: Example of using the stdError contract to test for arithmetic errors in Solidity contracts. This demonstrates how to use vm.expectRevert with predefined error codes.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/forge-std/README.md#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"forge-std/Test.sol\";\n\ncontract TestContract is Test {\n    ErrorsTest test;\n\n    function setUp() public {\n        test = new ErrorsTest();\n    }\n\n    function testExpectArithmetic() public {\n        vm.expectRevert(stdError.arithmeticError);\n        test.arithmeticError(10);\n    }\n}\n\ncontract ErrorsTest {\n    function arithmeticError(uint256 a) public {\n        a = a - 100;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies and Imports for RainbowKit 0.2.x (Bash/JavaScript)\nDESCRIPTION: This snippet shows how to update dependencies and modify imports when migrating to RainbowKit 0.2.x, including changes in configureChains and provider imports.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/zh-TW/docs/migration-guide.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @rainbow-me/rainbowkit@^0.2.0 wagmi@^0.4.2\n```\n\nLANGUAGE: diff\nCODE:\n```\n- import { configureChains } from '@rainbow-me/rainbowkit';\n+ import { configureChains } from 'wagmi';\n```\n\nLANGUAGE: diff\nCODE:\n```\n- import { apiProvider } from '@rainbow-me/rainbowkit';\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Query Dependency for Wagmi v2\nDESCRIPTION: Command for installing the new required dependency @tanstack/react-query for Wagmi v2.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/fr/docs/migration-guide.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Installing RainbowKit 0.11.x Dependencies\nDESCRIPTION: Command to install the latest versions of RainbowKit and wagmi for the 0.11.x upgrade.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/migration-guide.mdx#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @rainbow-me/rainbowkit@^0.11.0 wagmi@^0.11.0\n```\n\n----------------------------------------\n\nTITLE: Migrating Custom Wallet Connector in RainbowKit v0.3.x\nDESCRIPTION: Code diff showing how to update a custom wallet implementation for RainbowKit v0.3.x by removing the chainId parameter and RPC URL handling from createConnector as wagmi now handles this internally.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/migration-guide.mdx#2025-04-14_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\nimport { connectorsForWallets, wallet, Chain, Wallet } from '@rainbow-me/rainbowkit';\nimport { chain, configureChains } from 'wagmi';\nimport { alchemyProvider } from 'wagmi/providers/alchemy';\nimport { publicProvider } from 'wagmi/providers/public';\nimport { WalletConnectConnector } from 'wagmi/connectors/walletConnect';\n\nexport interface MyWalletOptions {\n  chains: Chain[];\n}\n\n-const chains = [chain.mainnet]\n+const { chains } = configureChains(\n+  [chain.mainnet],\n+  [\n+    alchemyProvider({ alchemyId: process.env.ALCHEMY_ID }),\n+    publicProvider(),\n+  ]\n+);\n\nexport const rainbow = ({ chains }: MyWalletOptions): Wallet => ({\n  ...\n- createConnector: ({ chainId }) => {\n+ createConnector: () => {\n-   const rpc = chains.reduce(\n-     (rpcUrlMap, chain) => ({\n-       ...rpcUrlMap,\n-       [chainId]: chain.rpcUrls.default,\n-     }),\n-     {}\n-   );\n    const connector = new WalletConnectConnector({\n      chains,\n      options: {\n        qrcode: false,\n-       rpc,\n      },\n    });\n  }\n  ...\n}\n\nconst connectors = connectorsForWallets([\n  {\n    groupName: 'Recommended',\n    wallets: [\n      rainbow({ chains }),\n    ],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Upgrading RainbowKit and wagmi to v0.8.x\nDESCRIPTION: Command to upgrade RainbowKit to version 0.8.0 and wagmi to version 0.8.0 using npm.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/migration-guide.mdx#2025-04-14_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @rainbow-me/rainbowkit@^0.8.0 wagmi@^0.8.0\n```\n\n----------------------------------------\n\nTITLE: Installing Rainbow Button Package with npm\nDESCRIPTION: Command for installing the @rainbow-me/rainbow-button package and its peer dependencies wagmi and viem.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbow-button/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rainbow-me/rainbow-button wagmi viem\n```\n\n----------------------------------------\n\nTITLE: Address-Only Account Status ConnectButton\nDESCRIPTION: ConnectButton configuration to display only the account address.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/connect-button.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ConnectButton accountStatus=\"__address__\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing SIWE Message Options\nDESCRIPTION: Example showing how to customize the Sign-In with Ethereum message by implementing the getSiweMessageOptions function and passing it to the provider.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/authentication.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  RainbowKitSiweNextAuthProvider,\n  GetSiweMessageOptions,\n} from '@rainbow-me/rainbowkit-siwe-next-auth';\n\nconst getSiweMessageOptions: GetSiweMessageOptions = () => ({\n  statement: 'Sign in to my RainbowKit app',\n});\n\n<RainbowKitSiweNextAuthProvider\n  getSiweMessageOptions={getSiweMessageOptions}\n>\n  ...\n</RainbowKitSiweNextAuthProvider>;\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server with HMR\nDESCRIPTION: Command to start the development server with Hot Module Replacement (HMR) functionality, making the application available at http://localhost:5173.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-react-router/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing RainbowKit and Wagmi v2 Dependencies\nDESCRIPTION: Command to install the latest versions of RainbowKit, Wagmi, and Viem using npm.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/zh-CN/guides/rainbowkit-wagmi-v2.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @rainbow-me/rainbowkit wagmi viem@2.x\n```\n\n----------------------------------------\n\nTITLE: Installing OpenZeppelin Contracts with Foundry\nDESCRIPTION: Command to install OpenZeppelin Contracts using Foundry's git-based package manager.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ forge install OpenZeppelin/openzeppelin-contracts\n```\n\n----------------------------------------\n\nTITLE: Running React App in Development Mode\nDESCRIPTION: This command starts the React application in development mode, allowing for real-time editing and error reporting.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-create-react-app/README.md#2025-04-14_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Updating ERC721Votes import statement in Solidity\nDESCRIPTION: The import statement for ERC721Votes should be updated to use the new non-draft version of the file.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/CHANGELOG.md#2025-04-14_snippet_11\n\nLANGUAGE: Solidity\nCODE:\n```\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Votes.sol\";\n```\n\n----------------------------------------\n\nTITLE: Accessing Modal Open Status in RainbowKit\nDESCRIPTION: This code snippet shows how to access the open status of each modal using the modal hooks. It's noted that relying on Wagmi hooks for wallet connection status is generally recommended over using these status booleans.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/modal-hooks.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst { connectModalOpen } = useConnectModal();\nconst { accountModalOpen } = useAccountModal();\nconst { chainModalOpen } = useChainModal();\n```\n\n----------------------------------------\n\nTITLE: Installing RainbowKit SIWE NextAuth Package\nDESCRIPTION: Command to install the RainbowKit Sign-In with Ethereum NextAuth integration package.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/fr/docs/authentication.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rainbow-me/rainbowkit-siwe-next-auth\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with NPM or Yarn\nDESCRIPTION: Commands to start the local development server for a Next.js application using either npm or yarn package managers. After running either command, the app will be available at http://localhost:3000.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Icon-Only Chain Status ConnectButton\nDESCRIPTION: ConnectButton configuration to display only the chain icon.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/connect-button.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<ConnectButton chainStatus=\"__icon__\" />\n```\n\n----------------------------------------\n\nTITLE: Interface Naming Convention in Solidity with I Prefix\nDESCRIPTION: Demonstrates the naming convention for interfaces in Solidity using a capital I prefix. This pattern helps clearly identify interfaces throughout the codebase.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/GUIDELINES.md#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\ninterface IERC777 {\n```\n\n----------------------------------------\n\nTITLE: Installing RainbowKit 0.12.x Dependencies\nDESCRIPTION: Command to install the latest versions of RainbowKit and wagmi for the 0.12.x upgrade.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/migration-guide.mdx#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @rainbow-me/rainbowkit@^0.12.0 wagmi@^0.12.0\n```\n\n----------------------------------------\n\nTITLE: Rendering Trust Wallet Icon in SVG\nDESCRIPTION: This SVG code renders the Trust Wallet icon, featuring a gradient blue shield design on a white background.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_16\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" width=\"28\" height=\"28\" viewBox=\"0 0 28 28\"><path fill=\"%23fff\" d=\"M0 0h28v28H0z\"/><path fill=\"%230500FF\" d=\"M6 7.583 13.53 5v17.882C8.15 20.498 6 15.928 6 13.345V7.583Z\"/><path fill=\"url(%23a)\" d=\"M22 7.583 13.53 5v17.882c6.05-2.384 8.47-6.954 8.47-9.537V7.583Z\"/><defs><linearGradient id=\"a\" x1=\"19.768\" x2=\"14.072\" y1=\"3.753\" y2=\"22.853\" gradientUnits=\"userSpaceOnUse\"><stop offset=\".02\" stop-color=\"%2300F\"/><stop offset=\".08\" stop-color=\"%230094FF\"/><stop offset=\".16\" stop-color=\"%2348FF91\"/><stop offset=\".42\" stop-color=\"%230094FF\"/><stop offset=\".68\" stop-color=\"%230038FF\"/><stop offset=\".9\" stop-color=\"%230500FF\"/></linearGradient></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: Updating ERC721 _beforeTokenTransfer hook signature in Solidity\nDESCRIPTION: The _beforeTokenTransfer hook in ERC721 now includes an additional batchSize parameter to support batch minting functionality.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/CHANGELOG.md#2025-04-14_snippet_8\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 tokenId,\n    uint256 batchSize\n) internal virtual override\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with npm or yarn\nDESCRIPTION: Commands to start the Next.js development server using either npm or yarn package managers. After running one of these commands, the application will be available at localhost:3000.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-app/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using either npm or yarn package managers. The server will run on localhost:3000.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-siwe-next-auth/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Applying Patches to Contracts in Bash\nDESCRIPTION: Command to apply necessary patches to the original contracts before verification. This creates simplified versions of contracts in the patched directory that are more suitable for formal verification.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/certora/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake -C certora apply\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Chain in RainbowKitProvider\nDESCRIPTION: This snippet demonstrates how to set the initial chain for RainbowKit using either a chain ID or a chain object.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/pt-BR/docs/chains.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<RainbowKitProvider initialChain={1}>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<RainbowKitProvider initialChain={mainnet}>\n```\n\n----------------------------------------\n\nTITLE: Building React App for Production\nDESCRIPTION: This command builds the React application for production, optimizing performance and generating deployable files.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-create-react-app/README.md#2025-04-14_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using either npm or yarn package managers. The server will run on localhost:3000 by default.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-rainbow-button/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Responsive Balance Display ConnectButton\nDESCRIPTION: ConnectButton with responsive balance display configuration for different screen sizes.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/connect-button.mdx#2025-04-14_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<ConnectButton\n  showBalance={{\n    smallScreen: false,\n    largeScreen: true,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Avatar-Only Account Status ConnectButton\nDESCRIPTION: ConnectButton configuration to display only the account avatar.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/connect-button.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ConnectButton accountStatus=\"__avatar__\" />\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for RainbowKit Project\nDESCRIPTION: Command to start the local development server for the RainbowKit + Next.js project. Running this command will start the server at http://localhost:3000.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/create-rainbowkit/generated-test-app/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Docker Deployment Commands\nDESCRIPTION: Commands for building and running Docker containers for the React Router application with different package managers (npm, pnpm, bun) and exposing the application on port 3000.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-react-router/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# For npm\ndocker build -t my-app .\n\n# For pnpm\ndocker build -f Dockerfile.pnpm -t my-app .\n\n# For bun\ndocker build -f Dockerfile.bun -t my-app .\n\n# Run the container\ndocker run -p 3000:3000 my-app\n```\n\n----------------------------------------\n\nTITLE: Updating EIP712 import statement in Solidity\nDESCRIPTION: The import statement for EIP712 should be updated to use the new non-draft version of the file.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/CHANGELOG.md#2025-04-14_snippet_10\n\nLANGUAGE: Solidity\nCODE:\n```\nimport \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\";\n```\n\n----------------------------------------\n\nTITLE: Installing Foundry and Dependencies\nDESCRIPTION: Commands for installing Foundry testing framework and adding forge-std dependency to an ERC4626 vault project\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/lib/erc4626-tests/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -L https://foundry.paradigm.xyz | bash\n\n$ cd /path/to/your-erc4626-vault\n$ forge install foundry-rs/forge-std\n```\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: Command to create an optimized production build of the React Router application.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-react-router/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Migrating from RainbowConnector to rainbowConnector in Wagmi v2\nDESCRIPTION: Code diff showing the migration from the old RainbowConnector class to the new rainbowConnector function in Wagmi v2, which requires appName and no longer accepts chains parameter.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbow-button/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n- import { RainbowConnector } from '@rainbow-me/rainbow-button'\n+ import { rainbowConnector } from '@rainbow-me/rainbow-button'\n  import { createConfig } from 'wagmi'\n\n  const config = createConfig({\n-   connectors: [new RainbowConnector({ chains, projectId })],\n+   connectors: [\n+     rainbowConnector({\n+       appName: \"RainbowKit demo\",\n+       projectId: \"YOUR_PROJECT_ID\",\n+     }),\n+   ],\n  })\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using either npm or yarn package managers. The server will run on localhost:3000 by default and enable hot-reloading for development.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-siwe-iron-session/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Installing RainbowKit SIWE NextAuth Package\nDESCRIPTION: Command to install the RainbowKit Sign-In with Ethereum NextAuth integration package using npm.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/es-419/docs/authentication.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rainbow-me/rainbowkit-siwe-next-auth\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Query Dependency with npm\nDESCRIPTION: Command for installing @tanstack/react-query, which is a required peer dependency with Wagmi v2.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbow-button/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Running Remix Application in Production\nDESCRIPTION: Command to start the Remix application in production mode after building it.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-remix/README.md#2025-04-14_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Customizing Chain Metadata with createConfig\nDESCRIPTION: This snippet illustrates how to customize chain metadata using the createConfig function, including type definitions for the Chain array.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/de/docs/chains.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { mainnet, optimism } from 'wagmi/chains';\nimport { Chain } from '@rainbow-me/rainbowkit';\n\nconst chains: readonly [Chain, ...Chain[]] = [\n  {\n    ...mainnet,\n    iconBackground: '#000',\n    iconUrl: 'https://example.com/icons/ethereum.png',\n  },\n  {\n    ...optimism,\n    iconBackground: '#ff0000',\n    iconUrl: 'https://example.com/icons/optimism.png',\n  },\n];\n\nconst config = createConfig({\n  chains,\n});\n```\n\n----------------------------------------\n\nTITLE: Hidden Chain Status ConnectButton\nDESCRIPTION: ConnectButton configuration to hide the chain status completely.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/connect-button.mdx#2025-04-14_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<ConnectButton chainStatus=\"__none__\" />\n```\n\n----------------------------------------\n\nTITLE: Marking Abstract Contracts in Solidity\nDESCRIPTION: Shows how to properly mark contracts that aren't intended to be used standalone as abstract. This ensures they must be inherited by other contracts to be used.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/GUIDELINES.md#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nabstract contract AccessControl is ..., {\n```\n\n----------------------------------------\n\nTITLE: Creating Gas Snapshots\nDESCRIPTION: Command to generate gas usage snapshots for smart contracts\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/README.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ forge snapshot\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Forge\nDESCRIPTION: Command to execute smart contract tests using Forge testing framework\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ forge test\n```\n\n----------------------------------------\n\nTITLE: Installing RainbowKit v1 with Wagmi v1\nDESCRIPTION: Command for upgrading RainbowKit and wagmi to their v1.x.x versions.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/fr/docs/migration-guide.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @rainbow-me/rainbowkit@^1 wagmi@^1\n```\n\n----------------------------------------\n\nTITLE: Testing Multi-Version Solidity Compatibility\nDESCRIPTION: Commands to verify code compatibility across different Solidity compiler versions\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/lib/forge-std/CONTRIBUTING.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nforge build --skip test --use solc:0.6.2\nforge build --skip test --use solc:0.6.12\nforge build --skip test --use solc:0.7.0\nforge build --skip test --use solc:0.7.6\nforge build --skip test --use solc:0.8.0\n```\n\n----------------------------------------\n\nTITLE: Using Cast Commands\nDESCRIPTION: Generic command structure for using Cast CLI tool for EVM interactions\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/README.md#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ cast <subcommand>\n```\n\n----------------------------------------\n\nTITLE: Accessing RainbowKit Modal State Values\nDESCRIPTION: This snippet shows how to access the boolean state values from RainbowKit modal hooks, which indicate whether each modal is currently open. These can be used for conditional logic in your application.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/es-419/docs/modal-hooks.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst { connectModalOpen } = useConnectModal();\nconst { accountModalOpen } = useAccountModal();\nconst { chainModalOpen } = useChainModal();\n```\n\n----------------------------------------\n\nTITLE: Chain-Name-Only Status ConnectButton\nDESCRIPTION: ConnectButton configuration to display only the chain name.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/connect-button.mdx#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ConnectButton chainStatus=\"__name__\" />\n```\n\n----------------------------------------\n\nTITLE: Upgrading RainbowKit and wagmi to v0.4.x\nDESCRIPTION: Command to upgrade RainbowKit to version 0.4.0 and wagmi to version 0.5.0 using npm.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/migration-guide.mdx#2025-04-14_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @rainbow-me/rainbowkit@^0.4.0 wagmi@^0.5.0\n```\n\n----------------------------------------\n\nTITLE: Updating Cheatcodes Using VM Script\nDESCRIPTION: Command to update cheatcodes in the Vm.sol file using the vm.py script\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/lib/forge-std/CONTRIBUTING.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/vm.py --from path/to/cheatcodes.json\n```\n\n----------------------------------------\n\nTITLE: Running Code Quality Checks in Foundry\nDESCRIPTION: Commands to verify code formatting and run tests before submitting changes to Foundry\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/lib/forge-std/CONTRIBUTING.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nforge fmt --check\nforge test -vvv\n```\n\n----------------------------------------\n\nTITLE: Migrating apiProvider.jsonRpc to jsonRpcProvider for RainbowKit v0.2.x\nDESCRIPTION: Code diff showing how to replace RainbowKit's apiProvider.jsonRpc with wagmi's jsonRpcProvider for v0.2.x.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/migration-guide.mdx#2025-04-14_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n+ import { jsonRpcProvider } from 'wagmi/providers/jsonRpc';\n\nconst { chains, provider } = configureChains(\n  [chain.mainnet, chain.polygon],\n  [\n-   apiProvider.jsonRpc(chain => ({\n-     rpcUrl: `https://${chain.id}.example.com`,\n-   })),\n+   jsonRpcProvider({\n+     rpc: chain => ({\n+       http: `https://${chain.id}.example.com`,\n+     }),\n+   }),\n  ]\n);\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for Next.js with RainbowKit\nDESCRIPTION: Commands to start the Next.js development server using either npm or yarn package managers. Running these commands will launch a local development environment accessible at localhost:3000.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-app-i18n/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Using console.log for Hardhat Compatibility in Solidity\nDESCRIPTION: Shows how to use the standard console.sol for debug logging with Hardhat compatibility. Note that due to a bug, uint256 and int256 types may not be properly decoded in Forge traces.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/lib/forge-std/README.md#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\n// import it indirectly via Test.sol\nimport \"forge-std/Test.sol\";\n// or directly import it\nimport \"forge-std/console.sol\";\n...\nconsole.log(someValue);\n```\n\n----------------------------------------\n\nTITLE: Using stdCheats for Address Pranking with ETH Balance\nDESCRIPTION: Example of using stdCheats for pranking addresses with ETH balance. The contract demonstrates both hoax and startHoax methods that combine pranking with setting ETH balance.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/forge-std/README.md#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"forge-std/Test.sol\";\n\n// Inherit the stdCheats\ncontract StdCheatsTest is Test {\n    Bar test;\n    function setUp() public {\n        test = new Bar();\n    }\n\n    function testHoax() public {\n        // we call `hoax`, which gives the target address\n        // eth and then calls `prank`\n        hoax(address(1337));\n        test.bar{value: 100}(address(1337));\n\n        // overloaded to allow you to specify how much eth to\n        // initialize the address with\n        hoax(address(1337), 1);\n        test.bar{value: 1}(address(1337));\n    }\n\n    function testStartHoax() public {\n        // we call `startHoax`, which gives the target address\n        // eth and then calls `startPrank`\n        //\n        // it is also overloaded so that you can specify an eth amount\n        startHoax(address(1337));\n        test.bar{value: 100}(address(1337));\n        test.bar{value: 100}(address(1337));\n        vm.stopPrank();\n        test.bar(address(this));\n    }\n}\n\ncontract Bar {\n    function bar(address expectedSender) public payable {\n        require(msg.sender == expectedSender, \"!prank\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding XDEFI Wallet Support in TypeScript\nDESCRIPTION: Example of adding XDEFI wallet support to RainbowKit's wallet list.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { xdefiWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst { wallets } = getDefaultWallets({ appName, projectId, chains });\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [xdefiWallet({ chains })],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Tokenary Wallet with RainbowKit\nDESCRIPTION: Example of how to add Tokenary wallet support to a RainbowKit implementation using getDefaultWallets and connectorsForWallets functions.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { tokenaryWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst { wallets } = getDefaultWallets({ appName, chains });\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [tokenaryWallet({ chains })],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Private and Internal Variables in Solidity with Underscore Prefix\nDESCRIPTION: Demonstrates the proper naming convention for private and internal state variables and functions in Solidity contracts by using an underscore prefix. This pattern helps distinguish visibility scope and follows project coding standards.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/GUIDELINES.md#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ncontract TestContract {\n    uint256 private _privateVar;\n    uint256 internal _internalVar;\n    function _testInternal() internal { ... }\n    function _testPrivate() private { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Using console2.log for Debugging in Forge Tests\nDESCRIPTION: Example showing how to use console2.log for debugging in Forge tests, which properly decodes logs in Forge traces. This is recommended over the standard console.log when not needing Hardhat compatibility.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/forge-std/README.md#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n// import it indirectly via Test.sol\nimport \"forge-std/Test.sol\";\n// or directly import it\nimport \"forge-std/console2.sol\";\n...\nconsole2.log(someValue);\n```\n\n----------------------------------------\n\nTITLE: Updating Libraries and Interfaces in Upgradeable Contracts\nDESCRIPTION: Code changes required when migrating upgradeable contracts to v5.0, where libraries and interfaces no longer need the Upgradeable suffix as they don't have storage concerns.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/CHANGELOG.md#2025-04-14_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n // Libraries\n-import {AddressUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\n+import {Address} from '@openzeppelin/contracts/utils/Address.sol';\n\n // Interfaces\n-import {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/interfaces/IERC20.sol';\n+import {IERC20} from '@openzeppelin/contracts/interfaces/IERC20.sol';\n```\n\n----------------------------------------\n\nTITLE: Defining RainbowKit SVG Icon\nDESCRIPTION: This SVG code defines the RainbowKit wallet interface icon. It uses various paths, fills, and gradients to create a complex visual representation of digital asset management features.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_21\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" fill=\"none\" viewBox=\"0 0 48 48\"><path fill=\"url(#a)\" d=\"M0 24C0 10.745 10.745 0 24 0s24 10.745 24 24-10.745 24-24 24S0 37.255 0 24Z\"/><path fill=\"url(#b)\" d=\"M48 24c0 13.255-10.745 24-24 24S0 37.255 0 24 10.745 0 24 0s24 10.745 24 24Zm-2.5 0c0 11.874-9.626 21.5-21.5 21.5S2.5 35.874 2.5 24 12.126 2.5 24 2.5 45.5 12.126 45.5 24Z\"/><path fill=\"#564CBF\" d=\"M25 33c0-2.8 0-4.2.545-5.27a5 5 0 0 1 2.185-2.185C28.8 25 30.2 25 33 25h2c2.8 0 4.2 0 5.27.545a5 5 0 0 1 2.185 2.185C43 28.8 43 30.2 43 33v2c0 2.8 0 4.2-.545 5.27a5 5 0 0 1-2.185 2.185C39.2 43 37.8 43 35 43h-2c-2.8 0-4.2 0-5.27-.545a5 5 0 0 1-2.185-2.185C25 39.2 25 37.8 25 35v-2Z\"/><path fill=\"#B9185C\" d=\"M32.313 13.438h-.563V14h.563v-.563Zm1.125 0h-.563V14h.563v-.563ZM34 13.438h-.563V14H34v-.563Zm1.125 0h-.563V14h.563v-.563ZM34 14h-3.375v.563H34V14Zm3.938 0h-3.376v.563h3.376V14Z\"/><path fill=\"#fff\" d=\"M32.313 13.438h-1.126V14h1.125v-.563Z\"/><path fill=\"#000\" d=\"M33.438 13.438h-1.126V14h1.126v-.563Z\"/><path fill=\"#fff\" d=\"M36.25 13.438h-1.125V14h1.125v-.563Z\"/><path fill=\"#000\" d=\"M37.375 13.438H36.25V14h1.125v-.563Z\"/><path fill=\"#fff\" fill-opacity=\".3\" fill-rule=\"evenodd\" d=\"M35 5.5h-2c-1.408 0-2.435 0-3.243.066-.803.066-1.347.194-1.8.424a4.5 4.5 0 0 0-1.966 1.967c-.231.453-.359.997-.424 1.8-.067.808-.067 1.835-.067 3.243v2c0 1.408 0 2.435.067 3.243.065.803.193 1.347.424 1.8a4.5 4.5 0 0 0 1.966 1.966c.453.231.997.359 1.8.424.808.067 1.835.067 3.243.067h2c1.408 0 2.435 0 3.243-.067.803-.065 1.347-.193 1.8-.424a4.5 4.5 0 0 0 1.967-1.966c.23-.453.358-.997.424-1.8.066-.808.066-1.835.066-3.243v-2c0-1.408 0-2.435-.066-3.243-.066-.803-.194-1.347-.424-1.8a4.5 4.5 0 0 0-1.967-1.967c-.453-.23-.997-.358-1.8-.424C37.435 5.5 36.408 5.5 35 5.5Zm-9.455 2.23C25 8.8 25 10.2 25 13v2c0 2.8 0 4.2.545 5.27a5 5 0 0 0 2.185 2.185C28.8 23 30.2 23 33 23h2c2.8 0 4.2 0 5.27-.545a5 5 0 0 0 2.185-2.185C43 19.2 43 17.8 43 15v-2c0-2.8 0-4.2-.545-5.27a5 5 0 0 0-2.185-2.185C39.2 5 37.8 5 35 5h-2c-2.8 0-4.2 0-5.27.545a5 5 0 0 0-2.185 2.185Z\" clip-rule=\"evenodd\"/><path fill=\"#564CBF\" d=\"M5 33c0-2.8 0-4.2.545-5.27a5 5 0 0 1 2.185-2.185C8.8 25 10.2 25 13 25h2c2.8 0 4.2 0 5.27.545a5 5 0 0 1 2.185 2.185C23 28.8 23 30.2 23 33v2c0 2.8 0 4.2-.545 5.27a5 5 0 0 1-2.185 2.185C19.2 43 17.8 43 15 43h-2c-2.8 0-4.2 0-5.27-.545a5 5 0 0 1-2.185-2.185C5 39.2 5 37.8 5 35v-2Z\"/><path fill=\"#FF66B3\" d=\"M11.188 26.125h.562v2.813h.563v-2.813h.562V29.5h.563v-3.375H14V29.5h.563v-3.375h.562v2.813h.563v-2.813h.562v2.25h.563v-1.688h.562v2.25h-.563v.563h-.562v.563h-1.125v.562h-2.813v-.563h-1.124V29.5h-.563v-.563h-.563v-2.25h.563v1.688h.563v-2.25Z\"/><path fill=\"#B3FFCC\" d=\"M13.438 30.625H14v.563h1.125v2.25h1.125v-.563h.563V34h-1.688v1.125h-.563v1.125h.563v5.625h-.563v-5.063H14v-.562h-1.688v-1.125h.563v.563H14v-1.126h.563V31.75h-1.126v-1.125Z\"/><path fill=\"#000\" fill-opacity=\".9\" d=\"M16.25 26.125h.563v2.25h-.563v-2.25Zm-5.625.563h.563v1.687h-.563v-1.688Z\"/><path fill=\"#000\" fill-opacity=\".9\" d=\"M17.938 26.688h-.563v2.25h-.563v.562h-.562v.563h.563V29.5h.562v-.563h.563v-2.25Zm-6.188-.563h.563v2.813h-.563v-2.813Zm3.938 0h-.563v2.813h.563v-2.813Zm-2.813 0h.563V29.5h-.563v-3.375Zm1.688 0H14V29.5h.563v-3.375Zm.562 3.938h.563v.562h-.563v-.563Zm-.562.562H14v.563h.563v-.563Zm.562.563h.563v2.25h-.563v-2.25Zm2.25 1.687h-.563V34h.563v-1.125ZM15.125 34h.563v1.125h-.563V34Zm0 2.25v-1.125h-.563v1.125h.563Zm0 0v5.625h.563V36.25h-.563Zm-2.25-1.125h.563v.563h-.563v-.563Z\"/><path fill=\"#fff\" fill-opacity=\".12\" fill-rule=\"evenodd\" d=\"M15 25.5h-2c-1.408 0-2.435 0-3.243.067-.803.065-1.347.193-1.8.424a4.5 4.5 0 0 0-1.967 1.966c-.23.453-.358.997-.424 1.8C5.5 30.565 5.5 31.592 5.5 33v2c0 1.408 0 2.435.066 3.243.066.803.194 1.347.424 1.8a4.5 4.5 0 0 0 1.967 1.967c.453.23.997.358 1.8.424.808.066 1.835.066 3.243.066h2c1.408 0 2.435 0 3.243-.066.803-.066 1.347-.194 1.8-.424a4.5 4.5 0 0 0 1.966-1.967c.231-.453.359-.997.424-1.8.067-.808.067-1.835.067-3.243v-2c0-1.408 0-2.435-.067-3.243-.065-.803-.193-1.347-.424-1.8a4.5 4.5 0 0 0-1.966-1.966c-.453-.231-.997-.359-1.8-.424-.808-.067-1.835-.067-3.243-.067Zm-9.455 2.23C5 28.8 5 30.2 5 33v2c0 2.8 0 4.2.545 5.27a5 5 0 0 0 2.185 2.185C8.8 43 10.2 43 13 43h2c2.8 0 4.2 0 5.27-.545a5 5 0 0 0 2.185-2.185C23 39.2 23 37.8 23 35v-2c0-2.8 0-4.2-.545-5.27a5 5 0 0 0-2.185-2.185C19.2 25 17.8 25 15 25h-2c-2.8 0-4.2 0-5.27.545a5 5 0 0 0-2.185 2.185Z\" clip-rule=\"evenodd\"/><path fill=\"#172D99\" d=\"M5 13c0-2.8 0-4.2.545-5.27A5 5 0 0 1 7.73 5.545C8.8 5 10.2 5 13 5h2c2.8 0 4.2 0 5.27.545a5 5 0 0 1 2.185 2.185C23 8.8 23 10.2 23 13v2c0 2.8 0 4.2-.545 5.27a5 5 0 0 1-2.185 2.185C19.2 23 17.8 23 15 23h-2c-2.8 0-4.2 0-5.27-.545a5 5 0 0 1-2.185-2.185C5 19.2 5 17.8 5 15v-2Z\"/><path fill=\"#00A2D8\" fill-rule=\"evenodd\" d=\"M11.3 13.1H8.6v.9h2.7v-.9Zm0 .9h1.8v.9h.9v1.8h-.9v-.9h-.9v-.9h-.9V14Zm2.7 2.7h.9v2.7H14v-2.7Z\" clip-rule=\"evenodd\"/><path fill=\"#00DE6F\" fill-rule=\"evenodd\" d=\"M11.3 12.2H8.6v.9h2.7v-.9Zm0 .9h1.8v.9h-1.8v-.9Zm2.7 1.8h-.9V14h.9v.9Zm.9 1.8H14v-1.8h.9v1.8Zm0 0h.9v2.7h-.9v-2.7Z\" clip-rule=\"evenodd\"/><path fill=\"#FFEB00\" fill-rule=\"evenodd\" d=\"M11.3 11.3H8.6v.9h2.7v-.9Zm0 .9h1.8v.9h-1.8v-.9ZM14 14h-.9v-.9h.9v.9Zm.9.9H14V14h.9v.9Zm.9 1.8h-.9v-1.8h.9v1.8Zm0 0h.9v2.7h-.9v-2.7Z\" clip-rule=\"evenodd\"/><path fill=\"#FA0\" fill-rule=\"evenodd\" d=\"M11.3 10.4H8.6v.9h2.7v-.9Zm0 .9H14v.9h.9v.9h.9v.9h.9v1.8h.9v3.6h-.9v-2.7h-.9v-1.8h-.9V14H14v-.9h-.9v-.9h-1.8v-.9Z\" clip-rule=\"evenodd\"/><path fill=\"#DD3D1C\" fill-rule=\"evenodd\" d=\"M12.2 9.5H8.6v.9h2.7v.9H14v.9h.9v.9h.9v.9h.9v1.8h.9v3.6h.9v-3.6h-.9V14h-.9v-.9h-.9v-.9h-.9v-.9H14v-.9h-1.8v-.9Z\" clip-rule=\"evenodd\"/><path fill=\"#C03078\" fill-rule=\"evenodd\" d=\"M12.2 8.6H8.6v.9h3.6v-.9Zm0 .9H14v.9h-1.8v-.9Zm5.4 4.5h-.9v-.9h-.9v-.9h-.9v-.9H14v-.9h1.8v.9h.9v.9h.9V14Zm.9 1.8h-.9V14h.9v1.8Zm0 0h.9v3.6h-.9v-3.6Z\" clip-rule=\"evenodd\"/><path fill=\"#fff\" fill-opacity=\".12\" fill-rule=\"evenodd\" d=\"M15 5.5h-2c-1.408 0-2.435 0-3.243.066-.803.066-1.347.194-1.8.424A4.5 4.5 0 0 0 5.99 7.957c-.23.453-.358.997-.424 1.8C5.5 10.565 5.5 11.592 5.5 13v2c0 1.408 0 2.435.066 3.243.066.803.194 1.347.424 1.8a4.5 4.5 0 0 0 1.967 1.966c.453.231.997.359 1.8.424.808.067 1.835.067 3.243.067h2c1.408 0 2.435 0 3.243-.067.803-.065 1.347-.193 1.8-.424a4.5 4.5 0 0 0 1.966-1.966c.231-.453.359-.997.424-1.8.067-.808.067-1.835.067-3.243v-2c0-1.408 0-2.435-.067-3.243-.065-.803-.193-1.347-.424-1.8a4.5 4.5 0 0 0-1.966-1.967c-.453-.23-.997-.358-1.8-.424C17.435 5.5 16.408 5.5 15 5.5ZM5.545 7.73C5 8.8 5 10.2 5 13v2c0 2.8 0 4.2.545 5.27a5 5 0 0 0 2.185 2.185C8.8 23 10.2 23 13 23h2c2.8 0 4.2 0 5.27-.545a5 5 0 0 0 2.185-2.185C23 19.2 23 17.8 23 15v-2c0-2.8 0-4.2-.545-5.27a5 5 0 0 0-2.185-2.185C19.2 5 17.8 5 15 5h-2c-2.8 0-4.2 0-5.27.545A5 5 0 0 0 5.545 7.73Z\" clip-rule=\"evenodd\"/><path fill=\"#99B3FF\" d=\"M48 36.5C48 42.851 42.851 48 36.5 48S25 42.851 25 36.5 30.149 25 36.5 25 48 30.149 48 36.5Z\"/><path fill=\"#000\" fill-opacity=\".12\" fill-rule=\"evenodd\" d=\"M36.5 47.5c6.075 0 11-4.925 11-11s-4.925-11-11-11-11 4.925-11 11 4.925 11 11 11Zm0 .5C42.851 48 48 42.851 48 36.5S42.851 25 36.5 25 25 30.149 25 36.5 30.149 48 36.5 48Z\" clip-rule=\"evenodd\"/><path fill=\"#7F91EB\" d=\"M46 36.5a9.5 9.5 0 1 1-19 0 9.5 9.5 0 0 1 19 0Z\"/><path fill=\"#000\" fill-opacity=\".12\" fill-rule=\"evenodd\" d=\"M36.5 45.5a9 9 0 1 0 0-18 9 9 0 0 0 0 18Zm0 .5a9.5 9.5 0 1 0 0-19 9.5 9.5 0 0 0 0 19Z\" clip-rule=\"evenodd\"/><path fill=\"#fff\" fill-opacity=\".2\" fill-rule=\"evenodd\" d=\"M31.912 37.037a.5.5 0 0 1-.139-.665l4.298-7.13a.5.5 0 0 1 .856 0l4.297 7.13a.5.5 0 0 1-.137.664.5.5 0 0 1 .119.698l-4.3 6.055a.5.5 0 0 1-.815 0l-4.297-6.055a.5.5 0 0 1 .118-.697Zm.29.408 4.297 2.538 4.3-2.538-4.3 6.055-4.297-6.055Zm0-.815 4.297-7.13 4.297 7.13-4.297 2.54-4.297-2.54Z\" clip-rule=\"evenodd\"/><path fill=\"#000\" fill-opacity=\".55\" d=\"M36.499 29.5v9.67l4.297-2.54-4.297-7.13Z\"/><path fill=\"#000\" fill-opacity=\".3\" d=\"m36.499 29.5-4.297 7.13 4.297 2.54V29.5Z\"/><path fill=\"#000\" fill-opacity=\".55\" d=\"M36.499 39.983V43.5l4.3-6.055-4.3 2.538Z\"/><path fill=\"#000\" fill-opacity=\".3\" d=\"M36.499 43.5v-3.517l-4.297-2.538 4.297 6.055Z\"/><path fill=\"#000\" d=\"m36.499 39.17 4.297-2.54-4.297-1.953v4.493Z\"/><path fill=\"#000\" fill-opacity=\".6\" d=\"m32.202 36.63 4.297 2.54v-4.493l-4.297 1.953Z\"/><defs><linearGradient id=\"a\" x1=\"24\" x2=\"24\" y1=\"0\" y2=\"48\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#174299\"/><stop offset=\"1\" stop-color=\"#001E59\"/></linearGradient><linearGradient id=\"b\" x1=\"24\" x2=\"24\" y1=\"0\" y2=\"48\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#D2D8E4\"/><stop offset=\"1\" stop-color=\"#C2C9D6\"/></linearGradient></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: Importing RainbowKit SIWE Next-Auth Provider\nDESCRIPTION: Importing the SIWE NextAuth provider component from the RainbowKit package.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit-siwe-next-auth/README.md#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitSiweNextAuthProvider } from '@rainbow-me/rainbowkit-siwe-next-auth';\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenZeppelin Contracts Remapping for Solidity\nDESCRIPTION: This configuration specifies a remapping rule for the Solidity compiler, directing imports from @openzeppelin/contracts/ path to the local contracts/ directory. This allows for easier dependency management and version control of OpenZeppelin contract libraries within the project.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/remappings.txt#2025-04-14_snippet_0\n\nLANGUAGE: Configuration\nCODE:\n```\n@openzeppelin/contracts/=contracts/\n```\n\n----------------------------------------\n\nTITLE: Integrating Enkrypt Wallet with RainbowKit in TypeScript\nDESCRIPTION: Example code showing how to integrate Enkrypt wallet into a RainbowKit application by importing the wallet connector and adding it to the connectors list.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { enkryptWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst { wallets } = getDefaultWallets({ appName, chains });\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [enkryptWallet({ chains })],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Custom Label ConnectButton Implementation\nDESCRIPTION: Example showing how to customize the ConnectButton label text.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/connect-button.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ConnectButton label=\"__Sign in__\" />\n```\n\n----------------------------------------\n\nTITLE: Migrating apiProvider.fallback to publicProvider for RainbowKit v0.2.x\nDESCRIPTION: Code diff showing how to replace RainbowKit's apiProvider.fallback with wagmi's publicProvider for v0.2.x.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/migration-guide.mdx#2025-04-14_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n+ import { publicProvider } from 'wagmi/providers/public';\n\nconst { chains, provider } = configureChains(\n  [chain.mainnet, chain.polygon],\n- [apiProvider.fallback()]\n+ [publicProvider()]\n);\n```\n\n----------------------------------------\n\nTITLE: Defining RainbowKit Logo SVG Structure\nDESCRIPTION: SVG markup defining the overall structure and visual elements of the RainbowKit project logo, including gradients, shapes, and icon components.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_7\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 48 48\">\n  <path fill=\"url(%23a)\" d=\"M1.09 5.46C0 7.6 0 10.4 0 16v16c0 5.6 0 8.4 1.09 10.54a10 10 0 0 0 4.37 4.37C7.6 48 10.4 48 16 48h16c1.752 0 3.23 0 4.5-.033 0-1.362 0-2.044.066-2.616a10 10 0 0 1 8.785-8.785c.572-.066 1.254-.066 2.616-.066C48 35.23 48 33.752 48 32V16c0-5.6 0-8.4-1.09-10.54a10 10 0 0 0-4.37-4.37C40.4 0 37.6 0 32 0H16C10.4 0 7.6 0 5.46 1.09a10 10 0 0 0-4.37 4.37Z\"/>\n  <!-- Additional paths and elements omitted for brevity -->\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Building Remix Application for Production\nDESCRIPTION: Command to build the Remix application for production deployment, creating optimized assets.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-remix/README.md#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Symbolic Testing Example for Token Contract\nDESCRIPTION: A complete example showing how to write symbolic tests for a token contract using Halmos cheatcodes. Demonstrates creating symbolic addresses, values, and testing for unauthorized token access.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/lib/halmos-cheatcodes/README.md#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n// import Halmos cheatcodes\nimport {SymTest} from \"halmos-cheatcodes/SymTest.sol\";\n\nimport {Test} from \"forge-std/Test.sol\";\n\nimport {Token} from \"/path/to/Token.sol\";\n\ncontract TokenTest is SymTest, Test {\n    Token token;\n\n    function setUp() public {\n        token = new Token();\n\n        // set the balances of three arbitrary accounts to arbitrary symbolic values\n        for (uint256 i = 0; i < 3; i++) {\n            address receiver = svm.createAddress('receiver'); // create a new symbolic address\n            uint256 amount = svm.createUint256('amount'); // create a new symbolic uint256 value\n            token.transfer(receiver, amount);\n        }\n    }\n\n    function checkBalanceUpdate() public {\n        // consider two arbitrary distinct accounts\n        address caller = svm.createAddress('caller'); // create a symbolic address\n        address others = svm.createAddress('others'); // create another symbolic address\n        vm.assume(others != caller); // assume the two addresses are different\n\n        // record their current balances\n        uint256 oldBalanceCaller = token.balanceOf(caller);\n        uint256 oldBalanceOthers = token.balanceOf(others);\n\n        // execute an arbitrary function call to the token from the caller\n        vm.prank(caller);\n        uint256 dataSize = 100; // the max calldata size for the public functions in the token\n        bytes memory data = svm.createBytes(dataSize, 'data'); // create a symbolic calldata\n        address(token).call(data);\n\n        // ensure that the caller cannot spend others' tokens\n        assert(token.balanceOf(caller) <= oldBalanceCaller); // cannot increase their own balance\n        assert(token.balanceOf(others) >= oldBalanceOthers); // cannot decrease others' balance\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remix Polyfills\nDESCRIPTION: Remix configuration for polyfilling required Node.js built-in modules.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/installation.mdx#2025-04-14_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n/** @type {import('@remix-run/dev').AppConfig} */\nexport default {\n  ignoredRouteFiles: [\"**/.*\"],\n  browserNodeBuiltinsPolyfill: {\n    modules: { buffer: true, events: true, http: true },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Formal Verification Tool Versions for RainbowKit\nDESCRIPTION: This snippet defines the required versions of Certora CLI and Halmos for formal verification in the RainbowKit project. The file is named 'fv-requirements.txt' to prevent Netlify from using an incompatible Python version during builds.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/fv-requirements.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncertora-cli==4.13.1\n# File uses a custom name (fv-requirements.txt) so that it isn't picked by Netlify's build\n# whose latest Python version is 0.3.8, incompatible with most recent versions of Halmos\nhalmos==0.2.6\n```\n\n----------------------------------------\n\nTITLE: Rainbow Wallet SVG Icon Implementation\nDESCRIPTION: SVG path definitions that create the Rainbow wallet icon. The code defines various colored components including path elements with different fill colors and opacity settings to create the wallet interface with pixelated elements and cryptocurrency symbols.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_8\n\nLANGUAGE: SVG\nCODE:\n```\n<path fill=\"%23fff\" d=\"M32.313 13.438h-1.126V14h1.125v-.563Z\"/><path fill=\"%23000\" d=\"M33.438 13.438h-1.126V14h1.126v-.563Z\"/><path fill=\"%23B9185C\" d=\"M34 13.438h-.563V14H34v-.563Zm1.125 0h-.563V14h.563v-.563Z\"/><path fill=\"%23fff\" d=\"M36.25 13.438h-1.125V14h1.125v-.563Z\"/><path fill=\"%23000\" d=\"M37.375 13.438H36.25V14h1.125v-.563Z\"/><path fill=\"%23B9185C\" d=\"M37.938 13.438h-.563V14h.563v-.563ZM34 14h-3.375v.563H34V14Zm3.938 0h-3.376v.563h3.376V14Z\"/><path fill=\"%23fff\" fill-opacity=\".3\" fill-rule=\"evenodd\" d=\"M35 5.5h-2c-1.408 0-2.435 0-3.243.066-.803.066-1.347.194-1.8.424a4.5 4.5 0 0 0-1.966 1.967c-.231.453-.359.997-.424 1.8-.067.808-.067 1.835-.067 3.243v2c0 1.408 0 2.435.067 3.243.065.803.193 1.347.424 1.8a4.5 4.5 0 0 0 1.966 1.966c.453.231.997.359 1.8.424.808.067 1.835.067 3.243.067h2c1.408 0 2.435 0 3.243-.067.803-.065 1.347-.193 1.8-.424a4.5 4.5 0 0 0 1.967-1.966c.23-.453.358-.997.424-1.8.066-.808.066-1.835.066-3.243v-2c0-1.408 0-2.435-.066-3.243-.066-.803-.194-1.347-.424-1.8a4.5 4.5 0 0 0-1.967-1.967c-.453-.23-.997-.358-1.8-.424C37.435 5.5 36.408 5.5 35 5.5Zm-9.455 2.23C25 8.8 25 10.2 25 13v2c0 2.8 0 4.2.545 5.27a5 5 0 0 0 2.185 2.185C28.8 23 30.2 23 33 23h2c2.8 0 4.2 0 5.27-.545a5 5 0 0 0 2.185-2.185C43 19.2 43 17.8 43 15v-2c0-2.8 0-4.2-.545-5.27a5 5 0 0 0-2.185-2.185C39.2 5 37.8 5 35 5h-2c-2.8 0-4.2 0-5.27.545a5 5 0 0 0-2.185 2.185Z\" clip-rule=\"evenodd\"/><path fill=\"%23564CBF\" d=\"M5 33c0-2.8 0-4.2.545-5.27a5 5 0 0 1 2.185-2.185C8.8 25 10.2 25 13 25h2c2.8 0 4.2 0 5.27.545a5 5 0 0 1 2.185 2.185C23 28.8 23 30.2 23 33v2c0 2.8 0 4.2-.545 5.27a5 5 0 0 1-2.185 2.185C19.2 43 17.8 43 15 43h-2c-2.8 0-4.2 0-5.27-.545a5 5 0 0 1-2.185-2.185C5 39.2 5 37.8 5 35v-2Z\"/><path fill=\"%23FF66B3\" d=\"M11.188 26.125h.562v2.813h.563v-2.813h.562V29.5h.563v-3.375H14V29.5h.563v-3.375h.562v2.813h.563v-2.813h.562v2.25h.563v-1.688h.562v2.25h-.563v.563h-.562v.563h-1.125v.562h-2.813v-.563h-1.124V29.5h-.563v-.563h-.563v-2.25h.563v1.688h.563v-2.25Z\"/><path fill=\"%23B3FFCC\" d=\"M13.438 30.625H14v.563h1.125v2.25h1.125v-.563h.563V34h-1.688v1.125h-.563v1.125h.563v5.625h-.563v-5.063H14v-.562h-1.688v-1.125h.563v.563H14v-1.126h.563V31.75h-1.126v-1.125Z\"/><path fill=\"%23000\" fill-opacity=\".9\" d=\"M16.25 26.125h.563v2.25h-.563v-2.25Zm-5.625.563h.563v1.687h-.563v-1.688Z\"/><path fill=\"%23000\" fill-opacity=\".9\" d=\"M17.938 26.688h-.563v2.25h-.563v.562h-.562v.563h.563V29.5h.562v-.563h.563v-2.25Zm-6.188-.563h.563v2.813h-.563v-2.813Zm3.938 0h-.563v2.813h.563v-2.813Zm-2.813 0h.563V29.5h-.563v-3.375Zm1.688 0H14V29.5h.563v-3.375Zm.562 3.938h.563v.562h-.563v-.563Zm-.562.562H14v.563h.563v-.563Zm.562.563h.563v2.25h-.563v-2.25Zm2.25 1.687h-.563V34h.563v-1.125ZM15.125 34h.563v1.125h-.563V34Zm0 2.25v-1.125h-.563v1.125h.563Zm0 0v5.625h.563V36.25h-.563Zm-2.25-1.125h.563v.563h-.563v-.563Z\"/><path fill=\"%23fff\" fill-opacity=\".12\" fill-rule=\"evenodd\" d=\"M15 25.5h-2c-1.408 0-2.435 0-3.243.067-.803.065-1.347.193-1.8.424a4.5 4.5 0 0 0-1.967 1.966c-.23.453-.358.997-.424 1.8C5.5 30.565 5.5 31.592 5.5 33v2c0 1.408 0 2.435.066 3.243.066.803.194 1.347.424 1.8a4.5 4.5 0 0 0 1.967 1.967c.453.23.997.358 1.8.424.808.066 1.835.066 3.243.066h2c1.408 0 2.435 0 3.243-.066.803-.066 1.347-.194 1.8-.424a4.5 4.5 0 0 0 1.966-1.967c.231-.453.359-.997.424-1.8.067-.808.067-1.835.067-3.243v-2c0-1.408 0-2.435-.067-3.243-.065-.803-.193-1.347-.424-1.8a4.5 4.5 0 0 0-1.966-1.966c-.453-.231-.997-.359-1.8-.424-.808-.067-1.835-.067-3.243-.067Zm-9.455 2.23C5 28.8 5 30.2 5 33v2c0 2.8 0 4.2.545 5.27a5 5 0 0 0 2.185 2.185C8.8 43 10.2 43 13 43h2c2.8 0 4.2 0 5.27-.545a5 5 0 0 0 2.185-2.185C23 39.2 23 37.8 23 35v-2c0-2.8 0-4.2-.545-5.27a5 5 0 0 0-2.185-2.185C19.2 25 17.8 25 15 25h-2c-2.8 0-4.2 0-5.27.545a5 5 0 0 0-2.185 2.185Z\" clip-rule=\"evenodd\"/><path fill=\"%23172D99\" d=\"M5 13c0-2.8 0-4.2.545-5.27A5 5 0 0 1 7.73 5.545C8.8 5 10.2 5 13 5h2c2.8 0 4.2 0 5.27.545a5 5 0 0 1 2.185 2.185C23 8.8 23 10.2 23 13v2c0 2.8 0 4.2-.545 5.27a5 5 0 0 1-2.185 2.185C19.2 23 17.8 23 15 23h-2c-2.8 0-4.2 0-5.27-.545a5 5 0 0 1-2.185-2.185C5 19.2 5 17.8 5 15v-2Z\"/><path fill=\"%2300A2D8\" fill-rule=\"evenodd\" d=\"M11.3 13.1H8.6v.9h2.7v-.9Zm0 .9h1.8v.9h.9v1.8h-.9v-.9h-.9v-.9h-.9V14Zm2.7 2.7h.9v2.7H14v-2.7Z\" clip-rule=\"evenodd\"/><path fill=\"%2300DE6F\" fill-rule=\"evenodd\" d=\"M11.3 12.2H8.6v.9h2.7v-.9Zm0 .9h1.8v.9h-1.8v-.9Zm2.7 1.8h-.9V14h.9v.9Zm.9 1.8H14v-1.8h.9v1.8Zm0 0h.9v2.7h-.9v-2.7Z\" clip-rule=\"evenodd\"/><path fill=\"%23FFEB00\" fill-rule=\"evenodd\" d=\"M11.3 11.3H8.6v.9h2.7v-.9Zm0 .9h1.8v.9h-1.8v-.9ZM14 14h-.9v-.9h.9v.9Zm.9.9H14V14h.9v.9Zm.9 1.8h-.9v-1.8h.9v1.8Zm0 0h.9v2.7h-.9v-2.7Z\" clip-rule=\"evenodd\"/><path fill=\"%23FA0\" fill-rule=\"evenodd\" d=\"M11.3 10.4H8.6v.9h2.7v-.9Zm0 .9H14v.9h.9v.9h.9v.9h.9v1.8h.9v3.6h-.9v-2.7h-.9v-1.8h-.9V14H14v-.9h-.9v-.9h-1.8v-.9Z\" clip-rule=\"evenodd\"/><path fill=\"%23DD3D1C\" fill-rule=\"evenodd\" d=\"M12.2 9.5H8.6v.9h2.7v.9H14v.9h.9v.9h.9v.9h.9v1.8h.9v3.6h.9v-3.6h-.9V14h-.9v-.9h-.9v-.9h-.9v-.9H14v-.9h-1.8v-.9Z\" clip-rule=\"evenodd\"/><path fill=\"%23C03078\" fill-rule=\"evenodd\" d=\"M12.2 8.6H8.6v.9h3.6v-.9Zm0 .9H14v.9h-1.8v-.9Zm5.4 4.5h-.9v-.9h-.9v-.9h-.9v-.9H14v-.9h1.8v.9h.9v.9h.9V14Zm.9 1.8h-.9V14h.9v1.8Zm0 0h.9v3.6h-.9v-3.6Z\" clip-rule=\"evenodd\"/><path fill=\"%23fff\" fill-opacity=\".12\" fill-rule=\"evenodd\" d=\"M15 5.5h-2c-1.408 0-2.435 0-3.243.066-.803.066-1.347.194-1.8.424A4.5 4.5 0 0 0 5.99 7.957c-.23.453-.358.997-.424 1.8C5.5 10.565 5.5 11.592 5.5 13v2c0 1.408 0 2.435.066 3.243.066.803.194 1.347.424 1.8a4.5 4.5 0 0 0 1.967 1.966c.453.231.997.359 1.8.424.808.067 1.835.067 3.243.067h2c1.408 0 2.435 0 3.243-.067.803-.065 1.347-.193 1.8-.424a4.5 4.5 0 0 0 1.966-1.966c.231-.453.359-.997.424-1.8.067-.808.067-1.835.067-3.243v-2c0-1.408 0-2.435-.067-3.243-.065-.803-.193-1.347-.424-1.8a4.5 4.5 0 0 0-1.966-1.967c-.453-.23-.997-.358-1.8-.424C17.435 5.5 16.408 5.5 15 5.5ZM5.545 7.73C5 8.8 5 10.2 5 13v2c0 2.8 0 4.2.545 5.27a5 5 0 0 0 2.185 2.185C8.8 23 10.2 23 13 23h2c2.8 0 4.2 0 5.27-.545a5 5 0 0 0 2.185-2.185C23 19.2 23 17.8 23 15v-2c0-2.8 0-4.2-.545-5.27a5 5 0 0 0-2.185-2.185C19.2 5 17.8 5 15 5h-2c-2.8 0-4.2 0-5.27.545A5 5 0 0 0 5.545 7.73Z\" clip-rule=\"evenodd\"/><path fill=\"%2399B3FF\" d=\"M48 36.5C48 42.851 42.851 48 36.5 48S25 42.851 25 36.5 30.149 25 36.5 25 48 30.149 48 36.5Z\"/><path fill=\"%23000\" fill-opacity=\".12\" fill-rule=\"evenodd\" d=\"M36.5 47.5c6.075 0 11-4.925 11-11s-4.925-11-11-11-11 4.925-11 11 4.925 11 11 11Zm0 .5C42.851 48 48 42.851 48 36.5S42.851 25 36.5 25 25 30.149 25 36.5 30.149 48 36.5 48Z\" clip-rule=\"evenodd\"/><path fill=\"%237F91EB\" d=\"M46 36.5a9.5 9.5 0 1 1-19 0 9.5 9.5 0 0 1 19 0Z\"/><path fill=\"%23000\" fill-opacity=\".12\" fill-rule=\"evenodd\" d=\"M36.5 45.5a9 9 0 1 0 0-18 9 9 0 0 0 0 18Zm0 .5a9.5 9.5 0 1 0 0-19 9.5 9.5 0 0 0 0 19Z\" clip-rule=\"evenodd\"/><path fill=\"%23fff\" fill-opacity=\".2\" fill-rule=\"evenodd\" d=\"M31.912 37.037a.5.5 0 0 1-.139-.665l4.298-7.13a.5.5 0 0 1 .856 0l4.297 7.13a.5.5 0 0 1-.137.664.5.5 0 0 1 .119.698l-4.3 6.055a.5.5 0 0 1-.815 0l-4.297-6.055a.5.5 0 0 1 .118-.697Zm.29.408 4.297 2.538 4.3-2.538-4.3 6.055-4.297-6.055Zm0-.815 4.297-7.13 4.297 7.13-4.297 2.54-4.297-2.54Z\" clip-rule=\"evenodd\"/><path fill=\"%23000\" fill-opacity=\".55\" d=\"M36.499 29.5v9.67l4.297-2.54-4.297-7.13Z\"/><path fill=\"%23000\" fill-opacity=\".3\" d=\"m36.499 29.5-4.297 7.13 4.297 2.54V29.5Z\"/><path fill=\"%23000\" fill-opacity=\".55\" d=\"M36.499 39.983V43.5l4.3-6.055-4.3 2.538Z\"/><path fill=\"%23000\" fill-opacity=\".3\" d=\"M36.499 43.5v-3.517l-4.297-2.538 4.297 6.055Z\"/><path fill=\"%23000\" d=\"m36.499 39.17 4.297-2.54-4.297-1.953v4.493Z\"/><path fill=\"%23000\" fill-opacity=\".6\" d=\"m32.202 36.63 4.297 2.54v-4.493l-4.297 1.953Z\"/><defs><linearGradient id=\"a\" x1=\"24\" x2=\"24\" y1=\"0\" y2=\"48\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"%23174299\"/><stop offset=\"1\" stop-color=\"%23001E59\"/></linearGradient><linearGradient id=\"b\" x1=\"24\" x2=\"24\" y1=\"0\" y2=\"48\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"%23D2D8E4\"/><stop offset=\"1\" stop-color=\"%23C2C9D6\"/></linearGradient></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Rules and Sitemap for RainbowKit\nDESCRIPTION: Standard robots.txt configuration that allows all web crawlers to access the site and specifies the sitemap location. The configuration includes global access rules and the primary host domain setting.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/robots.txt#2025-04-14_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# *\nUser-agent: *\nAllow: /\n\n# Host\nHost: https://rainbowkit.com\n\n# Sitemaps\nSitemap: https://rainbowkit.com/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Running Certora Verification with Command-line Arguments in Bash\nDESCRIPTION: Command for executing the Certora verification tool script with optional contract name, specification name, and additional options. This command runs verification jobs against the Certora verification service.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/certora/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode certora/run.js [[CONTRACT_NAME:]SPEC_NAME] [OPTIONS...]\n```\n\n----------------------------------------\n\nTITLE: Dependency Updates and Version Changes - Markdown\nDESCRIPTION: Markdown formatted changelog entries documenting version updates and dependency changes for the RainbowKit package. Each entry includes version numbers and references to specific dependency updates.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-siwe-iron-session/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [2b4ede4]\n- Updated dependencies [6a01368]\n- Updated dependencies [936b523]\n- Updated dependencies [7f669bd]\n  - @rainbow-me/rainbowkit@0.12.5\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Wallet Connector Implementation\nDESCRIPTION: Code diff showing migration from chainId-based connector creation to simplified connector configuration using wagmi's built-in RPC handling.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_45\n\nLANGUAGE: diff\nCODE:\n```\nimport { connectorsForWallets, wallet, Chain, Wallet } from '@rainbow-me/rainbowkit';\nimport { chain, configureChains } from 'wagmi';\nimport { alchemyProvider } from 'wagmi/providers/alchemy';\nimport { publicProvider } from 'wagmi/providers/public';\nimport { WalletConnectConnector } from 'wagmi/connectors/walletConnect';\n\nexport interface MyWalletOptions {\n  chains: Chain[];\n}\n\n-const chains = [chain.mainnet]\n+const { chains } = configureChains(\n+  [chain.mainnet],\n+  [\n+    alchemyProvider({ alchemyId: process.env.ALCHEMY_ID }),\n+    publicProvider(),\n+  ]\n+);\n\nexport const rainbow = ({ chains }: MyWalletOptions): Wallet => ({\n  ...\n- createConnector: ({ chainId }) => {\n+ createConnector: () => {\n-   const rpc = chains.reduce(\n-     (rpcUrlMap, chain) => ({\n-       ...rpcUrlMap,\n-       [chainId]: chain.rpcUrls.default,\n-     }),\n-     {}\n-   );\n    const connector = new WalletConnectConnector({\n      chains,\n      options: {\n        qrcode: false,\n-       rpc,\n      },\n    });\n  }\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Audits and Formal Verification Tables in Markdown\nDESCRIPTION: Markdown tables documenting security audits and formal verification reports, including dates, versions, commit hashes, auditors/tools, scope of assessment, and links to detailed reports.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/audits/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Audits\n\n| Date          | Version | Commit                                                                           | Auditor      | Scope                | Links                                                       |\n| ------------- | ------- | -------------------------------------------------------------------------------- | ------------ | -------------------- | ----------------------------------------------------------- |\n| April 2025    | v5.3.0  | [`d4b2e98`](https://github.com/openzeppelin/openzeppelin-contracts/tree/d4b2e98) | OpenZeppelin | v5.3 Changes         | [🔗](./2025-04-v5.3.pdf)                                    |\n| December 2024 | v5.2.0  | [`98d28f9`](https://github.com/openzeppelin/openzeppelin-contracts/tree/98d28f9) | OpenZeppelin | v5.2 Changes         | [🔗](./2024-12-v5.2.pdf)                                    |\n| October 2024  | v5.1.0  | [`aba9ff6`](https://github.com/openzeppelin/openzeppelin-contracts/tree/aba9ff6) | OpenZeppelin | v5.1 Changes         | [🔗](./2024-10-v5.1.pdf)                                    |\n| October 2023  | v5.0.0  | [`b5a3e69`](https://github.com/openzeppelin/openzeppelin-contracts/tree/b5a3e69) | OpenZeppelin | v5.0 Changes         | [🔗](./2023-10-v5.0.pdf)                                    |\n| May 2023      | v4.9.0  | [`91df66c`](https://github.com/openzeppelin/openzeppelin-contracts/tree/91df66c) | OpenZeppelin | v4.9 Changes         | [🔗](./2023-05-v4.9.pdf)                                    |\n| October 2022  | v4.8.0  | [`14f98db`](https://github.com/openzeppelin/openzeppelin-contracts/tree/14f98db) | OpenZeppelin | ERC4626, Checkpoints | [🔗](./2022-10-ERC4626.pdf) [🔗](./2022-10-Checkpoints.pdf) |\n| October 2018  | v2.0.0  | [`dac5bcc`](https://github.com/openzeppelin/openzeppelin-contracts/tree/dac5bcc) | LevelK       | Everything           | [🔗](./2018-10.pdf)                                         |\n| March 2017    | v1.0.4  | [`9c5975a`](https://github.com/openzeppelin/openzeppelin-contracts/tree/9c5975a) | New Alchemy  | Everything           | [🔗](./2017-03.md)                                          |\n\n# Formal Verification\n\n| Date         | Version | Commit    | Tool    | Scope                                                                                                                            | Links                                |\n| ------------ | ------- | --------- | ------- | -------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n| May 2022     | v4.7.0  | `109778c` | Certora | Initializable, GovernorPreventLateQuorum, ERC1155Burnable, ERC1155Pausable, ERC1155Supply, ERC1155Holder, ERC1155Receiver        | [🔗](../certora/reports/2022-05.pdf) |\n| March 2022   | v4.4.0  | `4088540` | Certora | ERC20Votes, ERC20FlashMint, ERC20Wrapper, TimelockController, ERC721Votes, Votes, AccessControl, ERC1155                         | [🔗](../certora/reports/2022-03.pdf) |\n| October 2021 | v4.4.0  | `4088540` | Certora | Governor, GovernorCountingSimple, GovernorProposalThreshold, GovernorTimelockControl, GovernorVotes, GovernorVotesQuorumFraction | [🔗](../certora/reports/2021-10.pdf) |\n```\n\n----------------------------------------\n\nTITLE: Migrating WagmiProvider to WagmiConfig for RainbowKit v0.2.x\nDESCRIPTION: Code diff showing how to rename WagmiProvider to WagmiConfig when upgrading to RainbowKit v0.2.x.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/migration-guide.mdx#2025-04-14_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n- WagmiProvider\n+ WagmiConfig\n} from 'wagmi'\n\nconst App = () => {\n  return (\n-   <WagmiProvider client={wagmiClient}>...</WagmiProvider>\n+   <WagmiConfig client={wagmiClient}>...</WagmiConfig>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: SVG Path Definitions for Application Icon\nDESCRIPTION: A collection of SVG path elements that define shapes, colors, and patterns to create a detailed icon or logo. The paths use a combination of fill colors, opacities, and precise coordinates to render the final image.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_20\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 48 48\">\n  <path fill=\"url(%23a)\" d=\"M1.09 5.46C0 7.6 0 10.4 0 16v16c0 5.6 0 8.4 1.09 10.54a10 10 0 0 0 4.37 4.37C7.6 48 10.4 48 16 48h16c1.752 0 3.23 0 4.5-.033 0-1.362 0-2.044.066-2.616a10 10 0 0 1 8.785-8.785c.572-.066 1.254-.066 2.616-.066C48 35.23 48 33.752 48 32V16c0-5.6 0-8.4-1.09-10.54a10 10 0 0 0-4.37-4.37C40.4 0 37.6 0 32 0H16C10.4 0 7.6 0 5.46 1.09a10 10 0 0 0-4.37 4.37Z\"/>\n  <!-- Additional paths omitted for brevity -->\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Running Verification for AccessControl Specification in Bash\nDESCRIPTION: Example command that runs the AccessControl specification against all contracts implementing it. This demonstrates practical usage of the verification tool.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/certora/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode certora/run.js AccessControl # Run the AccessControl spec against every contract implementing it\n```\n\n----------------------------------------\n\nTITLE: Project Version and Dependencies Overview\nDESCRIPTION: The changelog lists changes across multiple versions, primarily focusing on package upgrades and compatibility updates for wagmi, viem, Next.js, React, and RainbowKit dependencies.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/create-rainbowkit/templates/next-app/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# rainbowkit-next-app\n\n## 0.0.103\n\n### Patch Changes\n- 182440a: Upgraded `wagmi` to `^2.14.11` and `viem` to `2.23.3`\n- 3f82fe8: Adopted Biome formatting, modernized tsconfig\n- Updated dependencies [f89eb92]\n- Updated dependencies [a765cfc]\n- Updated dependencies [9c9c491]\n- Updated dependencies [f5a7cec]\n- Updated dependencies [e4547b8]\n  - @rainbow-me/rainbowkit@2.2.4\n```\n\n----------------------------------------\n\nTITLE: Rendering imToken Wallet Icon in SVG\nDESCRIPTION: This SVG code renders the imToken wallet icon, featuring a gradient blue background with the imToken logo in white.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_18\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 28 28\">\n    <path fill=\"url(%23a)\" d=\"M0 0h28v28H0z\" />\n    <path fill=\"%23fff\" d=\"M14.193 20.693c-4.435.374-8.547-2.224-8.87-6.26-.298-3.326 1.825-4.758 3.504-4.885a2.908 2.908 0 0 1 3.282 2.376c.12 1.325-.742 1.952-1.343 1.996a1.007 1.007 0 0 1-1.128-.83c-.044-.513.165-.583.101-1.121a1.172 1.172 0 0 0-1.432-1.033c-.57.044-1.622.703-1.489 2.332.134 1.628 1.774 2.94 3.903 2.743a4.346 4.346 0 0 0 4.03-4.372c0-.128.03-.254.088-.367.027-.044.057-.087.09-.127.056-.089.122-.172.196-.247l.209-.21c1-.911 4.637-3.104 8.052-2.42a.14.14 0 0 1 .076 0c.133 0 .21.09.222.222.539 7.996-4.745 11.785-9.49 12.203Z\" />\n    <defs>\n        <linearGradient id=\"a\" x1=\"27.236\" x2=\".05\" y1=\".889\" y2=\"27.978\" gradientUnits=\"userSpaceOnUse\">\n            <stop stop-color=\"%2311C4D1\" />\n            <stop offset=\"1\" stop-color=\"%230062AD\" />\n        </linearGradient>\n    </defs>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Using stdCheats for Address Pranking in Solidity Tests\nDESCRIPTION: Shows how to use the stdCheats functions for manipulating msg.sender and providing ETH in tests. The hoax and startHoax functions combine pranking with giving ETH to the target address.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/lib/forge-std/README.md#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"forge-std/Test.sol\";\n\n// Inherit the stdCheats\ncontract StdCheatsTest is Test {\n    Bar test;\n    function setUp() public {\n        test = new Bar();\n    }\n\n    function testHoax() public {\n        // we call `hoax`, which gives the target address\n        // eth and then calls `prank`\n        hoax(address(1337));\n        test.bar{value: 100}(address(1337));\n\n        // overloaded to allow you to specify how much eth to\n        // initialize the address with\n        hoax(address(1337), 1);\n        test.bar{value: 1}(address(1337));\n    }\n\n    function testStartHoax() public {\n        // we call `startHoax`, which gives the target address\n        // eth and then calls `startPrank`\n        //\n        // it is also overloaded so that you can specify an eth amount\n        startHoax(address(1337));\n        test.bar{value: 100}(address(1337));\n        test.bar{value: 100}(address(1337));\n        vm.stopPrank();\n        test.bar(address(this));\n    }\n}\n\ncontract Bar {\n    function bar(address expectedSender) public payable {\n        require(msg.sender == expectedSender, \"!prank\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Owner Index Implementation - Solidity\nDESCRIPTION: Implementation pattern showing owner indexing using address hashing to uint, noted as potentially problematic due to reduced type safety and obscurity.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/audits/2017-03.md#2025-04-14_snippet_2\n\nLANGUAGE: Solidity\nCODE:\n```\nowners[2+ i]\n```\n\n----------------------------------------\n\nTITLE: Rendering Argent Wallet Icon in SVG\nDESCRIPTION: This SVG code renders the Argent wallet icon, displaying the Argent logo in orange on a white background.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_15\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"28\" height=\"28\" fill=\"white\"/>\n<path d=\"M15.9033 7H11.8495C11.714 7 11.6055 7.10935 11.6026 7.24527C11.5207 11.0658 9.52894 14.6919 6.10076 17.2603C5.99192 17.3418 5.96712 17.495 6.04669 17.6053L8.41849 20.8966C8.49918 21.0086 8.6564 21.0338 8.76706 20.9515C10.9106 19.3561 12.6348 17.4314 13.8764 15.2981C15.118 17.4314 16.8423 19.3561 18.9858 20.9515C19.0964 21.0338 19.2536 21.0086 19.3344 20.8966L21.7062 17.6053C21.7857 17.495 21.7609 17.3418 21.6522 17.2603C18.2239 14.6919 16.2322 11.0658 16.1504 7.24527C16.1474 7.10935 16.0388 7 15.9033 7Z\" fill=\"%23FF875B\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Handling ConnectButton.Custom Component Mounting in RainbowKit\nDESCRIPTION: Shows how to handle the new mounted state in ConnectButton.Custom for supporting loading indicators or conditional rendering. The component now provides a mounted boolean that can be used to conditionally render content.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_52\n\nLANGUAGE: diff\nCODE:\n```\nimport { ConnectButton } from '@rainbow-me/rainbowkit';\n\nexport default () => (\n  <ConnectButton.Custom>\n    {({\n+      mounted,\n      ...etc,\n      }) => {\n+        if (!mounted) {\n+          return null;\n+        }\n\n        return <button>...</button>;\n      }}\n  </ConnectButton.Custom>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Forge Standard Library with Forge\nDESCRIPTION: Command to install the Forge Standard Library using the forge command line tool.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/forge-std/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge install foundry-rs/forge-std\n```\n\n----------------------------------------\n\nTITLE: Formatting Code with Forge\nDESCRIPTION: Command to format Solidity code using Forge formatter\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ forge fmt\n```\n\n----------------------------------------\n\nTITLE: Migrating from _beforeTokenTransfer to _update in ERC20\nDESCRIPTION: Example showing how to migrate an ERC20 contract that uses the _beforeTokenTransfer hook to the new _update function which replaces both _beforeTokenTransfer and _afterTokenTransfer hooks.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n-function _beforeTokenTransfer(\n+function _update(\n   address from,\n   address to,\n   uint256 amount\n ) internal virtual override {\n-  super._beforeTokenTransfer(from, to, amount);\n   require(!condition(), \"ERC20: wrong condition\");\n+  super._update(from, to, amount);\n }\n```\n\n----------------------------------------\n\nTITLE: Next.js i18n Configuration\nDESCRIPTION: Configuration for Next.js internationalization using sub-path routing. Defines supported locales and default locale settings.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/localization.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  i18n: {\n    locales: ['default', 'en', 'zh-CN'],\n    defaultLocale: 'default',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: MetaMask Icon SVG Path Definition\nDESCRIPTION: SVG path definitions for the MetaMask fox logo with orange fill color\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_10\n\nLANGUAGE: svg\nCODE:\n```\n<path d=\"M23.4827 13.4903L18.8864 12.1456L20.2837 14.2461L18.2009 18.2888L20.9429 18.2536H25.0295L23.4827 13.4903Z\" fill=\"%23F6851B\" stroke=\"%23F6851B\" stroke-width=\"0.0878845\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n```\n\n----------------------------------------\n\nTITLE: Starting Anvil Local Node\nDESCRIPTION: Command to start Anvil local Ethereum development node\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/README.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ anvil\n```\n\n----------------------------------------\n\nTITLE: Migrating from ECDSA to MessageHashUtils for Message Signing\nDESCRIPTION: Code changes required when migrating to the new MessageHashUtils library for message signing utilities. ECDSA is now focused on signer recovery while MessageHashUtils contains utilities for producing digests.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/CHANGELOG.md#2025-04-14_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n import {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n+import {MessageHashUtils} from \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\";\n\n contract Verifier {\n   using ECDSA for bytes32;\n+  using MessageHashUtils for bytes32;\n\n   function _verify(bytes32 data, bytes memory signature, address account) internal pure returns (bool) {\n     return data\n       .toEthSignedMessageHash()\n       .recover(signature) == account;\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Rendering WalletConnect Icon in SVG\nDESCRIPTION: This SVG code renders the WalletConnect wallet icon, showing the WalletConnect logo in white on a blue background.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_14\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"28\" height=\"28\" fill=\"%233B99FC\"/>\n<path d=\"M8.38969 10.3739C11.4882 7.27538 16.5118 7.27538 19.6103 10.3739L19.9832 10.7468C20.1382 10.9017 20.1382 11.1529 19.9832 11.3078L18.7076 12.5835C18.6301 12.6609 18.5045 12.6609 18.4271 12.5835L17.9139 12.0703C15.7523 9.9087 12.2477 9.9087 10.0861 12.0703L9.53655 12.6198C9.45909 12.6973 9.3335 12.6973 9.25604 12.6198L7.98039 11.3442C7.82547 11.1893 7.82547 10.9381 7.98039 10.7832L8.38969 10.3739ZM22.2485 13.012L23.3838 14.1474C23.5387 14.3023 23.5387 14.5535 23.3838 14.7084L18.2645 19.8277C18.1096 19.9827 17.8584 19.9827 17.7035 19.8277C17.7035 19.8277 17.7035 19.8277 17.7035 19.8277L14.0702 16.1944C14.0314 16.1557 13.9686 16.1557 13.9299 16.1944C13.9299 16.1944 13.9299 16.1944 13.9299 16.1944L10.2966 19.8277C10.1417 19.9827 9.89053 19.9827 9.73561 19.8278C9.7356 19.8278 9.7356 19.8277 9.7356 19.8277L4.61619 14.7083C4.46127 14.5534 4.46127 14.3022 4.61619 14.1473L5.75152 13.012C5.90645 12.857 6.15763 12.857 6.31255 13.012L9.94595 16.6454C9.98468 16.6841 10.0475 16.6841 10.0862 16.6454C10.0862 16.6454 10.0862 16.6454 10.0862 16.6454L13.7194 13.012C13.8743 12.857 14.1255 12.857 14.2805 13.012C14.2805 13.012 14.2805 13.012 14.2805 13.012L17.9139 16.6454C17.9526 16.6841 18.0154 16.6841 18.0541 16.6454L21.6874 13.012C21.8424 12.8571 22.0936 12.8571 22.2485 13.012Z\" fill=\"white\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Rendering Omni Wallet Icon in SVG\nDESCRIPTION: This SVG code renders the Omni wallet icon, showing the Omni logo in white on a black background.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_17\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"512\" height=\"512\" viewBox=\"0 0 512 512\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"512\" height=\"512\" fill=\"black\"/>\n<path d=\"M67.8275 284.642C65.2758 277.745 64 270.6 64 263.193C64 254.255 65.2758 246.09 68.0826 238.428C90.5516 177.407 170.979 158 268.766 158C366.552 158 428.338 185.062 444.173 227.959C446.724 234.855 448 242 448 249.407C448 258.345 446.724 266.51 443.917 274.173C421.448 335.193 341.021 354.6 243.235 354.6C145.448 354.6 83.6622 327.531 67.8275 284.642ZM193.696 273.152C198.8 286.938 220.503 298.428 250.889 298.428C284.338 298.428 310.124 288.469 318.041 267.276C320.593 260.889 320.848 257.062 320.848 252.724C320.848 248.897 320.848 245.572 318.296 239.448C313.193 225.662 291.49 214.173 261.103 214.173C227.655 214.173 201.869 224.131 193.951 245.324C191.4 251.711 191.145 255.538 191.145 259.876C191.145 263.704 191.145 267.028 193.696 273.152Z\" fill=\"white\"/>\n<path d=\"M229.477 263.47C231.65 269.339 240.887 274.231 253.827 274.231C268.066 274.231 279.045 269.995 282.413 260.969C283.499 258.25 283.609 256.624 283.609 254.773C283.609 253.139 283.609 251.732 282.522 249.122C280.35 243.254 271.113 238.362 258.173 238.362C243.934 238.362 232.955 242.598 229.587 251.623C228.501 254.342 228.391 255.968 228.391 257.82C228.391 259.453 228.391 260.86 229.477 263.47Z\" fill=\"white\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: RainbowKit Implementation Before configureChains API\nDESCRIPTION: Example of RainbowKit configuration before the configureChains API was introduced. It shows manual provider setup with Infura and chain configuration for mainnet, polygon, optimism, and arbitrum.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_57\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  RainbowKitProvider,\n  Chain,\n  getDefaultWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { createClient, WagmiProvider, chain } from \"wagmi\";\nimport { providers } from \"ethers\";\n\nconst infuraId = process.env.INFURA_ID;\n\nconst provider = ({ chainId }: { chainId?: number }) =>\n  new providers.InfuraProvider(chainId, infuraId);\n\nconst chains: Chain[] = [\n  chain.mainnet,\n  chain.polygon,\n  chain.optimism,\n  chain.arbitrum,\n];\n\nconst { connectors } = getDefaultWallets({\n  chains,\n  infuraId,\n  appName: \"My RainbowKit App\",\n  jsonRpcUrl: ({ chainId }) => {\n    const rpcUrls = (chains.find((x) => x.id === chainId) || chain.mainnet)\n      .rpcUrls;\n    return typeof rpcUrls.default === \"string\"\n      ? rpcUrls.default\n      : rpcUrls.default[0];\n  },\n});\n\nconst wagmiClient = createClient({\n  autoConnect: true,\n  connectors,\n  provider,\n});\n\nconst App = () => {\n  return (\n    <WagmiProvider client={wagmiClient}>\n      <RainbowKitProvider chains={chains}>\n        {/* Your App */}\n      </RainbowKitProvider>\n    </WagmiProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Deploying Smart Contracts\nDESCRIPTION: Command to deploy smart contracts using Forge script with RPC URL and private key\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/README.md#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ forge script script/RainbowKitNFT.s.sol:RainbowKitNFTScript --rpc-url <your_rpc_url> --private-key <your_private_key>\n```\n\n----------------------------------------\n\nTITLE: Running React App Tests\nDESCRIPTION: This command launches the test runner in interactive watch mode for the React application.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-create-react-app/README.md#2025-04-14_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Initializer Pattern Example in Solidity\nDESCRIPTION: Example showing the modification required for initializer functions to prevent reentrancy risks by using the new onlyInitializing modifier instead of initializer for internal functions.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/CHANGELOG.md#2025-04-14_snippet_12\n\nLANGUAGE: Solidity\nCODE:\n```\ncontract A {\n    function initialize() internal onlyInitializing { ... }\n}\ncontract B is A {\n    function initialize() public initializer {\n        A.initialize();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Paths and Shapes for RainbowKit Logo\nDESCRIPTION: This SVG code defines various paths, shapes, and fill colors to create the RainbowKit logo and associated design elements. It includes gradients, rounded rectangles, and pixel art-style details.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_22\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 48 48\">\n  <path fill=\"url(#a)\" d=\"M1.09 5.46C0 7.6 0 10.4 0 16v16c0 5.6 0 8.4 1.09 10.54a10 10 0 0 0 4.37 4.37C7.6 48 10.4 48 16 48h16c1.752 0 3.23 0 4.5-.033 0-1.362 0-2.044.066-2.616a10 10 0 0 1 8.785-8.785c.572-.066 1.254-.066 2.616-.066C48 35.23 48 33.752 48 32V16c0-5.6 0-8.4-1.09-10.54a10 10 0 0 0-4.37-4.37C40.4 0 37.6 0 32 0H16C10.4 0 7.6 0 5.46 1.09a10 10 0 0 0-4.37 4.37Z\"/>\n  <!-- Additional paths and shapes omitted for brevity -->\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Rendering MetaMask Wallet Icon in SVG\nDESCRIPTION: This SVG code renders the MetaMask wallet icon, featuring the MetaMask fox logo in orange and white on a blue background.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_13\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"28\" height=\"28\" fill=\"%233B99FC\"/>\n<path d=\"M23.4827 13.4903L18.8864 12.1456L20.2837 14.2461L18.2009 18.2888L20.9429 18.2536H25.0295L23.4827 13.4903Z\" fill=\"%23F6851B\" stroke=\"%23F6851B\" stroke-width=\"0.0878845\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M9.10484 12.1456L4.50848 13.4903L2.97929 18.2536H7.05713L9.79033 18.2888L7.71626 14.2461L9.10484 12.1456Z\" fill=\"%23F6851B\" stroke=\"%23F6851B\" stroke-width=\"0.0878845\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M15.3446 14.4658L15.6347 9.39485L16.9705 5.7828H11.0383L12.3566 9.39485L12.6642 14.4658L12.7696 16.0653L12.7784 20.0025H15.2128L15.2304 16.0653L15.3446 14.4658Z\" fill=\"%23F6851B\" stroke=\"%23F6851B\" stroke-width=\"0.0878845\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App\nDESCRIPTION: This command removes the single build dependency and copies all configuration files, allowing for full control over the project setup.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-create-react-app/README.md#2025-04-14_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Updating Custom GSN Recipient Contract in Solidity\nDESCRIPTION: Example of how to update a custom GSN recipient contract that was using GSNBouncerSignature in version 2.4.0-beta to be compatible with version 2.4.0. The inheritance is simplified by removing GSNRecipient.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/CHANGELOG.md#2025-04-14_snippet_13\n\nLANGUAGE: Solidity\nCODE:\n```\n-contract MyDapp is GSNRecipient, GSNBouncerSignature {\n+contract MyDapp is GSNRecipientSignature {\n```\n\n----------------------------------------\n\nTITLE: SVG Path Data for Digital Wallet and Cryptocurrency Icons\nDESCRIPTION: This code contains SVG path elements with fill colors and opacity settings that together form digital wallet interface elements and cryptocurrency icons. The paths define shapes with specific coordinates and fill properties to create a cohesive visual representation.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_9\n\nLANGUAGE: svg\nCODE:\n```\n<path fill=\"%23fff\" d=\"M32.313 13.438h-1.126V14h1.125v-.563Z\"/><path fill=\"%23000\" d=\"M33.438 13.438h-1.126V14h1.126v-.563Z\"/><path fill=\"%23B9185C\" d=\"M34 13.438h-.563V14H34v-.563Zm1.125 0h-.563V14h.563v-.563Z\"/><path fill=\"%23fff\" d=\"M36.25 13.438h-1.125V14h1.125v-.563Z\"/><path fill=\"%23000\" d=\"M37.375 13.438H36.25V14h1.125v-.563Z\"/><path fill=\"%23B9185C\" d=\"M37.938 13.438h-.563V14h.563v-.563ZM34 14h-3.375v.563H34V14Zm3.938 0h-3.376v.563h3.376V14Z\"/><path fill=\"%23fff\" fill-opacity=\".3\" fill-rule=\"evenodd\" d=\"M35 5.5h-2c-1.408 0-2.435 0-3.243.066-.803.066-1.347.194-1.8.424a4.5 4.5 0 0 0-1.966 1.967c-.231.453-.359.997-.424 1.8-.067.808-.067 1.835-.067 3.243v2c0 1.408 0 2.435.067 3.243.065.803.193 1.347.424 1.8a4.5 4.5 0 0 0 1.966 1.966c.453.231.997.359 1.8.424.808.067 1.835.067 3.243.067h2c1.408 0 2.435 0 3.243-.067.803-.065 1.347-.193 1.8-.424a4.5 4.5 0 0 0 1.967-1.966c.23-.453.358-.997.424-1.8.066-.808.066-1.835.066-3.243v-2c0-1.408 0-2.435-.066-3.243-.066-.803-.194-1.347-.424-1.8a4.5 4.5 0 0 0-1.967-1.967c-.453-.23-.997-.358-1.8-.424C37.435 5.5 36.408 5.5 35 5.5Zm-9.455 2.23C25 8.8 25 10.2 25 13v2c0 2.8 0 4.2.545 5.27a5 5 0 0 0 2.185 2.185C28.8 23 30.2 23 33 23h2c2.8 0 4.2 0 5.27-.545a5 5 0 0 0 2.185-2.185C43 19.2 43 17.8 43 15v-2c0-2.8 0-4.2-.545-5.27a5 5 0 0 0-2.185-2.185C39.2 5 37.8 5 35 5h-2c-2.8 0-4.2 0-5.27.545a5 5 0 0 0-2.185 2.185Z\" clip-rule=\"evenodd\"/><path fill=\"%23564CBF\" d=\"M5 33c0-2.8 0-4.2.545-5.27a5 5 0 0 1 2.185-2.185C8.8 25 10.2 25 13 25h2c2.8 0 4.2 0 5.27.545a5 5 0 0 1 2.185 2.185C23 28.8 23 30.2 23 33v2c0 2.8 0 4.2-.545 5.27a5 5 0 0 1-2.185 2.185C19.2 43 17.8 43 15 43h-2c-2.8 0-4.2 0-5.27-.545a5 5 0 0 1-2.185-2.185C5 39.2 5 37.8 5 35v-2Z\"/><path fill=\"%23FF66B3\" d=\"M11.188 26.125h.562v2.813h.563v-2.813h.562V29.5h.563v-3.375H14V29.5h.563v-3.375h.562v2.813h.563v-2.813h.562v2.25h.563v-1.688h.562v2.25h-.563v.563h-.562v.563h-1.125v.562h-2.813v-.563h-1.124V29.5h-.563v-.563h-.563v-2.25h.563v1.688h.563v-2.25Z\"/><path fill=\"%23B3FFCC\" d=\"M13.438 30.625H14v.563h1.125v2.25h1.125v-.563h.563V34h-1.688v1.125h-.563v1.125h.563v5.625h-.563v-5.063H14v-.562h-1.688v-1.125h.563v.563H14v-1.126h.563V31.75h-1.126v-1.125Z\"/><path fill=\"%23000\" fill-opacity=\".9\" d=\"M16.25 26.125h.563v2.25h-.563v-2.25Zm-5.625.563h.563v1.687h-.563v-1.688Z\"/><path fill=\"%23000\" fill-opacity=\".9\" d=\"M17.938 26.688h-.563v2.25h-.563v.562h-.562v.563h.563V29.5h.562v-.563h.563v-2.25Zm-6.188-.563h.563v2.813h-.563v-2.813Zm3.938 0h-.563v2.813h.563v-2.813Zm-2.813 0h.563V29.5h-.563v-3.375Zm1.688 0H14V29.5h.563v-3.375Zm.562 3.938h.563v.562h-.563v-.563Zm-.562.562H14v.563h.563v-.563Zm.562.563h.563v2.25h-.563v-2.25Zm2.25 1.687h-.563V34h.563v-1.125ZM15.125 34h.563v1.125h-.563V34Zm0 2.25v-1.125h-.563v1.125h.563Zm0 0v5.625h.563V36.25h-.563Zm-2.25-1.125h.563v.563h-.563v-.563Z\"/><path fill=\"%23fff\" fill-opacity=\".12\" fill-rule=\"evenodd\" d=\"M15 25.5h-2c-1.408 0-2.435 0-3.243.067-.803.065-1.347.193-1.8.424a4.5 4.5 0 0 0-1.967 1.966c-.23.453-.358.997-.424 1.8C5.5 30.565 5.5 31.592 5.5 33v2c0 1.408 0 2.435.066 3.243.066.803.194 1.347.424 1.8a4.5 4.5 0 0 0 1.967 1.967c.453.23.997.358 1.8.424.808.066 1.835.066 3.243.066h2c1.408 0 2.435 0 3.243-.066.803-.066 1.347-.194 1.8-.424a4.5 4.5 0 0 0 1.966-1.967c.231-.453.359-.997.424-1.8.067-.808.067-1.835.067-3.243v-2c0-1.408 0-2.435-.067-3.243-.065-.803-.193-1.347-.424-1.8a4.5 4.5 0 0 0-1.966-1.966c-.453-.231-.997-.359-1.8-.424-.808-.067-1.835-.067-3.243-.067Zm-9.455 2.23C5 28.8 5 30.2 5 33v2c0 2.8 0 4.2.545 5.27a5 5 0 0 0 2.185 2.185C8.8 43 10.2 43 13 43h2c2.8 0 4.2 0 5.27-.545a5 5 0 0 0 2.185-2.185C23 39.2 23 37.8 23 35v-2c0-2.8 0-4.2-.545-5.27a5 5 0 0 0-2.185-2.185C19.2 25 17.8 25 15 25h-2c-2.8 0-4.2 0-5.27.545a5 5 0 0 0-2.185 2.185Z\" clip-rule=\"evenodd\"/><path fill=\"%23172D99\" d=\"M5 13c0-2.8 0-4.2.545-5.27A5 5 0 0 1 7.73 5.545C8.8 5 10.2 5 13 5h2c2.8 0 4.2 0 5.27.545a5 5 0 0 1 2.185 2.185C23 8.8 23 10.2 23 13v2c0 2.8 0 4.2-.545 5.27a5 5 0 0 1-2.185 2.185C19.2 23 17.8 23 15 23h-2c-2.8 0-4.2 0-5.27-.545a5 5 0 0 1-2.185-2.185C5 19.2 5 17.8 5 15v-2Z\"/><path fill=\"%2300A2D8\" fill-rule=\"evenodd\" d=\"M11.3 13.1H8.6v.9h2.7v-.9Zm0 .9h1.8v.9h.9v1.8h-.9v-.9h-.9v-.9h-.9V14Zm2.7 2.7h.9v2.7H14v-2.7Z\" clip-rule=\"evenodd\"/><path fill=\"%2300DE6F\" fill-rule=\"evenodd\" d=\"M11.3 12.2H8.6v.9h2.7v-.9Zm0 .9h1.8v.9h-1.8v-.9Zm2.7 1.8h-.9V14h.9v.9Zm.9 1.8H14v-1.8h.9v1.8Zm0 0h.9v2.7h-.9v-2.7Z\" clip-rule=\"evenodd\"/><path fill=\"%23FFEB00\" fill-rule=\"evenodd\" d=\"M11.3 11.3H8.6v.9h2.7v-.9Zm0 .9h1.8v.9h-1.8v-.9ZM14 14h-.9v-.9h.9v.9Zm.9.9H14V14h.9v.9Zm.9 1.8h-.9v-1.8h.9v1.8Zm0 0h.9v2.7h-.9v-2.7Z\" clip-rule=\"evenodd\"/><path fill=\"%23FA0\" fill-rule=\"evenodd\" d=\"M11.3 10.4H8.6v.9h2.7v-.9Zm0 .9H14v.9h.9v.9h.9v.9h.9v1.8h.9v3.6h-.9v-2.7h-.9v-1.8h-.9V14H14v-.9h-.9v-.9h-1.8v-.9Z\" clip-rule=\"evenodd\"/><path fill=\"%23DD3D1C\" fill-rule=\"evenodd\" d=\"M12.2 9.5H8.6v.9h2.7v.9H14v.9h.9v.9h.9v.9h.9v1.8h.9v3.6h.9v-3.6h-.9V14h-.9v-.9h-.9v-.9h-.9v-.9H14v-.9h-1.8v-.9Z\" clip-rule=\"evenodd\"/><path fill=\"%23C03078\" fill-rule=\"evenodd\" d=\"M12.2 8.6H8.6v.9h3.6v-.9Zm0 .9H14v.9h-1.8v-.9Zm5.4 4.5h-.9v-.9h-.9v-.9h-.9v-.9H14v-.9h1.8v.9h.9v.9h.9V14Zm.9 1.8h-.9V14h.9v1.8Zm0 0h.9v3.6h-.9v-3.6Z\" clip-rule=\"evenodd\"/><path fill=\"%23fff\" fill-opacity=\".12\" fill-rule=\"evenodd\" d=\"M15 5.5h-2c-1.408 0-2.435 0-3.243.066-.803.066-1.347.194-1.8.424A4.5 4.5 0 0 0 5.99 7.957c-.23.453-.358.997-.424 1.8C5.5 10.565 5.5 11.592 5.5 13v2c0 1.408 0 2.435.066 3.243.066.803.194 1.347.424 1.8a4.5 4.5 0 0 0 1.967 1.966c.453.231.997.359 1.8.424.808.067 1.835.067 3.243.067h2c1.408 0 2.435 0 3.243-.067.803-.065 1.347-.193 1.8-.424a4.5 4.5 0 0 0 1.966-1.966c.231-.453.359-.997.424-1.8.067-.808.067-1.835.067-3.243v-2c0-1.408 0-2.435-.067-3.243-.065-.803-.193-1.347-.424-1.8a4.5 4.5 0 0 0-1.966-1.967c-.453-.23-.997-.358-1.8-.424C17.435 5.5 16.408 5.5 15 5.5ZM5.545 7.73C5 8.8 5 10.2 5 13v2c0 2.8 0 4.2.545 5.27a5 5 0 0 0 2.185 2.185C8.8 23 10.2 23 13 23h2c2.8 0 4.2 0 5.27-.545a5 5 0 0 0 2.185-2.185C23 19.2 23 17.8 23 15v-2c0-2.8 0-4.2-.545-5.27a5 5 0 0 0-2.185-2.185C19.2 5 17.8 5 15 5h-2c-2.8 0-4.2 0-5.27.545A5 5 0 0 0 5.545 7.73Z\" clip-rule=\"evenodd\"/><path fill=\"%2399B3FF\" d=\"M48 36.5C48 42.851 42.851 48 36.5 48S25 42.851 25 36.5 30.149 25 36.5 25 48 30.149 48 36.5Z\"/><path fill=\"%23000\" fill-opacity=\".12\" fill-rule=\"evenodd\" d=\"M36.5 47.5c6.075 0 11-4.925 11-11s-4.925-11-11-11-11 4.925-11 11 4.925 11 11 11Zm0 .5C42.851 48 48 42.851 48 36.5S42.851 25 36.5 25 25 30.149 25 36.5 30.149 48 36.5 48Z\" clip-rule=\"evenodd\"/><path fill=\"%237F91EB\" d=\"M46 36.5a9.5 9.5 0 1 1-19 0 9.5 9.5 0 0 1 19 0Z\"/><path fill=\"%23000\" fill-opacity=\".12\" fill-rule=\"evenodd\" d=\"M36.5 45.5a9 9 0 1 0 0-18 9 9 0 0 0 0 18Zm0 .5a9.5 9.5 0 1 0 0-19 9.5 9.5 0 0 0 0 19Z\" clip-rule=\"evenodd\"/><path fill=\"%23fff\" fill-opacity=\".2\" fill-rule=\"evenodd\" d=\"M31.912 37.037a.5.5 0 0 1-.139-.665l4.298-7.13a.5.5 0 0 1 .856 0l4.297 7.13a.5.5 0 0 1-.137.664.5.5 0 0 1 .119.698l-4.3 6.055a.5.5 0 0 1-.815 0l-4.297-6.055a.5.5 0 0 1 .118-.697Zm.29.408 4.297 2.538 4.3-2.538-4.3 6.055-4.297-6.055Zm0-.815 4.297-7.13 4.297 7.13-4.297 2.54-4.297-2.54Z\" clip-rule=\"evenodd\"/><path fill=\"%23000\" fill-opacity=\".55\" d=\"M36.499 29.5v9.67l4.297-2.54-4.297-7.13Z\"/><path fill=\"%23000\" fill-opacity=\".3\" d=\"m36.499 29.5-4.297 7.13 4.297 2.54V29.5Z\"/><path fill=\"%23000\" fill-opacity=\".55\" d=\"M36.499 39.983V43.5l4.3-6.055-4.3 2.538Z\"/><path fill=\"%23000\" fill-opacity=\".3\" d=\"M36.499 43.5v-3.517l-4.297-2.538 4.297 6.055Z\"/><path fill=\"%23000\" d=\"m36.499 39.17 4.297-2.54-4.297-1.953v4.493Z\"/><path fill=\"%23000\" fill-opacity=\".6\" d=\"m32.202 36.63 4.297 2.54v-4.493l-4.297 1.953Z\"/><defs><linearGradient id=\"a\" x1=\"24\" x2=\"24\" y1=\"0\" y2=\"48\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"%23174299\"/><stop offset=\"1\" stop-color=\"%23001E59\"/></linearGradient><linearGradient id=\"b\" x1=\"24\" x2=\"24\" y1=\"0\" y2=\"48\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"%23D2D8E4\"/><stop offset=\"1\" stop-color=\"%23C2C9D6\"/></linearGradient></defs>\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for RainbowKit and Wagmi v2\nDESCRIPTION: Command to update RainbowKit, wagmi, and viem to their latest versions using npm.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/de/guides/rainbowkit-wagmi-v2.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @rainbow-me/rainbowkit wagmi viem@2.x\n```\n\n----------------------------------------\n\nTITLE: Building Ethereum Projects with Forge\nDESCRIPTION: Command to build Ethereum projects using Forge build tool\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ forge build\n```\n\n----------------------------------------\n\nTITLE: Executing Transpilation Process with Target and Base Branch in Bash\nDESCRIPTION: This script transpiles the contents of the current git branch and commits the result as a new commit on a target branch. If the target branch doesn't exist, it copies the commit history from an optional base branch. This is primarily used in GitHub Actions workflows.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/scripts/upgradeable/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash scripts/upgradeable/transpile-onto.sh <target> [<base>]\n```\n\n----------------------------------------\n\nTITLE: SafeMath Operation - Solidity\nDESCRIPTION: Manual overflow check implementation in DayLimit contract, compared to using SafeMath's safeAdd functionality. Used in context where function throws on failure.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/audits/2017-03.md#2025-04-14_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\nspentToday + _value < spentToday\n```\n\n----------------------------------------\n\nTITLE: Installing Halmos Cheatcodes using Foundry\nDESCRIPTION: Command to install Halmos cheatcodes using the Foundry package manager\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/lib/halmos-cheatcodes/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge install a16z/halmos-cheatcodes\n```\n\n----------------------------------------\n\nTITLE: Installing RainbowKit v0.12.0 with Wagmi v0.12.0\nDESCRIPTION: Command for upgrading RainbowKit and wagmi to their v0.12.0 versions.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/fr/docs/migration-guide.mdx#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @rainbow-me/rainbowkit@^0.12.0 wagmi@^0.12.0\n```\n\n----------------------------------------\n\nTITLE: Accessing Authentication Session on Server-Side in Next.js\nDESCRIPTION: Next.js server-side code demonstrating how to access the authentication session and token, and pass the data to the client-side component.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/de/docs/authentication.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GetServerSideProps, InferGetServerSidePropsType } from 'next';\nimport { getSession } from 'next-auth/react';\nimport { getToken } from 'next-auth/jwt';\nimport React from 'react';\n\nexport const getServerSideProps: GetServerSideProps = async context => {\n  const session = await getSession(context);\n  const token = await getToken({ req: context.req });\n\n  const address = token?.sub ?? null;\n  // If you have a value for \"address\" here, your\n  // server knows the user is authenticated.\n\n  // You can then pass any data you want\n  // to the page component here.\n  return {\n    props: {\n      address,\n      session,\n    },\n  };\n};\n\ntype AuthenticatedPageProps = InferGetServerSidePropsType<\n  typeof getServerSideProps\n>;\n\nexport default function AuthenticatedPage({\n  address,\n}: AuthenticatedPageProps) {\n  return address ? (\n    <h1>Authenticated as {address}</h1>\n  ) : (\n    <h1>Unauthenticated</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Version history changelog documenting updates and dependency changes for RainbowKit package\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [4ef5c51]\n  - @rainbow-me/rainbowkit@0.12.7\n\n## 0.0.43\n\n### Patch Changes\n\n- Updated dependencies [d35809e]\n  - @rainbow-me/rainbowkit@0.12.6\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format in Markdown\nDESCRIPTION: Standard format for documenting version changes and dependency updates in the RainbowKit project changelog.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [4ef5c51]\n  - @rainbow-me/rainbowkit@0.12.7\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Query Dependency\nDESCRIPTION: Command to install the required @tanstack/react-query peer dependency for Wagmi v2.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/guides/rainbowkit-wagmi-v2.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Customizing SIWE Message Options\nDESCRIPTION: Example of how to customize the SIWE message options by defining a custom function and passing it to the RainbowKitSiweNextAuthProvider.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit-siwe-next-auth/README.md#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  RainbowKitSiweNextAuthProvider,\n  GetSiweMessageOptions,\n} from '@rainbow-me/rainbowkit-siwe-next-auth';\n\nconst getSiweMessageOptions: GetSiweMessageOptions = () => ({\n  statement: 'Sign in to my RainbowKit app',\n});\n\n<RainbowKitSiweNextAuthProvider getSiweMessageOptions={getSiweMessageOptions}>\n  ...\n</RainbowKitSiweNextAuthProvider>;\n```\n\n----------------------------------------\n\nTITLE: Installing lodash.merge for Theme Extension\nDESCRIPTION: Command to install lodash.merge package for extending built-in themes in RainbowKit. This dependency allows for merging theme objects together.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/custom-theme.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install lodash.merge\n```\n\n----------------------------------------\n\nTITLE: Rendering Rainbow Button Component\nDESCRIPTION: Example of importing and rendering the RainbowButton component within an application.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbow-button/README.md#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowButton } from '@rainbow-me/rainbow-button';\n\nexport const YourApp = () => {\n  return <RainbowButton/>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using stdStorage to Find and Manipulate Storage Slots in Solidity\nDESCRIPTION: Demonstrates how to use stdStorage to locate and modify storage variables without knowing the storage layout. Examples include finding simple variables, mappings, assembly-based storage, and struct fields.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/lib/forge-std/README.md#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"forge-std/Test.sol\";\n\ncontract TestContract is Test {\n    using stdStorage for StdStorage;\n\n    Storage test;\n\n    function setUp() public {\n        test = new Storage();\n    }\n\n    function testFindExists() public {\n        // Lets say we want to find the slot for the public\n        // variable `exists`. We just pass in the function selector\n        // to the `find` command\n        uint256 slot = stdstore.target(address(test)).sig(\"exists()\").find();\n        assertEq(slot, 0);\n    }\n\n    function testWriteExists() public {\n        // Lets say we want to write to the slot for the public\n        // variable `exists`. We just pass in the function selector\n        // to the `checked_write` command\n        stdstore.target(address(test)).sig(\"exists()\").checked_write(100);\n        assertEq(test.exists(), 100);\n    }\n\n    // It supports arbitrary storage layouts, like assembly based storage locations\n    function testFindHidden() public {\n        // `hidden` is a random hash of a bytes, iteration through slots would\n        // not find it. Our mechanism does\n        // Also, you can use the selector instead of a string\n        uint256 slot = stdstore.target(address(test)).sig(test.hidden.selector).find();\n        assertEq(slot, uint256(keccak256(\"my.random.var\")));\n    }\n\n    // If targeting a mapping, you have to pass in the keys necessary to perform the find\n    // i.e.:\n    function testFindMapping() public {\n        uint256 slot = stdstore\n            .target(address(test))\n            .sig(test.map_addr.selector)\n            .with_key(address(this))\n            .find();\n        // in the `Storage` constructor, we wrote that this address' value was 1 in the map\n        // so when we load the slot, we expect it to be 1\n        assertEq(uint(vm.load(address(test), bytes32(slot))), 1);\n    }\n\n    // If the target is a struct, you can specify the field depth:\n    function testFindStruct() public {\n        // NOTE: see the depth parameter - 0 means 0th field, 1 means 1st field, etc.\n        uint256 slot_for_a_field = stdstore\n            .target(address(test))\n            .sig(test.basicStruct.selector)\n            .depth(0)\n            .find();\n\n        uint256 slot_for_b_field = stdstore\n            .target(address(test))\n            .sig(test.basicStruct.selector)\n            .depth(1)\n            .find();\n\n        assertEq(uint(vm.load(address(test), bytes32(slot_for_a_field))), 1);\n        assertEq(uint(vm.load(address(test), bytes32(slot_for_b_field))), 2);\n    }\n}\n\n// A complex storage contract\ncontract Storage {\n    struct UnpackedStruct {\n        uint256 a;\n        uint256 b;\n    }\n\n    constructor() {\n        map_addr[msg.sender] = 1;\n    }\n\n    uint256 public exists = 1;\n    mapping(address => uint256) public map_addr;\n    // mapping(address => Packed) public map_packed;\n    mapping(address => UnpackedStruct) public map_struct;\n    mapping(address => mapping(address => uint256)) public deep_map;\n    mapping(address => mapping(address => UnpackedStruct)) public deep_map_struct;\n    UnpackedStruct public basicStruct = UnpackedStruct({\n        a: 1,\n        b: 2\n    });\n\n    function hidden() public view returns (bytes32 t) {\n        // an extremely hidden storage slot\n        bytes32 slot = keccak256(\"my.random.var\");\n        assembly {\n            t := sload(slot)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Release Branching Model with Mermaid\nDESCRIPTION: This Mermaid diagram illustrates the branching model used in the OpenZeppelin Contracts release process. It shows how release branches are created, how release candidates are managed, and how patches are applied to both the master branch and release branches.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/RELEASING.md#2025-04-14_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: {'gitGraph': {'mainBranchName': 'master'}} }%%\ngitGraph\n  commit id: \"Feature A\"\n  commit id: \"Feature B\"\n  branch release-vX.Y\n  commit id: \"Start release\"\n  commit id: \"Release vX.Y.0-rc.0\"\n\n  checkout master\n  commit id: \"Feature C\"\n  commit id: \"Fix A\"\n\n  checkout release-vX.Y\n  cherry-pick id: \"Fix A\" tag: \"\"\n  commit id: \"Release vX.Y.0-rc.1\"\n  commit id: \"Release vX.Y.0\"\n\n  checkout master\n  merge release-vX.Y\n  commit id: \"Feature D\"\n  commit id: \"Patch B\"\n\n  checkout release-vX.Y\n  cherry-pick id: \"Patch B\" tag: \"\"\n  commit id: \"Release vX.Y.1\"\n  \n  checkout master\n  merge release-vX.Y\n  commit id: \"Feature E\"\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with npm or yarn\nDESCRIPTION: Commands to start the Next.js development server using either npm or yarn package managers. After running these commands, the application will be available at http://localhost:3000.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-wallet-button/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Starting Remix Development Server\nDESCRIPTION: Command to start the Remix application in development mode, which rebuilds assets automatically when files change.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-remix/README.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Disclaimer to RainbowKit\nDESCRIPTION: Shows how to implement a custom disclaimer component with themed text and links in the RainbowKit connection modal\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/custom-app-info.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  RainbowKitProvider,\n  DisclaimerComponent,\n} from '@rainbow-me/rainbowkit';\n\nconst Disclaimer: DisclaimerComponent = ({ Text, Link }) => (\n  <Text>\n    By connecting your wallet, you agree to the{' '}\n    <Link href=\"https://termsofservice.xyz\">Terms of Service</Link> and\n    acknowledge you have read and understand the protocol{' '}\n    <Link href=\"https://disclaimer.xyz\">Disclaimer</Link>\n  </Text>\n);\n\nconst App = () => {\n  return (\n    <RainbowKitProvider\n      appInfo={{\n        appName: 'RainbowKit Demo',\n        disclaimer: Disclaimer,\n      }}\n      {...etc}\n    >\n      {/* ... */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Rainbow Button and Dependencies\nDESCRIPTION: Command to install the Rainbow Button package and its peer dependencies using npm.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbow-button/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rainbow-me/rainbow-button wagmi viem@2.x @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Accessing Authentication Session on Server-Side with NextAuth\nDESCRIPTION: Server-side code demonstrating how to access and validate user authentication sessions, retrieve wallet addresses, and pass authentication data to page components.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/fr/docs/authentication.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GetServerSideProps, InferGetServerSidePropsType } from 'next';\nimport { getSession } from 'next-auth/react';\nimport { getToken } from 'next-auth/jwt';\nimport React from 'react';\n\nexport const getServerSideProps: GetServerSideProps = async context => {\n  const session = await getSession(context);\n  const token = await getToken({ req: context.req });\n\n  const address = token?.sub ?? null;\n  // If you have a value for \"address\" here, your\n  // server knows the user is authenticated.\n\n  // You can then pass any data you want\n  // to the page component here.\n  return {\n    props: {\n      address,\n      session,\n    },\n  };\n};\n\ntype AuthenticatedPageProps = InferGetServerSidePropsType<\n  typeof getServerSideProps\n>;\n\nexport default function AuthenticatedPage({\n  address,\n}: AuthenticatedPageProps) {\n  return address ? (\n    <h1>Authenticated as {address}</h1>\n  ) : (\n    <h1>Unauthenticated</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using either npm or yarn. This allows developers to run the application locally for development and testing.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Creating a New Remix Project from Template\nDESCRIPTION: Commands for creating a new Remix project with pre-configured hosting options and copying over an existing app directory.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-remix/README.md#2025-04-14_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd ..\n# create a new project, and pick a pre-configured host\nnpx create-remix@latest\ncd my-new-remix-app\n# remove the new project's app (not the old one!)\nrm -rf app\n# copy your app over\ncp -R ../my-old-remix-app/app app\n```\n\n----------------------------------------\n\nTITLE: Customizing SIWE Message Options in RainbowKit\nDESCRIPTION: Example of how to customize the Sign-In with Ethereum message options by providing a function to the RainbowKitSiweNextAuthProvider.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/de/docs/authentication.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  RainbowKitSiweNextAuthProvider,\n  GetSiweMessageOptions,\n} from '@rainbow-me/rainbowkit-siwe-next-auth';\n\nconst getSiweMessageOptions: GetSiweMessageOptions = () => ({\n  statement: 'Sign in to my RainbowKit app',\n});\n\n<RainbowKitSiweNextAuthProvider\n  getSiweMessageOptions={getSiweMessageOptions}\n>\n  ...\n</RainbowKitSiweNextAuthProvider>;\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using either npm or yarn package managers. After running these commands, the application will be available at http://localhost:3000.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-custom-button/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Configuring RainbowKit with SIWE and NextAuth Providers\nDESCRIPTION: Complete setup for integrating RainbowKit with Sign-In with Ethereum and NextAuth. This configures the necessary providers in a Next.js app component for wallet authentication.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/es-419/docs/authentication.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitSiweNextAuthProvider } from '@rainbow-me/rainbowkit-siwe-next-auth';\nimport { RainbowKitProvider } from '@rainbow-me/rainbowkit';\nimport { SessionProvider } from 'next-auth/react';\nimport type { Session } from 'next-auth';\nimport { AppProps } from 'next/app';\nimport { WagmiProvider } from 'wagmi';\nimport {\n  QueryClientProvider,\n  QueryClient,\n} from \"@tanstack/react-query\";\n\nconst queryClient = new QueryClient();\n\nexport default function App({\n  Component,\n  pageProps,\n}: AppProps<{\n  session: Session;\n}>) {\n  return (\n    <WagmiProvider {...etc}>\n      <SessionProvider refetchInterval={0} session={pageProps.session}>\n        <QueryClientProvider client={queryClient}>\n          <RainbowKitSiweNextAuthProvider>\n            <RainbowKitProvider {...etc}>\n              <Component {...pageProps} />\n            </RainbowKitProvider>\n          </RainbowKitSiweNextAuthProvider>\n        </QueryClientProvider>\n      </SessionProvider>\n    </WagmiProvider>;\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for RainbowKit Next.js Project\nDESCRIPTION: Command to start the local development server for the RainbowKit + Next.js application. Running this command will start the development server on port 3000.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/create-rainbowkit/templates/next-app/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using stdError for Expected Revert Testing in Solidity\nDESCRIPTION: Demonstrates how to use the stdError contract to test for expected arithmetic errors in Solidity tests. The example shows setting up a test case that expects a specific error when an underflow occurs.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/lib/forge-std/README.md#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"forge-std/Test.sol\";\n\ncontract TestContract is Test {\n    ErrorsTest test;\n\n    function setUp() public {\n        test = new ErrorsTest();\n    }\n\n    function testExpectArithmetic() public {\n        vm.expectRevert(stdError.arithmeticError);\n        test.arithmeticError(10);\n    }\n}\n\ncontract ErrorsTest {\n    function arithmeticError(uint256 a) public {\n        a = a - 100;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing SIWE Message Options\nDESCRIPTION: Example showing how to customize the Sign-In with Ethereum message by implementing the getSiweMessageOptions function to modify the statement displayed to users during authentication.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/es-419/docs/authentication.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  RainbowKitSiweNextAuthProvider,\n  GetSiweMessageOptions,\n} from '@rainbow-me/rainbowkit-siwe-next-auth';\n\nconst getSiweMessageOptions: GetSiweMessageOptions = () => ({\n  statement: 'Sign in to my RainbowKit app',\n});\n\n<RainbowKitSiweNextAuthProvider\n  getSiweMessageOptions={getSiweMessageOptions}\n>\n  ...\n</RainbowKitSiweNextAuthProvider>;\n```\n\n----------------------------------------\n\nTITLE: Accessing Help Documentation\nDESCRIPTION: Commands to access help documentation for Forge, Anvil, and Cast tools\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/README.md#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ forge --help\n$ anvil --help\n$ cast --help\n```\n\n----------------------------------------\n\nTITLE: Migrating from SafeMath to Math.sol in Solidity\nDESCRIPTION: Code changes required when migrating from SafeMath to Math.sol in Solidity 0.8.0+, which replaces the SafeMath library with the new Math utility that contains the remaining operations not covered by native overflow checks.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n+ import \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n function tryOperations(uint256 x, uint256 y) external view {\n-  (bool overflowsAdd, uint256 resultAdd) = SafeMath.tryAdd(x, y);\n+  (bool overflowsAdd, uint256 resultAdd) = Math.tryAdd(x, y);\n-  (bool overflowsSub, uint256 resultSub) = SafeMath.trySub(x, y);\n+  (bool overflowsSub, uint256 resultSub) = Math.trySub(x, y);\n-  (bool overflowsMul, uint256 resultMul) = SafeMath.tryMul(x, y);\n+  (bool overflowsMul, uint256 resultMul) = Math.tryMul(x, y);\n-  (bool overflowsDiv, uint256 resultDiv) = SafeMath.tryDiv(x, y);\n+  (bool overflowsDiv, uint256 resultDiv) = Math.tryDiv(x, y);\n   // ...\n }\n```\n\n----------------------------------------\n\nTITLE: Customizing Chain Icons with createConfig\nDESCRIPTION: This example demonstrates how to customize chain icons and backgrounds using the createConfig method from RainbowKit.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/pt-BR/docs/chains.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { mainnet, optimism } from 'wagmi/chains';\nimport { Chain } from '@rainbow-me/rainbowkit';\n\nconst chains: readonly [Chain, ...Chain[]] = [\n  {\n    ...mainnet,\n    iconBackground: '#000',\n    iconUrl: 'https://example.com/icons/ethereum.png',\n  },\n  {\n    ...optimism,\n    iconBackground: '#ff0000',\n    iconUrl: 'https://example.com/icons/optimism.png',\n  },\n];\n\nconst config = createConfig({\n  chains,\n});\n```\n\n----------------------------------------\n\nTITLE: Running Basic Verification Commands for Foundry Contributions\nDESCRIPTION: Commands to verify code formatting and test functionality before submitting a pull request to Foundry. These commands check code formatting and run tests with verbose output.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/forge-std/CONTRIBUTING.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nforge fmt --check\nforge test -vvv\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Versions Table in Markdown\nDESCRIPTION: This snippet shows a markdown table that outlines which versions of OpenZeppelin Contracts receive critical security fixes and other security fixes. It uses checkmarks and x marks to indicate support status.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/SECURITY.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Critical security fixes | Other security fixes |\n| ------- | ----------------------- | -------------------- |\n| 5.x     | :white_check_mark:      | :white_check_mark:   |\n| 4.9     | :white_check_mark:      | :x:                  |\n| 3.4     | :white_check_mark:      | :x:                  |\n| 2.5     | :x:                     | :x:                  |\n| < 2.0   | :x:                     | :x:                  |\n```\n\n----------------------------------------\n\nTITLE: Buggy Token Contract Example\nDESCRIPTION: Example of a vulnerable token contract implementation that demonstrates potential security issues that can be detected using Halmos symbolic testing\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/lib/halmos-cheatcodes/README.md#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n/// @notice This is a buggy token contract. DO NOT use it in production.\ncontract Token {\n    mapping(address => uint) public balanceOf;\n\n    constructor() public {\n        balanceOf[msg.sender] = 1e27;\n    }\n\n    function transfer(address to, uint amount) public {\n        _transfer(msg.sender, to, amount);\n    }\n\n    function _transfer(address from, address to, uint amount) public {\n        balanceOf[from] -= amount;\n        balanceOf[to] += amount;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Compatibility with Multiple Solidity Compiler Versions\nDESCRIPTION: Commands to verify that code changes are compatible across various Solidity compiler versions. These build commands target specific compiler versions from 0.6.2 through 0.8.0.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/forge-std/CONTRIBUTING.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nforge build --skip test --use solc:0.6.2\nforge build --skip test --use solc:0.6.12\nforge build --skip test --use solc:0.7.0\nforge build --skip test --use solc:0.7.6\nforge build --skip test --use solc:0.8.0\n```\n\n----------------------------------------\n\nTITLE: Adding Zerion Wallet Support in TypeScript\nDESCRIPTION: Example of adding Zerion wallet support to RainbowKit's wallet list.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/CHANGELOG.md#2025-04-14_snippet_33\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  getDefaultWallets,\n  connectorsForWallets,\n} from \"@rainbow-me/rainbowkit\";\nimport { zerionWallet } from \"@rainbow-me/rainbowkit/wallets\";\nconst { wallets } = getDefaultWallets({ appName, chains });\nconst connectors = connectorsForWallets([\n  ...wallets,\n  {\n    groupName: \"Other\",\n    wallets: [zerionWallet({ chains })],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Using console2.log for Debug Logging in Solidity\nDESCRIPTION: Shows how to use the recommended console2.sol for debug logging in Solidity contracts. This implementation properly decodes logs in Forge traces, improving upon the standard console.log.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/lib/forge-std/README.md#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n// import it indirectly via Test.sol\nimport \"forge-std/Test.sol\";\n// or directly import it\nimport \"forge-std/console2.sol\";\n...\nconsole2.log(someValue);\n```\n\n----------------------------------------\n\nTITLE: Updating Cheatcodes in Foundry Using Python Script\nDESCRIPTION: Command to run the Python script for updating cheatcodes in the Vm.sol file. The script can be run with default settings or with a custom JSON file path.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/forge-std/CONTRIBUTING.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/vm.py --from path/to/cheatcodes.json\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: Version history entries documenting changes to the Next.js example project, including dependency updates for RainbowKit, wagmi, viem, React, and Next.js.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# with-next\n\n## 0.0.101\n\n### Patch Changes\n\n- 182440a: Upgraded `wagmi` to `^2.14.11` and `viem` to `2.23.3`\n- 3f82fe8: Adopted Biome formatting, modernized tsconfig\n- Updated dependencies [f89eb92]\n- Updated dependencies [a765cfc]\n- Updated dependencies [9c9c491]\n- Updated dependencies [f5a7cec]\n- Updated dependencies [e4547b8]\n  - @rainbow-me/rainbowkit@2.2.4\n```\n\n----------------------------------------\n\nTITLE: Modifier Pattern Analysis - Solidity\nDESCRIPTION: Analysis of modifier pattern 'if(bool){_;}' used in Pausable contract. This pattern works for functions returning false on failure but could be problematic for functions expected to throw.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/audits/2017-03.md#2025-04-14_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nif(bool){_;}\n```\n\n----------------------------------------\n\nTITLE: Linking to Security Policy and Issue Creation in Markdown\nDESCRIPTION: These markdown links point to the security policy and the page for opening a new issue in the OpenZeppelin Contracts repository. They use the same markdown link syntax as the previous example.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/CONTRIBUTING.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[security policy]: https://github.com/OpenZeppelin/openzeppelin-contracts/security\n[open an issue]: https://github.com/OpenZeppelin/openzeppelin-contracts/issues/new/choose\n```\n\n----------------------------------------\n\nTITLE: Displaying Certora Make Script Help in Bash\nDESCRIPTION: Command to view available make script options for the Certora verification process. Useful for understanding the available automation tools for the verification workflow.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/certora/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake -C certora help\n```\n\n----------------------------------------\n\nTITLE: Linking to OpenZeppelin Forum in Markdown\nDESCRIPTION: This snippet demonstrates how to create a markdown link to the OpenZeppelin Forum. It uses the standard markdown link syntax with square brackets for the link text and parentheses for the URL.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/CONTRIBUTING.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[OpenZeppelin Forum]: https://forum.openzeppelin.com/\n```\n\n----------------------------------------\n\nTITLE: Regex Pattern for AccessControl Revert Strings\nDESCRIPTION: A regex pattern previously used to catch AccessControl revert reasons. Systems interacting with smart contracts should be updated to support the new custom errors introduced in v5.0 instead of relying on revert strings.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/CHANGELOG.md#2025-04-14_snippet_7\n\nLANGUAGE: regex\nCODE:\n```\n/^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n```\n\n----------------------------------------\n\nTITLE: Defining RainbowKit Logo SVG Paths\nDESCRIPTION: SVG path data defining the shapes and colors for the RainbowKit logo. Includes gradient fills, opacity settings, and intricate inner details.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_23\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 48 48\">\n  <path fill=\"url(%23a)\" d=\"M1.09 5.46C0 7.6 0 10.4 0 16v16c0 5.6 0 8.4 1.09 10.54a10 10 0 0 0 4.37 4.37C7.6 48 10.4 48 16 48h16c1.752 0 3.23 0 4.5-.033 0-1.362 0-2.044.066-2.616a10 10 0 0 1 8.785-8.785c.572-.066 1.254-.066 2.616-.066C48 35.23 48 33.752 48 32V16c0-5.6 0-8.4-1.09-10.54a10 10 0 0 0-4.37-4.37C40.4 0 37.6 0 32 0H16C10.4 0 7.6 0 5.46 1.09a10 10 0 0 0-4.37 4.37Z\"/>\n  <!-- Additional path elements omitted for brevity -->\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Rendering Ledger Wallet Icon in SVG\nDESCRIPTION: This SVG code renders the Ledger wallet icon, displaying the Ledger logo as white lines on a black background.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_19\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" fill=\"none\"><path fill=\"%23000\" d=\"M0 0h28v28H0z\"/><path fill=\"%23fff\" fill-rule=\"evenodd\" d=\"M11.65 4.4H4.4V9h1.1V5.5l6.15-.04V4.4Zm.05 5.95v7.25h4.6v-1.1h-3.5l-.04-6.15H11.7ZM4.4 23.6h7.25v-1.06L5.5 22.5V19H4.4v4.6ZM16.35 4.4h7.25V9h-1.1V5.5l-6.15-.04V4.4Zm7.25 19.2h-7.25v-1.06l6.15-.04V19h1.1v4.6Z\" clip-rule=\"evenodd\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Referencing Author in Git Commits for Markdown\nDESCRIPTION: Demonstrates how to give credit to original contributors when taking over their work, using Git commit metadata tags.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/lib/forge-std/CONTRIBUTING.md#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nAuthor: \nCo-authored-by: \n```\n\n----------------------------------------\n\nTITLE: Installing Forge Standard Library with Forge\nDESCRIPTION: Command to install the Forge Standard Library using the forge package manager.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/lib/forge-std/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge install foundry-rs/forge-std\n```\n\n----------------------------------------\n\nTITLE: Digital Wallet Icons SVG Paths\nDESCRIPTION: SVG path definitions that create a complex icon set for a digital wallet interface. Includes multiple colored sections, gradients, and opacity masks to create the visual elements representing digital asset functionality.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_12\n\nLANGUAGE: SVG\nCODE:\n```\n<path fill=\"%23fff\" d=\"M32.313 13.438h-1.126V14h1.125v-.563Z\"/><path fill=\"%23000\" d=\"M33.438 13.438h-1.126V14h1.126v-.563Z\"/><path fill=\"%23B9185C\" d=\"M34 13.438h-.563V14H34v-.563Zm1.125 0h-.563V14h.563v-.563Z\"/>\n```\n\n----------------------------------------\n\nTITLE: Removing siwe and ethers dependencies for migration to viem\nDESCRIPTION: Command to uninstall siwe and ethers packages as part of migration to viem/siwe for smart contract signature verification.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit-siwe-next-auth/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall siwe ethers\n```\n\n----------------------------------------\n\nTITLE: Installing Halmos Cheatcodes as Git Submodule\nDESCRIPTION: Command to add Halmos cheatcodes directly as a git submodule\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/openzeppelin-contracts/lib/halmos-cheatcodes/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule add https://github.com/a16z/halmos-cheatcodes\n```\n\n----------------------------------------\n\nTITLE: WalletConnect Icon SVG Definition\nDESCRIPTION: SVG definition for the WalletConnect logo with blue background and white connection paths\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/public/llms-full.txt#2025-04-14_snippet_11\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"28\" height=\"28\" fill=\"%233B99FC\"/>\n<path d=\"M8.38969 10.3739C11.4882 7.27538 16.5118 7.27538 19.6103 10.3739L19.9832 10.7468C20.1382 10.9017 20.1382 11.1529 19.9832 11.3078L18.7076 12.5835C18.6301 12.6609 18.5045 12.6609 18.4271 12.5835L17.9139 12.0703C15.7523 9.9087 12.2477 9.9087 10.0861 12.0703L9.53655 12.6198C9.45909 12.6973 9.3335 12.6973 9.25604 12.6198L7.98039 11.3442C7.82547 11.1893 7.82547 10.9381 7.98039 10.7832L8.38969 10.3739ZM22.2485 13.012L23.3838 14.1474C23.5387 14.3023 23.5387 14.5535 23.3838 14.7084L18.2645 19.8277C18.1096 19.9827 17.8584 19.9827 17.7035 19.8277C17.7035 19.8277 17.7035 19.8277 17.7035 19.8277L14.0702 16.1944C14.0314 16.1557 13.9686 16.1557 13.9299 16.1944C13.9299 16.1944 13.9299 16.1944 13.9299 16.1944L10.2966 19.8277C10.1417 19.9827 9.89053 19.9827 9.73561 19.8278C9.7356 19.8278 9.7356 19.8277 9.7356 19.8277L4.61619 14.7083C4.46127 14.5534 4.46127 14.3022 4.61619 14.1473L5.75152 13.012C5.90645 12.857 6.15763 12.857 6.31255 13.012L9.94595 16.6454C9.98468 16.6841 10.0475 16.6841 10.0862 16.6454C10.0862 16.6454 10.0862 16.6454 10.0862 16.6454L13.7194 13.012C13.8743 12.857 14.1255 12.857 14.2805 13.012C14.2805 13.012 14.2805 13.012 14.2805 13.012L17.9139 16.6454C17.9526 16.6841 18.0154 16.6841 18.0541 16.6454L21.6874 13.012C21.8424 12.8571 22.0936 12.8571 22.2485 13.012Z\" fill=\"white\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Importing Rainbow Button Styles in CSS\nDESCRIPTION: Code snippet showing how to import the Rainbow Button styling in a project. This resolves an issue where the styling was not exported properly.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbow-button/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"@rainbow-me/rainbow-button/styles.css\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in Robot.txt\nDESCRIPTION: This snippet defines the rules for web crawlers accessing the site. It allows all user agents and doesn't disallow any specific paths.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-create-react-app/public/robots.txt#2025-04-14_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Router Template\nDESCRIPTION: Command to install all required dependencies for the React Router template project using npm package manager.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-react-router/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Migrating getCsrfToken for next-auth version 4.22.0+\nDESCRIPTION: Diff showing how to update the getCsrfToken parameters for compatibility with next-auth versions 4.21.0 and above.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit-siwe-next-auth/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- const nonce = await getCsrfToken({ req });\n+ const nonce = await getCsrfToken({ req: { headers: req.headers } });\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Update Entry\nDESCRIPTION: Changelog entry documenting upgrade of wagmi and viem dependencies along with formatting changes\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-custom-button/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- 182440a: Upgraded `wagmi` to `^2.14.11` and `viem` to `2.23.3`\n- 3f82fe8: Adopted Biome formatting, modernized tsconfig\n- Updated dependencies [f89eb92]\n- Updated dependencies [a765cfc]\n- Updated dependencies [9c9c491]\n- Updated dependencies [f5a7cec]\n- Updated dependencies [e4547b8]\n  - @rainbow-me/rainbowkit@2.2.4\n```\n\n----------------------------------------\n\nTITLE: Renaming WagmiProvider to WagmiConfig in RainbowKit 0.2.x (JavaScript)\nDESCRIPTION: This snippet shows how to rename WagmiProvider to WagmiConfig when updating to RainbowKit 0.2.x.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/zh-TW/docs/migration-guide.mdx#2025-04-14_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n- WagmiProvider\n+ WagmiConfig\n} from 'wagmi'\n\nconst App = () => {\n  return (\n-   <WagmiProvider client={wagmiClient}>...</WagmiProvider>\n+   <WagmiConfig client={wagmiClient}>...</WagmiConfig>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Coinbase Wallet with Smart Wallet in RainbowKit\nDESCRIPTION: Example of enabling Coinbase Smart Wallet for testing purposes by setting its preference to 'smartWalletOnly'. This allows developers to test Smart Wallet with sepolia and baseSepolia chains.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/en-US/docs/custom-wallet-list.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { coinbaseWallet } from '@rainbow-me/rainbowkit/wallets';\n\n// Enable Coinbase Smart Wallet for testing\ncoinbaseWallet.preference = 'smartWalletOnly';\n```\n\n----------------------------------------\n\nTITLE: Customizing RainbowKit Theme Properties (TSX)\nDESCRIPTION: This example shows how to customize various theme properties like accentColor, borderRadius, and fontStack when applying a theme in RainbowKit.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/zh-TW/docs/theming.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RainbowKitProvider, darkTheme } from '@rainbow-me/rainbowkit';\n\nexport const App = () => (\n  <RainbowKitProvider\n    theme={darkTheme({\n      __accentColor__: '#7b3fe4',\n      __accentColorForeground__: 'white',\n      __borderRadius__: 'small',\n      __fontStack__: 'system',\n      __overlayBlur__: 'small',\n    })}\n    {...etc}\n  >\n    {/* Your App */}\n  </RainbowKitProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Navigating to RainbowKit Example Directory\nDESCRIPTION: Command to change into an example project directory such as 'with-next'.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/with-next\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Avatar Component in RainbowKit (TypeScript/TSX)\nDESCRIPTION: This code snippet demonstrates how to create a custom avatar component and integrate it into a RainbowKit application. It handles both ENS images and generates a color-based avatar for addresses without ENS images.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/site/data/id/docs/custom-avatars.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  RainbowKitProvider,\n  AvatarComponent,\n} from '@rainbow-me/rainbowkit';\nimport { generateColorFromAddress } from './utils';\n\nconst CustomAvatar: AvatarComponent = ({ address, ensImage, size }) => {\n  const color = generateColorFromAddress(address);\n  return ensImage ? (\n    <img\n      src={ensImage}\n      width={size}\n      height={size}\n      style={{ borderRadius: 999 }}\n    />\n  ) : (\n    <div\n      style={{\n        backgroundColor: color,\n        borderRadius: 999,\n        height: size,\n        width: size,\n      }}\n    >\n      :^)\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <RainbowKitProvider avatar={CustomAvatar} {...etc}>\n      {/* ... */}\n    </RainbowKitProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing External Links in Markdown\nDESCRIPTION: This code snippet demonstrates how to create reference-style links in Markdown, which are used at the bottom of the document to provide easy access to external resources and documentation.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/forge-std/CONTRIBUTING.md#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[rust-coc]: https://github.com/rust-lang/rust/blob/master/CODE_OF_CONDUCT.md\n[dev-tg]: https://t.me/foundry_rs\n[foundry-book]: https://github.com/foundry-rs/foundry-book\n[support-tg]: https://t.me/foundry_support\n[mcve]: https://stackoverflow.com/help/mcve\n[hiding-a-comment]: https://help.github.com/articles/managing-disruptive-comments/#hiding-a-comment\n```\n\n----------------------------------------\n\nTITLE: Using stdStorage for Finding and Manipulating Storage Slots\nDESCRIPTION: Comprehensive example of using stdStorage to find and manipulate contract storage slots. Demonstrates finding slots for variables, mappings, and structs without knowing the storage layout.\nSOURCE: https://github.com/rainbow-me/rainbowkit/blob/main/examples/with-next-mint-nft/contract/lib/forge-std/README.md#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"forge-std/Test.sol\";\n\ncontract TestContract is Test {\n    using stdStorage for StdStorage;\n\n    Storage test;\n\n    function setUp() public {\n        test = new Storage();\n    }\n\n    function testFindExists() public {\n        // Lets say we want to find the slot for the public\n        // variable `exists`. We just pass in the function selector\n        // to the `find` command\n        uint256 slot = stdstore.target(address(test)).sig(\"exists()\").find();\n        assertEq(slot, 0);\n    }\n\n    function testWriteExists() public {\n        // Lets say we want to write to the slot for the public\n        // variable `exists`. We just pass in the function selector\n        // to the `checked_write` command\n        stdstore.target(address(test)).sig(\"exists()\").checked_write(100);\n        assertEq(test.exists(), 100);\n    }\n\n    // It supports arbitrary storage layouts, like assembly based storage locations\n    function testFindHidden() public {\n        // `hidden` is a random hash of a bytes, iteration through slots would\n        // not find it. Our mechanism does\n        // Also, you can use the selector instead of a string\n        uint256 slot = stdstore.target(address(test)).sig(test.hidden.selector).find();\n        assertEq(slot, uint256(keccak256(\"my.random.var\")));\n    }\n\n    // If targeting a mapping, you have to pass in the keys necessary to perform the find\n    // i.e.:\n    function testFindMapping() public {\n        uint256 slot = stdstore\n            .target(address(test))\n            .sig(test.map_addr.selector)\n            .with_key(address(this))\n            .find();\n        // in the `Storage` constructor, we wrote that this address' value was 1 in the map\n        // so when we load the slot, we expect it to be 1\n        assertEq(uint(vm.load(address(test), bytes32(slot))), 1);\n    }\n\n    // If the target is a struct, you can specify the field depth:\n    function testFindStruct() public {\n        // NOTE: see the depth parameter - 0 means 0th field, 1 means 1st field, etc.\n        uint256 slot_for_a_field = stdstore\n            .target(address(test))\n            .sig(test.basicStruct.selector)\n            .depth(0)\n            .find();\n\n        uint256 slot_for_b_field = stdstore\n            .target(address(test))\n            .sig(test.basicStruct.selector)\n            .depth(1)\n            .find();\n\n        assertEq(uint(vm.load(address(test), bytes32(slot_for_a_field))), 1);\n        assertEq(uint(vm.load(address(test), bytes32(slot_for_b_field))), 2);\n    }\n}\n\n// A complex storage contract\ncontract Storage {\n    struct UnpackedStruct {\n        uint256 a;\n        uint256 b;\n    }\n\n    constructor() {\n        map_addr[msg.sender] = 1;\n    }\n\n    uint256 public exists = 1;\n    mapping(address => uint256) public map_addr;\n    // mapping(address => Packed) public map_packed;\n    mapping(address => UnpackedStruct) public map_struct;\n    mapping(address => mapping(address => uint256)) public deep_map;\n    mapping(address => mapping(address => UnpackedStruct)) public deep_map_struct;\n    UnpackedStruct public basicStruct = UnpackedStruct({\n        a: 1,\n        b: 2\n    });\n\n    function hidden() public view returns (bytes32 t) {\n        // an extremely hidden storage slot\n        bytes32 slot = keccak256(\"my.random.var\");\n        assembly {\n            t := sload(slot)\n        }\n    }\n}\n```"
  }
]