[
  {
    "owner": "owebeeone",
    "repo": "pythonopenscad",
    "content": "TITLE: Creating a Basic 3D Model with PythonOpenScad\nDESCRIPTION: Example showing how to create a 3D model by combining spheres and cubes, with color attributes and translation. Demonstrates model creation, file export, and rendering capabilities.\nSOURCE: https://github.com/owebeeone/pythonopenscad/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pythonopenscad.posc_main import posc_main, PoscModel\nfrom pythonopenscad import PoscBase, Cube, translate, Sphere, Color\nfrom pythonopenscad.m3dapi import M3dRenderer\n\n# Create a simple model\ndef make_model() -> PoscBase:\n\t  return Sphere(r=10) - Color(\"red\")(\n            Cube([10, 10, 10]).translate([0, 2, 0])\n        ) - Color(\"cyan\")(Cube([2, 2, 20]))\n\nmodel = make_model()\n# Save to OpenSCAD file\nmodel.write('my_model.scad')\n\n# Render to STL\nrc = model.renderObj(M3dRenderer())\nrc.write_solid_stl(\"mystl.stl\")\n\n# Or, view the result in a 3D viewer.\nposc_main([make_model])\n```\n\n----------------------------------------\n\nTITLE: Implementing Modules and Lazy Unions\nDESCRIPTION: Demonstration of using Modules and LazyUnion for creating reusable components and managing multi-component models in OpenSCAD.\nSOURCE: https://github.com/owebeeone/pythonopenscad/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pythonopenscad import LazyUnion, Module, Text, Translate\n\nthing1 = Text(\"Hello world!\", size=15).linear_extrude(height=2).translate([-60, 20, 0])\nthing2 = Text(\"Hello world 2!\", size=15).linear_extrude(height=2).translate([-60, 0, 0])\nprint(\n    LazyUnion()(\n        Module(\"my_module\")(thing1),\n\t\tModule(\"my_module\")(thing2),\n        Translate(v=[0, -40, 0])(Module(\"my_module\")(thing1)),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Generating 3D Text using OpenPyScad Style\nDESCRIPTION: Example of creating 3D text using the OpenPyScad style API, demonstrating text creation, linear extrusion, and translation.\nSOURCE: https://github.com/owebeeone/pythonopenscad/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pythonopenscad import Text \n\nprint(\n\tText('Hello world!', size=15).linear_extrude(height=2)\n\t\t.translate([-60, 0, 0]))\n```\n\n----------------------------------------\n\nTITLE: Generating 3D Text using SolidPython Style\nDESCRIPTION: Alternative approach to creating 3D text using the SolidPython style API, showing nested function calls for transformations.\nSOURCE: https://github.com/owebeeone/pythonopenscad/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pythonopenscad import text, linear_extrude, translate\n\nprint(\n\ttranslate(v=[-60, 0, 0]) (\n\t\tlinear_extrude(height=2) (\n\t\t\ttext(text='Hello world!', size=15)\n\t\t),\n\t)\n)\n```\n\n----------------------------------------\n\nTITLE: Running Basic Viewer Example in Python\nDESCRIPTION: This command runs the basic viewer example script, which creates and displays 3D models using the PyOpenSCAD viewer.\nSOURCE: https://github.com/owebeeone/pythonopenscad/blob/master/examples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython viewer_example.py\n```\n\n----------------------------------------\n\nTITLE: Running M3D Renderer Integration Example in Python\nDESCRIPTION: This command executes the M3D renderer integration example script, which demonstrates the integration of the viewer with the M3dRenderer class for visualizing Manifold3D objects.\nSOURCE: https://github.com/owebeeone/pythonopenscad/blob/master/examples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython m3d_viewer_example.py\n```\n\n----------------------------------------\n\nTITLE: Installing PythonOpenScad with pip\nDESCRIPTION: Command to install PythonOpenScad using pip package manager. Requires Python 3.10 or later.\nSOURCE: https://github.com/owebeeone/pythonopenscad/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pythonopenscad\n```\n\n----------------------------------------\n\nTITLE: Installing Viewer Dependencies with pip\nDESCRIPTION: This pip command installs the necessary dependencies for the viewer examples, including PyOpenGL, PyOpenGL-accelerate, PyGLM, and manifold3d.\nSOURCE: https://github.com/owebeeone/pythonopenscad/blob/master/examples/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install PyOpenGL PyOpenGL-accelerate PyGLM manifold3d\n```\n\n----------------------------------------\n\nTITLE: Generated OpenSCAD Output Example\nDESCRIPTION: Example of the OpenSCAD code generated by both the OpenPyScad and SolidPython style implementations, showing the unified output format.\nSOURCE: https://github.com/owebeeone/pythonopenscad/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: openscad\nCODE:\n```\n// Generated OpenScad code\ntranslate(v=[-60.0, 0.0, 0.0]) {\n\tlinear_extrude(height=2.0) {\n\ttext(text=\"Hello world!\", size=15.0);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Module Code in OpenSCAD\nDESCRIPTION: The resulting OpenSCAD code generated from the Modules and LazyUnion example, showing module definitions and usage.\nSOURCE: https://github.com/owebeeone/pythonopenscad/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: openscad\nCODE:\n```\n// Start: lazy_union\nmy_module();\nmy_module_1();\ntranslate(v=[0.0, -40.0, 0.0]) {\n  my_module();\n}\n// End: lazy_union\n\n// Modules.\n\nmodule my_module() {\n  translate(v=[-60.0, 20.0, 0.0]) {\n    linear_extrude(height=2.0) {\n      text(text=\"Hello world!\", size=15.0);\n    }\n  }\n} // end module my_module\n\nmodule my_module_1() {\n  translate(v=[-60.0, 0.0, 0.0]) {\n    linear_extrude(height=2.0) {\n      text(text=\"Hello world 2!\", size=15.0);\n    }\n  }\n} // end module my_module_1\n```"
  }
]