[
  {
    "owner": "bee-queue",
    "repo": "bee-queue",
    "content": "TITLE: Basic Bee-Queue Usage Example in Node.js\nDESCRIPTION: A simple example demonstrating how to create a queue, add a job with data, and process it in Node.js. The example shows both job creation and processing, including event handling for the job completion.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Queue = require('bee-queue');\nconst queue = new Queue('example');\n\nconst job = queue.createJob({x: 2, y: 3});\njob.save();\njob.on('succeeded', (result) => {\n  console.log(`Received result for job ${job.id}: ${result}`);\n});\n\n// Process jobs from as many servers or processes as you like\nqueue.process(function (job, done) {\n  console.log(`Processing job ${job.id}`);\n  return done(null, job.data.x + job.data.y);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Queue Instances in Bee-Queue\nDESCRIPTION: Examples of how to create queue instances with different configurations. The second example shows how to specify custom Redis settings and set the queue to job producer mode only.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Queue = require('bee-queue');\nconst addQueue = new Queue('addition');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst subQueue = new Queue('subtraction', {\n  redis: {\n    host: 'somewhereElse',\n  },\n  isWorker: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Jobs in Bee-Queue\nDESCRIPTION: Example of creating a job with data, configuring it with timeout and retry options, and saving it to the queue. The save method returns a Promise that resolves when the job is enqueued.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst job = addQueue.createJob({x: 2, y: 3});\njob\n  .timeout(3000)\n  .retries(2)\n  .save()\n  .then((job) => {\n    // job enqueued, job.id populated\n  });\n```\n\n----------------------------------------\n\nTITLE: Processing Jobs with Promise/Async-Await Pattern\nDESCRIPTION: Example of using async/await syntax for job processing. The handler can return a Promise directly instead of using a callback, making the code more readable with modern JavaScript.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\naddQueue.process(async (job) => {\n  console.log(`Processing job ${job.id}`);\n  return job.data.x + job.data.y;\n});\n```\n\n----------------------------------------\n\nTITLE: Processing Jobs with Concurrency Control\nDESCRIPTION: Example of setting up a job processor with limited concurrency. This allows controlling how many jobs are processed simultaneously by a single processor instance, which is useful for I/O-bound operations.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst baseUrl = 'http://www.google.com/search?q=';\nsubQueue.process(10, function (job, done) {\n  http.get(`${baseUrl}${job.data.x}-${job.data.y}`, function (res) {\n    // parse the difference out of the response...\n    return done(null, difference);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Default Queue Settings Configuration in Bee-Queue\nDESCRIPTION: Shows the complete default configuration options for a Bee-Queue instance. These settings control behavior like stall detection, delayed job handling, Redis connection details, and job persistence.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst queue = new Queue('test', {\n  prefix: 'bq',\n  stallInterval: 5000,\n  nearTermWindow: 1200000,\n  delayedDebounce: 1000,\n  redis: {\n    host: '127.0.0.1',\n    port: 6379,\n    db: 0,\n    options: {},\n  },\n  isWorker: true,\n  getEvents: true,\n  sendEvents: true,\n  storeJobs: true,\n  ensureScripts: true,\n  activateDelayedJobs: false,\n  removeOnSuccess: false,\n  removeOnFailure: false,\n  redisScanCount: 100,\n  autoConnect: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Gracefully Closing a Bee Queue\nDESCRIPTION: Shows the recommended pattern for gracefully shutting down a Bee Queue worker. It handles uncaught exceptions and attempts to close the queue with a timeout before exiting the process.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// Some reasonable period of time for all your concurrent jobs to finish\n// processing. If a job does not finish processing in this time, it will stall\n// and be retried. As such, do attempt to make your jobs idempotent, as you\n// generally should with any queue that provides at-least-once delivery.\nconst TIMEOUT = 30 * 1000;\n\nprocess.on('uncaughtException', async () => {\n  // Queue#close is idempotent - no need to guard against duplicate calls.\n  try {\n    await queue.close(TIMEOUT);\n  } catch (err) {\n    console.error('bee-queue failed to shut down gracefully', err);\n  }\n  process.exit(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Reporting in Bee-Queue with JavaScript\nDESCRIPTION: Demonstrates how to create a job with progress reporting functionality. The example shows how to set up event listeners for progress updates and how to report progress from within a job processing function.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst job = addQueue.createJob({x: 2, y: 3}).save();\njob.on('progress', (progress) => {\n  console.log(\n    `Job ${job.id} reported progress: page ${progress.page} / ${progress.totalPages}`\n  );\n});\n\naddQueue.process(async (job) => {\n  // do some work\n  job.reportProgress({page: 3, totalPages: 11});\n  // do more work\n  job.reportProgress({page: 9, totalPages: 11});\n  // do the rest\n});\n```\n\n----------------------------------------\n\nTITLE: Reporting Job Progress in Bee Queue\nDESCRIPTION: Shows how to report progress from within a job processing function. This updates the job.progress property and emits a 'progress' event to listeners.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nqueue.process(async (job, done) => {\n  await doSomethingQuick();\n\n  job.reportProgress(10);\n\n  await doSomethingBigger();\n\n  job.reportProgress(50);\n\n  await doFinalizeStep();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Job Retries in Bee Queue\nDESCRIPTION: Demonstrates how to configure automatic retries for a job using the retries() method. This sets how many times the job should be retried if it fails.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconst job = await queue.createJob({...})\n  .retries(3)\n  .save();\n```\n\n----------------------------------------\n\nTITLE: Configuring Job Backoff Strategy in Bee Queue\nDESCRIPTION: Shows how to configure different backoff strategies for job retries: immediate, fixed delay, or exponential backoff. This controls the timing between retry attempts.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// When the job fails, retry it immediately.\nconst job = queue.createJob({...})\n  .backoff('immediate');\n// When the job fails, wait the given number of milliseconds before retrying.\njob.backoff('fixed', 1000);\n// When the job fails, retry using an exponential backoff policy.\n// In this example, the first retry will be after one second after completion\n// of the first attempt, and the second retry will be two seconds after completion\n// of the first retry.\njob.backoff('exponential', 1000);\n```\n\n----------------------------------------\n\nTITLE: Checking Queue Health in Bee Queue\nDESCRIPTION: Demonstrates how to check the health of a Bee Queue instance, which returns counts of jobs in different states (waiting, active, succeeded, failed, delayed) and the newest job ID.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst counts = await queue.checkHealth();\n// print all the job counts\nconsole.log('job state counts:', counts);\n```\n\n----------------------------------------\n\nTITLE: Bulk-Creating Jobs with Queue#saveAll Method\nDESCRIPTION: Advanced technique for creating multiple jobs efficiently by saving them in a pipelined network request. This reduces Redis round-trip time when creating many jobs at once.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\naddQueue\n  .saveAll([addQueue.createJob({x: 3, y: 4}), addQueue.createJob({x: 4, y: 5})])\n  .then((errors) => {\n    // The errors value is a Map associating Jobs with Errors. This will often be an empty Map.\n  });\n```\n\n----------------------------------------\n\nTITLE: Optimizing Redis Connections for Producer Queues in Bee-Queue\nDESCRIPTION: Shows how to optimize Redis connections by sharing a single connection among multiple producer queues. This technique reduces the number of Redis connections when deploying across multiple servers.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// producer queues running on the web server\nconst Queue = require('bee-queue');\nconst redis = require('redis');\nconst sharedConfig = {\n  getEvents: false,\n  isWorker: false,\n  redis: redis.createClient(process.env.REDIS_URL),\n};\n\nconst emailQueue = new Queue('EMAIL_DELIVERY', sharedConfig);\nconst facebookUpdateQueue = new Queue('FACEBOOK_UPDATE', sharedConfig);\n\nemailQueue.createJob({});\nfacebookUpdateQueue.createJob({});\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker Queues with Shared Redis Connection in Bee-Queue\nDESCRIPTION: Demonstrates how to set up worker queues with a shared Redis connection. Note that while the same Redis client is passed, Bee-Queue will duplicate the connection for each worker queue to handle blocking commands and PubSub.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// worker queues running on the worker server\nconst Queue = require('bee-queue');\nconst redis = require('redis');\nconst sharedConfig = {\n  redis: redis.createClient(process.env.REDIS_URL),\n};\n\nconst emailQueue = new Queue('EMAIL_DELIVERY', sharedConfig);\nconst facebookUpdateQueue = new Queue('FACEBOOK_UPDATE', sharedConfig);\n\nemailQueue.process((job) => {});\nfacebookUpdateQueue.process((job) => {});\n```\n\n----------------------------------------\n\nTITLE: Using Queue#ready in Bee Queue\nDESCRIPTION: Shows how to use the ready() method to wait until the queue and Redis are ready for jobs. This returns a promise that resolves to the queue instance when ready.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst Queue = require('bee-queue');\nconst queue = new Queue('example');\nqueue\n  .ready()\n  .then(async (queue) => {\n    console.log('isRunning:', queue.isRunning());\n    const checkHealth = await queue.checkHealth();\n    console.log('checkHealth:', checkHealth);\n  })\n  .catch((err) => console.log('unreadyable', err));\n```\n\n----------------------------------------\n\nTITLE: Setting Job Timeout in Bee Queue\nDESCRIPTION: Shows how to set a runtime timeout for a job using the timeout() method. If the job takes longer than the specified time to complete, it will be considered failed.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nconst job = await queue.createJob({...})\n  .timeout(10000)\n  .save();\n```\n\n----------------------------------------\n\nTITLE: Delaying Job Execution in Bee Queue\nDESCRIPTION: Demonstrates how to delay a job until a specific date or timestamp using the delayUntil() method. The job will not be processed until the specified time.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nconst job = await queue.createJob({...})\n  .delayUntil(Date.parse('2038-01-19T03:14:08.000Z'))\n  .save();\n```\n\n----------------------------------------\n\nTITLE: Handling Job Success Events in Bee Queue\nDESCRIPTION: Shows how to listen for the 'succeeded' event on a job to handle successful job completion. The event handler receives the job result if one was provided.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst job = await queue.createJob({...}).save();\njob.on('succeeded', (result) => {\n  console.log(`Job ${job.id} succeeded with result: ${result}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Job Failure Events in Bee Queue\nDESCRIPTION: Shows how to listen for the 'failed' event on a job, which fires when a job has failed and is not being retried. The handler receives the error that caused the failure.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\njob.on('failed', (err) => {\n  console.log(`Job ${job.id} failed with error ${err.message}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Monitoring Job Progress in Bee Queue\nDESCRIPTION: Demonstrates how to listen for progress reports from a job. The 'progress' event fires when a job reports its progress percentage during execution.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\njob.on('progress', (progress) => {\n  console.log(`Job ${job.id} reported progress: ${progress}%`);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving multiple jobs by type in Bee-Queue\nDESCRIPTION: Looks up jobs by their queue type with pagination. Different job types ('waiting', 'active', 'delayed', 'failed', 'succeeded') require different pagination parameters.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nqueue.getJobs('waiting', {start: 0, end: 25}).then((jobs) => {\n  const jobIds = jobs.map((job) => job.id);\n  console.log(`Job ids: ${jobIds.join(' ')}`);\n});\n\nqueue.getJobs('failed', {size: 100}).then((jobs) => {\n  const jobIds = jobs.map((job) => job.id);\n  console.log(`Job ids: ${jobIds.join(' ')}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a job by ID in Bee-Queue\nDESCRIPTION: Looks up a job by its jobId and returns it. The job will emit events if getEvents and storeJobs settings are true. Supports both callback and Promise interfaces.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nqueue.getJob(3, function (err, job) {\n  console.log(`Job 3 has status ${job.status}`);\n});\n\nqueue.getJob(3).then((job) => console.log(`Job 3 has status ${job.status}`));\n```\n\n----------------------------------------\n\nTITLE: Saving a Job to Bee Queue\nDESCRIPTION: Demonstrates how to save a job to the queue using both callback and promise patterns. After saving, the job.id property will be populated with the assigned ID.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nconst job = queue.createJob({...});\njob.save((err, job) => {\n  console.log(`Saved job ${job.id}`);\n});\n\njob.save().then((job) => console.log(`Saved job ${job.id}`));\n```\n\n----------------------------------------\n\nTITLE: Handling 'ready' event in Bee-Queue\nDESCRIPTION: Listens for the queue's 'ready' event which fires when the queue has connected to Redis and ensured Lua scripts are cached. This event indicates the queue is ready to start processing jobs.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nqueue.on('ready', () => {\n  console.log('queue now ready to start doing things');\n});\n```\n\n----------------------------------------\n\nTITLE: Handling 'succeeded' event in Bee-Queue\nDESCRIPTION: Listens for successful job completion and captures the job result. This event fires when a job has been successfully processed by the queue.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nqueue.on('succeeded', (job, result) => {\n  console.log(`Job ${job.id} succeeded with result: ${result}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling 'failed' event in Bee-Queue\nDESCRIPTION: Listens for job failures. This event fires when a job has failed either by rejecting its returned Promise or by calling done(err) in the handler function.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nqueue.on('failed', (job, err) => {\n  console.log(`Job ${job.id} failed with error ${err.message}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling 'error' event in Bee-Queue\nDESCRIPTION: Listens for Redis errors that are re-emitted from the Queue. This event handler catches Redis-related errors but does not handle failed jobs.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nqueue.on('error', (err) => {\n  console.log(`A queue error happened: ${err.message}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling 'retrying' event in Bee-Queue\nDESCRIPTION: Listens for job retry attempts after failures. This event fires when a job has failed but is being re-enqueued for another attempt with decremented retries count.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nqueue.on('retrying', (job, err) => {\n  console.log(\n    `Job ${job.id} failed with error ${err.message} but is being retried!`\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Handling 'stalled' event in Bee-Queue\nDESCRIPTION: Listens for stalled jobs that will be reprocessed. This event is emitted by the queue instance that detected the stalled job, not necessarily the one that processed it.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nqueue.on('stalled', (jobId) => {\n  console.log(`Job ${jobId} stalled and will be reprocessed`);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for stalled jobs in Bee-Queue\nDESCRIPTION: Checks for jobs that appear to be stalling and re-enqueues them. Can be configured to run on an interval. Returns the number of stalled jobs detected.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nqueue.checkStalledJobs(5000, (err, numStalled) => {\n  // prints the number of stalled jobs detected every 5000 ms\n  console.log('Checked stalled jobs', numStalled);\n});\n```\n\n----------------------------------------\n\nTITLE: Removing a Job from Bee Queue\nDESCRIPTION: Shows how to remove a job by its ID using both callback and promise patterns. This method is idempotent but should be used with care as it may have unintended side-effects.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nqueue.removeJob(3, function (err) {\n  if (!err) {\n    console.log('Job 3 was removed');\n  }\n});\n\nqueue.removeJob(3).then(() => console.log('Job 3 was removed'));\n```\n\n----------------------------------------\n\nTITLE: Removing a Job Instance in Bee Queue\nDESCRIPTION: Demonstrates how to remove a job from the queue using the job.remove() method with both callback and promise patterns. This is idempotent but should be used carefully.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nconst job = queue.createJob({...});\n\n// ...\n\njob.remove(function (err) {\n  if (!err) {\n    console.log('Job was removed');\n  }\n});\n\njob.remove()\n  .then(() => console.log('Job was removed'));\n```\n\n----------------------------------------\n\nTITLE: Destroying a Bee Queue\nDESCRIPTION: Demonstrates how to completely destroy a queue, removing all Redis keys belonging to it. This method is idempotent but should be used with great care.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nqueue.destroy(function (err) {\n  if (!err) {\n    console.log('Queue was destroyed');\n  }\n});\n\nqueue.destroy().then(() => console.log('Queue was destroyed'));\n```\n\n----------------------------------------\n\nTITLE: Handling 'job succeeded' PubSub event in Bee-Queue\nDESCRIPTION: Listens for successful job completion from any worker in the system. This event is sent via Redis PubSub from workers with sendEvents enabled to queues with getEvents enabled.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nqueue.on('job succeeded', (jobId, result) => {\n  console.log(`Job ${jobId} succeeded with result: ${result}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling 'job retrying' PubSub event in Bee-Queue\nDESCRIPTION: Listens for job retry attempts from any worker in the system. This PubSub event indicates a job has failed but is being retried by some worker queue.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nqueue.on('job retrying', (jobId, err) => {\n  console.log(\n    `Job ${jobId} failed with error ${err.message} but is being retried!`\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Handling 'job failed' PubSub event in Bee-Queue\nDESCRIPTION: Listens for job failures from any worker in the system. This PubSub event indicates a job has permanently failed in some worker queue.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nqueue.on('job failed', (jobId, err) => {\n  console.log(`Job ${jobId} failed with error ${err.message}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling 'job progress' PubSub event in Bee-Queue\nDESCRIPTION: Listens for job progress updates from any worker in the system. This PubSub event receives progress percentage reports from jobs being processed by worker queues.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nqueue.on('job progress', (jobId, progress) => {\n  console.log(`Job ${jobId} reported progress: ${progress}%`);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a job in Bee-Queue\nDESCRIPTION: Creates a new job with the provided data. Returns a Job object that can be configured and enqueued.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst job = queue.createJob({...});\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Bee Queue Manually\nDESCRIPTION: Demonstrates how to manually connect to a Bee Queue when autoConnect is set to false. This allows for more control over when the queue establishes its Redis connections.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst Queue = require('bee-queue');\nconst queue = new Queue('example', {\n  redis: redis: redis.createClient(process.env.REDIS_URL),\n  autoConnect: false;\n});\nawait queue.connect();\nqueue.createJob({...})\n//...\n```\n\n----------------------------------------\n\nTITLE: Handling Job Retry Events in Bee Queue\nDESCRIPTION: Demonstrates how to listen for the 'retrying' event on a job, which fires when a job fails but is being automatically retried based on retry settings.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\njob.on('retrying', (err) => {\n  console.log(\n    `Job ${job.id} failed with error ${err.message} but is being retried!`\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Job ID in Bee Queue\nDESCRIPTION: Shows how to set a custom ID for a job using the setId() method. This can be used to ensure a job runs only once for a specific resource.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nconst job = await queue.createJob({...})\n  .setId('bulk')\n  .save();\n```\n\n----------------------------------------\n\nTITLE: Installing Bee-Queue with npm\nDESCRIPTION: Command to install Bee-Queue package from npm. Redis 2.8+ is also required, with Redis 3.2+ recommended to avoid delayed job issues.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install bee-queue\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Docker with Bee-Queue\nDESCRIPTION: Commands for running tests and other operations in an ephemeral Docker container with its own Redis server. This enables isolated testing without affecting the local Redis instance.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\n$ ./run-docker-script.sh\n\n$ ./run-docker-script.sh npx ava --serial --fail-fast --verbose --no-color --timeout 30000\n\n$ ./run-docker-script.sh npm run coverage\n\n$ ./run-docker-script.sh bash\n\n$ ./run-docker-script.sh --help\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Express and Bee-Queue Example\nDESCRIPTION: This command installs the required npm packages for the Express server and logging middleware.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/examples/express/README.md#2025-04-14_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm i morgan@1 express@4\n```\n\n----------------------------------------\n\nTITLE: Starting the Bee-Queue Worker Process\nDESCRIPTION: This command runs the worker script that processes jobs from the queue.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/examples/express/README.md#2025-04-14_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnode worker.js\n```\n\n----------------------------------------\n\nTITLE: Starting the Express Web Server\nDESCRIPTION: This command starts the Express web server that handles incoming requests and enqueues jobs.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/examples/express/README.md#2025-04-14_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnode web.js\n```\n\n----------------------------------------\n\nTITLE: Running Pong Server in Node.js\nDESCRIPTION: This command starts the 'pong' server, which should be run first before initiating the ping process.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/examples/pingpong/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode pong.js\n```\n\n----------------------------------------\n\nTITLE: Initiating Ping Client in Node.js\nDESCRIPTION: This command starts the 'ping' client, which should be run after the pong server is already running to demonstrate the back-and-forth communication.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/examples/pingpong/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode ping.js\n```\n\n----------------------------------------\n\nTITLE: Processing Jobs with Callback-Style Handler\nDESCRIPTION: Example of setting up a job processor with a callback-style handler function. The function receives the job object and a done callback to report results or errors.\nSOURCE: https://github.com/bee-queue/bee-queue/blob/master/README.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\naddQueue.process(function (job, done) {\n  console.log(`Processing job ${job.id}`);\n  return done(null, job.data.x + job.data.y);\n});\n```"
  }
]