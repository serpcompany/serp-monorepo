[
  {
    "owner": "trailblazer",
    "repo": "trailblazer-macro",
    "content": "TITLE: Using Model Macro for Model Creation - Ruby\nDESCRIPTION: Demonstrates using the Model macro in a Trailblazer operation to handle model creation. The macro automatically creates a new instance of the specified model (Song in this case).\nSOURCE: https://github.com/trailblazer/trailblazer-macro/blob/master/README.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Song::Create < Trailblazer::Operation\n  step Policy::Guard( :authorize! )\n  step Model( Song, :new )\nend\n```\n\n----------------------------------------\n\nTITLE: Using Model Macro for Finding by Key - Ruby\nDESCRIPTION: Demonstrates using the Model macro with `:find_by` to find a model by a specific key (title). If the third parameter is not provided, it defaults to `:id`.\nSOURCE: https://github.com/trailblazer/trailblazer-macro/blob/master/README.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Song::Create < Trailblazer::Operation\n  step Policy::Guard( :authorize! )\n  step Model( Song, :find_by, :title )\nend\n```\n\n----------------------------------------\n\nTITLE: Using Policy::Pundit Macro - Ruby\nDESCRIPTION: Demonstrates using the `Policy::Pundit` macro in a Trailblazer operation. It integrates a Pundit-compatible policy (MyPolicy) with the `create?` rule. The model is implicitly grabbed from ['model'].\nSOURCE: https://github.com/trailblazer/trailblazer-macro/blob/master/README.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass Create < Trailblazer::Operation\n  step Model( Song, :new )\n  step Policy::Pundit( MyPolicy, :create? )\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Policy::Pundit API Usage - Ruby\nDESCRIPTION: Shows how to add Pundit policies using the `Policy::Pundit` macro. The policy instance is created automatically, and the \"model\" and \"current_user\" skills are passed into the policy's constructor.\nSOURCE: https://github.com/trailblazer/trailblazer-macro/blob/master/README.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Create < Trailblazer::Operation\n  step Model( Song, :new )\n  step Policy::Pundit( MyPolicy, :create? )\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Applying Policy to Operation - Ruby\nDESCRIPTION: Shows how to apply a policy to a Trailblazer operation using the `Policy` macro. The `Comment::Policy` class and its `create?` method are used to determine authorization.\nSOURCE: https://github.com/trailblazer/trailblazer-macro/blob/master/README.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Comment::Create < Trailblazer::Operation\n  step Policy( Comment::Policy, :create? )\nend\n```\n\n----------------------------------------\n\nTITLE: Policy::Guard Macro Example - Ruby\nDESCRIPTION: Demonstrates using the `Policy::Guard` macro with a lambda function as a guard. The operation will only execute the `process` step if the `params[:pass]` value is truthy.\nSOURCE: https://github.com/trailblazer/trailblazer-macro/blob/master/README.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass Create < Trailblazer::Operation\n  step Policy::Guard( ->(options, params:, **) { params[:pass] } )\n  step :process\n\n  def process(*)\n    self[\"x\"] = true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Policy::Guard API Example - Ruby\nDESCRIPTION: Shows how to insert guard logic using the `Policy::Guard` macro with a lambda. The options object is passed into the guard, allowing access to data like params or current_user.\nSOURCE: https://github.com/trailblazer/trailblazer-macro/blob/master/README.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass Create < Trailblazer::Operation\n  step Policy::Guard( ->(options, params:, **) { params[:pass] } )\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Pundit Policy Example - Ruby\nDESCRIPTION: Pundit policy example defining `create?` and `new?` methods, utilizing `user` and `model` instances initialized in the constructor. The policy checks user type and model ID.\nSOURCE: https://github.com/trailblazer/trailblazer-macro/blob/master/README.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyPolicy\n  def initialize(user, model)\n    @user, @model = user, model\n  end\n\n  def create?\n    @user == Module && @model.id.nil?\n  end\n\n  def new?\n    @user == Class\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Policy Class Example with Pundit - Ruby\nDESCRIPTION: Illustrates a simple policy class with a `create?` method, which is used to authorize users. It takes a user and a comment as arguments and checks if the user is an admin.\nSOURCE: https://github.com/trailblazer/trailblazer-macro/blob/master/README.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Comment::Policy\n  def initialize(user, comment)\n    @user, @comment = user, comment\n  end\n\n  def create?\n    @user.admin?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Naming Pundit Policies - Ruby\nDESCRIPTION: Demonstrates how to name Pundit policies using the `name:` option. This allows for multiple policies to be used in a pipe, and the results are stored in `result.policy.{name}`.\nSOURCE: https://github.com/trailblazer/trailblazer-macro/blob/master/README.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass Create < Trailblazer::Operation\n  step Model( Song, :new )\n  step Policy::Pundit( MyPolicy, :create?, name: \"after_model\" )\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Policy::Guard with Callable Object - Ruby\nDESCRIPTION: Demonstrates using a Callable object as a guard. The `MyGuard` class implements the `call` method, which is then used with the `Policy::Guard` macro.\nSOURCE: https://github.com/trailblazer/trailblazer-macro/blob/master/README.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyGuard\n  include Uber::Callable\n\n  def call(options, params:, **)\n    params[:pass]\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Create < Trailblazer::Operation\n  step Policy::Guard( MyGuard.new )\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Policy::Guard with Instance Method - Ruby\nDESCRIPTION: Shows how to use an instance method as a guard. The `pass?` method is defined within the `Create` class and used with the `Policy::Guard` macro.\nSOURCE: https://github.com/trailblazer/trailblazer-macro/blob/master/README.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nclass Create < Trailblazer::Operation\n  step Policy::Guard( :pass? )\n\n  def pass?(options, params:, **)\n    params[:pass]\n  end\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Naming Policy::Guard - Ruby\nDESCRIPTION: Demonstrates how to name Policy::Guard using the `name:` option to allow for multiple guards in one operation. The result is then accessible via `result.policy.{name}`.\nSOURCE: https://github.com/trailblazer/trailblazer-macro/blob/master/README.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nclass Create < Trailblazer::Operation\n  step Policy::Guard( ->(options, current_user:, **) { current_user }, name: :user )\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Policy::Guard Position - Ruby\nDESCRIPTION: Specifies the position of the Policy::Guard using the `before:` option, inserting the guard before the `model!` step.\nSOURCE: https://github.com/trailblazer/trailblazer-macro/blob/master/README.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass Create < Trailblazer::Operation\n  step :model!\n  step Policy::Guard( :authorize! ), before: :model!\nend\n```"
  }
]