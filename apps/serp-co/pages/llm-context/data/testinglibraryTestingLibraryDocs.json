[
  {
    "owner": "testing-library",
    "repo": "testing-library-docs",
    "content": "TITLE: Basic React Testing Library Test Implementation\nDESCRIPTION: A minimal example showing how to test a React component that loads data. The test renders a component, simulates a user click, waits for an API response, and asserts the expected UI changes.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/example-intro.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport '@testing-library/jest-dom'\nimport Fetch from './fetch'\n\ntest('loads and displays greeting', async () => {\n  // ARRANGE\n  render(<Fetch url=\"/greeting\" />)\n\n  // ACT\n  await userEvent.click(screen.getByText('Load Greeting'))\n  await screen.findByRole('heading')\n\n  // ASSERT\n  expect(screen.getByRole('heading')).toHaveTextContent('hello there')\n  expect(screen.getByRole('button')).toBeDisabled()\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Library Imports and Dependencies Setup\nDESCRIPTION: Shows the necessary imports for setting up a React component test, including React Testing Library, MSW for API mocking, and jest-dom for custom matchers.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/example-intro.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// import dependencies\nimport React from 'react'\n\n// import API mocking utilities from Mock Service Worker\nimport {http, HttpResponse} from 'msw'\nimport {setupServer} from 'msw/node'\n\n// import react-testing methods\nimport {render, fireEvent, screen} from '@testing-library/react'\n\n// add custom jest matchers from jest-dom\nimport '@testing-library/jest-dom'\n// the component to test\nimport Fetch from '../fetch'\n```\n\n----------------------------------------\n\nTITLE: Testing DOM Interactions with Testing Library in JavaScript\nDESCRIPTION: This code demonstrates how to use Testing Library to test DOM interactions. It includes importing query utilities, setting up a custom DOM, and writing tests for user interactions. The example covers form input, button clicks, and asynchronous updates.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/example-intro.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// query utilities:\nimport {\n  getByLabelText,\n  getByText,\n  getByTestId,\n  queryByTestId,\n  // Tip: all queries are also exposed on an object\n  // called \"queries\" which you could import here as well\n  waitFor,\n} from '@testing-library/dom'\n// adds special assertions like toHaveTextContent\nimport '@testing-library/jest-dom'\n\nfunction getExampleDOM() {\n  // This is just a raw example of setting up some DOM\n  // that we can interact with. Swap this with your UI\n  // framework of choice 😉\n  const div = document.createElement('div')\n  div.innerHTML = `\n    <label for=\"username\">Username</label>\n    <input id=\"username\" />\n    <button>Print Username</button>\n  `\n  const button = div.querySelector('button')\n  const input = div.querySelector('input')\n  button.addEventListener('click', () => {\n    // let's pretend this is making a server request, so it's async\n    // (you'd want to mock this imaginary request in your unit tests)...\n    setTimeout(() => {\n      const printedUsernameContainer = document.createElement('div')\n      printedUsernameContainer.innerHTML = `\n        <div data-testid=\"printed-username\">${input.value}</div>\n      `\n      div.appendChild(printedUsernameContainer)\n    }, Math.floor(Math.random() * 200))\n  })\n  return div\n}\n\ntest('examples of some things', async () => {\n  const famousProgrammerInHistory = 'Ada Lovelace'\n  const container = getExampleDOM()\n\n  // Get form elements by their label text.\n  // An error will be thrown if one cannot be found (accessibility FTW!)\n  const input = getByLabelText(container, 'Username')\n  input.value = famousProgrammerInHistory\n\n  // Get elements by their text, just like a real user does.\n  getByText(container, 'Print Username').click()\n\n  await waitFor(() =>\n    expect(queryByTestId(container, 'printed-username')).toBeTruthy(),\n  )\n\n  // getByTestId and queryByTestId are an escape hatch to get elements\n  // by a test id (could also attempt to get this element by its text)\n  expect(getByTestId(container, 'printed-username')).toHaveTextContent(\n    famousProgrammerInHistory,\n  )\n  // jest snapshots work great with regular DOM nodes!\n  expect(container).toMatchSnapshot()\n})\n```\n\n----------------------------------------\n\nTITLE: Complete React Component Test with MSW for API Mocking\nDESCRIPTION: A full example test implementation using Mock Service Worker (MSW) to simulate API responses, with tests for both successful and error scenarios. Shows proper test setup with beforeAll and afterEach hooks.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/example-intro.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {http, HttpResponse} from 'msw'\nimport {setupServer} from 'msw/node'\nimport {render, fireEvent, screen} from '@testing-library/react'\nimport '@testing-library/jest-dom'\nimport Fetch from '../fetch'\n\nconst server = setupServer(\n  http.get('/greeting', () => {\n    return HttpResponse.json({greeting: 'hello there'})\n  }),\n)\n\nbeforeAll(() => server.listen())\nafterEach(() => server.resetHandlers())\nafterAll(() => server.close())\n\ntest('loads and displays greeting', async () => {\n  render(<Fetch url=\"/greeting\" />)\n\n  fireEvent.click(screen.getByText('Load Greeting'))\n\n  await screen.findByRole('heading')\n\n  expect(screen.getByRole('heading')).toHaveTextContent('hello there')\n  expect(screen.getByRole('button')).toBeDisabled()\n})\n\ntest('handles server error', async () => {\n  server.use(\n    http.get('/greeting', () => {\n      return new HttpResponse(null, {status: 500})\n    }),\n  )\n\n  render(<Fetch url=\"/greeting\" />)\n\n  fireEvent.click(screen.getByText('Load Greeting'))\n\n  await screen.findByRole('alert')\n\n  expect(screen.getByRole('alert')).toHaveTextContent('Oops, failed to fetch!')\n  expect(screen.getByRole('button')).not.toBeDisabled()\n})\n```\n\n----------------------------------------\n\nTITLE: Complete render Example with Assertions\nDESCRIPTION: Example demonstrating how to use render function in a test with assertions using getByText and snapshot matching.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/api.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render} from '@testing-library/react'\nimport '@testing-library/jest-dom'\n\ntest('renders a message', () => {\n  const {asFragment, getByText} = render(<Greeting />)\n  expect(getByText('Hello, world!')).toBeInTheDocument()\n  expect(asFragment()).toMatchInlineSnapshot(`\n    <h1>Hello, World!</h1>\n  `)\n})\n```\n\n----------------------------------------\n\nTITLE: Testing React Context Providers and Consumers with Testing Library\nDESCRIPTION: This comprehensive example demonstrates how to test React Context components in various scenarios. It shows how to test default context values, custom provider values, context composition, and full provider-consumer integration. The code uses @testing-library/react and Jest for assertions.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-react-context.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport '@testing-library/jest-dom'\nimport {NameContext, NameProvider, NameConsumer} from '../react-context'\n\n/**\n * Test default values by rendering a context consumer without a\n * matching provider\n */\ntest('NameConsumer shows default value', () => {\n  render(<NameConsumer />)\n  expect(screen.getByText(/^My Name Is:/)).toHaveTextContent(\n    'My Name Is: Unknown',\n  )\n})\n\n/**\n * A custom render to setup providers. Extends regular\n * render options with `providerProps` to allow injecting\n * different scenarios to test with.\n *\n * @see https://testing-library.com/docs/react-testing-library/setup#custom-render\n */\nconst customRender = (ui, {providerProps, ...renderOptions}) => {\n  return render(\n    <NameContext.Provider {...providerProps}>{ui}</NameContext.Provider>,\n    renderOptions,\n  )\n}\n\ntest('NameConsumer shows value from provider', () => {\n  const providerProps = {\n    value: 'C3PO',\n  }\n  customRender(<NameConsumer />, {providerProps})\n  expect(screen.getByText(/^My Name Is:/)).toHaveTextContent('My Name Is: C3P0')\n})\n\n/**\n * To test a component that provides a context value, render a matching\n * consumer as the child\n */\ntest('NameProvider composes full name from first, last', () => {\n  const providerProps = {\n    first: 'Boba',\n    last: 'Fett',\n  }\n  customRender(\n    <NameContext.Consumer>\n      {value => <span>Received: {value}</span>}\n    </NameContext.Consumer>,\n    {providerProps},\n  )\n  expect(screen.getByText(/^Received:/).textContent).toBe('Received: Boba Fett')\n})\n\n/**\n * A tree containing both a providers and consumer can be rendered normally\n */\ntest('NameProvider/Consumer shows name of character', () => {\n  const wrapper = ({children}) => (\n    <NameProvider first=\"Leia\" last=\"Organa\">\n      {children}\n    </NameProvider>\n  )\n\n  render(<NameConsumer />, {wrapper})\n  expect(screen.getByText(/^My Name Is:/).textContent).toBe(\n    'My Name Is: Leia Organa',\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Testing a React Component with useReducer\nDESCRIPTION: A test for the Example component that verifies the component displays the correct text before and after the confirmation button is clicked. The test uses React Testing Library to render the component and interact with it.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-react-hooks-useReducer.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// example.test.js\n\nimport React from 'react'\nimport {render, fireEvent} from '@testing-library/react'\nimport Example from './example.js'\n\nit('shows success message after confirm button is clicked', () => {\n  const {getByText} = render(<Example />)\n\n  expect(getByText(/waiting/i)).toBeInTheDocument()\n\n  fireEvent.click(getByText('Confirm'))\n\n  expect(getByText('Confirmed!')).toBeInTheDocument()\n})\n```\n\n----------------------------------------\n\nTITLE: Using findBy Queries for Testing Asynchronous DOM Changes in JavaScript\nDESCRIPTION: This example demonstrates how to use findBy queries to test elements that appear in the DOM after an asynchronous action. The code clicks a button and waits for text to appear after each click.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-async.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = screen.getByRole('button', {name: 'Click Me'})\nfireEvent.click(button)\nawait screen.findByText('Clicked once')\nfireEvent.click(button)\nawait screen.findByText('Clicked twice')\n```\n\n----------------------------------------\n\nTITLE: Testing React Router v6 with React Testing Library\nDESCRIPTION: This snippet demonstrates how to test a React application using React Router v6 and React Testing Library. It includes tests for navigation, rendering on different routes, and components using router hooks.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-react-router.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// app.test.js\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport React from 'react'\nimport '@testing-library/jest-dom'\nimport {App, LocationDisplay} from './app'\nimport {BrowserRouter, MemoryRouter} from 'react-router-dom'\n\ntest('full app rendering/navigating', async () => {\n  render(<App />, {wrapper: BrowserRouter})\n  const user = userEvent.setup()\n\n  // verify page content for default route\n  expect(screen.getByText(/you are home/i)).toBeInTheDocument()\n\n  // verify page content for expected route after navigating\n  await user.click(screen.getByText(/about/i))\n  expect(screen.getByText(/you are on the about page/i)).toBeInTheDocument()\n})\n\ntest('landing on a bad page', () => {\n  const badRoute = '/some/bad/route'\n\n  // use <MemoryRouter> when you want to manually control the history\n  render(\n    <MemoryRouter initialEntries={[badRoute]}>\n      <App />\n    </MemoryRouter>,\n  )\n\n  // verify navigation to \"no match\" route\n  expect(screen.getByText(/no match/i)).toBeInTheDocument()\n})\n\ntest('rendering a component that uses useLocation', () => {\n  const route = '/some-route'\n\n  // use <MemoryRouter> when you want to manually control the history\n  render(\n    <MemoryRouter initialEntries={[route]}>\n      <LocationDisplay />\n    </MemoryRouter>,\n  )\n\n  // verify location display is rendered\n  expect(screen.getByTestId('location-display')).toHaveTextContent(route)\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Input Events with React Testing Library\nDESCRIPTION: This code snippet demonstrates how to create a cost input component in React and test its behavior using React Testing Library. It includes tests for handling dollar sign prefixes, preventing non-numeric inputs, and allowing deletion of the dollar sign.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-input-event.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState} from 'react'\nimport {screen, render, fireEvent} from '@testing-library/react'\n\nfunction CostInput() {\n  const [value, setValue] = useState('')\n\n  const removeDollarSign = value => (value[0] === '$' ? value.slice(1) : value)\n  const getReturnValue = value => (value === '' ? '' : `$${value}`)\n\n  const handleChange = ev => {\n    ev.preventDefault()\n    const inputtedValue = ev.currentTarget.value\n    const noDollarSign = removeDollarSign(inputtedValue)\n    if (isNaN(noDollarSign)) return\n    setValue(getReturnValue(noDollarSign))\n  }\n\n  return <input value={value} aria-label=\"cost-input\" onChange={handleChange} />\n}\n\nconst setup = () => {\n  const utils = render(<CostInput />)\n  const input = screen.getByLabelText('cost-input')\n  return {\n    input,\n    ...utils,\n  }\n}\n\ntest('It should keep a $ in front of the input', () => {\n  const {input} = setup()\n  fireEvent.change(input, {target: {value: '23'}})\n  expect(input.value).toBe('$23')\n})\ntest('It should allow a $ to be in the input when the value is changed', () => {\n  const {input} = setup()\n  fireEvent.change(input, {target: {value: '$23.0'}})\n  expect(input.value).toBe('$23.0')\n})\n\ntest('It should not allow letters to be inputted', () => {\n  const {input} = setup()\n  expect(input.value).toBe('') // empty before\n  fireEvent.change(input, {target: {value: 'Good Day'}})\n  expect(input.value).toBe('') //empty after\n})\n\ntest('It should allow the $ to be deleted', () => {\n  const {input} = setup()\n  fireEvent.change(input, {target: {value: '23'}})\n  expect(input.value).toBe('$23') // need to make a change so React registers \"\" as a change\n  fireEvent.change(input, {target: {value: ''}})\n  expect(input.value).toBe('')\n})\n```\n\n----------------------------------------\n\nTITLE: Basic React Component Testing with Async Example\nDESCRIPTION: Demonstrates how to render a React component, trigger click events, and test async behavior using React Testing Library's core utilities.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/cheatsheet.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, fireEvent, screen} from '@testing-library/react'\n\ntest('loads items eventually', async () => {\n  render(<Page />)\n\n  // Click button\n  fireEvent.click(screen.getByText('Load'))\n\n  // Wait for page to update with query text\n  const items = await screen.findAllByText(/Item #[0-9]: /)\n  expect(items).toHaveLength(10)\n})\n```\n\n----------------------------------------\n\nTITLE: Importing React Testing Library for Component Tests\nDESCRIPTION: Essential imports needed for writing tests with React Testing Library, including React for JSX and the render and screen utilities.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/migrate-from-enzyme.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// import React so you can use JSX (React.createElement) in your test\nimport React from 'react'\n\n/**\n * render: lets us render the component as React would\n * screen: a utility for finding elements the same way the user does\n */\nimport {render, screen} from '@testing-library/react'\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Formik Form Component in React\nDESCRIPTION: Creates a sign-up form component using Formik with async submission handling. The form includes fields for first name, last name, and email, with a simulated submission delay.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-formik.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// myForm.js\nimport React from 'react'\nimport {Formik, Field, Form} from 'formik'\n\nconst sleep = ms => new Promise(r => setTimeout(r, ms))\n\nexport const MyForm = ({onSubmit}) => {\n  const handleSubmit = async values => {\n    await sleep(500)\n    onSubmit(values)\n  }\n\n  return (\n    <div>\n      <h1>Sign Up</h1>\n      <Formik\n        initialValues={{\n          firstName: '',\n          lastName: '',\n          email: '',\n        }}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <label htmlFor=\"firstName\">First Name</label>\n          <Field id=\"firstName\" name=\"firstName\" placeholder=\"Jane\" />\n\n          <label htmlFor=\"lastName\">Last Name</label>\n          <Field id=\"lastName\" name=\"lastName\" placeholder=\"Doe\" />\n\n          <label htmlFor=\"email\">Email</label>\n          <Field\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"jane@acme.com\"\n            type=\"email\"\n          />\n          <button type=\"submit\">Submit</button>\n        </Form>\n      </Formik>\n    </div>\n  )\n```\n\n----------------------------------------\n\nTITLE: Testing a Custom Hook with State and Effect\nDESCRIPTION: Illustrates how to use renderHook to test a custom hook that uses useState and useEffect, accessing the result through result.current.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/api.mdx#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport {renderHook} from '@testing-library/react'\n\nconst {result} = renderHook(() => {\n  const [name, setName] = useState('')\n  React.useEffect(() => {\n    setName('Alice')\n  }, [])\n\n  return name\n})\n\nexpect(result.current).toBe('Alice')\n```\n\n----------------------------------------\n\nTITLE: Annotated React Testing Library Example\nDESCRIPTION: A detailed version of the quickstart example with annotations explaining each line of code. It shows the setup, user interactions simulation, and assertions with custom jest-dom matchers.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/example-intro.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// import react-testing methods\nimport {render, screen} from '@testing-library/react'\n// userEvent library simulates user interactions by dispatching the events that would happen if the interaction took place in a browser.\nimport userEvent from '@testing-library/user-event'\n// add custom jest matchers from jest-dom\nimport '@testing-library/jest-dom'\n// the component to test\nimport Fetch from './fetch'\n\ntest('loads and displays greeting', async () => {\n  // Render a React element into the DOM\n  render(<Fetch url=\"/greeting\" />)\n\n  await userEvent.click(screen.getByText('Load Greeting'))\n  // wait before throwing an error if it cannot find an element\n  await screen.findByRole('heading')\n\n  // assert that the alert message is correct using\n  // toHaveTextContent, a custom matcher from jest-dom.\n  expect(screen.getByRole('heading')).toHaveTextContent('hello there')\n  expect(screen.getByRole('button')).toBeDisabled()\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Test Example with React Testing Library\nDESCRIPTION: A simple example showing how to use the render and screen utilities from React Testing Library to test a login form component.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/about.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, screen} from '@testing-library/react' // (or /dom, /vue, ...)\n\ntest('should show login form', () => {\n  render(<Login />)\n  const input = screen.getByLabelText('Username')\n  // Events and assertions...\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Wrapper Component for renderHook\nDESCRIPTION: Demonstrates how to create a wrapper component to pass props when using renderHook with the wrapper option.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/api.mdx#2025-04-12_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst createWrapper = (Wrapper, props) => {\n  return function CreatedWrapper({ children }) {\n    return <Wrapper {...props}>{children}</Wrapper>;\n  };\n};\n\n...\n\n{\n  wrapper: createWrapper(Wrapper, { value: 'foo' }),\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Formik Form with React Testing Library\nDESCRIPTION: Demonstrates how to test a Formik form using React Testing Library and userEvent. Tests form rendering, user input simulation, and form submission with async validation.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-formik.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// myForm.test.js\nimport React from 'react'\nimport {render, screen, waitFor} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\n\nimport {MyForm} from './myForm.js'\n\ntest('rendering and submitting a basic Formik form', async () => {\n  const handleSubmit = jest.fn()\n  render(<MyForm onSubmit={handleSubmit} />)\n  const user = userEvent.setup()\n\n  await user.type(screen.getByRole('textbox', {name: /first name/i}), 'John')\n  await user.type(screen.getByRole('textbox', {name: /last name/i}), 'Dee')\n  await user.type(\n    screen.getByRole('textbox', {name: /email/i}),\n    'john.dee@someemail.com',\n  )\n\n  await user.click(screen.getByRole('button', {name: /submit/i}))\n\n  await waitFor(() =>\n    expect(handleSubmit).toHaveBeenCalledWith({\n      email: 'john.dee@someemail.com',\n      firstName: 'John',\n      lastName: 'Dee',\n    }),\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Fetch Component Implementation\nDESCRIPTION: The implementation of the Fetch component being tested, which makes API requests using axios and manages state with React hooks. This component demonstrates loading states, success handling, and error handling.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/example-intro.mdx#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState, useReducer} from 'react'\nimport axios from 'axios'\n\nconst initialState = {\n  error: null,\n  greeting: null,\n}\n\nfunction greetingReducer(state, action) {\n  switch (action.type) {\n    case 'SUCCESS': {\n      return {\n        error: null,\n        greeting: action.greeting,\n      }\n    }\n    case 'ERROR': {\n      return {\n        error: action.error,\n        greeting: null,\n      }\n    }\n    default: {\n      return state\n    }\n  }\n}\n\nexport default function Fetch({url}) {\n  const [{error, greeting}, dispatch] = useReducer(\n    greetingReducer,\n    initialState,\n  )\n  const [buttonClicked, setButtonClicked] = useState(false)\n\n  const fetchGreeting = async url =>\n    axios\n      .get(url)\n      .then(response => {\n        const {data} = response\n        const {greeting} = data\n        dispatch({type: 'SUCCESS', greeting})\n        setButtonClicked(true)\n      })\n      .catch(error => {\n        dispatch({type: 'ERROR', error})\n      })\n\n  const buttonText = buttonClicked ? 'Ok' : 'Load Greeting'\n\n  return (\n    <div>\n      <button onClick={() => fetchGreeting(url)} disabled={buttonClicked}>\n        {buttonText}\n      </button>\n      {greeting && <h1>{greeting}</h1>}\n      {error && <p role=\"alert\">Oops, failed to fetch!</p>}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Render Function for React Intl Testing\nDESCRIPTION: Implementation of a custom render function that wraps components with IntlProvider for testing translated components. Includes locale configuration and re-exports of testing utilities.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-react-intl.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {render as rtlRender} from '@testing-library/react'\nimport {IntlProvider} from 'react-intl'\n\nfunction render(ui, {locale = 'pt', ...renderOptions} = {}) {\n  function Wrapper({children}) {\n    return <IntlProvider locale={locale}>{children}</IntlProvider>\n  }\n  return rtlRender(ui, {wrapper: Wrapper, ...renderOptions})\n}\n\nexport * from '@testing-library/react'\nexport {render}\n```\n\n----------------------------------------\n\nTITLE: Improving Keydown Event Testing in JavaScript\nDESCRIPTION: Demonstrates the preferred approach for testing keydown events by focusing the element first and then dispatching the event on the active element, which better simulates actual keyboard interaction behavior.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/guide-events.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n- fireEvent.keyDown(getByText('click me'));\n+ getByText('click me').focus();\n+ fireEvent.keyDown(document.activeElement || document.body);\n```\n\n----------------------------------------\n\nTITLE: Firing Generic DOM Events with fireEvent in TypeScript\nDESCRIPTION: Demonstrates how to use the fireEvent function to trigger a generic DOM event on an HTML element. This example shows firing a click event on a button.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-events.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfireEvent(node: HTMLElement, event: Event)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// <button>Submit</button>\nfireEvent(\n  getByText(container, 'Submit'),\n  new MouseEvent('click', {\n    bubbles: true,\n    cancelable: true,\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Testing with DOM Testing Library in JavaScript\nDESCRIPTION: Illustrates an asynchronous test scenario using DOM Testing Library. It demonstrates clicking a button, waiting for the page to update, and then asserting on the updated content using findAllByText and async/await.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/cheatsheet.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntest('loads items eventually', async () => {\n  // Click button\n  fireEvent.click(getByText(node, 'Load'))\n\n  // Wait for page to update with query text\n  const items = await findAllByText(node, /Item #[0-9]: /)\n  expect(items).toHaveLength(10)\n})\n```\n\n----------------------------------------\n\nTITLE: Mocking server$ calls in Qwik component tests\nDESCRIPTION: An example showing how to mock server$ functions when testing Qwik components that use them. The key detail is that functions with $ suffix are renamed to Qrl suffix by the Qwik optimizer, so mocks must target the renamed function.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/qwik-testing-library/example.mdx#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {render, screen, waitFor} from '@noma.to/qwik-testing-library'\nimport {LatestPostList} from './latest-post-list'\n\nvi.mock('~/server/blog-posts', () => ({\n  // the mocked function should end with `Qrl` instead of `$`\n  getLatestPostsQrl: () => {\n    return Promise.resolve([\n      {id: 'post-1', title: 'Post 1'},\n      {id: 'post-2', title: 'Post 2'},\n    ])\n  },\n}))\n\ndescribe('<LatestPostList />', () => {\n  it('should render the latest posts', async () => {\n    await render(<LatestPostList />)\n\n    expect(await screen.findAllByRole('listitem')).toHaveLength(2)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using userEvent.type() in a React test\nDESCRIPTION: Demonstrates how to use userEvent.type() to simulate typing in a textarea in a React component test.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\n\ntest('type', () => {\n  render(<textarea />)\n\n  userEvent.type(screen.getByRole('textbox'), 'Hello,{enter}World!')\n  expect(screen.getByRole('textbox')).toHaveValue('Hello,\\nWorld!')\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Input Values with React Testing Library\nDESCRIPTION: This snippet shows how to test input values in a React component using React Testing Library. It renders a Welcome component and uses the toHaveFormValues matcher to check if the form inputs have the correct values.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/migrate-from-enzyme.mdx#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\ntest('has correct input value', () => {\n  render(<Welcome firstName=\"John\" lastName=\"Doe\" />)\n  expect(screen.getByRole('form')).toHaveFormValues({\n    firstName: 'John',\n    lastName: 'Doe',\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: React Native Component Testing with Testing Library\nDESCRIPTION: This example demonstrates testing a React Native component with @testing-library/react-native. It shows how to render a component, interact with it using fireEvent, wait for asynchronous updates with findBy queries, and make assertions using custom matchers. The component includes a text input, button, and conditional text display.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-native-testing-library/example-intro.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react'\nimport {Button, Text, TextInput, View} from 'react-native'\nimport {render, screen, fireEvent} from '@testing-library/react-native'\n\nfunction Example() {\n  const [name, setUser] = React.useState('')\n  const [show, setShow] = React.useState(false)\n\n  return (\n    <View>\n      <TextInput value={name} onChangeText={setUser} testID=\"input\" />\n      <Button\n        title=\"Print Username\"\n        onPress={() => {\n          // let's pretend this is making a server request, so it's async\n          // (you'd want to mock this imaginary request in your unit tests)...\n          setTimeout(() => {\n            setShow(true)\n          }, Math.floor(Math.random() * 200))\n        }}\n      />\n      {show && <Text testID=\"printed-username\">{name}</Text>}\n    </View>\n  )\n}\n\ntest('examples of some things', async () => {\n  const expectedUsername = 'Ada Lovelace'\n\n  render(<Example />)\n\n  fireEvent.changeText(screen.getByTestId('input'), expectedUsername)\n  fireEvent.press(screen.getByText('Print Username'))\n\n  // Using `findBy` query to wait for asynchronous operation to finish\n  const usernameOutput = await screen.findByTestId('printed-username')\n\n  // Using `toHaveTextContent` matcher from `@testing-library/jest-native` package.\n  expect(usernameOutput).toHaveTextContent(expectedUsername)\n\n  expect(screen.toJSON()).toMatchSnapshot()\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Event Handlers with Jest Mocks in Angular\nDESCRIPTION: Shows how to use Jest mock functions to test event handlers in an Angular component. This example tests a button click event using Angular's component testing approach.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-events.mdx#2025-04-12_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport {render, screen, fireEvent} from '@testing-library/angular'\n\n@Component({\n  template: `<button (click)=\"handleClick.emit()\">Click Me</button>`,\n})\nclass ButtonComponent {\n  @Output() handleClick = new EventEmitter<void>()\n}\n\ntest('calls onClick prop when clicked', async () => {\n  const handleClick = jest.fn()\n  await render(ButtonComponent, {\n    componentOutputs: {\n      handleClick: {emit: handleClick} as any,\n    },\n  })\n  await fireEvent.click(screen.getByText(/click me/i))\n  expect(handleClick).toHaveBeenCalledTimes(1)\n})\n```\n\n----------------------------------------\n\nTITLE: Testing React Select Component with Multiple Selection\nDESCRIPTION: Example demonstrating how to test a react-select component with multiple selection using react-select-event. Shows how to select multiple values and verify form values using assertions.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/ecosystem-react-select-event.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport Select from 'react-select'\nimport {render} from '@testing-library/react'\nimport selectEvent from 'react-select-event'\n\nconst {getByTestId, getByLabelText} = render(\n  <form data-testid=\"form\">\n    <label htmlFor=\"food\">Food</label>\n    <Select options={OPTIONS} name=\"food\" inputId=\"food\" isMulti />\n  </form>,\n)\nexpect(getByTestId('form')).toHaveFormValues({food: ''}) // empty select\n\n// select two values...\nawait selectEvent.select(getByLabelText('Food'), ['Strawberry', 'Mango'])\nexpect(getByTestId('form')).toHaveFormValues({food: ['strawberry', 'mango']})\n\n// ...and add a third one\nawait selectEvent.select(getByLabelText('Food'), 'Chocolate')\nexpect(getByTestId('form')).toHaveFormValues({\n  food: ['strawberry', 'mango', 'chocolate'],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing React Router v6 in a React Application\nDESCRIPTION: This snippet shows how to set up a basic React application using React Router v6. It includes route definitions, navigation links, and a custom hook for displaying the current location.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-react-router.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// app.js\nimport React from 'react'\nimport {Link, Route, Routes, useLocation} from 'react-router-dom'\n\nconst About = () => <div>You are on the about page</div>\nconst Home = () => <div>You are home</div>\nconst NoMatch = () => <div>No match</div>\n\nexport const LocationDisplay = () => {\n  const location = useLocation()\n\n  return <div data-testid=\"location-display\">{location.pathname}</div>\n}\n\nexport const App = () => (\n  <div>\n    <Link to=\"/\">Home</Link>\n\n    <Link to=\"/about\">About</Link>\n\n    <Routes>\n      <Route path=\"/\" element={<Home />} />\n\n      <Route path=\"/about\" element={<About />} />\n\n      <Route path=\"*\" element={<NoMatch />} />\n    </Routes>\n\n    <LocationDisplay />\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering React Components with Testing Library\nDESCRIPTION: Shows how to use the render method from React Testing Library to mount a React component for testing.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/example-intro.mdx#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nrender(<Fetch url=\"/greeting\" />)\n```\n\n----------------------------------------\n\nTITLE: Setting Up API Mocking with Mock Service Worker\nDESCRIPTION: Shows how to set up API mocking using MSW (Mock Service Worker), including defining mock responses and configuring the test environment with proper lifecycle hooks.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/example-intro.mdx#2025-04-12_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// declare which API requests to mock\nconst server = setupServer(\n  // capture \"GET /greeting\" requests\n  http.get('/greeting', (req, res, ctx) => {\n    // respond using a mocked JSON body\n    return HttpResponse.json({greeting: 'hello there'})\n  }),\n)\n\n// establish API mocking before all tests\nbeforeAll(() => server.listen())\n// reset any request handlers that are declared as a part of our tests\n// (i.e. for testing one-time error scenarios)\nafterEach(() => server.resetHandlers())\n// clean up once the tests are done\nafterAll(() => server.close())\n\n// ...\n\ntest('handles server error', async () => {\n  server.use(\n    // override the initial \"GET /greeting\" request handler\n    // to return a 500 Server Error\n    http.get('/greeting', (req, res, ctx) => {\n      return new HttpResponse(null, {status: 500})\n    }),\n  )\n\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Stubbing Components in Vue Testing Library Tests\nDESCRIPTION: This snippet demonstrates how to stub components in Vue Testing Library tests using the stubs option. It shows how to render a component while stubbing out a FontAwesomeIcon component.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/vue-testing-library/faq.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render} from '@testing-library/vue'\nimport Component from './Component'\n\ntest('Can stub components', () => {\n  render(Component, {\n    global: {stubs: ['FontAwesomeIcon']},\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Querying HTML Element with Text Content in JavaScript\nDESCRIPTION: Demonstrates various ways to query an HTML element by its text content using DOM Testing Library. It shows exact matches, substring matches, case-insensitive matches, regex matches, and custom function matches.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/cheatsheet.mdx#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>Hello World</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Matching a string:\ngetByText(container, 'Hello World') // full string match\ngetByText(container, 'llo Worl', {exact: false}) // substring match\ngetByText(container, 'hello world', {exact: false}) // ignore case\n\n// Matching a regex:\ngetByText(container, /World/) // substring match\ngetByText(container, /world/i) // substring match, ignore case\ngetByText(container, /^hello world$/i) // full string match, ignore case\ngetByText(container, /Hello W?oRlD/i) // advanced regex\n\n// Matching with a custom function:\ngetByText(container, (content, element) => content.startsWith('Hello'))\n```\n\n----------------------------------------\n\nTITLE: Implementing User-Event Test with Setup Function\nDESCRIPTION: Shows how to create a reusable setup function for user-event tests that encapsulates common initialization logic and returns necessary testing utilities.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/intro.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport userEvent from '@testing-library/user-event'\n\n// setup function\nfunction setup(jsx) {\n  return {\n    user: userEvent.setup(),\n    // Import `render` from the framework library of your choice.\n    // See https://testing-library.com/docs/dom-testing-library/install#wrappers\n    ...render(jsx),\n  }\n}\n\ntest('render with a setup function', async () => {\n  const {user} = setup(<MyComponent />)\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Basic TestCafe Testing Library Examples\nDESCRIPTION: Examples demonstrating various Testing Library queries with TestCafe including getByPlaceholderText, getByText, getByLabelText, and queryAllByText.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/testcafe-testing-library/intro.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {screen} from '@testing-library/testcafe'\n\ntest('getByPlaceHolderText', async t => {\n  await t.typeText(\n    screen.getByPlaceholderText('Placeholder Text'),\n    'Hello Placeholder',\n  )\n})\ntest('getByText', async t => {\n  await t.click(screen.getByText('getByText'))\n})\n\ntest('getByLabelText', async t => {\n  await t.typeText(\n    screen.getByLabelText('Label For Input Labelled By Id'),\n    'Hello Input Labelled By Id',\n  )\n})\n\ntest('queryAllByText', async t => {\n  await t.expect(screen.queryAllByText('Button Text').exists).ok()\n  await t\n    .expect(screen.queryAllByText('Non-existing Button Text').exists)\n    .notOk()\n})\n```\n\n----------------------------------------\n\nTITLE: Using asFragment for Snapshot Testing\nDESCRIPTION: Complex example demonstrating how to use asFragment to create snapshots of component state for comparison before and after events.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/api.mdx#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState} from 'react'\nimport {render, fireEvent} from '@testing-library/react'\n\nconst TestComponent = () => {\n  const [count, setCounter] = useState(0)\n\n  return (\n    <button onClick={() => setCounter(count => count + 1)}>\n      Click to increase: {count}\n    </button>\n  )\n}\n\nconst {getByText, asFragment} = render(<TestComponent />)\nconst firstRender = asFragment()\n\nfireEvent.click(getByText(/Click to increase/))\n\n// This will snapshot only the difference between the first render, and the\n// state of the DOM after the click event.\n// See https://github.com/jest-community/snapshot-diff\nexpect(firstRender).toMatchDiffSnapshot(asFragment())\n```\n\n----------------------------------------\n\nTITLE: Custom Render Implementation in JavaScript\nDESCRIPTION: Demonstrates how to create a custom render method with theme and translation providers in JavaScript. Includes re-exporting RTL utilities and overriding the render method.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/setup.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {render} from '@testing-library/react'\nimport {ThemeProvider} from 'my-ui-lib'\nimport {TranslationProvider} from 'my-i18n-lib'\nimport defaultStrings from 'i18n/en-x-default'\n\nconst AllTheProviders = ({children}) => {\n  return (\n    <ThemeProvider theme=\"light\">\n      <TranslationProvider messages={defaultStrings}>\n        {children}\n      </TranslationProvider>\n    </ThemeProvider>\n  )\n}\n\nconst customRender = (ui, options) =>\n  render(ui, {wrapper: AllTheProviders, ...options})\n\n// re-export everything\nexport * from '@testing-library/react'\n\n// override render method\nexport {customRender as render}\n```\n\n----------------------------------------\n\nTITLE: Testing Element Removal with waitForElementToBeRemoved\nDESCRIPTION: Demonstrates using waitForElementToBeRemoved to test when an element is removed from the DOM. This method uses MutationObserver for efficient detection of DOM changes.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/guide-disappearance.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\ntest('movie title no longer present in DOM', async () => {\n  // element is removed\n  await waitForElementToBeRemoved(() => queryByText('the mummy'))\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Component Fixture in Angular Testing\nDESCRIPTION: Shows how to use the fixture property returned by render to access the Angular ComponentFixture, which provides typed access to the component instance. This should be used cautiously as it might lead to testing implementation details.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst {fixture} = await render(AppComponent)\n\n// componentInstance is typed as AppComponent\nconst componentInstance = fixture.componentInstance\n```\n\n----------------------------------------\n\nTITLE: Testing Event Handlers with Jest Mocks in React\nDESCRIPTION: Demonstrates how to use Jest mock functions to test event handlers in a React component. This example tests a button click event.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-events.mdx#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, screen, fireEvent} from '@testing-library/react'\n\nconst Button = ({onClick, children}) => (\n  <button onClick={onClick}>{children}</button>\n)\n\ntest('calls onClick prop when clicked', () => {\n  const handleClick = jest.fn()\n  render(<Button onClick={handleClick}>Click Me</Button>)\n  fireEvent.click(screen.getByText(/click me/i))\n  expect(handleClick).toHaveBeenCalledTimes(1)\n})\n```\n\n----------------------------------------\n\nTITLE: Testing a React Modal Component with React Testing Library\nDESCRIPTION: This example demonstrates how to test a React modal component that uses portals. The code shows both the implementation of a Modal component that uses ReactDOM.createPortal to render content in a separate DOM node, and a test that verifies the modal displays children properly and handles close button clicks.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-react-modal.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useEffect} from 'react'\nimport ReactDOM from 'react-dom'\nimport {render, fireEvent} from '@testing-library/react'\n\nconst modalRoot = document.createElement('div')\nmodalRoot.setAttribute('id', 'modal-root')\ndocument.body.appendChild(modalRoot)\n\nconst Modal = ({onClose, children}) => {\n  const el = document.createElement('div')\n\n  useEffect(() => {\n    modalRoot.appendChild(el)\n\n    return () => modalRoot.removeChild(el)\n  })\n\n  return ReactDOM.createPortal(\n    <div onClick={onClose}>\n      <div onClick={e => e.stopPropagation()}>\n        {children}\n        <hr />\n        <button onClick={onClose}>Close</button>\n      </div>\n    </div>,\n    el,\n  )\n}\n\ntest('modal shows the children and a close button', () => {\n  // Arrange\n  const handleClose = jest.fn()\n\n  // Act\n  const {getByText} = render(\n    <Modal onClose={handleClose}>\n      <div>test</div>\n    </Modal>,\n  )\n  // Assert\n  expect(getByText('test')).toBeTruthy()\n\n  // Act\n  fireEvent.click(getByText(/close/i))\n\n  // Assert\n  expect(handleClose).toHaveBeenCalledTimes(1)\n})\n```\n\n----------------------------------------\n\nTITLE: Using ByText Query in Angular Testing\nDESCRIPTION: This example illustrates how to use the getByText function in an Angular testing environment. It demonstrates rendering a component asynchronously and then querying for text.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bytext.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport {render, screen} from '@testing-library/angular'\n\nawait render(MyComponent)\nconst aboutAnchorNode = screen.getByText(/about/i)\n```\n\n----------------------------------------\n\nTITLE: Testing Element Appearance with findBy Query in React Testing Library\nDESCRIPTION: Demonstrates how to wait for an element to appear in the DOM using the findByText query method. This async approach waits for the element to become present before proceeding.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/guide-disappearance.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ntest('movie title appears', async () => {\n  // element is initially not present...\n  // wait for appearance and return the element\n  const movie = await findByText('the lion king')\n})\n```\n\n----------------------------------------\n\nTITLE: Testing CLI Applications with User Input and Output Validation\nDESCRIPTION: A complete example showing how to test a CLI application that uses inquirer for user prompts. The test demonstrates rendering a CLI process, simulating user keyboard input, and validating the output text in the console.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/ecosystem-cli-testing-library.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {resolve} from 'path'\nimport {render} from 'cli-testing-library'\n\ntest('Is able to make terminal input and view in-progress stdout', async () => {\n  const {clear, findByText, queryByText, userEvent} = await render('node', [\n    resolve(__dirname, './execute-scripts/stdio-inquirer.js'),\n  ])\n\n  const instance = await findByText('First option')\n\n  expect(instance).toBeInTheConsole()\n\n  expect(await findByText('❯ One')).toBeInTheConsole()\n\n  clear()\n\n  userEvent('[ArrowDown]')\n\n  expect(await findByText('❯ Two')).toBeInTheConsole()\n\n  clear()\n\n  userEvent.keyboard('[Enter]')\n\n  expect(await findByText('First option: Two')).toBeInTheConsole()\n  expect(await queryByText('First option: Three')).not.toBeInTheConsole()\n})\n```\n\n----------------------------------------\n\nTITLE: Using jest-dom matchers with Testing Library in Jest\nDESCRIPTION: Example test demonstrating the usage of jest-dom matchers in combination with Testing Library queries. It checks for non-empty and visible DOM elements.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/ecosystem-jest-dom.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {screen} from '@testing-library/dom'\n\ntest('uses jest-dom', () => {\n  document.body.innerHTML = `\n    <span data-testid=\"not-empty\"><span data-testid=\"empty\"></span></span>\n    <div data-testid=\"visible\">Visible Example</div>\n  `\n\n  expect(screen.queryByTestId('not-empty')).not.toBeEmptyDOMElement()\n  expect(screen.getByText('Visible Example')).toBeVisible()\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Elements with Within - Native DOM\nDESCRIPTION: Demonstrates using the within function to query text within a specific DOM element using native DOM testing. Uses @testing-library/dom to find text content within a messages container.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-within.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {within} from '@testing-library/dom'\n\nconst messages = document.getElementById('messages')\nconst helloMessage = within(messages).getByText('hello')\n```\n\n----------------------------------------\n\nTITLE: Basic Svelte Component Testing Example\nDESCRIPTION: Demonstrates a basic Greeter component with its test file showing how to render components, query DOM elements, handle user interactions and make assertions.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/example.mdx#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  export let name\n\n  let showGreeting = false\n\n  const handleClick = () => (showGreeting = true)\n</script>\n\n<button on:click=\"{handleClick}\">Greet</button>\n\n{#if showGreeting}\n<p>Hello {name}</p>\n{/if}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render, screen} from '@testing-library/svelte'\nimport userEvent from '@testing-library/user-event'\nimport {expect, test} from 'vitest'\n\nimport Greeter from './greeter.svelte'\n\ntest('no initial greeting', () => {\n  render(Greeter, {name: 'World'})\n\n  const button = screen.getByRole('button', {name: 'Greet'})\n  const greeting = screen.queryByText(/hello/iu)\n\n  expect(button).toBeInTheDocument()\n  expect(greeting).not.toBeInTheDocument()\n})\n\ntest('greeting appears on click', async () => {\n  const user = userEvent.setup()\n  render(Greeter, {name: 'World'})\n\n  const button = screen.getByRole('button')\n  await user.click(button)\n  const greeting = screen.getByText(/hello world/iu)\n\n  expect(greeting).toBeInTheDocument()\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Container with render\nDESCRIPTION: Example showing how to specify a custom container element when rendering components that have specific parent element requirements.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/api.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = document.createElement('table')\n\nconst {container} = render(<TableBody {...props} />, {\n  container: document.body.appendChild(table),\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Queries with render\nDESCRIPTION: Example showing how to provide custom queries to the render function by merging with default queries.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/api.mdx#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// Example, a function to traverse table contents\nimport * as tableQueries from 'my-table-query-library'\nimport {queries} from '@testing-library/react'\n\nconst {getByRowColumn, getByText} = render(<MyTable />, {\n  queries: {...queries, ...tableQueries},\n})\n```\n\n----------------------------------------\n\nTITLE: Uploading Files Using Testing Library's user-event\nDESCRIPTION: Examples demonstrating how to use the upload method to test file upload functionality. Shows both single file upload and multiple file upload scenarios using the React Testing Library.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\n\ntest('upload file', () => {\n  const file = new File(['hello'], 'hello.png', {type: 'image/png'})\n\n  render(\n    <div>\n      <label htmlFor=\"file-uploader\">Upload file:</label>\n      <input id=\"file-uploader\" type=\"file\" />\n    </div>,\n  )\n  const input = screen.getByLabelText(/upload file/i)\n  userEvent.upload(input, file)\n\n  expect(input.files[0]).toStrictEqual(file)\n  expect(input.files.item(0)).toStrictEqual(file)\n  expect(input.files).toHaveLength(1)\n})\n\ntest('upload multiple files', () => {\n  const files = [\n    new File(['hello'], 'hello.png', {type: 'image/png'}),\n    new File(['there'], 'there.png', {type: 'image/png'}),\n  ]\n\n  render(\n    <div>\n      <label htmlFor=\"file-uploader\">Upload file:</label>\n      <input id=\"file-uploader\" type=\"file\" multiple />\n    </div>,\n  )\n  const input = screen.getByLabelText(/upload file/i)\n  userEvent.upload(input, files)\n\n  expect(input.files).toHaveLength(2)\n  expect(input.files[0]).toStrictEqual(files[0])\n  expect(input.files[1]).toStrictEqual(files[1])\n})\n```\n\n----------------------------------------\n\nTITLE: Using Convenience Methods for Firing Specific Events in TypeScript\nDESCRIPTION: Shows how to use the fireEvent[eventName] convenience methods to trigger specific DOM events. Includes examples for change events on input fields and file inputs.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-events.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfireEvent[eventName](node: HTMLElement, eventProperties: Object)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfireEvent.change(getByLabelText(/username/i), {target: {value: 'a'}})\n\nfireEvent.change(getByLabelText(/picture/i), {\n  target: {\n    files: [new File(['(⌐□_□)'], 'chucknorris.png', {type: 'image/png'})],\n  },\n})\n\n// Valid:\nfireEvent.change(input, {target: {value: '2020-05-24'}})\n```\n\n----------------------------------------\n\nTITLE: Using PrettyDOM for DOM Debugging\nDESCRIPTION: Example of using prettyDOM to print a formatted DOM tree for debugging purposes.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-debugging.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {prettyDOM} from '@testing-library/dom'\n\nconst div = document.createElement('div')\ndiv.innerHTML = '<div><h1>Hello World</h1></div>'\nconsole.log(prettyDOM(div))\n// <div>\n//   <h1>Hello World</h1>\n// </div>\n```\n\n----------------------------------------\n\nTITLE: Updating Component Props with React Testing Library\nDESCRIPTION: This example demonstrates how to update props of a rendered React component in tests without remounting it. It uses the rerender function returned from render to update the props of the same component instance, and verifies both that the new props are displayed and that the component is not remounted.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-update-props.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// This is an example of how to update the props of a rendered component.\n// the basic idea is to simply call `render` again and provide the same container\n// that your first call created for you.\n\nimport React, {useRef} from 'react'\nimport {render, screen} from '@testing-library/react'\n\nlet idCounter = 1\n\nconst NumberDisplay = ({number}) => {\n  const id = useRef(idCounter++) // to ensure we don't remount a different instance\n\n  return (\n    <div>\n      <span data-testid=\"number-display\">{number}</span>\n      <span data-testid=\"instance-id\">{id.current}</span>\n    </div>\n  )\n}\n\ntest('calling render with the same component on the same container does not remount', () => {\n  const {rerender} = render(<NumberDisplay number={1} />)\n  expect(screen.getByTestId('number-display')).toHaveTextContent('1')\n\n  // re-render the same component with different props\n  rerender(<NumberDisplay number={2} />)\n  expect(screen.getByTestId('number-display')).toHaveTextContent('2')\n\n  expect(screen.getByTestId('instance-id')).toHaveTextContent('1')\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating getNodeText with Input Elements\nDESCRIPTION: This example shows the special behavior of getNodeText for input elements like submit and button types. For these elements, getNodeText returns the value attribute which is what users see displayed.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-custom-queries.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// <input type=\"submit\" value=\"Send data\" />\n// <input type=\"button\" value=\"Push me\" />\nconst submitText = getNodeText(container.querySelector('input[type=submit]')) // \"Send data\"\nconst buttonText = getNodeText(container.querySelector('input[type=button]')) // \"Push me\"\n\nThese elements use the attribute `value` and display its value to the user.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of clear() Method in JSX\nDESCRIPTION: Demonstrates how to use the clear() method to empty a textarea's contents in a test. The example renders a textarea with default text, clears it, and verifies it's empty.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-utility.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ntest('clear', async () => {\n  const user = userEvent.setup()\n\n  render(<textarea defaultValue=\"Hello, World!\" />)\n\n  await user.clear(screen.getByRole('textbox'))\n\n  expect(screen.getByRole('textbox')).toHaveValue('')\n})\n```\n\n----------------------------------------\n\nTITLE: Using unmount to Clean Up Rendered Component\nDESCRIPTION: Example showing how to unmount a rendered component to test cleanup behavior or component removal effects.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/api.mdx#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render} from '@testing-library/react'\n\nconst {container, unmount} = render(<Login />)\nunmount()\n// your component has been unmounted and now: container.innerHTML === ''\n```\n\n----------------------------------------\n\nTITLE: Using Chainable Queries in WebdriverIO v7.19+\nDESCRIPTION: Demonstrates the chainable query syntax with the $ suffix, available in WebdriverIO v7.19 and higher. This allows for fluent chaining of queries for more readable test code.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/webdriverio-testing-library/intro.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nit('can chain browser getBy queries', async () => {\n  setupBrowser(browser)\n\n  await browser.getByTestId$('nested').getByText$('Button Text').click()\n\n  const buttonText = await browser\n    .getByTestId$('nested')\n    .getByText$('Button Text')\n    .getText()\n\n  expect(buttonText).toEqual('Button Clicked')\n})\n\nit('can chain element getBy queries', async () => {\n  const {getByTestId} = setupBrowser(browser)\n\n  const nested = await getByTestId('nested')\n  await nested.getByText$('Button Text').click()\n\n  const buttonText = await browser.getByText$('Button Clicked').getText()\n\n  expect(buttonText).toEqual('Button Clicked')\n})\n\nit('can chain getAllBy queries', async () => {\n  setupBrowser(browser)\n\n  await browser.getByTestId$('nested').getAllByText$('Button Text')[0].click()\n\n  expect(await browser.getAllByText('Button Clicked')).toHaveLength(1)\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Elements with Within - Angular Testing\nDESCRIPTION: Demonstrates using within function in Angular Testing Library to query text within a rendered component. Uses async/await with render and within functions to locate nested content.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-within.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {render, within} from '@testing-library/angular'\n\nconst {getByText} = await render(MyComponent)\nconst messages = getByText('messages')\nconst helloMessage = within(messages).getByText('hello')\n```\n\n----------------------------------------\n\nTITLE: Testing Input Change Events with React Testing Library\nDESCRIPTION: Demonstrates how to properly test onChange handlers for different input types including text inputs, select dropdowns, and checkboxes using fireEvent.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/faq.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {render, fireEvent} from '@testing-library/react'\n\ntest('change values via the fireEvent.change method', () => {\n  const handleChange = jest.fn()\n  const {container} = render(<input type=\"text\" onChange={handleChange} />)\n  const input = container.firstChild\n  fireEvent.change(input, {target: {value: 'a'}})\n  expect(handleChange).toHaveBeenCalledTimes(1)\n  expect(input.value).toBe('a')\n})\n\ntest('select drop-downs must use the fireEvent.change', () => {\n  const handleChange = jest.fn()\n  const {container} = render(\n    <select onChange={handleChange}>\n      <option value=\"1\">1</option>\n      <option value=\"2\">2</option>\n    </select>,\n  )\n  const select = container.firstChild\n  const option1 = container.getElementsByTagName('option').item(0)\n  const option2 = container.getElementsByTagName('option').item(1)\n\n  fireEvent.change(select, {target: {value: '2'}})\n\n  expect(handleChange).toHaveBeenCalledTimes(1)\n  expect(option1.selected).toBe(false)\n  expect(option2.selected).toBe(true)\n})\n\ntest('checkboxes (and radios) must use fireEvent.click', () => {\n  const handleChange = jest.fn()\n  const {container} = render(<input type=\"checkbox\" onChange={handleChange} />)\n  const checkbox = container.firstChild\n  fireEvent.click(checkbox)\n  expect(handleChange).toHaveBeenCalledTimes(1)\n  expect(checkbox.checked).toBe(true)\n})\n```\n\n----------------------------------------\n\nTITLE: Testing a Counter Component with Qwik Testing Library\nDESCRIPTION: A basic example showing how to test a counter component in Qwik using Testing Library. The test renders the component, simulates button clicks using userEvent, and verifies the counter increments correctly.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/qwik-testing-library/example.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// import qwik-testing methods\nimport {screen, render, waitFor} from '@noma.to/qwik-testing-library'\n// import the userEvent methods to interact with the DOM\nimport {userEvent} from '@testing-library/user-event'\n// import the component to be tested\nimport {Counter} from './counter'\n\n// describe the test suite\ndescribe('<Counter />', () => {\n  // describe the test case\n  it('should increment the counter', async () => {\n    // setup user event\n    const user = userEvent.setup()\n    // render the component into the DOM\n    await render(<Counter />)\n\n    // retrieve the 'increment count' button\n    const incrementBtn = screen.getByRole('button', {name: /increment count/})\n    // click the button twice\n    await user.click(incrementBtn)\n    await user.click(incrementBtn)\n\n    // assert that the counter is now 2\n    expect(await screen.findByText(/count:2/)).toBeInTheDocument()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using LogRoles for ARIA Role Debugging\nDESCRIPTION: Example of using logRoles to print out all implicit ARIA roles and their corresponding DOM nodes.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-debugging.mdx#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {logRoles} from '@testing-library/dom'\n\nconst nav = document.createElement('nav')\nnav.innerHTML = `\n<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`\n\nlogRoles(nav)\n```\n\n----------------------------------------\n\nTITLE: Simulating Hover Events with Testing Library's user-event\nDESCRIPTION: Demonstrates how to use the hover and unhover methods to test components that respond to mouse hover events, such as tooltips. Shows how to verify that elements appear and disappear on hover events.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport Tooltip from '../tooltip'\n\ntest('hover', () => {\n  const messageText = 'Hello'\n  render(\n    <Tooltip messageText={messageText}>\n      <TrashIcon aria-label=\"Delete\" />\n    </Tooltip>,\n  )\n\n  userEvent.hover(screen.getByLabelText(/delete/i))\n  expect(screen.getByText(messageText)).toBeInTheDocument()\n  userEvent.unhover(screen.getByLabelText(/delete/i))\n  expect(screen.queryByText(messageText)).not.toBeInTheDocument()\n})\n```\n\n----------------------------------------\n\nTITLE: Selecting Options in Dropdown with Testing Library's user-event\nDESCRIPTION: Demonstrates the selectOptions method for selecting single or multiple options from a select element by either value or by directly selecting option nodes.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\n\ntest('selectOptions', () => {\n  render(\n    <select multiple>\n      <option value=\"1\">A</option>\n      <option value=\"2\">B</option>\n      <option value=\"3\">C</option>\n    </select>,\n  )\n\n  userEvent.selectOptions(screen.getByRole('listbox'), ['1', '3'])\n\n  expect(screen.getByRole('option', {name: 'A'}).selected).toBe(true)\n  expect(screen.getByRole('option', {name: 'B'}).selected).toBe(false)\n  expect(screen.getByRole('option', {name: 'C'}).selected).toBe(true)\n})\n```\n\nLANGUAGE: js\nCODE:\n```\nuserEvent.selectOptions(screen.getByTestId('select-multiple'), [\n  screen.getByText('A'),\n  screen.getByText('B'),\n])\n```\n\n----------------------------------------\n\nTITLE: Prepending Text with User Event in React Testing\nDESCRIPTION: Demonstrates how to prepend text to an input element's existing value using userEvent.type. By setting the selection range to the start of the input and providing initialSelectionStart and initialSelectionEnd options, the text can be inserted at the beginning.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\n\ntest('prepend text', () => {\n  render(<input defaultValue=\"World!\" />)\n  const element = screen.getByRole('textbox')\n\n  // Prepend text\n  element.setSelectionRange(0, 0)\n  userEvent.type(element, 'Hello, ', {\n    initialSelectionStart: 0,\n    initialSelectionEnd: 0,\n  })\n\n  expect(element).toHaveValue('Hello, World!')\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Double-Click Events with fireEvent in JSX\nDESCRIPTION: Demonstrates how to test double-click events using fireEvent. This example shows how to create a ref, attach it to an element, and simulate a double-click event.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/preact-testing-library/api.mdx#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst ref = createRef()\nconst spy = jest.fn()\n\nrender(\n  h(elementType, {\n    onDblClick: spy,\n    ref,\n  }),\n)\n\nfireEvent['onDblClick'](ref.current)\n\nexpect(spy).toHaveBeenCalledTimes(1)\n```\n\n----------------------------------------\n\nTITLE: Testing Login Form with findByText in JavaScript\nDESCRIPTION: This code snippet demonstrates how to test a login form using Testing Library's findByText query. It includes setup for rendering the form, simulating user interactions, and asserting on the visibility of error messages. The example covers scenarios for required fields and invalid input validation.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-findByText.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// src/__tests__/example.test.js\n// This is an example of how to use findByText to query for text that\n// is not visible right away\n\nimport {screen} from '@testing-library/dom'\nimport userEvent from '@testing-library/user-event'\n// provides a set of custom jest matchers that you can use to extend jest\n// i.e. `.toBeVisible`\nimport '@testing-library/jest-dom'\n\nfunction renderApp() {\n  const el = document.body.appendChild(document.createElement('div'))\n  el.innerHTML = `\n    <form id='login_form' method='post' name='login'>\n      <label for='username'>User Name:</label>\n\n      <input\n        type='text'\n        name='username'\n        id='username_input'\n        placeholder='Enter user name'\n      />\n\n      <span id='username_required_error' style='color: red; display: none;'>\n        User Name Required\n      </span>\n\n      <span id='invalid_username_error' style='color: red; display: none;'>\n        Invalid User Name\n      </span>\n\n      <label for='password'>Password:</label>\n\n      <input\n        type='password'\n        name='password'\n        id='password_input'\n        placeholder='Enter password'\n      />\n\n      <span id='invalid_password_error' style='color: red; display: none;'>\n        Invalid Password\n      </span>\n\n      <span id='password_required_error' style='color: red; display: none;'>\n        Password Required\n      </span>\n\n      <button id='submit' type='submit'>\n        Login\n      </button>\n    </form>\n  `\n\n  const submitButton = el.querySelector('#submit')\n  const formEl = el.querySelector('#login_form')\n\n  submitButton.addEventListener('click', () => {\n    const userInput = el.querySelector('#username_input')\n    const passwordInput = el.querySelector('#password_input')\n\n    const userName = userInput.value\n    const password = passwordInput.value\n    if (!userName) {\n      el.querySelector('#username_required_error').style.display = 'inline'\n    }\n\n    if (!password) {\n      el.querySelector('#password_required_error').style.display = 'inline'\n    }\n\n    if (userName && userName !== 'Bob') {\n      el.querySelector('#invalid_username_error').style.display = 'inline'\n    }\n\n    if (password && password !== 'theBuilder') {\n      el.querySelector('#invalid_password_error').style.display = 'inline'\n    }\n  })\n\n  formEl.addEventListener('submit', function (evt) {\n    evt.preventDefault()\n    window.history.back()\n  })\n\n  return {user: userEvent.setup()}\n}\n\nafterEach(() => (document.body.innerHTML = ``))\n\ndescribe('findByText Examples', () => {\n  it('should show a required field warning for each empty input field', async () => {\n    const {user} = renderApp()\n    await user.click(\n      screen.getByRole('button', {\n        name: 'Login',\n      }),\n    )\n\n    expect(await screen.findByText('User Name Required')).toBeVisible()\n\n    expect(await screen.findByText('Password Required')).toBeVisible()\n  })\n\n  it('should show invalid field errors for each invalid input field', async () => {\n    const {user} = renderApp()\n    const userNameField = screen.getByPlaceholderText('Enter user name')\n    const passwordField = screen.getByPlaceholderText('Enter password')\n\n    expect(await screen.findByText('Invalid Password')).not.toBeVisible()\n    expect(await screen.findByText('Invalid User Name')).not.toBeVisible()\n\n    await user.type(userNameField, 'Philchard')\n    await user.type(passwordField, 'theCat')\n\n    expect(userNameField).toHaveValue('Philchard')\n    expect(passwordField).toHaveValue('theCat')\n\n    await user.click(\n      screen.getByRole('button', {\n        name: 'Login',\n      }),\n    )\n\n    expect(await screen.findByText('Invalid User Name')).toBeVisible()\n    expect(await screen.findByText('Invalid Password')).toBeVisible()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Items in a List Using CSS Selectors\nDESCRIPTION: This snippet shows how to query a specific item in a list using the CSS nth-child selector when working with repeated elements that share the same data-testid.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/faq.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst thirdLiInUl = container.querySelector('ul > li:nth-child(3)')\n```\n\n----------------------------------------\n\nTITLE: Using waitFor to Wait for Test Conditions in JavaScript\nDESCRIPTION: Example of using the waitFor utility to wait until a mock function has been called. The function will retry the callback until the expectation passes or a timeout is reached.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-async.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n// Wait until the callback does not throw an error. In this case, that means\n// it'll wait until the mock function has been called once.\nawait waitFor(() => expect(mockAPI).toHaveBeenCalledTimes(1))\n// ...\n```\n\n----------------------------------------\n\nTITLE: Firing Events in Vue Tests\nDESCRIPTION: Example of using the fireEvent method to simulate a click event on a rendered element. It's recommended to always await fireEvent calls.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/vue-testing-library/api.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait fireEvent.click(getByText('Click me'))\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of renderHook for Testing Solid.js Hooks\nDESCRIPTION: Simple example of using renderHook to test a custom hook/primitive in Solid.js. The function returns the hook's result which can be directly tested.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/solid-testing-library/api.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst {result} = renderHook(createResult)\nexpect(result).toBe(true)\n```\n\n----------------------------------------\n\nTITLE: Querying DOM Elements Using Native JavaScript Methods\nDESCRIPTION: This snippet demonstrates how to query DOM elements directly using native JavaScript querySelector methods when you don't want to use data-testid attributes. It shows three different ways to select elements from the container.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/faq.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst firstLiInDiv = container.querySelector('div li')\nconst allLisInDiv = container.querySelectorAll('div li')\nconst rootElement = container.firstChild\n```\n\n----------------------------------------\n\nTITLE: Testing React Router v5 with React Testing Library\nDESCRIPTION: This snippet shows how to test a React application using React Router v5 and React Testing Library. It demonstrates testing navigation and rendering on different routes using a custom history object.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-react-router.mdx#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// app.test.js\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport {createMemoryHistory} from 'history'\nimport React from 'react'\nimport {Router} from 'react-router-dom'\nimport '@testing-library/jest-dom'\nimport {App} from './app'\n\n// React Router v5\n\ntest('full app rendering/navigating', async () => {\n  const history = createMemoryHistory()\n  render(\n    <Router history={history}>\n      <App />\n    </Router>,\n  )\n  const user = userEvent.setup()\n  // verify page content for expected route\n  // often you'd use a data-testid or role query, but this is also possible\n  expect(screen.getByText(/you are home/i)).toBeInTheDocument()\n\n  await user.click(screen.getByText(/about/i))\n\n  // check that the content changed to the new page\n  expect(screen.getByText(/you are on the about page/i)).toBeInTheDocument()\n})\n\ntest('landing on a bad page', () => {\n  const history = createMemoryHistory()\n  history.push('/some/bad/route')\n  render(\n    <Router history={history}>\n      <App />\n    </Router>,\n  )\n\n  expect(screen.getByText(/no match/i)).toBeInTheDocument()\n})\n```\n\n----------------------------------------\n\nTITLE: Mocking React Transition Group for Testing React Components\nDESCRIPTION: This snippet shows how to mock the react-transition-group module to test a React component that uses CSSTransition. It demonstrates rendering, interacting with, and asserting on the component's behavior without waiting for actual transitions.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-react-transition-group.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState} from 'react'\nimport {CSSTransition} from 'react-transition-group'\nimport {render, fireEvent} from '@testing-library/react'\n\nfunction Fade({children, ...props}) {\n  return (\n    <CSSTransition {...props} timeout={1000} classNames=\"fade\">\n      {children}\n    </CSSTransition>\n  )\n}\n\nfunction HiddenMessage({initialShow}) {\n  const [show, setShow] = useState(initialShow || false)\n  const toggle = () => setShow(prevState => !prevState)\n  return (\n    <div>\n      <button onClick={toggle}>Toggle</button>\n      <Fade in={show}>\n        <div>Hello world</div>\n      </Fade>\n    </div>\n  )\n}\n\njest.mock('react-transition-group', () => {\n  const FakeTransition = jest.fn(({children}) => children)\n  const FakeCSSTransition = jest.fn(props =>\n    props.in ? <FakeTransition>{props.children}</FakeTransition> : null,\n  )\n  return {CSSTransition: FakeCSSTransition, Transition: FakeTransition}\n})\n\ntest('you can mock things with jest.mock', () => {\n  const {getByText, queryByText} = render(<HiddenMessage initialShow={true} />)\n  expect(getByText('Hello world')).toBeTruthy() // we just care it exists\n  // hide the message\n  fireEvent.click(getByText('Toggle'))\n  // in the real world, the CSSTransition component would take some time\n  // before finishing the animation which would actually hide the message.\n  // So we've mocked it out for our tests to make it happen instantly\n  expect(queryByText('Hello World')).toBeNull() // we just care it doesn't exist\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Angular Directive with Template\nDESCRIPTION: Shows how to render an Angular directive using a template string and declaring the directive.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait render('<div appSpoiler></div>', {\n  declarations: [SpoilerDirective],\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Conditional Rendering with Preact Testing Library\nDESCRIPTION: This test verifies that the HiddenMessage component correctly shows and hides content based on checkbox state. It demonstrates the use of query functions, event simulation, and assertions with jest-dom.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/preact-testing-library/example.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// NOTE: jest-dom adds handy assertions to Jest and it is recommended, but not required.\nimport '@testing-library/jest-dom'\n\nimport {h} from 'preact'\nimport {render, fireEvent} from '@testing-library/preact'\n\nimport HiddenMessage from '../hidden-message'\n\ntest('shows the children when the checkbox is checked', () => {\n  const testMessage = 'Test Message'\n\n  const {queryByText, getByLabelText, getByText} = render(\n    <HiddenMessage>{testMessage}</HiddenMessage>,\n  )\n\n  // query* functions will return the element or null if it cannot be found.\n  // get* functions will return the element or throw an error if it cannot be found.\n  expect(queryByText(testMessage)).toBeNull()\n\n  // The queries can accept a regex to make your selectors more resilient to content tweaks and changes.\n  fireEvent.click(getByLabelText(/show/i))\n\n  // .toBeInTheDocument() is an assertion that comes from jest-dom.\n  // Otherwise you could use .toBeDefined().\n  expect(getByText(testMessage)).toBeInTheDocument()\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Thrown Errors in React Components\nDESCRIPTION: Demonstrates how to test components and hooks that throw errors using Jest's toThrow matcher.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/faq.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Thrower() {\n  throw new Error('I throw')\n}\n\ntest('it throws', () => {\n  expect(() => render(<Thrower />)).toThrow('I throw')\n})\n\nfunction useThrower() {\n  throw new Error('I throw')\n}\n\ntest('it throws', () => {\n  expect(() => renderHook(useThrower)).toThrow('I throw')\n})\n```\n\n----------------------------------------\n\nTITLE: Pasting Content in TypeScript for Testing Library\nDESCRIPTION: This function pastes data into the document. If clipboardData is not provided, it reads content from the Clipboard. In editable contexts, it inserts the pasted content into the document. It returns a Promise that resolves to void.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-clipboard.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npaste(clipboardData?: DataTransfer|string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Testing React Applications with Reach Router\nDESCRIPTION: This code demonstrates a complete setup for testing React applications that use Reach Router. It includes a sample App component with routes, a custom renderWithRouter function to provide router context, tests for navigation between routes, handling bad routes, and testing components with route parameters.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-reach-router.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {render} from '@testing-library/react'\nimport {\n  Router,\n  Link,\n  createHistory,\n  createMemorySource,\n  LocationProvider,\n} from '@reach/router'\nimport '@testing-library/jest-dom'\n\nconst About = () => <div>You are on the about page</div>\nconst Home = () => <div>You are home</div>\nconst NoMatch = () => <div>No match</div>\n\nfunction App() {\n  return (\n    <div>\n      <Link to=\"/\">Home</Link>\n      <Link to=\"/about\">About</Link>\n      <Router>\n        <Home path=\"/\" />\n        <About path=\"/about\" />\n        <NoMatch default />\n      </Router>\n    </div>\n  )\n}\n\n// Ok, so here's what your tests might look like\n\n// this is a handy function that I would utilize for any component\n// that relies on the router being in context\nfunction renderWithRouter(\n  ui,\n  {route = '/', history = createHistory(createMemorySource(route))} = {},\n) {\n  return {\n    ...render(<LocationProvider history={history}>{ui}</LocationProvider>),\n    // adding `history` to the returned utilities to allow us\n    // to reference it in our tests (just try to avoid using\n    // this to test implementation details).\n    history,\n  }\n}\n\ntest('full app rendering/navigating', async () => {\n  const {\n    container,\n    history: {navigate},\n  } = renderWithRouter(<App />)\n  const appContainer = container\n  // normally I'd use a data-testid, but just wanted to show this is also possible\n  expect(appContainer.innerHTML).toMatch('You are home')\n\n  // with reach-router we don't need to simulate a click event, we can just transition\n  // to the page using the navigate function returned from the history object.\n  await navigate('/about')\n  expect(container.innerHTML).toMatch('You are on the about page')\n})\n\ntest('landing on a bad page', () => {\n  const {container} = renderWithRouter(<App />, {\n    route: '/something-that-does-not-match',\n  })\n  // normally I'd use a data-testid, but just wanted to show this is also possible\n  expect(container.innerHTML).toMatch('No match')\n})\n\n// If your route component has parameters, you'll have to change the render function a little bit\n// example of a route component with parameter\nconst Routes = () => (\n  <Router>\n    <SomeComponent path=\"/some-component/:id\" />\n  </Router>\n)\n\n// render function with Router wrapper from @reach/router\nfunction renderWithRouterWrapper(\n  ui,\n  {route = '/', history = createHistory(createMemorySource(route))} = {},\n) {\n  return {\n    ...render(\n      <LocationProvider history={history}>\n        <Router>{ui}</Router>\n      </LocationProvider>,\n    ),\n    history,\n  }\n}\n\ntest('renders the component with params', () => {\n  // you'll have to declare the path prop in the component, exactly like the route\n  renderWithRouterWrapper(<SomeComponent path=\"/some-component/:id\" />, {\n    // and pass the parameter value on the route config\n    route: '/some-component/1',\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Testing a Vue Component with v-model Using @testing-library/vue\nDESCRIPTION: A test for a component with v-model binding that verifies the input updates the component state. The test renders the component, checks initial state, simulates input changes using fireEvent.update, and verifies the display updates correctly.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/vue-testing-library/examples.mdx#2025-04-12_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport {render, fireEvent, screen} from '@testing-library/vue'\nimport Component from './Component.vue'\n\ntest('properly handles v-model', async () => {\n  render(Component)\n\n  // Asserts initial state.\n  screen.getByText('Hi, my name is Alice')\n\n  // Get the input DOM node by querying the associated label.\n  const usernameInput = screen.getByLabelText(/username/i)\n\n  // Updates the <input> value and triggers an `input` event.\n  // fireEvent.input() would make the test fail.\n  await fireEvent.update(usernameInput, 'Bob')\n\n  screen.getByText('Hi, my name is Bob')\n})\n```\n\n----------------------------------------\n\nTITLE: Testing an Angular Counter Component with Testing Library\nDESCRIPTION: Unit tests for the CounterComponent using Angular Testing Library. It demonstrates how to render the component with initial inputs, test the display of values, and verify component behavior when events are triggered. The example also shows how to handle aliased inputs using the aliasedInput utility.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/examples.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { render, screen, fireEvent, aliasedInput } from '@testing-library/angular';\nimport { CounterComponent } from './counter.component';\n\ndescribe('Counter', () => {\n  it('should render counter', async () => {\n    await render(CounterComponent, {\n      inputs: {\n        counter: 5,\n        // aliases need to be specified using aliasedInput\n        ...aliasedInput('greeting', 'Hello Alias!'),\n      },\n    });\n\n    expect(screen.getByText('Current Count: 5')).toBeVisible();\n    expect(screen.getByText('Hello Alias!')).toBeVisible();\n  });\n\n  it('should increment the counter on click', async () => {\n    await render(CounterComponent, { inputs: { counter: 5 } });\n\n    const incrementButton = screen.getByRole('button', { name: '+' });\n    fireEvent.click(incrementButton);\n\n    expect(screen.getByText('Current Count: 6')).toBeVisible();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring user-event with setup() in TypeScript\nDESCRIPTION: The setup function creates an instance of UserEvent that can be configured with options. This function applies workarounds to the document and returns an instance that maintains input device state.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/setup.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetup(options?: Options): UserEvent\n```\n\n----------------------------------------\n\nTITLE: Testing Svelte Component Events\nDESCRIPTION: Shows how to test event handling in Svelte components using spy functions with both event listeners and function props.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/example.mdx#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button on:click>click me</button>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  export let onClick\n</script>\n\n<button on:click=\"{onClick}\">click me</button>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render, screen} from '@testing-library/svelte'\nimport userEvent from '@testing-library/user-event'\nimport {expect, test, vi} from 'vitest'\n\nimport ButtonWithEvent from './button-with-event.svelte'\nimport ButtonWithProp from './button-with-prop.svelte'\n\ntest('button with event', async () => {\n  const user = userEvent.setup()\n  const onClick = vi.fn()\n\n  const {component} = render(ButtonWithEvent)\n  component.$on('click', onClick)\n\n  const button = screen.getByRole('button')\n  await user.click(button)\n\n  expect(onClick).toHaveBeenCalledOnce()\n})\n\ntest('button with function prop', async () => {\n  const user = userEvent.setup()\n  const onClick = vi.fn()\n\n  render(ButtonWithProp, {onClick})\n\n  const button = screen.getByRole('button')\n  await user.click(button)\n\n  expect(onClick).toHaveBeenCalledOnce()\n})\n```\n\n----------------------------------------\n\nTITLE: Using userEvent.dblClick() in a React test\nDESCRIPTION: Shows how to use userEvent.dblClick() to simulate a double-click on a checkbox in a React component test.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\n\ntest('double click', () => {\n  const onChange = jest.fn()\n  render(<input type=\"checkbox\" onChange={onChange} />)\n  const checkbox = screen.getByRole('checkbox')\n  userEvent.dblClick(checkbox)\n  expect(onChange).toHaveBeenCalledTimes(2)\n  expect(checkbox).not.toBeChecked()\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HTML Structures for Label Associations\nDESCRIPTION: This code snippet shows various HTML structures that ByLabelText can query, including for/htmlFor relationships, aria-labelledby attributes, wrapper labels, and aria-label attributes.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bylabeltext.mdx#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n// for/htmlFor relationship between label and form element id\n<label for=\"username-input\">Username</label>\n<input id=\"username-input\" />\n\n// The aria-labelledby attribute with form elements\n<label id=\"username-label\">Username</label>\n<input aria-labelledby=\"username-label\" />\n\n// Wrapper labels\n<label>Username <input /></label>\n\n// Wrapper labels where the label text is in another child element\n<label>\n  <span>Username</span>\n  <input />\n</label>\n\n// aria-label attributes\n// Take care because this is not a label that users can see on the page,\n// so the purpose of your input must be obvious to visual users.\n<input aria-label=\"Username\" />\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Fake Timers and Restoring Real Timers with Jest in JavaScript\nDESCRIPTION: This code snippet shows how to properly clean up fake timers after a test run. It runs all pending timers using runOnlyPendingTimers() and then restores real timers with useRealTimers(). This prevents fake timers from affecting other tests or cleanup functions.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/guides-using-fake-timers.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Running all pending timers and switching to real timers using Jest\nafterEach(() => {\n  jest.runOnlyPendingTimers()\n  jest.useRealTimers()\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Checkbox Click Event with user-event in React\nDESCRIPTION: This snippet demonstrates how to test a click event on a checkbox using the user-event library in React Testing Library. It simulates a user clicking on the checkbox label and checks if the input is properly checked.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/migrate-from-enzyme.mdx#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\ntest('handles click correctly', async () => {\n  render(<Checkbox />)\n  const user = userEvent.setup()\n\n  // You can also call this method directly on userEvent,\n  // but using the methods from `.setup()` is recommended.\n  await user.click(screen.getByText('Check'))\n\n  expect(screen.getByLabelText('Check')).toBeChecked()\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating User Actions with fireEvent\nDESCRIPTION: Demonstrates how to simulate user interactions by firing events and waiting for asynchronous operations to complete before making assertions.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/example-intro.mdx#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfireEvent.click(screen.getByText('Load Greeting'))\n\n// wait until the `get` request promise resolves and\n// the component calls setState and re-renders,\n// throwing an error if it cannot find an element\nawait screen.findByRole('heading')\n```\n\n----------------------------------------\n\nTITLE: Component Props Rerendering\nDESCRIPTION: Shows how to update component props and wait for Svelte to update using the rerender function.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/api.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {rerender} = render(MyComponent, {myProp: 'value'})\n\nawait rerender({myProp: 'new value'}))\n```\n\n----------------------------------------\n\nTITLE: Testing Input Events with fireEvent in JSX\nDESCRIPTION: Shows how to test input events using the fireEvent function. This example demonstrates simulating text input and checking if the event handler was called.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/preact-testing-library/api.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst handler = jest.fn()\n\nconst {\n  container: {firstChild: input},\n} = render(<input type=\"text\" onInput={handler} />)\n\nfireEvent.input(input, {target: {value: 'a'}})\n\nexpect(handler).toHaveBeenCalledTimes(1)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Component in Angular with Inputs and State Management\nDESCRIPTION: A standalone Angular component that implements a counter with increment and decrement functionality. It uses the model and input APIs from Angular's signals for state management and component inputs. The component displays a greeting message and the current counter value.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/examples.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  selector: 'app-counter',\n  template: `\n    <span>{{ hello() }}</span>\n    <button (click)=\"decrement()\">-</button>\n    <span>Current Count: {{ counter() }}</span>\n    <button (click)=\"increment()\">+</button>\n  `,\n})\nexport class CounterComponent {\n  counter = model(0);\n  hello = input('Hi', { alias: 'greeting' });\n\n  increment() {\n    this.counter.set(this.counter() + 1);\n  }\n\n  decrement() {\n    this.counter.set(this.counter() - 1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Components with ng-mocks and MockBuilder in Angular Tests\nDESCRIPTION: This snippet demonstrates how to use ng-mocks and MockBuilder to mock out components in Angular tests when shallow rendering is needed. It shows the setup of parent and child components, and how to test that the child component is not rendered when using MockBuilder.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/faq.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component, NgModule} from '@angular/core'\nimport {render, screen} from '@testing-library/angular'\nimport {MockBuilder} from 'ng-mocks'\n\n@Component({\n  selector: 'app-parent-component',\n  template: '<app-child-component></app-child-component>',\n})\nclass ParentComponent {}\n\n@Component({\n  selector: 'app-child-component',\n  template: '<p>Child component</p>',\n})\nclass ChildComponent {}\n\n@NgModule({\n  declarations: [ParentComponent, ChildComponent],\n})\nexport class AppModule {}\n\ndescribe('ParentComponent', () => {\n  it('should not render ChildComponent when shallow rendering', async () => {\n    // all imports, declarations and exports of AppModule will be mocked.\n    const dependencies = MockBuilder(ParentComponent, AppModule).build()\n\n    await render(ParentComponent, dependencies)\n\n    expect(screen.queryByText('Child component')).toBeNull()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a drag function for Testing Library\nDESCRIPTION: Complete implementation of a drag function that simulates mouse events to test drag interactions. The function can handle dragging to a specific element or by a delta value with configurable steps and duration.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-drag.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {fireEvent} from '@testing-library/dom'\n\n// https://stackoverflow.com/a/53946549/1179377\nfunction isElement(obj) {\n  if (typeof obj !== 'object') {\n    return false\n  }\n  let prototypeStr, prototype\n  do {\n    prototype = Object.getPrototypeOf(obj)\n    // to work in iframe\n    prototypeStr = Object.prototype.toString.call(prototype)\n    // '[object Document]' is used to detect document\n    if (\n      prototypeStr === '[object Element]' ||\n      prototypeStr === '[object Document]'\n    ) {\n      return true\n    }\n    obj = prototype\n    // null is the terminal of object\n  } while (prototype !== null)\n  return false\n}\n\nfunction getElementClientCenter(element) {\n  const {left, top, width, height} = element.getBoundingClientRect()\n  return {\n    x: left + width / 2,\n    y: top + height / 2,\n  }\n}\n\nconst getCoords = charlie =>\n  isElement(charlie) ? getElementClientCenter(charlie) : charlie\n\nconst sleep = ms =>\n  new Promise(resolve => {\n    setTimeout(resolve, ms)\n  })\n\nexport default async function drag(\n  element,\n  {to: inTo, delta, steps = 20, duration = 500},\n) {\n  const from = getElementClientCenter(element)\n  const to = delta\n    ? {\n        x: from.x + delta.x,\n        y: from.y + delta.y,\n      }\n    : getCoords(inTo)\n\n  const step = {\n    x: (to.x - from.x) / steps,\n    y: (to.y - from.y) / steps,\n  }\n\n  const current = {\n    clientX: from.x,\n    clientY: from.y,\n  }\n\n  fireEvent.mouseEnter(element, current)\n  fireEvent.mouseOver(element, current)\n  fireEvent.mouseMove(element, current)\n  fireEvent.mouseDown(element, current)\n  for (let i = 0; i < steps; i++) {\n    current.clientX += step.x\n    current.clientY += step.y\n    await sleep(duration / steps)\n    fireEvent.mouseMove(element, current)\n  }\n  fireEvent.mouseUp(element, current)\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Wrapper Component for Context in Qwik Testing\nDESCRIPTION: Shows how to use the wrapper option to provide context to the component under test, using QwikCityMockProvider as an example.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/qwik-testing-library/api.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {render} from '@noma.to/qwik-testing-library'\nimport {QwikCityMockProvider} from '@builder.io/qwik-city'\n\nawait render(<MyComponent />, {wrapper: QwikCityMockProvider})\n```\n\n----------------------------------------\n\nTITLE: Using User Event with HTML Time Input in React Testing\nDESCRIPTION: Shows how to use userEvent.type with <input type=\"time\"> elements. This example demonstrates typing a time value into the input and verifying the input's value matches the entered time.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\n\ntest('types into the input', () => {\n  render(\n    <>\n      <label for=\"time\">Enter a time</label>\n      <input type=\"time\" id=\"time\" />\n    </>,\n  )\n  const input = screen.getByLabelText(/enter a time/i)\n  userEvent.type(input, '13:58')\n  expect(input.value).toBe('13:58')\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Angular Component with Template and Properties\nDESCRIPTION: Illustrates rendering an Angular component using a template string, declaring the component, and setting component properties.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait render(\n  '<app-component [value]=\"47\" [otherValue]=\"anotherValue\" (sendValue)=\"sendValue($event)\"></app-component>',\n  {\n    declarations: [AppComponent],\n    componentProperties: {\n      anotherValue: 'valueOfAnotherProperty',\n      sendValue: jest.fn(),\n    },\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Clearing Input Fields with Testing Library's user-event\nDESCRIPTION: Example showing how to use the clear method to delete text from an input or textarea element and verify that the content was successfully removed.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\n\ntest('clear', () => {\n  render(<textarea defaultValue=\"Hello, World!\" />)\n\n  userEvent.clear(screen.getByRole('textbox'))\n  expect(screen.getByRole('textbox')).toHaveValue('')\n})\n```\n\n----------------------------------------\n\nTITLE: Using Abstract Mode with Vue Router in Tests\nDESCRIPTION: This snippet demonstrates how to use Vue Router's abstract mode in tests to prevent routing state from leaking between tests. It creates a router instance and pushes an initial route after rendering.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/vue-testing-library/faq.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render} from '@testing-library/vue'\nimport Component from './Component.vue'\nimport VueRouter from 'vue-router'\n\ntest('uses abstract mode for the router', async () => {\n  const router = new VueRouter({\n    mode: 'abstract',\n    routes: [\n      // Your routes here\n    ],\n  })\n\n  const renderResult = render(Component, {\n    routes: router,\n  })\n\n  // Unlike the router in `hash` mode, the initial routing stack is empty. So,\n  // you need to push an initial route to the stack.\n  await router.push('/')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom TestId Queries in DOM Testing Library\nDESCRIPTION: This code demonstrates how to create custom TestId queries by overriding the default testId queries to use a different data attribute. It binds queryHelpers functions to a custom data attribute and implements proper error handling for various query cases.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-custom-queries.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst domTestingLib = require('@testing-library/dom')\nconst {queryHelpers} = domTestingLib\n\nexport const queryByTestId = queryHelpers.queryByAttribute.bind(\n  null,\n  'data-test-id',\n)\nexport const queryAllByTestId = queryHelpers.queryAllByAttribute.bind(\n  null,\n  'data-test-id',\n)\n\nexport function getAllByTestId(container, id, ...rest) {\n  const els = queryAllByTestId(container, id, ...rest)\n  if (!els.length) {\n    throw queryHelpers.getElementError(\n      `Unable to find an element by: [data-test-id=\"${id}\"]`,\n      container,\n    )\n  }\n  return els\n}\n\nexport function getByTestId(container, id, ...rest) {\n  // result >= 1\n  const result = getAllByTestId(container, id, ...rest)\n  if (result.length > 1) {\n    throw queryHelpers.getElementError(\n      `Found multiple elements with the [data-test-id=\"${id}\"]`,\n      container,\n    )\n  }\n  return result[0]\n}\n\n// re-export with overrides\nmodule.exports = {\n  ...domTestingLib,\n  getByTestId,\n  getAllByTestId,\n  queryByTestId,\n  queryAllByTestId,\n}\n```\n\n----------------------------------------\n\nTITLE: Making Assertions with jest-dom Custom Matchers\nDESCRIPTION: Shows how to use custom matchers from jest-dom to make assertions about the DOM state after a component renders and updates.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/example-intro.mdx#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// assert that the alert message is correct using\n// toHaveTextContent, a custom matcher from jest-dom.\nexpect(screen.getByRole('alert')).toHaveTextContent('Oops, failed to fetch!')\n\n// assert that the button is not disabled using\n// toBeDisabled, a custom matcher from jest-dom.\nexpect(screen.getByRole('button')).not.toBeDisabled()\n```\n\n----------------------------------------\n\nTITLE: Using getByDisplayValue for Select with DOM Testing Library\nDESCRIPTION: Example of using the getByDisplayValue query with DOM Testing Library to find a select element with the selected option displaying 'Alaska'.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bydisplayvalue.mdx#2025-04-12_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport {screen} from '@testing-library/dom'\n\nconst selectElement = screen.getByDisplayValue('Alaska')\n```\n\n----------------------------------------\n\nTITLE: Testing Element Absence with jest-dom Matcher\nDESCRIPTION: Shows how to use jest-dom's toBeInTheDocument matcher to assert that an element is not present in the document body. This provides more meaningful assertions than null checks.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/guide-disappearance.mdx#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@testing-library/jest-dom'\n// use `queryBy` to avoid throwing an error with `getBy`\nconst submitButton = screen.queryByText('submit')\nexpect(submitButton).not.toBeInTheDocument()\n```\n\n----------------------------------------\n\nTITLE: Using ByPlaceholderText Query in React\nDESCRIPTION: Demonstrates how to use the getByPlaceholderText query in a React testing environment, including rendering a component and finding an input by its placeholder.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/byplaceholdertext.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, screen} from '@testing-library/react'\n\nrender(<MyComponent />)\nconst inputNode = screen.getByPlaceholderText('Username')\n```\n\n----------------------------------------\n\nTITLE: Using getNodeText Function in DOM Testing Library\nDESCRIPTION: The getNodeText function retrieves the complete text content of an HTML element while removing extra whitespace. It processes text in nodes as perceived by users in a browser, making it useful for text-based element queries.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-custom-queries.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetNodeText(node: HTMLElement)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom DOM Events in TypeScript\nDESCRIPTION: Demonstrates how to use createEvent[eventName] to create custom DOM events that can be fired later. Useful for accessing event properties that can't be initiated programmatically.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-events.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncreateEvent[eventName](node: HTMLElement, eventProperties: Object)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst myEvent = createEvent.click(node, {button: 2})\nfireEvent(node, myEvent)\n\n// simulate the 'input' event on a file input\nfireEvent(\n  input,\n  createEvent('input', input, {\n    target: {files: inputFiles},\n    ...init,\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Queries Implementation in JavaScript\nDESCRIPTION: Shows how to create custom queries for testing using data-cy attributes, including error messages and query builder functions.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/setup.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {queryHelpers, buildQueries} from '@testing-library/react'\n\nconst queryAllByDataCy = (...args) =>\n  queryHelpers.queryAllByAttribute('data-cy', ...args)\n\nconst getMultipleError = (c, dataCyValue) =>\n  `Found multiple elements with the data-cy attribute of: ${dataCyValue}`\nconst getMissingError = (c, dataCyValue) =>\n  `Unable to find an element with the data-cy attribute of: ${dataCyValue}`\n\nconst [\n  queryByDataCy,\n  getAllByDataCy,\n  getByDataCy,\n  findAllByDataCy,\n  findByDataCy,\n] = buildQueries(queryAllByDataCy, getMultipleError, getMissingError)\n\nexport {\n  queryByDataCy,\n  queryAllByDataCy,\n  getByDataCy,\n  getAllByDataCy,\n  findAllByDataCy,\n  findByDataCy,\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a Vue Counter Component with @testing-library/vue\nDESCRIPTION: A test for the counter component that verifies the increment functionality. The test renders the component, checks the initial count, simulates button clicks using fireEvent, and verifies the updated count.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/vue-testing-library/examples.mdx#2025-04-12_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {render, fireEvent, screen} from '@testing-library/vue'\nimport Component from './Component.vue'\n\ntest('increments value on click', async () => {\n  render(Component)\n\n  // screen has all queries that you can use in your tests.\n  // getByText returns the first matching node for the provided text, and\n  // throws an error if no elements match or if more than one match is found.\n  screen.getByText('Times clicked: 0')\n\n  const button = screen.getByText('increment')\n\n  // Dispatch a native click event to our button element.\n  await fireEvent.click(button)\n  await fireEvent.click(button)\n\n  screen.getByText('Times clicked: 2')\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Components with Testing Library in JSX\nDESCRIPTION: Demonstrates how to use the render function from @testing-library/preact to mount and test a component. It shows the basic usage and the structure of the returned results object.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/preact-testing-library/api.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render} from '@testing-library/preact'\n\nconst {results} = render(<YourComponent />, {options})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Render Function with Vue Router\nDESCRIPTION: This snippet shows how to create a custom render function that uses Vue Router's abstract mode to prevent state leakage between tests. It encapsulates the router setup logic to reduce boilerplate in tests.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/vue-testing-library/faq.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// test-utils.js\n\nimport {render} from '@testing-library/vue'\nimport VueRouter from 'vue-router'\n\nexport async function renderApp(component, options) {\n  const router = new VueRouter({\n    mode: 'abstract',\n    routes: [\n      // Your routes here\n    ],\n  })\n\n  const renderResult = render(component, {\n    routes: router,\n    ...options,\n  })\n\n  // Unlike the router in `hash` mode, the initial routing stack is empty. So,\n  // you need to push an initial route to the stack.\n  await router.push('/')\n\n  return renderResult\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Svelte Component Slots\nDESCRIPTION: Demonstrates testing slot functionality in Svelte components using wrapper components and test IDs.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/example.mdx#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h1>\n  <slot />\n</h1>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import Heading from './heading.svelte'\n</script>\n\n<Heading>\n  <span data-testid=\"child\" />\n</Heading>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render, screen, within} from '@testing-library/svelte'\nimport {expect, test} from 'vitest'\n\nimport HeadingTest from './heading.test.svelte'\n\ntest('heading with slot', () => {\n  render(HeadingTest)\n\n  const heading = screen.getByRole('heading')\n  const child = within(heading).getByTestId('child')\n\n  expect(child).toBeInTheDocument()\n})\n```\n\n----------------------------------------\n\nTITLE: Firing Keyboard Events in JavaScript\nDESCRIPTION: Shows how to fire keyboard events (keyPress, keyDown, keyUp) with specific key codes and properties.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-events.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfireEvent.keyDown(domNode, {key: 'Enter', code: 'Enter', charCode: 13})\n\nfireEvent.keyDown(domNode, {key: 'A', code: 'KeyA'})\n```\n\n----------------------------------------\n\nTITLE: Using keyboard() Function with Printable Characters\nDESCRIPTION: Example of using userEvent.keyboard() with printable characters. This function simulates keyboard events where each character represents a keystroke.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nuserEvent.keyboard('foo') // translates to: f, o, o\n```\n\n----------------------------------------\n\nTITLE: Using ByRole Query in Different Frameworks\nDESCRIPTION: Code examples showing how to use the ByRole query in various frameworks including Native JavaScript, React, Angular, and Cypress.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/byrole.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {screen} from '@testing-library/dom'\n\nconst dialogContainer = screen.getByRole('dialog')\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, screen} from '@testing-library/react'\n\nrender(<MyComponent />)\nconst dialogContainer = screen.getByRole('dialog')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {render, screen} from '@testing-library/angular'\n\nawait render(MyComponent)\nconst dialogContainer = screen.getByRole('dialog')\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.findByRole('dialog').should('exist')\n```\n\n----------------------------------------\n\nTITLE: Basic Test Structure with Arrange-Act-Assert Pattern\nDESCRIPTION: Demonstrates the basic structure of a test using the Arrange-Act-Assert pattern, which is a common approach for organizing test logic.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/example-intro.mdx#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\ntest('loads and displays greeting', async () => {\n  // Arrange\n  // Act\n  // Assert\n})\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Reusable Selectors with testing-library-selector in TypeScript\nDESCRIPTION: This snippet demonstrates how to import selector functions, define reusable selectors, and use them in tests. It shows various query methods and how to specify element types for better TypeScript support.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/ecosystem-testing-library-selector.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {byLabelText, byRole, byTestId} from './selector'\n\n// define reusable selectors\nconst ui = {\n  container: byTestId('my-container'),\n  submitButton: byRole('button', {name: 'Submit'}),\n  usernameInput: byLabelText('Username:'),\n\n  // can encode more specific html element type\n  passwordInput: byLabelText<HTMLInputElement>('Password:'),\n}\n\n// reuse them in the same test or across multiple tests by calling\n// .get(), .getAll(), .find(), .findAll(), .query(), .queryAll()\nit('example test', async () => {\n  // by default elements will be queried against screen\n  await ui.submitButton.find()\n  expect(ui.submitButton.query()).not.toBeInDocument()\n  expect(ui.submitButton.get()).toBeInDocument()\n\n  const containers = ui.container.getAll()\n  expect(containers).toHaveLength(3)\n\n  // provide a container as first param to query element inside that container\n  const username = ui.usernameInput.get(containers[0])\n})\n```\n\n----------------------------------------\n\nTITLE: FireEvent Usage for DOM Events\nDESCRIPTION: Shows how to fire DOM events and wait for Svelte updates using the fireEvent utility.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/api.mdx#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {fireEvent, render, screen} from '@testing-library/svelte'\n\nrender(MyComponent)\n\nconst button = screen.getByRole('button')\nawait fireEvent.click(button)\n```\n\n----------------------------------------\n\nTITLE: Container Usage Examples with within()\nDESCRIPTION: Examples showing how to use the within() function to scope queries to specific containers.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/testcafe-testing-library/intro.mdx#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {within, screen} from '@testing-library/testcafe'\n\nfixture`within`.page`http://localhost:13370`\n\ntest('works with getBy* selectors', async t => {\n  await t\n    .expect(\n      within(screen.getByTestId('nested')).getByText('Button Text').exists,\n    )\n    .ok()\n})\n\ntest('works with CSS selector strings', async t => {\n  const {getByText} = await within('#nested')\n  await t.click(getByText('Button Text')).ok()\n})\n\ntest('works on any testcafe selector', async t => {\n  const nested = Selector('#nested')\n\n  await t.expect(within(nested).getByText('Button Text').exists).ok()\n})\n\ntest('works with results from \"byAll\" query with index - regex', async t => {\n  const nestedDivs = screen.getAllByTestId(/nested/)\n  await t.expect(nestedDivs.count).eql(2)\n\n  await t\n    .expect(within(nestedDivs.nth(0)).getByText('Button Text').exists)\n    .ok()\n    .expect(\n      within(nestedDivs.nth(1)).getByText('text only in 2nd nested').exists,\n    )\n    .ok()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Testing Library for React\nDESCRIPTION: This snippet shows how to configure Testing Library specifically for React applications. It sets a custom test ID attribute.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-configuration.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {configure} from '@testing-library/react'\n\nconfigure({testIdAttribute: 'data-my-test-id'})\n```\n\n----------------------------------------\n\nTITLE: Testing Deferrable Views in Angular with renderDeferBlock\nDESCRIPTION: Demonstrates testing Angular's Deferrable views using the renderDeferBlock method. This allows switching between different states of a deferrable block (Placeholder, Loading, Complete) to test each state of the component.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst {renderDeferBlock} = await render(FixtureComponent, {\n  deferBlockStates: DeferBlockState.Loading,\n})\n\nexpect(screen.getByText(/loading/i)).toBeInTheDocument()\n\nawait renderDeferBlock(DeferBlockState.Complete)\nexpect(screen.getByText(/completed/i)).toBeInTheDocument()\n```\n\n----------------------------------------\n\nTITLE: Mocking Components with Jest in React Testing\nDESCRIPTION: Example of mocking components using Jest's mocking feature, specifically for animation libraries.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/faq.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\njest.mock('react-transition-group', () => {\n  const FakeTransition = jest.fn(({children}) => children)\n  const FakeCSSTransition = jest.fn(props =>\n    props.in ? <FakeTransition>{props.children}</FakeTransition> : null,\n  )\n  return {CSSTransition: FakeCSSTransition, Transition: FakeTransition}\n})\n\ntest('you can mock things with jest.mock', () => {\n  const {getByTestId, queryByTestId} = render(\n    <HiddenMessage initialShow={true} />,\n  )\n  expect(queryByTestId('hidden-message')).toBeTruthy()\n  fireEvent.click(getByTestId('toggle-message'))\n  expect(queryByTestId('hidden-message')).toBeNull()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Vue Counter Component with Click Increment\nDESCRIPTION: A basic Vue component that displays a counter and a button to increment it. The component maintains a count state and provides an increment method to update it when the button is clicked.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/vue-testing-library/examples.mdx#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <p>Times clicked: {{ count }}</p>\n    <button @click=\"increment\">increment</button>\n  </div>\n</template>\n\n<script>\n  export default {\n    data: () => ({\n      count: 0,\n    }),\n\n    methods: {\n      increment() {\n        this.count++\n      },\n    },\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Screen Object for Global Queries\nDESCRIPTION: Demonstrates the screen object approach for querying elements, which is an alternative to using the bound queries returned from render.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/marko-testing-library/api.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { render, screen } from \"@marko/testing-library\"\n\nawait render(MyTemplate)\nconst el = screen.getByText(...)\n```\n\n----------------------------------------\n\nTITLE: Using ByLabelText Query in React Testing\nDESCRIPTION: This snippet shows how to use the getByLabelText query in a React testing environment, including rendering a component and querying for an input by its label.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bylabeltext.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, screen} from '@testing-library/react'\n\nrender(<Login />)\n\nconst inputNode = screen.getByLabelText('Username')\n```\n\n----------------------------------------\n\nTITLE: Testing Component Event Emissions with emitted()\nDESCRIPTION: Shows how to test events emitted by a Marko component using the emitted helper function, which captures and filters events for verification.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/marko-testing-library/api.mdx#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render, fireEvent} from '@marko/testing-library'\nimport Counter from './counter.marko'\n\nconst {getByText, emitted} = await render(Counter)\n\nconst button = getByText('Increment')\n\nawait fireEvent.click(button)\nawait fireEvent.click(button)\n\n// Assuming the `Counter` component forwards these button clicks as `increment` events\nexpect(emitted('increment')).toHaveProperty('length', 2)\n\nawait fireEvent.click(button)\n\n// Note: the tracked events are cleared every time you read them.\n// Below we are snapshoting the events after our last assertion,\n// the return value will include an array with all of the arguments for each increment event.\nexpect(emitted('increment')).toMatchInlineSnapshot(`\n    Array [\n      Array [\n        Object {\n          \"count\": 3,\n        },\n      ],\n    ]\n`)\n\n// Without an event type will give you all events with their type and arguments.\nexpect(emitted()).toMatchInlineSnapshot(`\n    Array [\n      Object {\n        \"args\": Array [\n          Object {\n            \"count\": 0,\n          },\n        ],\n        \"type\": \"increment\",\n      },\n      Object {\n        \"args\": Array [\n          Object {\n            \"count\": 1,\n          },\n        ],\n        \"type\": \"increment\",\n      },\n      Object {\n        \"args\": Array [\n          Object {\n            \"count\": 3,\n          },\n        ],\n        \"type\": \"increment\",\n      }\n    ]\n  `)\n```\n\n----------------------------------------\n\nTITLE: Defining ByRole Query API in TypeScript\nDESCRIPTION: TypeScript definition for the ByRole query function, including its parameters and options. It specifies the container, role, and various optional parameters for filtering elements.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/byrole.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetByRole(\n  // If you're using `screen`, then skip the container argument:\n  container: HTMLElement,\n  role: string,\n  options?: {\n    hidden?: boolean = false,\n    name?: TextMatch,\n    description?: TextMatch,\n    selected?: boolean,\n    busy?: boolean,\n    checked?: boolean,\n    pressed?: boolean,\n    suggest?: boolean,\n    current?: boolean | string,\n    expanded?: boolean,\n    queryFallbacks?: boolean,\n    level?: number,\n    value?: {\n      min?: number,\n      max?: number,\n      now?: number,\n      text?: TextMatch,\n    }\n  }): HTMLElement\n```\n\n----------------------------------------\n\nTITLE: Querying Elements with Within - Cypress Testing\nDESCRIPTION: Shows how to use Cypress's within function to query nested elements in a component. Uses Cypress's chainable commands to find text within a specific context.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-within.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.findByText('messages').within(() => {\n  cy.findByText('hello')\n})\n```\n\n----------------------------------------\n\nTITLE: Using rerender to Update Component Props\nDESCRIPTION: Example demonstrating how to update props of a rendered component in a test using the rerender method.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/api.mdx#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render} from '@testing-library/react'\n\nconst {rerender} = render(<NumberDisplay number={1} />)\n\n// re-render the same component with different props\nrerender(<NumberDisplay number={2} />)\n```\n\n----------------------------------------\n\nTITLE: Using Testing Playground URL Logger\nDESCRIPTION: Example of using screen.logTestingPlaygroundURL() to generate debugging URLs for testing-playground.com.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-debugging.mdx#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {screen} from '@testing-library/dom'\n\ndocument.body.innerHTML = `\n  <button>test</button>\n  <span>multi-test</span>\n  <div>multi-test</div>\n`\n\n// log entire document to testing-playground\nscreen.logTestingPlaygroundURL()\n// log a single element\nscreen.logTestingPlaygroundURL(screen.getByText('test'))\n```\n\n----------------------------------------\n\nTITLE: Custom Render Implementation in TypeScript\nDESCRIPTION: TypeScript version of the custom render implementation with proper type definitions for components and render options.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/setup.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {ReactElement} from 'react'\nimport {render, RenderOptions} from '@testing-library/react'\nimport {ThemeProvider} from 'my-ui-lib'\nimport {TranslationProvider} from 'my-i18n-lib'\nimport defaultStrings from 'i18n/en-x-default'\n\nconst AllTheProviders = ({children}: {children: React.ReactNode}) => {\n  return (\n    <ThemeProvider theme=\"light\">\n      <TranslationProvider messages={defaultStrings}>\n        {children}\n      </TranslationProvider>\n    </ThemeProvider>\n  )\n}\n\nconst customRender = (\n  ui: ReactElement,\n  options?: Omit<RenderOptions, 'wrapper'>,\n) => render(ui, {wrapper: AllTheProviders, ...options})\n\nexport * from '@testing-library/react'\nexport {customRender as render}\n```\n\n----------------------------------------\n\nTITLE: Partial Updates with Angular Component Rerendering\nDESCRIPTION: Shows how to use the partialUpdate flag with rerender to update only specific properties while keeping other input properties unchanged. This is useful when you want to modify only certain aspects of a component.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst {rerender} = await render(Counter, {\n  inputs: {count: 4, name: 'Sarah'},\n})\n\nexpect(screen.getByTestId('count-value').textContent).toBe('4')\nexpect(screen.getByTestId('name-value').textContent).toBe('Sarah')\n\nawait rerender({inputs: {count: 7}, partialUpdate: true})\n\n// count is updated to 7\nexpect(screen.getByTestId('count-value').textContent).toBe('7')\n// name is still rendered as \"Sarah\" because of the partial update\nexpect(screen.getByTestId('name-value').textContent).toBe('Sarah')\n```\n\n----------------------------------------\n\nTITLE: Rendering a Table Body Component\nDESCRIPTION: Example of rendering a table body component with a custom container element. This is useful when testing elements that require specific parent elements.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/vue-testing-library/api.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst table = document.createElement('table')\n\nconst {container} = render(TableBody, {\n  props,\n  container: document.body.appendChild(table),\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Element Disappearance with waitFor\nDESCRIPTION: Shows how to use waitFor to test that an element disappears from the page. Uses queryBy instead of getBy to avoid throwing errors when the element is not found.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/guide-disappearance.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\ntest('movie title goes away', async () => {\n  // element is initially present...\n  // note use of queryBy instead of getBy to return null\n  // instead of throwing in the query itself\n  await waitFor(() => {\n    expect(queryByText('i, robot')).not.toBeInTheDocument()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Tab Navigation with Testing Library's user-event\nDESCRIPTION: Shows how to use the tab method to simulate keyboard tabbing between focusable elements, handling focus cycling and demonstrating the ability to test keyboard navigation in a component.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport '@testing-library/jest-dom'\nimport userEvent from '@testing-library/user-event'\n\nit('should cycle elements in document tab order', () => {\n  render(\n    <div>\n      <input data-testid=\"element\" type=\"checkbox\" />\n      <input data-testid=\"element\" type=\"radio\" />\n      <input data-testid=\"element\" type=\"number\" />\n    </div>,\n  )\n\n  const [checkbox, radio, number] = screen.getAllByTestId('element')\n\n  expect(document.body).toHaveFocus()\n\n  userEvent.tab()\n\n  expect(checkbox).toHaveFocus()\n\n  userEvent.tab()\n\n  expect(radio).toHaveFocus()\n\n  userEvent.tab()\n\n  expect(number).toHaveFocus()\n\n  userEvent.tab()\n\n  // cycle goes back to the body element\n  expect(document.body).toHaveFocus()\n\n  userEvent.tab()\n\n  expect(checkbox).toHaveFocus()\n})\n```\n\n----------------------------------------\n\nTITLE: Touch Screen Interaction Example\nDESCRIPTION: Complex example demonstrating how to simulate touch screen interactions, including touching at an element, moving the touch pointer, and releasing it.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-pointer.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npointer([\n  // touch the screen at element1\n  {keys: '[TouchA>]', target: element1},\n  // move the touch pointer to element2\n  {pointerName: 'TouchA', target: element2},\n  // release the touch pointer at the last position (element2)\n  {keys: '[/TouchA]'},\n])\n```\n\n----------------------------------------\n\nTITLE: Navigating in Angular Tests with Testing Library\nDESCRIPTION: Demonstrates how to use the navigate function to navigate to different routes in tests. It accepts either a DOM element (using its href value) or a direct path string for navigation.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst { navigate } = await render(AppComponent, {\n  routes: [...]\n})\n\nawait navigate(component.getByLabelText('To details'))\nawait navigate('details/3')\n```\n\n----------------------------------------\n\nTITLE: Testing File Upload with Testing Library\nDESCRIPTION: Example of testing file upload functionality using @testing-library/user-event's upload utility. Shows how to create a mock file and test file input handling.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/faq.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntest('upload file', async () => {\n  const user = userEvent.setup()\n\n  render(Uploader)\n  const file = new File(['hello'], 'hello.png', {type: 'image/png'})\n  const input = screen.getByLabelText(/upload file/i)\n\n  await user.upload(input, file)\n\n  expect(input.files[0]).toBe(file)\n  expect(input.files.item(0)).toBe(file)\n  expect(input.files).toHaveLength(1)\n})\n```\n\n----------------------------------------\n\nTITLE: Example Usage of type() Method in JSX\nDESCRIPTION: Demonstrates typing text into an input field. The example renders an input with default text, types additional text, and verifies the resulting value.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-utility.mdx#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\ntest('type into an input field', async () => {\n  const user = userEvent.setup()\n\n  render(<input defaultValue=\"Hello,\" />)\n  const input = screen.getByRole('textbox')\n\n  await user.type(input, ' World!')\n\n  expect(input).toHaveValue('Hello, World!')\n})\n```\n\n----------------------------------------\n\nTITLE: Using getByTestId in Native JavaScript\nDESCRIPTION: This JavaScript example shows how to use the getByTestId function from the @testing-library/dom package to select an element by its data-testid attribute.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bytestid.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {screen} from '@testing-library/dom'\n\nconst element = screen.getByTestId('custom-element')\n```\n\n----------------------------------------\n\nTITLE: Extended Usage with ElementHandle Prototype\nDESCRIPTION: Shows how to extend Puppeteer's ElementHandle prototype with DOM Testing Library methods for a more integrated experience. This approach adds query methods directly to ElementHandle instances.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/pptr-testing-library/intro.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst puppeteer = require('puppeteer')\nrequire('pptr-testing-library/extend')\n\nconst browser = await puppeteer.launch()\nconst page = await browser.newPage()\n\n// getDocument is added to prototype of Page\nconst $document = await page.getDocument()\n// query methods are added directly to prototype of ElementHandle\nconst $form = await $document.getByTestId('my-form')\n// destructuring works if you explicitly call getQueriesForElement\nconst {getByLabelText} = $form.getQueriesForElement()\n// ...\nconst $email = await getByLabelText('Email')\n```\n\n----------------------------------------\n\nTITLE: Using Screen Object in React Testing Library\nDESCRIPTION: Shows how to use the screen object with React Testing Library to query rendered components.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/about.mdx#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, screen} from '@testing-library/react'\n\nrender(\n  <div>\n    <label htmlFor=\"example\">Example</label>\n    <input id=\"example\" />\n  </div>,\n)\n\nconst exampleInput = screen.getByLabelText('Example')\n```\n\n----------------------------------------\n\nTITLE: Implementing a Hidden Message Component in Preact\nDESCRIPTION: This component renders a checkbox that controls the visibility of its children content. When the checkbox is checked, the message is displayed; otherwise, it's hidden.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/preact-testing-library/example.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction HiddenMessage({children}) {\n  const [showMessage, setShowMessage] = useState(false)\n\n  return (\n    <div>\n      <label htmlFor=\"toggle\">Show Message</label>\n      <input\n        id=\"toggle\"\n        type=\"checkbox\"\n        onChange={e => setShowMessage(e.target.checked)}\n        checked={showMessage}\n      />\n      {showMessage ? children : null}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using getByAltText with React\nDESCRIPTION: Example of using the getByAltText query with React Testing Library to render a component and find an image by its alt text using a regular expression.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/byalttext.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, screen} from '@testing-library/react'\n\nrender(<MyComponent />)\nconst incrediblesPosterImg = screen.getByAltText(/incredibles.*? poster/i)\n```\n\n----------------------------------------\n\nTITLE: Rendering a Custom Hook with Initial Props\nDESCRIPTION: Shows how to use renderHook to test a custom hook, including passing initial props and handling rerender.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/api.mdx#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport {renderHook} from '@testing-library/react'\n\ntest('returns logged in user', () => {\n  const {result, rerender} = renderHook((props = {}) => props, {\n    initialProps: {name: 'Alice'},\n  })\n  expect(result.current).toEqual({name: 'Alice'})\n  rerender()\n  expect(result.current).toEqual({name: undefined})\n})\n```\n\n----------------------------------------\n\nTITLE: Using Sync Mode with WebdriverIO Testing Library\nDESCRIPTION: Shows how the testing library commands can be used synchronously when WebdriverIO is configured in sync mode. This eliminates the need for async/await syntax.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/webdriverio-testing-library/intro.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nit('adds queries as browser commands', async () => {\n  setupBrowser(browser)\n\n  expect(browser.getByText('Page Heading')).toBeDefined()\n})\n\nit('adds queries as element commands scoped to element', async () => {\n  setupBrowser(browser)\n\n  const nested = browser.$('*[data-testid=\"nested\"]')\n  const button = nested.getByText('Button Text')\n  button.click()\n\n  expect(button.getText()).toEqual('Button Clicked')\n})\n```\n\n----------------------------------------\n\nTITLE: Using ByText Query in React Testing\nDESCRIPTION: This snippet demonstrates how to use the getByText function in a React testing environment. It shows rendering a component and then querying for text within that component.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bytext.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, screen} from '@testing-library/react'\n\nrender(<MyComponent />)\nconst aboutAnchorNode = screen.getByText(/about/i)\n```\n\n----------------------------------------\n\nTITLE: Implementing Triple Click Event in Testing Library\nDESCRIPTION: Demonstrates the use of tripleClick() function to simulate a triple-click on a checkbox element. Includes TypeScript definition, equivalent pointer API call, and a test example.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-convenience.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntripleClick(element: Element): Promise<void>\n```\n\nLANGUAGE: javascript\nCODE:\n```\npointer([\n  {target: element},\n  {keys: '[MouseLeft][MouseLeft][MouseLeft]', target: element},\n])\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('triple click', async () => {\n  const onChange = jest.fn()\n  const user = userEvent.setup()\n\n  render(<input type=\"checkbox\" onChange={onChange} />)\n\n  const checkbox = screen.getByRole('checkbox')\n\n  await user.tripleClick(checkbox)\n\n  expect(onChange).toHaveBeenCalledTimes(3)\n  expect(checkbox).toBeChecked()\n})\n```\n\n----------------------------------------\n\nTITLE: Using Query Methods in Angular Testing Library\nDESCRIPTION: Shows how to use DOM Testing Library queries that are automatically returned by render with their first argument bound to the component under test. This allows for easy element selection using accessible methods.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst {getByText, queryByLabelText} = await render(AppComponent)\n\nscreen.getByRole('heading', {\n  name: /api/i,\n})\nqueryByLabelText(/First name/i')\n```\n\n----------------------------------------\n\nTITLE: Firing Drag and Drop Events with dataTransfer in JavaScript\nDESCRIPTION: Demonstrates how to fire a drop event with a dataTransfer property, useful for testing drag and drop interactions.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-events.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfireEvent.drop(getByLabelText(/drop files here/i), {\n  dataTransfer: {\n    files: [new File(['(⌐□_□)'], 'chucknorris.png', {type: 'image/png'})],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Selection Manipulation Examples\nDESCRIPTION: Examples showing how to use pointer actions to set cursor position and create text selections by manipulating DOM positions.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-pointer.mdx#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// element: <div><span>foo</span><span>bar</span></div>\n// | marking the cursor.\n// [ ] marking a selection.\n\npointer({target: element, offset: 2, keys: '[MouseLeft]'})\n// => <div><span>fo|o</span><span>bar</span></div>\n\npointer([{target: element, offset: 2, keys: '[MouseLeft>]'}, {offset: 5}])\n// => <div><span>fo[o</span><span>ba]r</span></div>\n\npointer({target: element, node: element, offset: 1, keys: '[MouseLeft]'})\n// => <div><span>foo</span>|<span>bar</span></div>\n```\n\n----------------------------------------\n\nTITLE: Using userEvent.click() in a React test\nDESCRIPTION: Demonstrates how to use userEvent.click() to simulate a click on a checkbox label in a React component test.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\n\ntest('click', () => {\n  render(\n    <div>\n      <label htmlFor=\"checkbox\">Check</label>\n      <input id=\"checkbox\" type=\"checkbox\" />\n    </div>,\n  )\n\n  userEvent.click(screen.getByText('Check'))\n  expect(screen.getByLabelText('Check')).toBeChecked()\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Automatic Logging in Testing Library\nDESCRIPTION: Shows how the automatic logging feature works when a get query fails, printing the DOM state for debugging.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-debugging.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <div>Hello world</div>\ngetByText(container, 'Goodbye world') // will fail by throwing error\n```\n\n----------------------------------------\n\nTITLE: Using getByTestId in React Testing\nDESCRIPTION: This React example demonstrates how to use the getByTestId function from the @testing-library/react package to select an element by its data-testid attribute after rendering a component.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bytestid.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, screen} from '@testing-library/react'\n\nrender(<MyComponent />)\nconst element = screen.getByTestId('custom-element')\n```\n\n----------------------------------------\n\nTITLE: Demonstrating getNodeText Usage with Regular Elements\nDESCRIPTION: This example shows how getNodeText normalizes whitespace in HTML elements, returning text content as it would appear to users. It removes extra whitespace within rendered text to match user perception.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-custom-queries.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// <div>\n//   Hello\n//     World  !\n// </div>\nconst text = getNodeText(container.querySelector('div')) // \"Hello World !\"\n```\n\n----------------------------------------\n\nTITLE: Using user-event instance for sequential interactions in JavaScript\nDESCRIPTION: Example showing how to create a user-event instance and perform sequential interactions that share input device state. The example demonstrates pressing Shift key and then clicking with the shift key still pressed.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/setup.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport userEvent from '@testing-library/user-event'\n\nconst user = userEvent.setup()\n\nawait user.keyboard('[ShiftLeft>]') // Press Shift (without releasing it)\nawait user.click(element) // Perform a click with `shiftKey: true`\n```\n\n----------------------------------------\n\nTITLE: Providing Component-Level Dependencies in Angular Testing Library\nDESCRIPTION: Shows how to provide dependencies at the component level using the componentProviders option in the render method.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait render(AppComponent, {\n  componentProviders: [AppComponentService],\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Schemas in Angular Testing Library\nDESCRIPTION: Illustrates how to add schemas for rendering a component using the schemas option in the render method.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nawait render(AppComponent, {\n  schemas: [NO_ERRORS_SCHEMA],\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Element Non-existence in Vue Testing Library\nDESCRIPTION: This snippet shows how to verify that an element is not rendered in the DOM, using either a null check or the jest-dom toBeInTheDocument matcher with the not operator.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/vue-testing-library/faq.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(queryByText('submit')).toBeNull()\n\n// or, if using jest-dom:\nimport '@testing-library/jest-dom'\nexpect(queryByText('submit')).not.toBeInTheDocument()\n```\n\n----------------------------------------\n\nTITLE: Using Cleanup Function in Qwik Testing Library\nDESCRIPTION: Shows how to use the cleanup function to remove rendered components and elements, either automatically after each test or manually for more control.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/qwik-testing-library/api.mdx#2025-04-12_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {render, cleanup} from '@noma.to/qwik-testing-library'\n\n// Default: runs after each test\nafterEach(() => {\n  cleanup()\n})\n\nawait render(<MyComponent />)\n\n// Called manually for more control\ncleanup()\n```\n\n----------------------------------------\n\nTITLE: Implementing Hover and Unhover Events in Testing Library\nDESCRIPTION: Shows how to use hover() and unhover() functions to simulate mouse hover events. Includes TypeScript definitions, equivalent pointer API calls, and a test example for both events.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-convenience.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nhover(element: Element): Promise<void>\n```\n\nLANGUAGE: javascript\nCODE:\n```\npointer({target: element})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nunhover(element: Element): Promise<void>\n```\n\nLANGUAGE: javascript\nCODE:\n```\npointer({target: element.ownerDocument.body})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('hover/unhover', async () => {\n  const user = userEvent.setup()\n  render(<div>Hover</div>)\n\n  const hoverBox = screen.getByText('Hover')\n  let isHover = false\n\n  hoverBox.addEventListener('mouseover', () => {\n    isHover = true\n  })\n  hoverBox.addEventListener('mouseout', () => {\n    isHover = false\n  })\n\n  expect(isHover).toBeFalsy()\n\n  await user.hover(hoverBox)\n\n  expect(isHover).toBeTruthy()\n\n  await user.unhover(hoverBox)\n\n  expect(isHover).toBeFalsy()\n})\n```\n\n----------------------------------------\n\nTITLE: Text Normalization Examples\nDESCRIPTION: Demonstrates how to customize text normalization behavior for queries.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/about.mdx#2025-04-12_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nscreen.getByText('text', {\n  normalizer: getDefaultNormalizer({trim: false}),\n})\n\nscreen.getByText('text', {\n  normalizer: str =>\n    getDefaultNormalizer({trim: false})(str).replace(/[\\u200E-\\u200F]*/g, ''),\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Navigation in Testing Library\nDESCRIPTION: Demonstrates how to use the tab() function to simulate keyboard tab navigation. Includes TypeScript definition, equivalent keyboard API calls for different scenarios, and a test example.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-convenience.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntab(options: {shift?: boolean}): Promise<void>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// without shift\nkeyboard('{Tab}')\n// with shift=true\nkeyboard('{Shift>}{Tab}{/Shift}')\n// with shift=false\nkeyboard('[/ShiftLeft][/ShiftRight]{Tab}')\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('tab', async () => {\n  const user = userEvent.setup()\n  render(\n    <div>\n      <input type=\"checkbox\" />\n      <input type=\"radio\" />\n      <input type=\"number\" />\n    </div>,\n  )\n\n  const checkbox = screen.getByRole('checkbox')\n  const radio = screen.getByRole('radio')\n  const number = screen.getByRole('spinbutton')\n\n  expect(document.body).toHaveFocus()\n\n  await user.tab()\n\n  expect(checkbox).toHaveFocus()\n\n  await user.tab()\n\n  expect(radio).toHaveFocus()\n\n  await user.tab()\n\n  expect(number).toHaveFocus()\n\n  await user.tab()\n\n  // cycle goes back to the body element\n  expect(document.body).toHaveFocus()\n\n  // simulate Shift-Tab\n  await user.tab({shift: true})\n\n  expect(number).toHaveFocus()\n})\n```\n\n----------------------------------------\n\nTITLE: Cutting Selection in TypeScript for Testing Library\nDESCRIPTION: This function cuts the current selection. If writeToClipboard is true, it writes the data to the Clipboard. In editable contexts, it removes the selected content from the document. It returns a Promise that resolves to a DataTransfer object or undefined.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-clipboard.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncut(): Promise<DataTransfer|undefined>\n```\n\n----------------------------------------\n\nTITLE: Retrieving ARIA Roles from DOM Elements with JavaScript\nDESCRIPTION: This snippet demonstrates how to use the getRoles function to retrieve implicit ARIA roles from a DOM tree. It creates a nav element with a nested list and logs the resulting roles object.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-accessibility.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {getRoles} from '@testing-library/dom'\n\nconst nav = document.createElement('nav')\nnav.innerHTML = `\n<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`\nconsole.log(getRoles(nav))\n\n// Object {\n//   navigation: [<nav />],\n//   list: [<ul />],\n//   listitem: [<li />, <li />]\n// }\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up React Components in Ava Tests\nDESCRIPTION: Demonstrates how to use the cleanup function with the Ava testing framework to unmount React components after each test.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/api.mdx#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport {cleanup, render} from '@testing-library/react'\nimport test from 'ava'\n\ntest.afterEach(cleanup)\n\ntest('renders into document', () => {\n  render(<div />)\n  // ...\n})\n\n// ... more tests ...\n```\n\n----------------------------------------\n\nTITLE: Using getByAltText with Native DOM\nDESCRIPTION: Example of using the getByAltText query with the native DOM implementation of Testing Library to find an image by its alt text using a regular expression.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/byalttext.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {screen} from '@testing-library/dom'\n\nconst incrediblesPosterImg = screen.getByAltText(/incredibles.*? poster/i)\n```\n\n----------------------------------------\n\nTITLE: Act Function Usage with Component Updates\nDESCRIPTION: Demonstrates how to use the act function to ensure Svelte updates are applied to the DOM.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/api.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {act, render} from '@testing-library/svelte'\n\nconst {component} = render(MyComponent)\n\nawait act(() => {\n  component.updateSomething()\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Double Click Event in Testing Library\nDESCRIPTION: Shows how to use the dblClick() function to simulate a double-click on a checkbox element. Includes TypeScript definition, equivalent pointer API call, and a test example.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-convenience.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndblClick(element: Element): Promise<void>\n```\n\nLANGUAGE: javascript\nCODE:\n```\npointer([{target: element}, {keys: '[MouseLeft][MouseLeft]', target: element}])\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('double click', async () => {\n  const onChange = jest.fn()\n  const user = userEvent.setup()\n\n  render(<input type=\"checkbox\" onChange={onChange} />)\n\n  const checkbox = screen.getByRole('checkbox')\n\n  await user.dblClick(checkbox)\n\n  expect(onChange).toHaveBeenCalledTimes(2)\n  expect(checkbox).not.toBeChecked()\n})\n```\n\n----------------------------------------\n\nTITLE: Rerendering Angular Components with Input Properties\nDESCRIPTION: Demonstrates how to update input properties of an existing component using the rerender method. This function follows Angular component lifecycle events, and input properties not specified are cleared.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst {rerender} = await render(Counter, {\n  inputs: {count: 4, name: 'Sarah'},\n})\n\nexpect(screen.getByTestId('count-value').textContent).toBe('4')\nexpect(screen.getByTestId('name-value').textContent).toBe('Sarah')\n\nawait rerender({\n  inputs: {count: 7}\n})\n\n// count is updated to 7\nexpect(screen.getByTestId('count-value').textContent).toBe('7')\n// name is undefined because it's not provided in rerender\nexpect(screen.getByTestId('name-value').textContent).toBeUndefined()\n```\n\n----------------------------------------\n\nTITLE: Installing jsdom and global-jsdom for DOM Testing without Jest\nDESCRIPTION: Command to install jsdom and global-jsdom packages as development dependencies. These packages are required when running DOM tests in Node.js without Jest.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/setup.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jsdom global-jsdom\n```\n\n----------------------------------------\n\nTITLE: Implementing React Router v5 in a React Application\nDESCRIPTION: This snippet demonstrates how to set up a basic React application using React Router v5. It includes route definitions, navigation links, and a custom hook for displaying the current location.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-react-router.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// app.js\nimport React from 'react'\nimport {Link, Route, Switch, useLocation} from 'react-router-dom'\n\nconst About = () => <div>You are on the about page</div>\nconst Home = () => <div>You are home</div>\nconst NoMatch = () => <div>No match</div>\n\nexport const LocationDisplay = () => {\n  const location = useLocation()\n\n  return <div data-testid=\"location-display\">{location.pathname}</div>\n}\n\nexport const App = () => (\n  <div>\n    <Link to=\"/\">Home</Link>\n\n    <Link to=\"/about\">About</Link>\n\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n\n      <Route path=\"/about\" component={About} />\n\n      <Route component={NoMatch} />\n    </Switch>\n\n    <LocationDisplay />\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Using rtl-simple-queries for DOM querying in React tests\nDESCRIPTION: Examples of using rtl-simple-queries to find elements in the DOM with different configurations for empty or multiple elements. Includes both synchronous and asynchronous query examples.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/ecosystem-rtl-simple-queries.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {screen} from 'rtl-simple-queries'\n\nscreen.fetchByText(/text/, {allowEmpty: true, allowMultiple: false})\nscreen.fetchByText(/text/, {allowMultiple: false})\nscreen.fetchByText(/text/)\n\n// async\nawait screen.fetchByTextAsync(/text/, {allowMultiple: true})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for upload() Method\nDESCRIPTION: Type definition for the upload() method which simulates a user selecting files in a file upload dialog. It accepts a single file or an array of files.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-utility.mdx#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nupload(\n  element: HTMLElement,\n  fileOrFiles: File | File[],\n): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: waitFor Function Type Definition in TypeScript\nDESCRIPTION: TypeScript definition for the waitFor utility function, showing its parameters and options. This function allows waiting for any asynchronous condition to be met before continuing test execution.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-async.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction waitFor<T>(\n  callback: () => T | Promise<T>,\n  options?: {\n    container?: HTMLElement\n    timeout?: number\n    interval?: number\n    onTimeout?: (error: Error) => Error\n    mutationObserverOptions?: MutationObserverInit\n  },\n): Promise<T>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of selectOptions() Method in JSX\nDESCRIPTION: Demonstrates selecting multiple options in a select element. The example renders a multi-select dropdown, selects two options, and verifies the correct options are selected.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-utility.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\ntest('selectOptions', async () => {\n  const user = userEvent.setup()\n\n  render(\n    <select multiple>\n      <option value=\"1\">A</option>\n      <option value=\"2\">B</option>\n      <option value=\"3\">C</option>\n    </select>,\n  )\n\n  await user.selectOptions(screen.getByRole('listbox'), ['1', 'C'])\n\n  expect(screen.getByRole('option', {name: 'A'}).selected).toBe(true)\n  expect(screen.getByRole('option', {name: 'B'}).selected).toBe(false)\n  expect(screen.getByRole('option', {name: 'C'}).selected).toBe(true)\n})\n```\n\n----------------------------------------\n\nTITLE: Using waitForElementToBeRemoved to Test DOM Element Removal in JavaScript\nDESCRIPTION: Example of using waitForElementToBeRemoved to wait for an element to be removed from the DOM. The Promise resolves when the element is no longer in the document.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-async.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst el = document.querySelector('div.getOuttaHere')\n\nwaitForElementToBeRemoved(document.querySelector('div.getOuttaHere')).then(() =>\n  console.log('Element no longer in DOM'),\n)\n\nel.setAttribute('data-neat', true)\n// other mutations are ignored...\n\nel.parentElement.removeChild(el)\n// logs 'Element no longer in DOM'\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Configuration for Testing\nDESCRIPTION: TypeScript configuration updates needed to declare global types for Vitest and Jest DOM to enable proper type checking in tests.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/qwik-testing-library/setup.mdx#2025-04-12_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"types\": [\n     \"vitest/globals\",\n     \"@testing-library/jest-dom/vitest\"\n    ]\n  },\n  \"include\": [\"src\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cypress Testing Library queries in JavaScript tests\nDESCRIPTION: Examples of using Cypress Testing Library queries to find and interact with elements in Cypress tests.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/cypress-testing-library/intro.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.findByRole('button', {name: /Jackie Chan/i}).click()\ncy.findByRole('button', {name: /Button Text/i}).should('exist')\ncy.findByRole('button', {name: /Non-existing Button Text/i}).should('not.exist')\ncy.findByLabelText(/Label text/i, {timeout: 7000}).should('exist')\n\n// findByRole _inside_ a form element\ncy.get('form')\n  .findByRole('button', {name: /Button Text/i})\n  .should('exist')\ncy.findByRole('dialog').within(() => {\n  cy.findByRole('button', {name: /confirm/i})\n})\n```\n\n----------------------------------------\n\nTITLE: Debugging Rendered Component in Angular Testing Library\nDESCRIPTION: Shows how to use the debug function to print out the component's DOM for inspection during testing.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst {debug} = await render(AppComponent)\n\ndebug()\n```\n\n----------------------------------------\n\nTITLE: Using ByPlaceholderText Query in Native JavaScript\nDESCRIPTION: Shows how to use the getByPlaceholderText query with the screen object in native JavaScript to find an input element by its placeholder text.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/byplaceholdertext.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {screen} from '@testing-library/dom'\n\nconst inputNode = screen.getByPlaceholderText('Username')\n```\n\n----------------------------------------\n\nTITLE: Using jasmine-dom matchers with Testing Library in JSX\nDESCRIPTION: Example showing how to use jasmine-dom matchers with Testing Library to test DOM elements, demonstrating toBeEmptyDOMElement and toBeVisible matchers on elements selected with Testing Library's query functions.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/ecosystem-jasmine-dom.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<span data-testid=\"not-empty\"><span data-testid=\"empty\"></span></span>\n<div data-testid=\"visible\">Visible Example</div>\n\nexpect(screen.queryByTestId('not-empty')).not.toBeEmptyDOMElement()\nexpect(screen.getByText('Visible Example')).toBeVisible()\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Component with useReducer\nDESCRIPTION: A React component that uses the useReducer hook to manage confirmation state. It displays different text based on whether the confirmation has occurred and includes a button to trigger confirmation.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-react-hooks-useReducer.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// example.js\n\nimport React, {useReducer} from 'react'\n\nconst initialState = {\n  isConfirmed: false,\n}\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case 'SUCCESS':\n      return {\n        ...state,\n        isConfirmed: true,\n      }\n    default:\n      throw Error('unknown action')\n  }\n}\n\nconst Example = () => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  return (\n    <div>\n      <div>\n        {state.isConfirmed ? (\n          <p>Confirmed!</p>\n        ) : (\n          <p>Waiting for confirmation...</p>\n        )}\n      </div>\n      <button onClick={() => dispatch({type: 'SUCCESS'})}>Confirm</button>\n    </div>\n  )\n}\n\nexport default Example\n```\n\n----------------------------------------\n\nTITLE: Example Usage of deselectOptions() Method in JSX\nDESCRIPTION: Demonstrates deselecting an option in a select element. The example renders a multi-select dropdown with a pre-selected option, deselects it, and verifies it's no longer selected.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-utility.mdx#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\ntest('deselectOptions', async () => {\n  const user = userEvent.setup()\n\n  render(\n    <select multiple>\n      <option value=\"1\">A</option>\n      <option value=\"2\" selected>\n        B\n      </option>\n      <option value=\"3\">C</option>\n    </select>,\n  )\n\n  await user.deselectOptions(screen.getByRole('listbox'), '2')\n\n  expect(screen.getByText('B').selected).toBe(false)\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Component Rendering with Enzyme\nDESCRIPTION: An example of testing a component's rendered output using Enzyme's shallow renderer and find method to check text content.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/migrate-from-enzyme.mdx#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\ntest('has correct welcome text', () => {\n  const wrapper = shallow(<Welcome firstName=\"John\" lastName=\"Doe\" />)\n  expect(wrapper.find('h1').text()).toEqual('Welcome, John Doe')\n})\n```\n\n----------------------------------------\n\nTITLE: Using getByDisplayValue for Select with React Testing Library\nDESCRIPTION: Example of using the getByDisplayValue query with React Testing Library to find a select element with the selected option displaying 'Alaska' after rendering a React component.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bydisplayvalue.mdx#2025-04-12_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, screen} from '@testing-library/react'\n\nrender(<MyComponent />)\nconst selectElement = screen.getByDisplayValue('Alaska')\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for clear() Method\nDESCRIPTION: Type definition for the clear() method which focuses an element, selects all content, and deletes it to clear editable elements.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-utility.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclear(element: Element): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Using Debug Function to Print DOM\nDESCRIPTION: Shows how to use the debug function returned from render to print the current DOM state of the rendered component, which is helpful for debugging tests.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/marko-testing-library/api.mdx#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render} from '@marko/testing-library'\nimport Greeting from './greeting.marko'\n\nconst {debug} = await render(Greeting, {name: 'World'})\ndebug()\n\n// <h1>Hello World</h1>\n// you can also pass an element: debug(getByTestId('messages'))\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition and Usage of testEffect for Async Testing\nDESCRIPTION: Definition and example of the testEffect helper function for testing asynchronous effects in Solid.js. It allows testing reactive effects by providing a done callback rather than using polling.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/solid-testing-library/api.mdx#2025-04-12_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ntestEffect(fn: (done: (result: T) => void) => void, owner?: Owner): Promise<T>\n\n// use it like this:\ntest(\"testEffect allows testing an effect asynchronously\", () => {\n  const [value, setValue] = createSignal(0);\n  return testEffect(done => createEffect((run: number = 0) => {\n    if (run === 0) {\n      expect(value()).toBe(0);\n      setValue(1);\n    } else if (run === 1) {\n      expect(value()).toBe(1);\n      done();\n    }\n    return run + 1;\n  }));\n});\n```\n\n----------------------------------------\n\nTITLE: Example Usage of upload() Method for Single File Upload in JSX\nDESCRIPTION: Demonstrates uploading a single file to a file input. The example creates a File object, uploads it to an input, and verifies it was properly added to the files collection.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-utility.mdx#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\ntest('upload file', async () => {\n  const user = userEvent.setup()\n\n  render(\n    <div>\n      <label htmlFor=\"file-uploader\">Upload file:</label>\n      <input id=\"file-uploader\" type=\"file\" />\n    </div>,\n  )\n  const file = new File(['hello'], 'hello.png', {type: 'image/png'})\n  const input = screen.getByLabelText(/upload file/i)\n\n  await user.upload(input, file)\n\n  expect(input.files[0]).toBe(file)\n  expect(input.files.item(0)).toBe(file)\n  expect(input.files).toHaveLength(1)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Fake Timers with Jest in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set up fake timers using Jest's useFakeTimers() function in a beforeEach block. This replaces real timers with fake ones for all code within the test.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/guides-using-fake-timers.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Fake timers using Jest\nbeforeEach(() => {\n  jest.useFakeTimers()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Browser Resolution in Tests\nDESCRIPTION: Configuration setup for Vite to use browser resolutions in tests, enabling proper lifecycle event handling. This allows onMount and other lifecycle methods to work correctly in the test environment.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/faq.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {svelte} from '@sveltejs/vite-plugin-svelte'\nimport {defineConfig} from 'vite'\n\nexport default defineConfig(({mode}) => ({\n  plugins: [svelte()],\n  resolve: {\n    // The default would be [ 'svelte', 'node' ]\n    // as set by vite-plugin-svelte and vitest.\n    // This sets [ 'browser', 'svelte', 'node' ]\n    conditions: mode === 'test' ? ['browser'] : [],\n  },\n  test: {\n    environment: 'jsdom',\n  },\n}))\n```\n\n----------------------------------------\n\nTITLE: Using getByDisplayValue with DOM Testing Library\nDESCRIPTION: Example of using the getByDisplayValue query with the DOM Testing Library to find an input element with the value 'Norris'.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bydisplayvalue.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {screen} from '@testing-library/dom'\n\nconst lastNameInput = screen.getByDisplayValue('Norris')\n```\n\n----------------------------------------\n\nTITLE: Providing Module-Level Dependencies in Angular Testing Library\nDESCRIPTION: Illustrates how to provide dependencies at the module level using the providers option in the render method.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nawait render(AppComponent, {\n  providers: [\n    CustomersService,\n    {\n      provide: MAX_CUSTOMERS_TOKEN,\n      useValue: 10,\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using ByTitle Query in Native JavaScript\nDESCRIPTION: Shows how to use the getByTitle method with the screen object in native JavaScript to query elements by their title.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bytitle.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {screen} from '@testing-library/dom'\n\nconst deleteElement = screen.getByTitle('Delete')\nconst closeElement = screen.getByTitle('Close')\n```\n\n----------------------------------------\n\nTITLE: Key Press and Hold Operations\nDESCRIPTION: Examples of holding keys, repeating keydown events, and releasing keys.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-keyboard.mdx#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nkeyboard('{a>}') // press a without releasing it\nkeyboard('{a>5}') // press a without releasing it and trigger 5 keydown\nkeyboard('{a>5/}') // press a for 5 keydown and then release it\n```\n\n----------------------------------------\n\nTITLE: Creating a Vue Component with v-model Input Binding\nDESCRIPTION: A Vue component that displays a user's name and provides an input field bound to the name using v-model. The component initializes with a default name 'Alice' and updates the display as the input changes.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/vue-testing-library/examples.mdx#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <p>Hi, my name is {{ user }}</p>\n\n    <label for=\"username\">Username:</label>\n    <input v-model=\"user\" id=\"username\" name=\"username\" />\n  </div>\n</template>\n\n<script>\n  export default {\n    data: () => ({\n      user: 'Alice',\n    }),\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Text Matching Patterns in React Testing Library\nDESCRIPTION: Examples of different text matching approaches including exact strings, regular expressions, and custom functions for finding elements.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/cheatsheet.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Matching a string:\ngetByText('Hello World') // full string match\ngetByText('llo Worl', {exact: false}) // substring match\ngetByText('hello world', {exact: false}) // ignore case\n\n// Matching a regex:\ngetByText(/World/) // substring match\ngetByText(/world/i) // substring match, ignore case\ngetByText(/^hello world$/i) // full string match, ignore case\ngetByText(/Hello W?oRlD/i) // advanced regex\n\n// Matching with a custom function:\ngetByText((content, element) => content.startsWith('Hello'))\n```\n\n----------------------------------------\n\nTITLE: Key Combination Simulation\nDESCRIPTION: Example of simulating key combinations using press and release operations.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-keyboard.mdx#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nkeyboard('{Shift>}A{/Shift}') // translates to: Shift(down), A, Shift(up)\n```\n\n----------------------------------------\n\nTITLE: Rendering a Component with Qwik Testing Library\nDESCRIPTION: Demonstrates how to use the render function to mount a component for testing, including custom options like baseElement, container, and wrapper.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/qwik-testing-library/api.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {render} from '@noma.to/qwik-testing-library'\nimport {MockProvider} from './MockProvider'\nimport {MyComponent} from './MyComponent'\n\nconst result = await render(<MyComponent />, {\n  baseElement: document.body,\n  container: document.createElement('host'),\n  wrapper: MockProvider,\n})\n```\n\n----------------------------------------\n\nTITLE: Text Matching Examples in Vue Testing Library\nDESCRIPTION: Examples of different text matching patterns including exact matches, substring matches, regex patterns, and custom function matchers\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/vue-testing-library/cheatsheet.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Matching a string:\ngetByText('Hello World') // full string match\ngetByText('llo Worl', {exact: false}) // substring match\ngetByText('hello world', {exact: false}) // ignore case\n\n// Matching a regex:\ngetByText(/World/) // substring match\ngetByText(/world/i) // substring match, ignore case\ngetByText(/^hello world$/i) // full string match, ignore case\ngetByText(/Hello W?oRlD/i) // advanced regex\n\n// Matching with a custom function:\ngetByText((content, element) => content.startsWith('Hello'))\n```\n\n----------------------------------------\n\nTITLE: Implementing Click Event in Testing Library\nDESCRIPTION: Demonstrates how to use the click() function to simulate a mouse click on a checkbox element. It shows the TypeScript definition, equivalent pointer API call, and a test example.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-convenience.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclick(element: Element): Promise<void>\n```\n\nLANGUAGE: javascript\nCODE:\n```\npointer([{target: element}, {keys: '[MouseLeft]', target: element}])\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntest('click', async () => {\n  const onChange = jest.fn()\n  const user = userEvent.setup()\n\n  render(<input type=\"checkbox\" onChange={onChange} />)\n\n  const checkbox = screen.getByRole('checkbox')\n\n  await user.click(checkbox)\n\n  expect(onChange).toHaveBeenCalledTimes(1)\n  expect(checkbox).toBeChecked()\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Focus Events in JavaScript Testing\nDESCRIPTION: Shows how to replace fireEvent.focus with direct element focus() method calls for more accurate focus event testing that also validates element focusability.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/guide-events.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n- fireEvent.focus(getByText('focus me'));\n+ getByText('focus me').focus();\n```\n\n----------------------------------------\n\nTITLE: Rendering Components with Vue Testing Library\nDESCRIPTION: The render function is the primary method for rendering Vue components in tests. It returns an object with helper methods and DOM Testing Library queries.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/vue-testing-library/api.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction render(Component, options) {\n  return {\n    ...DOMTestingLibraryQueries,\n    container,\n    baseElement,\n    debug(element),\n    unmount,\n    html,\n    emitted,\n    rerender(props),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cleanup Function Implementation\nDESCRIPTION: Shows how to use the cleanup function to destroy components and remove elements after tests.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/api.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render, cleanup} from '@testing-library/svelte'\n\n// Default: runs after each test\nafterEach(() => {\n  cleanup()\n})\n\nrender(YourComponent)\n\n// Called manually for more control\ncleanup()\n```\n\n----------------------------------------\n\nTITLE: Using Debug Method from render Result\nDESCRIPTION: Example showing how to use the debug method from render result to log the rendered DOM for debugging purposes.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/api.mdx#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {render} from '@testing-library/react'\n\nconst HelloWorld = () => <h1>Hello World</h1>\nconst {debug} = render(<HelloWorld />)\ndebug()\n// <div>\n//   <h1>Hello World</h1>\n// </div>\n// you can also pass an element: debug(getByTestId('messages'))\n// and you can pass all the same arguments to debug as you can\n// to prettyDOM:\n// const maxLengthToPrint = 10000\n// debug(getByTestId('messages'), maxLengthToPrint, {highlight: false})\n```\n\n----------------------------------------\n\nTITLE: TextMatch Successful Query Examples\nDESCRIPTION: Demonstrates various successful text matching patterns using strings, regex, and custom functions.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/about.mdx#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Matching a string:\nscreen.getByText('Hello World') // full string match\nscreen.getByText('llo Worl', {exact: false}) // substring match\nscreen.getByText('hello world', {exact: false}) // ignore case\n\n// Matching a regex:\nscreen.getByText(/World/) // substring match\nscreen.getByText(/world/i) // substring match, ignore case\nscreen.getByText(/^hello world$/i) // full string match, ignore case\nscreen.getByText(/Hello W?oRlD/i) // substring match, ignore case, searches for \"hello world\" or \"hello orld\"\n\n// Matching with a custom function:\nscreen.getByText((content, element) => content.startsWith('Hello'))\n```\n\n----------------------------------------\n\nTITLE: Using Query Functions from Render Result\nDESCRIPTION: Demonstrates how to destructure and use query functions that are returned from the render method. These queries are pre-bound to the rendered component.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/marko-testing-library/api.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst {getByLabelText, queryAllByTestId} = await render(MyTemplate)\n```\n\n----------------------------------------\n\nTITLE: Pointer API Function Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the pointer function, which accepts a PointerInput parameter and returns a Promise that resolves to void.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-pointer.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npointer(input: PointerInput): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Basic render Usage in React Testing Library\nDESCRIPTION: Simple example showing how to import and use the render function with a basic React element.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/api.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render} from '@testing-library/react'\n\nrender(<div />)\n```\n\n----------------------------------------\n\nTITLE: Testing Svelte Contexts\nDESCRIPTION: Illustrates testing components that use Svelte contexts by providing context values during rendering.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/example.mdx#2025-04-12_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import {setContext} from 'svelte'\n  import {writable} from 'svelte/stores'\n\n  setContext('messages', writable([]))\n</script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import {getContext} from 'svelte'\n\n  export let label\n\n  const messages = getContext('messages')\n</script>\n\n<div role=\"status\" aria-label=\"{label}\">\n  {#each $messages as message (message.id)}\n  <p>{message.text}</p>\n  <hr />\n  {/each}\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render, screen} from '@testing-library/svelte'\nimport {readable} from 'svelte/store'\nimport {expect, test} from 'vitest'\n\nimport Notifications from './notifications.svelte'\n\ntest('notifications with messages from context', async () => {\n  const messages = readable([\n    {id: 'abc', text: 'hello'},\n    {id: 'def', text: 'world'},\n  ])\n\n  render(Notifications, {\n    context: new Map([['messages', messages]]),\n    props: {label: 'Notifications'},\n  })\n\n  const status = screen.getByRole('status', {name: 'Notifications'})\n\n  expect(status).toHaveTextContent('hello world')\n})\n```\n\n----------------------------------------\n\nTITLE: Using getAllBy Queries with nth Function\nDESCRIPTION: Shows how to use getAllBy queries with the nth function to access specific elements from multiple matches.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/nightwatch-testing-library/intro.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync 'getAllByText - regex'(browser) {\n    const { getAllByText } = getQueriesFrom(browser);\n    const chans = await getAllByText(/Jackie Chan/)\n\n\n    browser.expect.elements(chans).count.to.equal(2)\n\n    const firstChan = chans.nth(0);\n    const secondChan = chans.nth(1);\n\n\n    browser.click(chans.nth(0));\n    browser.click(chans.nth(1));\n\n    browser.expect.element(secondChan).text.to.equal('Jackie Kicked');\n    browser.expect.element(firstChan).text.to.equal('Jackie Kicked');\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using getByTestId in Angular Testing\nDESCRIPTION: This Angular example shows how to use the getByTestId function from the @testing-library/angular package to select an element by its data-testid attribute after rendering a component.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bytestid.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {render, screen} from '@testing-library/angular'\n\nawait render(MyComponent)\nconst element = screen.getByTestId('custom-element')\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes in Angular Testing Library\nDESCRIPTION: Shows how to set up route configuration for testing using the routes option in the render method.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nawait render(AppComponent, {\n  declarations: [ChildComponent],\n  routes: [\n    {\n      path: '',\n      children: [\n        {\n          path: 'child/:id',\n          component: ChildComponent,\n        },\n      ],\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Test Cleanup\nDESCRIPTION: Shows how to disable the automatic cleanup that runs after each test by importing a special module, which can be useful for specialized testing scenarios.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/marko-testing-library/api.mdx#2025-04-12_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@marko/testing-library/dont-cleanup-after-each'\n```\n\n----------------------------------------\n\nTITLE: Re-rendering a Component with New Input\nDESCRIPTION: Demonstrates how to update a component's input data after initial render using the rerender function, which simulates a parent component passing new props.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/marko-testing-library/api.mdx#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render} from '@marko/testing-library'\nimport Greeting from './greeting.marko'\n\nconst {rerender, debug} = await render(Greeting, {name: 'World'})\n\n// re-render the same component with different props\nawait rerender({name: 'Marko'})\n\ndebug()\n// <h1>Hello Marko</h1>\n```\n\n----------------------------------------\n\nTITLE: Querying Heading Elements with Level Option in Testing Library\nDESCRIPTION: Example HTML structure with various heading elements that can be queried using the level option with getByRole. The example includes both semantic HTML headings and elements with explicit aria-level attributes.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/byrole.mdx#2025-04-12_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <section>\n    <h1>Heading Level One</h1>\n    <h2>First Heading Level Two</h2>\n    <h3>Heading Level Three</h3>\n    <div role=\"heading\" aria-level=\"2\">Second Heading Level Two</div>\n  </section>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Rendering Angular Component by Type\nDESCRIPTION: Demonstrates how to render an Angular component using its type with the render method.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait render(AppComponent)\n```\n\n----------------------------------------\n\nTITLE: Configuring Testing Library for Cypress\nDESCRIPTION: This snippet shows how to configure Testing Library for use with Cypress. It sets a custom test ID attribute.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-configuration.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {configure} from '@testing-library/cypress'\n\nconfigure({testIdAttribute: 'data-my-test-id'})\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch Testing Library\nDESCRIPTION: Example of how to configure the testIdAttribute using the configure function.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/nightwatch-testing-library/intro.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {configure} = require('@testing-library/nightwatch')\n\nconfigure({testIdAttribute: 'data-automation-id'})\n```\n\n----------------------------------------\n\nTITLE: Basic Component Rendering with @testing-library/svelte\nDESCRIPTION: Demonstrates the basic usage of the render function to mount a Svelte component for testing.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/api.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render} from '@testing-library/svelte'\nimport MyComponent from './MyComponent.svelte'\n\nconst result = render(MyComponent, componentOptions, renderOptions)\n```\n\n----------------------------------------\n\nTITLE: Using ByTitle Query in React Testing\nDESCRIPTION: Demonstrates how to use the getByTitle method with the screen object in React testing, including rendering a component before querying.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bytitle.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, screen} from '@testing-library/react'\n\nrender(<MyComponent />)\nconst deleteElement = screen.getByTitle('Delete')\nconst closeElement = screen.getByTitle('Close')\n```\n\n----------------------------------------\n\nTITLE: Testing Element Appearance with waitFor in React Testing Library\nDESCRIPTION: Shows how to use the waitFor utility to wait for an element to appear and assert its presence in the document. The function retries the assertion until it passes or times out.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/guide-disappearance.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ntest('movie title appears', async () => {\n  // element is initially not present...\n\n  // wait for appearance inside an assertion\n  await waitFor(() => {\n    expect(getByText('the lion king')).toBeInTheDocument()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Svelte Two-way Data Binding\nDESCRIPTION: Shows how to test two-way data binding using a wrapper component and writable store.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/example.mdx#2025-04-12_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  export let value = ''\n</script>\n\n<input type=\"text\" bind:value=\"{value}\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import TextInput from './text-input.svelte'\n\n  export let valueStore\n</script>\n\n<TextInput bind:value=\"{$valueStore}\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render, screen} from '@testing-library/svelte'\nimport userEvent from '@testing-library/user-event'\nimport {get, writable} from 'svelte/store'\nimport {expect, test} from 'vitest'\n\nimport TextInputTest from './text-input.test.svelte'\n\ntest('text input with value binding', async () => {\n  const user = userEvent.setup()\n  const valueStore = writable('')\n\n  render(TextInputTest, {valueStore})\n\n  const input = screen.getByRole('textbox')\n  await user.type(input, 'hello world')\n\n  expect(get(valueStore)).toBe('hello world')\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Mouse Button Press Example\nDESCRIPTION: Example of pressing a mouse button using the pointer API, which defines a key to be pressed.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-pointer.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npointer({keys: '[MouseLeft]'})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for selectOptions() and deselectOptions() Methods\nDESCRIPTION: Type definitions for selectOptions() and deselectOptions() methods which allow selecting or deselecting options in select elements or listboxes.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-utility.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nselectOptions(\n  element: Element,\n  values: HTMLElement | HTMLElement[] | string[] | string,\n): Promise<void>\ndeselectOptions(\n  element: Element,\n  values: HTMLElement | HTMLElement[] | string[] | string,\n): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Testing Library for Angular\nDESCRIPTION: This snippet demonstrates the configuration of Testing Library for Angular applications. It sets a custom test ID attribute within the DOM configuration.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-configuration.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {configure} from '@testing-library/angular'\n\nconfigure({\n  dom: {\n    testIdAttribute: 'data-my-test-id',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Escaping Key Descriptors\nDESCRIPTION: Example of escaping special characters in key descriptors using backslash.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-keyboard.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nkeyboard('{\\}}') // translates to: }\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for type() Method\nDESCRIPTION: Type definition for the type() method which simulates typing text into an input element. It includes options for skipping clicks, controlling selection, and auto-closing.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-utility.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype(\n  element: Element,\n  text: KeyboardInput,\n  options?: {\n    skipClick?: boolean\n    skipAutoClose?: boolean\n    initialSelectionStart?: number\n    initialSelectionEnd?: number\n  }\n): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Selecting List Items by Role and Index\nDESCRIPTION: This snippet demonstrates how to use the getAllByRole method to query all elements with a specific ARIA role (listitem) and then access a specific item by index. This is an alternative to using CSS selectors.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/faq.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst items = [\n  /* your items */\n]\nconst {container} = render(/* however you render this stuff */)\nconst thirdItem = getAllByRole(container, 'listitem')[2]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Puppeteer Testing Library\nDESCRIPTION: Demonstrates the standard usage pattern for pptr-testing-library, importing necessary functions, creating a browser instance, and using query methods to interact with elements on the page.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/pptr-testing-library/intro.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst puppeteer = require('puppeteer')\nconst {getDocument, queries, waitFor} = require('pptr-testing-library')\n\nconst {getByTestId, getByLabelText} = queries\n\nconst browser = await puppeteer.launch()\nconst page = await browser.newPage()\n\n// Grab ElementHandle for document\nconst $document = await getDocument(page)\n// Your favorite query methods are available\nconst $form = await getByTestId($document, 'my-form')\n// returned elements are Puppeteer ElementHandles too!\nconst $email = await getByLabelText($form, 'Email')\n// interact with puppeteer like usual\nawait $email.type('pptr@example.com')\n// waiting works too!\nawait waitFor(() => getByText('Loading...'))\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest for Qwik Testing\nDESCRIPTION: Configuration file for Vitest that merges with the existing Vite config and adds necessary settings for Qwik Testing Library, including jsdom environment and build settings for treating the project as a Qwik library.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/qwik-testing-library/setup.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport {defineConfig, mergeConfig} from 'vitest/config'\nimport viteConfig from './vite.config'\n\nexport default defineConfig(configEnv =>\n  mergeConfig(\n    viteConfig(configEnv),\n    defineConfig({\n      // qwik-testing-library needs to consider your project as a Qwik lib\n      // if it's already a Qwik lib, you can remove this section\n      build: {\n        target: 'es2020',\n        lib: {\n          entry: './src/index.ts',\n          formats: ['es', 'cjs'],\n          fileName: (format, entryName) =>\n            `${entryName}.qwik.${format === 'es' ? 'mjs' : 'cjs'}`,\n        },\n      },\n      // configure your test environment\n      test: {\n        environment: 'jsdom',\n        setupFiles: ['./vitest.setup.ts'],\n        globals: true,\n      },\n    }),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Testing React Components with bs-react-testing-library in ReasonML\nDESCRIPTION: This example demonstrates how to render and test a React component using bs-react-testing-library. The test renders a simple div with a heading, and uses snapshot testing to verify the output. This pattern is useful for component rendering tests.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/bs-react-testing-library/examples.mdx#2025-04-12_snippet_0\n\nLANGUAGE: reason\nCODE:\n```\nopen Jest;\nopen Expect;\nopen ReactTestingLibrary;\n\ntest(\"Component renders\", () =>\n  <div style=ReactDOMRe.Style.make(~color=\"rebeccapurple\", ())>\n    <h1> {ReasonReact.string(\"Heading\")} </h1>\n  </div>\n  |> render\n  |> container\n  |> expect\n  |> toMatchSnapshot\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Defer Block States in Angular Testing Library\nDESCRIPTION: Demonstrates how to set the initial state of deferrable blocks using the deferBlockStates option in the render method.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait render(FixtureComponent, {\n  deferBlockStates: DeferBlockState.Loading,\n})\n```\n\n----------------------------------------\n\nTITLE: Unmounting Components in Qwik Testing\nDESCRIPTION: Demonstrates how to use the unmount function to remove and destroy a rendered Qwik component.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/qwik-testing-library/api.mdx#2025-04-12_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst {unmount} = await render(<MyComponent />)\n\nunmount()\n```\n\n----------------------------------------\n\nTITLE: Importing Cypress Testing Library commands in JavaScript\nDESCRIPTION: Code snippet to import Cypress Testing Library commands in the Cypress support file.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/cypress-testing-library/intro.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@testing-library/cypress/add-commands'\n```\n\n----------------------------------------\n\nTITLE: Using keyboard() Function with Special Characters\nDESCRIPTION: Shows how to use special characters like brackets with userEvent.keyboard() by doubling them to escape their special meaning.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nuserEvent.keyboard('{{a[[') // translates to: {, a, [\n```\n\n----------------------------------------\n\nTITLE: Using Browser Commands Added by setupBrowser\nDESCRIPTION: Shows how setupBrowser adds query commands directly to the browser object, scoped to document.body. This allows for more concise test code without destructuring queries.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/webdriverio-testing-library/intro.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('adds queries as browser commands', async () => {\n  setupBrowser(browser)\n\n  expect(await browser.getByText('Page Heading')).toBeDefined()\n})\n\nit('adds queries as element commands scoped to element', async () => {\n  setupBrowser(browser)\n\n  const nested = await browser.$('*[data-testid=\"nested\"]')\n  const button = await nested.getByText('Button Text')\n  await button.click()\n\n  expect(await button.getText()).toEqual('Button Clicked')\n})\n```\n\n----------------------------------------\n\nTITLE: Select Element with Options in HTML\nDESCRIPTION: Example HTML structure of a select element with multiple options, where the 'Alaska' option is selected by default. This setup would be used to demonstrate getByDisplayValue with select elements.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bydisplayvalue.mdx#2025-04-12_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<select>\n  <option value=\"\">State</option>\n  <option value=\"AL\">Alabama</option>\n  <option selected value=\"AK\">Alaska</option>\n  <option value=\"AZ\">Arizona</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Setting Up React Intl Polyfills for Legacy Node Versions\nDESCRIPTION: Configuration for React Intl polyfills in Node versions prior to 13, including locale data loading and Intl object setup.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-react-intl.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport IntlPolyfill from 'intl'\nimport 'intl/locale-data/jsonp/pt'\n\nexport const setupTests = () => {\n  if (global.Intl) {\n    Intl.NumberFormat = IntlPolyfill.NumberFormat\n    Intl.DateTimeFormat = IntlPolyfill.DateTimeFormat\n  } else {\n    global.Intl = IntlPolyfill\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using getByDisplayValue with React Testing Library\nDESCRIPTION: Example of using the getByDisplayValue query with React Testing Library to find an input element with the value 'Norris' after rendering a React component.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bydisplayvalue.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, screen} from '@testing-library/react'\n\nrender(<MyComponent />)\nconst lastNameInput = screen.getByDisplayValue('Norris')\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Change Detection for Events in Angular Testing Library\nDESCRIPTION: Illustrates how to disable automatic change detection for events using the autoDetectChanges option in the render method.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait render(AppComponent, {\n  autoDetectChanges: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Directives with renderDirective Function\nDESCRIPTION: Example showing how to test a custom directive using the renderDirective function. It demonstrates checking the initial fragment state and updating the directive argument.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/solid-testing-library/api.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst {asFragment, setArg} = renderDirective(myDirective)\nexpect(asFragment()).toBe('<div data-directive=\"works\"></div>')\nsetArg('perfect')\nexpect(asFragment()).toBe('<div data-directive=\"perfect\"></div>')\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Types for Jest-DOM\nDESCRIPTION: TypeScript configuration to include Jest-DOM type definitions, making TypeScript aware of the additional matchers provided by Jest-DOM.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/setup.mdx#2025-04-12_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n\t\"types\": [\"@testing-library/jest-dom\"],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ByPlaceholderText Query in Angular\nDESCRIPTION: Shows how to use the getByPlaceholderText query in an Angular testing environment, including rendering a component asynchronously and finding an input by its placeholder.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/byplaceholdertext.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {render, screen} from '@testing-library/angular'\n\nawait render(MyComponent)\nconst inputNode = screen.getByPlaceholderText('Username')\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for renderDirective Function\nDESCRIPTION: Type definition for the renderDirective function that allows testing custom directives in Solid.js. It provides options for initial value and target element specification.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/solid-testing-library/api.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nfunction renderDirective<\n  Arg extends any,\n  Elem extends HTMLElement\n>(\n  directive: (ref: Elem, arg: Accessor<Arg>) => void,\n  options?: {\n    ...renderOptions,\n    initialValue: Arg,\n    targetElement:\n      | Lowercase<Elem['nodeName']>\n      | Elem\n      | (() => Elem)\n  }\n): Result & { arg: Accessor<Arg>, setArg: Setter<Arg> };\n```\n\n----------------------------------------\n\nTITLE: Simulating Paste Events with Testing Library's user-event\nDESCRIPTION: Shows how to use the paste method to simulate a user pasting text into an input field and verify the result. This is useful for testing clipboard-related functionality.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ntest('should paste text in input', () => {\n  render(<MyInput />)\n\n  const text = 'Hello, world!'\n  const element = getByRole('textbox', {name: /paste your greeting/i})\n  userEvent.paste(element, text)\n  expect(element).toHaveValue(text)\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Events with FireEvent in bs-dom-testing-library\nDESCRIPTION: This example demonstrates how to use the FireEvent module from bs-dom-testing-library to simulate user interactions. It shows how to trigger click and change events on DOM elements and test that event handlers are called correctly.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/bs-react-testing-library/examples.mdx#2025-04-12_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nopen Jest;\nopen DomTestingLibrary;\nopen Expect;\n\ndescribe(\"FireEvent\", () => {\n  test(\"click works\", () => {\n    open Webapi.Dom;\n\n    let node = document |> Document.createElement(\"button\");\n    let spy = JestJs.inferred_fn();\n    let fn = spy |> MockJs.fn;\n    let clickHandler = _ => [@bs] fn(\"clicked!\") |> ignore;\n\n    node |> Element.addEventListener(\"click\", clickHandler);\n\n    FireEvent.click(node);\n\n    expect(spy |> MockJs.calls) |> toEqual([|\"clicked!\"|]);\n  });\n\n  test(\"change works\", () => {\n    open Webapi.Dom;\n\n    let node = document |> Document.createElement(\"input\");\n    let spy = JestJs.inferred_fn();\n    let fn = spy |> MockJs.fn;\n    let changeHandler = _ => [@bs] fn(\"changed!\") |> ignore;\n    let event = Event.makeWithOptions(\"change\", { \"target\": { \"value\": \"1\" } });\n\n    node |> Element.addEventListener(\"change\", changeHandler);\n\n    FireEvent.change(node, event);\n\n    expect(spy |> MockJs.calls) |> toEqual([|\"changed!\"|]);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Elements with Within - React Testing\nDESCRIPTION: Shows how to use within function in React Testing Library to query text within a rendered component. Combines render and within functions to locate nested content.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-within.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, within} from '@testing-library/react'\n\nconst {getByText} = render(<MyComponent />)\nconst messages = getByText('messages')\nconst helloMessage = within(messages).getByText('hello')\n```\n\n----------------------------------------\n\nTITLE: Creating Required Entry Point for Qwik Testing Library\nDESCRIPTION: Creation of a placeholder index.ts file that serves as an entry point for @noma.to/qwik-testing-library to properly run tests.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/qwik-testing-library/setup.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n/**\n * DO NOT DELETE THIS FILE\n *\n * This entrypoint is needed by @noma.to/qwik-testing-library to run your tests\n */\n```\n\n----------------------------------------\n\nTITLE: HTML Example with data-testid Attribute\nDESCRIPTION: This HTML snippet demonstrates how to use the data-testid attribute on a div element, which can be targeted by the ByTestId query.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bytestid.mdx#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div data-testid=\"custom-element\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Testing Library for Vue 3\nDESCRIPTION: NPM installation command for the latest version of Vue Testing Library, which is compatible with Vue 3 applications.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/vue-testing-library/intro.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/vue\n```\n\n----------------------------------------\n\nTITLE: Using setupBrowser Function with Async/Await in JavaScript\nDESCRIPTION: Demonstrates how to use the setupBrowser function to add testing-library queries to a WebdriverIO browser instance. This example shows using getByText to find and interact with a button element.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/webdriverio-testing-library/intro.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {setupBrowser} from '@testing-library/webdriverio'\n\nit('can click button', async () => {\n  const {getByText} = setupBrowser(browser)\n\n  const button = await getByText('Button Text')\n  await button.click()\n\n  expect(await button.getText()).toEqual('Button Clicked')\n})\n```\n\n----------------------------------------\n\nTITLE: Using fireEvent for Async DOM Updates\nDESCRIPTION: Shows how to use the asynchronous fireEvent helper to trigger user events and ensure that DOM updates have completed before making assertions.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/marko-testing-library/api.mdx#2025-04-12_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait fireEvent.click(getByText('Click me'))\n```\n\n----------------------------------------\n\nTITLE: Using keyboard() Function with KeyboardEvent.key Format\nDESCRIPTION: Demonstrates using userEvent.keyboard() with KeyboardEvent.key format to specify individual key presses including modifier keys.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nuserEvent.keyboard('{Shift}{f}{o}{o}') // translates to: Shift, f, o, o\n```\n\n----------------------------------------\n\nTITLE: Basic React Testing Library Test Structure\nDESCRIPTION: The basic structure of a test using React Testing Library, which follows the same pattern as in Jest or Enzyme.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/migrate-from-enzyme.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\ntest('test title', () => {\n  // Your tests come here...\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Rendering of a Marko Template with render() Function\nDESCRIPTION: Demonstrates the basic usage of the render function to mount a Marko template in the DOM. This is the simplest form of rendering a component for testing.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/marko-testing-library/api.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction render(\n  template, // A Marko template to render\n  input, // Input for the above template\n  options // You won't often use this, expand below for docs on options\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Marko Testing Library using npm or yarn\nDESCRIPTION: Command to install the Marko Testing Library as a development dependency in your project. The snippet supports both npm and yarn package managers.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/marko-testing-library/intro.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @marko/testing-library\n```\n\n----------------------------------------\n\nTITLE: Setting Textarea Value in HTML/JavaScript\nDESCRIPTION: Example showing how to set a value for a textarea element with the ID 'messageTextArea' using JavaScript. This sets up the DOM state that would then be tested with the ByDisplayValue queries.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bydisplayvalue.mdx#2025-04-12_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<textarea id=\"messageTextArea\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById('messageTextArea').value = 'Hello World'\n```\n\n----------------------------------------\n\nTITLE: Installing @testing-library/user-event via npm or yarn\nDESCRIPTION: This command installs @testing-library/user-event as a dev dependency in your project. It's essential for simulating user events in testing scenarios.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/install.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/user-event\n```\n\n----------------------------------------\n\nTITLE: Testing a Greeting Component with Assertions\nDESCRIPTION: Complete test example showing how to render a Marko component with input, query the rendered output, and make assertions using Jest matchers including snapshot testing.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/marko-testing-library/api.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render, screen} from '@marko/testing-library'\nimport Greeting from './greeting.marko'\n\ntest('renders a message', async () => {\n  const {container} = await render(Greeting, {name: 'Marko'})\n  expect(screen.getByText(/Marko/)).toBeInTheDocument()\n  expect(container.firstChild).toMatchInlineSnapshot(`\n    <h1>Hello, Marko!</h1>\n  `)\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Error Boundaries in React Components\nDESCRIPTION: Shows how to test React error boundaries by verifying that fallback UI is displayed when child components throw errors.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/faq.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {render, screen} from '@testing-library/react'\n\nclass ErrorBoundary extends React.Component {\n  state = {error: null}\n  static getDerivedStateFromError(error) {\n    return {error}\n  }\n  render() {\n    const {error} = this.state\n    if (error) {\n      return <div>Something went wrong</div>\n    }\n    return this.props.children\n  }\n}\n\ntest('error boundary catches error', () => {\n  const {container} = render(\n    <ErrorBoundary>\n      <BrokenComponent />\n    </ErrorBoundary>,\n  )\n  expect(container.textContent).toEqual('Something went wrong.')\n})\n```\n\n----------------------------------------\n\nTITLE: Installing jest-native for React Native Testing Library\nDESCRIPTION: Command to install the deprecated jest-native package using npm or yarn. This package provided custom element matchers for Jest when testing React Native applications.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/ecosystem-jest-native.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/jest-native\n```\n\n----------------------------------------\n\nTITLE: Testing a React component with bs-jest-dom in ReasonML\nDESCRIPTION: Example of using bs-jest-dom to test a React component in ReasonML. This snippet demonstrates how to render a component, select an element, and use a custom matcher from bs-jest-dom.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/ecosystem-bs-jest-dom.mdx#2025-04-12_snippet_2\n\nLANGUAGE: reason\nCODE:\n```\nopen Jest;\nopen JestDom;\nopen ReactTestingLibrary;\n\nmodule Heading = {\n  let component = ReasonReact.statelessComponent(\"Heading\");\n\n  let make = (~text, _children) => {\n    ...component,\n    render: _self =>\n      <h1> {ReasonReact.string(text)} </h1>,\n  };\n};\n\ntest(\"renders with text\", () =>\n  <Heading text=\"Hello, World!\" />\n  |> render\n  |> getByText(~matcher=`Str(\"Hello, World!\"))\n  |> expect\n  |> toBeInTheDocument\n);\n```\n\n----------------------------------------\n\nTITLE: Testing Component Rendering with React Testing Library\nDESCRIPTION: The equivalent test for checking component output using React Testing Library, focusing on roles and content rather than implementation details.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/migrate-from-enzyme.mdx#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\ntest('has correct welcome text', () => {\n  render(<Welcome firstName=\"John\" lastName=\"Doe\" />)\n  expect(screen.getByRole('heading')).toHaveTextContent('Welcome, John Doe')\n})\n```\n\n----------------------------------------\n\nTITLE: ByPlaceholderText Query API Signature in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the getByPlaceholderText query function. It includes parameters for the container, text to match, and options for exact matching and normalization.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/byplaceholdertext.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetByPlaceholderText(\n  // If you're using `screen`, then skip the container argument:\n  container: HTMLElement,\n  text: TextMatch,\n  options?: {\n    exact?: boolean = true,\n    normalizer?: NormalizerFn,\n  }): HTMLElement\n```\n\n----------------------------------------\n\nTITLE: Using Special Characters in Testing Library's user-event\nDESCRIPTION: Demonstrates how to use special character sequences with the type method to simulate keyboard actions such as arrow keys, backspace, and other special keys when testing input interactions.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState} from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent, {specialChars} from '@testing-library/user-event'\n\nconst InputElement = () => {\n  const [currentValue, setCurrentValue] = useState('This is a bad example')\n  return (\n    <div>\n      <label htmlFor=\"my-input\">Example:</label>\n      <input\n        id=\"my-input\"\n        type=\"text\"\n        value={currentValue}\n        onChange={e => setCurrentValue(e.target.value)}\n      />\n    </div>\n  )\n}\n\ntest('delete characters within the selectedRange', () => {\n  render(<InputElement />)\n  const input = screen.getByLabelText(/example/i)\n  input.setSelectionRange(10, 13)\n  userEvent.type(input, `${specialChars.backspace}good`)\n\n  expect(input).toHaveValue('This is a good example')\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Modules in Angular Testing Library\nDESCRIPTION: Shows how to import modules needed for rendering a component using the imports option in the render method.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nawait render(AppComponent, {\n  imports: [AppSharedModule, MaterialModule],\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Angular Attributes in Angular Testing Library\nDESCRIPTION: Demonstrates how to remove Angular-specific attributes from the rendered component using the removeAngularAttributes option.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nawait render(AppComponent, {\n  removeAngularAttributes: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Svelte Testing Library via npm or yarn\nDESCRIPTION: Command to install the Svelte Testing Library as a development dependency in your project. The library provides lightweight utilities for testing Svelte components in a way that avoids implementation details.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/intro.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/svelte\n```\n\n----------------------------------------\n\nTITLE: Extending TypeScript Interfaces for WebdriverIO\nDESCRIPTION: Shows how to extend WebdriverIO TypeScript interfaces to provide proper type definitions for the testing library queries added to Browser and Element objects.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/webdriverio-testing-library/intro.mdx#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {WebdriverIOQueries} from '@testing-library/webdriverio'\n\ndeclare global {\n  namespace WebdriverIO {\n    interface Browser extends WebdriverIOQueries {}\n    interface Element extends WebdriverIOQueries {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing jasmine-dom for Testing Library with npm or yarn\nDESCRIPTION: Command to install the jasmine-dom package as a development dependency using either npm or yarn package managers.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/ecosystem-jasmine-dom.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/jasmine-dom\n```\n\n----------------------------------------\n\nTITLE: Using ByText Query in Native JavaScript\nDESCRIPTION: This example shows how to use the getByText function from the @testing-library/dom package in native JavaScript. It demonstrates querying for an element containing the text 'about' (case-insensitive).\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bytext.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {screen} from '@testing-library/dom'\n\nconst aboutAnchorNode = screen.getByText(/about/i)\n```\n\n----------------------------------------\n\nTITLE: Testing Routes with Location Option in Solid.js\nDESCRIPTION: Example of using the location option in the render function to test components with routing. This creates an in-memory router pointed at the specified location and requires asynchronous queries for testing.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/solid-testing-library/api.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nit('uses params', async () => {\n  const App = () => (\n    <>\n      <Route path=\"/ids/:id\" component={() => <p>Id: {useParams()?.id}</p>} />\n      <Route path=\"/\" component={() => <p>Start</p>} />\n    </>\n  )\n  const {findByText} = render(() => <App />, {location: 'ids/1234'})\n  expect(await findByText('Id: 1234')).not.toBeFalsy()\n})\n```\n\n----------------------------------------\n\nTITLE: Installing WebdriverIO Testing Library with NPM or Yarn\nDESCRIPTION: Command to install the @testing-library/webdriverio package as a development dependency. This should be run after setting up the WebdriverIO configuration.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/webdriverio-testing-library/intro.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/webdriverio\n```\n\n----------------------------------------\n\nTITLE: Setting Component Inputs in Angular Testing Library\nDESCRIPTION: Demonstrates how to set @Input properties of a component using the inputs option in the render method.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait render(AppComponent, {\n  inputs: {\n    counterValue: 10,\n    // explicitly define aliases using `aliasedInput`\n    ...aliasedInput('someAlias', 'someValue'),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using getByRole with Level Option in JavaScript\nDESCRIPTION: JavaScript examples showing how to query heading elements by their level using getByRole. The first example retrieves a level 1 heading, while the second example shows retrieving all level 2 headings.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/byrole.mdx#2025-04-12_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ngetByRole('heading', {level: 1})\n// <h1>Heading Level One</h1>\n\ngetAllByRole('heading', {level: 2})\n// [\n//   <h2>First Heading Level Two</h2>,\n//   <div role=\"heading\" aria-level=\"2\">Second Heading Level Two</div>\n// ]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Nightwatch Testing Library Queries\nDESCRIPTION: Demonstrates basic usage of getByLabelText and getByAltText queries in Nightwatch tests. Shows how to get elements and perform assertions.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/nightwatch-testing-library/intro.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {getQueriesFrom} = require('@testing-library/nightwatch')\n\nmodule.exports = {\n  beforeEach(browser, done) {\n    browser.url('http://localhost:13370')\n    done()\n  },\n\n  async getByLabelText(browser) {\n    const {getByLabelText} = getQueriesFrom(browser)\n\n    const input = await getByLabelText('Label Text')\n    browser.setValue(input, '@TL FTW')\n\n    browser.expect.element(input).value.to.equal('@TL FTW')\n  },\n\n  async getByAltText(browser) {\n    const {getByAltText} = getQueriesFrom(browser)\n    const image = await getByAltText('Image Alt Text')\n\n    browser.click(image)\n    browser.expect\n      .element(image)\n      .to.have.css('border')\n      .which.equals('5px solid rgb(255, 0, 0)')\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Queries in Angular Testing Library\nDESCRIPTION: Demonstrates how to override default queries or add custom queries using the queries option in the render method.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nawait render(AppComponent, {\n  queries: {...queries, ...customQueries},\n})\n```\n\n----------------------------------------\n\nTITLE: Deselecting Options in Dropdown with Testing Library's user-event\nDESCRIPTION: Demonstrates the deselectOptions method for removing the selection of specific options in a multiple select element, showing both single and multiple deselection.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\n\ntest('deselectOptions', () => {\n  render(\n    <select multiple>\n      <option value=\"1\">A</option>\n      <option value=\"2\">B</option>\n      <option value=\"3\">C</option>\n    </select>,\n  )\n\n  userEvent.selectOptions(screen.getByRole('listbox'), '2')\n  expect(screen.getByText('B').selected).toBe(true)\n  userEvent.deselectOptions(screen.getByRole('listbox'), '2')\n  expect(screen.getByText('B').selected).toBe(false)\n  // can do multiple at once as well:\n  // userEvent.deselectOptions(screen.getByRole('listbox'), ['1', '2'])\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Preact Testing Library via npm or yarn\nDESCRIPTION: Command to install the Preact Testing Library as a dev dependency in your project. This snippet demonstrates the installation process using npm, with an option to use yarn.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/preact-testing-library/intro.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/preact\n```\n\n----------------------------------------\n\nTITLE: Setting Defer Block Behavior in Angular Testing Library\nDESCRIPTION: Shows how to set the defer blocks behavior using the deferBlockBehavior option in the render method.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait render(AppComponent, {\n  deferBlockBehavior: DeferBlockBehavior.Playthrough,\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Jest Import for Custom Test Utils in React Native\nDESCRIPTION: This diff shows how to update the import statement in a test file to use the custom test utils without a relative path after configuring Jest moduleDirectories.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-native-testing-library/setup.mdx#2025-04-12_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- import { render, fireEvent } from '../test-utils';\n+ import { render, fireEvent } from 'test-utils';\n```\n\n----------------------------------------\n\nTITLE: Extending TypeScript Interfaces for Chainable Queries\nDESCRIPTION: Shows how to extend WebdriverIO TypeScript interfaces to support chainable queries, including extending the ChainablePromiseElement interface.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/webdriverio-testing-library/intro.mdx#2025-04-12_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {WebdriverIOQueriesChainable, WebdriverIOQueries} from '../../src'\n\ndeclare global {\n  namespace WebdriverIO {\n    interface Browser\n      extends WebdriverIOQueries,\n        WebdriverIOQueriesChainable<Browser> {}\n    interface Element\n      extends WebdriverIOQueries,\n        WebdriverIOQueriesChainable<Element> {}\n  }\n}\n\ndeclare module 'webdriverio' {\n  interface ChainablePromiseElement<T extends WebdriverIO.Element | undefined>\n    extends WebdriverIOQueriesChainable<T> {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Qwik Testing Library Dependencies\nDESCRIPTION: Command to install the core Qwik Testing Library dependencies including @noma.to/qwik-testing-library and @testing-library/dom, which are required for testing Qwik components.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/qwik-testing-library/setup.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @noma.to/qwik-testing-library @testing-library/dom\n```\n\n----------------------------------------\n\nTITLE: Using getByText with bs-dom-testing-library in ReasonML\nDESCRIPTION: This example shows how to use the getByText selector function from bs-dom-testing-library with different matcher types (string, regex, and function). It demonstrates setting up a DOM element for testing and selecting elements based on their text content.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/bs-react-testing-library/examples.mdx#2025-04-12_snippet_1\n\nLANGUAGE: reason\nCODE:\n```\nopen Jest;\nopen DomTestingLibrary;\nopen Expect;\n\ntype parser;\n\n[@bs.new]\nexternal domParser : unit => parser = \"DOMParser\";\n\n[@bs.send.pipe : parser]\nexternal parseFromString : ( string, [@bs.as \"text/html\"] _) => Dom.element = \"\";\n\n[@bs.get]\nexternal body : Dom.element => Dom.element = \"\";\n\n[@bs.get]\nexternal firstChild : Dom.element => Dom.element = \"\";\n\nlet div = domParser()\n  |> parseFromString({j|\n      <div>\n        <b title=\"greeting\">Hello,</b>\n        <p data-testid=\"world\"> World!</p>\n        <input type=\"text\" placeholder=\"Enter something\" />\n        <input type=\"text\" value=\"Some value\" />\n        <img src=\"\" alt=\"Alt text\" />\n      </div>\n    |j})\n  |> body\n  |> firstChild;\n\ndescribe(\"getByText\", () => {\n  test(\"works with string matcher\", () => {\n    let actual = div |> getByText(~matcher=`Str(\"Hello,\"));\n\n    expect(actual) |> toMatchSnapshot;\n  });\n\n  test(\"works with regex matcher\", () => {\n    let actual = div |> getByText(~matcher=`RegExp([%bs.re \"/\\\\w!/\"]));\n\n    expect(actual) |> toMatchSnapshot;\n  });\n\n  test(\"works with function matcher\", () => {\n    let matcher = ( _text, node ) => (node |> tagName) === \"P\";\n    let actual = div |> getByText(~matcher=`Func(matcher));\n\n    expect(actual) |> toMatchSnapshot;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Angular Testing Library render Function Signatures\nDESCRIPTION: Defines the TypeScript function signatures for the render method, supporting both component type and template string rendering.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function render<ComponentType>(\n  component: Type<ComponentType>,\n  renderOptions?: RenderComponentOptions<ComponentType>,\n): Promise<RenderResult<ComponentType, ComponentType>>\nexport async function render<WrapperType = WrapperComponent>(\n  template: string,\n  renderOptions?: RenderTemplateOptions<WrapperType>,\n): Promise<RenderResult<WrapperType>>\n```\n\n----------------------------------------\n\nTITLE: Installing React Testing Library with npm/yarn\nDESCRIPTION: Command to install React Testing Library along with its peer dependency @testing-library/dom using npm or yarn.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/intro.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/react @testing-library/dom\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Cypress Testing Library\nDESCRIPTION: JSON configuration to add TypeScript typings for Cypress Testing Library in tsconfig.json.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/cypress-testing-library/intro.mdx#2025-04-12_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"types\": [\"cypress\", \"@testing-library/cypress\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Elements Absence with queryAll\nDESCRIPTION: Demonstrates how to use queryAll to assert that multiple elements are not present in the DOM by checking the length of the returned array.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/guide-disappearance.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst submitButtons = screen.queryAllByText('submit')\nexpect(submitButtons).toHaveLength(0) // expect no elements\n```\n\n----------------------------------------\n\nTITLE: Using ByLabelText Query in Cypress Testing\nDESCRIPTION: This snippet shows how to use the findByLabelText query in a Cypress testing environment to assert the existence of an element with a specific label.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bylabeltext.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.findByLabelText('Username').should('exist')\n```\n\n----------------------------------------\n\nTITLE: Using ByLabelText Query in Angular Testing\nDESCRIPTION: This example demonstrates how to use the getByLabelText query in an Angular testing environment, including rendering a component and querying for an input by its label.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bylabeltext.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {render, screen} from '@testing-library/angular'\n\nawait render(Login)\n\nconst inputNode = screen.getByLabelText('Username')\n```\n\n----------------------------------------\n\nTITLE: Fixture-Level Configuration Example\nDESCRIPTION: Example demonstrating how to configure Testing Library options for all tests within a fixture.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/testcafe-testing-library/intro.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {configure, screen} from '@testing-library/testcafe'\n\nfixture`configure`.clientScripts(\n  configure({testIdAttribute: 'data-automation-id'}),\n).page`http://localhost:13370`\n\ntest('supports alternative testIdAttribute', async t => {\n  await t.click(screen.getByTestId('image-with-random-alt-tag'))\n})\n\ntest('still works after browser page load and reload', async t => {\n  await t.click(screen.getByText('Go to Page 2'))\n\n  await t.eval(() => location.reload(true))\n\n  await t\n    .click(screen.getByTestId('page2-thing'))\n    .expect(screen.getByText('second page').exists)\n    .ok()\n})\n```\n\n----------------------------------------\n\nTITLE: Installing jsdom for DOM Environment\nDESCRIPTION: Command to install jsdom which provides a DOM environment for running tests, as Qwik Testing Library is currently only tested with jsdom.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/qwik-testing-library/setup.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jsdom\n```\n\n----------------------------------------\n\nTITLE: Using Custom Container for Rendering Table Components\nDESCRIPTION: Shows how to specify a custom container for rendering components that have specific parent element requirements, such as table-related elements.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/marko-testing-library/api.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst table = document.createElement('table')\n\nconst {container} = await render(MyTableBody, null, {\n  container: document.body.appendChild(table),\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Test Scripts to package.json for Vitest\nDESCRIPTION: Package.json configuration for adding test-related npm scripts that run Vitest in different modes: standard run, UI mode, and watch mode.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/setup.mdx#2025-04-12_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"vitest run\",\n    \"test:ui\": \"vitest --ui\",\n    \"test:watch\": \"vitest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using render Function with Solid.js Components in Testing\nDESCRIPTION: Demonstrates how to use the render function with Solid.js components. Unlike other frameworks, Solid components are passed as functions to the render method and the API supports a location option for router testing.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/solid-testing-library/api.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst results = render(() => <YourComponent />, options)\n```\n\n----------------------------------------\n\nTITLE: Firing Events in Component Tests with JSX\nDESCRIPTION: Demonstrates how to use the fireEvent function to simulate user interactions in tests. It includes examples of clicking a button, inputting text, and handling double-click events.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/preact-testing-library/api.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst cb = jest.fn()\n\nfunction Counter() {\n  useEffect(cb)\n\n  const [count, setCount] = useState(0)\n\n  return <button onClick={() => setCount(count + 1)}>{count}</button>\n}\n\nconst {\n  container: {firstChild: buttonNode},\n} = render(<Counter />)\n\n// Clear the first call to useEffect that the initial render triggers.\ncb.mockClear()\n\n// Fire event Option 1.\nfireEvent.click(buttonNode)\n\n// Fire event Option 2.\nfireEvent(\n  buttonNode,\n  new MouseEvent('click', {\n    bubbles: true,\n    cancelable: true,\n    button: 0,\n  }),\n)\n\nexpect(buttonNode).toHaveTextContent('1')\nexpect(cb).toHaveBeenCalledTimes(1)\n```\n\n----------------------------------------\n\nTITLE: Debugging Rendered Components in Qwik Testing Library\nDESCRIPTION: Shows how to use the debug function to log rendered elements, including examples for debugging the baseElement, custom elements, and using screen.debug.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/qwik-testing-library/api.mdx#2025-04-12_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {render, screen} from '@noma.to/qwik-testing-library'\n\nconst {debug} = await render(<MyComponent />)\n\nconst button = screen.getByRole('button')\n\n// log `document.body`\nscreen.debug()\n\n// log your custom the `baseElement`\ndebug()\n\n// log a specific element\nscreen.debug(button)\ndebug(button)\n```\n\n----------------------------------------\n\nTITLE: Configuring jsdom Environment in Jest 27\nDESCRIPTION: Jest configuration to enable jsdom environment globally in Jest 27\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/setup.mdx#2025-04-12_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n module.exports = {\n+  testEnvironment: 'jest-environment-jsdom',\n   // ... other options ...\n }\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic User-Event Test with Inline Setup\nDESCRIPTION: Demonstrates how to set up and use user-event within a test case using inline setup. Shows button click simulation and basic test structure.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/intro.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport userEvent from '@testing-library/user-event'\n\n// inlining\ntest('trigger some awesome feature when clicking the button', async () => {\n  const user = userEvent.setup()\n  // Import `render` and `screen` from the framework library of your choice.\n  // See https://testing-library.com/docs/dom-testing-library/install#wrappers\n  render(<MyComponent />)\n\n  await user.click(screen.getByRole('button', {name: /click me!/i}))\n\n  // ...assertions...\n})\n```\n\n----------------------------------------\n\nTITLE: Using findByTestId in Cypress Testing\nDESCRIPTION: This Cypress example demonstrates how to use the findByTestId function to select an element by its data-testid attribute and assert its existence.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bytestid.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.findByTestId('custom-element').should('exist')\n```\n\n----------------------------------------\n\nTITLE: Using ByTitle Query in Angular Testing\nDESCRIPTION: Shows how to use the getByTitle method with the screen object in Angular testing, including asynchronous rendering of a component before querying.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bytitle.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport {render, screen} from '@testing-library/angular'\n\nawait render(MyComponent)\nconst deleteElement = screen.getByTitle('Delete')\nconst closeElement = screen.getByTitle('Close')\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration for Custom Test Utils\nDESCRIPTION: Configuration settings for Jest to make test utilities globally accessible without relative imports.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/setup.mdx#2025-04-12_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src\",\n    \"paths\": {\n      \"test-utils\": [\"./utils/test-utils\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Example for Input Button Text\nDESCRIPTION: This HTML snippet demonstrates an input element of type 'submit' with a value that can be targeted by the ByText query. This shows that the query also works with certain types of input elements.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bytext.mdx#2025-04-12_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"submit\" value=\"Send data\" />\n```\n\n----------------------------------------\n\nTITLE: Using Component-Level Cleanup Method\nDESCRIPTION: Demonstrates the cleanup method returned from render, which allows removing a specific component instance before the test completes to verify proper cleanup behavior.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/marko-testing-library/api.mdx#2025-04-12_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render, screen, getRoles} from '@marko/testing-library'\nimport Main from './main.marko'\nimport Dialog from './dialog.marko'\n\nawait render(Main)\n\nconst main = screen.getByRole('main')\nexpect(main).not.toHaveAttribute('aria-hidden')\n\nconst {cleanup} = await render(Dialog)\nexpect(main).toHaveAttribute('aria-hidden') // assert added attribute\n\ncleanup() // destroy the dialog\n\nexpect(main).not.toHaveAttribute('aria-hidden') // assert attribute removed\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Render Method in React Native Tests\nDESCRIPTION: This diff snippet shows how to replace the default import from React Native Testing Library with a custom test utils import.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-native-testing-library/setup.mdx#2025-04-12_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { render, fireEvent } from '@testing-library/react-native';\n+ import { render, fireEvent } from '../test-utils';\n```\n\n----------------------------------------\n\nTITLE: Configuring Testing Library for Native DOM\nDESCRIPTION: This snippet demonstrates how to configure Testing Library for native DOM usage. It sets a custom test ID attribute and defines a custom error handler.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-configuration.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {configure} from '@testing-library/dom'\nimport serialize from 'my-custom-dom-serializer'\n\nconfigure({\n  testIdAttribute: 'data-my-test-id',\n  getElementError: (message, container) => {\n    const customMessage = [message, serialize(container.firstChild)].join(\n      '\\n\\n',\n    )\n    return new Error(customMessage)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Logging ARIA Roles of DOM Elements with JavaScript\nDESCRIPTION: This snippet demonstrates how to use the logRoles function to print out a list of all implicit ARIA roles within a tree of DOM nodes. It creates a nav element with a nested list and logs the roles.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-accessibility.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {logRoles} from '@testing-library/dom'\n\nconst nav = document.createElement('nav')\nnav.innerHTML = `\n<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`\n\nlogRoles(nav)\n```\n\n----------------------------------------\n\nTITLE: Using ByLabelText Query in Native JavaScript\nDESCRIPTION: This example demonstrates how to use the getByLabelText query with the screen object in native JavaScript.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bylabeltext.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {screen} from '@testing-library/dom'\n\nconst inputNode = screen.getByLabelText('Username')\n```\n\n----------------------------------------\n\nTITLE: Using getByDisplayValue with Angular Testing Library\nDESCRIPTION: Example of using the getByDisplayValue query with Angular Testing Library to find an input element with the value 'Norris' after rendering an Angular component.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bydisplayvalue.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport {render, screen} from '@testing-library/angular'\n\nawait render(MyComponent)\nconst lastNameInput = screen.getByDisplayValue('Norris')\n```\n\n----------------------------------------\n\nTITLE: Using findByDisplayValue with Cypress Testing Library\nDESCRIPTION: Example of using the findByDisplayValue query with Cypress Testing Library to find and assert the existence of an input element with the value 'Norris'.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bydisplayvalue.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.findByDisplayValue('Norris').should('exist')\n```\n\n----------------------------------------\n\nTITLE: Configuring jsdom Environment in Jest 28\nDESCRIPTION: Jest configuration to enable jsdom environment globally in Jest 28\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/setup.mdx#2025-04-12_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n module.exports = {\n+  testEnvironment: 'jsdom',\n   // ... other options ...\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring bs-jest-dom in bsconfig.json\nDESCRIPTION: JSON configuration to add bs-jest-dom as a dev dependency in a BuckleScript project. This setup is required to use bs-jest-dom in your ReasonML tests.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/ecosystem-bs-jest-dom.mdx#2025-04-12_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bs-dev-dependencies\": [\"bs-jest-dom\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Hidden Elements in HTML\nDESCRIPTION: HTML example showing how the 'hidden' option affects element selection. It illustrates a scenario where some elements are hidden from the accessibility tree.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/byrole.mdx#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <main aria-hidden=\"true\">\n    <button>Open dialog</button>\n  </main>\n  <div role=\"dialog\">\n    <button>Close dialog</button>\n  </div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Installing CLI Testing Library with npm or yarn\nDESCRIPTION: Command to install the CLI Testing Library as a development dependency using npm or yarn package managers.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/ecosystem-cli-testing-library.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev cli-testing-library\n```\n\n----------------------------------------\n\nTITLE: Using the within Function to Scope Queries\nDESCRIPTION: Shows how to use the within function to scope testing-library queries to a specific WebdriverIO element. This is useful for targeting elements within a specific section of the page.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/webdriverio-testing-library/intro.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {within} from '@testing-library/webdriverio'\n\nit('within scopes queries to element', async () => {\n  const nested = await browser.$('*[data-testid=\"nested\"]')\n\n  const button = await within(nested).getByText('Button Text')\n  await button.click()\n\n  expect(await button.getText()).toEqual('Button Clicked')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a server$ function in Qwik\nDESCRIPTION: An example of defining a server$ function in Qwik City that retrieves blog posts. This server function will need to be mocked in tests.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/qwik-testing-library/example.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {server$} from '@builder.io/qwik-city'\nimport {BlogPost} from '~/lib/blog-post'\n\nexport const getLatestPosts$ = server$(function (): Promise<BlogPost> {\n  // get the latest posts\n  return Promise.resolve([])\n})\n```\n\n----------------------------------------\n\nTITLE: Using Cleanup Function in JavaScript Testing\nDESCRIPTION: Shows how to use the cleanup function to unmount components and destroy containers after tests. It includes an example of how to use it with afterEach and manually.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/preact-testing-library/api.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, cleanup} from '@testing-library/preact'\n\nafterEach(() => {\n  cleanup()\n}) // Default on import: runs it after each test.\n\nrender(<YourComponent />)\n\ncleanup() // Or like this for more control.\n```\n\n----------------------------------------\n\nTITLE: Using ByLabelText Query with Selector Option\nDESCRIPTION: This example demonstrates how to use the getByLabelText query with a selector option to specify a particular element type when multiple elements share the same label text.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bylabeltext.mdx#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst inputNode = screen.getByLabelText('Username', {selector: 'input'})\n```\n\n----------------------------------------\n\nTITLE: Using getByDisplayValue for Textarea with React Testing Library\nDESCRIPTION: Example of using the getByDisplayValue query with React Testing Library to find a textarea element with the content 'Hello World' after rendering a React component.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bydisplayvalue.mdx#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render, screen} from '@testing-library/react'\n\nrender(<MyComponent />)\nconst messageTextArea = screen.getByDisplayValue('Hello World')\n```\n\n----------------------------------------\n\nTITLE: Using findByAltText with Cypress\nDESCRIPTION: Example of using the findByAltText query with Cypress Testing Library to find an element by its alt text and assert its existence.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/byalttext.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.findByAltText(/incredibles.*? poster/i).should('exist')\n```\n\n----------------------------------------\n\nTITLE: Running Mocha tests with global-jsdom\nDESCRIPTION: Command for running Mocha tests with global-jsdom registered to provide browser-like DOM APIs in Node.js environment.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/setup.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmocha --require global-jsdom/register\n```\n\n----------------------------------------\n\nTITLE: Installing bs-jest-dom via npm\nDESCRIPTION: Command to install bs-jest-dom as a dev dependency using npm. This library provides custom DOM element matchers for Jest in ReasonML.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/ecosystem-bs-jest-dom.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev bs-jest-dom\n```\n\n----------------------------------------\n\nTITLE: Illustrating Selected State in HTML\nDESCRIPTION: HTML example demonstrating how elements can be filtered by their selected state using the 'selected' option in the ByRole query.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/byrole.mdx#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <div role=\"tablist\">\n    <button role=\"tab\" aria-selected=\"true\">Native</button>\n    <button role=\"tab\" aria-selected=\"false\">React</button>\n    <button role=\"tab\" aria-selected=\"false\">Cypress</button>\n  </div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Querying Range Widgets with Value Option in Testing Library\nDESCRIPTION: Example HTML structure with spinbutton elements that have various ARIA value attributes. These elements can be queried using the value option with getByRole to filter by specific attribute values.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/byrole.mdx#2025-04-12_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <section>\n    <button\n      role=\"spinbutton\"\n      aria-valuenow=\"5\"\n      aria-valuemin=\"0\"\n      aria-valuemax=\"10\"\n      aria-valuetext=\"medium\"\n    >\n      Volume\n    </button>\n    <button\n      role=\"spinbutton\"\n      aria-valuenow=\"3\"\n      aria-valuemin=\"0\"\n      aria-valuemax=\"10\"\n      aria-valuetext=\"medium\"\n    >\n      Pitch\n    </button>\n  </section>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Defining isInaccessible Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the isInaccessible function. It computes whether a given element should be excluded from the accessibility API by the browser.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-accessibility.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isInaccessible(element: Element): boolean\n```\n\n----------------------------------------\n\nTITLE: Using ByPlaceholderText Query in Cypress\nDESCRIPTION: Demonstrates how to use the findByPlaceholderText command in Cypress to locate an element by its placeholder text and assert its existence.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/byplaceholdertext.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.findByPlaceholderText('Username').should('exist')\n```\n\n----------------------------------------\n\nTITLE: Using findByDisplayValue for Select with Cypress Testing Library\nDESCRIPTION: Example of using the findByDisplayValue query with Cypress Testing Library to find and assert the existence of a select element with the selected option displaying 'Alaska'.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bydisplayvalue.mdx#2025-04-12_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ncy.findByDisplayValue('Alaska').should('exist')\n```\n\n----------------------------------------\n\nTITLE: Overriding Standalone Component Imports in Angular Testing Library\nDESCRIPTION: Illustrates how to override a standalone component's imports using the componentImports option in the render method.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait render(AppComponent, {\n  componentImports: [MockChildComponent],\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of render Function\nDESCRIPTION: TypeScript interface definition of the render function showing its signature with UI element parameter and optional options object.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/api.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction render(\n  ui: React.ReactElement<any>,\n  options?: {\n    /* You won't often use this, expand below for docs on options */\n  },\n): RenderResult\n```\n\n----------------------------------------\n\nTITLE: HTML Example for ByText Query\nDESCRIPTION: This HTML snippet demonstrates a simple anchor tag that could be targeted by the ByText query. It includes text content that can be matched.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bytext.mdx#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/about\">About ℹ️</a>\n```\n\n----------------------------------------\n\nTITLE: ByDisplayValue API TypeScript Interface\nDESCRIPTION: TypeScript definition for the getByDisplayValue method that retrieves elements with matching display values. The method accepts a container, a value to match, and optional configuration for exact matching and text normalization.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bydisplayvalue.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetByDisplayValue(\n  // If you're using `screen`, then skip the container argument:\n  container: HTMLElement,\n  value: TextMatch,\n  options?: {\n    exact?: boolean = true,\n    normalizer?: NormalizerFn,\n  }): HTMLElement\n```\n\n----------------------------------------\n\nTITLE: Querying Alert Dialogs with Description Option in Testing Library\nDESCRIPTION: Example HTML structure with alertdialog elements that have accessible descriptions via aria-describedby. These elements can be distinguished by their descriptions when they lack unique accessible names.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/byrole.mdx#2025-04-12_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <ul>\n    <li role=\"alertdialog\" aria-describedby=\"notification-id-1\">\n      <div><button>Close</button></div>\n      <div id=\"notification-id-1\">You have unread emails</div>\n    </li>\n    <li role=\"alertdialog\" aria-describedby=\"notification-id-2\">\n      <div><button>Close</button></div>\n      <div id=\"notification-id-2\">Your session is about to expire</div>\n    </li>\n  </ul>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Component Rendering with Props and Options\nDESCRIPTION: Shows how to pass props and component options when rendering a Svelte component for testing.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/api.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// pass props to the component\nrender(YourComponent, {myProp: 'value'})\n\n// pass props and other options to the component\nrender(YourComponent, {\n  props: {myProp: 'value'},\n  context: new Map([[('theme': 'dark')]]),\n})\n```\n\n----------------------------------------\n\nTITLE: Using the drag function with Testing Library\nDESCRIPTION: Simple example of using the drag function to move a slider element horizontally by -100 pixels.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-drag.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait drag(slider, {\n  delta: {x: -100, y: 0},\n})\n```\n\n----------------------------------------\n\nTITLE: Using keyboard() Function with Press and Release Syntax\nDESCRIPTION: Demonstrates the syntax for keeping keys pressed and releasing them explicitly using '>' and '/' symbols in userEvent.keyboard().\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nuserEvent.keyboard('{Shift>}A{/Shift}') // translates to: Shift(down), A, Shift(up)\n```\n\n----------------------------------------\n\nTITLE: Overriding Child Component Providers in Angular Testing Library\nDESCRIPTION: Demonstrates how to override providers for child components using the childComponentOverrides option in the render method.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait render(AppComponent, {\n  childComponentOverrides: [\n    {\n      component: ChildOfAppComponent,\n      providers: [{provide: ChildService, useValue: {hello: 'world'}}],\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for advanceTimers Option\nDESCRIPTION: The TypeScript function signature for the advanceTimers option, showing it accepts a delay parameter and returns either a Promise<void> or void.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/options.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(delay: number) => Promise<void> | void\n```\n\n----------------------------------------\n\nTITLE: HTML Example for ByTitle Query\nDESCRIPTION: Demonstrates HTML structure that can be queried using ByTitle methods, including a span element with a title attribute and an SVG with a title element.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bytitle.mdx#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<span title=\"Delete\" id=\"2\"></span>\n<svg>\n  <title>Close</title>\n  <g><path /></g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Error Handling in waitForElementToBeRemoved in JavaScript\nDESCRIPTION: Example showing how waitForElementToBeRemoved handles errors when provided with null or empty arrays. The function requires that elements exist before waiting for their removal.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-async.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nwaitForElementToBeRemoved(null).catch(err => console.log(err))\nwaitForElementToBeRemoved(queryByText(/not here/i)).catch(err =>\n  console.log(err),\n)\nwaitForElementToBeRemoved(queryAllByText(/not here/i)).catch(err =>\n  console.log(err),\n)\nwaitForElementToBeRemoved(() => getByText(/not here/i)).catch(err =>\n  console.log(err),\n)\n\n// Error: The element(s) given to waitForElementToBeRemoved are already removed. waitForElementToBeRemoved requires that the element(s) exist(s) before waiting for removal.\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Component Outputs in Angular Testing Library\nDESCRIPTION: Shows how to subscribe to @Output EventEmitters and Observables using the on option in the render method.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// using a manual callback\nconst sendValue = (value) => { ... }\n// using a (jest) spy\nconst sendValueSpy = jest.fn()\n\nawait render(AppComponent, {\n  on: {\n    send: (value) => sendValue(value),\n    send: sendValueSpy\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using asFragment for Snapshot Testing in Qwik\nDESCRIPTION: Demonstrates how to use the asFragment function to create a DocumentFragment for snapshot testing, including handling user events and comparing renders.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/qwik-testing-library/api.mdx#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {component$} from '@builder.io/qwik';\nimport {render} from '@testing-library/react';\nimport {userEvent} from \"@testing-library/user-event\";\n\nconst TestComponent = component$(() => {\n  const count = useSignal(0);\n\n  return (\n    <button onClick$={() => (count.value++)}>\n      Click to increase: {count}\n    </button>\n  )\n});\n\nconst {getByText, asFragment} = await render(<TestComponent />)\nconst firstRender = asFragment()\n\nuserEvent.click(getByText(/Click to increase/))\n\n// This will snapshot only the difference between the first render, and the\n// state of the DOM after the click event.\n// See https://github.com/jest-community/snapshot-diff\nexpect(firstRender).toMatchDiffSnapshot(asFragment())\n```\n\n----------------------------------------\n\nTITLE: Simple Rendering Example with Import\nDESCRIPTION: Shows how to import and use the render function to mount a Marko template. This is a minimal example without passing any inputs to the component.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/marko-testing-library/api.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render} from '@marko/testing-library'\nimport MyTemplate from './my-template.marko'\n\nrender(MyTemplate)\n```\n\n----------------------------------------\n\nTITLE: Keyboard API Type Definition\nDESCRIPTION: TypeScript interface definition for the keyboard API function that simulates keyboard interactions.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-keyboard.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nkeyboard(input: KeyboardInput): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Svelte Testing\nDESCRIPTION: Configuration file for Vite that sets up Svelte and Svelte Testing plugins, configures the JSDOM test environment, and includes the setup file for Jest-DOM matchers.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/setup.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {defineConfig} from 'vitest/config'\nimport {svelte} from '@sveltejs/vite-plugin-svelte'\nimport {svelteTesting} from '@testing-library/svelte/vite'\n\nexport default defineConfig({\n  plugins: [svelte(), svelteTesting()],\n  test: {\n    environment: 'jsdom',\n    setupFiles: ['./vitest-setup.js'],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Testing Utility Libraries\nDESCRIPTION: Command to install complementary testing libraries jest-dom for custom matchers and user-event for simulating user interactions in tests.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/qwik-testing-library/setup.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/jest-dom @testing-library/user-event\n```\n\n----------------------------------------\n\nTITLE: PrettyDOM TypeScript Interface Definition\nDESCRIPTION: TypeScript interface and function signature for the prettyDOM utility that formats DOM nodes as readable strings.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-debugging.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Options extends prettyFormat.OptionsReceived {\n  filterNode?: (node: Node) => boolean\n}\n\nfunction prettyDOM(\n  node: HTMLElement,\n  maxLength?: number,\n  options?: Options,\n): string\n```\n\n----------------------------------------\n\nTITLE: Example Usage of upload() Method for Multiple Files in JSX\nDESCRIPTION: Demonstrates uploading multiple files to a file input. The example creates an array of File objects, uploads them to an input with the multiple attribute, and verifies they were properly added.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-utility.mdx#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\ntest('upload multiple files', async () => {\n  const user = userEvent.setup()\n\n  render(\n    <div>\n      <label htmlFor=\"file-uploader\">Upload file:</label>\n      <input id=\"file-uploader\" type=\"file\" multiple />\n    </div>,\n  )\n  const files = [\n    new File(['hello'], 'hello.png', {type: 'image/png'}),\n    new File(['there'], 'there.png', {type: 'image/png'}),\n  ]\n  const input = screen.getByLabelText(/upload file/i)\n\n  await user.upload(input, files)\n\n  expect(input.files).toHaveLength(2)\n  expect(input.files[0]).toBe(files[0])\n  expect(input.files[1]).toBe(files[1])\n})\n```\n\n----------------------------------------\n\nTITLE: Debug Function Usage in Tests\nDESCRIPTION: Demonstrates different ways to use the debug function to log DOM elements during testing.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/api.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render, screen} from '@testing-library/svelte'\n\nconst {debug} = render(MyComponent, {myProp: 'value'})\n\nconst button = screen.getByRole('button')\n\n// log `document.body`\nscreen.debug()\n\n// log your custom `target` or `baseElement`\ndebug()\n\n// log a specific element\nscreen.debug(button)\ndebug(button)\n```\n\n----------------------------------------\n\nTITLE: Testing Element Absence with queryBy\nDESCRIPTION: Shows how to assert that an element is not present in the DOM using the queryBy API, which returns null instead of throwing an error when an element is not found.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/guide-disappearance.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst submitButton = screen.queryByText('submit')\nexpect(submitButton).toBeNull() // it doesn't exist\n```\n\n----------------------------------------\n\nTITLE: Escape Special Characters\nDESCRIPTION: Example of typing special characters by doubling the brackets.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-keyboard.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nkeyboard('{{a[[') // translates to: {, a, [\n```\n\n----------------------------------------\n\nTITLE: Setting up Jest-DOM with Vitest\nDESCRIPTION: Setup file for importing Jest-DOM matchers to use with Vitest, allowing for better DOM element assertions in tests.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/setup.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@testing-library/jest-dom/vitest'\n```\n\n----------------------------------------\n\nTITLE: HTML DOM Example for Testing\nDESCRIPTION: Example HTML DOM structure that could be tested with Testing Library queries, showing a simple form with a labeled input field.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/about.mdx#2025-04-12_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<body>\n  <div id=\"app\">\n    <label for=\"username-input\">Username</label>\n    <input id=\"username-input\" />\n  </div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for renderHook Function\nDESCRIPTION: Type definition for the renderHook function used to test hooks in Solid.js. This function allows testing hooks in the context of a component, exposing the result, owner, and cleanup function.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/solid-testing-library/api.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction renderHook<Args extends any[], Result>(\n  hook: (...args: Args) => Result,\n  options: {\n    initialProps?: Args,\n    wrapper?: Component<{ children: JSX.Element }>\n  }\n) => {\n  result: Result;\n  owner: Owner | null;\n  cleanup: () => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring advanceTimers for Fake Timers in user-event\nDESCRIPTION: This example shows how to configure the advanceTimers option when using fake timers in tests. It ensures that user-event's internal delays work correctly with Jest's time advancement function.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/options.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = userEvent.setup({advanceTimers: jest.advanceTimersByTime})\n```\n\n----------------------------------------\n\nTITLE: Using Screen Debug Method\nDESCRIPTION: Examples of using screen.debug() to log DOM elements in different ways during testing.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-debugging.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {screen} from '@testing-library/dom'\n\ndocument.body.innerHTML = `\n  <button>test</button>\n  <span>multi-test</span>\n  <div>multi-test</div>\n`\n\n// debug document\nscreen.debug()\n// debug single element\nscreen.debug(screen.getByText('test'))\n// debug multiple elements\nscreen.debug(screen.getAllByText('multi-test'))\n```\n\n----------------------------------------\n\nTITLE: Key Release Operation\nDESCRIPTION: Example of releasing a previously pressed key.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-keyboard.mdx#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nkeyboard('{/a}') // release a previously pressed a\n```\n\n----------------------------------------\n\nTITLE: Adding Test Scripts to package.json for Jest\nDESCRIPTION: Package.json configuration for adding test-related npm scripts that run Jest with experimental ESM support, which is needed for Svelte Testing Library.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/setup.mdx#2025-04-12_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"npx --node-options=\\\"--experimental-vm-modules\\\" jest src\",\n    \"test:watch\": \"npx --node-options=\\\"--experimental-vm-modules\\\" jest src --watch\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DOM Testing Library with Explicit File Path\nDESCRIPTION: Example of explicitly importing a specific distribution file from the DOM Testing Library package when the testing framework doesn't resolve to the correct file automatically.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/install.mdx#2025-04-12_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {within} from '@testing-library/dom/dist/@testing-library/dom.umd.js'\n```\n\n----------------------------------------\n\nTITLE: Configuring ICU Support Check for React Intl Tests\nDESCRIPTION: Implementation of ICU (International Components for Unicode) support detection and setup for Node 13+ environments. Includes functions to check ICU support and configure number/date formatting.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-react-intl.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst hasFullICU = () => {\n  try {\n    const january = new Date(9e8)\n    const pt = new Intl.DateTimeFormat('pt', {month: 'long'})\n    return pt.format(january) === 'janeiro'\n  } catch (err) {\n    return false\n  }\n}\n\nexport const setupTests = () => {\n  if (hasFullICU()) {\n    Intl.NumberFormat.format = new Intl.NumberFormat('pt').format\n    Intl.DateTimeFormat.format = new Intl.DateTimeFormat('pt').format\n  } else {\n    global.Intl = IntlPolyfill\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using getByDisplayValue for Textarea with DOM Testing Library\nDESCRIPTION: Example of using the getByDisplayValue query with DOM Testing Library to find a textarea element with the content 'Hello World'.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bydisplayvalue.mdx#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {screen} from '@testing-library/dom'\n\nconst messageTextArea = screen.getByDisplayValue('Hello World')\n```\n\n----------------------------------------\n\nTITLE: waitForElementToBeRemoved Function Type Definition in TypeScript\nDESCRIPTION: TypeScript definition for the waitForElementToBeRemoved utility, which waits for element(s) to be removed from the DOM. This function is built as a wrapper around the waitFor utility.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-async.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction waitForElementToBeRemoved<T>(\n  callback: (() => T) | T,\n  options?: {\n    container?: HTMLElement\n    timeout?: number\n    interval?: number\n    onTimeout?: (error: Error) => Error\n    mutationObserverOptions?: MutationObserverInit\n  },\n): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Using getByDisplayValue for Select with Angular Testing Library\nDESCRIPTION: Example of using the getByDisplayValue query with Angular Testing Library to find a select element with the selected option displaying 'Alaska' after rendering an Angular component.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bydisplayvalue.mdx#2025-04-12_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport {render, screen} from '@testing-library/angular'\n\nawait render(MyComponent)\nconst selectElement = screen.getByDisplayValue('Alaska')\n```\n\n----------------------------------------\n\nTITLE: Simulating Touch Events\nDESCRIPTION: Using the touch method to trigger both focus and blur events on an input element.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/vue-testing-library/api.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait fireEvent.touch(getByLabelText('username'))\n\n// Same as:\nawait fireEvent.focus(getByLabelText('username'))\nawait fireEvent.blur(getByLabelText('username'))\n```\n\n----------------------------------------\n\nTITLE: Debugging Rendered Components\nDESCRIPTION: Using the debug method to log the rendered component's DOM structure. This is a shortcut for console.log(prettyDOM(element)).\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/vue-testing-library/api.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render} from '@testing-library/vue'\n\nconst HelloWorldComponent = {\n  template: `<h1>Hello World</h1>`,\n}\n\nconst {debug} = render(HelloWorldComponent)\ndebug()\n// <div>\n//   <h1>Hello World</h1>\n// </div>\n```\n\n----------------------------------------\n\nTITLE: Installing Cypress Testing Library with npm or yarn\nDESCRIPTION: Command to install Cypress Testing Library and its dependencies using npm or yarn package managers.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/cypress-testing-library/intro.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev cypress @testing-library/cypress\n```\n\n----------------------------------------\n\nTITLE: KeyboardEvent.key Syntax\nDESCRIPTION: Example of using KeyboardEvent.key syntax for keyboard input simulation.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-keyboard.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nkeyboard('{Shift}{f}{o}{o}') // translates to: Shift, f, o, o\n```\n\n----------------------------------------\n\nTITLE: Using ByText Query in Cypress Testing\nDESCRIPTION: This snippet shows how to use a similar text-finding functionality in Cypress tests. It uses the findByText command and checks for the existence of an element with the specified text.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bytext.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.findByText(/about/i).should('exist')\n```\n\n----------------------------------------\n\nTITLE: Using getByRole with Description Option in JavaScript\nDESCRIPTION: JavaScript example showing how to query an alertdialog element by its accessible description. This is useful when multiple elements share the same role but can be distinguished by their descriptions.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/byrole.mdx#2025-04-12_snippet_9\n\nLANGUAGE: js\nCODE:\n```\ngetByRole('alertdialog', {description: 'Your session is about to expire'})\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies in Angular Testing Library\nDESCRIPTION: Illustrates how to declare components, directives, and pipes needed for rendering a component using the declarations option.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait render(AppComponent, {\n  declarations: [CustomerDetailComponent, ButtonComponent],\n})\n```\n\n----------------------------------------\n\nTITLE: Using within for Container-Based Queries\nDESCRIPTION: Demonstrates how to use the within function to scope queries to specific containers.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/nightwatch-testing-library/intro.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst {getQueriesFrom, within} = require('@testing-library/nightwatch')\n\nmodule.exports = {\n  beforeEach(browser, done) {\n    browser.url('http://localhost:13370')\n    done()\n  },\n  async 'getByText within container'(browser) {\n    const {getByTestId} = getQueriesFrom(browser)\n\n    const nested = await getByTestId('nested')\n    const button = await within(nested).getByText('Button Text')\n\n    browser.click(button)\n    browser.expect.element(button).text.to.equal('Button Clicked')\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: ByTitle Query API Signature in TypeScript\nDESCRIPTION: Defines the API signature for the getByTitle query method in TypeScript. It includes parameters for container, title, and options with exact matching and normalizer function.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bytitle.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetByTitle(\n  // If you're using `screen`, then skip the container argument:\n  container: HTMLElement,\n  title: TextMatch,\n  options?: {\n    exact?: boolean = true,\n    normalizer?: NormalizerFn,\n  }): HTMLElement\n```\n\n----------------------------------------\n\nTITLE: Installing Puppeteer Testing Library Dependencies\nDESCRIPTION: Command to install required packages for using Puppeteer Testing Library. Installs both puppeteer and pptr-testing-library as development dependencies.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/pptr-testing-library/intro.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev puppeteer pptr-testing-library\n```\n\n----------------------------------------\n\nTITLE: Global TestCafe Configuration\nDESCRIPTION: JSON configuration showing how to set up global Testing Library options for all fixtures and tests.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/testcafe-testing-library/intro.mdx#2025-04-12_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clientScripts\": [\n    \"./node_modules/@testing-library/dom/dist/@testing-library/dom.umd.js\",\n    \"./path/to/my-app-testcafe.config.js\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Using Text Selection Range with User Event in React Testing\nDESCRIPTION: Example showing how to use text selection range with userEvent.type to replace specific text within an input element. The code selects characters within a range and replaces 'bad' with 'good' using the backspace special character.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\n\ntest('delete characters within the selectedRange', () => {\n  render(\n    <div>\n      <label htmlFor=\"my-input\">Example:</label>\n      <input id=\"my-input\" type=\"text\" value=\"This is a bad example\" />\n    </div>,\n  )\n  const input = screen.getByLabelText(/example/i)\n  input.setSelectionRange(10, 13)\n  userEvent.type(input, '{backspace}good')\n\n  expect(input).toHaveValue('This is a good example')\n```\n\n----------------------------------------\n\nTITLE: Using getByRole with Value Option in JavaScript\nDESCRIPTION: JavaScript examples showing how to query spinbutton elements by their aria-value* attributes. The examples demonstrate filtering by a single value property or by multiple value properties simultaneously.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/byrole.mdx#2025-04-12_snippet_7\n\nLANGUAGE: js\nCODE:\n```\ngetByRole('spinbutton', {value: {now: 5}})\n// <button>Volume</button>\n\ngetAllByRole('spinbutton', {value: {min: 0}})\n// [\n//   <button>Volume</button>,\n//   <button>Pitch</button>\n// ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Testing Library Options\nDESCRIPTION: Demonstrates how to use the configure function to customize testing-library behavior, such as changing the testId attribute. Configuration can be reset by passing null.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/webdriverio-testing-library/intro.mdx#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {configure} from '@testing-library/webdriverio'\n\nbeforeEach(() => {\n  configure({testIdAttribute: 'data-automation-id'})\n})\nafterEach(() => {\n  configure(null)\n})\n\nit('lets you configure queries', async () => {\n  const {getByTestId} = setupBrowser(browser)\n\n  expect(await getByTestId('testid-in-data-automation-id-attr')).toBeDefined()\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Angular Testing Library using ng add\nDESCRIPTION: Command to set up a project with Angular Testing Library using the ng add command, which also installs @testing-library/dom.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/intro.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng add @testing-library/angular\n```\n\n----------------------------------------\n\nTITLE: Defining ByTestId Query API in TypeScript\nDESCRIPTION: This snippet defines the TypeScript API for the getByTestId function, including its parameters and return type. It shows the function signature with optional parameters for customization.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bytestid.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetByTestId(\n  // If you're using `screen`, then skip the container argument:\n  container: HTMLElement,\n  text: TextMatch,\n  options?: {\n    exact?: boolean = true,\n    normalizer?: NormalizerFn,\n  }): HTMLElement\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Table of Contributors for Testing Library Documentation\nDESCRIPTION: This HTML snippet creates a table displaying contributors to the Testing Library documentation project. Each cell contains an avatar image, contributor name, and contribution type icons. The table is structured with rows and columns to organize multiple contributors.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/README.md#2025-04-12_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.bitnative.com\"><img src=\"https://avatars2.githubusercontent.com/u/1688997?v=4?s=100\" width=\"100px;\" alt=\"Cory House\"/><br /><sub><b>Cory House</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=coryhouse\" title=\"Documentation\">📖</a></td>\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://fb.me/yz\"><img src=\"https://avatars3.githubusercontent.com/u/14841421?v=4?s=100\" width=\"100px;\" alt=\"Jack Zhao\"/><br /><sub><b>Jack Zhao</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=bugzpodder\" title=\"Documentation\">📖</a></td>\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/rkennel\"><img src=\"https://avatars2.githubusercontent.com/u/28492538?v=4?s=100\" width=\"100px;\" alt=\"Ryan Kennel\"/><br /><sub><b>Ryan Kennel</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=rkennel\" title=\"Documentation\">📖</a></td>\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/JesuHrz\"><img src=\"https://avatars0.githubusercontent.com/u/28031187?v=4?s=100\" width=\"100px;\" alt=\"Jesus Hernandez\"/><br /><sub><b>Jesus Hernandez</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=JesuHrz\" title=\"Documentation\">📖</a></td>\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/airjp73\"><img src=\"https://avatars2.githubusercontent.com/u/25882770?v=4?s=100\" width=\"100px;\" alt=\"Aaron Pettengill\"/><br /><sub><b>Aaron Pettengill</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=airjp73\" title=\"Documentation\">📖</a></td>\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Izhaki\"><img src=\"https://avatars1.githubusercontent.com/u/880132?v=4?s=100\" width=\"100px;\" alt=\"Izhaki\"/><br /><sub><b>Izhaki</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=Izhaki\" title=\"Documentation\">📖</a></td>\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest moduleDirectories for Custom Test Utils in React Native\nDESCRIPTION: This diff demonstrates how to modify the Jest configuration to include custom directories in moduleDirectories, allowing for non-relative imports of test utility files.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-native-testing-library/setup.mdx#2025-04-12_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nmodule.exports = {\n  moduleDirectories: [\n    'node_modules',\n+   // add the directory with the test-utils.js file, for example:\n+   'utils', // a utility folder\n+    __dirname, // the root directory\n  ],\n  // ... other options ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using keyboard() Function with Custom Keyboard Mapping\nDESCRIPTION: Example of providing a custom keyboard mapping to userEvent.keyboard() for different keyboard layouts.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nuserEvent.keyboard('?', {keyboardMap: myOwnLocaleKeyboardMap})\n```\n\n----------------------------------------\n\nTITLE: Defining ByText Query API in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the ByText query function. It specifies the function parameters including the container, text to match, and various options like selector, exact matching, and ignore patterns.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bytext.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetByText(\n  // If you're using `screen`, then skip the container argument:\n  container: HTMLElement,\n  text: TextMatch,\n  options?: {\n    selector?: string = '*',\n    exact?: boolean = true,\n    ignore?: string|boolean = 'script, style',\n    normalizer?: NormalizerFn,\n  }): HTMLElement\n```\n\n----------------------------------------\n\nTITLE: Extending TypeScript Interfaces for WebdriverIO Sync Mode\nDESCRIPTION: Shows how to extend WebdriverIO TypeScript interfaces for sync mode by using the WebdriverIOQueriesSync type instead of WebdriverIOQueries.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/webdriverio-testing-library/intro.mdx#2025-04-12_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {WebdriverIOQueriesSync} from '@testing-library/webdriverio'\n\ndeclare global {\n  namespace WebdriverIO {\n    interface Browser extends WebdriverIOQueriesSync {}\n    interface Element extends WebdriverIOQueriesSync {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Testing Library for Vue 2\nDESCRIPTION: NPM installation command for Vue Testing Library version 5, which is compatible with Vue 2 applications.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/vue-testing-library/intro.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/vue@5\n```\n\n----------------------------------------\n\nTITLE: Setting Input Value in HTML/JavaScript\nDESCRIPTION: Example showing how to set a value for an input element with the ID 'lastName' using JavaScript. This sets up the DOM state that would then be tested with the ByDisplayValue queries.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bydisplayvalue.mdx#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" id=\"lastName\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById('lastName').value = 'Norris'\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Server Testing with Marko\nDESCRIPTION: Jest configuration for server-side Marko component testing using the @marko/jest/preset/node preset.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/marko-testing-library/setup.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  preset: '@marko/jest/preset/node',\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Selection in TypeScript for Testing Library\nDESCRIPTION: This function copies the current selection. If writeToClipboard is set to true, it also writes the data to the Clipboard. It returns a Promise that resolves to a DataTransfer object or undefined.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-clipboard.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncopy(): Promise<DataTransfer|undefined>\n```\n\n----------------------------------------\n\nTITLE: Using Snapshot Diff with DOM Elements\nDESCRIPTION: Shows how to use snapshot-diff library with DOM elements by cloning nodes to enable proper diffing.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/faq.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst firstVersion = container.cloneNode(true)\n// Do some changes\nsnapshotDiff(firstVersion, container.cloneNode(true))\n```\n\n----------------------------------------\n\nTITLE: Using keyboard() Function with KeyboardEvent.code Format\nDESCRIPTION: Shows how to use userEvent.keyboard() with KeyboardEvent.code format for more specific keyboard inputs.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nuserEvent.keyboard('[ShiftLeft][KeyF][KeyO][KeyO]') // translates to: Shift, f, o, o\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Testing Library using npm or yarn\nDESCRIPTION: Command to install the React Native Testing Library as a development dependency using npm or yarn. The snippet includes both package managers through the npm2yarn syntax conversion.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-native-testing-library/intro.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/react-native\n```\n\n----------------------------------------\n\nTITLE: Using getByDisplayValue for Textarea with Angular Testing Library\nDESCRIPTION: Example of using the getByDisplayValue query with Angular Testing Library to find a textarea element with the content 'Hello World' after rendering an Angular component.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bydisplayvalue.mdx#2025-04-12_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport {render, screen} from '@testing-library/angular'\n\nawait render(MyComponent)\nconst messageTextArea = screen.getByDisplayValue('Hello World')\n```\n\n----------------------------------------\n\nTITLE: Using jest-native matchers with React Native Testing Library\nDESCRIPTION: Example of using jest-native's custom matchers with React Native Testing Library. This snippet demonstrates how to test if a component is empty using the toBeEmpty matcher with the queryByTestId selector.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/ecosystem-jest-native.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst {queryByTestId} = render(\n  <View>\n    <View testID=\"not-empty\">\n      <Text testID=\"empty\" />\n    </View>\n    <Text testID=\"visible\">Visible Example</Text>\n  </View>,\n)\n\nexpect(queryByTestId('not-empty')).not.toBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Defining ByLabelText Query API in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the ByLabelText query method. It specifies the function signature, parameters, and return type for methods like getByLabelText.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bylabeltext.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetByLabelText(\n  // If you're using `screen`, then skip the container argument:\n  container: HTMLElement,\n  text: TextMatch,\n  options?: {\n    selector?: string = '*',\n    exact?: boolean = true,\n    normalizer?: NormalizerFn,\n  }): HTMLElement\n```\n\n----------------------------------------\n\nTITLE: HTML Element Example for Text Matching\nDESCRIPTION: Sample HTML markup used to demonstrate various text matching techniques in React Testing Library queries.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/cheatsheet.mdx#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div>Hello World</div>\n```\n\n----------------------------------------\n\nTITLE: Using keyboard() Function with Keyboard State\nDESCRIPTION: Shows how to maintain keyboard state between operations using the keyboard state object returned by userEvent.keyboard().\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nconst keyboardState = userEvent.keyboard('[ControlLeft>]') // keydown [ControlLeft]\n// ... inspect some changes ...\nuserEvent.keyboard('a', {keyboardState}) // press [KeyA] with active ctrlKey modifier\n```\n\n----------------------------------------\n\nTITLE: Installing user-event Library for React Testing\nDESCRIPTION: This bash command installs the @testing-library/user-event and @testing-library/dom packages as development dependencies for simulating user events in React tests.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/migrate-from-enzyme.mdx#2025-04-12_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/user-event @testing-library/dom\n```\n\n----------------------------------------\n\nTITLE: Using findByDisplayValue for Textarea with Cypress Testing Library\nDESCRIPTION: Example of using the findByDisplayValue query with Cypress Testing Library to find and assert the existence of a textarea element with the content 'Hello World'.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bydisplayvalue.mdx#2025-04-12_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncy.findByDisplayValue('Hello World').should('exist')\n```\n\n----------------------------------------\n\nTITLE: Importing user-event in JavaScript tests\nDESCRIPTION: Shows two ways to import user-event in JavaScript test files, using ES6 import syntax or CommonJS require.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport userEvent from '@testing-library/user-event'\n\n// or\n\nconst {default: userEvent} = require('@testing-library/user-event')\n```\n\n----------------------------------------\n\nTITLE: ByAltText API Signature in TypeScript\nDESCRIPTION: The TypeScript definition for the getByAltText query, showing parameters including container, text matcher, and options for exact matching and text normalization.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/byalttext.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetByAltText(\n  // If you're using `screen`, then skip the container argument:\n  container: HTMLElement,\n  text: TextMatch,\n  options?: {\n    exact?: boolean = true,\n    normalizer?: NormalizerFn,\n  }): HTMLElement\n```\n\n----------------------------------------\n\nTITLE: Manual Cleanup in Tests (Optional)\nDESCRIPTION: Example of how to manually clean up after tests when opting out of automatic cleanup by setting the QTL_SKIP_AUTO_CLEANUP environment variable to true.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/qwik-testing-library/setup.mdx#2025-04-12_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport {cleanup} from '@noma.to/qwik-testing-library'\nimport {afterEach} from 'vitest'\n\nafterEach(cleanup)\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests with npm/yarn\nDESCRIPTION: Command to execute the tests using the npm test script configured for Jest with ESM support.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/setup.mdx#2025-04-12_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing rtl-simple-queries with npm or yarn\nDESCRIPTION: Command to install rtl-simple-queries as a development dependency in your project using npm or yarn.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/ecosystem-rtl-simple-queries.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev rtl-simple-queries\n```\n\n----------------------------------------\n\nTITLE: TextMatch Failed Query Examples\nDESCRIPTION: Shows examples of text matching patterns that will not find the target element.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/about.mdx#2025-04-12_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// full string does not match\nscreen.getByText('Goodbye World')\n\n// case-sensitive regex with different case\nscreen.getByText(/hello world/)\n\n// function looking for a span when it's actually a div:\nscreen.getByText((content, element) => {\n  return element.tagName.toLowerCase() === 'span' && content.startsWith('Hello')\n})\n```\n\n----------------------------------------\n\nTITLE: Installing jsdom for Non-Jest Environment\nDESCRIPTION: Installation command for jsdom and global-jsdom packages when not using Jest\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/setup.mdx#2025-04-12_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jsdom global-jsdom\n```\n\n----------------------------------------\n\nTITLE: HTML Example with Alt Text\nDESCRIPTION: Example HTML showing an image with alt text that can be targeted by the ByAltText queries.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/byalttext.mdx#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img alt=\"Incredibles 2 Poster\" src=\"/incredibles-2.png\" />\n```\n\n----------------------------------------\n\nTITLE: Single Page Configuration Example\nDESCRIPTION: Example showing how to configure Testing Library options for a single page load using configureOnce.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/testcafe-testing-library/intro.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {configureOnce, getByTestId} from '@testing-library/testcafe'\n\ntest('can be configured once in a single page load', async t => {\n  await configureOnce({testIdAttribute: 'data-other-test-id'})\n  await t.click(screen.getByTestId('other-id'))\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Svelte Testing\nDESCRIPTION: Jest configuration that sets up Svelte file transformation using svelte-jester, configures the JSDOM test environment, and includes the setup file for Jest-DOM matchers, enabling ESM support for Svelte files.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/setup.mdx#2025-04-12_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  transform: {\n    '^.+\\\\.svelte$': 'svelte-jester',\n  },\n  moduleFileExtensions: ['js', 'svelte'],\n  extensionsToTreatAsEsm: ['.svelte'],\n  testEnvironment: 'jsdom',\n  setupFilesAfterEnv: ['<rootDir>/jest-setup.js'],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing riot-testing-library via Package Manager\nDESCRIPTION: Command to install riot-testing-library as a development dependency using npm or yarn.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/ecosystem-riot-testing-library.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev riot-testing-library\n```\n\n----------------------------------------\n\nTITLE: Using getByAltText with Angular\nDESCRIPTION: Example of using the getByAltText query with Angular Testing Library to asynchronously render a component and find an image by its alt text using a regular expression.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/byalttext.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport {render, screen} from '@testing-library/angular'\n\nawait render(MyComponent)\nconst incrediblesPosterImg = screen.getByAltText(/incredibles.*? poster/i)\n```\n\n----------------------------------------\n\nTITLE: Installing Angular Testing Library using npm or yarn\nDESCRIPTION: Command to install Angular Testing Library and DOM Testing Library as dev dependencies using npm or yarn.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/intro.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/angular @testing-library/dom\n```\n\n----------------------------------------\n\nTITLE: Configuring React Testing Library\nDESCRIPTION: Shows how to use the configure function to set global options for React Testing Library, specifically enabling strict mode.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/api.mdx#2025-04-12_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {configure} from '@testing-library/react'\n\nconfigure({reactStrictMode: true})\n```\n\n----------------------------------------\n\nTITLE: Installing Testing Dependencies for Jest\nDESCRIPTION: Command to install necessary development dependencies for using Svelte Testing Library with Jest, including the testing library, jest-dom, svelte-jester for Svelte file transformation, Jest itself, and the JSDOM environment.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/setup.mdx#2025-04-12_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev \\\n  @testing-library/svelte \\\n  @testing-library/jest-dom \\\n  svelte-jester \\\n  jest \\\n  jest-environment-jsdom\n```\n\n----------------------------------------\n\nTITLE: Adding Vitest to Qwik Project\nDESCRIPTION: Command to add Vitest to an existing Qwik project using the Qwik CLI, which sets up the basic configuration for using Vitest as the test runner.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/qwik-testing-library/setup.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run qwik add vitest\n```\n\n----------------------------------------\n\nTITLE: Using ByTitle Query in Cypress Testing\nDESCRIPTION: Demonstrates how to use the findByTitle method in Cypress testing to assert the existence of elements by their title.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/bytitle.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.findByTitle('Delete').should('exist')\ncy.findByTitle('Close').should('exist')\n```\n\n----------------------------------------\n\nTITLE: Installing Solid Testing Library with npm or yarn\nDESCRIPTION: Command to install the Solid Testing Library as a development dependency in your project. The npm2yarn directive allows rendering this command for both npm and yarn package managers.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/solid-testing-library/intro.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @solidjs/testing-library\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Change Detection in Angular Testing Library\nDESCRIPTION: Shows how to disable automatic change detection after rendering using the detectChangesOnRender option in the render method.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait render(AppComponent, {detectChangesOnRender: false})\n```\n\n----------------------------------------\n\nTITLE: Installing React Testing Library with TypeScript support\nDESCRIPTION: Command to install React Testing Library with TypeScript type definitions for React and React DOM to get full type coverage.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/intro.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/react @testing-library/dom @types/react @types/react-dom\n```\n\n----------------------------------------\n\nTITLE: Adding Test Scripts to Package.json\nDESCRIPTION: Configuration of npm scripts in package.json for running tests with Vitest, including options for running tests once, with UI, or in watch mode.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/qwik-testing-library/setup.mdx#2025-04-12_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"vitest run\",\n    \"test:ui\": \"vitest --ui\",\n    \"test:watch\": \"vitest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Vitest with Qwik Environment Configuration\nDESCRIPTION: Setup file for Vitest that configures the global Qwik environment variables and imports jest-dom matchers for enhanced DOM testing capabilities.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/qwik-testing-library/setup.mdx#2025-04-12_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// Configure DOM matchers to work in Vitest\nimport '@testing-library/jest-dom/vitest'\n\n// This has to run before qdev.ts loads. `beforeAll` is too late\nglobalThis.qTest = false // Forces Qwik to run as if it was in a Browser\nglobalThis.qRuntimeQrl = true\nglobalThis.qDev = true\nglobalThis.qInspector = false\n```\n\n----------------------------------------\n\nTITLE: PointerInput Type Definition\nDESCRIPTION: TypeScript definition showing that PointerInput can be either a single PointerActionInput or an array of PointerActionInput objects.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-pointer.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype PointerInput = PointerActionInput | Array<PointerActionInput>\n```\n\n----------------------------------------\n\nTITLE: Installing testing-library-selector via npm or yarn\nDESCRIPTION: Command to install the testing-library-selector package as a dev dependency using npm or yarn.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/ecosystem-testing-library-selector.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev testing-library-selector\n```\n\n----------------------------------------\n\nTITLE: Multiple Mouse Button Press Example\nDESCRIPTION: Example of declaring multiple press actions at the same position, which can be written using an object with keys property or just the keys string directly.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-pointer.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\npointer({keys: '[MouseLeft][MouseRight]'})\n// or\npointer('[MouseLeft][MouseRight]')\n```\n\n----------------------------------------\n\nTITLE: Enabling jsdom for Individual Tests\nDESCRIPTION: Docblock configuration to enable jsdom environment for specific test files\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/setup.mdx#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @jest-environment jsdom\n */\n```\n\n----------------------------------------\n\nTITLE: Installing user-event v13 with npm or yarn\nDESCRIPTION: Command to install user-event v13 and its dependency @testing-library/dom using npm or yarn.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/user-event @testing-library/dom\n```\n\n----------------------------------------\n\nTITLE: Running Mocha with Marko Server-Side Testing\nDESCRIPTION: Command line instruction for running Mocha tests with the Marko require hook for server-side component testing.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/marko-testing-library/setup.mdx#2025-04-12_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nmocha --require marko/node-require\n```\n\n----------------------------------------\n\nTITLE: Press and Release Mouse Button Separately\nDESCRIPTION: Example showing how to press a button without releasing it (using >) and how to release a previously pressed button (using /).\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-pointer.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npointer('[MouseLeft>]') // press the left mouse button\npointer('[/MouseLeft]') // release the left mouse button\n```\n\n----------------------------------------\n\nTITLE: Installing react-select-event Package\nDESCRIPTION: Command to install react-select-event as a dev dependency using npm or yarn.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/ecosystem-react-select-event.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev react-select-event\n```\n\n----------------------------------------\n\nTITLE: Excluding Component Declaration in Angular Testing Library\nDESCRIPTION: Demonstrates how to exclude a component from being automatically declared using the excludeComponentDeclaration option in the render method.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/angular-testing-library/api.mdx#2025-04-12_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait render(AppComponent, {\n  imports: [AppModule], // a module that includes AppComponent\n  excludeComponentDeclaration: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring jsdom-fifteen Environment\nDESCRIPTION: Jest configuration to enable jsdom-fifteen environment for Jest 24 or lower\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/setup.mdx#2025-04-12_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n module.exports = {\n+  testEnvironment: 'jest-environment-jsdom-fifteen',\n   // ... other options ...\n }\n```\n\n----------------------------------------\n\nTITLE: Basic Character Input\nDESCRIPTION: Example of typing simple printable characters using the keyboard API.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-keyboard.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nkeyboard('foo') // translates to: f, o, o\n```\n\n----------------------------------------\n\nTITLE: Installing jest-dom with npm or yarn\nDESCRIPTION: Command to install jest-dom as a dev dependency using npm or yarn.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/ecosystem-jest-dom.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/jest-dom\n```\n\n----------------------------------------\n\nTITLE: PointerTarget Interface Definition\nDESCRIPTION: TypeScript interface defining PointerTarget, which specifies the target element and optional coordinates for pointer positioning.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-pointer.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PointerTarget {\n  target: Element\n  coords?: PointerCoords\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Print Limit in npm Tests\nDESCRIPTION: Command to set the DEBUG_PRINT_LIMIT environment variable when running tests to control DOM output size.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-debugging.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG_PRINT_LIMIT=10000 npm test\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Table in HTML\nDESCRIPTION: HTML table structure displaying contributors to the Testing Library documentation. Each table cell contains a contributor's avatar, name, and contribution type indicated by an emoji.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/README.md#2025-04-12_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://vojta.io\"><img src=\"https://avatars2.githubusercontent.com/u/25487857?v=4?s=100\" width=\"100px;\" alt=\"Vojta Holik\"/><br /><sub><b>Vojta Holik</b></sub></a><br /><a href=\"#design-vojtaholik\" title=\"Design\">🎨</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://tech.agilitynerd.com/\"><img src=\"https://avatars3.githubusercontent.com/u/184171?v=4?s=100\" width=\"100px;\" alt=\"Steve Schwarz\"/><br /><sub><b>Steve Schwarz</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=saschwarz\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/aayushrajvanshi\"><img src=\"https://avatars0.githubusercontent.com/u/14968551?v=4?s=100\" width=\"100px;\" alt=\"Aayush Rajvanshi\"/><br /><sub><b>Aayush Rajvanshi</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=aayushrajvanshi\" title=\"Documentation\">📖</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://eugielimpin.com\"><img src=\"https://avatars3.githubusercontent.com/u/431442?v=4?s=100\" width=\"100px;\" alt=\"Eugie Limpin\"/><br /><sub><b>Eugie Limpin</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=eugiellimpin\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://hsiangyu.com\"><img src=\"https://avatars3.githubusercontent.com/u/7204070?v=4?s=100\" width=\"100px;\" alt=\"Kevin\"/><br /><sub><b>Kevin</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=KevinHu2014\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jennifer-shehane\"><img src=\"https://avatars1.githubusercontent.com/u/1271364?v=4?s=100\" width=\"100px;\" alt=\"Jennifer Shehane\"/><br /><sub><b>Jennifer Shehane</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=jennifer-shehane\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/stevetaggart\"><img src=\"https://avatars3.githubusercontent.com/u/11730266?v=4?s=100\" width=\"100px;\" alt=\"Steve Taggart\"/><br /><sub><b>Steve Taggart</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=stevetaggart\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://stephensugden.com\"><img src=\"https://avatars3.githubusercontent.com/u/82634?v=4?s=100\" width=\"100px;\" alt=\"Stephen Sugden\"/><br /><sub><b>Stephen Sugden</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=grncdr\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://samitier.github.io\"><img src=\"https://avatars2.githubusercontent.com/u/4160121?v=4?s=100\" width=\"100px;\" alt=\"Blai Samitier\"/><br /><sub><b>Blai Samitier</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=Samitier\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/vernonk\"><img src=\"https://avatars1.githubusercontent.com/u/74096?v=4?s=100\" width=\"100px;\" alt=\"Vernon Kesner\"/><br /><sub><b>Vernon Kesner</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=vernonk\" title=\"Documentation\">📖</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/wdoug\"><img src=\"https://avatars3.githubusercontent.com/u/5432102?v=4?s=100\" width=\"100px;\" alt=\"Will Douglas\"/><br /><sub><b>Will Douglas</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=wdoug\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://velog.io/@head\"><img src=\"https://avatars0.githubusercontent.com/u/40166539?v=4?s=100\" width=\"100px;\" alt=\"Head\"/><br /><sub><b>Head</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=HTMLhead\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mynar7\"><img src=\"https://avatars0.githubusercontent.com/u/32332479?v=4?s=100\" width=\"100px;\" alt=\"Lee\"/><br /><sub><b>Lee</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=mynar7\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://mario.dev\"><img src=\"https://avatars1.githubusercontent.com/u/2677072?v=4?s=100\" width=\"100px;\" alt=\"Mario Beltrán Alarcón\"/><br /><sub><b>Mario Beltrán Alarcón</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=Belco90\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jameslevine\"><img src=\"https://avatars0.githubusercontent.com/u/41184245?v=4?s=100\" width=\"100px;\" alt=\"jameslevine\"/><br /><sub><b>jameslevine</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=jameslevine\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mihar-22\"><img src=\"https://avatars2.githubusercontent.com/u/14304599?v=4?s=100\" width=\"100px;\" alt=\"Rahim Alwer\"/><br /><sub><b>Rahim Alwer</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=mihar-22\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.btorange.com\"><img src=\"https://avatars1.githubusercontent.com/u/1797160?v=4?s=100\" width=\"100px;\" alt=\"Chenjia\"/><br /><sub><b>Chenjia</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=ariesjia\" title=\"Documentation\">📖</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://blog.staz.be\"><img src=\"https://avatars0.githubusercontent.com/u/82500?v=4?s=100\" width=\"100px;\" alt=\"Olivier Le Thanh Duong\"/><br /><sub><b>Olivier Le Thanh Duong</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=olethanh\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://kubajastrz.com\"><img src=\"https://avatars0.githubusercontent.com/u/6443113?v=4?s=100\" width=\"100px;\" alt=\"Jakub Jastrzębski\"/><br /><sub><b>Jakub Jastrzębski</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=KubaJastrz\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://russianbrandgardeners.com\"><img src=\"https://avatars1.githubusercontent.com/u/640657?v=4?s=100\" width=\"100px;\" alt=\"Ivan Galiatin\"/><br /><sub><b>Ivan Galiatin</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=trurl-master\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/HendrikRoehm\"><img src=\"https://avatars3.githubusercontent.com/u/26203080?v=4?s=100\" width=\"100px;\" alt=\"Hendrik Röhm\"/><br /><sub><b>Hendrik Röhm</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=HendrikRoehm\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://samvk.com\"><img src=\"https://avatars1.githubusercontent.com/u/12996081?v=4?s=100\" width=\"100px;\" alt=\"Sam Kauffman\"/><br /><sub><b>Sam Kauffman</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=samvk\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://turadg.aleahmad.net/\"><img src=\"https://avatars1.githubusercontent.com/u/21505?v=4?s=100\" width=\"100px;\" alt=\"Turadg Aleahmad\"/><br /><sub><b>Turadg Aleahmad</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=turadg\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/MarkGeeRomano\"><img src=\"https://avatars1.githubusercontent.com/u/13630752?v=4?s=100\" width=\"100px;\" alt=\"mark g romano\"/><br /><sub><b>mark g romano</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=MarkGeeRomano\" title=\"Documentation\">📖</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/arturoromeroslc\"><img src=\"https://avatars0.githubusercontent.com/u/7406639?v=4?s=100\" width=\"100px;\" alt=\"Arturo Romero\"/><br /><sub><b>Arturo Romero</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=arturoromeroslc\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.dustinsoftware.com\"><img src=\"https://avatars3.githubusercontent.com/u/942358?v=4?s=100\" width=\"100px;\" alt=\"Dustin Masters\"/><br /><sub><b>Dustin Masters</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=dustinsoftware\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.darrenlester.com\"><img src=\"https://avatars2.githubusercontent.com/u/19534488?v=4?s=100\" width=\"100px;\" alt=\"Darren Lester\"/><br /><sub><b>Darren Lester</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=darren-lester\" title=\"Documentation\">📖</a></td>\n```\n\n----------------------------------------\n\nTITLE: Disabling Color Output in npm Tests\nDESCRIPTION: Command to disable colorized output when running tests using the COLORS environment variable.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/api-debugging.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCOLORS=false npm test\n```\n\n----------------------------------------\n\nTITLE: Configuring TestCafe Client Scripts\nDESCRIPTION: JSON configuration for TestCafe to include the Testing Library DOM module as a client script.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/testcafe-testing-library/intro.mdx#2025-04-12_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clientScripts\": [\n    { \"module\": \"@testing-library/dom/dist/@testing-library/dom.umd.js\" }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Manual Cleanup of Rendered Components\nDESCRIPTION: Demonstrates how to manually clean up rendered components using the global cleanup function, which removes all components and resets the testing environment.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/marko-testing-library/api.mdx#2025-04-12_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render, cleanup, screen} from '@marko/testing-library'\nimport Greeting from './greeting.marko'\n\nawait render(Greeting, {name: 'Marko'})\n\nexpect(screen.getByText(/Marko/)).toBeInTheDocument()\n\n// manually cleanup the component before the test is finished\ncleanup()\nexpect(screen.queryByText(/Marko/)).toBeNull()\n```\n\n----------------------------------------\n\nTITLE: Embedding Codesandbox iframe in React JSX\nDESCRIPTION: This code snippet demonstrates how to embed a Codesandbox iframe within a React component, including styling and sandbox attributes for security.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-codesandbox.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/github/kentcdodds/react-testing-library-examples/tree/main/?expanddevtools=1&fontsize=13&hidenavigation=1&initialpath=%2F__tests__%2Fasync.js&module=%2Fsrc%2F__tests__%2Fasync.js&moduleview=1&previewwindow=tests&view=editor\"\n  style={{\n    width: '100%',\n    height: 500,\n    border: 0,\n    borderRadius: 4,\n    overflow: 'hidden',\n  }}\n  sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: HTML Element Example for Text Querying\nDESCRIPTION: Example HTML structure used to demonstrate text querying capabilities in Vue Testing Library\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/vue-testing-library/cheatsheet.mdx#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>Hello World</div>\n```\n\n----------------------------------------\n\nTITLE: Running Vitest Tests with npm/yarn\nDESCRIPTION: Command to execute the tests using the npm test script configured for Vitest.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/setup.mdx#2025-04-12_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: HTML Example for TextMatch Testing\nDESCRIPTION: Sample HTML markup used to demonstrate text matching capabilities.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/about.mdx#2025-04-12_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div>Hello World</div>\n```\n\n----------------------------------------\n\nTITLE: Global Configuration JavaScript\nDESCRIPTION: JavaScript configuration for setting up global Testing Library options.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/testcafe-testing-library/intro.mdx#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.TestingLibraryDom.configure({testIdAttribute: 'data-automation-id'})\n```\n\n----------------------------------------\n\nTITLE: Installing Vitest UI for Visual Test Runner\nDESCRIPTION: Command to install Vitest UI, which provides a browser-based interface for viewing and interacting with test results.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/setup.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @vitest/ui\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Breaking Change in dom-testing-library v4\nDESCRIPTION: This code snippet shows an example of a potential breaking change in dom-testing-library v4. It demonstrates how the new version might reveal bugs in existing tests.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/blog/2019-04-25-new-org.mdx#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/9zw1wv59mw?fontsize=14&module=%2Fsrc%2F__tests__%2Findex.js&previewwindow=tests&view=editor\"\n  title=\"React Codesandbox\"\n  style={{width: '100%', height:500, border:0, borderRadius: 4, overflow:'hidden'}}\n  sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Fixing requestAnimationFrame in Testing Environment\nDESCRIPTION: Implementation to fix requestAnimationFrame behavior in Vitest with jsdom by providing a custom implementation using setTimeout.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/faq.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  const raf = fn => setTimeout(() => fn(new Date()), 16)\n  vi.stubGlobal('requestAnimationFrame', raf)\n})\n\n// Alternatively, set `unstubGlobals: true` in vitest.config.js\nafterEach(() => {\n  vi.unstubAllGlobals()\n})\n```\n\n----------------------------------------\n\nTITLE: Installing jsdom for Jest 28\nDESCRIPTION: Installation command for jest-environment-jsdom package required for Jest 28+\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/setup.mdx#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest-environment-jsdom\n```\n\n----------------------------------------\n\nTITLE: Example of Editing a Documentation Page\nDESCRIPTION: Example markdown structure for an existing documentation page that needs to be edited, showing the frontmatter format with ID and title.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/README.md#2025-04-12_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: page-needs-edit\ntitle: This Doc Needs To Be Edited\n---\n\nEdit me...\n```\n\n----------------------------------------\n\nTITLE: HTML Example for ByPlaceholderText Query\nDESCRIPTION: Demonstrates an HTML input element with a placeholder attribute that can be targeted by the ByPlaceholderText query.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/byplaceholdertext.mdx#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input placeholder=\"Username\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DOM Testing Library via npm/yarn\nDESCRIPTION: Command to install @testing-library/dom as a development dependency using either npm or yarn.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/dom-testing-library/install.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/dom\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Table in HTML\nDESCRIPTION: This HTML snippet creates a table to display contributors to the Testing Library documentation project. It includes avatars, names, and links to contributors' profiles, as well as icons indicating their contribution type.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/README.md#2025-04-12_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<tr>\n  <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/jgsneves/\"><img src=\"https://avatars.githubusercontent.com/u/48700146?v=4?s=100\" width=\"100px;\" alt=\"JOAO GABRIEL SANTOS NEVES\"/><br /><sub><b>JOAO GABRIEL SANTOS NEVES</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=jgsneves\" title=\"Documentation\">📖</a></td>\n  <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://lukeingalls.com\"><img src=\"https://avatars.githubusercontent.com/u/45518011?v=4?s=100\" width=\"100px;\" alt=\"Luke Ingalls\"/><br /><sub><b>Luke Ingalls</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=lukeingalls\" title=\"Documentation\">📖</a></td>\n  <!-- ... additional contributor entries ... -->\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Vitest Global Configuration\nDESCRIPTION: Configuration to enable globals in Vitest for automatic cleanup\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/setup.mdx#2025-04-12_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineConfig} from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    globals: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Vitest Manual Cleanup Configuration\nDESCRIPTION: Setup for manual cleanup in Vitest without globals\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/setup.mdx#2025-04-12_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineConfig} from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    setupFiles: ['vitest-cleanup-after-each.ts'],\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {cleanup} from '@testing-library/react'\nimport {afterEach} from 'vitest'\n\nafterEach(() => {\n  cleanup()\n})\n```\n\n----------------------------------------\n\nTITLE: Using Cypress Testing Library Queries\nDESCRIPTION: Shows how to use Testing Library queries within Cypress tests.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/about.mdx#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.findByLabelText('Example').should('exist')\n```\n\n----------------------------------------\n\nTITLE: Installing query-extensions Package via NPM/Yarn\nDESCRIPTION: Command to install the query-extensions package as a dev dependency in a project using either npm or yarn package managers.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/ecosystem-query-extensions.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev query-extensions\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Information in HTML\nDESCRIPTION: This HTML snippet represents a single contributor's information in a table cell. It includes the contributor's avatar, name, and contribution type. The structure is repeated for multiple contributors to form a grid.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/README.md#2025-04-12_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/iswara108\"><img src=\"https://avatars3.githubusercontent.com/u/9681451?v=4?s=100\" width=\"100px;\" alt=\"Iswara Chaitanya\"/><br /><sub><b>Iswara Chaitanya</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=iswara108\" title=\"Documentation\">📖</a></td>\n```\n\n----------------------------------------\n\nTITLE: Installing Testing Dependencies with npm/yarn for Vitest\nDESCRIPTION: Command to install necessary development dependencies for using Svelte Testing Library with Vitest, including the testing library itself, jest-dom for additional matchers, Svelte's Vite plugin, Vitest, and jsdom for DOM testing environment.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/setup.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev \\\n  @testing-library/svelte \\\n  @testing-library/jest-dom \\\n  @sveltejs/vite-plugin-svelte \\\n  vitest \\\n  jsdom\n```\n\n----------------------------------------\n\nTITLE: Mocha Watch Mode Cleanup Configuration\nDESCRIPTION: Configuration for automatic cleanup in Mocha's watch mode using root hooks\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/setup.mdx#2025-04-12_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst {cleanup} = require('@testing-library/react')\n\nexports.mochaHooks = {\n  afterEach() {\n    cleanup()\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Manual DOM Querying Example\nDESCRIPTION: Shows how to use manual DOM querying as an alternative to Testing Library queries.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/about.mdx#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n// @testing-library/react\nconst {container} = render(<MyComponent />)\nconst foo = container.querySelector('[data-foo=\"bar\"]')\n```\n\n----------------------------------------\n\nTITLE: Installing Nightwatch Testing Library with NPM/Yarn\nDESCRIPTION: Command to install the @testing-library/nightwatch package as a dev dependency.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/nightwatch-testing-library/intro.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/nightwatch\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for SvelteKit Testing\nDESCRIPTION: Alternative Vite configuration for testing in SvelteKit projects, using the SvelteKit plugin instead of the standard Svelte plugin.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/setup.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {defineConfig} from 'vitest/config'\nimport {sveltekit} from '@sveltejs/kit/vite'\nimport {svelteTesting} from '@testing-library/svelte/vite'\n\nexport default defineConfig({\n  plugins: [sveltekit(), svelteTesting()],\n  test: {\n    environment: 'jsdom',\n    setupFiles: ['./vitest-setup.js'],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing jsdom for Jest 24\nDESCRIPTION: Installation command for jest-environment-jsdom-fifteen package for Jest 24 or lower\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/setup.mdx#2025-04-12_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest-environment-jsdom-fifteen\n```\n\n----------------------------------------\n\nTITLE: Installing TestCafe Testing Library Dependencies\nDESCRIPTION: Command to install TestCafe and Testing Library packages as development dependencies.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/testcafe-testing-library/intro.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev testcafe @testing-library/testcafe\n```\n\n----------------------------------------\n\nTITLE: Shallow Testing React Transition Group Components\nDESCRIPTION: This snippet demonstrates a shallow testing approach for a React component using CSSTransition. It mocks the CSSTransition component and tests the props passed to it, allowing for more focused and isolated component testing.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-react-transition-group.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState} from 'react'\nimport {CSSTransition} from 'react-transition-group'\nimport {render, fireEvent} from '@testing-library/react'\n\nfunction Fade({children, ...props}) {\n  return (\n    <CSSTransition {...props} timeout={1000} classNames=\"fade\">\n      {children}\n    </CSSTransition>\n  )\n}\n\nfunction HiddenMessage({initialShow}) {\n  const [show, setShow] = useState(initialShow || false)\n  const toggle = () => setShow(prevState => !prevState)\n  return (\n    <div>\n      <button onClick={toggle}>Toggle</button>\n      <Fade in={show}>\n        <div>Hello world</div>\n      </Fade>\n    </div>\n  )\n}\n\njest.mock('react-transition-group', () => {\n  const FakeCSSTransition = jest.fn(() => null)\n  return {CSSTransition: FakeCSSTransition}\n})\n\ntest('you can mock things with jest.mock', () => {\n  const {getByText} = render(<HiddenMessage initialShow={true} />)\n  const context = expect.any(Object)\n  const children = expect.any(Object)\n  const defaultProps = {children, timeout: 1000, className: 'fade'}\n  expect(CSSTransition).toHaveBeenCalledWith(\n    {in: true, ...defaultProps},\n    context,\n  )\n  fireEvent.click(getByText(/toggle/i))\n  expect(CSSTransition).toHaveBeenCalledWith(\n    {in: false, ...defaultProps},\n    expect.any(Object),\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Jest-DOM with Jest\nDESCRIPTION: Setup file for importing Jest-DOM matchers to use with Jest, enabling DOM-specific assertions in tests.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/svelte-testing-library/setup.mdx#2025-04-12_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@testing-library/jest-dom'\n```\n\n----------------------------------------\n\nTITLE: Welcome Component Implementation for Testing Examples\nDESCRIPTION: A sample React component that displays a welcome message with editable first and last name fields, used to demonstrate testing approaches.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/migrate-from-enzyme.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst Welcome = props => {\n  const [values, setValues] = useState({\n    firstName: props.firstName,\n    lastName: props.lastName,\n  })\n\n  const handleChange = event => {\n    setValues({...values, [event.target.name]: event.target.value})\n  }\n\n  return (\n    <div>\n      <h1>\n        Welcome, {values.firstName} {values.lastName}\n      </h1>\n\n      <form name=\"userName\">\n        <label>\n          First Name\n          <input\n            value={values.firstName}\n            name=\"firstName\"\n            onChange={handleChange}\n          />\n        </label>\n\n        <label>\n          Last Name\n          <input\n            value={values.lastName}\n            name=\"lastName\"\n            onChange={handleChange}\n          />\n        </label>\n      </form>\n    </div>\n  )\n}\n\nexport default Welcome\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Browser Testing with Marko\nDESCRIPTION: Jest configuration for client-side Marko component testing using the @marko/jest/preset/browser preset.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/marko-testing-library/setup.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  preset: '@marko/jest/preset/browser',\n}\n```\n\n----------------------------------------\n\nTITLE: SelectionTarget Interface Definition\nDESCRIPTION: TypeScript interface defining SelectionTarget, which specifies an optional node and offset to control document selection.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-pointer.mdx#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SelectionTarget {\n  node?: Node\n  offset?: number\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributors Table in HTML\nDESCRIPTION: This HTML snippet creates a table to display contributors to the Testing Library documentation project. It includes avatars, names, links to GitHub profiles, and contribution types for each contributor.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/README.md#2025-04-12_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://kettanaito.com\"><img src=\"https://avatars.githubusercontent.com/u/14984911?v=4?s=100\" width=\"100px;\" alt=\"Artem Zakharchenko\"/><br /><sub><b>Artem Zakharchenko</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=kettanaito\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/vadimshvetsov\"><img src=\"https://avatars.githubusercontent.com/u/16336572?v=4?s=100\" width=\"100px;\" alt=\"Vadim Shvetsov\"/><br /><sub><b>Vadim Shvetsov</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=vadimshvetsov\" title=\"Documentation\">📖</a></td>\n      <!-- ... more contributor entries ... -->\n    </tr>\n    <!-- ... more rows ... -->\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Table of Contributors in Testing Library Docs\nDESCRIPTION: This HTML snippet renders a table of contributors to the Testing Library documentation project. It includes avatar images, GitHub profile links, contributor names, and contribution types for each contributor.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/README.md#2025-04-12_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://plethorathemes.com\"><img src=\"https://avatars.githubusercontent.com/u/1638325?v=4?s=100\" width=\"100px;\" alt=\"Kostas Minaidis\"/><br /><sub><b>Kostas Minaidis</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=kostasx\" title=\"Documentation\">📖</a></td>\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/MynockSpit\"><img src=\"https://avatars.githubusercontent.com/u/5713867?v=4?s=100\" width=\"100px;\" alt=\"Than Hutchins\"/><br /><sub><b>Than Hutchins</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=MynockSpit\" title=\"Documentation\">📖</a></td>\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Information in HTML Table\nDESCRIPTION: This HTML snippet represents a portion of a table that displays contributor information. Each cell contains an avatar image, contributor name, and contribution type icons. The table is structured with rows and columns to organize multiple contributors.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/README.md#2025-04-12_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://claritydev.net\"><img src=\"https://avatars.githubusercontent.com/u/8878045?v=4?s=100\" width=\"100px;\" alt=\"Alex Khomenko\"/><br /><sub><b>Alex Khomenko</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=Clarity-89\" title=\"Documentation\">📖</a></td>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Render Method for React Native Tests\nDESCRIPTION: This code creates a custom render method that wraps components with ThemeProvider and TranslationProvider. It also re-exports everything from React Native Testing Library and overrides the render method.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-native-testing-library/setup.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {render} from '@testing-library/react-native'\nimport {ThemeProvider} from 'my-ui-lib'\nimport {TranslationProvider} from 'my-i18n-lib'\nimport defaultStrings from 'i18n/en-x-default'\n\nconst AllTheProviders = ({children}) => {\n  return (\n    <ThemeProvider theme=\"light\">\n      <TranslationProvider messages={defaultStrings}>\n        {children}\n      </TranslationProvider>\n    </ThemeProvider>\n  )\n}\n\nconst customRender = (ui, options) =>\n  render(ui, {wrapper: AllTheProviders, ...options})\n\n// re-export everything\nexport * from '@testing-library/react-native'\n\n// override render method\nexport {customRender as render}\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Grid in HTML\nDESCRIPTION: This HTML snippet creates a table-based grid layout to display contributor information. Each cell contains a contributor's GitHub avatar, name, and contribution type (e.g., documentation, code review).\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/README.md#2025-04-12_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jpenna\"><img src=\"https://avatars1.githubusercontent.com/u/16005946?v=4?s=100\" width=\"100px;\" alt=\"Juliano Penna\"/><br /><sub><b>Juliano Penna</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=jpenna\" title=\"Documentation\">📖</a></td>\n```\n\n----------------------------------------\n\nTITLE: Testing Riot.js Components with riot-testing-library\nDESCRIPTION: Example test cases demonstrating how to render and test Riot.js components using riot-testing-library. Shows usage of render function, querying elements by test ID, and simulating click events.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/ecosystem-riot-testing-library.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport render, {fireEvent} from 'riot-testing-library'\nimport TestTag from './test.tag'\n\ntest('should show count text  when rendered', () => {\n  const {queryByTestId} = render(TestTag, {count: 10})\n  expect(queryByTestId('count').textContent).toBe('10')\n})\n\ntest('should add count when click add button text', () => {\n  const {queryByTestId} = render(TestTag, {count: 1})\n  expect(queryByTestId('count').textContent).toBe('1')\n  fireEvent.click(queryByTestId('button'))\n  expect(queryByTestId('count').textContent).toBe('2')\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Table in HTML\nDESCRIPTION: This HTML snippet creates a table layout to display contributor information including avatar images, names, and contribution types. It uses inline styling for alignment and sizing of cells.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/README.md#2025-04-12_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/abelhbeyene\"><img src=\"https://avatars.githubusercontent.com/u/12272815?v=4?s=100\" width=\"100px;\" alt=\"Abel\"/><br /><sub><b>Abel</b></sub></a><br /><a href=\"https://github.com/testing-library/testing-library-docs/commits?author=abelhbeyene\" title=\"Documentation\">📖</a></td>\n```\n\n----------------------------------------\n\nTITLE: Complete React Intl Testing Example\nDESCRIPTION: Comprehensive example demonstrating React Intl testing implementation, including component definition, test setup, and assertions for formatted dates.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-react-intl.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport '@testing-library/jest-dom'\nimport {render, screen, setupTests} from '../test-utils.js'\nimport {FormattedDate} from 'react-intl'\n\nconst FormatDateView = () => {\n  return (\n    <div data-testid=\"date-display\">\n      <FormattedDate\n        value=\"2019-03-11\"\n        timeZone=\"utc\"\n        day=\"2-digit\"\n        month=\"2-digit\"\n        year=\"numeric\"\n      />\n    </div>\n  )\n}\n\nsetupTests()\n\ntest('it should render FormattedDate and have a formatted pt date', () => {\n  render(<FormatDateView />)\n  expect(screen.getByTestId('date-display')).toHaveTextContent('11/03/2019')\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering an Image Link in JSX\nDESCRIPTION: This snippet demonstrates how to create a linked image in JSX that directs to a YouTube video about React Testing Library. It includes width specification, alt text, and custom styling.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-external.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<a href=\"https://youtu.be/JKOwJUM4_RM\">\n  <img\n    width=\"200px\"\n    alt=\"what is react testing library\"\n    src=\"https://img.youtube.com/vi/JKOwJUM4_RM/0.jpg\"\n    style={{marginLeft: 36}}\n  />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Testing Input Values with Enzyme in React\nDESCRIPTION: This snippet demonstrates how to test input values in a React component using Enzyme. It shallow renders a Welcome component and checks if the input fields have the correct initial values.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/migrate-from-enzyme.mdx#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\ntest('has correct input value', () => {\n  const wrapper = shallow(<Welcome firstName=\"John\" lastName=\"Doe\" />)\n  expect(wrapper.find('input[name=\"firstName\"]').value).toEqual('John')\n  expect(wrapper.find('input[name=\"lastName\"]').value).toEqual('Doe')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Combined Server and Browser Testing\nDESCRIPTION: Advanced Jest configuration using projects to run both server-side and client-side tests with different presets and test patterns.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/marko-testing-library/setup.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  projects: [\n    {\n      displayName: 'server',\n      preset: '@marko/jest/preset/node',\n      testRegex: '/__tests__/[^.]+\\\\.server\\\\.js$',\n    },\n    {\n      displayName: 'browser',\n      preset: '@marko/jest/preset/browser',\n      testRegex: '/__tests__/[^.]+\\\\.browser\\\\.js$',\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Render Function for React Router Testing\nDESCRIPTION: This snippet shows how to create a custom render function that wraps the component with a router, reducing boilerplate in tests. It also demonstrates how to use this custom render function in tests.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/example-react-router.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// test utils file\nconst renderWithRouter = (ui, {route = '/'} = {}) => {\n  window.history.pushState({}, 'Test page', route)\n\n  return {\n    user: userEvent.setup(),\n    ...render(ui, {wrapper: BrowserRouter}),\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// app.test.js\ntest('full app rendering/navigating', async () => {\n  const {user} = renderWithRouter(<App />)\n  expect(screen.getByText(/you are home/i)).toBeInTheDocument()\n\n  await user.click(screen.getByText(/about/i))\n\n  expect(screen.getByText(/you are on the about page/i)).toBeInTheDocument()\n})\n\ntest('landing on a bad page', () => {\n  renderWithRouter(<App />, {route: '/something-that-does-not-match'})\n\n  expect(screen.getByText(/no match/i)).toBeInTheDocument()\n})\n\ntest('rendering a component that uses useLocation', () => {\n  const route = '/some-route'\n  renderWithRouter(<LocationDisplay />, {route})\n\n  expect(screen.getByTestId('location-display')).toHaveTextContent(route)\n})\n```\n\n----------------------------------------\n\nTITLE: Adding a New Doc to the Sidebar\nDESCRIPTION: JavaScript example showing how to reference a newly created doc in the sidebar.json configuration file by adding its ID to an existing category.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/README.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Add newly-created-doc to the Getting Started category of docs\n{\n  \"docs\": {\n    \"Getting Started\": [\n      \"quick-start\",\n      \"newly-created-doc\" // new doc here\n    ],\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using keyboard() Function with Legacy Modifiers\nDESCRIPTION: Example of using legacy modifier syntax with userEvent.keyboard(), showing how to control when modifiers are pressed and released.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/v13.mdx#2025-04-12_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nuserEvent.keyboard('{shift}{ctrl/}a{/shift}') // translates to: Shift(down), Control(down+up), a, Shift(up)\n```\n\n----------------------------------------\n\nTITLE: Using Queries with and without Screen\nDESCRIPTION: Demonstrates how to use Testing Library queries both with the recommended screen utility and with a specific container when not using screen.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/about.mdx#2025-04-12_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {screen, getByLabelText} from '@testing-library/dom'\n\n// With screen:\nconst inputNode1 = screen.getByLabelText('Username')\n\n// Without screen, you need to provide a container:\nconst container = document.querySelector('#app')\nconst inputNode2 = getByLabelText(container, 'Username')\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Checkbox Component in React\nDESCRIPTION: This snippet defines a simple Checkbox component in React, which includes a checkbox input and an associated label.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/migrate-from-enzyme.mdx#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\n\nconst Checkbox = () => {\n  return (\n    <div>\n      <label htmlFor=\"checkbox\">Check</label>\n      <input id=\"checkbox\" type=\"checkbox\" />\n    </div>\n  )\n}\n\nexport default Checkbox\n```\n\n----------------------------------------\n\nTITLE: Example of Editing a Blog Post\nDESCRIPTION: Example markdown structure for an existing blog post that needs to be edited, showing the frontmatter format with ID and title.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/README.md#2025-04-12_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: post-needs-edit\ntitle: This Blog Post Needs To Be Edited\n---\n\nEdit me...\n```\n\n----------------------------------------\n\nTITLE: Creating a New Documentation Page\nDESCRIPTION: Example showing how to create a new markdown documentation file with proper frontmatter structure including ID and title.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/README.md#2025-04-12_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: newly-created-doc\ntitle: This Doc Needs To Be Edited\n---\n\nMy new content here..\n```\n\n----------------------------------------\n\nTITLE: Using Screen Object in DOM Testing Library\nDESCRIPTION: Demonstrates how to use the screen object to query DOM elements in vanilla JavaScript using @testing-library/dom.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/about.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {screen} from '@testing-library/dom'\n\ndocument.body.innerHTML = `\n  <label for=\"example\">Example</label>\n  <input id=\"example\" />\n`\n\nconst exampleInput = screen.getByLabelText('Example')\n```\n\n----------------------------------------\n\nTITLE: Using Screen Object in Angular Testing Library\nDESCRIPTION: Demonstrates querying elements using the screen object in Angular Testing Library.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/queries/about.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {render, screen} from '@testing-library/angular'\n\nawait render(`\n  <div>\n    <label for=\"example\">Example</label>\n    <input id=\"example\" />\n  </div>\n`)\n\nconst exampleInput = screen.getByLabelText('Example')\n```\n\n----------------------------------------\n\nTITLE: Installing React Testing Library and Jest-DOM Dependencies\nDESCRIPTION: Command for installing React Testing Library and jest-dom packages as development dependencies using npm or yarn.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/react-testing-library/migrate-from-enzyme.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/react @testing-library/jest-dom\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Testing Library Docs\nDESCRIPTION: Command to install all the dependencies required for the Testing Library documentation website.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Install dependencies\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: KeyboardEvent.code Syntax\nDESCRIPTION: Example of using KeyboardEvent.code syntax for keyboard input simulation.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/docs/user-event/api-keyboard.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nkeyboard('[ShiftLeft][KeyF][KeyO][KeyO]') // translates to: Shift, f, o, o\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to start the development server for the Testing Library documentation website.\nSOURCE: https://github.com/testing-library/testing-library-docs/blob/main/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Start the site\n$ npm start\n```"
  }
]