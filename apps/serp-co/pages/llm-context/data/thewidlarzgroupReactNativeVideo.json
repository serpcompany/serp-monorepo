[
  {
    "owner": "thewidlarzgroup",
    "repo": "react-native-video",
    "content": "TITLE: Implementing CMCD in React Native Video Component\nDESCRIPTION: Example implementation of CMCD data in a React Native Video component, demonstrating the usage of custom keys, session information, object parameters, and status data with the recommended structure.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n<Video\n  source={{\n    uri: 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8',\n    cmcd: {\n      mode: CmcdMode.MODE_QUERY_PARAMETER,\n      request: {\n        'com-custom-key': 'custom-value'\n      },\n      session: {\n        sid: 'session-id'\n      },\n      object: {\n        br: '3000',\n        d: '4000'\n      },\n      status: {\n        rtp: '1200'\n      }\n    }\n  }}\n  // or other video props\n/>\n```\n\n----------------------------------------\n\nTITLE: Loading Video Asset with require in React Native Video\nDESCRIPTION: Two examples showing how to load video assets using require: the deprecated direct method and the recommended URI method available from version 6.0.0-beta.6.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst sintel = require('./sintel.mp4');\nsource = { sintel };\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst sintel = require('./sintel.mp4');\nsource={{ uri: sintel }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Player Component in React Native\nDESCRIPTION: This code demonstrates how to import and use the Video component in a React Native application. It includes setting up a reference to the video component, handling buffering and error events, and applying styles to the video player.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Load the module\n\nimport Video, {VideoRef} from 'react-native-video';\n\n// Within your render function, assuming you have a file called\n// \"background.mp4\" in your project. You can include multiple videos\n// on a single screen if you like.\n\nconst VideoPlayer = () => {\n const videoRef = useRef<VideoRef>(null);\n const background = require('./background.mp4');\n\n return (\n   <Video \n    // Can be a URL or a local file.\n    source={background}\n    // Store reference  \n    ref={videoRef}\n    // Callback when remote video is buffering                                      \n    onBuffer={onBuffer}\n    // Callback when video cannot be loaded              \n    onError={onError}               \n    style={styles.backgroundVideo}\n   />\n )\n}\n\n// Later on in your styles..\nvar styles = StyleSheet.create({\n  backgroundVideo: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Playback in React Native\nDESCRIPTION: This snippet demonstrates how to import and use the Video component from react-native-video. It shows setting up a video source, handling callbacks for buffering and errors, and applying styles to the video player.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Load the module\nimport Video, { VideoRef } from 'react-native-video';\n\n// Inside your render function, assuming you have a file called\n// \"background.mp4\" in your project. You can include multiple videos\n// on a single screen if needed.\n\nconst VideoPlayer = () => {\n  const videoRef = useRef<VideoRef>(null);\n  const background = require('./background.mp4');\n\n  return (\n    <Video\n      // Can be a URL or a local file.\n      source={background}\n      // Store reference  \n      ref={videoRef}\n      // Callback when remote video is buffering                                      \n      onBuffer={onBuffer}\n      // Callback when the video cannot be loaded              \n      onError={onError}               \n      style={styles.backgroundVideo}\n    />\n  );\n};\n\n// Later in your styles...\nvar styles = StyleSheet.create({\n  backgroundVideo: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Example Using Video Methods in React Native\nDESCRIPTION: An example demonstrating how to use various video control methods including fullscreen controls, playback controls, saving video, and seeking to a specific position.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/methods.mdx#2025-04-16_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nconst videoRef = useRef<VideoRef>(null);\n\nconst handleVideoControls = async () => {\n  if (!videoRef.current) return;\n\n  // Fullscreen controls\n  videoRef.current.presentFullscreenPlayer();\n  videoRef.current.dismissFullscreenPlayer();\n\n  // Playback controls\n  videoRef.current.pause();\n  videoRef.current.resume();\n\n  // Save video\n  const response = await videoRef.current.save();\n  console.log('Saved video path:', response.uri);\n\n  // Seek to 200s (or with tolerance on iOS)\n  videoRef.current.seek(200);\n  videoRef.current.seek(200, 10);\n};\n\nreturn (\n  <Video\n    ref={videoRef}\n    source={{ uri: 'https://www.w3schools.com/html/mov_bbb.mp4' }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Control Styles in React Native Video for Android\nDESCRIPTION: Example of customizing the appearance and behavior of video player controls on Android using the controlsStyles prop. This includes options to hide specific controls, adjust seek increments, and set labels for live content.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncontrolsStyles={{\n  hidePosition: false,\n  hidePlayPause: false,\n  hideForward: false,\n  hideRewind: false,\n  hideNext: false,\n  hidePrevious: false,\n  hideFullscreen: false,\n  hideSeekBar: false,\n  hideDuration: false,\n  hideNavigationBarOnFullScreenMode: true,\n  hideNotificationBarOnFullScreenMode: true,\n  hideSettingButton: true,\n  seekIncrementMS: 10000,\n  liveLabel: \"LIVE\"\n}}\n```\n\n----------------------------------------\n\nTITLE: Configuring DRM Content in React Native Video\nDESCRIPTION: Example of how to configure a video source with DRM protection. This specifies the content URI along with the DRM type and license server required for playback of protected content.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  description: 'WV: Secure SD & HD (cbcs, MP4, H264)',\n  uri: 'https://storage.googleapis.com/wvmedia/cbcs/h264/tears/tears_aes_cbcs.mpd',\n  drm: {\n    type: DRMType.WIDEVINE,\n    licenseServer:\n      'https://proxy.uat.widevine.com/proxy?provider=widevine_test',\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring selectedVideoTrack in React Native Video\nDESCRIPTION: Example of how to configure the selectedVideoTrack prop to select a video track by resolution. This overrides the default Adaptive Bitrate Streaming to explicitly select a specific quality level.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nselectedVideoTrack={{\n  type: \"resolution\",\n  value: 480\n}}\n```\n\n----------------------------------------\n\nTITLE: Advanced FairPlay License Acquisition with JSON Response Handling\nDESCRIPTION: Comprehensive example of implementing a custom getLicense function for FairPlay DRM that processes JSON responses from the license server. It extracts the ckcResponse field from the server's response.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/drm.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndrm: {\n  type: DRMType.FAIRPLAY,\n  getLicense: (spcString) => {\n    const base64spc = Base64.encode(spcString);\n    return fetch('YOUR_LICENSE_SERVER_URL', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      body: JSON.stringify({\n        getFairplayLicense: {\n          foo: 'bar',\n          spcMessage: base64spc,\n        }\n      })\n    })\n      .then(response => response.json())\n      .then((response) => {\n        if (response?.getFairplayLicenseResponse?.ckcResponse) {\n          return response.getFairplayLicenseResponse.ckcResponse;\n        }\n        throw new Error('No valid response');\n      })\n      .catch((error) => console.error('CKC error', error));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-video with Package Managers\nDESCRIPTION: Commands to install react-native-video using npm or yarn package managers.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/installation.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save react-native-video\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react-native-video\n```\n\n----------------------------------------\n\nTITLE: Configuring Buffer Settings in React Native Video for Android\nDESCRIPTION: Example of setting buffer configurations for Android using the bufferConfig prop. This includes settings for minimum and maximum buffer durations, playback thresholds, and live streaming parameters.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbufferConfig={{\n  minBufferMs: 15000,\n  maxBufferMs: 50000,\n  bufferForPlaybackMs: 2500,\n  bufferForPlaybackAfterRebufferMs: 5000,\n  backBufferDurationMs: 120000,\n  cacheSizeMB: 0,\n  live: {\n      targetOffsetMs: 500,\n  },\n}}\n```\n\n----------------------------------------\n\nTITLE: Setting Text Tracks in React Native Video\nDESCRIPTION: Example of configuring textTracks prop in React Native Video. This prop allows loading of sidecar text tracks, specifying title, language, type, and URI for each track.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TextTrackType }, Video from 'react-native-video';\n\ntextTracks=[\n  {\n    title: \"English CC\",\n    language: \"en\",\n    type: TextTrackType.VTT, // \"text/vtt\"\n    uri: \"https://bitdash-a.akamaihd.net/content/sintel/subtitles/subtitles_en.vtt\"\n  },\n  {\n    title: \"Spanish Subtitles\",\n    language: \"es\",\n    type: TextTrackType.SUBRIP, // \"application/x-subrip\"\n    uri: \"https://durian.blender.org/wp-content/content/subtitles/sintel_es.srt\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example Media Load Payload in React Native Video\nDESCRIPTION: This snippet shows the structure of the payload object returned by the onLoad event of the React Native Video component. It includes information about playback capabilities, duration, natural size dimensions, and available audio, text, and video tracks.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/events.mdx#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  canPlaySlowForward: true,\n  canPlayReverse: false,\n  canPlaySlowReverse: false,\n  canPlayFastForward: false,\n  canStepForward: false,\n  canStepBackward: false,\n  currentTime: 0,\n  duration: 5910.208984375,\n  naturalSize: {\n     height: 1080\n     orientation: 'landscape'\n     width: '1920'\n  },\n  audioTracks: [\n    { language: 'es', title: 'Spanish', type: 'audio/mpeg', index: 0 },\n    { language: 'en', title: 'English', type: 'audio/mpeg', index: 1 }\n  ],\n  textTracks: [\n    { title: '#1 French', language: 'fr', index: 0, type: 'text/vtt' },\n    { title: '#2 English CC', language: 'en', index: 1, type: 'text/vtt' },\n    { title: '#3 English Director Commentary', language: 'en', index: 2, type: 'text/vtt' }\n  ],\n  videoTracks: [\n    { index: 0, bitrate: 3987904, codecs: \"avc1.640028\", height: 720, trackId: \"f1-v1-x3\", width: 1280 },\n    { index: 1, bitrate: 7981888, codecs: \"avc1.640028\", height: 1080, trackId: \"f2-v1-x3\", width: 1920 },\n    { index: 2, bitrate: 1994979, codecs: \"avc1.4d401f\", height: 480, trackId: \"f3-v1-x3\", width: 848 }\n  ],\n  trackId: \"720p 2400kbps\",\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Headers for Video Source in React Native\nDESCRIPTION: Shows how to pass custom HTTP headers when fetching a video source. This can be used for authorization or other custom header requirements.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsource={{\n  uri: \"https://www.example.com/video.mp4\",\n  headers: {\n    Authorization: 'Bearer some-token-value',\n    'X-Custom-Header': 'some value'\n  }\n}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Tracks in React Native Video\nDESCRIPTION: Shows how to load sidecar text tracks for a video. This includes specifying the title, language, type, and URI for each track. Supports various text track formats like SUBRIP, TTML, and VTT.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TextTrackType } from 'react-native-video';\n\ntextTracks=[\n  {\n    title: \"English CC\",\n    language: \"en\",\n    type: TextTrackType.VTT, // \"text/vtt\"\n    uri: \"https://bitdash-a.akamaihd.net/content/sintel/subtitles/subtitles_en.vtt\"\n  },\n  {\n    title: \"Spanish Subtitles\",\n    language: \"es\",\n    type: TextTrackType.SUBRIP, // \"application/x-subrip\"\n    uri: \"https://durian.blender.org/wp-content/content/subtitles/sintel_es.srt\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Overriding Video Metadata in React Native Video\nDESCRIPTION: Shows how to override the metadata of a video source, including title, subtitle, artist, description, and image URI. This is useful for customizing notification controls and adapting the playback experience.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nsource={{\n    uri: 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8',\n    metadata: {\n      title: 'Custom Title',\n      subtitle: 'Custom Subtitle',\n      artist: 'Custom Artist',\n      description: 'Custom Description',\n      imageUri: 'https://pbs.twimg.com/profile_images/1498641868397191170/6qW2XkuI_400x400.png'\n    }\n  }}\n```\n\n----------------------------------------\n\nTITLE: Setting Web Address Source in React Native Video\nDESCRIPTION: Example of how to set a video source using an HTTPS URL. This allows streaming content from web sources across all supported platforms.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nsource={{ uri: 'https://www.sample-videos.com/video/mp4/720/big_buck_bunny_720p_10mb.mp4' }}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Playback Position in React Native Video\nDESCRIPTION: Method to retrieve the current playback position in seconds. Throws an error if the player is not initialized.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/methods.mdx#2025-04-16_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\ngetCurrentPosition(): Promise<number>\n```\n\n----------------------------------------\n\nTITLE: Configuring DRM with Custom Headers for Widevine\nDESCRIPTION: Example of setting up Widevine DRM configuration with custom headers for license server authentication. The X-AxDRM-Message header provides the DRM authorization token.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/drm.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndrm: {\n  type: DRMType.WIDEVINE,\n  licenseServer: 'https://drm-widevine-licensing.axtest.net/AcquireLicense',\n  headers: {\n    'X-AxDRM-Message': 'your-drm-header',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Seeking to Position in React Native Video\nDESCRIPTION: Method to seek to a specific position in seconds. Must be called after onLoad event and triggers the onSeek event.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/methods.mdx#2025-04-16_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nseek(seconds: number)\n```\n\n----------------------------------------\n\nTITLE: Setting Media Source Dynamically in React Native Video\nDESCRIPTION: Method to update the media source dynamically. This overrides the source prop.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/methods.mdx#2025-04-16_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nsetSource(source: ReactVideoSource): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Handling Text Tracks Event Payload in React Native Video\nDESCRIPTION: Example of the payload structure for the onTextTracks event in React Native Video. It shows an array of available text tracks with their properties.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/events.mdx#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  textTracks: [\n    {\n      index: 0,\n      title: 'English Subtitles',\n      type: 'vtt',\n      selected: true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Pausing Video Playback in React Native Video\nDESCRIPTION: Method to pause video playback. This is available on Android, iOS, and web platforms.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/methods.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\npause(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Resuming Video Playback in React Native Video\nDESCRIPTION: Method to resume video playback after it has been paused. This is available on Android, iOS, and web platforms.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/methods.mdx#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nresume(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Setting File Path Source in React Native Video\nDESCRIPTION: Example of how to set a video source using a file URI scheme on Android. This allows playing local video files from the device storage.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nsource={{ uri: 'file:///sdcard/Movies/sintel.mp4' }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Poster Image for React Native Video\nDESCRIPTION: Demonstrates how to set a poster image for the video component, including specifying the source and resize mode for the poster.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<Video>\n  poster={{\n    source: { uri: \"https://baconmockup.com/300/200/\" },\n    resizeMode: \"cover\",\n  }}\n</Video>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom License Acquisition Function for FairPlay DRM\nDESCRIPTION: Example of implementing the getLicense function to handle manual license acquisition for FairPlay DRM. It encodes the SPC (Server Playback Context) string in Base64 and sends it to the license server, then returns the CKC response.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/drm.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngetLicense: (spcString, contentId, licenseUrl, loadedLicenseUrl) => {\n  const base64spc = Base64.encode(spcString);\n  const formData = new FormData();\n  formData.append('spc', base64spc);\n  return fetch(`https://license.pallycon.com/ri/licenseManager.do`, {\n    method: 'POST',\n    headers: {\n      'pallycon-customdata-v2': 'your-custom-header',\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: formData,\n  })\n    .then((response) => response.text())\n    .then((response) => response)\n    .catch((error) => console.error('Error', error));\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Asset Folder Source in React Native Video\nDESCRIPTION: Example of how to set a video source using the asset URI scheme on Android. This allows playing video files bundled in the app's asset folder.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nsource={{ uri: 'asset:///sintel.mp4' }}\n```\n\n----------------------------------------\n\nTITLE: onProgress Event Payload Example in React Native Video\nDESCRIPTION: Example payload for the onProgress event triggered at regular intervals (progressUpdateInterval) during playback. It provides information about current playback position and buffered content.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/events.mdx#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  currentTime: 5.2,\n  playableDuration: 34.6,\n  seekableDuration: 888\n}\n```\n\n----------------------------------------\n\nTITLE: Entering Picture-in-Picture Mode in React Native Video\nDESCRIPTION: Method to activate Picture-in-Picture (PiP) mode. This functionality requires specific configurations for Android and has limitations on iOS regarding video ads.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/methods.mdx#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nenterPictureInPicture()\n```\n\n----------------------------------------\n\nTITLE: Loading Video Assets with React Native Asset System\nDESCRIPTION: This JavaScript code snippet demonstrates how to load a video file using React Native's asset system, which works across iOS and Android.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/other/misc.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Video\n  source={require('../assets/video/turntable.mp4')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Toggling Fullscreen Mode in React Native Video\nDESCRIPTION: Method to toggle fullscreen mode. Pass true to enter fullscreen and false to exit fullscreen.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/methods.mdx#2025-04-16_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nsetFullScreen(fullscreen: boolean): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Source with Crop Times in React Native\nDESCRIPTION: Demonstrates how to set up a video source with optional crop start and end times for playing only a portion of a video. The values are specified in milliseconds.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nsource={{ uri: 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8', cropStart: 36012, cropEnd: 48500 }}\n\nsource={{ uri: 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8', cropStart: 36012 }}\n\nsource={{ uri: 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8', cropEnd: 48500 }}\n```\n\n----------------------------------------\n\nTITLE: Using Android Expansion Files in React Native Video\nDESCRIPTION: This JavaScript code snippet shows how to use a video file from an Android expansion file in a React Native Video component.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/other/misc.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Assuming \"background.mp4\" is included in your expansion file.\n<Video \n  source={{uri: \"background\", mainVer: 1, patchVer: 0}} // Looks for \"background.mp4\" in the specified expansion version.\n  resizeMode=\"cover\"           // Fill the whole screen while maintaining aspect ratio.\n  style={styles.backgroundVideo} \n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring selectedTextTrack in React Native Video\nDESCRIPTION: Example of how to configure the selectedTextTrack prop to display specific subtitles or captions by title. This controls which text track is shown when multiple options are available.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nselectedTextTrack={{\n  type: \"title\",\n  value: \"English Subtitles\"\n}}\n```\n\n----------------------------------------\n\nTITLE: Configuring selectedAudioTrack in React Native Video\nDESCRIPTION: Example of how to configure the selectedAudioTrack prop to select a specific audio track by title. This controls which audio track is played when multiple options are available.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nselectedAudioTrack={{\n  type: \"title\",\n  value: \"Dubbing\"\n}}\n```\n\n----------------------------------------\n\nTITLE: Presenting Fullscreen Player in React Native Video\nDESCRIPTION: Method to enter fullscreen mode. On iOS, this opens a fullscreen view controller with controls. On Android, this makes the player fullscreen but requires styling to match screen dimensions.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/methods.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\npresentFullscreenPlayer(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: onPlaybackStateChanged Event Payload Example in React Native Video\nDESCRIPTION: Example payload for the onPlaybackStateChanged event triggered when the playback state changes in the React Native Video component. Available on Android, iOS, visionOS, and web platforms.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/events.mdx#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  isPlaying: true,\n  isSeeking: false\n}\n```\n\n----------------------------------------\n\nTITLE: Exiting Picture-in-Picture Mode in React Native Video\nDESCRIPTION: Method to exit Picture-in-Picture (PiP) mode. Available on Android, iOS, and web platforms.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/methods.mdx#2025-04-16_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexitPictureInPicture()\n```\n\n----------------------------------------\n\nTITLE: Configuring Picture-in-Picture in Expo for React Native Video\nDESCRIPTION: JSON configuration to enable Picture-in-Picture mode in Expo projects by adding the react-native-video plugin with enableAndroidPictureInPicture set to true.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/methods.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"plugins\": [\n  [\n    \"react-native-video\",\n    {\n      \"enableAndroidPictureInPicture\": true\n    }\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Subtitle Style in React Native Video\nDESCRIPTION: Example of setting subtitleStyle prop in React Native Video component. This prop allows customization of subtitle appearance, including padding, font size, and opacity.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nsubtitleStyle={{ paddingBottom: 50, fontSize: 20, opacity: 0 }}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExoPlayer-specific Audio Focus Controls in React Native Video\nDESCRIPTION: This snippet demonstrates how to use ExoPlayer-specific props in react-native-video to handle audio focus changes and noisy audio events. It shows how to implement callbacks for pausing video playback when audio focus is lost or audio becomes noisy.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/android/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n    return (\n      <Video\n        ...\n        disableFocus={true} // disables audio focus and wake lock (default false)\n        onAudioBecomingNoisy={this.onAudioBecomingNoisy} // Callback when audio is becoming noisy - should pause video\n        onAudioFocusChanged={this.onAudioFocusChanged} // Callback when audio focus has been lost - pause if focus has been lost\n      />\n    )\n  }\n\n  onAudioBecomingNoisy = () => {\n    this.setState({ pause: true })\n  }\n\n  onAudioFocusChanged = (event: { hasAudioFocus: boolean }) => {\n    if (!this.state.paused && !event.hasAudioFocus) {\n      this.setState({ paused: true })\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: onPictureInPictureStatusChanged Event Payload Example in React Native Video\nDESCRIPTION: Example payload for the onPictureInPictureStatusChanged event triggered when Picture-in-Picture mode is activated or deactivated. Available on iOS, Android, and web platforms.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/events.mdx#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  isActive: true\n}\n```\n\n----------------------------------------\n\nTITLE: onLoadStart Event Payload Example in React Native Video\nDESCRIPTION: Example payload for the onLoadStart event triggered when media starts loading in the React Native Video component. It includes network status, media type, and URI information.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/events.mdx#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  isNetwork: true,\n  type: '',\n  uri: 'https://example.com/video.mp4'\n}\n```\n\n----------------------------------------\n\nTITLE: Checking HEVC Support in React Native Video\nDESCRIPTION: Static method to check if HEVC (H.265) is supported at 1920×1080 resolution on Android. Uses isCodecSupported internally.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/methods.mdx#2025-04-16_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nisHEVCSupported(): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Example of Using renderLoader Prop in React Native Video\nDESCRIPTION: Example of using the renderLoader prop to render a custom loading component while the video is loading. This replaces the default loader with a custom View containing text.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<Video>\n  renderLoader={() => (\n    <View>\n      <Text>Custom Loader</Text>\n    </View>\n  )}\n</Video>\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Options in React Native Video\nDESCRIPTION: Demonstrates how to enable detailed logging for the video component on Android. This includes options for enabling verbose logs and displaying thread information.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndebug={{\n  enable: true,\n  thread: true,\n}}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Static Methods in React Native Video\nDESCRIPTION: An example demonstrating how to use the static methods for checking codec support and Widevine DRM levels in a React Native application.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/methods.mdx#2025-04-16_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VideoDecoderProperties } from 'react-native-video';\n\nVideoDecoderProperties.getWidevineLevel().then((level) => {\n  console.log('Widevine Level:', level);\n});\n\nVideoDecoderProperties.isCodecSupported('video/hevc', 1920, 1080).then((support) => {\n  console.log('HEVC Support:', support);\n});\n\nVideoDecoderProperties.isHEVCSupported().then((support) => {\n  console.log('HEVC 1080p Support:', support);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Volume in React Native Video\nDESCRIPTION: Method to change the volume level. Has the same behavior as the volume prop.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/methods.mdx#2025-04-16_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nsetVolume(value: number): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Processing Audio Tracks Update in React Native Video Player\nDESCRIPTION: Example payload for the onAudioTracks event, which is triggered when available audio tracks change. It includes details like language, title, and selection status for each track.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/events.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  audioTracks: [\n    { language: 'es', title: 'Spanish', type: 'audio/mpeg', index: 0, selected: true },\n    { language: 'en', title: 'English', type: 'audio/mpeg', index: 1 }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Bandwidth Updates in React Native Video Player (Android)\nDESCRIPTION: Example payload for the onBandwidthUpdate event on Android, which provides the estimated bitrate, video dimensions, and track ID when available bandwidth changes.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/events.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  bitrate: 1000000,\n  width: 1920,\n  height: 1080,\n  trackId: 'some-track-id'\n}\n```\n\n----------------------------------------\n\nTITLE: Seeking with Tolerance in iOS for React Native Video\nDESCRIPTION: iOS-specific method for seeking with a specified tolerance value. Default tolerance is ±100ms, and setting tolerance to 0 enables precise seeking.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/methods.mdx#2025-04-16_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nseek(seconds, tolerance: number)\n```\n\n----------------------------------------\n\nTITLE: onPlaybackRateChange Event Payload Example in React Native Video\nDESCRIPTION: Example payload for the onPlaybackRateChange event triggered when the playback speed changes in the React Native Video component. The playbackRate property indicates the current playback speed.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/events.mdx#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  playbackRate: 0  // indicates paused\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Bandwidth Updates in React Native Video Player (iOS)\nDESCRIPTION: Example payload for the onBandwidthUpdate event on iOS, which provides the estimated bitrate when available bandwidth changes.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/events.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  bitrate: 1000000\n}\n```\n\n----------------------------------------\n\nTITLE: Setting shutterColor in React Native Video\nDESCRIPTION: Example of how to set the shutterColor prop to transparent to prevent black flashes before video playback on Android. This affects the appearance of the initial loading screen.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nshutterColor = 'transparent';\n```\n\n----------------------------------------\n\nTITLE: Configuring Ad Settings in React Native Video\nDESCRIPTION: Demonstrates how to set up ad configuration for a video, including the ad tag URL and ad language. This is used for client-side ad insertion.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nad: {\n  adTagUrl=\"https://pubads.g.doubleclick.net/gampad/ads?iu=/21775744923/external/vmap_ad_samples&sz=640x480&cust_params=sample_ar%3Dpremidpostoptimizedpodbumper&ciu_szs=300x250&gdfp_req=1&ad_rule=1&output=vmap&unviewed_position_start=1&env=vp&impl=s&cmsid=496&vid=short_onecue&correlator=\"\n  adLanguage=\"fr\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Buffer State Changes in React Native Video Player\nDESCRIPTION: Example payload for the onBuffer event, which is triggered when buffering starts or stops across Android, iOS, and web platforms.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/events.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  isBuffering: true\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Codec Support in React Native Video\nDESCRIPTION: Static method to check if a specific video codec is supported. Returns 'hardware' for hardware decoding support, 'software' for software decoding only, or 'unsupported' if the codec is not supported.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/methods.mdx#2025-04-16_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nisCodecSupported(mimetype: string, width: number, height: number): Promise<'hardware' | 'software' | 'unsupported'>\n```\n\n----------------------------------------\n\nTITLE: Handling Controls Visibility Changes in React Native Video Player\nDESCRIPTION: Example payload for the onControlsVisibilityChange event, which is triggered when the video player controls become visible or hidden on Android.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/events.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  isVisible: true\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Audio Focus Change Event in React Native Video Player\nDESCRIPTION: Example payload for the onAudioFocusChanged event, which is triggered when audio focus is gained or lost on Android.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/events.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  hasAudioFocus: true\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Widevine DRM Level in React Native Video\nDESCRIPTION: Static method to get the Widevine DRM level on Android. Returns 0 for unknown/unsupported or 1, 2, 3 for supported Widevine levels.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/methods.mdx#2025-04-16_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\ngetWidevineLevel(): Promise<number>\n```\n\n----------------------------------------\n\nTITLE: Handling Ad Events in React Native Video\nDESCRIPTION: This example shows how to set up the onReceiveAdEvent prop to handle events from the IMA SDK in the Video component.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/ads.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n...\nonReceiveAdEvent={event => console.log(event)}\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for Notification Controls\nDESCRIPTION: XML configuration required in AndroidManifest.xml to enable notification controls for React Native Video on Android. Includes necessary permissions and service declaration.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    ...\n    <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" />\n    <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE_MEDIA_PLAYBACK\" />\n    ...\n\n    <application>\n      ...\n      <service\n        android:name=\"com.brentvatne.exoplayer.VideoPlaybackService\"\n        android:exported=\"false\"\n        android:foregroundServiceType=\"mediaPlayback\">\n          <intent-filter>\n            <action android:name=\"androidx.media3.session.MediaSessionService\" />\n          </intent-filter>\n      </service>\n    </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Setting Ad Language in React Native Video\nDESCRIPTION: This snippet illustrates how to use the adLanguage prop to change the language of the IMA SDK in the Video component.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/ads.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n...\nadLanguage=\"fr\"\n...\n```\n\n----------------------------------------\n\nTITLE: Handling Volume Change Event Payload in React Native Video\nDESCRIPTION: Example of the payload structure for the onVolumeChange event in React Native Video. It shows the new volume level of the player.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/events.mdx#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  volume: 0.5\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring react-native-video Expo Plugin in JSON\nDESCRIPTION: This snippet demonstrates how to configure the react-native-video Expo plugin in the app.json file. It shows how to enable notification controls and configure Android extensions.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/other/expo.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my app\",\n  \"plugins\": [\n    [\n      \"react-native-video\",\n      {\n        \"enableNotificationControls\": true,\n        \"androidExtensions\": {\n          \"useExoplayerRtsp\": false,\n          \"useExoplayerSmoothStreaming\": false,\n          \"useExoplayerHls\": false,\n          \"useExoplayerDash\": false\n        }\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Picture-in-Picture for Android with Expo\nDESCRIPTION: Shows how to add Picture-in-Picture support for Android when using Expo. This requires adding a specific configuration to the app.json file.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n  \"plugins\": [\n    [\n      \"react-native-video\",\n      {\n        \"enableAndroidPictureInPicture\": true\n      }\n    ]\n  ]\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for ReactVideoRenderLoaderProps\nDESCRIPTION: TypeScript interface definition that specifies the props available when using a custom loader component. It includes optional properties for source, style, and resizeMode.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ReactVideoRenderLoaderProps {\n  source?: ReactVideoSource;\n  style?: StyleProp<ImageStyle>;\n  resizeMode?: EnumValues<VideoResizeMode>;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Cookies to DRM License Server\nDESCRIPTION: Example of sending cookie data to the DRM license server using the headers property in the DRM configuration object. This allows for session-based authentication with the license server.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/drm.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndrm: {\n  type: DRMType.WIDEVINE,\n  licenseServer: 'https://drm-widevine-licensing.axtest.net/AcquireLicense',\n  headers: {\n    'Cookie': 'PHPSESSID=your-session-id; csrftoken=mytoken; _gat=1; foo=bar'\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Picture-in-Picture Support in Android Manifest\nDESCRIPTION: Demonstrates how to add Picture-in-Picture support to an Android app by modifying the AndroidManifest.xml file. This is necessary when using bare React Native.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n  android:name=\".MainActivity\"\n  android:supportsPictureInPicture=\"true\">\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit MIME Type for Streams in React Native Video\nDESCRIPTION: Example of how to explicitly specify a MIME type for a video stream when the URL extension doesn't match the actual content type. This is necessary for certain adaptive streaming formats.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nsource={{ uri: 'http://host-serving-a-type-different-than-the-extension.ism/manifest(format=mpd-time-csf)',\ntype: 'mpd' }}\n```\n\n----------------------------------------\n\nTITLE: Handling Seek Event Payload in React Native Video\nDESCRIPTION: Example of the payload structure for the onSeek event in React Native Video. It includes the current time after seeking and the requested seek time.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/events.mdx#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  currentTime: 100.5,\n  seekTime: 100\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom DRM Manager in Swift AVPlayer Plugin for React Native Video\nDESCRIPTION: This code snippet shows how to register the custom DRM manager by implementing the getDRMManager() method in a custom AVPlayer plugin. It also includes overrides for handling player instance creation and removal.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/other/plugin.md#2025-04-16_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nclass CustomVideoPlugin: RNVAVPlayerPlugin {\n    override func getDRMManager() -> DRMManagerSpec? {\n        return CustomDRMManager()\n    }\n    \n    override func onInstanceCreated(id: String, player: AVPlayer) {\n        // Handle player creation\n    }\n    \n    override func onInstanceRemoved(id: String, player: AVPlayer) {\n        // Handle player removal\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling External Playback Changes in React Native Video Player\nDESCRIPTION: Example payload for the onExternalPlaybackChange event, which is called when external playback mode changes on iOS (e.g., Apple TV connection/disconnection).\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/events.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  isExternalPlaybackActive: true\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Timed Metadata Event Payload in React Native Video\nDESCRIPTION: Example of the payload structure for the onTimedMetadata event in React Native Video. It shows an array of metadata objects with identifiers and values.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/events.mdx#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  metadata: [\n    { value: 'Streaming Encoder', identifier: 'TRSN' },\n    { value: 'Internet Stream', identifier: 'TRSO' },\n    { value: 'Any Time You Like', identifier: 'TIT2' }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CmcdData Type in TypeScript\nDESCRIPTION: TypeScript type definition for CMCD data structure that requires hyphenated key names to prevent namespace collisions. The type represents custom key-value pairs where keys must include a hyphenated prefix.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ntype CmcdData = Record<`${string}-${string}`, string | number>;\n```\n\n----------------------------------------\n\nTITLE: Handling Ad Event Payload in React Native Video\nDESCRIPTION: Example of the payload structure for ad-related events in React Native Video. It shows the event type and additional data associated with the ad event.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/events.mdx#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"key\": \"value\"\n  },\n  \"event\": \"LOG\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Text Track Data Change Event Payload in React Native Video\nDESCRIPTION: Example of the payload structure for the onTextTrackDataChanged event in React Native Video. It includes the subtitle text content in a compatible format.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/events.mdx#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  subtitleTracks: \"This blade has a dark past.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Base iOS Plugin\nDESCRIPTION: Basic implementation of RNVPlugin class for iOS plugin creation with player lifecycle management.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/other/plugin.md#2025-04-16_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nclass MyAnalyticsPlugin: RNVPlugin {\n    override func onInstanceCreated(id: String, player: Any) {\n        // Handle player creation\n    }\n\n    override func onInstanceRemoved(id: String, player: Any) {\n        // Handle player removal\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Encryption Key Scheme for Offline DRM Content\nDESCRIPTION: Example of configuring the localSourceEncryptionKeyScheme property for handling local encrypted assets with FairPlay DRM on iOS/visionOS.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/drm.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlocalSourceEncryptionKeyScheme=\"my-offline-key\"\n```\n\n----------------------------------------\n\nTITLE: iOS Podfile Configuration\nDESCRIPTION: Configuration options for iOS installation including video caching and Google IMA support.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/installation.md#2025-04-16_snippet_1\n\nLANGUAGE: podfile\nCODE:\n```\n# Enable Video Caching\n$RNVideoUseVideoCaching=true\n```\n\nLANGUAGE: podfile\nCODE:\n```\n$RNVideoUseGoogleIMA=true\n```\n\n----------------------------------------\n\nTITLE: Implementing AVPlayer-Specific Plugin\nDESCRIPTION: Implementation of RNVAVPlayerPlugin class for type-safe AVPlayer access in iOS.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/other/plugin.md#2025-04-16_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nclass MyAVPlayerAnalyticsPlugin: RNVAVPlayerPlugin {\n    override func onInstanceCreated(id: String, player: AVPlayer) {\n        // Handle AVPlayer creation with type-safe access\n    }\n\n    override func onInstanceRemoved(id: String, player: AVPlayer) {\n        // Handle AVPlayer removal with type-safe access\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ad Tag URL for AVOD in React Native Video\nDESCRIPTION: This snippet demonstrates how to set up the adTagUrl prop for Ad-Supported Video on Demand (AVOD) using a VAST-compliant URI.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/ads.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nadTagUrl=\"https://pubads.g.doubleclick.net/gampad/ads?iu=/21775744923/external/vmap_ad_samples&sz=640x480&cust_params=sample_ar%3Dpremidpostoptimizedpodbumper&ciu_szs=300x250&gdfp_req=1&ad_rule=1&output=vmap&unviewed_position_start=1&env=vp&impl=s&cmsid=496&vid=short_onecue&correlator=\"\n```\n\n----------------------------------------\n\nTITLE: Android Gradle Configuration\nDESCRIPTION: Android build configuration including Kotlin version and ExoPlayer feature flags.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/installation.md#2025-04-16_snippet_2\n\nLANGUAGE: gradle\nCODE:\n```\nbuildscript {\n    ...\n    ext.kotlinVersion = '1.8.0'\n    ext.compileSdkVersion = 34\n    ext.targetSdkVersion = 34\n    ...\n}\n```\n\nLANGUAGE: gradle\nCODE:\n```\nbuildscript {\n  ext {\n    ...\n    useExoplayerIMA = true\n    useExoplayerRtsp = true\n    useExoplayerSmoothStreaming = true\n    useExoplayerDash = true\n    useExoplayerHls = true\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExoPlayer-Specific Plugin\nDESCRIPTION: Implementation of RNVExoplayerPlugin interface for type-safe ExoPlayer access in Android.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/other/plugin.md#2025-04-16_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyExoPlayerAnalyticsPlugin : RNVExoplayerPlugin {\n    override fun onInstanceCreated(id: String, player: ExoPlayer) {\n        // Handle ExoPlayer creation with type-safe access\n    }\n\n    override fun onInstanceRemoved(id: String, player: ExoPlayer) {\n        // Handle ExoPlayer removal with type-safe access\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting adTagUrl for AVOD Ads in React Native Video\nDESCRIPTION: Example of setting the VAST URI to play AVOD ads using the adTagUrl prop. This property is deprecated and should be replaced with source.ad.adTagUrl.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nadTagUrl=\"https://pubads.g.doubleclick.net/gampad/ads?iu=/21775744923/external/vmap_ad_samples&sz=640x480&cust_params=sample_ar%3Dpremidpostoptimizedpodbumper&ciu_szs=300x250&gdfp_req=1&ad_rule=1&output=vmap&unviewed_position_start=1&env=vp&impl=s&cmsid=496&vid=short_onecue&correlator=\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom DRM Manager in Swift for React Native Video\nDESCRIPTION: This code snippet demonstrates the implementation of a custom DRM manager class that conforms to the DRMManagerSpec protocol. It includes methods for handling content key requests, processing licenses, and managing errors in the DRM process.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/other/plugin.md#2025-04-16_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nclass CustomDRMManager: NSObject, DRMManagerSpec {\n    func createContentKeyRequest(\n        asset: AVContentKeyRecipient,\n        drmProps: DRMParams?,\n        reactTag: NSNumber?,\n        onVideoError: RCTDirectEventBlock?,\n        onGetLicense: RCTDirectEventBlock?\n    ) {\n        // Initialize content key session and handle key request\n    }\n    \n    func handleContentKeyRequest(keyRequest: AVContentKeyRequest) {\n        // Process the content key request\n    }\n    \n    func finishProcessingContentKeyRequest(keyRequest: AVContentKeyRequest, license: Data) throws {\n        // Finish processing the key request with the obtained license\n    }\n    \n    func handleError(_ error: Error, for keyRequest: AVContentKeyRequest) {\n        // Handle any errors during the DRM process\n    }\n    \n    func setJSLicenseResult(license: String, licenseUrl: String) {\n        // Handle successful license acquisition from JS side\n    }\n    \n    func setJSLicenseError(error: String, licenseUrl: String) {\n        // Handle license acquisition errors from JS side\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring User Interface After Picture-in-Picture in React Native Video\nDESCRIPTION: Method that must be called after onRestoreUserInterfaceForPictureInPictureStop. Corresponds to Apple's restoreUserInterfaceForPictureInPictureStop. iOS-specific functionality.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/methods.mdx#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nrestoreUserInterfaceForPictureInPictureStopCompleted(restored)\n```\n\n----------------------------------------\n\nTITLE: Handling Video Tracks Event Payload in React Native Video\nDESCRIPTION: Example of the payload structure for the onVideoTracks event in React Native Video. It includes detailed information about available video tracks.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/events.mdx#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  videoTracks: [\n    {\n      index: 0,\n      trackId: \"1\",\n      codecs: \"video/mp4\",\n      width: 1920,\n      height: 1080,\n      bitrate: 5000000,\n      selected: true,\n      rotation: 0\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Android Plugin\nDESCRIPTION: Basic implementation of RNVPlugin interface for Android plugin creation with player lifecycle management.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/other/plugin.md#2025-04-16_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyAnalyticsPlugin : RNVPlugin {\n    override fun onInstanceCreated(id: String, player: Any) {\n        // Handle player creation\n    }\n\n    override fun onInstanceRemoved(id: String, player: Any) {\n        // Handle player removal\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Native and React Native Windows Dependencies for RNW 0.62\nDESCRIPTION: This snippet demonstrates how to install the required development dependencies for React Native Video when working with React Native Windows version 0.62.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/windows/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native@^0.62 --only=dev\nnpm install react-native-windows@^0.62 --only=dev\n```\n\n----------------------------------------\n\nTITLE: Saving Video to Photos App in React Native Video\nDESCRIPTION: Method to save the video to the user's Photos app with the current filter. Supports MP4 export only and requires internet connection if the video is not already buffered.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/methods.mdx#2025-04-16_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nsave(): Promise<{ uri: string }>\n```\n\n----------------------------------------\n\nTITLE: Running Bare Example on Different Platforms\nDESCRIPTION: Commands to run the bare example on iOS, visionOS, Android, and Windows platforms with optional interactive mode for device selection.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/examples/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# for ios\nyarn ios --interactive\n# for visionOS\nyarn visionos --interactive\n# for android\nyarn android --interactive\n# for windows\nyarn windows\n```\n\n----------------------------------------\n\nTITLE: Installing React Native and React Native Windows Dependencies for RNW >= 0.63\nDESCRIPTION: This snippet shows how to install the necessary development dependencies for React Native Video when working with React Native Windows version 0.63 or higher.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/windows/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native@^0.63 --only=dev\nnpm install react-native-windows@^0.63 --only=dev\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Load Retry Count in React Native Video\nDESCRIPTION: Demonstrates how to set the minimum number of times to retry loading data before failing. This is useful for recovering from transient internet failures.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nsource={{\n  uri: 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8',\n  minLoadRetryCount: 5 // Retry 5 times.\n}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Project Build Settings\nDESCRIPTION: Example of adding project.ext section to the top-level build.gradle file with SDK version settings for Android compatibility.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/updating.md#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\n// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    ... // Various other settings go here\n}\n\nallprojects {\n    ... // Various other settings go here\n\n    project.ext {\n        compileSdkVersion = 31\n        buildToolsVersion = \"30.0.2\"\n\n        minSdkVersion = 21\n        targetSdkVersion = 22\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for HTTP Playback\nDESCRIPTION: XML configuration to add to AndroidManifest.xml to enable cleartext HTTP traffic for video playback in Android release builds.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/other/debug.md#2025-04-16_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<application\n ...\n android:usesCleartextTraffic=\"true\"\n>\n```\n\n----------------------------------------\n\nTITLE: Disabling Chunkless Preparation for HLS in React Native Video\nDESCRIPTION: Shows how to disable chunkless preparation for HLS media sources on Android. This can be useful for specific HLS streaming scenarios.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nsource={{\n    uri: 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8',\n    textTracksAllowChunklessPreparation: false,\n  }}\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum iOS Version in Podfile\nDESCRIPTION: Code to override the minimum iOS version to 13.0 in the Podfile for projects using react-native < 0.73.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/updating.md#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- platform :ios, min_ios_version_supported\n\n+ MIN_IOS_OVERRIDE = '13.0'\n+ if Gem::Version.new(MIN_IOS_OVERRIDE) > Gem::Version.new(min_ios_version_supported)\n+   min_ios_version_supported = MIN_IOS_OVERRIDE\n+ end\n```\n\n----------------------------------------\n\nTITLE: Configuring Media3 Source Path in Gradle Settings\nDESCRIPTION: Gradle configuration to set up a custom Media3 source path in settings.gradle for building from Media3 source code.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/other/debug.md#2025-04-16_snippet_6\n\nLANGUAGE: gradle\nCODE:\n```\ngradle.ext.androidxMediaModulePrefix = 'media-'\napply from: file(\"../../../../media3/core_settings.gradle\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio Session in iOS AppDelegate\nDESCRIPTION: This Objective-C code snippet shows how to configure the audio session in the AppDelegate to allow background music from other apps to continue playing over the video component.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/other/misc.md#2025-04-16_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\n#import <AVFoundation/AVFoundation.h>  // Import the AVFoundation framework\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n  ...\n  [[AVAudioSession sharedInstance] setCategory:AVAudioSessionCategoryAmbient error:nil];  // Allow background audio\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Repository Dependencies for react-native-video Examples\nDESCRIPTION: Command to install dependencies in the repository root directory before running any examples.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/examples/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Building React Native Video Package\nDESCRIPTION: Commands to navigate to the repository root folder, install dependencies, and build the package to generate the transpiled version in the lib folder.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/other/debug.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd react-native-video && yarn && yarn build\n```\n\n----------------------------------------\n\nTITLE: Configuring Picture-in-Picture in Android Manifest for React Native Video\nDESCRIPTION: XML configuration for enabling Picture-in-Picture mode in bare React Native Android projects by adding the supportsPictureInPicture attribute to the MainActivity in AndroidManifest.xml.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/methods.mdx#2025-04-16_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n  android:name=\".MainActivity\"\n  android:supportsPictureInPicture=\"true\">\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Expo Example\nDESCRIPTION: Commands to navigate to the expo example directory and install its specific dependencies.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/examples/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/expo && yarn install\n```\n\n----------------------------------------\n\nTITLE: Installing Sample App Dependencies\nDESCRIPTION: Command to navigate to the basic example app directory and install the required dependencies.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/other/debug.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd example/basic && yarn install\n```\n\n----------------------------------------\n\nTITLE: Setting iPod Library Source in React Native Video\nDESCRIPTION: Example of how to set a video source using the iPod library URI scheme on iOS. This allows playing audio files from the device's iTunes library.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/props.mdx#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nsource={{ uri: 'ipod-library:///path/to/music.mp3' }}\n```\n\n----------------------------------------\n\nTITLE: Removing Android ExoPlayer Patch\nDESCRIPTION: Instructions to remove the ExoPlayer patch from Android settings.gradle when upgrading from V5.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/updating.md#2025-04-16_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- include ':react-native-video'\n- project(':react-native-video').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-video/android-exoplayer')\n```\n\n----------------------------------------\n\nTITLE: Running iOS Sample App\nDESCRIPTION: Commands to install iOS dependencies using CocoaPods and then build and run the sample app on an iOS device or simulator.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/other/debug.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd ios && pod install && cd .. && yarn ios\n```\n\n----------------------------------------\n\nTITLE: Dismissing Fullscreen Player in React Native Video\nDESCRIPTION: Method to exit fullscreen mode. This method is deprecated and setFullScreen(false) should be used instead.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/component/methods.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ndismissFullscreenPlayer(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Removing Unnecessary Podfile Entries\nDESCRIPTION: Instructions to remove react-native-video entries from Podfile as they are no longer needed in version 6.0.0.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/updating.md#2025-04-16_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-  `pod 'react-native-video', :path => '../node_modules/react-native-video/react-native-video.podspec'`\n\n-  `pod 'react-native-video/VideoCaching', :path => '../node_modules/react-native-video/react-native-video.podspec'`\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Bare Example\nDESCRIPTION: Commands to navigate to the bare example directory and install its specific dependencies.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/examples/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/bare && yarn install\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom DRM Manager for Android\nDESCRIPTION: Implementation of custom DRM management through DRMManagerSpec interface and ExoPlayer plugin.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/other/plugin.md#2025-04-16_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CustomDRMManager : DRMManagerSpec {\n    @Throws(UnsupportedDrmException::class)\n    override fun buildDrmSessionManager(uuid: UUID, drmProps: DRMProps): DrmSessionManager? {\n        // Your custom implementation for building DRM session manager\n        // Return null if the DRM scheme is not supported\n        // Throw UnsupportedDrmException if the DRM scheme is invalid\n    }\n}\n\nclass CustomVideoPlugin : RNVExoplayerPlugin {\n    private val drmManager = CustomDRMManager()\n    \n    override fun getDRMManager(): DRMManagerSpec? {\n        return drmManager\n    }\n    \n    override fun onInstanceCreated(id: String, player: ExoPlayer) {\n        // Handle player creation\n    }\n    \n    override fun onInstanceRemoved(id: String, player: ExoPlayer) {\n        // Handle player removal\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Custom App with Font Configuration\nDESCRIPTION: This code defines a custom Next.js _app component that imports a font (Orbitron) and makes it available globally via CSS variables. It uses styled-jsx for scoped CSS and ensures all page props are passed to the rendered Component.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/_app.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {orbitron} from '../font';\n\nexport default function Nextra({Component, pageProps}) {\n  return (\n    <>\n        <style jsx global>{`\n        :root {\n          --font-orbitron: ${orbitron.style.fontFamily};\n        }\n      `}</style>\n      <Component {...pageProps} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing iOS/visionOS Pods for Bare Example\nDESCRIPTION: Commands to install CocoaPods dependencies for iOS and visionOS platforms, noting that it needs to be run twice for proper application of changes.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/examples/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# for ios\npod install --project-directory=ios\n# for visionOS\npod install --project-directory=visionos\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Video for Interop Layer in New Architecture\nDESCRIPTION: Configuration for enabling the Interop Layer to use react-native-video with React Native's New Architecture for versions below 0.74. This adds the Video component to the list of legacy components that should be wrapped with the Interop Layer.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/other/new-arch.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  project: {\n    android: {\n      unstable_reactLegacyComponentNames: ['Video'],\n    },\n    ios: {\n      unstable_reactLegacyComponentNames: ['Video'],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries in Markdown Format\nDESCRIPTION: Structured changelog entries documenting fixes and features for react-native-video package version updates, including v6.0.0-beta.6 through v6.0.0-beta.8.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/CHANGELOG.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* **android:** catch errors in `performOnPlayerView` ([#3685](https://github.com/react-native-video/react-native-video/issues/3685)) ([3e35326])\n* **android:** fixed bug where video would not be visible after remount and change of drm source ([#3668]) ([1af12f9])\n* **android:** seek callback with controls ([#3694]) ([c730306])\n* **android:** set title for external subtitles ([#3676]) ([336b9f0])\n* ensure poster works as expected and add it to the sample ([#3643]) ([d694139])\n* ensure tracks are available in sample ([#3660]) ([4c7719a])\n* **ios:** add workaround for `TouchableWithoutFeedback` ([#3688]) ([b5ccc48])\n* **ios:** apply PictureInPicture state on start ([#3655]) ([07f71c2])\n```\n\n----------------------------------------\n\nTITLE: Installing iOS/tvOS Pods for Expo Example\nDESCRIPTION: Command to install CocoaPods dependencies for the Expo example on iOS and tvOS platforms.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/examples/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npod install --project-directory=ios\n```\n\n----------------------------------------\n\nTITLE: Building React Native TV Project\nDESCRIPTION: Commands to create a new Expo project with TV support, prebuild it, and run on iOS (Apple TV) and Android (Android TV) platforms. The EXPO_TV environment variable is set to enable TV modifications.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/examples/expo/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport EXPO_TV=1\nnpx expo prebuild\nyarn ios # Build for Apple TV\nyarn android # Build for Android TV\n```\n\n----------------------------------------\n\nTITLE: Issue Reference in Markdown\nDESCRIPTION: Markdown link referencing a GitHub issue number\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/CHANGELOG.md#2025-04-16_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n[#3398](https://github.com/react-native-video/react-native-video/issues/3398)\n```\n\n----------------------------------------\n\nTITLE: Starting Metro Bundler for React Native Examples\nDESCRIPTION: Command to start the Metro bundler if it didn't start automatically when running the examples.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/examples/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Running Android Sample App\nDESCRIPTION: Command to build and run the sample app on an Android device or emulator.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/other/debug.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn android\n```\n\n----------------------------------------\n\nTITLE: Running Expo Example on Different Platforms\nDESCRIPTION: Commands to run the Expo example on iOS, tvOS, Android, Android TV, and web platforms.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/examples/README.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# for ios\nyarn ios --device\n# for tvOS\nyarn ios:tv --device\n# for android\nyarn android --device\n# for android tv\nyarn android:tv --device\n# for web\nyarn web\n```\n\n----------------------------------------\n\nTITLE: Detailed Version History for react-native-video v6.0.0\nDESCRIPTION: Extended changelog entries detailing version changes, including fixes for Android video playback, iOS implementation updates, and new features like notification controls.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/CHANGELOG.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n# [6.1.0](https://github.com/TheWidlarzGroup/react-native-video/compare/v6.0.0...v6.1.0) (2024-05-22)\n\n### Bug Fixes\n\n* **android:** avoid blinking on video track change ([#3782](https://github.com/TheWidlarzGroup/react-native-video/issues/3782)) ([7b1e129](https://github.com/TheWidlarzGroup/react-native-video/commit/7b1e1293f67c0e25e0763d08d830fcf192bb713c))\n* **android:** implement live configuration management ([#3792](https://github.com/TheWidlarzGroup/react-native-video/issues/3792)) ([e16730d](https://github.com/TheWidlarzGroup/react-native-video/commit/e16730de11d50b8a85cd09fa2b102fdbf777d8ad))\n[...additional content truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Updating React Native Dependencies for Bare Example\nDESCRIPTION: Command for maintainers to update React Native version in the bare example using the align-deps tool.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/examples/README.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx @rnx-kit/align-deps@latest --requirements react-native@RN_VERSION --write\n```\n\n----------------------------------------\n\nTITLE: Version Changes Documentation for react-native-video v6.1.0+\nDESCRIPTION: Changelog entries documenting bug fixes and feature additions for the react-native-video library, including platform-specific improvements for iOS, Android and tvOS.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n* **iOS:** sometimes aspect ratio is invalid ([#3821](https://github.com/TheWidlarzGroup/react-native-video/issues/3821)) ([dac0985](https://github.com/TheWidlarzGroup/react-native-video/commit/dac09854303335d8e37b633c37bca399499d1999))\n\n### Features\n* **android:** change default user agent value ([#3813](https://github.com/TheWidlarzGroup/react-native-video/issues/3813)) ([089dc7e](https://github.com/TheWidlarzGroup/react-native-video/commit/089dc7e03251983ed3e1581519ffe4b3020ff5f8))\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Native Video Documentation with Bun\nDESCRIPTION: Command to install all required dependencies for the documentation project using Bun package manager.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun install\n```\n\n----------------------------------------\n\nTITLE: Preventing Compression of MP4 Files for Android Expansion\nDESCRIPTION: This bash command demonstrates how to zip MP4 files without compressing them, which is necessary when using Android expansion files.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/other/misc.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nzip -r -n .mp4 *.mp4 player.video.example.com\n```\n\n----------------------------------------\n\nTITLE: Creating React Native Video Package\nDESCRIPTION: Command to create a new React Native library package for custom video analytics implementation.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/other/plugin.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-react-native-library@latest react-native-video-custom-analytics\n```\n\n----------------------------------------\n\nTITLE: Enabling Media3 Source Build in Gradle\nDESCRIPTION: Gradle configuration to enable building from Media3 source code in the build.gradle file.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/other/debug.md#2025-04-16_snippet_7\n\nLANGUAGE: gradle\nCODE:\n```\nbuildscript {\n    ext {\n        ...\n        buildFromMedia3Source = true\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Windows CPP Integration\nDESCRIPTION: C++ code modifications required for Windows platform integration.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/installation.md#2025-04-16_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"winrt/ReactNativeVideoCPP.h\"\n```\n\nLANGUAGE: cpp\nCODE:\n```\nPackageProviders().Append(winrt::ReactNativeVideoCPP::ReactPackageProvider());\n```\n\n----------------------------------------\n\nTITLE: Running React Native Video Documentation in Development Mode with Bun\nDESCRIPTION: Command to start the documentation site in development mode using Bun runtime.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: React Native Video Version Tag\nDESCRIPTION: Version tag indicating the release version of react-native-video package.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [6.4.5](https://github.com/TheWidlarzGroup/react-native-video/compare/v6.4.4...v6.4.5) (2024-08-17)\n```\n\n----------------------------------------\n\nTITLE: Cloning React Native Video Repository\nDESCRIPTION: Command to clone the react-native-video repository from GitHub to your local machine.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/docs/pages/other/debug.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:TheWidlarzGroup/react-native-video.git\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Server for React Native Video\nDESCRIPTION: This snippet shows the commands to set up and run a local server for working on the project's documentation. It uses Bun as the package manager and runtime.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd docs\nbun install\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Opening Projects in Android Studio or Xcode\nDESCRIPTION: Commands for maintainers to open the bare example project in Android Studio or Xcode after generating the native project.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/examples/README.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# for android\nstudio ./android\n# for ios\nxed ./ios\n```\n\n----------------------------------------\n\nTITLE: React Native Video Version History\nDESCRIPTION: Markdown formatted changelog entries documenting version releases from 6.0.0-alpha.0 through 4.4.4, including bug fixes, feature additions, and breaking changes.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/CHANGELOG.md#2025-04-16_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n### Version 6.0.0-alpha.0\n\n- Support disabling buffering [#2689]\n- Fix AudioFocus bug that could cause the player to stop responding to play/pause in some instances. [#2689]\n- Fix player crashing when it is being cleared. [#2689]\n[...additional entries omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format\nDESCRIPTION: Standard format for changelog entries showing bug fixes and features\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* playback restart without bufferingConfig ([#4305](https://github.com/TheWidlarzGroup/react-native-video/issues/4305)) ([f37dc9e])\n\n### Features\n\n* **android:** add settings button to control video playback speed ([#4211](https://github.com/TheWidlarzGroup/react-native-video/issues/4211)) ([d1883a7])\n```\n\n----------------------------------------\n\nTITLE: Version Release Headers in Markdown\nDESCRIPTION: Version headers and links comparing changes between releases in markdown format\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [6.8.2](https://github.com/TheWidlarzGroup/react-native-video/compare/v6.8.1...v6.8.2) (2024-11-25)\n\n## [6.8.1](https://github.com/TheWidlarzGroup/react-native-video/compare/v6.8.0...v6.8.1) (2024-11-24)\n\n# [6.8.0](https://github.com/TheWidlarzGroup/react-native-video/compare/v6.7.0...v6.8.0) (2024-11-17)\n\n# [6.7.0](https://github.com/TheWidlarzGroup/react-native-video/compare/v6.6.4...v6.7.0) (2024-10-17)\n```\n\n----------------------------------------\n\nTITLE: Version Comparison Link in Markdown\nDESCRIPTION: Markdown link showing version comparison between beta releases on GitHub\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/CHANGELOG.md#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n[6.0.0-beta.1](https://github.com/react-native-video/react-native-video/compare/v6.0.0-beta.0...v6.0.0-beta.1)\n```\n\n----------------------------------------\n\nTITLE: React Native Video Commit Reference\nDESCRIPTION: Git commit reference number for DefaultDashChunkSource issue fix.\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* **android:** resolve a release issue with DefaultDashChunkSource ([#4097](https://github.com/TheWidlarzGroup/react-native-video/issues/4097)) ([7e222e8](https://github.com/TheWidlarzGroup/react-native-video/commit/7e222e8fc4f3c47a1c9cd2fbf5ff012bcbe98a7f))\n```\n\n----------------------------------------\n\nTITLE: Commit Hash Link in Markdown\nDESCRIPTION: Markdown link referencing a specific commit hash for a bug fix\nSOURCE: https://github.com/TheWidlarzGroup/react-native-video/blob/master/CHANGELOG.md#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n[72679a7](https://github.com/react-native-video/react-native-video/commit/72679a7d639b9c000e060af0dbab7c862c180b00)\n```"
  }
]