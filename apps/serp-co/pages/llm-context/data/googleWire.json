[
  {
    "owner": "google",
    "repo": "wire",
    "content": "TITLE: Defining Basic Provider Function in Go\nDESCRIPTION: Example of a basic provider function that returns a Foo struct. Provider functions are ordinary Go code that produce values and must be exported to be used from other packages.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage foobarbaz\n\ntype Foo struct {\n    X int\n}\n\n// ProvideFoo returns a Foo.\nfunc ProvideFoo() Foo {\n    return Foo{X: 42}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Provider with Error Handling in Go\nDESCRIPTION: Example of a provider function that returns an error in addition to the value. This pattern allows providers to signal when they cannot construct the requested type.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage foobarbaz\n\nimport (\n    \"context\"\n    \"errors\"\n)\n\n// ...\n\ntype Baz struct {\n    X int\n}\n\n// ProvideBaz returns a value if Bar is not zero.\nfunc ProvideBaz(ctx context.Context, bar Bar) (Baz, error) {\n    if bar.X == 0 {\n        return Baz{}, errors.New(\"cannot provide baz when bar is zero\")\n    }\n    return Baz{X: bar.X}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Wire Injector in Go\nDESCRIPTION: Example of an injector function declaration that uses wire.Build to specify dependencies. The build tag ensures the stub is not included in the final build.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// +build wireinject\n// The build tag makes sure the stub is not built in the final build.\n\npackage main\n\nimport (\n    \"context\"\n\n    \"github.com/google/wire\"\n    \"example.com/foobarbaz\"\n)\n\nfunc initializeBaz(ctx context.Context) (foobarbaz.Baz, error) {\n    wire.Build(foobarbaz.MegaSet)\n    return foobarbaz.Baz{}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Base Types in Go\nDESCRIPTION: Initial definition of the core types Message, Greeter and Event that will be used in the program.\nSOURCE: https://github.com/google/wire/blob/main/_tutorial/README.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Message string\n\ntype Greeter struct {\n    // ... TBD\n}\n\ntype Event struct {\n    // ... TBD\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Provider with Dependencies in Go\nDESCRIPTION: Example of a provider function that specifies dependencies with parameters. This function depends on the Foo type and returns a Bar type.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage foobarbaz\n\n// ...\n\ntype Bar struct {\n    X int\n}\n\n// ProvideBar returns a Bar: a negative Foo.\nfunc ProvideBar(foo Foo) Bar {\n    return Bar{X: -foo.X}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Provider Set for Library Use in Go with Wire\nDESCRIPTION: This snippet illustrates how to create a provider set for use in a library, including multiple provider functions and a wire set declaration. It demonstrates safe practices for maintaining compatibility.\nSOURCE: https://github.com/google/wire/blob/main/docs/best-practices.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar GreeterSet = wire.NewSet(NewStdoutGreeter)\n\nfunc DefaultGreeter(ctx context.Context) *Greeter {\n    // ...\n}\n\nfunc NewStdoutGreeter(ctx context.Context, msgs []Message) *Greeter {\n    // ...\n}\n\nfunc NewGreeter(ctx context.Context, w io.Writer, msgs []Message) (*Greeter, error) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Provider Sets in Go with Wire\nDESCRIPTION: Example of grouping providers into a provider set using wire.NewSet. This is useful when several providers are frequently used together.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage foobarbaz\n\nimport (\n    // ...\n    \"github.com/google/wire\"\n)\n\n// ...\n\nvar SuperSet = wire.NewSet(ProvideFoo, ProvideBar, ProvideBaz)\n```\n\n----------------------------------------\n\nTITLE: Generated Wire Injector Implementation in Go\nDESCRIPTION: Example of a generated injector implementation in wire_gen.go. Shows how Wire creates code that calls providers in dependency order.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Code generated by Wire. DO NOT EDIT.\n\n//go:generate go run -mod=mod github.com/google/wire/cmd/wire\n//+build !wireinject\n\npackage main\n\nimport (\n    \"example.com/foobarbaz\"\n)\n\nfunc initializeBaz(ctx context.Context) (foobarbaz.Baz, error) {\n    foo := foobarbaz.ProvideFoo()\n    bar := foobarbaz.ProvideBar(foo)\n    baz, err := foobarbaz.ProvideBaz(ctx, bar)\n    if err != nil {\n        return foobarbaz.Baz{}, err\n    }\n    return baz, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Wire via Go Install Command\nDESCRIPTION: This command installs the Wire tool using Go's package management system. It installs the latest version of Wire and adds it to the user's Go binary path.\nSOURCE: https://github.com/google/wire/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/google/wire/cmd/wire@latest\n```\n\n----------------------------------------\n\nTITLE: Direct Field Access with wire.FieldsOf in Go\nDESCRIPTION: Example of using wire.FieldsOf to directly access struct fields without writing getter functions. This provides a cleaner approach to using struct fields as dependencies.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nfunc injectedMessage() string {\n    wire.Build(\n        provideFoo,\n        wire.FieldsOf(new(Foo), \"S\"))\n    return \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Binding in Go with Wire\nDESCRIPTION: Example of binding a concrete implementation to an interface in a provider set using wire.Bind. This approach follows Go's best practice of returning concrete types from functions.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype Fooer interface {\n    Foo() string\n}\n\ntype MyFooer string\n\nfunc (b *MyFooer) Foo() string {\n    return string(*b)\n}\n\nfunc provideMyFooer() *MyFooer {\n    b := new(MyFooer)\n    *b = \"Hello, World!\"\n    return b\n}\n\ntype Bar string\n\nfunc provideBar(f Fooer) string {\n    // f will be a *MyFooer.\n    return f.Foo()\n}\n\nvar Set = wire.NewSet(\n    provideMyFooer,\n    wire.Bind(new(Fooer), new(*MyFooer)),\n    provideBar)\n```\n\n----------------------------------------\n\nTITLE: Implementing Greeter Constructor and Type in Go\nDESCRIPTION: Definition of the Greeter type with its Message field and constructor function.\nSOURCE: https://github.com/google/wire/blob/main/_tutorial/README.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc NewGreeter(m Message) Greeter {\n    return Greeter{Message: m}\n}\n\ntype Greeter struct {\n    Message Message // <- adding a Message field\n}\n```\n\n----------------------------------------\n\nTITLE: Struct Providers in Go with Wire\nDESCRIPTION: Example of using wire.Struct to construct a struct by injecting field values. Shows how to specify which fields should be injected using field names.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype Foo int\ntype Bar int\n\nfunc ProvideFoo() Foo {/* ... */}\n\nfunc ProvideBar() Bar {/* ... */}\n\ntype FooBar struct {\n    MyFoo Foo\n    MyBar Bar\n}\n\nvar Set = wire.NewSet(\n    ProvideFoo,\n    ProvideBar,\n    wire.Struct(new(FooBar), \"MyFoo\", \"MyBar\"))\n```\n\n----------------------------------------\n\nTITLE: Binding Interface Values in Go with Wire\nDESCRIPTION: Example of binding an interface value using wire.InterfaceValue. This is useful for providing implementations of interfaces without creating providers.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nfunc injectReader() io.Reader {\n    wire.Build(wire.InterfaceValue(new(io.Reader), os.Stdin))\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Options Struct for Dependency Injection in Go\nDESCRIPTION: This example shows how to use an options struct with a provider function that has many dependencies. It includes a struct definition, a provider function, and a wire set declaration.\nSOURCE: https://github.com/google/wire/blob/main/docs/best-practices.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Options struct {\n    // Messages is the set of recommended greetings.\n    Messages []Message\n    // Writer is the location to send greetings. nil goes to stdout.\n    Writer io.Writer\n}\n\nfunc NewGreeter(ctx context.Context, opts *Options) (*Greeter, error) {\n    // ...\n}\n\nvar GreeterSet = wire.NewSet(wire.Struct(new(Options), \"*\"), NewGreeter)\n```\n\n----------------------------------------\n\nTITLE: Using Struct Fields as Providers with wire.FieldsOf\nDESCRIPTION: Example of using wire.FieldsOf to promote struct fields into provided types. This eliminates the need for getter functions like getS.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_18\n\nLANGUAGE: go\nCODE:\n```\ntype Foo struct {\n    S string\n    N int\n    F float64\n}\n\nfunc getS(foo Foo) string {\n    // Bad! Use wire.FieldsOf instead.\n    return foo.S\n}\n\nfunc provideFoo() Foo {\n    return Foo{ S: \"Hello, World!\", N: 1, F: 3.14 }\n}\n\nfunc injectedMessage() string {\n    wire.Build(\n        provideFoo,\n        getS)\n    return \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Values in Go with Wire\nDESCRIPTION: Example of binding a basic value to a type using wire.Value. This avoids the need for throwaway provider functions for simple values.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype Foo struct {\n    X int\n}\n\nfunc injectFoo() Foo {\n    wire.Build(wire.Value(Foo{X: 42}))\n    return Foo{}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Cleanup in Wire Provider\nDESCRIPTION: Demonstrates how to create a Wire provider that returns both a resource (*os.File) and its cleanup function. The cleanup function handles proper resource disposal and error logging.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nfunc provideFile(log Logger, path Path) (*os.File, func(), error) {\n    f, err := os.Open(string(path))\n    if err != nil {\n        return nil, nil, err\n    }\n    cleanup := func() {\n        if err := f.Close(); err != nil {\n            log.Log(err)\n        }\n    }\n    return f, cleanup, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Injector with Value Binding in Go\nDESCRIPTION: Example of a generated injector that uses a bound value. Shows how Wire creates a variable for the value in the generated code.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nfunc injectFoo() Foo {\n    foo := _wireFooValue\n    return foo\n}\n\nvar (\n    _wireFooValue = Foo{X: 42}\n)\n```\n\n----------------------------------------\n\nTITLE: Wire Injection Setup in Go\nDESCRIPTION: Initial Wire setup showing the injector function and build constraint.\nSOURCE: https://github.com/google/wire/blob/main/_tutorial/README.md#2025-04-16_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n//+build wireinject\n\nfunc InitializeEvent() Event {\n    wire.Build(NewEvent, NewGreeter, NewMessage)\n    return Event{}\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Dependency Conflicts by Creating Wrapper Types in Go Wire\nDESCRIPTION: This example demonstrates how to handle multiple dependencies of the same type by creating a wrapper type (OtherFoo) for one of the dependencies, allowing Wire to distinguish between them.\nSOURCE: https://github.com/google/wire/blob/main/docs/faq.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype OtherFoo Foo\n\nfunc newOtherFoo() *OtherFoo {\n\t// Call the original provider...\n\tfoo := newFoo2()\n\t// ...then convert it to the new type.\n\treturn (*OtherFoo)(foo)\n}\n\nfunc provideBar(foo1 *Foo, otherFoo *OtherFoo) *Bar {\n\t// Convert the new type into the unwrapped type...\n\tfoo2 := (*Foo)(otherFoo)\n\t// ...then use it to call the original provider.\n\treturn newBar(foo1, foo2)\n}\n\nfunc inject() *Bar {\n\twire.Build(newFoo1, newOtherFoo, provideBar)\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event's Start Method in Go\nDESCRIPTION: Method that starts the event by getting and printing the greeting message.\nSOURCE: https://github.com/google/wire/blob/main/_tutorial/README.md#2025-04-16_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (e Event) Start() {\n    msg := e.Greeter.Greet()\n    fmt.Println(msg)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Greeter's Greet Method in Go\nDESCRIPTION: Method that returns the Greeter's message.\nSOURCE: https://github.com/google/wire/blob/main/_tutorial/README.md#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (g Greeter) Greet() Message {\n    return g.Message\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Constructor and Type in Go\nDESCRIPTION: Definition of the Event type with its Greeter field and constructor function.\nSOURCE: https://github.com/google/wire/blob/main/_tutorial/README.md#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc NewEvent(g Greeter) Event {\n    return Event{Greeter: g}\n}\n\ntype Event struct {\n    Greeter Greeter // <- adding a Greeter field\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Event Constructor\nDESCRIPTION: Updated Event constructor with error handling for grumpy greeters.\nSOURCE: https://github.com/google/wire/blob/main/_tutorial/README.md#2025-04-16_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc NewEvent(g Greeter) (Event, error) {\n    if g.Grumpy {\n        return Event{}, errors.New(\"could not create event: event greeter is grumpy\")\n    }\n    return Event{Greeter: g}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Constructor in Go\nDESCRIPTION: Simple initializer function that creates a new Message with a hardcoded greeting.\nSOURCE: https://github.com/google/wire/blob/main/_tutorial/README.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc NewMessage() Message {\n    return Message(\"Hi there!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Provider Sets in Go with Wire\nDESCRIPTION: Example of adding other provider sets into a provider set. This allows composing smaller provider sets into larger ones for reuse.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage foobarbaz\n\nimport (\n    // ...\n    \"example.com/some/other/pkg\"\n)\n\n// ...\n\nvar MegaSet = wire.NewSet(SuperSet, pkg.OtherSet)\n```\n\n----------------------------------------\n\nTITLE: Generated Injector for Partial Struct Provider in Go\nDESCRIPTION: Example of a generated injector that only injects some fields of a struct. Shows how Wire handles selective field injection.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc injectFooBar() FooBar {\n    foo := ProvideFoo()\n    fooBar := FooBar{\n        MyFoo: foo,\n    }\n    return fooBar\n}\n```\n\n----------------------------------------\n\nTITLE: Alternate Wire Injector Syntax Using Panic\nDESCRIPTION: Shows a concise alternative syntax for Wire injectors using panic() instead of explicit return statements. This approach reduces boilerplate in injector declarations.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nfunc injectFoo() Foo {\n    panic(wire.Build(/* ... */))\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Injector for Pointer to Struct in Go\nDESCRIPTION: Example of a generated injector that returns a pointer to a struct. Shows how Wire handles creation and field injection for pointer returns.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc injectFooBar() *FooBar {\n    foo := ProvideFoo()\n    fooBar := &FooBar{\n        MyFoo: foo,\n    }\n    return fooBar\n}\n```\n\n----------------------------------------\n\nTITLE: Struct with Wire Tag to Prevent Field Injection\nDESCRIPTION: Example of using the `wire:\"-\"` struct tag to prevent certain fields from being filled in by the injector. This is useful when passing '*' to wire.Struct.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ntype Foo struct {\n    mu sync.Mutex `wire:\"-\"`\n    Bar Bar\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Injector with FieldsOf in Go\nDESCRIPTION: Example of a generated injector that uses wire.FieldsOf. Shows how Wire accesses struct fields directly in the generated code.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nfunc injectedMessage() string {\n    foo := provideFoo()\n    string2 := foo.S\n    return string2\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Injector for Struct Provider in Go\nDESCRIPTION: Example of a generated injector for a FooBar struct. Shows how Wire constructs a struct by filling in the specified fields using their respective providers.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc injectFooBar() FooBar {\n    foo := ProvideFoo()\n    bar := ProvideBar()\n    fooBar := FooBar{\n        MyFoo: foo,\n        MyBar: bar,\n    }\n    return fooBar\n}\n```\n\n----------------------------------------\n\nTITLE: Struct Provider with Partial Field Injection in Go\nDESCRIPTION: Example of using wire.Struct to inject only specific fields of a struct. This shows how to selectively inject only MyFoo without MyBar.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nvar Set = wire.NewSet(\n    ProvideFoo,\n    wire.Struct(new(FooBar), \"MyFoo\"))\n```\n\n----------------------------------------\n\nTITLE: Displaying Dependency Cycle Error in Wire (Go)\nDESCRIPTION: This is an error message from Google's Wire dependency injection tool that illustrates a circular dependency problem. The error shows that Bar depends on Foo, which depends on Baz, which then depends back on Bar, creating an unresolvable cycle that prevents Wire from generating the dependency injection code.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/Cycle/want/wire_errs.txt#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: cycle for example.com/foo.Bar:\nexample.com/foo.Bar (example.com/foo.provideBar) ->\nexample.com/foo.Foo (example.com/foo.provideFoo) ->\nexample.com/foo.Baz (example.com/foo.provideBaz) ->\nexample.com/foo.Bar\n```\n\n----------------------------------------\n\nTITLE: Updated Greeter Constructor with Grumpy State\nDESCRIPTION: Enhanced Greeter constructor that randomly sets a grumpy state based on time.\nSOURCE: https://github.com/google/wire/blob/main/_tutorial/README.md#2025-04-16_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc NewGreeter(m Message) Greeter {\n    var grumpy bool\n    if time.Now().Unix()%2 == 0 {\n        grumpy = true\n    }\n    return Greeter{Message: m, Grumpy: grumpy}\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Missing Types Error in Wire Injection\nDESCRIPTION: This error shows that Wire is unable to find providers for multiple types (Foo and Bar) needed by another type (Baz). It specifies the location of the provider that requires these missing types.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/MultipleMissingInputs/want/wire_errs.txt#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectMultipleMissingTypes: no provider found for example.com/foo.Foo\nneeded by example.com/foo.Baz in provider \"provideBaz\" (example.com/foo/foo.go:x:y)\n\nexample.com/foo/wire.go:x:y: inject injectMultipleMissingTypes: no provider found for example.com/foo.Bar\nneeded by example.com/foo.Baz in provider \"provideBaz\" (example.com/foo/foo.go:x:y)\n```\n\n----------------------------------------\n\nTITLE: Manual Dependency Injection in Go Main\nDESCRIPTION: Example of manually initializing and wiring components together without Wire.\nSOURCE: https://github.com/google/wire/blob/main/_tutorial/README.md#2025-04-16_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    message := NewMessage()\n    greeter := NewGreeter(message)\n    event := NewEvent(greeter)\n\n    event.Start()\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Wire Multiple Bindings Error in Go\nDESCRIPTION: An error message from Google's Wire dependency injection framework showing conflicting bindings for the same type. The error shows that example.com/foo.Foo has multiple binding sources: one from a provider function, another from a provider set, and a third from an injector function argument.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/InjectInputConflict/want/wire_errs.txt#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: multiple bindings for example.com/foo.Foo\ncurrent:\n<- provider \"provideFoo\" (example.com/foo/foo.go:x:y)\n<- provider set \"Set\" (example.com/foo/foo.go:x:y)\nprevious:\n<- argument foo to injector function injectBar (example.com/foo/wire.go:x:y)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom String Type for Dependency Injection in Go\nDESCRIPTION: This snippet demonstrates how to create a custom string type to avoid conflicts with other providers when injecting common types like string.\nSOURCE: https://github.com/google/wire/blob/main/docs/best-practices.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype MySQLConnectionString string\n```\n\n----------------------------------------\n\nTITLE: Wire Error Message for Unexported Identifier Usage\nDESCRIPTION: This error message is displayed when Wire tries to inject a value (injectedMessage) that depends on an unexported identifier (privateMsg) from another package. In Go, unexported (lowercase) identifiers cannot be accessed outside their defining package, which prevents Wire from properly constructing the dependency graph.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/UnexportedValue/want/wire_errs.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectedMessage: value string can't be used: uses unexported identifier privateMsg\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Dependency Conflict with Multiple Providers of Same Type in Go Wire\nDESCRIPTION: This example shows the error case when Wire encounters multiple providers for the same type (*Foo) in a dependency graph, which is not allowed by default.\nSOURCE: https://github.com/google/wire/blob/main/docs/faq.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Foo struct { /* ... */ }\ntype Bar struct { /* ... */ }\n\nfunc newFoo1() *Foo { /* ... */ }\nfunc newFoo2() *Foo { /* ... */ }\nfunc newBar(foo1 *Foo, foo2 *Foo) *Bar { /* ... */ }\n\nfunc inject() *Bar {\n\t// ERROR! Multiple providers for *Foo.\n\twire.Build(newFoo1, newFoo2, newBar)\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Unexported Symbol Error Message in Wire\nDESCRIPTION: This error message appears when trying to use Wire with a symbol that isn't exported from its package. In Go, only exported (capitalized) identifiers can be referenced from other packages.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/UnexportedStruct/want/wire_errs.txt#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: foo not exported by package bar\n```\n\n----------------------------------------\n\nTITLE: Wire Error Message for Unused Provider\nDESCRIPTION: The error output from the Wire tool when an unused provider is included in the wire.Build call. The tool identifies exactly which provider is not being used in the dependency graph.\nSOURCE: https://github.com/google/wire/blob/main/_tutorial/README.md#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$GOPATH/src/github.com/google/wire/_tutorial/wire.go:24:1:\ninject InitializeEvent: unused provider \"NewEventNumber\"\nwire: generate failed\n```\n\n----------------------------------------\n\nTITLE: Displaying Wire Injection Error for Cleanup Function Mismatch in Go\nDESCRIPTION: This snippet showcases an error message from the Wire dependency injection framework. The error occurs when a provider for 'example.com/foo.Foo' returns a cleanup function, but the injection site does not handle it.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/InjectorMissingCleanup/want/wire_errs.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectFoo: provider for example.com/foo.Foo returns cleanup but injection does not return cleanup function\n```\n\n----------------------------------------\n\nTITLE: Wire Error Message for Missing Provider\nDESCRIPTION: The error output from the Wire tool when it cannot find a provider for a required type. It shows the location of the error and which component requires the missing provider.\nSOURCE: https://github.com/google/wire/blob/main/_tutorial/README.md#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$GOPATH/src/github.com/google/wire/_tutorial/wire.go:24:1:\ninject InitializeEvent: no provider found for github.com/google/wire/_tutorial.Greeter\n(required by provider of github.com/google/wire/_tutorial.Event)\nwire: generate failed\n```\n\n----------------------------------------\n\nTITLE: Wire Binding Error Path in Go\nDESCRIPTION: Error message showing a failed wire.Bind operation at example.com/foo/foo.go where the concrete type *foo could not be bound to the fooer interface because setB lacks a required provider.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/ProviderSetBindingMissingConcreteType/want/wire_errs.txt#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/foo.go:x:y: wire.Bind of concrete type \"*example.com/foo.foo\" to interface \"example.com/foo.fooer\", but setB does not include a provider for \"*example.com/foo.foo\"\n```\n\n----------------------------------------\n\nTITLE: Missing Output Type Error in Wire Injection\nDESCRIPTION: This error occurs when Wire cannot find a provider for a required type (Foo) during injection. It indicates that the injector is missing a necessary output type.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/MultipleMissingInputs/want/wire_errs.txt#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectMissingOutputType: no provider found for example.com/foo.Foo, output of injector\n```\n\n----------------------------------------\n\nTITLE: Wire Binding Error Example in Go\nDESCRIPTION: Shows an error where wire.Bind() was called with insufficient arguments. The error indicates that wire.Bind requires two interface arguments but was only provided with a pointer to Fooer.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/InterfaceBindingNotEnoughArgs/want/wire_errs.txt#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: not enough arguments in call to wire.Bind\n\thave (*Fooer)\n\twant (interface{}, interface{})\n```\n\n----------------------------------------\n\nTITLE: Missing Recursive Type Error in Wire Injection\nDESCRIPTION: This error demonstrates a recursive dependency chain where Wire cannot find a provider for a type (Foo) that is needed by multiple other types in a chain (Zip, Zap, Zop). It shows the full dependency path and the locations of relevant providers.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/MultipleMissingInputs/want/wire_errs.txt#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectMissingRecursiveType: no provider found for example.com/foo.Foo\nneeded by example.com/foo.Zip in provider \"provideZip\" (example.com/foo/foo.go:x:y)\nneeded by example.com/foo.Zap in provider \"provideZap\" (example.com/foo/foo.go:x:y)\nneeded by example.com/foo.Zop in provider \"provideZop\" (example.com/foo/foo.go:x:y)\n```\n\n----------------------------------------\n\nTITLE: Displaying Wire Injection Error for Missing Provider in Go\nDESCRIPTION: This snippet shows an error message from the Wire dependency injection tool. It indicates that no provider was found for the 'example.com/foo.Fooer' type when trying to inject 'injectFooer'.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/NoImplicitInterface/want/wire_errs.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectFooer: no provider found for example.com/foo.Fooer, output of injector\n```\n\n----------------------------------------\n\nTITLE: Unused Value Error in Wire\nDESCRIPTION: Error message generated when a value is provided but not consumed by any injection target in the Wire graph.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/UnusedProviders/want/wire_errs.txt#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectFooBar: unused value of type string\n```\n\n----------------------------------------\n\nTITLE: Unused Provider Set Error in Wire\nDESCRIPTION: Error message generated when a provider set is defined but not used in the Wire injection process.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/UnusedProviders/want/wire_errs.txt#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectFooBar: unused provider set \"unusedSet\"\n```\n\n----------------------------------------\n\nTITLE: Unused Interface Binding Error in Wire\nDESCRIPTION: Error message generated when an interface binding is defined but not used in the Wire dependency injection process.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/UnusedProviders/want/wire_errs.txt#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectFooBar: unused interface binding to type example.com/foo.Fooer\n```\n\n----------------------------------------\n\nTITLE: Unused Provider Function Error in Wire\nDESCRIPTION: Error message generated when a provider function is defined but not used in the Wire dependency injection graph.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/UnusedProviders/want/wire_errs.txt#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectFooBar: unused provider \"main.provideUnused\"\n```\n\n----------------------------------------\n\nTITLE: Unused Struct Field Error in Wire\nDESCRIPTION: Error message generated when a struct field is marked for injection but not utilized in the Wire dependency graph.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/UnusedProviders/want/wire_errs.txt#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectFooBar: unused field \"example.com/foo.S\".Cfg\n```\n\n----------------------------------------\n\nTITLE: Creating an Unused Provider in Go Wire Injector\nDESCRIPTION: This example demonstrates what happens when you add an unused provider function to a Wire injector. The Wire tool will detect and report the unused provider during code generation.\nSOURCE: https://github.com/google/wire/blob/main/_tutorial/README.md#2025-04-16_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc NewEventNumber() int  {\n    return 1\n}\n\nfunc InitializeEvent(phrase string) (Event, error) {\n     // woops! NewEventNumber is unused.\n    wire.Build(NewEvent, NewGreeter, NewMessage, NewEventNumber)\n    return Event{}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Wire Build Error Message\nDESCRIPTION: An error message from Wire indicating that a variable of type func() *Foo is not properly configured as a provider or provider set in the wire build graph.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/FuncArgProvider/want/wire_errs.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nexample.com/foo/wire.go:x:y: var fn func() *example.com/foo.Foo is not a provider or a provider set\n```\n\n----------------------------------------\n\nTITLE: Wire Dependency Cycle Error Output\nDESCRIPTION: A Wire compiler error showing a circular dependency between components Bar, Foo, and Baz. The cycle starts with Bar's provider, goes through Foo's provider, then through Baz via Bar's Bz method, and finally loops back to Bar.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/FieldsOfCycle/want/wire_errs.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nexample.com/foo/wire.go:x:y: cycle for example.com/foo.Bar:\nexample.com/foo.Bar (example.com/foo.provideBar) ->\nexample.com/foo.Foo (example.com/foo.provideFoo) ->\nexample.com/foo.Baz (example.com/foo.Bar.Bz) ->\nexample.com/foo.Bar\n```\n\n----------------------------------------\n\nTITLE: Explaining Wire Error Message for Provider with Error Return in Non-failing Context\nDESCRIPTION: This error occurs when a provider function that can return an error is used in a context (like an injector function) that doesn't allow failure. The provider returns `Foo, error` but is being used where only `Foo` can be returned.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/InjectorMissingError/want/wire_errs.txt#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectFoo: provider for example.com/foo.Foo returns error but injection not allowed to fail\n```\n\n----------------------------------------\n\nTITLE: Multiple String Binding Error in Wire Injector Function\nDESCRIPTION: This error message from the Google Wire dependency injection tool shows that there are multiple bindings for the same type (string) in an injector function. The error identifies that arguments 'a' and 'b' both attempt to provide a string to the injector, causing an ambiguity in the dependency graph.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/MultipleArgsSameType/want/wire_errs.txt#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: multiple bindings for string\ncurrent:\n<- argument b to injector function inject (example.com/foo/wire.go:x:y)\nprevious:\n<- argument a to injector function inject (example.com/foo/wire.go:x:y)\n```\n\n----------------------------------------\n\nTITLE: Displaying Wire Error: Type Mismatch in Go\nDESCRIPTION: This snippet shows an error message produced by the Wire code generation tool. It indicates that a string type is incorrectly used in place of an io.Reader interface at a specific location in the code.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/InterfaceValueDoesntImplement/want/wire_errs.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nexample.com/foo/wire.go:x:y: string does not implement io.Reader\n```\n\n----------------------------------------\n\nTITLE: Wire Error Message for Incorrect InterfaceValue Parameter Type\nDESCRIPTION: An error message from Google's Wire dependency injection tool indicating that the first argument to the InterfaceValue function must be a pointer to an interface type, but a string was provided instead. This typically occurs when attempting to bind an implementation to an interface specification incorrectly.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/InterfaceValueInvalidArg0/want/wire_errs.txt#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: first argument to InterfaceValue must be a pointer to an interface type; found string\n```\n\n----------------------------------------\n\nTITLE: Wire Mutex Injection Error\nDESCRIPTION: Error message indicating that a mutex ('mu') field or dependency is prevented from being injected by the Wire framework. This typically occurs when Wire's dependency injection rules prevent direct injection of sync.Mutex or similar synchronization primitives.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/StructWithPreventTag/want/wire_errs.txt#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/foo.go:x:y: \"mu\" is prevented from injecting by wire\n```\n\n----------------------------------------\n\nTITLE: Running Wire Code Generation Command\nDESCRIPTION: Shell command to generate the injector implementation by invoking Wire in the package directory.\nSOURCE: https://github.com/google/wire/blob/main/docs/guide.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nwire\n```\n\n----------------------------------------\n\nTITLE: Displaying Wire Injection Error in Go\nDESCRIPTION: This snippet shows an error message produced by the Wire framework when attempting to inject a value that is not properly declared in the package scope. The error occurs in the 'injectBar' function and involves an integer value.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/ValueFromFunctionScope/want/wire_errs.txt#2025-04-16_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectBar: value int can't be used: f is not declared in package scope\n```\n\n----------------------------------------\n\nTITLE: Wire Error: Using io.Reader with Value Instead of InterfaceValue\nDESCRIPTION: This error message occurs when using the Wire Value function with an interface type (in this case io.Reader). When working with interface values in Wire, you must use InterfaceValue instead of Value to properly handle interface typing.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/ValueIsInterfaceValue/want/wire_errs.txt#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: argument to Value may not be an interface value (found io.Reader); use InterfaceValue instead\n```\n\n----------------------------------------\n\nTITLE: Displaying Wire Injection Error for Missing String Pointer Provider in Go\nDESCRIPTION: This error message is generated by Google Wire when it fails to find a provider for a *string type during the dependency injection process. It indicates that the injector is unable to resolve how to create or obtain a string pointer for the 'injectedMessagePtr' parameter.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/FieldsOfStructDoNotProvidePtrToField/want/wire_errs.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectedMessagePtr: no provider found for *string, output of injector\n```\n\n----------------------------------------\n\nTITLE: Wire Compilation Error for Incorrect Bind Usage in Go\nDESCRIPTION: This error message is generated by the Google Wire dependency injection tool when the Bind function is called with an improper first argument. The first parameter to Bind must be a pointer to an interface type, but a string was provided instead.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/InterfaceBindingInvalidArg0/want/wire_errs.txt#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: first argument to Bind must be a pointer to an interface type; found string\n```\n\n----------------------------------------\n\nTITLE: Examining Wire Error Message Format in Go\nDESCRIPTION: This snippet shows the format of an error message produced by the Wire tool when it encounters a variable that is referenced as if it were a provider set but is actually just a regular struct. The error indicates that 'myFakeSet' is not a valid provider or provider set.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/EmptyVar/want/wire_errs.txt#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: var example.com/foo.myFakeSet struct{} is not a provider or a provider set\n```\n\n----------------------------------------\n\nTITLE: Initializing Wire Package with Default Providers in Go\nDESCRIPTION: This code snippet initializes the Wire package by setting up default providers. It creates a new ProviderSet with built-in providers for common types like error, bool, string, int, and uint. This ensures these basic types are available for injection without explicit provider functions.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/VarValue/want/program_out.txt#2025-04-16_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage wire\n\nimport (\n\t\"github.com/google/wire/internal/wire\"\n)\n\nvar ()\n\nfunc init() {\n\twire.Build = wire.NewSet(\n\t\twire.ValueProvider(error(nil)),\n\t\twire.ValueProvider(false),\n\t\twire.ValueProvider(\"\"),\n\t\twire.ValueProvider(int(0)),\n\t\twire.ValueProvider(uint(0)),\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Time-Based Greetings - Approach B\nDESCRIPTION: This snippet demonstrates the output of Approach B for generating time-based greetings. It shows two greetings with different timestamps, including a default timestamp and a year 1000 timestamp.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/ExampleWithMocks/want/program_out.txt#2025-04-16_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nGood day! It is 0001-01-01 00:00:00 +0000 UTC\nGood day! It is 1000-01-01 00:00:00 +0000 UTC\n```\n\n----------------------------------------\n\nTITLE: Generating Time-Based Greetings - Approach A\nDESCRIPTION: This snippet shows the output of Approach A for generating time-based greetings. It displays two greetings with different timestamps, including a default timestamp and a specific year 2000 timestamp.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/ExampleWithMocks/want/program_out.txt#2025-04-16_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nGood day! It is 0001-01-01 00:00:00 +0000 UTC\nGood day! It is 2000-01-01 00:00:00 +0000 UTC\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Configuration Values for Google Wire\nDESCRIPTION: A set of boolean values configured for Google Wire settings. These values are likely used to control feature flags or configuration options within the Wire dependency injection system.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/PartialCleanup/want/program_out.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntrue\ntrue true true\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty JSON Configuration for Google Wire Project\nDESCRIPTION: This snippet shows an empty JSON object, which can serve as a starting point for configuring a Google Wire project. It provides a blank slate for developers to add specific configuration options as needed.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/NamingWorstCaseAllInOne/want/program_out.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty Struct in Go\nDESCRIPTION: A code snippet showing the initialization of an empty struct in Go. The \"&{}\" syntax creates a pointer to an empty struct literal.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/StructPointer/want/program_out.txt#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n&{}\n```\n\n----------------------------------------\n\nTITLE: Empty JSON Object in Google Wire Project\nDESCRIPTION: An empty JSON object ({}) that represents either a placeholder, a template, or an unpopulated configuration file in the Google Wire project.\nSOURCE: https://github.com/google/wire/blob/main/internal/wire/testdata/NamingWorstCase/want/program_out.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{}\n```"
  }
]