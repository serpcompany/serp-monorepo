[
  {
    "owner": "elysiajs",
    "repo": "elysia",
    "content": "TITLE: Creating ElysiaJS App using Bun\nDESCRIPTION: This snippet demonstrates how to create a new ElysiaJS application using the `bun create elysia` command.  This command utilizes the Bun package manager to scaffold a new ElysiaJS project, likely including necessary dependencies and a basic project structure.  The command is a prerequisite for starting a new ElysiaJS project.\nSOURCE: https://github.com/elysiajs/elysia/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun create elysia app\n```\n\n----------------------------------------\n\nTITLE: Using new Plugin Style\nDESCRIPTION: Illustrates the new way to define plugins in ElysiaJS (introduced in exp.51). A plugin is now a function that accepts a configuration object and returns a function that accepts a KingWorld instance.  This allows for async plugins and better type inference.\nSOURCE: https://github.com/elysiajs/elysia/blob/main/CHANGELOG.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst plugin = (config) => (app: KingWorld) => app\n\nnew KingWorld().use(plugin({\n    // provide some config here\n}))\n```\n\n----------------------------------------\n\nTITLE: Decorating with Generic\nDESCRIPTION: Shows how to use generics when decorating an ElysiaJS app, allowing for type-safe custom namespaces. This example demonstrates creating a decorator that adds a property with a generic name to the app's context.\nSOURCE: https://github.com/elysiajs/elysia/blob/main/CHANGELOG.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst a = <Name extends string = string>(name: Name) => (app: KingWorld) => app.decorate(name, {\n    hi: () => 'hi'\n})\n\nnew KingWorld()\n    .use(a('customName'))\n    // Retrieve generic from plugin, not possible before exp.51\n    .get({ customName } => customName.hi())\n```\n\n----------------------------------------\n\nTITLE: Running Development Version of Elysia.js\nDESCRIPTION: This command starts the development version of Elysia.js.  It leverages bun's run feature.  The command assumes that dependencies are already installed and the bun environment is correctly set up.  The expected output is the running application in development mode.\nSOURCE: https://github.com/elysiajs/elysia/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bun\nDESCRIPTION: This snippet describes the command to install all necessary dependencies for the Elysia.js project. It uses the bun package manager and must be executed within the root directory of the project.  The output will be the installation of all the dependencies listed in the project's package.json file.\nSOURCE: https://github.com/elysiajs/elysia/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nbun install\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Bun\nDESCRIPTION: This command executes all unit tests within the 'test/' directory of the Elysia.js project. It utilizes bun's testing framework. Prerequisites include having bun installed and the project dependencies installed, and test files located in the specified directory.  The output is the results of all the tests including passes and failures.\nSOURCE: https://github.com/elysiajs/elysia/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nbun test\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Unit Test with Bun\nDESCRIPTION: This command runs a specific unit test file located in the 'test/' directory.  It uses the bun test command to execute a single test file. It requires bun to be installed and configured, and the specified test file to exist within the designated directory. The output is the results of the particular test file.\nSOURCE: https://github.com/elysiajs/elysia/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nbun test test/<test-file>.ts\n```\n\n----------------------------------------\n\nTITLE: Migrating Plugin Type in ElysiaJS\nDESCRIPTION: This snippet shows how to migrate from the deprecated `Plugin` type to the simplified type declaration of `KingWorld`. This change affects how you declare and import plugins in your ElysiaJS application.  It requires the ElysiaJS library.\nSOURCE: https://github.com/elysiajs/elysia/blob/main/CHANGELOG.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// From\nimport type { Plugin } from 'kingworld'\nconst a: Plugin = (app) => app\n\n// To\nimport type { KingWorld } from 'kingworld'\nconst a = (app: KingWorld) => app\n```\n\n----------------------------------------\n\nTITLE: Migrating store usage in ElysiaJS\nDESCRIPTION: This snippet demonstrates how to migrate from the old `store` usage to the new `context.store` in ElysiaJS.  The change involves accessing the store through the context object provided to route handlers.  Dependencies include ElysiaJS framework.\nSOURCE: https://github.com/elysiajs/elysia/blob/main/CHANGELOG.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// From\napp.get(({}, store) => store.a)\n\n// To\napp.get(({ store }) => store.a)\n```\n\n----------------------------------------\n\nTITLE: Migrating Header in ElysiaJS\nDESCRIPTION: This code snippet illustrates the migration of headers to `Record<string, unknown>`.  It demonstrates the change in how you set the header values. It uses the ElysiaJS framework for defining routes. Dependencies include ElysiaJS.\nSOURCE: https://github.com/elysiajs/elysia/blob/main/CHANGELOG.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\"/\", ({ responseHeader }) => {\n    // From\n    responseHeader.append('X-Powered-By', 'KingWorld')\n\n    // To\n    responseHeader['X-Powered-By', 'KingWorld']\n\n    return \"KingWorld\"\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating to new Context API\nDESCRIPTION: Illustrates how to migrate from the old `responseHeaders`, `status`, `redirect` methods to the new `set` property for modifying response headers, status code, and redirection in ElysiaJS. This migration was introduced in version 0.0.0-experimental.40.\nSOURCE: https://github.com/elysiajs/elysia/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// From\napp.get('/', ({ responseHeaders, status, redirect }) => {\n    responseHeaders['server'] = 'KingWorld'\n    status(401)\n    redirect('/')\n})\n\n// To\napp.get('/', ({ set }) => {\n    set.headers['server'] = 'KingWorld'\n    set.status = 401\n    set.redirect = '/'\n})\n```\n\n----------------------------------------\n\nTITLE: Using Plugin with Config\nDESCRIPTION: Demonstrates how to define a plugin in versions prior to exp.51 and the flaws in this design.  Highlights the change to accepting a single parameter (a configuration object) which returns a function that accepts a KingWorld instance.\nSOURCE: https://github.com/elysiajs/elysia/blob/main/CHANGELOG.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst plugin = (app: KingWorld, config) => app\n\nnew KingWorld().use(plugin, {\n    // Provide some config here\n})\n```"
  }
]