[
  {
    "owner": "koajs",
    "repo": "koa",
    "content": "TITLE: Creating a Hello World Koa Application\nDESCRIPTION: A minimal Koa application that responds with 'Hello World'. This demonstrates the basic structure of a Koa app, including creating the application instance, adding middleware, and starting the server.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/index.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst Koa = require('koa');\nconst app = new Koa();\n\napp.use(async ctx => {\n  ctx.body = 'Hello World';\n});\n\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware Cascading in Koa\nDESCRIPTION: This example demonstrates Koa's middleware cascading flow where requests flow downstream through middleware and then back upstream. It includes logging, response time tracking, and content generation middleware.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/index.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst Koa = require('koa');\nconst app = new Koa();\n\n// logger\n\napp.use(async (ctx, next) => {\n  await next();\n  const rt = ctx.response.get('X-Response-Time');\n  console.log(`${ctx.method} ${ctx.url} - ${rt}`);\n});\n\n// x-response-time\n\napp.use(async (ctx, next) => {\n  const start = Date.now();\n  await next();\n  const ms = Date.now() - start;\n  ctx.set('X-Response-Time', `${ms}ms`);\n});\n\n// response\n\napp.use(async ctx => {\n  ctx.body = 'Hello World';\n});\n\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Koa Hello World Application\nDESCRIPTION: A minimal example showing how to create a Koa application that responds with 'Hello Koa'. It initializes a Koa instance, adds a middleware that sets the response body, and starts the server on port 3000.\nSOURCE: https://github.com/koajs/koa/blob/master/Readme.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Koa = require('koa');\nconst app = new Koa();\n\n// response\napp.use(ctx => {\n  ctx.body = 'Hello Koa';\n});\n\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Koa Applications\nDESCRIPTION: Shows how to implement custom error handling in Koa by listening for 'error' events on the application. Errors can be logged with or without the context object depending on where they occur.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/index.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\napp.on('error', err => {\n  log.error('server error', err)\n});\n```\n\nLANGUAGE: js\nCODE:\n```\napp.on('error', (err, ctx) => {\n  log.error('server error', err, ctx)\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Handling of Asynchronous Operations in Koa Routes (JavaScript)\nDESCRIPTION: This snippet shows the correct way to handle asynchronous operations in Koa route handlers by returning the promise from the database operation.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/troubleshooting.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.get('/fetch', function (ctx, next) {\n  return models.Book.findById(parseInt(ctx.query.id)).then(function (book) {\n    ctx.body = book;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Assertions in Koa Context (JavaScript)\nDESCRIPTION: Demonstrates the use of ctx.assert() for throwing conditional errors. This method is similar to Node's assert() but integrated with Koa's error handling.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/context.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nctx.assert(ctx.state.user, 401, 'User not found. Please login!');\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Koa HTTP Server\nDESCRIPTION: A simple example of binding a Koa application to port 3000 using the app.listen() method, which is syntactic sugar around Node's http.createServer().\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/index.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst Koa = require('koa');\nconst app = new Koa();\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Using Koa Context in Middleware (JavaScript)\nDESCRIPTION: Demonstrates how to access the Koa Context object in middleware. The context provides access to the request and response objects, as well as other helpful methods for web application development.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/context.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(async ctx => {\n  ctx; // is the Context\n  ctx.request; // is a Koa Request\n  ctx.response; // is a Koa Response\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Logger Middleware with Common Functions\nDESCRIPTION: Example of a logger middleware using the common function approach with Promises. It captures the start time, calls next() which returns a Promise, and then logs the response time after the Promise resolves.\nSOURCE: https://github.com/koajs/koa/blob/master/Readme.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Middleware normally takes two parameters (ctx, next), ctx is the context for one request,\n// next is a function that is invoked to execute the downstream middleware. It returns a Promise with a then function for running code after completion.\n\napp.use((ctx, next) => {\n  const start = Date.now();\n  return next().then(() => {\n    const ms = Date.now() - start;\n    console.log(`${ctx.method} ${ctx.url} - ${ms}ms`);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Error Handler in Koa.js\nDESCRIPTION: An example of implementing a custom error handler middleware that catches errors and returns JSON responses. It sets the status code based on the error's status properties and provides the error message in the response body.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/error-handling.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(async (ctx, next) => {\n  try {\n    await next();\n  } catch (err) {\n    // will only respond with JSON\n    ctx.status = err.statusCode || err.status || 500;\n    ctx.body = {\n      message: err.message\n    };\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Koa Server with Native HTTP Module\nDESCRIPTION: This snippet demonstrates the equivalent of app.listen() using Node's native http module, showing how Koa integrates with Node's HTTP server functionality.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/index.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst http = require('http');\nconst Koa = require('koa');\nconst app = new Koa();\nhttp.createServer(app.callback()).listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Minification Middleware in Koa\nDESCRIPTION: Example middleware that minifies HTML responses. It demonstrates using the response.is() method to check content type before applying transformations, while handling different body types appropriately.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/response.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst minify = require('html-minifier');\n\napp.use(async (ctx, next) => {\n  await next();\n\n  if (!ctx.response.is('html')) return;\n\n  let body = ctx.body;\n  if (!body || body.pipe) return;\n\n  if (Buffer.isBuffer(body)) body = body.toString();\n  ctx.body = minify(body);\n});\n```\n\n----------------------------------------\n\nTITLE: Throwing Errors with Koa Context (JavaScript)\nDESCRIPTION: Demonstrates various ways to throw errors using the ctx.throw() method. This helper method allows setting the status code, error message, and additional properties.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/context.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nctx.throw(400);\nctx.throw(400, 'name required');\nctx.throw(400, 'name required', { user: user });\n```\n\n----------------------------------------\n\nTITLE: Extending the Context Object in Koa\nDESCRIPTION: This example demonstrates how to extend Koa's context object by adding custom properties to app.context, allowing them to be available in all middleware throughout the application.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/index.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\napp.context.db = db();\n\napp.use(async ctx => {\n  console.log(ctx.db);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Signed Cookie Keys in Koa\nDESCRIPTION: Examples of how to set signed cookie keys in a Koa application, either as an array of keys or by using a KeyGrip instance. These keys are used when creating signed cookies for security.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/index.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\napp.keys = ['OEK5zjaAMPc3L6iK7PyUjCOziUH3rsrMKB9u8H07La1SkfwtuBoDnHaaPCkG5Brg', 'MNKeIebviQnCPo38ufHcSfw3FFv8EtnAe1xE02xkN1wkCV1B2z126U44yk2BQVK7'];\napp.keys = new KeyGrip(['OEK5zjaAMPc3L6iK7PyUjCOziUH3rsrMKB9u8H07La1SkfwtuBoDnHaaPCkG5Brg', 'MNKeIebviQnCPo38ufHcSfw3FFv8EtnAe1xE02xkN1wkCV1B2z126U44yk2BQVK7'], 'sha256');\n```\n\n----------------------------------------\n\nTITLE: Chaining Middleware in Koa Applications\nDESCRIPTION: Demonstrates two equivalent ways to add multiple middleware functions to a Koa application - either through separate app.use() calls or by chaining them together using method chaining.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/index.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\napp.use(someMiddleware)\napp.use(someOtherMiddleware)\napp.listen(3000)\n```\n\nLANGUAGE: js\nCODE:\n```\napp.use(someMiddleware)\n  .use(someOtherMiddleware)\n  .listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Setting Content-Type in Koa\nDESCRIPTION: Examples of setting the response Content-Type using various methods. This shows how to set the type using mime strings, file extensions, or shorthand values.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/response.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nctx.type = 'text/plain; charset=utf-8';\nctx.type = 'image/png';\nctx.type = '.png';\nctx.type = 'png';\n```\n\n----------------------------------------\n\nTITLE: Correct Middleware Chain Implementation in Koa (JavaScript)\nDESCRIPTION: This snippet shows the correct way to implement a middleware chain in Koa, ensuring that next() is called to pass control to subsequent middleware.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/troubleshooting.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.use(function (ctx, next) {\n  if (ctx.query.id) {\n    ctx.state.id = parseInt(ctx.query.id);\n  }\n  return next();\n});\n\nrouter.get('/fetch', function (ctx, next) {\n  return models.Book.findById(ctx.state.id).then(function (book) {\n    ctx.body = book;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Async/Await Usage in Koa Route Handlers (JavaScript)\nDESCRIPTION: This snippet demonstrates the proper use of async/await in Koa route handlers to ensure asynchronous operations complete before the response is sent.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/troubleshooting.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.get('/fetch', async (ctx, next) => {\n  await models.Book.findById(parseInt(ctx.query.id)).then(function (book) {\n    ctx.body = book;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers in Koa\nDESCRIPTION: Example of setting a single response header field. This uses the set method to define cache control settings.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/response.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nctx.set('Cache-Control', 'no-cache');\n```\n\n----------------------------------------\n\nTITLE: Redirecting in Koa\nDESCRIPTION: Examples of performing redirects in Koa. This shows different redirect scenarios including back to referrer, relative paths, and absolute URLs.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/response.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nctx.redirect('back');\nctx.redirect('back', '/index.html');\nctx.redirect('/login');\nctx.redirect('http://google.com');\n```\n\n----------------------------------------\n\nTITLE: Cache Freshness Check\nDESCRIPTION: Example of implementing cache negotiation using ETag headers\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/request.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// freshness check requires status 20x or 304\nctx.status = 200;\nctx.set('ETag', '123');\n\n// cache is ok\nif (ctx.fresh) {\n  ctx.status = 304;\n  return;\n}\n\n// cache is stale\n// fetch new data\nctx.body = await db.find('something');\n```\n\n----------------------------------------\n\nTITLE: Setting Koa Application Configuration\nDESCRIPTION: This snippet shows how to configure Koa application settings, either during initialization or dynamically after creation. Settings control environment, cookie keys, proxy behavior, and subdomain handling.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/index.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst Koa = require('koa');\nconst app = new Koa({ proxy: true });\n```\n\nLANGUAGE: js\nCODE:\n```\nconst Koa = require('koa');\nconst app = new Koa();\napp.proxy = true;\n```\n\n----------------------------------------\n\nTITLE: Content Type Checking\nDESCRIPTION: Examples of checking request content types using request.is()\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/request.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// With Content-Type: text/html; charset=utf-8\nctx.is('html'); // => 'html'\nctx.is('text/html'); // => 'text/html'\nctx.is('text/*', 'text/html'); // => 'text/html'\n\n// When Content-Type is application/json\nctx.is('json', 'urlencoded'); // => 'json'\nctx.is('application/json'); // => 'application/json'\nctx.is('html', 'application/*'); // => 'application/json'\n\nctx.is('html'); // => false\n```\n\nLANGUAGE: javascript\nCODE:\n```\nif (ctx.is('image/*')) {\n  // process\n} else {\n  ctx.throw(415, 'images only!');\n}\n```\n\n----------------------------------------\n\nTITLE: Using Signed Cookies in Koa\nDESCRIPTION: This snippet shows how to set a signed cookie in a Koa application, which uses the application's keys for secure signing to prevent tampering.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/index.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nctx.cookies.set('name', 'tobi', { signed: true });\n```\n\n----------------------------------------\n\nTITLE: Checking Response Header Existence in Koa\nDESCRIPTION: Example of checking if a specific header exists in the outgoing response. This uses the has method for case-insensitive header checking.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/response.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst rateLimited = ctx.response.has('X-RateLimit-Limit');\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Errors in Koa (JavaScript)\nDESCRIPTION: Shows how to create a custom error equivalent to using ctx.throw(). This example creates an error with a status code, exposes it for client responses, and throws it.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/context.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst err = new Error('name required');\nerr.status = 400;\nerr.expose = true;\nthrow err;\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Origin Example\nDESCRIPTION: Demonstrates how to get the origin URL including protocol and host from a request\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/request.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nctx.request.origin\n// => http://example.com\n```\n\n----------------------------------------\n\nTITLE: Accessing Full Request URL\nDESCRIPTION: Shows how to get the complete request URL including protocol, host and path\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/request.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nctx.request.href;\n// => http://example.com/foo/bar?q=1\n```\n\n----------------------------------------\n\nTITLE: New Middleware Signature Implementation in Koa v2\nDESCRIPTION: Demonstrates the new middleware signature using async/await pattern with explicit context parameter and error handling. Shows how to handle asynchronous operations and error states in the new format.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/migration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(async (ctx, next) => {\n  try {\n    await next() // next is now a function\n  } catch (err) {\n    ctx.body = { message: err.message }\n    ctx.status = err.status || 500\n  }\n})\n\napp.use(async ctx => {\n  const user = await User.getById(this.session.userid) // await instead of yield\n  ctx.body = user // ctx instead of this\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Request Accepts Header with Koa Context\nDESCRIPTION: Example showing how to use Koa's context object to check if a client accepts a specific content type (XML). It uses ctx.assert to throw a 406 status if the condition is not met.\nSOURCE: https://github.com/koajs/koa/blob/master/Readme.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(async (ctx, next) => {\n  ctx.assert(ctx.request.accepts('xml'), 406);\n  // equivalent to:\n  // if (!ctx.request.accepts('xml')) ctx.throw(406);\n  await next();\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Redirect Status and Body in Koa\nDESCRIPTION: Example of customizing a redirect by changing the status code and setting a custom response body. This demonstrates how to create a 301 permanent redirect with a message.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/response.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nctx.status = 301;\nctx.redirect('/cart');\nctx.body = 'Redirecting to shopping cart';\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Body Type Validation Middleware in Koa\nDESCRIPTION: Example middleware that validates the response body type. This ensures developers are setting appropriate response body types in the application.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/response.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(async (ctx, next) => {\n  await next()\n\n  ctx.assert.equal('object', typeof ctx.body, 500, 'some dev did something wrong')\n})\n```\n\n----------------------------------------\n\nTITLE: Proxy Configuration Example\nDESCRIPTION: Shows how to configure Koa with proxy settings for IP handling\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/request.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = new Koa({\n  proxy: true,\n  proxyIpHeader: 'X-Real-IP',\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = new Koa({\n  proxy: true,\n  maxIpsCount: 1, // only one proxy in front of the server\n});\n\n// request.header['X-Forwarded-For'] === [ '127.0.0.1', '127.0.0.2' ];\n// ctx.ips === [ '127.0.0.2' ];\n```\n\n----------------------------------------\n\nTITLE: Problematic Middleware Chain in Koa (JavaScript)\nDESCRIPTION: This snippet shows a common mistake in Koa middleware where the middleware chain is interrupted due to not calling next(). This can lead to subsequent middleware not being executed.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/troubleshooting.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.use(function (ctx, next) {\n  // Don't Repeat Yourself! Let's parse the ID here for all our middleware\n  if (ctx.query.id) {\n    ctx.state.id = parseInt(ctx.query.id);\n  }\n});\n\nrouter.get('/fetch', function (ctx, next) {\n  return models.Book.findById(ctx.state.id).then(function (book) {\n    ctx.body = book;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running a Koa App on Multiple Protocols\nDESCRIPTION: This example shows how to run the same Koa application on both HTTP and HTTPS protocols simultaneously by using the app.callback() method with different server instances.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/index.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst http = require('http');\nconst https = require('https');\nconst Koa = require('koa');\nconst app = new Koa();\nhttp.createServer(app.callback()).listen(3000);\nhttps.createServer(app.callback()).listen(3001);\n```\n\n----------------------------------------\n\nTITLE: Handling Stream Errors in Koa Response\nDESCRIPTION: Example of stream error handling in Koa responses without automatically destroying the stream. This uses PassThrough to pipe the stream while handling errors properly.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/response.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst PassThrough = require('stream').PassThrough;\n\napp.use(async ctx => {\n  ctx.body = someHTTPStream.on('error', (err) => ctx.onerror(err)).pipe(PassThrough());\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Response Headers in Koa\nDESCRIPTION: Example of setting multiple response header fields at once using an object. This demonstrates setting ETag and Last-Modified headers together.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/response.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nctx.set({\n  'Etag': '1234',\n  'Last-Modified': date\n});\n```\n\n----------------------------------------\n\nTITLE: Using Try-Catch with Async Middleware in Koa.js\nDESCRIPTION: A middleware function that uses try-catch to handle errors from subsequent middleware. It sets a default status code of 500 if not already specified, then rethrows the error to be caught by the default error handler.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/error-handling.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(async (ctx, next) => {\n  try {\n    await next();\n  } catch (err) {\n    err.status = err.statusCode || err.status || 500;\n    throw err;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Appending Response Headers in Koa\nDESCRIPTION: Example of appending additional values to a response header field. This uses the append method to add Link headers.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/response.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nctx.append('Link', '<http://127.0.0.1/>');\n```\n\n----------------------------------------\n\nTITLE: Debugging Uncalled Middleware in Koa (JavaScript)\nDESCRIPTION: This snippet demonstrates how to add logging to identify when a middleware or route handler is not being called due to an interrupted middleware chain.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/troubleshooting.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.use(function (ctx, next) {\n  // Don't Repeat Yourself! Let's parse the ID here for all our middleware\n  if (ctx.query.id) {\n    ctx.state.id = parseInt(ctx.query.id);\n  }\n});\n\nrouter.get('/fetch', function (ctx, next) {\n  console.log('Route called'); // Never happens\n  return models.Book.findById(ctx.state.id).then(function (book) {\n    ctx.body = book;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Updated Middleware Pattern with Async/Await\nDESCRIPTION: Shows the recommended way to write middleware in Koa v2 using async/await syntax with the new context parameter pattern.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/migration.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(async (ctx, next) => {\n  const user = await Users.getById(this.session.user_id);\n  await next();\n  ctx.body = { message: 'some message' };\n})\n```\n\n----------------------------------------\n\nTITLE: Setting ETag Header in Koa\nDESCRIPTION: Example of generating and setting an ETag header based on the response body. This uses crypto to create an MD5 hash of the body content.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/response.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nctx.response.etag = crypto.createHash('md5').update(ctx.body).digest('hex');\n```\n\n----------------------------------------\n\nTITLE: Streaming File Response with Koa Response Object\nDESCRIPTION: Example demonstrating how to stream a file as a response in Koa. It sets the response type to XML and assigns a readable stream as the response body, allowing efficient handling of large files.\nSOURCE: https://github.com/koajs/koa/blob/master/Readme.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(async (ctx, next) => {\n  await next();\n  ctx.response.type = 'xml';\n  ctx.response.body = fs.createReadStream('really_large.xml');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Last-Modified Header in Koa\nDESCRIPTION: Example of setting the Last-Modified header in a Koa response. This uses a Date object to set the appropriate UTC timestamp.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/response.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nctx.response.lastModified = new Date();\n```\n\n----------------------------------------\n\nTITLE: Setting Response Status in Koa\nDESCRIPTION: Examples of setting HTTP response status codes in Koa. This demonstrates how to set the status to 200 or 204 to modify the default 404 status.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/response.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nctx.response.status = 200;\n\n// Or whatever other status\nctx.response.status = 204;\n```\n\n----------------------------------------\n\nTITLE: Content Negotiation Examples\nDESCRIPTION: Demonstrates various content negotiation scenarios using accepts()\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/request.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nswitch (ctx.accepts('json', 'html', 'text')) {\n  case 'json': break;\n  case 'html': break;\n  case 'text': break;\n  default: ctx.throw(406, 'json, html, or text only');\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Accept-Encoding: gzip\nctx.acceptsEncodings('gzip', 'deflate', 'identity');\n// => \"gzip\"\n\nctx.acceptsEncodings(['gzip', 'deflate', 'identity']);\n// => \"gzip\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Accept-Encoding: gzip, deflate\nctx.acceptsEncodings();\n// => [\"gzip\", \"deflate\", \"identity\"]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5\nctx.acceptsCharsets('utf-8', 'utf-7');\n// => \"utf-8\"\n\nctx.acceptsCharsets(['utf-7', 'utf-8']);\n// => \"utf-8\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5\nctx.acceptsCharsets();\n// => [\"utf-8\", \"utf-7\", \"iso-8859-1\"]\n```\n\n----------------------------------------\n\nTITLE: Checking Accepted Languages in Koa Request (JavaScript)\nDESCRIPTION: Demonstrates the usage of the acceptsLanguages() method in Koa to check for acceptable languages. It shows how to check specific languages and how to retrieve all accepted languages when no arguments are provided.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/request.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Accept-Language: en;q=0.8, es, pt\nctx.acceptsLanguages('es', 'en');\n// => \"es\"\n\nctx.acceptsLanguages(['en', 'es']);\n// => \"es\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Accept-Language: en;q=0.8, es, pt\nctx.acceptsLanguages();\n// => [\"es\", \"pt\", \"en\"]\n```\n\n----------------------------------------\n\nTITLE: Setting State in Koa Context (JavaScript)\nDESCRIPTION: Shows how to use the ctx.state property to pass information through middleware and to frontend views. This is the recommended namespace for such operations.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/context.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nctx.state.user = await User.find(id);\n```\n\n----------------------------------------\n\nTITLE: Debugging Middleware Execution in Koa (JavaScript)\nDESCRIPTION: This snippet demonstrates how to add logging to debug the execution order of middleware and identify issues with asynchronous operations.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/troubleshooting.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.use('/fetch', function (ctx, next) {\n  return next().then(function () {\n    console.log('Middleware done'); \n  }); \n});\n\nrouter.get('/fetch', function (ctx, next) {\n  models.Book.findById(parseInt(ctx.query.id)).then(function (book) {\n    ctx.body = book;\n    console.log('Body set');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Response Headers in Koa\nDESCRIPTION: Example of retrieving a response header field value. This demonstrates the case-insensitive header field access using the get method.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/response.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst etag = ctx.response.get('ETag');\n```\n\n----------------------------------------\n\nTITLE: Getting Content Type\nDESCRIPTION: Demonstrates accessing the request Content-Type without parameters\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/request.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst ct = ctx.request.type;\n// => \"image/png\"\n```\n\n----------------------------------------\n\nTITLE: Getting Content-Type in Koa\nDESCRIPTION: Example of retrieving the response Content-Type without parameters like charset. This demonstrates accessing the type property.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/response.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst ct = ctx.type;\n// => \"image/png\"\n```\n\n----------------------------------------\n\nTITLE: Manual Middleware Conversion with koa-convert\nDESCRIPTION: Demonstrates how to manually convert v1.x middleware using the koa-convert utility. This approach gives more control over the conversion process.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/migration.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst convert = require('koa-convert');\n\napp.use(convert(function *(next) {\n  const start = Date.now();\n  yield next;\n  const ms = Date.now() - start;\n  console.log(`${this.method} ${this.url} - ${ms}ms`);\n}));\n```\n\n----------------------------------------\n\nTITLE: Using Context and Next in Koa Middleware\nDESCRIPTION: Basic structure of a Koa middleware function showing the context parameter and next function. This example demonstrates the middleware signature using async/await syntax.\nSOURCE: https://github.com/koajs/koa/blob/master/Readme.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(async (ctx, next) => { await next(); });\n```\n\n----------------------------------------\n\nTITLE: Updated Application Instantiation in v2\nDESCRIPTION: Demonstrates the new requirement to use the 'new' keyword when instantiating a Koa application in v2.x, which now uses ES6 classes.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/migration.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar koa = require('koa');\nvar app = module.exports = new koa();\n```\n\n----------------------------------------\n\nTITLE: Setting Query Parameters\nDESCRIPTION: Demonstrates setting query string parameters as an object\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/request.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nctx.query = { next: '/login' };\n```\n\n----------------------------------------\n\nTITLE: Setting Empty Response Body with Custom Status in Koa\nDESCRIPTION: Example showing how to properly send an empty response with a custom status code. This requires setting the body to null first, then overriding the default 204 status.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/response.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// This must be always set first before status, since null | undefined\n// body automatically sets the status to 204\nctx.body = null;\n// Now we override the 204 status with the desired one\nctx.status = 200;\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Charset\nDESCRIPTION: Shows how to get the request charset when present\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/request.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nctx.request.charset;\n// => \"utf-8\"\n```\n\n----------------------------------------\n\nTITLE: Async/Await Version of Problematic Koa Route Handler (JavaScript)\nDESCRIPTION: This snippet shows the same issue as the previous one, but using async/await syntax. The problem persists because the async function doesn't await the database operation.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/troubleshooting.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.get('/fetch', async (ctx, next) => {\n  models.Book.findById(parseInt(ctx.query.id)).then(function (book) {\n    ctx.body = book;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Logger Middleware with Async Functions\nDESCRIPTION: Example of a logger middleware implemented using async/await syntax (requires Node.js v7.6+). It calculates and logs the response time of each request by measuring time before and after awaiting the next middleware.\nSOURCE: https://github.com/koajs/koa/blob/master/Readme.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(async (ctx, next) => {\n  const start = Date.now();\n  await next();\n  const ms = Date.now() - start;\n  console.log(`${ctx.method} ${ctx.url} - ${ms}ms`);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Koa.js with Node Version Manager\nDESCRIPTION: This snippet shows how to install Node.js using nvm, install the Koa package with npm, and run a Koa application. It requires Node v18 or higher for ES2015 and async function support.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/api/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ nvm install 12\n$ npm i koa\n$ node my-koa-app.js\n```\n\n----------------------------------------\n\nTITLE: Installing Koa via npm\nDESCRIPTION: Command to install Koa using npm. Requires Node.js v18.0.0 or higher for ES2015 and async function support.\nSOURCE: https://github.com/koajs/koa/blob/master/Readme.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install koa\n```\n\n----------------------------------------\n\nTITLE: Legacy v1.x Middleware Auto-conversion\nDESCRIPTION: Shows how Koa v2.x automatically converts legacy generator middleware syntax. This example demonstrates a logging middleware using the old generator syntax.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/migration.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(function *(next) {\n  const start = Date.now();\n  yield next;\n  const ms = Date.now() - start;\n  console.log(`${this.method} ${this.url} - ${ms}ms`);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Context Example\nDESCRIPTION: Example showing how to access the current Koa context from the app instance using asyncLocalStorage\nSOURCE: https://github.com/koajs/koa/blob/master/History.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ctx = app.currentContext\n```\n\n----------------------------------------\n\nTITLE: Error Handler Context Access\nDESCRIPTION: Code demonstrating context access pattern in error handlers, referenced in fix e98b8d1\nSOURCE: https://github.com/koajs/koa/blob/master/History.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nctx.throw(status, error, properties)\n```\n\n----------------------------------------\n\nTITLE: Fixing Content-Length Response in Koa.js\nDESCRIPTION: Fixes an issue where Content-Length should not be sent if Transfer-Encoding is defined.\nSOURCE: https://github.com/koajs/koa/blob/master/History.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfix: Do not response Content-Length if Transfer-Encoding is defined #1562 @charlyzeng\n```\n\n----------------------------------------\n\nTITLE: Setting Null Body for JSON Content Type in Koa.js\nDESCRIPTION: Fixes an issue to set the body to null when the content type is JSON and the body is explicitly set to null.\nSOURCE: https://github.com/koajs/koa/blob/master/History.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfix: Set body to `null` if `ctx.type = json` and `ctx.body = null` #1059 @likegun\n```\n\n----------------------------------------\n\nTITLE: Fixing ESM Transpiled CommonJS Compatibility in Koa.js\nDESCRIPTION: Addresses an issue to make ESM transpiled CommonJS work better for TypeScript users.\nSOURCE: https://github.com/koajs/koa/blob/master/History.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfix: make ESM transpiled CommonJS play nice for TS folks, fix #1513 (#1518) (miwnwski <<m@iwnw.ski>>)\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Changelog entry for a release of Koa.js including commit hashes, authors, and change descriptions. Contains both direct commits and release notes with features and fixes.\nSOURCE: https://github.com/koajs/koa/blob/master/History.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[[`219bf22`](http://github.com/koajs/koa/commit/219bf22237b11bc375e2e110b93db512f1acfdd4)] - docs(context): update link (#1354) (Peng Jie <<bivinity.pengzjie@gmail.com>>)\n```\n\n----------------------------------------\n\nTITLE: Running Koa Tests\nDESCRIPTION: Command to run the test suite for Koa using npm test.\nSOURCE: https://github.com/koajs/koa/blob/master/Readme.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Operations in Koa Routes (JavaScript)\nDESCRIPTION: This snippet demonstrates a common issue where a route handler doesn't properly handle asynchronous operations, leading to a 404 error. The problem occurs because the response is sent before the database operation completes.\nSOURCE: https://github.com/koajs/koa/blob/master/docs/troubleshooting.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.get('/fetch', function (ctx, next) {\n  models.Book.findById(parseInt(ctx.query.id)).then(function (book) {\n    ctx.body = book;\n  });\n});\n```"
  }
]