[
  {
    "owner": "get-convex",
    "repo": "workpool",
    "content": "TITLE: Optimizing OCC Errors with Workpool in TypeScript\nDESCRIPTION: This snippet demonstrates how to use a Workpool to optimize Optimistic Concurrency Control (OCC) errors by limiting parallelism for mutations that read and write the same data. It includes an action that increments a counter using a Workpool with maxParallelism set to 1.\nSOURCE: https://github.com/get-convex/workpool/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst counterPool = new Workpool(components.counterWorkpool, {\n  maxParallelism: 1,\n});\n\nexport const doSomethingAndCount = action({\n  handler: async (ctx) => {\n    const doSomething = await fetch(\"https://example.com\");\n    await counterPool.enqueueMutation(ctx, internal.counter.increment, {});\n  },\n});\n\n// This mutation is prone to conflicting with itself, because it always reads\n// and writes the same data. By running it in a workpool with low parallelism,\n// it will run serially.\nexport const increment = internalMutation({\n  handler: async (ctx) => {\n    const countDoc = await ctx.db.query(\"counter\").unique();\n    await ctx.db.patch(countDoc!._id, { count: countDoc!.count + 1 });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Reliable Email Sending with Retries in TypeScript\nDESCRIPTION: This code snippet shows how to set up a Workpool for sending emails with retry behavior and completion handling. It includes a mutation for enqueueing email sending actions and an internal mutation for handling the completion of email sending tasks.\nSOURCE: https://github.com/get-convex/workpool/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst pool = new Workpool(components.emailWorkpool, {\n  retryActionsByDefault: true,\n  defaultRetryBehavior: { maxAttempts: 3, initialBackoffMs: 1000, base: 2 },\n});\n\nconst sendEmailReliablyWithRetries = mutation({\n  args: {\n    emailType: v.string(),\n    userId: v.id(\"users\"),\n    title: v.string(),\n    body: v.string(),\n  },\n  handler: async (ctx, args) => {\n    // ... do other things in the transaction\n    await pool.enqueueAction(ctx, internal.email.send, args, {\n      onComplete: internal.email.emailSent,\n      context: { emailType: args.emailType, userId: args.userId },\n      retry: false, // don't retry this action, as we can't guarantee idempotency.\n    });\n  },\n});\n\nexport const emailSent = internalMutation({\n  args: {\n    workId: workIdValidator,\n    result: resultValidator,\n    context: v.object({ emailType: v.string(), userId: v.id(\"users\") }),\n  },\n  handler: async (ctx, args) => {\n    if (args.result.kind === \"canceled\") return;\n    await ctx.db.insert(\"userEmailLog\", {\n      userId: args.context.userId,\n      emailType: args.context.emailType,\n      result: args.result.kind === \"success\" ? args.result.returnValue : null,\n      error: args.result.kind === \"failed\" ? args.result.error : null,\n    });\n    if (args.result.kind === \"failed\") {\n      await pool.enqueueAction(ctx, internal.email.checkResendStatus, args, {\n        retry: { maxAttempts: 10, initialBackoffMs: 250, base: 2 }, // custom\n        onComplete: internal.email.handleEmailStatus,\n        context: args.context,\n      });\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Workpool in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a Workpool instance and use its methods such as enqueueMutation, enqueueAction, status, and cancel. It includes examples of mutation and query handlers that interact with the Workpool.\nSOURCE: https://github.com/get-convex/workpool/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { components } from \"./_generated/api\";\nimport { Workpool } from \"@convex-dev/workpool\";\n\nconst pool = new Workpool(components.emailWorkpool, { maxParallelism: 10 });\n\nimport { vWorkIdValidator } from \"@convex-dev/workpool\";\n\nexport const myMutation = mutation({\n  args: {},\n  handler: async (ctx, args) => {\n    // Schedule functions to run in the background.\n    const id = await pool.enqueueMutation(ctx, internal.foo.bar, args);\n    // Or for an action:\n    const id = await pool.enqueueAction(ctx, internal.foo.baz, args);\n  },\n});\n\nexport const getStatus = query({\n  args: { id: vWorkIdValidator },\n  handler: async (ctx, args) => {\n    // Is it done yet? Did it succeed or fail?\n    const status = await pool.status(args.id);\n    return status;\n  },\n});\n\nexport const cancelWork = mutation({\n  args: { id: vWorkIdValidator },\n  handler: async (ctx, args) => {\n    // You can cancel the work, if it hasn't finished yet.\n    await pool.cancel(ctx, args.id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Workpool Instances for Email and Scraping in TypeScript\nDESCRIPTION: This snippet demonstrates how to create separate Workpool instances for email and scraping tasks, with different parallelism settings. It also shows how to enqueue actions to these pools within mutation handlers.\nSOURCE: https://github.com/get-convex/workpool/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst emailPool = new Workpool(components.emailWorkpool, {\n  maxParallelism: 10,\n});\nconst scrapePool = new Workpool(components.scrapeWorkpool, {\n  maxParallelism: 5,\n});\n\nexport const userSignUp = mutation({\n  args: {...},\n  handler: async (ctx, args) => {\n    const userId = await ctx.db.insert(\"users\", args);\n    await emailPool.enqueueAction(ctx, internal.auth.sendEmailVerification, {\n      userId,\n    });\n  },\n});\n\nexport const downloadLatestWeather = mutation({\n  handler: async (ctx, args) => {\n    for (const city of allCities) {\n      await scrapePool.enqueueAction(ctx, internal.weather.scrape, { city });\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Workpool in Convex Config File (TypeScript)\nDESCRIPTION: This snippet shows how to create a convex.config.ts file and install the Workpool component by calling the 'use' method. It demonstrates setting up multiple Workpool instances with different names.\nSOURCE: https://github.com/get-convex/workpool/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// convex/convex.config.ts\nimport { defineApp } from \"convex/server\";\nimport workpool from \"@convex-dev/workpool/convex.config\";\n\nconst app = defineApp();\napp.use(workpool, { name: \"emailWorkpool\" });\napp.use(workpool, { name: \"scrapeWorkpool\" });\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function with TypeScript\nDESCRIPTION: Shows how to create a mutation function that modifies the database. Includes argument validation and demonstrates database insertion operations.\nSOURCE: https://github.com/get-convex/workpool/blob/main/example/convex/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function with TypeScript\nDESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments. The function shows database querying and argument handling patterns in Convex.\nSOURCE: https://github.com/get-convex/workpool/blob/main/example/convex/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation Function in React\nDESCRIPTION: Demonstrates how to use the mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/workpool/blob/main/example/convex/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result)\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query Function in React\nDESCRIPTION: Shows how to use the query function within a React component using the useQuery hook. Demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/workpool/blob/main/example/convex/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing Data State Machine Flow with Mermaid\nDESCRIPTION: Flowchart showing the state transitions for client operations, worker execution, and job completion/cancellation logic. Illustrates the relationships between pending states, worker execution, and completion states.\nSOURCE: https://github.com/get-convex/workpool/blob/main/src/component/README.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    Client -->|enqueue| pendingStart\n    Client -->|cancel| pendingCancelation\n    complete --> |success or failure| pendingCompletion\n    pendingCompletion -->|retry| pendingStart\n    pendingStart --> workerRunning[\"worker running\"]\n    workerRunning -->|worker finished| complete\n    workerRunning --> |recovery| complete\n    successfulCancel[\"AND\"]@{shape: delay} --> |canceled| complete\n    pendingStart --> successfulCancel\n    pendingCancelation --> successfulCancel\n```\n\n----------------------------------------\n\nTITLE: Visualizing Loop State Machine Flow with Mermaid\nDESCRIPTION: Flowchart depicting the main loop state transitions between idle, running, scheduled, and saturated states. Shows how the system handles capacity management and state changes.\nSOURCE: https://github.com/get-convex/workpool/blob/main/src/component/README.md#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    idle -->|enqueue| running\n    running-->|\"all started, leftover capacity\"| scheduled\n    scheduled -->|\"enqueue, cancel, saveResult, recovery\"| running\n    running -->|\"maxed out\"| saturated\n    saturated -->|\"cancel, saveResult, recovery\"| running\n    running-->|\"all done\"| idle\n```\n\n----------------------------------------\n\nTITLE: Querying Workpool Backlog in Axiom\nDESCRIPTION: This query reports the current backlog length for Workpool tasks in Axiom. It calculates the maximum backlog for 1-minute intervals, where backlog is defined as tasks that are past due, excluding tasks scheduled for the future.\nSOURCE: https://github.com/get-convex/workpool/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\n['your-dataset']\n| extend parsed_message = iff(isnotnull(parse_json(trim(\"'\", tostring([\"data.message\"]))),\n  parse_json(trim(\"'\", tostring([\"data.message\"]))),\n  parse_json('{}') )\n| where parsed_message[\"component\"] == \"workpool\" and parsed_message[\"event\"] == \"report\"\n| summarize max_backlog = max(toint(parsed_message[\"backlog\"]))\n  by bin(_time, 1m), workpool = tostring([\"data.function.component_path\"])\n```\n\n----------------------------------------\n\nTITLE: Querying Workpool Function Retry Rate in Axiom\nDESCRIPTION: This query reports the ratio of failures per function in 5-minute intervals using Axiom. It requires setting the workpool logLevel to \"INFO\" or \"DEBUG\" to capture the necessary data.\nSOURCE: https://github.com/get-convex/workpool/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: txt\nCODE:\n```\n['your-dataset']\n| extend parsed_message = iff( \tisnotnull(parse_json(trim(\"'\", tostring([\"data.message\"]))),\n  parse_json(trim(\"'\", tostring([\"data.message\"]))),\n  parse_json('{}') )\n| where parsed_message[\"component\"] == \"workpool\" and (parsed_message[\"event\"] == \"completed\") and parsed_message[\"status\"] != \"canceled\"\n| summarize failure_ratio = avg(iff(parsed_message[\"status\"] != \"success\", 1, 0))\n  by bin(_time, 5m), function = tostring(parsed_message[\"fnName\"])\n```\n\n----------------------------------------\n\nTITLE: Querying Workpool Failure Rate in Axiom\nDESCRIPTION: This query reports the overall average failure rate per registered workpool in 5-minute intervals using Axiom. It helps monitor the reliability of Workpool functions over time.\nSOURCE: https://github.com/get-convex/workpool/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: txt\nCODE:\n```\n['your-dataset']\n| extend parsed_message = iff(isnotnull(parse_json(trim(\"'\", tostring([\"data.message\"]))),\n  parse_json(trim(\"'\", tostring([\"data.message\"]))),\n  parse_json('{}') )\n| where parsed_message[\"component\"] == \"workpool\" and parsed_message[\"event\"] == \"report\"\n| extend permanentFailureRate = parsed_message[\"permanentFailureRate\"]\n| summarize avg(todouble(permanentFailureRate))\n  by bin(\\_time, 5m), workpool = tostring([\"data.function.component_path\"])\n```\n\n----------------------------------------\n\nTITLE: Querying Workpool Enqueue to Start Delay in Axiom\nDESCRIPTION: This query reports the average time between enqueueing work and it actually starting in Axiom. It requires setting the workpool logLevel to \"INFO\" or \"DEBUG\" to capture the necessary data.\nSOURCE: https://github.com/get-convex/workpool/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: txt\nCODE:\n```\n['your-dataset']\n| extend parsed_message = iff(isnotnull(parse_json(trim(\"'\", tostring([\"data.message\"]))),\n  parse_json(trim(\"'\", tostring([\"data.message\"]))),\n  parse_json('{}') )\n| where parsed_message[\"component\"] == \"workpool\" and parsed_message[\"event\"] == \"started\"\n| summarize start_lag_seconds = avg(todouble(parsed_message[\"startLag\"])/1000)\n  by bin(_time, 1m), function = tostring(parsed_message[\"fnName\"])\n```\n\n----------------------------------------\n\nTITLE: Running Convex Workpool Project Locally\nDESCRIPTION: Commands to install dependencies and start the development server. This requires installing packages in both the root and example directories before running the Convex development server.\nSOURCE: https://github.com/get-convex/workpool/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i\ncd example\nnpm i\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Testing Convex Workpool Project\nDESCRIPTION: Commands for building, typechecking, testing, and linting the project. This process includes cleaning the distribution directory, building the project, running type checks and tests, and linting the example code.\nSOURCE: https://github.com/get-convex/workpool/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nrm -rf dist/ && npm run build\nnpm run typecheck\nnpm run test\ncd example\nnpm run lint\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Deploying a New Version of Convex Workpool\nDESCRIPTION: Commands for versioning, publishing, and pushing a new release. This process includes incrementing the package version, verifying the package contents with a dry run, publishing to npm, and pushing tags to the repository.\nSOURCE: https://github.com/get-convex/workpool/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# this will change the version and commit it (if you run it in the root directory)\nnpm version patch\nnpm publish --dry-run\n# sanity check files being included\nnpm publish\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Building a One-off Package for Convex Workpool\nDESCRIPTION: Commands to build and package the project without publishing. This creates a local package file that can be used for testing or manual installation.\nSOURCE: https://github.com/get-convex/workpool/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nrm -rf dist/ && npm run build\nnpm pack\n```\n\n----------------------------------------\n\nTITLE: Deploying an Alpha Release of Convex Workpool\nDESCRIPTION: Commands for creating and publishing a pre-release alpha version. This alternative deployment process creates a version with an alpha tag that users must explicitly request when installing.\nSOURCE: https://github.com/get-convex/workpool/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm version prerelease --preid alpha\nnpm publish --tag alpha\n```\n\n----------------------------------------\n\nTITLE: Installing Workpool Component via npm in Bash\nDESCRIPTION: This command installs the Workpool component using npm in a Bash environment.\nSOURCE: https://github.com/get-convex/workpool/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @convex-dev/workpool\n```"
  }
]