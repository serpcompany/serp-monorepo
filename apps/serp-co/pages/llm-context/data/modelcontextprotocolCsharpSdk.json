[
  {
    "owner": "modelcontextprotocol",
    "repo": "csharp-sdk",
    "content": "TITLE: Setting Up MCP Server in ASP.NET Core\nDESCRIPTION: Example of configuring an MCP server in ASP.NET Core with a simple Echo tool. The code registers MCP services, configures HTTP transport, discovers tools from the assembly, and maps MCP endpoints. It also demonstrates how to create a basic tool that echoes messages back to the client.\nSOURCE: https://github.com/modelcontextprotocol/csharp-sdk/blob/main/src/ModelContextProtocol.AspNetCore/README.md#2025-04-19_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Program.cs\nusing ModelContextProtocol.Server;\nusing System.ComponentModel;\n\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddMcpServer()\n    .WithHttpTransport()\n    .WithToolsFromAssembly();\nvar app = builder.Build();\n\napp.MapMcp();\n\napp.Run(\"http://localhost:3001\");\n\n[McpServerToolType]\npublic static class EchoTool\n{\n    [McpServerTool, Description(\"Echoes the message back to the client.\")]\n    public static string Echo(string message) => $\"hello {message}\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using an MCP Client with StdioClientTransport\nDESCRIPTION: Example demonstrating how to create an MCP client, connect to a server using stdio transport, list available tools, and execute a tool. This shows the basic client-side workflow for interacting with MCP servers.\nSOURCE: https://github.com/modelcontextprotocol/csharp-sdk/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar clientTransport = new StdioClientTransport(new StdioClientTransportOptions\n{\n    Name = \"Everything\",\n    Command = \"npx\",\n    Arguments = [\"-y\", \"@modelcontextprotocol/server-everything\"],\n});\n\nvar client = await McpClientFactory.CreateAsync(clientTransport);\n\n// Print the list of tools available from the server.\nforeach (var tool in await client.ListToolsAsync())\n{\n    Console.WriteLine($\"{tool.Name} ({tool.Description})\");\n}\n\n// Execute a tool (this would normally be driven by LLM tool invocations).\nvar result = await client.CallToolAsync(\n    \"echo\",\n    new Dictionary<string, object?>() { [\"message\"] = \"Hello MCP!\" },\n    CancellationToken.None);\n\n// echo always returns one and only one text content object\nConsole.WriteLine(result.Content.First(c => c.Type == \"text\").Text);\n```\n\n----------------------------------------\n\nTITLE: Implementing an Advanced MCP Tool with Dependency Injection\nDESCRIPTION: Example of a more complex MCP server tool that uses dependency injection to access HttpClient and IMcpServer. This tool downloads content from a URL and uses the client's LLM capabilities to summarize it.\nSOURCE: https://github.com/modelcontextprotocol/csharp-sdk/blob/main/README.md#2025-04-19_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[McpServerTool(Name = \"SummarizeContentFromUrl\"), Description(\"Summarizes content downloaded from a specific URI\")]\npublic static async Task<string> SummarizeDownloadedContent(\n    IMcpServer thisServer,\n    HttpClient httpClient,\n    [Description(\"The url from which to download the content to summarize\")] string url,\n    CancellationToken cancellationToken)\n{\n    string content = await httpClient.GetStringAsync(url);\n\n    ChatMessage[] messages =\n    [\n        new(ChatRole.User, \"Briefly summarize the following downloaded content:\"),\n        new(ChatRole.User, content),\n    ];\n    \n    ChatOptions options = new()\n    {\n        MaxOutputTokens = 256,\n        Temperature = 0.3f,\n    };\n\n    return $\"Summary: {await thisServer.AsSamplingChatClient().GetResponseAsync(messages, options, cancellationToken)}\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an MCP Server with Automatic Tool Registration\nDESCRIPTION: Example of creating an MCP server using dependency injection and registering tools from the current assembly. Includes a simple echo tool implementation with the required attributes for automatic registration.\nSOURCE: https://github.com/modelcontextprotocol/csharp-sdk/blob/main/README.md#2025-04-19_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing ModelContextProtocol.Server;\nusing System.ComponentModel;\n\nvar builder = Host.CreateApplicationBuilder(args);\nbuilder.Logging.AddConsole(consoleLogOptions =>\n{\n    // Configure all logs to go to stderr\n    consoleLogOptions.LogToStandardErrorThreshold = LogLevel.Trace;\n});\nbuilder.Services\n    .AddMcpServer()\n    .WithStdioServerTransport()\n    .WithToolsFromAssembly();\nawait builder.Build().RunAsync();\n\n[McpServerToolType]\npublic static class EchoTool\n{\n    [McpServerTool, Description(\"Echoes the message back to the client.\")]\n    public static string Echo(string message) => $\"hello {message}\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server with Manual Tool Registration\nDESCRIPTION: Advanced example of creating an MCP server with fine-grained control over tool registration and handler implementation. This approach provides more flexibility for complex scenarios compared to the attribute-based approach.\nSOURCE: https://github.com/modelcontextprotocol/csharp-sdk/blob/main/README.md#2025-04-19_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing ModelContextProtocol.Protocol.Transport;\nusing ModelContextProtocol.Protocol.Types;\nusing ModelContextProtocol.Server;\nusing System.Text.Json;\n\nMcpServerOptions options = new()\n{\n    ServerInfo = new Implementation() { Name = \"MyServer\", Version = \"1.0.0\" },\n    Capabilities = new ServerCapabilities()\n    {\n        Tools = new ToolsCapability()\n        {\n            ListToolsHandler = (request, cancellationToken) =>\n                Task.FromResult(new ListToolsResult()\n                {\n                    Tools =\n                    [\n                        new Tool()\n                        {\n                            Name = \"echo\",\n                            Description = \"Echoes the input back to the client.\",\n                            InputSchema = JsonSerializer.Deserialize<JsonElement>(\"\"\"\n                                {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                      \"message\": {\n                                        \"type\": \"string\",\n                                        \"description\": \"The input to echo back\"\n                                      }\n                                    },\n                                    \"required\": [\"message\"]\n                                }\n                                \"\"\")\n                        }\n                    ]\n                }),\n\n            CallToolHandler = (request, cancellationToken) =>\n            {\n                if (request.Params?.Name == \"echo\")\n                {\n                    if (request.Params.Arguments?.TryGetValue(\"message\", out var message) is not true)\n                    {\n                        throw new McpException(\"Missing required argument 'message'\");\n                    }\n\n                    return Task.FromResult(new CallToolResponse()\n                    {\n                        Content = [new Content() { Text = $\"Echo: {message}\", Type = \"text\" }]\n                    });\n                }\n\n                throw new McpException($\"Unknown tool: '{request.Params?.Name}'\");\n            },\n        }\n    },\n};\n\nawait using IMcpServer server = McpServerFactory.Create(new StdioServerTransport(\"MyServer\"), options);\nawait server.RunAsync();\n```\n\n----------------------------------------\n\nTITLE: Using MCP Tools with AI Chat Clients\nDESCRIPTION: Code snippet showing how to expose MCP tools as AIFunction instances for use with IChatClient implementations. This enables seamless integration of MCP tools with existing LLM chat interfaces.\nSOURCE: https://github.com/modelcontextprotocol/csharp-sdk/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Get available functions.\nIList<McpClientTool> tools = await client.ListToolsAsync();\n\n// Call the chat client using the tools.\nIChatClient chatClient = ...;\nvar response = await chatClient.GetResponseAsync(\n    \"your prompt here\",\n    new() { Tools = [.. tools] },\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Prompts for MCP Server\nDESCRIPTION: Implementation of custom prompts for an MCP server using attributes. This demonstrates how to expose standard prompts that can be used by clients.\nSOURCE: https://github.com/modelcontextprotocol/csharp-sdk/blob/main/README.md#2025-04-19_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[McpServerPromptType]\npublic static class MyPrompts\n{\n    [McpServerPrompt, Description(\"Creates a prompt to summarize the provided message.\")]\n    public static ChatMessage Summarize([Description(\"The content to summarize\")] string content) =>\n        new(ChatRole.User, $\"Please summarize this content into a single sentence: {content}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up an MCP Server with Package Installation\nDESCRIPTION: Commands to add the required packages for implementing an MCP server, including the ModelContextProtocol package and Microsoft.Extensions.Hosting.\nSOURCE: https://github.com/modelcontextprotocol/csharp-sdk/blob/main/README.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package ModelContextProtocol --prerelease\ndotnet add package Microsoft.Extensions.Hosting\n```\n\n----------------------------------------\n\nTITLE: Installing ModelContextProtocol.AspNetCore Package\nDESCRIPTION: Commands to create a new web project and install the ModelContextProtocol.AspNetCore package from NuGet. The package is in prerelease state, so the --prerelease flag is required.\nSOURCE: https://github.com/modelcontextprotocol/csharp-sdk/blob/main/src/ModelContextProtocol.AspNetCore/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new web\ndotnet add package ModelContextProtocol.AspNetCore --prerelease\n```\n\n----------------------------------------\n\nTITLE: Installing MCP Package via NuGet\nDESCRIPTION: Command to add the ModelContextProtocol package to a .NET project using the dotnet CLI with the prerelease flag.\nSOURCE: https://github.com/modelcontextprotocol/csharp-sdk/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package ModelContextProtocol --prerelease\n```"
  }
]