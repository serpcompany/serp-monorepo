[
  {
    "owner": "surveyjs",
    "repo": "survey-library",
    "content": "TITLE: Dynamic Survey Model Creation\nDESCRIPTION: Shows how to programmatically create and modify a survey model at runtime using SurveyJS methods and properties. Demonstrates adding pages, panels, and questions dynamically.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-simple-survey.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst survey = new Survey.Model();\nconst page = survey.addNewPage(\"PersonalDetails\");\nconst firstName = page.addNewQuestion(\"text\", \"FirstName\");\nfirstName.title = \"Enter your first name:\";\n\nconst lastName = page.addNewQuestion(\"text\", \"LastName\");\nlastName.title = \"Enter your last name:\";\n\nconst panel = page.addNewPanel(\"Contacts\");\npanel.title = \"Contacts (optional)\";\npanel.state = \"collapsed\";\n\nconst telegram = panel.addNewQuestion(\"text\", \"Telegram\");\ntelegram.title = \"Telegram:\"\n\nconst github = panel.addNewQuestion(\"text\", \"GitHub\");\ngithub.title = \"GitHub username:\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Validation with onServerValidateQuestions in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the onServerValidateQuestions event handler to perform server-side validation in SurveyJS. It fetches a list of countries from an API and validates if the entered country exists.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/data-validation.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model } from \"survey-core\";\nconst surveyJson = {\n  \"elements\": [{\n    \"name\": \"country\",\n    \"type\": \"text\",\n    // ...\n  }]\n};\nconst survey = new Model(surveyJson);\n\nfunction validateCountry(survey, { data, errors, complete }) {\n  const countryName = data[\"country\"];\n  if (!countryName) {\n    complete();\n    return;\n  }\n  fetch(\"https://surveyjs.io/api/CountriesExample?name=\" + countryName)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.json();\n    })\n    .then((data) => {\n      const found = data.length > 0;\n      if (!found) {\n        errors[\"country\"] = \"Country is not found\";\n      }\n      complete();\n    });\n}\n\nsurvey.onServerValidateQuestions.add(validateCountry);\n```\n\n----------------------------------------\n\nTITLE: Setting a Single Question Value in SurveyJS\nDESCRIPTION: This snippet demonstrates how to set a question's value property directly to populate a form field by obtaining the question instance via getQuestionByName() method.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-pre-populate-form-fields.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model } from \"survey-core\";\n\nconst surveyJson = {\n  \"elements\": [{\n    \"name\": \"subscribed\",\n    \"type\": \"boolean\",\n    \"renderAs\": \"checkbox\",\n    \"title\": \"I agree to receive weekly newsletters\"\n  }]\n}\n\nconst survey = new Model(surveyJson);\nconst subscribedQuestion = survey.getQuestionByName(\"subscribed\");\nsubscribedQuestion.value = true;\n```\n\n----------------------------------------\n\nTITLE: Complete Quiz Implementation with SurveyJS\nDESCRIPTION: Full implementation of an American History quiz including timer configuration, multiple pages, questions with correct answers, and conditional result display.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-quiz.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  title: \"American History\",\n  showProgressBar: true,\n  progressBarLocation: \"bottom\",\n  showTimer: true,\n  timeLimitPerPage: 10,\n  timeLimit: 25,\n  firstPageIsStartPage: true,\n  startSurveyText: \"Start Quiz\",\n  pages: [{\n    elements: [{\n      type: \"html\",\n      html: \"You are about to start a quiz on American history. <br>You will have 10 seconds for every question and 25 seconds to end the quiz.<br>Enter your name below and click <b>Start Quiz</b> to begin.\"\n    }, {\n      type: \"text\",\n      name: \"username\",\n      titleLocation: \"hidden\",\n      isRequired: true\n    }]\n  }, {\n    elements: [{\n      type: \"radiogroup\",\n      name: \"civilwar\",\n      title: \"When was the American Civil War?\",\n      choices: [\n        \"1796-1803\", \"1810-1814\", \"1861-1865\", \"1939-1945\"\n      ],\n      correctAnswer: \"1861-1865\"\n    }]\n  }, {\n    elements: [{\n      type: \"radiogroup\",\n      name: \"libertyordeath\",\n      title: \"Whose quote is this: \\\"Give me liberty, or give me death\\\"?\",\n      choicesOrder: \"random\",\n      choices: [\n        \"John Hancock\", \"James Madison\", \"Patrick Henry\", \"Samuel Adams\"\n      ],\n      correctAnswer: \"Patrick Henry\"\n    }]\n  }, {\n    elements: [{\n      type: \"radiogroup\",\n      name: \"magnacarta\",\n      title: \"What is Magna Carta?\",\n      choicesOrder: \"random\",\n      choices: [\n        \"The foundation of the British parliamentary system\",\n        \"The Great Seal of the monarchs of England\",\n        \"The French Declaration of the Rights of Man\",\n        \"The charter signed by the Pilgrims on the Mayflower\"\n      ],\n      correctAnswer: \"The foundation of the British parliamentary system\"\n    }]\n  }],\n  completedHtml: \"<h4>You got <b>{correctAnswers}</b> out of <b>{questionCount}</b> correct answers.</h4>\",\n  completedHtmlOnCondition: [{\n    expression: \"{correctAnswers} == 0\",\n    html: \"<h4>Unfortunately, none of your answers are correct. Please try again.</h4>\"\n  }, {\n    expression: \"{correctAnswers} == {questionCount}\",\n    html: \"<h4>Congratulations! You answered all the questions correctly!</h4>\"\n  }]\n};\n```\n\n----------------------------------------\n\nTITLE: Using Calculated Values in SurveyJS\nDESCRIPTION: This snippet demonstrates how to define calculated values that are automatically updated when referenced values change. It calculates a full name by combining first and last name inputs, showing the calculatedValues configuration.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  \"elements\": [\n    { \"name\": \"firstName\", \"type\": \"text\", \"title\": \"First Name\", \"defaultValue\": \"John\" },\n    { \"name\": \"lastName\", \"type\": \"text\", \"title\": \"Last Name\", \"defaultValue\": \"Smith\" },\n    {\n      \"name\": \"greetings\",\n      \"type\": \"html\",\n      \"html\": \"<p>Hello, {fullname}!</p>\"\n    }\n  ],\n  \"calculatedValues\": [{\n    \"name\": \"fullname\",\n    \"expression\": \"{firstName} +  ' ' + {lastName}\"\n  }]\n};\n```\n\n----------------------------------------\n\nTITLE: Using setValue() Method to Populate a Field in SurveyJS\nDESCRIPTION: This snippet shows how to use the SurveyModel's setValue() method as an alternative way to set the value of a specific question.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-pre-populate-form-fields.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model } from \"survey-core\";\n\nconst surveyJson = {\n  // ...\n}\n\nconst survey = new Model(surveyJson);\nsurvey.setValue(\"subscribed\", false);\n```\n\n----------------------------------------\n\nTITLE: Restoring Survey Progress from localStorage in JavaScript\nDESCRIPTION: This code snippet demonstrates how to save incomplete survey results to localStorage and restore them when the user returns. It uses SurveyJS events to save data on value changes and page navigation, and submits final results to a server upon completion.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/how-to-save-and-restore-incomplete-survey.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model } from \"survey-core\";\n\nconst survey = new Model();\n\nconst STORAGE_ITEM_KEY = \"my-survey\";\nconst SURVEY_ID = /* ... Getting the survey ID ... */;\nconst ENDPOINT_URL = \"https://example.com/api/responses/\" + SURVEY_ID;\n\nfetch(\"https://example.com/api/surveys/\" + SURVEY_ID)\n  .then(response => response.json())\n  .then(loadedSurvey => {\n    survey.fromJSON(loadedSurvey.json);\n    restoreSurveyData(survey);\n  })\n  .catch(error => console.error(error));\n\nfunction saveSurveyData (survey) {\n  const data = survey.data;\n  data.pageNo = survey.currentPageNo;\n  window.localStorage.setItem(STORAGE_ITEM_KEY, JSON.stringify(data));\n}\n\nfunction submitSurveyData (data) {\n  fetch(ENDPOINT_URL, {\n    method: 'POST',\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(data)\n  })\n    .then(response => response.json())\n    .then(data => {\n      console.log(data);\n      window.localStorage.setItem(STORAGE_ITEM_KEY, \"\");\n    })\n    .catch(error => console.error(error));\n}\n\nfunction restoreSurveyData (survey) {\n  const prevData = window.localStorage.getItem(STORAGE_ITEM_KEY) || null;\n  if (prevData) {\n    const data = JSON.parse(prevData);\n    survey.data = data;\n    if (data.pageNo) {\n      survey.currentPageNo = data.pageNo;\n    }\n  }\n}\n\n// Save survey results when users change a question value...\nsurvey.onValueChanged.add(saveSurveyData);\n// ... and switch to the next page\nsurvey.onCurrentPageChanged.add(saveSurveyData);\n\n// Submit final survey results after the survey is completed\nsurvey.onComplete.add((survey) => {\n  const userId = /* ... Getting the user ID ... */\n  survey.setValue(\"userId\", userId);\n  submitSurveyData(survey.data);\n});\n```\n\n----------------------------------------\n\nTITLE: Complete SurveyJS React Component Implementation\nDESCRIPTION: This snippet shows the full implementation of a SurveyJS component in React. It includes the survey model definition, result handling, and component rendering.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-react.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// components/Survey.tsx\n'use client'\n\nimport { useCallback } from 'react';\nimport 'survey-core/survey-core.css';\nimport { Model } from 'survey-core';\nimport { Survey } from 'survey-react-ui';\n\nconst surveyJson = {\n  elements: [{\n    name: \"FirstName\",\n    title: \"Enter your first name:\",\n    type: \"text\"\n  }, {\n    name: \"LastName\",\n    title: \"Enter your last name:\",\n    type: \"text\"\n  }]\n};\n\nexport default function SurveyComponent() {\n  const survey = new Model(surveyJson);\n  const alertResults = useCallback((survey: Model) => {\n    const results = JSON.stringify(survey.data);\n    alert(results);\n  }, []);\n\n  survey.onComplete.add(alertResults);\n\n  return <Survey model={survey} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Survey Results to Server with SurveyJS in JavaScript\nDESCRIPTION: This snippet demonstrates how to handle the onComplete event in SurveyJS to send survey results to a server. It uses the Fetch API to make a POST request with the survey data.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/how-to-store-survey-results.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model } from \"survey-core\";\n\nconst surveyJson = { ... };\n\nconst survey = new Model(surveyJson);\nsurvey.onComplete.add((survey, options) => {\n  options.showSaveInProgress();\n  const dataObj = { postId: surveyPostId, surveyResult: resultAsStr };\n  const dataStr = JSON.stringify(dataObj);\n  const headers = new Headers({ \"Content-Type\": \"application/json; charset=utf-8\" });\n  fetch(surveyServiceUrl + \"/post/\", {\n    method: \"POST\",\n    body: dataStr,\n    headers: headers\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(\"Could not post the survey results\");\n    }\n    // Display the \"Success\" message (pass a string value to display a custom message)\n    options.showSaveSuccess();\n    // Alternatively, you can clear all messages:\n    // options.clearSaveMessages();\n  }).catch(error => {\n    // Display the \"Error\" message (pass a string value to display a custom message)\n    options.showSaveError();\n    console.log(error);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a Full Name Composite Question Type in JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure a 'Full Name' composite question type that contains 'First Name' and 'Last Name' text questions. It shows how to add the composite question to the ComponentCollection and define its properties.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-create-composite-question-types.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ComponentCollection } from \"survey-core\";\n\nComponentCollection.Instance.add({\n  // A unique name; must use lowercase\n  name: \"fullname\", \n  // A display name used in the Toolbox\n  title: \"Full Name\",\n  // A default title for questions created with this question type\n  defaultQuestionTitle: \"Enter your full name:\",\n  // An array of JSON schemas that configure the nested questions\n  elementsJSON: [\n    { type: \"text\", name: \"firstName\", title: \"First Name\", isRequired: true },\n    { type: \"text\", name: \"lastName\", title: \"Last Name\", isRequired: true, startWithNewLine: false }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Class with Custom Property in JavaScript\nDESCRIPTION: This code shows how to create a new custom class 'MyCustomClass' based on the Question class, define a custom property with getter and setter, and register the new element type. It also demonstrates how to configure serialization for the new class.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Question, ElementFactory } from \"survey-core\";\n\nexport class MyCustomClass extends Question {\n  getType() {\n    return \"my-custom-class\";\n  }\n  get myCustomProperty() {\n    return this.getPropertyValue(\"myCustomProperty\");\n  }\n  set myCustomProperty(val) {\n    this.setPropertyValue(\"myCustomProperty\", val);\n  }\n}\n\nElementFactory.Instance.registerElement(\"my-custom-class\", (name) => {\n  return new MyCustomClass(name);\n});\n\nSerializer.addClass(\n  \"my-custom-class\",\n  [{\n    name: \"myCustomProperty\",\n    category: \"general\",\n    visibleIndex: 2\n  }],\n  function () {\n    return new MyCustomClass(\"\");\n  },\n  \"question\"\n);\n```\n\n----------------------------------------\n\nTITLE: Populating Multiple Form Fields Using the data Property\nDESCRIPTION: This snippet demonstrates how to populate multiple form fields at once by assigning a new object to the data property of a SurveyModel instance, replacing the existing data.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-pre-populate-form-fields.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model } from \"survey-core\";\n\nconst surveyJson = {\n  \"elements\": [{\n    \"name\": \"firstName\",\n    \"title\": \"First Name\"\n  }, {\n    \"name\": \"lastName\",\n    \"title\": \"Last Name\"\n  }]\n}\n\nconst survey = new Model(surveyJson);\nsurvey.data = {\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\"\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Survey Results to Server in Angular with SurveyJS\nDESCRIPTION: This snippet shows how to handle survey completion, add a user ID to the results, and send the data to a server using fetch. It utilizes the SurveyJS Model and onComplete event.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-angular.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\nimport { ..., Model } from \"survey-core\";\n\nconst SURVEY_ID = 1;\n\n@Component({\n  // ...\n})\nexport class AppComponent implements OnInit {\n  surveyComplete (survey) {\n    const userId = /* ... Getting the user ID ... */\n    survey.setValue(\"userId\", userId);\n\n    saveSurveyResults(\n      \"https://your-web-service.com/\" + SURVEY_ID,\n      survey.data\n    )\n  }\n  ngOnInit() {    \n    const survey = new Model(surveyJson);\n    survey.onComplete.add(this.surveyComplete);\n    // ...\n  }\n}\n\nfunction saveSurveyResults(url, json) {\n  fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json;charset=UTF-8'\n    },\n    body: JSON.stringify(json)\n  })\n  .then(response => {\n    if (response.ok) {\n      // Handle success\n    } else {\n      // Handle error\n    }\n  })\n  .catch(error => {\n    // Handle error\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Full Angular Component Implementation for SurveyJS\nDESCRIPTION: This snippet shows the complete implementation of an Angular component using SurveyJS. It includes the component template, TypeScript file with survey model and result handling, and the Angular module configuration.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-angular.md#2025-04-18_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- app.component.html -->\n<survey [model]=\"surveyModel\"></survey>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// app.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Model } from \"survey-core\";\n\nconst surveyJson = {\n  elements: [{\n    name: \"FirstName\",\n    title: \"Enter your first name:\",\n    type: \"text\"\n  }, {\n    name: \"LastName\",\n    title: \"Enter your last name:\",\n    type: \"text\"\n  }]\n};\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'My First Survey';\n  surveyModel: Model;\n\n  alertResults (sender) {\n    const results = JSON.stringify(sender.data);\n    alert(results);\n  }\n  ngOnInit() {\n    const survey = new Model(surveyJson);\n    survey.onComplete.add(this.alertResults);\n    this.surveyModel = survey;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// app.module.ts\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { SurveyModule } from \"survey-angular-ui\";\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    SurveyModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n----------------------------------------\n\nTITLE: Defining a Multi-Page Survey Model in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a survey model with multiple pages using SurveyJS. It defines a four-page survey with different question types and sets up the basic structure for implementing conditional page visibility.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-multi-page-survey.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n    pages: [{\n        elements: [{\n            name: \"satisfaction-score\",\n            title: \"How would you describe your experience with our product?\",\n            type: \"radiogroup\",\n            choices: [\n                { value: 5, text: \"Fully satisfying\" },\n                { value: 4, text: \"Generally satisfying\" },\n                { value: 3, text: \"Neutral\" },\n                { value: 2, text: \"Rather unsatisfying\" },\n                { value: 1, text: \"Not satisfying at all\" }\n            ],\n            isRequired: true\n        }]\n    }, {\n        elements: [{\n            name: \"what-would-make-you-more-satisfied\",\n            title: \"What can we do to make your experience more satisfying?\",\n            type: \"comment\",\n        }, {\n            name: \"nps-score\",\n            title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n            type: \"rating\",\n            rateMin: 0,\n            rateMax: 10\n        }],\n    }, {\n        elements: [{\n            name: \"how-can-we-improve\",\n            title: \"In your opinion, how could we improve our product?\",\n            type: \"comment\"\n        }],\n    }, {\n        elements: [{\n            name: \"disappointing-experience\",\n            title: \"Please let us know why you had such a disappointing experience with our product\",\n            type: \"comment\"\n        }],\n    }]\n};\n```\n\n----------------------------------------\n\nTITLE: Merging Dynamic Matrix and Dynamic Panel Values in SurveyJS\nDESCRIPTION: Shows how to associate a Dynamic Matrix with a Dynamic Panel using the valueName property to create a merged employees array. The matrix collects employee names while the panel collects contact details.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-merge-question-values.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  \"elements\": [{\n    \"type\": \"matrixdynamic\",\n    \"name\": \"employees-list\",\n    \"valueName\": \"employees\",\n    \"title\": \"Employees\",\n    \"columns\": [{\n      \"name\": \"employee-name\",\n      \"cellType\": \"text\"\n    }],\n  }, {\n    \"type\": \"paneldynamic\",\n    \"name\": \"employee-info\",\n    \"title\": \"Your employees\",\n    \"valueName\": \"employees\",\n    \"templateElements\": [{\n      \"type\": \"panel\",\n      \"name\": \"contacts\",\n      \"elements\": [{\n        \"type\": \"text\",\n        \"name\": \"address\",\n        \"title\": \"Address:\"\n      }, {\n        \"type\": \"text\",\n        \"name\": \"phone\",\n        \"title\": \"Phone:\"\n      }]\n    }],\n    \"templateTitle\": \"Employee: {panel.employee-name}\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Survey Results Format in SurveyJS\nDESCRIPTION: Shows how to customize the survey results format by transforming the data structure when the survey is completed.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/access-and-modify-survey-results.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsurvey.onComplete.add((survey) => {\n  const resultData = [];\n  for (const key in survey.data) {\n    const question = survey.getQuestionByName(key);\n    if (!!question) {\n      const item = {\n        name: key,\n        value: question.value,\n        title: question.displayValue,\n        displayValue: question.displayValue\n      };\n      resultData.push(item);\n    }\n  }\n  // ...\n  // Send `resultData` to your web server\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Survey Results on NodeJS Server with SurveyJS\nDESCRIPTION: This code snippet shows how to validate survey results on a NodeJS server using SurveyJS. It creates a SurveyModel instance and uses the clearIncorrectValues method to remove invalid data from the survey results.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/how-to-store-survey-results.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Server-side code for a NodeJS backend\nimport { Model } from \"survey-core\";\n\nconst surveyJson = { ... };\nconst survey = new Model(surveyJson);\n\nsurvey.data = initialSurveyResultJson;\nsurvey.clearIncorrectValues(true);\n\nconst correctSurveyResultJson = survey.data;\n```\n\n----------------------------------------\n\nTITLE: Full SurveyJS Model with Preview Page Configuration\nDESCRIPTION: This comprehensive example shows a complete survey model including preview page settings, multiple pages with conditional logic, and custom button text.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-multi-page-survey.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n    pages: [{\n        elements: [{\n            type: \"html\",\n            html: \"<h2>In this survey, we will ask you a couple questions about your impressions of our product.</h2>\"\n        }]\n    }, {\n        elements: [{\n            name: \"satisfaction-score\",\n            title: \"How would you describe your experience with our product?\",\n            type: \"radiogroup\",\n            choices: [\n                { value: 5, text: \"Fully satisfying\" },\n                { value: 4, text: \"Generally satisfying\" },\n                { value: 3, text: \"Neutral\" },\n                { value: 2, text: \"Rather unsatisfying\" },\n                { value: 1, text: \"Not satisfying at all\" }\n            ],\n            isRequired: true\n        }]\n    }, {\n        elements: [{\n            name: \"what-would-make-you-more-satisfied\",\n            title: \"What can we do to make your experience more satisfying?\",\n            type: \"comment\",\n            visibleIf: \"{satisfaction-score} = 4\"\n        }, {\n            name: \"nps-score\",\n            title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n            type: \"rating\",\n            rateMin: 0,\n            rateMax: 10\n        }],\n        visibleIf: \"{satisfaction-score} >= 4\"\n    }, {\n        elements: [{\n            name: \"how-can-we-improve\",\n            title: \"In your opinion, how could we improve our product?\",\n            type: \"comment\"\n        }],\n        visibleIf: \"{satisfaction-score} = 3\"\n    }, {\n        elements: [{\n            name: \"disappointing-experience\",\n            title: \"Please let us know why you had such a disappointing experience with our product\",\n            type: \"comment\"\n        }],\n        visibleIf: \"{satisfaction-score} =< 2\"\n    }],\n    pageNextText: \"Forward\",\n    completeText: \"Submit\",\n    showPrevButton: false,\n    firstPageIsStartPage: true,\n    startSurveyText: \"Take the Survey\",\n    completedHtml: \"Thank you for your feedback!\",\n    showPreviewBeforeComplete: true,\n    previewMode: \"answeredQuestions\"\n};\n```\n\n----------------------------------------\n\nTITLE: Restoring Survey Progress from a Database in JavaScript\nDESCRIPTION: This code snippet shows how to save incomplete survey results to a database and restore them when the user returns. It uses SurveyJS events to save data on value changes, page navigation, and survey completion, sending the data to a server endpoint.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/how-to-save-and-restore-incomplete-survey.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model } from \"survey-core\";\n\nconst survey = new Model();\n\nconst SURVEY_ID = /* ... Getting the survey ID ... */\nconst USER_ID = /* ... Getting the user ID ... */\nconst ENDPOINT_URL = \"https://example.com/api/responses/\" + SURVEY_ID + \"/\" + USER_ID;\n\nfetch(\"https://example.com/api/surveys/\" + SURVEY_ID)\n  .then(response => response.json())\n  .then(loadedSurvey => {\n    survey.fromJSON(loadedSurvey.json);\n    restoreSurveyData(survey);\n  })\n  .catch(error => console.error(error));\n\nfunction saveSurveyData (survey) {\n  const data = survey.data;\n  data.pageNo = survey.currentPageNo;\n  submitSurveyData(data);\n}\n\nfunction submitSurveyData (data) {\n  fetch(url, {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(data)\n  })\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(error => console.error(error));\n}\n\nfunction restoreSurveyData (survey) {\n  fetch(ENDPOINT_URL)\n    .then(response => response.json())\n    .then(prevData => {\n      if (prevData) {\n        const data = JSON.parse(prevData);\n        survey.data = data;\n        if (data.pageNo) {\n          survey.currentPageNo = data.pageNo;\n        }\n      }\n    })\n    .catch(error => console.error(error));\n}\n\n// Submit survey results when users change a question value...\nsurvey.onValueChanged.add(saveSurveyData);\n// ... switch to the next page...\nsurvey.onCurrentPageChanged.add(saveSurveyData);\n// ... and complete the survey\nsurvey.onComplete.add(saveSurveyData);\n```\n\n----------------------------------------\n\nTITLE: Implementing SetValue Trigger in SurveyJS\nDESCRIPTION: Demonstrates how to use the setvalue trigger to set a specific value to a question based on conditions. The example shows setting age categories based on an age value.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_35\n\nLANGUAGE: js\nCODE:\n```\nconst surveyJson = {\n  \"elements\": [{\n    \"name\": \"age\", \n    // ...\n  }, {\n    \"name\": \"ageType\",\n    // ...\n  }],\n  \"triggers\": [{\n    \"type\": \"setvalue\",\n    \"expression\": \"{age} < 18\",\n    \"setToName\": \"ageType\",\n    \"setValue\": \"minor\"\n  }, {\n    \"type\": \"setvalue\",\n    \"expression\": \"{age} >= 18\",\n    \"setToName\": \"ageType\",\n    \"setValue\": \"adult\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Skip Trigger in SurveyJS\nDESCRIPTION: Demonstrates how to use the skip trigger to navigate to a specific page and question based on conditions. The example skips the shipping address fields when the shipping address is the same as billing.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_37\n\nLANGUAGE: js\nCODE:\n```\nconst surveyJson = {\n \"pages\": [{\n   \"name\": \"billingAddressPage\",\n   \"elements\": [{\n     \"name\": \"billingAddress\",\n     // ...\n    }]\n  }, {\n   \"name\": \"shippingAddressPage\",\n   \"elements\": [{\n      \"name\": \"sameAsBilling\",\n      \"choices\": [ \"Yes\", \"No\" ]\n      // ...\n  }, {     \n     \"name\": \"shippingAddress\",\n     \"visibleIf\": \"{sameAsBilling} = 'No'\",\n     // ...\n    }]\n  }, {\n   \"name\": \"additionalInfoPage\",\n   \"elements\": [{\n     \"name\": \"additionalInfo\",\n     // ...\n    }]\n  }],\n \"triggers\": [{\n   \"type\": \"skip\",\n   \"expression\": \"{sameAsBilling} = 'Yes'\",\n   \"gotoName\": \"additionalInfo\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Widget for SurveyJS in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a custom widget for SurveyJS. It includes a JSON structure with various properties and methods that define the widget's behavior, appearance, and integration with the SurveyJS library. The snippet also shows how to register the custom widget with the SurveyJS CustomWidgetCollection.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-create-custom-widgets.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar customWidgetJSON = {\n  /**\n   * Required attribute. Unique name in lower case.\n   */ \n  name: \"yourcomponentname\",\n  /**\n   * Optional attribute. Toolbox use this value to display it as a text in toolbox item.\n   * If it is empty, then name is used.\n   */ \n  title: title,\n  /**\n   * Optional attribute. If Toolbox has several categories then \n   * this attribute defines to which category this custom widget belongs.\n   */ \n  category: category,\n  /**\n   * Optional attribute. Toolbox use it to show the icon type in toolbox item.\n   * If it is empty, then Creator uses \"icon-default\" value.\n   */ \n  iconName: iconName,\n  /**\n   * This function is required if you are going to introduce a new question type\n   * and register it on SurveyJS Creator toolbox.\n   * It should return true, when all needed resources (javascript and css files) are loaded\n   */\n  widgetIsLoaded: function () {\n   return typeof $ == \"function\"; //example of checking on loading jQuery\n  },\n  /**\n   * This function returns true when we decided to apply our widget to the question.\n   * This function is required.\n   * SurveyJS Library allows to apply only one custom widget to a question.\n   * If there are several custom widgets that can be applied to the same question,\n   * then the first custom widget in the custom widget collection wins.\n   */ \n  isFit: function (question) {\n     return question.getType() == \"richedit\";\n  },\n  /**\n   * SurveyJS calls this function one time on registering the custom widget.\n   * This function is optional\n   */ \n  init: function() {\n      //Add/modify/remove classes and properties\n  },\n  /**\n   * If you want to have the default input rendering for the existing question, then set this property to true.\n   */  \n  isDefaultRender: true,\n  /**\n   * SurveyJS will render this template for question input if this property is not empty.\n   */\n  htmlTemplate: \"<input class='custom_class' />\",\n  /**\n   * You have to put here code to modify the DOM, using the html element as a root element.\n   * In case of creating your own question type, \n   * you have to create data binding between your widget and question value.\n   * If needed, react on changing read-only question state.\n   */\n  afterRender: function(question, element) {\n\n  }\n});\n\n//leave this parameter empty or set it to \"customtype\" if you want to register a new item on SurveyJS Creator toolbox\nvar activatedByType = \"customtype\";\nSurvey.CustomWidgetCollection.Instance.add(customWidgetJSON, activatedByType);\n```\n\n----------------------------------------\n\nTITLE: Sending Survey Results to Server in React with SurveyJS\nDESCRIPTION: This snippet shows how to send survey results to a server upon completion. It includes adding a user ID to the survey data and using the fetch API to send a POST request.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-react.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// components/Survey.tsx\n// ...\nimport { useCallback } from 'react';\n\nconst SURVEY_ID = 1;\n\nexport default function SurveyComponent() {\n  const survey = new Model(surveyJson);\n  const surveyComplete = useCallback((survey: Model) => {\n    const userId = /* ... Getting the user ID ... */\n    survey.setValue(\"userId\", userId);\n\n    saveSurveyResults(\n      \"https://your-web-service.com/\" + SURVEY_ID,\n      survey.data\n    )\n  }, []);\n\n  survey.onComplete.add(surveyComplete);\n\n  return <Survey model={survey} />;\n}\n\nfunction saveSurveyResults(url: string, json: object) {\n  fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json;charset=UTF-8'\n    },\n    body: JSON.stringify(json)\n  })\n  .then(response => {\n    if (response.ok) {\n      // Handle success\n    } else {\n      // Handle error\n    }\n  })\n  .catch(error => {\n    // Handle error\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Default Values with Expressions\nDESCRIPTION: This snippet shows how to use the defaultValueExpression property to specify dynamic default values based on logical expressions that will be evaluated when the survey begins and re-evaluated when question values change.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-pre-populate-form-fields.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  \"elements\": [{\n    \"name\": \"start-date\",\n    \"title\": \"Select a vacation start date\",\n    \"type\": \"text\",\n    \"inputType\": \"date\",\n    \"defaultValueExpression\": \"today()\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Checkbox with Dynamic Panel Values in SurveyJS\nDESCRIPTION: Demonstrates how to make a Checkbox question compatible with object-based questions using valuePropertyName property. The example merges car selections with additional information collected through a Dynamic Panel.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-merge-question-values.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  \"elements\": [{\n    \"type\": \"checkbox\",\n    \"name\": \"cars\",\n    \"valuePropertyName\": \"car\",\n    \"title\": \"Which car(s) have you ever owned?\",\n    \"choices\": [ \"Ford\", \"Vauxhall\", \"Volkswagen\", \"Nissan\", \"Audi\",\n      \"Mercedes-Benz\", \"BMW\", \"Peugeot\", \"Toyota\", \"Citroen\", \"Tesla\" ]\n  }, {\n    \"type\": \"paneldynamic\",\n    \"name\": \"cars-info\",\n    \"title\": \"Car Information\",\n    \"valueName\": \"cars\",\n    \"templateElements\": [{\n      \"type\": \"dropdown\",\n      \"name\": \"years-owned\",\n      \"title\": \"How long did you own this car?\",\n      \"choicesMin\": 1,\n      \"choicesMax\": 50\n    }, {\n      \"type\": \"rating\",\n      \"name\": \"rating\",\n      \"title\": \"How would you rate it?\",\n    }],\n    \"templateTitle\": \"Car: {panel.car}\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Variables in SurveyJS with setVariable Method\nDESCRIPTION: This code shows how to create and set a variable in SurveyJS. It sets a 'currentYear' variable to display the current year dynamically in an HTML question, demonstrating the use of survey.setVariable() method.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model } from \"survey-core\";\n\nconst surveyJson = {\n  \"elements\": [{\n    \"name\": \"footer\",\n    \"type\": \"html\",\n    \"html\": \"&copy; 2015-{currentyear} Devsoft Baltic OÜ\"\n  }]\n};\n\nconst survey = new Model(surveyJson);\n\nsurvey.setVariable(\"currentyear\", new Date().getFullYear());\n```\n\n----------------------------------------\n\nTITLE: Complete SurveyJS Integration in Vue Component\nDESCRIPTION: Full implementation of a Vue component with SurveyJS Form Library. This includes importing styles, creating a model, rendering the survey, and handling form completion with a simple alert display of results.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-vue.md#2025-04-18_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\nimport 'survey-core/survey-core.css';\nimport { Model } from 'survey-core';\nimport { SurveyComponent } from 'survey-vue3-ui';\n\nconst surveyJson = {\n  elements: [{\n    name: \"FirstName\",\n    title: \"Enter your first name:\",\n    type: \"text\"\n  }, {\n    name: \"LastName\",\n    title: \"Enter your last name:\",\n    type: \"text\"\n  }]\n};\n\nconst alertResults = (sender: any) => {\n  const results = JSON.stringify(sender.data);\n  alert(results);\n}\n\nconst survey = new Model(surveyJson);\nsurvey.onComplete.add(alertResults);\n</script>\n\n<template>\n  <SurveyComponent :model=\"survey\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Static Survey Model in JSON\nDESCRIPTION: Creates a survey model using JSON configuration with a page containing text questions and a collapsible panel. Demonstrates basic survey structure with named elements and titles.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-simple-survey.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  pages: [{\n    name: \"PersonalDetails\",\n    elements: [{\n      type: \"text\",\n      name: \"FirstName\",\n      title: \"Enter your first name:\"\n    }, {\n      type: \"text\",\n      name: \"LastName\",\n      title: \"Enter your last name:\"\n    }, {\n      type: \"panel\",\n      name: \"Contacts\",\n      state: \"collapsed\",\n      title: \"Contacts (optional)\",\n      elements: [{\n        type: \"text\",\n        name: \"Telegram\",\n        title: \"Telegram:\"\n      }, {\n        type: \"text\",\n        name: \"GitHub\",\n        title: \"GitHub username:\"\n      }]\n    }]\n  }]\n};\n\nconst survey = new Survey.Model(surveyJson);\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Trigger in SurveyJS\nDESCRIPTION: Shows how to use the complete trigger to automatically complete a survey when a certain condition is met. In this example, the survey completes if the respondent's age is under 18.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_34\n\nLANGUAGE: js\nCODE:\n```\nconst surveyJson = {\n  \"elements\": [{\n    \"name\": \"age\", \n    // ...\n  }],\n  \"triggers\": [\n    { \"type\": \"complete\", \"expression\": \"{age} < 18\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Color Picker Component Implementation in TypeScript\nDESCRIPTION: This is the full implementation of the Color Picker component, including the component definition, model creation, element registration, serialization, localization, and SVG icon registration. It demonstrates how to create a custom question type for SurveyJS.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from \"@angular/core\";\nimport { AngularComponentFactory, QuestionAngular } from \"survey-angular-ui\";\nimport { ElementFactory, Question, Serializer, SvgRegistry } from \"survey-core\";\nimport { PropertyGridEditorCollection, getLocaleStrings } from \"survey-creator-core\";\nimport { ColorEvent } from 'ngx-color';\n\nconst CUSTOM_TYPE = \"color-picker\";\n\n@Component({\n  selector: \"color-picker\",\n  templateUrl: \"./color-picker.component.html\",\n  styleUrls: [ \"./color-picker.component.css\" ]\n})\nexport class ColorPickerComponent extends QuestionAngular<QuestionColorPickerModel> {\n  handleChange($event: ColorEvent) {\n    this.model.value = $event.color.hex;\n  }\n}\nAngularComponentFactory.Instance.registerComponent(CUSTOM_TYPE + \"-question\", ColorPickerComponent);\n\nexport class QuestionColorPickerModel extends Question {\n  getType() {\n    return CUSTOM_TYPE;\n  }\n\n  get colorPickerType() {\n    return this.getPropertyValue(\"colorPickerType\");\n  }\n  set colorPickerType(val) {\n    this.setPropertyValue(\"colorPickerType\", val);\n  }\n\n  get disableAlpha() {\n    return this.getPropertyValue(\"disableAlpha\");\n  }\n  set disableAlpha(val) {\n    this.setPropertyValue(\"disableAlpha\", val);\n  }\n}\n\nElementFactory.Instance.registerElement(\n  CUSTOM_TYPE,\n  (name) => {\n    return new QuestionColorPickerModel(name);\n  }\n);\n\nSerializer.addClass(\n  CUSTOM_TYPE,\n  [{\n    name: \"colorPickerType\",\n    default: \"Slider\",\n    choices: [\"Slider\", \"Sketch\", \"Compact\"],\n    category: \"general\",\n    visibleIndex: 2 // After the Name and Title\n  }, {\n    name: \"disableAlpha:boolean\",\n    dependsOn: \"colorPickerType\",\n    visibleIf: function (obj) {\n      return obj.colorPickerType === \"Sketch\";\n    },\n    category: \"general\",\n    visibleIndex: 3 // After the Name, Title, and Color Picker type\n  }],\n  function () {\n    return new QuestionColorPickerModel(\"\");\n  },\n  \"question\"\n);\n\nconst locale = getLocaleStrings(\"en\");\nlocale.qt[CUSTOM_TYPE] = \"Color Picker\";\nlocale.pe.colorPickerType = \"Color picker type\";\nlocale.pe.disableAlpha = \"Disable alpha channel\";\n\nSvgRegistry.registerIcon(\n  CUSTOM_TYPE,\n  '<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M24 21.4201C23.9387 22.1566 23.5894 22.8394 23.0278 23.3202C22.4662 23.8011 21.7376 24.0413 21 23.9888C20.2624 24.0413 19.5338 23.8011 18.9722 23.3202C18.4106 22.8394 18.0613 22.1566 18 21.4201C18 18.8513 21 16.2826 21 14.9932C21 16.2826 24 18.8513 24 21.4201ZM22 12.9942L11 1.99951L8.71 4.2884L10.12 5.70771L11 4.82814L18.17 11.9946L5.64 15.8028L2.83 12.9942L7.71 8.11653L9.29 9.70576C9.38296 9.79944 9.49356 9.8738 9.61542 9.92455C9.73728 9.97529 9.86799 10.0014 10 10.0014C10.132 10.0014 10.2627 9.97529 10.3846 9.92455C10.5064 9.8738 10.617 9.79944 10.71 9.70576C10.8037 9.61284 10.8781 9.5023 10.9289 9.3805C10.9797 9.2587 11.0058 9.12805 11.0058 8.99611C11.0058 8.86416 10.9797 8.73352 10.9289 8.61172C10.8781 8.48992 10.8037 8.37937 10.71 8.28645L3.71 1.28986C3.5217 1.10165 3.2663 0.995911 3 0.995911C2.7337 0.995911 2.4783 1.10165 2.29 1.28986C2.1017 1.47807 1.99591 1.73334 1.99591 1.99951C1.99591 2.26569 2.1017 2.52096 2.29 2.70917L6.29 6.70722L0 12.9942L10 22.9893L18 14.9932L22 12.9942Z\" /></svg>'\n);\n\nPropertyGridEditorCollection.register({\n  fit: function (prop) {\n    return prop.type === \"color\";\n  },\n  getJSON: function () {\n    return {\n      type: CUSTOM_TYPE,\n      colorPickerType: \"Compact\"\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Validation with Asynchronous Functions in JavaScript\nDESCRIPTION: This snippet shows how to use asynchronous functions and expressions for custom validation in SurveyJS. It registers a custom function to check if a country exists and uses it in a validator expression.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/data-validation.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FunctionFactory } from \"survey-core\";\n\nfunction doesCountryExist([ countryName ]) {\n  if (!countryName) {\n    this.returnResult();\n    return;\n  }\n  fetch(\"https://surveyjs.io/api/CountriesExample?name=\" + countryName)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.json();\n    })\n    .then((data) => {\n      const found = data.length > 0;\n      this.returnResult(found);\n    });\n}\n\nFunctionFactory.Instance.register(\"doesCountryExist\", doesCountryExist, true);\n\nconst surveyJson = {\n  \"elements\": [{\n    \"type\": \"text\",\n    \"name\": \"country\",\n    \"title\": \"Type a country:\",\n    \"validators\": [{\n      \"type\": \"expression\",\n      \"text\": \"Country is not found\",\n      \"expression\": \"doesCountryExist({country})\"\n    }]\n  }]\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Variable Values in SurveyJS\nDESCRIPTION: This snippet demonstrates how to access a variable's value using the getVariable() method. It retrieves the 'currentyear' variable and outputs it to the console.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(survey.getVariable(\"currentyear\"));\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Search Widget Implementation for SurveyJS\nDESCRIPTION: This is the full implementation of the custom search widget for comment questions in SurveyJS. It includes the search functionality, new property addition, and dynamic rendering based on the property value.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-create-custom-widgets.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar searchStringWidget = {\n  name: \"searchstring\",\n  isFit: function (question) {\n    return question.getType() == \"comment\";\n  },\n  init() {\n    Survey.Serializer.addProperty(\"comment\", {\n      name: \"hasSearch:switch\",\n      category: \"general\",\n    });\n  },\n  isDefaultRender: true,\n  afterRender: function (question, el) {\n    var mainDiv = document.createElement(\"div\");\n    var searchEl = document.createElement(\"input\");\n    searchEl.style.width = \"calc(100% - 120px)\";\n    var btnEl = document.createElement(\"button\");\n    btnEl.innerText = \"Search\";\n    btnEl.style.width = \"120px\";\n    var searchIndex = 0;\n    searchEl.onchange = function () {\n      searchIndex = 0;\n    };\n    btnEl.onclick = function () {\n      var searchText = searchEl.value;\n      var text = el.value;\n      if (!searchText || !text) return;\n      var index = text.indexOf(searchText, searchIndex + 1);\n      if (index < 0 && searchIndex > -1) {\n        index = text.indexOf(searchText, 0);\n      }\n      searchIndex = index;\n      if (index > -1) {\n        el.focus();\n        el.setSelectionRange(index, index + searchText.length);\n      }\n    };\n    mainDiv.appendChild(searchEl);\n    mainDiv.appendChild(btnEl);\n    el.parentElement.insertBefore(mainDiv, el);\n\n    mainDiv.style.display = !question.hasSearch ? \"none\" : \"\";\n    question.registerFunctionOnPropertyValueChanged(\n      \"hasSearch\",\n      function () {\n        mainDiv.style.display = !question.hasSearch ? \"none\" : \"\";\n      }\n    );\n  },\n};\n\nSurvey.CustomWidgetCollection.Instance.add(\n  searchStringWidget\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Using Expressions in SurveyJS\nDESCRIPTION: This code demonstrates how to implement custom validation using expressions and a custom function in SurveyJS.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/data-validation.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FunctionFactory } from \"survey-core\";\n\nfunction validateComment (params) {\n  const value = params[0];\n  return value.indexOf(\"survey\");\n}\n\nFunctionFactory.Instance.register(\"validateComment\", validateComment);\n\nconst surveyJson = {\n  \"elements\": [{\n    \"name\": \"memo\",\n    \"type\": \"comment\",\n    \"validators\": [{\n      \"type\": \"expression\",\n      \"text\": \"Your answer must contain the word \\\"survey\\\"\",\n      \"expression\": \"validateComment({memo}) >= 0\"\n    }]\n    // ...\n  }]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Visibility in SurveyJS\nDESCRIPTION: This snippet shows how to configure page and question visibility in a multi-page survey using the 'visibleIf' property. It demonstrates conditional logic based on the 'satisfaction-score' question to show or hide specific pages and questions.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-multi-page-survey.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n    pages: [{\n        elements: [{\n            name: \"satisfaction-score\",\n            // ...\n        }]\n    }, {\n        elements: [{\n            name: \"what-would-make-you-more-satisfied\",\n            // ...\n            visibleIf: \"{satisfaction-score} = 4\"\n        }, {\n            name: \"nps-score\",\n            // ...\n        }],\n        visibleIf: \"{satisfaction-score} >= 4\"\n    }, {\n        elements: [{\n            name: \"how-can-we-improve\",\n            // ...\n        }],\n        visibleIf: \"{satisfaction-score} = 3\"\n    }, {\n        elements: [{\n            name: \"disappointing-experience\",\n            // ...\n        }],\n        visibleIf: \"{satisfaction-score} =< 2\"\n    }],\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Color Picker Component Implementation\nDESCRIPTION: Full implementation of the color picker component including model definition, registration, serialization, and component class. This combines all the previous snippets into a complete, working example.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n// color-picker.component.ts\nimport { Component } from \"@angular/core\";\nimport { AngularComponentFactory, QuestionAngular } from \"survey-angular-ui\";\nimport { ElementFactory, Question, Serializer } from \"survey-core\";\nimport { ColorEvent } from 'ngx-color';\n\nconst CUSTOM_TYPE = \"color-picker\";\n\n@Component({\n  selector: \"color-picker\",\n  templateUrl: \"./color-picker.component.html\",\n  styleUrls: [ \"./color-picker.component.css\" ]\n})\nexport class ColorPickerComponent extends QuestionAngular<QuestionColorPickerModel> {\n  handleChange($event: ColorEvent) {\n    this.model.value = $event.color.hex;\n  }\n}\nAngularComponentFactory.Instance.registerComponent(CUSTOM_TYPE + \"-question\", ColorPickerComponent);\n\nexport class QuestionColorPickerModel extends Question {\n  getType() {\n    return CUSTOM_TYPE;\n  }\n\n  get colorPickerType() {\n    return this.getPropertyValue(\"colorPickerType\");\n  }\n  set colorPickerType(val) {\n    this.setPropertyValue(\"colorPickerType\", val);\n  }\n\n  get disableAlpha() {\n    return this.getPropertyValue(\"disableAlpha\");\n  }\n  set disableAlpha(val) {\n    this.setPropertyValue(\"disableAlpha\", val);\n  }\n}\n\nElementFactory.Instance.registerElement(\n  CUSTOM_TYPE,\n  (name) => {\n    return new QuestionColorPickerModel(name);\n  }\n);\n\n// Add question type metadata for further serialization into JSON\nSerializer.addClass(\n  CUSTOM_TYPE,\n  [{\n    name: \"colorPickerType\",\n    default: \"Slider\",\n    choices: [\"Slider\", \"Sketch\", \"Compact\"],\n    category: \"general\",\n    visibleIndex: 2 // After the Name and Title\n  }, {\n    name: \"disableAlpha:boolean\",\n    dependsOn: \"colorPickerType\",\n    visibleIf: function (obj) {\n      return obj.colorPickerType === \"Sketch\";\n    },\n    category: \"general\",\n    visibleIndex: 3 // After the Name, Title, and Color Picker type\n  }],\n  function () {\n    return new QuestionColorPickerModel(\"\");\n  },\n  \"question\"\n);\n```\n\n----------------------------------------\n\nTITLE: Overriding Base Question Properties in SurveyJS\nDESCRIPTION: Demonstrates how to override base question properties by using the Serializer.addProperty method. The code configures visibility and default values for titleLocation, title, and description properties.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-create-composite-question-types.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ComponentCollection, Serializer } from \"survey-core\";\n\nComponentCollection.Instance.add({\n  name: \"shippingaddress\",\n  // ...\n  onInit() {\n    Serializer.addProperty(\"shippingaddress\", {\n      name: \"titleLocation\",\n      visible: false,\n      default: \"hidden\",\n    });\n    Serializer.addProperty(\"shippingaddress\", {\n      name: \"title\",\n      visible: false,\n    });\n    Serializer.addProperty(\"shippingaddress\", {\n      name: \"description\",\n      visible: false,\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: String Expression Example in SurveyJS\nDESCRIPTION: This snippet shows a string expression that evaluates to either 'Adult' or 'Minor' based on the result of the age function. It demonstrates the use of the iif (inline if) function within an expression.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\"expression\": \"iif(age({birthdate}) >= 21, 'Adult', 'Minor')\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Logic in SurveyJS\nDESCRIPTION: This snippet demonstrates how to add custom validation logic to a survey by handling the onValidateQuestion event.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/data-validation.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model } from \"survey-core\";\nconst surveyJson = {\n  \"elements\": [{\n    \"name\": \"memo\",\n    \"type\": \"comment\",\n    // ...\n  }]\n};\nconst survey = new Model(surveyJson);\n\nsurvey.onValidateQuestion.add((survey, options) => {\n  if (options.name === \"memo\") {\n    if (options.value.indexOf(\"survey\") === -1) {\n      options.error = 'Your answer must contain the word \"survey\"'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a SurveyJS Model in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a simple survey model using JavaScript. It defines a JSON object with two text questions and instantiates a Survey.Model with this JSON.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-html-css-javascript.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n    elements: [{\n        name: \"FirstName\",\n        title: \"Enter your first name:\",\n        type: \"text\"\n    }, {\n        name: \"LastName\",\n        title: \"Enter your last name:\",\n        type: \"text\"\n    }]\n};\n\nconst survey = new Survey.Model(surveyJson);\n```\n\n----------------------------------------\n\nTITLE: Implementing Shipping Address Composite Question with Expressions and Triggers\nDESCRIPTION: This JavaScript code creates a 'Shipping Address' composite question type that includes business and shipping address fields with conditional logic. It demonstrates how to use expressions and the onValueChanged function to implement trigger-like behavior within a composite question.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-create-composite-question-types.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ComponentCollection } from \"survey-core\";\n\nComponentCollection.Instance.add({\n  name: \"shippingaddress\",\n  title: \"Shipping Address\",\n  elementsJSON: [{\n    type: \"comment\",\n    name: \"businessAddress\",\n    title: \"Business Address\",\n    isRequired: true\n  }, {\n    type: \"boolean\",\n    name: \"shippingSameAsBusiness\",\n    title: \"Shipping address same as business address\",\n    defaultValue: true\n  }, {\n    type: \"comment\",\n    name: \"shippingAddress\",\n    title: \"Shipping Address\",\n    // Use the `composite` prefix to access a question nested in the composite question\n    enableIf: \"{composite.shippingSameAsBusiness} <> true\",\n    isRequired: true\n  }],\n  onValueChanged(question, name) {\n    const businessAddress = question.contentPanel.getQuestionByName(\"businessAddress\");\n    const shippingAddress = question.contentPanel.getQuestionByName(\"shippingAddress\");\n    const shippingSameAsBusiness = question.contentPanel.getQuestionByName(\"shippingSameAsBusiness\");\n\n    if (name === \"businessAddress\") {\n      // If \"Shipping address same as business address\" is selected\n      if (shippingSameAsBusiness.value == true) {\n        // Copy the Business Address value to Shipping Address\n        shippingAddress.value = businessAddress.value;\n      }\n    }\n    if (name === \"shippingSameAsBusiness\") {\n      // If \"Shipping address same as business address\" is selected, copy the Business Address to Shipping Address\n      // Otherwise, clear the Shipping Address value\n      shippingAddress.value = shippingSameAsBusiness.value == true ? businessAddress.value : \"\";\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Visibility Conditions with choicesVisibleIf in JavaScript\nDESCRIPTION: Demonstrates how to filter choices in a survey based on selections made in previous questions. The example shows filtering out a choice selected in one question from being available in another question.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_33\n\nLANGUAGE: js\nCODE:\n```\nconst surveyJson = {\n  \"elements\": [{\n    \"name\": \"installed\",\n    \"choices\": [\"Google Chrome\", \"Microsoft Edge\", \"Firefox\", \"Internet Explorer\", \"Safari\", \"Opera\"],\n    // ...\n  }, {\n    \"name\": \"default\",\n    \"choicesFromQuestion\": \"installed\",\n    \"choicesFromQuestionMode\": \"selected\"\n    // ...\n  }, {\n    \"name\": \"secondChoice\",\n    \"choicesFromQuestion\": \"installed\",\n    \"choicesFromQuestionMode\": \"selected\",\n    \"choicesVisibleIf\": \"{item} != {default}\",\n    // ...\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Individual Question Values in SurveyJS\nDESCRIPTION: Demonstrates how to configure a rating question and access its value using different methods including direct value property access and Survey model methods.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/access-and-modify-survey-results.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model } from \"survey-core\";\n\nconst surveyJson = {\n  \"elements\": [{\n    \"type\": \"rating\",\n    \"name\": \"nps_score\",\n    \"title\": \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n    \"rateMin\": 0,\n    \"rateMax\": 10,\n  }]\n};\nconst survey = new Model(surveyJson);\nconst npsQuestion = survey.getQuestionByName(\"nps_score\");\n\nconsole.log(npsQuestion.value);\n// ===== or =====\n// console.log(survey.getValue(\"nps_score\"));\n\nnpsQuestion.value = 10;\n// ===== or =====\n// console.log(survey.setValue(\"nps_score\", 10));\n```\n\n----------------------------------------\n\nTITLE: Declaring Validators in SurveyJS JSON Schema\nDESCRIPTION: This code shows how to declare validators directly in the survey JSON schema, using the validators array for a question.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/data-validation.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  \"elements\": [{\n    \"name\": \"question1\",\n    \"type\": \"text\",\n    \"validators\": [\n      { \"type\": \"numeric\", \"text\": \"Value must be a number\" }\n    ]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CopyValue Trigger in SurveyJS\nDESCRIPTION: Shows how to use the copyvalue trigger to copy values from one question to another based on conditions. The example copies the billing address to the shipping address when indicated.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_36\n\nLANGUAGE: js\nCODE:\n```\nconst surveyJson = {\n  \"elements\": [{\n    \"name\": \"billingAddress\", \n    // ...\n  }, {\n    \"name\": \"shippingAddress\",\n    // ...\n  }, {\n    \"name\": \"sameAsBilling\",\n    \"choices\": [ \"Yes\", \"No\" ]\n    // ...\n  }],\n  \"triggers\": [{\n    \"type\": \"copyvalue\",\n    \"expression\": \"{sameAsBilling} = 'Yes'\",\n    \"fromName\": \"billingAddress\",\n    \"setToName\": \"shippingAddress\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Immediate Data Validation in SurveyJS\nDESCRIPTION: This snippet demonstrates how to enable immediate data validation in a survey by setting the checkErrorsMode and textUpdateMode properties in the survey JSON configuration.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/data-validation.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  \"checkErrorsMode\": \"onValueChanged\",\n  \"textUpdateMode\": \"onTyping\",\n  \"elements\": [\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Expression Properties with onExecuteExpression in SurveyJS\nDESCRIPTION: This example adds a custom showHeaderIf condition property to the Matrix question type. The onExecuteExpression function handles the expression evaluation result by updating the question's showHeader property.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Serializer } from \"survey-core\";\n\nSerializer.addProperty(\"matrix\", {\n  name: \"showHeaderIf\",\n  type: \"condition\",\n  category: \"logic\",\n  onExecuteExpression: (obj, res) => {\n    obj.showHeader = res;\n  }\n});\n\n// Usage\nconst surveyJson = {\n  \"elements\": [{\n    \"type\": \"matrix\",\n    \"showHeaderIf\": \"{question1} = 'item2'\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Survey Model in SurveyJS\nDESCRIPTION: Provides a complete survey model configuration including multiple pages with conditional visibility, custom navigation button text, and hidden previous button.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-multi-page-survey.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n    pages: [{\n        elements: [{\n            name: \"satisfaction-score\",\n            title: \"How would you describe your experience with our product?\",\n            type: \"radiogroup\",\n            choices: [\n                { value: 5, text: \"Fully satisfying\" },\n                { value: 4, text: \"Generally satisfying\" },\n                { value: 3, text: \"Neutral\" },\n                { value: 2, text: \"Rather unsatisfying\" },\n                { value: 1, text: \"Not satisfying at all\" }\n            ],\n            isRequired: true\n        }]\n    }, {\n        elements: [{\n            name: \"what-would-make-you-more-satisfied\",\n            title: \"What can we do to make your experience more satisfying?\",\n            type: \"comment\",\n            visibleIf: \"{satisfaction-score} = 4\"\n        }, {\n            name: \"nps-score\",\n            title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n            type: \"rating\",\n            rateMin: 0,\n            rateMax: 10\n        }],\n        visibleIf: \"{satisfaction-score} >= 4\"\n    }, {\n        elements: [{\n            name: \"how-can-we-improve\",\n            title: \"In your opinion, how could we improve our product?\",\n            type: \"comment\"\n        }],\n        visibleIf: \"{satisfaction-score} = 3\"\n    }, {\n        elements: [{\n            name: \"disappointing-experience\",\n            title: \"Please let us know why you had such a disappointing experience with our product\",\n            type: \"comment\"\n        }],\n        visibleIf: \"{satisfaction-score} =< 2\"\n    }],\n    pageNextText: \"Forward\",\n    completeText: \"Submit\",\n    showPrevButton: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Quiz Questions in SurveyJS\nDESCRIPTION: Sets up three Radiogroup questions for a history quiz with correct answers specified. Each question includes multiple choice options and the correctAnswer property.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-quiz.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  title: \"American History\",\n  pages: [{\n    elements: [{\n      type: \"radiogroup\",\n      name: \"civilwar\",\n      title: \"When was the American Civil War?\",\n      choices: [\n        \"1796-1803\", \"1810-1814\", \"1861-1865\", \"1939-1945\"\n      ],\n      correctAnswer: \"1861-1865\"\n    }]\n  }, {\n    elements: [{\n      type: \"radiogroup\",\n      name: \"libertyordeath\",\n      title: \"Whose quote is this: \\\"Give me liberty, or give me death\\\"?\",\n      choicesOrder: \"random\",\n      choices: [\n        \"John Hancock\", \"James Madison\", \"Patrick Henry\", \"Samuel Adams\"\n      ],\n      correctAnswer: \"Patrick Henry\"\n    }]\n  }, {\n    elements: [{\n      type: \"radiogroup\",\n      name: \"magnacarta\",\n      title: \"What is Magna Carta?\",\n      choicesOrder: \"random\",\n      choices: [\n        \"The foundation of the British parliamentary system\",\n        \"The Great Seal of the monarchs of England\",\n        \"The French Declaration of the Rights of Man\",\n        \"The charter signed by the Pilgrims on the Mayflower\"\n      ],\n      correctAnswer: \"The foundation of the British parliamentary system\"\n    }]\n  }]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Functionality for Comment Questions in SurveyJS\nDESCRIPTION: This code snippet creates a custom widget that adds search functionality to comment questions in SurveyJS. It adds a search input and button, allowing users to search and highlight text within the textarea.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-create-custom-widgets.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar searchStringWidget = {\n    name: \"searchstring\",\n    isFit: function (question) {\n        return question.getType() == \"comment\";\n    },\n    isDefaultRender: true,\n    afterRender: function (question, el) {\n        var mainDiv = document.createElement(\"div\");\n        var searchEl = document.createElement(\"input\");\n        searchEl.style.width = \"calc(100% - 120px)\";\n        var btnEl = document.createElement(\"button\");\n        btnEl.innerText = \"Search\";\n        btnEl.style.width = \"120px\";\n        var searchIndex = 0;\n        searchEl.onchange = function () {\n            searchIndex = 0;\n        };\n        btnEl.onclick = function () {\n            var searchText = searchEl.value;\n            var text = el.value;\n            if (!searchText || !text) return;\n            var index = text.indexOf(searchText, searchIndex + 1);\n            if (index < 0 && searchIndex > -1) {\n                index = text.indexOf(searchText, 0);\n            }\n            searchIndex = index;\n            if (index > -1) {\n                el.focus();\n                el.setSelectionRange(index, index + searchText.length);\n            }\n        };\n        mainDiv.appendChild(searchEl);\n        mainDiv.appendChild(btnEl);\n        el.parentElement.insertBefore(mainDiv, el);\n    },\n};\n\nSurvey.CustomWidgetCollection.Instance.add(searchStringWidget);\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Field Validation in SurveyJS\nDESCRIPTION: This code shows how to set up a required field with a custom error message using the isRequired and requiredErrorText properties in the survey JSON configuration.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/data-validation.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  \"elements\": [{\n    \"name\": \"question1\",\n    \"type\": \"text\",\n    \"isRequired\": true,\n    \"requiredErrorText\": \"Value cannot be empty\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering SurveyJS Form in React Component\nDESCRIPTION: Imports the Survey component, creates a model instance, and renders the form in a React component. Includes Next.js-specific code for client-side rendering.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-react.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use client'\n\nimport { Survey } from 'survey-react-ui';\n\nconst surveyJson = { /* ... */ }\n\nexport default function SurveyComponent() {\n  const survey = new Model(surveyJson);\n\n  return <Survey model={survey} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Properties to Full Name Composite Question Type\nDESCRIPTION: This JavaScript code adds a custom 'showMiddleName' property to the 'Full Name' composite question type. It demonstrates how to add the property, track its changes, and update the visibility of the 'Middle Name' question accordingly.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-create-composite-question-types.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ComponentCollection, Serializer } from \"survey-core\";\n\nComponentCollection.Instance.add({\n  name: \"fullname\", \n  title: \"Full Name\", \n  defaultQuestionTitle: \"Enter your full name:\",\n  elementsJSON: [\n    { type: \"text\", name: \"firstName\", title: \"First Name\", isRequired: true },\n    // Optional question, hidden by default\n    { type: \"text\", name: \"middleName\", title: \"Middle Name\", startWithNewLine: false, visible: false },\n    { type: \"text\", name: \"lastName\", title: \"Last Name\", isRequired: true, startWithNewLine: false }\n  ],\n\n  onInit() {\n    // Add a `showMiddleName` Boolean property to the `fullname` question type\n    Serializer.addProperty(\"fullname\", {\n      name: \"showMiddleName\",\n      type: \"boolean\",\n      default: false,\n      category: \"general\",\n    });\n  },\n  // Set the Middle Name question visibility at startup\n  onLoaded(question) {\n    this.changeMiddleNameVisibility(question);\n  },\n  // Track the changes of the `showMiddleName` property\n  onPropertyChanged(question, propertyName, newValue) {\n    if (propertyName === \"showMiddleName\") {\n      this.changeMiddleNameVisibility(question);\n    }\n  },\n  changeMiddleNameVisibility(question) {\n    const middleName = question.contentPanel.getQuestionByName(\"middleName\");\n    if (!!middleName) {\n      // Set the `middleName` question's visibility based on the composite question's `showMiddleName` property \n      middleName.visible = question.showMiddleName;\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing SurveyJS Creator with Custom Property in Vue\nDESCRIPTION: This code adds a custom 'backgroundColor' property to the survey, applies it as a CSS variable, and handles background color changes when switching tabs in the Survey Creator. It also initializes the SurveyCreatorModel with a sample survey containing a color picker question.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-vue.md#2025-04-18_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!-- src/components/SurveyCreator.vue -->\n<script setup lang=\"ts\">\nimport \"survey-core/survey-core.min.css\";\nimport \"survey-creator-core/survey-creator-core.min.css\";\n\nimport { Serializer } from \"survey-core\";\nimport { SurveyCreatorModel } from \"survey-creator-core\";\nimport type { SurveyModel } from \"survey-core\";\nimport type { CreatorBase } from \"survey-creator-core\";\n\nSerializer.addProperty(\"survey\", {\n  name: \"backgroundColor\",\n  displayName: \"Background color\",\n  type: \"color\",\n  category: \"general\",\n  visibleIndex: 3,\n  onSetValue: (survey: SurveyModel, value: string) => {\n    survey.setPropertyValue(\"backgroundColor\", value);\n    applyBackground(value);\n  }\n});\n\nconst surveyJson = {\n  elements: [{\n    type: \"color-picker\",\n    name: \"question1\",\n    title: \"Pick a color\",\n    colorPickerType: \"Sketch\"\n  }]\n};\n\nfunction applyBackground(color: string) {\n  setTimeout(() => {\n    const surveyEl = document.getElementsByClassName(\"sd-root-modern\")[0] as HTMLElement;\n    if (surveyEl) {\n      surveyEl.style.setProperty(\"--background\", color);\n    }\n  }, 50);\n}\n\nfunction handleActiveTabChange(sender: CreatorBase, { tabName }: { tabName: string }) {\n  if (tabName === \"preview\" || tabName === \"designer\") {\n    applyBackground(sender.survey.backgroundColor);\n  }\n}\n\nconst creator = new SurveyCreatorModel();\ncreator.onActiveTabChanged.add(handleActiveTabChange);\ncreator.JSON = surveyJson;\n</script>\n\n<template>\n  <SurveyCreatorComponent :model=\"creator\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Quiz Results Display Configuration in JavaScript\nDESCRIPTION: Demonstrates how to configure basic quiz results display using completedHtml property with placeholders for correct answers and total questions.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-quiz.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  completedHtml: \"<h4>You got <b>{correctAnswers}</b> out of <b>{questionCount}</b> correct answers.</h4>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Text with Question Values in SurveyJS\nDESCRIPTION: This snippet demonstrates how to use question values as placeholders in an HTML question. Two Single-Line Input questions (firstName and lastName) are referenced in an HTML question to display their values dynamically.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  \"elements\": [\n    { \"name\": \"firstName\", \"type\": \"text\", \"title\": \"First Name\", \"defaultValue\": \"John\" },\n    { \"name\": \"lastName\", \"type\": \"text\", \"title\": \"Last Name\", \"defaultValue\": \"Smith\" },\n    {\n      \"name\": \"greetings\",\n      \"type\": \"html\",\n      \"html\": \"<p>Hello, {firstName} {lastName}!</p>\"\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Merging New Data with Existing Survey Data\nDESCRIPTION: This snippet shows how to merge new data with existing data in a survey using the mergeData() method, which preserves default values and previously entered data.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-pre-populate-form-fields.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model } from \"survey-core\";\n\nconst surveyJson = {\n  // ...\n}\n\nconst survey = new Model(surveyJson);\nsurvey.mergeData({\n  \"lastName\": \"Doe\"\n});\n```\n\n----------------------------------------\n\nTITLE: Switching Between Pages in SurveyJS\nDESCRIPTION: Demonstrates various methods to navigate between pages in a SurveyJS survey, including setting the currentPage property and using navigation methods like nextPage() and prevPage().\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-multi-page-survey.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst survey = new Survey.Model(surveyJson);\n\n// A page instance\nsurvey.currentPage = myPage;\n\n// A zero-based index of the desired page in the `visiblePages` array\nsurvey.currentPage = visiblePageIndex;\n\n// A page name\nsurvey.currentPage = \"myCurrentPage\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst visiblePageIndex = survey.currentPageNo;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst survey = new Survey.Model(surveyJson);\n\nsurvey.start();\n\nconst navigatedForward = survey.nextPage();\nif (!navigatedForward) {\n    alert(\"Navigation failed!\")\n}\n\nconst navigatedBack = survey.prevPage();\nif (!navigatedBack) {\n    alert(\"Navigation failed!\")\n}\n\nconst completedSuccessfully = survey.tryComplete();\nif (!completedSuccessfully) {\n    alert(\"Check the answers for validation errors\")\n}\n\nsurvey.doComplete();\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Picker Component in Angular for SurveyJS\nDESCRIPTION: This code defines a color picker component for SurveyJS using Angular. It includes the component class, question model, and necessary registrations for integration with SurveyJS.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// color-picker.component.ts\nimport { Component } from \"@angular/core\";\nimport { AngularComponentFactory, QuestionAngular } from \"survey-angular-ui\";\nimport { ElementFactory, Question, Serializer } from \"survey-core\";\nimport { getLocaleStrings } from \"survey-creator-core\";\nimport { ColorEvent } from 'ngx-color';\n\nconst CUSTOM_TYPE = \"color-picker\";\n\n@Component({\n  selector: \"color-picker\",\n  templateUrl: \"./color-picker.component.html\",\n  styleUrls: [ \"./color-picker.component.css\" ]\n})\nexport class ColorPickerComponent extends QuestionAngular<QuestionColorPickerModel> {\n  handleChange($event: ColorEvent) {\n    this.model.value = $event.color.hex;\n  }\n}\nAngularComponentFactory.Instance.registerComponent(CUSTOM_TYPE + \"-question\", ColorPickerComponent);\n\nexport class QuestionColorPickerModel extends Question {\n  getType() {\n    return CUSTOM_TYPE;\n  }\n\n  get colorPickerType() {\n    return this.getPropertyValue(\"colorPickerType\");\n  }\n  set colorPickerType(val) {\n    this.setPropertyValue(\"colorPickerType\", val);\n  }\n\n  get disableAlpha() {\n    return this.getPropertyValue(\"disableAlpha\");\n  }\n  set disableAlpha(val) {\n    this.setPropertyValue(\"disableAlpha\", val);\n  }\n}\n\nElementFactory.Instance.registerElement(\n  CUSTOM_TYPE,\n  (name) => {\n    return new QuestionColorPickerModel(name);\n  }\n);\n\n// Add question type metadata for further serialization into JSON\nSerializer.addClass(\n  CUSTOM_TYPE,\n  [{\n    name: \"colorPickerType\",\n    default: \"Slider\",\n    choices: [\"Slider\", \"Sketch\", \"Compact\"],\n    category: \"general\",\n    visibleIndex: 2 // After the Name and Title\n  }, {\n    name: \"disableAlpha:boolean\",\n    dependsOn: \"colorPickerType\",\n    visibleIf: function (obj) {\n      return obj.colorPickerType === \"Sketch\";\n    },\n    category: \"general\",\n    visibleIndex: 3 // After the Name, Title, and Color Picker type\n  }],\n  function () {\n    return new QuestionColorPickerModel(\"\");\n  },\n  \"question\"\n);\n\nconst locale = getLocaleStrings(\"en\");\nlocale.qt[CUSTOM_TYPE] = \"Color Picker\";\nlocale.pe.colorPickerType = \"Color picker type\";\nlocale.pe.disableAlpha = \"Disable alpha channel\";\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Nested Question Properties in SurveyJS\nDESCRIPTION: Demonstrates how to access and modify properties of nested questions using the getQuestionByName method.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-create-composite-question-types.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nComponentCollection.Instance.add({\n  name: \"shippingaddress\",\n  // ...\n  onCreated(question) {\n    const businessAddress = question.contentPanel.getQuestionByName(\"businessAddress\");\n    businessAddress.visible = false;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Page Navigation UI in SurveyJS\nDESCRIPTION: Shows how to customize the text of navigation buttons, hide navigation buttons, enable auto-advance, and display a progress bar in a SurveyJS survey.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-multi-page-survey.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n    pageNextText: \"Forward\",\n    pagePrevText: \"Back\",\n    completeText: \"Submit\"\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n    showNavigationButtons: false,\n    autoAdvanceEnabled: true,\n    autoAdvanceAllowComplete: true\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n    showPrevButton: false,\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n    showProgressBar: true,\n    progressBarLocation: \"top\"\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Expression Properties to Custom Classes in SurveyJS\nDESCRIPTION: This comprehensive example shows how to add expression properties to a new custom class. It demonstrates creating a custom question type with an expression property that affects another property when evaluated.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Question, ElementFactory, Serializer } from \"survey-core\";\n\nexport class MyCustomClass extends Question {\n  constructor() {\n    super();\n    this.addExpressionProperty(\n      \"myCustomPropertyExpression\",\n      (obj, res) => {\n        if (res) {\n          obj.myCustomProperty = res.toString();\n        }\n      }\n    );\n  }\n  getType() {\n    return \"my-custom-class\";\n  }\n  get myCustomProperty() {\n    return this.getPropertyValue(\"myCustomProperty\");\n  }\n  set myCustomProperty(val) {\n    this.setPropertyValue(\"myCustomProperty\", val);\n  }\n  get myCustomPropertyExpression() {\n    return this.getPropertyValue(\"myCustomPropertyExpression\");\n  }\n  set myCustomPropertyExpression(val) {\n    this.setPropertyValue(\"myCustomPropertyExpression\", val);\n  }\n}\n\nElementFactory.Instance.registerElement(\"my-custom-class\", (name) => {\n  return new MyCustomClass(name);\n});\n\nSerializer.addClass(\n  \"my-custom-class\",\n  [{\n    name: \"myCustomProperty\",\n    category: \"general\",\n    visibleIndex: 2\n  }, {\n    name: \"myCustomPropertyExpression\",\n    type: \"expression\",\n    category: \"logic\"\n  }],\n  function () {\n    return new MyCustomClass(\"\");\n  },\n  \"question\"\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Survey Component\nDESCRIPTION: Angular component implementation showing model initialization and rendering\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-angular.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\nimport { Model } from \"survey-core\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  surveyModel: Model;\n  ngOnInit() {\n    const survey = new Model(surveyJson);\n    this.surveyModel = survey;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Date Difference in TypeScript\nDESCRIPTION: Returns the difference between two given dates in days, hours, minutes, months, or years. Essential for time-span calculations in surveys.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\ndateDiff(fromDate: any, toDate: any, interval: \"days\" | \"hours\" | \"minutes\" | \"months\" | \"years\"): number\n```\n\n----------------------------------------\n\nTITLE: Handling Value Change Events in SurveyJS\nDESCRIPTION: Shows how to handle value changing and changed events to access question values before and after they are modified.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/access-and-modify-survey-results.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsurvey.onValueChanging.add((survey, { name, question, oldValue, value }) => {\n  console.log(`The ${name} question value is about to change from ${oldValue} to ${value}.`);\n  // You can redefine the `value` argument if you want to change the question value:\n  // value = myNewValue;\n});\n\nsurvey.onValueChanged.add((survey, { name, question, value }) => {\n  console.log(`The ${name} question value has changed to ${value}.`);\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Survey Results in Alert Dialog with Angular and SurveyJS\nDESCRIPTION: This snippet demonstrates how to display survey results in an alert dialog using Angular and SurveyJS. It uses the Model class and onComplete event to capture and display the results.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-angular.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\nimport { ..., Model } from \"survey-core\";\n\n@Component({\n  // ...\n})\nexport class AppComponent implements OnInit {\n  alertResults (sender) {\n    const results = JSON.stringify(sender.data);\n    alert(results);\n  }\n  ngOnInit() {\n    // ...\n    const survey = new Model(surveyJson);\n    survey.onComplete.add(this.alertResults);\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Complete Page Content in SurveyJS\nDESCRIPTION: Shows how to configure different completion messages based on survey responses using completedHtmlOnCondition property.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-multi-page-survey.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n    completedHtmlOnCondition: [{\n        expression: \"{some_field} > 10\",\n        html: \"Custom markup to show when some_field is greater than 10\"\n    }, {\n        expression: \"{some_field} < 10\",\n        html: \"Custom markup to show when some_field is less than 10\"\n    },\n    // ...\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Conditional Question Visibility\nDESCRIPTION: Example of using visibleIf property to conditionally show/hide questions based on age.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  \"elements\": [{\n    \"name\": \"birthdate\"\n  }, {\n    \"name\": \"drivers-license\",\n    \"title\": \"Have you got a driver's license?\",\n    \"visibleIf\": \"age({birthdate}) >= 16\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Quiz Results Display Configuration in JavaScript\nDESCRIPTION: Shows how to implement conditional quiz result pages using completedHtmlOnCondition with Boolean expressions for different score scenarios.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-quiz.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  completedHtmlOnCondition: [{\n    expression: \"{correctAnswers} == 0\",\n    html: \"<h4>Unfortunately, none of your answers are correct. Please try again.</h4>\"\n  }, {\n    expression: \"{correctAnswers} == {questionCount}\",\n    html: \"<h4>Congratulations! You answered all the questions correctly!</h4>\"\n  }]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Rich Text Editor Widget in SurveyJS\nDESCRIPTION: This snippet creates a custom rich text editor widget for SurveyJS. It includes the widget definition, HTML template, and necessary functions for two-way data binding and handling read-only states.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-create-custom-widgets.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar richEditWidget = {\n  name: \"richedit\",\n  title: \"Rich Editor\",\n  iconName: \"icon-editor\",\n  widgetIsLoaded: function () {\n    return true; //We do not have external scripts\n  },\n  isFit: function (question) {\n    return question.getType() == \"richedit\";\n  },\n  init() {\n    Survey.Serializer.addClass(\"richedit\", [], null, \"empty\");\n  },\n  htmlTemplate:\n    '<div>\\    <div>\\      <button onclick=\"document.execCommand(\\'bold\\')\">Bold</a>\\      <button onclick=\"document.execCommand(\\'italic\\')\">Italic</a>\\      <button onclick=\"document.execCommand(\\'insertunorderedlist\\')\">List</a>\\    </div>\\    <div class=\"widget_rich_editor\" contenteditable=true style=\"height:200px\"></div>\\  </div>',\n  afterRender: function (question, el) {\n    var editor = el.getElementsByClassName(\"widget_rich_editor\");\n    if (editor.length == 0) return;\n    editor = editor[0];\n    editor.innerHTML = question.value || \"\";\n    var changingValue = false;\n    var updateQuestionValue = function () {\n      if (changingValue) return;\n      changingValue = true;\n      question.value = editor.innerHTML;\n      changingValue = false;\n    };\n    if (editor.addEventListener) {\n      var types = [\n        \"input\",\n        \"DOMNodeInserted\",\n        \"DOMNodeRemoved\",\n        \"DOMCharacterDataModified\",\n      ];\n      for (var i = 0; i < types.length; i++) {\n        editor.addEventListener(types[i], updateQuestionValue, false);\n      }\n    }\n    question.valueChangedCallback = function () {\n      if (changingValue) return;\n      changingValue = true;\n      editor.innerHTML = question.value || \"\";\n      changingValue = false;\n    };\n    var updateReadOnly = function () {\n      var enabled = !question.isReadOnly;\n      var buttons = el.getElementsByTagName(\"button\");\n      for (var i = 0; i < buttons.length; i++) {\n      }\n    };\n    updateReadOnly();\n    question.readOnlyChangedCallback = function () {\n      updateReadOnly();\n    };\n  },\n};\n\nSurvey.CustomWidgetCollection.Instance.add(\n  richEditWidget,\n  \"customtype\"\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Survey Creator with Custom Color Property\nDESCRIPTION: Demonstrates the implementation of a Survey Creator component with a custom background color property. Includes property registration, value handling, and tab change management.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-react.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// components/SurveyCreator.tsx\n'use client'\n\nimport { useState } from \"react\";\nimport { SurveyCreator, SurveyCreatorComponent } from \"survey-creator-react\";\nimport { Serializer } from \"survey-core\";\nimport { registerColorPicker } from \"./ColorPicker\";\nimport \"survey-core/survey-core.css\";\nimport \"survey-creator-core/survey-creator-core.css\";\nimport { ActiveTabChangedEvent, SurveyCreatorModel } from \"survey-creator-core\";\n\nregisterColorPicker();\naddBackgroundColorProperty();\n\nexport function SurveyCreatorWidget () {\n  let [creator, setCreator] = useState<SurveyCreator>();\n\n  if (!creator) {\n    creator = new SurveyCreator();\n    setCreator(creator);\n  }\n\n  creator.onActiveTabChanged.add(handleActiveTabChange);\n  return <SurveyCreatorComponent creator={creator} />;\n}\n\nfunction addBackgroundColorProperty() {\n  Serializer.addProperty(\"survey\", {\n    name: \"backgroundColor\",\n    displayName: \"Background color\",\n    type: \"color\",\n    category: \"general\",\n    visibleIndex: 3,\n    onSetValue: (survey, value) => {\n      survey.setPropertyValue(\"backgroundColor\", value);\n      applyBackground(value);\n    }\n  });\n}\n\nfunction applyBackground(color) {\n  setTimeout(() => {\n    const surveyEl = document.getElementsByClassName(\"sd-root-modern\")[0] as HTMLElement;\n    if (!!surveyEl) {\n      surveyEl.style.setProperty(\"--background\", color);\n    }\n  }, 50);\n}\n\nfunction handleActiveTabChange(sender: SurveyCreatorModel, options: ActiveTabChangedEvent) {\n  if (options.tabName === \"preview\" || options.tabName === \"designer\") {\n    applyBackground(sender.survey.backgroundColor);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Full Survey Results in SurveyJS\nDESCRIPTION: Shows how to access complete survey results using the data property and output them to console.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/access-and-modify-survey-results.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model } from \"survey-core\";\n\nconst surveyJson = { ... };\nconst survey = new Model(surveyJson);\n\nconsole.log(survey.data);\n```\n\n----------------------------------------\n\nTITLE: Controlling Preview Page Visibility in SurveyJS\nDESCRIPTION: This snippet demonstrates how to programmatically show and hide the preview page, including error handling for validation issues.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-multi-page-survey.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst survey = new Survey.Model(surveyJson);\n\nconst previewShown = survey.showPreview();\nif (!previewShown) {\n    alert(\"Check the answers for validation errors\")\n}\n\nsurvey.cancelPreview();\n```\n\n----------------------------------------\n\nTITLE: Conditional Choice Visibility\nDESCRIPTION: Example showing how to make specific choices visible based on a condition.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  \"elements\": [{\n    \"name\": \"Contacts\"\n    \"choices\": [\n      \"Email\",\n      { \"value\": \"SMS\", \"visibleIf\": \"{phone} notempty\" },\n      { \"value\": \"WhatsApp\", \"visibleIf\": \"{phone} notempty\" }\n    ]\n  },\n  // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Quiz Start Page in SurveyJS\nDESCRIPTION: Creates a start page for the quiz with an introductory message and username input field. Includes configuration for the start button and its text.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-quiz.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  pages: [{\n    elements: [{\n      type: \"html\",\n      html: \"You are about to start a quiz on American history. <br>You will have 10 seconds for every question and 25 seconds to end the quiz.<br>Enter your name below and click <b>Start Quiz</b> to begin.\"\n    }, {\n      type: \"text\",\n      name: \"username\",\n      titleLocation: \"hidden\",\n      isRequired: true\n    }]\n  },\n  // ...\n  // Other quiz pages are configured here\n  // ...\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a SurveyJS Form in a Vue Component Template\nDESCRIPTION: Code snippet showing how to import and use the SurveyComponent from survey-vue3-ui to render a survey in a Vue template. The survey model is passed to the component's model attribute.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-vue.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\nimport { SurveyComponent } from 'survey-vue3-ui';\n// ...\n</script>\n\n<template>\n  <SurveyComponent :model=\"survey\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Color Picker Editor in Property Grid\nDESCRIPTION: Shows how to register a custom Color Picker component as an editor for properties of type 'color' in the Property Grid. The code sets up a custom type and defines how it should handle color-type properties.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-react.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// components/ColorPicker.tsx\n// ...\nimport { PropertyGridEditorCollection } from \"survey-creator-core\";\n\nconst CUSTOM_TYPE = \"color-picker\";\n// ...\nPropertyGridEditorCollection.register({\n  fit: function (prop) {\n    return prop.type === \"color\";\n  },\n  getJSON: function () {\n    return {\n      type: CUSTOM_TYPE,\n      colorPickerType: \"Compact\"\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Plain Data Results in SurveyJS\nDESCRIPTION: Demonstrates how to get survey results as an array of plain JavaScript objects using getPlainData() method.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/access-and-modify-survey-results.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(survey.getPlainData());\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Property Type in SurveyJS\nDESCRIPTION: Demonstrates how to register a custom property editor and add a custom property with a 'shorttext' type that limits input to 15 characters.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PropertyGridEditorCollection } from \"survey-creator-core\";\nimport { Serializer } from \"survey-core\";\n\nPropertyGridEditorCollection.register({\n  // Use this editor for properties with `type: \"shorttext\"`\n  fit: (prop) => {\n    return prop.type === \"shorttext\";\n  },\n  // Return a standard question JSON configuration for the property editor\n  // (a single-line input editor that is limited to 15 characters)\n  getJSON: (obj, prop, options) => {\n    return { type: \"text\", maxLength: 15 };\n  }\n});\n\n// Add a custom property that uses the \"shorttext\" editor\nSerializer.addProperty(\"question\", {\n  name: \"shortname\",\n  displayName: \"Short name\",\n  type: \"shorttext\",\n  category: \"general\",\n  visibleIndex: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Property to Existing Question Class in JavaScript\nDESCRIPTION: This snippet demonstrates how to add a custom numeric property to the base Question class, which will be inherited by all derived question classes. It uses the Serializer.addProperty method to define the property settings.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Serializer } from \"survey-core\";\n\nSerializer.addProperty(\"question\", {\n  name: \"customNumericProperty\",\n  type: \"number\",\n  category: \"general\",\n  default: 1,\n  visibleIndex: 0\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Survey Results in an Alert Dialog\nDESCRIPTION: Simple example of handling survey completion by displaying the results in an alert dialog. This demonstrates how to access the survey data after submission.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-vue.md#2025-04-18_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n// ...\nconst survey = new Model(surveyJson);\nsurvey.onComplete.add(alertResults);\n\nconst alertResults = (sender: any) => {\n  const results = JSON.stringify(sender.data);\n  alert(results);\n}\n</script>\n\n<template>\n  <!-- ... -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Locale Dictionary\nDESCRIPTION: Implementation of a custom locale dictionary with custom translations in TypeScript.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/survey-localization.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setupLocale } from 'survey-core';\n\nconst customLocaleStrings = {\n  pagePrevText: \"Back\",\n  pageNextText: \"Forward\",\n  completeText: \"Send\"\n};\n\nsetupLocale({\n  localeCode: \"customlocale\",   // A short code used as a locale identifier (for example, \"en\", \"de\", \"fr\")\n  strings: customLocaleStrings, // An array with custom translations\n  nativeName: \"Custom Locale\",  // The locale name in native language\n  englishName: \"Custom Locale\", // The locale name in English \n  rtl: false                    // A flag that indicates whether the language is right-to-left\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a New Property to Comment Questions in SurveyJS\nDESCRIPTION: This code snippet demonstrates how to add a new 'hasSearch' property to comment questions in SurveyJS. It also shows how to modify the widget to respect this new property.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-create-custom-widgets.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninit() {\n  Survey.Serializer.addProperty(\"comment\", {\n    name: \"hasSearch:switch\",\n    category: \"general\",\n  });\n},\nafterRender: function (question, el) {\n    if (!question.hasSearch) return;\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Property Enable/Disable\nDESCRIPTION: Shows how to conditionally enable/disable a property based on another property's value using enableIf.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Serializer } from \"survey-core\";\n\nSerializer.addProperty(\"text\", {\n  name: \"dateFormat\",\n  category: \"general\",\n  visibleIndex: 7,\n  enableIf: (obj) => {\n    return (\n      obj.inputType === \"date\" ||\n      obj.inputType === \"datetime\" ||\n      obj.inputType === \"datetime-local\"\n    );\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Property Values in JavaScript\nDESCRIPTION: This snippet shows how to override the default value of a property for a specific question type. It uses the Serializer.getProperty method to access the property and change its defaultValue setting.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Override the default value of the `eachRowRequired` property for Single-Select Matrix questions\nimport { Serializer } from \"survey-core\";\nSerializer.getProperty(\"matrix\", \"eachRowRequired\").defaultValue = true;\n```\n\n----------------------------------------\n\nTITLE: Implementing Angular Component for Color Picker Question\nDESCRIPTION: Creates an Angular component that extends QuestionAngular to render the custom color picker. The component handles color change events and updates the question's value with the selected color.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { Component } from \"@angular/core\";\nimport { QuestionAngular } from \"survey-angular-ui\";\nimport { ColorEvent } from 'ngx-color';\n\n@Component({\n  selector: \"color-picker\",\n  templateUrl: \"./color-picker.component.html\",\n  styleUrls: [ \"./color-picker.component.css\" ]\n})\nexport class ColorPickerComponent extends QuestionAngular<QuestionColorPickerModel> {\n  handleChange($event: ColorEvent) {\n    this.model.value = $event.color.hex;\n  }\n}\n\n// A custom question model configured earlier\nexport class QuestionColorPickerModel extends Question {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Quiz Timer Controls in SurveyJS\nDESCRIPTION: Demonstrates how to programmatically control the quiz timer using startTimer() and stopTimer() methods on the survey instance.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-quiz.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = { ... };\nconst survey = new Survey.Model(surveyJson);\n\nsurvey.startTimer();\nsurvey.stopTimer();\n```\n\n----------------------------------------\n\nTITLE: Numeric Expression Example in SurveyJS\nDESCRIPTION: This snippet demonstrates a numeric expression that calculates the sum of two question values (total1 and total2) using the sum function.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n\"expression\": \"sum({total1}, {total2})\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Preview Page in SurveyJS\nDESCRIPTION: This snippet demonstrates how to enable the preview page and set it to display only answered questions in a SurveyJS survey configuration.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-multi-page-survey.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n    showPreviewBeforeComplete: true,\n    previewMode: \"answeredQuestions\"\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Choices in SurveyJS\nDESCRIPTION: Demonstrates how to configure property choices both locally and through a web service call.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Serializer } from \"survey-core\";\n\n// Define `choices` locally\nSerializer.addProperty(\"question\", {\n  name: \"myStringProperty\",\n  choices: [ \"option1\", \"option2\", \"option3\" ],\n  // If item captions should be different from item values:\n  // choices: [\n  //   { value: \"option1\", text: \"Option 1\" },\n  //   { value: \"option2\", text: \"Option 2\" },\n  //   { value: \"option3\", text: \"Option 3\" },\n  // ],\n  default: \"option1\"\n});\n\n// Load `choices` from a web service\nSerializer.addProperty(\"survey\", {\n  name: \"country\",\n  category: \"general\",\n  choices: (obj, choicesCallback) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", \"https://surveyjs.io/api/CountriesExample\");\n    xhr.setRequestHeader( \"Content-Type\", \"application/x-www-form-urlencoded\");\n    xhr.onload = () => {\n      if (xhr.status === 200) {\n        const response = JSON.parse(xhr.response);\n        const result = [];\n        // Make the property nullable\n        result.push({ value: null });\n        // Web service returns objects that are converted to the `{ value, text }` format\n        // If your web service returns an array of strings, pass this array to `choicesCallback`\n        response.forEach(item => {\n          result.push({ value: item.cioc, text: item.name });\n        });\n        choicesCallback(result);\n      }\n    };\n    xhr.send();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Values for Localizable Properties in JavaScript\nDESCRIPTION: This code demonstrates how to override default values for localizable properties using SurveyJS localization capabilities. It changes the text for navigation buttons and the complete button.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getLocaleStrings } from \"survey-core\";\n\nconst engLocale = getLocaleStrings(\"en\");\nengLocale.pagePrevText = \"Back\";\nengLocale.pageNextText = \"Forward\";\nengLocale.completeText = \"Send\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Overriding Properties in SurveyJS\nDESCRIPTION: This example shows how to set up an overriding property relationship where one property can override another. When specified, the Property Grid disables the dependent property and shows a link to the master property.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Serializer } from \"survey-core\";\n\nSerializer.addProperty(\"question\", \n  { name: \"myMasterProperty\", type: \"condition\" }\n  { name: \"myDependentProperty\", type: \"boolean\", overridingProperty: \"myMasterProperty\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering SurveyJS in HTML and JavaScript\nDESCRIPTION: This snippet shows how to render the survey in HTML and JavaScript. It adds a container div in the HTML body and uses the survey.render() method to display the survey in the container.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-html-css-javascript.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <div id=\"surveyContainer\"></div>\n</body>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst survey = new Survey.Model(surveyJson);\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    survey.render(document.getElementById(\"surveyContainer\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Question Type to ComponentCollection in JavaScript\nDESCRIPTION: This code adds a custom 'country' question type to the survey's ComponentCollection, providing a more reusable and maintainable solution for country selection.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-create-specialized-question-types.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ComponentCollection } from \"survey-core\";\n\nComponentCollection.Instance.add({\n  // A unique name; must use lowercase\n  name: \"country\", \n  // A display name used in the Toolbox\n  title: \"Country\", \n  // A default title for questions created with this question type\n  defaultQuestionTitle: \"Country\",\n  // A JSON schema for the base question type (Dropdown in this case)\n  questionJSON: {\n    \"type\": \"dropdown\",\n    \"placeholder\": \"Select a country...\",\n    \"choicesByUrl\": {\n      \"url\": \"https://surveyjs.io/api/CountriesExample\",\n    }\n  },\n  // Inherit all or individual properties from the base question type\n  inheritBaseProps: true // or [ \"allowClear\" ]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Color Picker Question Model for SurveyJS\nDESCRIPTION: Implements a custom question model by extending the base Question class from survey-core. The model defines custom properties for the color picker type and alpha channel settings.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { Question } from \"survey-core\";\n\nconst CUSTOM_TYPE = \"color-picker\";\n\nexport class QuestionColorPickerModel extends Question {\n  getType() {\n    return CUSTOM_TYPE;\n  }\n  get colorPickerType() {\n    return this.getPropertyValue(\"colorPickerType\");\n  }\n  set colorPickerType(val) {\n    this.setPropertyValue(\"colorPickerType\", val);\n  }\n\n  get disableAlpha() {\n    return this.getPropertyValue(\"disableAlpha\");\n  }\n  set disableAlpha(val) {\n    this.setPropertyValue(\"disableAlpha\", val);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Function\nDESCRIPTION: Shows how to implement a custom function that accepts array of parameters and returns a value.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myFunc(params) {\n  let q1_value = params[0];\n  let q2_value = params[1];\n  // ...\n  return someValue;\n}\n```\n\n----------------------------------------\n\nTITLE: Summing Numbers in TypeScript\nDESCRIPTION: Returns the sum of passed numbers. This function is useful for total calculations in surveys.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nsum(param1: number, param2: number, ...): number\n```\n\n----------------------------------------\n\nTITLE: Setting Value Expression with DisplayValue Function\nDESCRIPTION: Example showing how to use the displayValue function within a setValueExpression and configure setValueIf to trigger reevaluation.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n\"setValueExpression\": \"displayValue('my-dropdown-question')\",\n\"setValueIf\": \"{my-dropdown-question} notempty\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Numeric Validator to a Question in SurveyJS\nDESCRIPTION: This snippet demonstrates how to programmatically add a NumericValidator to a question, including setting a custom error message.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/data-validation.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model, NumericValidator } from \"survey-core\";\n\nconst surveyJson = { ... }\nconst survey = new Model(surveyJson);\nconst question = survey.getQuestionByName(\"question1\")\nquestion.validators.push(new NumericValidator({ text: \"Value must be a number\" }));\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Color Property to Survey in TypeScript\nDESCRIPTION: This snippet demonstrates how to add a custom 'backgroundColor' property to the survey. It includes logic to apply the selected background color and handle changes when switching between Designer and Preview tabs in the Survey Creator.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from \"@angular/core\";\nimport { SurveyCreatorModel } from \"survey-creator-core\";\nimport { Serializer, SurveyModel } from \"survey-core\";\n\nfunction applyBackground(color) {\n  setTimeout(() => {\n    const surveyEl = document.getElementsByClassName(\"sd-root-modern\")[0] as HTMLElement;\n    if (!!surveyEl) {\n      surveyEl.style.setProperty(\"--background\", color);\n    }\n  }, 50);\n};\n\nfunction handleActiveTabChange(sender, options) {\n  if (options.tabName === \"preview\" || options.tabName === \"designer\") {\n    applyBackground(sender.survey.backgroundColor);\n  }\n};\n\n@Component({\n  selector: \"survey-creator-component\",\n  templateUrl: \"./survey-creator.component.html\",\n  styleUrls: [\"./survey-creator.component.css\"]\n})\nexport class SurveyCreatorComponent implements OnInit {\n  surveyCreatorModel!: SurveyCreatorModel;\n  ngOnInit() {\n    const creator = new SurveyCreatorModel();\n      \n    Serializer.addProperty(\"survey\", {\n      name: \"backgroundColor\",\n      displayName: \"Background color\",\n      type: \"color\",\n      category: \"general\",\n      visibleIndex: 3,\n      onSetValue: (survey: SurveyModel, value) => {\n        survey.setPropertyValue(\"backgroundColor\", value);\n        applyBackground(value);\n      }\n    });\n      \n    creator.onActiveTabChanged.add(handleActiveTabChange);      \n    this.surveyCreatorModel = creator;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Question Type in ElementFactory\nDESCRIPTION: Registers the custom color picker model with SurveyJS's ElementFactory to make it available for use in surveys. This connects the question type name with the model constructor.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { ElementFactory } from \"survey-core\";\n\nconst CUSTOM_TYPE = \"color-picker\";\n\nElementFactory.Instance.registerElement(\n  CUSTOM_TYPE,\n  (name) => {\n    return new QuestionColorPickerModel(name);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Theme in JavaScript\nDESCRIPTION: Demonstrates how to apply a custom theme created using the Theme Editor in a JavaScript application with SurveyJS.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/manage-default-themes-and-styles.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model } from \"survey-core\";\nconst surveyJson = { ... };\nconst survey = new Model(surveyJson);\n\nsurvey.applyTheme({\n  \"cssVariables\": {\n      // ...\n  },\n  \"themeName\": \"doubleborder\",\n  \"colorPalette\": \"dark\",\n  \"isPanelless\": true\n});\n```\n\n----------------------------------------\n\nTITLE: Adding or Subtracting Time from Date in TypeScript\nDESCRIPTION: Adds or subtracts a specified number of days, months, or years to or from a date value. Useful for date calculations in surveys.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\ndateAdd(date: any, numberToAdd: number, interval: \"days\" | \"months\" | \"years\"): Date\n```\n\n----------------------------------------\n\nTITLE: Localizing Composite Questions in SurveyJS\nDESCRIPTION: Shows how to implement multi-language support for composite questions with translations for English (default), French, and German.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-create-composite-question-types.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ComponentCollection } from \"survey-core\";\n\nComponentCollection.Instance.add({\n  name: \"fullname\", \n  title: {\n    \"default\": \"Full Name\",\n    \"fr\": \"Nom et prénom\",\n    \"de\": \"Vollständiger Name\"\n  },\n  defaultQuestionTitle: {\n    \"default\": \"Enter your full name:\",\n    \"fr\": \"Entrez votre nom complet:\",\n    \"de\": \"Geben Sie Ihren vollständigen Namen ein:\"\n  },\n  elementsJSON: [\n    {\n      type: \"text\",\n      name: \"firstName\",\n      title: {\n        \"default\": \"First Name\",\n        \"fr\": \"Prénom\",\n        \"de\": \"Vorname\"\n      },\n      isRequired: true\n    },\n    {\n      type: \"text\",\n      name: \"lastName\",\n      title: {\n        \"default\": \"Last Name\",\n        \"fr\": \"Nom de famille\",\n        \"de\": \"Nachname\"\n      },\n      isRequired: true,\n      startWithNewLine: false\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Survey Creator Component Implementation in TypeScript\nDESCRIPTION: This component initializes the SurveyCreatorModel, adds a custom backgroundColor property to the survey, and sets up event handling for applying the background color. It also defines a sample survey JSON with a color-picker question.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from \"@angular/core\";\nimport { SurveyCreatorModel } from \"survey-creator-core\";\nimport { Serializer, SurveyModel } from \"survey-core\";\n\nfunction applyBackground(color) {\n  setTimeout(() => {\n    const surveyEl = document.getElementsByClassName(\"sd-root-modern\")[0] as HTMLElement;\n    if (!!surveyEl) {\n      surveyEl.style.setProperty(\"--background\", color);\n    }\n  }, 50);\n};\n\nfunction handleActiveTabChange(sender, options) {\n  if (options.tabName === \"preview\" || options.tabName === \"designer\") {\n    applyBackground(sender.survey.backgroundColor);\n  }\n};\n\nconst surveyJson = {\n  elements: [{\n    type: \"color-picker\",\n    name: \"question1\",\n    title: \"Pick a color\",\n    colorPickerType: \"Sketch\"\n  }]\n};\n\n@Component({\n  selector: \"survey-creator-component\",\n  templateUrl: \"./survey-creator.component.html\",\n  styleUrls: [\"./survey-creator.component.css\"]\n})\nexport class SurveyCreatorComponent implements OnInit {\n  surveyCreatorModel!: SurveyCreatorModel;\n  ngOnInit() {\n    const creator = new SurveyCreatorModel();\n      \n    Serializer.addProperty(\"survey\", {\n      name: \"backgroundColor\",\n      displayName: \"Background color\",\n      type: \"color\",\n      category: \"general\",\n      visibleIndex: 3,\n      onSetValue: (survey: SurveyModel, value) => {\n        survey.setPropertyValue(\"backgroundColor\", value);\n        applyBackground(value);\n      }\n    });\n      \n    creator.onActiveTabChanged.add(handleActiveTabChange);\n    creator.JSON = surveyJson;\n      \n    this.surveyCreatorModel = creator;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Question Model for Color Picker\nDESCRIPTION: Defines a custom question model (QuestionColorPickerModel) for the color picker component, extending the base Question class and adding custom properties.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-vue.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\nimport { Question } from \"survey-core\";\n\nconst CUSTOM_TYPE = \"color-picker\";\n\nexport class QuestionColorPickerModel extends Question {\n  getType() {\n    return CUSTOM_TYPE;\n  }\n\n  get colorPickerType(): string {\n    return this.getPropertyValue(\"colorPickerType\");\n  }\n  set colorPickerType(val) {\n    this.setPropertyValue(\"colorPickerType\", val);\n  }\n  get isSlider(): boolean {\n    return this.colorPickerType === \"Slider\";\n  }\n  get isSketch(): boolean {\n    return this.colorPickerType === \"Sketch\";\n  }\n  get isColorCompact(): boolean {\n    return this.colorPickerType === \"Compact\";\n  }\n\n  get disableAlpha(): boolean {\n    return this.getPropertyValue(\"disableAlpha\");\n  }\n  set disableAlpha(val) {\n    this.setPropertyValue(\"disableAlpha\", val);\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Item Collection Property in JavaScript\nDESCRIPTION: This snippet illustrates how to define a custom item collection property in a new class. It includes calling createItemValues in the constructor for reactivity and localization support, and configuring the property serialization.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Question, ElementFactory } from \"survey-core\";\n\nexport class MyCustomClass extends Question {\n   constructor() {\n    super();\n    this.createItemValues(\"myItemCollectionProperty\");\n  }\n  getType() {\n    return \"my-custom-class\";\n  }\n  get myItemCollectionProperty() {\n    return this.getPropertyValue(\"myItemCollectionProperty\");\n  }\n  set itemCollectionProperty(val) {\n    this.setPropertyValue(\"myItemCollectionProperty\", val);\n  }\n}\n\nElementFactory.Instance.registerElement(\"my-custom-class\", (name) => {\n  return new MyCustomClass(name);\n});\n\nSerializer.addClass(\n  \"my-custom-class\",\n  [{\n    name: \"myItemCollectionProperty\",\n    type: \"itemvalues\",\n    category: \"general\",\n    visibleIndex: 3\n  }],\n  function () {\n    return new MyCustomClass(\"\");\n  },\n  \"question\"\n);\n```\n\n----------------------------------------\n\nTITLE: Switching Between Themes in Modular JavaScript\nDESCRIPTION: Illustrates how to import multiple themes (Contrast Dark and Contrast Light) and switch between them in a modular JavaScript application using SurveyJS.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/manage-default-themes-and-styles.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model } from \"survey-core\";\nimport { ContrastDark } from \"survey-core/themes\";\nimport { ContrastLight } from \"survey-core/themes\";\n\nconst surveyJson = { ... };\nconst survey = new Model(surveyJson);\nsurvey.applyTheme(ContrastLight);\n```\n\n----------------------------------------\n\nTITLE: Calculating Average in Array in TypeScript\nDESCRIPTION: Returns the average of numbers from a specified data field in an array response, with optional filtering. Essential for mean calculations in matrix or panel questions.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\navgInArray(question: expression, dataFieldName: string, filter?: expression): number\n```\n\n----------------------------------------\n\nTITLE: Implementing Survey Creator Component\nDESCRIPTION: React component that initializes Survey Creator and registers the color picker\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-react.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { useState } from \"react\";\nimport { SurveyCreator, SurveyCreatorComponent } from \"survey-creator-react\";\nimport { registerColorPicker } from \"./ColorPicker\";\nimport \"survey-core/survey-core.css\";\nimport \"survey-creator-core/survey-creator-core.css\";\n\nregisterColorPicker();\n\nexport function SurveyCreatorWidget () {\n  let [creator, setCreator] = useState<SurveyCreator>();\n\n  if (!creator) {\n    creator = new SurveyCreator();\n    setCreator(creator);\n  }\n  return <SurveyCreatorComponent creator={creator} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import of SurveyJS Component in Next.js\nDESCRIPTION: This snippet demonstrates how to dynamically import the SurveyJS component in a Next.js page to disable server-side rendering for the survey.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-react.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// survey/page.tsx\nimport dynamic from 'next/dynamic';\n\nconst SurveyComponent = dynamic(() => import(\"@/components/Survey\"), {\n  ssr: false\n});\n\nexport default function Survey() {\n  return (\n    <SurveyComponent />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Questions in Survey JSON\nDESCRIPTION: This snippet demonstrates how to specify default values for questions in the survey JSON configuration. The defaultValue will be used until a proper value is specified by a user or programmatically.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-pre-populate-form-fields.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  \"elements\": [{\n    \"name\": \"subscribed\",\n    \"type\": \"checkbox\",\n    \"title\": \"I agree to receive weekly newsletters\",\n    \"defaultValue\": true\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Between Themes in Classic HTML/JavaScript\nDESCRIPTION: Shows how to reference multiple themes (Contrast Dark and Contrast Light) and switch between them in a classic HTML/JavaScript application using SurveyJS.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/manage-default-themes-and-styles.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <!-- ... -->\n    <link href=\"https://unpkg.com/survey-core/survey-core.min.css\" type=\"text/css\" rel=\"stylesheet\">\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/survey.core.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/contrast-dark.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/contrast-light.min.js\"></script>\n    <!-- ... -->\n</head>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = { ... };\nconst survey = new Survey.Model(surveyJson);\nsurvey.applyTheme(SurveyTheme.ContrastLight);\n```\n\n----------------------------------------\n\nTITLE: Customizing Question Number Format in SurveyJS\nDESCRIPTION: Shows how to customize the starting index and format of question numbers using the questionStartIndex property. Supports numeric, alphabetic, and custom formats with prefixes/postfixes.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-configure-question-titles.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  // ...\n  \"questionStartIndex\": \"a.\", // a., b., c., ...\n  \"questionStartIndex\": \"#3\", // #3, #4, #5, ...\n  \"questionStartIndex\": \"(B).\" // (B)., (C)., (D)., ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Function\nDESCRIPTION: Example of registering a custom function with the FunctionFactory.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FunctionFactory } from \"survey-core\";\n\nFunctionFactory.Instance.register(\"myFunc\", myFunc);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Color Picker Question Model\nDESCRIPTION: Defines a custom question model class extending SurveyJS Question with color picker specific properties\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-react.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { Question } from \"survey-core\";\n\nconst CUSTOM_TYPE = \"color-picker\";\n\nexport class QuestionColorPickerModel extends Question {\n  getType() {\n    return CUSTOM_TYPE;\n  }\n  get colorPickerType() {\n    return this.getPropertyValue(\"colorPickerType\");\n  }\n  set colorPickerType(val) {\n    this.setPropertyValue(\"colorPickerType\", val);\n  }\n\n  get disableAlpha() {\n    return this.getPropertyValue(\"disableAlpha\");\n  }\n  set disableAlpha(val) {\n    this.setPropertyValue(\"disableAlpha\", val);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Property Choices from Web Service with Dependencies in SurveyJS\nDESCRIPTION: This code shows how to load choices for a property from a web service based on the value of another property. When the region property changes, the country property reloads its choices from an API endpoint.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Serializer } from \"survey-core\";\n\nSerializer.addProperty(\"survey\", {\n  name: \"region\",\n  category: \"Region\",\n  categoryIndex: 1,\n  choices: [\"Africa\", \"Americas\", \"Asia\", \"Europe\", \"Oceania\"],\n});\n\nSerializer.addProperty(\"survey\", {\n  name: \"country\",\n  category: \"Region\",\n  dependsOn: [ \"region\" ],\n  choices: (obj, choicesCallback) => {\n    const xhr = new XMLHttpRequest();\n    const url =\n      !!obj && !!obj.region\n        ? \"https://surveyjs.io/api/CountriesExample?region=\" + obj.region\n        : \"https://surveyjs.io/api/CountriesExample\";\n    xhr.open(\"GET\", url);\n    xhr.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");\n    xhr.onload = () => {\n      if (xhr.status === 200) {\n        const response = JSON.parse(xhr.response);\n        const result = [];\n        // Make the property nullable\n        result.push({ value: null });\n        response.forEach(item => {\n          result.push({ value: item.cioc, text: item.name });\n        });\n        choicesCallback(result);\n      }\n    };\n    xhr.send();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Age Function Implementation\nDESCRIPTION: Implementation of built-in age function that calculates age from birthdate.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FunctionFactory } from \"survey-core\";\n\n// Accepts a birthdate and returns the current age in full years\nfunction age(params: any[]): any {\n  if (!params && params.length < 1) return null;\n  if (!params[0]) return null;\n  var birthDate = new Date(params[0]);\n  var today = new Date();\n  var age = today.getFullYear() - birthDate.getFullYear();\n  var m = today.getMonth() - birthDate.getMonth();\n  if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n    age -= age > 0 ? 1 : 0;\n  }\n  return age;\n}\n// Register the `age` function under the `age` alias\nFunctionFactory.Instance.register(\"age\", age);\n```\n\n----------------------------------------\n\nTITLE: Setting Complete Page Content in SurveyJS\nDESCRIPTION: Demonstrates how to set custom completion message using the completedHtml property.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-multi-page-survey.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n    completedHtml: \"Thank you for your feedback!\",\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Survey Completion in JavaScript\nDESCRIPTION: This snippet demonstrates how to handle survey completion. It defines a function to alert the survey results and adds it to the survey's onComplete event.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-html-css-javascript.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction alertResults (sender) {\n    const results = JSON.stringify(sender.data);\n    alert(results);\n}\n\nconst survey = new Survey.Model(surveyJson);\n\nsurvey.onComplete.add(alertResults);\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Visibility with Dependencies in SurveyJS\nDESCRIPTION: Demonstrates how to configure property visibility based on dependencies using visibleIf and dependsOn settings. The example shows how to make the dateFormat property visible only when inputType is a date-related value.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Serializer } from \"survey-core\";\n\nSerializer.addProperty(\"text\", {\n  name: \"dateFormat\",\n  category: \"general\",\n  visibleIndex: 7,\n  dependsOn: [\"inputType\"],\n  visibleIf: (obj) => {\n    return (\n      obj.inputType === \"date\" ||\n      obj.inputType === \"datetime\" ||\n      obj.inputType === \"datetime-local\"\n    );\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Color Picker Model\nDESCRIPTION: Function to register the custom color picker model with ElementFactory\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-react.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport function registerColorPicker() {\n  ElementFactory.Instance.registerElement(\n    CUSTOM_TYPE,\n    (name) => {\n      return new QuestionColorPickerModel(name);\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Predefined Theme in Modular JavaScript\nDESCRIPTION: Demonstrates how to import and apply a predefined theme (Layered Dark Panelless) in a modular JavaScript application using SurveyJS.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/manage-default-themes-and-styles.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model } from \"survey-core\";\n/*\n  Don't forget to import or reference the `survey-core.css` style sheet\n  as described in the Get Started with SurveyJS article for your framework\n*/\nimport { LayeredDarkPanelless } from \"survey-core/themes\";\n\nconst surveyJson = { ... };\nconst survey = new Model(surveyJson);\nsurvey.applyTheme(LayeredDarkPanelless);\n```\n\n----------------------------------------\n\nTITLE: Saving Variable in Survey Results via Calculated Value in JavaScript\nDESCRIPTION: This snippet demonstrates how to save a variable value in survey results by creating an intermediary calculated value that references the variable. It shows the configuration of a survey JSON schema and the initialization of the survey model.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model } from \"survey-core\";\n\nconst surveyJson = {\n  \"elements\": [{\n    \"name\": \"footer\",\n    \"type\": \"html\",\n    \"html\": \"&copy; 2015-{currentyear} Devsoft Baltic OÜ\"\n  }],\n  \"calculatedValues\": [{\n    \"name\": \"currentyear\",\n    \"expression\": \"{currentyear-var}\",\n    \"includeIntoResult\": true\n  }]\n};\n\nconst survey = new Model(surveyJson);\n\nsurvey.setVariable(\"currentyear-var\", new Date().getFullYear());\n```\n\n----------------------------------------\n\nTITLE: Enabling Start Page Features in SurveyJS\nDESCRIPTION: Shows how to enable the start page functionality and customize the start button text using firstPageIsStartPage and startSurveyText properties.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-multi-page-survey.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n    firstPageIsStartPage: true,\n    startSurveyText: \"Take the Survey\",\n};\n```\n\n----------------------------------------\n\nTITLE: Linking SurveyJS Resources in HTML\nDESCRIPTION: This snippet shows how to include the necessary SurveyJS CSS and JavaScript files in the HTML head section. It links the core CSS, core JavaScript, and UI JavaScript files from the unpkg CDN.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-html-css-javascript.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <!-- ... -->\n    <link href=\"https://unpkg.com/survey-core/survey-core.min.css\" type=\"text/css\" rel=\"stylesheet\">\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/survey.core.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-js-ui/survey-js-ui.min.js\"></script>\n    <!-- ... -->\n</head>\n```\n\n----------------------------------------\n\nTITLE: Complete Code for Creating a SurveyJS Model in Vue\nDESCRIPTION: Full code example showing how to import the stylesheet and create a SurveyJS model from a JSON schema in a Vue component setup function.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-vue.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\nimport 'survey-core/survey-core.css';\nimport { Model } from 'survey-core';\n\nconst surveyJson = {\n  elements: [{\n    name: \"FirstName\",\n    title: \"Enter your first name:\",\n    type: \"text\"\n  }, {\n    name: \"LastName\",\n    title: \"Enter your last name:\",\n    type: \"text\"\n  }]\n};\n\nconst survey = new Model(surveyJson);\n</script>\n\n<template>\n  <!-- ... -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Overriding Locale Strings\nDESCRIPTION: Example of retrieving and modifying translation strings for a specific locale.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/survey-localization.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getLocaleStrings } from 'survey-core';\n\n// Get the English locale. To get the default locale, pass an empty string.\nconst engLocale = getLocaleStrings(\"en\");\n// Override individual translations\nengLocale.pagePrevText = \"Back\";\nengLocale.pageNextText = \"Forward\";\n```\n\n----------------------------------------\n\nTITLE: Setting Survey Locale\nDESCRIPTION: Example of initializing a survey model and setting its locale to French.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/survey-localization.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model } from \"survey-core\";\nimport \"survey-core/i18n/french\";\nconst surveyJson = { ... };\nconst survey = new Model(surveyJson);\n\nsurvey.locale = \"fr\";\n```\n\n----------------------------------------\n\nTITLE: Getting All Variable Names in SurveyJS\nDESCRIPTION: This code shows how to retrieve a list of all available variables in a SurveyJS form using the getVariableNames() method. It returns an array of variable names.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(survey.getVariableNames()); // Outputs [ \"currentyear\" ]\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Question Model in ElementFactory\nDESCRIPTION: Registers the custom QuestionColorPickerModel in the ElementFactory for use in SurveyJS.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-vue.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\nimport { ..., ElementFactory } from \"survey-core\";\n\n// ...\n\nElementFactory.Instance.registerElement(\n  CUSTOM_TYPE,\n  (name: string) => {\n    return new QuestionColorPickerModel(name);\n  }\n);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Hiding Custom Component from Toolbox in SurveyJS\nDESCRIPTION: This snippet demonstrates how to register a custom component model while hiding it from the Toolbox and Add Question menu in SurveyJS. This is useful when the component is intended to be used only as a property editor.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-vue.md#2025-04-18_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!-- src/components/ColorPicker.vue -->\n<script lang=\"ts\">\nimport { ..., ElementFactory } from \"survey-core\";\n\n// ...\n\nElementFactory.Instance.registerElement(\n  CUSTOM_TYPE,\n  (name: string) => {\n    return new QuestionColorPickerModel(name);\n  },\n  false\n);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Component in AngularComponentFactory\nDESCRIPTION: Registers the ColorPickerComponent with SurveyJS's AngularComponentFactory to associate it with the custom question type. This enables SurveyJS to render the component when a color-picker question is encountered.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { ..., AngularComponentFactory } from \"survey-angular-ui\";\n\nAngularComponentFactory.Instance.registerComponent(CUSTOM_TYPE + \"-question\", ColorPickerComponent);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Component as Property Grid Editor in Vue\nDESCRIPTION: This snippet shows how to register a Color Picker component as an editor for properties of the 'color' type in the SurveyJS Property Grid. It uses the PropertyGridEditorCollection to define how the editor should be applied.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-vue.md#2025-04-18_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- src/components/ColorPicker.vue -->\n<script lang=\"ts\">\nimport { ..., PropertyGridEditorCollection } from \"survey-creator-core\";\n\nconst CUSTOM_TYPE = \"color-picker\";\n// ...\n\nPropertyGridEditorCollection.register({\n  fit: function (prop) {\n    return prop.type === \"color\";\n  },\n  getJSON: function () {\n    return {\n      type: CUSTOM_TYPE,\n      colorPickerType: \"Compact\"\n    };\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Start Page in SurveyJS\nDESCRIPTION: Demonstrates how to set up a start page with HTML content in a survey. The start page serves as an introduction and doesn't affect survey progress.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-multi-page-survey.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n    pages: [{\n        elements: [{\n            type: \"html\",\n            html: \"<h2>In this survey, we will ask you a couple questions about your impressions of our product.</h2>\"\n        }]\n    },\n    // ...\n    // Other pages are configured here\n    // ...\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Allowing Page Switching with Validation Errors in SurveyJS\nDESCRIPTION: This snippet shows how to enable switching between pages with validation errors by setting the validationAllowSwitchPages property to true on the survey model.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/data-validation.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model, NumericValidator } from \"survey-core\";\n\nconst surveyJson = { ... }\nconst survey = new Model(surveyJson);\nsurvey.validationAllowSwitchPages = true;\n```\n\n----------------------------------------\n\nTITLE: Rendering Third-Party Vue 3 Color Component\nDESCRIPTION: Implements the template for rendering different color pickers from the Vue 3 Color library based on the question model properties.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-vue.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\nimport { Sketch, Compact, Slider } from \"@lk77/vue3-color\";\n// ...\n// The model configured earlier goes here\n// ...\n</script>\n<script setup lang=\"ts\">\ndefineOptions({ inheritAttrs: false });\nconst props = defineProps<{ question: QuestionColorPickerModel }>();\n\nfunction updateValue(val: any) {\n  const hex: string = val.hex;\n  if (hex) {\n    props.question.value = hex.toLowerCase();\n  }\n}\n</script>\n<template>\n  <Slider\n    v-if=\"props.question.isSlider\"\n    :modelValue=\"props.question.value\"\n    @update:modelValue=\"updateValue\"\n  />\n  <Sketch\n    v-if=\"props.question.isSketch\"\n    :modelValue=\"props.question.value\"\n    @update:modelValue=\"updateValue\"\n  />\n  <Compact\n    v-if=\"props.question.isColorCompact\"\n    :modelValue=\"props.question.value\"\n    @update:modelValue=\"updateValue\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Specifying Captions for Custom Question Type in SurveyJS\nDESCRIPTION: This snippet demonstrates how to use the localization engine to specify custom captions for a color picker question type and its properties in SurveyJS.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getLocaleStrings } from \"survey-creator-core\";\n\nconst CUSTOM_TYPE = \"color-picker\";\n\nconst locale = getLocaleStrings(\"en\");\nlocale.qt[CUSTOM_TYPE] = \"Color Picker\";\nlocale.pe.colorPickerType = \"Color picker type\";\nlocale.pe.disableAlpha = \"Disable alpha channel\";\n```\n\n----------------------------------------\n\nTITLE: Registering SurveyJS Vue Plugin Globally\nDESCRIPTION: Code for registering the SurveyJS Vue plugin globally in a Vue application's main.ts file. This allows you to use the SurveyComponent without importing it in each Vue component.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-vue.md#2025-04-18_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// main.ts\nimport { createApp } from 'vue'\nimport { surveyPlugin } from 'survey-vue3-ui'\nimport App from './App.vue'\n\ncreateApp(App).use(surveyPlugin).mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value in TypeScript\nDESCRIPTION: Returns the minimum of passed numbers. Useful for finding the lowest value among multiple survey responses.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nmin(par1: number, par2: number, ...): number\n```\n\n----------------------------------------\n\nTITLE: Accessing Start Page in SurveyJS\nDESCRIPTION: Shows how to programmatically access the start page using the startPage property of the survey model.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-multi-page-survey.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst survey = new Survey.Model(surveyJson);\n\nconst startPage = survey.startPage;\n```\n\n----------------------------------------\n\nTITLE: Calculating Average in TypeScript\nDESCRIPTION: Returns the average of passed numbers. This function is essential for calculating mean values in surveys.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\navg(par1: number, par2: number, ...): number\n```\n\n----------------------------------------\n\nTITLE: Hiding Custom Component from Toolbox in JavaScript\nDESCRIPTION: This code snippet shows how to hide a custom component from the Toolbox and Add Question menu in the Survey Creator. It's useful when you want to use the component only as a property editor.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ElementFactory } from \"survey-core\";\n\nconst CUSTOM_TYPE = \"color-picker\";\n\nElementFactory.Instance.registerElement(\n  CUSTOM_TYPE,\n  (name) => {\n    return new QuestionColorPickerModel(name);\n  },\n  false\n);\n```\n\n----------------------------------------\n\nTITLE: Async Function Implementation\nDESCRIPTION: Example of implementing an asynchronous custom function that returns result via callback.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nfunction asyncFunc(params: any[]): any {\n  setTimeout(() => {\n    // Return the function result via the callback\n    this.returnResult(yourValue);\n  }, 100);\n}\n```\n\n----------------------------------------\n\nTITLE: Vue.js Survey Integration\nDESCRIPTION: Demonstrates how to implement SurveyJS in a Vue.js application using composition API, showing both inline and popup survey implementations.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-simple-survey.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Model } from 'survey-core';\nimport { SurveyComponent, PopupSurveyComponent } from \"survey-vue3-ui\";\n\nconst surveyJson = {\n  // ...\n};\nconst survey = new Model(surveyJson);\n</script>\n\n<template>\n  <!-- Render the survey inside the page -->\n  <SurveyComponent :model=\"survey\" />\n\n  <!-- Render the survey in a pop-up window -->\n  <PopupSurveyComponent :model=\"survey\" :isExpanded=\"true\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Survey Model in React\nDESCRIPTION: Defines a simple survey model with two text questions using JSON schema and instantiates a Survey.JS Model.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-react.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Model } from 'survey-core';\n\nconst surveyJson = {\n  elements: [{\n    name: \"FirstName\",\n    title: \"Enter your first name:\",\n    type: \"text\"\n  }, {\n    name: \"LastName\",\n    title: \"Enter your last name:\",\n    type: \"text\"\n  }]\n};\n\nexport default function SurveyComponent() {\n  const survey = new Model(surveyJson);\n\n  return \"...\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Serialization for Custom Question\nDESCRIPTION: Sets up JSON serialization for the custom color picker question, including property definitions and visibility conditions.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-vue.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\nimport { ..., Serializer } from \"survey-core\";\n\n// ...\n\nSerializer.addClass(\n  CUSTOM_TYPE,\n  [{\n    name: \"colorPickerType\",\n    default: \"Slider\",\n    choices: [\"Slider\", \"Sketch\", \"Compact\"],\n    category: \"general\",\n    visibleIndex: 2 // Place after the Name and Title\n  }, {\n    name: \"disableAlpha:boolean\",\n    dependsOn: \"colorPickerType\",\n    visibleIf: function (obj: QuestionColorPickerModel) {\n      return obj.colorPickerType === \"Sketch\";\n    },\n    category: \"general\",\n    visibleIndex: 3 // Place after the Name, Title, and Color Picker Type\n  }],\n  function () {\n    return new QuestionColorPickerModel(\"\");\n  },\n  \"question\"\n);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Formatting Bug Fixes in Markdown\nDESCRIPTION: Demonstrates how bug fixes are documented in the changelog using Markdown bullet points and links.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- displayValue property doesn't work correctly for components (single and composite) [#2678](https://github.com/surveyjs/survey-library/issues/2678) ([fb43a3a](https://github.com/surveyjs/survey-library/commit/fb43a3a2fc6675a1ac97c8e132a6600aacc2a46c))\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Picker React Component\nDESCRIPTION: Custom React component that renders different types of color pickers based on configuration\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-react.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport class SurveyQuestionColorPicker extends SurveyQuestionElementBase {\n  constructor(props) {\n    super(props);\n    this.state = { value: this.question.value };\n  }\n  get question() {\n    return this.questionBase;\n  }\n  get value() {\n    return this.question.value;\n  }\n  get disableAlpha() {\n    return this.question.disableAlpha;\n  }\n  get type() {\n    return this.question.colorPickerType;\n  }\n  handleColorChange = (data) => {\n    this.question.value = data.hex;\n  };\n\n  get style(): CSSProperties {\n    return this.question.getPropertyValue(\"readOnly\")\n      || this.question.isDesignMode ? { pointerEvents: \"none\" } : {};\n  }\n\n  renderColorPicker(type) {\n    switch (type) {\n      case \"Slider\": {\n        return (\n          <SliderPicker color={this.value} onChange={this.handleColorChange} />\n        );\n      }\n      case \"Sketch\": {\n        return (\n          <SketchPicker color={this.value} onChange={this.handleColorChange} disableAlpha={this.disableAlpha} />\n        );\n      }\n      case \"Compact\": {\n        return (\n          <CompactPicker color={this.value} onChange={this.handleColorChange} />\n        );\n      }\n      default:\n        return <div>Unknown type</div>;\n    }\n  }\n\n  renderElement() {\n    return (\n      <div style={this.style}>\n        {this.renderColorPicker(this.type)}\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Icon for Color Picker Question Type in SurveyJS\nDESCRIPTION: This snippet demonstrates how to register a custom SVG icon for the color picker question type in SurveyJS. It also shows an alternative method using built-in icons.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ..., SvgRegistry } from \"survey-core\"\n\nconst CUSTOM_TYPE = \"color-picker\";\n\nSvgRegistry.registerIcon(\n  CUSTOM_TYPE,\n  '<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"...\" /></svg>'\n);\n\n// Alternative method using built-in icons\nimport { ..., settings } from \"survey-core\";\n\nconst CUSTOM_TYPE = \"color-picker\";\n\nsettings.customIcons[\"icon-\" + CUSTOM_TYPE] = \"icon-text\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Survey in Template\nDESCRIPTION: HTML template code to render the survey using the survey component\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-angular.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<survey [model]=\"surveyModel\"></survey>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependent Properties with Dynamic Choices in SurveyJS\nDESCRIPTION: This example demonstrates how to create a custom property that depends on another property using the dependsOn attribute. The dependent property dynamically updates its choices based on the value of the parent property.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Serializer } from \"survey-core\";\n\nSerializer.addProperty(\"question\", {\n  name: \"myCustomProperty\",\n  choices: [\"Option 1\", \"Option 2\", \"Option 3\"],\n});\n\nSerializer.addProperty(\"question\", {\n  name: \"dependent-property\",\n  dependsOn: [ \"myCustomProperty\" ],\n  choices: (obj) => {\n    const choices = [];\n    const targetPropertyValue = !!obj ? obj[\"myCustomProperty\"] : null;\n    // If `targetPropertyValue` is empty, return an empty array\n    if (!targetPropertyValue) return choices;\n    // Make the dependent property nullable\n    choices.push({ value: null });\n    // Populate `choices`\n    choices.push(targetPropertyValue + \": Suboption 1\");\n    choices.push(targetPropertyValue + \": Suboption 2\");\n    choices.push(targetPropertyValue + \": Suboption 3\");\n    return choices;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Serialization\nDESCRIPTION: Configures how the custom color picker model is serialized to JSON with property definitions\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-react.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nSerializer.addClass(\n  CUSTOM_TYPE,\n  [{\n    name: \"colorPickerType\",\n    default: \"Slider\",\n    choices: [\"Slider\", \"Sketch\", \"Compact\"],\n    category: \"general\",\n    visibleIndex: 2\n  }, {\n    name: \"disableAlpha:boolean\",\n    dependsOn: \"colorPickerType\",\n    visibleIf: function (obj) {\n      return obj.colorPickerType === \"Sketch\";\n    },\n    category: \"general\",\n    visibleIndex: 3\n  }],\n  function () {\n    return new QuestionColorPickerModel(\"\");\n  },\n  \"question\"\n);\n```\n\n----------------------------------------\n\nTITLE: Swapping Built-in Icons in SurveyJS\nDESCRIPTION: Demonstrates how to swap two built-in icons using Survey.settings.customIcons. Shows both global and modular application approaches.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/icons.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nSurvey.settings.customIcons[\"icon-import\"] = \"icon-export\";\nSurvey.settings.customIcons[\"icon-export\"] = \"icon-import\";\n\n// In modular applications:\nimport { settings } from \"survey-core\";\nsettings.customIcons[\"icon-import\"] = \"icon-export\";\nsettings.customIcons[\"icon-export\"] = \"icon-import\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Captions for Color Picker\nDESCRIPTION: Defines custom captions for the color picker question type and its properties using the SurveyJS localization engine.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-vue.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n// ...\nimport { getLocaleStrings } from \"survey-creator-core\";\n\nconst CUSTOM_TYPE = \"color-picker\";\n// ...\n\nconst locale = getLocaleStrings(\"en\");\nlocale.qt[CUSTOM_TYPE] = \"Color Picker\";\nlocale.pe.colorPickerType = \"Color picker type\";\nlocale.pe.disableAlpha = \"Disable alpha channel\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring SurveyJS Module\nDESCRIPTION: Angular module configuration to import and use SurveyJS components\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-angular.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SurveyModule } from \"survey-angular-ui\";\n\n@NgModule({\n  declarations: [ ... ],\n  imports: [\n    ...,\n    SurveyModule\n  ],\n  providers: [ ... ],\n  bootstrap: [ ... ]\n})\nexport class AppModule { }\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Timing in SurveyJS\nDESCRIPTION: This snippet demonstrates how to postpone validation until the survey ends by setting the checkErrorsMode property to 'onComplete' in the survey JSON configuration.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/data-validation.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  \"checkErrorsMode\": \"onComplete\",\n  \"elements\": [\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Matrix Column Property Configuration\nDESCRIPTION: Shows how to make a property available in matrix column settings using availableInMatrixColumn.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Serializer } from \"survey-core\";\n\nSerializer.addProperty(\"rating\", \n  { name: \"myStringProperty\", availableInMatrixColumn: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Predefined Theme in Classic HTML/JavaScript\nDESCRIPTION: Shows how to reference and apply a predefined theme (Layered Dark Panelless) in a classic HTML/JavaScript application using SurveyJS.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/manage-default-themes-and-styles.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <!-- ... -->\n    <link href=\"https://unpkg.com/survey-core/survey-core.min.css\" type=\"text/css\" rel=\"stylesheet\">\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/survey.core.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/themes/layered-dark-panelless.min.js\"></script>\n    <!-- ... -->\n</head>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = { ... };\nconst survey = new Survey.Model(surveyJson);\nsurvey.applyTheme(SurveyTheme.LayeredDarkPanelless);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Property Values in SurveyJS\nDESCRIPTION: Demonstrates how to set default values for different property types including string, numeric, and boolean properties.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Serializer } from \"survey-core\";\n\nSerializer.addProperty(\"dropdown\", \n  { name: \"myStringProperty\", default: \"custom-default-value\" }\n);\n\nSerializer.addProperty(\"checkbox\", \n  { name: \"myNumericProperty\", type: \"number\", default: 100 }\n);\n\nSerializer.addProperty(\"question\", \n  { name: \"myBooleanProperty\", type: \"boolean\", default: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom SVG Icons in SurveyJS\nDESCRIPTION: Shows different methods for replacing built-in icons with custom SVG icons, including direct embedding, fetching from a file, and React implementation.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/icons.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Option 1: Embed an SVG icon in code:\nconst customIcon = '<svg viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"...\"/></svg>';\nSurvey.SvgRegistry.registerIcon(\"icon-delete\", customIcon);\n\n// Option 2: Fetch an icon from a file\nfetch(\"./my-icon.svg\")\n  .then(response => response.text())\n  .then(svg => {\n    Survey.SvgRegistry.registerIcon(\"icon-delete\", svg);\n  });\n\n// Option 2 in React:\nimport { SvgRegistry } from \"survey-core\";\nimport { ReactComponent as MyIcon } from \"./my-icon.svg\";\nimport ReactDOMServer from \"react-dom/server\";\n\nconst svg = ReactDOMServer.renderToString(<MyIcon />);\nSvgRegistry.registerIcon(\"icon-delete\", svg);\n```\n\n----------------------------------------\n\nTITLE: Localizing a Specialized Question Type in JavaScript\nDESCRIPTION: This snippet demonstrates how to localize a specialized 'country' question type, providing translations for English (default), French, and German.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-create-specialized-question-types.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ComponentCollection } from \"survey-core\";\n\nComponentCollection.Instance.add({\n  name: \"country\", \n  title: {\n    \"default\": \"Country\",\n    \"fr\": \"Pays\",\n    \"de\": \"Land\"\n  }, \n  defaultQuestionTitle: {\n    \"default\": \"Country\",\n    \"fr\": \"Pays\",\n    \"de\": \"Land\"\n  },\n  questionJSON: {\n    \"type\": \"dropdown\",\n    \"placeholder\": {\n      \"default\": \"Select a country...\",\n      \"fr\": \"Sélectionner un pays...\",\n      \"de\": \"Land auswählen...\"\n    },\n    \"choicesByUrl\": {\n      \"url\": \"https://surveyjs.io/api/CountriesExample\",\n    }\n  },\n  inheritBaseProps: true\n});\n```\n\n----------------------------------------\n\nTITLE: Table Editor Property Configuration\nDESCRIPTION: Demonstrates how to configure property placement in a table editor using locationInTable.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Serializer } from \"survey-core\";\n\nSerializer.addProperty(\"itemvalue\", {\n  name: \"score\",\n  type: \"number\",\n  default: 0,\n  minValue: 0,\n  maxValue: 100,\n  locationInTable: \"both\" // or \"column\" | \"detail\"\n});\n```\n\n----------------------------------------\n\nTITLE: Including Specific Language Dictionaries\nDESCRIPTION: Examples of including individual language dictionaries instead of the complete localization package.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/survey-localization.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/survey-core/i18n/french.js\"></script>\n<script src=\"https://unpkg.com/survey-core/i18n/german.js\"></script>\n<script src=\"https://unpkg.com/survey-core/i18n/italian.js\"></script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"survey-core/i18n/french\";\nimport \"survey-core/i18n/german\";\nimport \"survey-core/i18n/italian\";\n```\n\n----------------------------------------\n\nTITLE: Summing Array Values in TypeScript\nDESCRIPTION: Returns the sum of numbers from a specified data field in an array response, with optional filtering. Useful for complex calculations in matrix or panel questions.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nsumInArray(question: expression, dataFieldName: string, filter?: expression): number\n```\n\n----------------------------------------\n\nTITLE: Configuring Question Title Pattern in SurveyJS\nDESCRIPTION: Defines the arrangement of question title elements (number, title, required mark) using the questionTitlePattern property.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-configure-question-titles.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  // ...\n  \"questionTitlePattern\": \"numTitleRequire\", // 1. Question Title *\n  \"questionTitlePattern\": \"numRequireTitle\", // 1. * Question Title  \n  \"questionTitlePattern\": \"numTitle\",        // 1. Question Title\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Color Picker as Property Grid Editor in TypeScript\nDESCRIPTION: This code registers the custom Color Picker component as an editor for properties of the 'color' type in the Survey Creator's Property Grid. It uses the PropertyGridEditorCollection to define how the editor should be applied.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ..., PropertyGridEditorCollection } from \"survey-creator-core\";\n\nconst CUSTOM_TYPE = \"color-picker\";\n\nPropertyGridEditorCollection.register({\n  fit: function (prop) {\n    return prop.type === \"color\";\n  },\n  getJSON: function () {\n    return {\n      type: CUSTOM_TYPE,\n      colorPickerType: \"Compact\"\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Text Input Length Limitation\nDESCRIPTION: Shows how to set maximum character limit for text input using maxLength.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Serializer } from \"survey-core\";\n\nSerializer.addProperty(\"question\",\n  { name: \"myTextProperty\", type: \"text\", maxLength: 280 }\n);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import of SurveyJS Component in Next.js\nDESCRIPTION: Uses Next.js dynamic import to ensure client-side rendering of the SurveyJS component, preventing SSR-related issues.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-react.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport dynamic from 'next/dynamic';\n\nconst SurveyComponent = dynamic(() => import(\"@/components/Survey\"), {\n  ssr: false\n});\n\nexport default function Survey() {\n  return (\n    <SurveyComponent />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum in Array in TypeScript\nDESCRIPTION: Returns the minimum of numbers from a specified data field in an array response, with optional filtering. Useful for finding lowest values in matrix or panel questions.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nminInArray(question: expression, dataFieldName: string, filter?: expression): number\n```\n\n----------------------------------------\n\nTITLE: Using Shipping Address Composite Question in Survey JSON Schema\nDESCRIPTION: This JSON snippet shows how the 'Shipping Address' composite question appears in the survey JSON schema. It demonstrates the simple structure of the composite question when used in a survey, hiding the complexity of the underlying logic.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-create-composite-question-types.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"shippingaddress\",\n  \"name\": \"question1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Localizable Property in JavaScript\nDESCRIPTION: This code demonstrates how to add a custom localizable property to a new class. It includes creating a LocalizableString instance, adding getters and setters for localized text, and configuring serialization settings for the localizable property.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Question, ElementFactory, Serializer } from \"survey-core\";\n\nexport class MyCustomClass extends Question {\n  constructor() {\n    super();\n    // Step 1: Create a `LocalizableString` instance\n    this.createLocalizableString(\"myLocalizableProperty\", this);\n  }\n  getType() {\n    return \"my-custom-class\";\n  }\n  // Step 2: Add getters and setters\n  get myLocalizableProperty() {\n    // Return the property text for the current locale\n    return this.getLocalizableStringText(\"myLocalizableProperty\");\n  }\n  set myLocalizableProperty(val) {\n    // Set the property text for the current locale\n    this.setLocalizableStringText(\"myLocalizableProperty\", val);\n  }\n  get locMyLocalizableProperty() {\n    // Return a `LocalizationString` instance for `myLocalizableProperty`\n    return this.getLocalizableString(\"myLocalizableProperty\");\n  }\n}\n\nElementFactory.Instance.registerElement(\"my-custom-class\", (name) => {\n  return new MyCustomClass(name);\n});\n\nSerializer.addClass(\n  \"my-custom-class\",\n  [{\n    name: \"myLocalizableProperty\",\n    category: \"general\",\n    visibleIndex: 2,\n    // Step 3: Deserialize `myLocalizableProperty` to `locMyLocalizableProperty`\n    serializationProperty: \"locMyLocalizableProperty\"\n  }],\n  function () {\n    return new MyCustomClass(\"\");\n  },\n  \"question\"\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-only Property\nDESCRIPTION: Demonstrates how to make a property read-only using the readOnly setting.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Serializer } from \"survey-core\";\n\nSerializer.addProperty(\"question\", \n  { name: \"myStringProperty\", readOnly: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Extracting Month from Date in TypeScript\nDESCRIPTION: Returns the month of a given date as a value from 1 (January) to 12 (December). Useful for month-specific operations in surveys.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nmonth(date?: Date): number\n```\n\n----------------------------------------\n\nTITLE: Counting Array Items in TypeScript\nDESCRIPTION: Returns the total number of array items with non-null values in a specified data field, with optional filtering. Useful for counting responses in matrix or panel questions.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\ncountInArray(question: expression, dataFieldName: string, filter?: expression): number\n```\n\n----------------------------------------\n\nTITLE: Configuring Panel Question Numbering in SurveyJS\nDESCRIPTION: Demonstrates how to configure question numbering within panels while maintaining survey-level sequential numbering. Allows for independent numbering sequences within panels.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-configure-question-titles.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  // ...\n  \"showQuestionNumbers\": true,\n  \"elements\": [{\n    \"type\": \"panel\",\n    // ...\n    \"elements\": [ /* ... */ ],\n    \"showQuestionNumbers\": \"onpanel\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Question Numbering in SurveyJS\nDESCRIPTION: Sets the question numbering mode in a survey. Supports sequential, recursive, or page-based numbering via the showQuestionNumbers property.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-configure-question-titles.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  // ...\n  \"showQuestionNumbers\": true // or \"recursive\" | \"onpage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Property Type Shorthand Notation in SurveyJS\nDESCRIPTION: Shows how to use shorthand notation for specifying property types using a colon character.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Serializer } from \"survey-core\";\n\nSerializer.addProperty(\"question\", \n  { name: \"myBooleanProperty\", type: \"boolean\" }\n  // ===== or =====\n  { name: \"myBooleanProperty:boolean\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Determining Day of Week in TypeScript\nDESCRIPTION: Returns the day of the week for a given date as a value from 0 (Sunday) to 6 (Saturday). Useful for weekday-based logic in surveys.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nweekday(date?: Date): number\n```\n\n----------------------------------------\n\nTITLE: Instantiating a SurveyJS Model with JSON Schema\nDESCRIPTION: Code snippet demonstrating how to create a SurveyJS Model instance using a JSON schema. This model will be used for rendering the survey in the Vue component.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-vue.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n// ...\nimport { Model } from 'survey-core';\n\nconst surveyJson = { ... };\nconst survey = new Model(surveyJson);\n</script>\n\n<template>\n  <!-- ... -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Module with Color Picker Integration\nDESCRIPTION: Angular module configuration that declares and imports necessary components including a custom ColorPicker component along with SurveyJS creator modules and color-related modules.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ColorPickerComponent } from './color-picker/color-picker.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SurveyCreatorComponent,\n    ColorPickerComponent\n  ],\n  imports: [\n    BrowserModule,\n    SurveyCreatorModule,\n    ColorSketchModule,\n    ColorSliderModule,\n    ColorCompactModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Panel Properties in SurveyJS\nDESCRIPTION: Shows how to override properties of nested Panel objects within a composite question using the onCreated callback.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-create-composite-question-types.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nComponentCollection.Instance.add({\n  name: \"shippingaddress\",\n  // ...\n  onCreated(question) {\n    question.contentPanel.showQuestionNumbers = \"default\";\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Angular Module Configuration for Survey Creator and Color Picker\nDESCRIPTION: This Angular module configuration imports necessary modules for the Survey Creator and the custom Color Picker component, including ngx-color modules for different color picker types.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { SurveyCreatorModule } from 'survey-creator-angular';\nimport { ColorSketchModule } from \"ngx-color/sketch\";\nimport { ColorSliderModule } from \"ngx-color/slider\";\nimport { ColorCompactModule } from \"ngx-color/compact\";\n\nimport { AppComponent } from './app.component';\nimport { SurveyCreatorComponent } from './survey-creator/survey-creator.component';\n```\n\n----------------------------------------\n\nTITLE: Setting Category Position\nDESCRIPTION: Demonstrates how to position a custom category after the General category using categoryIndex.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Serializer } from \"survey-core\";\n\nSerializer.addProperty(\"question\",\n  // Display \"Custom Category\" after the General category\n  { name: \"myStringProperty\", category: \"Custom Category\", categoryIndex: 1 }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Required Question Mark in SurveyJS\nDESCRIPTION: Configures the symbol or text used to mark required questions using the requiredMark property.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-configure-question-titles.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  // ...\n  \"requiredMark\": \"!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Modules for Color Component\nDESCRIPTION: Import and configure required Angular Color modules in the app.module.ts file. This registers the necessary color picker components for use in the application.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// app.module.ts\nimport { ColorSketchModule } from \"ngx-color/sketch\";\nimport { ColorSliderModule } from \"ngx-color/slider\";\nimport { ColorCompactModule } from \"ngx-color/compact\";\n\n@NgModule({\n  declarations: [ ... ],\n  imports: [\n    // ...\n    ColorSketchModule,\n    ColorSliderModule,\n    ColorCompactModule\n  ],\n  // ...\n})\nexport class AppModule { }\n```\n\n----------------------------------------\n\nTITLE: Configuring a Dropdown Question for Country Selection in JavaScript\nDESCRIPTION: This snippet demonstrates how to pre-populate a standard Dropdown question with a country list using the choicesByUrl property.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-create-specialized-question-types.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"country\",\n  \"type\": \"dropdown\",\n  \"placeholder\": \"Select a country...\",\n  \"choicesByUrl\": {\n    \"url\": \"https://surveyjs.io/api/CountriesExample\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Color Picker Component in SurveyJS\nDESCRIPTION: This HTML template defines the structure for the color picker component in SurveyJS. It includes conditional rendering for different color picker types.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<!-- color-picker.component.html -->\n<ng-container *ngIf=\"model.colorPickerType === 'Sketch'\">\n  <color-sketch [disableAlpha]=\"model.disableAlpha\" (onChange)=\"handleChange($event)\" [color]=\"model.value || '#fff'\"></color-sketch>\n</ng-container>\n<ng-container *ngIf=\"model.colorPickerType === 'Slider'\">\n  <color-slider (onChange)=\"handleChange($event)\" [color]=\"model.value || '#fff'\"></color-slider>\n</ng-container>\n<ng-container *ngIf=\"model.colorPickerType === 'Compact'\">\n  <color-compact (onChange)=\"handleChange($event)\" [color]=\"model.value || '#fff'\"></color-compact>\n</ng-container>\n```\n\n----------------------------------------\n\nTITLE: Installing Angular CDK Dependency for SurveyJS\nDESCRIPTION: Command to install the required Angular CDK package that SurveyJS depends on. This is necessary for Angular v12.0.0 or newer projects using SurveyJS.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-angular-ui/README.md#2025-04-18_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nnpm install @angular/cdk@^12.0.0 --save\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic SurveyJS JSON Model Schema\nDESCRIPTION: JavaScript object that defines a simple survey model with two text questions. Each question has a name (for identification) and a title (displayed to users).\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-vue.md#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst surveyJson = {\n  elements: [{\n    name: \"FirstName\",\n    title: \"Enter your first name:\",\n    type: \"text\"\n  }, {\n    name: \"LastName\",\n    title: \"Enter your last name:\",\n    type: \"text\"\n  }]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing onSetValue Handler for Custom Properties in SurveyJS\nDESCRIPTION: This snippet demonstrates how to use the onSetValue function to perform actions when a property value is set. It shows the proper way to set property values to avoid infinite recursion.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Serializer } from \"survey-core\";\n\nSerializer.addProperty(\"question\", {\n  name: \"myStringProperty\",\n  onSetValue: (surveyElement, value) => {\n    // You can perform required checks here\n    // ...\n    // Set the `value`\n    surveyElement.setPropertyValue(\"myStringProperty\", value);\n    // You can perform required actions after the `value` is set\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Angular Survey Integration\nDESCRIPTION: Shows how to integrate SurveyJS with Angular, including both page-embedded and pop-up survey implementations.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-simple-survey.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Render the survey inside the page -->\n<survey [model]=\"surveyModel\"></survey>\n\n<!-- Render the survey in a pop-up window -->\n<popup-survey [model]=\"surveyModel\" [isExpanded]=\"true\"></popup-survey>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\nimport { Model } from \"survey-core\";\n\nconst surveyJson = {\n  // ...\n};\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  surveyModel: Model;\n  ngOnInit() {\n    const survey = new Model(surveyJson);\n    this.surveyModel = survey;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete AppComponent Implementation\nDESCRIPTION: Full implementation of the AppComponent that imports the ColorPickerComponent to ensure it's included in production builds.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n// app.component.ts\nimport { Component } from '@angular/core';\nimport { ColorPickerComponent } from './color-picker/color-picker.component';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  static declaration = [ColorPickerComponent];\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning SurveyJS Repository\nDESCRIPTION: Commands to clone the SurveyJS repository and navigate to the survey-core package directory.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-core/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/surveyjs/survey-library.git\ncd survey-library/packages/survey-core\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Survey Model\nDESCRIPTION: Sample JSON schema defining a simple survey with two text questions\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-angular.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  elements: [{\n    name: \"FirstName\",\n    title: \"Enter your first name:\",\n    type: \"text\"\n  }, {\n    name: \"LastName\",\n    title: \"Enter your last name:\",\n    type: \"text\"\n  }]\n};\n```\n\n----------------------------------------\n\nTITLE: Replacing Comment Question with Custom Widget in SurveyJS\nDESCRIPTION: This snippet demonstrates how to replace the default comment question input in SurveyJS with a custom rich text editor widget. It modifies the existing rich edit widget to fit the comment question type.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-create-custom-widgets.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar richCommentWidget = {\n  name: \"richcomment\",\n  isFit: function (question) {\n    return question.getType() == \"comment\";\n  },\n  init() {\n    Survey.Serializer.findProperty(\n      \"comment\",\n      \"placeholder\"\n    ).visible = false;\n    Survey.Serializer.findProperty(\"comment\", \"cols\").visible = false;\n    Survey.Serializer.findProperty(\"comment\", \"rows\").visible = false;\n  },\n};\n\nSurvey.CustomWidgetCollection.Instance.add(richCommentWidget);\n```\n\n----------------------------------------\n\nTITLE: Complete HTML Template for Color Picker Component\nDESCRIPTION: Full HTML template that renders the appropriate color picker component based on the selected type. This template is referenced in the component's templateUrl property.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!-- color-picker.component.html -->\n<ng-container *ngIf=\"model.colorPickerType === 'Sketch'\">\n  <color-sketch [disableAlpha]=\"model.disableAlpha\" (onChange)=\"handleChange($event)\" [color]=\"model.value || '#fff'\"></color-sketch>\n</ng-container>\n<ng-container *ngIf=\"model.colorPickerType === 'Slider'\">\n  <color-slider (onChange)=\"handleChange($event)\" [color]=\"model.value || '#fff'\"></color-slider>\n</ng-container>\n<ng-container *ngIf=\"model.colorPickerType === 'Compact'\">\n  <color-compact (onChange)=\"handleChange($event)\" [color]=\"model.value || '#fff'\"></color-compact>\n</ng-container>\n```\n\n----------------------------------------\n\nTITLE: Configuring SurveyJS Styles in Angular\nDESCRIPTION: Angular.json configuration to include SurveyJS CSS styles in the project build\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-angular.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"projects\": {\n    \"project-name\": {\n      \"projectType\": \"application\",\n      \"architect\": {\n        \"build\": {\n          \"options\": {\n            \"styles\": [\n              \"src/styles.css\",\n              \"node_modules/survey-core/survey-core.min.css\"\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building SurveyJS Library\nDESCRIPTION: Command to build the complete survey library. Built files will be output to the build directory.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-core/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:all\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Date in TypeScript\nDESCRIPTION: Returns the current date or a date shifted from the current by a given number of days. Useful for dynamic date operations in surveys.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ntoday(daysToAdd?: number): Date\n```\n\n----------------------------------------\n\nTITLE: Adding Custom SVG Icon for Color Picker\nDESCRIPTION: Registers a custom SVG icon for the color picker question type to be displayed in the Toolbox and Add Question menu.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-vue.md#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\nimport { ..., SvgRegistry } from \"survey-core\"\n\nconst CUSTOM_TYPE = \"color-picker\";\n// ...\n\nSvgRegistry.registerIcon(\n  CUSTOM_TYPE,\n  '<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"...\" /></svg>'\n);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing SurveyJS Styles in React Component\nDESCRIPTION: Imports the default SurveyJS Form Library stylesheet to apply the Default theme.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-react.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport 'survey-core/survey-core.css';\n```\n\n----------------------------------------\n\nTITLE: Importing SurveyJS Core CSS Stylesheet in Vue Component\nDESCRIPTION: Code snippet showing how to import the default SurveyJS theme stylesheet in a Vue component. This applies the default theme to your survey forms.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-vue.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\nimport 'survey-core/survey-core.css';\n</script>\n\n<template>\n  <!-- ... -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Running SurveyJS Unit Tests\nDESCRIPTION: Command to execute unit tests for the SurveyJS library using Karma test runner.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-react-ui/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Extracting Day of Month in TypeScript\nDESCRIPTION: Returns the day of the month for a given date as a value from 1 to 31. This function helps in day-specific calculations in surveys.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nday(date?: Date): number\n```\n\n----------------------------------------\n\nTITLE: Importing Component in AppComponent\nDESCRIPTION: Imports the custom component in the main AppComponent to prevent it from being removed by tree shaking during production builds. The static declaration property ensures the component is included.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n// app.component.ts\nimport { Component } from '@angular/core';\nimport { ColorPickerComponent } from './color-picker/color-picker.component';\n\n@Component({\n  // ...\n})\nexport class AppComponent {\n  static declaration = [ColorPickerComponent];\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Localization File in Webpack (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to import a localization file (in this case, French) into the Webpack build process for the SurveyJS Form Library. It's a crucial step in integrating a new language dictionary into the library.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-core/src/localization/readme.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"../../localization/french\";\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value in TypeScript\nDESCRIPTION: Returns the maximum of passed numbers. Useful for finding the highest value among multiple survey responses.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nmax(param1: number, param2: number, ...): number\n```\n\n----------------------------------------\n\nTITLE: Running SurveyJS Development Server\nDESCRIPTION: Command to start a local development server for testing the SurveyJS library. This runs a local HTTP server at http://localhost:5173/.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-vue3-ui/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Integrating Color Picker Component in Angular Application\nDESCRIPTION: This code snippet shows how to integrate the color picker component into the main Angular application component.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// app.component.ts\nimport { Component } from '@angular/core';\nimport { ColorPickerComponent } from './color-picker/color-picker.component';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  static declaration = [ColorPickerComponent];\n}\n```\n\n----------------------------------------\n\nTITLE: Angular Root Component with Color Picker Declaration\nDESCRIPTION: Root component implementation that includes ColorPickerComponent in its static declarations. This component serves as the main entry point of the application.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// app.component.ts\nimport { Component } from '@angular/core';\nimport { ColorPickerComponent } from './color-picker/color-picker.component';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  static declaration = [ColorPickerComponent];\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Component in Vue App\nDESCRIPTION: Registers the custom ColorPickerComponent in the main Vue application file.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-vue.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// main.ts\n// ...\nimport ColorPickerComponent from \"./components/ColorPicker.vue\";\n\ncreateApp(App)\n  .component(\"survey-color-picker\", ColorPickerComponent)\n  .mount(\"#app\");\n```\n\n----------------------------------------\n\nTITLE: Registering Async Function\nDESCRIPTION: Shows how to register an asynchronous function with FunctionFactory.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FunctionFactory } from \"survey-core\";\n\nFunctionFactory.Instance.register(\"asyncFunc\", asyncFunc, true);\n```\n\n----------------------------------------\n\nTITLE: Installing React Color Dependencies\nDESCRIPTION: NPM command to install React Color component and its TypeScript types\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-react.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install react-color @types/react-color --save\n```\n\n----------------------------------------\n\nTITLE: Hiding Custom Component from Toolbox\nDESCRIPTION: Shows how to register a custom component for use only as a property editor while hiding it from the Toolbox and Add Question menu.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-react.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// components/ColorPicker.tsx\n// ...\nimport { ElementFactory } from \"survey-core\";\n\nconst CUSTOM_TYPE = \"color-picker\";\n// ...\nexport function registerColorPicker() {\n  ElementFactory.Instance.registerElement(\n    CUSTOM_TYPE,\n    (name) => {\n      return new QuestionColorPickerModel(name);\n    },\n    false\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum in Array in TypeScript\nDESCRIPTION: Returns the maximum of numbers from a specified data field in an array response, with optional filtering. Useful for finding peak values in matrix or panel questions.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nmaxInArray(question: expression, dataFieldName: string, filter?: expression): number\n```\n\n----------------------------------------\n\nTITLE: Full Name Composite Question in Survey JSON Schema\nDESCRIPTION: This JSON snippet shows how the 'Full Name' composite question appears in the survey JSON schema. It demonstrates the simple structure of the composite question when used in a survey.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-create-composite-question-types.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"fullname\",\n  \"name\": \"question1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Including SurveyJS Localization Scripts\nDESCRIPTION: Different methods to include the SurveyJS localization engine and language dictionaries in your project via CDN or imports.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/survey-localization.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/survey-core/survey.i18n.min.js\"></script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"survey-core/survey.i18n\";\n```\n\n----------------------------------------\n\nTITLE: Alternative Command for Generating TypeScript Expression Parser\nDESCRIPTION: This alternative command uses the node executable to run PEG.js with the ts-pegjs plugin. It generates a TypeScript expression parser from the grammar.pegjs file, specifying options for caching and output file location.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-core/src/expressions/ReadMe.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode ./node_modules/pegjs/bin/pegjs --plugin ./node_modules/ts-pegjs/src/tspegjs --extra-options-file src/expressions/pegconfig.json -o src/expressions/expressionParser.ts --cache src/expressions/grammar.pegjs\n```\n\n----------------------------------------\n\nTITLE: Installing and Building SurveyJS Form Library\nDESCRIPTION: Commands to install dependencies and build the SurveyJS Form Library UI from source code. Includes steps to change directory, install dependencies, and run the build process.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-js-ui/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ../survey-js-ui \nnpm i\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Converting Question Value to Date in TypeScript\nDESCRIPTION: Returns a Date value converted from a given question's value. This function is essential for handling date inputs in surveys.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetDate(question: expression): Date\n```\n\n----------------------------------------\n\nTITLE: Installing SurveyJS Form Library for React\nDESCRIPTION: Command to install the survey-react-ui npm package, which includes survey-core as a dependency.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-react.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install survey-react-ui --save\n```\n\n----------------------------------------\n\nTITLE: Setting Default Locale\nDESCRIPTION: Example of setting a default fallback locale for missing translations.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/survey-localization.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Model, surveyLocalization } from \"survey-core\";\nimport \"survey-core/i18n/french\";\n\nsurveyLocalization.defaultLocale = \"fr\";\n\nconst surveyJson = { ... };\nconst survey = new Model(surveyJson);\n```\n\n----------------------------------------\n\nTITLE: Building SurveyJS Core Bundle\nDESCRIPTION: Command to build the survey-core bundle, which is a prerequisite for using the JSON obfuscator.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/utils/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build_core\n```\n\n----------------------------------------\n\nTITLE: Building SurveyJS React Form Library Dependencies\nDESCRIPTION: Commands to install dependencies and build the SurveyJS React Form Library from source code. This requires first building the platform-independent part and then moving to the React UI directory.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-react-ui/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ../survey-react-ui \nnpm i\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Extracting Year from Date in TypeScript\nDESCRIPTION: Returns the year of a given date. This function is useful for isolating the year component in date-related survey questions.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-conditional-logic.md#2025-04-18_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nyear(date?: Date): number\n```\n\n----------------------------------------\n\nTITLE: Installing SurveyJS Angular Package via NPM\nDESCRIPTION: Command to install the survey-angular-ui npm package which includes the core SurveyJS library.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-angular.md#2025-04-18_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nnpm install survey-angular-ui --save\n```\n\n----------------------------------------\n\nTITLE: Installing and Building SurveyJS Vue Library\nDESCRIPTION: Commands to install dependencies and build the SurveyJS Vue Form Library from source. This process includes changing to the correct directory, installing dependencies, and running the build script.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-vue3-ui/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ../survey-vue3-ui \nnpm i\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Markup Tests for SurveyJS Form Library\nDESCRIPTION: Command to run markup tests for the SurveyJS Form Library project using npm.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:markup\n```\n\n----------------------------------------\n\nTITLE: Building SurveyJS Angular Form Library from Source\nDESCRIPTION: Series of commands to build the SurveyJS Angular Form Library from sources. This includes installing dependencies and running the build script in the survey-angular-ui directory.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-angular-ui/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ../survey-angular-ui\nnpm i\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Localizing Default Values in SurveyJS\nDESCRIPTION: Shows how to set localized default values for properties at runtime using surveyLocalization.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { surveyLocalization } from \"survey-core\";\n\nsurveyLocalization.getLocaleStrings(\"en\")[\"myStringProperty\"] = \"Default value for English\";\nsurveyLocalization.getLocaleStrings(\"fr\")[\"myStringProperty\"] = \"Default value for French\";\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Color Picker Component\nDESCRIPTION: Defines the HTML template that renders different color picker components based on the selected colorPickerType value. It conditionally displays Sketch, Slider, or Compact color pickers from the ngx-color library.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<ng-container *ngIf=\"model.colorPickerType === 'Sketch'\">\n  <color-sketch [disableAlpha]=\"model.disableAlpha\" (onChange)=\"handleChange($event)\" [color]=\"model.value || '#fff'\"></color-sketch>\n</ng-container>\n<ng-container *ngIf=\"model.colorPickerType === 'Slider'\">\n  <color-slider (onChange)=\"handleChange($event)\" [color]=\"model.value || '#fff'\"></color-slider>\n</ng-container>\n<ng-container *ngIf=\"model.colorPickerType === 'Compact'\">\n  <color-compact (onChange)=\"handleChange($event)\" [color]=\"model.value || '#fff'\"></color-compact>\n</ng-container>\n```\n\n----------------------------------------\n\nTITLE: Running SurveyJS Test Application\nDESCRIPTION: Command to start a local development server for testing the SurveyJS application. The server runs on http://localhost:7777/.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-react-ui/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Running Functional Tests for SurveyJS Form Library\nDESCRIPTION: Command to run functional tests using TestCafe for the SurveyJS Form Library project.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run testcafe\n```\n\n----------------------------------------\n\nTITLE: Survey Creator Component Template in HTML\nDESCRIPTION: This HTML template renders the Survey Creator component using the surveyCreatorModel.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"surveyCreator\">\n  <survey-creator [model]=\"surveyCreatorModel\"></survey-creator>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Property Position in Category\nDESCRIPTION: Shows how to specify a property's position within its category using visibleIndex. The example places myStringProperty at the top of the General category.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Serializer } from \"survey-core\";\n\nSerializer.addProperty(\"question\", \n  // Display \"myStringProperty\" at the top in the General category\n  { name: \"myStringProperty\", category: \"general\", visibleIndex: 0 }\n);\n```\n\n----------------------------------------\n\nTITLE: Color Picker Component Template in HTML\nDESCRIPTION: This HTML template defines the structure of the Color Picker component. It uses ngx-color components to render different types of color pickers based on the selected colorPickerType.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<ng-container *ngIf=\"model.colorPickerType === 'Sketch'\">\n  <color-sketch [disableAlpha]=\"model.disableAlpha\" (onChange)=\"handleChange($event)\" [color]=\"model.value || '#fff'\"></color-sketch>\n</ng-container>\n<ng-container *ngIf=\"model.colorPickerType === 'Slider'\">\n  <color-slider (onChange)=\"handleChange($event)\" [color]=\"model.value || '#fff'\"></color-slider>\n</ng-container>\n<ng-container *ngIf=\"model.colorPickerType === 'Compact'\">\n  <color-compact (onChange)=\"handleChange($event)\" [color]=\"model.value || '#fff'\"></color-compact>\n</ng-container>\n```\n\n----------------------------------------\n\nTITLE: Running SurveyJS Test Server\nDESCRIPTION: Command to start a local development server for testing the SurveyJS library. Runs on http://localhost:7777/.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-js-ui/README.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Running Visual Regression Tests for SurveyJS Form Library\nDESCRIPTION: Command to run visual regression tests to ensure UI consistency for the SurveyJS Form Library.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/CONTRIBUTING.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run visual-regression-tests\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Expression Parser with PEG.js\nDESCRIPTION: This command uses PEG.js with the ts-pegjs plugin to generate a TypeScript expression parser from the grammar.pegjs file. It includes options for caching and specifies the output file location.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-core/src/expressions/ReadMe.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npegjs --plugin ./node_modules/ts-pegjs/src/tspegjs --extra-options-file src/expressions/pegconfig.json -o src/expressions/expressionParser.ts --cache src/expressions/grammar.pegjs\n```\n\n----------------------------------------\n\nTITLE: Installing SurveyJS Vue3 UI Package with npm\nDESCRIPTION: Command to install the survey-vue3-ui npm package, which also installs survey-core as a dependency. This is the first step in adding SurveyJS Form Library to a Vue 3 application.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-vue.md#2025-04-18_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nnpm install survey-vue3-ui --save\n```\n\n----------------------------------------\n\nTITLE: Customizing Preview Button Text in SurveyJS\nDESCRIPTION: This code shows how to change the text of the Preview button in a SurveyJS survey configuration.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/design-survey-create-a-multi-page-survey.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n    previewText: \"Preview answers\"\n};\n```\n\n----------------------------------------\n\nTITLE: Running SurveyJS JSON Obfuscator\nDESCRIPTION: Command to execute the JSON obfuscator script. It takes the path to the survey JSON schema file as an argument and produces an obfuscated version with the suffix 'obf'.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/utils/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode .\\utils\\json_obfuscator.js [path\\to\\the\\survey\\json\\schema.json]\n```\n\n----------------------------------------\n\nTITLE: Running Lint Checks for SurveyJS Form Library\nDESCRIPTION: Command to run linting checks to ensure code quality and style consistency for the SurveyJS Form Library.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/CONTRIBUTING.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for SurveyJS Form Library\nDESCRIPTION: Command to run unit tests for the SurveyJS Form Library project using npm.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Using Built-in SurveyJS Icon for Color Picker\nDESCRIPTION: Assigns a built-in SurveyJS icon (Text icon) to the custom color picker question type.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-vue.md#2025-04-18_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\nimport { ..., settings } from \"survey-core\";\n\nconst CUSTOM_TYPE = \"color-picker\";\n// ...\n\nsettings.customIcons[\"icon-\" + CUSTOM_TYPE] = \"icon-text\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing SurveyJS Dependencies\nDESCRIPTION: Command to install required npm dependencies. Requires Node.js v16 or later.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-core/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Building Production Bundle\nDESCRIPTION: Command to type-check, compile and minify the project for production deployment\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-vue3-ui/example/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running SurveyJS Unit Tests\nDESCRIPTION: Command to execute the unit tests for the SurveyJS library using Karma test runner.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-vue3-ui/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Installing Vue 3 Color Component\nDESCRIPTION: Command to install the Vue 3 Color component using npm.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-vue.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @lk77/vue3-color --save\n```\n\n----------------------------------------\n\nTITLE: Numeric Value Range Configuration\nDESCRIPTION: Demonstrates how to set minimum and maximum values for numeric input using minValue and maxValue.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-add-custom-properties-to-a-form.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Serializer } from \"survey-core\";\n\nSerializer.addProperty(\"question\",\n  { name: \"myNumericProperty\", type: \"number\", minValue: 0, maxValue: 100 }\n);\n```\n\n----------------------------------------\n\nTITLE: Running Accessibility Tests for SurveyJS Form Library\nDESCRIPTION: Command to run accessibility tests to ensure the SurveyJS Form Library meets accessibility standards.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/CONTRIBUTING.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run accessibility-tests\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install all required npm dependencies for the Vue 3 project\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-vue3-ui/example/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Angular Color Component via NPM\nDESCRIPTION: Command to install the ngx-color package which provides Angular color picker components.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install ngx-color --save\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Matrix Export Interface\nDESCRIPTION: A bug fix to export IMatrixDropdownData interface to enable extending MatrixDynamicRowModel\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**matrix:** export IMatrixDropdownData to allow extending MatrixDynamicRowModel (#5394)\n```\n\n----------------------------------------\n\nTITLE: Release Version Update (1.8.57)\nDESCRIPTION: Bug fix release addressing issues with ResponsivityManager, matrix cell value handling, file preview in dynamic panels, and text editor behavior.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* Action ResponsivityManager works incorrectly with invisible actions [#3129]\n* Calling clearIncorrectValues function in matrix cell will onMatrixCellValueChanging event even for emtpy cell [#3131]\n* Null exception on showing preview in file question located in dynamic panel [#3115]\n* The first title action fired on pressing enter in a text editor\n```\n\n----------------------------------------\n\nTITLE: Displaying Version 2.0.5 Release in Markdown\nDESCRIPTION: Shows the release information for version 2.0.5 of the SurveyJS library, including the date and a comparison link to the previous version.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-core/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## [2.0.5](https://github.com/surveyjs/surveyjs/compare/v2.0.4...v2.0.5) (2025-04-15)\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to start the development server with hot-reload capability using Vite\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-vue3-ui/example/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Release Version Update (1.8.56)\nDESCRIPTION: Fixed issues with answer count validation, question title event handling in knockout, and text validation behavior.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* Do not run answer count validator on empty array [#3069]\n* survey.onGetQuestionTitle event doesn't work in knockout [#3080]\n* Text validator validates empty string [#3065]\n```\n\n----------------------------------------\n\nTITLE: Release Version Update (1.8.55)\nDESCRIPTION: Fixed expression evaluation bug with 'anyof' operator and zero values.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* Expression with \"anyof\" with 0 can executed incorrectly [#3052]\n```\n\n----------------------------------------\n\nTITLE: Displaying Version 2.0.4 Release in Markdown\nDESCRIPTION: Shows the release information for version 2.0.4 of the SurveyJS library, including the date and a comparison link to version 2.0.2.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-core/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## [2.0.4](https://github.com/surveyjs/surveyjs/compare/v2.0.2...v2.0.4) (2025-04-08)\n```\n\n----------------------------------------\n\nTITLE: Running SurveyJS Unit Tests with Karma\nDESCRIPTION: Command to execute unit tests for the SurveyJS Angular Form Library using the Karma test runner.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-angular-ui/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Function Name Return\nDESCRIPTION: A fix to return the original function name\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nreturn original function name (96fc3ff)\n```\n\n----------------------------------------\n\nTITLE: Installing Angular CDK Dependency\nDESCRIPTION: Command to install the required @angular/cdk package for Angular v12.0.0+\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-angular.md#2025-04-18_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nnpm install @angular/cdk@^12.0.0 --save\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Comparison Links in Markdown\nDESCRIPTION: These Markdown code snippets show how version comparisons are linked in the changelog. They use GitHub's URL structure to create links that display the differences between specific versions of the project.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-js-ui/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## [2.0.5](https://github.com/surveyjs/survey-creator/compare/v2.0.4...v2.0.5) (2025-04-15)\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n## [2.0.4](https://github.com/surveyjs/survey-creator/compare/v2.0.2...v2.0.4) (2025-04-08)\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Number in Markdown\nDESCRIPTION: Shows how version numbers are formatted in the changelog using Markdown headers.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### [1.8.32](https://github.com/surveyjs/survey-library/compare/v1.8.31...v1.8.32) (2021-02-24)\n```\n\n----------------------------------------\n\nTITLE: Running the SurveyJS Test Application\nDESCRIPTION: Commands to set up and run a test application that demonstrates the SurveyJS Angular Form Library. This starts a local development server at http://localhost:4200/.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-angular-ui/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd example\nnpm i\ncd ../ \nnpm run serve:example:dev\n```\n\n----------------------------------------\n\nTITLE: Running SurveyJS Unit Tests\nDESCRIPTION: Command to execute unit tests for the SurveyJS library using Karma test runner.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-js-ui/README.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Serialization for Color Picker Model\nDESCRIPTION: Sets up serialization rules for the custom color picker question type. This defines how the model properties are serialized to JSON, including default values, available choices, and property visibility rules.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-third-party-component-integration-angular.md#2025-04-18_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { ..., Serializer } from \"survey-core\";\n\nconst CUSTOM_TYPE = \"color-picker\";\n\nSerializer.addClass(\n  CUSTOM_TYPE,\n  [{\n    name: \"colorPickerType\",\n    default: \"Slider\",\n    choices: [\"Slider\", \"Sketch\", \"Compact\"],\n    category: \"general\",\n    visibleIndex: 2 // Place after the Name and Title\n  }, {\n    name: \"disableAlpha:boolean\",\n    dependsOn: \"colorPickerType\",\n    visibleIf: function (obj) {\n      return obj.colorPickerType === \"Sketch\";\n    },\n    category: \"general\",\n    visibleIndex: 3 // Place after the Name, Title, and Color Picker Type\n  }],\n  function () {\n    return new QuestionColorPickerModel(\"\");\n  },\n  \"question\"\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Survey Completion with Server Submission\nDESCRIPTION: Implementation of survey completion handling that includes capturing user ID and sending survey results to a server endpoint using fetch API. This is a template for real-world survey data submission.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-vue.md#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n// ...\nconst SURVEY_ID = 1;\n\nconst survey = new Model(surveyJson);\nsurvey.onComplete.add(surveyComplete);\n\nconst surveyComplete = (survey: any) => {\n  const userId = /* ... Getting the user ID ... */\n  survey.setValue(\"userId\", userId);\n\n  saveSurveyResults(\n    \"https://your-web-service.com/\" + SURVEY_ID,\n    survey.data\n  )\n}\n\nfunction saveSurveyResults(url: string | URL, json: object) {\n  fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json;charset=UTF-8'\n    },\n    body: JSON.stringify(json)\n  })\n  .then(response => {\n    if (response.ok) {\n      // Handle success\n    } else {\n      // Handle error\n    }\n  })\n  .catch(error => {\n    // Handle error\n  });\n}\n</script>\n\n<template>\n  <!-- ... -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Running SurveyJS Unit Tests\nDESCRIPTION: Command to execute the unit test suite using Karma test runner.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-core/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Running ESLint\nDESCRIPTION: Command to run ESLint code linting on the project files\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/packages/survey-vue3-ui/example/README.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Enhancing Search Widget with Dynamic Property Handling in SurveyJS\nDESCRIPTION: This code snippet improves the search widget by dynamically showing/hiding the search panel based on the 'hasSearch' property. It also registers a function to handle property value changes.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/customize-question-types-create-custom-widgets.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nafterRender: function (question, el) {\n    ...\n    mainDiv.style.display = !question.hasSearch ? \"none\" : \"\";\n    question.registerFunctionOnPropertyValueChanged(\"hasSearch\",\n        function () {\n            mainDiv.style.display = !question.hasSearch ? \"none\" : \"\";\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Survey Results in Alert with React and SurveyJS\nDESCRIPTION: This snippet demonstrates how to display survey results in an alert dialog upon completion. It uses the onComplete event of the survey model to trigger the alert.\nSOURCE: https://github.com/surveyjs/survey-library/blob/master/docs/get-started-react.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// components/Survey.tsx\n// ...\nimport { useCallback } from 'react';\n\nexport default function SurveyComponent() {\n  const survey = new Model(surveyJson);\n  const alertResults = useCallback((survey: Model) => {\n    const results = JSON.stringify(survey.data);\n    alert(results);\n  }, []);\n\n  survey.onComplete.add(alertResults);\n\n  return <Survey model={survey} />;\n}\n```"
  }
]