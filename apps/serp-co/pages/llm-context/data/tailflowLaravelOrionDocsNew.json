[
  {
    "owner": "tailflow",
    "repo": "laravel-orion-docs-new",
    "content": "TITLE: Installing Laravel Orion via Composer\nDESCRIPTION: Command to install Laravel Orion package through Composer dependency manager. This is the first step to integrate Orion into your Laravel project.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/2.getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require tailflow/laravel-orion\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Orion Controller Structure\nDESCRIPTION: Initial setup for a PostsController that extends Orion's base Controller class. This is the first step to create a RESTful API controller for the Post model.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/2.getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Post;\nuse Orion\\Http\\Controllers\\Controller;\n\nclass PostsController extends Controller\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Performing CRUD Operations with Orion SDK\nDESCRIPTION: Demonstrates common API operations including retrieving, searching, creating, updating, and deleting resources using the configured model.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/2.typescript-sdk/2.getting-started.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// somewhere in your app\n\nimport {Post} from '../post.ts';\n\n// retrieve a list of posts\nconst posts = await Post.$query().get();\n\n// search for posts\nconst posts = await Post.$query().lookFor('some value').search();\n\n// create a post\nconst newPost = await Post.$query().store({\n    title: 'New post' // <-- you get a nice autocompletion here, because the attributes are typed \n});\nconsole.log(newPost.$attributes.title);  // <-- oh, and here as well\n\n// retrieve a post\nconst post = await Post.$query().find(5);\n\n// update a post\npost.$attributes.title = 'Updated post';\nawait post.$save();\n// or\nawait post.$save({title: 'Updated post'}); // <-- and here\n// or\nconst updatedPost = await Post.$query().update(5, {\n    title: 'Updated title' // <-- and, of course, here\n});\n\n// delete a post\nconst deletedPost = await Post.$query().delete(5);\n// or\nawait post.$destroy();\n```\n\n----------------------------------------\n\nTITLE: Configuring Orion Controller with Model Definition\nDESCRIPTION: Complete PostsController implementation with the required model property. This property tells Orion which model to use for the CRUD operations.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/2.getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse Orion\\Http\\Controllers\\Controller;\n\nclass PostsController extends Controller\n{\n    /**\n     * Fully-qualified model class name\n     */\n    protected $model = Post::class; // or \"App\\Models\\Post\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Laravel Orion Models with TypeScript\nDESCRIPTION: Demonstrates initialization of Orion SDK, model definition with typed attributes, and common CRUD operations including querying, creating, updating, and deleting resources.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/2.typescript-sdk/1.index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Orion} from \"@tailflow/laravel-orion/lib/orion\";\nimport {Model} from \"@tailflow/laravel-orion/lib/model\";\n\nOrion.init('https://your-api.test');\nOrion.setToken('access-token-here');\n\nexport class Post extends Model<{\n    title: string,\n    body: string\n}>\n{\n    public $resource(): string {\n        return 'posts';\n    }\n}\n\n// retrieve a list of posts\nconst posts = await Post.$query().get();\n\n// search for posts\nconst posts = await Post.$query().lookFor('some value').search();\n\n// create a post\nconst newPost = await Post.$query().store({\n    title: 'New post' // <-- you get a nice autocompletion here, because the attributes are typed \n});\nconsole.log(newPost.$attributes.title);  // <-- oh, and here as well\n\n// retrieve a post\nconst post = await Post.$query().find(5);\n\n// update a post\npost.$attributes.title = 'Updated post';\nawait post.$save();\n// or\nawait post.$save({title: 'Updated post'}); // <-- and here\n// or\nconst updatedPost = await Post.$query().update(5, {\n    title: 'Updated title' // <-- and, of course, here\n});\n\n// delete a post\nconst deletedPost = await Post.$query().delete(5);\n// or\nawait post.$destroy();\n\n// and more: search, relantionship operations, etc.\n```\n\n----------------------------------------\n\nTITLE: Querying API with Post Model\nDESCRIPTION: Examples of common API operations including retrieving, searching, creating, updating, and deleting posts.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/2.typescript-sdk/2.getting-started.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// somewhere in your app\n\nimport {Post} from '../post.ts';\n\n// retrieve a list of posts\nconst posts = await Post.$query().get();\n\n// search for posts\nconst posts = await Post.$query().lookFor('some value').search();\n\n// create a post\nconst newPost = await Post.$query().store({\n    title: 'New post' // <-- you get a nice autocompletion here, because the attributes are typed \n});\nconsole.log(newPost.$attributes.title);  // <-- oh, and here as well\n\n// retrieve a post\nconst post = await Post.$query().find(5);\n\n// update a post\npost.$attributes.title = 'Updated post';\nawait post.$save();\n// or\nawait post.$save({title: 'Updated post'}); // <-- and here\n// or\nconst updatedPost = await Post.$query().update(5, {\n    title: 'Updated title' // <-- and, of course, here\n});\n\n// delete a post\nconst deletedPost = await Post.$query().delete(5);\n// or\nawait post.$destroy();\n```\n\n----------------------------------------\n\nTITLE: Configuring the Orion Controller with Model Definition\nDESCRIPTION: Complete Orion controller implementation that specifies the model to be used. The $model property tells Orion which model to handle in API operations.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/2.getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse Orion\\Http\\Controllers\\Controller;\n\nclass PostsController extends Controller\n{\n    /**\n     * Fully-qualified model class name\n     */\n    protected $model = Post::class; // or \"App\\Models\\Post\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Rules in Laravel Orion Request Class\nDESCRIPTION: This snippet shows how to define validation rules for store and update endpoints in a custom request class extending Orion\\Http\\Requests\\Request. It demonstrates the use of commonRules and storeRules methods.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/9.security.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Requests;\n\nuse Orion\\Http\\Requests\\Request;\n\nclass PostRequest extends Request\n{\n    public function commonRules() : array\n    {\n        return [\n            'title' => 'required'\n        ];\n    }\n\n    public function storeRules() : array\n    {\n        return [\n            'status' => 'required|in:draft,review'\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Orion Resource Routes\nDESCRIPTION: Route configuration for the Orion controller. This registers all necessary CRUD routes for the 'posts' resource in the Laravel routes file.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/2.getting-started.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Support\\Facades\\Route;\nuse Orion\\Facades\\Orion;\nuse App\\Http\\Controllers\\PostsController;\n\nRoute::group(['as' => 'api.'], function() {\n    Orion::resource('posts', PostsController::class);\n});\n```\n\n----------------------------------------\n\nTITLE: Performing CRUD Operations on Related Resources in TypeScript\nDESCRIPTION: This snippet demonstrates how to perform CRUD operations on related resources using Laravel Orion SDK. It shows how to retrieve comments for a post and create a new comment associated with the post.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/2.typescript-sdk/5.relationships.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = Post.$query().find(5);\n\nconst comments = post.comments().get(); // retrieves a list of comments for post with id 5\nconst newComment = post.comments().store({body: 'Test comment'});\n// etc.\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeSave Hook in Laravel Orion Controller\nDESCRIPTION: This example demonstrates how to implement a beforeSave hook in a Laravel Orion controller for blog posts. The hook associates the currently authenticated user with a new post before saving it to the database.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/5.hooks.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Post;\nuse Orion\\Http\\Requests\\Request;\nuse Orion\\Http\\Controllers\\Controller;\n\nclass PostsController extends Controller\n{\n    /**\n     * @var string|null $model\n     */\n    protected $model = Post::class;\n\n    /**\n     * @param Request $request\n     * @param Post $post\n     */\n    protected function beforeSave(Request $request, $post)\n    {\n        $post->user()->associate($request->user());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Model Attributes and Resource Name\nDESCRIPTION: Extended model setup that includes typed attributes and resource name definition required for API integration.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/2.typescript-sdk/2.getting-started.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// post.ts\n\nimport {Model} from \"@tailflow/laravel-orion/lib/model\";\n\nexport class Post extends Model<{\n    title: string,\n    body: string\n}> {\n    public $resource(): string {\n        return 'posts';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Model Relationships in TypeScript\nDESCRIPTION: Example of defining a Post model with BelongsTo and HasMany relationships to User and Comment models respectively. Shows how to properly type relationships and implement relation methods.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/2.typescript-sdk/5.relationships.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Model} from \"@tailflow/laravel-orion/lib/model\";\nimport {BelongsTo} from \"@tailflow/laravel-orion/lib/drivers/default/relations/belongsTo\";\nimport {HasMany} from \"@tailflow/laravel-orion/lib/drivers/default/relations/hasMany\";\nimport {User} from \"./user\";\nimport {Comment} from \"./comment\";\n\nexport class Post extends Model<{\n    title: string,\n    body: string\n}, {\n    thumbnail_url: string\n}, {\n    user: User,\n    comments: Array<Comment>\n}> {\n    public user(): BelongsTo<User> {\n        return new BelongsTo(User, this);\n    }\n\n    public comments(): HasMany<Comment> {\n        return new HasMany(Comment, this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Orion SDK with API Configuration\nDESCRIPTION: Code to configure the Orion SDK by setting the API base URL and authentication token.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/2.typescript-sdk/2.getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Orion} from \"@tailflow/laravel-orion/lib/orion\";\n\nOrion.init('https://your-api.test');\nOrion.setToken('access-token-here');\n```\n\n----------------------------------------\n\nTITLE: Whitelisting Relations for API Inclusion in Laravel Orion\nDESCRIPTION: This code demonstrates how to define which relations are allowed to be included in API responses when requested via query parameters. The includes() method returns an array of relation names that can be requested by API consumers.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/8.query-parameters.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse Orion\\Http\\Controllers\\Controller;\n\nclass PostsController extends Controller\n{\n    ...\n\n    /**\n    * The relations that are allowed to be included together with a resource.\n    *\n    * @return array\n    */\n    protected function includes() : array\n    {\n        return ['user', 'user.team', 'user.profile', 'meta'];\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeSave Hook in Laravel Orion API Controller\nDESCRIPTION: This snippet demonstrates how to use the beforeSave hook in a Laravel Orion API controller to associate a blog post with the authenticated user upon creation. It shows the structure of a PostsController class extending Orion's Controller.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/5.hooks.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Post;\nuse Orion\\Http\\Requests\\Request;\nuse Orion\\Http\\Controllers\\Controller;\n\nclass PostsController extends Controller\n{\n    /**\n     * @var string|null $model\n     */\n    protected $model = Post::class;\n\n    /**\n     * @param Request $request\n     * @param Post $post\n     */\n    protected function beforeSave(Request $request, $post)\n    {\n        $post->user()->associate($request->user());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Associating and Dissociating One-to-Many Relationships in TypeScript\nDESCRIPTION: This snippet shows how to associate and dissociate resources in a One-to-Many relationship using Laravel Orion SDK. It demonstrates associating and dissociating a comment with a post.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/2.typescript-sdk/5.relationships.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = Post.$query().find(5);\n\npost.comments().associate(7);\n\n// Dissociating\nconst post = Post.$query().find(5);\n\npost.comments().dissociate(7);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Policy in Laravel Orion Model Controller\nDESCRIPTION: Demonstrates how to specify a custom policy class for a model controller by setting the $policy property, allowing for scenario-specific authorization rules.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/9.security.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Post;\nuse App\\Policies\\CustomPostPolicy;\n\nclass PostsController extends ApiController\n{\n    /**\n     * @var string $model\n     */\n    protected $model = Post::class;\n\n    /**\n     * @var string $policy\n     */\n    protected $policy = CustomPostPolicy::class;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Model Relationships in TypeScript with Laravel Orion SDK\nDESCRIPTION: This snippet demonstrates how to define relationships in a Post model, including a BelongsTo relationship with User and a HasMany relationship with Comment. It shows the structure for defining model attributes and relationships using TypeScript generics.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/2.typescript-sdk/5.relationships.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Model} from \"@tailflow/laravel-orion/lib/model\";\nimport {BelongsTo} from \"@tailflow/laravel-orion/lib/drivers/default/relations/belongsTo\";\nimport {HasMany} from \"@tailflow/laravel-orion/lib/drivers/default/relations/hasMany\";\nimport {User} from \"./user\";\nimport {Comment} from \"./comment\";\n\nexport class Post extends Model<{\n    title: string,\n    body: string\n}, {\n    thumbnail_url: string\n}, {\n    user: User,\n    comments: Array<Comment>\n}> {\n    public user(): BelongsTo<User> {\n        return new BelongsTo(User, this);\n    }\n\n    public comments(): HasMany<Comment> {\n        return new HasMany(Comment, this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relationships with Pivot Data in TypeScript\nDESCRIPTION: This snippet shows how to define a Many-to-Many relationship between Post and Tag models, including optional pivot data. It demonstrates the use of BelongsToMany relation type and how to specify pivot fields in the relationship definition.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/2.typescript-sdk/5.relationships.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Model} from \"@tailflow/laravel-orion/lib/model\";\nimport {BelongsToMany} from \"@tailflow/laravel-orion/lib/drivers/default/relations/belongsToMany\";\nimport {Tag} from \"./tag\";\n\nexport class Post extends Model<{\n   title: string,\n   body: string\n}, {\n   thumbnail_url: string\n}, {\n   tags: Array<Tag>,\n}> {\n   public tags(): BelongsToMany<Tag, {\n       pivot_field: string\n   }> {\n      return new BelongsToMany(Tag, this);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Orion Resource Route\nDESCRIPTION: Code to register an Orion resource route in the api.php routes file. This creates all the necessary RESTful API endpoints for the Posts resource.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/2.getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Support\\Facades\\Route;\nuse Orion\\Facades\\Orion;\nuse App\\Http\\Controllers\\PostsController;\n\nRoute::group(['as' => 'api.'], function() {\n    Orion::resource('posts', PostsController::class);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Parent Entity Authorization in Laravel Orion Policies\nDESCRIPTION: Shows how to implement policies that authorize relation operations by checking permissions on the parent entity. This example demonstrates parent-child entity authorization flow.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/9.security.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass PostPolicy\n{\n    public function update($user, $post)\n    {\n        return $post->user_id === $user->id;\n    }\n}\n\nclass PostMetaPolicy\n{\n    public function update($user, $postMeta, $post) // <---- $post here is the parent entity\n    {\n        // please note that the check is performed against\n        // the parent entity $post, not the relation entity $postMeta\n        return Gate::forUser($user)->inspect('update', $post); \n    }\n    \n    public function create($user, $post)\n    {\n        return Gate::forUser($user)->inspect('update', $post);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Many-to-Many Relationships\nDESCRIPTION: Examples of attaching, detaching, syncing, toggling, and updating pivot data in Many-to-Many relationships.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/2.typescript-sdk/5.relationships.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = Post.$query().find(5);\n\npost.tags().attach([2, 5, 7]);\n// or\npost.tags().attachWithFields({\n    2: {pivot_field: 'test value'},\n    5: {pivot_field: 'another value'},\n    7: {}\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = Post.$query().find(5);\n\npost.tags().attach([2, 5, 7], true);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = Post.$query().find(5);\n\npost.tags().detach([2, 5, 7]);\n// or\npost.tags().detachWithFields({\n    2: {pivot_field: 'test value'},\n    5: {pivot_field: 'another value'},\n    7: {}\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = Post.$query().find(5);\n\npost.tags().sync([2, 5, 7]);\n// or\npost.tags().syncWithFields({\n    2: {pivot_field: 'test value'},\n    5: {pivot_field: 'another value'},\n    7: {}\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = Post.$query().find(5);\n\npost.tags().sync([2, 5, 7], false);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = Post.$query().find(5);\n\npost.tags().toggle([2, 5, 7]);\n// or\npost.tags().toggleWithFields({\n    2: {pivot_field: 'test value'},\n    5: {pivot_field: 'another value'},\n    7: {}\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = Post.$query().find(5);\n\npost.tags().updatePivot(2, {pivot_field: 'test value'});\npost.tags().updatePivot(5, {pivot_field: 'test value'});\npost.tags().updatePivot(7, {pivot_field: 'test value'});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Policies in Laravel Orion Relation Controller\nDESCRIPTION: Shows how to configure custom policies for both parent and child models in a relation controller by using the $parentPolicy and $policy properties.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/9.security.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Team;\nuse App\\Policies\\CustomPostPolicy;\nuse App\\Policies\\CustomTeamPolicy;\nuse Orion\\Http\\Controllers\\RelationController;\n\nclass TeamPostsController extends RelationController\n{\n     /**\n     * @var string $model\n     */\n    protected $model = Team::class; // or \"App\\Models\\Team\"\n    \n    /**\n     * Name of the relationship as it is defined on the Post model\n     */\n    protected $relation = 'posts';\n\n    /**\n     * @var string $parentPolicy\n     */\n    protected $parentPolicy = CustomTeamPolicy::class;\n\n   /**\n     * @var string $policy\n     */\n    protected $policy = CustomPostPolicy::class;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation Rules in Laravel Orion Request\nDESCRIPTION: Shows how to define validation rules in an Orion request class by implementing commonRules and operation-specific rules methods. Different rules can be applied to store and update operations.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/9.security.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Requests;\n\nuse Orion\\Http\\Requests\\Request;\n\nclass PostRequest extends Request\n{\n    public function commonRules() : array\n    {\n        return [\n            'title' => 'required'\n        ];\n    }\n\n    public function storeRules() : array\n    {\n        return [\n            'status' => 'required|in:draft,review'\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards for Relation Inclusion in Laravel Orion\nDESCRIPTION: This snippet shows how to use wildcards to define allowed relations in Laravel Orion. Using wildcards (e.g., 'user.*') reduces the overhead of listing all possible nested relations individually.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/8.query-parameters.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse Orion\\Http\\Controllers\\Controller;\n\nclass PostsController extends Controller\n{\n    ...\n\n    /**\n    * The relations that are allowed to be included together with a resource.\n    *\n    * @return array\n    */\n    protected function includes() : array\n    {\n        return ['user.*', 'meta'];\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Axios Instance in Laravel Orion\nDESCRIPTION: Demonstrates how to customize the underlying Axios HTTP client instance with custom interceptors and configuration.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/2.typescript-sdk/3.configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport axios from 'axios';\n\nOrion.makeHttpClientUsing(() => {\n  const client = axios.create();\n\n  client.interceptors.request.use(...);\n\n  return client;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Auth Guard in Laravel Orion Controller\nDESCRIPTION: Demonstrates how to override the resolveUser method to use a custom auth guard like Sanctum instead of the default 'api' guard for authentication and authorization.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/9.security.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Post;\n\nclass PostsController extends ApiController\n{\n    /**\n     * @var string $model\n     */\n    protected $model = Post::class;\n\n     /**\n     * Retrieves currently authenticated user based on the guard.\n     *\n     * @return \\Illuminate\\Contracts\\Auth\\Authenticatable|null\n     */\n    public function resolveUser()\n    {\n        return Auth::guard('sanctum')->user();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom API Resources in Laravel Orion Controller\nDESCRIPTION: Example of how to set up custom API resource classes in a Laravel Orion controller by explicitly defining the model, resource, and collection resource classes. This overrides the default naming convention of App\\Http\\Resources\\<model>Resource.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/10.responses.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Message;\nuse App\\Http\\Resources\\CustomMessageResource;\nuse App\\Http\\Resources\\CustomMessageCollectionResource;\n\nclass MessagesController extends ApiController\n{\n    /**\n     * @var string $model\n     */\n    protected $model = Message::class;\n\n    /**\n     * @var string $resource\n     */\n    protected $resource = CustomMessageResource::class;\n\n    /**\n     * @var string $collectionResource\n     */\n    protected $collectionResource = CustomMessageCollectionResource::class;\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Store JSON Payload in Laravel Orion\nDESCRIPTION: Example of a JSON payload for batch storing multiple resources (e.g., posts) using a POST request. The payload contains a 'resources' array with objects representing each resource to be created.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/7.batch-operations.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"resources\" : [\n        {\n            \"title\" : \"My Post 1\",\n            \"body\" : \"Example body text\"\n        },\n         {\n            \"title\" : \"My Post 2\",\n            \"body\" : \"Example body text\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Search Endpoint Request Format - JSON\nDESCRIPTION: Example of a complete search request payload showing all available search options including scopes, filters, search value, and sorting parameters.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/6.search.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"scopes\" : [\n        {\"name\" : \"active\"},\n        {\"name\" : \"whereCategory\", \"parameters\" : [\"my-category\"]}\n    ],\n    \"filters\" : [\n        {\"field\" : \"created_at\", \"operator\" : \">=\", \"value\" : \"2020-01-01\"},\n        {\"type\" : \"or\", \"field\" : \"meta.source_id\", \"operator\" : \"in\", \"value\" : [1,2,3]}\n    ],\n    \"search\" : {\n        \"value\" : \"Example post\"\n    },\n    \"sort\" : [\n        {\"field\" : \"name\", \"direction\" : \"asc\"},\n        {\"field\" : \"meta.priority\", \"direction\" : \"desc\"}\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Model Class\nDESCRIPTION: Initial setup of a model class that extends from the Orion Model base class.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/2.typescript-sdk/2.getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// post.ts\n\nimport {Model} from \"@tailflow/laravel-orion/lib/model\";\n\nexport class Post extends Model {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Orion TypeScript SDK\nDESCRIPTION: Initialize the Orion SDK with API URL and authentication token.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/2.typescript-sdk/2.getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Orion} from \"@tailflow/laravel-orion/lib/orion\";\n\nOrion.init('https://your-api.test');\nOrion.setToken('access-token-here');\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Orion Controller\nDESCRIPTION: Initial setup of a controller that extends Orion's base Controller class. This is the first step in creating a RESTful API for the Post model.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/2.getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Post;\nuse Orion\\Http\\Controllers\\Controller;\n\nclass PostsController extends Controller\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Token in Laravel Orion\nDESCRIPTION: Configures the access token for authenticated API requests using Sanctum authentication.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/2.typescript-sdk/3.configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {AuthDriver} from '@tailflow/laravel-orion/lib/drivers/default/enums/authDriver';\n\nOrion.init('https://your-api.test', 'api', AuthDriver.Sanctum, 'test-acess-token');\n// or\nOrion.setToken('test-access-token');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Soft-Deleted Resources in Laravel Orion\nDESCRIPTION: This example demonstrates how to include soft-deleted resources in an API response using the 'with_trashed' query parameter. This works for both standard and relation resources on index, search, and show endpoints.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/8.query-parameters.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n(GET) https://myapp.com/api/posts?with_trashed=true\n```\n\n----------------------------------------\n\nTITLE: Implementing Sanctum SPA Authentication in Laravel Orion\nDESCRIPTION: Sets up CSRF protection required for Sanctum authentication in Single Page Applications before making API requests.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/2.typescript-sdk/3.configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {AuthDriver} from '@tailflow/laravel-orion/lib/drivers/default/enums/authDriver';\n\nOrion.init('https://your-api.test');\nOrion.setAuthDriver(AuthDriver.Sanctum);\n\ntry {\n    await Orion.csrf();\n    // now you can make requests to the API\n    const posts = await Post.$query().get();\n} catch (error) {\n    console.error('Unable to retrieve CSRF cookie.');\n}\n```\n\n----------------------------------------\n\nTITLE: Performing CRUD Operations on Relations\nDESCRIPTION: Example of performing basic CRUD operations on related resources using the query builder instance.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/2.typescript-sdk/5.relationships.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = Post.$query().find(5);\n\nconst comments = post.comments().get(); // retrieves a list of comments for post with id 5\nconst newComment = post.comments().store({body: 'Test comment'});\n// etc.\n```\n\n----------------------------------------\n\nTITLE: Whitelisting JSON Fields in Laravel Orion Controller\nDESCRIPTION: PHP code showing how to whitelist JSON fields for filtering, searching, and sorting in an Orion controller. It demonstrates the arrow notation for specifying fields inside a JSON/JSONB column.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/0.prologue.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse Orion\\Http\\Controllers\\Controller;\n\n// options field here is a json/jsonb field of the Post model\n// visible and key fields are fields inside that json/jsonb field \nclass PostsController extends Controller\n{\n    public function filterableBy() : array\n    {\n        return ['options->visible'];\n    }\n\n    public function searchableBy() : array\n    {\n        return [ 'options->key'];\n    }\n\n    public function sortableBy() : array\n    {\n         return ['options->key'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hook Method Signature After Laravel Orion 2.0\nDESCRIPTION: Example of the updated hook method signature in Orion 2.0, which now includes the parent entity as a parameter. This shows the new implementation required when upgrading relationship controllers.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/0.prologue.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nprotected function afterSave(Request $request, Model $parentEntity, Model $entity)\n```\n\n----------------------------------------\n\nTITLE: Batch Update JSON Request Example\nDESCRIPTION: Example JSON payload for updating multiple resources in a single batch request. Resources are identified by their IDs as object keys.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/7.batch-operations.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"resources\" : {\n        \"5\" : {\n            \"title\" : \"My Post 1 (updated)\",\n            \"body\" : \"Example updated body text\"\n        },\n        \"6\": {\n            \"title\" : \"My Post 2\",\n            \"body\" : \"Example body text\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Relations Search in Laravel Orion 2.0\nDESCRIPTION: Example demonstrating the new ability to search on deeply nested relations in Orion 2.0. It shows how to reference fields several relations deep using dot notation.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/0.prologue.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function searchableBy() : array\n{\n    return ['user.name', 'user.location.address.postalcode']; // postalcode field of the deeply nested user.location.address relation\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Hook Method Signature in Laravel Orion 2.0\nDESCRIPTION: Example of the updated hook method signature in Orion 2.0, which now includes the parent entity as a parameter. This applies to relationship controllers where a parent-child relationship exists.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/0.prologue.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nprotected function afterSave(Request $request, Model $parentEntity, Model $entity)\n```\n\n----------------------------------------\n\nTITLE: Custom User Resolution for Authorization in Laravel Orion\nDESCRIPTION: This code shows how to override the resolveUser method in a controller to use a custom auth guard (e.g., Sanctum) for resolving the authenticated user during authorization checks.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/9.security.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Post;\n\nclass PostsController extends ApiController\n{\n    /**\n     * @var string $model\n     */\n    protected $model = Post::class;\n\n     /**\n     * Retrieves currently authenticated user based on the guard.\n     *\n     * @return \\Illuminate\\Contracts\\Auth\\Authenticatable|null\n     */\n    public function resolveUser()\n    {\n        return Auth::guard('sanctum')->user();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Delete JSON Payload in Laravel Orion\nDESCRIPTION: Example of a JSON payload for batch deleting multiple resources (e.g., posts) using a DELETE request. The payload contains a 'resources' array with the IDs of the resources to be deleted.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/7.batch-operations.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"resources\" : [5,6]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relationships with Pivot Fields\nDESCRIPTION: Example of defining a Many-to-Many relationship between Post and Tag models with custom pivot fields. Shows how to properly type pivot attributes.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/2.typescript-sdk/5.relationships.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Model} from \"@tailflow/laravel-orion/lib/model\";\nimport {BelongsToMany} from \"@tailflow/laravel-orion/lib/drivers/default/relations/belongsToMany\";\nimport {Tag} from \"./tag\";\n\nexport class Post extends Model<{\n   title: string,\n   body: string\n}, {\n   thumbnail_url: string\n}, {\n   tags: Array<Tag>,\n}> {\n   public tags(): BelongsToMany<Tag, {\n       pivot_field: string\n   }> {\n      return new BelongsToMany(Tag, this);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Restore JSON Payload in Laravel Orion\nDESCRIPTION: Example of a JSON payload for batch restoring multiple soft-deleted resources (e.g., posts) using a POST request. The payload contains a 'resources' array with the IDs of the resources to be restored.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/7.batch-operations.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"resources\" : [5,6]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Orion via Composer\nDESCRIPTION: Command to install Laravel Orion package using Composer. Requires PHP 7.3+ and Laravel 5.7+.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/2.getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require tailflow/laravel-orion\n```\n\n----------------------------------------\n\nTITLE: Defining Always Included Relations in Laravel Orion\nDESCRIPTION: This code shows how to define relations that should be automatically loaded with every resource without requiring explicit inclusion via query parameters. The alwaysIncludes() method defines these default relations.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/8.query-parameters.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse Orion\\Http\\Controllers\\Controller;\n\nclass PostsController extends Controller\n{\n    ...\n\n    /**\n    * The relations that are loaded by default together with a resource.\n    *\n    * @return array\n    */\n    protected function alwaysIncludes() : array\n    {\n        return ['user', 'meta'];\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting API Prefix in Laravel Orion\nDESCRIPTION: Configures the API prefix for all endpoints. Default is 'api' but can be customized to any path like 'api/v1'.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/2.typescript-sdk/3.configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nOrion.init('https://your-api.test', 'api/v1');\n// or\nOrion.setPrefix('api/v1');\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Post Model\nDESCRIPTION: Initial setup of a Post model class extending the base Model class.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/2.typescript-sdk/2.getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// post.ts\n\nimport {Model} from \"@tailflow/laravel-orion/lib/model\";\n\nexport class Post extends Model {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Token\nDESCRIPTION: Configures the authentication token for API requests\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/2.typescript-sdk/3.configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {AuthDriver} from '@tailflow/laravel-orion/lib/drivers/default/enums/authDriver';\n\nOrion.init('https://your-api.test', 'api', AuthDriver.Sanctum, 'test-acess-token');\n// or\nOrion.setToken('test-access-token');\n```\n\n----------------------------------------\n\nTITLE: Force Deleting Soft-Deleted Resources in Laravel Orion\nDESCRIPTION: This example shows how to permanently delete a soft-deleted resource using the 'force' query parameter. This parameter works on the destroy endpoint for both standard and relation resources.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/8.query-parameters.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n(DELETE) https://myapp.com/api/posts/5?force=true\n```\n\n----------------------------------------\n\nTITLE: Defining Post Model with Attributes\nDESCRIPTION: Extended Post model implementation with typed attributes and resource name definition.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/2.typescript-sdk/2.getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// post.ts\n\nimport {Model} from \"@tailflow/laravel-orion/lib/model\";\n\nexport class Post extends Model<{\n    title: string,\n    body: string\n}> {\n    public $resource(): string {\n        return 'posts';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available API Routes\nDESCRIPTION: Output of the 'route:list' command showing all registered API routes for the Posts resource. Displays HTTP methods, URIs, route names, controller actions, and middleware.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/2.getting-started.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n+--------+-----------+-------------------------------------------------+----------------------------------------+---------------------------------------------------------------------------+-------------------------------------------------+\n| Domain | Method    | URI                                             | Name                                   | Action                                                                    | Middleware                                      |\n+--------+-----------+-------------------------------------------------+----------------------------------------+---------------------------------------------------------------------------+-------------------------------------------------+\n...\n|        | GET|HEAD  | api/posts                                       | api.posts.index                        | App\\Http\\Controllers\\Api\\PostsController@index                            | api                                             |\n|        | POST      | api/posts/search                                | api.posts.search                       | App\\Http\\Controllers\\Api\\PostsController@index                            | api                                             |\n|        | POST      | api/posts                                       | api.posts.store                        | App\\Http\\Controllers\\Api\\PostsController@store                            | api                                             |\n|        | GET|HEAD  | api/posts/{post}                                | api.posts.show                         | App\\Http\\Controllers\\Api\\PostsController@show                             | api                                             |  \n|        | PUT|PATCH | api/posts/{post}                                | api.posts.update                       | App\\Http\\Controllers\\Api\\PostsController@update                           | api                                             |\n|        | DELETE    | api/posts/{post}                                | api.posts.destroy                      | App\\Http\\Controllers\\Api\\PostsController@destroy                          | api                                             |\n|        | POST      | api/posts/batch                                 | api.posts.batchStore                   | App\\Http\\Controllers\\Api\\PostsController@batchStore                       | api                                             |\n|        | PATCH     | api/posts/batch                                 | api.posts.batchUpdate                  | App\\Http\\Controllers\\Api\\PostsController@batchUpdate                      | api                                             |\n|        | DELETE    | api/posts/batch                                 | api.posts.batchDestroy                 | App\\Http\\Controllers\\Api\\PostsController@batchDestroy                     | api                                             |\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom API Resources in Laravel Orion Controller\nDESCRIPTION: This example demonstrates how to explicitly define custom resource classes in a Laravel Orion API controller. It shows setting the model, individual resource, and collection resource classes using protected properties.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/10.responses.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Message;\nuse App\\Http\\Resources\\CustomMessageResource;\nuse App\\Http\\Resources\\CustomMessageCollectionResource;\n\nclass MessagesController extends ApiController\n{\n    /**\n     * @var string $model\n     */\n    protected $model = Message::class;\n\n    /**\n     * @var string $resource\n     */\n    protected $resource = CustomMessageResource::class;\n\n    /**\n     * @var string $collectionResource\n     */\n    protected $collectionResource = CustomMessageCollectionResource::class;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Exposed Scopes - PHP\nDESCRIPTION: Controller configuration to expose specific query scopes that can be used via the API endpoint.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/6.search.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse Orion\\Http\\Controllers\\Controller;\n\nclass PostsController extends Controller\n{\n    ...\n\n    /**\n     * The list of available query scopes.\n     *\n     * @return array\n     */\n    protected function exposedScopes() : array\n    {\n        return ['active', 'whereCategory'];\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Specifications in Laravel Orion\nDESCRIPTION: Command to generate OpenAPI specifications file in the storage/app/specs directory. Creates a specs.json file with API documentation.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/11.specifications.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan orion:specs\n```\n\n----------------------------------------\n\nTITLE: Configuring Searchable Fields - PHP\nDESCRIPTION: Controller configuration to define which fields should be included in keyword search operations.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/6.search.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse Orion\\Http\\Controllers\\Controller;\n\nclass PostsController extends Controller\n{\n    ...\n\n    /**\n     * The attributes that are used for searching.\n     *\n     * @return array\n     */\n    protected function searchableBy() : array\n    {\n        return ['title', 'description', 'user.name'];\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Search with ilike Operator in Laravel Orion 2.0\nDESCRIPTION: Example JSON request demonstrating the new 'ilike' operator support in Orion 2.0. This allows for case-insensitive pattern matching in filter operations.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/0.prologue.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n// (POST) https://myapp.com/api/posts/search\n{\n    \"filters\" : [\n        {\"field\" : \"title\", \"operator\" : \"ilike\", \"value\" : \"example post\"},\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sortable Fields - PHP\nDESCRIPTION: Controller configuration to specify which fields can be used for sorting results in API requests.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/6.search.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse Orion\\Http\\Controllers\\Controller;\n\nclass PostsController extends Controller\n{\n    ...\n\n    /**\n     * The attributes that are used for sorting.\n     *\n     * @return array\n     */\n    protected function sortableBy() : array\n    {\n         return ['id', 'name', 'meta.priority'];\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Fields Search Request Example in Laravel Orion 2.0\nDESCRIPTION: Example of a search request that utilizes the new JSON fields search capability in Orion 2.0. The request includes filtering on JSON field values, general search, and sorting by JSON field properties.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/0.prologue.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// (POST) https://myapp.com/api/posts/search\n{\n    \"filters\" : [\n        {\"field\" : \"options->visible\", \"operator\" : \">=\", \"value\" : true},\n    ],\n    \"search\" : {\n        \"value\" : \"Example post\"\n    },\n    \"sort\" : [\n        {\"field\" : \"options->key\", \"direction\" : \"asc\"},\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Store JSON Request Example\nDESCRIPTION: Example JSON payload for creating multiple resources in a single batch request. Endpoint expects resources array containing objects with resource properties.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/7.batch-operations.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"resources\" : [\n        {\n            \"title\" : \"My Post 1\",\n            \"body\" : \"Example body text\"\n        },\n         {\n            \"title\" : \"My Post 2\",\n            \"body\" : \"Example body text\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Filterable Fields - PHP\nDESCRIPTION: Controller configuration to specify which fields can be used for filtering in API requests.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/6.search.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse Orion\\Http\\Controllers\\Controller;\n\nclass PostsController extends Controller\n{\n    ...\n\n    /**\n    * The attributes that are used for filtering.\n    *\n    * @return array\n    */\n    protected function filterableBy() : array\n    {\n        return ['id', 'title', 'user.id', 'meta.source_id', 'created_at'];\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Delete JSON Request Example\nDESCRIPTION: Example JSON payload for deleting multiple resources in a single batch request. Expects an array of resource IDs to delete.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/7.batch-operations.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"resources\" : [5,6]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Specifications with Laravel Orion 2.0\nDESCRIPTION: Command to automatically generate OpenAPI specifications for all Orion-powered endpoints. This new feature allows developers to create API documentation with a simple artisan command.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/0.prologue.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan orion:specs\n```\n\n----------------------------------------\n\nTITLE: Batch Restore JSON Request Example\nDESCRIPTION: Example JSON payload for restoring multiple soft-deleted resources in a single batch request. Expects an array of resource IDs to restore.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/7.batch-operations.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"resources\" : [5,6]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Batch Operations in Laravel Orion\nDESCRIPTION: PHP code snippet demonstrating how to disable specific batch operations (e.g., batchStore and batchUpdate) for a resource using the 'except' method in Laravel Orion.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/7.batch-operations.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nOrion::resource('posts', PostsController::class)->except(['batchStore', 'batchUpdate']);\n```\n\n----------------------------------------\n\nTITLE: Disabling All Batch Operations in Laravel Orion\nDESCRIPTION: PHP code example showing how to disable all batch operations for a resource using the withoutBatch method.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/7.batch-operations.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nOrion::resource('posts', PostsController::class)->withoutBatch();\n```\n\n----------------------------------------\n\nTITLE: Disabling All Batch Operations in Laravel Orion\nDESCRIPTION: PHP code snippet showing how to disable all batch operations for a resource using the 'withoutBatch' method in Laravel Orion.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/7.batch-operations.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nOrion::resource('posts', PostsController::class)->withoutBatch();\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Request Class in Laravel Orion Controller\nDESCRIPTION: Demonstrates how to specify a custom request class for validation by setting the $request property, which overrides the default naming convention-based resolution.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/9.security.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Message;\nuse App\\Http\\Requests\\CustomMessageRequest;\n\nclass MessagesController extends ApiController\n{\n    /**\n     * @var string $model\n     */\n    protected $model = Message::class;\n\n    /**\n    * @var string $request\n    */\n    protected $request = CustomMessageRequest::class;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing One-to-Many Relationships\nDESCRIPTION: Examples of associating and dissociating resources in One-to-Many relationships.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/2.typescript-sdk/5.relationships.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = Post.$query().find(5);\n\npost.comments().associate(7);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = Post.$query().find(5);\n\npost.comments().dissociate(7);\n```\n\n----------------------------------------\n\nTITLE: Disabling Authorization in Laravel Orion Controller\nDESCRIPTION: Shows how to disable authorization checks on a controller by using the DisableAuthorization trait. This is not recommended for most cases but can be useful in specific situations.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/9.security.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Post;\nuse Orion\\Concerns\\DisableAuthorization;\n\nclass PostsController extends ApiController\n{\n    use DisableAuthorization;\n\n    /**\n     * @var string $model\n     */\n    protected $model = Post::class;\n}\n```\n\n----------------------------------------\n\nTITLE: Including Relations in Laravel Orion Queries - TypeScript\nDESCRIPTION: Demonstrates how to include related models in API queries using the with() method. Shows how to access multiple relations (user and comments) and retrieve them from the response object using $relations property.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/2.typescript-sdk/6.query-parameters.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = await Post.$query().with(['user', 'comments']).find(5); \n\nconsole.log(post.$relations.user);\nconsole.log(post.$relations.comments);\n```\n\n----------------------------------------\n\nTITLE: Merging Existing OpenAPI Specifications\nDESCRIPTION: Command to merge existing OpenAPI specifications with newly generated ones. Requires specifying the path to the existing specification file.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/11.specifications.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan orion:specs --path=\"specs/existing-specs.json\"\n```\n\n----------------------------------------\n\nTITLE: Including Soft Deleted Resources - TypeScript\nDESCRIPTION: Shows how to include soft deleted (trashed) resources in query results using the withTrashed() method.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/2.typescript-sdk/6.query-parameters.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.$query().withTrashed().get();\n```\n\n----------------------------------------\n\nTITLE: Installing Orion TypeScript SDK via NPM\nDESCRIPTION: Command to install the Laravel Orion package using NPM package manager.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/2.typescript-sdk/2.getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tailflow/laravel-orion --save\n```\n\n----------------------------------------\n\nTITLE: Querying Only Soft Deleted Resources - TypeScript\nDESCRIPTION: Demonstrates how to retrieve only soft deleted (trashed) resources using the onlyTrashed() method.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/2.typescript-sdk/6.query-parameters.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.$query().onlyTrashed().get();\n```\n\n----------------------------------------\n\nTITLE: Installing Orion TypeScript SDK via Yarn\nDESCRIPTION: Command to install the Laravel Orion package using Yarn package manager.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/2.typescript-sdk/2.getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @tailflow/laravel-orion\n```\n\n----------------------------------------\n\nTITLE: Initializing API URL in Laravel Orion\nDESCRIPTION: Sets the base URL for the API endpoint\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/2.typescript-sdk/3.configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nOrion.init('https://your-api.test');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Only Soft-Deleted Resources in Laravel Orion\nDESCRIPTION: Demonstrates how to fetch only soft-deleted (trashed) resources using the onlyTrashed() method. This allows you to specifically target resources that have been soft-deleted without retrieving active ones.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/2.typescript-sdk/6.query-parameters.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.$query().onlyTrashed().get();\n```\n\n----------------------------------------\n\nTITLE: Customizing OpenAPI Specification File Path\nDESCRIPTION: Command to generate OpenAPI specifications with a custom file path using the --path option. Allows specifying a relative path for the output file.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/11.specifications.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan orion:specs --path=\"specs/example.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Setting API Prefix in Laravel Orion\nDESCRIPTION: Configures the API prefix for endpoints, allowing customization of the default 'api' prefix\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/2.typescript-sdk/3.configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nOrion.init('https://your-api.test', 'api/v1');\n// or\nOrion.setPrefix('api/v1');\n```\n\n----------------------------------------\n\nTITLE: Single-Level Relation Search in Laravel Orion\nDESCRIPTION: Example showing how to define searchable fields from direct relations in an Orion controller. This represents the previous approach limited to one level of relations.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/0.prologue.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function searchableBy() : array\n{\n    return ['user.name']; // name field of the user relation\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sanctum CSRF Protection\nDESCRIPTION: Sets up CSRF protection for SPA authentication with Laravel Sanctum\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/2.typescript-sdk/3.configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {AuthDriver} from '@tailflow/laravel-orion/lib/drivers/default/enums/authDriver';\n\nOrion.init('https://your-api.test');\nOrion.setAuthDriver(AuthDriver.Sanctum);\n\ntry {\n    await Orion.csrf();\n    // now you can make requests to the API\n    const posts = await Post.$query().get();\n} catch (error) {\n    console.error('Unable to retrieve CSRF cookie.');\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Orion Configuration File in Laravel\nDESCRIPTION: Command to publish the new Orion configuration file introduced in version 2.0. This file allows customization of the default auth driver and API specification settings.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/0.prologue.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=orion-config\n```\n\n----------------------------------------\n\nTITLE: Customizing Axios HTTP Client\nDESCRIPTION: Demonstrates how to customize the underlying Axios HTTP client instance with custom interceptors\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/2.typescript-sdk/3.configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport axios from 'axios';\n\nOrion.makeHttpClientUsing(() => {\n  const client = axios.create();\n\n  client.interceptors.request.use(...);\n\n  return client;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing API URL in Laravel Orion\nDESCRIPTION: Sets the base API URL for all Orion client requests.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/2.typescript-sdk/3.configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nOrion.init('https://your-api.test');\n```\n\n----------------------------------------\n\nTITLE: Hook Method Signature Before Laravel Orion 2.0\nDESCRIPTION: Example of a hook method signature in Orion versions prior to 2.0, which only included the request and entity parameters. This represents the old implementation that needs to be updated when upgrading.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/0.prologue.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nprotected function afterSave(Request $request, Model $entity)\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Driver in Laravel Orion\nDESCRIPTION: Sets up the authentication driver for the API client, using the AuthDriver enum from the Orion package.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/2.typescript-sdk/3.configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {AuthDriver} from '@tailflow/laravel-orion/lib/drivers/default/enums/authDriver';\n\nOrion.init('https://your-api.test', 'api', AuthDriver.Sanctum);\n// or\nOrion.setAuthDriver(AuthDriver.Sanctum);\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Batch Operations in Laravel Orion\nDESCRIPTION: PHP code example showing how to disable specific batch operations using the except method in Laravel Orion resource configuration.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/7.batch-operations.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nOrion::resource('posts', PostsController::class)->except(['batchStore', 'batchUpdate']);\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Info and Servers in Laravel Orion\nDESCRIPTION: Configuration options for customizing the info and servers fields in the OpenAPI specifications through the orion.php config file. Includes settings for API title, description, contact information, and server URLs.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/11.specifications.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'specs' => [\n    'info' => [\n        'title' => env('APP_NAME'),\n        'description' => null,\n        'terms_of_service' => null,\n        'contact' => [\n            'name' => null,\n            'url' => null,\n            'email' => null,\n        ],\n        'license' => [\n            'name' => null,\n            'url' => null,\n        ],\n            'version' => '1.0.0',\n    ],\n    'servers' => [\n        ['url' => env('APP_URL').'/api', 'description' => 'Default Environment'],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Driver\nDESCRIPTION: Sets up the authentication driver using Laravel Sanctum\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/2.typescript-sdk/3.configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {AuthDriver} from '@tailflow/laravel-orion/lib/drivers/default/enums/authDriver';\n\nOrion.init('https://your-api.test', 'api', AuthDriver.Sanctum);\n// or\nOrion.setAuthDriver(AuthDriver.Sanctum);\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAPI Specification Format\nDESCRIPTION: Command to generate OpenAPI specifications in JSON format instead of the default YAML using the --format option.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/11.specifications.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan orion:specs --format=\"json\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Laravel Orion Configuration\nDESCRIPTION: Command to publish the Orion configuration file to customize OpenAPI specifications settings.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/11.specifications.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=orion-config\n```\n\n----------------------------------------\n\nTITLE: Publishing Orion Configuration Files\nDESCRIPTION: Command to publish Orion configuration files to your Laravel application, allowing you to customize the package settings.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/2.getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=orion-config\n```\n\n----------------------------------------\n\nTITLE: Batch Update JSON Payload in Laravel Orion\nDESCRIPTION: Example of a JSON payload for batch updating multiple resources (e.g., posts) using a PATCH request. The payload contains a 'resources' object where keys are resource IDs and values are objects representing the updated resource data.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/1.guide/7.batch-operations.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"resources\" : {\n        \"5\" : {\n            \"title\" : \"My Post 1 (updated)\",\n            \"body\" : \"Example updated body text\"\n        },\n        \"6\": {\n            \"title\" : \"My Post 2\",\n            \"body\" : \"Example body text\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Laravel Orion Model with TypeScript\nDESCRIPTION: Demonstrates how to initialize the Orion SDK, define a typed Post model, and perform CRUD operations. Shows model configuration, API initialization, and various query operations including searching, creating, updating, and deleting posts with type safety.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/2.typescript-sdk/1.index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Orion} from \"@tailflow/laravel-orion/lib/orion\";\nimport {Model} from \"@tailflow/laravel-orion/lib/model\";\n\nOrion.init('https://your-api.test');\nOrion.setToken('access-token-here');\n\nexport class Post extends Model<{\n    title: string,\n    body: string\n}>\n{\n    public $resource(): string {\n        return 'posts';\n    }\n}\n\n// retrieve a list of posts\nconst posts = await Post.$query().get();\n\n// search for posts\nconst posts = await Post.$query().lookFor('some value').search();\n\n// create a post\nconst newPost = await Post.$query().store({\n    title: 'New post' // <-- you get a nice autocompletion here, because the attributes are typed \n});\nconsole.log(newPost.$attributes.title);  // <-- oh, and here as well\n\n// retrieve a post\nconst post = await Post.$query().find(5);\n\n// update a post\npost.$attributes.title = 'Updated post';\nawait post.$save();\n// or\nawait post.$save({title: 'Updated post'}); // <-- and here\n// or\nconst updatedPost = await Post.$query().update(5, {\n    title: 'Updated title' // <-- and, of course, here\n});\n\n// delete a post\nconst deletedPost = await Post.$query().delete(5);\n// or\nawait post.$destroy();\n\n// and more: search, relantionship operations, etc.\n```\n\n----------------------------------------\n\nTITLE: Viewing Available API Routes with Artisan\nDESCRIPTION: Output of the route:list Artisan command showing all automatically generated API endpoints for the Posts resource. This displays the full set of RESTful routes created by Orion.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/2.getting-started.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n+--------+-----------+-------------------------------------------------+----------------------------------------+---------------------------------------------------------------------------+-------------------------------------------------+\n| Domain | Method    | URI                                             | Name                                   | Action                                                                    | Middleware                                      |\n+--------+-----------+-------------------------------------------------+----------------------------------------+---------------------------------------------------------------------------+-------------------------------------------------+\n...\n|        | GET|HEAD  | api/posts                                       | api.posts.index                        | App\\Http\\Controllers\\Api\\PostsController@index                            | api                                             |\n|        | POST      | api/posts/search                                | api.posts.search                       | App\\Http\\Controllers\\Api\\PostsController@index                            | api                                             |\n|        | POST      | api/posts                                       | api.posts.store                        | App\\Http\\Controllers\\Api\\PostsController@store                            | api                                             |\n|        | GET|HEAD  | api/posts/{post}                                | api.posts.show                         | App\\Http\\Controllers\\Api\\PostsController@show                             | api                                             |  \n|        | PUT|PATCH | api/posts/{post}                                | api.posts.update                       | App\\Http\\Controllers\\Api\\PostsController@update                           | api                                             |\n|        | DELETE    | api/posts/{post}                                | api.posts.destroy                      | App\\Http\\Controllers\\Api\\PostsController@destroy                          | api                                             |\n|        | POST      | api/posts/batch                                 | api.posts.batchStore                   | App\\Http\\Controllers\\Api\\PostsController@batchStore                       | api                                             |\n|        | PATCH     | api/posts/batch                                 | api.posts.batchUpdate                  | App\\Http\\Controllers\\Api\\PostsController@batchUpdate                      | api                                             |\n|        | DELETE    | api/posts/batch                                 | api.posts.batchDestroy                 | App\\Http\\Controllers\\Api\\PostsController@batchDestroy                     | api                                             |\n```\n\n----------------------------------------\n\nTITLE: Making API Request with Included Relations in Laravel Orion\nDESCRIPTION: This example shows how to make an API request that includes related resources. The 'include' query parameter accepts a comma-separated list of relations that should be included in the response.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/8.query-parameters.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n(GET) https://myapp.com/api/posts?include=user,meta\n```\n\n----------------------------------------\n\nTITLE: Managing Many-to-Many Relationships in TypeScript with Laravel Orion SDK\nDESCRIPTION: This snippet demonstrates various operations on Many-to-Many relationships, including attaching, detaching, syncing, and toggling resources. It shows how to perform these operations with and without pivot data, and how to handle duplicates and detaching behavior.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/2.typescript-sdk/5.relationships.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = Post.$query().find(5);\n\n// Attaching\npost.tags().attach([2, 5, 7]);\n// or\npost.tags().attachWithFields({\n    2: {pivot_field: 'test value'},\n    5: {pivot_field: 'another value'},\n    7: {}\n});\n\n// Attaching with duplicates\npost.tags().attach([2, 5, 7], true);\n\n// Detaching\npost.tags().detach([2, 5, 7]);\n// or\npost.tags().detachWithFields({\n    2: {pivot_field: 'test value'},\n    5: {pivot_field: 'another value'},\n    7: {}\n});\n\n// Syncing\npost.tags().sync([2, 5, 7]);\n// or\npost.tags().syncWithFields({\n    2: {pivot_field: 'test value'},\n    5: {pivot_field: 'another value'},\n    7: {}\n});\n\n// Syncing without detaching\npost.tags().sync([2, 5, 7], false);\n\n// Toggling\npost.tags().toggle([2, 5, 7]);\n// or\npost.tags().toggleWithFields({\n    2: {pivot_field: 'test value'},\n    5: {pivot_field: 'another value'},\n    7: {}\n});\n\n// Updating Pivot\npost.tags().updatePivot(2, {pivot_field: 'test value'});\npost.tags().updatePivot(5, {pivot_field: 'test value'});\npost.tags().updatePivot(7, {pivot_field: 'test value'});\n```\n\n----------------------------------------\n\nTITLE: Custom Request Class Configuration in Laravel Orion Controller\nDESCRIPTION: This example illustrates how to explicitly set a custom request class for a controller when the default naming convention is not followed. It uses the $request property to specify the fully-qualified request class name.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/9.security.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Message;\nuse App\\Http\\Requests\\CustomMessageRequest;\n\nclass MessagesController extends ApiController\n{\n    /**\n     * @var string $model\n     */\n    protected $model = Message::class;\n\n    /**\n    * @var string $request\n    */\n    protected $request = CustomMessageRequest::class;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Authorization in Laravel Orion Controller\nDESCRIPTION: This snippet demonstrates how to disable authorization checks on a particular controller using the DisableAuthorization trait. It's not recommended for most situations but can be useful in specific cases.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/1.guide/9.security.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Post;\nuse Orion\\Concerns\\DisableAuthorization;\n\nclass PostsController extends ApiController\n{\n    use DisableAuthorization;\n\n    /**\n     * @var string $model\n     */\n    protected $model = Post::class;\n}\n```\n\n----------------------------------------\n\nTITLE: Including Soft-Deleted Resources in Laravel Orion Queries\nDESCRIPTION: Shows how to retrieve both active and soft-deleted (trashed) resources using the withTrashed() method. This is useful when you need to access resources that have been marked as deleted but still exist in the database.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/2.typescript-sdk/6.query-parameters.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.$query().withTrashed().get();\n```\n\n----------------------------------------\n\nTITLE: Including Relations in Laravel Orion Queries with TypeScript\nDESCRIPTION: Demonstrates how to fetch a resource with its related models by using the with() method in the query chain. This example includes both 'user' and 'comments' relations when retrieving a post, making them accessible via the $relations property of the returned model.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/2.typescript-sdk/6.query-parameters.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = await Post.$query().with(['user', 'comments']).find(5); \n\nconsole.log(post.$relations.user);\nconsole.log(post.$relations.comments);\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Orion SDK using Package Managers\nDESCRIPTION: Commands to install the Laravel Orion SDK using NPM or Yarn package managers.\nSOURCE: https://github.com/tailflow/laravel-orion-docs-new/blob/main/content/v1.x/2.typescript-sdk/2.getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tailflow/laravel-orion --save\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @tailflow/laravel-orion\n```"
  }
]