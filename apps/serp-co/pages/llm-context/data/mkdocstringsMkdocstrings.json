[
  {
    "owner": "mkdocstrings",
    "repo": "mkdocstrings",
    "content": "TITLE: Using Autodoc Syntax in Markdown (Markdown)\nDESCRIPTION: This Markdown example demonstrates using the `:::` syntax to document a Python class. It shows how to specify the `python` handler and pass options like `members` to select specific methods to include, along with options to control heading level (`show_root_heading: false`) and source code display (`show_source: false`). This is a typical use case for including detailed API documentation.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n# Documentation for `MyClass`\n\n::: my_package.my_module.MyClass\n    handler: python\n    options:\n      members:\n        - method_a\n        - method_b\n      show_root_heading: false\n      show_source: false\n```\n\n----------------------------------------\n\nTITLE: Configuring mkdocstrings in mkdocs.yml (YAML)\nDESCRIPTION: Shows a minimal mkdocs.yml configuration for a MkDocs project using the Material theme and enabling the mkdocstrings plugin. Dependencies: MkDocs, mkdocstrings, selected handler, and optionally mkdocs-material theme. Key parameters: site_name, theme, plugins. Input: YAML configuration file. Output: Activates mkdocstrings during MkDocs site build; enables documentation injection.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/README.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsite_name: \"My Library\"\n\ntheme:\n  name: \"material\"\n\nplugins:\n- search\n- mkdocstrings\n```\n\n----------------------------------------\n\nTITLE: Configuring MkDocs Navigation (YAML)\nDESCRIPTION: This standard MkDocs `mkdocs.yml` configuration snippet defines the primary navigation structure for the site. It maps a human-readable title (\"My page\") to the corresponding Markdown file (`my_page.md`), which contains the `mkdocstrings` autodoc syntax. This is a prerequisite for the documented page to be included in the site build.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nnav:\n  - \"My page\": my_page.md\n```\n\n----------------------------------------\n\nTITLE: Configuring Global mkdocstrings Options (YAML)\nDESCRIPTION: This `mkdocs.yml` snippet demonstrates configuring the `mkdocstrings` plugin globally under the `plugins` section. It shows options like `enabled`, `custom_templates`, `default_handler`, and a nested `handlers` section for language-specific global options, including using an environment variable (`!ENV`) for the `enabled` flag. These settings apply unless overridden locally.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nplugins:\n- mkdocstrings:\n    enabled: !ENV [ENABLE_MKDOCSTRINGS, true]\n    custom_templates: templates\n    default_handler: python\n    handlers:\n      python:\n        options:\n          show_source: false\n```\n\n----------------------------------------\n\nTITLE: Defining mkdocstrings Identifier (Markdown)\nDESCRIPTION: This snippet defines the core syntax for `mkdocstrings` autodocumentation in Markdown files. It specifies using `:::` followed by the object `identifier` and an optional indented YAML block for configuration options passed to the handler. This syntax tells `mkdocstrings` where and how to insert generated documentation for a specific object.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n::: identifier\n    YAML block\n```\n\n----------------------------------------\n\nTITLE: Installing mkdocstrings with Python handler using pip (Bash)\nDESCRIPTION: Installs mkdocstrings with its official Python handler directly using pip. Requires Python and pip installed in the environment. The command adds an extra dependency so that mkdocstrings is configured for Python projects. Input: None. Output: mkdocstrings and the Python handler installed in the environment.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install 'mkdocstrings[python]'\n```\n\n----------------------------------------\n\nTITLE: Python Decorator Using functools.wraps to Preserve Function Metadata\nDESCRIPTION: This Python snippet implements a decorator that uses functools.wraps to wrap a given function. The decorator prints 'hello' before and 'bye' after executing the wrapped function and preserves the wrapped function's metadata such as the docstring and name, ensuring mkdocstrings can show the correct documentation for the wrapped function, not the wrapper itself.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/troubleshooting.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import wraps\n\n\ndef my_decorator(function):\n    \"\"\"The decorator docs.\"\"\"\n\n    @wraps(function)\n    def wrapped_function(*args, **kwargs):\n        print(\"hello\")\n        function(*args, **kwargs)\n        print(\"bye\")\n\n    return wrapped_function\n\n\n@my_decorator\ndef my_function(*args, **kwargs):\n    \"\"\"The function docs.\"\"\"\n    print(*args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Loading Inventory with URL and Environment Variables (mkdocs.yml)\nDESCRIPTION: This snippet illustrates how to incorporate environment variables for authentication when accessing the inventory file.  It uses the `${ENV_VAR}` format, which allows sensitive data like usernames and passwords to be stored securely outside the `mkdocs.yml` file.  It replaces the values with environment variables at build time. \nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n- url: https://${USERNAME}:${PASSWORD}@private.example.com/version/objects.inv\n```\n\n----------------------------------------\n\nTITLE: Creating Cross-References (Markdown)\nDESCRIPTION: This Markdown snippet introduces the syntax for creating cross-references to documented objects using reference-style links `[text][identifier]`. It shows how to provide custom link text (e.g., \"Object 1\") or use the identifier itself as the link text (`[full.path.object2][]`), allowing seamless linking between different parts of the documentation generated by `mkdocstrings`.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\nWith a custom title:\n[`Object 1`][full.path.object1]\n\nWith the identifier as title:\n[full.path.object2][]\n```\n\n----------------------------------------\n\nTITLE: Configuring API Reference with mkdocstrings\nDESCRIPTION: This snippet configures mkdocstrings to generate an API reference. The title for the page is set to 'API reference'. Navigation is hidden to focus solely on the API documentation. The `options` section enables the display of submodules within the generated documentation. There are no specific dependencies needed for this configuration, it relies on the correct installation and configuration of mkdocstrings.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/reference/mkdocstrings.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ntitle: API reference\nhide:\n- navigation\n\n# ::: mkdocstrings\n    options:\n        show_submodules: true\n```\n\n----------------------------------------\n\nTITLE: Loading Inventory from URL (mkdocs.yml)\nDESCRIPTION: This snippet configures the mkdocstrings plugin in `mkdocs.yml` to load an inventory file from a specified URL.  It tells mkdocstrings where to find the inventory, enabling cross-referencing to items from the project providing the inventory. The handler is set to python and the `inventories` setting specifies the URL.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n- mkdocstrings:\n    handlers:\n      python:\n        inventories:\n        - https://installer.readthedocs.io/en/stable/objects.inv\n```\n\n----------------------------------------\n\nTITLE: Defining Python Class with Docstrings (Python)\nDESCRIPTION: This Python code defines the source object (`MyClass`) that `mkdocstrings` will document. It includes a class docstring and docstrings for its methods (`method_a`, `method_b`, `method_c`), which provide the textual content for the generated documentation. The structure within `src/my_package/my_module.py` is typical for Python libraries.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclass MyClass:\n    \"\"\"Print print print!\"\"\"\n\n    def method_a(self):\n        \"\"\"Print A!\"\"\"\n        print(\"A!\")\n\n    def method_b(self):\n        \"\"\"Print B!\"\"\"\n        print(\"B!\")\n\n    def method_c(self):\n        \"\"\"Print C!\"\"\"\n        print(\"C!\")\n```\n\n----------------------------------------\n\nTITLE: Loading Inventory with URL and Base URL (mkdocs.yml)\nDESCRIPTION: This YAML configuration demonstrates how to specify both the URL of the inventory file and the base URL for the project's documentation.  This is useful when the inventory file isn't served under the same base URL as the documentation.  The `url` specifies the inventory file's location and the `base_url` specifies the documentation URL.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n- mkdocstrings:\n    handlers:\n      python:\n        inventories:\n        - url: https://cdn.example.com/version/objects.inv\n          base_url: https://docs.example.com/version\n```\n\n----------------------------------------\n\nTITLE: Documenting Python Function with Internal Heading (Markdown)\nDESCRIPTION: This Markdown snippet uses the standard `::: identifier` syntax to instruct `mkdocstrings` to generate documentation for the `foo.bar` Python function. This process includes parsing its docstring and any embedded Markdown headings, making them available as potential cross-reference targets via the `autorefs` plugin.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_16\n\nLANGUAGE: Markdown\nCODE:\n```\n::: foo.bar\n```\n\n----------------------------------------\n\nTITLE: Loading Inventory with URL and Token (mkdocs.yml)\nDESCRIPTION: This example demonstrates how to use token authentication in the URL for accessing an inventory file. It shows the URL structure for passing a token, which is a more secure method than directly including username/password. This is still sensitive information.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n- url: https://token123@private.example.com/version/objects.inv\n```\n\n----------------------------------------\n\nTITLE: Python Enum Class with Docstrings for Enum Members\nDESCRIPTION: This snippet illustrates different ways to document Python enum members so that mkdocstrings can pick up their documentation. The first approach shows enum members with inline comments (unsupported), while the others use triple-quoted strings as member docstrings or a class-level docstring with an Attributes section, which are supported by mkdocstrings and griffe-sphinx extension for extracting member descriptions correctly.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/troubleshooting.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport enum\n\n\nclass MyEnum(enum.Enum):\n    v1 = 1\n    \"\"\"The first choice.\"\"\"\n\n    v2 = 2\n    \"\"\"The second choice.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Generating Reference Pages and Literate Nav with mkdocs-gen-files in Python\nDESCRIPTION: This Python script utilizes mkdocs_gen_files.Nav to dynamically build a hierarchical navigation object alongside generating Markdown pages for each Python module. At the end, a SUMMARY.md file is written with the assembled literate navigation, usable by mkdocs-literate-nav. Dependencies are mkdocs_gen_files and Python 3. Inputs are all Python files under the src directory. Output includes Markdown reference files and a literate navigation file.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/recipes.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Generate the code reference pages and navigation.\"\"\"\n\nfrom pathlib import Path\n\nimport mkdocs_gen_files\n\nnav = mkdocs_gen_files.Nav()\n\nroot = Path(__file__).parent.parent\nsrc = root / \"src\"\n\nfor path in sorted(src.rglob(\"*.py\")):\n    module_path = path.relative_to(src).with_suffix(\"\")\n    doc_path = path.relative_to(src).with_suffix(\".md\")\n    full_doc_path = Path(\"reference\", doc_path)\n\n    parts = tuple(module_path.parts)\n\n    if parts[-1] == \"__init__\":\n        parts = parts[:-1]\n    elif parts[-1] == \"__main__\":\n        continue\n\n    nav[parts] = doc_path.as_posix()  # (1)!\n\n    with mkdocs_gen_files.open(full_doc_path, \"w\") as fd:\n        ident = \".\".join(parts)\n        fd.write(f\"::: {ident}\")\n\n    mkdocs_gen_files.set_edit_path(full_doc_path, path.relative_to(root))\n\nwith mkdocs_gen_files.open(\"reference/SUMMARY.md\", \"w\") as nav_file:  # (2)!\n    nav_file.writelines(nav.build_literate_nav())  # (3)!\n```\n\n----------------------------------------\n\nTITLE: Loading Inventory with URL and Credentials (mkdocs.yml)\nDESCRIPTION: This snippet shows how to include credentials in the URL for inventory files that require authentication. It uses the format `username:password@` before the domain name. It could potentially include sensitive information, so it's important to use this carefully.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n- url: https://username:password@private.example.com/version/objects.inv\n```\n\n----------------------------------------\n\nTITLE: Python Docstring with Internal Markdown Heading (Python)\nDESCRIPTION: This Python code defines a function (`bar`) whose docstring contains embedded Markdown content, specifically an H2 heading (`# Tips`). `mkdocstrings` parses this Markdown within the docstring, and the `autorefs` plugin generates a unique anchor for the internal heading, enabling direct linking to this specific section within the docstring documentation.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\ndef bar():\n    \"\"\"Hello, world!\n\n    # Tips\n\n    - Stay hydrated.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Generating Code Reference Pages with mkdocs-gen-files in Python\nDESCRIPTION: This Python script recursively finds all Python source files under the src directory and programmatically generates corresponding Markdown reference pages in a reference/ directory for each module. It includes logic for implicit module handling ('__init__'), skipping '__main__', and constructs mkdocstrings autodoc identifiers. The mkdocs_gen_files package is required. Input is the file tree under src; output is a set of auto-generated Markdown files and updated edit paths for MkDocs.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/recipes.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Generate the code reference pages.\"\"\"\n\nfrom pathlib import Path\n\nimport mkdocs_gen_files\n\nroot = Path(__file__).parent.parent\nsrc = root / \"src\"  # (1)!\n\nfor path in sorted(src.rglob(\"*.py\")):  # (2)!\n    module_path = path.relative_to(src).with_suffix(\"\")  # (3)!\n    doc_path = path.relative_to(src).with_suffix(\".md\")  # (4)!\n    full_doc_path = Path(\"reference\", doc_path)  # (5)!\n\n    parts = tuple(module_path.parts)\n\n    if parts[-1] == \"__init__\":  # (6)!\n        parts = parts[:-1]\n    elif parts[-1] == \"__main__\":\n        continue\n\n    with mkdocs_gen_files.open(full_doc_path, \"w\") as fd:  # (7)!\n        identifier = \".\".join(parts)  # (8)!\n        print(\"::: \" + identifier, file=fd)  # (9)!\n\n    mkdocs_gen_files.set_edit_path(full_doc_path, path.relative_to(root))  # (10)!\n```\n\n----------------------------------------\n\nTITLE: Linking to Standard Markdown Heading (Markdown)\nDESCRIPTION: This Markdown file (`doc2.md`) demonstrates creating a cross-reference link to the standard Markdown heading defined in `doc1.md`. Using the reference-style link syntax `[Hello, World!][hello-world]`, where `hello-world` is the slugified anchor of the target heading, allows linking to non-API documentation sections when the `autorefs` plugin is active.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_13\n\nLANGUAGE: Markdown\nCODE:\n```\n## Something else\n\nPlease see the [Hello, World!][hello-world] section.\n```\n\n----------------------------------------\n\nTITLE: Installing Cloned mkdocstrings Insiders in Editable Mode - pip/Bash\nDESCRIPTION: Installs the previously cloned mkdocstrings Insiders repository locally in \"editable\" mode using pip. This means that changes made to the source files in the cloned `mkdocstrings` directory will immediately affect the installed package without requiring reinstallation, suitable for development. Requires the current working directory to contain the cloned repository folder.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/insiders/installation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install -e mkdocstrings\n```\n\n----------------------------------------\n\nTITLE: Linking to Docstring Internal Heading (Markdown)\nDESCRIPTION: This Markdown snippet demonstrates creating a cross-reference link specifically targeting an internal Markdown heading within a documented object's docstring. The syntax `[tips][foo.bar--tips]` uses the object's identifier (`foo.bar`) combined with the slugified heading text (`tips`), separated by `--`, to form the anchor, allowing deep linking into the generated documentation.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_17\n\nLANGUAGE: Markdown\nCODE:\n```\nCheck out the [tips][foo.bar--tips]\n```\n\n----------------------------------------\n\nTITLE: Cross-referencing items (Markdown)\nDESCRIPTION: This markdown snippet demonstrates how to reference an item from an external inventory. It uses the `installer.records` syntax to link to the corresponding item, given that the inventory has been loaded correctly. This uses a standard Markdown link format with an item name inside the brackets.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_20\n\nLANGUAGE: md\nCODE:\n```\nSee [installer.records][] to learn about records.\n```\n\n----------------------------------------\n\nTITLE: Loading Inventory with URL (mkdocs.yml) - latest\nDESCRIPTION: This configuration is similar to the first, but instead of using the 'stable' tag it uses 'latest' in the URL.  This will load the inventory from the latest version of the specified project. The handler is set to python and the `inventories` setting specifies the URL.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n- mkdocstrings:\n    handlers:\n      python:\n        inventories:\n        # latest instead of stable\n        - https://installer.readthedocs.io/en/latest/objects.inv\n```\n\n----------------------------------------\n\nTITLE: Enabling Autorefs Plugin in MkDocs (YAML)\nDESCRIPTION: This `mkdocs.yml` configuration block shows how to enable the `autorefs` plugin alongside `mkdocstrings`. Adding `autorefs` to the `plugins` list allows the cross-reference syntax `[text][anchor]` to link not only to `mkdocstrings`-documented objects but also to any standard Markdown heading defined throughout the documentation site. This expands the linking capabilities significantly.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\nplugins:\n- search\n- autorefs\n- mkdocstrings:\n    [...]\n```\n\n----------------------------------------\n\nTITLE: Configuring MkDocs with mkdocs-gen-files Plugin in YAML\nDESCRIPTION: This YAML snippet illustrates how to add and configure the mkdocs-gen-files plugin in the MkDocs configuration. The plugin runs a Python script during build time, enabling dynamic generation of documentation pages for source modules. Dependencies include MkDocs and mkdocs-gen-files; the 'scripts' list should reference Python scripts used for page generation.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/recipes.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n- search  # (1)!\n- gen-files:\n    scripts:\n    - scripts/gen_ref_pages.py  # (2)!\n- mkdocstrings\n```\n\n----------------------------------------\n\nTITLE: Overriding Global Options Locally (YAML)\nDESCRIPTION: This YAML snippet from a Markdown file's local `:::` block illustrates how local options override global ones defined in `mkdocs.yml`. By setting `show_source: true` within the `options` block for this specific object, it overrides the global `show_source: false` setting, allowing fine-grained control over individual documentation entries.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\n::: my_package.my_module.MyClass\n    options:\n      show_source: true\n```\n\n----------------------------------------\n\nTITLE: Configuring mkdocs.yml for pymdownx.superfences Extension in Markdown\nDESCRIPTION: This YAML snippet shows proper configuration of the mkdocs.yml file to enable the pymdownx.superfences extension necessary for correctly rendering code blocks inside admonitions. The snippet lists markdown_extensions including 'admonition', 'codehilite', and 'pymdownx.superfences'. This configuration ensures fenced code blocks nested within admonitions display as expected.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/troubleshooting.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmarkdown_extensions:\n- admonition\n- codehilite\n- pymdownx.superfences\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration to Enable Submodule Rendering in mkdocstrings Python Handler\nDESCRIPTION: This YAML snippet configures the mkdocstrings MkDocs plugin with options to enable rendering of submodules for the Python handler by setting 'show_submodules' to true. In recent mkdocstrings versions, submodules are not rendered by default and require explicit activation through this option in mkdocs.yml.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/troubleshooting.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_submodules: true\n```\n\n----------------------------------------\n\nTITLE: Deferring Code Reference Navigation to Literate Nav in YAML\nDESCRIPTION: This YAML snippet demonstrates how to simplify the navigation configuration in mkdocs.yml by deferring the entire 'Code Reference' section to a directory ('reference/') managed by the literate navigation plugin. This configuration assumes a SUMMARY.md file will be generated that mkdocs-literate-nav uses to build the navigation tree.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/recipes.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nnav:\n# rest of the navigation...\n# defer to gen-files + literate-nav\n- Code Reference: reference/  # (1)!\n# rest of the navigation...\n```\n\n----------------------------------------\n\nTITLE: Rendered Class Documentation (HTML)\nDESCRIPTION: This HTML snippet represents the output generated by `mkdocstrings` when processing the `:::` block referencing `MyClass`. It shows how the Python docstrings are rendered into HTML paragraphs and headings, including method signatures and docstrings, styled to fit within the MkDocs theme. This illustrates the final result of the autodocumentation process.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<h3 id=\"documentation-for-myclass\" style=\"margin: 0;\">Documentation for <code>MyClass</code></h3>\n<div><div><p>Print print print!</p><div><div>\n<h4 id=\"mkdocstrings.my_module.MyClass.method_a\">\n<code class=\"highlight language-python\">\nmethod_a<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> </code>\n</h4><div>\n<p>Print A!</p></div></div><div><h4 id=\"mkdocstrings.my_module.MyClass.method_b\">\n<code class=\"highlight language-python\">\nmethod_b<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> </code>\n</h4><div><p>Print B!</p></div></div></div></div></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing get_inventory_urls method in Python\nDESCRIPTION: This snippet shows how to implement the `get_inventory_urls` method in a custom handler class in mkdocstrings. This method is now responsible for handling the inventory configuration and returning a list of URLs to download. It allows handlers to have full control over the \"inventory\" setting, which was previously managed by mkdocstrings.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/CHANGELOG.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom copy import deepcopy\n\n\ndef get_handler(..., handler_config, ...):\n    return MyHandler(..., config=handler_config, ...)\n\n\nclass MyHandler:\n    def __init__(self, ..., config, ...):\n        self.config = config\n\n    def get_inventory_urls(self):\n        config = deepcopy(self.config[\"import\"])\n        return [(inv, {}) if isinstance(inv, str) else (inv.pop(\"url\"), inv) for inv in config]\n```\n\n----------------------------------------\n\nTITLE: Implementing get_options method in Python\nDESCRIPTION: This snippet demonstrates how to implement the `get_options` method in a custom handler class in mkdocstrings. This method is now responsible for merging global and local options and returning the combined options. Handlers must store their own global options (in an instance attribute), and implement a `get_options` method that receives `local_options` (a dict) and returns combined options (dict or custom object).\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/CHANGELOG.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef get_handler(..., handler_config, ...):\n    return MyHandler(..., config=handler_config, ...)\n\n\nclass MyHandler:\n    def __init__(self, ..., config, ...):\n        self.config = config\n\n    def get_options(local_options):\n        return {**self.default_options, **self.config[\"options\"], **local_options}\n```\n\n----------------------------------------\n\nTITLE: Cloning mkdocstrings Insiders Repository - Git/Bash\nDESCRIPTION: Clones the source code of the mkdocstrings Insiders repository from GitHub to the local machine using the Git command-line tool via SSH. This is typically the first step when installing directly from the source code instead of using pip to fetch and install simultaneously, and requires Git and SSH configured.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/insiders/installation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:pawamoy-insiders/mkdocstrings\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS to MkDocs Configuration in YAML\nDESCRIPTION: MkDocs configuration snippet that adds a custom CSS file to the site for styling code blocks and other elements.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/recipes.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nextra_css:\n- css/code_select.css\n```\n\n----------------------------------------\n\nTITLE: Embedding Autodoc in Markdown Heading (Markdown)\nDESCRIPTION: This snippet shows an alternative, more compact syntax for triggering `mkdocstrings` autodoc by embedding the `::: identifier` directly within a Markdown heading line. This method is useful for integrating the generated documentation tightly under a specific section heading in the Markdown file.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n## ::: my_package.my_module.MyClass\n    options:\n      show_source: false\n```\n\n----------------------------------------\n\nTITLE: Supporting Both 'import' and 'inventories' keys in Python\nDESCRIPTION: This snippet demonstrates how to support both the old `'import'` key and the new `'inventories'` key in a handler's configuration in mkdocstrings. This ensures backward compatibility while transitioning to the new configuration structure. A `FutureWarning` is issued if the old key is used.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/CHANGELOG.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef get_handler(..., handler_config, ...):\n    if \"inventories\" not in handler_config and \"import\" in handler_config:\n        warn(\"The 'import' key is renamed 'inventories'\", FutureWarning)\n        handler_config[\"inventories\"] = handler_config.pop(\"import\")\n    return MyHandler(..., config=handler_config, ...)\n```\n\n----------------------------------------\n\nTITLE: Basic Code Reference Navigation Configuration in YAML\nDESCRIPTION: This YAML block illustrates how to manually add documentation navigation for each source module under 'Code Reference'. Each entry maps a module to its auto-generated Markdown page. Suitable when not using literate-nav automation. The configuration should be in mkdocs.yml and assumes reference pages exist under reference/project/.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/recipes.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nnav:\n# rest of the navigation...\n- Code Reference:\n  - project:\n    - lorem: reference/project/lorem.md\n    - ipsum: reference/project/ipsum.md\n    - dolor: reference/project/dolor.md\n    - sit: reference/project/sit.md\n    - amet: reference/project/amet.md\n# rest of the navigation...\n```\n\n----------------------------------------\n\nTITLE: Python Function Demonstrating Correct Footnote Placement in Docstrings\nDESCRIPTION: This snippet illustrates how to place footnotes within the same section as their references in Python docstrings to ensure mkdocstrings renders them correctly. It uses multiple Note sections with footnotes placed immediately after their references inside each section. Footnotes outside their referenced sections (e.g., all at the end) cause rendering issues.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/troubleshooting.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef my_function():\n    \"\"\"Summary.\n\n    This is the first section[^1].\n\n    [^1]: Some text.\n\n    Note:\n        This is the second section[^2].\n\n        [^2]: Some text.\n\n    Note:\n        This is the third section[^3].\n    \n        [^3]: Some text.\n\n    References at the end are part of yet another section (fourth here)[^4].\n\n    [^4]: Some text.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Injecting API Reference using mkdocstrings in Markdown (Markdown)\nDESCRIPTION: Demonstrates how to inject API documentation for a specific Python class or module using mkdocstrings syntax in a Markdown file. Requires the mkdocstrings plugin to be configured in mkdocs.yml and the target identifier to be importable. Input: Markdown file with mkdocstrings admonition. Output: Rendered documentation for 'my_library.my_module.my_class' at build time. The identifier and YAML configuration block (if present) are handled according to mkdocstrings' autodoc instructions.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/README.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n# Reference\n\n::: my_library.my_module.my_class\n```\n\n----------------------------------------\n\nTITLE: Installing mkdocstrings and mkdocstrings-python via conda (Bash)\nDESCRIPTION: Installs both mkdocstrings and the mkdocstrings-python handler using conda from the conda-forge channel. Requires conda installed on the system. Input: None. Output: mkdocstrings and mkdocstrings-python installed in the active conda environment.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge mkdocstrings mkdocstrings-python\n```\n\n----------------------------------------\n\nTITLE: Installing mkdocstrings-python handler directly via pip (Bash)\nDESCRIPTION: Installs the mkdocstrings-python handler package directly using pip, which implicitly installs mkdocstrings as a dependency. Requires Python and pip installed. Use when specific version control over handlers is needed. Input: None. Output: mkdocstrings-python and its dependencies installed.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install mkdocstrings-python\n```\n\n----------------------------------------\n\nTITLE: JavaScript Workaround to Fix Tabbed Content IDs in mkdocstrings (JavaScript)\nDESCRIPTION: This JavaScript snippet resets IDs and names of tab elements generated by the pymdownx.tabbed Markdown extension to fix broken links caused by multiple tab blocks on the same page in mkdocstrings versions prior to 0.14. It iterates over tabbed sets, assigning unique IDs and links to tabs and content, and programmatically opens the first tab. To use, include this script in a .js file and reference it in MkDocs' extra_javascript configuration.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/troubleshooting.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Credits to Nikolaos Zioulis (@zuru on GitHub)\nfunction setID(){\n    var tabs = document.getElementsByClassName(\"tabbed-set\");\n    for (var i = 0; i < tabs.length; i++) {\n        children = tabs[i].children;\n        var counter = 0;\n        var iscontent = 0;\n        for(var j = 0; j < children.length;j++){\n            if(typeof children[j].htmlFor === 'undefined'){\n                if((iscontent + 1) % 2 == 0){\n                    // check if it is content\n                    if(iscontent == 1){\n                        btn = children[j].childNodes[1].getElementsByTagName(\"button\");\n                    }\n                }\n                else{\n                    // if not change the id\n                    children[j].id = \"__tabbed_\" + String(i + 1) + \"_\" + String(counter + 1);\n                    children[j].name = \"__tabbed_\" + String(i + 1);\n                    // make default tab open\n                    if(j == 0)\n                        children[j].click();\n                }\n                iscontent++;\n            }\n            else{\n                // link to the correct tab\n                children[j].htmlFor = \"__tabbed_\" + String(i+1) + \"_\" + String(counter + 1);\n                counter ++;\n            }\n        }\n    }\n}\nsetID();\n```\n\n----------------------------------------\n\nTITLE: Installing mkdocstrings Insiders using pip (SSH) - Bash\nDESCRIPTION: Installs the mkdocstrings Insiders package directly from its Git repository on GitHub using pip's ability to install from Git URLs via SSH. This method requires the user to have SSH keys set up with their GitHub account and added to their SSH agent for authentication.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/insiders/installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install git+ssh://git@github.com/pawamoy-insiders/mkdocstrings.git\n```\n\n----------------------------------------\n\nTITLE: Defining a Python Function with a Raw Docstring Containing LaTeX Math\nDESCRIPTION: This Python code snippet demonstrates defining a function with a raw triple-quoted docstring (prefixed by r) that contains LaTeX math inside a fenced 'math' code block. This ensures the LaTeX expressions are not escaped improperly when rendered by Markdown extensions like Arithmatex Mathjax or markdown-katex, enabling correct display of mathematical formulas in generated documentation.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/troubleshooting.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef math_function(x, y):\n    r\"\"\"\n    Look at these formulas:\n\n    ```math\n    f(x) = \\int_{-\\infty}^\\infty\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\n    \\,d\\xi\n    ```\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Equivalent Autodoc with Heading Level Option (Markdown)\nDESCRIPTION: This Markdown snippet clarifies that embedding `:::` in a heading is semantically equivalent to using the block syntax with the `heading_level` option explicitly set to the corresponding heading level (e.g., level 2 for `##`). This confirms that the `heading_level` option is the underlying mechanism controlling the output heading structure.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n::: my_package.my_module.MyClass\n    options:\n      show_source: false\n      heading_level: 2\n```\n\n----------------------------------------\n\nTITLE: Rendering Completed Funding Goals\nDESCRIPTION: This Python code snippet iterates through the `goals` dictionary and renders only the `complete` goals.  This is likely intended to display previously completed goals to the user.  `exec=\"1\"` executes the snippet. `session=\"insiders\"` indicates that this is part of the Insiders context.  `idprefix=\"\"` denotes an empty identifier prefix.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/insiders/index.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfor goal in goals.values():\n    if goal.complete:\n        goal.render()\n```\n\n----------------------------------------\n\nTITLE: Rendering Funding Goals (Completed/Incomplete)\nDESCRIPTION: This Python code snippet iterates through a dictionary named `goals` and calls the `render()` method on each goal. Depending on whether a goal is marked as `complete`, it renders the goal in either the 'Goals' or 'Goals Completed' section, providing information about the funding goals.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/insiders/index.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfor goal in goals.values():\n    if not goal.complete:\n        goal.render()\n```\n\n----------------------------------------\n\nTITLE: Example Markdown File with Heading (Markdown)\nDESCRIPTION: This Markdown file (`doc1.md`) contains a simple top-level heading (`## Hello, world!`). When the `autorefs` plugin is enabled, this heading automatically gets an anchor generated based on its slugified text (e.g., `hello-world`), making it a valid target for cross-referencing from other pages using the `[text][hello-world]` syntax.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_12\n\nLANGUAGE: Markdown\nCODE:\n```\n## Hello, world!\n\nTesting\n```\n\n----------------------------------------\n\nTITLE: Defining Entry Point in pyproject.toml\nDESCRIPTION: This snippet demonstrates how to define an entry-point in `pyproject.toml` to register templates for a specific mkdocstrings handler. Replace `python` with the target handler name, `extension-name` with a unique name for the extension, and `extension_package:get_templates_path` with the module path to the function that returns the templates path. The defined entry point enables mkdocstrings to discover and use the extension's templates when rendering documentation.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/handlers.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[project.entry-points.\"mkdocstrings.python.templates\"] # (1)!\nextension-name = \"extension_package:get_templates_path\" # (2)!\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Source for Insiders\nDESCRIPTION: This Python code snippet initializes a list called `data_source`.  This list contains paths to YAML files containing data for Insiders features and their associated projects. The `exec=\"1\"` attribute means the code is intended to be executed. The `session=\"insiders\"` attribute indicates the session it's executed in.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/insiders/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndata_source = [\n    \"docs/insiders/goals.yml\",\n    (\"griffe-pydantic\", \"https://mkdocstrings.github.io/griffe-pydantic/\", \"insiders/goals.yml\"),\n    (\"griffe-typedoc\", \"https://mkdocstrings.github.io/griffe-typedoc/\", \"insiders/goals.yml\"),\n    (\"griffe-warnings-deprecated\", \"https://mkdocstrings.github.io/griffe-warnings-deprecated/\", \"insiders/goals.yml\"),\n    (\"mkdocstrings-c\", \"https://mkdocstrings.github.io/c/\", \"insiders/goals.yml\"),\n    (\"mkdocstrings-python\", \"https://mkdocstrings.github.io/python/\", \"insiders/goals.yml\"),\n    (\"mkdocstrings-shell\", \"https://mkdocstrings.github.io/shell/\", \"insiders/goals.yml\"),\n    (\"mkdocstrings-typescript\", \"https://mkdocstrings.github.io/typescript/\", \"insiders/goals.yml\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Adjusting Edit Path for Correct GitHub Links in Python\nDESCRIPTION: This single-line Python snippet demonstrates how to set the edit path so edit links in generated pages point to the correct locations in the repository, outside the docs folder. Useful when the documentation source and code are separated in the directory structure. mkdocs_gen_files must be imported.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/recipes.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmkdocs_gen_files.set_edit_path(full_doc_path, Path(\"../\") / path)  # (1)!\n```\n\n----------------------------------------\n\nTITLE: Installing mkdocstrings Insiders using pip (HTTPS with Token) - Bash\nDESCRIPTION: Installs the mkdocstrings Insiders package from the GitHub repository using pip via HTTPS authentication. This method requires a GitHub Personal Access Token (PAT) with the `repo` scope, passed via the `GH_TOKEN` environment variable, to authenticate the Git clone operation during installation.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/insiders/installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://${GH_TOKEN}@github.com/pawamoy-insiders/mkdocstrings.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Literate Navigation with mkdocs-literate-nav in YAML\nDESCRIPTION: This YAML configuration snippet shows how to enable mkdocs-literate-nav for literate navigation from a Markdown file like SUMMARY.md. The 'nav_file' parameter should reference the literate nav file. The plugins section includes mkdocs-literate-nav in addition to mkdocs-gen-files, which generates navigation at build time.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/recipes.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n- search\n- gen-files:\n    scripts:\n    - scripts/gen_ref_pages.py\n- literate-nav:\n    nav_file: SUMMARY.md\n- mkdocstrings\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Templates with mkdocstrings YAML\nDESCRIPTION: Demonstrates how to specify a directory containing custom template overrides within the `mkdocs.yml` configuration file. This setting, `custom_templates`, tells the mkdocstrings plugin where to look for alternative template files for specific handlers and themes, enabling fine-grained control over the generated HTML output.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/theming.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nplugins:\n- mkdocstrings:\n    custom_templates: templates\n```\n\n----------------------------------------\n\nTITLE: Including External Markdown File in Mkdocs\nDESCRIPTION: This snippet uses the Mkdocs inclusion syntax (`--8<--`) to embed the entire content of the `CHANGELOG.md` file into the current Markdown page. This functionality typically requires an Mkdocs plugin like `mkdocs-include-markdown-plugin` to be installed and configured.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/changelog.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"CHANGELOG.md\"\n```\n\n----------------------------------------\n\nTITLE: Logging within mkdocstrings Jinja Templates\nDESCRIPTION: Illustrates how to use the built-in `log` function available inside mkdocstrings Jinja templates. This function allows template developers to output messages at different log levels (debug, info, warning, error, critical) for debugging purposes during the template rendering process.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/theming.md#_snippet_1\n\nLANGUAGE: Jinja\nCODE:\n```\n{{ log.debug(\"A DEBUG message.\") }}\n{{ log.info(\"An INFO message.\") }}\n{{ log.warning(\"A WARNING message.\") }}\n{{ log.error(\"An ERROR message.\") }}\n{{ log.critical(\"A CRITICAL message.\") }}\n```\n\n----------------------------------------\n\nTITLE: Example Python Function with Indented Code Block in Docstring\nDESCRIPTION: Example Python function with a docstring containing an indented code block that will be automatically highlighted using the default language setting from MkDocs configuration.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/recipes.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef my_function():\n    \"\"\"This is my function.\n\n    The following code will be highlighted as Python:\n\n        result = my_function()\n        print(result)\n\n    End of the docstring.\n    \"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Including LICENSE file content with markdown-include syntax\nDESCRIPTION: Uses markdown-include syntax to embed the content of the LICENSE file directly into the documentation page.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/license.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"LICENSE\"\n```\n\n----------------------------------------\n\nTITLE: Defining Handler Name Attribute in Python\nDESCRIPTION: This snippet demonstrates how to define the `name` attribute for a custom handler class in mkdocstrings.  The `name` attribute is now mandatory and should be defined directly within the handler's class. This replaces the previous method of passing the handler name as an argument to the constructor.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyHandler:\n    name = \"myhandler\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MkDocs Plugins in YAML for Section Binding\nDESCRIPTION: MkDocs configuration that includes the section-index plugin along with gen-files, literate-nav, and mkdocstrings to enable binding __init__ modules to their parent sections.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/recipes.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n- search\n- gen-files:\n    scripts:\n    - scripts/gen_ref_pages.py\n- literate-nav:\n    nav_file: SUMMARY.md\n- section-index\n- mkdocstrings\n```\n\n----------------------------------------\n\nTITLE: Generating Code Reference Pages with Section Binding in Python\nDESCRIPTION: A script that generates code reference pages and navigation with improved section binding using mkdocs-gen-files. It handles special cases for __init__.py files by binding them to the section itself, and skips __main__.py files.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/recipes.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Generate the code reference pages and navigation.\"\"\"\n\nfrom pathlib import Path\n\nimport mkdocs_gen_files\n\nnav = mkdocs_gen_files.Nav()\n\nroot = Path(__file__).parent.parent\nsrc = root / \"src\"\n\nfor path in sorted(src.rglob(\"*.py\")):\n    module_path = path.relative_to(src).with_suffix(\"\")\n    doc_path = path.relative_to(src).with_suffix(\".md\")\n    full_doc_path = Path(\"reference\", doc_path)\n\n    parts = tuple(module_path.parts)\n\n    if parts[-1] == \"__init__\":\n        parts = parts[:-1]\n        doc_path = doc_path.with_name(\"index.md\")\n        full_doc_path = full_doc_path.with_name(\"index.md\")\n    elif parts[-1] == \"__main__\":\n        continue\n\n    nav[parts] = doc_path.as_posix()\n\n    with mkdocs_gen_files.open(full_doc_path, \"w\") as fd:\n        ident = \".\".join(parts)\n        fd.write(f\"::: {ident}\")\n\n    mkdocs_gen_files.set_edit_path(full_doc_path, path.relative_to(root))\n\nwith mkdocs_gen_files.open(\"reference/SUMMARY.md\", \"w\") as nav_file:\n    nav_file.writelines(nav.build_literate_nav())\n```\n\n----------------------------------------\n\nTITLE: Disable Inventory Generation (mkdocs.yml)\nDESCRIPTION: This snippet shows how to explicitly disable the automatic generation of the `objects.inv` file using the `enable_inventory` option. Setting this to `false` prevents mkdocstrings from creating the inventory file. This is useful if you don't want other projects to cross-reference your documentation.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n- mkdocstrings:\n    enable_inventory: false\n```\n\n----------------------------------------\n\nTITLE: Setting Default Syntax Highlighting for Indented Code Blocks in YAML\nDESCRIPTION: MkDocs configuration that sets Python as the default syntax highlighting language for all indented code blocks in docstrings, improving readability without explicit language annotations.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/recipes.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nmarkdown_extensions:\n- pymdownx.highlight:\n    default_lang: python\n```\n\n----------------------------------------\n\nTITLE: Enhanced CSS Selector for Python Console Code Blocks\nDESCRIPTION: More specific CSS selector that targets only pycon code blocks when using Pygments language classes, avoiding unintended side effects on other code blocks.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/recipes.md#_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.language-pycon .gp, .language-pycon .go { /* Generic.Prompt, Generic.Output */\n    user-select: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pygments Highlighting in MkDocs with YAML\nDESCRIPTION: MkDocs configuration for the pymdownx.highlight extension that enables Pygments syntax highlighting with language classes on code blocks, allowing for more specific CSS targeting.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/recipes.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nmarkdown_extensions:\n- pymdownx.highlight:\n    use_pygments: true\n    pygments_lang_class: true\n```\n\n----------------------------------------\n\nTITLE: Hiding Documentation Strings in Source Code Blocks with CSS\nDESCRIPTION: CSS rules that hide documentation strings in source code blocks rendered by mkdocstrings handlers, reducing redundancy when the same docstrings are rendered elsewhere on the page.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/recipes.md#_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n/* These CSS classes depend on the handler. */\n.doc-contents details .highlight code {\n  line-height: 0;\n}\n.doc-contents details .highlight code > * {\n  line-height: initial;\n}\n.doc-contents details .highlight code > .sd {  /* Literal.String.Doc */\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Overview Page in Markdown\nDESCRIPTION: YAML frontmatter configuration for a documentation overview page. It sets the page title to 'Overview', hides feedback controls, and includes the project's README.md file using the markdown-include syntax.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/index.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Overview\nhide:\n- feedback\n---\n\n--8<-- \"README.md\"\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Rules to Prevent Selection of Python Prompts and Output\nDESCRIPTION: CSS rules that prevent users from selecting Python prompts (>>>, ...) and outputs in code blocks with pycon syntax highlighting, improving copy-paste experience for code examples.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/recipes.md#_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.highlight .gp, .highlight .go { /* Generic.Prompt, Generic.Output */\n    user-select: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Including an external Markdown file with mkdocs-material snippet syntax\nDESCRIPTION: Uses the mkdocs-material snippet inclusion syntax to embed the contents of CODE_OF_CONDUCT.md directly into this document. This technique allows maintaining the Code of Conduct in a separate file while displaying it in the documentation.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/code_of_conduct.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"CODE_OF_CONDUCT.md\"\n```\n\n----------------------------------------\n\nTITLE: Returning Templates Path in Python\nDESCRIPTION: This Python snippet shows how to create a function that returns the path to a directory containing templates for a mkdocstrings extension. The `get_templates_path` function uses `pathlib.Path` to construct the path to the `templates` directory located within the `extension_package`. This path is then used by mkdocstrings to locate and load the extension's templates when rendering documentation.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/handlers.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\n\n\ndef get_templates_path() -> Path:\n    return Path(__file__).parent / \"templates\"\n```\n\n----------------------------------------\n\nTITLE: Executing Python Script for Generating Credits in Markdown\nDESCRIPTION: This snippet executes the external Python script 'scripts/gen_credits.py' to generate the project's credits section. It requires that the script be present at the specified relative path and assumes Python is available for execution. The snippet is embedded within a markdown code block that supports execution, ensuring the output is dynamically generated and displayed. The primary input is the project metadata utilized by the script, and the output is the generated credits content. Limitations include dependency on the external script's existence and correctness.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/credits.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"scripts/gen_credits.py\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Unreleased Insiders Features\nDESCRIPTION: This Python code snippet conditionally prints information about unreleased features to sponsors.  It reads a file located at `scripts/insiders.py` to retrieve the `unreleased_features` variable. If there are unreleased features, it iterates through them and renders them with badges. The code also has a fallback message for when there are no unreleased features. `exec=\"1\"` executes it. `session=\"insiders\"` specifies the execution session. `idprefix=\"\"` means an empty id prefix.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/insiders/index.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nif unreleased_features:\n    print(\n        \"The moment you [become a sponsor](#how-to-become-a-sponsor), you'll get **immediate \"\n        f\"access to {len(unreleased_features)} additional features** that you can start using right away, and \"\n        \"which are currently exclusively available to sponsors:\\n\"\n    )\n\n    for feature in unreleased_features:\n        feature.render(badge=True)\n\n    print(\n        \"\\n\\nThese are just the features related to this project. \"\n        \"[See the complete feature list on the author's main Insiders page](https://pawamoy.github.io/insiders/#whats-in-it-for-me).\"\n    )\nelse:\n    print(\n        \"The moment you [become a sponsor](#how-to-become-a-sponsor), you'll get immediate \"\n        \"access to all released features that you can start using right away, and \"\n        \"which are exclusively available to sponsors. At this moment, there are no \"\n        \"Insiders features for this project, but checkout the [next funding goals](#goals) \"\n        \"to see what's coming, as well as **[the feature list for all Insiders projects](https://pawamoy.github.io/insiders/#whats-in-it-for-me).**\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Rendered Link to Docstring Sub-Heading (HTML)\nDESCRIPTION: This HTML snippet displays the rendered output of the cross-reference link `[tips][foo.bar--tips]`. It shows the link resolved to an `<a>` tag pointing to the correct page (`doc1.html`) and the anchor (`#foo.bar--tips`), which corresponds to the \"Tips\" heading embedded within the `foo.bar` function's docstring. This confirms that `mkdocstrings` and `autorefs` handle internal docstring links.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_18\n\nLANGUAGE: HTML\nCODE:\n```\n<p>Check out the <a href=\"doc1.html#foo.bar--tips\">tips</a></p>\n```\n\n----------------------------------------\n\nTITLE: Rendered Link to Markdown Heading (HTML)\nDESCRIPTION: This HTML snippet shows the rendered output of the cross-reference link `[Hello, World!][hello-world]` from `doc2.md`. With the `autorefs` plugin enabled, the link is resolved to an `<a>` tag pointing to the correct page (`doc1.html`) and the anchor (`#hello-world`) of the target Markdown heading, creating a standard intra-site link.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<p>Please see the <a href=\"doc1.html#hello-world\">Hello, World!</a> section.</p>\n```\n\n----------------------------------------\n\nTITLE: Result of Cross-reference (HTML)\nDESCRIPTION: This HTML snippet displays the result of the cross-reference in HTML.  It shows the final HTML output, which includes a link to an external documentation page.  It provides a working example of how the link would be formatted in a browser after the build process.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<p>See <a href=\"https://installer.readthedocs.io/en/stable/api/records/#module-installer.records\">installer.records</a>\n    to learn about records.</p>\n```\n\n----------------------------------------\n\nTITLE: Rendered Cross-Reference Links (HTML)\nDESCRIPTION: This HTML snippet demonstrates the rendered output of the cross-reference Markdown syntax. It shows that the reference-style links are transformed into standard HTML `<a>` tags, correctly pointing to the anchors (`#full.path.object1`, `#full.path.object2`) corresponding to the documented objects on their respective pages. This confirms the links are resolved correctly by MkDocs and `mkdocstrings`.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/docs/usage/index.md#_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<p>With a custom title:\n<a href=\"https://example.com/page1#full.path.object1\"><code>Object 1</code></a><p>\n<p>With the identifier as title:\n<a href=\"https://example.com/page2#full.path.object2\">full.path.object2</a></p>\n```\n\n----------------------------------------\n\nTITLE: Implementing get_aliases method in Python\nDESCRIPTION: This snippet demonstrates how to implement the `get_aliases` method in a custom handler class in mkdocstrings. This method replaces the deprecated `get_anchors` method and allows handlers to decide how to return aliases for a given identifier. The method accepts an `identifier` (string) and lets the handler decide how to return aliases for this identifier, offering more control than the previous `get_anchors` implementation.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/CHANGELOG.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass MyHandler:\n    def get_aliases(identifier):\n        try:\n            obj = self.collect(identifier, self.fallback_config)\n            # or obj = self._objects_cache[identifier]\n        except CollectionError:  # or KeyError\n            return ()\n        return ...  # previous logic in `get_anchors`\n```\n\n----------------------------------------\n\nTITLE: Accessing tool_config for base directory in Python\nDESCRIPTION: This snippet demonstrates how to access the `tool_config` argument to compute a \"base directory\" in a `get_handler` function in mkdocstrings. The `config_file_path` argument is now deprecated, and the `tool_config` argument should be used instead to access the configuration of the SSG tool in use (e.g., MkDocs).\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/CHANGELOG.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nbase_dir = Path(tool_config.config_file_path or \"./mkdocs.yml\").parent\n```\n\n----------------------------------------\n\nTITLE: Defining Handler Domain Attribute in Python\nDESCRIPTION: This snippet shows how to define the `domain` attribute for a custom handler class in mkdocstrings. The `domain` attribute is now mandatory and should be defined directly within the handler's class.  The `domain` class attribute on handlers is now mandatory and cannot be an empty string.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/CHANGELOG.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyHandler:\n    domain = \"mh\"\n```\n\n----------------------------------------\n\nTITLE: Explicitly Passing mdx Argument in Python\nDESCRIPTION: This code snippet illustrates how to explicitly pass the `mdx` argument from the `get_handler` function to the handler constructor and then to the base handler in mkdocstrings.  The `get_handler` function now receives a `mdx` argument, which it must forward to the handler constructor and then to the base handler.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/CHANGELOG.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_handler(..., mdx, ...):\n    return MyHandler(..., mdx=mdx, ...)\n\n\nclass MyHandler:\n    def __init__(self, ..., mdx, ...):\n        super().__init__(..., mdx=mdx, ...)\n```\n\n----------------------------------------\n\nTITLE: Passing mdx Argument Through kwargs in Python\nDESCRIPTION: This code snippet demonstrates passing the `mdx` argument from the `get_handler` function to the handler constructor using `**kwargs` in mkdocstrings. The `get_handler` function now receives a `mdx` argument, which it must forward to the handler constructor.\nSOURCE: https://github.com/mkdocstrings/mkdocstrings/blob/main/CHANGELOG.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_handler(..., **kwargs):\n    return MyHandler(..., **kwargs)\n\n\nclass MyHandler:\n    def __init__(self, ..., **kwargs):\n        super().__init__(**kwargs)\n```"
  }
]